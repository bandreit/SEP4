
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800200  00003a8c  00003b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001695  008002d6  008002d6  00003bf6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003bf6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008490  00000000  00000000  0000433c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002340  00000000  00000000  0000c7cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004484  00000000  00000000  0000eb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001854  00000000  00000000  00012f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c88  00000000  00000000  000147e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000079f3  00000000  00000000  0001746c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000678  00000000  00000000  0001ee5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e4 c0       	rjmp	.+456    	; 0x1ca <__ctors_end>
       2:	00 00       	nop
       4:	03 c1       	rjmp	.+518    	; 0x20c <__bad_interrupt>
       6:	00 00       	nop
       8:	01 c1       	rjmp	.+514    	; 0x20c <__bad_interrupt>
       a:	00 00       	nop
       c:	ff c0       	rjmp	.+510    	; 0x20c <__bad_interrupt>
       e:	00 00       	nop
      10:	fd c0       	rjmp	.+506    	; 0x20c <__bad_interrupt>
      12:	00 00       	nop
      14:	fb c0       	rjmp	.+502    	; 0x20c <__bad_interrupt>
      16:	00 00       	nop
      18:	f9 c0       	rjmp	.+498    	; 0x20c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f7 c0       	rjmp	.+494    	; 0x20c <__bad_interrupt>
      1e:	00 00       	nop
      20:	f5 c0       	rjmp	.+490    	; 0x20c <__bad_interrupt>
      22:	00 00       	nop
      24:	f3 c0       	rjmp	.+486    	; 0x20c <__bad_interrupt>
      26:	00 00       	nop
      28:	f1 c0       	rjmp	.+482    	; 0x20c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ef c0       	rjmp	.+478    	; 0x20c <__bad_interrupt>
      2e:	00 00       	nop
      30:	d6 c3       	rjmp	.+1964   	; 0x7de <__vector_12>
      32:	00 00       	nop
      34:	eb c0       	rjmp	.+470    	; 0x20c <__bad_interrupt>
      36:	00 00       	nop
      38:	e9 c0       	rjmp	.+466    	; 0x20c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e7 c0       	rjmp	.+462    	; 0x20c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e5 c0       	rjmp	.+458    	; 0x20c <__bad_interrupt>
      42:	00 00       	nop
      44:	e3 c0       	rjmp	.+454    	; 0x20c <__bad_interrupt>
      46:	00 00       	nop
      48:	e1 c0       	rjmp	.+450    	; 0x20c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	df c0       	rjmp	.+446    	; 0x20c <__bad_interrupt>
      4e:	00 00       	nop
      50:	dd c0       	rjmp	.+442    	; 0x20c <__bad_interrupt>
      52:	00 00       	nop
      54:	db c0       	rjmp	.+438    	; 0x20c <__bad_interrupt>
      56:	00 00       	nop
      58:	d9 c0       	rjmp	.+434    	; 0x20c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d7 c0       	rjmp	.+430    	; 0x20c <__bad_interrupt>
      5e:	00 00       	nop
      60:	d5 c0       	rjmp	.+426    	; 0x20c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__vector_25>
      68:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_26>
      6c:	cf c0       	rjmp	.+414    	; 0x20c <__bad_interrupt>
      6e:	00 00       	nop
      70:	cd c0       	rjmp	.+410    	; 0x20c <__bad_interrupt>
      72:	00 00       	nop
      74:	cb c0       	rjmp	.+406    	; 0x20c <__bad_interrupt>
      76:	00 00       	nop
      78:	c9 c0       	rjmp	.+402    	; 0x20c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c7 c0       	rjmp	.+398    	; 0x20c <__bad_interrupt>
      7e:	00 00       	nop
      80:	c5 c0       	rjmp	.+394    	; 0x20c <__bad_interrupt>
      82:	00 00       	nop
      84:	c3 c0       	rjmp	.+390    	; 0x20c <__bad_interrupt>
      86:	00 00       	nop
      88:	c1 c0       	rjmp	.+386    	; 0x20c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bf c0       	rjmp	.+382    	; 0x20c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__vector_36>
      94:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__vector_37>
      98:	b9 c0       	rjmp	.+370    	; 0x20c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__vector_39>
      a0:	b5 c0       	rjmp	.+362    	; 0x20c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b3 c0       	rjmp	.+358    	; 0x20c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b1 c0       	rjmp	.+354    	; 0x20c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	af c0       	rjmp	.+350    	; 0x20c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ad c0       	rjmp	.+346    	; 0x20c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ab c0       	rjmp	.+342    	; 0x20c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a9 c0       	rjmp	.+338    	; 0x20c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a7 c0       	rjmp	.+334    	; 0x20c <__bad_interrupt>
      be:	00 00       	nop
      c0:	a5 c0       	rjmp	.+330    	; 0x20c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a3 c0       	rjmp	.+326    	; 0x20c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a1 c0       	rjmp	.+322    	; 0x20c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__vector_51>
      d0:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_52>
      d4:	9b c0       	rjmp	.+310    	; 0x20c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__vector_54>
      dc:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__vector_55>
      e0:	95 c0       	rjmp	.+298    	; 0x20c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	24 10       	cpse	r2, r4
      e6:	24 10       	cpse	r2, r4
      e8:	24 10       	cpse	r2, r4
      ea:	5b 10       	cpse	r5, r11
      ec:	63 10       	cpse	r6, r3
      ee:	78 10       	cpse	r7, r8
      f0:	24 10       	cpse	r2, r4
      f2:	24 10       	cpse	r2, r4
      f4:	5b 10       	cpse	r5, r11
      f6:	63 10       	cpse	r6, r3
      f8:	3a 16       	cp	r3, r26
      fa:	aa 16       	cp	r10, r26
      fc:	aa 16       	cp	r10, r26
      fe:	aa 16       	cp	r10, r26
     100:	aa 16       	cp	r10, r26
     102:	aa 16       	cp	r10, r26
     104:	aa 16       	cp	r10, r26
     106:	aa 16       	cp	r10, r26
     108:	3a 16       	cp	r3, r26
     10a:	aa 16       	cp	r10, r26
     10c:	aa 16       	cp	r10, r26
     10e:	aa 16       	cp	r10, r26
     110:	aa 16       	cp	r10, r26
     112:	aa 16       	cp	r10, r26
     114:	aa 16       	cp	r10, r26
     116:	aa 16       	cp	r10, r26
     118:	3c 16       	cp	r3, r28
     11a:	aa 16       	cp	r10, r26
     11c:	aa 16       	cp	r10, r26
     11e:	aa 16       	cp	r10, r26
     120:	aa 16       	cp	r10, r26
     122:	aa 16       	cp	r10, r26
     124:	aa 16       	cp	r10, r26
     126:	aa 16       	cp	r10, r26
     128:	aa 16       	cp	r10, r26
     12a:	aa 16       	cp	r10, r26
     12c:	aa 16       	cp	r10, r26
     12e:	aa 16       	cp	r10, r26
     130:	aa 16       	cp	r10, r26
     132:	aa 16       	cp	r10, r26
     134:	aa 16       	cp	r10, r26
     136:	aa 16       	cp	r10, r26
     138:	3c 16       	cp	r3, r28
     13a:	aa 16       	cp	r10, r26
     13c:	aa 16       	cp	r10, r26
     13e:	aa 16       	cp	r10, r26
     140:	aa 16       	cp	r10, r26
     142:	aa 16       	cp	r10, r26
     144:	aa 16       	cp	r10, r26
     146:	aa 16       	cp	r10, r26
     148:	aa 16       	cp	r10, r26
     14a:	aa 16       	cp	r10, r26
     14c:	aa 16       	cp	r10, r26
     14e:	aa 16       	cp	r10, r26
     150:	aa 16       	cp	r10, r26
     152:	aa 16       	cp	r10, r26
     154:	aa 16       	cp	r10, r26
     156:	aa 16       	cp	r10, r26
     158:	a6 16       	cp	r10, r22
     15a:	aa 16       	cp	r10, r26
     15c:	aa 16       	cp	r10, r26
     15e:	aa 16       	cp	r10, r26
     160:	aa 16       	cp	r10, r26
     162:	aa 16       	cp	r10, r26
     164:	aa 16       	cp	r10, r26
     166:	aa 16       	cp	r10, r26
     168:	71 16       	cp	r7, r17
     16a:	aa 16       	cp	r10, r26
     16c:	aa 16       	cp	r10, r26
     16e:	aa 16       	cp	r10, r26
     170:	aa 16       	cp	r10, r26
     172:	aa 16       	cp	r10, r26
     174:	aa 16       	cp	r10, r26
     176:	aa 16       	cp	r10, r26
     178:	aa 16       	cp	r10, r26
     17a:	aa 16       	cp	r10, r26
     17c:	aa 16       	cp	r10, r26
     17e:	aa 16       	cp	r10, r26
     180:	aa 16       	cp	r10, r26
     182:	aa 16       	cp	r10, r26
     184:	aa 16       	cp	r10, r26
     186:	aa 16       	cp	r10, r26
     188:	65 16       	cp	r6, r21
     18a:	aa 16       	cp	r10, r26
     18c:	aa 16       	cp	r10, r26
     18e:	aa 16       	cp	r10, r26
     190:	aa 16       	cp	r10, r26
     192:	aa 16       	cp	r10, r26
     194:	aa 16       	cp	r10, r26
     196:	aa 16       	cp	r10, r26
     198:	89 16       	cp	r8, r25

0000019a <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     19a:	10 d7       	rcall	.+3616   	; 0xfbc <prvCheckTasksWaitingTermination>
     19c:	80 91 b3 18 	lds	r24, 0x18B3	; 0x8018b3 <pxReadyTasksLists>
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	08 f0       	brcs	.+2      	; 0x1a6 <prvIdleTask+0xc>
     1a4:	59 d2       	rcall	.+1202   	; 0x658 <vPortYield>
     1a6:	0e 94 a1 10 	call	0x2142	; 0x2142 <vApplicationIdleHook>
     1aa:	f7 cf       	rjmp	.-18     	; 0x19a <prvIdleTask>

000001ac <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	ce 01       	movw	r24, r28
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <prvGetNextExpireTime>
     1be:	49 81       	ldd	r20, Y+1	; 0x01
     1c0:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <prvProcessTimerOrBlockTask>
     1c4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <prvProcessReceivedCommands>
     1c8:	f6 cf       	rjmp	.-20     	; 0x1b6 <prvTimerTask+0xa>

000001ca <__ctors_end>:
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d1 e2       	ldi	r29, 0x21	; 33
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61
     1d6:	00 e0       	ldi	r16, 0x00	; 0
     1d8:	0c bf       	out	0x3c, r16	; 60

000001da <__do_copy_data>:
     1da:	12 e0       	ldi	r17, 0x02	; 2
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b2 e0       	ldi	r27, 0x02	; 2
     1e0:	ec e8       	ldi	r30, 0x8C	; 140
     1e2:	fa e3       	ldi	r31, 0x3A	; 58
     1e4:	00 e0       	ldi	r16, 0x00	; 0
     1e6:	0b bf       	out	0x3b, r16	; 59
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x14>
     1ea:	07 90       	elpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a6 3d       	cpi	r26, 0xD6	; 214
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0x10>

000001f4 <__do_clear_bss>:
     1f4:	29 e1       	ldi	r18, 0x19	; 25
     1f6:	a6 ed       	ldi	r26, 0xD6	; 214
     1f8:	b2 e0       	ldi	r27, 0x02	; 2
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	ab 36       	cpi	r26, 0x6B	; 107
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>
     204:	0e 94 2a 11 	call	0x2254	; 0x2254 <main>
     208:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <_exit>

0000020c <__bad_interrupt>:
     20c:	f9 ce       	rjmp	.-526    	; 0x0 <__vectors>

0000020e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     20e:	e2 ee       	ldi	r30, 0xE2	; 226
     210:	f2 e0       	ldi	r31, 0x02	; 2
     212:	a6 ee       	ldi	r26, 0xE6	; 230
     214:	b2 e0       	ldi	r27, 0x02	; 2
     216:	b1 83       	std	Z+1, r27	; 0x01
     218:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     21a:	13 82       	std	Z+3, r1	; 0x03
     21c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     21e:	ee e5       	ldi	r30, 0x5E	; 94
     220:	f8 e1       	ldi	r31, 0x18	; 24
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     222:	f0 93 e1 02 	sts	0x02E1, r31	; 0x8002e1 <pxEnd+0x1>
     226:	e0 93 e0 02 	sts	0x02E0, r30	; 0x8002e0 <pxEnd>
    pxEnd->xBlockSize = 0;
     22a:	13 82       	std	Z+3, r1	; 0x03
     22c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     22e:	11 82       	std	Z+1, r1	; 0x01
     230:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     232:	88 e7       	ldi	r24, 0x78	; 120
     234:	95 e1       	ldi	r25, 0x15	; 21
     236:	13 96       	adiw	r26, 0x03	; 3
     238:	9c 93       	st	X, r25
     23a:	8e 93       	st	-X, r24
     23c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     23e:	ed 93       	st	X+, r30
     240:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     242:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <xMinimumEverFreeBytesRemaining+0x1>
     246:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     24a:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <xFreeBytesRemaining+0x1>
     24e:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e8       	ldi	r25, 0x80	; 128
     256:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <__data_end+0x1>
     25a:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <__data_end>
     25e:	08 95       	ret

00000260 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     266:	a2 ee       	ldi	r26, 0xE2	; 226
     268:	b2 e0       	ldi	r27, 0x02	; 2
     26a:	01 c0       	rjmp	.+2      	; 0x26e <prvInsertBlockIntoFreeList+0xe>
     26c:	df 01       	movw	r26, r30
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	11 97       	sbiw	r26, 0x01	; 1
     274:	ec 17       	cp	r30, r28
     276:	fd 07       	cpc	r31, r29
     278:	c8 f3       	brcs	.-14     	; 0x26c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     27a:	12 96       	adiw	r26, 0x02	; 2
     27c:	8d 91       	ld	r24, X+
     27e:	9c 91       	ld	r25, X
     280:	13 97       	sbiw	r26, 0x03	; 3
     282:	9d 01       	movw	r18, r26
     284:	28 0f       	add	r18, r24
     286:	39 1f       	adc	r19, r25
     288:	c2 17       	cp	r28, r18
     28a:	d3 07       	cpc	r29, r19
     28c:	49 f4       	brne	.+18     	; 0x2a0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     28e:	2a 81       	ldd	r18, Y+2	; 0x02
     290:	3b 81       	ldd	r19, Y+3	; 0x03
     292:	82 0f       	add	r24, r18
     294:	93 1f       	adc	r25, r19
     296:	13 96       	adiw	r26, 0x03	; 3
     298:	9c 93       	st	X, r25
     29a:	8e 93       	st	-X, r24
     29c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     29e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	9b 81       	ldd	r25, Y+3	; 0x03
     2a4:	9e 01       	movw	r18, r28
     2a6:	28 0f       	add	r18, r24
     2a8:	39 1f       	adc	r19, r25
     2aa:	e2 17       	cp	r30, r18
     2ac:	f3 07       	cpc	r31, r19
     2ae:	c1 f4       	brne	.+48     	; 0x2e0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2b0:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <pxEnd>
     2b4:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <pxEnd+0x1>
     2b8:	e2 17       	cp	r30, r18
     2ba:	f3 07       	cpc	r31, r19
     2bc:	71 f0       	breq	.+28     	; 0x2da <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2be:	22 81       	ldd	r18, Z+2	; 0x02
     2c0:	33 81       	ldd	r19, Z+3	; 0x03
     2c2:	82 0f       	add	r24, r18
     2c4:	93 1f       	adc	r25, r19
     2c6:	9b 83       	std	Y+3, r25	; 0x03
     2c8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2ca:	ed 91       	ld	r30, X+
     2cc:	fc 91       	ld	r31, X
     2ce:	11 97       	sbiw	r26, 0x01	; 1
     2d0:	80 81       	ld	r24, Z
     2d2:	91 81       	ldd	r25, Z+1	; 0x01
     2d4:	99 83       	std	Y+1, r25	; 0x01
     2d6:	88 83       	st	Y, r24
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2da:	39 83       	std	Y+1, r19	; 0x01
     2dc:	28 83       	st	Y, r18
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2e0:	f9 83       	std	Y+1, r31	; 0x01
     2e2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e4:	ca 17       	cp	r28, r26
     2e6:	db 07       	cpc	r29, r27
     2e8:	11 f0       	breq	.+4      	; 0x2ee <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2ea:	cd 93       	st	X+, r28
     2ec:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     302:	9e d7       	rcall	.+3900   	; 0x1240 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     304:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <pxEnd>
     308:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <pxEnd+0x1>
     30c:	89 2b       	or	r24, r25
        {
            prvHeapInit();
     30e:	09 f4       	brne	.+2      	; 0x312 <pvPortMalloc+0x1e>
     310:	7e df       	rcall	.-260    	; 0x20e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     312:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end>
     316:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__data_end+0x1>
     31a:	80 23       	and	r24, r16
     31c:	91 23       	and	r25, r17
     31e:	89 2b       	or	r24, r25
     320:	09 f0       	breq	.+2      	; 0x324 <pvPortMalloc+0x30>
     322:	76 c0       	rjmp	.+236    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     324:	01 15       	cp	r16, r1
     326:	11 05       	cpc	r17, r1
     328:	49 f0       	breq	.+18     	; 0x33c <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     32a:	c8 01       	movw	r24, r16
     32c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     32e:	08 17       	cp	r16, r24
     330:	19 07       	cpc	r17, r25
     332:	18 f0       	brcs	.+6      	; 0x33a <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     334:	00 e0       	ldi	r16, 0x00	; 0
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	01 c0       	rjmp	.+2      	; 0x33c <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     33a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     33c:	01 15       	cp	r16, r1
     33e:	11 05       	cpc	r17, r1
     340:	09 f4       	brne	.+2      	; 0x344 <pvPortMalloc+0x50>
     342:	69 c0       	rjmp	.+210    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     344:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <xFreeBytesRemaining>
     348:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <xFreeBytesRemaining+0x1>
     34c:	80 17       	cp	r24, r16
     34e:	91 07       	cpc	r25, r17
     350:	08 f4       	brcc	.+2      	; 0x354 <pvPortMalloc+0x60>
     352:	64 c0       	rjmp	.+200    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     354:	c0 91 e2 02 	lds	r28, 0x02E2	; 0x8002e2 <xStart>
     358:	d0 91 e3 02 	lds	r29, 0x02E3	; 0x8002e3 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     35c:	e2 ee       	ldi	r30, 0xE2	; 226
     35e:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     360:	02 c0       	rjmp	.+4      	; 0x366 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     362:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     364:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     366:	8a 81       	ldd	r24, Y+2	; 0x02
     368:	9b 81       	ldd	r25, Y+3	; 0x03
     36a:	80 17       	cp	r24, r16
     36c:	91 07       	cpc	r25, r17
     36e:	20 f4       	brcc	.+8      	; 0x378 <pvPortMalloc+0x84>
     370:	88 81       	ld	r24, Y
     372:	99 81       	ldd	r25, Y+1	; 0x01
     374:	00 97       	sbiw	r24, 0x00	; 0
     376:	a9 f7       	brne	.-22     	; 0x362 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     378:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <pxEnd>
     37c:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <pxEnd+0x1>
     380:	c8 17       	cp	r28, r24
     382:	d9 07       	cpc	r29, r25
     384:	09 f4       	brne	.+2      	; 0x388 <pvPortMalloc+0x94>
     386:	4d c0       	rjmp	.+154    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     388:	e0 80       	ld	r14, Z
     38a:	f1 80       	ldd	r15, Z+1	; 0x01
     38c:	84 e0       	ldi	r24, 0x04	; 4
     38e:	e8 0e       	add	r14, r24
     390:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     392:	88 81       	ld	r24, Y
     394:	99 81       	ldd	r25, Y+1	; 0x01
     396:	91 83       	std	Z+1, r25	; 0x01
     398:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     39a:	2a 81       	ldd	r18, Y+2	; 0x02
     39c:	3b 81       	ldd	r19, Y+3	; 0x03
     39e:	20 1b       	sub	r18, r16
     3a0:	31 0b       	sbc	r19, r17
     3a2:	29 30       	cpi	r18, 0x09	; 9
     3a4:	31 05       	cpc	r19, r1
     3a6:	48 f0       	brcs	.+18     	; 0x3ba <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3a8:	ce 01       	movw	r24, r28
     3aa:	80 0f       	add	r24, r16
     3ac:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3ae:	fc 01       	movw	r30, r24
     3b0:	33 83       	std	Z+3, r19	; 0x03
     3b2:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3b4:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3b6:	0a 83       	std	Y+2, r16	; 0x02
     3b8:	53 df       	rcall	.-346    	; 0x260 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3ba:	2a 81       	ldd	r18, Y+2	; 0x02
     3bc:	3b 81       	ldd	r19, Y+3	; 0x03
     3be:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <xFreeBytesRemaining>
     3c2:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <xFreeBytesRemaining+0x1>
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <xFreeBytesRemaining+0x1>
     3ce:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d2:	40 91 dc 02 	lds	r20, 0x02DC	; 0x8002dc <xMinimumEverFreeBytesRemaining>
     3d6:	50 91 dd 02 	lds	r21, 0x02DD	; 0x8002dd <xMinimumEverFreeBytesRemaining+0x1>
     3da:	84 17       	cp	r24, r20
     3dc:	95 07       	cpc	r25, r21
     3de:	20 f4       	brcc	.+8      	; 0x3e8 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3e0:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <xMinimumEverFreeBytesRemaining+0x1>
     3e4:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3e8:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end>
     3ec:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__data_end+0x1>
     3f0:	28 2b       	or	r18, r24
     3f2:	39 2b       	or	r19, r25
     3f4:	3b 83       	std	Y+3, r19	; 0x03
     3f6:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3f8:	19 82       	std	Y+1, r1	; 0x01
     3fa:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     3fc:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <xNumberOfSuccessfulAllocations>
     400:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <xNumberOfSuccessfulAllocations+0x1>
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <xNumberOfSuccessfulAllocations+0x1>
     40a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <xNumberOfSuccessfulAllocations>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     410:	e1 2c       	mov	r14, r1
     412:	f1 2c       	mov	r15, r1
     414:	08 c0       	rjmp	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     416:	e1 2c       	mov	r14, r1
     418:	f1 2c       	mov	r15, r1
     41a:	05 c0       	rjmp	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     41c:	e1 2c       	mov	r14, r1
     41e:	f1 2c       	mov	r15, r1
     420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     426:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     42a:	e1 14       	cp	r14, r1
     42c:	f1 04       	cpc	r15, r1
     42e:	11 f4       	brne	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     430:	0e 94 ad 10 	call	0x215a	; 0x215a <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     434:	c7 01       	movw	r24, r14
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	89 f1       	breq	.+98     	; 0x4b2 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     450:	ec 01       	movw	r28, r24
     452:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     454:	4a 81       	ldd	r20, Y+2	; 0x02
     456:	5b 81       	ldd	r21, Y+3	; 0x03
     458:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__data_end>
     45c:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__data_end+0x1>
     460:	ba 01       	movw	r22, r20
     462:	62 23       	and	r22, r18
     464:	73 23       	and	r23, r19
     466:	67 2b       	or	r22, r23
     468:	21 f1       	breq	.+72     	; 0x4b2 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     46a:	68 81       	ld	r22, Y
     46c:	79 81       	ldd	r23, Y+1	; 0x01
     46e:	67 2b       	or	r22, r23
     470:	01 f5       	brne	.+64     	; 0x4b2 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     472:	20 95       	com	r18
     474:	30 95       	com	r19
     476:	24 23       	and	r18, r20
     478:	35 23       	and	r19, r21
     47a:	3b 83       	std	Y+3, r19	; 0x03
     47c:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     47e:	e0 d6       	rcall	.+3520   	; 0x1240 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	9b 81       	ldd	r25, Y+3	; 0x03
     484:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <xFreeBytesRemaining>
     488:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <xFreeBytesRemaining+0x1>
     48c:	82 0f       	add	r24, r18
     48e:	93 1f       	adc	r25, r19
     490:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <xFreeBytesRemaining+0x1>
     494:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     498:	ce 01       	movw	r24, r28
     49a:	e2 de       	rcall	.-572    	; 0x260 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     49c:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <xNumberOfSuccessfulFrees>
     4a0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <xNumberOfSuccessfulFrees+0x1>
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <xNumberOfSuccessfulFrees+0x1>
     4aa:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4ae:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4bc:	fc 01       	movw	r30, r24
     4be:	03 96       	adiw	r24, 0x03	; 3
     4c0:	92 83       	std	Z+2, r25	; 0x02
     4c2:	81 83       	std	Z+1, r24	; 0x01
     4c4:	4f ef       	ldi	r20, 0xFF	; 255
     4c6:	5f ef       	ldi	r21, 0xFF	; 255
     4c8:	ba 01       	movw	r22, r20
     4ca:	43 83       	std	Z+3, r20	; 0x03
     4cc:	54 83       	std	Z+4, r21	; 0x04
     4ce:	65 83       	std	Z+5, r22	; 0x05
     4d0:	76 83       	std	Z+6, r23	; 0x06
     4d2:	90 87       	std	Z+8, r25	; 0x08
     4d4:	87 83       	std	Z+7, r24	; 0x07
     4d6:	92 87       	std	Z+10, r25	; 0x0a
     4d8:	81 87       	std	Z+9, r24	; 0x09
     4da:	10 82       	st	Z, r1
     4dc:	08 95       	ret

000004de <vListInitialiseItem>:
     4de:	fc 01       	movw	r30, r24
     4e0:	13 86       	std	Z+11, r1	; 0x0b
     4e2:	12 86       	std	Z+10, r1	; 0x0a
     4e4:	08 95       	ret

000004e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f0:	08 81       	ld	r16, Y
     4f2:	19 81       	ldd	r17, Y+1	; 0x01
     4f4:	2a 81       	ldd	r18, Y+2	; 0x02
     4f6:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4f8:	0f 3f       	cpi	r16, 0xFF	; 255
     4fa:	4f ef       	ldi	r20, 0xFF	; 255
     4fc:	14 07       	cpc	r17, r20
     4fe:	24 07       	cpc	r18, r20
     500:	34 07       	cpc	r19, r20
     502:	21 f4       	brne	.+8      	; 0x50c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     504:	fc 01       	movw	r30, r24
     506:	a1 85       	ldd	r26, Z+9	; 0x09
     508:	b2 85       	ldd	r27, Z+10	; 0x0a
     50a:	11 c0       	rjmp	.+34     	; 0x52e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     50c:	dc 01       	movw	r26, r24
     50e:	13 96       	adiw	r26, 0x03	; 3
     510:	01 c0       	rjmp	.+2      	; 0x514 <vListInsert+0x2e>
     512:	df 01       	movw	r26, r30
     514:	14 96       	adiw	r26, 0x04	; 4
     516:	ed 91       	ld	r30, X+
     518:	fc 91       	ld	r31, X
     51a:	15 97       	sbiw	r26, 0x05	; 5
     51c:	40 81       	ld	r20, Z
     51e:	51 81       	ldd	r21, Z+1	; 0x01
     520:	62 81       	ldd	r22, Z+2	; 0x02
     522:	73 81       	ldd	r23, Z+3	; 0x03
     524:	04 17       	cp	r16, r20
     526:	15 07       	cpc	r17, r21
     528:	26 07       	cpc	r18, r22
     52a:	37 07       	cpc	r19, r23
     52c:	90 f7       	brcc	.-28     	; 0x512 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     52e:	14 96       	adiw	r26, 0x04	; 4
     530:	ed 91       	ld	r30, X+
     532:	fc 91       	ld	r31, X
     534:	15 97       	sbiw	r26, 0x05	; 5
     536:	fd 83       	std	Y+5, r31	; 0x05
     538:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     53a:	d7 83       	std	Z+7, r29	; 0x07
     53c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     53e:	bf 83       	std	Y+7, r27	; 0x07
     540:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     542:	15 96       	adiw	r26, 0x05	; 5
     544:	dc 93       	st	X, r29
     546:	ce 93       	st	-X, r28
     548:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     54a:	9b 87       	std	Y+11, r25	; 0x0b
     54c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     54e:	fc 01       	movw	r30, r24
     550:	20 81       	ld	r18, Z
     552:	2f 5f       	subi	r18, 0xFF	; 255
     554:	20 83       	st	Z, r18
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     566:	a2 85       	ldd	r26, Z+10	; 0x0a
     568:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     56a:	c4 81       	ldd	r28, Z+4	; 0x04
     56c:	d5 81       	ldd	r29, Z+5	; 0x05
     56e:	86 81       	ldd	r24, Z+6	; 0x06
     570:	97 81       	ldd	r25, Z+7	; 0x07
     572:	9f 83       	std	Y+7, r25	; 0x07
     574:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     576:	c6 81       	ldd	r28, Z+6	; 0x06
     578:	d7 81       	ldd	r29, Z+7	; 0x07
     57a:	84 81       	ldd	r24, Z+4	; 0x04
     57c:	95 81       	ldd	r25, Z+5	; 0x05
     57e:	9d 83       	std	Y+5, r25	; 0x05
     580:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     582:	11 96       	adiw	r26, 0x01	; 1
     584:	8d 91       	ld	r24, X+
     586:	9c 91       	ld	r25, X
     588:	12 97       	sbiw	r26, 0x02	; 2
     58a:	e8 17       	cp	r30, r24
     58c:	f9 07       	cpc	r31, r25
     58e:	31 f4       	brne	.+12     	; 0x59c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     590:	86 81       	ldd	r24, Z+6	; 0x06
     592:	97 81       	ldd	r25, Z+7	; 0x07
     594:	12 96       	adiw	r26, 0x02	; 2
     596:	9c 93       	st	X, r25
     598:	8e 93       	st	-X, r24
     59a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     59c:	13 86       	std	Z+11, r1	; 0x0b
     59e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5a0:	8c 91       	ld	r24, X
     5a2:	81 50       	subi	r24, 0x01	; 1
     5a4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5a6:	8c 91       	ld	r24, X
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5ae:	a8 95       	wdr
     5b0:	90 ec       	ldi	r25, 0xC0	; 192
     5b2:	88 e1       	ldi	r24, 0x18	; 24
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	a8 95       	wdr
     5ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c4:	08 95       	ret

000005c6 <pxPortInitialiseStack>:
     5c6:	fc 01       	movw	r30, r24
     5c8:	60 83       	st	Z, r22
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	70 83       	st	Z, r23
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	10 82       	st	Z, r1
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	10 82       	st	Z, r1
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	20 e8       	ldi	r18, 0x80	; 128
     5da:	20 83       	st	Z, r18
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	10 82       	st	Z, r1
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	10 82       	st	Z, r1
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	10 82       	st	Z, r1
     5e8:	77 97       	sbiw	r30, 0x17	; 23
     5ea:	40 83       	st	Z, r20
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	50 83       	st	Z, r21
     5f0:	86 97       	sbiw	r24, 0x26	; 38
     5f2:	08 95       	ret

000005f4 <xPortStartScheduler>:
     5f4:	dc df       	rcall	.-72     	; 0x5ae <prvSetupTimerInterrupt>
     5f6:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <pxCurrentTCB>
     5fa:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
     5fe:	cd 91       	ld	r28, X+
     600:	cd bf       	out	0x3d, r28	; 61
     602:	dd 91       	ld	r29, X+
     604:	de bf       	out	0x3e, r29	; 62
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	bf 91       	pop	r27
     610:	af 91       	pop	r26
     612:	9f 91       	pop	r25
     614:	8f 91       	pop	r24
     616:	7f 91       	pop	r23
     618:	6f 91       	pop	r22
     61a:	5f 91       	pop	r21
     61c:	4f 91       	pop	r20
     61e:	3f 91       	pop	r19
     620:	2f 91       	pop	r18
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	bf 90       	pop	r11
     630:	af 90       	pop	r10
     632:	9f 90       	pop	r9
     634:	8f 90       	pop	r8
     636:	7f 90       	pop	r7
     638:	6f 90       	pop	r6
     63a:	5f 90       	pop	r5
     63c:	4f 90       	pop	r4
     63e:	3f 90       	pop	r3
     640:	2f 90       	pop	r2
     642:	1f 90       	pop	r1
     644:	0f 90       	pop	r0
     646:	0c be       	out	0x3c, r0	; 60
     648:	0f 90       	pop	r0
     64a:	0b be       	out	0x3b, r0	; 59
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	08 95       	ret
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	08 95       	ret

00000658 <vPortYield>:
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	0f 92       	push	r0
     660:	0b b6       	in	r0, 0x3b	; 59
     662:	0f 92       	push	r0
     664:	0c b6       	in	r0, 0x3c	; 60
     666:	0f 92       	push	r0
     668:	1f 92       	push	r1
     66a:	11 24       	eor	r1, r1
     66c:	2f 92       	push	r2
     66e:	3f 92       	push	r3
     670:	4f 92       	push	r4
     672:	5f 92       	push	r5
     674:	6f 92       	push	r6
     676:	7f 92       	push	r7
     678:	8f 92       	push	r8
     67a:	9f 92       	push	r9
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	2f 93       	push	r18
     68e:	3f 93       	push	r19
     690:	4f 93       	push	r20
     692:	5f 93       	push	r21
     694:	6f 93       	push	r22
     696:	7f 93       	push	r23
     698:	8f 93       	push	r24
     69a:	9f 93       	push	r25
     69c:	af 93       	push	r26
     69e:	bf 93       	push	r27
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
     6a8:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <pxCurrentTCB>
     6ac:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
     6b0:	0d b6       	in	r0, 0x3d	; 61
     6b2:	0d 92       	st	X+, r0
     6b4:	0e b6       	in	r0, 0x3e	; 62
     6b6:	0d 92       	st	X+, r0
     6b8:	fa d7       	rcall	.+4084   	; 0x16ae <vTaskSwitchContext>
     6ba:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <pxCurrentTCB>
     6be:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
     6c2:	cd 91       	ld	r28, X+
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	dd 91       	ld	r29, X+
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	bf 91       	pop	r27
     6d4:	af 91       	pop	r26
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	7f 91       	pop	r23
     6dc:	6f 91       	pop	r22
     6de:	5f 91       	pop	r21
     6e0:	4f 91       	pop	r20
     6e2:	3f 91       	pop	r19
     6e4:	2f 91       	pop	r18
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	7f 90       	pop	r7
     6fc:	6f 90       	pop	r6
     6fe:	5f 90       	pop	r5
     700:	4f 90       	pop	r4
     702:	3f 90       	pop	r3
     704:	2f 90       	pop	r2
     706:	1f 90       	pop	r1
     708:	0f 90       	pop	r0
     70a:	0c be       	out	0x3c, r0	; 60
     70c:	0f 90       	pop	r0
     70e:	0b be       	out	0x3b, r0	; 59
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	08 95       	ret

00000718 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	0f 92       	push	r0
     720:	0b b6       	in	r0, 0x3b	; 59
     722:	0f 92       	push	r0
     724:	0c b6       	in	r0, 0x3c	; 60
     726:	0f 92       	push	r0
     728:	1f 92       	push	r1
     72a:	11 24       	eor	r1, r1
     72c:	2f 92       	push	r2
     72e:	3f 92       	push	r3
     730:	4f 92       	push	r4
     732:	5f 92       	push	r5
     734:	6f 92       	push	r6
     736:	7f 92       	push	r7
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
     768:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <pxCurrentTCB>
     76c:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
     770:	0d b6       	in	r0, 0x3d	; 61
     772:	0d 92       	st	X+, r0
     774:	0e b6       	in	r0, 0x3e	; 62
     776:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     778:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     77a:	76 d5       	rcall	.+2796   	; 0x1268 <xTaskIncrementTick>
     77c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     77e:	97 d7       	rcall	.+3886   	; 0x16ae <vTaskSwitchContext>
     780:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     784:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
     788:	cd 91       	ld	r28, X+
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	dd 91       	ld	r29, X+
     78e:	de bf       	out	0x3e, r29	; 62
     790:	ff 91       	pop	r31
     792:	ef 91       	pop	r30
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	bf 91       	pop	r27
     79a:	af 91       	pop	r26
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	7f 91       	pop	r23
     7a2:	6f 91       	pop	r22
     7a4:	5f 91       	pop	r21
     7a6:	4f 91       	pop	r20
     7a8:	3f 91       	pop	r19
     7aa:	2f 91       	pop	r18
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	9f 90       	pop	r9
     7be:	8f 90       	pop	r8
     7c0:	7f 90       	pop	r7
     7c2:	6f 90       	pop	r6
     7c4:	5f 90       	pop	r5
     7c6:	4f 90       	pop	r4
     7c8:	3f 90       	pop	r3
     7ca:	2f 90       	pop	r2
     7cc:	1f 90       	pop	r1
     7ce:	0f 90       	pop	r0
     7d0:	0c be       	out	0x3c, r0	; 60
     7d2:	0f 90       	pop	r0
     7d4:	0b be       	out	0x3b, r0	; 59
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	08 95       	ret

000007de <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     7de:	9c df       	rcall	.-200    	; 0x718 <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     7e0:	18 95       	reti

000007e2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	0f 92       	push	r0
     7e8:	fc 01       	movw	r30, r24
     7ea:	86 8d       	ldd	r24, Z+30	; 0x1e
     7ec:	81 11       	cpse	r24, r1
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <prvIsQueueEmpty+0x12>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <prvIsQueueEmpty+0x14>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	08 95       	ret

000007fc <prvIsQueueFull>:
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	0f 92       	push	r0
     802:	fc 01       	movw	r30, r24
     804:	26 8d       	ldd	r18, Z+30	; 0x1e
     806:	87 8d       	ldd	r24, Z+31	; 0x1f
     808:	28 13       	cpse	r18, r24
     80a:	02 c0       	rjmp	.+4      	; 0x810 <prvIsQueueFull+0x14>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	01 c0       	rjmp	.+2      	; 0x812 <prvIsQueueFull+0x16>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	08 95       	ret

00000818 <prvCopyDataToQueue>:
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	ec 01       	movw	r28, r24
     822:	04 2f       	mov	r16, r20
     824:	1e 8d       	ldd	r17, Y+30	; 0x1e
     826:	48 a1       	ldd	r20, Y+32	; 0x20
     828:	41 11       	cpse	r20, r1
     82a:	0c c0       	rjmp	.+24     	; 0x844 <prvCopyDataToQueue+0x2c>
     82c:	88 81       	ld	r24, Y
     82e:	99 81       	ldd	r25, Y+1	; 0x01
     830:	89 2b       	or	r24, r25
     832:	09 f0       	breq	.+2      	; 0x836 <prvCopyDataToQueue+0x1e>
     834:	42 c0       	rjmp	.+132    	; 0x8ba <prvCopyDataToQueue+0xa2>
     836:	8c 81       	ldd	r24, Y+4	; 0x04
     838:	9d 81       	ldd	r25, Y+5	; 0x05
     83a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <xTaskPriorityDisinherit>
     83e:	1d 82       	std	Y+5, r1	; 0x05
     840:	1c 82       	std	Y+4, r1	; 0x04
     842:	42 c0       	rjmp	.+132    	; 0x8c8 <prvCopyDataToQueue+0xb0>
     844:	01 11       	cpse	r16, r1
     846:	17 c0       	rjmp	.+46     	; 0x876 <prvCopyDataToQueue+0x5e>
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	9b 81       	ldd	r25, Y+3	; 0x03
     84e:	0e 94 44 1a 	call	0x3488	; 0x3488 <memcpy>
     852:	28 a1       	ldd	r18, Y+32	; 0x20
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	9b 81       	ldd	r25, Y+3	; 0x03
     858:	82 0f       	add	r24, r18
     85a:	91 1d       	adc	r25, r1
     85c:	9b 83       	std	Y+3, r25	; 0x03
     85e:	8a 83       	std	Y+2, r24	; 0x02
     860:	2c 81       	ldd	r18, Y+4	; 0x04
     862:	3d 81       	ldd	r19, Y+5	; 0x05
     864:	82 17       	cp	r24, r18
     866:	93 07       	cpc	r25, r19
     868:	50 f1       	brcs	.+84     	; 0x8be <prvCopyDataToQueue+0xa6>
     86a:	88 81       	ld	r24, Y
     86c:	99 81       	ldd	r25, Y+1	; 0x01
     86e:	9b 83       	std	Y+3, r25	; 0x03
     870:	8a 83       	std	Y+2, r24	; 0x02
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	29 c0       	rjmp	.+82     	; 0x8c8 <prvCopyDataToQueue+0xb0>
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	8e 81       	ldd	r24, Y+6	; 0x06
     87a:	9f 81       	ldd	r25, Y+7	; 0x07
     87c:	0e 94 44 1a 	call	0x3488	; 0x3488 <memcpy>
     880:	88 a1       	ldd	r24, Y+32	; 0x20
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	91 95       	neg	r25
     886:	81 95       	neg	r24
     888:	91 09       	sbc	r25, r1
     88a:	2e 81       	ldd	r18, Y+6	; 0x06
     88c:	3f 81       	ldd	r19, Y+7	; 0x07
     88e:	28 0f       	add	r18, r24
     890:	39 1f       	adc	r19, r25
     892:	3f 83       	std	Y+7, r19	; 0x07
     894:	2e 83       	std	Y+6, r18	; 0x06
     896:	48 81       	ld	r20, Y
     898:	59 81       	ldd	r21, Y+1	; 0x01
     89a:	24 17       	cp	r18, r20
     89c:	35 07       	cpc	r19, r21
     89e:	30 f4       	brcc	.+12     	; 0x8ac <prvCopyDataToQueue+0x94>
     8a0:	2c 81       	ldd	r18, Y+4	; 0x04
     8a2:	3d 81       	ldd	r19, Y+5	; 0x05
     8a4:	82 0f       	add	r24, r18
     8a6:	93 1f       	adc	r25, r19
     8a8:	9f 83       	std	Y+7, r25	; 0x07
     8aa:	8e 83       	std	Y+6, r24	; 0x06
     8ac:	02 30       	cpi	r16, 0x02	; 2
     8ae:	49 f4       	brne	.+18     	; 0x8c2 <prvCopyDataToQueue+0xaa>
     8b0:	11 23       	and	r17, r17
     8b2:	49 f0       	breq	.+18     	; 0x8c6 <prvCopyDataToQueue+0xae>
     8b4:	11 50       	subi	r17, 0x01	; 1
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <prvCopyDataToQueue+0xb0>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <prvCopyDataToQueue+0xb0>
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <prvCopyDataToQueue+0xb0>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <prvCopyDataToQueue+0xb0>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	1f 5f       	subi	r17, 0xFF	; 255
     8ca:	1e 8f       	std	Y+30, r17	; 0x1e
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	08 95       	ret

000008d6 <prvCopyDataFromQueue>:
     8d6:	fc 01       	movw	r30, r24
     8d8:	40 a1       	ldd	r20, Z+32	; 0x20
     8da:	44 23       	and	r20, r20
     8dc:	a9 f0       	breq	.+42     	; 0x908 <prvCopyDataFromQueue+0x32>
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	26 81       	ldd	r18, Z+6	; 0x06
     8e2:	37 81       	ldd	r19, Z+7	; 0x07
     8e4:	24 0f       	add	r18, r20
     8e6:	35 1f       	adc	r19, r21
     8e8:	37 83       	std	Z+7, r19	; 0x07
     8ea:	26 83       	std	Z+6, r18	; 0x06
     8ec:	84 81       	ldd	r24, Z+4	; 0x04
     8ee:	95 81       	ldd	r25, Z+5	; 0x05
     8f0:	28 17       	cp	r18, r24
     8f2:	39 07       	cpc	r19, r25
     8f4:	20 f0       	brcs	.+8      	; 0x8fe <prvCopyDataFromQueue+0x28>
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	97 83       	std	Z+7, r25	; 0x07
     8fc:	86 83       	std	Z+6, r24	; 0x06
     8fe:	cb 01       	movw	r24, r22
     900:	66 81       	ldd	r22, Z+6	; 0x06
     902:	77 81       	ldd	r23, Z+7	; 0x07
     904:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <memcpy>
     908:	08 95       	ret

0000090a <prvUnlockQueue>:
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	ec 01       	movw	r28, r24
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	0f 92       	push	r0
     918:	1a a1       	ldd	r17, Y+34	; 0x22
     91a:	0a c0       	rjmp	.+20     	; 0x930 <prvUnlockQueue+0x26>
     91c:	8b 89       	ldd	r24, Y+19	; 0x13
     91e:	88 23       	and	r24, r24
     920:	49 f0       	breq	.+18     	; 0x934 <prvUnlockQueue+0x2a>
     922:	ce 01       	movw	r24, r28
     924:	43 96       	adiw	r24, 0x13	; 19
     926:	80 d7       	rcall	.+3840   	; 0x1828 <xTaskRemoveFromEventList>
     928:	81 11       	cpse	r24, r1
     92a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskMissedYield>
     92e:	11 50       	subi	r17, 0x01	; 1
     930:	11 16       	cp	r1, r17
     932:	a4 f3       	brlt	.-24     	; 0x91c <prvUnlockQueue+0x12>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	8a a3       	std	Y+34, r24	; 0x22
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	0f 92       	push	r0
     942:	19 a1       	ldd	r17, Y+33	; 0x21
     944:	0a c0       	rjmp	.+20     	; 0x95a <prvUnlockQueue+0x50>
     946:	88 85       	ldd	r24, Y+8	; 0x08
     948:	88 23       	and	r24, r24
     94a:	49 f0       	breq	.+18     	; 0x95e <prvUnlockQueue+0x54>
     94c:	ce 01       	movw	r24, r28
     94e:	08 96       	adiw	r24, 0x08	; 8
     950:	6b d7       	rcall	.+3798   	; 0x1828 <xTaskRemoveFromEventList>
     952:	81 11       	cpse	r24, r1
     954:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskMissedYield>
     958:	11 50       	subi	r17, 0x01	; 1
     95a:	11 16       	cp	r1, r17
     95c:	a4 f3       	brlt	.-24     	; 0x946 <prvUnlockQueue+0x3c>
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	89 a3       	std	Y+33, r24	; 0x21
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	08 95       	ret

0000096e <xQueueGenericReset>:
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	ec 01       	movw	r28, r24
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	0f 92       	push	r0
     97a:	e8 81       	ld	r30, Y
     97c:	f9 81       	ldd	r31, Y+1	; 0x01
     97e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     980:	28 a1       	ldd	r18, Y+32	; 0x20
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	82 9f       	mul	r24, r18
     988:	a0 01       	movw	r20, r0
     98a:	83 9f       	mul	r24, r19
     98c:	50 0d       	add	r21, r0
     98e:	92 9f       	mul	r25, r18
     990:	50 0d       	add	r21, r0
     992:	11 24       	eor	r1, r1
     994:	4e 0f       	add	r20, r30
     996:	5f 1f       	adc	r21, r31
     998:	5d 83       	std	Y+5, r21	; 0x05
     99a:	4c 83       	std	Y+4, r20	; 0x04
     99c:	1e 8e       	std	Y+30, r1	; 0x1e
     99e:	fb 83       	std	Y+3, r31	; 0x03
     9a0:	ea 83       	std	Y+2, r30	; 0x02
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	28 9f       	mul	r18, r24
     9a6:	a0 01       	movw	r20, r0
     9a8:	29 9f       	mul	r18, r25
     9aa:	50 0d       	add	r21, r0
     9ac:	38 9f       	mul	r19, r24
     9ae:	50 0d       	add	r21, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	cf 01       	movw	r24, r30
     9b4:	84 0f       	add	r24, r20
     9b6:	95 1f       	adc	r25, r21
     9b8:	9f 83       	std	Y+7, r25	; 0x07
     9ba:	8e 83       	std	Y+6, r24	; 0x06
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	89 a3       	std	Y+33, r24	; 0x21
     9c0:	8a a3       	std	Y+34, r24	; 0x22
     9c2:	61 11       	cpse	r22, r1
     9c4:	0a c0       	rjmp	.+20     	; 0x9da <xQueueGenericReset+0x6c>
     9c6:	88 85       	ldd	r24, Y+8	; 0x08
     9c8:	88 23       	and	r24, r24
     9ca:	69 f0       	breq	.+26     	; 0x9e6 <xQueueGenericReset+0x78>
     9cc:	ce 01       	movw	r24, r28
     9ce:	08 96       	adiw	r24, 0x08	; 8
     9d0:	2b d7       	rcall	.+3670   	; 0x1828 <xTaskRemoveFromEventList>
     9d2:	88 23       	and	r24, r24
     9d4:	41 f0       	breq	.+16     	; 0x9e6 <xQueueGenericReset+0x78>
     9d6:	40 de       	rcall	.-896    	; 0x658 <vPortYield>
     9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <xQueueGenericReset+0x78>
     9da:	ce 01       	movw	r24, r28
     9dc:	08 96       	adiw	r24, 0x08	; 8
     9de:	6e dd       	rcall	.-1316   	; 0x4bc <vListInitialise>
     9e0:	ce 01       	movw	r24, r28
     9e2:	43 96       	adiw	r24, 0x13	; 19
     9e4:	6b dd       	rcall	.-1322   	; 0x4bc <vListInitialise>
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <prvInitialiseNewQueue>:
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	f8 01       	movw	r30, r16
     9f8:	61 11       	cpse	r22, r1
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <prvInitialiseNewQueue+0x10>
     9fc:	11 83       	std	Z+1, r17	; 0x01
     9fe:	00 83       	st	Z, r16
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <prvInitialiseNewQueue+0x14>
     a02:	51 83       	std	Z+1, r21	; 0x01
     a04:	40 83       	st	Z, r20
     a06:	87 8f       	std	Z+31, r24	; 0x1f
     a08:	60 a3       	std	Z+32, r22	; 0x20
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	cf 01       	movw	r24, r30
     a0e:	af df       	rcall	.-162    	; 0x96e <xQueueGenericReset>
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <xQueueGenericCreate>:
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	f8 2e       	mov	r15, r24
     a26:	e6 2e       	mov	r14, r22
     a28:	d4 2e       	mov	r13, r20
     a2a:	86 9f       	mul	r24, r22
     a2c:	c0 01       	movw	r24, r0
     a2e:	11 24       	eor	r1, r1
     a30:	83 96       	adiw	r24, 0x23	; 35
     a32:	60 dc       	rcall	.-1856   	; 0x2f4 <pvPortMalloc>
     a34:	ec 01       	movw	r28, r24
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	41 f0       	breq	.+16     	; 0xa4a <xQueueGenericCreate+0x34>
     a3a:	8c 01       	movw	r16, r24
     a3c:	2d 2d       	mov	r18, r13
     a3e:	ac 01       	movw	r20, r24
     a40:	4d 5d       	subi	r20, 0xDD	; 221
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	6e 2d       	mov	r22, r14
     a46:	8f 2d       	mov	r24, r15
     a48:	d4 df       	rcall	.-88     	; 0x9f2 <prvInitialiseNewQueue>
     a4a:	ce 01       	movw	r24, r28
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	08 95       	ret

00000a5c <xQueueGenericSend>:
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	29 97       	sbiw	r28, 0x09	; 9
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	7c 01       	movw	r14, r24
     a7e:	6b 01       	movw	r12, r22
     a80:	2e 83       	std	Y+6, r18	; 0x06
     a82:	3f 83       	std	Y+7, r19	; 0x07
     a84:	48 87       	std	Y+8, r20	; 0x08
     a86:	59 87       	std	Y+9, r21	; 0x09
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	0f 92       	push	r0
     a90:	f7 01       	movw	r30, r14
     a92:	96 8d       	ldd	r25, Z+30	; 0x1e
     a94:	87 8d       	ldd	r24, Z+31	; 0x1f
     a96:	98 17       	cp	r25, r24
     a98:	10 f0       	brcs	.+4      	; 0xa9e <xQueueGenericSend+0x42>
     a9a:	02 30       	cpi	r16, 0x02	; 2
     a9c:	a9 f4       	brne	.+42     	; 0xac8 <xQueueGenericSend+0x6c>
     a9e:	40 2f       	mov	r20, r16
     aa0:	b6 01       	movw	r22, r12
     aa2:	c7 01       	movw	r24, r14
     aa4:	b9 de       	rcall	.-654    	; 0x818 <prvCopyDataToQueue>
     aa6:	f7 01       	movw	r30, r14
     aa8:	93 89       	ldd	r25, Z+19	; 0x13
     aaa:	99 23       	and	r25, r25
     aac:	39 f0       	breq	.+14     	; 0xabc <xQueueGenericSend+0x60>
     aae:	c7 01       	movw	r24, r14
     ab0:	43 96       	adiw	r24, 0x13	; 19
     ab2:	ba d6       	rcall	.+3444   	; 0x1828 <xTaskRemoveFromEventList>
     ab4:	88 23       	and	r24, r24
     ab6:	21 f0       	breq	.+8      	; 0xac0 <xQueueGenericSend+0x64>
     ab8:	cf dd       	rcall	.-1122   	; 0x658 <vPortYield>
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <xQueueGenericSend+0x64>
     abc:	81 11       	cpse	r24, r1
     abe:	cc dd       	rcall	.-1128   	; 0x658 <vPortYield>
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	46 c0       	rjmp	.+140    	; 0xb54 <xQueueGenericSend+0xf8>
     ac8:	8e 81       	ldd	r24, Y+6	; 0x06
     aca:	9f 81       	ldd	r25, Y+7	; 0x07
     acc:	a8 85       	ldd	r26, Y+8	; 0x08
     ace:	b9 85       	ldd	r27, Y+9	; 0x09
     ad0:	89 2b       	or	r24, r25
     ad2:	8a 2b       	or	r24, r26
     ad4:	8b 2b       	or	r24, r27
     ad6:	21 f4       	brne	.+8      	; 0xae0 <xQueueGenericSend+0x84>
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	3a c0       	rjmp	.+116    	; 0xb54 <xQueueGenericSend+0xf8>
     ae0:	11 11       	cpse	r17, r1
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <xQueueGenericSend+0x90>
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	4e d7       	rcall	.+3740   	; 0x1986 <vTaskInternalSetTimeOutState>
     aea:	11 e0       	ldi	r17, 0x01	; 1
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	a7 d3       	rcall	.+1870   	; 0x1240 <vTaskSuspendAll>
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	0f 92       	push	r0
     af8:	f7 01       	movw	r30, r14
     afa:	81 a1       	ldd	r24, Z+33	; 0x21
     afc:	8f 3f       	cpi	r24, 0xFF	; 255
     afe:	09 f4       	brne	.+2      	; 0xb02 <xQueueGenericSend+0xa6>
     b00:	11 a2       	std	Z+33, r1	; 0x21
     b02:	f7 01       	movw	r30, r14
     b04:	82 a1       	ldd	r24, Z+34	; 0x22
     b06:	8f 3f       	cpi	r24, 0xFF	; 255
     b08:	09 f4       	brne	.+2      	; 0xb0c <xQueueGenericSend+0xb0>
     b0a:	12 a2       	std	Z+34, r1	; 0x22
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	be 01       	movw	r22, r28
     b12:	6a 5f       	subi	r22, 0xFA	; 250
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	46 d7       	rcall	.+3724   	; 0x19a8 <xTaskCheckForTimeOut>
     b1c:	81 11       	cpse	r24, r1
     b1e:	16 c0       	rjmp	.+44     	; 0xb4c <xQueueGenericSend+0xf0>
     b20:	c7 01       	movw	r24, r14
     b22:	6c de       	rcall	.-808    	; 0x7fc <prvIsQueueFull>
     b24:	88 23       	and	r24, r24
     b26:	71 f0       	breq	.+28     	; 0xb44 <xQueueGenericSend+0xe8>
     b28:	4e 81       	ldd	r20, Y+6	; 0x06
     b2a:	5f 81       	ldd	r21, Y+7	; 0x07
     b2c:	68 85       	ldd	r22, Y+8	; 0x08
     b2e:	79 85       	ldd	r23, Y+9	; 0x09
     b30:	c7 01       	movw	r24, r14
     b32:	08 96       	adiw	r24, 0x08	; 8
     b34:	20 d6       	rcall	.+3136   	; 0x1776 <vTaskPlaceOnEventList>
     b36:	c7 01       	movw	r24, r14
     b38:	e8 de       	rcall	.-560    	; 0x90a <prvUnlockQueue>
     b3a:	c2 d4       	rcall	.+2436   	; 0x14c0 <xTaskResumeAll>
     b3c:	81 11       	cpse	r24, r1
     b3e:	a5 cf       	rjmp	.-182    	; 0xa8a <xQueueGenericSend+0x2e>
     b40:	8b dd       	rcall	.-1258   	; 0x658 <vPortYield>
     b42:	a3 cf       	rjmp	.-186    	; 0xa8a <xQueueGenericSend+0x2e>
     b44:	c7 01       	movw	r24, r14
     b46:	e1 de       	rcall	.-574    	; 0x90a <prvUnlockQueue>
     b48:	bb d4       	rcall	.+2422   	; 0x14c0 <xTaskResumeAll>
     b4a:	9f cf       	rjmp	.-194    	; 0xa8a <xQueueGenericSend+0x2e>
     b4c:	c7 01       	movw	r24, r14
     b4e:	dd de       	rcall	.-582    	; 0x90a <prvUnlockQueue>
     b50:	b7 d4       	rcall	.+2414   	; 0x14c0 <xTaskResumeAll>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	29 96       	adiw	r28, 0x09	; 9
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <xQueueGenericSendFromISR>:
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	8a 01       	movw	r16, r20
     b80:	fc 01       	movw	r30, r24
     b82:	56 8d       	ldd	r21, Z+30	; 0x1e
     b84:	37 8d       	ldd	r19, Z+31	; 0x1f
     b86:	53 17       	cp	r21, r19
     b88:	10 f0       	brcs	.+4      	; 0xb8e <xQueueGenericSendFromISR+0x1c>
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	f1 f4       	brne	.+60     	; 0xbca <xQueueGenericSendFromISR+0x58>
     b8e:	42 2f       	mov	r20, r18
     b90:	78 01       	movw	r14, r16
     b92:	ec 01       	movw	r28, r24
     b94:	1a a1       	ldd	r17, Y+34	; 0x22
     b96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b98:	ce 01       	movw	r24, r28
     b9a:	3e de       	rcall	.-900    	; 0x818 <prvCopyDataToQueue>
     b9c:	1f 3f       	cpi	r17, 0xFF	; 255
     b9e:	79 f4       	brne	.+30     	; 0xbbe <xQueueGenericSendFromISR+0x4c>
     ba0:	8b 89       	ldd	r24, Y+19	; 0x13
     ba2:	88 23       	and	r24, r24
     ba4:	a1 f0       	breq	.+40     	; 0xbce <xQueueGenericSendFromISR+0x5c>
     ba6:	ce 01       	movw	r24, r28
     ba8:	43 96       	adiw	r24, 0x13	; 19
     baa:	3e d6       	rcall	.+3196   	; 0x1828 <xTaskRemoveFromEventList>
     bac:	88 23       	and	r24, r24
     bae:	89 f0       	breq	.+34     	; 0xbd2 <xQueueGenericSendFromISR+0x60>
     bb0:	e1 14       	cp	r14, r1
     bb2:	f1 04       	cpc	r15, r1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <xQueueGenericSendFromISR+0x64>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	f7 01       	movw	r30, r14
     bba:	80 83       	st	Z, r24
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bbe:	ff 24       	eor	r15, r15
     bc0:	f3 94       	inc	r15
     bc2:	f1 0e       	add	r15, r17
     bc4:	fa a2       	std	Y+34, r15	; 0x22
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	08 95       	ret

00000be6 <xQueueReceive>:
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	29 97       	sbiw	r28, 0x09	; 9
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	8c 01       	movw	r16, r24
     c08:	6b 01       	movw	r12, r22
     c0a:	2e 83       	std	Y+6, r18	; 0x06
     c0c:	3f 83       	std	Y+7, r19	; 0x07
     c0e:	48 87       	std	Y+8, r20	; 0x08
     c10:	59 87       	std	Y+9, r21	; 0x09
     c12:	e1 2c       	mov	r14, r1
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	0f 92       	push	r0
     c1a:	f8 01       	movw	r30, r16
     c1c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c1e:	ff 20       	and	r15, r15
     c20:	91 f0       	breq	.+36     	; 0xc46 <xQueueReceive+0x60>
     c22:	b6 01       	movw	r22, r12
     c24:	c8 01       	movw	r24, r16
     c26:	57 de       	rcall	.-850    	; 0x8d6 <prvCopyDataFromQueue>
     c28:	fa 94       	dec	r15
     c2a:	f8 01       	movw	r30, r16
     c2c:	f6 8e       	std	Z+30, r15	; 0x1e
     c2e:	80 85       	ldd	r24, Z+8	; 0x08
     c30:	88 23       	and	r24, r24
     c32:	29 f0       	breq	.+10     	; 0xc3e <xQueueReceive+0x58>
     c34:	c8 01       	movw	r24, r16
     c36:	08 96       	adiw	r24, 0x08	; 8
     c38:	f7 d5       	rcall	.+3054   	; 0x1828 <xTaskRemoveFromEventList>
     c3a:	81 11       	cpse	r24, r1
     c3c:	0d dd       	rcall	.-1510   	; 0x658 <vPortYield>
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	4c c0       	rjmp	.+152    	; 0xcde <xQueueReceive+0xf8>
     c46:	8e 81       	ldd	r24, Y+6	; 0x06
     c48:	9f 81       	ldd	r25, Y+7	; 0x07
     c4a:	a8 85       	ldd	r26, Y+8	; 0x08
     c4c:	b9 85       	ldd	r27, Y+9	; 0x09
     c4e:	89 2b       	or	r24, r25
     c50:	8a 2b       	or	r24, r26
     c52:	8b 2b       	or	r24, r27
     c54:	21 f4       	brne	.+8      	; 0xc5e <xQueueReceive+0x78>
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	40 c0       	rjmp	.+128    	; 0xcde <xQueueReceive+0xf8>
     c5e:	e1 10       	cpse	r14, r1
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <xQueueReceive+0x86>
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	8f d6       	rcall	.+3358   	; 0x1986 <vTaskInternalSetTimeOutState>
     c68:	ee 24       	eor	r14, r14
     c6a:	e3 94       	inc	r14
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	e7 d2       	rcall	.+1486   	; 0x1240 <vTaskSuspendAll>
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	0f 92       	push	r0
     c78:	f8 01       	movw	r30, r16
     c7a:	81 a1       	ldd	r24, Z+33	; 0x21
     c7c:	8f 3f       	cpi	r24, 0xFF	; 255
     c7e:	09 f4       	brne	.+2      	; 0xc82 <xQueueReceive+0x9c>
     c80:	11 a2       	std	Z+33, r1	; 0x21
     c82:	f8 01       	movw	r30, r16
     c84:	82 a1       	ldd	r24, Z+34	; 0x22
     c86:	8f 3f       	cpi	r24, 0xFF	; 255
     c88:	09 f4       	brne	.+2      	; 0xc8c <xQueueReceive+0xa6>
     c8a:	12 a2       	std	Z+34, r1	; 0x22
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	be 01       	movw	r22, r28
     c92:	6a 5f       	subi	r22, 0xFA	; 250
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	86 d6       	rcall	.+3340   	; 0x19a8 <xTaskCheckForTimeOut>
     c9c:	81 11       	cpse	r24, r1
     c9e:	16 c0       	rjmp	.+44     	; 0xccc <xQueueReceive+0xe6>
     ca0:	c8 01       	movw	r24, r16
     ca2:	9f dd       	rcall	.-1218   	; 0x7e2 <prvIsQueueEmpty>
     ca4:	88 23       	and	r24, r24
     ca6:	71 f0       	breq	.+28     	; 0xcc4 <xQueueReceive+0xde>
     ca8:	4e 81       	ldd	r20, Y+6	; 0x06
     caa:	5f 81       	ldd	r21, Y+7	; 0x07
     cac:	68 85       	ldd	r22, Y+8	; 0x08
     cae:	79 85       	ldd	r23, Y+9	; 0x09
     cb0:	c8 01       	movw	r24, r16
     cb2:	43 96       	adiw	r24, 0x13	; 19
     cb4:	60 d5       	rcall	.+2752   	; 0x1776 <vTaskPlaceOnEventList>
     cb6:	c8 01       	movw	r24, r16
     cb8:	28 de       	rcall	.-944    	; 0x90a <prvUnlockQueue>
     cba:	02 d4       	rcall	.+2052   	; 0x14c0 <xTaskResumeAll>
     cbc:	81 11       	cpse	r24, r1
     cbe:	aa cf       	rjmp	.-172    	; 0xc14 <xQueueReceive+0x2e>
     cc0:	cb dc       	rcall	.-1642   	; 0x658 <vPortYield>
     cc2:	a8 cf       	rjmp	.-176    	; 0xc14 <xQueueReceive+0x2e>
     cc4:	c8 01       	movw	r24, r16
     cc6:	21 de       	rcall	.-958    	; 0x90a <prvUnlockQueue>
     cc8:	fb d3       	rcall	.+2038   	; 0x14c0 <xTaskResumeAll>
     cca:	a4 cf       	rjmp	.-184    	; 0xc14 <xQueueReceive+0x2e>
     ccc:	c8 01       	movw	r24, r16
     cce:	1d de       	rcall	.-966    	; 0x90a <prvUnlockQueue>
     cd0:	f7 d3       	rcall	.+2030   	; 0x14c0 <xTaskResumeAll>
     cd2:	c8 01       	movw	r24, r16
     cd4:	86 dd       	rcall	.-1268   	; 0x7e2 <prvIsQueueEmpty>
     cd6:	88 23       	and	r24, r24
     cd8:	09 f4       	brne	.+2      	; 0xcdc <xQueueReceive+0xf6>
     cda:	9c cf       	rjmp	.-200    	; 0xc14 <xQueueReceive+0x2e>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	29 96       	adiw	r28, 0x09	; 9
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	08 95       	ret

00000cfc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	0f 92       	push	r0
     d08:	89 a1       	ldd	r24, Y+33	; 0x21
     d0a:	8f 3f       	cpi	r24, 0xFF	; 255
     d0c:	09 f4       	brne	.+2      	; 0xd10 <vQueueWaitForMessageRestricted+0x14>
     d0e:	19 a2       	std	Y+33, r1	; 0x21
     d10:	8a a1       	ldd	r24, Y+34	; 0x22
     d12:	8f 3f       	cpi	r24, 0xFF	; 255
     d14:	09 f4       	brne	.+2      	; 0xd18 <vQueueWaitForMessageRestricted+0x1c>
     d16:	1a a2       	std	Y+34, r1	; 0x22
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d1e:	81 11       	cpse	r24, r1
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d22:	ce 01       	movw	r24, r28
     d24:	43 96       	adiw	r24, 0x13	; 19
     d26:	3e d5       	rcall	.+2684   	; 0x17a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d28:	ce 01       	movw	r24, r28
     d2a:	ef dd       	rcall	.-1058   	; 0x90a <prvUnlockQueue>
    }
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <prvResetNextTaskUnblockTime>:
     d32:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <pxDelayedTaskList>
     d36:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
     d3a:	80 81       	ld	r24, Z
     d3c:	81 11       	cpse	r24, r1
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <prvResetNextTaskUnblockTime+0x26>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	9f ef       	ldi	r25, 0xFF	; 255
     d44:	dc 01       	movw	r26, r24
     d46:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <xNextTaskUnblockTime>
     d4a:	90 93 66 18 	sts	0x1866, r25	; 0x801866 <xNextTaskUnblockTime+0x1>
     d4e:	a0 93 67 18 	sts	0x1867, r26	; 0x801867 <xNextTaskUnblockTime+0x2>
     d52:	b0 93 68 18 	sts	0x1868, r27	; 0x801868 <xNextTaskUnblockTime+0x3>
     d56:	08 95       	ret
     d58:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <pxDelayedTaskList>
     d5c:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
     d60:	07 80       	ldd	r0, Z+7	; 0x07
     d62:	f0 85       	ldd	r31, Z+8	; 0x08
     d64:	e0 2d       	mov	r30, r0
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	a2 81       	ldd	r26, Z+2	; 0x02
     d6c:	b3 81       	ldd	r27, Z+3	; 0x03
     d6e:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <xNextTaskUnblockTime>
     d72:	90 93 66 18 	sts	0x1866, r25	; 0x801866 <xNextTaskUnblockTime+0x1>
     d76:	a0 93 67 18 	sts	0x1867, r26	; 0x801867 <xNextTaskUnblockTime+0x2>
     d7a:	b0 93 68 18 	sts	0x1868, r27	; 0x801868 <xNextTaskUnblockTime+0x3>
     d7e:	08 95       	ret

00000d80 <prvDeleteTCB>:
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
     d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8a:	5c db       	rcall	.-2376   	; 0x444 <vPortFree>
     d8c:	ce 01       	movw	r24, r28
     d8e:	5a db       	rcall	.-2380   	; 0x444 <vPortFree>
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <prvInitialiseNewTask>:
     d96:	4f 92       	push	r4
     d98:	5f 92       	push	r5
     d9a:	6f 92       	push	r6
     d9c:	7f 92       	push	r7
     d9e:	8f 92       	push	r8
     da0:	9f 92       	push	r9
     da2:	af 92       	push	r10
     da4:	bf 92       	push	r11
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	2c 01       	movw	r4, r24
     db6:	5b 01       	movw	r10, r22
     db8:	4a 01       	movw	r8, r20
     dba:	39 01       	movw	r6, r18
     dbc:	e6 01       	movw	r28, r12
     dbe:	65 ea       	ldi	r22, 0xA5	; 165
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc6:	0e 94 4d 1a 	call	0x349a	; 0x349a <memset>
     dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	82 1a       	sub	r8, r18
     dd2:	91 08       	sbc	r9, r1
     dd4:	88 0e       	add	r8, r24
     dd6:	99 1e       	adc	r9, r25
     dd8:	a1 14       	cp	r10, r1
     dda:	b1 04       	cpc	r11, r1
     ddc:	89 f4       	brne	.+34     	; 0xe00 <prvInitialiseNewTask+0x6a>
     dde:	15 c0       	rjmp	.+42     	; 0xe0a <prvInitialiseNewTask+0x74>
     de0:	82 2f       	mov	r24, r18
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	f5 01       	movw	r30, r10
     de6:	e8 0f       	add	r30, r24
     de8:	f9 1f       	adc	r31, r25
     dea:	30 81       	ld	r19, Z
     dec:	de 01       	movw	r26, r28
     dee:	a8 0f       	add	r26, r24
     df0:	b9 1f       	adc	r27, r25
     df2:	5d 96       	adiw	r26, 0x1d	; 29
     df4:	3c 93       	st	X, r19
     df6:	80 81       	ld	r24, Z
     df8:	88 23       	and	r24, r24
     dfa:	29 f0       	breq	.+10     	; 0xe06 <prvInitialiseNewTask+0x70>
     dfc:	2f 5f       	subi	r18, 0xFF	; 255
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <prvInitialiseNewTask+0x6c>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	20 31       	cpi	r18, 0x10	; 16
     e04:	68 f3       	brcs	.-38     	; 0xde0 <prvInitialiseNewTask+0x4a>
     e06:	1c a6       	std	Y+44, r1	; 0x2c
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <prvInitialiseNewTask+0x76>
     e0a:	1d 8e       	std	Y+29, r1	; 0x1d
     e0c:	0a 30       	cpi	r16, 0x0A	; 10
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <prvInitialiseNewTask+0x7c>
     e10:	09 e0       	ldi	r16, 0x09	; 9
     e12:	0a 8f       	std	Y+26, r16	; 0x1a
     e14:	0d a7       	std	Y+45, r16	; 0x2d
     e16:	1e a6       	std	Y+46, r1	; 0x2e
     e18:	ce 01       	movw	r24, r28
     e1a:	02 96       	adiw	r24, 0x02	; 2
     e1c:	60 db       	rcall	.-2368   	; 0x4de <vListInitialiseItem>
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 96       	adiw	r24, 0x0e	; 14
     e22:	5d db       	rcall	.-2374   	; 0x4de <vListInitialiseItem>
     e24:	db 87       	std	Y+11, r29	; 0x0b
     e26:	ca 87       	std	Y+10, r28	; 0x0a
     e28:	8a e0       	ldi	r24, 0x0A	; 10
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	80 1b       	sub	r24, r16
     e32:	91 09       	sbc	r25, r1
     e34:	a1 09       	sbc	r26, r1
     e36:	b1 09       	sbc	r27, r1
     e38:	8e 87       	std	Y+14, r24	; 0x0e
     e3a:	9f 87       	std	Y+15, r25	; 0x0f
     e3c:	a8 8b       	std	Y+16, r26	; 0x10
     e3e:	b9 8b       	std	Y+17, r27	; 0x11
     e40:	df 8b       	std	Y+23, r29	; 0x17
     e42:	ce 8b       	std	Y+22, r28	; 0x16
     e44:	84 e0       	ldi	r24, 0x04	; 4
     e46:	fe 01       	movw	r30, r28
     e48:	bf 96       	adiw	r30, 0x2f	; 47
     e4a:	df 01       	movw	r26, r30
     e4c:	1d 92       	st	X+, r1
     e4e:	8a 95       	dec	r24
     e50:	e9 f7       	brne	.-6      	; 0xe4c <prvInitialiseNewTask+0xb6>
     e52:	1b aa       	std	Y+51, r1	; 0x33
     e54:	a3 01       	movw	r20, r6
     e56:	b2 01       	movw	r22, r4
     e58:	c4 01       	movw	r24, r8
     e5a:	b5 db       	rcall	.-2198   	; 0x5c6 <pxPortInitialiseStack>
     e5c:	99 83       	std	Y+1, r25	; 0x01
     e5e:	88 83       	st	Y, r24
     e60:	e1 14       	cp	r14, r1
     e62:	f1 04       	cpc	r15, r1
     e64:	19 f0       	breq	.+6      	; 0xe6c <prvInitialiseNewTask+0xd6>
     e66:	f7 01       	movw	r30, r14
     e68:	d1 83       	std	Z+1, r29	; 0x01
     e6a:	c0 83       	st	Z, r28
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	4f 90       	pop	r4
     e8a:	08 95       	ret

00000e8c <prvInitialiseTaskLists>:
     e8c:	cf 93       	push	r28
     e8e:	c0 e0       	ldi	r28, 0x00	; 0
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <prvInitialiseTaskLists+0x16>
     e92:	2b e0       	ldi	r18, 0x0B	; 11
     e94:	c2 9f       	mul	r28, r18
     e96:	c0 01       	movw	r24, r0
     e98:	11 24       	eor	r1, r1
     e9a:	8d 54       	subi	r24, 0x4D	; 77
     e9c:	97 4e       	sbci	r25, 0xE7	; 231
     e9e:	0e db       	rcall	.-2532   	; 0x4bc <vListInitialise>
     ea0:	cf 5f       	subi	r28, 0xFF	; 255
     ea2:	ca 30       	cpi	r28, 0x0A	; 10
     ea4:	b0 f3       	brcs	.-20     	; 0xe92 <prvInitialiseTaskLists+0x6>
     ea6:	88 ea       	ldi	r24, 0xA8	; 168
     ea8:	98 e1       	ldi	r25, 0x18	; 24
     eaa:	08 db       	rcall	.-2544   	; 0x4bc <vListInitialise>
     eac:	8d e9       	ldi	r24, 0x9D	; 157
     eae:	98 e1       	ldi	r25, 0x18	; 24
     eb0:	05 db       	rcall	.-2550   	; 0x4bc <vListInitialise>
     eb2:	8e e8       	ldi	r24, 0x8E	; 142
     eb4:	98 e1       	ldi	r25, 0x18	; 24
     eb6:	02 db       	rcall	.-2556   	; 0x4bc <vListInitialise>
     eb8:	83 e8       	ldi	r24, 0x83	; 131
     eba:	98 e1       	ldi	r25, 0x18	; 24
     ebc:	ff da       	rcall	.-2562   	; 0x4bc <vListInitialise>
     ebe:	87 e7       	ldi	r24, 0x77	; 119
     ec0:	98 e1       	ldi	r25, 0x18	; 24
     ec2:	fc da       	rcall	.-2568   	; 0x4bc <vListInitialise>
     ec4:	88 ea       	ldi	r24, 0xA8	; 168
     ec6:	98 e1       	ldi	r25, 0x18	; 24
     ec8:	90 93 9c 18 	sts	0x189C, r25	; 0x80189c <pxDelayedTaskList+0x1>
     ecc:	80 93 9b 18 	sts	0x189B, r24	; 0x80189b <pxDelayedTaskList>
     ed0:	8d e9       	ldi	r24, 0x9D	; 157
     ed2:	98 e1       	ldi	r25, 0x18	; 24
     ed4:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <pxOverflowDelayedTaskList+0x1>
     ed8:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <pxOverflowDelayedTaskList>
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <prvAddNewTaskToReadyList>:
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ec 01       	movw	r28, r24
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	0f 92       	push	r0
     eec:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <uxCurrentNumberOfTasks>
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <uxCurrentNumberOfTasks>
     ef6:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <pxCurrentTCB>
     efa:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
     efe:	89 2b       	or	r24, r25
     f00:	51 f4       	brne	.+20     	; 0xf16 <prvAddNewTaskToReadyList+0x36>
     f02:	d0 93 22 19 	sts	0x1922, r29	; 0x801922 <pxCurrentTCB+0x1>
     f06:	c0 93 21 19 	sts	0x1921, r28	; 0x801921 <pxCurrentTCB>
     f0a:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <uxCurrentNumberOfTasks>
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 f4       	brne	.+36     	; 0xf36 <prvAddNewTaskToReadyList+0x56>
     f12:	bc df       	rcall	.-136    	; 0xe8c <prvInitialiseTaskLists>
     f14:	10 c0       	rjmp	.+32     	; 0xf36 <prvAddNewTaskToReadyList+0x56>
     f16:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <xSchedulerRunning>
     f1a:	81 11       	cpse	r24, r1
     f1c:	0c c0       	rjmp	.+24     	; 0xf36 <prvAddNewTaskToReadyList+0x56>
     f1e:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <pxCurrentTCB>
     f22:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
     f26:	92 8d       	ldd	r25, Z+26	; 0x1a
     f28:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f2a:	89 17       	cp	r24, r25
     f2c:	20 f0       	brcs	.+8      	; 0xf36 <prvAddNewTaskToReadyList+0x56>
     f2e:	d0 93 22 19 	sts	0x1922, r29	; 0x801922 <pxCurrentTCB+0x1>
     f32:	c0 93 21 19 	sts	0x1921, r28	; 0x801921 <pxCurrentTCB>
     f36:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <uxTaskNumber>
     f3a:	8f 5f       	subi	r24, 0xFF	; 255
     f3c:	80 93 69 18 	sts	0x1869, r24	; 0x801869 <uxTaskNumber>
     f40:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f42:	80 91 71 18 	lds	r24, 0x1871	; 0x801871 <uxTopReadyPriority>
     f46:	8e 17       	cp	r24, r30
     f48:	10 f4       	brcc	.+4      	; 0xf4e <prvAddNewTaskToReadyList+0x6e>
     f4a:	e0 93 71 18 	sts	0x1871, r30	; 0x801871 <uxTopReadyPriority>
     f4e:	8b e0       	ldi	r24, 0x0B	; 11
     f50:	8e 9f       	mul	r24, r30
     f52:	f0 01       	movw	r30, r0
     f54:	11 24       	eor	r1, r1
     f56:	ed 54       	subi	r30, 0x4D	; 77
     f58:	f7 4e       	sbci	r31, 0xE7	; 231
     f5a:	01 80       	ldd	r0, Z+1	; 0x01
     f5c:	f2 81       	ldd	r31, Z+2	; 0x02
     f5e:	e0 2d       	mov	r30, r0
     f60:	ff 83       	std	Y+7, r31	; 0x07
     f62:	ee 83       	std	Y+6, r30	; 0x06
     f64:	26 81       	ldd	r18, Z+6	; 0x06
     f66:	37 81       	ldd	r19, Z+7	; 0x07
     f68:	39 87       	std	Y+9, r19	; 0x09
     f6a:	28 87       	std	Y+8, r18	; 0x08
     f6c:	a6 81       	ldd	r26, Z+6	; 0x06
     f6e:	b7 81       	ldd	r27, Z+7	; 0x07
     f70:	9e 01       	movw	r18, r28
     f72:	2e 5f       	subi	r18, 0xFE	; 254
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	15 96       	adiw	r26, 0x05	; 5
     f78:	3c 93       	st	X, r19
     f7a:	2e 93       	st	-X, r18
     f7c:	14 97       	sbiw	r26, 0x04	; 4
     f7e:	37 83       	std	Z+7, r19	; 0x07
     f80:	26 83       	std	Z+6, r18	; 0x06
     f82:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f84:	8e 9f       	mul	r24, r30
     f86:	f0 01       	movw	r30, r0
     f88:	11 24       	eor	r1, r1
     f8a:	ed 54       	subi	r30, 0x4D	; 77
     f8c:	f7 4e       	sbci	r31, 0xE7	; 231
     f8e:	fd 87       	std	Y+13, r31	; 0x0d
     f90:	ec 87       	std	Y+12, r30	; 0x0c
     f92:	80 81       	ld	r24, Z
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 83       	st	Z, r24
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <xSchedulerRunning>
     fa0:	88 23       	and	r24, r24
     fa2:	49 f0       	breq	.+18     	; 0xfb6 <prvAddNewTaskToReadyList+0xd6>
     fa4:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <pxCurrentTCB>
     fa8:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
     fac:	92 8d       	ldd	r25, Z+26	; 0x1a
     fae:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb0:	98 17       	cp	r25, r24
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <prvAddNewTaskToReadyList+0xd6>
     fb4:	51 db       	rcall	.-2398   	; 0x658 <vPortYield>
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <prvCheckTasksWaitingTermination>:
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	1a c0       	rjmp	.+52     	; 0xff6 <prvCheckTasksWaitingTermination+0x3a>
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	0f 92       	push	r0
     fc8:	e0 91 8a 18 	lds	r30, 0x188A	; 0x80188a <xTasksWaitingTermination+0x7>
     fcc:	f0 91 8b 18 	lds	r31, 0x188B	; 0x80188b <xTasksWaitingTermination+0x8>
     fd0:	c0 85       	ldd	r28, Z+8	; 0x08
     fd2:	d1 85       	ldd	r29, Z+9	; 0x09
     fd4:	ce 01       	movw	r24, r28
     fd6:	02 96       	adiw	r24, 0x02	; 2
     fd8:	c3 da       	rcall	.-2682   	; 0x560 <uxListRemove>
     fda:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <uxCurrentNumberOfTasks>
     fde:	81 50       	subi	r24, 0x01	; 1
     fe0:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <uxCurrentNumberOfTasks>
     fe4:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxDeletedTasksWaitingCleanUp>
     fe8:	81 50       	subi	r24, 0x01	; 1
     fea:	80 93 82 18 	sts	0x1882, r24	; 0x801882 <uxDeletedTasksWaitingCleanUp>
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	ce 01       	movw	r24, r28
     ff4:	c5 de       	rcall	.-630    	; 0xd80 <prvDeleteTCB>
     ff6:	80 91 82 18 	lds	r24, 0x1882	; 0x801882 <uxDeletedTasksWaitingCleanUp>
     ffa:	81 11       	cpse	r24, r1
     ffc:	e2 cf       	rjmp	.-60     	; 0xfc2 <prvCheckTasksWaitingTermination+0x6>
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <prvAddCurrentTaskToDelayedList>:
    1004:	8f 92       	push	r8
    1006:	9f 92       	push	r9
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	6b 01       	movw	r12, r22
    101a:	7c 01       	movw	r14, r24
    101c:	c4 2f       	mov	r28, r20
    101e:	80 90 72 18 	lds	r8, 0x1872	; 0x801872 <xTickCount>
    1022:	90 90 73 18 	lds	r9, 0x1873	; 0x801873 <xTickCount+0x1>
    1026:	a0 90 74 18 	lds	r10, 0x1874	; 0x801874 <xTickCount+0x2>
    102a:	b0 90 75 18 	lds	r11, 0x1875	; 0x801875 <xTickCount+0x3>
    102e:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <pxCurrentTCB>
    1032:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    1036:	02 96       	adiw	r24, 0x02	; 2
    1038:	93 da       	rcall	.-2778   	; 0x560 <uxListRemove>
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	c8 16       	cp	r12, r24
    103e:	d8 06       	cpc	r13, r24
    1040:	e8 06       	cpc	r14, r24
    1042:	f8 06       	cpc	r15, r24
    1044:	b1 f5       	brne	.+108    	; 0x10b2 <prvAddCurrentTaskToDelayedList+0xae>
    1046:	cc 23       	and	r28, r28
    1048:	a1 f1       	breq	.+104    	; 0x10b2 <prvAddCurrentTaskToDelayedList+0xae>
    104a:	e7 e7       	ldi	r30, 0x77	; 119
    104c:	f8 e1       	ldi	r31, 0x18	; 24
    104e:	a1 81       	ldd	r26, Z+1	; 0x01
    1050:	b2 81       	ldd	r27, Z+2	; 0x02
    1052:	c0 91 21 19 	lds	r28, 0x1921	; 0x801921 <pxCurrentTCB>
    1056:	d0 91 22 19 	lds	r29, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    105a:	bf 83       	std	Y+7, r27	; 0x07
    105c:	ae 83       	std	Y+6, r26	; 0x06
    105e:	c0 91 21 19 	lds	r28, 0x1921	; 0x801921 <pxCurrentTCB>
    1062:	d0 91 22 19 	lds	r29, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    1066:	16 96       	adiw	r26, 0x06	; 6
    1068:	8d 91       	ld	r24, X+
    106a:	9c 91       	ld	r25, X
    106c:	17 97       	sbiw	r26, 0x07	; 7
    106e:	99 87       	std	Y+9, r25	; 0x09
    1070:	88 87       	std	Y+8, r24	; 0x08
    1072:	16 96       	adiw	r26, 0x06	; 6
    1074:	cd 91       	ld	r28, X+
    1076:	dc 91       	ld	r29, X
    1078:	17 97       	sbiw	r26, 0x07	; 7
    107a:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <pxCurrentTCB>
    107e:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    1082:	02 96       	adiw	r24, 0x02	; 2
    1084:	9d 83       	std	Y+5, r25	; 0x05
    1086:	8c 83       	std	Y+4, r24	; 0x04
    1088:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <pxCurrentTCB>
    108c:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    1090:	02 96       	adiw	r24, 0x02	; 2
    1092:	17 96       	adiw	r26, 0x07	; 7
    1094:	9c 93       	st	X, r25
    1096:	8e 93       	st	-X, r24
    1098:	16 97       	sbiw	r26, 0x06	; 6
    109a:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <pxCurrentTCB>
    109e:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    10a2:	1d 96       	adiw	r26, 0x0d	; 13
    10a4:	fc 93       	st	X, r31
    10a6:	ee 93       	st	-X, r30
    10a8:	1c 97       	sbiw	r26, 0x0c	; 12
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	80 83       	st	Z, r24
    10b0:	3d c0       	rjmp	.+122    	; 0x112c <prvAddCurrentTaskToDelayedList+0x128>
    10b2:	c8 0c       	add	r12, r8
    10b4:	d9 1c       	adc	r13, r9
    10b6:	ea 1c       	adc	r14, r10
    10b8:	fb 1c       	adc	r15, r11
    10ba:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <pxCurrentTCB>
    10be:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    10c2:	c2 82       	std	Z+2, r12	; 0x02
    10c4:	d3 82       	std	Z+3, r13	; 0x03
    10c6:	e4 82       	std	Z+4, r14	; 0x04
    10c8:	f5 82       	std	Z+5, r15	; 0x05
    10ca:	c8 14       	cp	r12, r8
    10cc:	d9 04       	cpc	r13, r9
    10ce:	ea 04       	cpc	r14, r10
    10d0:	fb 04       	cpc	r15, r11
    10d2:	60 f4       	brcc	.+24     	; 0x10ec <prvAddCurrentTaskToDelayedList+0xe8>
    10d4:	60 91 21 19 	lds	r22, 0x1921	; 0x801921 <pxCurrentTCB>
    10d8:	70 91 22 19 	lds	r23, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    10dc:	80 91 99 18 	lds	r24, 0x1899	; 0x801899 <pxOverflowDelayedTaskList>
    10e0:	90 91 9a 18 	lds	r25, 0x189A	; 0x80189a <pxOverflowDelayedTaskList+0x1>
    10e4:	6e 5f       	subi	r22, 0xFE	; 254
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	fe d9       	rcall	.-3076   	; 0x4e6 <vListInsert>
    10ea:	20 c0       	rjmp	.+64     	; 0x112c <prvAddCurrentTaskToDelayedList+0x128>
    10ec:	60 91 21 19 	lds	r22, 0x1921	; 0x801921 <pxCurrentTCB>
    10f0:	70 91 22 19 	lds	r23, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    10f4:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <pxDelayedTaskList>
    10f8:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    10fc:	6e 5f       	subi	r22, 0xFE	; 254
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	f2 d9       	rcall	.-3100   	; 0x4e6 <vListInsert>
    1102:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <xNextTaskUnblockTime>
    1106:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <xNextTaskUnblockTime+0x1>
    110a:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <xNextTaskUnblockTime+0x2>
    110e:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <xNextTaskUnblockTime+0x3>
    1112:	c8 16       	cp	r12, r24
    1114:	d9 06       	cpc	r13, r25
    1116:	ea 06       	cpc	r14, r26
    1118:	fb 06       	cpc	r15, r27
    111a:	40 f4       	brcc	.+16     	; 0x112c <prvAddCurrentTaskToDelayedList+0x128>
    111c:	c0 92 65 18 	sts	0x1865, r12	; 0x801865 <xNextTaskUnblockTime>
    1120:	d0 92 66 18 	sts	0x1866, r13	; 0x801866 <xNextTaskUnblockTime+0x1>
    1124:	e0 92 67 18 	sts	0x1867, r14	; 0x801867 <xNextTaskUnblockTime+0x2>
    1128:	f0 92 68 18 	sts	0x1868, r15	; 0x801868 <xNextTaskUnblockTime+0x3>
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	08 95       	ret

00001142 <xTaskCreate>:
    1142:	2f 92       	push	r2
    1144:	3f 92       	push	r3
    1146:	4f 92       	push	r4
    1148:	5f 92       	push	r5
    114a:	6f 92       	push	r6
    114c:	7f 92       	push	r7
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	3c 01       	movw	r6, r24
    1166:	1b 01       	movw	r2, r22
    1168:	4a 01       	movw	r8, r20
    116a:	29 01       	movw	r4, r18
    116c:	ca 01       	movw	r24, r20
    116e:	c2 d8       	rcall	.-3708   	; 0x2f4 <pvPortMalloc>
    1170:	6c 01       	movw	r12, r24
    1172:	89 2b       	or	r24, r25
    1174:	61 f0       	breq	.+24     	; 0x118e <xTaskCreate+0x4c>
    1176:	84 e3       	ldi	r24, 0x34	; 52
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	bc d8       	rcall	.-3720   	; 0x2f4 <pvPortMalloc>
    117c:	ec 01       	movw	r28, r24
    117e:	89 2b       	or	r24, r25
    1180:	19 f0       	breq	.+6      	; 0x1188 <xTaskCreate+0x46>
    1182:	dc 8e       	std	Y+28, r13	; 0x1c
    1184:	cb 8e       	std	Y+27, r12	; 0x1b
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <xTaskCreate+0x50>
    1188:	c6 01       	movw	r24, r12
    118a:	5c d9       	rcall	.-3400   	; 0x444 <vPortFree>
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <xTaskCreate+0x50>
    118e:	c0 e0       	ldi	r28, 0x00	; 0
    1190:	d0 e0       	ldi	r29, 0x00	; 0
    1192:	20 97       	sbiw	r28, 0x00	; 0
    1194:	61 f0       	breq	.+24     	; 0x11ae <xTaskCreate+0x6c>
    1196:	a1 2c       	mov	r10, r1
    1198:	b1 2c       	mov	r11, r1
    119a:	6e 01       	movw	r12, r28
    119c:	92 01       	movw	r18, r4
    119e:	a4 01       	movw	r20, r8
    11a0:	b1 01       	movw	r22, r2
    11a2:	c3 01       	movw	r24, r6
    11a4:	f8 dd       	rcall	.-1040   	; 0xd96 <prvInitialiseNewTask>
    11a6:	ce 01       	movw	r24, r28
    11a8:	9b de       	rcall	.-714    	; 0xee0 <prvAddNewTaskToReadyList>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <xTaskCreate+0x6e>
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12
    11be:	bf 90       	pop	r11
    11c0:	af 90       	pop	r10
    11c2:	9f 90       	pop	r9
    11c4:	8f 90       	pop	r8
    11c6:	7f 90       	pop	r7
    11c8:	6f 90       	pop	r6
    11ca:	5f 90       	pop	r5
    11cc:	4f 90       	pop	r4
    11ce:	3f 90       	pop	r3
    11d0:	2f 90       	pop	r2
    11d2:	08 95       	ret

000011d4 <vTaskStartScheduler>:
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	0f 2e       	mov	r0, r31
    11dc:	f3 e6       	ldi	r31, 0x63	; 99
    11de:	ef 2e       	mov	r14, r31
    11e0:	f8 e1       	ldi	r31, 0x18	; 24
    11e2:	ff 2e       	mov	r15, r31
    11e4:	f0 2d       	mov	r31, r0
    11e6:	00 e0       	ldi	r16, 0x00	; 0
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 ec       	ldi	r20, 0xC0	; 192
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	62 e2       	ldi	r22, 0x22	; 34
    11f2:	72 e0       	ldi	r23, 0x02	; 2
    11f4:	8d ec       	ldi	r24, 0xCD	; 205
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a4 df       	rcall	.-184    	; 0x1142 <xTaskCreate>
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <vTaskStartScheduler+0x2c>
    11fe:	31 d5       	rcall	.+2658   	; 0x1c62 <xTimerCreateTimerTask>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	c1 f4       	brne	.+48     	; 0x1234 <vTaskStartScheduler+0x60>
    1204:	f8 94       	cli
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    120a:	dc 01       	movw	r26, r24
    120c:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <xNextTaskUnblockTime>
    1210:	90 93 66 18 	sts	0x1866, r25	; 0x801866 <xNextTaskUnblockTime+0x1>
    1214:	a0 93 67 18 	sts	0x1867, r26	; 0x801867 <xNextTaskUnblockTime+0x2>
    1218:	b0 93 68 18 	sts	0x1868, r27	; 0x801868 <xNextTaskUnblockTime+0x3>
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 70 18 	sts	0x1870, r24	; 0x801870 <xSchedulerRunning>
    1222:	10 92 72 18 	sts	0x1872, r1	; 0x801872 <xTickCount>
    1226:	10 92 73 18 	sts	0x1873, r1	; 0x801873 <xTickCount+0x1>
    122a:	10 92 74 18 	sts	0x1874, r1	; 0x801874 <xTickCount+0x2>
    122e:	10 92 75 18 	sts	0x1875, r1	; 0x801875 <xTickCount+0x3>
    1232:	e0 d9       	rcall	.-3136   	; 0x5f4 <xPortStartScheduler>
    1234:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	08 95       	ret

00001240 <vTaskSuspendAll>:
    1240:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <uxSchedulerSuspended>
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	80 93 62 18 	sts	0x1862, r24	; 0x801862 <uxSchedulerSuspended>
    124a:	08 95       	ret

0000124c <xTaskGetTickCount>:
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	0f 92       	push	r0
    1252:	60 91 72 18 	lds	r22, 0x1872	; 0x801872 <xTickCount>
    1256:	70 91 73 18 	lds	r23, 0x1873	; 0x801873 <xTickCount+0x1>
    125a:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <xTickCount+0x2>
    125e:	90 91 75 18 	lds	r25, 0x1875	; 0x801875 <xTickCount+0x3>
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	08 95       	ret

00001268 <xTaskIncrementTick>:
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <uxSchedulerSuspended>
    1278:	81 11       	cpse	r24, r1
    127a:	05 c1       	rjmp	.+522    	; 0x1486 <xTaskIncrementTick+0x21e>
    127c:	c0 90 72 18 	lds	r12, 0x1872	; 0x801872 <xTickCount>
    1280:	d0 90 73 18 	lds	r13, 0x1873	; 0x801873 <xTickCount+0x1>
    1284:	e0 90 74 18 	lds	r14, 0x1874	; 0x801874 <xTickCount+0x2>
    1288:	f0 90 75 18 	lds	r15, 0x1875	; 0x801875 <xTickCount+0x3>
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	c8 1a       	sub	r12, r24
    1290:	d8 0a       	sbc	r13, r24
    1292:	e8 0a       	sbc	r14, r24
    1294:	f8 0a       	sbc	r15, r24
    1296:	c0 92 72 18 	sts	0x1872, r12	; 0x801872 <xTickCount>
    129a:	d0 92 73 18 	sts	0x1873, r13	; 0x801873 <xTickCount+0x1>
    129e:	e0 92 74 18 	sts	0x1874, r14	; 0x801874 <xTickCount+0x2>
    12a2:	f0 92 75 18 	sts	0x1875, r15	; 0x801875 <xTickCount+0x3>
    12a6:	c1 14       	cp	r12, r1
    12a8:	d1 04       	cpc	r13, r1
    12aa:	e1 04       	cpc	r14, r1
    12ac:	f1 04       	cpc	r15, r1
    12ae:	b1 f4       	brne	.+44     	; 0x12dc <xTaskIncrementTick+0x74>
    12b0:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <pxDelayedTaskList>
    12b4:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    12b8:	20 91 99 18 	lds	r18, 0x1899	; 0x801899 <pxOverflowDelayedTaskList>
    12bc:	30 91 9a 18 	lds	r19, 0x189A	; 0x80189a <pxOverflowDelayedTaskList+0x1>
    12c0:	30 93 9c 18 	sts	0x189C, r19	; 0x80189c <pxDelayedTaskList+0x1>
    12c4:	20 93 9b 18 	sts	0x189B, r18	; 0x80189b <pxDelayedTaskList>
    12c8:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <pxOverflowDelayedTaskList+0x1>
    12cc:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <pxOverflowDelayedTaskList>
    12d0:	80 91 6a 18 	lds	r24, 0x186A	; 0x80186a <xNumOfOverflows>
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	80 93 6a 18 	sts	0x186A, r24	; 0x80186a <xNumOfOverflows>
    12da:	2b dd       	rcall	.-1450   	; 0xd32 <prvResetNextTaskUnblockTime>
    12dc:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <xNextTaskUnblockTime>
    12e0:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <xNextTaskUnblockTime+0x1>
    12e4:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <xNextTaskUnblockTime+0x2>
    12e8:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <xNextTaskUnblockTime+0x3>
    12ec:	c8 16       	cp	r12, r24
    12ee:	d9 06       	cpc	r13, r25
    12f0:	ea 06       	cpc	r14, r26
    12f2:	fb 06       	cpc	r15, r27
    12f4:	20 f4       	brcc	.+8      	; 0x12fe <xTaskIncrementTick+0x96>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	b2 c0       	rjmp	.+356    	; 0x145e <xTaskIncrementTick+0x1f6>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <xTaskIncrementTick+0x98>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <pxDelayedTaskList>
    1304:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    1308:	90 81       	ld	r25, Z
    130a:	91 11       	cpse	r25, r1
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <xTaskIncrementTick+0xbe>
    130e:	4f ef       	ldi	r20, 0xFF	; 255
    1310:	5f ef       	ldi	r21, 0xFF	; 255
    1312:	ba 01       	movw	r22, r20
    1314:	40 93 65 18 	sts	0x1865, r20	; 0x801865 <xNextTaskUnblockTime>
    1318:	50 93 66 18 	sts	0x1866, r21	; 0x801866 <xNextTaskUnblockTime+0x1>
    131c:	60 93 67 18 	sts	0x1867, r22	; 0x801867 <xNextTaskUnblockTime+0x2>
    1320:	70 93 68 18 	sts	0x1868, r23	; 0x801868 <xNextTaskUnblockTime+0x3>
    1324:	9c c0       	rjmp	.+312    	; 0x145e <xTaskIncrementTick+0x1f6>
    1326:	e0 91 9b 18 	lds	r30, 0x189B	; 0x80189b <pxDelayedTaskList>
    132a:	f0 91 9c 18 	lds	r31, 0x189C	; 0x80189c <pxDelayedTaskList+0x1>
    132e:	07 80       	ldd	r0, Z+7	; 0x07
    1330:	f0 85       	ldd	r31, Z+8	; 0x08
    1332:	e0 2d       	mov	r30, r0
    1334:	00 84       	ldd	r0, Z+8	; 0x08
    1336:	f1 85       	ldd	r31, Z+9	; 0x09
    1338:	e0 2d       	mov	r30, r0
    133a:	42 81       	ldd	r20, Z+2	; 0x02
    133c:	53 81       	ldd	r21, Z+3	; 0x03
    133e:	64 81       	ldd	r22, Z+4	; 0x04
    1340:	75 81       	ldd	r23, Z+5	; 0x05
    1342:	c4 16       	cp	r12, r20
    1344:	d5 06       	cpc	r13, r21
    1346:	e6 06       	cpc	r14, r22
    1348:	f7 06       	cpc	r15, r23
    134a:	48 f4       	brcc	.+18     	; 0x135e <xTaskIncrementTick+0xf6>
    134c:	40 93 65 18 	sts	0x1865, r20	; 0x801865 <xNextTaskUnblockTime>
    1350:	50 93 66 18 	sts	0x1866, r21	; 0x801866 <xNextTaskUnblockTime+0x1>
    1354:	60 93 67 18 	sts	0x1867, r22	; 0x801867 <xNextTaskUnblockTime+0x2>
    1358:	70 93 68 18 	sts	0x1868, r23	; 0x801868 <xNextTaskUnblockTime+0x3>
    135c:	80 c0       	rjmp	.+256    	; 0x145e <xTaskIncrementTick+0x1f6>
    135e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1360:	b5 85       	ldd	r27, Z+13	; 0x0d
    1362:	c6 81       	ldd	r28, Z+6	; 0x06
    1364:	d7 81       	ldd	r29, Z+7	; 0x07
    1366:	20 85       	ldd	r18, Z+8	; 0x08
    1368:	31 85       	ldd	r19, Z+9	; 0x09
    136a:	3f 83       	std	Y+7, r19	; 0x07
    136c:	2e 83       	std	Y+6, r18	; 0x06
    136e:	c0 85       	ldd	r28, Z+8	; 0x08
    1370:	d1 85       	ldd	r29, Z+9	; 0x09
    1372:	26 81       	ldd	r18, Z+6	; 0x06
    1374:	37 81       	ldd	r19, Z+7	; 0x07
    1376:	3d 83       	std	Y+5, r19	; 0x05
    1378:	2c 83       	std	Y+4, r18	; 0x04
    137a:	11 96       	adiw	r26, 0x01	; 1
    137c:	4d 91       	ld	r20, X+
    137e:	5c 91       	ld	r21, X
    1380:	12 97       	sbiw	r26, 0x02	; 2
    1382:	9f 01       	movw	r18, r30
    1384:	2e 5f       	subi	r18, 0xFE	; 254
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	42 17       	cp	r20, r18
    138a:	53 07       	cpc	r21, r19
    138c:	31 f4       	brne	.+12     	; 0x139a <xTaskIncrementTick+0x132>
    138e:	40 85       	ldd	r20, Z+8	; 0x08
    1390:	51 85       	ldd	r21, Z+9	; 0x09
    1392:	12 96       	adiw	r26, 0x02	; 2
    1394:	5c 93       	st	X, r21
    1396:	4e 93       	st	-X, r20
    1398:	11 97       	sbiw	r26, 0x01	; 1
    139a:	15 86       	std	Z+13, r1	; 0x0d
    139c:	14 86       	std	Z+12, r1	; 0x0c
    139e:	9c 91       	ld	r25, X
    13a0:	91 50       	subi	r25, 0x01	; 1
    13a2:	9c 93       	st	X, r25
    13a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    13a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    13a8:	10 97       	sbiw	r26, 0x00	; 0
    13aa:	09 f1       	breq	.+66     	; 0x13ee <xTaskIncrementTick+0x186>
    13ac:	c2 89       	ldd	r28, Z+18	; 0x12
    13ae:	d3 89       	ldd	r29, Z+19	; 0x13
    13b0:	44 89       	ldd	r20, Z+20	; 0x14
    13b2:	55 89       	ldd	r21, Z+21	; 0x15
    13b4:	5f 83       	std	Y+7, r21	; 0x07
    13b6:	4e 83       	std	Y+6, r20	; 0x06
    13b8:	c4 89       	ldd	r28, Z+20	; 0x14
    13ba:	d5 89       	ldd	r29, Z+21	; 0x15
    13bc:	42 89       	ldd	r20, Z+18	; 0x12
    13be:	53 89       	ldd	r21, Z+19	; 0x13
    13c0:	5d 83       	std	Y+5, r21	; 0x05
    13c2:	4c 83       	std	Y+4, r20	; 0x04
    13c4:	11 96       	adiw	r26, 0x01	; 1
    13c6:	6d 91       	ld	r22, X+
    13c8:	7c 91       	ld	r23, X
    13ca:	12 97       	sbiw	r26, 0x02	; 2
    13cc:	af 01       	movw	r20, r30
    13ce:	42 5f       	subi	r20, 0xF2	; 242
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	64 17       	cp	r22, r20
    13d4:	75 07       	cpc	r23, r21
    13d6:	31 f4       	brne	.+12     	; 0x13e4 <xTaskIncrementTick+0x17c>
    13d8:	44 89       	ldd	r20, Z+20	; 0x14
    13da:	55 89       	ldd	r21, Z+21	; 0x15
    13dc:	12 96       	adiw	r26, 0x02	; 2
    13de:	5c 93       	st	X, r21
    13e0:	4e 93       	st	-X, r20
    13e2:	11 97       	sbiw	r26, 0x01	; 1
    13e4:	11 8e       	std	Z+25, r1	; 0x19
    13e6:	10 8e       	std	Z+24, r1	; 0x18
    13e8:	9c 91       	ld	r25, X
    13ea:	91 50       	subi	r25, 0x01	; 1
    13ec:	9c 93       	st	X, r25
    13ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13f0:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <uxTopReadyPriority>
    13f4:	9a 17       	cp	r25, r26
    13f6:	10 f4       	brcc	.+4      	; 0x13fc <xTaskIncrementTick+0x194>
    13f8:	a0 93 71 18 	sts	0x1871, r26	; 0x801871 <uxTopReadyPriority>
    13fc:	9b e0       	ldi	r25, 0x0B	; 11
    13fe:	9a 9f       	mul	r25, r26
    1400:	d0 01       	movw	r26, r0
    1402:	11 24       	eor	r1, r1
    1404:	ad 54       	subi	r26, 0x4D	; 77
    1406:	b7 4e       	sbci	r27, 0xE7	; 231
    1408:	11 96       	adiw	r26, 0x01	; 1
    140a:	0d 90       	ld	r0, X+
    140c:	bc 91       	ld	r27, X
    140e:	a0 2d       	mov	r26, r0
    1410:	b7 83       	std	Z+7, r27	; 0x07
    1412:	a6 83       	std	Z+6, r26	; 0x06
    1414:	16 96       	adiw	r26, 0x06	; 6
    1416:	4d 91       	ld	r20, X+
    1418:	5c 91       	ld	r21, X
    141a:	17 97       	sbiw	r26, 0x07	; 7
    141c:	51 87       	std	Z+9, r21	; 0x09
    141e:	40 87       	std	Z+8, r20	; 0x08
    1420:	16 96       	adiw	r26, 0x06	; 6
    1422:	cd 91       	ld	r28, X+
    1424:	dc 91       	ld	r29, X
    1426:	17 97       	sbiw	r26, 0x07	; 7
    1428:	3d 83       	std	Y+5, r19	; 0x05
    142a:	2c 83       	std	Y+4, r18	; 0x04
    142c:	17 96       	adiw	r26, 0x07	; 7
    142e:	3c 93       	st	X, r19
    1430:	2e 93       	st	-X, r18
    1432:	16 97       	sbiw	r26, 0x06	; 6
    1434:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1436:	9a 9f       	mul	r25, r26
    1438:	d0 01       	movw	r26, r0
    143a:	11 24       	eor	r1, r1
    143c:	ad 54       	subi	r26, 0x4D	; 77
    143e:	b7 4e       	sbci	r27, 0xE7	; 231
    1440:	b5 87       	std	Z+13, r27	; 0x0d
    1442:	a4 87       	std	Z+12, r26	; 0x0c
    1444:	9c 91       	ld	r25, X
    1446:	9f 5f       	subi	r25, 0xFF	; 255
    1448:	9c 93       	st	X, r25
    144a:	22 8d       	ldd	r18, Z+26	; 0x1a
    144c:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <pxCurrentTCB>
    1450:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    1454:	92 8d       	ldd	r25, Z+26	; 0x1a
    1456:	29 17       	cp	r18, r25
    1458:	08 f0       	brcs	.+2      	; 0x145c <xTaskIncrementTick+0x1f4>
    145a:	4f cf       	rjmp	.-354    	; 0x12fa <xTaskIncrementTick+0x92>
    145c:	51 cf       	rjmp	.-350    	; 0x1300 <xTaskIncrementTick+0x98>
    145e:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <pxCurrentTCB>
    1462:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    1466:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1468:	9b e0       	ldi	r25, 0x0B	; 11
    146a:	e9 9f       	mul	r30, r25
    146c:	f0 01       	movw	r30, r0
    146e:	11 24       	eor	r1, r1
    1470:	ed 54       	subi	r30, 0x4D	; 77
    1472:	f7 4e       	sbci	r31, 0xE7	; 231
    1474:	90 81       	ld	r25, Z
    1476:	92 30       	cpi	r25, 0x02	; 2
    1478:	08 f0       	brcs	.+2      	; 0x147c <xTaskIncrementTick+0x214>
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 91 6b 18 	lds	r25, 0x186B	; 0x80186b <xYieldPending>
    1480:	91 11       	cpse	r25, r1
    1482:	16 c0       	rjmp	.+44     	; 0x14b0 <xTaskIncrementTick+0x248>
    1484:	16 c0       	rjmp	.+44     	; 0x14b2 <xTaskIncrementTick+0x24a>
    1486:	80 91 6c 18 	lds	r24, 0x186C	; 0x80186c <xPendedTicks>
    148a:	90 91 6d 18 	lds	r25, 0x186D	; 0x80186d <xPendedTicks+0x1>
    148e:	a0 91 6e 18 	lds	r26, 0x186E	; 0x80186e <xPendedTicks+0x2>
    1492:	b0 91 6f 18 	lds	r27, 0x186F	; 0x80186f <xPendedTicks+0x3>
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	a1 1d       	adc	r26, r1
    149a:	b1 1d       	adc	r27, r1
    149c:	80 93 6c 18 	sts	0x186C, r24	; 0x80186c <xPendedTicks>
    14a0:	90 93 6d 18 	sts	0x186D, r25	; 0x80186d <xPendedTicks+0x1>
    14a4:	a0 93 6e 18 	sts	0x186E, r26	; 0x80186e <xPendedTicks+0x2>
    14a8:	b0 93 6f 18 	sts	0x186F, r27	; 0x80186f <xPendedTicks+0x3>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <xTaskIncrementTick+0x24a>
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	ff 90       	pop	r15
    14b8:	ef 90       	pop	r14
    14ba:	df 90       	pop	r13
    14bc:	cf 90       	pop	r12
    14be:	08 95       	ret

000014c0 <xTaskResumeAll>:
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	0f 92       	push	r0
    14d2:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <uxSchedulerSuspended>
    14d6:	81 50       	subi	r24, 0x01	; 1
    14d8:	80 93 62 18 	sts	0x1862, r24	; 0x801862 <uxSchedulerSuspended>
    14dc:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <uxSchedulerSuspended>
    14e0:	81 11       	cpse	r24, r1
    14e2:	be c0       	rjmp	.+380    	; 0x1660 <xTaskResumeAll+0x1a0>
    14e4:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <uxCurrentNumberOfTasks>
    14e8:	81 11       	cpse	r24, r1
    14ea:	88 c0       	rjmp	.+272    	; 0x15fc <xTaskResumeAll+0x13c>
    14ec:	bc c0       	rjmp	.+376    	; 0x1666 <xTaskResumeAll+0x1a6>
    14ee:	e0 91 95 18 	lds	r30, 0x1895	; 0x801895 <xPendingReadyList+0x7>
    14f2:	f0 91 96 18 	lds	r31, 0x1896	; 0x801896 <xPendingReadyList+0x8>
    14f6:	00 84       	ldd	r0, Z+8	; 0x08
    14f8:	f1 85       	ldd	r31, Z+9	; 0x09
    14fa:	e0 2d       	mov	r30, r0
    14fc:	a0 8d       	ldd	r26, Z+24	; 0x18
    14fe:	b1 8d       	ldd	r27, Z+25	; 0x19
    1500:	c2 89       	ldd	r28, Z+18	; 0x12
    1502:	d3 89       	ldd	r29, Z+19	; 0x13
    1504:	84 89       	ldd	r24, Z+20	; 0x14
    1506:	95 89       	ldd	r25, Z+21	; 0x15
    1508:	9f 83       	std	Y+7, r25	; 0x07
    150a:	8e 83       	std	Y+6, r24	; 0x06
    150c:	c4 89       	ldd	r28, Z+20	; 0x14
    150e:	d5 89       	ldd	r29, Z+21	; 0x15
    1510:	82 89       	ldd	r24, Z+18	; 0x12
    1512:	93 89       	ldd	r25, Z+19	; 0x13
    1514:	9d 83       	std	Y+5, r25	; 0x05
    1516:	8c 83       	std	Y+4, r24	; 0x04
    1518:	11 96       	adiw	r26, 0x01	; 1
    151a:	2d 91       	ld	r18, X+
    151c:	3c 91       	ld	r19, X
    151e:	12 97       	sbiw	r26, 0x02	; 2
    1520:	cf 01       	movw	r24, r30
    1522:	0e 96       	adiw	r24, 0x0e	; 14
    1524:	28 17       	cp	r18, r24
    1526:	39 07       	cpc	r19, r25
    1528:	31 f4       	brne	.+12     	; 0x1536 <xTaskResumeAll+0x76>
    152a:	84 89       	ldd	r24, Z+20	; 0x14
    152c:	95 89       	ldd	r25, Z+21	; 0x15
    152e:	12 96       	adiw	r26, 0x02	; 2
    1530:	9c 93       	st	X, r25
    1532:	8e 93       	st	-X, r24
    1534:	11 97       	sbiw	r26, 0x01	; 1
    1536:	11 8e       	std	Z+25, r1	; 0x19
    1538:	10 8e       	std	Z+24, r1	; 0x18
    153a:	8c 91       	ld	r24, X
    153c:	81 50       	subi	r24, 0x01	; 1
    153e:	8c 93       	st	X, r24
    1540:	a4 85       	ldd	r26, Z+12	; 0x0c
    1542:	b5 85       	ldd	r27, Z+13	; 0x0d
    1544:	c6 81       	ldd	r28, Z+6	; 0x06
    1546:	d7 81       	ldd	r29, Z+7	; 0x07
    1548:	80 85       	ldd	r24, Z+8	; 0x08
    154a:	91 85       	ldd	r25, Z+9	; 0x09
    154c:	9f 83       	std	Y+7, r25	; 0x07
    154e:	8e 83       	std	Y+6, r24	; 0x06
    1550:	c0 85       	ldd	r28, Z+8	; 0x08
    1552:	d1 85       	ldd	r29, Z+9	; 0x09
    1554:	86 81       	ldd	r24, Z+6	; 0x06
    1556:	97 81       	ldd	r25, Z+7	; 0x07
    1558:	9d 83       	std	Y+5, r25	; 0x05
    155a:	8c 83       	std	Y+4, r24	; 0x04
    155c:	11 96       	adiw	r26, 0x01	; 1
    155e:	8d 91       	ld	r24, X+
    1560:	9c 91       	ld	r25, X
    1562:	12 97       	sbiw	r26, 0x02	; 2
    1564:	9f 01       	movw	r18, r30
    1566:	2e 5f       	subi	r18, 0xFE	; 254
    1568:	3f 4f       	sbci	r19, 0xFF	; 255
    156a:	82 17       	cp	r24, r18
    156c:	93 07       	cpc	r25, r19
    156e:	31 f4       	brne	.+12     	; 0x157c <xTaskResumeAll+0xbc>
    1570:	80 85       	ldd	r24, Z+8	; 0x08
    1572:	91 85       	ldd	r25, Z+9	; 0x09
    1574:	12 96       	adiw	r26, 0x02	; 2
    1576:	9c 93       	st	X, r25
    1578:	8e 93       	st	-X, r24
    157a:	11 97       	sbiw	r26, 0x01	; 1
    157c:	15 86       	std	Z+13, r1	; 0x0d
    157e:	14 86       	std	Z+12, r1	; 0x0c
    1580:	8c 91       	ld	r24, X
    1582:	81 50       	subi	r24, 0x01	; 1
    1584:	8c 93       	st	X, r24
    1586:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1588:	80 91 71 18 	lds	r24, 0x1871	; 0x801871 <uxTopReadyPriority>
    158c:	8a 17       	cp	r24, r26
    158e:	10 f4       	brcc	.+4      	; 0x1594 <xTaskResumeAll+0xd4>
    1590:	a0 93 71 18 	sts	0x1871, r26	; 0x801871 <uxTopReadyPriority>
    1594:	8b e0       	ldi	r24, 0x0B	; 11
    1596:	8a 9f       	mul	r24, r26
    1598:	d0 01       	movw	r26, r0
    159a:	11 24       	eor	r1, r1
    159c:	ad 54       	subi	r26, 0x4D	; 77
    159e:	b7 4e       	sbci	r27, 0xE7	; 231
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	0d 90       	ld	r0, X+
    15a4:	bc 91       	ld	r27, X
    15a6:	a0 2d       	mov	r26, r0
    15a8:	b7 83       	std	Z+7, r27	; 0x07
    15aa:	a6 83       	std	Z+6, r26	; 0x06
    15ac:	16 96       	adiw	r26, 0x06	; 6
    15ae:	4d 91       	ld	r20, X+
    15b0:	5c 91       	ld	r21, X
    15b2:	17 97       	sbiw	r26, 0x07	; 7
    15b4:	51 87       	std	Z+9, r21	; 0x09
    15b6:	40 87       	std	Z+8, r20	; 0x08
    15b8:	16 96       	adiw	r26, 0x06	; 6
    15ba:	cd 91       	ld	r28, X+
    15bc:	dc 91       	ld	r29, X
    15be:	17 97       	sbiw	r26, 0x07	; 7
    15c0:	3d 83       	std	Y+5, r19	; 0x05
    15c2:	2c 83       	std	Y+4, r18	; 0x04
    15c4:	17 96       	adiw	r26, 0x07	; 7
    15c6:	3c 93       	st	X, r19
    15c8:	2e 93       	st	-X, r18
    15ca:	16 97       	sbiw	r26, 0x06	; 6
    15cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    15ce:	8a 9f       	mul	r24, r26
    15d0:	d0 01       	movw	r26, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	ad 54       	subi	r26, 0x4D	; 77
    15d6:	b7 4e       	sbci	r27, 0xE7	; 231
    15d8:	b5 87       	std	Z+13, r27	; 0x0d
    15da:	a4 87       	std	Z+12, r26	; 0x0c
    15dc:	8c 91       	ld	r24, X
    15de:	8f 5f       	subi	r24, 0xFF	; 255
    15e0:	8c 93       	st	X, r24
    15e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    15e4:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <pxCurrentTCB>
    15e8:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    15ec:	5a 96       	adiw	r26, 0x1a	; 26
    15ee:	8c 91       	ld	r24, X
    15f0:	98 17       	cp	r25, r24
    15f2:	30 f0       	brcs	.+12     	; 0x1600 <xTaskResumeAll+0x140>
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 6b 18 	sts	0x186B, r24	; 0x80186b <xYieldPending>
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <xTaskResumeAll+0x140>
    15fc:	e0 e0       	ldi	r30, 0x00	; 0
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <xPendingReadyList>
    1604:	81 11       	cpse	r24, r1
    1606:	73 cf       	rjmp	.-282    	; 0x14ee <xTaskResumeAll+0x2e>
    1608:	ef 2b       	or	r30, r31
    160a:	09 f0       	breq	.+2      	; 0x160e <xTaskResumeAll+0x14e>
    160c:	92 db       	rcall	.-2268   	; 0xd32 <prvResetNextTaskUnblockTime>
    160e:	c0 90 6c 18 	lds	r12, 0x186C	; 0x80186c <xPendedTicks>
    1612:	d0 90 6d 18 	lds	r13, 0x186D	; 0x80186d <xPendedTicks+0x1>
    1616:	e0 90 6e 18 	lds	r14, 0x186E	; 0x80186e <xPendedTicks+0x2>
    161a:	f0 90 6f 18 	lds	r15, 0x186F	; 0x80186f <xPendedTicks+0x3>
    161e:	c1 14       	cp	r12, r1
    1620:	d1 04       	cpc	r13, r1
    1622:	e1 04       	cpc	r14, r1
    1624:	f1 04       	cpc	r15, r1
    1626:	a1 f0       	breq	.+40     	; 0x1650 <xTaskResumeAll+0x190>
    1628:	1f de       	rcall	.-962    	; 0x1268 <xTaskIncrementTick>
    162a:	88 23       	and	r24, r24
    162c:	19 f0       	breq	.+6      	; 0x1634 <xTaskResumeAll+0x174>
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	80 93 6b 18 	sts	0x186B, r24	; 0x80186b <xYieldPending>
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	c8 1a       	sub	r12, r24
    1638:	d1 08       	sbc	r13, r1
    163a:	e1 08       	sbc	r14, r1
    163c:	f1 08       	sbc	r15, r1
    163e:	a1 f7       	brne	.-24     	; 0x1628 <xTaskResumeAll+0x168>
    1640:	10 92 6c 18 	sts	0x186C, r1	; 0x80186c <xPendedTicks>
    1644:	10 92 6d 18 	sts	0x186D, r1	; 0x80186d <xPendedTicks+0x1>
    1648:	10 92 6e 18 	sts	0x186E, r1	; 0x80186e <xPendedTicks+0x2>
    164c:	10 92 6f 18 	sts	0x186F, r1	; 0x80186f <xPendedTicks+0x3>
    1650:	80 91 6b 18 	lds	r24, 0x186B	; 0x80186b <xYieldPending>
    1654:	88 23       	and	r24, r24
    1656:	31 f0       	breq	.+12     	; 0x1664 <xTaskResumeAll+0x1a4>
    1658:	0e 94 2c 03 	call	0x658	; 0x658 <vPortYield>
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <xTaskResumeAll+0x1a6>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <xTaskResumeAll+0x1a6>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	cf 90       	pop	r12
    1676:	08 95       	ret

00001678 <vTaskDelay>:
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	6b 01       	movw	r12, r22
    1682:	7c 01       	movw	r14, r24
    1684:	67 2b       	or	r22, r23
    1686:	68 2b       	or	r22, r24
    1688:	69 2b       	or	r22, r25
    168a:	39 f0       	breq	.+14     	; 0x169a <vTaskDelay+0x22>
    168c:	d9 dd       	rcall	.-1102   	; 0x1240 <vTaskSuspendAll>
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	c7 01       	movw	r24, r14
    1692:	b6 01       	movw	r22, r12
    1694:	b7 dc       	rcall	.-1682   	; 0x1004 <prvAddCurrentTaskToDelayedList>
    1696:	14 df       	rcall	.-472    	; 0x14c0 <xTaskResumeAll>
    1698:	01 c0       	rjmp	.+2      	; 0x169c <vTaskDelay+0x24>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	81 11       	cpse	r24, r1
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <vTaskDelay+0x2c>
    16a0:	0e 94 2c 03 	call	0x658	; 0x658 <vPortYield>
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	08 95       	ret

000016ae <vTaskSwitchContext>:
    16ae:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <uxSchedulerSuspended>
    16b2:	88 23       	and	r24, r24
    16b4:	21 f0       	breq	.+8      	; 0x16be <vTaskSwitchContext+0x10>
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	80 93 6b 18 	sts	0x186B, r24	; 0x80186b <xYieldPending>
    16bc:	08 95       	ret
    16be:	10 92 6b 18 	sts	0x186B, r1	; 0x80186b <xYieldPending>
    16c2:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <pxCurrentTCB>
    16c6:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    16ca:	20 81       	ld	r18, Z
    16cc:	31 81       	ldd	r19, Z+1	; 0x01
    16ce:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <pxCurrentTCB>
    16d2:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    16d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    16d8:	94 8d       	ldd	r25, Z+28	; 0x1c
    16da:	82 17       	cp	r24, r18
    16dc:	93 07       	cpc	r25, r19
    16de:	58 f0       	brcs	.+22     	; 0x16f6 <vTaskSwitchContext+0x48>
    16e0:	60 91 21 19 	lds	r22, 0x1921	; 0x801921 <pxCurrentTCB>
    16e4:	70 91 22 19 	lds	r23, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    16e8:	63 5e       	subi	r22, 0xE3	; 227
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <pxCurrentTCB>
    16f0:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    16f4:	3e d5       	rcall	.+2684   	; 0x2172 <vApplicationStackOverflowHook>
    16f6:	80 91 71 18 	lds	r24, 0x1871	; 0x801871 <uxTopReadyPriority>
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <vTaskSwitchContext+0x50>
    16fc:	81 50       	subi	r24, 0x01	; 1
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	9b e0       	ldi	r25, 0x0B	; 11
    1704:	92 9f       	mul	r25, r18
    1706:	f0 01       	movw	r30, r0
    1708:	93 9f       	mul	r25, r19
    170a:	f0 0d       	add	r31, r0
    170c:	11 24       	eor	r1, r1
    170e:	ed 54       	subi	r30, 0x4D	; 77
    1710:	f7 4e       	sbci	r31, 0xE7	; 231
    1712:	90 81       	ld	r25, Z
    1714:	99 23       	and	r25, r25
    1716:	91 f3       	breq	.-28     	; 0x16fc <vTaskSwitchContext+0x4e>
    1718:	9b e0       	ldi	r25, 0x0B	; 11
    171a:	92 9f       	mul	r25, r18
    171c:	a0 01       	movw	r20, r0
    171e:	93 9f       	mul	r25, r19
    1720:	50 0d       	add	r21, r0
    1722:	11 24       	eor	r1, r1
    1724:	df 01       	movw	r26, r30
    1726:	01 80       	ldd	r0, Z+1	; 0x01
    1728:	f2 81       	ldd	r31, Z+2	; 0x02
    172a:	e0 2d       	mov	r30, r0
    172c:	04 80       	ldd	r0, Z+4	; 0x04
    172e:	f5 81       	ldd	r31, Z+5	; 0x05
    1730:	e0 2d       	mov	r30, r0
    1732:	12 96       	adiw	r26, 0x02	; 2
    1734:	fc 93       	st	X, r31
    1736:	ee 93       	st	-X, r30
    1738:	11 97       	sbiw	r26, 0x01	; 1
    173a:	4a 54       	subi	r20, 0x4A	; 74
    173c:	57 4e       	sbci	r21, 0xE7	; 231
    173e:	e4 17       	cp	r30, r20
    1740:	f5 07       	cpc	r31, r21
    1742:	29 f4       	brne	.+10     	; 0x174e <vTaskSwitchContext+0xa0>
    1744:	44 81       	ldd	r20, Z+4	; 0x04
    1746:	55 81       	ldd	r21, Z+5	; 0x05
    1748:	fd 01       	movw	r30, r26
    174a:	52 83       	std	Z+2, r21	; 0x02
    174c:	41 83       	std	Z+1, r20	; 0x01
    174e:	9b e0       	ldi	r25, 0x0B	; 11
    1750:	92 9f       	mul	r25, r18
    1752:	f0 01       	movw	r30, r0
    1754:	93 9f       	mul	r25, r19
    1756:	f0 0d       	add	r31, r0
    1758:	11 24       	eor	r1, r1
    175a:	ed 54       	subi	r30, 0x4D	; 77
    175c:	f7 4e       	sbci	r31, 0xE7	; 231
    175e:	01 80       	ldd	r0, Z+1	; 0x01
    1760:	f2 81       	ldd	r31, Z+2	; 0x02
    1762:	e0 2d       	mov	r30, r0
    1764:	20 85       	ldd	r18, Z+8	; 0x08
    1766:	31 85       	ldd	r19, Z+9	; 0x09
    1768:	30 93 22 19 	sts	0x1922, r19	; 0x801922 <pxCurrentTCB+0x1>
    176c:	20 93 21 19 	sts	0x1921, r18	; 0x801921 <pxCurrentTCB>
    1770:	80 93 71 18 	sts	0x1871, r24	; 0x801871 <uxTopReadyPriority>
    1774:	08 95       	ret

00001776 <vTaskPlaceOnEventList>:
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	6a 01       	movw	r12, r20
    1780:	7b 01       	movw	r14, r22
    1782:	60 91 21 19 	lds	r22, 0x1921	; 0x801921 <pxCurrentTCB>
    1786:	70 91 22 19 	lds	r23, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    178a:	62 5f       	subi	r22, 0xF2	; 242
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInsert>
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	c7 01       	movw	r24, r14
    1796:	b6 01       	movw	r22, r12
    1798:	35 dc       	rcall	.-1942   	; 0x1004 <prvAddCurrentTaskToDelayedList>
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	08 95       	ret

000017a4 <vTaskPlaceOnEventListRestricted>:
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	fc 01       	movw	r30, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	ba 01       	movw	r22, r20
    17ae:	a1 81       	ldd	r26, Z+1	; 0x01
    17b0:	b2 81       	ldd	r27, Z+2	; 0x02
    17b2:	c0 91 21 19 	lds	r28, 0x1921	; 0x801921 <pxCurrentTCB>
    17b6:	d0 91 22 19 	lds	r29, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    17ba:	bb 8b       	std	Y+19, r27	; 0x13
    17bc:	aa 8b       	std	Y+18, r26	; 0x12
    17be:	c0 91 21 19 	lds	r28, 0x1921	; 0x801921 <pxCurrentTCB>
    17c2:	d0 91 22 19 	lds	r29, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    17c6:	16 96       	adiw	r26, 0x06	; 6
    17c8:	4d 91       	ld	r20, X+
    17ca:	5c 91       	ld	r21, X
    17cc:	17 97       	sbiw	r26, 0x07	; 7
    17ce:	5d 8b       	std	Y+21, r21	; 0x15
    17d0:	4c 8b       	std	Y+20, r20	; 0x14
    17d2:	16 96       	adiw	r26, 0x06	; 6
    17d4:	cd 91       	ld	r28, X+
    17d6:	dc 91       	ld	r29, X
    17d8:	17 97       	sbiw	r26, 0x07	; 7
    17da:	40 91 21 19 	lds	r20, 0x1921	; 0x801921 <pxCurrentTCB>
    17de:	50 91 22 19 	lds	r21, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    17e2:	42 5f       	subi	r20, 0xF2	; 242
    17e4:	5f 4f       	sbci	r21, 0xFF	; 255
    17e6:	5d 83       	std	Y+5, r21	; 0x05
    17e8:	4c 83       	std	Y+4, r20	; 0x04
    17ea:	40 91 21 19 	lds	r20, 0x1921	; 0x801921 <pxCurrentTCB>
    17ee:	50 91 22 19 	lds	r21, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    17f2:	42 5f       	subi	r20, 0xF2	; 242
    17f4:	5f 4f       	sbci	r21, 0xFF	; 255
    17f6:	17 96       	adiw	r26, 0x07	; 7
    17f8:	5c 93       	st	X, r21
    17fa:	4e 93       	st	-X, r20
    17fc:	16 97       	sbiw	r26, 0x06	; 6
    17fe:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <pxCurrentTCB>
    1802:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    1806:	59 96       	adiw	r26, 0x19	; 25
    1808:	fc 93       	st	X, r31
    180a:	ee 93       	st	-X, r30
    180c:	58 97       	sbiw	r26, 0x18	; 24
    180e:	30 81       	ld	r19, Z
    1810:	3f 5f       	subi	r19, 0xFF	; 255
    1812:	30 83       	st	Z, r19
    1814:	22 23       	and	r18, r18
    1816:	19 f0       	breq	.+6      	; 0x181e <vTaskPlaceOnEventListRestricted+0x7a>
    1818:	6f ef       	ldi	r22, 0xFF	; 255
    181a:	7f ef       	ldi	r23, 0xFF	; 255
    181c:	cb 01       	movw	r24, r22
    181e:	42 2f       	mov	r20, r18
    1820:	f1 db       	rcall	.-2078   	; 0x1004 <prvAddCurrentTaskToDelayedList>
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <xTaskRemoveFromEventList>:
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	dc 01       	movw	r26, r24
    182e:	17 96       	adiw	r26, 0x07	; 7
    1830:	ed 91       	ld	r30, X+
    1832:	fc 91       	ld	r31, X
    1834:	18 97       	sbiw	r26, 0x08	; 8
    1836:	00 84       	ldd	r0, Z+8	; 0x08
    1838:	f1 85       	ldd	r31, Z+9	; 0x09
    183a:	e0 2d       	mov	r30, r0
    183c:	a0 8d       	ldd	r26, Z+24	; 0x18
    183e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1840:	c2 89       	ldd	r28, Z+18	; 0x12
    1842:	d3 89       	ldd	r29, Z+19	; 0x13
    1844:	84 89       	ldd	r24, Z+20	; 0x14
    1846:	95 89       	ldd	r25, Z+21	; 0x15
    1848:	9f 83       	std	Y+7, r25	; 0x07
    184a:	8e 83       	std	Y+6, r24	; 0x06
    184c:	c4 89       	ldd	r28, Z+20	; 0x14
    184e:	d5 89       	ldd	r29, Z+21	; 0x15
    1850:	82 89       	ldd	r24, Z+18	; 0x12
    1852:	93 89       	ldd	r25, Z+19	; 0x13
    1854:	9d 83       	std	Y+5, r25	; 0x05
    1856:	8c 83       	std	Y+4, r24	; 0x04
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	8d 91       	ld	r24, X+
    185c:	9c 91       	ld	r25, X
    185e:	12 97       	sbiw	r26, 0x02	; 2
    1860:	9f 01       	movw	r18, r30
    1862:	22 5f       	subi	r18, 0xF2	; 242
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	82 17       	cp	r24, r18
    1868:	93 07       	cpc	r25, r19
    186a:	31 f4       	brne	.+12     	; 0x1878 <xTaskRemoveFromEventList+0x50>
    186c:	84 89       	ldd	r24, Z+20	; 0x14
    186e:	95 89       	ldd	r25, Z+21	; 0x15
    1870:	12 96       	adiw	r26, 0x02	; 2
    1872:	9c 93       	st	X, r25
    1874:	8e 93       	st	-X, r24
    1876:	11 97       	sbiw	r26, 0x01	; 1
    1878:	11 8e       	std	Z+25, r1	; 0x19
    187a:	10 8e       	std	Z+24, r1	; 0x18
    187c:	8c 91       	ld	r24, X
    187e:	81 50       	subi	r24, 0x01	; 1
    1880:	8c 93       	st	X, r24
    1882:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <uxSchedulerSuspended>
    1886:	81 11       	cpse	r24, r1
    1888:	52 c0       	rjmp	.+164    	; 0x192e <xTaskRemoveFromEventList+0x106>
    188a:	a4 85       	ldd	r26, Z+12	; 0x0c
    188c:	b5 85       	ldd	r27, Z+13	; 0x0d
    188e:	c6 81       	ldd	r28, Z+6	; 0x06
    1890:	d7 81       	ldd	r29, Z+7	; 0x07
    1892:	80 85       	ldd	r24, Z+8	; 0x08
    1894:	91 85       	ldd	r25, Z+9	; 0x09
    1896:	9f 83       	std	Y+7, r25	; 0x07
    1898:	8e 83       	std	Y+6, r24	; 0x06
    189a:	c0 85       	ldd	r28, Z+8	; 0x08
    189c:	d1 85       	ldd	r29, Z+9	; 0x09
    189e:	86 81       	ldd	r24, Z+6	; 0x06
    18a0:	97 81       	ldd	r25, Z+7	; 0x07
    18a2:	9d 83       	std	Y+5, r25	; 0x05
    18a4:	8c 83       	std	Y+4, r24	; 0x04
    18a6:	11 96       	adiw	r26, 0x01	; 1
    18a8:	8d 91       	ld	r24, X+
    18aa:	9c 91       	ld	r25, X
    18ac:	12 97       	sbiw	r26, 0x02	; 2
    18ae:	9f 01       	movw	r18, r30
    18b0:	2e 5f       	subi	r18, 0xFE	; 254
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	82 17       	cp	r24, r18
    18b6:	93 07       	cpc	r25, r19
    18b8:	31 f4       	brne	.+12     	; 0x18c6 <xTaskRemoveFromEventList+0x9e>
    18ba:	80 85       	ldd	r24, Z+8	; 0x08
    18bc:	91 85       	ldd	r25, Z+9	; 0x09
    18be:	12 96       	adiw	r26, 0x02	; 2
    18c0:	9c 93       	st	X, r25
    18c2:	8e 93       	st	-X, r24
    18c4:	11 97       	sbiw	r26, 0x01	; 1
    18c6:	15 86       	std	Z+13, r1	; 0x0d
    18c8:	14 86       	std	Z+12, r1	; 0x0c
    18ca:	8c 91       	ld	r24, X
    18cc:	81 50       	subi	r24, 0x01	; 1
    18ce:	8c 93       	st	X, r24
    18d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    18d2:	80 91 71 18 	lds	r24, 0x1871	; 0x801871 <uxTopReadyPriority>
    18d6:	8a 17       	cp	r24, r26
    18d8:	10 f4       	brcc	.+4      	; 0x18de <xTaskRemoveFromEventList+0xb6>
    18da:	a0 93 71 18 	sts	0x1871, r26	; 0x801871 <uxTopReadyPriority>
    18de:	8b e0       	ldi	r24, 0x0B	; 11
    18e0:	8a 9f       	mul	r24, r26
    18e2:	d0 01       	movw	r26, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	ad 54       	subi	r26, 0x4D	; 77
    18e8:	b7 4e       	sbci	r27, 0xE7	; 231
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	0d 90       	ld	r0, X+
    18ee:	bc 91       	ld	r27, X
    18f0:	a0 2d       	mov	r26, r0
    18f2:	b7 83       	std	Z+7, r27	; 0x07
    18f4:	a6 83       	std	Z+6, r26	; 0x06
    18f6:	16 96       	adiw	r26, 0x06	; 6
    18f8:	4d 91       	ld	r20, X+
    18fa:	5c 91       	ld	r21, X
    18fc:	17 97       	sbiw	r26, 0x07	; 7
    18fe:	51 87       	std	Z+9, r21	; 0x09
    1900:	40 87       	std	Z+8, r20	; 0x08
    1902:	16 96       	adiw	r26, 0x06	; 6
    1904:	cd 91       	ld	r28, X+
    1906:	dc 91       	ld	r29, X
    1908:	17 97       	sbiw	r26, 0x07	; 7
    190a:	3d 83       	std	Y+5, r19	; 0x05
    190c:	2c 83       	std	Y+4, r18	; 0x04
    190e:	17 96       	adiw	r26, 0x07	; 7
    1910:	3c 93       	st	X, r19
    1912:	2e 93       	st	-X, r18
    1914:	16 97       	sbiw	r26, 0x06	; 6
    1916:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1918:	8a 9f       	mul	r24, r26
    191a:	d0 01       	movw	r26, r0
    191c:	11 24       	eor	r1, r1
    191e:	ad 54       	subi	r26, 0x4D	; 77
    1920:	b7 4e       	sbci	r27, 0xE7	; 231
    1922:	b5 87       	std	Z+13, r27	; 0x0d
    1924:	a4 87       	std	Z+12, r26	; 0x0c
    1926:	8c 91       	ld	r24, X
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	8c 93       	st	X, r24
    192c:	1c c0       	rjmp	.+56     	; 0x1966 <xTaskRemoveFromEventList+0x13e>
    192e:	4e e8       	ldi	r20, 0x8E	; 142
    1930:	58 e1       	ldi	r21, 0x18	; 24
    1932:	da 01       	movw	r26, r20
    1934:	11 96       	adiw	r26, 0x01	; 1
    1936:	cd 91       	ld	r28, X+
    1938:	dc 91       	ld	r29, X
    193a:	12 97       	sbiw	r26, 0x02	; 2
    193c:	d3 8b       	std	Z+19, r29	; 0x13
    193e:	c2 8b       	std	Z+18, r28	; 0x12
    1940:	8e 81       	ldd	r24, Y+6	; 0x06
    1942:	9f 81       	ldd	r25, Y+7	; 0x07
    1944:	95 8b       	std	Z+21, r25	; 0x15
    1946:	84 8b       	std	Z+20, r24	; 0x14
    1948:	8e 81       	ldd	r24, Y+6	; 0x06
    194a:	9f 81       	ldd	r25, Y+7	; 0x07
    194c:	dc 01       	movw	r26, r24
    194e:	15 96       	adiw	r26, 0x05	; 5
    1950:	3c 93       	st	X, r19
    1952:	2e 93       	st	-X, r18
    1954:	14 97       	sbiw	r26, 0x04	; 4
    1956:	3f 83       	std	Y+7, r19	; 0x07
    1958:	2e 83       	std	Y+6, r18	; 0x06
    195a:	51 8f       	std	Z+25, r21	; 0x19
    195c:	40 8f       	std	Z+24, r20	; 0x18
    195e:	da 01       	movw	r26, r20
    1960:	8c 91       	ld	r24, X
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	8c 93       	st	X, r24
    1966:	92 8d       	ldd	r25, Z+26	; 0x1a
    1968:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <pxCurrentTCB>
    196c:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <pxCurrentTCB+0x1>
    1970:	82 8d       	ldd	r24, Z+26	; 0x1a
    1972:	89 17       	cp	r24, r25
    1974:	20 f4       	brcc	.+8      	; 0x197e <xTaskRemoveFromEventList+0x156>
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	80 93 6b 18 	sts	0x186B, r24	; 0x80186b <xYieldPending>
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <xTaskRemoveFromEventList+0x158>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <vTaskInternalSetTimeOutState>:
    1986:	20 91 6a 18 	lds	r18, 0x186A	; 0x80186a <xNumOfOverflows>
    198a:	fc 01       	movw	r30, r24
    198c:	20 83       	st	Z, r18
    198e:	40 91 72 18 	lds	r20, 0x1872	; 0x801872 <xTickCount>
    1992:	50 91 73 18 	lds	r21, 0x1873	; 0x801873 <xTickCount+0x1>
    1996:	60 91 74 18 	lds	r22, 0x1874	; 0x801874 <xTickCount+0x2>
    199a:	70 91 75 18 	lds	r23, 0x1875	; 0x801875 <xTickCount+0x3>
    199e:	41 83       	std	Z+1, r20	; 0x01
    19a0:	52 83       	std	Z+2, r21	; 0x02
    19a2:	63 83       	std	Z+3, r22	; 0x03
    19a4:	74 83       	std	Z+4, r23	; 0x04
    19a6:	08 95       	ret

000019a8 <xTaskCheckForTimeOut>:
    19a8:	8f 92       	push	r8
    19aa:	9f 92       	push	r9
    19ac:	af 92       	push	r10
    19ae:	bf 92       	push	r11
    19b0:	cf 92       	push	r12
    19b2:	df 92       	push	r13
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	fb 01       	movw	r30, r22
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	0f 92       	push	r0
    19c8:	c0 90 72 18 	lds	r12, 0x1872	; 0x801872 <xTickCount>
    19cc:	d0 90 73 18 	lds	r13, 0x1873	; 0x801873 <xTickCount+0x1>
    19d0:	e0 90 74 18 	lds	r14, 0x1874	; 0x801874 <xTickCount+0x2>
    19d4:	f0 90 75 18 	lds	r15, 0x1875	; 0x801875 <xTickCount+0x3>
    19d8:	dc 01       	movw	r26, r24
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	0d 91       	ld	r16, X+
    19de:	1d 91       	ld	r17, X+
    19e0:	2d 91       	ld	r18, X+
    19e2:	3c 91       	ld	r19, X
    19e4:	14 97       	sbiw	r26, 0x04	; 4
    19e6:	46 01       	movw	r8, r12
    19e8:	57 01       	movw	r10, r14
    19ea:	80 1a       	sub	r8, r16
    19ec:	91 0a       	sbc	r9, r17
    19ee:	a2 0a       	sbc	r10, r18
    19f0:	b3 0a       	sbc	r11, r19
    19f2:	40 81       	ld	r20, Z
    19f4:	51 81       	ldd	r21, Z+1	; 0x01
    19f6:	62 81       	ldd	r22, Z+2	; 0x02
    19f8:	73 81       	ldd	r23, Z+3	; 0x03
    19fa:	4f 3f       	cpi	r20, 0xFF	; 255
    19fc:	bf ef       	ldi	r27, 0xFF	; 255
    19fe:	5b 07       	cpc	r21, r27
    1a00:	6b 07       	cpc	r22, r27
    1a02:	7b 07       	cpc	r23, r27
    1a04:	39 f1       	breq	.+78     	; 0x1a54 <xTaskCheckForTimeOut+0xac>
    1a06:	ec 01       	movw	r28, r24
    1a08:	b8 81       	ld	r27, Y
    1a0a:	a0 91 6a 18 	lds	r26, 0x186A	; 0x80186a <xNumOfOverflows>
    1a0e:	ba 17       	cp	r27, r26
    1a10:	59 f0       	breq	.+22     	; 0x1a28 <xTaskCheckForTimeOut+0x80>
    1a12:	c0 16       	cp	r12, r16
    1a14:	d1 06       	cpc	r13, r17
    1a16:	e2 06       	cpc	r14, r18
    1a18:	f3 06       	cpc	r15, r19
    1a1a:	30 f0       	brcs	.+12     	; 0x1a28 <xTaskCheckForTimeOut+0x80>
    1a1c:	10 82       	st	Z, r1
    1a1e:	11 82       	std	Z+1, r1	; 0x01
    1a20:	12 82       	std	Z+2, r1	; 0x02
    1a22:	13 82       	std	Z+3, r1	; 0x03
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	17 c0       	rjmp	.+46     	; 0x1a56 <xTaskCheckForTimeOut+0xae>
    1a28:	84 16       	cp	r8, r20
    1a2a:	95 06       	cpc	r9, r21
    1a2c:	a6 06       	cpc	r10, r22
    1a2e:	b7 06       	cpc	r11, r23
    1a30:	58 f4       	brcc	.+22     	; 0x1a48 <xTaskCheckForTimeOut+0xa0>
    1a32:	48 19       	sub	r20, r8
    1a34:	59 09       	sbc	r21, r9
    1a36:	6a 09       	sbc	r22, r10
    1a38:	7b 09       	sbc	r23, r11
    1a3a:	40 83       	st	Z, r20
    1a3c:	51 83       	std	Z+1, r21	; 0x01
    1a3e:	62 83       	std	Z+2, r22	; 0x02
    1a40:	73 83       	std	Z+3, r23	; 0x03
    1a42:	a1 df       	rcall	.-190    	; 0x1986 <vTaskInternalSetTimeOutState>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <xTaskCheckForTimeOut+0xae>
    1a48:	10 82       	st	Z, r1
    1a4a:	11 82       	std	Z+1, r1	; 0x01
    1a4c:	12 82       	std	Z+2, r1	; 0x02
    1a4e:	13 82       	std	Z+3, r1	; 0x03
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <xTaskCheckForTimeOut+0xae>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	bf 90       	pop	r11
    1a6c:	af 90       	pop	r10
    1a6e:	9f 90       	pop	r9
    1a70:	8f 90       	pop	r8
    1a72:	08 95       	ret

00001a74 <vTaskMissedYield>:
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	80 93 6b 18 	sts	0x186B, r24	; 0x80186b <xYieldPending>
    1a7a:	08 95       	ret

00001a7c <xTaskGetSchedulerState>:
    1a7c:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <xSchedulerRunning>
    1a80:	88 23       	and	r24, r24
    1a82:	31 f0       	breq	.+12     	; 0x1a90 <xTaskGetSchedulerState+0x14>
    1a84:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <uxSchedulerSuspended>
    1a88:	81 11       	cpse	r24, r1
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <xTaskGetSchedulerState+0x18>
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	08 95       	ret
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	08 95       	ret
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	08 95       	ret

00001a98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1aa2:	89 2b       	or	r24, r25
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <xTaskPriorityDisinherit+0x10>
    1aa6:	49 c0       	rjmp	.+146    	; 0x1b3a <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1aa8:	86 a5       	ldd	r24, Z+46	; 0x2e
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1aae:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ab0:	95 a5       	ldd	r25, Z+45	; 0x2d
    1ab2:	29 17       	cp	r18, r25
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <xTaskPriorityDisinherit+0x20>
    1ab6:	43 c0       	rjmp	.+134    	; 0x1b3e <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1ab8:	81 11       	cpse	r24, r1
    1aba:	43 c0       	rjmp	.+134    	; 0x1b42 <xTaskPriorityDisinherit+0xaa>
    1abc:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1abe:	8f 01       	movw	r16, r30
    1ac0:	0e 5f       	subi	r16, 0xFE	; 254
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	c8 01       	movw	r24, r16
    1ac6:	0e 94 b0 02 	call	0x560	; 0x560 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1aca:	ed a5       	ldd	r30, Y+45	; 0x2d
    1acc:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e0       	ldi	r26, 0x00	; 0
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	8e 1b       	sub	r24, r30
    1ad8:	91 09       	sbc	r25, r1
    1ada:	a1 09       	sbc	r26, r1
    1adc:	b1 09       	sbc	r27, r1
    1ade:	8e 87       	std	Y+14, r24	; 0x0e
    1ae0:	9f 87       	std	Y+15, r25	; 0x0f
    1ae2:	a8 8b       	std	Y+16, r26	; 0x10
    1ae4:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1ae6:	80 91 71 18 	lds	r24, 0x1871	; 0x801871 <uxTopReadyPriority>
    1aea:	8e 17       	cp	r24, r30
    1aec:	10 f4       	brcc	.+4      	; 0x1af2 <xTaskPriorityDisinherit+0x5a>
    1aee:	e0 93 71 18 	sts	0x1871, r30	; 0x801871 <uxTopReadyPriority>
    1af2:	8b e0       	ldi	r24, 0x0B	; 11
    1af4:	8e 9f       	mul	r24, r30
    1af6:	f0 01       	movw	r30, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	ed 54       	subi	r30, 0x4D	; 77
    1afc:	f7 4e       	sbci	r31, 0xE7	; 231
    1afe:	01 80       	ldd	r0, Z+1	; 0x01
    1b00:	f2 81       	ldd	r31, Z+2	; 0x02
    1b02:	e0 2d       	mov	r30, r0
    1b04:	ff 83       	std	Y+7, r31	; 0x07
    1b06:	ee 83       	std	Y+6, r30	; 0x06
    1b08:	26 81       	ldd	r18, Z+6	; 0x06
    1b0a:	37 81       	ldd	r19, Z+7	; 0x07
    1b0c:	39 87       	std	Y+9, r19	; 0x09
    1b0e:	28 87       	std	Y+8, r18	; 0x08
    1b10:	a6 81       	ldd	r26, Z+6	; 0x06
    1b12:	b7 81       	ldd	r27, Z+7	; 0x07
    1b14:	15 96       	adiw	r26, 0x05	; 5
    1b16:	1c 93       	st	X, r17
    1b18:	0e 93       	st	-X, r16
    1b1a:	14 97       	sbiw	r26, 0x04	; 4
    1b1c:	17 83       	std	Z+7, r17	; 0x07
    1b1e:	06 83       	std	Z+6, r16	; 0x06
    1b20:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b22:	8e 9f       	mul	r24, r30
    1b24:	f0 01       	movw	r30, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	ed 54       	subi	r30, 0x4D	; 77
    1b2a:	f7 4e       	sbci	r31, 0xE7	; 231
    1b2c:	fd 87       	std	Y+13, r31	; 0x0d
    1b2e:	ec 87       	std	Y+12, r30	; 0x0c
    1b30:	80 81       	ld	r24, Z
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	05 c0       	rjmp	.+10     	; 0x1b44 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <xTaskPriorityDisinherit+0xac>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <xTaskPriorityDisinherit+0xac>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <prvGetNextExpireTime>:
    1b4e:	dc 01       	movw	r26, r24
    1b50:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <pxCurrentTimerList>
    1b54:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <pxCurrentTimerList+0x1>
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	81 11       	cpse	r24, r1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9c 93       	st	X, r25
    1b62:	91 11       	cpse	r25, r1
    1b64:	08 c0       	rjmp	.+16     	; 0x1b76 <prvGetNextExpireTime+0x28>
    1b66:	07 80       	ldd	r0, Z+7	; 0x07
    1b68:	f0 85       	ldd	r31, Z+8	; 0x08
    1b6a:	e0 2d       	mov	r30, r0
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	08 95       	ret
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	08 95       	ret

00001b7e <prvInsertTimerInActiveList>:
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	42 83       	std	Z+2, r20	; 0x02
    1b8e:	53 83       	std	Z+3, r21	; 0x03
    1b90:	64 83       	std	Z+4, r22	; 0x04
    1b92:	75 83       	std	Z+5, r23	; 0x05
    1b94:	93 87       	std	Z+11, r25	; 0x0b
    1b96:	82 87       	std	Z+10, r24	; 0x0a
    1b98:	04 17       	cp	r16, r20
    1b9a:	15 07       	cpc	r17, r21
    1b9c:	26 07       	cpc	r18, r22
    1b9e:	37 07       	cpc	r19, r23
    1ba0:	c0 f0       	brcs	.+48     	; 0x1bd2 <prvInsertTimerInActiveList+0x54>
    1ba2:	0c 19       	sub	r16, r12
    1ba4:	1d 09       	sbc	r17, r13
    1ba6:	2e 09       	sbc	r18, r14
    1ba8:	3f 09       	sbc	r19, r15
    1baa:	86 85       	ldd	r24, Z+14	; 0x0e
    1bac:	97 85       	ldd	r25, Z+15	; 0x0f
    1bae:	a0 89       	ldd	r26, Z+16	; 0x10
    1bb0:	b1 89       	ldd	r27, Z+17	; 0x11
    1bb2:	08 17       	cp	r16, r24
    1bb4:	19 07       	cpc	r17, r25
    1bb6:	2a 07       	cpc	r18, r26
    1bb8:	3b 07       	cpc	r19, r27
    1bba:	00 f5       	brcc	.+64     	; 0x1bfc <prvInsertTimerInActiveList+0x7e>
    1bbc:	bf 01       	movw	r22, r30
    1bbe:	6e 5f       	subi	r22, 0xFE	; 254
    1bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc2:	80 91 2b 19 	lds	r24, 0x192B	; 0x80192b <pxOverflowTimerList>
    1bc6:	90 91 2c 19 	lds	r25, 0x192C	; 0x80192c <pxOverflowTimerList+0x1>
    1bca:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInsert>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	18 c0       	rjmp	.+48     	; 0x1c02 <prvInsertTimerInActiveList+0x84>
    1bd2:	0c 15       	cp	r16, r12
    1bd4:	1d 05       	cpc	r17, r13
    1bd6:	2e 05       	cpc	r18, r14
    1bd8:	3f 05       	cpc	r19, r15
    1bda:	28 f4       	brcc	.+10     	; 0x1be6 <prvInsertTimerInActiveList+0x68>
    1bdc:	4c 15       	cp	r20, r12
    1bde:	5d 05       	cpc	r21, r13
    1be0:	6e 05       	cpc	r22, r14
    1be2:	7f 05       	cpc	r23, r15
    1be4:	68 f4       	brcc	.+26     	; 0x1c00 <prvInsertTimerInActiveList+0x82>
    1be6:	bf 01       	movw	r22, r30
    1be8:	6e 5f       	subi	r22, 0xFE	; 254
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <pxCurrentTimerList>
    1bf0:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <pxCurrentTimerList+0x1>
    1bf4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInsert>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <prvInsertTimerInActiveList+0x84>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <prvInsertTimerInActiveList+0x84>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	08 95       	ret

00001c10 <prvCheckForValidListAndQueue>:
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	0f 92       	push	r0
    1c16:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <xTimerQueue>
    1c1a:	90 91 2a 19 	lds	r25, 0x192A	; 0x80192a <xTimerQueue+0x1>
    1c1e:	89 2b       	or	r24, r25
    1c20:	e9 f4       	brne	.+58     	; 0x1c5c <prvCheckForValidListAndQueue+0x4c>
    1c22:	8a e3       	ldi	r24, 0x3A	; 58
    1c24:	99 e1       	ldi	r25, 0x19	; 25
    1c26:	0e 94 5e 02 	call	0x4bc	; 0x4bc <vListInitialise>
    1c2a:	8f e2       	ldi	r24, 0x2F	; 47
    1c2c:	99 e1       	ldi	r25, 0x19	; 25
    1c2e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <vListInitialise>
    1c32:	8a e3       	ldi	r24, 0x3A	; 58
    1c34:	99 e1       	ldi	r25, 0x19	; 25
    1c36:	90 93 2e 19 	sts	0x192E, r25	; 0x80192e <pxCurrentTimerList+0x1>
    1c3a:	80 93 2d 19 	sts	0x192D, r24	; 0x80192d <pxCurrentTimerList>
    1c3e:	8f e2       	ldi	r24, 0x2F	; 47
    1c40:	99 e1       	ldi	r25, 0x19	; 25
    1c42:	90 93 2c 19 	sts	0x192C, r25	; 0x80192c <pxOverflowTimerList+0x1>
    1c46:	80 93 2b 19 	sts	0x192B, r24	; 0x80192b <pxOverflowTimerList>
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	67 e0       	ldi	r22, 0x07	; 7
    1c4e:	8a e0       	ldi	r24, 0x0A	; 10
    1c50:	0e 94 0b 05 	call	0xa16	; 0xa16 <xQueueGenericCreate>
    1c54:	90 93 2a 19 	sts	0x192A, r25	; 0x80192a <xTimerQueue+0x1>
    1c58:	80 93 29 19 	sts	0x1929, r24	; 0x801929 <xTimerQueue>
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	08 95       	ret

00001c62 <xTimerCreateTimerTask>:
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15
    1c66:	0f 93       	push	r16
    1c68:	d3 df       	rcall	.-90     	; 0x1c10 <prvCheckForValidListAndQueue>
    1c6a:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <xTimerQueue>
    1c6e:	90 91 2a 19 	lds	r25, 0x192A	; 0x80192a <xTimerQueue+0x1>
    1c72:	89 2b       	or	r24, r25
    1c74:	89 f0       	breq	.+34     	; 0x1c98 <xTimerCreateTimerTask+0x36>
    1c76:	0f 2e       	mov	r0, r31
    1c78:	f7 e2       	ldi	r31, 0x27	; 39
    1c7a:	ef 2e       	mov	r14, r31
    1c7c:	f9 e1       	ldi	r31, 0x19	; 25
    1c7e:	ff 2e       	mov	r15, r31
    1c80:	f0 2d       	mov	r31, r0
    1c82:	03 e0       	ldi	r16, 0x03	; 3
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 ec       	ldi	r20, 0xC0	; 192
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	67 e2       	ldi	r22, 0x27	; 39
    1c8e:	72 e0       	ldi	r23, 0x02	; 2
    1c90:	86 ed       	ldi	r24, 0xD6	; 214
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	56 da       	rcall	.-2900   	; 0x1142 <xTaskCreate>
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <xTimerCreateTimerTask+0x38>
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	08 95       	ret

00001ca2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1ca2:	8f 92       	push	r8
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	bf 92       	push	r11
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	27 97       	sbiw	r28, 0x07	; 7
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1cca:	e0 91 29 19 	lds	r30, 0x1929	; 0x801929 <xTimerQueue>
    1cce:	f0 91 2a 19 	lds	r31, 0x192A	; 0x80192a <xTimerQueue+0x1>
    1cd2:	30 97       	sbiw	r30, 0x00	; 0
    1cd4:	81 f1       	breq	.+96     	; 0x1d36 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1cd6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1cd8:	2a 83       	std	Y+2, r18	; 0x02
    1cda:	3b 83       	std	Y+3, r19	; 0x03
    1cdc:	4c 83       	std	Y+4, r20	; 0x04
    1cde:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1ce0:	9f 83       	std	Y+7, r25	; 0x07
    1ce2:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1ce4:	66 30       	cpi	r22, 0x06	; 6
    1ce6:	f4 f4       	brge	.+60     	; 0x1d24 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1ce8:	c9 de       	rcall	.-622    	; 0x1a7c <xTaskGetSchedulerState>
    1cea:	82 30       	cpi	r24, 0x02	; 2
    1cec:	69 f4       	brne	.+26     	; 0x1d08 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1cee:	00 e0       	ldi	r16, 0x00	; 0
    1cf0:	a7 01       	movw	r20, r14
    1cf2:	96 01       	movw	r18, r12
    1cf4:	be 01       	movw	r22, r28
    1cf6:	6f 5f       	subi	r22, 0xFF	; 255
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <xTimerQueue>
    1cfe:	90 91 2a 19 	lds	r25, 0x192A	; 0x80192a <xTimerQueue+0x1>
    1d02:	0e 94 2e 05 	call	0xa5c	; 0xa5c <xQueueGenericSend>
    1d06:	18 c0       	rjmp	.+48     	; 0x1d38 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1d08:	00 e0       	ldi	r16, 0x00	; 0
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	a9 01       	movw	r20, r18
    1d10:	be 01       	movw	r22, r28
    1d12:	6f 5f       	subi	r22, 0xFF	; 255
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <xTimerQueue>
    1d1a:	90 91 2a 19 	lds	r25, 0x192A	; 0x80192a <xTimerQueue+0x1>
    1d1e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <xQueueGenericSend>
    1d22:	0a c0       	rjmp	.+20     	; 0x1d38 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	a8 01       	movw	r20, r16
    1d28:	be 01       	movw	r22, r28
    1d2a:	6f 5f       	subi	r22, 0xFF	; 255
    1d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2e:	cf 01       	movw	r24, r30
    1d30:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSendFromISR>
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1d36:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1d38:	27 96       	adiw	r28, 0x07	; 7
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	cf 90       	pop	r12
    1d54:	bf 90       	pop	r11
    1d56:	af 90       	pop	r10
    1d58:	9f 90       	pop	r9
    1d5a:	8f 90       	pop	r8
    1d5c:	08 95       	ret

00001d5e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    1d5e:	8f 92       	push	r8
    1d60:	9f 92       	push	r9
    1d62:	af 92       	push	r10
    1d64:	bf 92       	push	r11
    1d66:	cf 92       	push	r12
    1d68:	df 92       	push	r13
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1d76:	3b c0       	rjmp	.+118    	; 0x1dee <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1d78:	07 80       	ldd	r0, Z+7	; 0x07
    1d7a:	f0 85       	ldd	r31, Z+8	; 0x08
    1d7c:	e0 2d       	mov	r30, r0
    1d7e:	80 80       	ld	r8, Z
    1d80:	91 80       	ldd	r9, Z+1	; 0x01
    1d82:	a2 80       	ldd	r10, Z+2	; 0x02
    1d84:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1d86:	c0 85       	ldd	r28, Z+8	; 0x08
    1d88:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	0e 5f       	subi	r16, 0xFE	; 254
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	c8 01       	movw	r24, r16
    1d92:	0e 94 b0 02 	call	0x560	; 0x560 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1d96:	ec 89       	ldd	r30, Y+20	; 0x14
    1d98:	fd 89       	ldd	r31, Y+21	; 0x15
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1d9e:	8e 89       	ldd	r24, Y+22	; 0x16
    1da0:	82 ff       	sbrs	r24, 2
    1da2:	25 c0       	rjmp	.+74     	; 0x1dee <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1da4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1da8:	a8 89       	ldd	r26, Y+16	; 0x10
    1daa:	b9 89       	ldd	r27, Y+17	; 0x11
    1dac:	88 0d       	add	r24, r8
    1dae:	99 1d       	adc	r25, r9
    1db0:	aa 1d       	adc	r26, r10
    1db2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    1db4:	88 16       	cp	r8, r24
    1db6:	99 06       	cpc	r9, r25
    1db8:	aa 06       	cpc	r10, r26
    1dba:	bb 06       	cpc	r11, r27
    1dbc:	70 f4       	brcc	.+28     	; 0x1dda <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
    1dc0:	9b 83       	std	Y+3, r25	; 0x03
    1dc2:	ac 83       	std	Y+4, r26	; 0x04
    1dc4:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1dc6:	db 87       	std	Y+11, r29	; 0x0b
    1dc8:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1dca:	b8 01       	movw	r22, r16
    1dcc:	80 91 2d 19 	lds	r24, 0x192D	; 0x80192d <pxCurrentTimerList>
    1dd0:	90 91 2e 19 	lds	r25, 0x192E	; 0x80192e <pxCurrentTimerList+0x1>
    1dd4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInsert>
    1dd8:	0a c0       	rjmp	.+20     	; 0x1dee <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1dda:	c1 2c       	mov	r12, r1
    1ddc:	d1 2c       	mov	r13, r1
    1dde:	76 01       	movw	r14, r12
    1de0:	00 e0       	ldi	r16, 0x00	; 0
    1de2:	10 e0       	ldi	r17, 0x00	; 0
    1de4:	a5 01       	movw	r20, r10
    1de6:	94 01       	movw	r18, r8
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	ce 01       	movw	r24, r28
    1dec:	5a df       	rcall	.-332    	; 0x1ca2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1dee:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <pxCurrentTimerList>
    1df2:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <pxCurrentTimerList+0x1>
    1df6:	80 81       	ld	r24, Z
    1df8:	81 11       	cpse	r24, r1
    1dfa:	be cf       	rjmp	.-132    	; 0x1d78 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1dfc:	80 91 2b 19 	lds	r24, 0x192B	; 0x80192b <pxOverflowTimerList>
    1e00:	90 91 2c 19 	lds	r25, 0x192C	; 0x80192c <pxOverflowTimerList+0x1>
    1e04:	90 93 2e 19 	sts	0x192E, r25	; 0x80192e <pxCurrentTimerList+0x1>
    1e08:	80 93 2d 19 	sts	0x192D, r24	; 0x80192d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1e0c:	f0 93 2c 19 	sts	0x192C, r31	; 0x80192c <pxOverflowTimerList+0x1>
    1e10:	e0 93 2b 19 	sts	0x192B, r30	; 0x80192b <pxOverflowTimerList>
    }
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	ff 90       	pop	r15
    1e1e:	ef 90       	pop	r14
    1e20:	df 90       	pop	r13
    1e22:	cf 90       	pop	r12
    1e24:	bf 90       	pop	r11
    1e26:	af 90       	pop	r10
    1e28:	9f 90       	pop	r9
    1e2a:	8f 90       	pop	r8
    1e2c:	08 95       	ret

00001e2e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1e2e:	cf 92       	push	r12
    1e30:	df 92       	push	r13
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1e3c:	07 da       	rcall	.-3058   	; 0x124c <xTaskGetTickCount>
    1e3e:	6b 01       	movw	r12, r22
    1e40:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    1e42:	80 91 23 19 	lds	r24, 0x1923	; 0x801923 <xLastTime.2436>
    1e46:	90 91 24 19 	lds	r25, 0x1924	; 0x801924 <xLastTime.2436+0x1>
    1e4a:	a0 91 25 19 	lds	r26, 0x1925	; 0x801925 <xLastTime.2436+0x2>
    1e4e:	b0 91 26 19 	lds	r27, 0x1926	; 0x801926 <xLastTime.2436+0x3>
    1e52:	c8 16       	cp	r12, r24
    1e54:	d9 06       	cpc	r13, r25
    1e56:	ea 06       	cpc	r14, r26
    1e58:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    1e5a:	20 f4       	brcc	.+8      	; 0x1e64 <prvSampleTimeNow+0x36>
    1e5c:	80 df       	rcall	.-256    	; 0x1d5e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	88 83       	st	Y, r24
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1e64:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    1e66:	c0 92 23 19 	sts	0x1923, r12	; 0x801923 <xLastTime.2436>
    1e6a:	d0 92 24 19 	sts	0x1924, r13	; 0x801924 <xLastTime.2436+0x1>
    1e6e:	e0 92 25 19 	sts	0x1925, r14	; 0x801925 <xLastTime.2436+0x2>
    1e72:	f0 92 26 19 	sts	0x1926, r15	; 0x801926 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    1e76:	c7 01       	movw	r24, r14
    1e78:	b6 01       	movw	r22, r12
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	08 95       	ret

00001e88 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1e88:	4f 92       	push	r4
    1e8a:	5f 92       	push	r5
    1e8c:	6f 92       	push	r6
    1e8e:	7f 92       	push	r7
    1e90:	8f 92       	push	r8
    1e92:	9f 92       	push	r9
    1e94:	af 92       	push	r10
    1e96:	bf 92       	push	r11
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	4b 01       	movw	r8, r22
    1eaa:	5c 01       	movw	r10, r24
    1eac:	29 01       	movw	r4, r18
    1eae:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1eb0:	e0 91 2d 19 	lds	r30, 0x192D	; 0x80192d <pxCurrentTimerList>
    1eb4:	f0 91 2e 19 	lds	r31, 0x192E	; 0x80192e <pxCurrentTimerList+0x1>
    1eb8:	07 80       	ldd	r0, Z+7	; 0x07
    1eba:	f0 85       	ldd	r31, Z+8	; 0x08
    1ebc:	e0 2d       	mov	r30, r0
    1ebe:	c0 85       	ldd	r28, Z+8	; 0x08
    1ec0:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	02 96       	adiw	r24, 0x02	; 2
    1ec6:	0e 94 b0 02 	call	0x560	; 0x560 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1eca:	8e 89       	ldd	r24, Y+22	; 0x16
    1ecc:	82 ff       	sbrs	r24, 2
    1ece:	1b c0       	rjmp	.+54     	; 0x1f06 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1ed0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ed2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ed4:	68 89       	ldd	r22, Y+16	; 0x10
    1ed6:	79 89       	ldd	r23, Y+17	; 0x11
    1ed8:	48 0d       	add	r20, r8
    1eda:	59 1d       	adc	r21, r9
    1edc:	6a 1d       	adc	r22, r10
    1ede:	7b 1d       	adc	r23, r11
    1ee0:	75 01       	movw	r14, r10
    1ee2:	64 01       	movw	r12, r8
    1ee4:	93 01       	movw	r18, r6
    1ee6:	82 01       	movw	r16, r4
    1ee8:	ce 01       	movw	r24, r28
    1eea:	49 de       	rcall	.-878    	; 0x1b7e <prvInsertTimerInActiveList>
    1eec:	88 23       	and	r24, r24
    1eee:	69 f0       	breq	.+26     	; 0x1f0a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1ef0:	c1 2c       	mov	r12, r1
    1ef2:	d1 2c       	mov	r13, r1
    1ef4:	76 01       	movw	r14, r12
    1ef6:	00 e0       	ldi	r16, 0x00	; 0
    1ef8:	10 e0       	ldi	r17, 0x00	; 0
    1efa:	a5 01       	movw	r20, r10
    1efc:	94 01       	movw	r18, r8
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	ce 01       	movw	r24, r28
    1f02:	cf de       	rcall	.-610    	; 0x1ca2 <xTimerGenericCommand>
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1f06:	8e 7f       	andi	r24, 0xFE	; 254
    1f08:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1f0a:	ec 89       	ldd	r30, Y+20	; 0x14
    1f0c:	fd 89       	ldd	r31, Y+21	; 0x15
    1f0e:	ce 01       	movw	r24, r28
    1f10:	19 95       	eicall
    }
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	bf 90       	pop	r11
    1f24:	af 90       	pop	r10
    1f26:	9f 90       	pop	r9
    1f28:	8f 90       	pop	r8
    1f2a:	7f 90       	pop	r7
    1f2c:	6f 90       	pop	r6
    1f2e:	5f 90       	pop	r5
    1f30:	4f 90       	pop	r4
    1f32:	08 95       	ret

00001f34 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1f34:	8f 92       	push	r8
    1f36:	9f 92       	push	r9
    1f38:	af 92       	push	r10
    1f3a:	bf 92       	push	r11
    1f3c:	cf 92       	push	r12
    1f3e:	df 92       	push	r13
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	1f 92       	push	r1
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	6b 01       	movw	r12, r22
    1f52:	7c 01       	movw	r14, r24
    1f54:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1f56:	74 d9       	rcall	.-3352   	; 0x1240 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1f58:	ce 01       	movw	r24, r28
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	68 df       	rcall	.-304    	; 0x1e2e <prvSampleTimeNow>
    1f5e:	4b 01       	movw	r8, r22
    1f60:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	81 11       	cpse	r24, r1
    1f66:	2b c0       	rjmp	.+86     	; 0x1fbe <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1f68:	11 11       	cpse	r17, r1
    1f6a:	0c c0       	rjmp	.+24     	; 0x1f84 <prvProcessTimerOrBlockTask+0x50>
    1f6c:	8c 14       	cp	r8, r12
    1f6e:	9d 04       	cpc	r9, r13
    1f70:	ae 04       	cpc	r10, r14
    1f72:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    1f74:	38 f0       	brcs	.+14     	; 0x1f84 <prvProcessTimerOrBlockTask+0x50>
    1f76:	a4 da       	rcall	.-2744   	; 0x14c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1f78:	a5 01       	movw	r20, r10
    1f7a:	94 01       	movw	r18, r8
    1f7c:	c7 01       	movw	r24, r14
    1f7e:	b6 01       	movw	r22, r12
    1f80:	83 df       	rcall	.-250    	; 0x1e88 <prvProcessExpiredTimer>
    1f82:	1e c0       	rjmp	.+60     	; 0x1fc0 <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    1f84:	11 23       	and	r17, r17
    1f86:	41 f0       	breq	.+16     	; 0x1f98 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1f88:	e0 91 2b 19 	lds	r30, 0x192B	; 0x80192b <pxOverflowTimerList>
    1f8c:	f0 91 2c 19 	lds	r31, 0x192C	; 0x80192c <pxOverflowTimerList+0x1>
    1f90:	80 81       	ld	r24, Z
    1f92:	11 e0       	ldi	r17, 0x01	; 1
    1f94:	81 11       	cpse	r24, r1
    1f96:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1f98:	b7 01       	movw	r22, r14
    1f9a:	a6 01       	movw	r20, r12
    1f9c:	48 19       	sub	r20, r8
    1f9e:	59 09       	sbc	r21, r9
    1fa0:	6a 09       	sbc	r22, r10
    1fa2:	7b 09       	sbc	r23, r11
    1fa4:	21 2f       	mov	r18, r17
    1fa6:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <xTimerQueue>
    1faa:	90 91 2a 19 	lds	r25, 0x192A	; 0x80192a <xTimerQueue+0x1>
    1fae:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1fb2:	86 da       	rcall	.-2804   	; 0x14c0 <xTaskResumeAll>
    1fb4:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <prvProcessTimerOrBlockTask+0x8c>
    1fb8:	0e 94 2c 03 	call	0x658	; 0x658 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <prvProcessTimerOrBlockTask+0x8c>
    1fbe:	80 da       	rcall	.-2816   	; 0x14c0 <xTaskResumeAll>
            }
        }
    }
    1fc0:	0f 90       	pop	r0
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	ff 90       	pop	r15
    1fca:	ef 90       	pop	r14
    1fcc:	df 90       	pop	r13
    1fce:	cf 90       	pop	r12
    1fd0:	bf 90       	pop	r11
    1fd2:	af 90       	pop	r10
    1fd4:	9f 90       	pop	r9
    1fd6:	8f 90       	pop	r8
    1fd8:	08 95       	ret

00001fda <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	28 97       	sbiw	r28, 0x08	; 8
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1ffe:	82 c0       	rjmp	.+260    	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	88 23       	and	r24, r24
    2004:	0c f4       	brge	.+2      	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    2006:	7e c0       	rjmp	.+252    	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2008:	ae 80       	ldd	r10, Y+6	; 0x06
    200a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    200c:	d5 01       	movw	r26, r10
    200e:	1c 96       	adiw	r26, 0x0c	; 12
    2010:	8d 91       	ld	r24, X+
    2012:	9c 91       	ld	r25, X
    2014:	1d 97       	sbiw	r26, 0x0d	; 13
    2016:	89 2b       	or	r24, r25
    2018:	21 f0       	breq	.+8      	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    201a:	c5 01       	movw	r24, r10
    201c:	02 96       	adiw	r24, 0x02	; 2
    201e:	0e 94 b0 02 	call	0x560	; 0x560 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2022:	ce 01       	movw	r24, r28
    2024:	08 96       	adiw	r24, 0x08	; 8
    2026:	03 df       	rcall	.-506    	; 0x1e2e <prvSampleTimeNow>
    2028:	8b 01       	movw	r16, r22
    202a:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    202c:	e9 81       	ldd	r30, Y+1	; 0x01
    202e:	0e 2e       	mov	r0, r30
    2030:	00 0c       	add	r0, r0
    2032:	ff 0b       	sbc	r31, r31
    2034:	ea 30       	cpi	r30, 0x0A	; 10
    2036:	f1 05       	cpc	r31, r1
    2038:	08 f0       	brcs	.+2      	; 0x203c <__DATA_REGION_LENGTH__+0x3c>
    203a:	64 c0       	rjmp	.+200    	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    203c:	88 27       	eor	r24, r24
    203e:	ee 58       	subi	r30, 0x8E	; 142
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	8f 4f       	sbci	r24, 0xFF	; 255
    2044:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2048:	f5 01       	movw	r30, r10
    204a:	86 89       	ldd	r24, Z+22	; 0x16
    204c:	81 60       	ori	r24, 0x01	; 1
    204e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2050:	ca 80       	ldd	r12, Y+2	; 0x02
    2052:	db 80       	ldd	r13, Y+3	; 0x03
    2054:	ec 80       	ldd	r14, Y+4	; 0x04
    2056:	fd 80       	ldd	r15, Y+5	; 0x05
    2058:	46 85       	ldd	r20, Z+14	; 0x0e
    205a:	57 85       	ldd	r21, Z+15	; 0x0f
    205c:	60 89       	ldd	r22, Z+16	; 0x10
    205e:	71 89       	ldd	r23, Z+17	; 0x11
    2060:	4c 0d       	add	r20, r12
    2062:	5d 1d       	adc	r21, r13
    2064:	6e 1d       	adc	r22, r14
    2066:	7f 1d       	adc	r23, r15
    2068:	c5 01       	movw	r24, r10
    206a:	89 dd       	rcall	.-1262   	; 0x1b7e <prvInsertTimerInActiveList>
    206c:	88 23       	and	r24, r24
    206e:	09 f4       	brne	.+2      	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
    2070:	49 c0       	rjmp	.+146    	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2072:	d5 01       	movw	r26, r10
    2074:	54 96       	adiw	r26, 0x14	; 20
    2076:	ed 91       	ld	r30, X+
    2078:	fc 91       	ld	r31, X
    207a:	55 97       	sbiw	r26, 0x15	; 21
    207c:	c5 01       	movw	r24, r10
    207e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2080:	f5 01       	movw	r30, r10
    2082:	86 89       	ldd	r24, Z+22	; 0x16
    2084:	82 ff       	sbrs	r24, 2
    2086:	3e c0       	rjmp	.+124    	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2088:	4a 81       	ldd	r20, Y+2	; 0x02
    208a:	5b 81       	ldd	r21, Y+3	; 0x03
    208c:	6c 81       	ldd	r22, Y+4	; 0x04
    208e:	7d 81       	ldd	r23, Y+5	; 0x05
    2090:	86 85       	ldd	r24, Z+14	; 0x0e
    2092:	97 85       	ldd	r25, Z+15	; 0x0f
    2094:	a0 89       	ldd	r26, Z+16	; 0x10
    2096:	b1 89       	ldd	r27, Z+17	; 0x11
    2098:	9a 01       	movw	r18, r20
    209a:	ab 01       	movw	r20, r22
    209c:	28 0f       	add	r18, r24
    209e:	39 1f       	adc	r19, r25
    20a0:	4a 1f       	adc	r20, r26
    20a2:	5b 1f       	adc	r21, r27
    20a4:	c1 2c       	mov	r12, r1
    20a6:	d1 2c       	mov	r13, r1
    20a8:	76 01       	movw	r14, r12
    20aa:	00 e0       	ldi	r16, 0x00	; 0
    20ac:	10 e0       	ldi	r17, 0x00	; 0
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	c5 01       	movw	r24, r10
    20b2:	f7 dd       	rcall	.-1042   	; 0x1ca2 <xTimerGenericCommand>
    20b4:	27 c0       	rjmp	.+78     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    20b6:	d5 01       	movw	r26, r10
    20b8:	56 96       	adiw	r26, 0x16	; 22
    20ba:	8c 91       	ld	r24, X
    20bc:	56 97       	sbiw	r26, 0x16	; 22
    20be:	8e 7f       	andi	r24, 0xFE	; 254
    20c0:	56 96       	adiw	r26, 0x16	; 22
    20c2:	8c 93       	st	X, r24
                        break;
    20c4:	1f c0       	rjmp	.+62     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    20c6:	f5 01       	movw	r30, r10
    20c8:	86 89       	ldd	r24, Z+22	; 0x16
    20ca:	81 60       	ori	r24, 0x01	; 1
    20cc:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    20ce:	4a 81       	ldd	r20, Y+2	; 0x02
    20d0:	5b 81       	ldd	r21, Y+3	; 0x03
    20d2:	6c 81       	ldd	r22, Y+4	; 0x04
    20d4:	7d 81       	ldd	r23, Y+5	; 0x05
    20d6:	46 87       	std	Z+14, r20	; 0x0e
    20d8:	57 87       	std	Z+15, r21	; 0x0f
    20da:	60 8b       	std	Z+16, r22	; 0x10
    20dc:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    20de:	40 0f       	add	r20, r16
    20e0:	51 1f       	adc	r21, r17
    20e2:	62 1f       	adc	r22, r18
    20e4:	73 1f       	adc	r23, r19
    20e6:	68 01       	movw	r12, r16
    20e8:	79 01       	movw	r14, r18
    20ea:	c5 01       	movw	r24, r10
    20ec:	48 dd       	rcall	.-1392   	; 0x1b7e <prvInsertTimerInActiveList>
                        break;
    20ee:	0a c0       	rjmp	.+20     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    20f0:	f5 01       	movw	r30, r10
    20f2:	86 89       	ldd	r24, Z+22	; 0x16
    20f4:	81 fd       	sbrc	r24, 1
    20f6:	04 c0       	rjmp	.+8      	; 0x2100 <__DATA_REGION_LENGTH__+0x100>
                                {
                                    vPortFree( pxTimer );
    20f8:	c5 01       	movw	r24, r10
    20fa:	0e 94 22 02 	call	0x444	; 0x444 <vPortFree>
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2100:	8e 7f       	andi	r24, 0xFE	; 254
    2102:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	a9 01       	movw	r20, r18
    210a:	be 01       	movw	r22, r28
    210c:	6f 5f       	subi	r22, 0xFF	; 255
    210e:	7f 4f       	sbci	r23, 0xFF	; 255
    2110:	80 91 29 19 	lds	r24, 0x1929	; 0x801929 <xTimerQueue>
    2114:	90 91 2a 19 	lds	r25, 0x192A	; 0x80192a <xTimerQueue+0x1>
    2118:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <xQueueReceive>
    211c:	81 11       	cpse	r24, r1
    211e:	70 cf       	rjmp	.-288    	; 0x2000 <__DATA_REGION_LENGTH__>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2120:	28 96       	adiw	r28, 0x08	; 8
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	df 90       	pop	r13
    213a:	cf 90       	pop	r12
    213c:	bf 90       	pop	r11
    213e:	af 90       	pop	r10
    2140:	08 95       	ret

00002142 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2142:	08 95       	ret

00002144 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2144:	84 b1       	in	r24, 0x04	; 4
    2146:	80 68       	ori	r24, 0x80	; 128
    2148:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    214a:	85 b1       	in	r24, 0x05	; 5
    214c:	80 68       	ori	r24, 0x80	; 128
    214e:	85 b9       	out	0x05, r24	; 5
    2150:	08 95       	ret

00002152 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2152:	83 b1       	in	r24, 0x03	; 3
    2154:	80 68       	ori	r24, 0x80	; 128
    2156:	83 b9       	out	0x03, r24	; 3
    2158:	08 95       	ret

0000215a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    215a:	f4 df       	rcall	.-24     	; 0x2144 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    215c:	2f ef       	ldi	r18, 0xFF	; 255
    215e:	80 e7       	ldi	r24, 0x70	; 112
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	21 50       	subi	r18, 0x01	; 1
    2164:	80 40       	sbci	r24, 0x00	; 0
    2166:	90 40       	sbci	r25, 0x00	; 0
    2168:	e1 f7       	brne	.-8      	; 0x2162 <vApplicationMallocFailedHook+0x8>
    216a:	00 c0       	rjmp	.+0      	; 0x216c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    216c:	00 00       	nop
    216e:	f1 df       	rcall	.-30     	; 0x2152 <prvBlinkMainLed>
    2170:	f5 cf       	rjmp	.-22     	; 0x215c <vApplicationMallocFailedHook+0x2>

00002172 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2172:	e8 df       	rcall	.-48     	; 0x2144 <prvSetMainLedOn>
    2174:	2f ef       	ldi	r18, 0xFF	; 255
    2176:	87 ea       	ldi	r24, 0xA7	; 167
    2178:	91 e6       	ldi	r25, 0x61	; 97
    217a:	21 50       	subi	r18, 0x01	; 1
    217c:	80 40       	sbci	r24, 0x00	; 0
    217e:	90 40       	sbci	r25, 0x00	; 0
    2180:	e1 f7       	brne	.-8      	; 0x217a <vApplicationStackOverflowHook+0x8>
    2182:	00 c0       	rjmp	.+0      	; 0x2184 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2184:	00 00       	nop
    2186:	e5 df       	rcall	.-54     	; 0x2152 <prvBlinkMainLed>
    2188:	f5 cf       	rjmp	.-22     	; 0x2174 <vApplicationStackOverflowHook+0x2>

0000218a <create_tasks_and_semaphores>:
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	e1 2c       	mov	r14, r1
    2192:	f1 2c       	mov	r15, r1
    2194:	02 e0       	ldi	r16, 0x02	; 2
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 ec       	ldi	r20, 0xC0	; 192
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	6f e2       	ldi	r22, 0x2F	; 47
    21a0:	72 e0       	ldi	r23, 0x02	; 2
    21a2:	8e e0       	ldi	r24, 0x0E	; 14
    21a4:	91 e1       	ldi	r25, 0x11	; 17
    21a6:	0e 94 a1 08 	call	0x1142	; 0x1142 <xTaskCreate>
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	08 95       	ret

000021b2 <initializeDriver>:
    21b2:	85 d0       	rcall	.+266    	; 0x22be <hih8120_initialise>
    21b4:	81 11       	cpse	r24, r1
    21b6:	05 c0       	rjmp	.+10     	; 0x21c2 <initializeDriver+0x10>
    21b8:	85 e3       	ldi	r24, 0x35	; 53
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	0e 94 67 1a 	call	0x34ce	; 0x34ce <puts>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <initializeDriver+0x38>
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	29 f4       	brne	.+10     	; 0x21d0 <initializeDriver+0x1e>
    21c6:	8e e5       	ldi	r24, 0x5E	; 94
    21c8:	92 e0       	ldi	r25, 0x02	; 2
    21ca:	0e 94 67 1a 	call	0x34ce	; 0x34ce <puts>
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <initializeDriver+0x38>
    21d0:	83 30       	cpi	r24, 0x03	; 3
    21d2:	29 f4       	brne	.+10     	; 0x21de <initializeDriver+0x2c>
    21d4:	86 e7       	ldi	r24, 0x76	; 118
    21d6:	92 e0       	ldi	r25, 0x02	; 2
    21d8:	0e 94 67 1a 	call	0x34ce	; 0x34ce <puts>
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <initializeDriver+0x38>
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	21 f4       	brne	.+8      	; 0x21ea <initializeDriver+0x38>
    21e2:	8f e7       	ldi	r24, 0x7F	; 127
    21e4:	92 e0       	ldi	r25, 0x02	; 2
    21e6:	0e 94 67 1a 	call	0x34ce	; 0x34ce <puts>
    21ea:	8b e8       	ldi	r24, 0x8B	; 139
    21ec:	92 e0       	ldi	r25, 0x02	; 2
    21ee:	9f 93       	push	r25
    21f0:	8f 93       	push	r24
    21f2:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <printf>
    21f6:	7a d0       	rcall	.+244    	; 0x22ec <hih8120_wakeup>
    21f8:	62 e3       	ldi	r22, 0x32	; 50
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	3b da       	rcall	.-2954   	; 0x1678 <vTaskDelay>
    2202:	88 d0       	rcall	.+272    	; 0x2314 <hih8120_measure>
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	35 da       	rcall	.-2966   	; 0x1678 <vTaskDelay>
    220e:	87 e9       	ldi	r24, 0x97	; 151
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	0e 94 67 1a 	call	0x34ce	; 0x34ce <puts>
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	08 95       	ret

0000221c <task1>:
    221c:	ca df       	rcall	.-108    	; 0x21b2 <initializeDriver>
    221e:	64 e6       	ldi	r22, 0x64	; 100
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	28 da       	rcall	.-2992   	; 0x1678 <vTaskDelay>
    2228:	85 d0       	rcall	.+266    	; 0x2334 <hih8120_getTemperature>
    222a:	9f 93       	push	r25
    222c:	8f 93       	push	r24
    222e:	7f 93       	push	r23
    2230:	6f 93       	push	r22
    2232:	87 ea       	ldi	r24, 0xA7	; 167
    2234:	92 e0       	ldi	r25, 0x02	; 2
    2236:	9f 93       	push	r25
    2238:	8f 93       	push	r24
    223a:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <printf>
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	e9 cf       	rjmp	.-46     	; 0x221e <task1+0x2>

0000224c <initialiseSystem>:
{
	// Set output ports for leds used in the example
	//DDRA |= _BV(DDA0) | _BV(DDA7);

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	e6 d3       	rcall	.+1996   	; 0x2a1c <stdio_initialise>
	// Let's create some tasks
//	initializeDriver();
	create_tasks_and_semaphores();
    2250:	9c cf       	rjmp	.-200    	; 0x218a <create_tasks_and_semaphores>
    2252:	08 95       	ret

00002254 <main>:
    2254:	fb df       	rcall	.-10     	; 0x224c <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Stttttarted!!\n");
    2256:	8f eb       	ldi	r24, 0xBF	; 191
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	0e 94 67 1a 	call	0x34ce	; 0x34ce <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    225e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vTaskStartScheduler>
    2262:	ff cf       	rjmp	.-2      	; 0x2262 <main+0xe>

00002264 <_hihTwiCallback>:
    2264:	65 30       	cpi	r22, 0x05	; 5
    2266:	f1 f4       	brne	.+60     	; 0x22a4 <_hihTwiCallback+0x40>
    2268:	fa 01       	movw	r30, r20
    226a:	80 81       	ld	r24, Z
    226c:	8f 73       	andi	r24, 0x3F	; 63
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	98 2f       	mov	r25, r24
    2272:	88 27       	eor	r24, r24
    2274:	21 81       	ldd	r18, Z+1	; 0x01
    2276:	82 2b       	or	r24, r18
    2278:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    227c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	f0 e4       	ldi	r31, 0x40	; 64
    2284:	8f 9f       	mul	r24, r31
    2286:	c0 01       	movw	r24, r0
    2288:	11 24       	eor	r1, r1
    228a:	fa 01       	movw	r30, r20
    228c:	23 81       	ldd	r18, Z+3	; 0x03
    228e:	26 95       	lsr	r18
    2290:	26 95       	lsr	r18
    2292:	82 2b       	or	r24, r18
    2294:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2298:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <_measuringIsReady>
    22a2:	08 95       	ret
    22a4:	64 30       	cpi	r22, 0x04	; 4
    22a6:	51 f0       	breq	.+20     	; 0x22bc <_hihTwiCallback+0x58>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e4       	ldi	r25, 0x40	; 64
    22ac:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    22b0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    22b4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    22b8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    22bc:	08 95       	ret

000022be <hih8120_initialise>:
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	02 e3       	ldi	r16, 0x32	; 50
    22c4:	11 e1       	ldi	r17, 0x11	; 17
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	34 e2       	ldi	r19, 0x24	; 36
    22ca:	44 ef       	ldi	r20, 0xF4	; 244
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	87 e2       	ldi	r24, 0x27	; 39
    22d2:	de d3       	rcall	.+1980   	; 0x2a90 <twiCreate>
    22d4:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <_hih8120Handler+0x1>
    22d8:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <_hih8120Handler>
    22dc:	21 e0       	ldi	r18, 0x01	; 1
    22de:	89 2b       	or	r24, r25
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <hih8120_initialise+0x26>
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	82 2f       	mov	r24, r18
    22e6:	1f 91       	pop	r17
    22e8:	0f 91       	pop	r16
    22ea:	08 95       	ret

000022ec <hih8120_wakeup>:
    22ec:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <_hih8120Handler>
    22f0:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <_hih8120Handler+0x1>
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	51 f0       	breq	.+20     	; 0x230c <hih8120_wakeup+0x20>
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	19 d4       	rcall	.+2098   	; 0x2b32 <twiTransmit>
    2300:	84 30       	cpi	r24, 0x04	; 4
    2302:	31 f4       	brne	.+12     	; 0x2310 <hih8120_wakeup+0x24>
    2304:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <_measuringIsReady>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	08 95       	ret
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	08 95       	ret
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	08 95       	ret

00002314 <hih8120_measure>:
    2314:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <_hih8120Handler>
    2318:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <_hih8120Handler+0x1>
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	31 f0       	breq	.+12     	; 0x232c <hih8120_measure+0x18>
    2320:	64 e0       	ldi	r22, 0x04	; 4
    2322:	53 d4       	rcall	.+2214   	; 0x2bca <twiReceive>
    2324:	85 30       	cpi	r24, 0x05	; 5
    2326:	21 f0       	breq	.+8      	; 0x2330 <hih8120_measure+0x1c>
    2328:	83 e0       	ldi	r24, 0x03	; 3
    232a:	08 95       	ret
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	08 95       	ret
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	08 95       	ret

00002334 <hih8120_getTemperature>:
    2334:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    2338:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	49 d6       	rcall	.+3218   	; 0x2fd4 <__floatunsisf>
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	45 e2       	ldi	r20, 0x25	; 37
    2348:	53 e4       	ldi	r21, 0x43	; 67
    234a:	d2 d6       	rcall	.+3492   	; 0x30f0 <__mulsf3>
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	38 ef       	ldi	r19, 0xF8	; 248
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	56 e4       	ldi	r21, 0x46	; 70
    2354:	ab d5       	rcall	.+2902   	; 0x2eac <__divsf3>
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	52 e4       	ldi	r21, 0x42	; 66
    235e:	41 c5       	rjmp	.+2690   	; 0x2de2 <__subsf3>
    2360:	08 95       	ret

00002362 <serial_create>:
    2362:	2f 92       	push	r2
    2364:	3f 92       	push	r3
    2366:	4f 92       	push	r4
    2368:	5f 92       	push	r5
    236a:	6f 92       	push	r6
    236c:	7f 92       	push	r7
    236e:	8f 92       	push	r8
    2370:	9f 92       	push	r9
    2372:	af 92       	push	r10
    2374:	cf 92       	push	r12
    2376:	ef 92       	push	r14
    2378:	ff 92       	push	r15
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	f8 2e       	mov	r15, r24
    2388:	2a 01       	movw	r4, r20
    238a:	3b 01       	movw	r6, r22
    238c:	88 e0       	ldi	r24, 0x08	; 8
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	56 d7       	rcall	.+3756   	; 0x323e <malloc>
    2392:	8c 01       	movw	r16, r24
    2394:	8f 2d       	mov	r24, r15
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	fc 01       	movw	r30, r24
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	e8 5b       	subi	r30, 0xB8	; 184
    23a0:	f6 4e       	sbci	r31, 0xE6	; 230
    23a2:	11 83       	std	Z+1, r17	; 0x01
    23a4:	00 83       	st	Z, r16
    23a6:	01 15       	cp	r16, r1
    23a8:	11 05       	cpc	r17, r1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <serial_create+0x4c>
    23ac:	64 c0       	rjmp	.+200    	; 0x2476 <serial_create+0x114>
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	fc 01       	movw	r30, r24
    23b4:	e5 5f       	subi	r30, 0xF5	; 245
    23b6:	fd 4f       	sbci	r31, 0xFD	; 253
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	d8 01       	movw	r26, r16
    23be:	8d 93       	st	X+, r24
    23c0:	9c 93       	st	X, r25
    23c2:	6c 2d       	mov	r22, r12
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	84 e0       	ldi	r24, 0x04	; 4
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	1f d7       	rcall	.+3646   	; 0x320a <calloc>
    23cc:	1c 01       	movw	r2, r24
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	86 e0       	ldi	r24, 0x06	; 6
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	19 d7       	rcall	.+3634   	; 0x320a <calloc>
    23d8:	7c 01       	movw	r14, r24
    23da:	4c 2d       	mov	r20, r12
    23dc:	b1 01       	movw	r22, r2
    23de:	e5 d4       	rcall	.+2506   	; 0x2daa <fifo_init>
    23e0:	f8 01       	movw	r30, r16
    23e2:	f5 82       	std	Z+5, r15	; 0x05
    23e4:	e4 82       	std	Z+4, r14	; 0x04
    23e6:	6a 2d       	mov	r22, r10
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	84 e0       	ldi	r24, 0x04	; 4
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0d d7       	rcall	.+3610   	; 0x320a <calloc>
    23f0:	1c 01       	movw	r2, r24
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	86 e0       	ldi	r24, 0x06	; 6
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	07 d7       	rcall	.+3598   	; 0x320a <calloc>
    23fc:	7c 01       	movw	r14, r24
    23fe:	4a 2d       	mov	r20, r10
    2400:	b1 01       	movw	r22, r2
    2402:	d3 d4       	rcall	.+2470   	; 0x2daa <fifo_init>
    2404:	d8 01       	movw	r26, r16
    2406:	13 96       	adiw	r26, 0x03	; 3
    2408:	fc 92       	st	X, r15
    240a:	ee 92       	st	-X, r14
    240c:	12 97       	sbiw	r26, 0x02	; 2
    240e:	17 96       	adiw	r26, 0x07	; 7
    2410:	9c 92       	st	X, r9
    2412:	8e 92       	st	-X, r8
    2414:	16 97       	sbiw	r26, 0x06	; 6
    2416:	ff b6       	in	r15, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	ed 91       	ld	r30, X+
    241c:	fc 91       	ld	r31, X
    241e:	11 97       	sbiw	r26, 0x01	; 1
    2420:	36 97       	sbiw	r30, 0x06	; 6
    2422:	80 81       	ld	r24, Z
    2424:	82 60       	ori	r24, 0x02	; 2
    2426:	80 83       	st	Z, r24
    2428:	8d 90       	ld	r8, X+
    242a:	9c 90       	ld	r9, X
    242c:	c3 01       	movw	r24, r6
    242e:	b2 01       	movw	r22, r4
    2430:	d1 d5       	rcall	.+2978   	; 0x2fd4 <__floatunsisf>
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	51 e4       	ldi	r21, 0x41	; 65
    243a:	5a d6       	rcall	.+3252   	; 0x30f0 <__mulsf3>
    243c:	9b 01       	movw	r18, r22
    243e:	ac 01       	movw	r20, r24
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	74 e2       	ldi	r23, 0x24	; 36
    2444:	84 e7       	ldi	r24, 0x74	; 116
    2446:	9b e4       	ldi	r25, 0x4B	; 75
    2448:	31 d5       	rcall	.+2658   	; 0x2eac <__divsf3>
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	c7 d4       	rcall	.+2446   	; 0x2de2 <__subsf3>
    2454:	93 d5       	rcall	.+2854   	; 0x2f7c <__fixunssfsi>
    2456:	f4 01       	movw	r30, r8
    2458:	32 97       	sbiw	r30, 0x02	; 2
    245a:	60 83       	st	Z, r22
    245c:	d8 01       	movw	r26, r16
    245e:	ed 91       	ld	r30, X+
    2460:	fc 91       	ld	r31, X
    2462:	11 97       	sbiw	r26, 0x01	; 1
    2464:	35 97       	sbiw	r30, 0x05	; 5
    2466:	88 e9       	ldi	r24, 0x98	; 152
    2468:	80 83       	st	Z, r24
    246a:	ed 91       	ld	r30, X+
    246c:	fc 91       	ld	r31, X
    246e:	34 97       	sbiw	r30, 0x04	; 4
    2470:	86 e0       	ldi	r24, 0x06	; 6
    2472:	80 83       	st	Z, r24
    2474:	ff be       	out	0x3f, r15	; 63
    2476:	c8 01       	movw	r24, r16
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ff 90       	pop	r15
    2482:	ef 90       	pop	r14
    2484:	cf 90       	pop	r12
    2486:	af 90       	pop	r10
    2488:	9f 90       	pop	r9
    248a:	8f 90       	pop	r8
    248c:	7f 90       	pop	r7
    248e:	6f 90       	pop	r6
    2490:	5f 90       	pop	r5
    2492:	4f 90       	pop	r4
    2494:	3f 90       	pop	r3
    2496:	2f 90       	pop	r2
    2498:	08 95       	ret

0000249a <serial_sendByte>:
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	dc 01       	movw	r26, r24
    24a0:	89 2b       	or	r24, r25
    24a2:	01 f1       	breq	.+64     	; 0x24e4 <serial_sendByte+0x4a>
    24a4:	12 96       	adiw	r26, 0x02	; 2
    24a6:	ed 91       	ld	r30, X+
    24a8:	fc 91       	ld	r31, X
    24aa:	13 97       	sbiw	r26, 0x03	; 3
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	25 81       	ldd	r18, Z+5	; 0x05
    24b2:	98 1b       	sub	r25, r24
    24b4:	92 23       	and	r25, r18
    24b6:	84 81       	ldd	r24, Z+4	; 0x04
    24b8:	98 17       	cp	r25, r24
    24ba:	b1 f0       	breq	.+44     	; 0x24e8 <serial_sendByte+0x4e>
    24bc:	83 81       	ldd	r24, Z+3	; 0x03
    24be:	26 95       	lsr	r18
    24c0:	28 23       	and	r18, r24
    24c2:	c0 81       	ld	r28, Z
    24c4:	d1 81       	ldd	r29, Z+1	; 0x01
    24c6:	c2 0f       	add	r28, r18
    24c8:	d1 1d       	adc	r29, r1
    24ca:	68 83       	st	Y, r22
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	95 81       	ldd	r25, Z+5	; 0x05
    24d0:	89 23       	and	r24, r25
    24d2:	83 83       	std	Z+3, r24	; 0x03
    24d4:	ed 91       	ld	r30, X+
    24d6:	fc 91       	ld	r31, X
    24d8:	35 97       	sbiw	r30, 0x05	; 5
    24da:	80 81       	ld	r24, Z
    24dc:	80 62       	ori	r24, 0x20	; 32
    24de:	80 83       	st	Z, r24
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	03 c0       	rjmp	.+6      	; 0x24ea <serial_sendByte+0x50>
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <serial_sendByte+0x50>
    24e8:	82 e0       	ldi	r24, 0x02	; 2
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	08 95       	ret

000024f0 <serial_getByte>:
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	d1 f0       	breq	.+52     	; 0x2528 <serial_getByte+0x38>
    24f4:	dc 01       	movw	r26, r24
    24f6:	14 96       	adiw	r26, 0x04	; 4
    24f8:	ed 91       	ld	r30, X+
    24fa:	fc 91       	ld	r31, X
    24fc:	15 97       	sbiw	r26, 0x05	; 5
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	98 17       	cp	r25, r24
    2504:	99 f0       	breq	.+38     	; 0x252c <serial_getByte+0x3c>
    2506:	92 81       	ldd	r25, Z+2	; 0x02
    2508:	85 81       	ldd	r24, Z+5	; 0x05
    250a:	86 95       	lsr	r24
    250c:	89 23       	and	r24, r25
    250e:	a0 81       	ld	r26, Z
    2510:	b1 81       	ldd	r27, Z+1	; 0x01
    2512:	a8 0f       	add	r26, r24
    2514:	b1 1d       	adc	r27, r1
    2516:	8c 91       	ld	r24, X
    2518:	db 01       	movw	r26, r22
    251a:	8c 93       	st	X, r24
    251c:	9f 5f       	subi	r25, 0xFF	; 255
    251e:	85 81       	ldd	r24, Z+5	; 0x05
    2520:	98 23       	and	r25, r24
    2522:	92 83       	std	Z+2, r25	; 0x02
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	08 95       	ret
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	08 95       	ret
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	08 95       	ret

00002530 <__vector_25>:
    2530:	1f 92       	push	r1
    2532:	0f 92       	push	r0
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	0f 92       	push	r0
    2538:	11 24       	eor	r1, r1
    253a:	0b b6       	in	r0, 0x3b	; 59
    253c:	0f 92       	push	r0
    253e:	2f 93       	push	r18
    2540:	3f 93       	push	r19
    2542:	4f 93       	push	r20
    2544:	5f 93       	push	r21
    2546:	6f 93       	push	r22
    2548:	7f 93       	push	r23
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	af 93       	push	r26
    2550:	bf 93       	push	r27
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	ef 93       	push	r30
    2558:	ff 93       	push	r31
    255a:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <_ser_handle>
    255e:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <_ser_handle+0x1>
    2562:	10 97       	sbiw	r26, 0x00	; 0
    2564:	11 f1       	breq	.+68     	; 0x25aa <__vector_25+0x7a>
    2566:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    256a:	14 96       	adiw	r26, 0x04	; 4
    256c:	ed 91       	ld	r30, X+
    256e:	fc 91       	ld	r31, X
    2570:	15 97       	sbiw	r26, 0x05	; 5
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	82 81       	ldd	r24, Z+2	; 0x02
    2576:	25 81       	ldd	r18, Z+5	; 0x05
    2578:	98 1b       	sub	r25, r24
    257a:	92 23       	and	r25, r18
    257c:	84 81       	ldd	r24, Z+4	; 0x04
    257e:	98 17       	cp	r25, r24
    2580:	61 f0       	breq	.+24     	; 0x259a <__vector_25+0x6a>
    2582:	83 81       	ldd	r24, Z+3	; 0x03
    2584:	26 95       	lsr	r18
    2586:	28 23       	and	r18, r24
    2588:	c0 81       	ld	r28, Z
    258a:	d1 81       	ldd	r29, Z+1	; 0x01
    258c:	c2 0f       	add	r28, r18
    258e:	d1 1d       	adc	r29, r1
    2590:	68 83       	st	Y, r22
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	95 81       	ldd	r25, Z+5	; 0x05
    2596:	89 23       	and	r24, r25
    2598:	83 83       	std	Z+3, r24	; 0x03
    259a:	16 96       	adiw	r26, 0x06	; 6
    259c:	ed 91       	ld	r30, X+
    259e:	fc 91       	ld	r31, X
    25a0:	17 97       	sbiw	r26, 0x07	; 7
    25a2:	30 97       	sbiw	r30, 0x00	; 0
    25a4:	11 f0       	breq	.+4      	; 0x25aa <__vector_25+0x7a>
    25a6:	cd 01       	movw	r24, r26
    25a8:	19 95       	eicall
    25aa:	ff 91       	pop	r31
    25ac:	ef 91       	pop	r30
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	bf 91       	pop	r27
    25b4:	af 91       	pop	r26
    25b6:	9f 91       	pop	r25
    25b8:	8f 91       	pop	r24
    25ba:	7f 91       	pop	r23
    25bc:	6f 91       	pop	r22
    25be:	5f 91       	pop	r21
    25c0:	4f 91       	pop	r20
    25c2:	3f 91       	pop	r19
    25c4:	2f 91       	pop	r18
    25c6:	0f 90       	pop	r0
    25c8:	0b be       	out	0x3b, r0	; 59
    25ca:	0f 90       	pop	r0
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	0f 90       	pop	r0
    25d0:	1f 90       	pop	r1
    25d2:	18 95       	reti

000025d4 <__vector_26>:
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	0f 92       	push	r0
    25dc:	11 24       	eor	r1, r1
    25de:	0b b6       	in	r0, 0x3b	; 59
    25e0:	0f 92       	push	r0
    25e2:	2f 93       	push	r18
    25e4:	8f 93       	push	r24
    25e6:	9f 93       	push	r25
    25e8:	af 93       	push	r26
    25ea:	bf 93       	push	r27
    25ec:	ef 93       	push	r30
    25ee:	ff 93       	push	r31
    25f0:	e0 91 48 19 	lds	r30, 0x1948	; 0x801948 <_ser_handle>
    25f4:	f0 91 49 19 	lds	r31, 0x1949	; 0x801949 <_ser_handle+0x1>
    25f8:	30 97       	sbiw	r30, 0x00	; 0
    25fa:	b9 f0       	breq	.+46     	; 0x262a <__vector_26+0x56>
    25fc:	02 80       	ldd	r0, Z+2	; 0x02
    25fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2600:	e0 2d       	mov	r30, r0
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	98 17       	cp	r25, r24
    2608:	b1 f0       	breq	.+44     	; 0x2636 <__vector_26+0x62>
    260a:	92 81       	ldd	r25, Z+2	; 0x02
    260c:	85 81       	ldd	r24, Z+5	; 0x05
    260e:	28 2f       	mov	r18, r24
    2610:	26 95       	lsr	r18
    2612:	29 23       	and	r18, r25
    2614:	a0 81       	ld	r26, Z
    2616:	b1 81       	ldd	r27, Z+1	; 0x01
    2618:	a2 0f       	add	r26, r18
    261a:	b1 1d       	adc	r27, r1
    261c:	2c 91       	ld	r18, X
    261e:	9f 5f       	subi	r25, 0xFF	; 255
    2620:	89 23       	and	r24, r25
    2622:	82 83       	std	Z+2, r24	; 0x02
    2624:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2628:	0b c0       	rjmp	.+22     	; 0x2640 <__vector_26+0x6c>
    262a:	e1 ec       	ldi	r30, 0xC1	; 193
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	8f 7d       	andi	r24, 0xDF	; 223
    2632:	80 83       	st	Z, r24
    2634:	05 c0       	rjmp	.+10     	; 0x2640 <__vector_26+0x6c>
    2636:	e1 ec       	ldi	r30, 0xC1	; 193
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	8f 7d       	andi	r24, 0xDF	; 223
    263e:	80 83       	st	Z, r24
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	bf 91       	pop	r27
    2646:	af 91       	pop	r26
    2648:	9f 91       	pop	r25
    264a:	8f 91       	pop	r24
    264c:	2f 91       	pop	r18
    264e:	0f 90       	pop	r0
    2650:	0b be       	out	0x3b, r0	; 59
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <__vector_36>:
    265c:	1f 92       	push	r1
    265e:	0f 92       	push	r0
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	0f 92       	push	r0
    2664:	11 24       	eor	r1, r1
    2666:	0b b6       	in	r0, 0x3b	; 59
    2668:	0f 92       	push	r0
    266a:	2f 93       	push	r18
    266c:	3f 93       	push	r19
    266e:	4f 93       	push	r20
    2670:	5f 93       	push	r21
    2672:	6f 93       	push	r22
    2674:	7f 93       	push	r23
    2676:	8f 93       	push	r24
    2678:	9f 93       	push	r25
    267a:	af 93       	push	r26
    267c:	bf 93       	push	r27
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	ef 93       	push	r30
    2684:	ff 93       	push	r31
    2686:	a0 91 4a 19 	lds	r26, 0x194A	; 0x80194a <_ser_handle+0x2>
    268a:	b0 91 4b 19 	lds	r27, 0x194B	; 0x80194b <_ser_handle+0x3>
    268e:	10 97       	sbiw	r26, 0x00	; 0
    2690:	11 f1       	breq	.+68     	; 0x26d6 <__vector_36+0x7a>
    2692:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2696:	14 96       	adiw	r26, 0x04	; 4
    2698:	ed 91       	ld	r30, X+
    269a:	fc 91       	ld	r31, X
    269c:	15 97       	sbiw	r26, 0x05	; 5
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	25 81       	ldd	r18, Z+5	; 0x05
    26a4:	98 1b       	sub	r25, r24
    26a6:	92 23       	and	r25, r18
    26a8:	84 81       	ldd	r24, Z+4	; 0x04
    26aa:	98 17       	cp	r25, r24
    26ac:	61 f0       	breq	.+24     	; 0x26c6 <__vector_36+0x6a>
    26ae:	83 81       	ldd	r24, Z+3	; 0x03
    26b0:	26 95       	lsr	r18
    26b2:	28 23       	and	r18, r24
    26b4:	c0 81       	ld	r28, Z
    26b6:	d1 81       	ldd	r29, Z+1	; 0x01
    26b8:	c2 0f       	add	r28, r18
    26ba:	d1 1d       	adc	r29, r1
    26bc:	68 83       	st	Y, r22
    26be:	8f 5f       	subi	r24, 0xFF	; 255
    26c0:	95 81       	ldd	r25, Z+5	; 0x05
    26c2:	89 23       	and	r24, r25
    26c4:	83 83       	std	Z+3, r24	; 0x03
    26c6:	16 96       	adiw	r26, 0x06	; 6
    26c8:	ed 91       	ld	r30, X+
    26ca:	fc 91       	ld	r31, X
    26cc:	17 97       	sbiw	r26, 0x07	; 7
    26ce:	30 97       	sbiw	r30, 0x00	; 0
    26d0:	11 f0       	breq	.+4      	; 0x26d6 <__vector_36+0x7a>
    26d2:	cd 01       	movw	r24, r26
    26d4:	19 95       	eicall
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	bf 91       	pop	r27
    26e0:	af 91       	pop	r26
    26e2:	9f 91       	pop	r25
    26e4:	8f 91       	pop	r24
    26e6:	7f 91       	pop	r23
    26e8:	6f 91       	pop	r22
    26ea:	5f 91       	pop	r21
    26ec:	4f 91       	pop	r20
    26ee:	3f 91       	pop	r19
    26f0:	2f 91       	pop	r18
    26f2:	0f 90       	pop	r0
    26f4:	0b be       	out	0x3b, r0	; 59
    26f6:	0f 90       	pop	r0
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	0f 90       	pop	r0
    26fc:	1f 90       	pop	r1
    26fe:	18 95       	reti

00002700 <__vector_37>:
    2700:	1f 92       	push	r1
    2702:	0f 92       	push	r0
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	0f 92       	push	r0
    2708:	11 24       	eor	r1, r1
    270a:	0b b6       	in	r0, 0x3b	; 59
    270c:	0f 92       	push	r0
    270e:	2f 93       	push	r18
    2710:	8f 93       	push	r24
    2712:	9f 93       	push	r25
    2714:	af 93       	push	r26
    2716:	bf 93       	push	r27
    2718:	ef 93       	push	r30
    271a:	ff 93       	push	r31
    271c:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <_ser_handle+0x2>
    2720:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <_ser_handle+0x3>
    2724:	30 97       	sbiw	r30, 0x00	; 0
    2726:	b9 f0       	breq	.+46     	; 0x2756 <__vector_37+0x56>
    2728:	02 80       	ldd	r0, Z+2	; 0x02
    272a:	f3 81       	ldd	r31, Z+3	; 0x03
    272c:	e0 2d       	mov	r30, r0
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	98 17       	cp	r25, r24
    2734:	b1 f0       	breq	.+44     	; 0x2762 <__vector_37+0x62>
    2736:	92 81       	ldd	r25, Z+2	; 0x02
    2738:	85 81       	ldd	r24, Z+5	; 0x05
    273a:	28 2f       	mov	r18, r24
    273c:	26 95       	lsr	r18
    273e:	29 23       	and	r18, r25
    2740:	a0 81       	ld	r26, Z
    2742:	b1 81       	ldd	r27, Z+1	; 0x01
    2744:	a2 0f       	add	r26, r18
    2746:	b1 1d       	adc	r27, r1
    2748:	2c 91       	ld	r18, X
    274a:	9f 5f       	subi	r25, 0xFF	; 255
    274c:	89 23       	and	r24, r25
    274e:	82 83       	std	Z+2, r24	; 0x02
    2750:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2754:	0b c0       	rjmp	.+22     	; 0x276c <__vector_37+0x6c>
    2756:	e9 ec       	ldi	r30, 0xC9	; 201
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	8f 7d       	andi	r24, 0xDF	; 223
    275e:	80 83       	st	Z, r24
    2760:	05 c0       	rjmp	.+10     	; 0x276c <__vector_37+0x6c>
    2762:	e9 ec       	ldi	r30, 0xC9	; 201
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	8f 7d       	andi	r24, 0xDF	; 223
    276a:	80 83       	st	Z, r24
    276c:	ff 91       	pop	r31
    276e:	ef 91       	pop	r30
    2770:	bf 91       	pop	r27
    2772:	af 91       	pop	r26
    2774:	9f 91       	pop	r25
    2776:	8f 91       	pop	r24
    2778:	2f 91       	pop	r18
    277a:	0f 90       	pop	r0
    277c:	0b be       	out	0x3b, r0	; 59
    277e:	0f 90       	pop	r0
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	0f 90       	pop	r0
    2784:	1f 90       	pop	r1
    2786:	18 95       	reti

00002788 <__vector_51>:
    2788:	1f 92       	push	r1
    278a:	0f 92       	push	r0
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	0f 92       	push	r0
    2790:	11 24       	eor	r1, r1
    2792:	0b b6       	in	r0, 0x3b	; 59
    2794:	0f 92       	push	r0
    2796:	2f 93       	push	r18
    2798:	3f 93       	push	r19
    279a:	4f 93       	push	r20
    279c:	5f 93       	push	r21
    279e:	6f 93       	push	r22
    27a0:	7f 93       	push	r23
    27a2:	8f 93       	push	r24
    27a4:	9f 93       	push	r25
    27a6:	af 93       	push	r26
    27a8:	bf 93       	push	r27
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	ef 93       	push	r30
    27b0:	ff 93       	push	r31
    27b2:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <_ser_handle+0x4>
    27b6:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <_ser_handle+0x5>
    27ba:	10 97       	sbiw	r26, 0x00	; 0
    27bc:	11 f1       	breq	.+68     	; 0x2802 <__vector_51+0x7a>
    27be:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    27c2:	14 96       	adiw	r26, 0x04	; 4
    27c4:	ed 91       	ld	r30, X+
    27c6:	fc 91       	ld	r31, X
    27c8:	15 97       	sbiw	r26, 0x05	; 5
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	82 81       	ldd	r24, Z+2	; 0x02
    27ce:	25 81       	ldd	r18, Z+5	; 0x05
    27d0:	98 1b       	sub	r25, r24
    27d2:	92 23       	and	r25, r18
    27d4:	84 81       	ldd	r24, Z+4	; 0x04
    27d6:	98 17       	cp	r25, r24
    27d8:	61 f0       	breq	.+24     	; 0x27f2 <__vector_51+0x6a>
    27da:	83 81       	ldd	r24, Z+3	; 0x03
    27dc:	26 95       	lsr	r18
    27de:	28 23       	and	r18, r24
    27e0:	c0 81       	ld	r28, Z
    27e2:	d1 81       	ldd	r29, Z+1	; 0x01
    27e4:	c2 0f       	add	r28, r18
    27e6:	d1 1d       	adc	r29, r1
    27e8:	68 83       	st	Y, r22
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	95 81       	ldd	r25, Z+5	; 0x05
    27ee:	89 23       	and	r24, r25
    27f0:	83 83       	std	Z+3, r24	; 0x03
    27f2:	16 96       	adiw	r26, 0x06	; 6
    27f4:	ed 91       	ld	r30, X+
    27f6:	fc 91       	ld	r31, X
    27f8:	17 97       	sbiw	r26, 0x07	; 7
    27fa:	30 97       	sbiw	r30, 0x00	; 0
    27fc:	11 f0       	breq	.+4      	; 0x2802 <__vector_51+0x7a>
    27fe:	cd 01       	movw	r24, r26
    2800:	19 95       	eicall
    2802:	ff 91       	pop	r31
    2804:	ef 91       	pop	r30
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	bf 91       	pop	r27
    280c:	af 91       	pop	r26
    280e:	9f 91       	pop	r25
    2810:	8f 91       	pop	r24
    2812:	7f 91       	pop	r23
    2814:	6f 91       	pop	r22
    2816:	5f 91       	pop	r21
    2818:	4f 91       	pop	r20
    281a:	3f 91       	pop	r19
    281c:	2f 91       	pop	r18
    281e:	0f 90       	pop	r0
    2820:	0b be       	out	0x3b, r0	; 59
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	0f 90       	pop	r0
    2828:	1f 90       	pop	r1
    282a:	18 95       	reti

0000282c <__vector_52>:
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	0b b6       	in	r0, 0x3b	; 59
    2838:	0f 92       	push	r0
    283a:	2f 93       	push	r18
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
    2844:	ef 93       	push	r30
    2846:	ff 93       	push	r31
    2848:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <_ser_handle+0x4>
    284c:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <_ser_handle+0x5>
    2850:	30 97       	sbiw	r30, 0x00	; 0
    2852:	b9 f0       	breq	.+46     	; 0x2882 <__vector_52+0x56>
    2854:	02 80       	ldd	r0, Z+2	; 0x02
    2856:	f3 81       	ldd	r31, Z+3	; 0x03
    2858:	e0 2d       	mov	r30, r0
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	98 17       	cp	r25, r24
    2860:	b1 f0       	breq	.+44     	; 0x288e <__vector_52+0x62>
    2862:	92 81       	ldd	r25, Z+2	; 0x02
    2864:	85 81       	ldd	r24, Z+5	; 0x05
    2866:	28 2f       	mov	r18, r24
    2868:	26 95       	lsr	r18
    286a:	29 23       	and	r18, r25
    286c:	a0 81       	ld	r26, Z
    286e:	b1 81       	ldd	r27, Z+1	; 0x01
    2870:	a2 0f       	add	r26, r18
    2872:	b1 1d       	adc	r27, r1
    2874:	2c 91       	ld	r18, X
    2876:	9f 5f       	subi	r25, 0xFF	; 255
    2878:	89 23       	and	r24, r25
    287a:	82 83       	std	Z+2, r24	; 0x02
    287c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2880:	0b c0       	rjmp	.+22     	; 0x2898 <__vector_52+0x6c>
    2882:	e1 ed       	ldi	r30, 0xD1	; 209
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	8f 7d       	andi	r24, 0xDF	; 223
    288a:	80 83       	st	Z, r24
    288c:	05 c0       	rjmp	.+10     	; 0x2898 <__vector_52+0x6c>
    288e:	e1 ed       	ldi	r30, 0xD1	; 209
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	8f 7d       	andi	r24, 0xDF	; 223
    2896:	80 83       	st	Z, r24
    2898:	ff 91       	pop	r31
    289a:	ef 91       	pop	r30
    289c:	bf 91       	pop	r27
    289e:	af 91       	pop	r26
    28a0:	9f 91       	pop	r25
    28a2:	8f 91       	pop	r24
    28a4:	2f 91       	pop	r18
    28a6:	0f 90       	pop	r0
    28a8:	0b be       	out	0x3b, r0	; 59
    28aa:	0f 90       	pop	r0
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	0f 90       	pop	r0
    28b0:	1f 90       	pop	r1
    28b2:	18 95       	reti

000028b4 <__vector_54>:
    28b4:	1f 92       	push	r1
    28b6:	0f 92       	push	r0
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	0f 92       	push	r0
    28bc:	11 24       	eor	r1, r1
    28be:	0b b6       	in	r0, 0x3b	; 59
    28c0:	0f 92       	push	r0
    28c2:	2f 93       	push	r18
    28c4:	3f 93       	push	r19
    28c6:	4f 93       	push	r20
    28c8:	5f 93       	push	r21
    28ca:	6f 93       	push	r22
    28cc:	7f 93       	push	r23
    28ce:	8f 93       	push	r24
    28d0:	9f 93       	push	r25
    28d2:	af 93       	push	r26
    28d4:	bf 93       	push	r27
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	ef 93       	push	r30
    28dc:	ff 93       	push	r31
    28de:	a0 91 4e 19 	lds	r26, 0x194E	; 0x80194e <_ser_handle+0x6>
    28e2:	b0 91 4f 19 	lds	r27, 0x194F	; 0x80194f <_ser_handle+0x7>
    28e6:	10 97       	sbiw	r26, 0x00	; 0
    28e8:	11 f1       	breq	.+68     	; 0x292e <__vector_54+0x7a>
    28ea:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    28ee:	14 96       	adiw	r26, 0x04	; 4
    28f0:	ed 91       	ld	r30, X+
    28f2:	fc 91       	ld	r31, X
    28f4:	15 97       	sbiw	r26, 0x05	; 5
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	25 81       	ldd	r18, Z+5	; 0x05
    28fc:	98 1b       	sub	r25, r24
    28fe:	92 23       	and	r25, r18
    2900:	84 81       	ldd	r24, Z+4	; 0x04
    2902:	98 17       	cp	r25, r24
    2904:	61 f0       	breq	.+24     	; 0x291e <__vector_54+0x6a>
    2906:	83 81       	ldd	r24, Z+3	; 0x03
    2908:	26 95       	lsr	r18
    290a:	28 23       	and	r18, r24
    290c:	c0 81       	ld	r28, Z
    290e:	d1 81       	ldd	r29, Z+1	; 0x01
    2910:	c2 0f       	add	r28, r18
    2912:	d1 1d       	adc	r29, r1
    2914:	68 83       	st	Y, r22
    2916:	8f 5f       	subi	r24, 0xFF	; 255
    2918:	95 81       	ldd	r25, Z+5	; 0x05
    291a:	89 23       	and	r24, r25
    291c:	83 83       	std	Z+3, r24	; 0x03
    291e:	16 96       	adiw	r26, 0x06	; 6
    2920:	ed 91       	ld	r30, X+
    2922:	fc 91       	ld	r31, X
    2924:	17 97       	sbiw	r26, 0x07	; 7
    2926:	30 97       	sbiw	r30, 0x00	; 0
    2928:	11 f0       	breq	.+4      	; 0x292e <__vector_54+0x7a>
    292a:	cd 01       	movw	r24, r26
    292c:	19 95       	eicall
    292e:	ff 91       	pop	r31
    2930:	ef 91       	pop	r30
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	bf 91       	pop	r27
    2938:	af 91       	pop	r26
    293a:	9f 91       	pop	r25
    293c:	8f 91       	pop	r24
    293e:	7f 91       	pop	r23
    2940:	6f 91       	pop	r22
    2942:	5f 91       	pop	r21
    2944:	4f 91       	pop	r20
    2946:	3f 91       	pop	r19
    2948:	2f 91       	pop	r18
    294a:	0f 90       	pop	r0
    294c:	0b be       	out	0x3b, r0	; 59
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	0f 90       	pop	r0
    2954:	1f 90       	pop	r1
    2956:	18 95       	reti

00002958 <__vector_55>:
    2958:	1f 92       	push	r1
    295a:	0f 92       	push	r0
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	0f 92       	push	r0
    2960:	11 24       	eor	r1, r1
    2962:	0b b6       	in	r0, 0x3b	; 59
    2964:	0f 92       	push	r0
    2966:	2f 93       	push	r18
    2968:	8f 93       	push	r24
    296a:	9f 93       	push	r25
    296c:	af 93       	push	r26
    296e:	bf 93       	push	r27
    2970:	ef 93       	push	r30
    2972:	ff 93       	push	r31
    2974:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <_ser_handle+0x6>
    2978:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <_ser_handle+0x7>
    297c:	30 97       	sbiw	r30, 0x00	; 0
    297e:	b9 f0       	breq	.+46     	; 0x29ae <__vector_55+0x56>
    2980:	02 80       	ldd	r0, Z+2	; 0x02
    2982:	f3 81       	ldd	r31, Z+3	; 0x03
    2984:	e0 2d       	mov	r30, r0
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	98 17       	cp	r25, r24
    298c:	b1 f0       	breq	.+44     	; 0x29ba <__vector_55+0x62>
    298e:	92 81       	ldd	r25, Z+2	; 0x02
    2990:	85 81       	ldd	r24, Z+5	; 0x05
    2992:	28 2f       	mov	r18, r24
    2994:	26 95       	lsr	r18
    2996:	29 23       	and	r18, r25
    2998:	a0 81       	ld	r26, Z
    299a:	b1 81       	ldd	r27, Z+1	; 0x01
    299c:	a2 0f       	add	r26, r18
    299e:	b1 1d       	adc	r27, r1
    29a0:	2c 91       	ld	r18, X
    29a2:	9f 5f       	subi	r25, 0xFF	; 255
    29a4:	89 23       	and	r24, r25
    29a6:	82 83       	std	Z+2, r24	; 0x02
    29a8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    29ac:	0b c0       	rjmp	.+22     	; 0x29c4 <__vector_55+0x6c>
    29ae:	e1 e3       	ldi	r30, 0x31	; 49
    29b0:	f1 e0       	ldi	r31, 0x01	; 1
    29b2:	80 81       	ld	r24, Z
    29b4:	8f 7d       	andi	r24, 0xDF	; 223
    29b6:	80 83       	st	Z, r24
    29b8:	05 c0       	rjmp	.+10     	; 0x29c4 <__vector_55+0x6c>
    29ba:	e1 e3       	ldi	r30, 0x31	; 49
    29bc:	f1 e0       	ldi	r31, 0x01	; 1
    29be:	80 81       	ld	r24, Z
    29c0:	8f 7d       	andi	r24, 0xDF	; 223
    29c2:	80 83       	st	Z, r24
    29c4:	ff 91       	pop	r31
    29c6:	ef 91       	pop	r30
    29c8:	bf 91       	pop	r27
    29ca:	af 91       	pop	r26
    29cc:	9f 91       	pop	r25
    29ce:	8f 91       	pop	r24
    29d0:	2f 91       	pop	r18
    29d2:	0f 90       	pop	r0
    29d4:	0b be       	out	0x3b, r0	; 59
    29d6:	0f 90       	pop	r0
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	0f 90       	pop	r0
    29dc:	1f 90       	pop	r1
    29de:	18 95       	reti

000029e0 <usart_getchar>:
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	1f 92       	push	r1
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	be 01       	movw	r22, r28
    29ec:	6f 5f       	subi	r22, 0xFF	; 255
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <_com_serial_instance>
    29f4:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <_com_serial_instance+0x1>
    29f8:	7b dd       	rcall	.-1290   	; 0x24f0 <serial_getByte>
    29fa:	81 11       	cpse	r24, r1
    29fc:	f6 cf       	rjmp	.-20     	; 0x29ea <usart_getchar+0xa>
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0f 90       	pop	r0
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	08 95       	ret

00002a0a <usart_putchar>:
    2a0a:	68 2f       	mov	r22, r24
    2a0c:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <_com_serial_instance>
    2a10:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <_com_serial_instance+0x1>
    2a14:	42 dd       	rcall	.-1404   	; 0x249a <serial_sendByte>
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	08 95       	ret

00002a1c <stdio_initialise>:
    2a1c:	8f 92       	push	r8
    2a1e:	9f 92       	push	r9
    2a20:	af 92       	push	r10
    2a22:	cf 92       	push	r12
    2a24:	ef 92       	push	r14
    2a26:	0f 93       	push	r16
    2a28:	81 2c       	mov	r8, r1
    2a2a:	91 2c       	mov	r9, r1
    2a2c:	68 94       	set
    2a2e:	aa 24       	eor	r10, r10
    2a30:	a7 f8       	bld	r10, 7
    2a32:	68 94       	set
    2a34:	cc 24       	eor	r12, r12
    2a36:	c7 f8       	bld	r12, 7
    2a38:	e1 2c       	mov	r14, r1
    2a3a:	00 e0       	ldi	r16, 0x00	; 0
    2a3c:	23 e0       	ldi	r18, 0x03	; 3
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	51 ee       	ldi	r21, 0xE1	; 225
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	8d dc       	rcall	.-1766   	; 0x2362 <serial_create>
    2a48:	90 93 51 19 	sts	0x1951, r25	; 0x801951 <_com_serial_instance+0x1>
    2a4c:	80 93 50 19 	sts	0x1950, r24	; 0x801950 <_com_serial_instance>
    2a50:	e5 e6       	ldi	r30, 0x65	; 101
    2a52:	f9 e1       	ldi	r31, 0x19	; 25
    2a54:	83 e1       	ldi	r24, 0x13	; 19
    2a56:	92 e0       	ldi	r25, 0x02	; 2
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
    2a5c:	93 83       	std	Z+3, r25	; 0x03
    2a5e:	82 83       	std	Z+2, r24	; 0x02
    2a60:	0f 91       	pop	r16
    2a62:	ef 90       	pop	r14
    2a64:	cf 90       	pop	r12
    2a66:	af 90       	pop	r10
    2a68:	9f 90       	pop	r9
    2a6a:	8f 90       	pop	r8
    2a6c:	08 95       	ret

00002a6e <_initTwiInterface>:
    2a6e:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <_twiIsInitiated>
    2a72:	81 11       	cpse	r24, r1
    2a74:	0c c0       	rjmp	.+24     	; 0x2a8e <_initTwiInterface+0x20>
    2a76:	8c e0       	ldi	r24, 0x0C	; 12
    2a78:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2a82:	84 e0       	ldi	r24, 0x04	; 4
    2a84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <_twiIsInitiated>
    2a8e:	08 95       	ret

00002a90 <twiCreate>:
    2a90:	af 92       	push	r10
    2a92:	bf 92       	push	r11
    2a94:	cf 92       	push	r12
    2a96:	df 92       	push	r13
    2a98:	ef 92       	push	r14
    2a9a:	ff 92       	push	r15
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	a8 2e       	mov	r10, r24
    2aa6:	b6 2e       	mov	r11, r22
    2aa8:	69 01       	movw	r12, r18
    2aaa:	7a 01       	movw	r14, r20
    2aac:	84 e0       	ldi	r24, 0x04	; 4
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	c6 d3       	rcall	.+1932   	; 0x323e <malloc>
    2ab2:	ec 01       	movw	r28, r24
    2ab4:	89 2b       	or	r24, r25
    2ab6:	61 f1       	breq	.+88     	; 0x2b10 <twiCreate+0x80>
    2ab8:	a8 82       	st	Y, r10
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	b8 12       	cpse	r11, r24
    2abe:	12 c0       	rjmp	.+36     	; 0x2ae4 <twiCreate+0x54>
    2ac0:	c7 01       	movw	r24, r14
    2ac2:	b6 01       	movw	r22, r12
    2ac4:	20 ea       	ldi	r18, 0xA0	; 160
    2ac6:	36 e8       	ldi	r19, 0x86	; 134
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	74 d3       	rcall	.+1768   	; 0x31b6 <__udivmodsi4>
    2ace:	da 01       	movw	r26, r20
    2ad0:	c9 01       	movw	r24, r18
    2ad2:	40 97       	sbiw	r24, 0x10	; 16
    2ad4:	a1 09       	sbc	r26, r1
    2ad6:	b1 09       	sbc	r27, r1
    2ad8:	b6 95       	lsr	r27
    2ada:	a7 95       	ror	r26
    2adc:	97 95       	ror	r25
    2ade:	87 95       	ror	r24
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	11 c0       	rjmp	.+34     	; 0x2b06 <twiCreate+0x76>
    2ae4:	c7 01       	movw	r24, r14
    2ae6:	b6 01       	movw	r22, r12
    2ae8:	20 e8       	ldi	r18, 0x80	; 128
    2aea:	3a e1       	ldi	r19, 0x1A	; 26
    2aec:	46 e0       	ldi	r20, 0x06	; 6
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	62 d3       	rcall	.+1732   	; 0x31b6 <__udivmodsi4>
    2af2:	da 01       	movw	r26, r20
    2af4:	c9 01       	movw	r24, r18
    2af6:	40 97       	sbiw	r24, 0x10	; 16
    2af8:	a1 09       	sbc	r26, r1
    2afa:	b1 09       	sbc	r27, r1
    2afc:	b6 95       	lsr	r27
    2afe:	a7 95       	ror	r26
    2b00:	97 95       	ror	r25
    2b02:	87 95       	ror	r24
    2b04:	89 83       	std	Y+1, r24	; 0x01
    2b06:	1b 83       	std	Y+3, r17	; 0x03
    2b08:	0a 83       	std	Y+2, r16	; 0x02
    2b0a:	8c 2f       	mov	r24, r28
    2b0c:	9d 2f       	mov	r25, r29
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <twiCreate+0x84>
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	df 91       	pop	r29
    2b16:	cf 91       	pop	r28
    2b18:	1f 91       	pop	r17
    2b1a:	0f 91       	pop	r16
    2b1c:	ff 90       	pop	r15
    2b1e:	ef 90       	pop	r14
    2b20:	df 90       	pop	r13
    2b22:	cf 90       	pop	r12
    2b24:	bf 90       	pop	r11
    2b26:	af 90       	pop	r10
    2b28:	08 95       	ret

00002b2a <twiIsBusy>:
    2b2a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2b2e:	81 70       	andi	r24, 0x01	; 1
    2b30:	08 95       	ret

00002b32 <twiTransmit>:
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	d1 f1       	breq	.+116    	; 0x2bb4 <twiTransmit+0x82>
    2b40:	4a 30       	cpi	r20, 0x0A	; 10
    2b42:	d0 f5       	brcc	.+116    	; 0x2bb8 <twiTransmit+0x86>
    2b44:	f4 2e       	mov	r15, r20
    2b46:	8b 01       	movw	r16, r22
    2b48:	ec 01       	movw	r28, r24
    2b4a:	ef df       	rcall	.-34     	; 0x2b2a <twiIsBusy>
    2b4c:	81 11       	cpse	r24, r1
    2b4e:	36 c0       	rjmp	.+108    	; 0x2bbc <twiTransmit+0x8a>
    2b50:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <_twiCurrentHandler>
    2b54:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <_twiCurrentHandler+0x1>
    2b58:	c8 17       	cp	r28, r24
    2b5a:	d9 07       	cpc	r29, r25
    2b5c:	41 f0       	breq	.+16     	; 0x2b6e <twiTransmit+0x3c>
    2b5e:	87 df       	rcall	.-242    	; 0x2a6e <_initTwiInterface>
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2b66:	d0 93 54 19 	sts	0x1954, r29	; 0x801954 <_twiCurrentHandler+0x1>
    2b6a:	c0 93 53 19 	sts	0x1953, r28	; 0x801953 <_twiCurrentHandler>
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	8f 0d       	add	r24, r15
    2b72:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <_twiMessageLen>
    2b76:	88 81       	ld	r24, Y
    2b78:	88 0f       	add	r24, r24
    2b7a:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <_twiMessageBuffer>
    2b7e:	ff 20       	and	r15, r15
    2b80:	89 f0       	breq	.+34     	; 0x2ba4 <twiTransmit+0x72>
    2b82:	f8 01       	movw	r30, r16
    2b84:	a7 e5       	ldi	r26, 0x57	; 87
    2b86:	b9 e1       	ldi	r27, 0x19	; 25
    2b88:	4f ef       	ldi	r20, 0xFF	; 255
    2b8a:	4f 0d       	add	r20, r15
    2b8c:	64 2f       	mov	r22, r20
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	cb 01       	movw	r24, r22
    2b92:	01 96       	adiw	r24, 0x01	; 1
    2b94:	b8 01       	movw	r22, r16
    2b96:	68 0f       	add	r22, r24
    2b98:	79 1f       	adc	r23, r25
    2b9a:	81 91       	ld	r24, Z+
    2b9c:	8d 93       	st	X+, r24
    2b9e:	e6 17       	cp	r30, r22
    2ba0:	f7 07       	cpc	r31, r23
    2ba2:	d9 f7       	brne	.-10     	; 0x2b9a <twiTransmit+0x68>
    2ba4:	88 ef       	ldi	r24, 0xF8	; 248
    2ba6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2baa:	85 ea       	ldi	r24, 0xA5	; 165
    2bac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2bb0:	84 e0       	ldi	r24, 0x04	; 4
    2bb2:	05 c0       	rjmp	.+10     	; 0x2bbe <twiTransmit+0x8c>
    2bb4:	86 e0       	ldi	r24, 0x06	; 6
    2bb6:	03 c0       	rjmp	.+6      	; 0x2bbe <twiTransmit+0x8c>
    2bb8:	87 e0       	ldi	r24, 0x07	; 7
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <twiTransmit+0x8c>
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	ff 90       	pop	r15
    2bc8:	08 95       	ret

00002bca <twiReceive>:
    2bca:	1f 93       	push	r17
    2bcc:	cf 93       	push	r28
    2bce:	df 93       	push	r29
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	29 f1       	breq	.+74     	; 0x2c1e <twiReceive+0x54>
    2bd4:	6b 30       	cpi	r22, 0x0B	; 11
    2bd6:	28 f5       	brcc	.+74     	; 0x2c22 <twiReceive+0x58>
    2bd8:	16 2f       	mov	r17, r22
    2bda:	ec 01       	movw	r28, r24
    2bdc:	a6 df       	rcall	.-180    	; 0x2b2a <twiIsBusy>
    2bde:	81 11       	cpse	r24, r1
    2be0:	22 c0       	rjmp	.+68     	; 0x2c26 <twiReceive+0x5c>
    2be2:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <_twiCurrentHandler>
    2be6:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <_twiCurrentHandler+0x1>
    2bea:	c8 17       	cp	r28, r24
    2bec:	d9 07       	cpc	r29, r25
    2bee:	41 f0       	breq	.+16     	; 0x2c00 <twiReceive+0x36>
    2bf0:	3e df       	rcall	.-388    	; 0x2a6e <_initTwiInterface>
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2bf8:	d0 93 54 19 	sts	0x1954, r29	; 0x801954 <_twiCurrentHandler+0x1>
    2bfc:	c0 93 53 19 	sts	0x1953, r28	; 0x801953 <_twiCurrentHandler>
    2c00:	10 93 55 19 	sts	0x1955, r17	; 0x801955 <_twiMessageLen>
    2c04:	88 81       	ld	r24, Y
    2c06:	88 0f       	add	r24, r24
    2c08:	81 60       	ori	r24, 0x01	; 1
    2c0a:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <_twiMessageBuffer>
    2c0e:	88 ef       	ldi	r24, 0xF8	; 248
    2c10:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2c14:	85 ea       	ldi	r24, 0xA5	; 165
    2c16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2c1a:	85 e0       	ldi	r24, 0x05	; 5
    2c1c:	05 c0       	rjmp	.+10     	; 0x2c28 <twiReceive+0x5e>
    2c1e:	86 e0       	ldi	r24, 0x06	; 6
    2c20:	03 c0       	rjmp	.+6      	; 0x2c28 <twiReceive+0x5e>
    2c22:	87 e0       	ldi	r24, 0x07	; 7
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <twiReceive+0x5e>
    2c26:	82 e0       	ldi	r24, 0x02	; 2
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	08 95       	ret

00002c30 <__vector_39>:
    2c30:	1f 92       	push	r1
    2c32:	0f 92       	push	r0
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	0f 92       	push	r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	0b b6       	in	r0, 0x3b	; 59
    2c3c:	0f 92       	push	r0
    2c3e:	2f 93       	push	r18
    2c40:	3f 93       	push	r19
    2c42:	4f 93       	push	r20
    2c44:	5f 93       	push	r21
    2c46:	6f 93       	push	r22
    2c48:	7f 93       	push	r23
    2c4a:	8f 93       	push	r24
    2c4c:	9f 93       	push	r25
    2c4e:	af 93       	push	r26
    2c50:	bf 93       	push	r27
    2c52:	ef 93       	push	r30
    2c54:	ff 93       	push	r31
    2c56:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2c5a:	8e 2f       	mov	r24, r30
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	fc 01       	movw	r30, r24
    2c60:	38 97       	sbiw	r30, 0x08	; 8
    2c62:	e1 35       	cpi	r30, 0x51	; 81
    2c64:	f1 05       	cpc	r31, r1
    2c66:	08 f0       	brcs	.+2      	; 0x2c6a <__vector_39+0x3a>
    2c68:	75 c0       	rjmp	.+234    	; 0x2d54 <__vector_39+0x124>
    2c6a:	88 27       	eor	r24, r24
    2c6c:	e4 58       	subi	r30, 0x84	; 132
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	8f 4f       	sbci	r24, 0xFF	; 255
    2c72:	c3 c2       	rjmp	.+1414   	; 0x31fa <__tablejump2__>
    2c74:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <_index.1885>
    2c78:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <_index.1885>
    2c7c:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <_twiMessageLen>
    2c80:	e8 17       	cp	r30, r24
    2c82:	70 f4       	brcc	.+28     	; 0x2ca0 <__vector_39+0x70>
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	8e 0f       	add	r24, r30
    2c88:	80 93 52 19 	sts	0x1952, r24	; 0x801952 <_index.1885>
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	ea 5a       	subi	r30, 0xAA	; 170
    2c90:	f6 4e       	sbci	r31, 0xE6	; 230
    2c92:	80 81       	ld	r24, Z
    2c94:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2c98:	85 e8       	ldi	r24, 0x85	; 133
    2c9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2c9e:	72 c0       	rjmp	.+228    	; 0x2d84 <__vector_39+0x154>
    2ca0:	84 e9       	ldi	r24, 0x94	; 148
    2ca2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2ca6:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <_twiCurrentHandler>
    2caa:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <_twiCurrentHandler+0x1>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	12 96       	adiw	r26, 0x02	; 2
    2cb2:	ed 91       	ld	r30, X+
    2cb4:	fc 91       	ld	r31, X
    2cb6:	13 97       	sbiw	r26, 0x03	; 3
    2cb8:	30 97       	sbiw	r30, 0x00	; 0
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <__vector_39+0x8e>
    2cbc:	63 c0       	rjmp	.+198    	; 0x2d84 <__vector_39+0x154>
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	64 e0       	ldi	r22, 0x04	; 4
    2cc6:	19 95       	eicall
    2cc8:	5d c0       	rjmp	.+186    	; 0x2d84 <__vector_39+0x154>
    2cca:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <_index.1885>
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	8e 0f       	add	r24, r30
    2cd2:	80 93 52 19 	sts	0x1952, r24	; 0x801952 <_index.1885>
    2cd6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	ea 5a       	subi	r30, 0xAA	; 170
    2cde:	f6 4e       	sbci	r31, 0xE6	; 230
    2ce0:	80 83       	st	Z, r24
    2ce2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2ce6:	80 34       	cpi	r24, 0x40	; 64
    2ce8:	11 f4       	brne	.+4      	; 0x2cee <__vector_39+0xbe>
    2cea:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <_index.1885>
    2cee:	20 91 52 19 	lds	r18, 0x1952	; 0x801952 <_index.1885>
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <_twiMessageLen>
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	28 17       	cp	r18, r24
    2cfe:	39 07       	cpc	r19, r25
    2d00:	24 f4       	brge	.+8      	; 0x2d0a <__vector_39+0xda>
    2d02:	85 ec       	ldi	r24, 0xC5	; 197
    2d04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d08:	3d c0       	rjmp	.+122    	; 0x2d84 <__vector_39+0x154>
    2d0a:	85 e8       	ldi	r24, 0x85	; 133
    2d0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d10:	39 c0       	rjmp	.+114    	; 0x2d84 <__vector_39+0x154>
    2d12:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2d16:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <_index.1885>
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	ea 5a       	subi	r30, 0xAA	; 170
    2d1e:	f6 4e       	sbci	r31, 0xE6	; 230
    2d20:	80 83       	st	Z, r24
    2d22:	84 e9       	ldi	r24, 0x94	; 148
    2d24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d28:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <_twiCurrentHandler>
    2d2c:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <_twiCurrentHandler+0x1>
    2d30:	dc 01       	movw	r26, r24
    2d32:	12 96       	adiw	r26, 0x02	; 2
    2d34:	ed 91       	ld	r30, X+
    2d36:	fc 91       	ld	r31, X
    2d38:	13 97       	sbiw	r26, 0x03	; 3
    2d3a:	30 97       	sbiw	r30, 0x00	; 0
    2d3c:	19 f1       	breq	.+70     	; 0x2d84 <__vector_39+0x154>
    2d3e:	20 91 55 19 	lds	r18, 0x1955	; 0x801955 <_twiMessageLen>
    2d42:	46 e5       	ldi	r20, 0x56	; 86
    2d44:	59 e1       	ldi	r21, 0x19	; 25
    2d46:	65 e0       	ldi	r22, 0x05	; 5
    2d48:	19 95       	eicall
    2d4a:	1c c0       	rjmp	.+56     	; 0x2d84 <__vector_39+0x154>
    2d4c:	85 ea       	ldi	r24, 0xA5	; 165
    2d4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d52:	18 c0       	rjmp	.+48     	; 0x2d84 <__vector_39+0x154>
    2d54:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2d58:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2d5c:	84 e0       	ldi	r24, 0x04	; 4
    2d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d62:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <_twiCurrentHandler>
    2d66:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <_twiCurrentHandler+0x1>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	12 96       	adiw	r26, 0x02	; 2
    2d6e:	ed 91       	ld	r30, X+
    2d70:	fc 91       	ld	r31, X
    2d72:	13 97       	sbiw	r26, 0x03	; 3
    2d74:	30 97       	sbiw	r30, 0x00	; 0
    2d76:	31 f0       	breq	.+12     	; 0x2d84 <__vector_39+0x154>
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    2d82:	19 95       	eicall
    2d84:	ff 91       	pop	r31
    2d86:	ef 91       	pop	r30
    2d88:	bf 91       	pop	r27
    2d8a:	af 91       	pop	r26
    2d8c:	9f 91       	pop	r25
    2d8e:	8f 91       	pop	r24
    2d90:	7f 91       	pop	r23
    2d92:	6f 91       	pop	r22
    2d94:	5f 91       	pop	r21
    2d96:	4f 91       	pop	r20
    2d98:	3f 91       	pop	r19
    2d9a:	2f 91       	pop	r18
    2d9c:	0f 90       	pop	r0
    2d9e:	0b be       	out	0x3b, r0	; 59
    2da0:	0f 90       	pop	r0
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	0f 90       	pop	r0
    2da6:	1f 90       	pop	r1
    2da8:	18 95       	reti

00002daa <fifo_init>:
    2daa:	fc 01       	movw	r30, r24
    2dac:	41 11       	cpse	r20, r1
    2dae:	01 c0       	rjmp	.+2      	; 0x2db2 <fifo_init+0x8>
    2db0:	67 d3       	rcall	.+1742   	; 0x3480 <abort>
    2db2:	84 2f       	mov	r24, r20
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	9c 01       	movw	r18, r24
    2db8:	21 50       	subi	r18, 0x01	; 1
    2dba:	31 09       	sbc	r19, r1
    2dbc:	82 23       	and	r24, r18
    2dbe:	93 23       	and	r25, r19
    2dc0:	89 2b       	or	r24, r25
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <fifo_init+0x1c>
    2dc4:	5d d3       	rcall	.+1722   	; 0x3480 <abort>
    2dc6:	41 38       	cpi	r20, 0x81	; 129
    2dc8:	08 f0       	brcs	.+2      	; 0x2dcc <fifo_init+0x22>
    2dca:	5a d3       	rcall	.+1716   	; 0x3480 <abort>
    2dcc:	12 82       	std	Z+2, r1	; 0x02
    2dce:	13 82       	std	Z+3, r1	; 0x03
    2dd0:	44 83       	std	Z+4, r20	; 0x04
    2dd2:	44 0f       	add	r20, r20
    2dd4:	41 50       	subi	r20, 0x01	; 1
    2dd6:	45 83       	std	Z+5, r20	; 0x05
    2dd8:	71 83       	std	Z+1, r23	; 0x01
    2dda:	60 83       	st	Z, r22
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	08 95       	ret

00002de2 <__subsf3>:
    2de2:	50 58       	subi	r21, 0x80	; 128

00002de4 <__addsf3>:
    2de4:	bb 27       	eor	r27, r27
    2de6:	aa 27       	eor	r26, r26
    2de8:	0e d0       	rcall	.+28     	; 0x2e06 <__addsf3x>
    2dea:	48 c1       	rjmp	.+656    	; 0x307c <__fp_round>
    2dec:	39 d1       	rcall	.+626    	; 0x3060 <__fp_pscA>
    2dee:	30 f0       	brcs	.+12     	; 0x2dfc <__addsf3+0x18>
    2df0:	3e d1       	rcall	.+636    	; 0x306e <__fp_pscB>
    2df2:	20 f0       	brcs	.+8      	; 0x2dfc <__addsf3+0x18>
    2df4:	31 f4       	brne	.+12     	; 0x2e02 <__addsf3+0x1e>
    2df6:	9f 3f       	cpi	r25, 0xFF	; 255
    2df8:	11 f4       	brne	.+4      	; 0x2dfe <__addsf3+0x1a>
    2dfa:	1e f4       	brtc	.+6      	; 0x2e02 <__addsf3+0x1e>
    2dfc:	2e c1       	rjmp	.+604    	; 0x305a <__fp_nan>
    2dfe:	0e f4       	brtc	.+2      	; 0x2e02 <__addsf3+0x1e>
    2e00:	e0 95       	com	r30
    2e02:	e7 fb       	bst	r30, 7
    2e04:	24 c1       	rjmp	.+584    	; 0x304e <__fp_inf>

00002e06 <__addsf3x>:
    2e06:	e9 2f       	mov	r30, r25
    2e08:	4a d1       	rcall	.+660    	; 0x309e <__fp_split3>
    2e0a:	80 f3       	brcs	.-32     	; 0x2dec <__addsf3+0x8>
    2e0c:	ba 17       	cp	r27, r26
    2e0e:	62 07       	cpc	r22, r18
    2e10:	73 07       	cpc	r23, r19
    2e12:	84 07       	cpc	r24, r20
    2e14:	95 07       	cpc	r25, r21
    2e16:	18 f0       	brcs	.+6      	; 0x2e1e <__addsf3x+0x18>
    2e18:	71 f4       	brne	.+28     	; 0x2e36 <__addsf3x+0x30>
    2e1a:	9e f5       	brtc	.+102    	; 0x2e82 <__addsf3x+0x7c>
    2e1c:	62 c1       	rjmp	.+708    	; 0x30e2 <__fp_zero>
    2e1e:	0e f4       	brtc	.+2      	; 0x2e22 <__addsf3x+0x1c>
    2e20:	e0 95       	com	r30
    2e22:	0b 2e       	mov	r0, r27
    2e24:	ba 2f       	mov	r27, r26
    2e26:	a0 2d       	mov	r26, r0
    2e28:	0b 01       	movw	r0, r22
    2e2a:	b9 01       	movw	r22, r18
    2e2c:	90 01       	movw	r18, r0
    2e2e:	0c 01       	movw	r0, r24
    2e30:	ca 01       	movw	r24, r20
    2e32:	a0 01       	movw	r20, r0
    2e34:	11 24       	eor	r1, r1
    2e36:	ff 27       	eor	r31, r31
    2e38:	59 1b       	sub	r21, r25
    2e3a:	99 f0       	breq	.+38     	; 0x2e62 <__addsf3x+0x5c>
    2e3c:	59 3f       	cpi	r21, 0xF9	; 249
    2e3e:	50 f4       	brcc	.+20     	; 0x2e54 <__addsf3x+0x4e>
    2e40:	50 3e       	cpi	r21, 0xE0	; 224
    2e42:	68 f1       	brcs	.+90     	; 0x2e9e <__addsf3x+0x98>
    2e44:	1a 16       	cp	r1, r26
    2e46:	f0 40       	sbci	r31, 0x00	; 0
    2e48:	a2 2f       	mov	r26, r18
    2e4a:	23 2f       	mov	r18, r19
    2e4c:	34 2f       	mov	r19, r20
    2e4e:	44 27       	eor	r20, r20
    2e50:	58 5f       	subi	r21, 0xF8	; 248
    2e52:	f3 cf       	rjmp	.-26     	; 0x2e3a <__addsf3x+0x34>
    2e54:	46 95       	lsr	r20
    2e56:	37 95       	ror	r19
    2e58:	27 95       	ror	r18
    2e5a:	a7 95       	ror	r26
    2e5c:	f0 40       	sbci	r31, 0x00	; 0
    2e5e:	53 95       	inc	r21
    2e60:	c9 f7       	brne	.-14     	; 0x2e54 <__addsf3x+0x4e>
    2e62:	7e f4       	brtc	.+30     	; 0x2e82 <__addsf3x+0x7c>
    2e64:	1f 16       	cp	r1, r31
    2e66:	ba 0b       	sbc	r27, r26
    2e68:	62 0b       	sbc	r22, r18
    2e6a:	73 0b       	sbc	r23, r19
    2e6c:	84 0b       	sbc	r24, r20
    2e6e:	ba f0       	brmi	.+46     	; 0x2e9e <__addsf3x+0x98>
    2e70:	91 50       	subi	r25, 0x01	; 1
    2e72:	a1 f0       	breq	.+40     	; 0x2e9c <__addsf3x+0x96>
    2e74:	ff 0f       	add	r31, r31
    2e76:	bb 1f       	adc	r27, r27
    2e78:	66 1f       	adc	r22, r22
    2e7a:	77 1f       	adc	r23, r23
    2e7c:	88 1f       	adc	r24, r24
    2e7e:	c2 f7       	brpl	.-16     	; 0x2e70 <__addsf3x+0x6a>
    2e80:	0e c0       	rjmp	.+28     	; 0x2e9e <__addsf3x+0x98>
    2e82:	ba 0f       	add	r27, r26
    2e84:	62 1f       	adc	r22, r18
    2e86:	73 1f       	adc	r23, r19
    2e88:	84 1f       	adc	r24, r20
    2e8a:	48 f4       	brcc	.+18     	; 0x2e9e <__addsf3x+0x98>
    2e8c:	87 95       	ror	r24
    2e8e:	77 95       	ror	r23
    2e90:	67 95       	ror	r22
    2e92:	b7 95       	ror	r27
    2e94:	f7 95       	ror	r31
    2e96:	9e 3f       	cpi	r25, 0xFE	; 254
    2e98:	08 f0       	brcs	.+2      	; 0x2e9c <__addsf3x+0x96>
    2e9a:	b3 cf       	rjmp	.-154    	; 0x2e02 <__addsf3+0x1e>
    2e9c:	93 95       	inc	r25
    2e9e:	88 0f       	add	r24, r24
    2ea0:	08 f0       	brcs	.+2      	; 0x2ea4 <__addsf3x+0x9e>
    2ea2:	99 27       	eor	r25, r25
    2ea4:	ee 0f       	add	r30, r30
    2ea6:	97 95       	ror	r25
    2ea8:	87 95       	ror	r24
    2eaa:	08 95       	ret

00002eac <__divsf3>:
    2eac:	0c d0       	rcall	.+24     	; 0x2ec6 <__divsf3x>
    2eae:	e6 c0       	rjmp	.+460    	; 0x307c <__fp_round>
    2eb0:	de d0       	rcall	.+444    	; 0x306e <__fp_pscB>
    2eb2:	40 f0       	brcs	.+16     	; 0x2ec4 <__divsf3+0x18>
    2eb4:	d5 d0       	rcall	.+426    	; 0x3060 <__fp_pscA>
    2eb6:	30 f0       	brcs	.+12     	; 0x2ec4 <__divsf3+0x18>
    2eb8:	21 f4       	brne	.+8      	; 0x2ec2 <__divsf3+0x16>
    2eba:	5f 3f       	cpi	r21, 0xFF	; 255
    2ebc:	19 f0       	breq	.+6      	; 0x2ec4 <__divsf3+0x18>
    2ebe:	c7 c0       	rjmp	.+398    	; 0x304e <__fp_inf>
    2ec0:	51 11       	cpse	r21, r1
    2ec2:	10 c1       	rjmp	.+544    	; 0x30e4 <__fp_szero>
    2ec4:	ca c0       	rjmp	.+404    	; 0x305a <__fp_nan>

00002ec6 <__divsf3x>:
    2ec6:	eb d0       	rcall	.+470    	; 0x309e <__fp_split3>
    2ec8:	98 f3       	brcs	.-26     	; 0x2eb0 <__divsf3+0x4>

00002eca <__divsf3_pse>:
    2eca:	99 23       	and	r25, r25
    2ecc:	c9 f3       	breq	.-14     	; 0x2ec0 <__divsf3+0x14>
    2ece:	55 23       	and	r21, r21
    2ed0:	b1 f3       	breq	.-20     	; 0x2ebe <__divsf3+0x12>
    2ed2:	95 1b       	sub	r25, r21
    2ed4:	55 0b       	sbc	r21, r21
    2ed6:	bb 27       	eor	r27, r27
    2ed8:	aa 27       	eor	r26, r26
    2eda:	62 17       	cp	r22, r18
    2edc:	73 07       	cpc	r23, r19
    2ede:	84 07       	cpc	r24, r20
    2ee0:	38 f0       	brcs	.+14     	; 0x2ef0 <__divsf3_pse+0x26>
    2ee2:	9f 5f       	subi	r25, 0xFF	; 255
    2ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee6:	22 0f       	add	r18, r18
    2ee8:	33 1f       	adc	r19, r19
    2eea:	44 1f       	adc	r20, r20
    2eec:	aa 1f       	adc	r26, r26
    2eee:	a9 f3       	breq	.-22     	; 0x2eda <__divsf3_pse+0x10>
    2ef0:	33 d0       	rcall	.+102    	; 0x2f58 <__divsf3_pse+0x8e>
    2ef2:	0e 2e       	mov	r0, r30
    2ef4:	3a f0       	brmi	.+14     	; 0x2f04 <__divsf3_pse+0x3a>
    2ef6:	e0 e8       	ldi	r30, 0x80	; 128
    2ef8:	30 d0       	rcall	.+96     	; 0x2f5a <__divsf3_pse+0x90>
    2efa:	91 50       	subi	r25, 0x01	; 1
    2efc:	50 40       	sbci	r21, 0x00	; 0
    2efe:	e6 95       	lsr	r30
    2f00:	00 1c       	adc	r0, r0
    2f02:	ca f7       	brpl	.-14     	; 0x2ef6 <__divsf3_pse+0x2c>
    2f04:	29 d0       	rcall	.+82     	; 0x2f58 <__divsf3_pse+0x8e>
    2f06:	fe 2f       	mov	r31, r30
    2f08:	27 d0       	rcall	.+78     	; 0x2f58 <__divsf3_pse+0x8e>
    2f0a:	66 0f       	add	r22, r22
    2f0c:	77 1f       	adc	r23, r23
    2f0e:	88 1f       	adc	r24, r24
    2f10:	bb 1f       	adc	r27, r27
    2f12:	26 17       	cp	r18, r22
    2f14:	37 07       	cpc	r19, r23
    2f16:	48 07       	cpc	r20, r24
    2f18:	ab 07       	cpc	r26, r27
    2f1a:	b0 e8       	ldi	r27, 0x80	; 128
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <__divsf3_pse+0x56>
    2f1e:	bb 0b       	sbc	r27, r27
    2f20:	80 2d       	mov	r24, r0
    2f22:	bf 01       	movw	r22, r30
    2f24:	ff 27       	eor	r31, r31
    2f26:	93 58       	subi	r25, 0x83	; 131
    2f28:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2a:	2a f0       	brmi	.+10     	; 0x2f36 <__divsf3_pse+0x6c>
    2f2c:	9e 3f       	cpi	r25, 0xFE	; 254
    2f2e:	51 05       	cpc	r21, r1
    2f30:	68 f0       	brcs	.+26     	; 0x2f4c <__divsf3_pse+0x82>
    2f32:	8d c0       	rjmp	.+282    	; 0x304e <__fp_inf>
    2f34:	d7 c0       	rjmp	.+430    	; 0x30e4 <__fp_szero>
    2f36:	5f 3f       	cpi	r21, 0xFF	; 255
    2f38:	ec f3       	brlt	.-6      	; 0x2f34 <__divsf3_pse+0x6a>
    2f3a:	98 3e       	cpi	r25, 0xE8	; 232
    2f3c:	dc f3       	brlt	.-10     	; 0x2f34 <__divsf3_pse+0x6a>
    2f3e:	86 95       	lsr	r24
    2f40:	77 95       	ror	r23
    2f42:	67 95       	ror	r22
    2f44:	b7 95       	ror	r27
    2f46:	f7 95       	ror	r31
    2f48:	9f 5f       	subi	r25, 0xFF	; 255
    2f4a:	c9 f7       	brne	.-14     	; 0x2f3e <__divsf3_pse+0x74>
    2f4c:	88 0f       	add	r24, r24
    2f4e:	91 1d       	adc	r25, r1
    2f50:	96 95       	lsr	r25
    2f52:	87 95       	ror	r24
    2f54:	97 f9       	bld	r25, 7
    2f56:	08 95       	ret
    2f58:	e1 e0       	ldi	r30, 0x01	; 1
    2f5a:	66 0f       	add	r22, r22
    2f5c:	77 1f       	adc	r23, r23
    2f5e:	88 1f       	adc	r24, r24
    2f60:	bb 1f       	adc	r27, r27
    2f62:	62 17       	cp	r22, r18
    2f64:	73 07       	cpc	r23, r19
    2f66:	84 07       	cpc	r24, r20
    2f68:	ba 07       	cpc	r27, r26
    2f6a:	20 f0       	brcs	.+8      	; 0x2f74 <__divsf3_pse+0xaa>
    2f6c:	62 1b       	sub	r22, r18
    2f6e:	73 0b       	sbc	r23, r19
    2f70:	84 0b       	sbc	r24, r20
    2f72:	ba 0b       	sbc	r27, r26
    2f74:	ee 1f       	adc	r30, r30
    2f76:	88 f7       	brcc	.-30     	; 0x2f5a <__divsf3_pse+0x90>
    2f78:	e0 95       	com	r30
    2f7a:	08 95       	ret

00002f7c <__fixunssfsi>:
    2f7c:	98 d0       	rcall	.+304    	; 0x30ae <__fp_splitA>
    2f7e:	88 f0       	brcs	.+34     	; 0x2fa2 <__fixunssfsi+0x26>
    2f80:	9f 57       	subi	r25, 0x7F	; 127
    2f82:	90 f0       	brcs	.+36     	; 0x2fa8 <__fixunssfsi+0x2c>
    2f84:	b9 2f       	mov	r27, r25
    2f86:	99 27       	eor	r25, r25
    2f88:	b7 51       	subi	r27, 0x17	; 23
    2f8a:	a0 f0       	brcs	.+40     	; 0x2fb4 <__fixunssfsi+0x38>
    2f8c:	d1 f0       	breq	.+52     	; 0x2fc2 <__fixunssfsi+0x46>
    2f8e:	66 0f       	add	r22, r22
    2f90:	77 1f       	adc	r23, r23
    2f92:	88 1f       	adc	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	1a f0       	brmi	.+6      	; 0x2f9e <__fixunssfsi+0x22>
    2f98:	ba 95       	dec	r27
    2f9a:	c9 f7       	brne	.-14     	; 0x2f8e <__fixunssfsi+0x12>
    2f9c:	12 c0       	rjmp	.+36     	; 0x2fc2 <__fixunssfsi+0x46>
    2f9e:	b1 30       	cpi	r27, 0x01	; 1
    2fa0:	81 f0       	breq	.+32     	; 0x2fc2 <__fixunssfsi+0x46>
    2fa2:	9f d0       	rcall	.+318    	; 0x30e2 <__fp_zero>
    2fa4:	b1 e0       	ldi	r27, 0x01	; 1
    2fa6:	08 95       	ret
    2fa8:	9c c0       	rjmp	.+312    	; 0x30e2 <__fp_zero>
    2faa:	67 2f       	mov	r22, r23
    2fac:	78 2f       	mov	r23, r24
    2fae:	88 27       	eor	r24, r24
    2fb0:	b8 5f       	subi	r27, 0xF8	; 248
    2fb2:	39 f0       	breq	.+14     	; 0x2fc2 <__fixunssfsi+0x46>
    2fb4:	b9 3f       	cpi	r27, 0xF9	; 249
    2fb6:	cc f3       	brlt	.-14     	; 0x2faa <__fixunssfsi+0x2e>
    2fb8:	86 95       	lsr	r24
    2fba:	77 95       	ror	r23
    2fbc:	67 95       	ror	r22
    2fbe:	b3 95       	inc	r27
    2fc0:	d9 f7       	brne	.-10     	; 0x2fb8 <__fixunssfsi+0x3c>
    2fc2:	3e f4       	brtc	.+14     	; 0x2fd2 <__fixunssfsi+0x56>
    2fc4:	90 95       	com	r25
    2fc6:	80 95       	com	r24
    2fc8:	70 95       	com	r23
    2fca:	61 95       	neg	r22
    2fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fce:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd2:	08 95       	ret

00002fd4 <__floatunsisf>:
    2fd4:	e8 94       	clt
    2fd6:	09 c0       	rjmp	.+18     	; 0x2fea <__floatsisf+0x12>

00002fd8 <__floatsisf>:
    2fd8:	97 fb       	bst	r25, 7
    2fda:	3e f4       	brtc	.+14     	; 0x2fea <__floatsisf+0x12>
    2fdc:	90 95       	com	r25
    2fde:	80 95       	com	r24
    2fe0:	70 95       	com	r23
    2fe2:	61 95       	neg	r22
    2fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	99 23       	and	r25, r25
    2fec:	a9 f0       	breq	.+42     	; 0x3018 <__floatsisf+0x40>
    2fee:	f9 2f       	mov	r31, r25
    2ff0:	96 e9       	ldi	r25, 0x96	; 150
    2ff2:	bb 27       	eor	r27, r27
    2ff4:	93 95       	inc	r25
    2ff6:	f6 95       	lsr	r31
    2ff8:	87 95       	ror	r24
    2ffa:	77 95       	ror	r23
    2ffc:	67 95       	ror	r22
    2ffe:	b7 95       	ror	r27
    3000:	f1 11       	cpse	r31, r1
    3002:	f8 cf       	rjmp	.-16     	; 0x2ff4 <__floatsisf+0x1c>
    3004:	fa f4       	brpl	.+62     	; 0x3044 <__floatsisf+0x6c>
    3006:	bb 0f       	add	r27, r27
    3008:	11 f4       	brne	.+4      	; 0x300e <__floatsisf+0x36>
    300a:	60 ff       	sbrs	r22, 0
    300c:	1b c0       	rjmp	.+54     	; 0x3044 <__floatsisf+0x6c>
    300e:	6f 5f       	subi	r22, 0xFF	; 255
    3010:	7f 4f       	sbci	r23, 0xFF	; 255
    3012:	8f 4f       	sbci	r24, 0xFF	; 255
    3014:	9f 4f       	sbci	r25, 0xFF	; 255
    3016:	16 c0       	rjmp	.+44     	; 0x3044 <__floatsisf+0x6c>
    3018:	88 23       	and	r24, r24
    301a:	11 f0       	breq	.+4      	; 0x3020 <__floatsisf+0x48>
    301c:	96 e9       	ldi	r25, 0x96	; 150
    301e:	11 c0       	rjmp	.+34     	; 0x3042 <__floatsisf+0x6a>
    3020:	77 23       	and	r23, r23
    3022:	21 f0       	breq	.+8      	; 0x302c <__floatsisf+0x54>
    3024:	9e e8       	ldi	r25, 0x8E	; 142
    3026:	87 2f       	mov	r24, r23
    3028:	76 2f       	mov	r23, r22
    302a:	05 c0       	rjmp	.+10     	; 0x3036 <__floatsisf+0x5e>
    302c:	66 23       	and	r22, r22
    302e:	71 f0       	breq	.+28     	; 0x304c <__floatsisf+0x74>
    3030:	96 e8       	ldi	r25, 0x86	; 134
    3032:	86 2f       	mov	r24, r22
    3034:	70 e0       	ldi	r23, 0x00	; 0
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	2a f0       	brmi	.+10     	; 0x3044 <__floatsisf+0x6c>
    303a:	9a 95       	dec	r25
    303c:	66 0f       	add	r22, r22
    303e:	77 1f       	adc	r23, r23
    3040:	88 1f       	adc	r24, r24
    3042:	da f7       	brpl	.-10     	; 0x303a <__floatsisf+0x62>
    3044:	88 0f       	add	r24, r24
    3046:	96 95       	lsr	r25
    3048:	87 95       	ror	r24
    304a:	97 f9       	bld	r25, 7
    304c:	08 95       	ret

0000304e <__fp_inf>:
    304e:	97 f9       	bld	r25, 7
    3050:	9f 67       	ori	r25, 0x7F	; 127
    3052:	80 e8       	ldi	r24, 0x80	; 128
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	08 95       	ret

0000305a <__fp_nan>:
    305a:	9f ef       	ldi	r25, 0xFF	; 255
    305c:	80 ec       	ldi	r24, 0xC0	; 192
    305e:	08 95       	ret

00003060 <__fp_pscA>:
    3060:	00 24       	eor	r0, r0
    3062:	0a 94       	dec	r0
    3064:	16 16       	cp	r1, r22
    3066:	17 06       	cpc	r1, r23
    3068:	18 06       	cpc	r1, r24
    306a:	09 06       	cpc	r0, r25
    306c:	08 95       	ret

0000306e <__fp_pscB>:
    306e:	00 24       	eor	r0, r0
    3070:	0a 94       	dec	r0
    3072:	12 16       	cp	r1, r18
    3074:	13 06       	cpc	r1, r19
    3076:	14 06       	cpc	r1, r20
    3078:	05 06       	cpc	r0, r21
    307a:	08 95       	ret

0000307c <__fp_round>:
    307c:	09 2e       	mov	r0, r25
    307e:	03 94       	inc	r0
    3080:	00 0c       	add	r0, r0
    3082:	11 f4       	brne	.+4      	; 0x3088 <__fp_round+0xc>
    3084:	88 23       	and	r24, r24
    3086:	52 f0       	brmi	.+20     	; 0x309c <__fp_round+0x20>
    3088:	bb 0f       	add	r27, r27
    308a:	40 f4       	brcc	.+16     	; 0x309c <__fp_round+0x20>
    308c:	bf 2b       	or	r27, r31
    308e:	11 f4       	brne	.+4      	; 0x3094 <__fp_round+0x18>
    3090:	60 ff       	sbrs	r22, 0
    3092:	04 c0       	rjmp	.+8      	; 0x309c <__fp_round+0x20>
    3094:	6f 5f       	subi	r22, 0xFF	; 255
    3096:	7f 4f       	sbci	r23, 0xFF	; 255
    3098:	8f 4f       	sbci	r24, 0xFF	; 255
    309a:	9f 4f       	sbci	r25, 0xFF	; 255
    309c:	08 95       	ret

0000309e <__fp_split3>:
    309e:	57 fd       	sbrc	r21, 7
    30a0:	90 58       	subi	r25, 0x80	; 128
    30a2:	44 0f       	add	r20, r20
    30a4:	55 1f       	adc	r21, r21
    30a6:	59 f0       	breq	.+22     	; 0x30be <__fp_splitA+0x10>
    30a8:	5f 3f       	cpi	r21, 0xFF	; 255
    30aa:	71 f0       	breq	.+28     	; 0x30c8 <__fp_splitA+0x1a>
    30ac:	47 95       	ror	r20

000030ae <__fp_splitA>:
    30ae:	88 0f       	add	r24, r24
    30b0:	97 fb       	bst	r25, 7
    30b2:	99 1f       	adc	r25, r25
    30b4:	61 f0       	breq	.+24     	; 0x30ce <__fp_splitA+0x20>
    30b6:	9f 3f       	cpi	r25, 0xFF	; 255
    30b8:	79 f0       	breq	.+30     	; 0x30d8 <__fp_splitA+0x2a>
    30ba:	87 95       	ror	r24
    30bc:	08 95       	ret
    30be:	12 16       	cp	r1, r18
    30c0:	13 06       	cpc	r1, r19
    30c2:	14 06       	cpc	r1, r20
    30c4:	55 1f       	adc	r21, r21
    30c6:	f2 cf       	rjmp	.-28     	; 0x30ac <__fp_split3+0xe>
    30c8:	46 95       	lsr	r20
    30ca:	f1 df       	rcall	.-30     	; 0x30ae <__fp_splitA>
    30cc:	08 c0       	rjmp	.+16     	; 0x30de <__fp_splitA+0x30>
    30ce:	16 16       	cp	r1, r22
    30d0:	17 06       	cpc	r1, r23
    30d2:	18 06       	cpc	r1, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	f1 cf       	rjmp	.-30     	; 0x30ba <__fp_splitA+0xc>
    30d8:	86 95       	lsr	r24
    30da:	71 05       	cpc	r23, r1
    30dc:	61 05       	cpc	r22, r1
    30de:	08 94       	sec
    30e0:	08 95       	ret

000030e2 <__fp_zero>:
    30e2:	e8 94       	clt

000030e4 <__fp_szero>:
    30e4:	bb 27       	eor	r27, r27
    30e6:	66 27       	eor	r22, r22
    30e8:	77 27       	eor	r23, r23
    30ea:	cb 01       	movw	r24, r22
    30ec:	97 f9       	bld	r25, 7
    30ee:	08 95       	ret

000030f0 <__mulsf3>:
    30f0:	0b d0       	rcall	.+22     	; 0x3108 <__mulsf3x>
    30f2:	c4 cf       	rjmp	.-120    	; 0x307c <__fp_round>
    30f4:	b5 df       	rcall	.-150    	; 0x3060 <__fp_pscA>
    30f6:	28 f0       	brcs	.+10     	; 0x3102 <__mulsf3+0x12>
    30f8:	ba df       	rcall	.-140    	; 0x306e <__fp_pscB>
    30fa:	18 f0       	brcs	.+6      	; 0x3102 <__mulsf3+0x12>
    30fc:	95 23       	and	r25, r21
    30fe:	09 f0       	breq	.+2      	; 0x3102 <__mulsf3+0x12>
    3100:	a6 cf       	rjmp	.-180    	; 0x304e <__fp_inf>
    3102:	ab cf       	rjmp	.-170    	; 0x305a <__fp_nan>
    3104:	11 24       	eor	r1, r1
    3106:	ee cf       	rjmp	.-36     	; 0x30e4 <__fp_szero>

00003108 <__mulsf3x>:
    3108:	ca df       	rcall	.-108    	; 0x309e <__fp_split3>
    310a:	a0 f3       	brcs	.-24     	; 0x30f4 <__mulsf3+0x4>

0000310c <__mulsf3_pse>:
    310c:	95 9f       	mul	r25, r21
    310e:	d1 f3       	breq	.-12     	; 0x3104 <__mulsf3+0x14>
    3110:	95 0f       	add	r25, r21
    3112:	50 e0       	ldi	r21, 0x00	; 0
    3114:	55 1f       	adc	r21, r21
    3116:	62 9f       	mul	r22, r18
    3118:	f0 01       	movw	r30, r0
    311a:	72 9f       	mul	r23, r18
    311c:	bb 27       	eor	r27, r27
    311e:	f0 0d       	add	r31, r0
    3120:	b1 1d       	adc	r27, r1
    3122:	63 9f       	mul	r22, r19
    3124:	aa 27       	eor	r26, r26
    3126:	f0 0d       	add	r31, r0
    3128:	b1 1d       	adc	r27, r1
    312a:	aa 1f       	adc	r26, r26
    312c:	64 9f       	mul	r22, r20
    312e:	66 27       	eor	r22, r22
    3130:	b0 0d       	add	r27, r0
    3132:	a1 1d       	adc	r26, r1
    3134:	66 1f       	adc	r22, r22
    3136:	82 9f       	mul	r24, r18
    3138:	22 27       	eor	r18, r18
    313a:	b0 0d       	add	r27, r0
    313c:	a1 1d       	adc	r26, r1
    313e:	62 1f       	adc	r22, r18
    3140:	73 9f       	mul	r23, r19
    3142:	b0 0d       	add	r27, r0
    3144:	a1 1d       	adc	r26, r1
    3146:	62 1f       	adc	r22, r18
    3148:	83 9f       	mul	r24, r19
    314a:	a0 0d       	add	r26, r0
    314c:	61 1d       	adc	r22, r1
    314e:	22 1f       	adc	r18, r18
    3150:	74 9f       	mul	r23, r20
    3152:	33 27       	eor	r19, r19
    3154:	a0 0d       	add	r26, r0
    3156:	61 1d       	adc	r22, r1
    3158:	23 1f       	adc	r18, r19
    315a:	84 9f       	mul	r24, r20
    315c:	60 0d       	add	r22, r0
    315e:	21 1d       	adc	r18, r1
    3160:	82 2f       	mov	r24, r18
    3162:	76 2f       	mov	r23, r22
    3164:	6a 2f       	mov	r22, r26
    3166:	11 24       	eor	r1, r1
    3168:	9f 57       	subi	r25, 0x7F	; 127
    316a:	50 40       	sbci	r21, 0x00	; 0
    316c:	8a f0       	brmi	.+34     	; 0x3190 <__mulsf3_pse+0x84>
    316e:	e1 f0       	breq	.+56     	; 0x31a8 <__mulsf3_pse+0x9c>
    3170:	88 23       	and	r24, r24
    3172:	4a f0       	brmi	.+18     	; 0x3186 <__mulsf3_pse+0x7a>
    3174:	ee 0f       	add	r30, r30
    3176:	ff 1f       	adc	r31, r31
    3178:	bb 1f       	adc	r27, r27
    317a:	66 1f       	adc	r22, r22
    317c:	77 1f       	adc	r23, r23
    317e:	88 1f       	adc	r24, r24
    3180:	91 50       	subi	r25, 0x01	; 1
    3182:	50 40       	sbci	r21, 0x00	; 0
    3184:	a9 f7       	brne	.-22     	; 0x3170 <__mulsf3_pse+0x64>
    3186:	9e 3f       	cpi	r25, 0xFE	; 254
    3188:	51 05       	cpc	r21, r1
    318a:	70 f0       	brcs	.+28     	; 0x31a8 <__mulsf3_pse+0x9c>
    318c:	60 cf       	rjmp	.-320    	; 0x304e <__fp_inf>
    318e:	aa cf       	rjmp	.-172    	; 0x30e4 <__fp_szero>
    3190:	5f 3f       	cpi	r21, 0xFF	; 255
    3192:	ec f3       	brlt	.-6      	; 0x318e <__mulsf3_pse+0x82>
    3194:	98 3e       	cpi	r25, 0xE8	; 232
    3196:	dc f3       	brlt	.-10     	; 0x318e <__mulsf3_pse+0x82>
    3198:	86 95       	lsr	r24
    319a:	77 95       	ror	r23
    319c:	67 95       	ror	r22
    319e:	b7 95       	ror	r27
    31a0:	f7 95       	ror	r31
    31a2:	e7 95       	ror	r30
    31a4:	9f 5f       	subi	r25, 0xFF	; 255
    31a6:	c1 f7       	brne	.-16     	; 0x3198 <__mulsf3_pse+0x8c>
    31a8:	fe 2b       	or	r31, r30
    31aa:	88 0f       	add	r24, r24
    31ac:	91 1d       	adc	r25, r1
    31ae:	96 95       	lsr	r25
    31b0:	87 95       	ror	r24
    31b2:	97 f9       	bld	r25, 7
    31b4:	08 95       	ret

000031b6 <__udivmodsi4>:
    31b6:	a1 e2       	ldi	r26, 0x21	; 33
    31b8:	1a 2e       	mov	r1, r26
    31ba:	aa 1b       	sub	r26, r26
    31bc:	bb 1b       	sub	r27, r27
    31be:	fd 01       	movw	r30, r26
    31c0:	0d c0       	rjmp	.+26     	; 0x31dc <__udivmodsi4_ep>

000031c2 <__udivmodsi4_loop>:
    31c2:	aa 1f       	adc	r26, r26
    31c4:	bb 1f       	adc	r27, r27
    31c6:	ee 1f       	adc	r30, r30
    31c8:	ff 1f       	adc	r31, r31
    31ca:	a2 17       	cp	r26, r18
    31cc:	b3 07       	cpc	r27, r19
    31ce:	e4 07       	cpc	r30, r20
    31d0:	f5 07       	cpc	r31, r21
    31d2:	20 f0       	brcs	.+8      	; 0x31dc <__udivmodsi4_ep>
    31d4:	a2 1b       	sub	r26, r18
    31d6:	b3 0b       	sbc	r27, r19
    31d8:	e4 0b       	sbc	r30, r20
    31da:	f5 0b       	sbc	r31, r21

000031dc <__udivmodsi4_ep>:
    31dc:	66 1f       	adc	r22, r22
    31de:	77 1f       	adc	r23, r23
    31e0:	88 1f       	adc	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	1a 94       	dec	r1
    31e6:	69 f7       	brne	.-38     	; 0x31c2 <__udivmodsi4_loop>
    31e8:	60 95       	com	r22
    31ea:	70 95       	com	r23
    31ec:	80 95       	com	r24
    31ee:	90 95       	com	r25
    31f0:	9b 01       	movw	r18, r22
    31f2:	ac 01       	movw	r20, r24
    31f4:	bd 01       	movw	r22, r26
    31f6:	cf 01       	movw	r24, r30
    31f8:	08 95       	ret

000031fa <__tablejump2__>:
    31fa:	ee 0f       	add	r30, r30
    31fc:	ff 1f       	adc	r31, r31
    31fe:	88 1f       	adc	r24, r24
    3200:	8b bf       	out	0x3b, r24	; 59
    3202:	07 90       	elpm	r0, Z+
    3204:	f6 91       	elpm	r31, Z
    3206:	e0 2d       	mov	r30, r0
    3208:	19 94       	eijmp

0000320a <calloc>:
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
    3212:	86 9f       	mul	r24, r22
    3214:	80 01       	movw	r16, r0
    3216:	87 9f       	mul	r24, r23
    3218:	10 0d       	add	r17, r0
    321a:	96 9f       	mul	r25, r22
    321c:	10 0d       	add	r17, r0
    321e:	11 24       	eor	r1, r1
    3220:	c8 01       	movw	r24, r16
    3222:	0d d0       	rcall	.+26     	; 0x323e <malloc>
    3224:	ec 01       	movw	r28, r24
    3226:	00 97       	sbiw	r24, 0x00	; 0
    3228:	21 f0       	breq	.+8      	; 0x3232 <calloc+0x28>
    322a:	a8 01       	movw	r20, r16
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	34 d1       	rcall	.+616    	; 0x349a <memset>
    3232:	ce 01       	movw	r24, r28
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	08 95       	ret

0000323e <malloc>:
    323e:	0f 93       	push	r16
    3240:	1f 93       	push	r17
    3242:	cf 93       	push	r28
    3244:	df 93       	push	r29
    3246:	82 30       	cpi	r24, 0x02	; 2
    3248:	91 05       	cpc	r25, r1
    324a:	10 f4       	brcc	.+4      	; 0x3250 <malloc+0x12>
    324c:	82 e0       	ldi	r24, 0x02	; 2
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <__flp>
    3254:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <__flp+0x1>
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	a0 e0       	ldi	r26, 0x00	; 0
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	30 97       	sbiw	r30, 0x00	; 0
    3262:	19 f1       	breq	.+70     	; 0x32aa <malloc+0x6c>
    3264:	40 81       	ld	r20, Z
    3266:	51 81       	ldd	r21, Z+1	; 0x01
    3268:	02 81       	ldd	r16, Z+2	; 0x02
    326a:	13 81       	ldd	r17, Z+3	; 0x03
    326c:	48 17       	cp	r20, r24
    326e:	59 07       	cpc	r21, r25
    3270:	c8 f0       	brcs	.+50     	; 0x32a4 <malloc+0x66>
    3272:	84 17       	cp	r24, r20
    3274:	95 07       	cpc	r25, r21
    3276:	69 f4       	brne	.+26     	; 0x3292 <malloc+0x54>
    3278:	10 97       	sbiw	r26, 0x00	; 0
    327a:	31 f0       	breq	.+12     	; 0x3288 <malloc+0x4a>
    327c:	12 96       	adiw	r26, 0x02	; 2
    327e:	0c 93       	st	X, r16
    3280:	12 97       	sbiw	r26, 0x02	; 2
    3282:	13 96       	adiw	r26, 0x03	; 3
    3284:	1c 93       	st	X, r17
    3286:	27 c0       	rjmp	.+78     	; 0x32d6 <malloc+0x98>
    3288:	00 93 63 19 	sts	0x1963, r16	; 0x801963 <__flp>
    328c:	10 93 64 19 	sts	0x1964, r17	; 0x801964 <__flp+0x1>
    3290:	22 c0       	rjmp	.+68     	; 0x32d6 <malloc+0x98>
    3292:	21 15       	cp	r18, r1
    3294:	31 05       	cpc	r19, r1
    3296:	19 f0       	breq	.+6      	; 0x329e <malloc+0x60>
    3298:	42 17       	cp	r20, r18
    329a:	53 07       	cpc	r21, r19
    329c:	18 f4       	brcc	.+6      	; 0x32a4 <malloc+0x66>
    329e:	9a 01       	movw	r18, r20
    32a0:	bd 01       	movw	r22, r26
    32a2:	ef 01       	movw	r28, r30
    32a4:	df 01       	movw	r26, r30
    32a6:	f8 01       	movw	r30, r16
    32a8:	db cf       	rjmp	.-74     	; 0x3260 <malloc+0x22>
    32aa:	21 15       	cp	r18, r1
    32ac:	31 05       	cpc	r19, r1
    32ae:	f9 f0       	breq	.+62     	; 0x32ee <malloc+0xb0>
    32b0:	28 1b       	sub	r18, r24
    32b2:	39 0b       	sbc	r19, r25
    32b4:	24 30       	cpi	r18, 0x04	; 4
    32b6:	31 05       	cpc	r19, r1
    32b8:	80 f4       	brcc	.+32     	; 0x32da <malloc+0x9c>
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	9b 81       	ldd	r25, Y+3	; 0x03
    32be:	61 15       	cp	r22, r1
    32c0:	71 05       	cpc	r23, r1
    32c2:	21 f0       	breq	.+8      	; 0x32cc <malloc+0x8e>
    32c4:	fb 01       	movw	r30, r22
    32c6:	93 83       	std	Z+3, r25	; 0x03
    32c8:	82 83       	std	Z+2, r24	; 0x02
    32ca:	04 c0       	rjmp	.+8      	; 0x32d4 <malloc+0x96>
    32cc:	90 93 64 19 	sts	0x1964, r25	; 0x801964 <__flp+0x1>
    32d0:	80 93 63 19 	sts	0x1963, r24	; 0x801963 <__flp>
    32d4:	fe 01       	movw	r30, r28
    32d6:	32 96       	adiw	r30, 0x02	; 2
    32d8:	44 c0       	rjmp	.+136    	; 0x3362 <malloc+0x124>
    32da:	fe 01       	movw	r30, r28
    32dc:	e2 0f       	add	r30, r18
    32de:	f3 1f       	adc	r31, r19
    32e0:	81 93       	st	Z+, r24
    32e2:	91 93       	st	Z+, r25
    32e4:	22 50       	subi	r18, 0x02	; 2
    32e6:	31 09       	sbc	r19, r1
    32e8:	39 83       	std	Y+1, r19	; 0x01
    32ea:	28 83       	st	Y, r18
    32ec:	3a c0       	rjmp	.+116    	; 0x3362 <malloc+0x124>
    32ee:	20 91 61 19 	lds	r18, 0x1961	; 0x801961 <__brkval>
    32f2:	30 91 62 19 	lds	r19, 0x1962	; 0x801962 <__brkval+0x1>
    32f6:	23 2b       	or	r18, r19
    32f8:	41 f4       	brne	.+16     	; 0x330a <malloc+0xcc>
    32fa:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    32fe:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3302:	30 93 62 19 	sts	0x1962, r19	; 0x801962 <__brkval+0x1>
    3306:	20 93 61 19 	sts	0x1961, r18	; 0x801961 <__brkval>
    330a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    330e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3312:	21 15       	cp	r18, r1
    3314:	31 05       	cpc	r19, r1
    3316:	41 f4       	brne	.+16     	; 0x3328 <malloc+0xea>
    3318:	2d b7       	in	r18, 0x3d	; 61
    331a:	3e b7       	in	r19, 0x3e	; 62
    331c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3320:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3324:	24 1b       	sub	r18, r20
    3326:	35 0b       	sbc	r19, r21
    3328:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <__brkval>
    332c:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <__brkval+0x1>
    3330:	e2 17       	cp	r30, r18
    3332:	f3 07       	cpc	r31, r19
    3334:	a0 f4       	brcc	.+40     	; 0x335e <malloc+0x120>
    3336:	2e 1b       	sub	r18, r30
    3338:	3f 0b       	sbc	r19, r31
    333a:	28 17       	cp	r18, r24
    333c:	39 07       	cpc	r19, r25
    333e:	78 f0       	brcs	.+30     	; 0x335e <malloc+0x120>
    3340:	ac 01       	movw	r20, r24
    3342:	4e 5f       	subi	r20, 0xFE	; 254
    3344:	5f 4f       	sbci	r21, 0xFF	; 255
    3346:	24 17       	cp	r18, r20
    3348:	35 07       	cpc	r19, r21
    334a:	48 f0       	brcs	.+18     	; 0x335e <malloc+0x120>
    334c:	4e 0f       	add	r20, r30
    334e:	5f 1f       	adc	r21, r31
    3350:	50 93 62 19 	sts	0x1962, r21	; 0x801962 <__brkval+0x1>
    3354:	40 93 61 19 	sts	0x1961, r20	; 0x801961 <__brkval>
    3358:	81 93       	st	Z+, r24
    335a:	91 93       	st	Z+, r25
    335c:	02 c0       	rjmp	.+4      	; 0x3362 <malloc+0x124>
    335e:	e0 e0       	ldi	r30, 0x00	; 0
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	cf 01       	movw	r24, r30
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	1f 91       	pop	r17
    336a:	0f 91       	pop	r16
    336c:	08 95       	ret

0000336e <free>:
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	00 97       	sbiw	r24, 0x00	; 0
    3374:	09 f4       	brne	.+2      	; 0x3378 <free+0xa>
    3376:	81 c0       	rjmp	.+258    	; 0x347a <free+0x10c>
    3378:	fc 01       	movw	r30, r24
    337a:	32 97       	sbiw	r30, 0x02	; 2
    337c:	13 82       	std	Z+3, r1	; 0x03
    337e:	12 82       	std	Z+2, r1	; 0x02
    3380:	a0 91 63 19 	lds	r26, 0x1963	; 0x801963 <__flp>
    3384:	b0 91 64 19 	lds	r27, 0x1964	; 0x801964 <__flp+0x1>
    3388:	10 97       	sbiw	r26, 0x00	; 0
    338a:	81 f4       	brne	.+32     	; 0x33ac <free+0x3e>
    338c:	20 81       	ld	r18, Z
    338e:	31 81       	ldd	r19, Z+1	; 0x01
    3390:	82 0f       	add	r24, r18
    3392:	93 1f       	adc	r25, r19
    3394:	20 91 61 19 	lds	r18, 0x1961	; 0x801961 <__brkval>
    3398:	30 91 62 19 	lds	r19, 0x1962	; 0x801962 <__brkval+0x1>
    339c:	28 17       	cp	r18, r24
    339e:	39 07       	cpc	r19, r25
    33a0:	51 f5       	brne	.+84     	; 0x33f6 <free+0x88>
    33a2:	f0 93 62 19 	sts	0x1962, r31	; 0x801962 <__brkval+0x1>
    33a6:	e0 93 61 19 	sts	0x1961, r30	; 0x801961 <__brkval>
    33aa:	67 c0       	rjmp	.+206    	; 0x347a <free+0x10c>
    33ac:	ed 01       	movw	r28, r26
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	ce 17       	cp	r28, r30
    33b4:	df 07       	cpc	r29, r31
    33b6:	40 f4       	brcc	.+16     	; 0x33c8 <free+0x5a>
    33b8:	4a 81       	ldd	r20, Y+2	; 0x02
    33ba:	5b 81       	ldd	r21, Y+3	; 0x03
    33bc:	9e 01       	movw	r18, r28
    33be:	41 15       	cp	r20, r1
    33c0:	51 05       	cpc	r21, r1
    33c2:	f1 f0       	breq	.+60     	; 0x3400 <free+0x92>
    33c4:	ea 01       	movw	r28, r20
    33c6:	f5 cf       	rjmp	.-22     	; 0x33b2 <free+0x44>
    33c8:	d3 83       	std	Z+3, r29	; 0x03
    33ca:	c2 83       	std	Z+2, r28	; 0x02
    33cc:	40 81       	ld	r20, Z
    33ce:	51 81       	ldd	r21, Z+1	; 0x01
    33d0:	84 0f       	add	r24, r20
    33d2:	95 1f       	adc	r25, r21
    33d4:	c8 17       	cp	r28, r24
    33d6:	d9 07       	cpc	r29, r25
    33d8:	59 f4       	brne	.+22     	; 0x33f0 <free+0x82>
    33da:	88 81       	ld	r24, Y
    33dc:	99 81       	ldd	r25, Y+1	; 0x01
    33de:	84 0f       	add	r24, r20
    33e0:	95 1f       	adc	r25, r21
    33e2:	02 96       	adiw	r24, 0x02	; 2
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	80 83       	st	Z, r24
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	9b 81       	ldd	r25, Y+3	; 0x03
    33ec:	93 83       	std	Z+3, r25	; 0x03
    33ee:	82 83       	std	Z+2, r24	; 0x02
    33f0:	21 15       	cp	r18, r1
    33f2:	31 05       	cpc	r19, r1
    33f4:	29 f4       	brne	.+10     	; 0x3400 <free+0x92>
    33f6:	f0 93 64 19 	sts	0x1964, r31	; 0x801964 <__flp+0x1>
    33fa:	e0 93 63 19 	sts	0x1963, r30	; 0x801963 <__flp>
    33fe:	3d c0       	rjmp	.+122    	; 0x347a <free+0x10c>
    3400:	e9 01       	movw	r28, r18
    3402:	fb 83       	std	Y+3, r31	; 0x03
    3404:	ea 83       	std	Y+2, r30	; 0x02
    3406:	49 91       	ld	r20, Y+
    3408:	59 91       	ld	r21, Y+
    340a:	c4 0f       	add	r28, r20
    340c:	d5 1f       	adc	r29, r21
    340e:	ec 17       	cp	r30, r28
    3410:	fd 07       	cpc	r31, r29
    3412:	61 f4       	brne	.+24     	; 0x342c <free+0xbe>
    3414:	80 81       	ld	r24, Z
    3416:	91 81       	ldd	r25, Z+1	; 0x01
    3418:	84 0f       	add	r24, r20
    341a:	95 1f       	adc	r25, r21
    341c:	02 96       	adiw	r24, 0x02	; 2
    341e:	e9 01       	movw	r28, r18
    3420:	99 83       	std	Y+1, r25	; 0x01
    3422:	88 83       	st	Y, r24
    3424:	82 81       	ldd	r24, Z+2	; 0x02
    3426:	93 81       	ldd	r25, Z+3	; 0x03
    3428:	9b 83       	std	Y+3, r25	; 0x03
    342a:	8a 83       	std	Y+2, r24	; 0x02
    342c:	e0 e0       	ldi	r30, 0x00	; 0
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	12 96       	adiw	r26, 0x02	; 2
    3432:	8d 91       	ld	r24, X+
    3434:	9c 91       	ld	r25, X
    3436:	13 97       	sbiw	r26, 0x03	; 3
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	19 f0       	breq	.+6      	; 0x3442 <free+0xd4>
    343c:	fd 01       	movw	r30, r26
    343e:	dc 01       	movw	r26, r24
    3440:	f7 cf       	rjmp	.-18     	; 0x3430 <free+0xc2>
    3442:	8d 91       	ld	r24, X+
    3444:	9c 91       	ld	r25, X
    3446:	11 97       	sbiw	r26, 0x01	; 1
    3448:	9d 01       	movw	r18, r26
    344a:	2e 5f       	subi	r18, 0xFE	; 254
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	82 0f       	add	r24, r18
    3450:	93 1f       	adc	r25, r19
    3452:	20 91 61 19 	lds	r18, 0x1961	; 0x801961 <__brkval>
    3456:	30 91 62 19 	lds	r19, 0x1962	; 0x801962 <__brkval+0x1>
    345a:	28 17       	cp	r18, r24
    345c:	39 07       	cpc	r19, r25
    345e:	69 f4       	brne	.+26     	; 0x347a <free+0x10c>
    3460:	30 97       	sbiw	r30, 0x00	; 0
    3462:	29 f4       	brne	.+10     	; 0x346e <free+0x100>
    3464:	10 92 64 19 	sts	0x1964, r1	; 0x801964 <__flp+0x1>
    3468:	10 92 63 19 	sts	0x1963, r1	; 0x801963 <__flp>
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <free+0x104>
    346e:	13 82       	std	Z+3, r1	; 0x03
    3470:	12 82       	std	Z+2, r1	; 0x02
    3472:	b0 93 62 19 	sts	0x1962, r27	; 0x801962 <__brkval+0x1>
    3476:	a0 93 61 19 	sts	0x1961, r26	; 0x801961 <__brkval>
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	08 95       	ret

00003480 <abort>:
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	f8 94       	cli
    3486:	00 c3       	rjmp	.+1536   	; 0x3a88 <_exit>

00003488 <memcpy>:
    3488:	fb 01       	movw	r30, r22
    348a:	dc 01       	movw	r26, r24
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <memcpy+0xa>
    348e:	01 90       	ld	r0, Z+
    3490:	0d 92       	st	X+, r0
    3492:	41 50       	subi	r20, 0x01	; 1
    3494:	50 40       	sbci	r21, 0x00	; 0
    3496:	d8 f7       	brcc	.-10     	; 0x348e <memcpy+0x6>
    3498:	08 95       	ret

0000349a <memset>:
    349a:	dc 01       	movw	r26, r24
    349c:	01 c0       	rjmp	.+2      	; 0x34a0 <memset+0x6>
    349e:	6d 93       	st	X+, r22
    34a0:	41 50       	subi	r20, 0x01	; 1
    34a2:	50 40       	sbci	r21, 0x00	; 0
    34a4:	e0 f7       	brcc	.-8      	; 0x349e <memset+0x4>
    34a6:	08 95       	ret

000034a8 <printf>:
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	ae 01       	movw	r20, r28
    34b2:	4a 5f       	subi	r20, 0xFA	; 250
    34b4:	5f 4f       	sbci	r21, 0xFF	; 255
    34b6:	fa 01       	movw	r30, r20
    34b8:	61 91       	ld	r22, Z+
    34ba:	71 91       	ld	r23, Z+
    34bc:	af 01       	movw	r20, r30
    34be:	80 91 67 19 	lds	r24, 0x1967	; 0x801967 <__iob+0x2>
    34c2:	90 91 68 19 	lds	r25, 0x1968	; 0x801968 <__iob+0x3>
    34c6:	33 d0       	rcall	.+102    	; 0x352e <vfprintf>
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	08 95       	ret

000034ce <puts>:
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
    34d2:	cf 93       	push	r28
    34d4:	df 93       	push	r29
    34d6:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <__iob+0x2>
    34da:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <__iob+0x3>
    34de:	23 81       	ldd	r18, Z+3	; 0x03
    34e0:	21 ff       	sbrs	r18, 1
    34e2:	1b c0       	rjmp	.+54     	; 0x351a <puts+0x4c>
    34e4:	8c 01       	movw	r16, r24
    34e6:	d0 e0       	ldi	r29, 0x00	; 0
    34e8:	c0 e0       	ldi	r28, 0x00	; 0
    34ea:	f8 01       	movw	r30, r16
    34ec:	81 91       	ld	r24, Z+
    34ee:	8f 01       	movw	r16, r30
    34f0:	60 91 67 19 	lds	r22, 0x1967	; 0x801967 <__iob+0x2>
    34f4:	70 91 68 19 	lds	r23, 0x1968	; 0x801968 <__iob+0x3>
    34f8:	db 01       	movw	r26, r22
    34fa:	18 96       	adiw	r26, 0x08	; 8
    34fc:	ed 91       	ld	r30, X+
    34fe:	fc 91       	ld	r31, X
    3500:	19 97       	sbiw	r26, 0x09	; 9
    3502:	88 23       	and	r24, r24
    3504:	31 f0       	breq	.+12     	; 0x3512 <puts+0x44>
    3506:	19 95       	eicall
    3508:	89 2b       	or	r24, r25
    350a:	79 f3       	breq	.-34     	; 0x34ea <puts+0x1c>
    350c:	df ef       	ldi	r29, 0xFF	; 255
    350e:	cf ef       	ldi	r28, 0xFF	; 255
    3510:	ec cf       	rjmp	.-40     	; 0x34ea <puts+0x1c>
    3512:	8a e0       	ldi	r24, 0x0A	; 10
    3514:	19 95       	eicall
    3516:	89 2b       	or	r24, r25
    3518:	19 f0       	breq	.+6      	; 0x3520 <puts+0x52>
    351a:	8f ef       	ldi	r24, 0xFF	; 255
    351c:	9f ef       	ldi	r25, 0xFF	; 255
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <puts+0x56>
    3520:	8d 2f       	mov	r24, r29
    3522:	9c 2f       	mov	r25, r28
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	08 95       	ret

0000352e <vfprintf>:
    352e:	2f 92       	push	r2
    3530:	3f 92       	push	r3
    3532:	4f 92       	push	r4
    3534:	5f 92       	push	r5
    3536:	6f 92       	push	r6
    3538:	7f 92       	push	r7
    353a:	8f 92       	push	r8
    353c:	9f 92       	push	r9
    353e:	af 92       	push	r10
    3540:	bf 92       	push	r11
    3542:	cf 92       	push	r12
    3544:	df 92       	push	r13
    3546:	ef 92       	push	r14
    3548:	ff 92       	push	r15
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	2b 97       	sbiw	r28, 0x0b	; 11
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
    3562:	6c 01       	movw	r12, r24
    3564:	7b 01       	movw	r14, r22
    3566:	8a 01       	movw	r16, r20
    3568:	fc 01       	movw	r30, r24
    356a:	17 82       	std	Z+7, r1	; 0x07
    356c:	16 82       	std	Z+6, r1	; 0x06
    356e:	83 81       	ldd	r24, Z+3	; 0x03
    3570:	81 ff       	sbrs	r24, 1
    3572:	bf c1       	rjmp	.+894    	; 0x38f2 <vfprintf+0x3c4>
    3574:	ce 01       	movw	r24, r28
    3576:	01 96       	adiw	r24, 0x01	; 1
    3578:	3c 01       	movw	r6, r24
    357a:	f6 01       	movw	r30, r12
    357c:	93 81       	ldd	r25, Z+3	; 0x03
    357e:	f7 01       	movw	r30, r14
    3580:	93 fd       	sbrc	r25, 3
    3582:	85 91       	lpm	r24, Z+
    3584:	93 ff       	sbrs	r25, 3
    3586:	81 91       	ld	r24, Z+
    3588:	7f 01       	movw	r14, r30
    358a:	88 23       	and	r24, r24
    358c:	09 f4       	brne	.+2      	; 0x3590 <vfprintf+0x62>
    358e:	ad c1       	rjmp	.+858    	; 0x38ea <vfprintf+0x3bc>
    3590:	85 32       	cpi	r24, 0x25	; 37
    3592:	39 f4       	brne	.+14     	; 0x35a2 <vfprintf+0x74>
    3594:	93 fd       	sbrc	r25, 3
    3596:	85 91       	lpm	r24, Z+
    3598:	93 ff       	sbrs	r25, 3
    359a:	81 91       	ld	r24, Z+
    359c:	7f 01       	movw	r14, r30
    359e:	85 32       	cpi	r24, 0x25	; 37
    35a0:	21 f4       	brne	.+8      	; 0x35aa <vfprintf+0x7c>
    35a2:	b6 01       	movw	r22, r12
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	d6 d1       	rcall	.+940    	; 0x3954 <fputc>
    35a8:	e8 cf       	rjmp	.-48     	; 0x357a <vfprintf+0x4c>
    35aa:	91 2c       	mov	r9, r1
    35ac:	21 2c       	mov	r2, r1
    35ae:	31 2c       	mov	r3, r1
    35b0:	ff e1       	ldi	r31, 0x1F	; 31
    35b2:	f3 15       	cp	r31, r3
    35b4:	d8 f0       	brcs	.+54     	; 0x35ec <vfprintf+0xbe>
    35b6:	8b 32       	cpi	r24, 0x2B	; 43
    35b8:	79 f0       	breq	.+30     	; 0x35d8 <vfprintf+0xaa>
    35ba:	38 f4       	brcc	.+14     	; 0x35ca <vfprintf+0x9c>
    35bc:	80 32       	cpi	r24, 0x20	; 32
    35be:	79 f0       	breq	.+30     	; 0x35de <vfprintf+0xb0>
    35c0:	83 32       	cpi	r24, 0x23	; 35
    35c2:	a1 f4       	brne	.+40     	; 0x35ec <vfprintf+0xbe>
    35c4:	23 2d       	mov	r18, r3
    35c6:	20 61       	ori	r18, 0x10	; 16
    35c8:	1d c0       	rjmp	.+58     	; 0x3604 <vfprintf+0xd6>
    35ca:	8d 32       	cpi	r24, 0x2D	; 45
    35cc:	61 f0       	breq	.+24     	; 0x35e6 <vfprintf+0xb8>
    35ce:	80 33       	cpi	r24, 0x30	; 48
    35d0:	69 f4       	brne	.+26     	; 0x35ec <vfprintf+0xbe>
    35d2:	23 2d       	mov	r18, r3
    35d4:	21 60       	ori	r18, 0x01	; 1
    35d6:	16 c0       	rjmp	.+44     	; 0x3604 <vfprintf+0xd6>
    35d8:	83 2d       	mov	r24, r3
    35da:	82 60       	ori	r24, 0x02	; 2
    35dc:	38 2e       	mov	r3, r24
    35de:	e3 2d       	mov	r30, r3
    35e0:	e4 60       	ori	r30, 0x04	; 4
    35e2:	3e 2e       	mov	r3, r30
    35e4:	2a c0       	rjmp	.+84     	; 0x363a <vfprintf+0x10c>
    35e6:	f3 2d       	mov	r31, r3
    35e8:	f8 60       	ori	r31, 0x08	; 8
    35ea:	1d c0       	rjmp	.+58     	; 0x3626 <vfprintf+0xf8>
    35ec:	37 fc       	sbrc	r3, 7
    35ee:	2d c0       	rjmp	.+90     	; 0x364a <vfprintf+0x11c>
    35f0:	20 ed       	ldi	r18, 0xD0	; 208
    35f2:	28 0f       	add	r18, r24
    35f4:	2a 30       	cpi	r18, 0x0A	; 10
    35f6:	40 f0       	brcs	.+16     	; 0x3608 <vfprintf+0xda>
    35f8:	8e 32       	cpi	r24, 0x2E	; 46
    35fa:	b9 f4       	brne	.+46     	; 0x362a <vfprintf+0xfc>
    35fc:	36 fc       	sbrc	r3, 6
    35fe:	75 c1       	rjmp	.+746    	; 0x38ea <vfprintf+0x3bc>
    3600:	23 2d       	mov	r18, r3
    3602:	20 64       	ori	r18, 0x40	; 64
    3604:	32 2e       	mov	r3, r18
    3606:	19 c0       	rjmp	.+50     	; 0x363a <vfprintf+0x10c>
    3608:	36 fe       	sbrs	r3, 6
    360a:	06 c0       	rjmp	.+12     	; 0x3618 <vfprintf+0xea>
    360c:	8a e0       	ldi	r24, 0x0A	; 10
    360e:	98 9e       	mul	r9, r24
    3610:	20 0d       	add	r18, r0
    3612:	11 24       	eor	r1, r1
    3614:	92 2e       	mov	r9, r18
    3616:	11 c0       	rjmp	.+34     	; 0x363a <vfprintf+0x10c>
    3618:	ea e0       	ldi	r30, 0x0A	; 10
    361a:	2e 9e       	mul	r2, r30
    361c:	20 0d       	add	r18, r0
    361e:	11 24       	eor	r1, r1
    3620:	22 2e       	mov	r2, r18
    3622:	f3 2d       	mov	r31, r3
    3624:	f0 62       	ori	r31, 0x20	; 32
    3626:	3f 2e       	mov	r3, r31
    3628:	08 c0       	rjmp	.+16     	; 0x363a <vfprintf+0x10c>
    362a:	8c 36       	cpi	r24, 0x6C	; 108
    362c:	21 f4       	brne	.+8      	; 0x3636 <vfprintf+0x108>
    362e:	83 2d       	mov	r24, r3
    3630:	80 68       	ori	r24, 0x80	; 128
    3632:	38 2e       	mov	r3, r24
    3634:	02 c0       	rjmp	.+4      	; 0x363a <vfprintf+0x10c>
    3636:	88 36       	cpi	r24, 0x68	; 104
    3638:	41 f4       	brne	.+16     	; 0x364a <vfprintf+0x11c>
    363a:	f7 01       	movw	r30, r14
    363c:	93 fd       	sbrc	r25, 3
    363e:	85 91       	lpm	r24, Z+
    3640:	93 ff       	sbrs	r25, 3
    3642:	81 91       	ld	r24, Z+
    3644:	7f 01       	movw	r14, r30
    3646:	81 11       	cpse	r24, r1
    3648:	b3 cf       	rjmp	.-154    	; 0x35b0 <vfprintf+0x82>
    364a:	98 2f       	mov	r25, r24
    364c:	9f 7d       	andi	r25, 0xDF	; 223
    364e:	95 54       	subi	r25, 0x45	; 69
    3650:	93 30       	cpi	r25, 0x03	; 3
    3652:	28 f4       	brcc	.+10     	; 0x365e <vfprintf+0x130>
    3654:	0c 5f       	subi	r16, 0xFC	; 252
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	9f e3       	ldi	r25, 0x3F	; 63
    365a:	99 83       	std	Y+1, r25	; 0x01
    365c:	0d c0       	rjmp	.+26     	; 0x3678 <vfprintf+0x14a>
    365e:	83 36       	cpi	r24, 0x63	; 99
    3660:	31 f0       	breq	.+12     	; 0x366e <vfprintf+0x140>
    3662:	83 37       	cpi	r24, 0x73	; 115
    3664:	71 f0       	breq	.+28     	; 0x3682 <vfprintf+0x154>
    3666:	83 35       	cpi	r24, 0x53	; 83
    3668:	09 f0       	breq	.+2      	; 0x366c <vfprintf+0x13e>
    366a:	55 c0       	rjmp	.+170    	; 0x3716 <vfprintf+0x1e8>
    366c:	20 c0       	rjmp	.+64     	; 0x36ae <vfprintf+0x180>
    366e:	f8 01       	movw	r30, r16
    3670:	80 81       	ld	r24, Z
    3672:	89 83       	std	Y+1, r24	; 0x01
    3674:	0e 5f       	subi	r16, 0xFE	; 254
    3676:	1f 4f       	sbci	r17, 0xFF	; 255
    3678:	88 24       	eor	r8, r8
    367a:	83 94       	inc	r8
    367c:	91 2c       	mov	r9, r1
    367e:	53 01       	movw	r10, r6
    3680:	12 c0       	rjmp	.+36     	; 0x36a6 <vfprintf+0x178>
    3682:	28 01       	movw	r4, r16
    3684:	f2 e0       	ldi	r31, 0x02	; 2
    3686:	4f 0e       	add	r4, r31
    3688:	51 1c       	adc	r5, r1
    368a:	f8 01       	movw	r30, r16
    368c:	a0 80       	ld	r10, Z
    368e:	b1 80       	ldd	r11, Z+1	; 0x01
    3690:	36 fe       	sbrs	r3, 6
    3692:	03 c0       	rjmp	.+6      	; 0x369a <vfprintf+0x16c>
    3694:	69 2d       	mov	r22, r9
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	02 c0       	rjmp	.+4      	; 0x369e <vfprintf+0x170>
    369a:	6f ef       	ldi	r22, 0xFF	; 255
    369c:	7f ef       	ldi	r23, 0xFF	; 255
    369e:	c5 01       	movw	r24, r10
    36a0:	4e d1       	rcall	.+668    	; 0x393e <strnlen>
    36a2:	4c 01       	movw	r8, r24
    36a4:	82 01       	movw	r16, r4
    36a6:	f3 2d       	mov	r31, r3
    36a8:	ff 77       	andi	r31, 0x7F	; 127
    36aa:	3f 2e       	mov	r3, r31
    36ac:	15 c0       	rjmp	.+42     	; 0x36d8 <vfprintf+0x1aa>
    36ae:	28 01       	movw	r4, r16
    36b0:	22 e0       	ldi	r18, 0x02	; 2
    36b2:	42 0e       	add	r4, r18
    36b4:	51 1c       	adc	r5, r1
    36b6:	f8 01       	movw	r30, r16
    36b8:	a0 80       	ld	r10, Z
    36ba:	b1 80       	ldd	r11, Z+1	; 0x01
    36bc:	36 fe       	sbrs	r3, 6
    36be:	03 c0       	rjmp	.+6      	; 0x36c6 <vfprintf+0x198>
    36c0:	69 2d       	mov	r22, r9
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <vfprintf+0x19c>
    36c6:	6f ef       	ldi	r22, 0xFF	; 255
    36c8:	7f ef       	ldi	r23, 0xFF	; 255
    36ca:	c5 01       	movw	r24, r10
    36cc:	2d d1       	rcall	.+602    	; 0x3928 <strnlen_P>
    36ce:	4c 01       	movw	r8, r24
    36d0:	f3 2d       	mov	r31, r3
    36d2:	f0 68       	ori	r31, 0x80	; 128
    36d4:	3f 2e       	mov	r3, r31
    36d6:	82 01       	movw	r16, r4
    36d8:	33 fc       	sbrc	r3, 3
    36da:	19 c0       	rjmp	.+50     	; 0x370e <vfprintf+0x1e0>
    36dc:	82 2d       	mov	r24, r2
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	88 16       	cp	r8, r24
    36e2:	99 06       	cpc	r9, r25
    36e4:	a0 f4       	brcc	.+40     	; 0x370e <vfprintf+0x1e0>
    36e6:	b6 01       	movw	r22, r12
    36e8:	80 e2       	ldi	r24, 0x20	; 32
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	33 d1       	rcall	.+614    	; 0x3954 <fputc>
    36ee:	2a 94       	dec	r2
    36f0:	f5 cf       	rjmp	.-22     	; 0x36dc <vfprintf+0x1ae>
    36f2:	f5 01       	movw	r30, r10
    36f4:	37 fc       	sbrc	r3, 7
    36f6:	85 91       	lpm	r24, Z+
    36f8:	37 fe       	sbrs	r3, 7
    36fa:	81 91       	ld	r24, Z+
    36fc:	5f 01       	movw	r10, r30
    36fe:	b6 01       	movw	r22, r12
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	28 d1       	rcall	.+592    	; 0x3954 <fputc>
    3704:	21 10       	cpse	r2, r1
    3706:	2a 94       	dec	r2
    3708:	21 e0       	ldi	r18, 0x01	; 1
    370a:	82 1a       	sub	r8, r18
    370c:	91 08       	sbc	r9, r1
    370e:	81 14       	cp	r8, r1
    3710:	91 04       	cpc	r9, r1
    3712:	79 f7       	brne	.-34     	; 0x36f2 <vfprintf+0x1c4>
    3714:	e1 c0       	rjmp	.+450    	; 0x38d8 <vfprintf+0x3aa>
    3716:	84 36       	cpi	r24, 0x64	; 100
    3718:	11 f0       	breq	.+4      	; 0x371e <vfprintf+0x1f0>
    371a:	89 36       	cpi	r24, 0x69	; 105
    371c:	39 f5       	brne	.+78     	; 0x376c <vfprintf+0x23e>
    371e:	f8 01       	movw	r30, r16
    3720:	37 fe       	sbrs	r3, 7
    3722:	07 c0       	rjmp	.+14     	; 0x3732 <vfprintf+0x204>
    3724:	60 81       	ld	r22, Z
    3726:	71 81       	ldd	r23, Z+1	; 0x01
    3728:	82 81       	ldd	r24, Z+2	; 0x02
    372a:	93 81       	ldd	r25, Z+3	; 0x03
    372c:	0c 5f       	subi	r16, 0xFC	; 252
    372e:	1f 4f       	sbci	r17, 0xFF	; 255
    3730:	08 c0       	rjmp	.+16     	; 0x3742 <vfprintf+0x214>
    3732:	60 81       	ld	r22, Z
    3734:	71 81       	ldd	r23, Z+1	; 0x01
    3736:	07 2e       	mov	r0, r23
    3738:	00 0c       	add	r0, r0
    373a:	88 0b       	sbc	r24, r24
    373c:	99 0b       	sbc	r25, r25
    373e:	0e 5f       	subi	r16, 0xFE	; 254
    3740:	1f 4f       	sbci	r17, 0xFF	; 255
    3742:	f3 2d       	mov	r31, r3
    3744:	ff 76       	andi	r31, 0x6F	; 111
    3746:	3f 2e       	mov	r3, r31
    3748:	97 ff       	sbrs	r25, 7
    374a:	09 c0       	rjmp	.+18     	; 0x375e <vfprintf+0x230>
    374c:	90 95       	com	r25
    374e:	80 95       	com	r24
    3750:	70 95       	com	r23
    3752:	61 95       	neg	r22
    3754:	7f 4f       	sbci	r23, 0xFF	; 255
    3756:	8f 4f       	sbci	r24, 0xFF	; 255
    3758:	9f 4f       	sbci	r25, 0xFF	; 255
    375a:	f0 68       	ori	r31, 0x80	; 128
    375c:	3f 2e       	mov	r3, r31
    375e:	2a e0       	ldi	r18, 0x0A	; 10
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	a3 01       	movw	r20, r6
    3764:	33 d1       	rcall	.+614    	; 0x39cc <__ultoa_invert>
    3766:	88 2e       	mov	r8, r24
    3768:	86 18       	sub	r8, r6
    376a:	44 c0       	rjmp	.+136    	; 0x37f4 <vfprintf+0x2c6>
    376c:	85 37       	cpi	r24, 0x75	; 117
    376e:	31 f4       	brne	.+12     	; 0x377c <vfprintf+0x24e>
    3770:	23 2d       	mov	r18, r3
    3772:	2f 7e       	andi	r18, 0xEF	; 239
    3774:	b2 2e       	mov	r11, r18
    3776:	2a e0       	ldi	r18, 0x0A	; 10
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	25 c0       	rjmp	.+74     	; 0x37c6 <vfprintf+0x298>
    377c:	93 2d       	mov	r25, r3
    377e:	99 7f       	andi	r25, 0xF9	; 249
    3780:	b9 2e       	mov	r11, r25
    3782:	8f 36       	cpi	r24, 0x6F	; 111
    3784:	c1 f0       	breq	.+48     	; 0x37b6 <vfprintf+0x288>
    3786:	18 f4       	brcc	.+6      	; 0x378e <vfprintf+0x260>
    3788:	88 35       	cpi	r24, 0x58	; 88
    378a:	79 f0       	breq	.+30     	; 0x37aa <vfprintf+0x27c>
    378c:	ae c0       	rjmp	.+348    	; 0x38ea <vfprintf+0x3bc>
    378e:	80 37       	cpi	r24, 0x70	; 112
    3790:	19 f0       	breq	.+6      	; 0x3798 <vfprintf+0x26a>
    3792:	88 37       	cpi	r24, 0x78	; 120
    3794:	21 f0       	breq	.+8      	; 0x379e <vfprintf+0x270>
    3796:	a9 c0       	rjmp	.+338    	; 0x38ea <vfprintf+0x3bc>
    3798:	e9 2f       	mov	r30, r25
    379a:	e0 61       	ori	r30, 0x10	; 16
    379c:	be 2e       	mov	r11, r30
    379e:	b4 fe       	sbrs	r11, 4
    37a0:	0d c0       	rjmp	.+26     	; 0x37bc <vfprintf+0x28e>
    37a2:	fb 2d       	mov	r31, r11
    37a4:	f4 60       	ori	r31, 0x04	; 4
    37a6:	bf 2e       	mov	r11, r31
    37a8:	09 c0       	rjmp	.+18     	; 0x37bc <vfprintf+0x28e>
    37aa:	34 fe       	sbrs	r3, 4
    37ac:	0a c0       	rjmp	.+20     	; 0x37c2 <vfprintf+0x294>
    37ae:	29 2f       	mov	r18, r25
    37b0:	26 60       	ori	r18, 0x06	; 6
    37b2:	b2 2e       	mov	r11, r18
    37b4:	06 c0       	rjmp	.+12     	; 0x37c2 <vfprintf+0x294>
    37b6:	28 e0       	ldi	r18, 0x08	; 8
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	05 c0       	rjmp	.+10     	; 0x37c6 <vfprintf+0x298>
    37bc:	20 e1       	ldi	r18, 0x10	; 16
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	02 c0       	rjmp	.+4      	; 0x37c6 <vfprintf+0x298>
    37c2:	20 e1       	ldi	r18, 0x10	; 16
    37c4:	32 e0       	ldi	r19, 0x02	; 2
    37c6:	f8 01       	movw	r30, r16
    37c8:	b7 fe       	sbrs	r11, 7
    37ca:	07 c0       	rjmp	.+14     	; 0x37da <vfprintf+0x2ac>
    37cc:	60 81       	ld	r22, Z
    37ce:	71 81       	ldd	r23, Z+1	; 0x01
    37d0:	82 81       	ldd	r24, Z+2	; 0x02
    37d2:	93 81       	ldd	r25, Z+3	; 0x03
    37d4:	0c 5f       	subi	r16, 0xFC	; 252
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	06 c0       	rjmp	.+12     	; 0x37e6 <vfprintf+0x2b8>
    37da:	60 81       	ld	r22, Z
    37dc:	71 81       	ldd	r23, Z+1	; 0x01
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	0e 5f       	subi	r16, 0xFE	; 254
    37e4:	1f 4f       	sbci	r17, 0xFF	; 255
    37e6:	a3 01       	movw	r20, r6
    37e8:	f1 d0       	rcall	.+482    	; 0x39cc <__ultoa_invert>
    37ea:	88 2e       	mov	r8, r24
    37ec:	86 18       	sub	r8, r6
    37ee:	fb 2d       	mov	r31, r11
    37f0:	ff 77       	andi	r31, 0x7F	; 127
    37f2:	3f 2e       	mov	r3, r31
    37f4:	36 fe       	sbrs	r3, 6
    37f6:	0d c0       	rjmp	.+26     	; 0x3812 <vfprintf+0x2e4>
    37f8:	23 2d       	mov	r18, r3
    37fa:	2e 7f       	andi	r18, 0xFE	; 254
    37fc:	a2 2e       	mov	r10, r18
    37fe:	89 14       	cp	r8, r9
    3800:	58 f4       	brcc	.+22     	; 0x3818 <vfprintf+0x2ea>
    3802:	34 fe       	sbrs	r3, 4
    3804:	0b c0       	rjmp	.+22     	; 0x381c <vfprintf+0x2ee>
    3806:	32 fc       	sbrc	r3, 2
    3808:	09 c0       	rjmp	.+18     	; 0x381c <vfprintf+0x2ee>
    380a:	83 2d       	mov	r24, r3
    380c:	8e 7e       	andi	r24, 0xEE	; 238
    380e:	a8 2e       	mov	r10, r24
    3810:	05 c0       	rjmp	.+10     	; 0x381c <vfprintf+0x2ee>
    3812:	b8 2c       	mov	r11, r8
    3814:	a3 2c       	mov	r10, r3
    3816:	03 c0       	rjmp	.+6      	; 0x381e <vfprintf+0x2f0>
    3818:	b8 2c       	mov	r11, r8
    381a:	01 c0       	rjmp	.+2      	; 0x381e <vfprintf+0x2f0>
    381c:	b9 2c       	mov	r11, r9
    381e:	a4 fe       	sbrs	r10, 4
    3820:	0f c0       	rjmp	.+30     	; 0x3840 <vfprintf+0x312>
    3822:	fe 01       	movw	r30, r28
    3824:	e8 0d       	add	r30, r8
    3826:	f1 1d       	adc	r31, r1
    3828:	80 81       	ld	r24, Z
    382a:	80 33       	cpi	r24, 0x30	; 48
    382c:	21 f4       	brne	.+8      	; 0x3836 <vfprintf+0x308>
    382e:	9a 2d       	mov	r25, r10
    3830:	99 7e       	andi	r25, 0xE9	; 233
    3832:	a9 2e       	mov	r10, r25
    3834:	09 c0       	rjmp	.+18     	; 0x3848 <vfprintf+0x31a>
    3836:	a2 fe       	sbrs	r10, 2
    3838:	06 c0       	rjmp	.+12     	; 0x3846 <vfprintf+0x318>
    383a:	b3 94       	inc	r11
    383c:	b3 94       	inc	r11
    383e:	04 c0       	rjmp	.+8      	; 0x3848 <vfprintf+0x31a>
    3840:	8a 2d       	mov	r24, r10
    3842:	86 78       	andi	r24, 0x86	; 134
    3844:	09 f0       	breq	.+2      	; 0x3848 <vfprintf+0x31a>
    3846:	b3 94       	inc	r11
    3848:	a3 fc       	sbrc	r10, 3
    384a:	10 c0       	rjmp	.+32     	; 0x386c <vfprintf+0x33e>
    384c:	a0 fe       	sbrs	r10, 0
    384e:	06 c0       	rjmp	.+12     	; 0x385c <vfprintf+0x32e>
    3850:	b2 14       	cp	r11, r2
    3852:	80 f4       	brcc	.+32     	; 0x3874 <vfprintf+0x346>
    3854:	28 0c       	add	r2, r8
    3856:	92 2c       	mov	r9, r2
    3858:	9b 18       	sub	r9, r11
    385a:	0d c0       	rjmp	.+26     	; 0x3876 <vfprintf+0x348>
    385c:	b2 14       	cp	r11, r2
    385e:	58 f4       	brcc	.+22     	; 0x3876 <vfprintf+0x348>
    3860:	b6 01       	movw	r22, r12
    3862:	80 e2       	ldi	r24, 0x20	; 32
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	76 d0       	rcall	.+236    	; 0x3954 <fputc>
    3868:	b3 94       	inc	r11
    386a:	f8 cf       	rjmp	.-16     	; 0x385c <vfprintf+0x32e>
    386c:	b2 14       	cp	r11, r2
    386e:	18 f4       	brcc	.+6      	; 0x3876 <vfprintf+0x348>
    3870:	2b 18       	sub	r2, r11
    3872:	02 c0       	rjmp	.+4      	; 0x3878 <vfprintf+0x34a>
    3874:	98 2c       	mov	r9, r8
    3876:	21 2c       	mov	r2, r1
    3878:	a4 fe       	sbrs	r10, 4
    387a:	0f c0       	rjmp	.+30     	; 0x389a <vfprintf+0x36c>
    387c:	b6 01       	movw	r22, r12
    387e:	80 e3       	ldi	r24, 0x30	; 48
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	68 d0       	rcall	.+208    	; 0x3954 <fputc>
    3884:	a2 fe       	sbrs	r10, 2
    3886:	16 c0       	rjmp	.+44     	; 0x38b4 <vfprintf+0x386>
    3888:	a1 fc       	sbrc	r10, 1
    388a:	03 c0       	rjmp	.+6      	; 0x3892 <vfprintf+0x364>
    388c:	88 e7       	ldi	r24, 0x78	; 120
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <vfprintf+0x368>
    3892:	88 e5       	ldi	r24, 0x58	; 88
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	b6 01       	movw	r22, r12
    3898:	0c c0       	rjmp	.+24     	; 0x38b2 <vfprintf+0x384>
    389a:	8a 2d       	mov	r24, r10
    389c:	86 78       	andi	r24, 0x86	; 134
    389e:	51 f0       	breq	.+20     	; 0x38b4 <vfprintf+0x386>
    38a0:	a1 fe       	sbrs	r10, 1
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <vfprintf+0x37a>
    38a4:	8b e2       	ldi	r24, 0x2B	; 43
    38a6:	01 c0       	rjmp	.+2      	; 0x38aa <vfprintf+0x37c>
    38a8:	80 e2       	ldi	r24, 0x20	; 32
    38aa:	a7 fc       	sbrc	r10, 7
    38ac:	8d e2       	ldi	r24, 0x2D	; 45
    38ae:	b6 01       	movw	r22, r12
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	50 d0       	rcall	.+160    	; 0x3954 <fputc>
    38b4:	89 14       	cp	r8, r9
    38b6:	30 f4       	brcc	.+12     	; 0x38c4 <vfprintf+0x396>
    38b8:	b6 01       	movw	r22, r12
    38ba:	80 e3       	ldi	r24, 0x30	; 48
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	4a d0       	rcall	.+148    	; 0x3954 <fputc>
    38c0:	9a 94       	dec	r9
    38c2:	f8 cf       	rjmp	.-16     	; 0x38b4 <vfprintf+0x386>
    38c4:	8a 94       	dec	r8
    38c6:	f3 01       	movw	r30, r6
    38c8:	e8 0d       	add	r30, r8
    38ca:	f1 1d       	adc	r31, r1
    38cc:	80 81       	ld	r24, Z
    38ce:	b6 01       	movw	r22, r12
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	40 d0       	rcall	.+128    	; 0x3954 <fputc>
    38d4:	81 10       	cpse	r8, r1
    38d6:	f6 cf       	rjmp	.-20     	; 0x38c4 <vfprintf+0x396>
    38d8:	22 20       	and	r2, r2
    38da:	09 f4       	brne	.+2      	; 0x38de <vfprintf+0x3b0>
    38dc:	4e ce       	rjmp	.-868    	; 0x357a <vfprintf+0x4c>
    38de:	b6 01       	movw	r22, r12
    38e0:	80 e2       	ldi	r24, 0x20	; 32
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	37 d0       	rcall	.+110    	; 0x3954 <fputc>
    38e6:	2a 94       	dec	r2
    38e8:	f7 cf       	rjmp	.-18     	; 0x38d8 <vfprintf+0x3aa>
    38ea:	f6 01       	movw	r30, r12
    38ec:	86 81       	ldd	r24, Z+6	; 0x06
    38ee:	97 81       	ldd	r25, Z+7	; 0x07
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <vfprintf+0x3c8>
    38f2:	8f ef       	ldi	r24, 0xFF	; 255
    38f4:	9f ef       	ldi	r25, 0xFF	; 255
    38f6:	2b 96       	adiw	r28, 0x0b	; 11
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	de bf       	out	0x3e, r29	; 62
    38fe:	0f be       	out	0x3f, r0	; 63
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	1f 91       	pop	r17
    3908:	0f 91       	pop	r16
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	df 90       	pop	r13
    3910:	cf 90       	pop	r12
    3912:	bf 90       	pop	r11
    3914:	af 90       	pop	r10
    3916:	9f 90       	pop	r9
    3918:	8f 90       	pop	r8
    391a:	7f 90       	pop	r7
    391c:	6f 90       	pop	r6
    391e:	5f 90       	pop	r5
    3920:	4f 90       	pop	r4
    3922:	3f 90       	pop	r3
    3924:	2f 90       	pop	r2
    3926:	08 95       	ret

00003928 <strnlen_P>:
    3928:	fc 01       	movw	r30, r24
    392a:	05 90       	lpm	r0, Z+
    392c:	61 50       	subi	r22, 0x01	; 1
    392e:	70 40       	sbci	r23, 0x00	; 0
    3930:	01 10       	cpse	r0, r1
    3932:	d8 f7       	brcc	.-10     	; 0x392a <strnlen_P+0x2>
    3934:	80 95       	com	r24
    3936:	90 95       	com	r25
    3938:	8e 0f       	add	r24, r30
    393a:	9f 1f       	adc	r25, r31
    393c:	08 95       	ret

0000393e <strnlen>:
    393e:	fc 01       	movw	r30, r24
    3940:	61 50       	subi	r22, 0x01	; 1
    3942:	70 40       	sbci	r23, 0x00	; 0
    3944:	01 90       	ld	r0, Z+
    3946:	01 10       	cpse	r0, r1
    3948:	d8 f7       	brcc	.-10     	; 0x3940 <strnlen+0x2>
    394a:	80 95       	com	r24
    394c:	90 95       	com	r25
    394e:	8e 0f       	add	r24, r30
    3950:	9f 1f       	adc	r25, r31
    3952:	08 95       	ret

00003954 <fputc>:
    3954:	0f 93       	push	r16
    3956:	1f 93       	push	r17
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	fb 01       	movw	r30, r22
    395e:	23 81       	ldd	r18, Z+3	; 0x03
    3960:	21 fd       	sbrc	r18, 1
    3962:	03 c0       	rjmp	.+6      	; 0x396a <fputc+0x16>
    3964:	8f ef       	ldi	r24, 0xFF	; 255
    3966:	9f ef       	ldi	r25, 0xFF	; 255
    3968:	2c c0       	rjmp	.+88     	; 0x39c2 <fputc+0x6e>
    396a:	22 ff       	sbrs	r18, 2
    396c:	16 c0       	rjmp	.+44     	; 0x399a <fputc+0x46>
    396e:	46 81       	ldd	r20, Z+6	; 0x06
    3970:	57 81       	ldd	r21, Z+7	; 0x07
    3972:	24 81       	ldd	r18, Z+4	; 0x04
    3974:	35 81       	ldd	r19, Z+5	; 0x05
    3976:	42 17       	cp	r20, r18
    3978:	53 07       	cpc	r21, r19
    397a:	44 f4       	brge	.+16     	; 0x398c <fputc+0x38>
    397c:	a0 81       	ld	r26, Z
    397e:	b1 81       	ldd	r27, Z+1	; 0x01
    3980:	9d 01       	movw	r18, r26
    3982:	2f 5f       	subi	r18, 0xFF	; 255
    3984:	3f 4f       	sbci	r19, 0xFF	; 255
    3986:	31 83       	std	Z+1, r19	; 0x01
    3988:	20 83       	st	Z, r18
    398a:	8c 93       	st	X, r24
    398c:	26 81       	ldd	r18, Z+6	; 0x06
    398e:	37 81       	ldd	r19, Z+7	; 0x07
    3990:	2f 5f       	subi	r18, 0xFF	; 255
    3992:	3f 4f       	sbci	r19, 0xFF	; 255
    3994:	37 83       	std	Z+7, r19	; 0x07
    3996:	26 83       	std	Z+6, r18	; 0x06
    3998:	14 c0       	rjmp	.+40     	; 0x39c2 <fputc+0x6e>
    399a:	8b 01       	movw	r16, r22
    399c:	ec 01       	movw	r28, r24
    399e:	fb 01       	movw	r30, r22
    39a0:	00 84       	ldd	r0, Z+8	; 0x08
    39a2:	f1 85       	ldd	r31, Z+9	; 0x09
    39a4:	e0 2d       	mov	r30, r0
    39a6:	19 95       	eicall
    39a8:	89 2b       	or	r24, r25
    39aa:	e1 f6       	brne	.-72     	; 0x3964 <fputc+0x10>
    39ac:	d8 01       	movw	r26, r16
    39ae:	16 96       	adiw	r26, 0x06	; 6
    39b0:	8d 91       	ld	r24, X+
    39b2:	9c 91       	ld	r25, X
    39b4:	17 97       	sbiw	r26, 0x07	; 7
    39b6:	01 96       	adiw	r24, 0x01	; 1
    39b8:	17 96       	adiw	r26, 0x07	; 7
    39ba:	9c 93       	st	X, r25
    39bc:	8e 93       	st	-X, r24
    39be:	16 97       	sbiw	r26, 0x06	; 6
    39c0:	ce 01       	movw	r24, r28
    39c2:	df 91       	pop	r29
    39c4:	cf 91       	pop	r28
    39c6:	1f 91       	pop	r17
    39c8:	0f 91       	pop	r16
    39ca:	08 95       	ret

000039cc <__ultoa_invert>:
    39cc:	fa 01       	movw	r30, r20
    39ce:	aa 27       	eor	r26, r26
    39d0:	28 30       	cpi	r18, 0x08	; 8
    39d2:	51 f1       	breq	.+84     	; 0x3a28 <__ultoa_invert+0x5c>
    39d4:	20 31       	cpi	r18, 0x10	; 16
    39d6:	81 f1       	breq	.+96     	; 0x3a38 <__ultoa_invert+0x6c>
    39d8:	e8 94       	clt
    39da:	6f 93       	push	r22
    39dc:	6e 7f       	andi	r22, 0xFE	; 254
    39de:	6e 5f       	subi	r22, 0xFE	; 254
    39e0:	7f 4f       	sbci	r23, 0xFF	; 255
    39e2:	8f 4f       	sbci	r24, 0xFF	; 255
    39e4:	9f 4f       	sbci	r25, 0xFF	; 255
    39e6:	af 4f       	sbci	r26, 0xFF	; 255
    39e8:	b1 e0       	ldi	r27, 0x01	; 1
    39ea:	3e d0       	rcall	.+124    	; 0x3a68 <__ultoa_invert+0x9c>
    39ec:	b4 e0       	ldi	r27, 0x04	; 4
    39ee:	3c d0       	rcall	.+120    	; 0x3a68 <__ultoa_invert+0x9c>
    39f0:	67 0f       	add	r22, r23
    39f2:	78 1f       	adc	r23, r24
    39f4:	89 1f       	adc	r24, r25
    39f6:	9a 1f       	adc	r25, r26
    39f8:	a1 1d       	adc	r26, r1
    39fa:	68 0f       	add	r22, r24
    39fc:	79 1f       	adc	r23, r25
    39fe:	8a 1f       	adc	r24, r26
    3a00:	91 1d       	adc	r25, r1
    3a02:	a1 1d       	adc	r26, r1
    3a04:	6a 0f       	add	r22, r26
    3a06:	71 1d       	adc	r23, r1
    3a08:	81 1d       	adc	r24, r1
    3a0a:	91 1d       	adc	r25, r1
    3a0c:	a1 1d       	adc	r26, r1
    3a0e:	20 d0       	rcall	.+64     	; 0x3a50 <__ultoa_invert+0x84>
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <__ultoa_invert+0x48>
    3a12:	68 94       	set
    3a14:	3f 91       	pop	r19
    3a16:	2a e0       	ldi	r18, 0x0A	; 10
    3a18:	26 9f       	mul	r18, r22
    3a1a:	11 24       	eor	r1, r1
    3a1c:	30 19       	sub	r19, r0
    3a1e:	30 5d       	subi	r19, 0xD0	; 208
    3a20:	31 93       	st	Z+, r19
    3a22:	de f6       	brtc	.-74     	; 0x39da <__ultoa_invert+0xe>
    3a24:	cf 01       	movw	r24, r30
    3a26:	08 95       	ret
    3a28:	46 2f       	mov	r20, r22
    3a2a:	47 70       	andi	r20, 0x07	; 7
    3a2c:	40 5d       	subi	r20, 0xD0	; 208
    3a2e:	41 93       	st	Z+, r20
    3a30:	b3 e0       	ldi	r27, 0x03	; 3
    3a32:	0f d0       	rcall	.+30     	; 0x3a52 <__ultoa_invert+0x86>
    3a34:	c9 f7       	brne	.-14     	; 0x3a28 <__ultoa_invert+0x5c>
    3a36:	f6 cf       	rjmp	.-20     	; 0x3a24 <__ultoa_invert+0x58>
    3a38:	46 2f       	mov	r20, r22
    3a3a:	4f 70       	andi	r20, 0x0F	; 15
    3a3c:	40 5d       	subi	r20, 0xD0	; 208
    3a3e:	4a 33       	cpi	r20, 0x3A	; 58
    3a40:	18 f0       	brcs	.+6      	; 0x3a48 <__ultoa_invert+0x7c>
    3a42:	49 5d       	subi	r20, 0xD9	; 217
    3a44:	31 fd       	sbrc	r19, 1
    3a46:	40 52       	subi	r20, 0x20	; 32
    3a48:	41 93       	st	Z+, r20
    3a4a:	02 d0       	rcall	.+4      	; 0x3a50 <__ultoa_invert+0x84>
    3a4c:	a9 f7       	brne	.-22     	; 0x3a38 <__ultoa_invert+0x6c>
    3a4e:	ea cf       	rjmp	.-44     	; 0x3a24 <__ultoa_invert+0x58>
    3a50:	b4 e0       	ldi	r27, 0x04	; 4
    3a52:	a6 95       	lsr	r26
    3a54:	97 95       	ror	r25
    3a56:	87 95       	ror	r24
    3a58:	77 95       	ror	r23
    3a5a:	67 95       	ror	r22
    3a5c:	ba 95       	dec	r27
    3a5e:	c9 f7       	brne	.-14     	; 0x3a52 <__ultoa_invert+0x86>
    3a60:	00 97       	sbiw	r24, 0x00	; 0
    3a62:	61 05       	cpc	r22, r1
    3a64:	71 05       	cpc	r23, r1
    3a66:	08 95       	ret
    3a68:	9b 01       	movw	r18, r22
    3a6a:	ac 01       	movw	r20, r24
    3a6c:	0a 2e       	mov	r0, r26
    3a6e:	06 94       	lsr	r0
    3a70:	57 95       	ror	r21
    3a72:	47 95       	ror	r20
    3a74:	37 95       	ror	r19
    3a76:	27 95       	ror	r18
    3a78:	ba 95       	dec	r27
    3a7a:	c9 f7       	brne	.-14     	; 0x3a6e <__ultoa_invert+0xa2>
    3a7c:	62 0f       	add	r22, r18
    3a7e:	73 1f       	adc	r23, r19
    3a80:	84 1f       	adc	r24, r20
    3a82:	95 1f       	adc	r25, r21
    3a84:	a0 1d       	adc	r26, r0
    3a86:	08 95       	ret

00003a88 <_exit>:
    3a88:	f8 94       	cli

00003a8a <__stop_program>:
    3a8a:	ff cf       	rjmp	.-2      	; 0x3a8a <__stop_program>
