
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800200  00004800  00004894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000af5  0080039a  0080039a  00004a2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004a2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  00004acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a16d  00000000  00000000  00005314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c6a  00000000  00000000  0000f481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000533f  00000000  00000000  000120eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ce8  00000000  00000000  0001742c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033d3  00000000  00000000  00019114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008d70  00000000  00000000  0001c4e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  00025257  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	d7 c5       	rjmp	.+2990   	; 0xbe0 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__vector_25>
      68:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__vector_36>
      94:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__vector_51>
      d0:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__vector_54>
      dc:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fa 14       	cp	r15, r10
      e6:	fa 14       	cp	r15, r10
      e8:	fa 14       	cp	r15, r10
      ea:	31 15       	cp	r19, r1
      ec:	39 15       	cp	r19, r9
      ee:	4e 15       	cp	r20, r14
      f0:	fa 14       	cp	r15, r10
      f2:	fa 14       	cp	r15, r10
      f4:	31 15       	cp	r19, r1
      f6:	39 15       	cp	r19, r9
      f8:	ef 1c       	adc	r14, r15
      fa:	5f 1d       	adc	r21, r15
      fc:	5f 1d       	adc	r21, r15
      fe:	5f 1d       	adc	r21, r15
     100:	5f 1d       	adc	r21, r15
     102:	5f 1d       	adc	r21, r15
     104:	5f 1d       	adc	r21, r15
     106:	5f 1d       	adc	r21, r15
     108:	ef 1c       	adc	r14, r15
     10a:	5f 1d       	adc	r21, r15
     10c:	5f 1d       	adc	r21, r15
     10e:	5f 1d       	adc	r21, r15
     110:	5f 1d       	adc	r21, r15
     112:	5f 1d       	adc	r21, r15
     114:	5f 1d       	adc	r21, r15
     116:	5f 1d       	adc	r21, r15
     118:	f1 1c       	adc	r15, r1
     11a:	5f 1d       	adc	r21, r15
     11c:	5f 1d       	adc	r21, r15
     11e:	5f 1d       	adc	r21, r15
     120:	5f 1d       	adc	r21, r15
     122:	5f 1d       	adc	r21, r15
     124:	5f 1d       	adc	r21, r15
     126:	5f 1d       	adc	r21, r15
     128:	5f 1d       	adc	r21, r15
     12a:	5f 1d       	adc	r21, r15
     12c:	5f 1d       	adc	r21, r15
     12e:	5f 1d       	adc	r21, r15
     130:	5f 1d       	adc	r21, r15
     132:	5f 1d       	adc	r21, r15
     134:	5f 1d       	adc	r21, r15
     136:	5f 1d       	adc	r21, r15
     138:	f1 1c       	adc	r15, r1
     13a:	5f 1d       	adc	r21, r15
     13c:	5f 1d       	adc	r21, r15
     13e:	5f 1d       	adc	r21, r15
     140:	5f 1d       	adc	r21, r15
     142:	5f 1d       	adc	r21, r15
     144:	5f 1d       	adc	r21, r15
     146:	5f 1d       	adc	r21, r15
     148:	5f 1d       	adc	r21, r15
     14a:	5f 1d       	adc	r21, r15
     14c:	5f 1d       	adc	r21, r15
     14e:	5f 1d       	adc	r21, r15
     150:	5f 1d       	adc	r21, r15
     152:	5f 1d       	adc	r21, r15
     154:	5f 1d       	adc	r21, r15
     156:	5f 1d       	adc	r21, r15
     158:	5b 1d       	adc	r21, r11
     15a:	5f 1d       	adc	r21, r15
     15c:	5f 1d       	adc	r21, r15
     15e:	5f 1d       	adc	r21, r15
     160:	5f 1d       	adc	r21, r15
     162:	5f 1d       	adc	r21, r15
     164:	5f 1d       	adc	r21, r15
     166:	5f 1d       	adc	r21, r15
     168:	26 1d       	adc	r18, r6
     16a:	5f 1d       	adc	r21, r15
     16c:	5f 1d       	adc	r21, r15
     16e:	5f 1d       	adc	r21, r15
     170:	5f 1d       	adc	r21, r15
     172:	5f 1d       	adc	r21, r15
     174:	5f 1d       	adc	r21, r15
     176:	5f 1d       	adc	r21, r15
     178:	5f 1d       	adc	r21, r15
     17a:	5f 1d       	adc	r21, r15
     17c:	5f 1d       	adc	r21, r15
     17e:	5f 1d       	adc	r21, r15
     180:	5f 1d       	adc	r21, r15
     182:	5f 1d       	adc	r21, r15
     184:	5f 1d       	adc	r21, r15
     186:	5f 1d       	adc	r21, r15
     188:	1a 1d       	adc	r17, r10
     18a:	5f 1d       	adc	r21, r15
     18c:	5f 1d       	adc	r21, r15
     18e:	5f 1d       	adc	r21, r15
     190:	5f 1d       	adc	r21, r15
     192:	5f 1d       	adc	r21, r15
     194:	5f 1d       	adc	r21, r15
     196:	5f 1d       	adc	r21, r15
     198:	3e 1d       	adc	r19, r14

0000019a <prvIdleTask>:
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = ( TaskHandle_t ) pxCurrentTCB;

        return xReturn;
    }
     19a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <prvCheckTasksWaitingTermination>
     19e:	80 91 bf 0d 	lds	r24, 0x0DBF	; 0x800dbf <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	57 d4       	rcall	.+2222   	; 0xa56 <vPortYield>
     1a8:	0e 94 77 15 	call	0x2aee	; 0x2aee <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 6f 14 	call	0x28de	; 0x28de <prvProcessTimerOrBlockTask>
     1c6:	0e 94 c3 14 	call	0x2986	; 0x2986 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	13 e0       	ldi	r17, 0x03	; 3
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 e0       	ldi	r30, 0x00	; 0
     1e4:	f8 e4       	ldi	r31, 0x48	; 72
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	aa 39       	cpi	r26, 0x9A	; 154
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	2e e0       	ldi	r18, 0x0E	; 14
     1f8:	aa e9       	ldi	r26, 0x9A	; 154
     1fa:	b3 e0       	ldi	r27, 0x03	; 3
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 38       	cpi	r26, 0x8F	; 143
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <main>
     20a:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <myCo2CallBack>:
		
		
	}
}
void myCo2CallBack(uint16_t ppm)
{
     210:	0f 93       	push	r16
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	1f 92       	push	r1
     218:	1f 92       	push	r1
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	9a 83       	std	Y+2, r25	; 0x02
     220:	89 83       	std	Y+1, r24	; 0x01
	printf("CO2 Value: %d",ppm);
     222:	8a 81       	ldd	r24, Y+2	; 0x02
     224:	8f 93       	push	r24
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	8f 93       	push	r24
     22a:	8f e4       	ldi	r24, 0x4F	; 79
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	0e 94 0e 21 	call	0x421c	; 0x421c <printf>
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	be 01       	movw	r22, r28
     240:	6f 5f       	subi	r22, 0xFF	; 255
     242:	7f 4f       	sbci	r23, 0xFF	; 255
     244:	80 91 81 0e 	lds	r24, 0x0E81	; 0x800e81 <sensorDataQueue>
     248:	90 91 82 0e 	lds	r25, 0x0E82	; 0x800e82 <sensorDataQueue+0x1>
     24c:	1b d6       	rcall	.+3126   	; 0xe84 <xQueueGenericSend>
}
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	0f 91       	pop	r16
     260:	08 95       	ret

00000262 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
     268:	88 e0       	ldi	r24, 0x08	; 8
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <mh_z19_injectCallBack>
     270:	08 95       	ret

00000272 <measureCO2>:
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     272:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <mh_z19_takeMeassuring>
     276:	80 93 80 0e 	sts	0x0E80, r24	; 0x800e80 <rc>
	if (rc != MHZ19_OK)
     27a:	88 23       	and	r24, r24
     27c:	21 f0       	breq	.+8      	; 0x286 <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     27e:	8d e5       	ldi	r24, 0x5D	; 93
     280:	92 e0       	ldi	r25, 0x02	; 2
     282:	0c 94 21 21 	jmp	0x4242	; 0x4242 <puts>
     286:	08 95       	ret

00000288 <CO2Task>:
{
	while(1)
	{


EventBits_t dataEventBits = xEventGroupWaitBits
     288:	cc 24       	eor	r12, r12
     28a:	ca 94       	dec	r12
     28c:	dc 2c       	mov	r13, r12
     28e:	76 01       	movw	r14, r12
     290:	01 e0       	ldi	r16, 0x01	; 1
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	42 e0       	ldi	r20, 0x02	; 2
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	80 91 7c 0e 	lds	r24, 0x0E7C	; 0x800e7c <dataEventGroup>
     2a0:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <dataEventGroup+0x1>
     2a4:	67 d0       	rcall	.+206    	; 0x374 <xEventGroupWaitBits>
(dataEventGroup,BIT_HUMIDITY_TEMPERATURE,pdFALSE,pdTRUE,portMAX_DELAY);
		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
     2a6:	61 ff       	sbrs	r22, 1
		{
			measureCO2();
     2a8:	11 c0       	rjmp	.+34     	; 0x2cc <CO2Task+0x44>
     2aa:	e3 df       	rcall	.-58     	; 0x272 <measureCO2>
		//printf("Measured\n");
		vTaskDelay(pdMS_TO_TICKS(200));
     2ac:	6c e0       	ldi	r22, 0x0C	; 12
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <vTaskDelay>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     2b8:	41 e0       	ldi	r20, 0x01	; 1
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	80 91 7c 0e 	lds	r24, 0x0E7C	; 0x800e7c <dataEventGroup>
     2c4:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <dataEventGroup+0x1>
     2c8:	12 d1       	rcall	.+548    	; 0x4ee <xEventGroupSetBits>
     2ca:	de cf       	rjmp	.-68     	; 0x288 <CO2Task>
		}
		else
		{
			printf("Not Measured\n");
     2cc:	84 e7       	ldi	r24, 0x74	; 116
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	0e 94 21 21 	call	0x4242	; 0x4242 <puts>
			vTaskDelay(300);
     2d4:	6c e2       	ldi	r22, 0x2C	; 44
     2d6:	71 e0       	ldi	r23, 0x01	; 1
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <vTaskDelay>
     2e0:	d3 cf       	rjmp	.-90     	; 0x288 <CO2Task>

000002e2 <createCO2Task>:
{
	printf("CO2 Value: %d",ppm);
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
}
void createCO2Task(void *pvpParameter)
{
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
			initializeCO2Driver();
     2e8:	bc df       	rcall	.-136    	; 0x262 <initializeCO2Driver>
			xTaskCreate(
     2ea:	e1 2c       	mov	r14, r1
     2ec:	f1 2c       	mov	r15, r1
     2ee:	01 e0       	ldi	r16, 0x01	; 1
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 ec       	ldi	r20, 0xC0	; 192
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	61 e8       	ldi	r22, 0x81	; 129
     2fa:	72 e0       	ldi	r23, 0x02	; 2
     2fc:	84 e4       	ldi	r24, 0x44	; 68
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 65 0b 	call	0x16ca	; 0x16ca <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	08 95       	ret

0000030c <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     30c:	0f 93       	push	r16
     30e:	01 11       	cpse	r16, r1
     310:	0c c0       	rjmp	.+24     	; 0x32a <prvTestWaitCondition+0x1e>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	82 23       	and	r24, r18
     318:	93 23       	and	r25, r19
     31a:	a4 23       	and	r26, r20
     31c:	b5 23       	and	r27, r21
     31e:	89 2b       	or	r24, r25
     320:	8a 2b       	or	r24, r26
     322:	8b 2b       	or	r24, r27
     324:	79 f4       	brne	.+30     	; 0x344 <prvTestWaitCondition+0x38>
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	10 c0       	rjmp	.+32     	; 0x34a <prvTestWaitCondition+0x3e>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	82 23       	and	r24, r18
     330:	93 23       	and	r25, r19
     332:	a4 23       	and	r26, r20
     334:	b5 23       	and	r27, r21
     336:	28 17       	cp	r18, r24
     338:	39 07       	cpc	r19, r25
     33a:	4a 07       	cpc	r20, r26
     33c:	5b 07       	cpc	r21, r27
     33e:	21 f0       	breq	.+8      	; 0x348 <prvTestWaitCondition+0x3c>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	03 c0       	rjmp	.+6      	; 0x34a <prvTestWaitCondition+0x3e>
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	01 c0       	rjmp	.+2      	; 0x34a <prvTestWaitCondition+0x3e>
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0f 91       	pop	r16
     34c:	08 95       	ret

0000034e <xEventGroupCreate>:
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	8f e0       	ldi	r24, 0x0F	; 15
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	cc d1       	rcall	.+920    	; 0x6f0 <pvPortMalloc>
     358:	ec 01       	movw	r28, r24
     35a:	00 97       	sbiw	r24, 0x00	; 0
     35c:	39 f0       	breq	.+14     	; 0x36c <xEventGroupCreate+0x1e>
     35e:	fc 01       	movw	r30, r24
     360:	11 92       	st	Z+, r1
     362:	11 92       	st	Z+, r1
     364:	11 92       	st	Z+, r1
     366:	11 92       	st	Z+, r1
     368:	cf 01       	movw	r24, r30
     36a:	a7 d2       	rcall	.+1358   	; 0x8ba <vListInitialise>
     36c:	ce 01       	movw	r24, r28
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <xEventGroupWaitBits>:
     374:	2f 92       	push	r2
     376:	3f 92       	push	r3
     378:	4f 92       	push	r4
     37a:	5f 92       	push	r5
     37c:	6f 92       	push	r6
     37e:	7f 92       	push	r7
     380:	8f 92       	push	r8
     382:	9f 92       	push	r9
     384:	af 92       	push	r10
     386:	bf 92       	push	r11
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	ec 01       	movw	r28, r24
     39a:	4a 01       	movw	r8, r20
     39c:	5b 01       	movw	r10, r22
     39e:	62 2e       	mov	r6, r18
     3a0:	70 2e       	mov	r7, r16
     3a2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <vTaskSuspendAll>
     3a6:	28 80       	ld	r2, Y
     3a8:	39 80       	ldd	r3, Y+1	; 0x01
     3aa:	4a 80       	ldd	r4, Y+2	; 0x02
     3ac:	5b 80       	ldd	r5, Y+3	; 0x03
     3ae:	a5 01       	movw	r20, r10
     3b0:	94 01       	movw	r18, r8
     3b2:	c2 01       	movw	r24, r4
     3b4:	b1 01       	movw	r22, r2
     3b6:	aa df       	rcall	.-172    	; 0x30c <prvTestWaitCondition>
     3b8:	88 23       	and	r24, r24
     3ba:	a1 f0       	breq	.+40     	; 0x3e4 <xEventGroupWaitBits+0x70>
     3bc:	66 20       	and	r6, r6
     3be:	89 f1       	breq	.+98     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3c0:	d5 01       	movw	r26, r10
     3c2:	c4 01       	movw	r24, r8
     3c4:	80 95       	com	r24
     3c6:	90 95       	com	r25
     3c8:	a0 95       	com	r26
     3ca:	b0 95       	com	r27
     3cc:	82 21       	and	r24, r2
     3ce:	93 21       	and	r25, r3
     3d0:	a4 21       	and	r26, r4
     3d2:	b5 21       	and	r27, r5
     3d4:	88 83       	st	Y, r24
     3d6:	99 83       	std	Y+1, r25	; 0x01
     3d8:	aa 83       	std	Y+2, r26	; 0x02
     3da:	bb 83       	std	Y+3, r27	; 0x03
     3dc:	c1 2c       	mov	r12, r1
     3de:	d1 2c       	mov	r13, r1
     3e0:	76 01       	movw	r14, r12
     3e2:	22 c0       	rjmp	.+68     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3e4:	c1 14       	cp	r12, r1
     3e6:	d1 04       	cpc	r13, r1
     3e8:	e1 04       	cpc	r14, r1
     3ea:	f1 04       	cpc	r15, r1
     3ec:	e9 f0       	breq	.+58     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3ee:	61 10       	cpse	r6, r1
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <xEventGroupWaitBits+0x86>
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	ba 01       	movw	r22, r20
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	71 10       	cpse	r7, r1
     404:	74 60       	ori	r23, 0x04	; 4
     406:	48 29       	or	r20, r8
     408:	59 29       	or	r21, r9
     40a:	6a 29       	or	r22, r10
     40c:	7b 29       	or	r23, r11
     40e:	97 01       	movw	r18, r14
     410:	86 01       	movw	r16, r12
     412:	ce 01       	movw	r24, r28
     414:	04 96       	adiw	r24, 0x04	; 4
     416:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <vTaskPlaceOnUnorderedEventList>
     41a:	21 2c       	mov	r2, r1
     41c:	31 2c       	mov	r3, r1
     41e:	21 01       	movw	r4, r2
     420:	03 c0       	rjmp	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     422:	c1 2c       	mov	r12, r1
     424:	d1 2c       	mov	r13, r1
     426:	76 01       	movw	r14, r12
     428:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <xTaskResumeAll>
     42c:	cd 28       	or	r12, r13
     42e:	ce 28       	or	r12, r14
     430:	cf 28       	or	r12, r15
     432:	59 f1       	breq	.+86     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     434:	81 11       	cpse	r24, r1
     436:	01 c0       	rjmp	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	0e d3       	rcall	.+1564   	; 0xa56 <vPortYield>
     43a:	0e 94 3f 12 	call	0x247e	; 0x247e <uxTaskResetEventItemValue>
     43e:	6b 01       	movw	r12, r22
     440:	7c 01       	movw	r14, r24
     442:	91 fd       	sbrc	r25, 1
     444:	1f c0       	rjmp	.+62     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	0f 92       	push	r0
     44c:	c8 80       	ld	r12, Y
     44e:	d9 80       	ldd	r13, Y+1	; 0x01
     450:	ea 80       	ldd	r14, Y+2	; 0x02
     452:	fb 80       	ldd	r15, Y+3	; 0x03
     454:	07 2d       	mov	r16, r7
     456:	a5 01       	movw	r20, r10
     458:	94 01       	movw	r18, r8
     45a:	c7 01       	movw	r24, r14
     45c:	b6 01       	movw	r22, r12
     45e:	56 df       	rcall	.-340    	; 0x30c <prvTestWaitCondition>
     460:	88 23       	and	r24, r24
     462:	71 f0       	breq	.+28     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     464:	66 20       	and	r6, r6
     466:	61 f0       	breq	.+24     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     468:	80 94       	com	r8
     46a:	90 94       	com	r9
     46c:	a0 94       	com	r10
     46e:	b0 94       	com	r11
     470:	8c 20       	and	r8, r12
     472:	9d 20       	and	r9, r13
     474:	ae 20       	and	r10, r14
     476:	bf 20       	and	r11, r15
     478:	88 82       	st	Y, r8
     47a:	99 82       	std	Y+1, r9	; 0x01
     47c:	aa 82       	std	Y+2, r10	; 0x02
     47e:	bb 82       	std	Y+3, r11	; 0x03
     480:	0f 90       	pop	r0
     482:	0f be       	out	0x3f, r0	; 63
     484:	16 01       	movw	r2, r12
     486:	27 01       	movw	r4, r14
     488:	55 24       	eor	r5, r5
     48a:	c2 01       	movw	r24, r4
     48c:	b1 01       	movw	r22, r2
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	bf 90       	pop	r11
     4a0:	af 90       	pop	r10
     4a2:	9f 90       	pop	r9
     4a4:	8f 90       	pop	r8
     4a6:	7f 90       	pop	r7
     4a8:	6f 90       	pop	r6
     4aa:	5f 90       	pop	r5
     4ac:	4f 90       	pop	r4
     4ae:	3f 90       	pop	r3
     4b0:	2f 90       	pop	r2
     4b2:	08 95       	ret

000004b4 <xEventGroupClearBits>:
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	0f 92       	push	r0
     4be:	fc 01       	movw	r30, r24
     4c0:	00 81       	ld	r16, Z
     4c2:	11 81       	ldd	r17, Z+1	; 0x01
     4c4:	22 81       	ldd	r18, Z+2	; 0x02
     4c6:	33 81       	ldd	r19, Z+3	; 0x03
     4c8:	40 95       	com	r20
     4ca:	50 95       	com	r21
     4cc:	60 95       	com	r22
     4ce:	70 95       	com	r23
     4d0:	40 23       	and	r20, r16
     4d2:	51 23       	and	r21, r17
     4d4:	62 23       	and	r22, r18
     4d6:	73 23       	and	r23, r19
     4d8:	40 83       	st	Z, r20
     4da:	51 83       	std	Z+1, r21	; 0x01
     4dc:	62 83       	std	Z+2, r22	; 0x02
     4de:	73 83       	std	Z+3, r23	; 0x03
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	c9 01       	movw	r24, r18
     4e6:	b8 01       	movw	r22, r16
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret

000004ee <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     4ee:	4f 92       	push	r4
     4f0:	5f 92       	push	r5
     4f2:	6f 92       	push	r6
     4f4:	7f 92       	push	r7
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	ec 01       	movw	r28, r24
     50c:	6a 01       	movw	r12, r20
     50e:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     510:	8c 01       	movw	r16, r24
     512:	09 5f       	subi	r16, 0xF9	; 249
     514:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     516:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     51a:	eb 85       	ldd	r30, Y+11	; 0x0b
     51c:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     51e:	88 81       	ld	r24, Y
     520:	99 81       	ldd	r25, Y+1	; 0x01
     522:	aa 81       	ldd	r26, Y+2	; 0x02
     524:	bb 81       	ldd	r27, Y+3	; 0x03
     526:	c8 2a       	or	r12, r24
     528:	d9 2a       	or	r13, r25
     52a:	ea 2a       	or	r14, r26
     52c:	fb 2a       	or	r15, r27
     52e:	c8 82       	st	Y, r12
     530:	d9 82       	std	Y+1, r13	; 0x01
     532:	ea 82       	std	Y+2, r14	; 0x02
     534:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     53c:	3d c0       	rjmp	.+122    	; 0x5b8 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     53e:	a4 80       	ldd	r10, Z+4	; 0x04
     540:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     542:	80 81       	ld	r24, Z
     544:	91 81       	ldd	r25, Z+1	; 0x01
     546:	a2 81       	ldd	r26, Z+2	; 0x02
     548:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     54a:	ac 01       	movw	r20, r24
     54c:	bd 01       	movw	r22, r26
     54e:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     550:	b2 fd       	sbrc	r27, 2
     552:	0e c0       	rjmp	.+28     	; 0x570 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     554:	48 80       	ld	r4, Y
     556:	59 80       	ldd	r5, Y+1	; 0x01
     558:	6a 80       	ldd	r6, Y+2	; 0x02
     55a:	7b 80       	ldd	r7, Y+3	; 0x03
     55c:	44 22       	and	r4, r20
     55e:	55 22       	and	r5, r21
     560:	66 22       	and	r6, r22
     562:	77 22       	and	r7, r23
     564:	45 28       	or	r4, r5
     566:	46 28       	or	r4, r6
     568:	47 28       	or	r4, r7
     56a:	89 f4       	brne	.+34     	; 0x58e <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	12 c0       	rjmp	.+36     	; 0x594 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     570:	48 80       	ld	r4, Y
     572:	59 80       	ldd	r5, Y+1	; 0x01
     574:	6a 80       	ldd	r6, Y+2	; 0x02
     576:	7b 80       	ldd	r7, Y+3	; 0x03
     578:	44 22       	and	r4, r20
     57a:	55 22       	and	r5, r21
     57c:	66 22       	and	r6, r22
     57e:	77 22       	and	r7, r23
     580:	44 15       	cp	r20, r4
     582:	55 05       	cpc	r21, r5
     584:	66 05       	cpc	r22, r6
     586:	77 05       	cpc	r23, r7
     588:	21 f0       	breq	.+8      	; 0x592 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	03 c0       	rjmp	.+6      	; 0x594 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	01 c0       	rjmp	.+2      	; 0x594 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     592:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     594:	22 23       	and	r18, r18
     596:	71 f0       	breq	.+28     	; 0x5b4 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     598:	b0 ff       	sbrs	r27, 0
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     59c:	c4 2a       	or	r12, r20
     59e:	d5 2a       	or	r13, r21
     5a0:	e6 2a       	or	r14, r22
     5a2:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     5a4:	48 81       	ld	r20, Y
     5a6:	59 81       	ldd	r21, Y+1	; 0x01
     5a8:	6a 81       	ldd	r22, Y+2	; 0x02
     5aa:	7b 81       	ldd	r23, Y+3	; 0x03
     5ac:	72 60       	ori	r23, 0x02	; 2
     5ae:	cf 01       	movw	r24, r30
     5b0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     5b4:	ea 2d       	mov	r30, r10
     5b6:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     5b8:	e0 17       	cp	r30, r16
     5ba:	f1 07       	cpc	r31, r17
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <xEventGroupSetBits+0xd2>
     5be:	bf cf       	rjmp	.-130    	; 0x53e <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     5c0:	c0 94       	com	r12
     5c2:	d0 94       	com	r13
     5c4:	e0 94       	com	r14
     5c6:	f0 94       	com	r15
     5c8:	88 81       	ld	r24, Y
     5ca:	99 81       	ldd	r25, Y+1	; 0x01
     5cc:	aa 81       	ldd	r26, Y+2	; 0x02
     5ce:	bb 81       	ldd	r27, Y+3	; 0x03
     5d0:	c8 22       	and	r12, r24
     5d2:	d9 22       	and	r13, r25
     5d4:	ea 22       	and	r14, r26
     5d6:	fb 22       	and	r15, r27
     5d8:	c8 82       	st	Y, r12
     5da:	d9 82       	std	Y+1, r13	; 0x01
     5dc:	ea 82       	std	Y+2, r14	; 0x02
     5de:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     5e0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     5e4:	68 81       	ld	r22, Y
     5e6:	79 81       	ldd	r23, Y+1	; 0x01
     5e8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ea:	9b 81       	ldd	r25, Y+3	; 0x03
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	7f 90       	pop	r7
     602:	6f 90       	pop	r6
     604:	5f 90       	pop	r5
     606:	4f 90       	pop	r4
     608:	08 95       	ret

0000060a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     60a:	e6 ea       	ldi	r30, 0xA6	; 166
     60c:	f3 e0       	ldi	r31, 0x03	; 3
     60e:	aa ea       	ldi	r26, 0xAA	; 170
     610:	b3 e0       	ldi	r27, 0x03	; 3
     612:	b1 83       	std	Z+1, r27	; 0x01
     614:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     616:	13 82       	std	Z+3, r1	; 0x03
     618:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     61a:	ea e6       	ldi	r30, 0x6A	; 106
     61c:	fd e0       	ldi	r31, 0x0D	; 13
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     61e:	f0 93 a5 03 	sts	0x03A5, r31	; 0x8003a5 <pxEnd+0x1>
     622:	e0 93 a4 03 	sts	0x03A4, r30	; 0x8003a4 <pxEnd>
    pxEnd->xBlockSize = 0;
     626:	13 82       	std	Z+3, r1	; 0x03
     628:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     62a:	11 82       	std	Z+1, r1	; 0x01
     62c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     62e:	80 ec       	ldi	r24, 0xC0	; 192
     630:	99 e0       	ldi	r25, 0x09	; 9
     632:	13 96       	adiw	r26, 0x03	; 3
     634:	9c 93       	st	X, r25
     636:	8e 93       	st	-X, r24
     638:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     63a:	ed 93       	st	X+, r30
     63c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     63e:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <xMinimumEverFreeBytesRemaining+0x1>
     642:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     646:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <xFreeBytesRemaining+0x1>
     64a:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e8       	ldi	r25, 0x80	; 128
     652:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <__data_end+0x1>
     656:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <__data_end>
     65a:	08 95       	ret

0000065c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     662:	a6 ea       	ldi	r26, 0xA6	; 166
     664:	b3 e0       	ldi	r27, 0x03	; 3
     666:	01 c0       	rjmp	.+2      	; 0x66a <prvInsertBlockIntoFreeList+0xe>
     668:	df 01       	movw	r26, r30
     66a:	ed 91       	ld	r30, X+
     66c:	fc 91       	ld	r31, X
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	ec 17       	cp	r30, r28
     672:	fd 07       	cpc	r31, r29
     674:	c8 f3       	brcs	.-14     	; 0x668 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     676:	12 96       	adiw	r26, 0x02	; 2
     678:	8d 91       	ld	r24, X+
     67a:	9c 91       	ld	r25, X
     67c:	13 97       	sbiw	r26, 0x03	; 3
     67e:	9d 01       	movw	r18, r26
     680:	28 0f       	add	r18, r24
     682:	39 1f       	adc	r19, r25
     684:	c2 17       	cp	r28, r18
     686:	d3 07       	cpc	r29, r19
     688:	49 f4       	brne	.+18     	; 0x69c <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     68a:	2a 81       	ldd	r18, Y+2	; 0x02
     68c:	3b 81       	ldd	r19, Y+3	; 0x03
     68e:	82 0f       	add	r24, r18
     690:	93 1f       	adc	r25, r19
     692:	13 96       	adiw	r26, 0x03	; 3
     694:	9c 93       	st	X, r25
     696:	8e 93       	st	-X, r24
     698:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     69a:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	9b 81       	ldd	r25, Y+3	; 0x03
     6a0:	9e 01       	movw	r18, r28
     6a2:	28 0f       	add	r18, r24
     6a4:	39 1f       	adc	r19, r25
     6a6:	e2 17       	cp	r30, r18
     6a8:	f3 07       	cpc	r31, r19
     6aa:	c1 f4       	brne	.+48     	; 0x6dc <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     6ac:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <pxEnd>
     6b0:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <pxEnd+0x1>
     6b4:	e2 17       	cp	r30, r18
     6b6:	f3 07       	cpc	r31, r19
     6b8:	71 f0       	breq	.+28     	; 0x6d6 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     6ba:	22 81       	ldd	r18, Z+2	; 0x02
     6bc:	33 81       	ldd	r19, Z+3	; 0x03
     6be:	82 0f       	add	r24, r18
     6c0:	93 1f       	adc	r25, r19
     6c2:	9b 83       	std	Y+3, r25	; 0x03
     6c4:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     6c6:	ed 91       	ld	r30, X+
     6c8:	fc 91       	ld	r31, X
     6ca:	11 97       	sbiw	r26, 0x01	; 1
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	99 83       	std	Y+1, r25	; 0x01
     6d2:	88 83       	st	Y, r24
     6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     6d6:	39 83       	std	Y+1, r19	; 0x01
     6d8:	28 83       	st	Y, r18
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     6dc:	f9 83       	std	Y+1, r31	; 0x01
     6de:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     6e0:	ca 17       	cp	r28, r26
     6e2:	db 07       	cpc	r29, r27
     6e4:	11 f0       	breq	.+4      	; 0x6ea <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     6e6:	cd 93       	st	X+, r28
     6e8:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     6fe:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     702:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <pxEnd>
     706:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <pxEnd+0x1>
     70a:	89 2b       	or	r24, r25
     70c:	09 f4       	brne	.+2      	; 0x710 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     70e:	7d df       	rcall	.-262    	; 0x60a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     710:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__data_end>
     714:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <__data_end+0x1>
     718:	80 23       	and	r24, r16
     71a:	91 23       	and	r25, r17
     71c:	89 2b       	or	r24, r25
     71e:	09 f0       	breq	.+2      	; 0x722 <pvPortMalloc+0x32>
     720:	76 c0       	rjmp	.+236    	; 0x80e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     722:	01 15       	cp	r16, r1
     724:	11 05       	cpc	r17, r1
     726:	49 f0       	breq	.+18     	; 0x73a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     728:	c8 01       	movw	r24, r16
     72a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     72c:	08 17       	cp	r16, r24
     72e:	19 07       	cpc	r17, r25
     730:	18 f0       	brcs	.+6      	; 0x738 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	01 c0       	rjmp	.+2      	; 0x73a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     738:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     73a:	01 15       	cp	r16, r1
     73c:	11 05       	cpc	r17, r1
     73e:	09 f4       	brne	.+2      	; 0x742 <pvPortMalloc+0x52>
     740:	69 c0       	rjmp	.+210    	; 0x814 <pvPortMalloc+0x124>
     742:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <xFreeBytesRemaining>
     746:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <xFreeBytesRemaining+0x1>
     74a:	80 17       	cp	r24, r16
     74c:	91 07       	cpc	r25, r17
     74e:	08 f4       	brcc	.+2      	; 0x752 <pvPortMalloc+0x62>
     750:	64 c0       	rjmp	.+200    	; 0x81a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     752:	c0 91 a6 03 	lds	r28, 0x03A6	; 0x8003a6 <xStart>
     756:	d0 91 a7 03 	lds	r29, 0x03A7	; 0x8003a7 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     75a:	e6 ea       	ldi	r30, 0xA6	; 166
     75c:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     75e:	02 c0       	rjmp	.+4      	; 0x764 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     760:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     762:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	9b 81       	ldd	r25, Y+3	; 0x03
     768:	80 17       	cp	r24, r16
     76a:	91 07       	cpc	r25, r17
     76c:	20 f4       	brcc	.+8      	; 0x776 <pvPortMalloc+0x86>
     76e:	88 81       	ld	r24, Y
     770:	99 81       	ldd	r25, Y+1	; 0x01
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	a9 f7       	brne	.-22     	; 0x760 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     776:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <pxEnd>
     77a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <pxEnd+0x1>
     77e:	c8 17       	cp	r28, r24
     780:	d9 07       	cpc	r29, r25
     782:	09 f4       	brne	.+2      	; 0x786 <pvPortMalloc+0x96>
     784:	4d c0       	rjmp	.+154    	; 0x820 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     786:	e0 80       	ld	r14, Z
     788:	f1 80       	ldd	r15, Z+1	; 0x01
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	e8 0e       	add	r14, r24
     78e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     790:	88 81       	ld	r24, Y
     792:	99 81       	ldd	r25, Y+1	; 0x01
     794:	91 83       	std	Z+1, r25	; 0x01
     796:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     798:	2a 81       	ldd	r18, Y+2	; 0x02
     79a:	3b 81       	ldd	r19, Y+3	; 0x03
     79c:	20 1b       	sub	r18, r16
     79e:	31 0b       	sbc	r19, r17
     7a0:	29 30       	cpi	r18, 0x09	; 9
     7a2:	31 05       	cpc	r19, r1
     7a4:	48 f0       	brcs	.+18     	; 0x7b8 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     7a6:	ce 01       	movw	r24, r28
     7a8:	80 0f       	add	r24, r16
     7aa:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     7ac:	fc 01       	movw	r30, r24
     7ae:	33 83       	std	Z+3, r19	; 0x03
     7b0:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     7b2:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     7b4:	0a 83       	std	Y+2, r16	; 0x02
     7b6:	52 df       	rcall	.-348    	; 0x65c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     7b8:	2a 81       	ldd	r18, Y+2	; 0x02
     7ba:	3b 81       	ldd	r19, Y+3	; 0x03
     7bc:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <xFreeBytesRemaining>
     7c0:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <xFreeBytesRemaining+0x1>
     7c4:	82 1b       	sub	r24, r18
     7c6:	93 0b       	sbc	r25, r19
     7c8:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <xFreeBytesRemaining+0x1>
     7cc:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     7d0:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <xMinimumEverFreeBytesRemaining>
     7d4:	50 91 a1 03 	lds	r21, 0x03A1	; 0x8003a1 <xMinimumEverFreeBytesRemaining+0x1>
     7d8:	84 17       	cp	r24, r20
     7da:	95 07       	cpc	r25, r21
     7dc:	20 f4       	brcc	.+8      	; 0x7e6 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     7de:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <xMinimumEverFreeBytesRemaining+0x1>
     7e2:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     7e6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__data_end>
     7ea:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <__data_end+0x1>
     7ee:	28 2b       	or	r18, r24
     7f0:	39 2b       	or	r19, r25
     7f2:	3b 83       	std	Y+3, r19	; 0x03
     7f4:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     7f6:	19 82       	std	Y+1, r1	; 0x01
     7f8:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     7fa:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <xNumberOfSuccessfulAllocations>
     7fe:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <xNumberOfSuccessfulAllocations+0x1>
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <xNumberOfSuccessfulAllocations+0x1>
     808:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <xNumberOfSuccessfulAllocations>
     80c:	0b c0       	rjmp	.+22     	; 0x824 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     80e:	e1 2c       	mov	r14, r1
     810:	f1 2c       	mov	r15, r1
     812:	08 c0       	rjmp	.+16     	; 0x824 <pvPortMalloc+0x134>
     814:	e1 2c       	mov	r14, r1
     816:	f1 2c       	mov	r15, r1
     818:	05 c0       	rjmp	.+10     	; 0x824 <pvPortMalloc+0x134>
     81a:	e1 2c       	mov	r14, r1
     81c:	f1 2c       	mov	r15, r1
     81e:	02 c0       	rjmp	.+4      	; 0x824 <pvPortMalloc+0x134>
     820:	e1 2c       	mov	r14, r1
     822:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     824:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     828:	e1 14       	cp	r14, r1
     82a:	f1 04       	cpc	r15, r1
     82c:	11 f4       	brne	.+4      	; 0x832 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     82e:	0e 94 83 15 	call	0x2b06	; 0x2b06 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     832:	c7 01       	movw	r24, r14
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	08 95       	ret

00000842 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     84a:	00 97       	sbiw	r24, 0x00	; 0
     84c:	89 f1       	breq	.+98     	; 0x8b0 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     84e:	ec 01       	movw	r28, r24
     850:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     852:	4a 81       	ldd	r20, Y+2	; 0x02
     854:	5b 81       	ldd	r21, Y+3	; 0x03
     856:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <__data_end>
     85a:	30 91 9b 03 	lds	r19, 0x039B	; 0x80039b <__data_end+0x1>
     85e:	ba 01       	movw	r22, r20
     860:	62 23       	and	r22, r18
     862:	73 23       	and	r23, r19
     864:	67 2b       	or	r22, r23
     866:	21 f1       	breq	.+72     	; 0x8b0 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     868:	68 81       	ld	r22, Y
     86a:	79 81       	ldd	r23, Y+1	; 0x01
     86c:	67 2b       	or	r22, r23
     86e:	01 f5       	brne	.+64     	; 0x8b0 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     870:	20 95       	com	r18
     872:	30 95       	com	r19
     874:	24 23       	and	r18, r20
     876:	35 23       	and	r19, r21
     878:	3b 83       	std	Y+3, r19	; 0x03
     87a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     87c:	a7 d7       	rcall	.+3918   	; 0x17cc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
     880:	9b 81       	ldd	r25, Y+3	; 0x03
     882:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <xFreeBytesRemaining>
     886:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <xFreeBytesRemaining+0x1>
     88a:	82 0f       	add	r24, r18
     88c:	93 1f       	adc	r25, r19
     88e:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <xFreeBytesRemaining+0x1>
     892:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     896:	ce 01       	movw	r24, r28
     898:	e1 de       	rcall	.-574    	; 0x65c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     89a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <xNumberOfSuccessfulFrees>
     89e:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <xNumberOfSuccessfulFrees+0x1>
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <xNumberOfSuccessfulFrees+0x1>
     8a8:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     8ac:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	08 95       	ret

000008ba <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     8ba:	fc 01       	movw	r30, r24
     8bc:	03 96       	adiw	r24, 0x03	; 3
     8be:	92 83       	std	Z+2, r25	; 0x02
     8c0:	81 83       	std	Z+1, r24	; 0x01
     8c2:	4f ef       	ldi	r20, 0xFF	; 255
     8c4:	5f ef       	ldi	r21, 0xFF	; 255
     8c6:	ba 01       	movw	r22, r20
     8c8:	43 83       	std	Z+3, r20	; 0x03
     8ca:	54 83       	std	Z+4, r21	; 0x04
     8cc:	65 83       	std	Z+5, r22	; 0x05
     8ce:	76 83       	std	Z+6, r23	; 0x06
     8d0:	90 87       	std	Z+8, r25	; 0x08
     8d2:	87 83       	std	Z+7, r24	; 0x07
     8d4:	92 87       	std	Z+10, r25	; 0x0a
     8d6:	81 87       	std	Z+9, r24	; 0x09
     8d8:	10 82       	st	Z, r1
     8da:	08 95       	ret

000008dc <vListInitialiseItem>:
     8dc:	fc 01       	movw	r30, r24
     8de:	13 86       	std	Z+11, r1	; 0x0b
     8e0:	12 86       	std	Z+10, r1	; 0x0a
     8e2:	08 95       	ret

000008e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8ee:	08 81       	ld	r16, Y
     8f0:	19 81       	ldd	r17, Y+1	; 0x01
     8f2:	2a 81       	ldd	r18, Y+2	; 0x02
     8f4:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     8f6:	0f 3f       	cpi	r16, 0xFF	; 255
     8f8:	4f ef       	ldi	r20, 0xFF	; 255
     8fa:	14 07       	cpc	r17, r20
     8fc:	24 07       	cpc	r18, r20
     8fe:	34 07       	cpc	r19, r20
     900:	21 f4       	brne	.+8      	; 0x90a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     902:	fc 01       	movw	r30, r24
     904:	a1 85       	ldd	r26, Z+9	; 0x09
     906:	b2 85       	ldd	r27, Z+10	; 0x0a
     908:	11 c0       	rjmp	.+34     	; 0x92c <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     90a:	dc 01       	movw	r26, r24
     90c:	13 96       	adiw	r26, 0x03	; 3
     90e:	01 c0       	rjmp	.+2      	; 0x912 <vListInsert+0x2e>
     910:	df 01       	movw	r26, r30
     912:	14 96       	adiw	r26, 0x04	; 4
     914:	ed 91       	ld	r30, X+
     916:	fc 91       	ld	r31, X
     918:	15 97       	sbiw	r26, 0x05	; 5
     91a:	40 81       	ld	r20, Z
     91c:	51 81       	ldd	r21, Z+1	; 0x01
     91e:	62 81       	ldd	r22, Z+2	; 0x02
     920:	73 81       	ldd	r23, Z+3	; 0x03
     922:	04 17       	cp	r16, r20
     924:	15 07       	cpc	r17, r21
     926:	26 07       	cpc	r18, r22
     928:	37 07       	cpc	r19, r23
     92a:	90 f7       	brcc	.-28     	; 0x910 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     92c:	14 96       	adiw	r26, 0x04	; 4
     92e:	ed 91       	ld	r30, X+
     930:	fc 91       	ld	r31, X
     932:	15 97       	sbiw	r26, 0x05	; 5
     934:	fd 83       	std	Y+5, r31	; 0x05
     936:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     938:	d7 83       	std	Z+7, r29	; 0x07
     93a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     93c:	bf 83       	std	Y+7, r27	; 0x07
     93e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     940:	15 96       	adiw	r26, 0x05	; 5
     942:	dc 93       	st	X, r29
     944:	ce 93       	st	-X, r28
     946:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     948:	9b 87       	std	Y+11, r25	; 0x0b
     94a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     94c:	fc 01       	movw	r30, r24
     94e:	20 81       	ld	r18, Z
     950:	2f 5f       	subi	r18, 0xFF	; 255
     952:	20 83       	st	Z, r18
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     964:	a2 85       	ldd	r26, Z+10	; 0x0a
     966:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     968:	c4 81       	ldd	r28, Z+4	; 0x04
     96a:	d5 81       	ldd	r29, Z+5	; 0x05
     96c:	86 81       	ldd	r24, Z+6	; 0x06
     96e:	97 81       	ldd	r25, Z+7	; 0x07
     970:	9f 83       	std	Y+7, r25	; 0x07
     972:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     974:	c6 81       	ldd	r28, Z+6	; 0x06
     976:	d7 81       	ldd	r29, Z+7	; 0x07
     978:	84 81       	ldd	r24, Z+4	; 0x04
     97a:	95 81       	ldd	r25, Z+5	; 0x05
     97c:	9d 83       	std	Y+5, r25	; 0x05
     97e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	8d 91       	ld	r24, X+
     984:	9c 91       	ld	r25, X
     986:	12 97       	sbiw	r26, 0x02	; 2
     988:	e8 17       	cp	r30, r24
     98a:	f9 07       	cpc	r31, r25
     98c:	31 f4       	brne	.+12     	; 0x99a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     98e:	86 81       	ldd	r24, Z+6	; 0x06
     990:	97 81       	ldd	r25, Z+7	; 0x07
     992:	12 96       	adiw	r26, 0x02	; 2
     994:	9c 93       	st	X, r25
     996:	8e 93       	st	-X, r24
     998:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     99a:	13 86       	std	Z+11, r1	; 0x0b
     99c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     99e:	8c 91       	ld	r24, X
     9a0:	81 50       	subi	r24, 0x01	; 1
     9a2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     9a4:	8c 91       	ld	r24, X
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     9ac:	a8 95       	wdr
     9ae:	90 ec       	ldi	r25, 0xC0	; 192
     9b0:	88 e1       	ldi	r24, 0x18	; 24
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	a8 95       	wdr
     9b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9c2:	08 95       	ret

000009c4 <pxPortInitialiseStack>:
     9c4:	fc 01       	movw	r30, r24
     9c6:	60 83       	st	Z, r22
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	70 83       	st	Z, r23
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	10 82       	st	Z, r1
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	10 82       	st	Z, r1
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	20 e8       	ldi	r18, 0x80	; 128
     9d8:	20 83       	st	Z, r18
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	10 82       	st	Z, r1
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	10 82       	st	Z, r1
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	10 82       	st	Z, r1
     9e6:	77 97       	sbiw	r30, 0x17	; 23
     9e8:	40 83       	st	Z, r20
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	50 83       	st	Z, r21
     9ee:	86 97       	sbiw	r24, 0x26	; 38
     9f0:	08 95       	ret

000009f2 <xPortStartScheduler>:
     9f2:	dc df       	rcall	.-72     	; 0x9ac <prvSetupTimerInterrupt>
     9f4:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
     9f8:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
     9fc:	cd 91       	ld	r28, X+
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	dd 91       	ld	r29, X+
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	9f 90       	pop	r9
     a32:	8f 90       	pop	r8
     a34:	7f 90       	pop	r7
     a36:	6f 90       	pop	r6
     a38:	5f 90       	pop	r5
     a3a:	4f 90       	pop	r4
     a3c:	3f 90       	pop	r3
     a3e:	2f 90       	pop	r2
     a40:	1f 90       	pop	r1
     a42:	0f 90       	pop	r0
     a44:	0c be       	out	0x3c, r0	; 60
     a46:	0f 90       	pop	r0
     a48:	0b be       	out	0x3b, r0	; 59
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	08 95       	ret
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	08 95       	ret

00000a56 <vPortYield>:
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	0f 92       	push	r0
     a5e:	0b b6       	in	r0, 0x3b	; 59
     a60:	0f 92       	push	r0
     a62:	0c b6       	in	r0, 0x3c	; 60
     a64:	0f 92       	push	r0
     a66:	1f 92       	push	r1
     a68:	11 24       	eor	r1, r1
     a6a:	2f 92       	push	r2
     a6c:	3f 92       	push	r3
     a6e:	4f 92       	push	r4
     a70:	5f 92       	push	r5
     a72:	6f 92       	push	r6
     a74:	7f 92       	push	r7
     a76:	8f 92       	push	r8
     a78:	9f 92       	push	r9
     a7a:	af 92       	push	r10
     a7c:	bf 92       	push	r11
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
     aa6:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
     aaa:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
     aae:	0d b6       	in	r0, 0x3d	; 61
     ab0:	0d 92       	st	X+, r0
     ab2:	0e b6       	in	r0, 0x3e	; 62
     ab4:	0d 92       	st	X+, r0
     ab6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vTaskSwitchContext>
     aba:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
     abe:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
     ac2:	cd 91       	ld	r28, X+
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	dd 91       	ld	r29, X+
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	1f 90       	pop	r1
     b08:	0f 90       	pop	r0
     b0a:	0c be       	out	0x3c, r0	; 60
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	08 95       	ret

00000b18 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	0f 92       	push	r0
     b20:	0b b6       	in	r0, 0x3b	; 59
     b22:	0f 92       	push	r0
     b24:	0c b6       	in	r0, 0x3c	; 60
     b26:	0f 92       	push	r0
     b28:	1f 92       	push	r1
     b2a:	11 24       	eor	r1, r1
     b2c:	2f 92       	push	r2
     b2e:	3f 92       	push	r3
     b30:	4f 92       	push	r4
     b32:	5f 92       	push	r5
     b34:	6f 92       	push	r6
     b36:	7f 92       	push	r7
     b38:	8f 92       	push	r8
     b3a:	9f 92       	push	r9
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
     b6c:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
     b70:	0d b6       	in	r0, 0x3d	; 61
     b72:	0d 92       	st	X+, r0
     b74:	0e b6       	in	r0, 0x3e	; 62
     b76:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     b78:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     b7a:	3c d6       	rcall	.+3192   	; 0x17f4 <xTaskIncrementTick>
     b7c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     b7e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     b82:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
     b86:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
     b8a:	cd 91       	ld	r28, X+
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	dd 91       	ld	r29, X+
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	ff 91       	pop	r31
     b94:	ef 91       	pop	r30
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	9f 90       	pop	r9
     bc0:	8f 90       	pop	r8
     bc2:	7f 90       	pop	r7
     bc4:	6f 90       	pop	r6
     bc6:	5f 90       	pop	r5
     bc8:	4f 90       	pop	r4
     bca:	3f 90       	pop	r3
     bcc:	2f 90       	pop	r2
     bce:	1f 90       	pop	r1
     bd0:	0f 90       	pop	r0
     bd2:	0c be       	out	0x3c, r0	; 60
     bd4:	0f 90       	pop	r0
     bd6:	0b be       	out	0x3b, r0	; 59
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     bde:	08 95       	ret

00000be0 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     be0:	9b df       	rcall	.-202    	; 0xb18 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     be2:	18 95       	reti

00000be4 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     be4:	dc 01       	movw	r26, r24
     be6:	53 96       	adiw	r26, 0x13	; 19
     be8:	2c 91       	ld	r18, X
     bea:	53 97       	sbiw	r26, 0x13	; 19
     bec:	22 23       	and	r18, r18
     bee:	41 f0       	breq	.+16     	; 0xc00 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     bf0:	5a 96       	adiw	r26, 0x1a	; 26
     bf2:	ed 91       	ld	r30, X+
     bf4:	fc 91       	ld	r31, X
     bf6:	5b 97       	sbiw	r26, 0x1b	; 27
     bf8:	90 81       	ld	r25, Z
     bfa:	8a e0       	ldi	r24, 0x0A	; 10
     bfc:	89 1b       	sub	r24, r25
     bfe:	08 95       	ret
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	08 95       	ret

00000c04 <prvIsQueueEmpty>:
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	0f 92       	push	r0
     c0a:	fc 01       	movw	r30, r24
     c0c:	86 8d       	ldd	r24, Z+30	; 0x1e
     c0e:	81 11       	cpse	r24, r1
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <prvIsQueueEmpty+0x12>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <prvIsQueueEmpty+0x14>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	08 95       	ret

00000c1e <prvIsQueueFull>:
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	0f 92       	push	r0
     c24:	fc 01       	movw	r30, r24
     c26:	26 8d       	ldd	r18, Z+30	; 0x1e
     c28:	87 8d       	ldd	r24, Z+31	; 0x1f
     c2a:	28 13       	cpse	r18, r24
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <prvIsQueueFull+0x14>
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <prvIsQueueFull+0x16>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	08 95       	ret

00000c3a <prvCopyDataToQueue>:
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
     c44:	04 2f       	mov	r16, r20
     c46:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c48:	48 a1       	ldd	r20, Y+32	; 0x20
     c4a:	41 11       	cpse	r20, r1
     c4c:	0c c0       	rjmp	.+24     	; 0xc66 <prvCopyDataToQueue+0x2c>
     c4e:	88 81       	ld	r24, Y
     c50:	99 81       	ldd	r25, Y+1	; 0x01
     c52:	89 2b       	or	r24, r25
     c54:	09 f0       	breq	.+2      	; 0xc58 <prvCopyDataToQueue+0x1e>
     c56:	42 c0       	rjmp	.+132    	; 0xcdc <prvCopyDataToQueue+0xa2>
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <xTaskPriorityDisinherit>
     c60:	1d 82       	std	Y+5, r1	; 0x05
     c62:	1c 82       	std	Y+4, r1	; 0x04
     c64:	42 c0       	rjmp	.+132    	; 0xcea <prvCopyDataToQueue+0xb0>
     c66:	01 11       	cpse	r16, r1
     c68:	17 c0       	rjmp	.+46     	; 0xc98 <prvCopyDataToQueue+0x5e>
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	0e 94 fe 20 	call	0x41fc	; 0x41fc <memcpy>
     c74:	28 a1       	ldd	r18, Y+32	; 0x20
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	9b 81       	ldd	r25, Y+3	; 0x03
     c7a:	82 0f       	add	r24, r18
     c7c:	91 1d       	adc	r25, r1
     c7e:	9b 83       	std	Y+3, r25	; 0x03
     c80:	8a 83       	std	Y+2, r24	; 0x02
     c82:	2c 81       	ldd	r18, Y+4	; 0x04
     c84:	3d 81       	ldd	r19, Y+5	; 0x05
     c86:	82 17       	cp	r24, r18
     c88:	93 07       	cpc	r25, r19
     c8a:	50 f1       	brcs	.+84     	; 0xce0 <prvCopyDataToQueue+0xa6>
     c8c:	88 81       	ld	r24, Y
     c8e:	99 81       	ldd	r25, Y+1	; 0x01
     c90:	9b 83       	std	Y+3, r25	; 0x03
     c92:	8a 83       	std	Y+2, r24	; 0x02
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	29 c0       	rjmp	.+82     	; 0xcea <prvCopyDataToQueue+0xb0>
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	8e 81       	ldd	r24, Y+6	; 0x06
     c9c:	9f 81       	ldd	r25, Y+7	; 0x07
     c9e:	0e 94 fe 20 	call	0x41fc	; 0x41fc <memcpy>
     ca2:	88 a1       	ldd	r24, Y+32	; 0x20
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	91 95       	neg	r25
     ca8:	81 95       	neg	r24
     caa:	91 09       	sbc	r25, r1
     cac:	2e 81       	ldd	r18, Y+6	; 0x06
     cae:	3f 81       	ldd	r19, Y+7	; 0x07
     cb0:	28 0f       	add	r18, r24
     cb2:	39 1f       	adc	r19, r25
     cb4:	3f 83       	std	Y+7, r19	; 0x07
     cb6:	2e 83       	std	Y+6, r18	; 0x06
     cb8:	48 81       	ld	r20, Y
     cba:	59 81       	ldd	r21, Y+1	; 0x01
     cbc:	24 17       	cp	r18, r20
     cbe:	35 07       	cpc	r19, r21
     cc0:	30 f4       	brcc	.+12     	; 0xcce <prvCopyDataToQueue+0x94>
     cc2:	2c 81       	ldd	r18, Y+4	; 0x04
     cc4:	3d 81       	ldd	r19, Y+5	; 0x05
     cc6:	82 0f       	add	r24, r18
     cc8:	93 1f       	adc	r25, r19
     cca:	9f 83       	std	Y+7, r25	; 0x07
     ccc:	8e 83       	std	Y+6, r24	; 0x06
     cce:	02 30       	cpi	r16, 0x02	; 2
     cd0:	49 f4       	brne	.+18     	; 0xce4 <prvCopyDataToQueue+0xaa>
     cd2:	11 23       	and	r17, r17
     cd4:	49 f0       	breq	.+18     	; 0xce8 <prvCopyDataToQueue+0xae>
     cd6:	11 50       	subi	r17, 0x01	; 1
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	07 c0       	rjmp	.+14     	; 0xcea <prvCopyDataToQueue+0xb0>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	05 c0       	rjmp	.+10     	; 0xcea <prvCopyDataToQueue+0xb0>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <prvCopyDataToQueue+0xb0>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <prvCopyDataToQueue+0xb0>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	1f 5f       	subi	r17, 0xFF	; 255
     cec:	1e 8f       	std	Y+30, r17	; 0x1e
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	08 95       	ret

00000cf8 <prvCopyDataFromQueue>:
     cf8:	fc 01       	movw	r30, r24
     cfa:	40 a1       	ldd	r20, Z+32	; 0x20
     cfc:	44 23       	and	r20, r20
     cfe:	a9 f0       	breq	.+42     	; 0xd2a <prvCopyDataFromQueue+0x32>
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	26 81       	ldd	r18, Z+6	; 0x06
     d04:	37 81       	ldd	r19, Z+7	; 0x07
     d06:	24 0f       	add	r18, r20
     d08:	35 1f       	adc	r19, r21
     d0a:	37 83       	std	Z+7, r19	; 0x07
     d0c:	26 83       	std	Z+6, r18	; 0x06
     d0e:	84 81       	ldd	r24, Z+4	; 0x04
     d10:	95 81       	ldd	r25, Z+5	; 0x05
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	20 f0       	brcs	.+8      	; 0xd20 <prvCopyDataFromQueue+0x28>
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	97 83       	std	Z+7, r25	; 0x07
     d1e:	86 83       	std	Z+6, r24	; 0x06
     d20:	cb 01       	movw	r24, r22
     d22:	66 81       	ldd	r22, Z+6	; 0x06
     d24:	77 81       	ldd	r23, Z+7	; 0x07
     d26:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <memcpy>
     d2a:	08 95       	ret

00000d2c <prvUnlockQueue>:
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	0f 92       	push	r0
     d3a:	1a a1       	ldd	r17, Y+34	; 0x22
     d3c:	0b c0       	rjmp	.+22     	; 0xd54 <prvUnlockQueue+0x28>
     d3e:	8b 89       	ldd	r24, Y+19	; 0x13
     d40:	88 23       	and	r24, r24
     d42:	51 f0       	breq	.+20     	; 0xd58 <prvUnlockQueue+0x2c>
     d44:	ce 01       	movw	r24, r28
     d46:	43 96       	adiw	r24, 0x13	; 19
     d48:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <xTaskRemoveFromEventList>
     d4c:	81 11       	cpse	r24, r1
     d4e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <vTaskMissedYield>
     d52:	11 50       	subi	r17, 0x01	; 1
     d54:	11 16       	cp	r1, r17
     d56:	9c f3       	brlt	.-26     	; 0xd3e <prvUnlockQueue+0x12>
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	8a a3       	std	Y+34, r24	; 0x22
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	0f 92       	push	r0
     d66:	19 a1       	ldd	r17, Y+33	; 0x21
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <prvUnlockQueue+0x54>
     d6a:	88 85       	ldd	r24, Y+8	; 0x08
     d6c:	88 23       	and	r24, r24
     d6e:	51 f0       	breq	.+20     	; 0xd84 <prvUnlockQueue+0x58>
     d70:	ce 01       	movw	r24, r28
     d72:	08 96       	adiw	r24, 0x08	; 8
     d74:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <xTaskRemoveFromEventList>
     d78:	81 11       	cpse	r24, r1
     d7a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <vTaskMissedYield>
     d7e:	11 50       	subi	r17, 0x01	; 1
     d80:	11 16       	cp	r1, r17
     d82:	9c f3       	brlt	.-26     	; 0xd6a <prvUnlockQueue+0x3e>
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	89 a3       	std	Y+33, r24	; 0x21
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	08 95       	ret

00000d94 <xQueueGenericReset>:
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	0f 92       	push	r0
     da0:	e8 81       	ld	r30, Y
     da2:	f9 81       	ldd	r31, Y+1	; 0x01
     da4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     da6:	28 a1       	ldd	r18, Y+32	; 0x20
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	82 9f       	mul	r24, r18
     dae:	a0 01       	movw	r20, r0
     db0:	83 9f       	mul	r24, r19
     db2:	50 0d       	add	r21, r0
     db4:	92 9f       	mul	r25, r18
     db6:	50 0d       	add	r21, r0
     db8:	11 24       	eor	r1, r1
     dba:	4e 0f       	add	r20, r30
     dbc:	5f 1f       	adc	r21, r31
     dbe:	5d 83       	std	Y+5, r21	; 0x05
     dc0:	4c 83       	std	Y+4, r20	; 0x04
     dc2:	1e 8e       	std	Y+30, r1	; 0x1e
     dc4:	fb 83       	std	Y+3, r31	; 0x03
     dc6:	ea 83       	std	Y+2, r30	; 0x02
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	28 9f       	mul	r18, r24
     dcc:	a0 01       	movw	r20, r0
     dce:	29 9f       	mul	r18, r25
     dd0:	50 0d       	add	r21, r0
     dd2:	38 9f       	mul	r19, r24
     dd4:	50 0d       	add	r21, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	cf 01       	movw	r24, r30
     dda:	84 0f       	add	r24, r20
     ddc:	95 1f       	adc	r25, r21
     dde:	9f 83       	std	Y+7, r25	; 0x07
     de0:	8e 83       	std	Y+6, r24	; 0x06
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	89 a3       	std	Y+33, r24	; 0x21
     de6:	8a a3       	std	Y+34, r24	; 0x22
     de8:	61 11       	cpse	r22, r1
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <xQueueGenericReset+0x6e>
     dec:	88 85       	ldd	r24, Y+8	; 0x08
     dee:	88 23       	and	r24, r24
     df0:	71 f0       	breq	.+28     	; 0xe0e <xQueueGenericReset+0x7a>
     df2:	ce 01       	movw	r24, r28
     df4:	08 96       	adiw	r24, 0x08	; 8
     df6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <xTaskRemoveFromEventList>
     dfa:	88 23       	and	r24, r24
     dfc:	41 f0       	breq	.+16     	; 0xe0e <xQueueGenericReset+0x7a>
     dfe:	2b de       	rcall	.-938    	; 0xa56 <vPortYield>
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <xQueueGenericReset+0x7a>
     e02:	ce 01       	movw	r24, r28
     e04:	08 96       	adiw	r24, 0x08	; 8
     e06:	59 dd       	rcall	.-1358   	; 0x8ba <vListInitialise>
     e08:	ce 01       	movw	r24, r28
     e0a:	43 96       	adiw	r24, 0x13	; 19
     e0c:	56 dd       	rcall	.-1364   	; 0x8ba <vListInitialise>
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <prvInitialiseNewQueue>:
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	f8 01       	movw	r30, r16
     e20:	61 11       	cpse	r22, r1
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <prvInitialiseNewQueue+0x10>
     e24:	11 83       	std	Z+1, r17	; 0x01
     e26:	00 83       	st	Z, r16
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <prvInitialiseNewQueue+0x14>
     e2a:	51 83       	std	Z+1, r21	; 0x01
     e2c:	40 83       	st	Z, r20
     e2e:	87 8f       	std	Z+31, r24	; 0x1f
     e30:	60 a3       	std	Z+32, r22	; 0x20
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	cf 01       	movw	r24, r30
     e36:	ae df       	rcall	.-164    	; 0xd94 <xQueueGenericReset>
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	08 95       	ret

00000e3e <xQueueGenericCreate>:
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	f8 2e       	mov	r15, r24
     e4e:	e6 2e       	mov	r14, r22
     e50:	d4 2e       	mov	r13, r20
     e52:	86 9f       	mul	r24, r22
     e54:	c0 01       	movw	r24, r0
     e56:	11 24       	eor	r1, r1
     e58:	83 96       	adiw	r24, 0x23	; 35
     e5a:	4a dc       	rcall	.-1900   	; 0x6f0 <pvPortMalloc>
     e5c:	ec 01       	movw	r28, r24
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	41 f0       	breq	.+16     	; 0xe72 <xQueueGenericCreate+0x34>
     e62:	8c 01       	movw	r16, r24
     e64:	2d 2d       	mov	r18, r13
     e66:	ac 01       	movw	r20, r24
     e68:	4d 5d       	subi	r20, 0xDD	; 221
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	6e 2d       	mov	r22, r14
     e6e:	8f 2d       	mov	r24, r15
     e70:	d4 df       	rcall	.-88     	; 0xe1a <prvInitialiseNewQueue>
     e72:	ce 01       	movw	r24, r28
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	08 95       	ret

00000e84 <xQueueGenericSend>:
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	29 97       	sbiw	r28, 0x09	; 9
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	7c 01       	movw	r14, r24
     ea6:	6b 01       	movw	r12, r22
     ea8:	2e 83       	std	Y+6, r18	; 0x06
     eaa:	3f 83       	std	Y+7, r19	; 0x07
     eac:	48 87       	std	Y+8, r20	; 0x08
     eae:	59 87       	std	Y+9, r21	; 0x09
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	0f 92       	push	r0
     eb8:	f7 01       	movw	r30, r14
     eba:	96 8d       	ldd	r25, Z+30	; 0x1e
     ebc:	87 8d       	ldd	r24, Z+31	; 0x1f
     ebe:	98 17       	cp	r25, r24
     ec0:	10 f0       	brcs	.+4      	; 0xec6 <xQueueGenericSend+0x42>
     ec2:	02 30       	cpi	r16, 0x02	; 2
     ec4:	a9 f4       	brne	.+42     	; 0xef0 <xQueueGenericSend+0x6c>
     ec6:	40 2f       	mov	r20, r16
     ec8:	b6 01       	movw	r22, r12
     eca:	c7 01       	movw	r24, r14
     ecc:	b6 de       	rcall	.-660    	; 0xc3a <prvCopyDataToQueue>
     ece:	f7 01       	movw	r30, r14
     ed0:	93 89       	ldd	r25, Z+19	; 0x13
     ed2:	99 23       	and	r25, r25
     ed4:	39 f0       	breq	.+14     	; 0xee4 <xQueueGenericSend+0x60>
     ed6:	c7 01       	movw	r24, r14
     ed8:	43 96       	adiw	r24, 0x13	; 19
     eda:	b6 d7       	rcall	.+3948   	; 0x1e48 <xTaskRemoveFromEventList>
     edc:	88 23       	and	r24, r24
     ede:	21 f0       	breq	.+8      	; 0xee8 <xQueueGenericSend+0x64>
     ee0:	ba dd       	rcall	.-1164   	; 0xa56 <vPortYield>
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <xQueueGenericSend+0x64>
     ee4:	81 11       	cpse	r24, r1
     ee6:	b7 dd       	rcall	.-1170   	; 0xa56 <vPortYield>
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	48 c0       	rjmp	.+144    	; 0xf80 <xQueueGenericSend+0xfc>
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	9f 81       	ldd	r25, Y+7	; 0x07
     ef4:	a8 85       	ldd	r26, Y+8	; 0x08
     ef6:	b9 85       	ldd	r27, Y+9	; 0x09
     ef8:	89 2b       	or	r24, r25
     efa:	8a 2b       	or	r24, r26
     efc:	8b 2b       	or	r24, r27
     efe:	21 f4       	brne	.+8      	; 0xf08 <xQueueGenericSend+0x84>
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	3c c0       	rjmp	.+120    	; 0xf80 <xQueueGenericSend+0xfc>
     f08:	11 11       	cpse	r17, r1
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <xQueueGenericSend+0x92>
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskInternalSetTimeOutState>
     f14:	11 e0       	ldi	r17, 0x01	; 1
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	58 d4       	rcall	.+2224   	; 0x17cc <vTaskSuspendAll>
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	0f 92       	push	r0
     f22:	f7 01       	movw	r30, r14
     f24:	81 a1       	ldd	r24, Z+33	; 0x21
     f26:	8f 3f       	cpi	r24, 0xFF	; 255
     f28:	09 f4       	brne	.+2      	; 0xf2c <xQueueGenericSend+0xa8>
     f2a:	11 a2       	std	Z+33, r1	; 0x21
     f2c:	f7 01       	movw	r30, r14
     f2e:	82 a1       	ldd	r24, Z+34	; 0x22
     f30:	8f 3f       	cpi	r24, 0xFF	; 255
     f32:	09 f4       	brne	.+2      	; 0xf36 <xQueueGenericSend+0xb2>
     f34:	12 a2       	std	Z+34, r1	; 0x22
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	be 01       	movw	r22, r28
     f3c:	6a 5f       	subi	r22, 0xFA	; 250
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	0e 94 7e 10 	call	0x20fc	; 0x20fc <xTaskCheckForTimeOut>
     f48:	81 11       	cpse	r24, r1
     f4a:	16 c0       	rjmp	.+44     	; 0xf78 <xQueueGenericSend+0xf4>
     f4c:	c7 01       	movw	r24, r14
     f4e:	67 de       	rcall	.-818    	; 0xc1e <prvIsQueueFull>
     f50:	88 23       	and	r24, r24
     f52:	71 f0       	breq	.+28     	; 0xf70 <xQueueGenericSend+0xec>
     f54:	4e 81       	ldd	r20, Y+6	; 0x06
     f56:	5f 81       	ldd	r21, Y+7	; 0x07
     f58:	68 85       	ldd	r22, Y+8	; 0x08
     f5a:	79 85       	ldd	r23, Y+9	; 0x09
     f5c:	c7 01       	movw	r24, r14
     f5e:	08 96       	adiw	r24, 0x08	; 8
     f60:	d0 d6       	rcall	.+3488   	; 0x1d02 <vTaskPlaceOnEventList>
     f62:	c7 01       	movw	r24, r14
     f64:	e3 de       	rcall	.-570    	; 0xd2c <prvUnlockQueue>
     f66:	72 d5       	rcall	.+2788   	; 0x1a4c <xTaskResumeAll>
     f68:	81 11       	cpse	r24, r1
     f6a:	a3 cf       	rjmp	.-186    	; 0xeb2 <xQueueGenericSend+0x2e>
     f6c:	74 dd       	rcall	.-1304   	; 0xa56 <vPortYield>
     f6e:	a1 cf       	rjmp	.-190    	; 0xeb2 <xQueueGenericSend+0x2e>
     f70:	c7 01       	movw	r24, r14
     f72:	dc de       	rcall	.-584    	; 0xd2c <prvUnlockQueue>
     f74:	6b d5       	rcall	.+2774   	; 0x1a4c <xTaskResumeAll>
     f76:	9d cf       	rjmp	.-198    	; 0xeb2 <xQueueGenericSend+0x2e>
     f78:	c7 01       	movw	r24, r14
     f7a:	d8 de       	rcall	.-592    	; 0xd2c <prvUnlockQueue>
     f7c:	67 d5       	rcall	.+2766   	; 0x1a4c <xTaskResumeAll>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	29 96       	adiw	r28, 0x09	; 9
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	08 95       	ret

00000f9e <xQueueGenericSendFromISR>:
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	8a 01       	movw	r16, r20
     fac:	fc 01       	movw	r30, r24
     fae:	56 8d       	ldd	r21, Z+30	; 0x1e
     fb0:	37 8d       	ldd	r19, Z+31	; 0x1f
     fb2:	53 17       	cp	r21, r19
     fb4:	10 f0       	brcs	.+4      	; 0xfba <xQueueGenericSendFromISR+0x1c>
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	f1 f4       	brne	.+60     	; 0xff6 <xQueueGenericSendFromISR+0x58>
     fba:	42 2f       	mov	r20, r18
     fbc:	78 01       	movw	r14, r16
     fbe:	ec 01       	movw	r28, r24
     fc0:	1a a1       	ldd	r17, Y+34	; 0x22
     fc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc4:	ce 01       	movw	r24, r28
     fc6:	39 de       	rcall	.-910    	; 0xc3a <prvCopyDataToQueue>
     fc8:	1f 3f       	cpi	r17, 0xFF	; 255
     fca:	79 f4       	brne	.+30     	; 0xfea <xQueueGenericSendFromISR+0x4c>
     fcc:	8b 89       	ldd	r24, Y+19	; 0x13
     fce:	88 23       	and	r24, r24
     fd0:	a1 f0       	breq	.+40     	; 0xffa <xQueueGenericSendFromISR+0x5c>
     fd2:	ce 01       	movw	r24, r28
     fd4:	43 96       	adiw	r24, 0x13	; 19
     fd6:	38 d7       	rcall	.+3696   	; 0x1e48 <xTaskRemoveFromEventList>
     fd8:	88 23       	and	r24, r24
     fda:	89 f0       	breq	.+34     	; 0xffe <xQueueGenericSendFromISR+0x60>
     fdc:	e1 14       	cp	r14, r1
     fde:	f1 04       	cpc	r15, r1
     fe0:	81 f0       	breq	.+32     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	f7 01       	movw	r30, r14
     fe6:	80 83       	st	Z, r24
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     fea:	ff 24       	eor	r15, r15
     fec:	f3 94       	inc	r15
     fee:	f1 0e       	add	r15, r17
     ff0:	fa a2       	std	Y+34, r15	; 0x22
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	08 95       	ret

00001012 <xQueueReceive>:
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	29 97       	sbiw	r28, 0x09	; 9
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	8c 01       	movw	r16, r24
    1034:	6b 01       	movw	r12, r22
    1036:	2e 83       	std	Y+6, r18	; 0x06
    1038:	3f 83       	std	Y+7, r19	; 0x07
    103a:	48 87       	std	Y+8, r20	; 0x08
    103c:	59 87       	std	Y+9, r21	; 0x09
    103e:	e1 2c       	mov	r14, r1
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	0f 92       	push	r0
    1046:	f8 01       	movw	r30, r16
    1048:	f6 8c       	ldd	r15, Z+30	; 0x1e
    104a:	ff 20       	and	r15, r15
    104c:	91 f0       	breq	.+36     	; 0x1072 <xQueueReceive+0x60>
    104e:	b6 01       	movw	r22, r12
    1050:	c8 01       	movw	r24, r16
    1052:	52 de       	rcall	.-860    	; 0xcf8 <prvCopyDataFromQueue>
    1054:	fa 94       	dec	r15
    1056:	f8 01       	movw	r30, r16
    1058:	f6 8e       	std	Z+30, r15	; 0x1e
    105a:	80 85       	ldd	r24, Z+8	; 0x08
    105c:	88 23       	and	r24, r24
    105e:	29 f0       	breq	.+10     	; 0x106a <xQueueReceive+0x58>
    1060:	c8 01       	movw	r24, r16
    1062:	08 96       	adiw	r24, 0x08	; 8
    1064:	f1 d6       	rcall	.+3554   	; 0x1e48 <xTaskRemoveFromEventList>
    1066:	81 11       	cpse	r24, r1
    1068:	f6 dc       	rcall	.-1556   	; 0xa56 <vPortYield>
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	4e c0       	rjmp	.+156    	; 0x110e <xQueueReceive+0xfc>
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	9f 81       	ldd	r25, Y+7	; 0x07
    1076:	a8 85       	ldd	r26, Y+8	; 0x08
    1078:	b9 85       	ldd	r27, Y+9	; 0x09
    107a:	89 2b       	or	r24, r25
    107c:	8a 2b       	or	r24, r26
    107e:	8b 2b       	or	r24, r27
    1080:	21 f4       	brne	.+8      	; 0x108a <xQueueReceive+0x78>
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	42 c0       	rjmp	.+132    	; 0x110e <xQueueReceive+0xfc>
    108a:	e1 10       	cpse	r14, r1
    108c:	06 c0       	rjmp	.+12     	; 0x109a <xQueueReceive+0x88>
    108e:	ce 01       	movw	r24, r28
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskInternalSetTimeOutState>
    1096:	ee 24       	eor	r14, r14
    1098:	e3 94       	inc	r14
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	96 d3       	rcall	.+1836   	; 0x17cc <vTaskSuspendAll>
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	0f 92       	push	r0
    10a6:	f8 01       	movw	r30, r16
    10a8:	81 a1       	ldd	r24, Z+33	; 0x21
    10aa:	8f 3f       	cpi	r24, 0xFF	; 255
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <xQueueReceive+0x9e>
    10ae:	11 a2       	std	Z+33, r1	; 0x21
    10b0:	f8 01       	movw	r30, r16
    10b2:	82 a1       	ldd	r24, Z+34	; 0x22
    10b4:	8f 3f       	cpi	r24, 0xFF	; 255
    10b6:	09 f4       	brne	.+2      	; 0x10ba <xQueueReceive+0xa8>
    10b8:	12 a2       	std	Z+34, r1	; 0x22
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	be 01       	movw	r22, r28
    10c0:	6a 5f       	subi	r22, 0xFA	; 250
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <xTaskCheckForTimeOut>
    10cc:	81 11       	cpse	r24, r1
    10ce:	16 c0       	rjmp	.+44     	; 0x10fc <xQueueReceive+0xea>
    10d0:	c8 01       	movw	r24, r16
    10d2:	98 dd       	rcall	.-1232   	; 0xc04 <prvIsQueueEmpty>
    10d4:	88 23       	and	r24, r24
    10d6:	71 f0       	breq	.+28     	; 0x10f4 <xQueueReceive+0xe2>
    10d8:	4e 81       	ldd	r20, Y+6	; 0x06
    10da:	5f 81       	ldd	r21, Y+7	; 0x07
    10dc:	68 85       	ldd	r22, Y+8	; 0x08
    10de:	79 85       	ldd	r23, Y+9	; 0x09
    10e0:	c8 01       	movw	r24, r16
    10e2:	43 96       	adiw	r24, 0x13	; 19
    10e4:	0e d6       	rcall	.+3100   	; 0x1d02 <vTaskPlaceOnEventList>
    10e6:	c8 01       	movw	r24, r16
    10e8:	21 de       	rcall	.-958    	; 0xd2c <prvUnlockQueue>
    10ea:	b0 d4       	rcall	.+2400   	; 0x1a4c <xTaskResumeAll>
    10ec:	81 11       	cpse	r24, r1
    10ee:	a8 cf       	rjmp	.-176    	; 0x1040 <xQueueReceive+0x2e>
    10f0:	b2 dc       	rcall	.-1692   	; 0xa56 <vPortYield>
    10f2:	a6 cf       	rjmp	.-180    	; 0x1040 <xQueueReceive+0x2e>
    10f4:	c8 01       	movw	r24, r16
    10f6:	1a de       	rcall	.-972    	; 0xd2c <prvUnlockQueue>
    10f8:	a9 d4       	rcall	.+2386   	; 0x1a4c <xTaskResumeAll>
    10fa:	a2 cf       	rjmp	.-188    	; 0x1040 <xQueueReceive+0x2e>
    10fc:	c8 01       	movw	r24, r16
    10fe:	16 de       	rcall	.-980    	; 0xd2c <prvUnlockQueue>
    1100:	a5 d4       	rcall	.+2378   	; 0x1a4c <xTaskResumeAll>
    1102:	c8 01       	movw	r24, r16
    1104:	7f dd       	rcall	.-1282   	; 0xc04 <prvIsQueueEmpty>
    1106:	88 23       	and	r24, r24
    1108:	09 f4       	brne	.+2      	; 0x110c <xQueueReceive+0xfa>
    110a:	9a cf       	rjmp	.-204    	; 0x1040 <xQueueReceive+0x2e>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	29 96       	adiw	r28, 0x09	; 9
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	08 95       	ret

0000112c <xQueueSemaphoreTake>:
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	29 97       	sbiw	r28, 0x09	; 9
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	8c 01       	movw	r16, r24
    114a:	4e 83       	std	Y+6, r20	; 0x06
    114c:	5f 83       	std	Y+7, r21	; 0x07
    114e:	68 87       	std	Y+8, r22	; 0x08
    1150:	79 87       	std	Y+9, r23	; 0x09
    1152:	e1 2c       	mov	r14, r1
    1154:	f1 2c       	mov	r15, r1
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	0f 92       	push	r0
    115c:	f8 01       	movw	r30, r16
    115e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1160:	88 23       	and	r24, r24
    1162:	c1 f0       	breq	.+48     	; 0x1194 <xQueueSemaphoreTake+0x68>
    1164:	81 50       	subi	r24, 0x01	; 1
    1166:	86 8f       	std	Z+30, r24	; 0x1e
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
    116c:	89 2b       	or	r24, r25
    116e:	29 f4       	brne	.+10     	; 0x117a <xQueueSemaphoreTake+0x4e>
    1170:	0e 94 69 12 	call	0x24d2	; 0x24d2 <pvTaskIncrementMutexHeldCount>
    1174:	f8 01       	movw	r30, r16
    1176:	95 83       	std	Z+5, r25	; 0x05
    1178:	84 83       	std	Z+4, r24	; 0x04
    117a:	f8 01       	movw	r30, r16
    117c:	80 85       	ldd	r24, Z+8	; 0x08
    117e:	88 23       	and	r24, r24
    1180:	29 f0       	breq	.+10     	; 0x118c <xQueueSemaphoreTake+0x60>
    1182:	c8 01       	movw	r24, r16
    1184:	08 96       	adiw	r24, 0x08	; 8
    1186:	60 d6       	rcall	.+3264   	; 0x1e48 <xTaskRemoveFromEventList>
    1188:	81 11       	cpse	r24, r1
    118a:	65 dc       	rcall	.-1846   	; 0xa56 <vPortYield>
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	6b c0       	rjmp	.+214    	; 0x126a <xQueueSemaphoreTake+0x13e>
    1194:	8e 81       	ldd	r24, Y+6	; 0x06
    1196:	9f 81       	ldd	r25, Y+7	; 0x07
    1198:	a8 85       	ldd	r26, Y+8	; 0x08
    119a:	b9 85       	ldd	r27, Y+9	; 0x09
    119c:	89 2b       	or	r24, r25
    119e:	8a 2b       	or	r24, r26
    11a0:	8b 2b       	or	r24, r27
    11a2:	21 f4       	brne	.+8      	; 0x11ac <xQueueSemaphoreTake+0x80>
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	5f c0       	rjmp	.+190    	; 0x126a <xQueueSemaphoreTake+0x13e>
    11ac:	f1 10       	cpse	r15, r1
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <xQueueSemaphoreTake+0x8e>
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	92 d7       	rcall	.+3876   	; 0x20da <vTaskInternalSetTimeOutState>
    11b6:	ff 24       	eor	r15, r15
    11b8:	f3 94       	inc	r15
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	06 d3       	rcall	.+1548   	; 0x17cc <vTaskSuspendAll>
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	0f 92       	push	r0
    11c6:	f8 01       	movw	r30, r16
    11c8:	81 a1       	ldd	r24, Z+33	; 0x21
    11ca:	8f 3f       	cpi	r24, 0xFF	; 255
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <xQueueSemaphoreTake+0xa4>
    11ce:	11 a2       	std	Z+33, r1	; 0x21
    11d0:	f8 01       	movw	r30, r16
    11d2:	82 a1       	ldd	r24, Z+34	; 0x22
    11d4:	8f 3f       	cpi	r24, 0xFF	; 255
    11d6:	09 f4       	brne	.+2      	; 0x11da <xQueueSemaphoreTake+0xae>
    11d8:	12 a2       	std	Z+34, r1	; 0x22
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	be 01       	movw	r22, r28
    11e0:	6a 5f       	subi	r22, 0xFA	; 250
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	89 d7       	rcall	.+3858   	; 0x20fc <xTaskCheckForTimeOut>
    11ea:	81 11       	cpse	r24, r1
    11ec:	24 c0       	rjmp	.+72     	; 0x1236 <xQueueSemaphoreTake+0x10a>
    11ee:	c8 01       	movw	r24, r16
    11f0:	09 dd       	rcall	.-1518   	; 0xc04 <prvIsQueueEmpty>
    11f2:	88 23       	and	r24, r24
    11f4:	e1 f0       	breq	.+56     	; 0x122e <xQueueSemaphoreTake+0x102>
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	89 2b       	or	r24, r25
    11fe:	49 f4       	brne	.+18     	; 0x1212 <xQueueSemaphoreTake+0xe6>
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	0f 92       	push	r0
    1206:	84 81       	ldd	r24, Z+4	; 0x04
    1208:	95 81       	ldd	r25, Z+5	; 0x05
    120a:	f0 d7       	rcall	.+4064   	; 0x21ec <xTaskPriorityInherit>
    120c:	e8 2e       	mov	r14, r24
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	4e 81       	ldd	r20, Y+6	; 0x06
    1214:	5f 81       	ldd	r21, Y+7	; 0x07
    1216:	68 85       	ldd	r22, Y+8	; 0x08
    1218:	79 85       	ldd	r23, Y+9	; 0x09
    121a:	c8 01       	movw	r24, r16
    121c:	43 96       	adiw	r24, 0x13	; 19
    121e:	71 d5       	rcall	.+2786   	; 0x1d02 <vTaskPlaceOnEventList>
    1220:	c8 01       	movw	r24, r16
    1222:	84 dd       	rcall	.-1272   	; 0xd2c <prvUnlockQueue>
    1224:	13 d4       	rcall	.+2086   	; 0x1a4c <xTaskResumeAll>
    1226:	81 11       	cpse	r24, r1
    1228:	96 cf       	rjmp	.-212    	; 0x1156 <xQueueSemaphoreTake+0x2a>
    122a:	15 dc       	rcall	.-2006   	; 0xa56 <vPortYield>
    122c:	94 cf       	rjmp	.-216    	; 0x1156 <xQueueSemaphoreTake+0x2a>
    122e:	c8 01       	movw	r24, r16
    1230:	7d dd       	rcall	.-1286   	; 0xd2c <prvUnlockQueue>
    1232:	0c d4       	rcall	.+2072   	; 0x1a4c <xTaskResumeAll>
    1234:	90 cf       	rjmp	.-224    	; 0x1156 <xQueueSemaphoreTake+0x2a>
    1236:	c8 01       	movw	r24, r16
    1238:	79 dd       	rcall	.-1294   	; 0xd2c <prvUnlockQueue>
    123a:	08 d4       	rcall	.+2064   	; 0x1a4c <xTaskResumeAll>
    123c:	c8 01       	movw	r24, r16
    123e:	e2 dc       	rcall	.-1596   	; 0xc04 <prvIsQueueEmpty>
    1240:	88 23       	and	r24, r24
    1242:	09 f4       	brne	.+2      	; 0x1246 <xQueueSemaphoreTake+0x11a>
    1244:	88 cf       	rjmp	.-240    	; 0x1156 <xQueueSemaphoreTake+0x2a>
    1246:	ee 20       	and	r14, r14
    1248:	79 f0       	breq	.+30     	; 0x1268 <xQueueSemaphoreTake+0x13c>
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	0f 92       	push	r0
    1250:	c8 01       	movw	r24, r16
    1252:	c8 dc       	rcall	.-1648   	; 0xbe4 <prvGetDisinheritPriorityAfterTimeout>
    1254:	68 2f       	mov	r22, r24
    1256:	f8 01       	movw	r30, r16
    1258:	84 81       	ldd	r24, Z+4	; 0x04
    125a:	95 81       	ldd	r25, Z+5	; 0x05
    125c:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <vTaskPriorityDisinheritAfterTimeout>
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	01 c0       	rjmp	.+2      	; 0x126a <xQueueSemaphoreTake+0x13e>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	29 96       	adiw	r28, 0x09	; 9
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	08 95       	ret

00001284 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	0f 92       	push	r0
    1290:	89 a1       	ldd	r24, Y+33	; 0x21
    1292:	8f 3f       	cpi	r24, 0xFF	; 255
    1294:	09 f4       	brne	.+2      	; 0x1298 <vQueueWaitForMessageRestricted+0x14>
    1296:	19 a2       	std	Y+33, r1	; 0x21
    1298:	8a a1       	ldd	r24, Y+34	; 0x22
    129a:	8f 3f       	cpi	r24, 0xFF	; 255
    129c:	09 f4       	brne	.+2      	; 0x12a0 <vQueueWaitForMessageRestricted+0x1c>
    129e:	1a a2       	std	Y+34, r1	; 0x22
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    12a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12a6:	81 11       	cpse	r24, r1
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    12aa:	ce 01       	movw	r24, r28
    12ac:	43 96       	adiw	r24, 0x13	; 19
    12ae:	8a d5       	rcall	.+2836   	; 0x1dc4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    12b0:	ce 01       	movw	r24, r28
    12b2:	3c dd       	rcall	.-1416   	; 0xd2c <prvUnlockQueue>
    }
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <prvResetNextTaskUnblockTime>:
    12ba:	e0 91 a7 0d 	lds	r30, 0x0DA7	; 0x800da7 <pxDelayedTaskList>
    12be:	f0 91 a8 0d 	lds	r31, 0x0DA8	; 0x800da8 <pxDelayedTaskList+0x1>
    12c2:	80 81       	ld	r24, Z
    12c4:	81 11       	cpse	r24, r1
    12c6:	0c c0       	rjmp	.+24     	; 0x12e0 <prvResetNextTaskUnblockTime+0x26>
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	9f ef       	ldi	r25, 0xFF	; 255
    12cc:	dc 01       	movw	r26, r24
    12ce:	80 93 71 0d 	sts	0x0D71, r24	; 0x800d71 <xNextTaskUnblockTime>
    12d2:	90 93 72 0d 	sts	0x0D72, r25	; 0x800d72 <xNextTaskUnblockTime+0x1>
    12d6:	a0 93 73 0d 	sts	0x0D73, r26	; 0x800d73 <xNextTaskUnblockTime+0x2>
    12da:	b0 93 74 0d 	sts	0x0D74, r27	; 0x800d74 <xNextTaskUnblockTime+0x3>
    12de:	08 95       	ret
    12e0:	e0 91 a7 0d 	lds	r30, 0x0DA7	; 0x800da7 <pxDelayedTaskList>
    12e4:	f0 91 a8 0d 	lds	r31, 0x0DA8	; 0x800da8 <pxDelayedTaskList+0x1>
    12e8:	07 80       	ldd	r0, Z+7	; 0x07
    12ea:	f0 85       	ldd	r31, Z+8	; 0x08
    12ec:	e0 2d       	mov	r30, r0
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	a2 81       	ldd	r26, Z+2	; 0x02
    12f4:	b3 81       	ldd	r27, Z+3	; 0x03
    12f6:	80 93 71 0d 	sts	0x0D71, r24	; 0x800d71 <xNextTaskUnblockTime>
    12fa:	90 93 72 0d 	sts	0x0D72, r25	; 0x800d72 <xNextTaskUnblockTime+0x1>
    12fe:	a0 93 73 0d 	sts	0x0D73, r26	; 0x800d73 <xNextTaskUnblockTime+0x2>
    1302:	b0 93 74 0d 	sts	0x0D74, r27	; 0x800d74 <xNextTaskUnblockTime+0x3>
    1306:	08 95       	ret

00001308 <prvDeleteTCB>:
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	ec 01       	movw	r28, r24
    130e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1312:	97 da       	rcall	.-2770   	; 0x842 <vPortFree>
    1314:	ce 01       	movw	r24, r28
    1316:	95 da       	rcall	.-2774   	; 0x842 <vPortFree>
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <prvInitialiseNewTask>:
    131e:	4f 92       	push	r4
    1320:	5f 92       	push	r5
    1322:	6f 92       	push	r6
    1324:	7f 92       	push	r7
    1326:	8f 92       	push	r8
    1328:	9f 92       	push	r9
    132a:	af 92       	push	r10
    132c:	bf 92       	push	r11
    132e:	cf 92       	push	r12
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	2c 01       	movw	r4, r24
    133e:	5b 01       	movw	r10, r22
    1340:	4a 01       	movw	r8, r20
    1342:	39 01       	movw	r6, r18
    1344:	e6 01       	movw	r28, r12
    1346:	65 ea       	ldi	r22, 0xA5	; 165
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    134e:	0e 94 07 21 	call	0x420e	; 0x420e <memset>
    1352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	82 1a       	sub	r8, r18
    135a:	91 08       	sbc	r9, r1
    135c:	88 0e       	add	r8, r24
    135e:	99 1e       	adc	r9, r25
    1360:	a1 14       	cp	r10, r1
    1362:	b1 04       	cpc	r11, r1
    1364:	89 f4       	brne	.+34     	; 0x1388 <prvInitialiseNewTask+0x6a>
    1366:	15 c0       	rjmp	.+42     	; 0x1392 <prvInitialiseNewTask+0x74>
    1368:	82 2f       	mov	r24, r18
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	f5 01       	movw	r30, r10
    136e:	e8 0f       	add	r30, r24
    1370:	f9 1f       	adc	r31, r25
    1372:	30 81       	ld	r19, Z
    1374:	de 01       	movw	r26, r28
    1376:	a8 0f       	add	r26, r24
    1378:	b9 1f       	adc	r27, r25
    137a:	5d 96       	adiw	r26, 0x1d	; 29
    137c:	3c 93       	st	X, r19
    137e:	80 81       	ld	r24, Z
    1380:	88 23       	and	r24, r24
    1382:	29 f0       	breq	.+10     	; 0x138e <prvInitialiseNewTask+0x70>
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	01 c0       	rjmp	.+2      	; 0x138a <prvInitialiseNewTask+0x6c>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	20 31       	cpi	r18, 0x10	; 16
    138c:	68 f3       	brcs	.-38     	; 0x1368 <prvInitialiseNewTask+0x4a>
    138e:	1c a6       	std	Y+44, r1	; 0x2c
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <prvInitialiseNewTask+0x76>
    1392:	1d 8e       	std	Y+29, r1	; 0x1d
    1394:	0a 30       	cpi	r16, 0x0A	; 10
    1396:	08 f0       	brcs	.+2      	; 0x139a <prvInitialiseNewTask+0x7c>
    1398:	09 e0       	ldi	r16, 0x09	; 9
    139a:	0a 8f       	std	Y+26, r16	; 0x1a
    139c:	0d a7       	std	Y+45, r16	; 0x2d
    139e:	1e a6       	std	Y+46, r1	; 0x2e
    13a0:	ce 01       	movw	r24, r28
    13a2:	02 96       	adiw	r24, 0x02	; 2
    13a4:	9b da       	rcall	.-2762   	; 0x8dc <vListInitialiseItem>
    13a6:	ce 01       	movw	r24, r28
    13a8:	0e 96       	adiw	r24, 0x0e	; 14
    13aa:	98 da       	rcall	.-2768   	; 0x8dc <vListInitialiseItem>
    13ac:	db 87       	std	Y+11, r29	; 0x0b
    13ae:	ca 87       	std	Y+10, r28	; 0x0a
    13b0:	8a e0       	ldi	r24, 0x0A	; 10
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a0 e0       	ldi	r26, 0x00	; 0
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	80 1b       	sub	r24, r16
    13ba:	91 09       	sbc	r25, r1
    13bc:	a1 09       	sbc	r26, r1
    13be:	b1 09       	sbc	r27, r1
    13c0:	8e 87       	std	Y+14, r24	; 0x0e
    13c2:	9f 87       	std	Y+15, r25	; 0x0f
    13c4:	a8 8b       	std	Y+16, r26	; 0x10
    13c6:	b9 8b       	std	Y+17, r27	; 0x11
    13c8:	df 8b       	std	Y+23, r29	; 0x17
    13ca:	ce 8b       	std	Y+22, r28	; 0x16
    13cc:	84 e0       	ldi	r24, 0x04	; 4
    13ce:	fe 01       	movw	r30, r28
    13d0:	bf 96       	adiw	r30, 0x2f	; 47
    13d2:	df 01       	movw	r26, r30
    13d4:	1d 92       	st	X+, r1
    13d6:	8a 95       	dec	r24
    13d8:	e9 f7       	brne	.-6      	; 0x13d4 <prvInitialiseNewTask+0xb6>
    13da:	1b aa       	std	Y+51, r1	; 0x33
    13dc:	a3 01       	movw	r20, r6
    13de:	b2 01       	movw	r22, r4
    13e0:	c4 01       	movw	r24, r8
    13e2:	f0 da       	rcall	.-2592   	; 0x9c4 <pxPortInitialiseStack>
    13e4:	99 83       	std	Y+1, r25	; 0x01
    13e6:	88 83       	st	Y, r24
    13e8:	e1 14       	cp	r14, r1
    13ea:	f1 04       	cpc	r15, r1
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <prvInitialiseNewTask+0xd6>
    13ee:	f7 01       	movw	r30, r14
    13f0:	d1 83       	std	Z+1, r29	; 0x01
    13f2:	c0 83       	st	Z, r28
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	df 90       	pop	r13
    1400:	cf 90       	pop	r12
    1402:	bf 90       	pop	r11
    1404:	af 90       	pop	r10
    1406:	9f 90       	pop	r9
    1408:	8f 90       	pop	r8
    140a:	7f 90       	pop	r7
    140c:	6f 90       	pop	r6
    140e:	5f 90       	pop	r5
    1410:	4f 90       	pop	r4
    1412:	08 95       	ret

00001414 <prvInitialiseTaskLists>:
    1414:	cf 93       	push	r28
    1416:	c0 e0       	ldi	r28, 0x00	; 0
    1418:	08 c0       	rjmp	.+16     	; 0x142a <prvInitialiseTaskLists+0x16>
    141a:	2b e0       	ldi	r18, 0x0B	; 11
    141c:	c2 9f       	mul	r28, r18
    141e:	c0 01       	movw	r24, r0
    1420:	11 24       	eor	r1, r1
    1422:	81 54       	subi	r24, 0x41	; 65
    1424:	92 4f       	sbci	r25, 0xF2	; 242
    1426:	49 da       	rcall	.-2926   	; 0x8ba <vListInitialise>
    1428:	cf 5f       	subi	r28, 0xFF	; 255
    142a:	ca 30       	cpi	r28, 0x0A	; 10
    142c:	b0 f3       	brcs	.-20     	; 0x141a <prvInitialiseTaskLists+0x6>
    142e:	84 eb       	ldi	r24, 0xB4	; 180
    1430:	9d e0       	ldi	r25, 0x0D	; 13
    1432:	43 da       	rcall	.-2938   	; 0x8ba <vListInitialise>
    1434:	89 ea       	ldi	r24, 0xA9	; 169
    1436:	9d e0       	ldi	r25, 0x0D	; 13
    1438:	40 da       	rcall	.-2944   	; 0x8ba <vListInitialise>
    143a:	8a e9       	ldi	r24, 0x9A	; 154
    143c:	9d e0       	ldi	r25, 0x0D	; 13
    143e:	3d da       	rcall	.-2950   	; 0x8ba <vListInitialise>
    1440:	8f e8       	ldi	r24, 0x8F	; 143
    1442:	9d e0       	ldi	r25, 0x0D	; 13
    1444:	3a da       	rcall	.-2956   	; 0x8ba <vListInitialise>
    1446:	83 e8       	ldi	r24, 0x83	; 131
    1448:	9d e0       	ldi	r25, 0x0D	; 13
    144a:	37 da       	rcall	.-2962   	; 0x8ba <vListInitialise>
    144c:	84 eb       	ldi	r24, 0xB4	; 180
    144e:	9d e0       	ldi	r25, 0x0D	; 13
    1450:	90 93 a8 0d 	sts	0x0DA8, r25	; 0x800da8 <pxDelayedTaskList+0x1>
    1454:	80 93 a7 0d 	sts	0x0DA7, r24	; 0x800da7 <pxDelayedTaskList>
    1458:	89 ea       	ldi	r24, 0xA9	; 169
    145a:	9d e0       	ldi	r25, 0x0D	; 13
    145c:	90 93 a6 0d 	sts	0x0DA6, r25	; 0x800da6 <pxOverflowDelayedTaskList+0x1>
    1460:	80 93 a5 0d 	sts	0x0DA5, r24	; 0x800da5 <pxOverflowDelayedTaskList>
    1464:	cf 91       	pop	r28
    1466:	08 95       	ret

00001468 <prvAddNewTaskToReadyList>:
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	0f 92       	push	r0
    1474:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <uxCurrentNumberOfTasks>
    1478:	8f 5f       	subi	r24, 0xFF	; 255
    147a:	80 93 82 0d 	sts	0x0D82, r24	; 0x800d82 <uxCurrentNumberOfTasks>
    147e:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1482:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1486:	89 2b       	or	r24, r25
    1488:	51 f4       	brne	.+20     	; 0x149e <prvAddNewTaskToReadyList+0x36>
    148a:	d0 93 2e 0e 	sts	0x0E2E, r29	; 0x800e2e <pxCurrentTCB+0x1>
    148e:	c0 93 2d 0e 	sts	0x0E2D, r28	; 0x800e2d <pxCurrentTCB>
    1492:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <uxCurrentNumberOfTasks>
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 f4       	brne	.+36     	; 0x14be <prvAddNewTaskToReadyList+0x56>
    149a:	bc df       	rcall	.-136    	; 0x1414 <prvInitialiseTaskLists>
    149c:	10 c0       	rjmp	.+32     	; 0x14be <prvAddNewTaskToReadyList+0x56>
    149e:	80 91 7c 0d 	lds	r24, 0x0D7C	; 0x800d7c <xSchedulerRunning>
    14a2:	81 11       	cpse	r24, r1
    14a4:	0c c0       	rjmp	.+24     	; 0x14be <prvAddNewTaskToReadyList+0x56>
    14a6:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    14aa:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    14ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    14b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14b2:	89 17       	cp	r24, r25
    14b4:	20 f0       	brcs	.+8      	; 0x14be <prvAddNewTaskToReadyList+0x56>
    14b6:	d0 93 2e 0e 	sts	0x0E2E, r29	; 0x800e2e <pxCurrentTCB+0x1>
    14ba:	c0 93 2d 0e 	sts	0x0E2D, r28	; 0x800e2d <pxCurrentTCB>
    14be:	80 91 75 0d 	lds	r24, 0x0D75	; 0x800d75 <uxTaskNumber>
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	80 93 75 0d 	sts	0x0D75, r24	; 0x800d75 <uxTaskNumber>
    14c8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14ca:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    14ce:	8e 17       	cp	r24, r30
    14d0:	10 f4       	brcc	.+4      	; 0x14d6 <prvAddNewTaskToReadyList+0x6e>
    14d2:	e0 93 7d 0d 	sts	0x0D7D, r30	; 0x800d7d <uxTopReadyPriority>
    14d6:	8b e0       	ldi	r24, 0x0B	; 11
    14d8:	8e 9f       	mul	r24, r30
    14da:	f0 01       	movw	r30, r0
    14dc:	11 24       	eor	r1, r1
    14de:	e1 54       	subi	r30, 0x41	; 65
    14e0:	f2 4f       	sbci	r31, 0xF2	; 242
    14e2:	01 80       	ldd	r0, Z+1	; 0x01
    14e4:	f2 81       	ldd	r31, Z+2	; 0x02
    14e6:	e0 2d       	mov	r30, r0
    14e8:	ff 83       	std	Y+7, r31	; 0x07
    14ea:	ee 83       	std	Y+6, r30	; 0x06
    14ec:	26 81       	ldd	r18, Z+6	; 0x06
    14ee:	37 81       	ldd	r19, Z+7	; 0x07
    14f0:	39 87       	std	Y+9, r19	; 0x09
    14f2:	28 87       	std	Y+8, r18	; 0x08
    14f4:	a6 81       	ldd	r26, Z+6	; 0x06
    14f6:	b7 81       	ldd	r27, Z+7	; 0x07
    14f8:	9e 01       	movw	r18, r28
    14fa:	2e 5f       	subi	r18, 0xFE	; 254
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	15 96       	adiw	r26, 0x05	; 5
    1500:	3c 93       	st	X, r19
    1502:	2e 93       	st	-X, r18
    1504:	14 97       	sbiw	r26, 0x04	; 4
    1506:	37 83       	std	Z+7, r19	; 0x07
    1508:	26 83       	std	Z+6, r18	; 0x06
    150a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    150c:	8e 9f       	mul	r24, r30
    150e:	f0 01       	movw	r30, r0
    1510:	11 24       	eor	r1, r1
    1512:	e1 54       	subi	r30, 0x41	; 65
    1514:	f2 4f       	sbci	r31, 0xF2	; 242
    1516:	fd 87       	std	Y+13, r31	; 0x0d
    1518:	ec 87       	std	Y+12, r30	; 0x0c
    151a:	80 81       	ld	r24, Z
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	80 83       	st	Z, r24
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	80 91 7c 0d 	lds	r24, 0x0D7C	; 0x800d7c <xSchedulerRunning>
    1528:	88 23       	and	r24, r24
    152a:	49 f0       	breq	.+18     	; 0x153e <prvAddNewTaskToReadyList+0xd6>
    152c:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1530:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1534:	92 8d       	ldd	r25, Z+26	; 0x1a
    1536:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1538:	98 17       	cp	r25, r24
    153a:	08 f4       	brcc	.+2      	; 0x153e <prvAddNewTaskToReadyList+0xd6>
    153c:	8c da       	rcall	.-2792   	; 0xa56 <vPortYield>
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <prvCheckTasksWaitingTermination>:
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	1a c0       	rjmp	.+52     	; 0x157e <prvCheckTasksWaitingTermination+0x3a>
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	0f 92       	push	r0
    1550:	e0 91 96 0d 	lds	r30, 0x0D96	; 0x800d96 <xTasksWaitingTermination+0x7>
    1554:	f0 91 97 0d 	lds	r31, 0x0D97	; 0x800d97 <xTasksWaitingTermination+0x8>
    1558:	c0 85       	ldd	r28, Z+8	; 0x08
    155a:	d1 85       	ldd	r29, Z+9	; 0x09
    155c:	ce 01       	movw	r24, r28
    155e:	02 96       	adiw	r24, 0x02	; 2
    1560:	fe d9       	rcall	.-3076   	; 0x95e <uxListRemove>
    1562:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <uxCurrentNumberOfTasks>
    1566:	81 50       	subi	r24, 0x01	; 1
    1568:	80 93 82 0d 	sts	0x0D82, r24	; 0x800d82 <uxCurrentNumberOfTasks>
    156c:	80 91 8e 0d 	lds	r24, 0x0D8E	; 0x800d8e <uxDeletedTasksWaitingCleanUp>
    1570:	81 50       	subi	r24, 0x01	; 1
    1572:	80 93 8e 0d 	sts	0x0D8E, r24	; 0x800d8e <uxDeletedTasksWaitingCleanUp>
    1576:	0f 90       	pop	r0
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	ce 01       	movw	r24, r28
    157c:	c5 de       	rcall	.-630    	; 0x1308 <prvDeleteTCB>
    157e:	80 91 8e 0d 	lds	r24, 0x0D8E	; 0x800d8e <uxDeletedTasksWaitingCleanUp>
    1582:	81 11       	cpse	r24, r1
    1584:	e2 cf       	rjmp	.-60     	; 0x154a <prvCheckTasksWaitingTermination+0x6>
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <prvAddCurrentTaskToDelayedList>:
    158c:	8f 92       	push	r8
    158e:	9f 92       	push	r9
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	6b 01       	movw	r12, r22
    15a2:	7c 01       	movw	r14, r24
    15a4:	c4 2f       	mov	r28, r20
    15a6:	80 90 7e 0d 	lds	r8, 0x0D7E	; 0x800d7e <xTickCount>
    15aa:	90 90 7f 0d 	lds	r9, 0x0D7F	; 0x800d7f <xTickCount+0x1>
    15ae:	a0 90 80 0d 	lds	r10, 0x0D80	; 0x800d80 <xTickCount+0x2>
    15b2:	b0 90 81 0d 	lds	r11, 0x0D81	; 0x800d81 <xTickCount+0x3>
    15b6:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    15ba:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    15be:	02 96       	adiw	r24, 0x02	; 2
    15c0:	ce d9       	rcall	.-3172   	; 0x95e <uxListRemove>
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	c8 16       	cp	r12, r24
    15c6:	d8 06       	cpc	r13, r24
    15c8:	e8 06       	cpc	r14, r24
    15ca:	f8 06       	cpc	r15, r24
    15cc:	b1 f5       	brne	.+108    	; 0x163a <prvAddCurrentTaskToDelayedList+0xae>
    15ce:	cc 23       	and	r28, r28
    15d0:	a1 f1       	breq	.+104    	; 0x163a <prvAddCurrentTaskToDelayedList+0xae>
    15d2:	e3 e8       	ldi	r30, 0x83	; 131
    15d4:	fd e0       	ldi	r31, 0x0D	; 13
    15d6:	a1 81       	ldd	r26, Z+1	; 0x01
    15d8:	b2 81       	ldd	r27, Z+2	; 0x02
    15da:	c0 91 2d 0e 	lds	r28, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    15de:	d0 91 2e 0e 	lds	r29, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    15e2:	bf 83       	std	Y+7, r27	; 0x07
    15e4:	ae 83       	std	Y+6, r26	; 0x06
    15e6:	c0 91 2d 0e 	lds	r28, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    15ea:	d0 91 2e 0e 	lds	r29, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    15ee:	16 96       	adiw	r26, 0x06	; 6
    15f0:	8d 91       	ld	r24, X+
    15f2:	9c 91       	ld	r25, X
    15f4:	17 97       	sbiw	r26, 0x07	; 7
    15f6:	99 87       	std	Y+9, r25	; 0x09
    15f8:	88 87       	std	Y+8, r24	; 0x08
    15fa:	16 96       	adiw	r26, 0x06	; 6
    15fc:	cd 91       	ld	r28, X+
    15fe:	dc 91       	ld	r29, X
    1600:	17 97       	sbiw	r26, 0x07	; 7
    1602:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1606:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    160a:	02 96       	adiw	r24, 0x02	; 2
    160c:	9d 83       	std	Y+5, r25	; 0x05
    160e:	8c 83       	std	Y+4, r24	; 0x04
    1610:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1614:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1618:	02 96       	adiw	r24, 0x02	; 2
    161a:	17 96       	adiw	r26, 0x07	; 7
    161c:	9c 93       	st	X, r25
    161e:	8e 93       	st	-X, r24
    1620:	16 97       	sbiw	r26, 0x06	; 6
    1622:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1626:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    162a:	1d 96       	adiw	r26, 0x0d	; 13
    162c:	fc 93       	st	X, r31
    162e:	ee 93       	st	-X, r30
    1630:	1c 97       	sbiw	r26, 0x0c	; 12
    1632:	80 81       	ld	r24, Z
    1634:	8f 5f       	subi	r24, 0xFF	; 255
    1636:	80 83       	st	Z, r24
    1638:	3d c0       	rjmp	.+122    	; 0x16b4 <prvAddCurrentTaskToDelayedList+0x128>
    163a:	c8 0c       	add	r12, r8
    163c:	d9 1c       	adc	r13, r9
    163e:	ea 1c       	adc	r14, r10
    1640:	fb 1c       	adc	r15, r11
    1642:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1646:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    164a:	c2 82       	std	Z+2, r12	; 0x02
    164c:	d3 82       	std	Z+3, r13	; 0x03
    164e:	e4 82       	std	Z+4, r14	; 0x04
    1650:	f5 82       	std	Z+5, r15	; 0x05
    1652:	c8 14       	cp	r12, r8
    1654:	d9 04       	cpc	r13, r9
    1656:	ea 04       	cpc	r14, r10
    1658:	fb 04       	cpc	r15, r11
    165a:	60 f4       	brcc	.+24     	; 0x1674 <prvAddCurrentTaskToDelayedList+0xe8>
    165c:	60 91 2d 0e 	lds	r22, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1660:	70 91 2e 0e 	lds	r23, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1664:	80 91 a5 0d 	lds	r24, 0x0DA5	; 0x800da5 <pxOverflowDelayedTaskList>
    1668:	90 91 a6 0d 	lds	r25, 0x0DA6	; 0x800da6 <pxOverflowDelayedTaskList+0x1>
    166c:	6e 5f       	subi	r22, 0xFE	; 254
    166e:	7f 4f       	sbci	r23, 0xFF	; 255
    1670:	39 d9       	rcall	.-3470   	; 0x8e4 <vListInsert>
    1672:	20 c0       	rjmp	.+64     	; 0x16b4 <prvAddCurrentTaskToDelayedList+0x128>
    1674:	60 91 2d 0e 	lds	r22, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1678:	70 91 2e 0e 	lds	r23, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    167c:	80 91 a7 0d 	lds	r24, 0x0DA7	; 0x800da7 <pxDelayedTaskList>
    1680:	90 91 a8 0d 	lds	r25, 0x0DA8	; 0x800da8 <pxDelayedTaskList+0x1>
    1684:	6e 5f       	subi	r22, 0xFE	; 254
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	2d d9       	rcall	.-3494   	; 0x8e4 <vListInsert>
    168a:	80 91 71 0d 	lds	r24, 0x0D71	; 0x800d71 <xNextTaskUnblockTime>
    168e:	90 91 72 0d 	lds	r25, 0x0D72	; 0x800d72 <xNextTaskUnblockTime+0x1>
    1692:	a0 91 73 0d 	lds	r26, 0x0D73	; 0x800d73 <xNextTaskUnblockTime+0x2>
    1696:	b0 91 74 0d 	lds	r27, 0x0D74	; 0x800d74 <xNextTaskUnblockTime+0x3>
    169a:	c8 16       	cp	r12, r24
    169c:	d9 06       	cpc	r13, r25
    169e:	ea 06       	cpc	r14, r26
    16a0:	fb 06       	cpc	r15, r27
    16a2:	40 f4       	brcc	.+16     	; 0x16b4 <prvAddCurrentTaskToDelayedList+0x128>
    16a4:	c0 92 71 0d 	sts	0x0D71, r12	; 0x800d71 <xNextTaskUnblockTime>
    16a8:	d0 92 72 0d 	sts	0x0D72, r13	; 0x800d72 <xNextTaskUnblockTime+0x1>
    16ac:	e0 92 73 0d 	sts	0x0D73, r14	; 0x800d73 <xNextTaskUnblockTime+0x2>
    16b0:	f0 92 74 0d 	sts	0x0D74, r15	; 0x800d74 <xNextTaskUnblockTime+0x3>
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	ff 90       	pop	r15
    16ba:	ef 90       	pop	r14
    16bc:	df 90       	pop	r13
    16be:	cf 90       	pop	r12
    16c0:	bf 90       	pop	r11
    16c2:	af 90       	pop	r10
    16c4:	9f 90       	pop	r9
    16c6:	8f 90       	pop	r8
    16c8:	08 95       	ret

000016ca <xTaskCreate>:
    16ca:	2f 92       	push	r2
    16cc:	3f 92       	push	r3
    16ce:	4f 92       	push	r4
    16d0:	5f 92       	push	r5
    16d2:	6f 92       	push	r6
    16d4:	7f 92       	push	r7
    16d6:	8f 92       	push	r8
    16d8:	9f 92       	push	r9
    16da:	af 92       	push	r10
    16dc:	bf 92       	push	r11
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	3c 01       	movw	r6, r24
    16ee:	1b 01       	movw	r2, r22
    16f0:	4a 01       	movw	r8, r20
    16f2:	29 01       	movw	r4, r18
    16f4:	ca 01       	movw	r24, r20
    16f6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pvPortMalloc>
    16fa:	6c 01       	movw	r12, r24
    16fc:	89 2b       	or	r24, r25
    16fe:	69 f0       	breq	.+26     	; 0x171a <xTaskCreate+0x50>
    1700:	84 e3       	ldi	r24, 0x34	; 52
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pvPortMalloc>
    1708:	ec 01       	movw	r28, r24
    170a:	89 2b       	or	r24, r25
    170c:	19 f0       	breq	.+6      	; 0x1714 <xTaskCreate+0x4a>
    170e:	dc 8e       	std	Y+28, r13	; 0x1c
    1710:	cb 8e       	std	Y+27, r12	; 0x1b
    1712:	05 c0       	rjmp	.+10     	; 0x171e <xTaskCreate+0x54>
    1714:	c6 01       	movw	r24, r12
    1716:	95 d8       	rcall	.-3798   	; 0x842 <vPortFree>
    1718:	02 c0       	rjmp	.+4      	; 0x171e <xTaskCreate+0x54>
    171a:	c0 e0       	ldi	r28, 0x00	; 0
    171c:	d0 e0       	ldi	r29, 0x00	; 0
    171e:	20 97       	sbiw	r28, 0x00	; 0
    1720:	61 f0       	breq	.+24     	; 0x173a <xTaskCreate+0x70>
    1722:	a1 2c       	mov	r10, r1
    1724:	b1 2c       	mov	r11, r1
    1726:	6e 01       	movw	r12, r28
    1728:	92 01       	movw	r18, r4
    172a:	a4 01       	movw	r20, r8
    172c:	b1 01       	movw	r22, r2
    172e:	c3 01       	movw	r24, r6
    1730:	f6 dd       	rcall	.-1044   	; 0x131e <prvInitialiseNewTask>
    1732:	ce 01       	movw	r24, r28
    1734:	99 de       	rcall	.-718    	; 0x1468 <prvAddNewTaskToReadyList>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	01 c0       	rjmp	.+2      	; 0x173c <xTaskCreate+0x72>
    173a:	8f ef       	ldi	r24, 0xFF	; 255
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	7f 90       	pop	r7
    1754:	6f 90       	pop	r6
    1756:	5f 90       	pop	r5
    1758:	4f 90       	pop	r4
    175a:	3f 90       	pop	r3
    175c:	2f 90       	pop	r2
    175e:	08 95       	ret

00001760 <vTaskStartScheduler>:
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	0f 2e       	mov	r0, r31
    1768:	ff e6       	ldi	r31, 0x6F	; 111
    176a:	ef 2e       	mov	r14, r31
    176c:	fd e0       	ldi	r31, 0x0D	; 13
    176e:	ff 2e       	mov	r15, r31
    1770:	f0 2d       	mov	r31, r0
    1772:	00 e0       	ldi	r16, 0x00	; 0
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 ec       	ldi	r20, 0xC0	; 192
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	69 e8       	ldi	r22, 0x89	; 137
    177e:	72 e0       	ldi	r23, 0x02	; 2
    1780:	8d ec       	ldi	r24, 0xCD	; 205
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a2 df       	rcall	.-188    	; 0x16ca <xTaskCreate>
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	09 f4       	brne	.+2      	; 0x178c <vTaskStartScheduler+0x2c>
    178a:	3f d7       	rcall	.+3710   	; 0x260a <xTimerCreateTimerTask>
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	c1 f4       	brne	.+48     	; 0x17c0 <vTaskStartScheduler+0x60>
    1790:	f8 94       	cli
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	dc 01       	movw	r26, r24
    1798:	80 93 71 0d 	sts	0x0D71, r24	; 0x800d71 <xNextTaskUnblockTime>
    179c:	90 93 72 0d 	sts	0x0D72, r25	; 0x800d72 <xNextTaskUnblockTime+0x1>
    17a0:	a0 93 73 0d 	sts	0x0D73, r26	; 0x800d73 <xNextTaskUnblockTime+0x2>
    17a4:	b0 93 74 0d 	sts	0x0D74, r27	; 0x800d74 <xNextTaskUnblockTime+0x3>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	80 93 7c 0d 	sts	0x0D7C, r24	; 0x800d7c <xSchedulerRunning>
    17ae:	10 92 7e 0d 	sts	0x0D7E, r1	; 0x800d7e <xTickCount>
    17b2:	10 92 7f 0d 	sts	0x0D7F, r1	; 0x800d7f <xTickCount+0x1>
    17b6:	10 92 80 0d 	sts	0x0D80, r1	; 0x800d80 <xTickCount+0x2>
    17ba:	10 92 81 0d 	sts	0x0D81, r1	; 0x800d81 <xTickCount+0x3>
    17be:	19 d9       	rcall	.-3534   	; 0x9f2 <xPortStartScheduler>
    17c0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	08 95       	ret

000017cc <vTaskSuspendAll>:
    17cc:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <uxSchedulerSuspended>
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	80 93 6e 0d 	sts	0x0D6E, r24	; 0x800d6e <uxSchedulerSuspended>
    17d6:	08 95       	ret

000017d8 <xTaskGetTickCount>:
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	0f 92       	push	r0
    17de:	60 91 7e 0d 	lds	r22, 0x0D7E	; 0x800d7e <xTickCount>
    17e2:	70 91 7f 0d 	lds	r23, 0x0D7F	; 0x800d7f <xTickCount+0x1>
    17e6:	80 91 80 0d 	lds	r24, 0x0D80	; 0x800d80 <xTickCount+0x2>
    17ea:	90 91 81 0d 	lds	r25, 0x0D81	; 0x800d81 <xTickCount+0x3>
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	08 95       	ret

000017f4 <xTaskIncrementTick>:
    17f4:	cf 92       	push	r12
    17f6:	df 92       	push	r13
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <uxSchedulerSuspended>
    1804:	81 11       	cpse	r24, r1
    1806:	05 c1       	rjmp	.+522    	; 0x1a12 <xTaskIncrementTick+0x21e>
    1808:	c0 90 7e 0d 	lds	r12, 0x0D7E	; 0x800d7e <xTickCount>
    180c:	d0 90 7f 0d 	lds	r13, 0x0D7F	; 0x800d7f <xTickCount+0x1>
    1810:	e0 90 80 0d 	lds	r14, 0x0D80	; 0x800d80 <xTickCount+0x2>
    1814:	f0 90 81 0d 	lds	r15, 0x0D81	; 0x800d81 <xTickCount+0x3>
    1818:	8f ef       	ldi	r24, 0xFF	; 255
    181a:	c8 1a       	sub	r12, r24
    181c:	d8 0a       	sbc	r13, r24
    181e:	e8 0a       	sbc	r14, r24
    1820:	f8 0a       	sbc	r15, r24
    1822:	c0 92 7e 0d 	sts	0x0D7E, r12	; 0x800d7e <xTickCount>
    1826:	d0 92 7f 0d 	sts	0x0D7F, r13	; 0x800d7f <xTickCount+0x1>
    182a:	e0 92 80 0d 	sts	0x0D80, r14	; 0x800d80 <xTickCount+0x2>
    182e:	f0 92 81 0d 	sts	0x0D81, r15	; 0x800d81 <xTickCount+0x3>
    1832:	c1 14       	cp	r12, r1
    1834:	d1 04       	cpc	r13, r1
    1836:	e1 04       	cpc	r14, r1
    1838:	f1 04       	cpc	r15, r1
    183a:	b1 f4       	brne	.+44     	; 0x1868 <xTaskIncrementTick+0x74>
    183c:	80 91 a7 0d 	lds	r24, 0x0DA7	; 0x800da7 <pxDelayedTaskList>
    1840:	90 91 a8 0d 	lds	r25, 0x0DA8	; 0x800da8 <pxDelayedTaskList+0x1>
    1844:	20 91 a5 0d 	lds	r18, 0x0DA5	; 0x800da5 <pxOverflowDelayedTaskList>
    1848:	30 91 a6 0d 	lds	r19, 0x0DA6	; 0x800da6 <pxOverflowDelayedTaskList+0x1>
    184c:	30 93 a8 0d 	sts	0x0DA8, r19	; 0x800da8 <pxDelayedTaskList+0x1>
    1850:	20 93 a7 0d 	sts	0x0DA7, r18	; 0x800da7 <pxDelayedTaskList>
    1854:	90 93 a6 0d 	sts	0x0DA6, r25	; 0x800da6 <pxOverflowDelayedTaskList+0x1>
    1858:	80 93 a5 0d 	sts	0x0DA5, r24	; 0x800da5 <pxOverflowDelayedTaskList>
    185c:	80 91 76 0d 	lds	r24, 0x0D76	; 0x800d76 <xNumOfOverflows>
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	80 93 76 0d 	sts	0x0D76, r24	; 0x800d76 <xNumOfOverflows>
    1866:	29 dd       	rcall	.-1454   	; 0x12ba <prvResetNextTaskUnblockTime>
    1868:	80 91 71 0d 	lds	r24, 0x0D71	; 0x800d71 <xNextTaskUnblockTime>
    186c:	90 91 72 0d 	lds	r25, 0x0D72	; 0x800d72 <xNextTaskUnblockTime+0x1>
    1870:	a0 91 73 0d 	lds	r26, 0x0D73	; 0x800d73 <xNextTaskUnblockTime+0x2>
    1874:	b0 91 74 0d 	lds	r27, 0x0D74	; 0x800d74 <xNextTaskUnblockTime+0x3>
    1878:	c8 16       	cp	r12, r24
    187a:	d9 06       	cpc	r13, r25
    187c:	ea 06       	cpc	r14, r26
    187e:	fb 06       	cpc	r15, r27
    1880:	20 f4       	brcc	.+8      	; 0x188a <xTaskIncrementTick+0x96>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	b2 c0       	rjmp	.+356    	; 0x19ea <xTaskIncrementTick+0x1f6>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	01 c0       	rjmp	.+2      	; 0x188c <xTaskIncrementTick+0x98>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	e0 91 a7 0d 	lds	r30, 0x0DA7	; 0x800da7 <pxDelayedTaskList>
    1890:	f0 91 a8 0d 	lds	r31, 0x0DA8	; 0x800da8 <pxDelayedTaskList+0x1>
    1894:	90 81       	ld	r25, Z
    1896:	91 11       	cpse	r25, r1
    1898:	0c c0       	rjmp	.+24     	; 0x18b2 <xTaskIncrementTick+0xbe>
    189a:	4f ef       	ldi	r20, 0xFF	; 255
    189c:	5f ef       	ldi	r21, 0xFF	; 255
    189e:	ba 01       	movw	r22, r20
    18a0:	40 93 71 0d 	sts	0x0D71, r20	; 0x800d71 <xNextTaskUnblockTime>
    18a4:	50 93 72 0d 	sts	0x0D72, r21	; 0x800d72 <xNextTaskUnblockTime+0x1>
    18a8:	60 93 73 0d 	sts	0x0D73, r22	; 0x800d73 <xNextTaskUnblockTime+0x2>
    18ac:	70 93 74 0d 	sts	0x0D74, r23	; 0x800d74 <xNextTaskUnblockTime+0x3>
    18b0:	9c c0       	rjmp	.+312    	; 0x19ea <xTaskIncrementTick+0x1f6>
    18b2:	e0 91 a7 0d 	lds	r30, 0x0DA7	; 0x800da7 <pxDelayedTaskList>
    18b6:	f0 91 a8 0d 	lds	r31, 0x0DA8	; 0x800da8 <pxDelayedTaskList+0x1>
    18ba:	07 80       	ldd	r0, Z+7	; 0x07
    18bc:	f0 85       	ldd	r31, Z+8	; 0x08
    18be:	e0 2d       	mov	r30, r0
    18c0:	00 84       	ldd	r0, Z+8	; 0x08
    18c2:	f1 85       	ldd	r31, Z+9	; 0x09
    18c4:	e0 2d       	mov	r30, r0
    18c6:	42 81       	ldd	r20, Z+2	; 0x02
    18c8:	53 81       	ldd	r21, Z+3	; 0x03
    18ca:	64 81       	ldd	r22, Z+4	; 0x04
    18cc:	75 81       	ldd	r23, Z+5	; 0x05
    18ce:	c4 16       	cp	r12, r20
    18d0:	d5 06       	cpc	r13, r21
    18d2:	e6 06       	cpc	r14, r22
    18d4:	f7 06       	cpc	r15, r23
    18d6:	48 f4       	brcc	.+18     	; 0x18ea <xTaskIncrementTick+0xf6>
    18d8:	40 93 71 0d 	sts	0x0D71, r20	; 0x800d71 <xNextTaskUnblockTime>
    18dc:	50 93 72 0d 	sts	0x0D72, r21	; 0x800d72 <xNextTaskUnblockTime+0x1>
    18e0:	60 93 73 0d 	sts	0x0D73, r22	; 0x800d73 <xNextTaskUnblockTime+0x2>
    18e4:	70 93 74 0d 	sts	0x0D74, r23	; 0x800d74 <xNextTaskUnblockTime+0x3>
    18e8:	80 c0       	rjmp	.+256    	; 0x19ea <xTaskIncrementTick+0x1f6>
    18ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    18ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    18ee:	c6 81       	ldd	r28, Z+6	; 0x06
    18f0:	d7 81       	ldd	r29, Z+7	; 0x07
    18f2:	20 85       	ldd	r18, Z+8	; 0x08
    18f4:	31 85       	ldd	r19, Z+9	; 0x09
    18f6:	3f 83       	std	Y+7, r19	; 0x07
    18f8:	2e 83       	std	Y+6, r18	; 0x06
    18fa:	c0 85       	ldd	r28, Z+8	; 0x08
    18fc:	d1 85       	ldd	r29, Z+9	; 0x09
    18fe:	26 81       	ldd	r18, Z+6	; 0x06
    1900:	37 81       	ldd	r19, Z+7	; 0x07
    1902:	3d 83       	std	Y+5, r19	; 0x05
    1904:	2c 83       	std	Y+4, r18	; 0x04
    1906:	11 96       	adiw	r26, 0x01	; 1
    1908:	4d 91       	ld	r20, X+
    190a:	5c 91       	ld	r21, X
    190c:	12 97       	sbiw	r26, 0x02	; 2
    190e:	9f 01       	movw	r18, r30
    1910:	2e 5f       	subi	r18, 0xFE	; 254
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	42 17       	cp	r20, r18
    1916:	53 07       	cpc	r21, r19
    1918:	31 f4       	brne	.+12     	; 0x1926 <xTaskIncrementTick+0x132>
    191a:	40 85       	ldd	r20, Z+8	; 0x08
    191c:	51 85       	ldd	r21, Z+9	; 0x09
    191e:	12 96       	adiw	r26, 0x02	; 2
    1920:	5c 93       	st	X, r21
    1922:	4e 93       	st	-X, r20
    1924:	11 97       	sbiw	r26, 0x01	; 1
    1926:	15 86       	std	Z+13, r1	; 0x0d
    1928:	14 86       	std	Z+12, r1	; 0x0c
    192a:	9c 91       	ld	r25, X
    192c:	91 50       	subi	r25, 0x01	; 1
    192e:	9c 93       	st	X, r25
    1930:	a0 8d       	ldd	r26, Z+24	; 0x18
    1932:	b1 8d       	ldd	r27, Z+25	; 0x19
    1934:	10 97       	sbiw	r26, 0x00	; 0
    1936:	09 f1       	breq	.+66     	; 0x197a <xTaskIncrementTick+0x186>
    1938:	c2 89       	ldd	r28, Z+18	; 0x12
    193a:	d3 89       	ldd	r29, Z+19	; 0x13
    193c:	44 89       	ldd	r20, Z+20	; 0x14
    193e:	55 89       	ldd	r21, Z+21	; 0x15
    1940:	5f 83       	std	Y+7, r21	; 0x07
    1942:	4e 83       	std	Y+6, r20	; 0x06
    1944:	c4 89       	ldd	r28, Z+20	; 0x14
    1946:	d5 89       	ldd	r29, Z+21	; 0x15
    1948:	42 89       	ldd	r20, Z+18	; 0x12
    194a:	53 89       	ldd	r21, Z+19	; 0x13
    194c:	5d 83       	std	Y+5, r21	; 0x05
    194e:	4c 83       	std	Y+4, r20	; 0x04
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	6d 91       	ld	r22, X+
    1954:	7c 91       	ld	r23, X
    1956:	12 97       	sbiw	r26, 0x02	; 2
    1958:	af 01       	movw	r20, r30
    195a:	42 5f       	subi	r20, 0xF2	; 242
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	64 17       	cp	r22, r20
    1960:	75 07       	cpc	r23, r21
    1962:	31 f4       	brne	.+12     	; 0x1970 <xTaskIncrementTick+0x17c>
    1964:	44 89       	ldd	r20, Z+20	; 0x14
    1966:	55 89       	ldd	r21, Z+21	; 0x15
    1968:	12 96       	adiw	r26, 0x02	; 2
    196a:	5c 93       	st	X, r21
    196c:	4e 93       	st	-X, r20
    196e:	11 97       	sbiw	r26, 0x01	; 1
    1970:	11 8e       	std	Z+25, r1	; 0x19
    1972:	10 8e       	std	Z+24, r1	; 0x18
    1974:	9c 91       	ld	r25, X
    1976:	91 50       	subi	r25, 0x01	; 1
    1978:	9c 93       	st	X, r25
    197a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    197c:	90 91 7d 0d 	lds	r25, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    1980:	9a 17       	cp	r25, r26
    1982:	10 f4       	brcc	.+4      	; 0x1988 <xTaskIncrementTick+0x194>
    1984:	a0 93 7d 0d 	sts	0x0D7D, r26	; 0x800d7d <uxTopReadyPriority>
    1988:	9b e0       	ldi	r25, 0x0B	; 11
    198a:	9a 9f       	mul	r25, r26
    198c:	d0 01       	movw	r26, r0
    198e:	11 24       	eor	r1, r1
    1990:	a1 54       	subi	r26, 0x41	; 65
    1992:	b2 4f       	sbci	r27, 0xF2	; 242
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	0d 90       	ld	r0, X+
    1998:	bc 91       	ld	r27, X
    199a:	a0 2d       	mov	r26, r0
    199c:	b7 83       	std	Z+7, r27	; 0x07
    199e:	a6 83       	std	Z+6, r26	; 0x06
    19a0:	16 96       	adiw	r26, 0x06	; 6
    19a2:	4d 91       	ld	r20, X+
    19a4:	5c 91       	ld	r21, X
    19a6:	17 97       	sbiw	r26, 0x07	; 7
    19a8:	51 87       	std	Z+9, r21	; 0x09
    19aa:	40 87       	std	Z+8, r20	; 0x08
    19ac:	16 96       	adiw	r26, 0x06	; 6
    19ae:	cd 91       	ld	r28, X+
    19b0:	dc 91       	ld	r29, X
    19b2:	17 97       	sbiw	r26, 0x07	; 7
    19b4:	3d 83       	std	Y+5, r19	; 0x05
    19b6:	2c 83       	std	Y+4, r18	; 0x04
    19b8:	17 96       	adiw	r26, 0x07	; 7
    19ba:	3c 93       	st	X, r19
    19bc:	2e 93       	st	-X, r18
    19be:	16 97       	sbiw	r26, 0x06	; 6
    19c0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    19c2:	9a 9f       	mul	r25, r26
    19c4:	d0 01       	movw	r26, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	a1 54       	subi	r26, 0x41	; 65
    19ca:	b2 4f       	sbci	r27, 0xF2	; 242
    19cc:	b5 87       	std	Z+13, r27	; 0x0d
    19ce:	a4 87       	std	Z+12, r26	; 0x0c
    19d0:	9c 91       	ld	r25, X
    19d2:	9f 5f       	subi	r25, 0xFF	; 255
    19d4:	9c 93       	st	X, r25
    19d6:	22 8d       	ldd	r18, Z+26	; 0x1a
    19d8:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    19dc:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    19e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    19e2:	29 17       	cp	r18, r25
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <xTaskIncrementTick+0x1f4>
    19e6:	4f cf       	rjmp	.-354    	; 0x1886 <xTaskIncrementTick+0x92>
    19e8:	51 cf       	rjmp	.-350    	; 0x188c <xTaskIncrementTick+0x98>
    19ea:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    19ee:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    19f2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    19f4:	9b e0       	ldi	r25, 0x0B	; 11
    19f6:	e9 9f       	mul	r30, r25
    19f8:	f0 01       	movw	r30, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	e1 54       	subi	r30, 0x41	; 65
    19fe:	f2 4f       	sbci	r31, 0xF2	; 242
    1a00:	90 81       	ld	r25, Z
    1a02:	92 30       	cpi	r25, 0x02	; 2
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <xTaskIncrementTick+0x214>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 91 77 0d 	lds	r25, 0x0D77	; 0x800d77 <xYieldPending>
    1a0c:	91 11       	cpse	r25, r1
    1a0e:	16 c0       	rjmp	.+44     	; 0x1a3c <xTaskIncrementTick+0x248>
    1a10:	16 c0       	rjmp	.+44     	; 0x1a3e <xTaskIncrementTick+0x24a>
    1a12:	80 91 78 0d 	lds	r24, 0x0D78	; 0x800d78 <xPendedTicks>
    1a16:	90 91 79 0d 	lds	r25, 0x0D79	; 0x800d79 <xPendedTicks+0x1>
    1a1a:	a0 91 7a 0d 	lds	r26, 0x0D7A	; 0x800d7a <xPendedTicks+0x2>
    1a1e:	b0 91 7b 0d 	lds	r27, 0x0D7B	; 0x800d7b <xPendedTicks+0x3>
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	a1 1d       	adc	r26, r1
    1a26:	b1 1d       	adc	r27, r1
    1a28:	80 93 78 0d 	sts	0x0D78, r24	; 0x800d78 <xPendedTicks>
    1a2c:	90 93 79 0d 	sts	0x0D79, r25	; 0x800d79 <xPendedTicks+0x1>
    1a30:	a0 93 7a 0d 	sts	0x0D7A, r26	; 0x800d7a <xPendedTicks+0x2>
    1a34:	b0 93 7b 0d 	sts	0x0D7B, r27	; 0x800d7b <xPendedTicks+0x3>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <xTaskIncrementTick+0x24a>
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	08 95       	ret

00001a4c <xTaskResumeAll>:
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	0f 92       	push	r0
    1a5e:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <uxSchedulerSuspended>
    1a62:	81 50       	subi	r24, 0x01	; 1
    1a64:	80 93 6e 0d 	sts	0x0D6E, r24	; 0x800d6e <uxSchedulerSuspended>
    1a68:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <uxSchedulerSuspended>
    1a6c:	81 11       	cpse	r24, r1
    1a6e:	be c0       	rjmp	.+380    	; 0x1bec <xTaskResumeAll+0x1a0>
    1a70:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <uxCurrentNumberOfTasks>
    1a74:	81 11       	cpse	r24, r1
    1a76:	88 c0       	rjmp	.+272    	; 0x1b88 <xTaskResumeAll+0x13c>
    1a78:	bc c0       	rjmp	.+376    	; 0x1bf2 <xTaskResumeAll+0x1a6>
    1a7a:	e0 91 a1 0d 	lds	r30, 0x0DA1	; 0x800da1 <xPendingReadyList+0x7>
    1a7e:	f0 91 a2 0d 	lds	r31, 0x0DA2	; 0x800da2 <xPendingReadyList+0x8>
    1a82:	00 84       	ldd	r0, Z+8	; 0x08
    1a84:	f1 85       	ldd	r31, Z+9	; 0x09
    1a86:	e0 2d       	mov	r30, r0
    1a88:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a8a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a8c:	c2 89       	ldd	r28, Z+18	; 0x12
    1a8e:	d3 89       	ldd	r29, Z+19	; 0x13
    1a90:	84 89       	ldd	r24, Z+20	; 0x14
    1a92:	95 89       	ldd	r25, Z+21	; 0x15
    1a94:	9f 83       	std	Y+7, r25	; 0x07
    1a96:	8e 83       	std	Y+6, r24	; 0x06
    1a98:	c4 89       	ldd	r28, Z+20	; 0x14
    1a9a:	d5 89       	ldd	r29, Z+21	; 0x15
    1a9c:	82 89       	ldd	r24, Z+18	; 0x12
    1a9e:	93 89       	ldd	r25, Z+19	; 0x13
    1aa0:	9d 83       	std	Y+5, r25	; 0x05
    1aa2:	8c 83       	std	Y+4, r24	; 0x04
    1aa4:	11 96       	adiw	r26, 0x01	; 1
    1aa6:	2d 91       	ld	r18, X+
    1aa8:	3c 91       	ld	r19, X
    1aaa:	12 97       	sbiw	r26, 0x02	; 2
    1aac:	cf 01       	movw	r24, r30
    1aae:	0e 96       	adiw	r24, 0x0e	; 14
    1ab0:	28 17       	cp	r18, r24
    1ab2:	39 07       	cpc	r19, r25
    1ab4:	31 f4       	brne	.+12     	; 0x1ac2 <xTaskResumeAll+0x76>
    1ab6:	84 89       	ldd	r24, Z+20	; 0x14
    1ab8:	95 89       	ldd	r25, Z+21	; 0x15
    1aba:	12 96       	adiw	r26, 0x02	; 2
    1abc:	9c 93       	st	X, r25
    1abe:	8e 93       	st	-X, r24
    1ac0:	11 97       	sbiw	r26, 0x01	; 1
    1ac2:	11 8e       	std	Z+25, r1	; 0x19
    1ac4:	10 8e       	std	Z+24, r1	; 0x18
    1ac6:	8c 91       	ld	r24, X
    1ac8:	81 50       	subi	r24, 0x01	; 1
    1aca:	8c 93       	st	X, r24
    1acc:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ace:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ad0:	c6 81       	ldd	r28, Z+6	; 0x06
    1ad2:	d7 81       	ldd	r29, Z+7	; 0x07
    1ad4:	80 85       	ldd	r24, Z+8	; 0x08
    1ad6:	91 85       	ldd	r25, Z+9	; 0x09
    1ad8:	9f 83       	std	Y+7, r25	; 0x07
    1ada:	8e 83       	std	Y+6, r24	; 0x06
    1adc:	c0 85       	ldd	r28, Z+8	; 0x08
    1ade:	d1 85       	ldd	r29, Z+9	; 0x09
    1ae0:	86 81       	ldd	r24, Z+6	; 0x06
    1ae2:	97 81       	ldd	r25, Z+7	; 0x07
    1ae4:	9d 83       	std	Y+5, r25	; 0x05
    1ae6:	8c 83       	std	Y+4, r24	; 0x04
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	8d 91       	ld	r24, X+
    1aec:	9c 91       	ld	r25, X
    1aee:	12 97       	sbiw	r26, 0x02	; 2
    1af0:	9f 01       	movw	r18, r30
    1af2:	2e 5f       	subi	r18, 0xFE	; 254
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
    1af6:	82 17       	cp	r24, r18
    1af8:	93 07       	cpc	r25, r19
    1afa:	31 f4       	brne	.+12     	; 0x1b08 <xTaskResumeAll+0xbc>
    1afc:	80 85       	ldd	r24, Z+8	; 0x08
    1afe:	91 85       	ldd	r25, Z+9	; 0x09
    1b00:	12 96       	adiw	r26, 0x02	; 2
    1b02:	9c 93       	st	X, r25
    1b04:	8e 93       	st	-X, r24
    1b06:	11 97       	sbiw	r26, 0x01	; 1
    1b08:	15 86       	std	Z+13, r1	; 0x0d
    1b0a:	14 86       	std	Z+12, r1	; 0x0c
    1b0c:	8c 91       	ld	r24, X
    1b0e:	81 50       	subi	r24, 0x01	; 1
    1b10:	8c 93       	st	X, r24
    1b12:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b14:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    1b18:	8a 17       	cp	r24, r26
    1b1a:	10 f4       	brcc	.+4      	; 0x1b20 <xTaskResumeAll+0xd4>
    1b1c:	a0 93 7d 0d 	sts	0x0D7D, r26	; 0x800d7d <uxTopReadyPriority>
    1b20:	8b e0       	ldi	r24, 0x0B	; 11
    1b22:	8a 9f       	mul	r24, r26
    1b24:	d0 01       	movw	r26, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	a1 54       	subi	r26, 0x41	; 65
    1b2a:	b2 4f       	sbci	r27, 0xF2	; 242
    1b2c:	11 96       	adiw	r26, 0x01	; 1
    1b2e:	0d 90       	ld	r0, X+
    1b30:	bc 91       	ld	r27, X
    1b32:	a0 2d       	mov	r26, r0
    1b34:	b7 83       	std	Z+7, r27	; 0x07
    1b36:	a6 83       	std	Z+6, r26	; 0x06
    1b38:	16 96       	adiw	r26, 0x06	; 6
    1b3a:	4d 91       	ld	r20, X+
    1b3c:	5c 91       	ld	r21, X
    1b3e:	17 97       	sbiw	r26, 0x07	; 7
    1b40:	51 87       	std	Z+9, r21	; 0x09
    1b42:	40 87       	std	Z+8, r20	; 0x08
    1b44:	16 96       	adiw	r26, 0x06	; 6
    1b46:	cd 91       	ld	r28, X+
    1b48:	dc 91       	ld	r29, X
    1b4a:	17 97       	sbiw	r26, 0x07	; 7
    1b4c:	3d 83       	std	Y+5, r19	; 0x05
    1b4e:	2c 83       	std	Y+4, r18	; 0x04
    1b50:	17 96       	adiw	r26, 0x07	; 7
    1b52:	3c 93       	st	X, r19
    1b54:	2e 93       	st	-X, r18
    1b56:	16 97       	sbiw	r26, 0x06	; 6
    1b58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b5a:	8a 9f       	mul	r24, r26
    1b5c:	d0 01       	movw	r26, r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	a1 54       	subi	r26, 0x41	; 65
    1b62:	b2 4f       	sbci	r27, 0xF2	; 242
    1b64:	b5 87       	std	Z+13, r27	; 0x0d
    1b66:	a4 87       	std	Z+12, r26	; 0x0c
    1b68:	8c 91       	ld	r24, X
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	8c 93       	st	X, r24
    1b6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b70:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1b74:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1b78:	5a 96       	adiw	r26, 0x1a	; 26
    1b7a:	8c 91       	ld	r24, X
    1b7c:	98 17       	cp	r25, r24
    1b7e:	30 f0       	brcs	.+12     	; 0x1b8c <xTaskResumeAll+0x140>
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 93 77 0d 	sts	0x0D77, r24	; 0x800d77 <xYieldPending>
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <xTaskResumeAll+0x140>
    1b88:	e0 e0       	ldi	r30, 0x00	; 0
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <xPendingReadyList>
    1b90:	81 11       	cpse	r24, r1
    1b92:	73 cf       	rjmp	.-282    	; 0x1a7a <xTaskResumeAll+0x2e>
    1b94:	ef 2b       	or	r30, r31
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <xTaskResumeAll+0x14e>
    1b98:	90 db       	rcall	.-2272   	; 0x12ba <prvResetNextTaskUnblockTime>
    1b9a:	c0 90 78 0d 	lds	r12, 0x0D78	; 0x800d78 <xPendedTicks>
    1b9e:	d0 90 79 0d 	lds	r13, 0x0D79	; 0x800d79 <xPendedTicks+0x1>
    1ba2:	e0 90 7a 0d 	lds	r14, 0x0D7A	; 0x800d7a <xPendedTicks+0x2>
    1ba6:	f0 90 7b 0d 	lds	r15, 0x0D7B	; 0x800d7b <xPendedTicks+0x3>
    1baa:	c1 14       	cp	r12, r1
    1bac:	d1 04       	cpc	r13, r1
    1bae:	e1 04       	cpc	r14, r1
    1bb0:	f1 04       	cpc	r15, r1
    1bb2:	a1 f0       	breq	.+40     	; 0x1bdc <xTaskResumeAll+0x190>
    1bb4:	1f de       	rcall	.-962    	; 0x17f4 <xTaskIncrementTick>
    1bb6:	88 23       	and	r24, r24
    1bb8:	19 f0       	breq	.+6      	; 0x1bc0 <xTaskResumeAll+0x174>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	80 93 77 0d 	sts	0x0D77, r24	; 0x800d77 <xYieldPending>
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	c8 1a       	sub	r12, r24
    1bc4:	d1 08       	sbc	r13, r1
    1bc6:	e1 08       	sbc	r14, r1
    1bc8:	f1 08       	sbc	r15, r1
    1bca:	a1 f7       	brne	.-24     	; 0x1bb4 <xTaskResumeAll+0x168>
    1bcc:	10 92 78 0d 	sts	0x0D78, r1	; 0x800d78 <xPendedTicks>
    1bd0:	10 92 79 0d 	sts	0x0D79, r1	; 0x800d79 <xPendedTicks+0x1>
    1bd4:	10 92 7a 0d 	sts	0x0D7A, r1	; 0x800d7a <xPendedTicks+0x2>
    1bd8:	10 92 7b 0d 	sts	0x0D7B, r1	; 0x800d7b <xPendedTicks+0x3>
    1bdc:	80 91 77 0d 	lds	r24, 0x0D77	; 0x800d77 <xYieldPending>
    1be0:	88 23       	and	r24, r24
    1be2:	31 f0       	breq	.+12     	; 0x1bf0 <xTaskResumeAll+0x1a4>
    1be4:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <xTaskResumeAll+0x1a6>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	01 c0       	rjmp	.+2      	; 0x1bf2 <xTaskResumeAll+0x1a6>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	08 95       	ret

00001c04 <vTaskDelay>:
    1c04:	cf 92       	push	r12
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	6b 01       	movw	r12, r22
    1c0e:	7c 01       	movw	r14, r24
    1c10:	67 2b       	or	r22, r23
    1c12:	68 2b       	or	r22, r24
    1c14:	69 2b       	or	r22, r25
    1c16:	39 f0       	breq	.+14     	; 0x1c26 <vTaskDelay+0x22>
    1c18:	d9 dd       	rcall	.-1102   	; 0x17cc <vTaskSuspendAll>
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	c7 01       	movw	r24, r14
    1c1e:	b6 01       	movw	r22, r12
    1c20:	b5 dc       	rcall	.-1686   	; 0x158c <prvAddCurrentTaskToDelayedList>
    1c22:	14 df       	rcall	.-472    	; 0x1a4c <xTaskResumeAll>
    1c24:	01 c0       	rjmp	.+2      	; 0x1c28 <vTaskDelay+0x24>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	81 11       	cpse	r24, r1
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <vTaskDelay+0x2c>
    1c2c:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    1c30:	ff 90       	pop	r15
    1c32:	ef 90       	pop	r14
    1c34:	df 90       	pop	r13
    1c36:	cf 90       	pop	r12
    1c38:	08 95       	ret

00001c3a <vTaskSwitchContext>:
    1c3a:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <uxSchedulerSuspended>
    1c3e:	88 23       	and	r24, r24
    1c40:	21 f0       	breq	.+8      	; 0x1c4a <vTaskSwitchContext+0x10>
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	80 93 77 0d 	sts	0x0D77, r24	; 0x800d77 <xYieldPending>
    1c48:	08 95       	ret
    1c4a:	10 92 77 0d 	sts	0x0D77, r1	; 0x800d77 <xYieldPending>
    1c4e:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1c52:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1c56:	20 81       	ld	r18, Z
    1c58:	31 81       	ldd	r19, Z+1	; 0x01
    1c5a:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1c5e:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1c62:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c64:	94 8d       	ldd	r25, Z+28	; 0x1c
    1c66:	82 17       	cp	r24, r18
    1c68:	93 07       	cpc	r25, r19
    1c6a:	58 f0       	brcs	.+22     	; 0x1c82 <vTaskSwitchContext+0x48>
    1c6c:	60 91 2d 0e 	lds	r22, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1c70:	70 91 2e 0e 	lds	r23, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1c74:	63 5e       	subi	r22, 0xE3	; 227
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1c7c:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1c80:	4e d7       	rcall	.+3740   	; 0x2b1e <vApplicationStackOverflowHook>
    1c82:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <vTaskSwitchContext+0x50>
    1c88:	81 50       	subi	r24, 0x01	; 1
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	9b e0       	ldi	r25, 0x0B	; 11
    1c90:	92 9f       	mul	r25, r18
    1c92:	f0 01       	movw	r30, r0
    1c94:	93 9f       	mul	r25, r19
    1c96:	f0 0d       	add	r31, r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	e1 54       	subi	r30, 0x41	; 65
    1c9c:	f2 4f       	sbci	r31, 0xF2	; 242
    1c9e:	90 81       	ld	r25, Z
    1ca0:	99 23       	and	r25, r25
    1ca2:	91 f3       	breq	.-28     	; 0x1c88 <vTaskSwitchContext+0x4e>
    1ca4:	9b e0       	ldi	r25, 0x0B	; 11
    1ca6:	92 9f       	mul	r25, r18
    1ca8:	a0 01       	movw	r20, r0
    1caa:	93 9f       	mul	r25, r19
    1cac:	50 0d       	add	r21, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	df 01       	movw	r26, r30
    1cb2:	01 80       	ldd	r0, Z+1	; 0x01
    1cb4:	f2 81       	ldd	r31, Z+2	; 0x02
    1cb6:	e0 2d       	mov	r30, r0
    1cb8:	04 80       	ldd	r0, Z+4	; 0x04
    1cba:	f5 81       	ldd	r31, Z+5	; 0x05
    1cbc:	e0 2d       	mov	r30, r0
    1cbe:	12 96       	adiw	r26, 0x02	; 2
    1cc0:	fc 93       	st	X, r31
    1cc2:	ee 93       	st	-X, r30
    1cc4:	11 97       	sbiw	r26, 0x01	; 1
    1cc6:	4e 53       	subi	r20, 0x3E	; 62
    1cc8:	52 4f       	sbci	r21, 0xF2	; 242
    1cca:	e4 17       	cp	r30, r20
    1ccc:	f5 07       	cpc	r31, r21
    1cce:	29 f4       	brne	.+10     	; 0x1cda <vTaskSwitchContext+0xa0>
    1cd0:	44 81       	ldd	r20, Z+4	; 0x04
    1cd2:	55 81       	ldd	r21, Z+5	; 0x05
    1cd4:	fd 01       	movw	r30, r26
    1cd6:	52 83       	std	Z+2, r21	; 0x02
    1cd8:	41 83       	std	Z+1, r20	; 0x01
    1cda:	9b e0       	ldi	r25, 0x0B	; 11
    1cdc:	92 9f       	mul	r25, r18
    1cde:	f0 01       	movw	r30, r0
    1ce0:	93 9f       	mul	r25, r19
    1ce2:	f0 0d       	add	r31, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	e1 54       	subi	r30, 0x41	; 65
    1ce8:	f2 4f       	sbci	r31, 0xF2	; 242
    1cea:	01 80       	ldd	r0, Z+1	; 0x01
    1cec:	f2 81       	ldd	r31, Z+2	; 0x02
    1cee:	e0 2d       	mov	r30, r0
    1cf0:	20 85       	ldd	r18, Z+8	; 0x08
    1cf2:	31 85       	ldd	r19, Z+9	; 0x09
    1cf4:	30 93 2e 0e 	sts	0x0E2E, r19	; 0x800e2e <pxCurrentTCB+0x1>
    1cf8:	20 93 2d 0e 	sts	0x0E2D, r18	; 0x800e2d <pxCurrentTCB>
    1cfc:	80 93 7d 0d 	sts	0x0D7D, r24	; 0x800d7d <uxTopReadyPriority>
    1d00:	08 95       	ret

00001d02 <vTaskPlaceOnEventList>:
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	6a 01       	movw	r12, r20
    1d0c:	7b 01       	movw	r14, r22
    1d0e:	60 91 2d 0e 	lds	r22, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1d12:	70 91 2e 0e 	lds	r23, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1d16:	62 5f       	subi	r22, 0xF2	; 242
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <vListInsert>
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	c7 01       	movw	r24, r14
    1d22:	b6 01       	movw	r22, r12
    1d24:	33 dc       	rcall	.-1946   	; 0x158c <prvAddCurrentTaskToDelayedList>
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	08 95       	ret

00001d30 <vTaskPlaceOnUnorderedEventList>:
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	fc 01       	movw	r30, r24
    1d3a:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1d3e:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1d42:	70 68       	ori	r23, 0x80	; 128
    1d44:	1e 96       	adiw	r26, 0x0e	; 14
    1d46:	4d 93       	st	X+, r20
    1d48:	5d 93       	st	X+, r21
    1d4a:	6d 93       	st	X+, r22
    1d4c:	7c 93       	st	X, r23
    1d4e:	51 97       	sbiw	r26, 0x11	; 17
    1d50:	a1 81       	ldd	r26, Z+1	; 0x01
    1d52:	b2 81       	ldd	r27, Z+2	; 0x02
    1d54:	c0 91 2d 0e 	lds	r28, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1d58:	d0 91 2e 0e 	lds	r29, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1d5c:	bb 8b       	std	Y+19, r27	; 0x13
    1d5e:	aa 8b       	std	Y+18, r26	; 0x12
    1d60:	c0 91 2d 0e 	lds	r28, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1d64:	d0 91 2e 0e 	lds	r29, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1d68:	16 96       	adiw	r26, 0x06	; 6
    1d6a:	8d 91       	ld	r24, X+
    1d6c:	9c 91       	ld	r25, X
    1d6e:	17 97       	sbiw	r26, 0x07	; 7
    1d70:	9d 8b       	std	Y+21, r25	; 0x15
    1d72:	8c 8b       	std	Y+20, r24	; 0x14
    1d74:	16 96       	adiw	r26, 0x06	; 6
    1d76:	cd 91       	ld	r28, X+
    1d78:	dc 91       	ld	r29, X
    1d7a:	17 97       	sbiw	r26, 0x07	; 7
    1d7c:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1d80:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1d84:	0e 96       	adiw	r24, 0x0e	; 14
    1d86:	9d 83       	std	Y+5, r25	; 0x05
    1d88:	8c 83       	std	Y+4, r24	; 0x04
    1d8a:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1d8e:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1d92:	0e 96       	adiw	r24, 0x0e	; 14
    1d94:	17 96       	adiw	r26, 0x07	; 7
    1d96:	9c 93       	st	X, r25
    1d98:	8e 93       	st	-X, r24
    1d9a:	16 97       	sbiw	r26, 0x06	; 6
    1d9c:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1da0:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1da4:	59 96       	adiw	r26, 0x19	; 25
    1da6:	fc 93       	st	X, r31
    1da8:	ee 93       	st	-X, r30
    1daa:	58 97       	sbiw	r26, 0x18	; 24
    1dac:	80 81       	ld	r24, Z
    1dae:	8f 5f       	subi	r24, 0xFF	; 255
    1db0:	80 83       	st	Z, r24
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	c9 01       	movw	r24, r18
    1db6:	b8 01       	movw	r22, r16
    1db8:	e9 db       	rcall	.-2094   	; 0x158c <prvAddCurrentTaskToDelayedList>
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	08 95       	ret

00001dc4 <vTaskPlaceOnEventListRestricted>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	fc 01       	movw	r30, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	ba 01       	movw	r22, r20
    1dce:	a1 81       	ldd	r26, Z+1	; 0x01
    1dd0:	b2 81       	ldd	r27, Z+2	; 0x02
    1dd2:	c0 91 2d 0e 	lds	r28, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1dd6:	d0 91 2e 0e 	lds	r29, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1dda:	bb 8b       	std	Y+19, r27	; 0x13
    1ddc:	aa 8b       	std	Y+18, r26	; 0x12
    1dde:	c0 91 2d 0e 	lds	r28, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1de2:	d0 91 2e 0e 	lds	r29, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1de6:	16 96       	adiw	r26, 0x06	; 6
    1de8:	4d 91       	ld	r20, X+
    1dea:	5c 91       	ld	r21, X
    1dec:	17 97       	sbiw	r26, 0x07	; 7
    1dee:	5d 8b       	std	Y+21, r21	; 0x15
    1df0:	4c 8b       	std	Y+20, r20	; 0x14
    1df2:	16 96       	adiw	r26, 0x06	; 6
    1df4:	cd 91       	ld	r28, X+
    1df6:	dc 91       	ld	r29, X
    1df8:	17 97       	sbiw	r26, 0x07	; 7
    1dfa:	40 91 2d 0e 	lds	r20, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1dfe:	50 91 2e 0e 	lds	r21, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1e02:	42 5f       	subi	r20, 0xF2	; 242
    1e04:	5f 4f       	sbci	r21, 0xFF	; 255
    1e06:	5d 83       	std	Y+5, r21	; 0x05
    1e08:	4c 83       	std	Y+4, r20	; 0x04
    1e0a:	40 91 2d 0e 	lds	r20, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1e0e:	50 91 2e 0e 	lds	r21, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1e12:	42 5f       	subi	r20, 0xF2	; 242
    1e14:	5f 4f       	sbci	r21, 0xFF	; 255
    1e16:	17 96       	adiw	r26, 0x07	; 7
    1e18:	5c 93       	st	X, r21
    1e1a:	4e 93       	st	-X, r20
    1e1c:	16 97       	sbiw	r26, 0x06	; 6
    1e1e:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1e22:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1e26:	59 96       	adiw	r26, 0x19	; 25
    1e28:	fc 93       	st	X, r31
    1e2a:	ee 93       	st	-X, r30
    1e2c:	58 97       	sbiw	r26, 0x18	; 24
    1e2e:	30 81       	ld	r19, Z
    1e30:	3f 5f       	subi	r19, 0xFF	; 255
    1e32:	30 83       	st	Z, r19
    1e34:	22 23       	and	r18, r18
    1e36:	19 f0       	breq	.+6      	; 0x1e3e <vTaskPlaceOnEventListRestricted+0x7a>
    1e38:	6f ef       	ldi	r22, 0xFF	; 255
    1e3a:	7f ef       	ldi	r23, 0xFF	; 255
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	42 2f       	mov	r20, r18
    1e40:	a5 db       	rcall	.-2230   	; 0x158c <prvAddCurrentTaskToDelayedList>
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	08 95       	ret

00001e48 <xTaskRemoveFromEventList>:
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	17 96       	adiw	r26, 0x07	; 7
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	18 97       	sbiw	r26, 0x08	; 8
    1e56:	00 84       	ldd	r0, Z+8	; 0x08
    1e58:	f1 85       	ldd	r31, Z+9	; 0x09
    1e5a:	e0 2d       	mov	r30, r0
    1e5c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e5e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e60:	c2 89       	ldd	r28, Z+18	; 0x12
    1e62:	d3 89       	ldd	r29, Z+19	; 0x13
    1e64:	84 89       	ldd	r24, Z+20	; 0x14
    1e66:	95 89       	ldd	r25, Z+21	; 0x15
    1e68:	9f 83       	std	Y+7, r25	; 0x07
    1e6a:	8e 83       	std	Y+6, r24	; 0x06
    1e6c:	c4 89       	ldd	r28, Z+20	; 0x14
    1e6e:	d5 89       	ldd	r29, Z+21	; 0x15
    1e70:	82 89       	ldd	r24, Z+18	; 0x12
    1e72:	93 89       	ldd	r25, Z+19	; 0x13
    1e74:	9d 83       	std	Y+5, r25	; 0x05
    1e76:	8c 83       	std	Y+4, r24	; 0x04
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	8d 91       	ld	r24, X+
    1e7c:	9c 91       	ld	r25, X
    1e7e:	12 97       	sbiw	r26, 0x02	; 2
    1e80:	9f 01       	movw	r18, r30
    1e82:	22 5f       	subi	r18, 0xF2	; 242
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	82 17       	cp	r24, r18
    1e88:	93 07       	cpc	r25, r19
    1e8a:	31 f4       	brne	.+12     	; 0x1e98 <xTaskRemoveFromEventList+0x50>
    1e8c:	84 89       	ldd	r24, Z+20	; 0x14
    1e8e:	95 89       	ldd	r25, Z+21	; 0x15
    1e90:	12 96       	adiw	r26, 0x02	; 2
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24
    1e96:	11 97       	sbiw	r26, 0x01	; 1
    1e98:	11 8e       	std	Z+25, r1	; 0x19
    1e9a:	10 8e       	std	Z+24, r1	; 0x18
    1e9c:	8c 91       	ld	r24, X
    1e9e:	81 50       	subi	r24, 0x01	; 1
    1ea0:	8c 93       	st	X, r24
    1ea2:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <uxSchedulerSuspended>
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	52 c0       	rjmp	.+164    	; 0x1f4e <xTaskRemoveFromEventList+0x106>
    1eaa:	a4 85       	ldd	r26, Z+12	; 0x0c
    1eac:	b5 85       	ldd	r27, Z+13	; 0x0d
    1eae:	c6 81       	ldd	r28, Z+6	; 0x06
    1eb0:	d7 81       	ldd	r29, Z+7	; 0x07
    1eb2:	80 85       	ldd	r24, Z+8	; 0x08
    1eb4:	91 85       	ldd	r25, Z+9	; 0x09
    1eb6:	9f 83       	std	Y+7, r25	; 0x07
    1eb8:	8e 83       	std	Y+6, r24	; 0x06
    1eba:	c0 85       	ldd	r28, Z+8	; 0x08
    1ebc:	d1 85       	ldd	r29, Z+9	; 0x09
    1ebe:	86 81       	ldd	r24, Z+6	; 0x06
    1ec0:	97 81       	ldd	r25, Z+7	; 0x07
    1ec2:	9d 83       	std	Y+5, r25	; 0x05
    1ec4:	8c 83       	std	Y+4, r24	; 0x04
    1ec6:	11 96       	adiw	r26, 0x01	; 1
    1ec8:	8d 91       	ld	r24, X+
    1eca:	9c 91       	ld	r25, X
    1ecc:	12 97       	sbiw	r26, 0x02	; 2
    1ece:	9f 01       	movw	r18, r30
    1ed0:	2e 5f       	subi	r18, 0xFE	; 254
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	82 17       	cp	r24, r18
    1ed6:	93 07       	cpc	r25, r19
    1ed8:	31 f4       	brne	.+12     	; 0x1ee6 <xTaskRemoveFromEventList+0x9e>
    1eda:	80 85       	ldd	r24, Z+8	; 0x08
    1edc:	91 85       	ldd	r25, Z+9	; 0x09
    1ede:	12 96       	adiw	r26, 0x02	; 2
    1ee0:	9c 93       	st	X, r25
    1ee2:	8e 93       	st	-X, r24
    1ee4:	11 97       	sbiw	r26, 0x01	; 1
    1ee6:	15 86       	std	Z+13, r1	; 0x0d
    1ee8:	14 86       	std	Z+12, r1	; 0x0c
    1eea:	8c 91       	ld	r24, X
    1eec:	81 50       	subi	r24, 0x01	; 1
    1eee:	8c 93       	st	X, r24
    1ef0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ef2:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    1ef6:	8a 17       	cp	r24, r26
    1ef8:	10 f4       	brcc	.+4      	; 0x1efe <xTaskRemoveFromEventList+0xb6>
    1efa:	a0 93 7d 0d 	sts	0x0D7D, r26	; 0x800d7d <uxTopReadyPriority>
    1efe:	8b e0       	ldi	r24, 0x0B	; 11
    1f00:	8a 9f       	mul	r24, r26
    1f02:	d0 01       	movw	r26, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	a1 54       	subi	r26, 0x41	; 65
    1f08:	b2 4f       	sbci	r27, 0xF2	; 242
    1f0a:	11 96       	adiw	r26, 0x01	; 1
    1f0c:	0d 90       	ld	r0, X+
    1f0e:	bc 91       	ld	r27, X
    1f10:	a0 2d       	mov	r26, r0
    1f12:	b7 83       	std	Z+7, r27	; 0x07
    1f14:	a6 83       	std	Z+6, r26	; 0x06
    1f16:	16 96       	adiw	r26, 0x06	; 6
    1f18:	4d 91       	ld	r20, X+
    1f1a:	5c 91       	ld	r21, X
    1f1c:	17 97       	sbiw	r26, 0x07	; 7
    1f1e:	51 87       	std	Z+9, r21	; 0x09
    1f20:	40 87       	std	Z+8, r20	; 0x08
    1f22:	16 96       	adiw	r26, 0x06	; 6
    1f24:	cd 91       	ld	r28, X+
    1f26:	dc 91       	ld	r29, X
    1f28:	17 97       	sbiw	r26, 0x07	; 7
    1f2a:	3d 83       	std	Y+5, r19	; 0x05
    1f2c:	2c 83       	std	Y+4, r18	; 0x04
    1f2e:	17 96       	adiw	r26, 0x07	; 7
    1f30:	3c 93       	st	X, r19
    1f32:	2e 93       	st	-X, r18
    1f34:	16 97       	sbiw	r26, 0x06	; 6
    1f36:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f38:	8a 9f       	mul	r24, r26
    1f3a:	d0 01       	movw	r26, r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	a1 54       	subi	r26, 0x41	; 65
    1f40:	b2 4f       	sbci	r27, 0xF2	; 242
    1f42:	b5 87       	std	Z+13, r27	; 0x0d
    1f44:	a4 87       	std	Z+12, r26	; 0x0c
    1f46:	8c 91       	ld	r24, X
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	8c 93       	st	X, r24
    1f4c:	1c c0       	rjmp	.+56     	; 0x1f86 <xTaskRemoveFromEventList+0x13e>
    1f4e:	4a e9       	ldi	r20, 0x9A	; 154
    1f50:	5d e0       	ldi	r21, 0x0D	; 13
    1f52:	da 01       	movw	r26, r20
    1f54:	11 96       	adiw	r26, 0x01	; 1
    1f56:	cd 91       	ld	r28, X+
    1f58:	dc 91       	ld	r29, X
    1f5a:	12 97       	sbiw	r26, 0x02	; 2
    1f5c:	d3 8b       	std	Z+19, r29	; 0x13
    1f5e:	c2 8b       	std	Z+18, r28	; 0x12
    1f60:	8e 81       	ldd	r24, Y+6	; 0x06
    1f62:	9f 81       	ldd	r25, Y+7	; 0x07
    1f64:	95 8b       	std	Z+21, r25	; 0x15
    1f66:	84 8b       	std	Z+20, r24	; 0x14
    1f68:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	15 96       	adiw	r26, 0x05	; 5
    1f70:	3c 93       	st	X, r19
    1f72:	2e 93       	st	-X, r18
    1f74:	14 97       	sbiw	r26, 0x04	; 4
    1f76:	3f 83       	std	Y+7, r19	; 0x07
    1f78:	2e 83       	std	Y+6, r18	; 0x06
    1f7a:	51 8f       	std	Z+25, r21	; 0x19
    1f7c:	40 8f       	std	Z+24, r20	; 0x18
    1f7e:	da 01       	movw	r26, r20
    1f80:	8c 91       	ld	r24, X
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	8c 93       	st	X, r24
    1f86:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f88:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    1f8c:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    1f90:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f92:	89 17       	cp	r24, r25
    1f94:	20 f4       	brcc	.+8      	; 0x1f9e <xTaskRemoveFromEventList+0x156>
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	80 93 77 0d 	sts	0x0D77, r24	; 0x800d77 <xYieldPending>
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <xTaskRemoveFromEventList+0x158>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	08 95       	ret

00001fa6 <vTaskRemoveFromUnorderedEventList>:
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	dc 01       	movw	r26, r24
    1fac:	70 68       	ori	r23, 0x80	; 128
    1fae:	4d 93       	st	X+, r20
    1fb0:	5d 93       	st	X+, r21
    1fb2:	6d 93       	st	X+, r22
    1fb4:	7c 93       	st	X, r23
    1fb6:	13 97       	sbiw	r26, 0x03	; 3
    1fb8:	18 96       	adiw	r26, 0x08	; 8
    1fba:	ed 91       	ld	r30, X+
    1fbc:	fc 91       	ld	r31, X
    1fbe:	19 97       	sbiw	r26, 0x09	; 9
    1fc0:	1a 96       	adiw	r26, 0x0a	; 10
    1fc2:	4d 91       	ld	r20, X+
    1fc4:	5c 91       	ld	r21, X
    1fc6:	1b 97       	sbiw	r26, 0x0b	; 11
    1fc8:	14 96       	adiw	r26, 0x04	; 4
    1fca:	8d 91       	ld	r24, X+
    1fcc:	9c 91       	ld	r25, X
    1fce:	15 97       	sbiw	r26, 0x05	; 5
    1fd0:	16 96       	adiw	r26, 0x06	; 6
    1fd2:	2d 91       	ld	r18, X+
    1fd4:	3c 91       	ld	r19, X
    1fd6:	17 97       	sbiw	r26, 0x07	; 7
    1fd8:	ec 01       	movw	r28, r24
    1fda:	3f 83       	std	Y+7, r19	; 0x07
    1fdc:	2e 83       	std	Y+6, r18	; 0x06
    1fde:	16 96       	adiw	r26, 0x06	; 6
    1fe0:	8d 91       	ld	r24, X+
    1fe2:	9c 91       	ld	r25, X
    1fe4:	17 97       	sbiw	r26, 0x07	; 7
    1fe6:	14 96       	adiw	r26, 0x04	; 4
    1fe8:	2d 91       	ld	r18, X+
    1fea:	3c 91       	ld	r19, X
    1fec:	15 97       	sbiw	r26, 0x05	; 5
    1fee:	ec 01       	movw	r28, r24
    1ff0:	3d 83       	std	Y+5, r19	; 0x05
    1ff2:	2c 83       	std	Y+4, r18	; 0x04
    1ff4:	ea 01       	movw	r28, r20
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	a8 17       	cp	r26, r24
    1ffc:	b9 07       	cpc	r27, r25
    1ffe:	31 f4       	brne	.+12     	; 0x200c <__DATA_REGION_LENGTH__+0xc>
    2000:	16 96       	adiw	r26, 0x06	; 6
    2002:	8d 91       	ld	r24, X+
    2004:	9c 91       	ld	r25, X
    2006:	17 97       	sbiw	r26, 0x07	; 7
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	1b 96       	adiw	r26, 0x0b	; 11
    200e:	1c 92       	st	X, r1
    2010:	1e 92       	st	-X, r1
    2012:	1a 97       	sbiw	r26, 0x0a	; 10
    2014:	da 01       	movw	r26, r20
    2016:	8c 91       	ld	r24, X
    2018:	81 50       	subi	r24, 0x01	; 1
    201a:	8c 93       	st	X, r24
    201c:	a4 85       	ldd	r26, Z+12	; 0x0c
    201e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2020:	c6 81       	ldd	r28, Z+6	; 0x06
    2022:	d7 81       	ldd	r29, Z+7	; 0x07
    2024:	80 85       	ldd	r24, Z+8	; 0x08
    2026:	91 85       	ldd	r25, Z+9	; 0x09
    2028:	9f 83       	std	Y+7, r25	; 0x07
    202a:	8e 83       	std	Y+6, r24	; 0x06
    202c:	c0 85       	ldd	r28, Z+8	; 0x08
    202e:	d1 85       	ldd	r29, Z+9	; 0x09
    2030:	86 81       	ldd	r24, Z+6	; 0x06
    2032:	97 81       	ldd	r25, Z+7	; 0x07
    2034:	9d 83       	std	Y+5, r25	; 0x05
    2036:	8c 83       	std	Y+4, r24	; 0x04
    2038:	11 96       	adiw	r26, 0x01	; 1
    203a:	8d 91       	ld	r24, X+
    203c:	9c 91       	ld	r25, X
    203e:	12 97       	sbiw	r26, 0x02	; 2
    2040:	9f 01       	movw	r18, r30
    2042:	2e 5f       	subi	r18, 0xFE	; 254
    2044:	3f 4f       	sbci	r19, 0xFF	; 255
    2046:	82 17       	cp	r24, r18
    2048:	93 07       	cpc	r25, r19
    204a:	31 f4       	brne	.+12     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    204c:	80 85       	ldd	r24, Z+8	; 0x08
    204e:	91 85       	ldd	r25, Z+9	; 0x09
    2050:	12 96       	adiw	r26, 0x02	; 2
    2052:	9c 93       	st	X, r25
    2054:	8e 93       	st	-X, r24
    2056:	11 97       	sbiw	r26, 0x01	; 1
    2058:	15 86       	std	Z+13, r1	; 0x0d
    205a:	14 86       	std	Z+12, r1	; 0x0c
    205c:	8c 91       	ld	r24, X
    205e:	81 50       	subi	r24, 0x01	; 1
    2060:	8c 93       	st	X, r24
    2062:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2064:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    2068:	8a 17       	cp	r24, r26
    206a:	10 f4       	brcc	.+4      	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    206c:	a0 93 7d 0d 	sts	0x0D7D, r26	; 0x800d7d <uxTopReadyPriority>
    2070:	8b e0       	ldi	r24, 0x0B	; 11
    2072:	8a 9f       	mul	r24, r26
    2074:	d0 01       	movw	r26, r0
    2076:	11 24       	eor	r1, r1
    2078:	a1 54       	subi	r26, 0x41	; 65
    207a:	b2 4f       	sbci	r27, 0xF2	; 242
    207c:	11 96       	adiw	r26, 0x01	; 1
    207e:	0d 90       	ld	r0, X+
    2080:	bc 91       	ld	r27, X
    2082:	a0 2d       	mov	r26, r0
    2084:	b7 83       	std	Z+7, r27	; 0x07
    2086:	a6 83       	std	Z+6, r26	; 0x06
    2088:	16 96       	adiw	r26, 0x06	; 6
    208a:	4d 91       	ld	r20, X+
    208c:	5c 91       	ld	r21, X
    208e:	17 97       	sbiw	r26, 0x07	; 7
    2090:	51 87       	std	Z+9, r21	; 0x09
    2092:	40 87       	std	Z+8, r20	; 0x08
    2094:	16 96       	adiw	r26, 0x06	; 6
    2096:	cd 91       	ld	r28, X+
    2098:	dc 91       	ld	r29, X
    209a:	17 97       	sbiw	r26, 0x07	; 7
    209c:	3d 83       	std	Y+5, r19	; 0x05
    209e:	2c 83       	std	Y+4, r18	; 0x04
    20a0:	17 96       	adiw	r26, 0x07	; 7
    20a2:	3c 93       	st	X, r19
    20a4:	2e 93       	st	-X, r18
    20a6:	16 97       	sbiw	r26, 0x06	; 6
    20a8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20aa:	8a 9f       	mul	r24, r26
    20ac:	d0 01       	movw	r26, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	a1 54       	subi	r26, 0x41	; 65
    20b2:	b2 4f       	sbci	r27, 0xF2	; 242
    20b4:	b5 87       	std	Z+13, r27	; 0x0d
    20b6:	a4 87       	std	Z+12, r26	; 0x0c
    20b8:	8c 91       	ld	r24, X
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	8c 93       	st	X, r24
    20be:	92 8d       	ldd	r25, Z+26	; 0x1a
    20c0:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    20c4:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    20c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    20ca:	89 17       	cp	r24, r25
    20cc:	18 f4       	brcc	.+6      	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	80 93 77 0d 	sts	0x0D77, r24	; 0x800d77 <xYieldPending>
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	08 95       	ret

000020da <vTaskInternalSetTimeOutState>:
    20da:	20 91 76 0d 	lds	r18, 0x0D76	; 0x800d76 <xNumOfOverflows>
    20de:	fc 01       	movw	r30, r24
    20e0:	20 83       	st	Z, r18
    20e2:	40 91 7e 0d 	lds	r20, 0x0D7E	; 0x800d7e <xTickCount>
    20e6:	50 91 7f 0d 	lds	r21, 0x0D7F	; 0x800d7f <xTickCount+0x1>
    20ea:	60 91 80 0d 	lds	r22, 0x0D80	; 0x800d80 <xTickCount+0x2>
    20ee:	70 91 81 0d 	lds	r23, 0x0D81	; 0x800d81 <xTickCount+0x3>
    20f2:	41 83       	std	Z+1, r20	; 0x01
    20f4:	52 83       	std	Z+2, r21	; 0x02
    20f6:	63 83       	std	Z+3, r22	; 0x03
    20f8:	74 83       	std	Z+4, r23	; 0x04
    20fa:	08 95       	ret

000020fc <xTaskCheckForTimeOut>:
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	fb 01       	movw	r30, r22
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	0f 92       	push	r0
    211c:	c0 90 7e 0d 	lds	r12, 0x0D7E	; 0x800d7e <xTickCount>
    2120:	d0 90 7f 0d 	lds	r13, 0x0D7F	; 0x800d7f <xTickCount+0x1>
    2124:	e0 90 80 0d 	lds	r14, 0x0D80	; 0x800d80 <xTickCount+0x2>
    2128:	f0 90 81 0d 	lds	r15, 0x0D81	; 0x800d81 <xTickCount+0x3>
    212c:	dc 01       	movw	r26, r24
    212e:	11 96       	adiw	r26, 0x01	; 1
    2130:	0d 91       	ld	r16, X+
    2132:	1d 91       	ld	r17, X+
    2134:	2d 91       	ld	r18, X+
    2136:	3c 91       	ld	r19, X
    2138:	14 97       	sbiw	r26, 0x04	; 4
    213a:	46 01       	movw	r8, r12
    213c:	57 01       	movw	r10, r14
    213e:	80 1a       	sub	r8, r16
    2140:	91 0a       	sbc	r9, r17
    2142:	a2 0a       	sbc	r10, r18
    2144:	b3 0a       	sbc	r11, r19
    2146:	40 81       	ld	r20, Z
    2148:	51 81       	ldd	r21, Z+1	; 0x01
    214a:	62 81       	ldd	r22, Z+2	; 0x02
    214c:	73 81       	ldd	r23, Z+3	; 0x03
    214e:	4f 3f       	cpi	r20, 0xFF	; 255
    2150:	bf ef       	ldi	r27, 0xFF	; 255
    2152:	5b 07       	cpc	r21, r27
    2154:	6b 07       	cpc	r22, r27
    2156:	7b 07       	cpc	r23, r27
    2158:	39 f1       	breq	.+78     	; 0x21a8 <xTaskCheckForTimeOut+0xac>
    215a:	ec 01       	movw	r28, r24
    215c:	b8 81       	ld	r27, Y
    215e:	a0 91 76 0d 	lds	r26, 0x0D76	; 0x800d76 <xNumOfOverflows>
    2162:	ba 17       	cp	r27, r26
    2164:	59 f0       	breq	.+22     	; 0x217c <xTaskCheckForTimeOut+0x80>
    2166:	c0 16       	cp	r12, r16
    2168:	d1 06       	cpc	r13, r17
    216a:	e2 06       	cpc	r14, r18
    216c:	f3 06       	cpc	r15, r19
    216e:	30 f0       	brcs	.+12     	; 0x217c <xTaskCheckForTimeOut+0x80>
    2170:	10 82       	st	Z, r1
    2172:	11 82       	std	Z+1, r1	; 0x01
    2174:	12 82       	std	Z+2, r1	; 0x02
    2176:	13 82       	std	Z+3, r1	; 0x03
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	17 c0       	rjmp	.+46     	; 0x21aa <xTaskCheckForTimeOut+0xae>
    217c:	84 16       	cp	r8, r20
    217e:	95 06       	cpc	r9, r21
    2180:	a6 06       	cpc	r10, r22
    2182:	b7 06       	cpc	r11, r23
    2184:	58 f4       	brcc	.+22     	; 0x219c <xTaskCheckForTimeOut+0xa0>
    2186:	48 19       	sub	r20, r8
    2188:	59 09       	sbc	r21, r9
    218a:	6a 09       	sbc	r22, r10
    218c:	7b 09       	sbc	r23, r11
    218e:	40 83       	st	Z, r20
    2190:	51 83       	std	Z+1, r21	; 0x01
    2192:	62 83       	std	Z+2, r22	; 0x02
    2194:	73 83       	std	Z+3, r23	; 0x03
    2196:	a1 df       	rcall	.-190    	; 0x20da <vTaskInternalSetTimeOutState>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	07 c0       	rjmp	.+14     	; 0x21aa <xTaskCheckForTimeOut+0xae>
    219c:	10 82       	st	Z, r1
    219e:	11 82       	std	Z+1, r1	; 0x01
    21a0:	12 82       	std	Z+2, r1	; 0x02
    21a2:	13 82       	std	Z+3, r1	; 0x03
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <xTaskCheckForTimeOut+0xae>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	0f 90       	pop	r0
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	bf 90       	pop	r11
    21c0:	af 90       	pop	r10
    21c2:	9f 90       	pop	r9
    21c4:	8f 90       	pop	r8
    21c6:	08 95       	ret

000021c8 <vTaskMissedYield>:
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	80 93 77 0d 	sts	0x0D77, r24	; 0x800d77 <xYieldPending>
    21ce:	08 95       	ret

000021d0 <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    21d0:	80 91 7c 0d 	lds	r24, 0x0D7C	; 0x800d7c <xSchedulerRunning>
    21d4:	88 23       	and	r24, r24
    21d6:	31 f0       	breq	.+12     	; 0x21e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    21d8:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <uxSchedulerSuspended>
    21dc:	81 11       	cpse	r24, r1
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	08 95       	ret
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    21e8:	80 e0       	ldi	r24, 0x00	; 0
            }
        }

        return xReturn;
    }
    21ea:	08 95       	ret

000021ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	fc 01       	movw	r30, r24
        BaseType_t xReturn = pdFALSE;

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
    21f6:	89 2b       	or	r24, r25
    21f8:	09 f4       	brne	.+2      	; 0x21fc <xTaskPriorityInherit+0x10>
    21fa:	77 c0       	rjmp	.+238    	; 0x22ea <__stack+0xeb>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    21fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    21fe:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    2202:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    2206:	5a 96       	adiw	r26, 0x1a	; 26
    2208:	9c 91       	ld	r25, X
    220a:	89 17       	cp	r24, r25
    220c:	08 f0       	brcs	.+2      	; 0x2210 <__stack+0x11>
    220e:	63 c0       	rjmp	.+198    	; 0x22d6 <__stack+0xd7>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2210:	46 85       	ldd	r20, Z+14	; 0x0e
    2212:	57 85       	ldd	r21, Z+15	; 0x0f
    2214:	60 89       	ldd	r22, Z+16	; 0x10
    2216:	71 89       	ldd	r23, Z+17	; 0x11
    2218:	77 23       	and	r23, r23
    221a:	94 f0       	brlt	.+36     	; 0x2240 <__stack+0x41>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    221c:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    2220:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    2224:	5a 96       	adiw	r26, 0x1a	; 26
    2226:	9c 91       	ld	r25, X
    2228:	4a e0       	ldi	r20, 0x0A	; 10
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	49 1b       	sub	r20, r25
    2232:	51 09       	sbc	r21, r1
    2234:	61 09       	sbc	r22, r1
    2236:	71 09       	sbc	r23, r1
    2238:	46 87       	std	Z+14, r20	; 0x0e
    223a:	57 87       	std	Z+15, r21	; 0x0f
    223c:	60 8b       	std	Z+16, r22	; 0x10
    223e:	71 8b       	std	Z+17, r23	; 0x11
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    2240:	24 85       	ldd	r18, Z+12	; 0x0c
    2242:	35 85       	ldd	r19, Z+13	; 0x0d
    2244:	4b e0       	ldi	r20, 0x0B	; 11
    2246:	84 9f       	mul	r24, r20
    2248:	c0 01       	movw	r24, r0
    224a:	11 24       	eor	r1, r1
    224c:	81 54       	subi	r24, 0x41	; 65
    224e:	92 4f       	sbci	r25, 0xF2	; 242
    2250:	28 17       	cp	r18, r24
    2252:	39 07       	cpc	r19, r25
    2254:	b9 f5       	brne	.+110    	; 0x22c4 <__stack+0xc5>
    2256:	ef 01       	movw	r28, r30
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2258:	8f 01       	movw	r16, r30
    225a:	0e 5f       	subi	r16, 0xFE	; 254
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	c8 01       	movw	r24, r16
    2260:	0e 94 af 04 	call	0x95e	; 0x95e <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2264:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    2268:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    226c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    226e:	ea 8f       	std	Y+26, r30	; 0x1a
                    prvAddTaskToReadyList( pxMutexHolderTCB );
    2270:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    2274:	8e 17       	cp	r24, r30
    2276:	10 f4       	brcc	.+4      	; 0x227c <__stack+0x7d>
    2278:	e0 93 7d 0d 	sts	0x0D7D, r30	; 0x800d7d <uxTopReadyPriority>
    227c:	8b e0       	ldi	r24, 0x0B	; 11
    227e:	8e 9f       	mul	r24, r30
    2280:	f0 01       	movw	r30, r0
    2282:	11 24       	eor	r1, r1
    2284:	e1 54       	subi	r30, 0x41	; 65
    2286:	f2 4f       	sbci	r31, 0xF2	; 242
    2288:	01 80       	ldd	r0, Z+1	; 0x01
    228a:	f2 81       	ldd	r31, Z+2	; 0x02
    228c:	e0 2d       	mov	r30, r0
    228e:	ff 83       	std	Y+7, r31	; 0x07
    2290:	ee 83       	std	Y+6, r30	; 0x06
    2292:	26 81       	ldd	r18, Z+6	; 0x06
    2294:	37 81       	ldd	r19, Z+7	; 0x07
    2296:	39 87       	std	Y+9, r19	; 0x09
    2298:	28 87       	std	Y+8, r18	; 0x08
    229a:	a6 81       	ldd	r26, Z+6	; 0x06
    229c:	b7 81       	ldd	r27, Z+7	; 0x07
    229e:	15 96       	adiw	r26, 0x05	; 5
    22a0:	1c 93       	st	X, r17
    22a2:	0e 93       	st	-X, r16
    22a4:	14 97       	sbiw	r26, 0x04	; 4
    22a6:	17 83       	std	Z+7, r17	; 0x07
    22a8:	06 83       	std	Z+6, r16	; 0x06
    22aa:	ea 8d       	ldd	r30, Y+26	; 0x1a
    22ac:	8e 9f       	mul	r24, r30
    22ae:	f0 01       	movw	r30, r0
    22b0:	11 24       	eor	r1, r1
    22b2:	e1 54       	subi	r30, 0x41	; 65
    22b4:	f2 4f       	sbci	r31, 0xF2	; 242
    22b6:	fd 87       	std	Y+13, r31	; 0x0d
    22b8:	ec 87       	std	Y+12, r30	; 0x0c
    22ba:	80 81       	ld	r24, Z
    22bc:	8f 5f       	subi	r24, 0xFF	; 255
    22be:	80 83       	st	Z, r24
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	16 c0       	rjmp	.+44     	; 0x22f0 <__stack+0xf1>
                    prvAddTaskToReadyList( pxMutexHolderTCB );
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    22c4:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    22c8:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    22cc:	5a 96       	adiw	r26, 0x1a	; 26
    22ce:	8c 91       	ld	r24, X
    22d0:	82 8f       	std	Z+26, r24	; 0x1a
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	0d c0       	rjmp	.+26     	; 0x22f0 <__stack+0xf1>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    22d6:	95 a5       	ldd	r25, Z+45	; 0x2d
    22d8:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    22dc:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    22e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    22e2:	98 17       	cp	r25, r24
    22e4:	20 f0       	brcs	.+8      	; 0x22ee <__stack+0xef>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	03 c0       	rjmp	.+6      	; 0x22f0 <__stack+0xf1>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <__stack+0xf1>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret

000022fa <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2304:	89 2b       	or	r24, r25
    2306:	09 f4       	brne	.+2      	; 0x230a <xTaskPriorityDisinherit+0x10>
    2308:	49 c0       	rjmp	.+146    	; 0x239c <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    230a:	86 a5       	ldd	r24, Z+46	; 0x2e
    230c:	81 50       	subi	r24, 0x01	; 1
    230e:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2310:	22 8d       	ldd	r18, Z+26	; 0x1a
    2312:	95 a5       	ldd	r25, Z+45	; 0x2d
    2314:	29 17       	cp	r18, r25
    2316:	09 f4       	brne	.+2      	; 0x231a <xTaskPriorityDisinherit+0x20>
    2318:	43 c0       	rjmp	.+134    	; 0x23a0 <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    231a:	81 11       	cpse	r24, r1
    231c:	43 c0       	rjmp	.+134    	; 0x23a4 <xTaskPriorityDisinherit+0xaa>
    231e:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2320:	8f 01       	movw	r16, r30
    2322:	0e 5f       	subi	r16, 0xFE	; 254
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	c8 01       	movw	r24, r16
    2328:	0e 94 af 04 	call	0x95e	; 0x95e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    232c:	ed a5       	ldd	r30, Y+45	; 0x2d
    232e:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2330:	8a e0       	ldi	r24, 0x0A	; 10
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a0 e0       	ldi	r26, 0x00	; 0
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	8e 1b       	sub	r24, r30
    233a:	91 09       	sbc	r25, r1
    233c:	a1 09       	sbc	r26, r1
    233e:	b1 09       	sbc	r27, r1
    2340:	8e 87       	std	Y+14, r24	; 0x0e
    2342:	9f 87       	std	Y+15, r25	; 0x0f
    2344:	a8 8b       	std	Y+16, r26	; 0x10
    2346:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    2348:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    234c:	8e 17       	cp	r24, r30
    234e:	10 f4       	brcc	.+4      	; 0x2354 <xTaskPriorityDisinherit+0x5a>
    2350:	e0 93 7d 0d 	sts	0x0D7D, r30	; 0x800d7d <uxTopReadyPriority>
    2354:	8b e0       	ldi	r24, 0x0B	; 11
    2356:	8e 9f       	mul	r24, r30
    2358:	f0 01       	movw	r30, r0
    235a:	11 24       	eor	r1, r1
    235c:	e1 54       	subi	r30, 0x41	; 65
    235e:	f2 4f       	sbci	r31, 0xF2	; 242
    2360:	01 80       	ldd	r0, Z+1	; 0x01
    2362:	f2 81       	ldd	r31, Z+2	; 0x02
    2364:	e0 2d       	mov	r30, r0
    2366:	ff 83       	std	Y+7, r31	; 0x07
    2368:	ee 83       	std	Y+6, r30	; 0x06
    236a:	26 81       	ldd	r18, Z+6	; 0x06
    236c:	37 81       	ldd	r19, Z+7	; 0x07
    236e:	39 87       	std	Y+9, r19	; 0x09
    2370:	28 87       	std	Y+8, r18	; 0x08
    2372:	a6 81       	ldd	r26, Z+6	; 0x06
    2374:	b7 81       	ldd	r27, Z+7	; 0x07
    2376:	15 96       	adiw	r26, 0x05	; 5
    2378:	1c 93       	st	X, r17
    237a:	0e 93       	st	-X, r16
    237c:	14 97       	sbiw	r26, 0x04	; 4
    237e:	17 83       	std	Z+7, r17	; 0x07
    2380:	06 83       	std	Z+6, r16	; 0x06
    2382:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2384:	8e 9f       	mul	r24, r30
    2386:	f0 01       	movw	r30, r0
    2388:	11 24       	eor	r1, r1
    238a:	e1 54       	subi	r30, 0x41	; 65
    238c:	f2 4f       	sbci	r31, 0xF2	; 242
    238e:	fd 87       	std	Y+13, r31	; 0x0d
    2390:	ec 87       	std	Y+12, r30	; 0x0c
    2392:	80 81       	ld	r24, Z
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	05 c0       	rjmp	.+10     	; 0x23a6 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <xTaskPriorityDisinherit+0xac>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	01 c0       	rjmp	.+2      	; 0x23a6 <xTaskPriorityDisinherit+0xac>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	08 95       	ret

000023b0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
    23b0:	0f 93       	push	r16
    23b2:	1f 93       	push	r17
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

        if( pxMutexHolder != NULL )
    23ba:	89 2b       	or	r24, r25
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    23be:	5a c0       	rjmp	.+180    	; 0x2474 <vTaskPriorityDisinheritAfterTimeout+0xc4>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    23c0:	85 a5       	ldd	r24, Z+45	; 0x2d
    23c2:	86 17       	cp	r24, r22
    23c4:	08 f4       	brcc	.+2      	; 0x23c8 <vTaskPriorityDisinheritAfterTimeout+0x18>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
    23c6:	86 2f       	mov	r24, r22
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
    23c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    23ca:	89 17       	cp	r24, r25
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <vTaskPriorityDisinheritAfterTimeout+0x20>
    23ce:	52 c0       	rjmp	.+164    	; 0x2474 <vTaskPriorityDisinheritAfterTimeout+0xc4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    23d0:	26 a5       	ldd	r18, Z+46	; 0x2e
    23d2:	21 30       	cpi	r18, 0x01	; 1
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <vTaskPriorityDisinheritAfterTimeout+0x28>
    23d6:	4e c0       	rjmp	.+156    	; 0x2474 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
                    pxTCB->uxPriority = uxPriorityToUse;
    23d8:	82 8f       	std	Z+26, r24	; 0x1a

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    23da:	46 85       	ldd	r20, Z+14	; 0x0e
    23dc:	57 85       	ldd	r21, Z+15	; 0x0f
    23de:	60 89       	ldd	r22, Z+16	; 0x10
    23e0:	71 89       	ldd	r23, Z+17	; 0x11
    23e2:	77 23       	and	r23, r23
    23e4:	64 f0       	brlt	.+24     	; 0x23fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    23e6:	4a e0       	ldi	r20, 0x0A	; 10
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	48 1b       	sub	r20, r24
    23f0:	51 09       	sbc	r21, r1
    23f2:	61 09       	sbc	r22, r1
    23f4:	71 09       	sbc	r23, r1
    23f6:	46 87       	std	Z+14, r20	; 0x0e
    23f8:	57 87       	std	Z+15, r21	; 0x0f
    23fa:	60 8b       	std	Z+16, r22	; 0x10
    23fc:	71 8b       	std	Z+17, r23	; 0x11
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    23fe:	24 85       	ldd	r18, Z+12	; 0x0c
    2400:	35 85       	ldd	r19, Z+13	; 0x0d
    2402:	4b e0       	ldi	r20, 0x0B	; 11
    2404:	94 9f       	mul	r25, r20
    2406:	c0 01       	movw	r24, r0
    2408:	11 24       	eor	r1, r1
    240a:	81 54       	subi	r24, 0x41	; 65
    240c:	92 4f       	sbci	r25, 0xF2	; 242
    240e:	28 17       	cp	r18, r24
    2410:	39 07       	cpc	r19, r25
    2412:	81 f5       	brne	.+96     	; 0x2474 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2414:	ef 01       	movw	r28, r30
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2416:	8f 01       	movw	r16, r30
    2418:	0e 5f       	subi	r16, 0xFE	; 254
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
    241c:	c8 01       	movw	r24, r16
    241e:	0e 94 af 04 	call	0x95e	; 0x95e <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
    2422:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2424:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <uxTopReadyPriority>
    2428:	8e 17       	cp	r24, r30
    242a:	10 f4       	brcc	.+4      	; 0x2430 <vTaskPriorityDisinheritAfterTimeout+0x80>
    242c:	e0 93 7d 0d 	sts	0x0D7D, r30	; 0x800d7d <uxTopReadyPriority>
    2430:	8b e0       	ldi	r24, 0x0B	; 11
    2432:	8e 9f       	mul	r24, r30
    2434:	f0 01       	movw	r30, r0
    2436:	11 24       	eor	r1, r1
    2438:	e1 54       	subi	r30, 0x41	; 65
    243a:	f2 4f       	sbci	r31, 0xF2	; 242
    243c:	01 80       	ldd	r0, Z+1	; 0x01
    243e:	f2 81       	ldd	r31, Z+2	; 0x02
    2440:	e0 2d       	mov	r30, r0
    2442:	ff 83       	std	Y+7, r31	; 0x07
    2444:	ee 83       	std	Y+6, r30	; 0x06
    2446:	26 81       	ldd	r18, Z+6	; 0x06
    2448:	37 81       	ldd	r19, Z+7	; 0x07
    244a:	39 87       	std	Y+9, r19	; 0x09
    244c:	28 87       	std	Y+8, r18	; 0x08
    244e:	a6 81       	ldd	r26, Z+6	; 0x06
    2450:	b7 81       	ldd	r27, Z+7	; 0x07
    2452:	15 96       	adiw	r26, 0x05	; 5
    2454:	1c 93       	st	X, r17
    2456:	0e 93       	st	-X, r16
    2458:	14 97       	sbiw	r26, 0x04	; 4
    245a:	17 83       	std	Z+7, r17	; 0x07
    245c:	06 83       	std	Z+6, r16	; 0x06
    245e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2460:	8e 9f       	mul	r24, r30
    2462:	f0 01       	movw	r30, r0
    2464:	11 24       	eor	r1, r1
    2466:	e1 54       	subi	r30, 0x41	; 65
    2468:	f2 4f       	sbci	r31, 0xF2	; 242
    246a:	fd 87       	std	Y+13, r31	; 0x0d
    246c:	ec 87       	std	Y+12, r30	; 0x0c
    246e:	80 81       	ld	r24, Z
    2470:	8f 5f       	subi	r24, 0xFF	; 255
    2472:	80 83       	st	Z, r24
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	08 95       	ret

0000247e <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    247e:	cf 92       	push	r12
    2480:	df 92       	push	r13
    2482:	ef 92       	push	r14
    2484:	ff 92       	push	r15
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    2486:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    248a:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    248e:	66 85       	ldd	r22, Z+14	; 0x0e
    2490:	77 85       	ldd	r23, Z+15	; 0x0f
    2492:	80 89       	ldd	r24, Z+16	; 0x10
    2494:	91 89       	ldd	r25, Z+17	; 0x11

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2496:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    249a:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    249e:	a0 91 2d 0e 	lds	r26, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    24a2:	b0 91 2e 0e 	lds	r27, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    24a6:	5a 96       	adiw	r26, 0x1a	; 26
    24a8:	2c 91       	ld	r18, X
    24aa:	0f 2e       	mov	r0, r31
    24ac:	fa e0       	ldi	r31, 0x0A	; 10
    24ae:	cf 2e       	mov	r12, r31
    24b0:	d1 2c       	mov	r13, r1
    24b2:	e1 2c       	mov	r14, r1
    24b4:	f1 2c       	mov	r15, r1
    24b6:	f0 2d       	mov	r31, r0
    24b8:	c2 1a       	sub	r12, r18
    24ba:	d1 08       	sbc	r13, r1
    24bc:	e1 08       	sbc	r14, r1
    24be:	f1 08       	sbc	r15, r1
    24c0:	c6 86       	std	Z+14, r12	; 0x0e
    24c2:	d7 86       	std	Z+15, r13	; 0x0f
    24c4:	e0 8a       	std	Z+16, r14	; 0x10
    24c6:	f1 8a       	std	Z+17, r15	; 0x11

    return uxReturn;
}
    24c8:	ff 90       	pop	r15
    24ca:	ef 90       	pop	r14
    24cc:	df 90       	pop	r13
    24ce:	cf 90       	pop	r12
    24d0:	08 95       	ret

000024d2 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    24d2:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    24d6:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    24da:	89 2b       	or	r24, r25
    24dc:	39 f0       	breq	.+14     	; 0x24ec <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    24de:	e0 91 2d 0e 	lds	r30, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    24e2:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    24e6:	86 a5       	ldd	r24, Z+46	; 0x2e
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    24ec:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <pxCurrentTCB>
    24f0:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <pxCurrentTCB+0x1>
    }
    24f4:	08 95       	ret

000024f6 <prvGetNextExpireTime>:
    24f6:	dc 01       	movw	r26, r24
    24f8:	e0 91 39 0e 	lds	r30, 0x0E39	; 0x800e39 <pxCurrentTimerList>
    24fc:	f0 91 3a 0e 	lds	r31, 0x0E3A	; 0x800e3a <pxCurrentTimerList+0x1>
    2500:	80 81       	ld	r24, Z
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	81 11       	cpse	r24, r1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c 93       	st	X, r25
    250a:	91 11       	cpse	r25, r1
    250c:	08 c0       	rjmp	.+16     	; 0x251e <prvGetNextExpireTime+0x28>
    250e:	07 80       	ldd	r0, Z+7	; 0x07
    2510:	f0 85       	ldd	r31, Z+8	; 0x08
    2512:	e0 2d       	mov	r30, r0
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	08 95       	ret
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	cb 01       	movw	r24, r22
    2524:	08 95       	ret

00002526 <prvInsertTimerInActiveList>:
    2526:	cf 92       	push	r12
    2528:	df 92       	push	r13
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	fc 01       	movw	r30, r24
    2534:	42 83       	std	Z+2, r20	; 0x02
    2536:	53 83       	std	Z+3, r21	; 0x03
    2538:	64 83       	std	Z+4, r22	; 0x04
    253a:	75 83       	std	Z+5, r23	; 0x05
    253c:	93 87       	std	Z+11, r25	; 0x0b
    253e:	82 87       	std	Z+10, r24	; 0x0a
    2540:	04 17       	cp	r16, r20
    2542:	15 07       	cpc	r17, r21
    2544:	26 07       	cpc	r18, r22
    2546:	37 07       	cpc	r19, r23
    2548:	c0 f0       	brcs	.+48     	; 0x257a <prvInsertTimerInActiveList+0x54>
    254a:	0c 19       	sub	r16, r12
    254c:	1d 09       	sbc	r17, r13
    254e:	2e 09       	sbc	r18, r14
    2550:	3f 09       	sbc	r19, r15
    2552:	86 85       	ldd	r24, Z+14	; 0x0e
    2554:	97 85       	ldd	r25, Z+15	; 0x0f
    2556:	a0 89       	ldd	r26, Z+16	; 0x10
    2558:	b1 89       	ldd	r27, Z+17	; 0x11
    255a:	08 17       	cp	r16, r24
    255c:	19 07       	cpc	r17, r25
    255e:	2a 07       	cpc	r18, r26
    2560:	3b 07       	cpc	r19, r27
    2562:	00 f5       	brcc	.+64     	; 0x25a4 <prvInsertTimerInActiveList+0x7e>
    2564:	bf 01       	movw	r22, r30
    2566:	6e 5f       	subi	r22, 0xFE	; 254
    2568:	7f 4f       	sbci	r23, 0xFF	; 255
    256a:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <pxOverflowTimerList>
    256e:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <pxOverflowTimerList+0x1>
    2572:	0e 94 72 04 	call	0x8e4	; 0x8e4 <vListInsert>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	18 c0       	rjmp	.+48     	; 0x25aa <prvInsertTimerInActiveList+0x84>
    257a:	0c 15       	cp	r16, r12
    257c:	1d 05       	cpc	r17, r13
    257e:	2e 05       	cpc	r18, r14
    2580:	3f 05       	cpc	r19, r15
    2582:	28 f4       	brcc	.+10     	; 0x258e <prvInsertTimerInActiveList+0x68>
    2584:	4c 15       	cp	r20, r12
    2586:	5d 05       	cpc	r21, r13
    2588:	6e 05       	cpc	r22, r14
    258a:	7f 05       	cpc	r23, r15
    258c:	68 f4       	brcc	.+26     	; 0x25a8 <prvInsertTimerInActiveList+0x82>
    258e:	bf 01       	movw	r22, r30
    2590:	6e 5f       	subi	r22, 0xFE	; 254
    2592:	7f 4f       	sbci	r23, 0xFF	; 255
    2594:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <pxCurrentTimerList>
    2598:	90 91 3a 0e 	lds	r25, 0x0E3A	; 0x800e3a <pxCurrentTimerList+0x1>
    259c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <vListInsert>
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <prvInsertTimerInActiveList+0x84>
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <prvInsertTimerInActiveList+0x84>
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	df 90       	pop	r13
    25b4:	cf 90       	pop	r12
    25b6:	08 95       	ret

000025b8 <prvCheckForValidListAndQueue>:
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	0f 92       	push	r0
    25be:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <xTimerQueue>
    25c2:	90 91 36 0e 	lds	r25, 0x0E36	; 0x800e36 <xTimerQueue+0x1>
    25c6:	89 2b       	or	r24, r25
    25c8:	e9 f4       	brne	.+58     	; 0x2604 <prvCheckForValidListAndQueue+0x4c>
    25ca:	86 e4       	ldi	r24, 0x46	; 70
    25cc:	9e e0       	ldi	r25, 0x0E	; 14
    25ce:	0e 94 5d 04 	call	0x8ba	; 0x8ba <vListInitialise>
    25d2:	8b e3       	ldi	r24, 0x3B	; 59
    25d4:	9e e0       	ldi	r25, 0x0E	; 14
    25d6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <vListInitialise>
    25da:	86 e4       	ldi	r24, 0x46	; 70
    25dc:	9e e0       	ldi	r25, 0x0E	; 14
    25de:	90 93 3a 0e 	sts	0x0E3A, r25	; 0x800e3a <pxCurrentTimerList+0x1>
    25e2:	80 93 39 0e 	sts	0x0E39, r24	; 0x800e39 <pxCurrentTimerList>
    25e6:	8b e3       	ldi	r24, 0x3B	; 59
    25e8:	9e e0       	ldi	r25, 0x0E	; 14
    25ea:	90 93 38 0e 	sts	0x0E38, r25	; 0x800e38 <pxOverflowTimerList+0x1>
    25ee:	80 93 37 0e 	sts	0x0E37, r24	; 0x800e37 <pxOverflowTimerList>
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	67 e0       	ldi	r22, 0x07	; 7
    25f6:	8a e0       	ldi	r24, 0x0A	; 10
    25f8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <xQueueGenericCreate>
    25fc:	90 93 36 0e 	sts	0x0E36, r25	; 0x800e36 <xTimerQueue+0x1>
    2600:	80 93 35 0e 	sts	0x0E35, r24	; 0x800e35 <xTimerQueue>
    2604:	0f 90       	pop	r0
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	08 95       	ret

0000260a <xTimerCreateTimerTask>:
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	0f 93       	push	r16
    2610:	d3 df       	rcall	.-90     	; 0x25b8 <prvCheckForValidListAndQueue>
    2612:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <xTimerQueue>
    2616:	90 91 36 0e 	lds	r25, 0x0E36	; 0x800e36 <xTimerQueue+0x1>
    261a:	89 2b       	or	r24, r25
    261c:	89 f0       	breq	.+34     	; 0x2640 <xTimerCreateTimerTask+0x36>
    261e:	0f 2e       	mov	r0, r31
    2620:	f3 e3       	ldi	r31, 0x33	; 51
    2622:	ef 2e       	mov	r14, r31
    2624:	fe e0       	ldi	r31, 0x0E	; 14
    2626:	ff 2e       	mov	r15, r31
    2628:	f0 2d       	mov	r31, r0
    262a:	03 e0       	ldi	r16, 0x03	; 3
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 ec       	ldi	r20, 0xC0	; 192
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	6e e8       	ldi	r22, 0x8E	; 142
    2636:	72 e0       	ldi	r23, 0x02	; 2
    2638:	87 ed       	ldi	r24, 0xD7	; 215
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	46 d8       	rcall	.-3956   	; 0x16ca <xTaskCreate>
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <xTimerCreateTimerTask+0x38>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	0f 91       	pop	r16
    2644:	ff 90       	pop	r15
    2646:	ef 90       	pop	r14
    2648:	08 95       	ret

0000264a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    264a:	8f 92       	push	r8
    264c:	9f 92       	push	r9
    264e:	af 92       	push	r10
    2650:	bf 92       	push	r11
    2652:	cf 92       	push	r12
    2654:	df 92       	push	r13
    2656:	ef 92       	push	r14
    2658:	ff 92       	push	r15
    265a:	0f 93       	push	r16
    265c:	1f 93       	push	r17
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	27 97       	sbiw	r28, 0x07	; 7
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2672:	e0 91 35 0e 	lds	r30, 0x0E35	; 0x800e35 <xTimerQueue>
    2676:	f0 91 36 0e 	lds	r31, 0x0E36	; 0x800e36 <xTimerQueue+0x1>
    267a:	30 97       	sbiw	r30, 0x00	; 0
    267c:	81 f1       	breq	.+96     	; 0x26de <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    267e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2680:	2a 83       	std	Y+2, r18	; 0x02
    2682:	3b 83       	std	Y+3, r19	; 0x03
    2684:	4c 83       	std	Y+4, r20	; 0x04
    2686:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2688:	9f 83       	std	Y+7, r25	; 0x07
    268a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    268c:	66 30       	cpi	r22, 0x06	; 6
    268e:	f4 f4       	brge	.+60     	; 0x26cc <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2690:	9f dd       	rcall	.-1218   	; 0x21d0 <xTaskGetSchedulerState>
    2692:	82 30       	cpi	r24, 0x02	; 2
    2694:	69 f4       	brne	.+26     	; 0x26b0 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2696:	00 e0       	ldi	r16, 0x00	; 0
    2698:	a7 01       	movw	r20, r14
    269a:	96 01       	movw	r18, r12
    269c:	be 01       	movw	r22, r28
    269e:	6f 5f       	subi	r22, 0xFF	; 255
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255
    26a2:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <xTimerQueue>
    26a6:	90 91 36 0e 	lds	r25, 0x0E36	; 0x800e36 <xTimerQueue+0x1>
    26aa:	0e 94 42 07 	call	0xe84	; 0xe84 <xQueueGenericSend>
    26ae:	18 c0       	rjmp	.+48     	; 0x26e0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    26b0:	00 e0       	ldi	r16, 0x00	; 0
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	a9 01       	movw	r20, r18
    26b8:	be 01       	movw	r22, r28
    26ba:	6f 5f       	subi	r22, 0xFF	; 255
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <xTimerQueue>
    26c2:	90 91 36 0e 	lds	r25, 0x0E36	; 0x800e36 <xTimerQueue+0x1>
    26c6:	0e 94 42 07 	call	0xe84	; 0xe84 <xQueueGenericSend>
    26ca:	0a c0       	rjmp	.+20     	; 0x26e0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	a8 01       	movw	r20, r16
    26d0:	be 01       	movw	r22, r28
    26d2:	6f 5f       	subi	r22, 0xFF	; 255
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	cf 01       	movw	r24, r30
    26d8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <xQueueGenericSendFromISR>
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    26de:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    26e0:	27 96       	adiw	r28, 0x07	; 7
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	bf 90       	pop	r11
    26fe:	af 90       	pop	r10
    2700:	9f 90       	pop	r9
    2702:	8f 90       	pop	r8
    2704:	08 95       	ret

00002706 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2706:	8f 92       	push	r8
    2708:	9f 92       	push	r9
    270a:	af 92       	push	r10
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    271e:	3b c0       	rjmp	.+118    	; 0x2796 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2720:	07 80       	ldd	r0, Z+7	; 0x07
    2722:	f0 85       	ldd	r31, Z+8	; 0x08
    2724:	e0 2d       	mov	r30, r0
    2726:	80 80       	ld	r8, Z
    2728:	91 80       	ldd	r9, Z+1	; 0x01
    272a:	a2 80       	ldd	r10, Z+2	; 0x02
    272c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    272e:	c0 85       	ldd	r28, Z+8	; 0x08
    2730:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2732:	8e 01       	movw	r16, r28
    2734:	0e 5f       	subi	r16, 0xFE	; 254
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	c8 01       	movw	r24, r16
    273a:	0e 94 af 04 	call	0x95e	; 0x95e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    273e:	ec 89       	ldd	r30, Y+20	; 0x14
    2740:	fd 89       	ldd	r31, Y+21	; 0x15
    2742:	ce 01       	movw	r24, r28
    2744:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2746:	8e 89       	ldd	r24, Y+22	; 0x16
    2748:	82 ff       	sbrs	r24, 2
    274a:	25 c0       	rjmp	.+74     	; 0x2796 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    274c:	8e 85       	ldd	r24, Y+14	; 0x0e
    274e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2750:	a8 89       	ldd	r26, Y+16	; 0x10
    2752:	b9 89       	ldd	r27, Y+17	; 0x11
    2754:	88 0d       	add	r24, r8
    2756:	99 1d       	adc	r25, r9
    2758:	aa 1d       	adc	r26, r10
    275a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    275c:	88 16       	cp	r8, r24
    275e:	99 06       	cpc	r9, r25
    2760:	aa 06       	cpc	r10, r26
    2762:	bb 06       	cpc	r11, r27
    2764:	70 f4       	brcc	.+28     	; 0x2782 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2766:	8a 83       	std	Y+2, r24	; 0x02
    2768:	9b 83       	std	Y+3, r25	; 0x03
    276a:	ac 83       	std	Y+4, r26	; 0x04
    276c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    276e:	db 87       	std	Y+11, r29	; 0x0b
    2770:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2772:	b8 01       	movw	r22, r16
    2774:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <pxCurrentTimerList>
    2778:	90 91 3a 0e 	lds	r25, 0x0E3A	; 0x800e3a <pxCurrentTimerList+0x1>
    277c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <vListInsert>
    2780:	0a c0       	rjmp	.+20     	; 0x2796 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2782:	c1 2c       	mov	r12, r1
    2784:	d1 2c       	mov	r13, r1
    2786:	76 01       	movw	r14, r12
    2788:	00 e0       	ldi	r16, 0x00	; 0
    278a:	10 e0       	ldi	r17, 0x00	; 0
    278c:	a5 01       	movw	r20, r10
    278e:	94 01       	movw	r18, r8
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	ce 01       	movw	r24, r28
    2794:	5a df       	rcall	.-332    	; 0x264a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2796:	e0 91 39 0e 	lds	r30, 0x0E39	; 0x800e39 <pxCurrentTimerList>
    279a:	f0 91 3a 0e 	lds	r31, 0x0E3A	; 0x800e3a <pxCurrentTimerList+0x1>
    279e:	80 81       	ld	r24, Z
    27a0:	81 11       	cpse	r24, r1
    27a2:	be cf       	rjmp	.-132    	; 0x2720 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    27a4:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <pxOverflowTimerList>
    27a8:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <pxOverflowTimerList+0x1>
    27ac:	90 93 3a 0e 	sts	0x0E3A, r25	; 0x800e3a <pxCurrentTimerList+0x1>
    27b0:	80 93 39 0e 	sts	0x0E39, r24	; 0x800e39 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    27b4:	f0 93 38 0e 	sts	0x0E38, r31	; 0x800e38 <pxOverflowTimerList+0x1>
    27b8:	e0 93 37 0e 	sts	0x0E37, r30	; 0x800e37 <pxOverflowTimerList>
    }
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	1f 91       	pop	r17
    27c2:	0f 91       	pop	r16
    27c4:	ff 90       	pop	r15
    27c6:	ef 90       	pop	r14
    27c8:	df 90       	pop	r13
    27ca:	cf 90       	pop	r12
    27cc:	bf 90       	pop	r11
    27ce:	af 90       	pop	r10
    27d0:	9f 90       	pop	r9
    27d2:	8f 90       	pop	r8
    27d4:	08 95       	ret

000027d6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    27d6:	cf 92       	push	r12
    27d8:	df 92       	push	r13
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    27e4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskGetTickCount>
    27e8:	6b 01       	movw	r12, r22
    27ea:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    27ec:	80 91 2f 0e 	lds	r24, 0x0E2F	; 0x800e2f <xLastTime.2436>
    27f0:	90 91 30 0e 	lds	r25, 0x0E30	; 0x800e30 <xLastTime.2436+0x1>
    27f4:	a0 91 31 0e 	lds	r26, 0x0E31	; 0x800e31 <xLastTime.2436+0x2>
    27f8:	b0 91 32 0e 	lds	r27, 0x0E32	; 0x800e32 <xLastTime.2436+0x3>
    27fc:	c8 16       	cp	r12, r24
    27fe:	d9 06       	cpc	r13, r25
    2800:	ea 06       	cpc	r14, r26
    2802:	fb 06       	cpc	r15, r27
    2804:	20 f4       	brcc	.+8      	; 0x280e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2806:	7f df       	rcall	.-258    	; 0x2706 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	88 83       	st	Y, r24
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    280e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2810:	c0 92 2f 0e 	sts	0x0E2F, r12	; 0x800e2f <xLastTime.2436>
    2814:	d0 92 30 0e 	sts	0x0E30, r13	; 0x800e30 <xLastTime.2436+0x1>
    2818:	e0 92 31 0e 	sts	0x0E31, r14	; 0x800e31 <xLastTime.2436+0x2>
    281c:	f0 92 32 0e 	sts	0x0E32, r15	; 0x800e32 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2820:	c7 01       	movw	r24, r14
    2822:	b6 01       	movw	r22, r12
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	ff 90       	pop	r15
    282a:	ef 90       	pop	r14
    282c:	df 90       	pop	r13
    282e:	cf 90       	pop	r12
    2830:	08 95       	ret

00002832 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2832:	4f 92       	push	r4
    2834:	5f 92       	push	r5
    2836:	6f 92       	push	r6
    2838:	7f 92       	push	r7
    283a:	8f 92       	push	r8
    283c:	9f 92       	push	r9
    283e:	af 92       	push	r10
    2840:	bf 92       	push	r11
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	4b 01       	movw	r8, r22
    2854:	5c 01       	movw	r10, r24
    2856:	29 01       	movw	r4, r18
    2858:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    285a:	e0 91 39 0e 	lds	r30, 0x0E39	; 0x800e39 <pxCurrentTimerList>
    285e:	f0 91 3a 0e 	lds	r31, 0x0E3A	; 0x800e3a <pxCurrentTimerList+0x1>
    2862:	07 80       	ldd	r0, Z+7	; 0x07
    2864:	f0 85       	ldd	r31, Z+8	; 0x08
    2866:	e0 2d       	mov	r30, r0
    2868:	c0 85       	ldd	r28, Z+8	; 0x08
    286a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    286c:	ce 01       	movw	r24, r28
    286e:	02 96       	adiw	r24, 0x02	; 2
    2870:	0e 94 af 04 	call	0x95e	; 0x95e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2874:	8e 89       	ldd	r24, Y+22	; 0x16
    2876:	82 ff       	sbrs	r24, 2
    2878:	1b c0       	rjmp	.+54     	; 0x28b0 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    287a:	4e 85       	ldd	r20, Y+14	; 0x0e
    287c:	5f 85       	ldd	r21, Y+15	; 0x0f
    287e:	68 89       	ldd	r22, Y+16	; 0x10
    2880:	79 89       	ldd	r23, Y+17	; 0x11
    2882:	48 0d       	add	r20, r8
    2884:	59 1d       	adc	r21, r9
    2886:	6a 1d       	adc	r22, r10
    2888:	7b 1d       	adc	r23, r11
    288a:	75 01       	movw	r14, r10
    288c:	64 01       	movw	r12, r8
    288e:	93 01       	movw	r18, r6
    2890:	82 01       	movw	r16, r4
    2892:	ce 01       	movw	r24, r28
    2894:	48 de       	rcall	.-880    	; 0x2526 <prvInsertTimerInActiveList>
    2896:	88 23       	and	r24, r24
    2898:	69 f0       	breq	.+26     	; 0x28b4 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    289a:	c1 2c       	mov	r12, r1
    289c:	d1 2c       	mov	r13, r1
    289e:	76 01       	movw	r14, r12
    28a0:	00 e0       	ldi	r16, 0x00	; 0
    28a2:	10 e0       	ldi	r17, 0x00	; 0
    28a4:	a5 01       	movw	r20, r10
    28a6:	94 01       	movw	r18, r8
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	ce 01       	movw	r24, r28
    28ac:	ce de       	rcall	.-612    	; 0x264a <xTimerGenericCommand>
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    28b0:	8e 7f       	andi	r24, 0xFE	; 254
    28b2:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    28b4:	ec 89       	ldd	r30, Y+20	; 0x14
    28b6:	fd 89       	ldd	r31, Y+21	; 0x15
    28b8:	ce 01       	movw	r24, r28
    28ba:	19 95       	eicall
    }
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
    28cc:	bf 90       	pop	r11
    28ce:	af 90       	pop	r10
    28d0:	9f 90       	pop	r9
    28d2:	8f 90       	pop	r8
    28d4:	7f 90       	pop	r7
    28d6:	6f 90       	pop	r6
    28d8:	5f 90       	pop	r5
    28da:	4f 90       	pop	r4
    28dc:	08 95       	ret

000028de <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    28de:	8f 92       	push	r8
    28e0:	9f 92       	push	r9
    28e2:	af 92       	push	r10
    28e4:	bf 92       	push	r11
    28e6:	cf 92       	push	r12
    28e8:	df 92       	push	r13
    28ea:	ef 92       	push	r14
    28ec:	ff 92       	push	r15
    28ee:	1f 93       	push	r17
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	1f 92       	push	r1
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	6b 01       	movw	r12, r22
    28fc:	7c 01       	movw	r14, r24
    28fe:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2900:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2904:	ce 01       	movw	r24, r28
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	66 df       	rcall	.-308    	; 0x27d6 <prvSampleTimeNow>
    290a:	4b 01       	movw	r8, r22
    290c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	81 11       	cpse	r24, r1
    2912:	2b c0       	rjmp	.+86     	; 0x296a <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2914:	11 11       	cpse	r17, r1
    2916:	0c c0       	rjmp	.+24     	; 0x2930 <prvProcessTimerOrBlockTask+0x52>
    2918:	8c 14       	cp	r8, r12
    291a:	9d 04       	cpc	r9, r13
    291c:	ae 04       	cpc	r10, r14
    291e:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2920:	38 f0       	brcs	.+14     	; 0x2930 <prvProcessTimerOrBlockTask+0x52>
    2922:	94 d8       	rcall	.-3800   	; 0x1a4c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2924:	a5 01       	movw	r20, r10
    2926:	94 01       	movw	r18, r8
    2928:	c7 01       	movw	r24, r14
    292a:	b6 01       	movw	r22, r12
    292c:	82 df       	rcall	.-252    	; 0x2832 <prvProcessExpiredTimer>
    292e:	1e c0       	rjmp	.+60     	; 0x296c <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2930:	11 23       	and	r17, r17
    2932:	41 f0       	breq	.+16     	; 0x2944 <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2934:	e0 91 37 0e 	lds	r30, 0x0E37	; 0x800e37 <pxOverflowTimerList>
    2938:	f0 91 38 0e 	lds	r31, 0x0E38	; 0x800e38 <pxOverflowTimerList+0x1>
    293c:	80 81       	ld	r24, Z
    293e:	11 e0       	ldi	r17, 0x01	; 1
    2940:	81 11       	cpse	r24, r1
    2942:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2944:	b7 01       	movw	r22, r14
    2946:	a6 01       	movw	r20, r12
    2948:	48 19       	sub	r20, r8
    294a:	59 09       	sbc	r21, r9
    294c:	6a 09       	sbc	r22, r10
    294e:	7b 09       	sbc	r23, r11
    2950:	21 2f       	mov	r18, r17
    2952:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <xTimerQueue>
    2956:	90 91 36 0e 	lds	r25, 0x0E36	; 0x800e36 <xTimerQueue+0x1>
    295a:	0e 94 42 09 	call	0x1284	; 0x1284 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    295e:	76 d8       	rcall	.-3860   	; 0x1a4c <xTaskResumeAll>
    2960:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2962:	04 c0       	rjmp	.+8      	; 0x296c <prvProcessTimerOrBlockTask+0x8e>
    2964:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2968:	01 c0       	rjmp	.+2      	; 0x296c <prvProcessTimerOrBlockTask+0x8e>
    296a:	70 d8       	rcall	.-3872   	; 0x1a4c <xTaskResumeAll>
            }
        }
    }
    296c:	0f 90       	pop	r0
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	1f 91       	pop	r17
    2974:	ff 90       	pop	r15
    2976:	ef 90       	pop	r14
    2978:	df 90       	pop	r13
    297a:	cf 90       	pop	r12
    297c:	bf 90       	pop	r11
    297e:	af 90       	pop	r10
    2980:	9f 90       	pop	r9
    2982:	8f 90       	pop	r8
    2984:	08 95       	ret

00002986 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2986:	af 92       	push	r10
    2988:	bf 92       	push	r11
    298a:	cf 92       	push	r12
    298c:	df 92       	push	r13
    298e:	ef 92       	push	r14
    2990:	ff 92       	push	r15
    2992:	0f 93       	push	r16
    2994:	1f 93       	push	r17
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	28 97       	sbiw	r28, 0x08	; 8
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    29aa:	82 c0       	rjmp	.+260    	; 0x2ab0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	88 23       	and	r24, r24
    29b0:	0c f4       	brge	.+2      	; 0x29b4 <prvProcessReceivedCommands+0x2e>
    29b2:	7e c0       	rjmp	.+252    	; 0x2ab0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    29b4:	ae 80       	ldd	r10, Y+6	; 0x06
    29b6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    29b8:	d5 01       	movw	r26, r10
    29ba:	1c 96       	adiw	r26, 0x0c	; 12
    29bc:	8d 91       	ld	r24, X+
    29be:	9c 91       	ld	r25, X
    29c0:	1d 97       	sbiw	r26, 0x0d	; 13
    29c2:	89 2b       	or	r24, r25
    29c4:	21 f0       	breq	.+8      	; 0x29ce <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29c6:	c5 01       	movw	r24, r10
    29c8:	02 96       	adiw	r24, 0x02	; 2
    29ca:	0e 94 af 04 	call	0x95e	; 0x95e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    29ce:	ce 01       	movw	r24, r28
    29d0:	08 96       	adiw	r24, 0x08	; 8
    29d2:	01 df       	rcall	.-510    	; 0x27d6 <prvSampleTimeNow>
    29d4:	8b 01       	movw	r16, r22
    29d6:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    29d8:	e9 81       	ldd	r30, Y+1	; 0x01
    29da:	0e 2e       	mov	r0, r30
    29dc:	00 0c       	add	r0, r0
    29de:	ff 0b       	sbc	r31, r31
    29e0:	ea 30       	cpi	r30, 0x0A	; 10
    29e2:	f1 05       	cpc	r31, r1
    29e4:	08 f0       	brcs	.+2      	; 0x29e8 <prvProcessReceivedCommands+0x62>
    29e6:	64 c0       	rjmp	.+200    	; 0x2ab0 <prvProcessReceivedCommands+0x12a>
    29e8:	88 27       	eor	r24, r24
    29ea:	ee 58       	subi	r30, 0x8E	; 142
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	8f 4f       	sbci	r24, 0xFF	; 255
    29f0:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    29f4:	f5 01       	movw	r30, r10
    29f6:	86 89       	ldd	r24, Z+22	; 0x16
    29f8:	81 60       	ori	r24, 0x01	; 1
    29fa:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    29fc:	ca 80       	ldd	r12, Y+2	; 0x02
    29fe:	db 80       	ldd	r13, Y+3	; 0x03
    2a00:	ec 80       	ldd	r14, Y+4	; 0x04
    2a02:	fd 80       	ldd	r15, Y+5	; 0x05
    2a04:	46 85       	ldd	r20, Z+14	; 0x0e
    2a06:	57 85       	ldd	r21, Z+15	; 0x0f
    2a08:	60 89       	ldd	r22, Z+16	; 0x10
    2a0a:	71 89       	ldd	r23, Z+17	; 0x11
    2a0c:	4c 0d       	add	r20, r12
    2a0e:	5d 1d       	adc	r21, r13
    2a10:	6e 1d       	adc	r22, r14
    2a12:	7f 1d       	adc	r23, r15
    2a14:	c5 01       	movw	r24, r10
    2a16:	87 dd       	rcall	.-1266   	; 0x2526 <prvInsertTimerInActiveList>
    2a18:	88 23       	and	r24, r24
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <prvProcessReceivedCommands+0x98>
    2a1c:	49 c0       	rjmp	.+146    	; 0x2ab0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a1e:	d5 01       	movw	r26, r10
    2a20:	54 96       	adiw	r26, 0x14	; 20
    2a22:	ed 91       	ld	r30, X+
    2a24:	fc 91       	ld	r31, X
    2a26:	55 97       	sbiw	r26, 0x15	; 21
    2a28:	c5 01       	movw	r24, r10
    2a2a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a2c:	f5 01       	movw	r30, r10
    2a2e:	86 89       	ldd	r24, Z+22	; 0x16
    2a30:	82 ff       	sbrs	r24, 2
    2a32:	3e c0       	rjmp	.+124    	; 0x2ab0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2a34:	4a 81       	ldd	r20, Y+2	; 0x02
    2a36:	5b 81       	ldd	r21, Y+3	; 0x03
    2a38:	6c 81       	ldd	r22, Y+4	; 0x04
    2a3a:	7d 81       	ldd	r23, Y+5	; 0x05
    2a3c:	86 85       	ldd	r24, Z+14	; 0x0e
    2a3e:	97 85       	ldd	r25, Z+15	; 0x0f
    2a40:	a0 89       	ldd	r26, Z+16	; 0x10
    2a42:	b1 89       	ldd	r27, Z+17	; 0x11
    2a44:	9a 01       	movw	r18, r20
    2a46:	ab 01       	movw	r20, r22
    2a48:	28 0f       	add	r18, r24
    2a4a:	39 1f       	adc	r19, r25
    2a4c:	4a 1f       	adc	r20, r26
    2a4e:	5b 1f       	adc	r21, r27
    2a50:	c1 2c       	mov	r12, r1
    2a52:	d1 2c       	mov	r13, r1
    2a54:	76 01       	movw	r14, r12
    2a56:	00 e0       	ldi	r16, 0x00	; 0
    2a58:	10 e0       	ldi	r17, 0x00	; 0
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	c5 01       	movw	r24, r10
    2a5e:	f5 dd       	rcall	.-1046   	; 0x264a <xTimerGenericCommand>
    2a60:	27 c0       	rjmp	.+78     	; 0x2ab0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2a62:	d5 01       	movw	r26, r10
    2a64:	56 96       	adiw	r26, 0x16	; 22
    2a66:	8c 91       	ld	r24, X
    2a68:	56 97       	sbiw	r26, 0x16	; 22
    2a6a:	8e 7f       	andi	r24, 0xFE	; 254
    2a6c:	56 96       	adiw	r26, 0x16	; 22
    2a6e:	8c 93       	st	X, r24
                        break;
    2a70:	1f c0       	rjmp	.+62     	; 0x2ab0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2a72:	f5 01       	movw	r30, r10
    2a74:	86 89       	ldd	r24, Z+22	; 0x16
    2a76:	81 60       	ori	r24, 0x01	; 1
    2a78:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2a7a:	4a 81       	ldd	r20, Y+2	; 0x02
    2a7c:	5b 81       	ldd	r21, Y+3	; 0x03
    2a7e:	6c 81       	ldd	r22, Y+4	; 0x04
    2a80:	7d 81       	ldd	r23, Y+5	; 0x05
    2a82:	46 87       	std	Z+14, r20	; 0x0e
    2a84:	57 87       	std	Z+15, r21	; 0x0f
    2a86:	60 8b       	std	Z+16, r22	; 0x10
    2a88:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2a8a:	40 0f       	add	r20, r16
    2a8c:	51 1f       	adc	r21, r17
    2a8e:	62 1f       	adc	r22, r18
    2a90:	73 1f       	adc	r23, r19
    2a92:	68 01       	movw	r12, r16
    2a94:	79 01       	movw	r14, r18
    2a96:	c5 01       	movw	r24, r10
    2a98:	46 dd       	rcall	.-1396   	; 0x2526 <prvInsertTimerInActiveList>
                        break;
    2a9a:	0a c0       	rjmp	.+20     	; 0x2ab0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2a9c:	f5 01       	movw	r30, r10
    2a9e:	86 89       	ldd	r24, Z+22	; 0x16
    2aa0:	81 fd       	sbrc	r24, 1
    2aa2:	04 c0       	rjmp	.+8      	; 0x2aac <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2aa4:	c5 01       	movw	r24, r10
    2aa6:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2aac:	8e 7f       	andi	r24, 0xFE	; 254
    2aae:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	a9 01       	movw	r20, r18
    2ab6:	be 01       	movw	r22, r28
    2ab8:	6f 5f       	subi	r22, 0xFF	; 255
    2aba:	7f 4f       	sbci	r23, 0xFF	; 255
    2abc:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <xTimerQueue>
    2ac0:	90 91 36 0e 	lds	r25, 0x0E36	; 0x800e36 <xTimerQueue+0x1>
    2ac4:	0e 94 09 08 	call	0x1012	; 0x1012 <xQueueReceive>
    2ac8:	81 11       	cpse	r24, r1
    2aca:	70 cf       	rjmp	.-288    	; 0x29ac <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2acc:	28 96       	adiw	r28, 0x08	; 8
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	df 90       	pop	r13
    2ae6:	cf 90       	pop	r12
    2ae8:	bf 90       	pop	r11
    2aea:	af 90       	pop	r10
    2aec:	08 95       	ret

00002aee <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2aee:	08 95       	ret

00002af0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2af0:	84 b1       	in	r24, 0x04	; 4
    2af2:	80 68       	ori	r24, 0x80	; 128
    2af4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2af6:	85 b1       	in	r24, 0x05	; 5
    2af8:	80 68       	ori	r24, 0x80	; 128
    2afa:	85 b9       	out	0x05, r24	; 5
    2afc:	08 95       	ret

00002afe <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2afe:	83 b1       	in	r24, 0x03	; 3
    2b00:	80 68       	ori	r24, 0x80	; 128
    2b02:	83 b9       	out	0x03, r24	; 3
    2b04:	08 95       	ret

00002b06 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2b06:	f4 df       	rcall	.-24     	; 0x2af0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b08:	2f ef       	ldi	r18, 0xFF	; 255
    2b0a:	80 e7       	ldi	r24, 0x70	; 112
    2b0c:	92 e0       	ldi	r25, 0x02	; 2
    2b0e:	21 50       	subi	r18, 0x01	; 1
    2b10:	80 40       	sbci	r24, 0x00	; 0
    2b12:	90 40       	sbci	r25, 0x00	; 0
    2b14:	e1 f7       	brne	.-8      	; 0x2b0e <vApplicationMallocFailedHook+0x8>
    2b16:	00 c0       	rjmp	.+0      	; 0x2b18 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2b18:	00 00       	nop
    2b1a:	f1 df       	rcall	.-30     	; 0x2afe <prvBlinkMainLed>
    2b1c:	f5 cf       	rjmp	.-22     	; 0x2b08 <vApplicationMallocFailedHook+0x2>

00002b1e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2b1e:	e8 df       	rcall	.-48     	; 0x2af0 <prvSetMainLedOn>
    2b20:	2f ef       	ldi	r18, 0xFF	; 255
    2b22:	87 ea       	ldi	r24, 0xA7	; 167
    2b24:	91 e6       	ldi	r25, 0x61	; 97
    2b26:	21 50       	subi	r18, 0x01	; 1
    2b28:	80 40       	sbci	r24, 0x00	; 0
    2b2a:	90 40       	sbci	r25, 0x00	; 0
    2b2c:	e1 f7       	brne	.-8      	; 0x2b26 <vApplicationStackOverflowHook+0x8>
    2b2e:	00 c0       	rjmp	.+0      	; 0x2b30 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2b30:	00 00       	nop
    2b32:	e5 df       	rcall	.-54     	; 0x2afe <prvBlinkMainLed>
    2b34:	f5 cf       	rjmp	.-22     	; 0x2b20 <vApplicationStackOverflowHook+0x2>

00002b36 <initializeTempAndHumiditySemaphore>:
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
	tempHumSemaphore = xSemaphoreCreateBinary();
    2b36:	43 e0       	ldi	r20, 0x03	; 3
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <xQueueGenericCreate>
    2b40:	90 93 7b 0e 	sts	0x0E7B, r25	; 0x800e7b <tempHumSemaphore+0x1>
    2b44:	80 93 7a 0e 	sts	0x0E7A, r24	; 0x800e7a <tempHumSemaphore>
    2b48:	08 95       	ret

00002b4a <initializeQueue>:
}

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	62 e0       	ldi	r22, 0x02	; 2
    2b4e:	83 e0       	ldi	r24, 0x03	; 3
    2b50:	0e 94 1f 07 	call	0xe3e	; 0xe3e <xQueueGenericCreate>
    2b54:	90 93 82 0e 	sts	0x0E82, r25	; 0x800e82 <sensorDataQueue+0x1>
    2b58:	80 93 81 0e 	sts	0x0E81, r24	; 0x800e81 <sensorDataQueue>
    2b5c:	08 95       	ret

00002b5e <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    2b5e:	0e 94 a7 01 	call	0x34e	; 0x34e <xEventGroupCreate>
    2b62:	90 93 7d 0e 	sts	0x0E7D, r25	; 0x800e7d <dataEventGroup+0x1>
    2b66:	80 93 7c 0e 	sts	0x0E7C, r24	; 0x800e7c <dataEventGroup>
    2b6a:	08 95       	ret

00002b6c <initializeTempAndHumDriver>:
#include "TempAndHum.h"
#include "Setup.h"

void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    2b6c:	2f d1       	rcall	.+606    	; 0x2dcc <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    2b6e:	81 11       	cpse	r24, r1
    2b70:	05 c0       	rjmp	.+10     	; 0x2b7c <initializeTempAndHumDriver+0x10>
		{
			printf("Temp and Hum Driver Initialized ok\n");
    2b72:	86 e9       	ldi	r24, 0x96	; 150
    2b74:	92 e0       	ldi	r25, 0x02	; 2
    2b76:	0c 94 21 21 	jmp	0x4242	; 0x4242 <puts>
    2b7a:	08 95       	ret
		}
		
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    2b7c:	89 eb       	ldi	r24, 0xB9	; 185
    2b7e:	92 e0       	ldi	r25, 0x02	; 2
    2b80:	0c 94 21 21 	jmp	0x4242	; 0x4242 <puts>
    2b84:	08 95       	ret

00002b86 <measureTempAndHum>:
		}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    2b86:	39 d1       	rcall	.+626    	; 0x2dfa <hih8120_wakeup>
    2b88:	88 23       	and	r24, r24
    2b8a:	21 f0       	breq	.+8      	; 0x2b94 <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    2b8c:	83 ed       	ldi	r24, 0xD3	; 211
    2b8e:	92 e0       	ldi	r25, 0x02	; 2
    2b90:	0e 94 21 21 	call	0x4242	; 0x4242 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    2b94:	63 e0       	ldi	r22, 0x03	; 3
    2b96:	70 e0       	ldi	r23, 0x00	; 0
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
	
	if ( HIH8120_OK !=  hih8120_measure() )
    2b9c:	33 d8       	rcall	.-3994   	; 0x1c04 <vTaskDelay>
    2b9e:	41 d1       	rcall	.+642    	; 0x2e22 <hih8120_measure>
    2ba0:	88 23       	and	r24, r24
    2ba2:	21 f0       	breq	.+8      	; 0x2bac <measureTempAndHum+0x26>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    2ba4:	83 ef       	ldi	r24, 0xF3	; 243
    2ba6:	92 e0       	ldi	r25, 0x02	; 2
    2ba8:	0e 94 21 21 	call	0x4242	; 0x4242 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    2bac:	61 e0       	ldi	r22, 0x01	; 1
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	27 c8       	rjmp	.-4018   	; 0x1c04 <vTaskDelay>
    2bb6:	08 95       	ret

00002bb8 <TempAndHumTask>:
	
	while(1)
	{
		uint16_t Temp = 0;
		uint16_t Humidity = 0;
		measureTempAndHum();
    2bb8:	e6 df       	rcall	.-52     	; 0x2b86 <measureTempAndHum>
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    2bba:	4f ef       	ldi	r20, 0xFF	; 255
    2bbc:	5f ef       	ldi	r21, 0xFF	; 255
    2bbe:	ba 01       	movw	r22, r20
    2bc0:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <tempHumSemaphore>
    2bc4:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <tempHumSemaphore+0x1>
    2bc8:	0e 94 96 08 	call	0x112c	; 0x112c <xQueueSemaphoreTake>
    2bcc:	81 30       	cpi	r24, 0x01	; 1
		{
			Temp = hih8120_getTemperature_x10();
    2bce:	a1 f7       	brne	.-24     	; 0x2bb8 <TempAndHumTask>
    2bd0:	6b d1       	rcall	.+726    	; 0x2ea8 <hih8120_getTemperature_x10>
    2bd2:	18 2f       	mov	r17, r24
			Humidity = hih8120_getHumidityPercent_x10();
    2bd4:	09 2f       	mov	r16, r25
    2bd6:	48 d1       	rcall	.+656    	; 0x2e68 <hih8120_getHumidityPercent_x10>
    2bd8:	c8 2f       	mov	r28, r24
    2bda:	d9 2f       	mov	r29, r25
			printf("Temperature: %d\n",Temp);
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	88 e1       	ldi	r24, 0x18	; 24
    2be2:	93 e0       	ldi	r25, 0x03	; 3
    2be4:	9f 93       	push	r25
    2be6:	8f 93       	push	r24
    2be8:	0e 94 0e 21 	call	0x421c	; 0x421c <printf>
			printf("Humidity: %d\n",Humidity);
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	89 e2       	ldi	r24, 0x29	; 41
    2bf2:	93 e0       	ldi	r25, 0x03	; 3
    2bf4:	9f 93       	push	r25
    2bf6:	8f 93       	push	r24
    2bf8:	0e 94 0e 21 	call	0x421c	; 0x421c <printf>
			//xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
			//xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    2bfc:	42 e0       	ldi	r20, 0x02	; 2
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	60 e0       	ldi	r22, 0x00	; 0
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	80 91 7c 0e 	lds	r24, 0x0E7C	; 0x800e7c <dataEventGroup>
    2c08:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <dataEventGroup+0x1>
    2c0c:	0e 94 77 02 	call	0x4ee	; 0x4ee <xEventGroupSetBits>
			xSemaphoreGive(tempHumSemaphore);
    2c10:	00 e0       	ldi	r16, 0x00	; 0
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	a9 01       	movw	r20, r18
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <tempHumSemaphore>
    2c20:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <tempHumSemaphore+0x1>
    2c24:	0e 94 42 07 	call	0xe84	; 0xe84 <xQueueGenericSend>
			printf("Temp mesured\n");
    2c28:	87 e3       	ldi	r24, 0x37	; 55
    2c2a:	93 e0       	ldi	r25, 0x03	; 3
    2c2c:	0e 94 21 21 	call	0x4242	; 0x4242 <puts>
			vTaskDelay(300);
    2c30:	6c e2       	ldi	r22, 0x2C	; 44
    2c32:	71 e0       	ldi	r23, 0x01	; 1
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <vTaskDelay>
    2c3c:	8d b7       	in	r24, 0x3d	; 61
    2c3e:	9e b7       	in	r25, 0x3e	; 62
    2c40:	08 96       	adiw	r24, 0x08	; 8
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	9e bf       	out	0x3e, r25	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	8d bf       	out	0x3d, r24	; 61
    2c4c:	b5 cf       	rjmp	.-150    	; 0x2bb8 <TempAndHumTask>

00002c4e <createTempAndHumTask>:
		
	}
}

void createTempAndHumTask(void* pvpParameter)
{
    2c4e:	ef 92       	push	r14
    2c50:	ff 92       	push	r15
    2c52:	0f 93       	push	r16
	initializeTempAndHumDriver();
    2c54:	8b df       	rcall	.-234    	; 0x2b6c <initializeTempAndHumDriver>
		xTaskCreate(
    2c56:	e1 2c       	mov	r14, r1
    2c58:	f1 2c       	mov	r15, r1
    2c5a:	01 e0       	ldi	r16, 0x01	; 1
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 ec       	ldi	r20, 0xC0	; 192
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	64 e4       	ldi	r22, 0x44	; 68
    2c66:	73 e0       	ldi	r23, 0x03	; 3
    2c68:	8c ed       	ldi	r24, 0xDC	; 220
    2c6a:	95 e1       	ldi	r25, 0x15	; 21
    2c6c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <xTaskCreate>
		,  "TempAndHumTask"  // A name just for humans
		,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	ef 90       	pop	r14
    2c76:	08 95       	ret

00002c78 <ApplicationTask>:
{
	const TickType_t xTicksToWait = 500 / portTICK_PERIOD_MS;
	for (;;)
	{
		
		EventBits_t eventBits = xEventGroupWaitBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,xTicksToWait);
    2c78:	0f 2e       	mov	r0, r31
    2c7a:	ff e1       	ldi	r31, 0x1F	; 31
    2c7c:	cf 2e       	mov	r12, r31
    2c7e:	d1 2c       	mov	r13, r1
    2c80:	e1 2c       	mov	r14, r1
    2c82:	f1 2c       	mov	r15, r1
    2c84:	f0 2d       	mov	r31, r0
    2c86:	01 e0       	ldi	r16, 0x01	; 1
    2c88:	21 e0       	ldi	r18, 0x01	; 1
    2c8a:	43 e0       	ldi	r20, 0x03	; 3
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	80 91 7c 0e 	lds	r24, 0x0E7C	; 0x800e7c <dataEventGroup>
    2c96:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <dataEventGroup+0x1>
    2c9a:	0e 94 ba 01 	call	0x374	; 0x374 <xEventGroupWaitBits>
		if((eventBits &(BIT_CO2 | BIT_HUMIDITY_TEMPERATURE))==(BIT_CO2|BIT_HUMIDITY_TEMPERATURE))
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	83 70       	andi	r24, 0x03	; 3
    2ca4:	99 27       	eor	r25, r25
    2ca6:	aa 27       	eor	r26, r26
    2ca8:	bb 27       	eor	r27, r27
    2caa:	03 97       	sbiw	r24, 0x03	; 3
    2cac:	a1 05       	cpc	r26, r1
    2cae:	b1 05       	cpc	r27, r1
    2cb0:	c9 f4       	brne	.+50     	; 0x2ce4 <ApplicationTask+0x6c>
		{
			printf("All Data Colected;");
    2cb2:	83 e5       	ldi	r24, 0x53	; 83
    2cb4:	93 e0       	ldi	r25, 0x03	; 3
    2cb6:	9f 93       	push	r25
    2cb8:	8f 93       	push	r24
    2cba:	0e 94 0e 21 	call	0x421c	; 0x421c <printf>
			xEventGroupClearBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2);
    2cbe:	43 e0       	ldi	r20, 0x03	; 3
    2cc0:	50 e0       	ldi	r21, 0x00	; 0
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	80 91 7c 0e 	lds	r24, 0x0E7C	; 0x800e7c <dataEventGroup>
    2cca:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <dataEventGroup+0x1>
    2cce:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <xEventGroupClearBits>
			vTaskDelay(pdMS_TO_TICKS(300000UL));
    2cd2:	68 ea       	ldi	r22, 0xA8	; 168
    2cd4:	78 e4       	ldi	r23, 0x48	; 72
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <vTaskDelay>
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	ca cf       	rjmp	.-108    	; 0x2c78 <ApplicationTask>
			
		}
		else{
			
			xSemaphoreGive(tempHumSemaphore);
    2ce4:	00 e0       	ldi	r16, 0x00	; 0
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	a9 01       	movw	r20, r18
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <tempHumSemaphore>
    2cf4:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <tempHumSemaphore+0x1>
    2cf8:	0e 94 42 07 	call	0xe84	; 0xe84 <xQueueGenericSend>
    2cfc:	bd cf       	rjmp	.-134    	; 0x2c78 <ApplicationTask>

00002cfe <initializeUsedData>:
void ApplicationTask();
//void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

void initializeUsedData()
{
	printf("DATA");
    2cfe:	86 e6       	ldi	r24, 0x66	; 102
    2d00:	93 e0       	ldi	r25, 0x03	; 3
    2d02:	9f 93       	push	r25
    2d04:	8f 93       	push	r24
    2d06:	0e 94 0e 21 	call	0x421c	; 0x421c <printf>
	initializeEventGroup();
    2d0a:	29 df       	rcall	.-430    	; 0x2b5e <initializeEventGroup>
	initializeQueue();
    2d0c:	1e df       	rcall	.-452    	; 0x2b4a <initializeQueue>
	initializeTempAndHumiditySemaphore();
    2d0e:	13 df       	rcall	.-474    	; 0x2b36 <initializeTempAndHumiditySemaphore>
    2d10:	0f 90       	pop	r0
}
    2d12:	0f 90       	pop	r0
    2d14:	08 95       	ret

00002d16 <createApplicationTask>:
    2d16:	ef 92       	push	r14
		createTempAndHumTask();
		createCO2Task();	
}

void createApplicationTask()
{
    2d18:	ff 92       	push	r15
    2d1a:	0f 93       	push	r16
	xTaskCreate(
    2d1c:	e1 2c       	mov	r14, r1
    2d1e:	f1 2c       	mov	r15, r1
    2d20:	01 e0       	ldi	r16, 0x01	; 1
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 ec       	ldi	r20, 0xC0	; 192
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	6b e6       	ldi	r22, 0x6B	; 107
    2d2c:	73 e0       	ldi	r23, 0x03	; 3
    2d2e:	8c e3       	ldi	r24, 0x3C	; 60
    2d30:	96 e1       	ldi	r25, 0x16	; 22
    2d32:	0e 94 65 0b 	call	0x16ca	; 0x16ca <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
    2d36:	0f 91       	pop	r16
    2d38:	ff 90       	pop	r15
    2d3a:	ef 90       	pop	r14
    2d3c:	08 95       	ret

00002d3e <create_tasks_and_semaphores>:
	initializeTempAndHumiditySemaphore();
}
/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{		
	createApplicationTask();
    2d3e:	eb df       	rcall	.-42     	; 0x2d16 <createApplicationTask>
		createTempAndHumTask();
    2d40:	86 df       	rcall	.-244    	; 0x2c4e <createTempAndHumTask>
    2d42:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <createCO2Task>
		createCO2Task();	
    2d46:	08 95       	ret

00002d48 <initialiseSystem>:
    2d48:	80 e0       	ldi	r24, 0x00	; 0
{
	// Set output ports for leds used in the example
	//DDRA |= _BV(DDA0) | _BV(DDA7);

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    2d4a:	1d d5       	rcall	.+2618   	; 0x3786 <stdio_initialise>
	// Let's create some tasks
//	initializeDriver()
printf("Data Initialized");
    2d4c:	83 e7       	ldi	r24, 0x73	; 115
    2d4e:	93 e0       	ldi	r25, 0x03	; 3
    2d50:	9f 93       	push	r25
    2d52:	8f 93       	push	r24
    2d54:	0e 94 0e 21 	call	0x421c	; 0x421c <printf>
	initializeUsedData();
	create_tasks_and_semaphores();
    2d58:	d2 df       	rcall	.-92     	; 0x2cfe <initializeUsedData>
    2d5a:	f1 df       	rcall	.-30     	; 0x2d3e <create_tasks_and_semaphores>
	//status_leds_initialise(5); // Priority 5 for internal task
	// Initialise the LoRaWAN driver without down-link buffer
//	lora_driver_initialise(1, NULL);
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3);
}
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	08 95       	ret

00002d62 <main>:

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    2d62:	f2 df       	rcall	.-28     	; 0x2d48 <initialiseSystem>
	printf("Program Stttttarted!!\n");
    2d64:	84 e8       	ldi	r24, 0x84	; 132
    2d66:	93 e0       	ldi	r25, 0x03	; 3
    2d68:	0e 94 21 21 	call	0x4242	; 0x4242 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2d6c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <vTaskStartScheduler>
    2d70:	ff cf       	rjmp	.-2      	; 0x2d70 <main+0xe>

00002d72 <_hihTwiCallback>:
    2d72:	65 30       	cpi	r22, 0x05	; 5
    2d74:	f1 f4       	brne	.+60     	; 0x2db2 <_hihTwiCallback+0x40>
    2d76:	fa 01       	movw	r30, r20
    2d78:	80 81       	ld	r24, Z
    2d7a:	8f 73       	andi	r24, 0x3F	; 63
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	98 2f       	mov	r25, r24
    2d80:	88 27       	eor	r24, r24
    2d82:	21 81       	ldd	r18, Z+1	; 0x01
    2d84:	82 2b       	or	r24, r18
    2d86:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2d8a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2d8e:	82 81       	ldd	r24, Z+2	; 0x02
    2d90:	f0 e4       	ldi	r31, 0x40	; 64
    2d92:	8f 9f       	mul	r24, r31
    2d94:	c0 01       	movw	r24, r0
    2d96:	11 24       	eor	r1, r1
    2d98:	fa 01       	movw	r30, r20
    2d9a:	23 81       	ldd	r18, Z+3	; 0x03
    2d9c:	26 95       	lsr	r18
    2d9e:	26 95       	lsr	r18
    2da0:	82 2b       	or	r24, r18
    2da2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2da6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	80 93 51 0e 	sts	0x0E51, r24	; 0x800e51 <_measuringIsReady>
    2db0:	08 95       	ret
    2db2:	64 30       	cpi	r22, 0x04	; 4
    2db4:	51 f0       	breq	.+20     	; 0x2dca <_hihTwiCallback+0x58>
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e4       	ldi	r25, 0x40	; 64
    2dba:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2dbe:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2dc2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2dc6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2dca:	08 95       	ret

00002dcc <hih8120_initialise>:
    2dcc:	0f 93       	push	r16
    2dce:	1f 93       	push	r17
    2dd0:	09 eb       	ldi	r16, 0xB9	; 185
    2dd2:	16 e1       	ldi	r17, 0x16	; 22
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	34 e2       	ldi	r19, 0x24	; 36
    2dd8:	44 ef       	ldi	r20, 0xF4	; 244
    2dda:	50 e0       	ldi	r21, 0x00	; 0
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	87 e2       	ldi	r24, 0x27	; 39
    2de0:	0c d5       	rcall	.+2584   	; 0x37fa <twiCreate>
    2de2:	90 93 53 0e 	sts	0x0E53, r25	; 0x800e53 <_hih8120Handler+0x1>
    2de6:	80 93 52 0e 	sts	0x0E52, r24	; 0x800e52 <_hih8120Handler>
    2dea:	21 e0       	ldi	r18, 0x01	; 1
    2dec:	89 2b       	or	r24, r25
    2dee:	09 f0       	breq	.+2      	; 0x2df2 <hih8120_initialise+0x26>
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	82 2f       	mov	r24, r18
    2df4:	1f 91       	pop	r17
    2df6:	0f 91       	pop	r16
    2df8:	08 95       	ret

00002dfa <hih8120_wakeup>:
    2dfa:	80 91 52 0e 	lds	r24, 0x0E52	; 0x800e52 <_hih8120Handler>
    2dfe:	90 91 53 0e 	lds	r25, 0x0E53	; 0x800e53 <_hih8120Handler+0x1>
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	51 f0       	breq	.+20     	; 0x2e1a <hih8120_wakeup+0x20>
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	47 d5       	rcall	.+2702   	; 0x389c <twiTransmit>
    2e0e:	84 30       	cpi	r24, 0x04	; 4
    2e10:	31 f4       	brne	.+12     	; 0x2e1e <hih8120_wakeup+0x24>
    2e12:	10 92 51 0e 	sts	0x0E51, r1	; 0x800e51 <_measuringIsReady>
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	08 95       	ret
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	08 95       	ret
    2e1e:	83 e0       	ldi	r24, 0x03	; 3
    2e20:	08 95       	ret

00002e22 <hih8120_measure>:
    2e22:	80 91 52 0e 	lds	r24, 0x0E52	; 0x800e52 <_hih8120Handler>
    2e26:	90 91 53 0e 	lds	r25, 0x0E53	; 0x800e53 <_hih8120Handler+0x1>
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	31 f0       	breq	.+12     	; 0x2e3a <hih8120_measure+0x18>
    2e2e:	64 e0       	ldi	r22, 0x04	; 4
    2e30:	81 d5       	rcall	.+2818   	; 0x3934 <twiReceive>
    2e32:	85 30       	cpi	r24, 0x05	; 5
    2e34:	21 f0       	breq	.+8      	; 0x2e3e <hih8120_measure+0x1c>
    2e36:	83 e0       	ldi	r24, 0x03	; 3
    2e38:	08 95       	ret
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	08 95       	ret
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	08 95       	ret

00002e42 <hih8120_getHumidity>:
    2e42:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    2e46:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	7c d7       	rcall	.+3832   	; 0x3d48 <__floatunsisf>
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	48 ec       	ldi	r20, 0xC8	; 200
    2e56:	52 e4       	ldi	r21, 0x42	; 66
    2e58:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <__mulsf3>
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	38 ef       	ldi	r19, 0xF8	; 248
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	56 e4       	ldi	r21, 0x46	; 70
    2e64:	d8 c6       	rjmp	.+3504   	; 0x3c16 <__divsf3>
    2e66:	08 95       	ret

00002e68 <hih8120_getHumidityPercent_x10>:
    2e68:	ec df       	rcall	.-40     	; 0x2e42 <hih8120_getHumidity>
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e2       	ldi	r20, 0x20	; 32
    2e70:	51 e4       	ldi	r21, 0x41	; 65
    2e72:	f8 d7       	rcall	.+4080   	; 0x3e64 <__mulsf3>
    2e74:	3d d7       	rcall	.+3706   	; 0x3cf0 <__fixunssfsi>
    2e76:	cb 01       	movw	r24, r22
    2e78:	08 95       	ret

00002e7a <hih8120_getTemperature>:
    2e7a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    2e7e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	60 d7       	rcall	.+3776   	; 0x3d48 <__floatunsisf>
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	45 e2       	ldi	r20, 0x25	; 37
    2e8e:	53 e4       	ldi	r21, 0x43	; 67
    2e90:	e9 d7       	rcall	.+4050   	; 0x3e64 <__mulsf3>
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	38 ef       	ldi	r19, 0xF8	; 248
    2e96:	4f e7       	ldi	r20, 0x7F	; 127
    2e98:	56 e4       	ldi	r21, 0x46	; 70
    2e9a:	bd d6       	rcall	.+3450   	; 0x3c16 <__divsf3>
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	52 e4       	ldi	r21, 0x42	; 66
    2ea4:	53 c6       	rjmp	.+3238   	; 0x3b4c <__subsf3>
    2ea6:	08 95       	ret

00002ea8 <hih8120_getTemperature_x10>:
    2ea8:	e8 df       	rcall	.-48     	; 0x2e7a <hih8120_getTemperature>
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e2       	ldi	r20, 0x20	; 32
    2eb0:	51 e4       	ldi	r21, 0x41	; 65
    2eb2:	d8 d7       	rcall	.+4016   	; 0x3e64 <__mulsf3>
    2eb4:	18 d7       	rcall	.+3632   	; 0x3ce6 <__fixsfsi>
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	08 95       	ret

00002eba <_serialCallBack>:
    2eba:	80 91 57 0e 	lds	r24, 0x0E57	; 0x800e57 <crc_sum.1945>
    2ebe:	86 0f       	add	r24, r22
    2ec0:	80 93 57 0e 	sts	0x0E57, r24	; 0x800e57 <crc_sum.1945>
    2ec4:	90 91 5a 0e 	lds	r25, 0x0E5A	; 0x800e5a <_mh_state>
    2ec8:	91 30       	cpi	r25, 0x01	; 1
    2eca:	79 f0       	breq	.+30     	; 0x2eea <_serialCallBack+0x30>
    2ecc:	28 f0       	brcs	.+10     	; 0x2ed8 <_serialCallBack+0x1e>
    2ece:	92 30       	cpi	r25, 0x02	; 2
    2ed0:	a9 f0       	breq	.+42     	; 0x2efc <_serialCallBack+0x42>
    2ed2:	93 30       	cpi	r25, 0x03	; 3
    2ed4:	19 f1       	breq	.+70     	; 0x2f1c <_serialCallBack+0x62>
    2ed6:	08 95       	ret
    2ed8:	6f 3f       	cpi	r22, 0xFF	; 255
    2eda:	09 f0       	breq	.+2      	; 0x2ede <_serialCallBack+0x24>
    2edc:	48 c0       	rjmp	.+144    	; 0x2f6e <_serialCallBack+0xb4>
    2ede:	10 92 57 0e 	sts	0x0E57, r1	; 0x800e57 <crc_sum.1945>
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	80 93 5a 0e 	sts	0x0E5A, r24	; 0x800e5a <_mh_state>
    2ee8:	08 95       	ret
    2eea:	66 38       	cpi	r22, 0x86	; 134
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <_serialCallBack+0x36>
    2eee:	3f c0       	rjmp	.+126    	; 0x2f6e <_serialCallBack+0xb4>
    2ef0:	10 92 56 0e 	sts	0x0E56, r1	; 0x800e56 <inDex.1943>
    2ef4:	82 e0       	ldi	r24, 0x02	; 2
    2ef6:	80 93 5a 0e 	sts	0x0E5A, r24	; 0x800e5a <_mh_state>
    2efa:	08 95       	ret
    2efc:	e0 91 56 0e 	lds	r30, 0x0E56	; 0x800e56 <inDex.1943>
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	8e 0f       	add	r24, r30
    2f04:	80 93 56 0e 	sts	0x0E56, r24	; 0x800e56 <inDex.1943>
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	ec 5a       	subi	r30, 0xAC	; 172
    2f0c:	f1 4f       	sbci	r31, 0xF1	; 241
    2f0e:	60 83       	st	Z, r22
    2f10:	82 30       	cpi	r24, 0x02	; 2
    2f12:	69 f5       	brne	.+90     	; 0x2f6e <_serialCallBack+0xb4>
    2f14:	83 e0       	ldi	r24, 0x03	; 3
    2f16:	80 93 5a 0e 	sts	0x0E5A, r24	; 0x800e5a <_mh_state>
    2f1a:	08 95       	ret
    2f1c:	90 91 56 0e 	lds	r25, 0x0E56	; 0x800e56 <inDex.1943>
    2f20:	21 e0       	ldi	r18, 0x01	; 1
    2f22:	29 0f       	add	r18, r25
    2f24:	20 93 56 0e 	sts	0x0E56, r18	; 0x800e56 <inDex.1943>
    2f28:	96 30       	cpi	r25, 0x06	; 6
    2f2a:	09 f5       	brne	.+66     	; 0x2f6e <_serialCallBack+0xb4>
    2f2c:	81 11       	cpse	r24, r1
    2f2e:	0e c0       	rjmp	.+28     	; 0x2f4c <_serialCallBack+0x92>
    2f30:	e4 e5       	ldi	r30, 0x54	; 84
    2f32:	fe e0       	ldi	r31, 0x0E	; 14
    2f34:	80 81       	ld	r24, Z
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	98 2f       	mov	r25, r24
    2f3a:	88 27       	eor	r24, r24
    2f3c:	21 81       	ldd	r18, Z+1	; 0x01
    2f3e:	82 0f       	add	r24, r18
    2f40:	91 1d       	adc	r25, r1
    2f42:	90 93 5c 0e 	sts	0x0E5C, r25	; 0x800e5c <_ppm+0x1>
    2f46:	80 93 5b 0e 	sts	0x0E5B, r24	; 0x800e5b <_ppm>
    2f4a:	04 c0       	rjmp	.+8      	; 0x2f54 <_serialCallBack+0x9a>
    2f4c:	10 92 5c 0e 	sts	0x0E5C, r1	; 0x800e5c <_ppm+0x1>
    2f50:	10 92 5b 0e 	sts	0x0E5B, r1	; 0x800e5b <_ppm>
    2f54:	10 92 5a 0e 	sts	0x0E5A, r1	; 0x800e5a <_mh_state>
    2f58:	e0 91 58 0e 	lds	r30, 0x0E58	; 0x800e58 <_appCallBack>
    2f5c:	f0 91 59 0e 	lds	r31, 0x0E59	; 0x800e59 <_appCallBack+0x1>
    2f60:	30 97       	sbiw	r30, 0x00	; 0
    2f62:	29 f0       	breq	.+10     	; 0x2f6e <_serialCallBack+0xb4>
    2f64:	80 91 5b 0e 	lds	r24, 0x0E5B	; 0x800e5b <_ppm>
    2f68:	90 91 5c 0e 	lds	r25, 0x0E5C	; 0x800e5c <_ppm+0x1>
    2f6c:	19 95       	eicall
    2f6e:	08 95       	ret

00002f70 <mh_z19_initialise>:
    2f70:	8f 92       	push	r8
    2f72:	9f 92       	push	r9
    2f74:	af 92       	push	r10
    2f76:	cf 92       	push	r12
    2f78:	ef 92       	push	r14
    2f7a:	0f 93       	push	r16
    2f7c:	0f 2e       	mov	r0, r31
    2f7e:	fd e5       	ldi	r31, 0x5D	; 93
    2f80:	8f 2e       	mov	r8, r31
    2f82:	f7 e1       	ldi	r31, 0x17	; 23
    2f84:	9f 2e       	mov	r9, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	68 94       	set
    2f8a:	aa 24       	eor	r10, r10
    2f8c:	a4 f8       	bld	r10, 4
    2f8e:	68 94       	set
    2f90:	cc 24       	eor	r12, r12
    2f92:	c4 f8       	bld	r12, 4
    2f94:	e1 2c       	mov	r14, r1
    2f96:	00 e0       	ldi	r16, 0x00	; 0
    2f98:	23 e0       	ldi	r18, 0x03	; 3
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	55 e2       	ldi	r21, 0x25	; 37
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	3f d0       	rcall	.+126    	; 0x3022 <serial_create>
    2fa4:	90 93 5e 0e 	sts	0x0E5E, r25	; 0x800e5e <_serial+0x1>
    2fa8:	80 93 5d 0e 	sts	0x0E5D, r24	; 0x800e5d <_serial>
    2fac:	0f 91       	pop	r16
    2fae:	ef 90       	pop	r14
    2fb0:	cf 90       	pop	r12
    2fb2:	af 90       	pop	r10
    2fb4:	9f 90       	pop	r9
    2fb6:	8f 90       	pop	r8
    2fb8:	08 95       	ret

00002fba <mh_z19_injectCallBack>:
    2fba:	90 93 59 0e 	sts	0x0E59, r25	; 0x800e59 <_appCallBack+0x1>
    2fbe:	80 93 58 0e 	sts	0x0E58, r24	; 0x800e58 <_appCallBack>
    2fc2:	08 95       	ret

00002fc4 <mh_z19_takeMeassuring>:
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	29 97       	sbiw	r28, 0x09	; 9
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	89 e0       	ldi	r24, 0x09	; 9
    2fda:	e2 e2       	ldi	r30, 0x22	; 34
    2fdc:	f2 e0       	ldi	r31, 0x02	; 2
    2fde:	9e 01       	movw	r18, r28
    2fe0:	2f 5f       	subi	r18, 0xFF	; 255
    2fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe4:	d9 01       	movw	r26, r18
    2fe6:	01 90       	ld	r0, Z+
    2fe8:	0d 92       	st	X+, r0
    2fea:	8a 95       	dec	r24
    2fec:	e1 f7       	brne	.-8      	; 0x2fe6 <mh_z19_takeMeassuring+0x22>
    2fee:	10 92 5c 0e 	sts	0x0E5C, r1	; 0x800e5c <_ppm+0x1>
    2ff2:	10 92 5b 0e 	sts	0x0E5B, r1	; 0x800e5b <_ppm>
    2ff6:	80 91 5d 0e 	lds	r24, 0x0E5D	; 0x800e5d <_serial>
    2ffa:	90 91 5e 0e 	lds	r25, 0x0E5E	; 0x800e5e <_serial+0x1>
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	31 f0       	breq	.+12     	; 0x300e <mh_z19_takeMeassuring+0x4a>
    3002:	42 2f       	mov	r20, r18
    3004:	53 2f       	mov	r21, r19
    3006:	69 e0       	ldi	r22, 0x09	; 9
    3008:	d3 d0       	rcall	.+422    	; 0x31b0 <serial_sendBytes>
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <mh_z19_takeMeassuring+0x4c>
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	29 96       	adiw	r28, 0x09	; 9
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	08 95       	ret

00003022 <serial_create>:
    3022:	2f 92       	push	r2
    3024:	3f 92       	push	r3
    3026:	4f 92       	push	r4
    3028:	5f 92       	push	r5
    302a:	6f 92       	push	r6
    302c:	7f 92       	push	r7
    302e:	8f 92       	push	r8
    3030:	9f 92       	push	r9
    3032:	af 92       	push	r10
    3034:	cf 92       	push	r12
    3036:	ef 92       	push	r14
    3038:	ff 92       	push	r15
    303a:	0f 93       	push	r16
    303c:	1f 93       	push	r17
    303e:	cf 93       	push	r28
    3040:	df 93       	push	r29
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	f8 2e       	mov	r15, r24
    3048:	2a 01       	movw	r4, r20
    304a:	3b 01       	movw	r6, r22
    304c:	88 e0       	ldi	r24, 0x08	; 8
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	b0 d7       	rcall	.+3936   	; 0x3fb2 <malloc>
    3052:	8c 01       	movw	r16, r24
    3054:	8f 2d       	mov	r24, r15
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	fc 01       	movw	r30, r24
    305a:	ee 0f       	add	r30, r30
    305c:	ff 1f       	adc	r31, r31
    305e:	e1 5a       	subi	r30, 0xA1	; 161
    3060:	f1 4f       	sbci	r31, 0xF1	; 241
    3062:	11 83       	std	Z+1, r17	; 0x01
    3064:	00 83       	st	Z, r16
    3066:	01 15       	cp	r16, r1
    3068:	11 05       	cpc	r17, r1
    306a:	09 f4       	brne	.+2      	; 0x306e <serial_create+0x4c>
    306c:	64 c0       	rjmp	.+200    	; 0x3136 <serial_create+0x114>
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	fc 01       	movw	r30, r24
    3074:	e5 5f       	subi	r30, 0xF5	; 245
    3076:	fd 4f       	sbci	r31, 0xFD	; 253
    3078:	80 81       	ld	r24, Z
    307a:	91 81       	ldd	r25, Z+1	; 0x01
    307c:	d8 01       	movw	r26, r16
    307e:	8d 93       	st	X+, r24
    3080:	9c 93       	st	X, r25
    3082:	6c 2d       	mov	r22, r12
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	84 e0       	ldi	r24, 0x04	; 4
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	79 d7       	rcall	.+3826   	; 0x3f7e <calloc>
    308c:	1c 01       	movw	r2, r24
    308e:	61 e0       	ldi	r22, 0x01	; 1
    3090:	70 e0       	ldi	r23, 0x00	; 0
    3092:	86 e0       	ldi	r24, 0x06	; 6
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	73 d7       	rcall	.+3814   	; 0x3f7e <calloc>
    3098:	7c 01       	movw	r14, r24
    309a:	4c 2d       	mov	r20, r12
    309c:	b1 01       	movw	r22, r2
    309e:	3a d5       	rcall	.+2676   	; 0x3b14 <fifo_init>
    30a0:	f8 01       	movw	r30, r16
    30a2:	f5 82       	std	Z+5, r15	; 0x05
    30a4:	e4 82       	std	Z+4, r14	; 0x04
    30a6:	6a 2d       	mov	r22, r10
    30a8:	70 e0       	ldi	r23, 0x00	; 0
    30aa:	84 e0       	ldi	r24, 0x04	; 4
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	67 d7       	rcall	.+3790   	; 0x3f7e <calloc>
    30b0:	1c 01       	movw	r2, r24
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	86 e0       	ldi	r24, 0x06	; 6
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	61 d7       	rcall	.+3778   	; 0x3f7e <calloc>
    30bc:	7c 01       	movw	r14, r24
    30be:	4a 2d       	mov	r20, r10
    30c0:	b1 01       	movw	r22, r2
    30c2:	28 d5       	rcall	.+2640   	; 0x3b14 <fifo_init>
    30c4:	d8 01       	movw	r26, r16
    30c6:	13 96       	adiw	r26, 0x03	; 3
    30c8:	fc 92       	st	X, r15
    30ca:	ee 92       	st	-X, r14
    30cc:	12 97       	sbiw	r26, 0x02	; 2
    30ce:	17 96       	adiw	r26, 0x07	; 7
    30d0:	9c 92       	st	X, r9
    30d2:	8e 92       	st	-X, r8
    30d4:	16 97       	sbiw	r26, 0x06	; 6
    30d6:	ff b6       	in	r15, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	ed 91       	ld	r30, X+
    30dc:	fc 91       	ld	r31, X
    30de:	11 97       	sbiw	r26, 0x01	; 1
    30e0:	36 97       	sbiw	r30, 0x06	; 6
    30e2:	80 81       	ld	r24, Z
    30e4:	82 60       	ori	r24, 0x02	; 2
    30e6:	80 83       	st	Z, r24
    30e8:	8d 90       	ld	r8, X+
    30ea:	9c 90       	ld	r9, X
    30ec:	c3 01       	movw	r24, r6
    30ee:	b2 01       	movw	r22, r4
    30f0:	2b d6       	rcall	.+3158   	; 0x3d48 <__floatunsisf>
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e0       	ldi	r20, 0x00	; 0
    30f8:	51 e4       	ldi	r21, 0x41	; 65
    30fa:	b4 d6       	rcall	.+3432   	; 0x3e64 <__mulsf3>
    30fc:	9b 01       	movw	r18, r22
    30fe:	ac 01       	movw	r20, r24
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	74 e2       	ldi	r23, 0x24	; 36
    3104:	84 e7       	ldi	r24, 0x74	; 116
    3106:	9b e4       	ldi	r25, 0x4B	; 75
    3108:	86 d5       	rcall	.+2828   	; 0x3c16 <__divsf3>
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e8       	ldi	r20, 0x80	; 128
    3110:	5f e3       	ldi	r21, 0x3F	; 63
    3112:	1c d5       	rcall	.+2616   	; 0x3b4c <__subsf3>
    3114:	ed d5       	rcall	.+3034   	; 0x3cf0 <__fixunssfsi>
    3116:	f4 01       	movw	r30, r8
    3118:	32 97       	sbiw	r30, 0x02	; 2
    311a:	60 83       	st	Z, r22
    311c:	d8 01       	movw	r26, r16
    311e:	ed 91       	ld	r30, X+
    3120:	fc 91       	ld	r31, X
    3122:	11 97       	sbiw	r26, 0x01	; 1
    3124:	35 97       	sbiw	r30, 0x05	; 5
    3126:	88 e9       	ldi	r24, 0x98	; 152
    3128:	80 83       	st	Z, r24
    312a:	ed 91       	ld	r30, X+
    312c:	fc 91       	ld	r31, X
    312e:	34 97       	sbiw	r30, 0x04	; 4
    3130:	86 e0       	ldi	r24, 0x06	; 6
    3132:	80 83       	st	Z, r24
    3134:	ff be       	out	0x3f, r15	; 63
    3136:	c8 01       	movw	r24, r16
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	cf 90       	pop	r12
    3146:	af 90       	pop	r10
    3148:	9f 90       	pop	r9
    314a:	8f 90       	pop	r8
    314c:	7f 90       	pop	r7
    314e:	6f 90       	pop	r6
    3150:	5f 90       	pop	r5
    3152:	4f 90       	pop	r4
    3154:	3f 90       	pop	r3
    3156:	2f 90       	pop	r2
    3158:	08 95       	ret

0000315a <serial_sendByte>:
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	dc 01       	movw	r26, r24
    3160:	89 2b       	or	r24, r25
    3162:	01 f1       	breq	.+64     	; 0x31a4 <serial_sendByte+0x4a>
    3164:	12 96       	adiw	r26, 0x02	; 2
    3166:	ed 91       	ld	r30, X+
    3168:	fc 91       	ld	r31, X
    316a:	13 97       	sbiw	r26, 0x03	; 3
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	25 81       	ldd	r18, Z+5	; 0x05
    3172:	98 1b       	sub	r25, r24
    3174:	92 23       	and	r25, r18
    3176:	84 81       	ldd	r24, Z+4	; 0x04
    3178:	98 17       	cp	r25, r24
    317a:	b1 f0       	breq	.+44     	; 0x31a8 <serial_sendByte+0x4e>
    317c:	83 81       	ldd	r24, Z+3	; 0x03
    317e:	26 95       	lsr	r18
    3180:	28 23       	and	r18, r24
    3182:	c0 81       	ld	r28, Z
    3184:	d1 81       	ldd	r29, Z+1	; 0x01
    3186:	c2 0f       	add	r28, r18
    3188:	d1 1d       	adc	r29, r1
    318a:	68 83       	st	Y, r22
    318c:	8f 5f       	subi	r24, 0xFF	; 255
    318e:	95 81       	ldd	r25, Z+5	; 0x05
    3190:	89 23       	and	r24, r25
    3192:	83 83       	std	Z+3, r24	; 0x03
    3194:	ed 91       	ld	r30, X+
    3196:	fc 91       	ld	r31, X
    3198:	35 97       	sbiw	r30, 0x05	; 5
    319a:	80 81       	ld	r24, Z
    319c:	80 62       	ori	r24, 0x20	; 32
    319e:	80 83       	st	Z, r24
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	03 c0       	rjmp	.+6      	; 0x31aa <serial_sendByte+0x50>
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	01 c0       	rjmp	.+2      	; 0x31aa <serial_sendByte+0x50>
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	08 95       	ret

000031b0 <serial_sendBytes>:
    31b0:	ef 92       	push	r14
    31b2:	ff 92       	push	r15
    31b4:	0f 93       	push	r16
    31b6:	1f 93       	push	r17
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	7c 01       	movw	r14, r24
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <serial_sendBytes+0x14>
    31c2:	41 c0       	rjmp	.+130    	; 0x3246 <serial_sendBytes+0x96>
    31c4:	dc 01       	movw	r26, r24
    31c6:	12 96       	adiw	r26, 0x02	; 2
    31c8:	ed 91       	ld	r30, X+
    31ca:	fc 91       	ld	r31, X
    31cc:	13 97       	sbiw	r26, 0x03	; 3
    31ce:	93 81       	ldd	r25, Z+3	; 0x03
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	98 1b       	sub	r25, r24
    31d4:	85 81       	ldd	r24, Z+5	; 0x05
    31d6:	98 23       	and	r25, r24
    31d8:	84 81       	ldd	r24, Z+4	; 0x04
    31da:	89 1b       	sub	r24, r25
    31dc:	86 17       	cp	r24, r22
    31de:	a8 f1       	brcs	.+106    	; 0x324a <serial_sendBytes+0x9a>
    31e0:	66 23       	and	r22, r22
    31e2:	41 f1       	breq	.+80     	; 0x3234 <serial_sendBytes+0x84>
    31e4:	84 2f       	mov	r24, r20
    31e6:	95 2f       	mov	r25, r21
    31e8:	dc 01       	movw	r26, r24
    31ea:	61 50       	subi	r22, 0x01	; 1
    31ec:	46 2f       	mov	r20, r22
    31ee:	50 e0       	ldi	r21, 0x00	; 0
    31f0:	4f 5f       	subi	r20, 0xFF	; 255
    31f2:	5f 4f       	sbci	r21, 0xFF	; 255
    31f4:	48 0f       	add	r20, r24
    31f6:	59 1f       	adc	r21, r25
    31f8:	e7 01       	movw	r28, r14
    31fa:	ea 81       	ldd	r30, Y+2	; 0x02
    31fc:	fb 81       	ldd	r31, Y+3	; 0x03
    31fe:	93 81       	ldd	r25, Z+3	; 0x03
    3200:	82 81       	ldd	r24, Z+2	; 0x02
    3202:	25 81       	ldd	r18, Z+5	; 0x05
    3204:	98 1b       	sub	r25, r24
    3206:	92 23       	and	r25, r18
    3208:	84 81       	ldd	r24, Z+4	; 0x04
    320a:	98 17       	cp	r25, r24
    320c:	79 f0       	breq	.+30     	; 0x322c <serial_sendBytes+0x7c>
    320e:	8c 91       	ld	r24, X
    3210:	93 81       	ldd	r25, Z+3	; 0x03
    3212:	26 95       	lsr	r18
    3214:	29 23       	and	r18, r25
    3216:	60 81       	ld	r22, Z
    3218:	71 81       	ldd	r23, Z+1	; 0x01
    321a:	8b 01       	movw	r16, r22
    321c:	02 0f       	add	r16, r18
    321e:	11 1d       	adc	r17, r1
    3220:	e8 01       	movw	r28, r16
    3222:	88 83       	st	Y, r24
    3224:	9f 5f       	subi	r25, 0xFF	; 255
    3226:	85 81       	ldd	r24, Z+5	; 0x05
    3228:	98 23       	and	r25, r24
    322a:	93 83       	std	Z+3, r25	; 0x03
    322c:	11 96       	adiw	r26, 0x01	; 1
    322e:	a4 17       	cp	r26, r20
    3230:	b5 07       	cpc	r27, r21
    3232:	11 f7       	brne	.-60     	; 0x31f8 <serial_sendBytes+0x48>
    3234:	d7 01       	movw	r26, r14
    3236:	ed 91       	ld	r30, X+
    3238:	fc 91       	ld	r31, X
    323a:	35 97       	sbiw	r30, 0x05	; 5
    323c:	80 81       	ld	r24, Z
    323e:	80 62       	ori	r24, 0x20	; 32
    3240:	80 83       	st	Z, r24
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	03 c0       	rjmp	.+6      	; 0x324c <serial_sendBytes+0x9c>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	01 c0       	rjmp	.+2      	; 0x324c <serial_sendBytes+0x9c>
    324a:	82 e0       	ldi	r24, 0x02	; 2
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	ff 90       	pop	r15
    3256:	ef 90       	pop	r14
    3258:	08 95       	ret

0000325a <serial_getByte>:
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	d1 f0       	breq	.+52     	; 0x3292 <serial_getByte+0x38>
    325e:	dc 01       	movw	r26, r24
    3260:	14 96       	adiw	r26, 0x04	; 4
    3262:	ed 91       	ld	r30, X+
    3264:	fc 91       	ld	r31, X
    3266:	15 97       	sbiw	r26, 0x05	; 5
    3268:	93 81       	ldd	r25, Z+3	; 0x03
    326a:	82 81       	ldd	r24, Z+2	; 0x02
    326c:	98 17       	cp	r25, r24
    326e:	99 f0       	breq	.+38     	; 0x3296 <serial_getByte+0x3c>
    3270:	92 81       	ldd	r25, Z+2	; 0x02
    3272:	85 81       	ldd	r24, Z+5	; 0x05
    3274:	86 95       	lsr	r24
    3276:	89 23       	and	r24, r25
    3278:	a0 81       	ld	r26, Z
    327a:	b1 81       	ldd	r27, Z+1	; 0x01
    327c:	a8 0f       	add	r26, r24
    327e:	b1 1d       	adc	r27, r1
    3280:	8c 91       	ld	r24, X
    3282:	db 01       	movw	r26, r22
    3284:	8c 93       	st	X, r24
    3286:	9f 5f       	subi	r25, 0xFF	; 255
    3288:	85 81       	ldd	r24, Z+5	; 0x05
    328a:	98 23       	and	r25, r24
    328c:	92 83       	std	Z+2, r25	; 0x02
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	08 95       	ret
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	08 95       	ret
    3296:	83 e0       	ldi	r24, 0x03	; 3
    3298:	08 95       	ret

0000329a <__vector_25>:
    329a:	1f 92       	push	r1
    329c:	0f 92       	push	r0
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	0f 92       	push	r0
    32a2:	11 24       	eor	r1, r1
    32a4:	0b b6       	in	r0, 0x3b	; 59
    32a6:	0f 92       	push	r0
    32a8:	2f 93       	push	r18
    32aa:	3f 93       	push	r19
    32ac:	4f 93       	push	r20
    32ae:	5f 93       	push	r21
    32b0:	6f 93       	push	r22
    32b2:	7f 93       	push	r23
    32b4:	8f 93       	push	r24
    32b6:	9f 93       	push	r25
    32b8:	af 93       	push	r26
    32ba:	bf 93       	push	r27
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
    32c0:	ef 93       	push	r30
    32c2:	ff 93       	push	r31
    32c4:	a0 91 5f 0e 	lds	r26, 0x0E5F	; 0x800e5f <_ser_handle>
    32c8:	b0 91 60 0e 	lds	r27, 0x0E60	; 0x800e60 <_ser_handle+0x1>
    32cc:	10 97       	sbiw	r26, 0x00	; 0
    32ce:	11 f1       	breq	.+68     	; 0x3314 <__vector_25+0x7a>
    32d0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    32d4:	14 96       	adiw	r26, 0x04	; 4
    32d6:	ed 91       	ld	r30, X+
    32d8:	fc 91       	ld	r31, X
    32da:	15 97       	sbiw	r26, 0x05	; 5
    32dc:	93 81       	ldd	r25, Z+3	; 0x03
    32de:	82 81       	ldd	r24, Z+2	; 0x02
    32e0:	25 81       	ldd	r18, Z+5	; 0x05
    32e2:	98 1b       	sub	r25, r24
    32e4:	92 23       	and	r25, r18
    32e6:	84 81       	ldd	r24, Z+4	; 0x04
    32e8:	98 17       	cp	r25, r24
    32ea:	61 f0       	breq	.+24     	; 0x3304 <__vector_25+0x6a>
    32ec:	83 81       	ldd	r24, Z+3	; 0x03
    32ee:	26 95       	lsr	r18
    32f0:	28 23       	and	r18, r24
    32f2:	c0 81       	ld	r28, Z
    32f4:	d1 81       	ldd	r29, Z+1	; 0x01
    32f6:	c2 0f       	add	r28, r18
    32f8:	d1 1d       	adc	r29, r1
    32fa:	68 83       	st	Y, r22
    32fc:	8f 5f       	subi	r24, 0xFF	; 255
    32fe:	95 81       	ldd	r25, Z+5	; 0x05
    3300:	89 23       	and	r24, r25
    3302:	83 83       	std	Z+3, r24	; 0x03
    3304:	16 96       	adiw	r26, 0x06	; 6
    3306:	ed 91       	ld	r30, X+
    3308:	fc 91       	ld	r31, X
    330a:	17 97       	sbiw	r26, 0x07	; 7
    330c:	30 97       	sbiw	r30, 0x00	; 0
    330e:	11 f0       	breq	.+4      	; 0x3314 <__vector_25+0x7a>
    3310:	cd 01       	movw	r24, r26
    3312:	19 95       	eicall
    3314:	ff 91       	pop	r31
    3316:	ef 91       	pop	r30
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	bf 91       	pop	r27
    331e:	af 91       	pop	r26
    3320:	9f 91       	pop	r25
    3322:	8f 91       	pop	r24
    3324:	7f 91       	pop	r23
    3326:	6f 91       	pop	r22
    3328:	5f 91       	pop	r21
    332a:	4f 91       	pop	r20
    332c:	3f 91       	pop	r19
    332e:	2f 91       	pop	r18
    3330:	0f 90       	pop	r0
    3332:	0b be       	out	0x3b, r0	; 59
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	0f 90       	pop	r0
    333a:	1f 90       	pop	r1
    333c:	18 95       	reti

0000333e <__vector_26>:
    333e:	1f 92       	push	r1
    3340:	0f 92       	push	r0
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	0f 92       	push	r0
    3346:	11 24       	eor	r1, r1
    3348:	0b b6       	in	r0, 0x3b	; 59
    334a:	0f 92       	push	r0
    334c:	2f 93       	push	r18
    334e:	8f 93       	push	r24
    3350:	9f 93       	push	r25
    3352:	af 93       	push	r26
    3354:	bf 93       	push	r27
    3356:	ef 93       	push	r30
    3358:	ff 93       	push	r31
    335a:	e0 91 5f 0e 	lds	r30, 0x0E5F	; 0x800e5f <_ser_handle>
    335e:	f0 91 60 0e 	lds	r31, 0x0E60	; 0x800e60 <_ser_handle+0x1>
    3362:	30 97       	sbiw	r30, 0x00	; 0
    3364:	b9 f0       	breq	.+46     	; 0x3394 <__vector_26+0x56>
    3366:	02 80       	ldd	r0, Z+2	; 0x02
    3368:	f3 81       	ldd	r31, Z+3	; 0x03
    336a:	e0 2d       	mov	r30, r0
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	82 81       	ldd	r24, Z+2	; 0x02
    3370:	98 17       	cp	r25, r24
    3372:	b1 f0       	breq	.+44     	; 0x33a0 <__vector_26+0x62>
    3374:	92 81       	ldd	r25, Z+2	; 0x02
    3376:	85 81       	ldd	r24, Z+5	; 0x05
    3378:	28 2f       	mov	r18, r24
    337a:	26 95       	lsr	r18
    337c:	29 23       	and	r18, r25
    337e:	a0 81       	ld	r26, Z
    3380:	b1 81       	ldd	r27, Z+1	; 0x01
    3382:	a2 0f       	add	r26, r18
    3384:	b1 1d       	adc	r27, r1
    3386:	2c 91       	ld	r18, X
    3388:	9f 5f       	subi	r25, 0xFF	; 255
    338a:	89 23       	and	r24, r25
    338c:	82 83       	std	Z+2, r24	; 0x02
    338e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3392:	0b c0       	rjmp	.+22     	; 0x33aa <__vector_26+0x6c>
    3394:	e1 ec       	ldi	r30, 0xC1	; 193
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	8f 7d       	andi	r24, 0xDF	; 223
    339c:	80 83       	st	Z, r24
    339e:	05 c0       	rjmp	.+10     	; 0x33aa <__vector_26+0x6c>
    33a0:	e1 ec       	ldi	r30, 0xC1	; 193
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	8f 7d       	andi	r24, 0xDF	; 223
    33a8:	80 83       	st	Z, r24
    33aa:	ff 91       	pop	r31
    33ac:	ef 91       	pop	r30
    33ae:	bf 91       	pop	r27
    33b0:	af 91       	pop	r26
    33b2:	9f 91       	pop	r25
    33b4:	8f 91       	pop	r24
    33b6:	2f 91       	pop	r18
    33b8:	0f 90       	pop	r0
    33ba:	0b be       	out	0x3b, r0	; 59
    33bc:	0f 90       	pop	r0
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	0f 90       	pop	r0
    33c2:	1f 90       	pop	r1
    33c4:	18 95       	reti

000033c6 <__vector_36>:
    33c6:	1f 92       	push	r1
    33c8:	0f 92       	push	r0
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	0f 92       	push	r0
    33ce:	11 24       	eor	r1, r1
    33d0:	0b b6       	in	r0, 0x3b	; 59
    33d2:	0f 92       	push	r0
    33d4:	2f 93       	push	r18
    33d6:	3f 93       	push	r19
    33d8:	4f 93       	push	r20
    33da:	5f 93       	push	r21
    33dc:	6f 93       	push	r22
    33de:	7f 93       	push	r23
    33e0:	8f 93       	push	r24
    33e2:	9f 93       	push	r25
    33e4:	af 93       	push	r26
    33e6:	bf 93       	push	r27
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	ef 93       	push	r30
    33ee:	ff 93       	push	r31
    33f0:	a0 91 61 0e 	lds	r26, 0x0E61	; 0x800e61 <_ser_handle+0x2>
    33f4:	b0 91 62 0e 	lds	r27, 0x0E62	; 0x800e62 <_ser_handle+0x3>
    33f8:	10 97       	sbiw	r26, 0x00	; 0
    33fa:	11 f1       	breq	.+68     	; 0x3440 <__vector_36+0x7a>
    33fc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3400:	14 96       	adiw	r26, 0x04	; 4
    3402:	ed 91       	ld	r30, X+
    3404:	fc 91       	ld	r31, X
    3406:	15 97       	sbiw	r26, 0x05	; 5
    3408:	93 81       	ldd	r25, Z+3	; 0x03
    340a:	82 81       	ldd	r24, Z+2	; 0x02
    340c:	25 81       	ldd	r18, Z+5	; 0x05
    340e:	98 1b       	sub	r25, r24
    3410:	92 23       	and	r25, r18
    3412:	84 81       	ldd	r24, Z+4	; 0x04
    3414:	98 17       	cp	r25, r24
    3416:	61 f0       	breq	.+24     	; 0x3430 <__vector_36+0x6a>
    3418:	83 81       	ldd	r24, Z+3	; 0x03
    341a:	26 95       	lsr	r18
    341c:	28 23       	and	r18, r24
    341e:	c0 81       	ld	r28, Z
    3420:	d1 81       	ldd	r29, Z+1	; 0x01
    3422:	c2 0f       	add	r28, r18
    3424:	d1 1d       	adc	r29, r1
    3426:	68 83       	st	Y, r22
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	95 81       	ldd	r25, Z+5	; 0x05
    342c:	89 23       	and	r24, r25
    342e:	83 83       	std	Z+3, r24	; 0x03
    3430:	16 96       	adiw	r26, 0x06	; 6
    3432:	ed 91       	ld	r30, X+
    3434:	fc 91       	ld	r31, X
    3436:	17 97       	sbiw	r26, 0x07	; 7
    3438:	30 97       	sbiw	r30, 0x00	; 0
    343a:	11 f0       	breq	.+4      	; 0x3440 <__vector_36+0x7a>
    343c:	cd 01       	movw	r24, r26
    343e:	19 95       	eicall
    3440:	ff 91       	pop	r31
    3442:	ef 91       	pop	r30
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	bf 91       	pop	r27
    344a:	af 91       	pop	r26
    344c:	9f 91       	pop	r25
    344e:	8f 91       	pop	r24
    3450:	7f 91       	pop	r23
    3452:	6f 91       	pop	r22
    3454:	5f 91       	pop	r21
    3456:	4f 91       	pop	r20
    3458:	3f 91       	pop	r19
    345a:	2f 91       	pop	r18
    345c:	0f 90       	pop	r0
    345e:	0b be       	out	0x3b, r0	; 59
    3460:	0f 90       	pop	r0
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	0f 90       	pop	r0
    3466:	1f 90       	pop	r1
    3468:	18 95       	reti

0000346a <__vector_37>:
    346a:	1f 92       	push	r1
    346c:	0f 92       	push	r0
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	0f 92       	push	r0
    3472:	11 24       	eor	r1, r1
    3474:	0b b6       	in	r0, 0x3b	; 59
    3476:	0f 92       	push	r0
    3478:	2f 93       	push	r18
    347a:	8f 93       	push	r24
    347c:	9f 93       	push	r25
    347e:	af 93       	push	r26
    3480:	bf 93       	push	r27
    3482:	ef 93       	push	r30
    3484:	ff 93       	push	r31
    3486:	e0 91 61 0e 	lds	r30, 0x0E61	; 0x800e61 <_ser_handle+0x2>
    348a:	f0 91 62 0e 	lds	r31, 0x0E62	; 0x800e62 <_ser_handle+0x3>
    348e:	30 97       	sbiw	r30, 0x00	; 0
    3490:	b9 f0       	breq	.+46     	; 0x34c0 <__vector_37+0x56>
    3492:	02 80       	ldd	r0, Z+2	; 0x02
    3494:	f3 81       	ldd	r31, Z+3	; 0x03
    3496:	e0 2d       	mov	r30, r0
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	82 81       	ldd	r24, Z+2	; 0x02
    349c:	98 17       	cp	r25, r24
    349e:	b1 f0       	breq	.+44     	; 0x34cc <__vector_37+0x62>
    34a0:	92 81       	ldd	r25, Z+2	; 0x02
    34a2:	85 81       	ldd	r24, Z+5	; 0x05
    34a4:	28 2f       	mov	r18, r24
    34a6:	26 95       	lsr	r18
    34a8:	29 23       	and	r18, r25
    34aa:	a0 81       	ld	r26, Z
    34ac:	b1 81       	ldd	r27, Z+1	; 0x01
    34ae:	a2 0f       	add	r26, r18
    34b0:	b1 1d       	adc	r27, r1
    34b2:	2c 91       	ld	r18, X
    34b4:	9f 5f       	subi	r25, 0xFF	; 255
    34b6:	89 23       	and	r24, r25
    34b8:	82 83       	std	Z+2, r24	; 0x02
    34ba:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    34be:	0b c0       	rjmp	.+22     	; 0x34d6 <__vector_37+0x6c>
    34c0:	e9 ec       	ldi	r30, 0xC9	; 201
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	8f 7d       	andi	r24, 0xDF	; 223
    34c8:	80 83       	st	Z, r24
    34ca:	05 c0       	rjmp	.+10     	; 0x34d6 <__vector_37+0x6c>
    34cc:	e9 ec       	ldi	r30, 0xC9	; 201
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	8f 7d       	andi	r24, 0xDF	; 223
    34d4:	80 83       	st	Z, r24
    34d6:	ff 91       	pop	r31
    34d8:	ef 91       	pop	r30
    34da:	bf 91       	pop	r27
    34dc:	af 91       	pop	r26
    34de:	9f 91       	pop	r25
    34e0:	8f 91       	pop	r24
    34e2:	2f 91       	pop	r18
    34e4:	0f 90       	pop	r0
    34e6:	0b be       	out	0x3b, r0	; 59
    34e8:	0f 90       	pop	r0
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	0f 90       	pop	r0
    34ee:	1f 90       	pop	r1
    34f0:	18 95       	reti

000034f2 <__vector_51>:
    34f2:	1f 92       	push	r1
    34f4:	0f 92       	push	r0
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	0f 92       	push	r0
    34fa:	11 24       	eor	r1, r1
    34fc:	0b b6       	in	r0, 0x3b	; 59
    34fe:	0f 92       	push	r0
    3500:	2f 93       	push	r18
    3502:	3f 93       	push	r19
    3504:	4f 93       	push	r20
    3506:	5f 93       	push	r21
    3508:	6f 93       	push	r22
    350a:	7f 93       	push	r23
    350c:	8f 93       	push	r24
    350e:	9f 93       	push	r25
    3510:	af 93       	push	r26
    3512:	bf 93       	push	r27
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	ef 93       	push	r30
    351a:	ff 93       	push	r31
    351c:	a0 91 63 0e 	lds	r26, 0x0E63	; 0x800e63 <_ser_handle+0x4>
    3520:	b0 91 64 0e 	lds	r27, 0x0E64	; 0x800e64 <_ser_handle+0x5>
    3524:	10 97       	sbiw	r26, 0x00	; 0
    3526:	11 f1       	breq	.+68     	; 0x356c <__vector_51+0x7a>
    3528:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    352c:	14 96       	adiw	r26, 0x04	; 4
    352e:	ed 91       	ld	r30, X+
    3530:	fc 91       	ld	r31, X
    3532:	15 97       	sbiw	r26, 0x05	; 5
    3534:	93 81       	ldd	r25, Z+3	; 0x03
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	25 81       	ldd	r18, Z+5	; 0x05
    353a:	98 1b       	sub	r25, r24
    353c:	92 23       	and	r25, r18
    353e:	84 81       	ldd	r24, Z+4	; 0x04
    3540:	98 17       	cp	r25, r24
    3542:	61 f0       	breq	.+24     	; 0x355c <__vector_51+0x6a>
    3544:	83 81       	ldd	r24, Z+3	; 0x03
    3546:	26 95       	lsr	r18
    3548:	28 23       	and	r18, r24
    354a:	c0 81       	ld	r28, Z
    354c:	d1 81       	ldd	r29, Z+1	; 0x01
    354e:	c2 0f       	add	r28, r18
    3550:	d1 1d       	adc	r29, r1
    3552:	68 83       	st	Y, r22
    3554:	8f 5f       	subi	r24, 0xFF	; 255
    3556:	95 81       	ldd	r25, Z+5	; 0x05
    3558:	89 23       	and	r24, r25
    355a:	83 83       	std	Z+3, r24	; 0x03
    355c:	16 96       	adiw	r26, 0x06	; 6
    355e:	ed 91       	ld	r30, X+
    3560:	fc 91       	ld	r31, X
    3562:	17 97       	sbiw	r26, 0x07	; 7
    3564:	30 97       	sbiw	r30, 0x00	; 0
    3566:	11 f0       	breq	.+4      	; 0x356c <__vector_51+0x7a>
    3568:	cd 01       	movw	r24, r26
    356a:	19 95       	eicall
    356c:	ff 91       	pop	r31
    356e:	ef 91       	pop	r30
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	bf 91       	pop	r27
    3576:	af 91       	pop	r26
    3578:	9f 91       	pop	r25
    357a:	8f 91       	pop	r24
    357c:	7f 91       	pop	r23
    357e:	6f 91       	pop	r22
    3580:	5f 91       	pop	r21
    3582:	4f 91       	pop	r20
    3584:	3f 91       	pop	r19
    3586:	2f 91       	pop	r18
    3588:	0f 90       	pop	r0
    358a:	0b be       	out	0x3b, r0	; 59
    358c:	0f 90       	pop	r0
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	0f 90       	pop	r0
    3592:	1f 90       	pop	r1
    3594:	18 95       	reti

00003596 <__vector_52>:
    3596:	1f 92       	push	r1
    3598:	0f 92       	push	r0
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	0f 92       	push	r0
    359e:	11 24       	eor	r1, r1
    35a0:	0b b6       	in	r0, 0x3b	; 59
    35a2:	0f 92       	push	r0
    35a4:	2f 93       	push	r18
    35a6:	8f 93       	push	r24
    35a8:	9f 93       	push	r25
    35aa:	af 93       	push	r26
    35ac:	bf 93       	push	r27
    35ae:	ef 93       	push	r30
    35b0:	ff 93       	push	r31
    35b2:	e0 91 63 0e 	lds	r30, 0x0E63	; 0x800e63 <_ser_handle+0x4>
    35b6:	f0 91 64 0e 	lds	r31, 0x0E64	; 0x800e64 <_ser_handle+0x5>
    35ba:	30 97       	sbiw	r30, 0x00	; 0
    35bc:	b9 f0       	breq	.+46     	; 0x35ec <__vector_52+0x56>
    35be:	02 80       	ldd	r0, Z+2	; 0x02
    35c0:	f3 81       	ldd	r31, Z+3	; 0x03
    35c2:	e0 2d       	mov	r30, r0
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	98 17       	cp	r25, r24
    35ca:	b1 f0       	breq	.+44     	; 0x35f8 <__vector_52+0x62>
    35cc:	92 81       	ldd	r25, Z+2	; 0x02
    35ce:	85 81       	ldd	r24, Z+5	; 0x05
    35d0:	28 2f       	mov	r18, r24
    35d2:	26 95       	lsr	r18
    35d4:	29 23       	and	r18, r25
    35d6:	a0 81       	ld	r26, Z
    35d8:	b1 81       	ldd	r27, Z+1	; 0x01
    35da:	a2 0f       	add	r26, r18
    35dc:	b1 1d       	adc	r27, r1
    35de:	2c 91       	ld	r18, X
    35e0:	9f 5f       	subi	r25, 0xFF	; 255
    35e2:	89 23       	and	r24, r25
    35e4:	82 83       	std	Z+2, r24	; 0x02
    35e6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    35ea:	0b c0       	rjmp	.+22     	; 0x3602 <__vector_52+0x6c>
    35ec:	e1 ed       	ldi	r30, 0xD1	; 209
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	8f 7d       	andi	r24, 0xDF	; 223
    35f4:	80 83       	st	Z, r24
    35f6:	05 c0       	rjmp	.+10     	; 0x3602 <__vector_52+0x6c>
    35f8:	e1 ed       	ldi	r30, 0xD1	; 209
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	8f 7d       	andi	r24, 0xDF	; 223
    3600:	80 83       	st	Z, r24
    3602:	ff 91       	pop	r31
    3604:	ef 91       	pop	r30
    3606:	bf 91       	pop	r27
    3608:	af 91       	pop	r26
    360a:	9f 91       	pop	r25
    360c:	8f 91       	pop	r24
    360e:	2f 91       	pop	r18
    3610:	0f 90       	pop	r0
    3612:	0b be       	out	0x3b, r0	; 59
    3614:	0f 90       	pop	r0
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	0f 90       	pop	r0
    361a:	1f 90       	pop	r1
    361c:	18 95       	reti

0000361e <__vector_54>:
    361e:	1f 92       	push	r1
    3620:	0f 92       	push	r0
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	0f 92       	push	r0
    3626:	11 24       	eor	r1, r1
    3628:	0b b6       	in	r0, 0x3b	; 59
    362a:	0f 92       	push	r0
    362c:	2f 93       	push	r18
    362e:	3f 93       	push	r19
    3630:	4f 93       	push	r20
    3632:	5f 93       	push	r21
    3634:	6f 93       	push	r22
    3636:	7f 93       	push	r23
    3638:	8f 93       	push	r24
    363a:	9f 93       	push	r25
    363c:	af 93       	push	r26
    363e:	bf 93       	push	r27
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	ef 93       	push	r30
    3646:	ff 93       	push	r31
    3648:	a0 91 65 0e 	lds	r26, 0x0E65	; 0x800e65 <_ser_handle+0x6>
    364c:	b0 91 66 0e 	lds	r27, 0x0E66	; 0x800e66 <_ser_handle+0x7>
    3650:	10 97       	sbiw	r26, 0x00	; 0
    3652:	11 f1       	breq	.+68     	; 0x3698 <__vector_54+0x7a>
    3654:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3658:	14 96       	adiw	r26, 0x04	; 4
    365a:	ed 91       	ld	r30, X+
    365c:	fc 91       	ld	r31, X
    365e:	15 97       	sbiw	r26, 0x05	; 5
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	25 81       	ldd	r18, Z+5	; 0x05
    3666:	98 1b       	sub	r25, r24
    3668:	92 23       	and	r25, r18
    366a:	84 81       	ldd	r24, Z+4	; 0x04
    366c:	98 17       	cp	r25, r24
    366e:	61 f0       	breq	.+24     	; 0x3688 <__vector_54+0x6a>
    3670:	83 81       	ldd	r24, Z+3	; 0x03
    3672:	26 95       	lsr	r18
    3674:	28 23       	and	r18, r24
    3676:	c0 81       	ld	r28, Z
    3678:	d1 81       	ldd	r29, Z+1	; 0x01
    367a:	c2 0f       	add	r28, r18
    367c:	d1 1d       	adc	r29, r1
    367e:	68 83       	st	Y, r22
    3680:	8f 5f       	subi	r24, 0xFF	; 255
    3682:	95 81       	ldd	r25, Z+5	; 0x05
    3684:	89 23       	and	r24, r25
    3686:	83 83       	std	Z+3, r24	; 0x03
    3688:	16 96       	adiw	r26, 0x06	; 6
    368a:	ed 91       	ld	r30, X+
    368c:	fc 91       	ld	r31, X
    368e:	17 97       	sbiw	r26, 0x07	; 7
    3690:	30 97       	sbiw	r30, 0x00	; 0
    3692:	11 f0       	breq	.+4      	; 0x3698 <__vector_54+0x7a>
    3694:	cd 01       	movw	r24, r26
    3696:	19 95       	eicall
    3698:	ff 91       	pop	r31
    369a:	ef 91       	pop	r30
    369c:	df 91       	pop	r29
    369e:	cf 91       	pop	r28
    36a0:	bf 91       	pop	r27
    36a2:	af 91       	pop	r26
    36a4:	9f 91       	pop	r25
    36a6:	8f 91       	pop	r24
    36a8:	7f 91       	pop	r23
    36aa:	6f 91       	pop	r22
    36ac:	5f 91       	pop	r21
    36ae:	4f 91       	pop	r20
    36b0:	3f 91       	pop	r19
    36b2:	2f 91       	pop	r18
    36b4:	0f 90       	pop	r0
    36b6:	0b be       	out	0x3b, r0	; 59
    36b8:	0f 90       	pop	r0
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	0f 90       	pop	r0
    36be:	1f 90       	pop	r1
    36c0:	18 95       	reti

000036c2 <__vector_55>:
    36c2:	1f 92       	push	r1
    36c4:	0f 92       	push	r0
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	0f 92       	push	r0
    36ca:	11 24       	eor	r1, r1
    36cc:	0b b6       	in	r0, 0x3b	; 59
    36ce:	0f 92       	push	r0
    36d0:	2f 93       	push	r18
    36d2:	8f 93       	push	r24
    36d4:	9f 93       	push	r25
    36d6:	af 93       	push	r26
    36d8:	bf 93       	push	r27
    36da:	ef 93       	push	r30
    36dc:	ff 93       	push	r31
    36de:	e0 91 65 0e 	lds	r30, 0x0E65	; 0x800e65 <_ser_handle+0x6>
    36e2:	f0 91 66 0e 	lds	r31, 0x0E66	; 0x800e66 <_ser_handle+0x7>
    36e6:	30 97       	sbiw	r30, 0x00	; 0
    36e8:	b9 f0       	breq	.+46     	; 0x3718 <__vector_55+0x56>
    36ea:	02 80       	ldd	r0, Z+2	; 0x02
    36ec:	f3 81       	ldd	r31, Z+3	; 0x03
    36ee:	e0 2d       	mov	r30, r0
    36f0:	93 81       	ldd	r25, Z+3	; 0x03
    36f2:	82 81       	ldd	r24, Z+2	; 0x02
    36f4:	98 17       	cp	r25, r24
    36f6:	b1 f0       	breq	.+44     	; 0x3724 <__vector_55+0x62>
    36f8:	92 81       	ldd	r25, Z+2	; 0x02
    36fa:	85 81       	ldd	r24, Z+5	; 0x05
    36fc:	28 2f       	mov	r18, r24
    36fe:	26 95       	lsr	r18
    3700:	29 23       	and	r18, r25
    3702:	a0 81       	ld	r26, Z
    3704:	b1 81       	ldd	r27, Z+1	; 0x01
    3706:	a2 0f       	add	r26, r18
    3708:	b1 1d       	adc	r27, r1
    370a:	2c 91       	ld	r18, X
    370c:	9f 5f       	subi	r25, 0xFF	; 255
    370e:	89 23       	and	r24, r25
    3710:	82 83       	std	Z+2, r24	; 0x02
    3712:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3716:	0b c0       	rjmp	.+22     	; 0x372e <__vector_55+0x6c>
    3718:	e1 e3       	ldi	r30, 0x31	; 49
    371a:	f1 e0       	ldi	r31, 0x01	; 1
    371c:	80 81       	ld	r24, Z
    371e:	8f 7d       	andi	r24, 0xDF	; 223
    3720:	80 83       	st	Z, r24
    3722:	05 c0       	rjmp	.+10     	; 0x372e <__vector_55+0x6c>
    3724:	e1 e3       	ldi	r30, 0x31	; 49
    3726:	f1 e0       	ldi	r31, 0x01	; 1
    3728:	80 81       	ld	r24, Z
    372a:	8f 7d       	andi	r24, 0xDF	; 223
    372c:	80 83       	st	Z, r24
    372e:	ff 91       	pop	r31
    3730:	ef 91       	pop	r30
    3732:	bf 91       	pop	r27
    3734:	af 91       	pop	r26
    3736:	9f 91       	pop	r25
    3738:	8f 91       	pop	r24
    373a:	2f 91       	pop	r18
    373c:	0f 90       	pop	r0
    373e:	0b be       	out	0x3b, r0	; 59
    3740:	0f 90       	pop	r0
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	0f 90       	pop	r0
    3746:	1f 90       	pop	r1
    3748:	18 95       	reti

0000374a <usart_getchar>:
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	1f 92       	push	r1
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	be 01       	movw	r22, r28
    3756:	6f 5f       	subi	r22, 0xFF	; 255
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <_com_serial_instance>
    375e:	90 91 68 0e 	lds	r25, 0x0E68	; 0x800e68 <_com_serial_instance+0x1>
    3762:	7b dd       	rcall	.-1290   	; 0x325a <serial_getByte>
    3764:	81 11       	cpse	r24, r1
    3766:	f6 cf       	rjmp	.-20     	; 0x3754 <usart_getchar+0xa>
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	0f 90       	pop	r0
    376e:	df 91       	pop	r29
    3770:	cf 91       	pop	r28
    3772:	08 95       	ret

00003774 <usart_putchar>:
    3774:	68 2f       	mov	r22, r24
    3776:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <_com_serial_instance>
    377a:	90 91 68 0e 	lds	r25, 0x0E68	; 0x800e68 <_com_serial_instance+0x1>
    377e:	ed dc       	rcall	.-1574   	; 0x315a <serial_sendByte>
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	08 95       	ret

00003786 <stdio_initialise>:
    3786:	8f 92       	push	r8
    3788:	9f 92       	push	r9
    378a:	af 92       	push	r10
    378c:	cf 92       	push	r12
    378e:	ef 92       	push	r14
    3790:	0f 93       	push	r16
    3792:	81 2c       	mov	r8, r1
    3794:	91 2c       	mov	r9, r1
    3796:	68 94       	set
    3798:	aa 24       	eor	r10, r10
    379a:	a7 f8       	bld	r10, 7
    379c:	68 94       	set
    379e:	cc 24       	eor	r12, r12
    37a0:	c7 f8       	bld	r12, 7
    37a2:	e1 2c       	mov	r14, r1
    37a4:	00 e0       	ldi	r16, 0x00	; 0
    37a6:	23 e0       	ldi	r18, 0x03	; 3
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	51 ee       	ldi	r21, 0xE1	; 225
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	38 dc       	rcall	.-1936   	; 0x3022 <serial_create>
    37b2:	90 93 68 0e 	sts	0x0E68, r25	; 0x800e68 <_com_serial_instance+0x1>
    37b6:	80 93 67 0e 	sts	0x0E67, r24	; 0x800e67 <_com_serial_instance>
    37ba:	e9 e8       	ldi	r30, 0x89	; 137
    37bc:	fe e0       	ldi	r31, 0x0E	; 14
    37be:	83 e1       	ldi	r24, 0x13	; 19
    37c0:	92 e0       	ldi	r25, 0x02	; 2
    37c2:	91 83       	std	Z+1, r25	; 0x01
    37c4:	80 83       	st	Z, r24
    37c6:	93 83       	std	Z+3, r25	; 0x03
    37c8:	82 83       	std	Z+2, r24	; 0x02
    37ca:	0f 91       	pop	r16
    37cc:	ef 90       	pop	r14
    37ce:	cf 90       	pop	r12
    37d0:	af 90       	pop	r10
    37d2:	9f 90       	pop	r9
    37d4:	8f 90       	pop	r8
    37d6:	08 95       	ret

000037d8 <_initTwiInterface>:
    37d8:	80 91 77 0e 	lds	r24, 0x0E77	; 0x800e77 <_twiIsInitiated>
    37dc:	81 11       	cpse	r24, r1
    37de:	0c c0       	rjmp	.+24     	; 0x37f8 <_initTwiInterface+0x20>
    37e0:	8c e0       	ldi	r24, 0x0C	; 12
    37e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    37e6:	8f ef       	ldi	r24, 0xFF	; 255
    37e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    37ec:	84 e0       	ldi	r24, 0x04	; 4
    37ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	80 93 77 0e 	sts	0x0E77, r24	; 0x800e77 <_twiIsInitiated>
    37f8:	08 95       	ret

000037fa <twiCreate>:
    37fa:	af 92       	push	r10
    37fc:	bf 92       	push	r11
    37fe:	cf 92       	push	r12
    3800:	df 92       	push	r13
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	a8 2e       	mov	r10, r24
    3810:	b6 2e       	mov	r11, r22
    3812:	69 01       	movw	r12, r18
    3814:	7a 01       	movw	r14, r20
    3816:	84 e0       	ldi	r24, 0x04	; 4
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	cb d3       	rcall	.+1942   	; 0x3fb2 <malloc>
    381c:	ec 01       	movw	r28, r24
    381e:	89 2b       	or	r24, r25
    3820:	61 f1       	breq	.+88     	; 0x387a <twiCreate+0x80>
    3822:	a8 82       	st	Y, r10
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	b8 12       	cpse	r11, r24
    3828:	12 c0       	rjmp	.+36     	; 0x384e <twiCreate+0x54>
    382a:	c7 01       	movw	r24, r14
    382c:	b6 01       	movw	r22, r12
    382e:	20 ea       	ldi	r18, 0xA0	; 160
    3830:	36 e8       	ldi	r19, 0x86	; 134
    3832:	41 e0       	ldi	r20, 0x01	; 1
    3834:	50 e0       	ldi	r21, 0x00	; 0
    3836:	79 d3       	rcall	.+1778   	; 0x3f2a <__udivmodsi4>
    3838:	da 01       	movw	r26, r20
    383a:	c9 01       	movw	r24, r18
    383c:	40 97       	sbiw	r24, 0x10	; 16
    383e:	a1 09       	sbc	r26, r1
    3840:	b1 09       	sbc	r27, r1
    3842:	b6 95       	lsr	r27
    3844:	a7 95       	ror	r26
    3846:	97 95       	ror	r25
    3848:	87 95       	ror	r24
    384a:	89 83       	std	Y+1, r24	; 0x01
    384c:	11 c0       	rjmp	.+34     	; 0x3870 <twiCreate+0x76>
    384e:	c7 01       	movw	r24, r14
    3850:	b6 01       	movw	r22, r12
    3852:	20 e8       	ldi	r18, 0x80	; 128
    3854:	3a e1       	ldi	r19, 0x1A	; 26
    3856:	46 e0       	ldi	r20, 0x06	; 6
    3858:	50 e0       	ldi	r21, 0x00	; 0
    385a:	67 d3       	rcall	.+1742   	; 0x3f2a <__udivmodsi4>
    385c:	da 01       	movw	r26, r20
    385e:	c9 01       	movw	r24, r18
    3860:	40 97       	sbiw	r24, 0x10	; 16
    3862:	a1 09       	sbc	r26, r1
    3864:	b1 09       	sbc	r27, r1
    3866:	b6 95       	lsr	r27
    3868:	a7 95       	ror	r26
    386a:	97 95       	ror	r25
    386c:	87 95       	ror	r24
    386e:	89 83       	std	Y+1, r24	; 0x01
    3870:	1b 83       	std	Y+3, r17	; 0x03
    3872:	0a 83       	std	Y+2, r16	; 0x02
    3874:	8c 2f       	mov	r24, r28
    3876:	9d 2f       	mov	r25, r29
    3878:	02 c0       	rjmp	.+4      	; 0x387e <twiCreate+0x84>
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	df 91       	pop	r29
    3880:	cf 91       	pop	r28
    3882:	1f 91       	pop	r17
    3884:	0f 91       	pop	r16
    3886:	ff 90       	pop	r15
    3888:	ef 90       	pop	r14
    388a:	df 90       	pop	r13
    388c:	cf 90       	pop	r12
    388e:	bf 90       	pop	r11
    3890:	af 90       	pop	r10
    3892:	08 95       	ret

00003894 <twiIsBusy>:
    3894:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3898:	81 70       	andi	r24, 0x01	; 1
    389a:	08 95       	ret

0000389c <twiTransmit>:
    389c:	ff 92       	push	r15
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    38a2:	cf 93       	push	r28
    38a4:	df 93       	push	r29
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	d1 f1       	breq	.+116    	; 0x391e <twiTransmit+0x82>
    38aa:	4a 30       	cpi	r20, 0x0A	; 10
    38ac:	d0 f5       	brcc	.+116    	; 0x3922 <twiTransmit+0x86>
    38ae:	f4 2e       	mov	r15, r20
    38b0:	8b 01       	movw	r16, r22
    38b2:	ec 01       	movw	r28, r24
    38b4:	ef df       	rcall	.-34     	; 0x3894 <twiIsBusy>
    38b6:	81 11       	cpse	r24, r1
    38b8:	36 c0       	rjmp	.+108    	; 0x3926 <twiTransmit+0x8a>
    38ba:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <_twiCurrentHandler>
    38be:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <_twiCurrentHandler+0x1>
    38c2:	c8 17       	cp	r28, r24
    38c4:	d9 07       	cpc	r29, r25
    38c6:	41 f0       	breq	.+16     	; 0x38d8 <twiTransmit+0x3c>
    38c8:	87 df       	rcall	.-242    	; 0x37d8 <_initTwiInterface>
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    38d0:	d0 93 6b 0e 	sts	0x0E6B, r29	; 0x800e6b <_twiCurrentHandler+0x1>
    38d4:	c0 93 6a 0e 	sts	0x0E6A, r28	; 0x800e6a <_twiCurrentHandler>
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	8f 0d       	add	r24, r15
    38dc:	80 93 6c 0e 	sts	0x0E6C, r24	; 0x800e6c <_twiMessageLen>
    38e0:	88 81       	ld	r24, Y
    38e2:	88 0f       	add	r24, r24
    38e4:	80 93 6d 0e 	sts	0x0E6D, r24	; 0x800e6d <_twiMessageBuffer>
    38e8:	ff 20       	and	r15, r15
    38ea:	89 f0       	breq	.+34     	; 0x390e <twiTransmit+0x72>
    38ec:	f8 01       	movw	r30, r16
    38ee:	ae e6       	ldi	r26, 0x6E	; 110
    38f0:	be e0       	ldi	r27, 0x0E	; 14
    38f2:	4f ef       	ldi	r20, 0xFF	; 255
    38f4:	4f 0d       	add	r20, r15
    38f6:	64 2f       	mov	r22, r20
    38f8:	70 e0       	ldi	r23, 0x00	; 0
    38fa:	cb 01       	movw	r24, r22
    38fc:	01 96       	adiw	r24, 0x01	; 1
    38fe:	b8 01       	movw	r22, r16
    3900:	68 0f       	add	r22, r24
    3902:	79 1f       	adc	r23, r25
    3904:	81 91       	ld	r24, Z+
    3906:	8d 93       	st	X+, r24
    3908:	e6 17       	cp	r30, r22
    390a:	f7 07       	cpc	r31, r23
    390c:	d9 f7       	brne	.-10     	; 0x3904 <twiTransmit+0x68>
    390e:	88 ef       	ldi	r24, 0xF8	; 248
    3910:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3914:	85 ea       	ldi	r24, 0xA5	; 165
    3916:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    391a:	84 e0       	ldi	r24, 0x04	; 4
    391c:	05 c0       	rjmp	.+10     	; 0x3928 <twiTransmit+0x8c>
    391e:	86 e0       	ldi	r24, 0x06	; 6
    3920:	03 c0       	rjmp	.+6      	; 0x3928 <twiTransmit+0x8c>
    3922:	87 e0       	ldi	r24, 0x07	; 7
    3924:	01 c0       	rjmp	.+2      	; 0x3928 <twiTransmit+0x8c>
    3926:	82 e0       	ldi	r24, 0x02	; 2
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	1f 91       	pop	r17
    392e:	0f 91       	pop	r16
    3930:	ff 90       	pop	r15
    3932:	08 95       	ret

00003934 <twiReceive>:
    3934:	1f 93       	push	r17
    3936:	cf 93       	push	r28
    3938:	df 93       	push	r29
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	29 f1       	breq	.+74     	; 0x3988 <twiReceive+0x54>
    393e:	6b 30       	cpi	r22, 0x0B	; 11
    3940:	28 f5       	brcc	.+74     	; 0x398c <twiReceive+0x58>
    3942:	16 2f       	mov	r17, r22
    3944:	ec 01       	movw	r28, r24
    3946:	a6 df       	rcall	.-180    	; 0x3894 <twiIsBusy>
    3948:	81 11       	cpse	r24, r1
    394a:	22 c0       	rjmp	.+68     	; 0x3990 <twiReceive+0x5c>
    394c:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <_twiCurrentHandler>
    3950:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <_twiCurrentHandler+0x1>
    3954:	c8 17       	cp	r28, r24
    3956:	d9 07       	cpc	r29, r25
    3958:	41 f0       	breq	.+16     	; 0x396a <twiReceive+0x36>
    395a:	3e df       	rcall	.-388    	; 0x37d8 <_initTwiInterface>
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3962:	d0 93 6b 0e 	sts	0x0E6B, r29	; 0x800e6b <_twiCurrentHandler+0x1>
    3966:	c0 93 6a 0e 	sts	0x0E6A, r28	; 0x800e6a <_twiCurrentHandler>
    396a:	10 93 6c 0e 	sts	0x0E6C, r17	; 0x800e6c <_twiMessageLen>
    396e:	88 81       	ld	r24, Y
    3970:	88 0f       	add	r24, r24
    3972:	81 60       	ori	r24, 0x01	; 1
    3974:	80 93 6d 0e 	sts	0x0E6D, r24	; 0x800e6d <_twiMessageBuffer>
    3978:	88 ef       	ldi	r24, 0xF8	; 248
    397a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    397e:	85 ea       	ldi	r24, 0xA5	; 165
    3980:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3984:	85 e0       	ldi	r24, 0x05	; 5
    3986:	05 c0       	rjmp	.+10     	; 0x3992 <twiReceive+0x5e>
    3988:	86 e0       	ldi	r24, 0x06	; 6
    398a:	03 c0       	rjmp	.+6      	; 0x3992 <twiReceive+0x5e>
    398c:	87 e0       	ldi	r24, 0x07	; 7
    398e:	01 c0       	rjmp	.+2      	; 0x3992 <twiReceive+0x5e>
    3990:	82 e0       	ldi	r24, 0x02	; 2
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	1f 91       	pop	r17
    3998:	08 95       	ret

0000399a <__vector_39>:
    399a:	1f 92       	push	r1
    399c:	0f 92       	push	r0
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	0f 92       	push	r0
    39a2:	11 24       	eor	r1, r1
    39a4:	0b b6       	in	r0, 0x3b	; 59
    39a6:	0f 92       	push	r0
    39a8:	2f 93       	push	r18
    39aa:	3f 93       	push	r19
    39ac:	4f 93       	push	r20
    39ae:	5f 93       	push	r21
    39b0:	6f 93       	push	r22
    39b2:	7f 93       	push	r23
    39b4:	8f 93       	push	r24
    39b6:	9f 93       	push	r25
    39b8:	af 93       	push	r26
    39ba:	bf 93       	push	r27
    39bc:	ef 93       	push	r30
    39be:	ff 93       	push	r31
    39c0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    39c4:	8e 2f       	mov	r24, r30
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	fc 01       	movw	r30, r24
    39ca:	38 97       	sbiw	r30, 0x08	; 8
    39cc:	e1 35       	cpi	r30, 0x51	; 81
    39ce:	f1 05       	cpc	r31, r1
    39d0:	08 f0       	brcs	.+2      	; 0x39d4 <__vector_39+0x3a>
    39d2:	75 c0       	rjmp	.+234    	; 0x3abe <__vector_39+0x124>
    39d4:	88 27       	eor	r24, r24
    39d6:	e4 58       	subi	r30, 0x84	; 132
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	8f 4f       	sbci	r24, 0xFF	; 255
    39dc:	c8 c2       	rjmp	.+1424   	; 0x3f6e <__tablejump2__>
    39de:	10 92 69 0e 	sts	0x0E69, r1	; 0x800e69 <_index.1885>
    39e2:	e0 91 69 0e 	lds	r30, 0x0E69	; 0x800e69 <_index.1885>
    39e6:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <_twiMessageLen>
    39ea:	e8 17       	cp	r30, r24
    39ec:	70 f4       	brcc	.+28     	; 0x3a0a <__vector_39+0x70>
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	8e 0f       	add	r24, r30
    39f2:	80 93 69 0e 	sts	0x0E69, r24	; 0x800e69 <_index.1885>
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	e3 59       	subi	r30, 0x93	; 147
    39fa:	f1 4f       	sbci	r31, 0xF1	; 241
    39fc:	80 81       	ld	r24, Z
    39fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3a02:	85 e8       	ldi	r24, 0x85	; 133
    3a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a08:	72 c0       	rjmp	.+228    	; 0x3aee <__vector_39+0x154>
    3a0a:	84 e9       	ldi	r24, 0x94	; 148
    3a0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a10:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <_twiCurrentHandler>
    3a14:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <_twiCurrentHandler+0x1>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	12 96       	adiw	r26, 0x02	; 2
    3a1c:	ed 91       	ld	r30, X+
    3a1e:	fc 91       	ld	r31, X
    3a20:	13 97       	sbiw	r26, 0x03	; 3
    3a22:	30 97       	sbiw	r30, 0x00	; 0
    3a24:	09 f4       	brne	.+2      	; 0x3a28 <__vector_39+0x8e>
    3a26:	63 c0       	rjmp	.+198    	; 0x3aee <__vector_39+0x154>
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	40 e0       	ldi	r20, 0x00	; 0
    3a2c:	50 e0       	ldi	r21, 0x00	; 0
    3a2e:	64 e0       	ldi	r22, 0x04	; 4
    3a30:	19 95       	eicall
    3a32:	5d c0       	rjmp	.+186    	; 0x3aee <__vector_39+0x154>
    3a34:	e0 91 69 0e 	lds	r30, 0x0E69	; 0x800e69 <_index.1885>
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	8e 0f       	add	r24, r30
    3a3c:	80 93 69 0e 	sts	0x0E69, r24	; 0x800e69 <_index.1885>
    3a40:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	e3 59       	subi	r30, 0x93	; 147
    3a48:	f1 4f       	sbci	r31, 0xF1	; 241
    3a4a:	80 83       	st	Z, r24
    3a4c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3a50:	80 34       	cpi	r24, 0x40	; 64
    3a52:	11 f4       	brne	.+4      	; 0x3a58 <__vector_39+0xbe>
    3a54:	10 92 69 0e 	sts	0x0E69, r1	; 0x800e69 <_index.1885>
    3a58:	20 91 69 0e 	lds	r18, 0x0E69	; 0x800e69 <_index.1885>
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <_twiMessageLen>
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	28 17       	cp	r18, r24
    3a68:	39 07       	cpc	r19, r25
    3a6a:	24 f4       	brge	.+8      	; 0x3a74 <__vector_39+0xda>
    3a6c:	85 ec       	ldi	r24, 0xC5	; 197
    3a6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a72:	3d c0       	rjmp	.+122    	; 0x3aee <__vector_39+0x154>
    3a74:	85 e8       	ldi	r24, 0x85	; 133
    3a76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a7a:	39 c0       	rjmp	.+114    	; 0x3aee <__vector_39+0x154>
    3a7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3a80:	e0 91 69 0e 	lds	r30, 0x0E69	; 0x800e69 <_index.1885>
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	e3 59       	subi	r30, 0x93	; 147
    3a88:	f1 4f       	sbci	r31, 0xF1	; 241
    3a8a:	80 83       	st	Z, r24
    3a8c:	84 e9       	ldi	r24, 0x94	; 148
    3a8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a92:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <_twiCurrentHandler>
    3a96:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <_twiCurrentHandler+0x1>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	12 96       	adiw	r26, 0x02	; 2
    3a9e:	ed 91       	ld	r30, X+
    3aa0:	fc 91       	ld	r31, X
    3aa2:	13 97       	sbiw	r26, 0x03	; 3
    3aa4:	30 97       	sbiw	r30, 0x00	; 0
    3aa6:	19 f1       	breq	.+70     	; 0x3aee <__vector_39+0x154>
    3aa8:	20 91 6c 0e 	lds	r18, 0x0E6C	; 0x800e6c <_twiMessageLen>
    3aac:	4d e6       	ldi	r20, 0x6D	; 109
    3aae:	5e e0       	ldi	r21, 0x0E	; 14
    3ab0:	65 e0       	ldi	r22, 0x05	; 5
    3ab2:	19 95       	eicall
    3ab4:	1c c0       	rjmp	.+56     	; 0x3aee <__vector_39+0x154>
    3ab6:	85 ea       	ldi	r24, 0xA5	; 165
    3ab8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3abc:	18 c0       	rjmp	.+48     	; 0x3aee <__vector_39+0x154>
    3abe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3ac2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3ac6:	84 e0       	ldi	r24, 0x04	; 4
    3ac8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3acc:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <_twiCurrentHandler>
    3ad0:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <_twiCurrentHandler+0x1>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	12 96       	adiw	r26, 0x02	; 2
    3ad8:	ed 91       	ld	r30, X+
    3ada:	fc 91       	ld	r31, X
    3adc:	13 97       	sbiw	r26, 0x03	; 3
    3ade:	30 97       	sbiw	r30, 0x00	; 0
    3ae0:	31 f0       	breq	.+12     	; 0x3aee <__vector_39+0x154>
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	40 e0       	ldi	r20, 0x00	; 0
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    3aec:	19 95       	eicall
    3aee:	ff 91       	pop	r31
    3af0:	ef 91       	pop	r30
    3af2:	bf 91       	pop	r27
    3af4:	af 91       	pop	r26
    3af6:	9f 91       	pop	r25
    3af8:	8f 91       	pop	r24
    3afa:	7f 91       	pop	r23
    3afc:	6f 91       	pop	r22
    3afe:	5f 91       	pop	r21
    3b00:	4f 91       	pop	r20
    3b02:	3f 91       	pop	r19
    3b04:	2f 91       	pop	r18
    3b06:	0f 90       	pop	r0
    3b08:	0b be       	out	0x3b, r0	; 59
    3b0a:	0f 90       	pop	r0
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	0f 90       	pop	r0
    3b10:	1f 90       	pop	r1
    3b12:	18 95       	reti

00003b14 <fifo_init>:
    3b14:	fc 01       	movw	r30, r24
    3b16:	41 11       	cpse	r20, r1
    3b18:	01 c0       	rjmp	.+2      	; 0x3b1c <fifo_init+0x8>
    3b1a:	6c d3       	rcall	.+1752   	; 0x41f4 <abort>
    3b1c:	84 2f       	mov	r24, r20
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	9c 01       	movw	r18, r24
    3b22:	21 50       	subi	r18, 0x01	; 1
    3b24:	31 09       	sbc	r19, r1
    3b26:	82 23       	and	r24, r18
    3b28:	93 23       	and	r25, r19
    3b2a:	89 2b       	or	r24, r25
    3b2c:	09 f0       	breq	.+2      	; 0x3b30 <fifo_init+0x1c>
    3b2e:	62 d3       	rcall	.+1732   	; 0x41f4 <abort>
    3b30:	41 38       	cpi	r20, 0x81	; 129
    3b32:	08 f0       	brcs	.+2      	; 0x3b36 <fifo_init+0x22>
    3b34:	5f d3       	rcall	.+1726   	; 0x41f4 <abort>
    3b36:	12 82       	std	Z+2, r1	; 0x02
    3b38:	13 82       	std	Z+3, r1	; 0x03
    3b3a:	44 83       	std	Z+4, r20	; 0x04
    3b3c:	44 0f       	add	r20, r20
    3b3e:	41 50       	subi	r20, 0x01	; 1
    3b40:	45 83       	std	Z+5, r20	; 0x05
    3b42:	71 83       	std	Z+1, r23	; 0x01
    3b44:	60 83       	st	Z, r22
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	08 95       	ret

00003b4c <__subsf3>:
    3b4c:	50 58       	subi	r21, 0x80	; 128

00003b4e <__addsf3>:
    3b4e:	bb 27       	eor	r27, r27
    3b50:	aa 27       	eor	r26, r26
    3b52:	0e d0       	rcall	.+28     	; 0x3b70 <__addsf3x>
    3b54:	4d c1       	rjmp	.+666    	; 0x3df0 <__fp_round>
    3b56:	3e d1       	rcall	.+636    	; 0x3dd4 <__fp_pscA>
    3b58:	30 f0       	brcs	.+12     	; 0x3b66 <__addsf3+0x18>
    3b5a:	43 d1       	rcall	.+646    	; 0x3de2 <__fp_pscB>
    3b5c:	20 f0       	brcs	.+8      	; 0x3b66 <__addsf3+0x18>
    3b5e:	31 f4       	brne	.+12     	; 0x3b6c <__addsf3+0x1e>
    3b60:	9f 3f       	cpi	r25, 0xFF	; 255
    3b62:	11 f4       	brne	.+4      	; 0x3b68 <__addsf3+0x1a>
    3b64:	1e f4       	brtc	.+6      	; 0x3b6c <__addsf3+0x1e>
    3b66:	33 c1       	rjmp	.+614    	; 0x3dce <__fp_nan>
    3b68:	0e f4       	brtc	.+2      	; 0x3b6c <__addsf3+0x1e>
    3b6a:	e0 95       	com	r30
    3b6c:	e7 fb       	bst	r30, 7
    3b6e:	29 c1       	rjmp	.+594    	; 0x3dc2 <__fp_inf>

00003b70 <__addsf3x>:
    3b70:	e9 2f       	mov	r30, r25
    3b72:	4f d1       	rcall	.+670    	; 0x3e12 <__fp_split3>
    3b74:	80 f3       	brcs	.-32     	; 0x3b56 <__addsf3+0x8>
    3b76:	ba 17       	cp	r27, r26
    3b78:	62 07       	cpc	r22, r18
    3b7a:	73 07       	cpc	r23, r19
    3b7c:	84 07       	cpc	r24, r20
    3b7e:	95 07       	cpc	r25, r21
    3b80:	18 f0       	brcs	.+6      	; 0x3b88 <__addsf3x+0x18>
    3b82:	71 f4       	brne	.+28     	; 0x3ba0 <__addsf3x+0x30>
    3b84:	9e f5       	brtc	.+102    	; 0x3bec <__addsf3x+0x7c>
    3b86:	67 c1       	rjmp	.+718    	; 0x3e56 <__fp_zero>
    3b88:	0e f4       	brtc	.+2      	; 0x3b8c <__addsf3x+0x1c>
    3b8a:	e0 95       	com	r30
    3b8c:	0b 2e       	mov	r0, r27
    3b8e:	ba 2f       	mov	r27, r26
    3b90:	a0 2d       	mov	r26, r0
    3b92:	0b 01       	movw	r0, r22
    3b94:	b9 01       	movw	r22, r18
    3b96:	90 01       	movw	r18, r0
    3b98:	0c 01       	movw	r0, r24
    3b9a:	ca 01       	movw	r24, r20
    3b9c:	a0 01       	movw	r20, r0
    3b9e:	11 24       	eor	r1, r1
    3ba0:	ff 27       	eor	r31, r31
    3ba2:	59 1b       	sub	r21, r25
    3ba4:	99 f0       	breq	.+38     	; 0x3bcc <__addsf3x+0x5c>
    3ba6:	59 3f       	cpi	r21, 0xF9	; 249
    3ba8:	50 f4       	brcc	.+20     	; 0x3bbe <__addsf3x+0x4e>
    3baa:	50 3e       	cpi	r21, 0xE0	; 224
    3bac:	68 f1       	brcs	.+90     	; 0x3c08 <__addsf3x+0x98>
    3bae:	1a 16       	cp	r1, r26
    3bb0:	f0 40       	sbci	r31, 0x00	; 0
    3bb2:	a2 2f       	mov	r26, r18
    3bb4:	23 2f       	mov	r18, r19
    3bb6:	34 2f       	mov	r19, r20
    3bb8:	44 27       	eor	r20, r20
    3bba:	58 5f       	subi	r21, 0xF8	; 248
    3bbc:	f3 cf       	rjmp	.-26     	; 0x3ba4 <__addsf3x+0x34>
    3bbe:	46 95       	lsr	r20
    3bc0:	37 95       	ror	r19
    3bc2:	27 95       	ror	r18
    3bc4:	a7 95       	ror	r26
    3bc6:	f0 40       	sbci	r31, 0x00	; 0
    3bc8:	53 95       	inc	r21
    3bca:	c9 f7       	brne	.-14     	; 0x3bbe <__addsf3x+0x4e>
    3bcc:	7e f4       	brtc	.+30     	; 0x3bec <__addsf3x+0x7c>
    3bce:	1f 16       	cp	r1, r31
    3bd0:	ba 0b       	sbc	r27, r26
    3bd2:	62 0b       	sbc	r22, r18
    3bd4:	73 0b       	sbc	r23, r19
    3bd6:	84 0b       	sbc	r24, r20
    3bd8:	ba f0       	brmi	.+46     	; 0x3c08 <__addsf3x+0x98>
    3bda:	91 50       	subi	r25, 0x01	; 1
    3bdc:	a1 f0       	breq	.+40     	; 0x3c06 <__addsf3x+0x96>
    3bde:	ff 0f       	add	r31, r31
    3be0:	bb 1f       	adc	r27, r27
    3be2:	66 1f       	adc	r22, r22
    3be4:	77 1f       	adc	r23, r23
    3be6:	88 1f       	adc	r24, r24
    3be8:	c2 f7       	brpl	.-16     	; 0x3bda <__addsf3x+0x6a>
    3bea:	0e c0       	rjmp	.+28     	; 0x3c08 <__addsf3x+0x98>
    3bec:	ba 0f       	add	r27, r26
    3bee:	62 1f       	adc	r22, r18
    3bf0:	73 1f       	adc	r23, r19
    3bf2:	84 1f       	adc	r24, r20
    3bf4:	48 f4       	brcc	.+18     	; 0x3c08 <__addsf3x+0x98>
    3bf6:	87 95       	ror	r24
    3bf8:	77 95       	ror	r23
    3bfa:	67 95       	ror	r22
    3bfc:	b7 95       	ror	r27
    3bfe:	f7 95       	ror	r31
    3c00:	9e 3f       	cpi	r25, 0xFE	; 254
    3c02:	08 f0       	brcs	.+2      	; 0x3c06 <__addsf3x+0x96>
    3c04:	b3 cf       	rjmp	.-154    	; 0x3b6c <__addsf3+0x1e>
    3c06:	93 95       	inc	r25
    3c08:	88 0f       	add	r24, r24
    3c0a:	08 f0       	brcs	.+2      	; 0x3c0e <__addsf3x+0x9e>
    3c0c:	99 27       	eor	r25, r25
    3c0e:	ee 0f       	add	r30, r30
    3c10:	97 95       	ror	r25
    3c12:	87 95       	ror	r24
    3c14:	08 95       	ret

00003c16 <__divsf3>:
    3c16:	0c d0       	rcall	.+24     	; 0x3c30 <__divsf3x>
    3c18:	eb c0       	rjmp	.+470    	; 0x3df0 <__fp_round>
    3c1a:	e3 d0       	rcall	.+454    	; 0x3de2 <__fp_pscB>
    3c1c:	40 f0       	brcs	.+16     	; 0x3c2e <__divsf3+0x18>
    3c1e:	da d0       	rcall	.+436    	; 0x3dd4 <__fp_pscA>
    3c20:	30 f0       	brcs	.+12     	; 0x3c2e <__divsf3+0x18>
    3c22:	21 f4       	brne	.+8      	; 0x3c2c <__divsf3+0x16>
    3c24:	5f 3f       	cpi	r21, 0xFF	; 255
    3c26:	19 f0       	breq	.+6      	; 0x3c2e <__divsf3+0x18>
    3c28:	cc c0       	rjmp	.+408    	; 0x3dc2 <__fp_inf>
    3c2a:	51 11       	cpse	r21, r1
    3c2c:	15 c1       	rjmp	.+554    	; 0x3e58 <__fp_szero>
    3c2e:	cf c0       	rjmp	.+414    	; 0x3dce <__fp_nan>

00003c30 <__divsf3x>:
    3c30:	f0 d0       	rcall	.+480    	; 0x3e12 <__fp_split3>
    3c32:	98 f3       	brcs	.-26     	; 0x3c1a <__divsf3+0x4>

00003c34 <__divsf3_pse>:
    3c34:	99 23       	and	r25, r25
    3c36:	c9 f3       	breq	.-14     	; 0x3c2a <__divsf3+0x14>
    3c38:	55 23       	and	r21, r21
    3c3a:	b1 f3       	breq	.-20     	; 0x3c28 <__divsf3+0x12>
    3c3c:	95 1b       	sub	r25, r21
    3c3e:	55 0b       	sbc	r21, r21
    3c40:	bb 27       	eor	r27, r27
    3c42:	aa 27       	eor	r26, r26
    3c44:	62 17       	cp	r22, r18
    3c46:	73 07       	cpc	r23, r19
    3c48:	84 07       	cpc	r24, r20
    3c4a:	38 f0       	brcs	.+14     	; 0x3c5a <__divsf3_pse+0x26>
    3c4c:	9f 5f       	subi	r25, 0xFF	; 255
    3c4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c50:	22 0f       	add	r18, r18
    3c52:	33 1f       	adc	r19, r19
    3c54:	44 1f       	adc	r20, r20
    3c56:	aa 1f       	adc	r26, r26
    3c58:	a9 f3       	breq	.-22     	; 0x3c44 <__divsf3_pse+0x10>
    3c5a:	33 d0       	rcall	.+102    	; 0x3cc2 <__divsf3_pse+0x8e>
    3c5c:	0e 2e       	mov	r0, r30
    3c5e:	3a f0       	brmi	.+14     	; 0x3c6e <__divsf3_pse+0x3a>
    3c60:	e0 e8       	ldi	r30, 0x80	; 128
    3c62:	30 d0       	rcall	.+96     	; 0x3cc4 <__divsf3_pse+0x90>
    3c64:	91 50       	subi	r25, 0x01	; 1
    3c66:	50 40       	sbci	r21, 0x00	; 0
    3c68:	e6 95       	lsr	r30
    3c6a:	00 1c       	adc	r0, r0
    3c6c:	ca f7       	brpl	.-14     	; 0x3c60 <__divsf3_pse+0x2c>
    3c6e:	29 d0       	rcall	.+82     	; 0x3cc2 <__divsf3_pse+0x8e>
    3c70:	fe 2f       	mov	r31, r30
    3c72:	27 d0       	rcall	.+78     	; 0x3cc2 <__divsf3_pse+0x8e>
    3c74:	66 0f       	add	r22, r22
    3c76:	77 1f       	adc	r23, r23
    3c78:	88 1f       	adc	r24, r24
    3c7a:	bb 1f       	adc	r27, r27
    3c7c:	26 17       	cp	r18, r22
    3c7e:	37 07       	cpc	r19, r23
    3c80:	48 07       	cpc	r20, r24
    3c82:	ab 07       	cpc	r26, r27
    3c84:	b0 e8       	ldi	r27, 0x80	; 128
    3c86:	09 f0       	breq	.+2      	; 0x3c8a <__divsf3_pse+0x56>
    3c88:	bb 0b       	sbc	r27, r27
    3c8a:	80 2d       	mov	r24, r0
    3c8c:	bf 01       	movw	r22, r30
    3c8e:	ff 27       	eor	r31, r31
    3c90:	93 58       	subi	r25, 0x83	; 131
    3c92:	5f 4f       	sbci	r21, 0xFF	; 255
    3c94:	2a f0       	brmi	.+10     	; 0x3ca0 <__divsf3_pse+0x6c>
    3c96:	9e 3f       	cpi	r25, 0xFE	; 254
    3c98:	51 05       	cpc	r21, r1
    3c9a:	68 f0       	brcs	.+26     	; 0x3cb6 <__divsf3_pse+0x82>
    3c9c:	92 c0       	rjmp	.+292    	; 0x3dc2 <__fp_inf>
    3c9e:	dc c0       	rjmp	.+440    	; 0x3e58 <__fp_szero>
    3ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ca2:	ec f3       	brlt	.-6      	; 0x3c9e <__divsf3_pse+0x6a>
    3ca4:	98 3e       	cpi	r25, 0xE8	; 232
    3ca6:	dc f3       	brlt	.-10     	; 0x3c9e <__divsf3_pse+0x6a>
    3ca8:	86 95       	lsr	r24
    3caa:	77 95       	ror	r23
    3cac:	67 95       	ror	r22
    3cae:	b7 95       	ror	r27
    3cb0:	f7 95       	ror	r31
    3cb2:	9f 5f       	subi	r25, 0xFF	; 255
    3cb4:	c9 f7       	brne	.-14     	; 0x3ca8 <__divsf3_pse+0x74>
    3cb6:	88 0f       	add	r24, r24
    3cb8:	91 1d       	adc	r25, r1
    3cba:	96 95       	lsr	r25
    3cbc:	87 95       	ror	r24
    3cbe:	97 f9       	bld	r25, 7
    3cc0:	08 95       	ret
    3cc2:	e1 e0       	ldi	r30, 0x01	; 1
    3cc4:	66 0f       	add	r22, r22
    3cc6:	77 1f       	adc	r23, r23
    3cc8:	88 1f       	adc	r24, r24
    3cca:	bb 1f       	adc	r27, r27
    3ccc:	62 17       	cp	r22, r18
    3cce:	73 07       	cpc	r23, r19
    3cd0:	84 07       	cpc	r24, r20
    3cd2:	ba 07       	cpc	r27, r26
    3cd4:	20 f0       	brcs	.+8      	; 0x3cde <__divsf3_pse+0xaa>
    3cd6:	62 1b       	sub	r22, r18
    3cd8:	73 0b       	sbc	r23, r19
    3cda:	84 0b       	sbc	r24, r20
    3cdc:	ba 0b       	sbc	r27, r26
    3cde:	ee 1f       	adc	r30, r30
    3ce0:	88 f7       	brcc	.-30     	; 0x3cc4 <__divsf3_pse+0x90>
    3ce2:	e0 95       	com	r30
    3ce4:	08 95       	ret

00003ce6 <__fixsfsi>:
    3ce6:	04 d0       	rcall	.+8      	; 0x3cf0 <__fixunssfsi>
    3ce8:	68 94       	set
    3cea:	b1 11       	cpse	r27, r1
    3cec:	b5 c0       	rjmp	.+362    	; 0x3e58 <__fp_szero>
    3cee:	08 95       	ret

00003cf0 <__fixunssfsi>:
    3cf0:	98 d0       	rcall	.+304    	; 0x3e22 <__fp_splitA>
    3cf2:	88 f0       	brcs	.+34     	; 0x3d16 <__fixunssfsi+0x26>
    3cf4:	9f 57       	subi	r25, 0x7F	; 127
    3cf6:	90 f0       	brcs	.+36     	; 0x3d1c <__fixunssfsi+0x2c>
    3cf8:	b9 2f       	mov	r27, r25
    3cfa:	99 27       	eor	r25, r25
    3cfc:	b7 51       	subi	r27, 0x17	; 23
    3cfe:	a0 f0       	brcs	.+40     	; 0x3d28 <__fixunssfsi+0x38>
    3d00:	d1 f0       	breq	.+52     	; 0x3d36 <__fixunssfsi+0x46>
    3d02:	66 0f       	add	r22, r22
    3d04:	77 1f       	adc	r23, r23
    3d06:	88 1f       	adc	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	1a f0       	brmi	.+6      	; 0x3d12 <__fixunssfsi+0x22>
    3d0c:	ba 95       	dec	r27
    3d0e:	c9 f7       	brne	.-14     	; 0x3d02 <__fixunssfsi+0x12>
    3d10:	12 c0       	rjmp	.+36     	; 0x3d36 <__fixunssfsi+0x46>
    3d12:	b1 30       	cpi	r27, 0x01	; 1
    3d14:	81 f0       	breq	.+32     	; 0x3d36 <__fixunssfsi+0x46>
    3d16:	9f d0       	rcall	.+318    	; 0x3e56 <__fp_zero>
    3d18:	b1 e0       	ldi	r27, 0x01	; 1
    3d1a:	08 95       	ret
    3d1c:	9c c0       	rjmp	.+312    	; 0x3e56 <__fp_zero>
    3d1e:	67 2f       	mov	r22, r23
    3d20:	78 2f       	mov	r23, r24
    3d22:	88 27       	eor	r24, r24
    3d24:	b8 5f       	subi	r27, 0xF8	; 248
    3d26:	39 f0       	breq	.+14     	; 0x3d36 <__fixunssfsi+0x46>
    3d28:	b9 3f       	cpi	r27, 0xF9	; 249
    3d2a:	cc f3       	brlt	.-14     	; 0x3d1e <__fixunssfsi+0x2e>
    3d2c:	86 95       	lsr	r24
    3d2e:	77 95       	ror	r23
    3d30:	67 95       	ror	r22
    3d32:	b3 95       	inc	r27
    3d34:	d9 f7       	brne	.-10     	; 0x3d2c <__fixunssfsi+0x3c>
    3d36:	3e f4       	brtc	.+14     	; 0x3d46 <__fixunssfsi+0x56>
    3d38:	90 95       	com	r25
    3d3a:	80 95       	com	r24
    3d3c:	70 95       	com	r23
    3d3e:	61 95       	neg	r22
    3d40:	7f 4f       	sbci	r23, 0xFF	; 255
    3d42:	8f 4f       	sbci	r24, 0xFF	; 255
    3d44:	9f 4f       	sbci	r25, 0xFF	; 255
    3d46:	08 95       	ret

00003d48 <__floatunsisf>:
    3d48:	e8 94       	clt
    3d4a:	09 c0       	rjmp	.+18     	; 0x3d5e <__floatsisf+0x12>

00003d4c <__floatsisf>:
    3d4c:	97 fb       	bst	r25, 7
    3d4e:	3e f4       	brtc	.+14     	; 0x3d5e <__floatsisf+0x12>
    3d50:	90 95       	com	r25
    3d52:	80 95       	com	r24
    3d54:	70 95       	com	r23
    3d56:	61 95       	neg	r22
    3d58:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5e:	99 23       	and	r25, r25
    3d60:	a9 f0       	breq	.+42     	; 0x3d8c <__floatsisf+0x40>
    3d62:	f9 2f       	mov	r31, r25
    3d64:	96 e9       	ldi	r25, 0x96	; 150
    3d66:	bb 27       	eor	r27, r27
    3d68:	93 95       	inc	r25
    3d6a:	f6 95       	lsr	r31
    3d6c:	87 95       	ror	r24
    3d6e:	77 95       	ror	r23
    3d70:	67 95       	ror	r22
    3d72:	b7 95       	ror	r27
    3d74:	f1 11       	cpse	r31, r1
    3d76:	f8 cf       	rjmp	.-16     	; 0x3d68 <__floatsisf+0x1c>
    3d78:	fa f4       	brpl	.+62     	; 0x3db8 <__floatsisf+0x6c>
    3d7a:	bb 0f       	add	r27, r27
    3d7c:	11 f4       	brne	.+4      	; 0x3d82 <__floatsisf+0x36>
    3d7e:	60 ff       	sbrs	r22, 0
    3d80:	1b c0       	rjmp	.+54     	; 0x3db8 <__floatsisf+0x6c>
    3d82:	6f 5f       	subi	r22, 0xFF	; 255
    3d84:	7f 4f       	sbci	r23, 0xFF	; 255
    3d86:	8f 4f       	sbci	r24, 0xFF	; 255
    3d88:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8a:	16 c0       	rjmp	.+44     	; 0x3db8 <__floatsisf+0x6c>
    3d8c:	88 23       	and	r24, r24
    3d8e:	11 f0       	breq	.+4      	; 0x3d94 <__floatsisf+0x48>
    3d90:	96 e9       	ldi	r25, 0x96	; 150
    3d92:	11 c0       	rjmp	.+34     	; 0x3db6 <__floatsisf+0x6a>
    3d94:	77 23       	and	r23, r23
    3d96:	21 f0       	breq	.+8      	; 0x3da0 <__floatsisf+0x54>
    3d98:	9e e8       	ldi	r25, 0x8E	; 142
    3d9a:	87 2f       	mov	r24, r23
    3d9c:	76 2f       	mov	r23, r22
    3d9e:	05 c0       	rjmp	.+10     	; 0x3daa <__floatsisf+0x5e>
    3da0:	66 23       	and	r22, r22
    3da2:	71 f0       	breq	.+28     	; 0x3dc0 <__floatsisf+0x74>
    3da4:	96 e8       	ldi	r25, 0x86	; 134
    3da6:	86 2f       	mov	r24, r22
    3da8:	70 e0       	ldi	r23, 0x00	; 0
    3daa:	60 e0       	ldi	r22, 0x00	; 0
    3dac:	2a f0       	brmi	.+10     	; 0x3db8 <__floatsisf+0x6c>
    3dae:	9a 95       	dec	r25
    3db0:	66 0f       	add	r22, r22
    3db2:	77 1f       	adc	r23, r23
    3db4:	88 1f       	adc	r24, r24
    3db6:	da f7       	brpl	.-10     	; 0x3dae <__floatsisf+0x62>
    3db8:	88 0f       	add	r24, r24
    3dba:	96 95       	lsr	r25
    3dbc:	87 95       	ror	r24
    3dbe:	97 f9       	bld	r25, 7
    3dc0:	08 95       	ret

00003dc2 <__fp_inf>:
    3dc2:	97 f9       	bld	r25, 7
    3dc4:	9f 67       	ori	r25, 0x7F	; 127
    3dc6:	80 e8       	ldi	r24, 0x80	; 128
    3dc8:	70 e0       	ldi	r23, 0x00	; 0
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	08 95       	ret

00003dce <__fp_nan>:
    3dce:	9f ef       	ldi	r25, 0xFF	; 255
    3dd0:	80 ec       	ldi	r24, 0xC0	; 192
    3dd2:	08 95       	ret

00003dd4 <__fp_pscA>:
    3dd4:	00 24       	eor	r0, r0
    3dd6:	0a 94       	dec	r0
    3dd8:	16 16       	cp	r1, r22
    3dda:	17 06       	cpc	r1, r23
    3ddc:	18 06       	cpc	r1, r24
    3dde:	09 06       	cpc	r0, r25
    3de0:	08 95       	ret

00003de2 <__fp_pscB>:
    3de2:	00 24       	eor	r0, r0
    3de4:	0a 94       	dec	r0
    3de6:	12 16       	cp	r1, r18
    3de8:	13 06       	cpc	r1, r19
    3dea:	14 06       	cpc	r1, r20
    3dec:	05 06       	cpc	r0, r21
    3dee:	08 95       	ret

00003df0 <__fp_round>:
    3df0:	09 2e       	mov	r0, r25
    3df2:	03 94       	inc	r0
    3df4:	00 0c       	add	r0, r0
    3df6:	11 f4       	brne	.+4      	; 0x3dfc <__fp_round+0xc>
    3df8:	88 23       	and	r24, r24
    3dfa:	52 f0       	brmi	.+20     	; 0x3e10 <__fp_round+0x20>
    3dfc:	bb 0f       	add	r27, r27
    3dfe:	40 f4       	brcc	.+16     	; 0x3e10 <__fp_round+0x20>
    3e00:	bf 2b       	or	r27, r31
    3e02:	11 f4       	brne	.+4      	; 0x3e08 <__fp_round+0x18>
    3e04:	60 ff       	sbrs	r22, 0
    3e06:	04 c0       	rjmp	.+8      	; 0x3e10 <__fp_round+0x20>
    3e08:	6f 5f       	subi	r22, 0xFF	; 255
    3e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e10:	08 95       	ret

00003e12 <__fp_split3>:
    3e12:	57 fd       	sbrc	r21, 7
    3e14:	90 58       	subi	r25, 0x80	; 128
    3e16:	44 0f       	add	r20, r20
    3e18:	55 1f       	adc	r21, r21
    3e1a:	59 f0       	breq	.+22     	; 0x3e32 <__fp_splitA+0x10>
    3e1c:	5f 3f       	cpi	r21, 0xFF	; 255
    3e1e:	71 f0       	breq	.+28     	; 0x3e3c <__fp_splitA+0x1a>
    3e20:	47 95       	ror	r20

00003e22 <__fp_splitA>:
    3e22:	88 0f       	add	r24, r24
    3e24:	97 fb       	bst	r25, 7
    3e26:	99 1f       	adc	r25, r25
    3e28:	61 f0       	breq	.+24     	; 0x3e42 <__fp_splitA+0x20>
    3e2a:	9f 3f       	cpi	r25, 0xFF	; 255
    3e2c:	79 f0       	breq	.+30     	; 0x3e4c <__fp_splitA+0x2a>
    3e2e:	87 95       	ror	r24
    3e30:	08 95       	ret
    3e32:	12 16       	cp	r1, r18
    3e34:	13 06       	cpc	r1, r19
    3e36:	14 06       	cpc	r1, r20
    3e38:	55 1f       	adc	r21, r21
    3e3a:	f2 cf       	rjmp	.-28     	; 0x3e20 <__fp_split3+0xe>
    3e3c:	46 95       	lsr	r20
    3e3e:	f1 df       	rcall	.-30     	; 0x3e22 <__fp_splitA>
    3e40:	08 c0       	rjmp	.+16     	; 0x3e52 <__fp_splitA+0x30>
    3e42:	16 16       	cp	r1, r22
    3e44:	17 06       	cpc	r1, r23
    3e46:	18 06       	cpc	r1, r24
    3e48:	99 1f       	adc	r25, r25
    3e4a:	f1 cf       	rjmp	.-30     	; 0x3e2e <__fp_splitA+0xc>
    3e4c:	86 95       	lsr	r24
    3e4e:	71 05       	cpc	r23, r1
    3e50:	61 05       	cpc	r22, r1
    3e52:	08 94       	sec
    3e54:	08 95       	ret

00003e56 <__fp_zero>:
    3e56:	e8 94       	clt

00003e58 <__fp_szero>:
    3e58:	bb 27       	eor	r27, r27
    3e5a:	66 27       	eor	r22, r22
    3e5c:	77 27       	eor	r23, r23
    3e5e:	cb 01       	movw	r24, r22
    3e60:	97 f9       	bld	r25, 7
    3e62:	08 95       	ret

00003e64 <__mulsf3>:
    3e64:	0b d0       	rcall	.+22     	; 0x3e7c <__mulsf3x>
    3e66:	c4 cf       	rjmp	.-120    	; 0x3df0 <__fp_round>
    3e68:	b5 df       	rcall	.-150    	; 0x3dd4 <__fp_pscA>
    3e6a:	28 f0       	brcs	.+10     	; 0x3e76 <__mulsf3+0x12>
    3e6c:	ba df       	rcall	.-140    	; 0x3de2 <__fp_pscB>
    3e6e:	18 f0       	brcs	.+6      	; 0x3e76 <__mulsf3+0x12>
    3e70:	95 23       	and	r25, r21
    3e72:	09 f0       	breq	.+2      	; 0x3e76 <__mulsf3+0x12>
    3e74:	a6 cf       	rjmp	.-180    	; 0x3dc2 <__fp_inf>
    3e76:	ab cf       	rjmp	.-170    	; 0x3dce <__fp_nan>
    3e78:	11 24       	eor	r1, r1
    3e7a:	ee cf       	rjmp	.-36     	; 0x3e58 <__fp_szero>

00003e7c <__mulsf3x>:
    3e7c:	ca df       	rcall	.-108    	; 0x3e12 <__fp_split3>
    3e7e:	a0 f3       	brcs	.-24     	; 0x3e68 <__mulsf3+0x4>

00003e80 <__mulsf3_pse>:
    3e80:	95 9f       	mul	r25, r21
    3e82:	d1 f3       	breq	.-12     	; 0x3e78 <__mulsf3+0x14>
    3e84:	95 0f       	add	r25, r21
    3e86:	50 e0       	ldi	r21, 0x00	; 0
    3e88:	55 1f       	adc	r21, r21
    3e8a:	62 9f       	mul	r22, r18
    3e8c:	f0 01       	movw	r30, r0
    3e8e:	72 9f       	mul	r23, r18
    3e90:	bb 27       	eor	r27, r27
    3e92:	f0 0d       	add	r31, r0
    3e94:	b1 1d       	adc	r27, r1
    3e96:	63 9f       	mul	r22, r19
    3e98:	aa 27       	eor	r26, r26
    3e9a:	f0 0d       	add	r31, r0
    3e9c:	b1 1d       	adc	r27, r1
    3e9e:	aa 1f       	adc	r26, r26
    3ea0:	64 9f       	mul	r22, r20
    3ea2:	66 27       	eor	r22, r22
    3ea4:	b0 0d       	add	r27, r0
    3ea6:	a1 1d       	adc	r26, r1
    3ea8:	66 1f       	adc	r22, r22
    3eaa:	82 9f       	mul	r24, r18
    3eac:	22 27       	eor	r18, r18
    3eae:	b0 0d       	add	r27, r0
    3eb0:	a1 1d       	adc	r26, r1
    3eb2:	62 1f       	adc	r22, r18
    3eb4:	73 9f       	mul	r23, r19
    3eb6:	b0 0d       	add	r27, r0
    3eb8:	a1 1d       	adc	r26, r1
    3eba:	62 1f       	adc	r22, r18
    3ebc:	83 9f       	mul	r24, r19
    3ebe:	a0 0d       	add	r26, r0
    3ec0:	61 1d       	adc	r22, r1
    3ec2:	22 1f       	adc	r18, r18
    3ec4:	74 9f       	mul	r23, r20
    3ec6:	33 27       	eor	r19, r19
    3ec8:	a0 0d       	add	r26, r0
    3eca:	61 1d       	adc	r22, r1
    3ecc:	23 1f       	adc	r18, r19
    3ece:	84 9f       	mul	r24, r20
    3ed0:	60 0d       	add	r22, r0
    3ed2:	21 1d       	adc	r18, r1
    3ed4:	82 2f       	mov	r24, r18
    3ed6:	76 2f       	mov	r23, r22
    3ed8:	6a 2f       	mov	r22, r26
    3eda:	11 24       	eor	r1, r1
    3edc:	9f 57       	subi	r25, 0x7F	; 127
    3ede:	50 40       	sbci	r21, 0x00	; 0
    3ee0:	8a f0       	brmi	.+34     	; 0x3f04 <__mulsf3_pse+0x84>
    3ee2:	e1 f0       	breq	.+56     	; 0x3f1c <__mulsf3_pse+0x9c>
    3ee4:	88 23       	and	r24, r24
    3ee6:	4a f0       	brmi	.+18     	; 0x3efa <__mulsf3_pse+0x7a>
    3ee8:	ee 0f       	add	r30, r30
    3eea:	ff 1f       	adc	r31, r31
    3eec:	bb 1f       	adc	r27, r27
    3eee:	66 1f       	adc	r22, r22
    3ef0:	77 1f       	adc	r23, r23
    3ef2:	88 1f       	adc	r24, r24
    3ef4:	91 50       	subi	r25, 0x01	; 1
    3ef6:	50 40       	sbci	r21, 0x00	; 0
    3ef8:	a9 f7       	brne	.-22     	; 0x3ee4 <__mulsf3_pse+0x64>
    3efa:	9e 3f       	cpi	r25, 0xFE	; 254
    3efc:	51 05       	cpc	r21, r1
    3efe:	70 f0       	brcs	.+28     	; 0x3f1c <__mulsf3_pse+0x9c>
    3f00:	60 cf       	rjmp	.-320    	; 0x3dc2 <__fp_inf>
    3f02:	aa cf       	rjmp	.-172    	; 0x3e58 <__fp_szero>
    3f04:	5f 3f       	cpi	r21, 0xFF	; 255
    3f06:	ec f3       	brlt	.-6      	; 0x3f02 <__mulsf3_pse+0x82>
    3f08:	98 3e       	cpi	r25, 0xE8	; 232
    3f0a:	dc f3       	brlt	.-10     	; 0x3f02 <__mulsf3_pse+0x82>
    3f0c:	86 95       	lsr	r24
    3f0e:	77 95       	ror	r23
    3f10:	67 95       	ror	r22
    3f12:	b7 95       	ror	r27
    3f14:	f7 95       	ror	r31
    3f16:	e7 95       	ror	r30
    3f18:	9f 5f       	subi	r25, 0xFF	; 255
    3f1a:	c1 f7       	brne	.-16     	; 0x3f0c <__mulsf3_pse+0x8c>
    3f1c:	fe 2b       	or	r31, r30
    3f1e:	88 0f       	add	r24, r24
    3f20:	91 1d       	adc	r25, r1
    3f22:	96 95       	lsr	r25
    3f24:	87 95       	ror	r24
    3f26:	97 f9       	bld	r25, 7
    3f28:	08 95       	ret

00003f2a <__udivmodsi4>:
    3f2a:	a1 e2       	ldi	r26, 0x21	; 33
    3f2c:	1a 2e       	mov	r1, r26
    3f2e:	aa 1b       	sub	r26, r26
    3f30:	bb 1b       	sub	r27, r27
    3f32:	fd 01       	movw	r30, r26
    3f34:	0d c0       	rjmp	.+26     	; 0x3f50 <__udivmodsi4_ep>

00003f36 <__udivmodsi4_loop>:
    3f36:	aa 1f       	adc	r26, r26
    3f38:	bb 1f       	adc	r27, r27
    3f3a:	ee 1f       	adc	r30, r30
    3f3c:	ff 1f       	adc	r31, r31
    3f3e:	a2 17       	cp	r26, r18
    3f40:	b3 07       	cpc	r27, r19
    3f42:	e4 07       	cpc	r30, r20
    3f44:	f5 07       	cpc	r31, r21
    3f46:	20 f0       	brcs	.+8      	; 0x3f50 <__udivmodsi4_ep>
    3f48:	a2 1b       	sub	r26, r18
    3f4a:	b3 0b       	sbc	r27, r19
    3f4c:	e4 0b       	sbc	r30, r20
    3f4e:	f5 0b       	sbc	r31, r21

00003f50 <__udivmodsi4_ep>:
    3f50:	66 1f       	adc	r22, r22
    3f52:	77 1f       	adc	r23, r23
    3f54:	88 1f       	adc	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	1a 94       	dec	r1
    3f5a:	69 f7       	brne	.-38     	; 0x3f36 <__udivmodsi4_loop>
    3f5c:	60 95       	com	r22
    3f5e:	70 95       	com	r23
    3f60:	80 95       	com	r24
    3f62:	90 95       	com	r25
    3f64:	9b 01       	movw	r18, r22
    3f66:	ac 01       	movw	r20, r24
    3f68:	bd 01       	movw	r22, r26
    3f6a:	cf 01       	movw	r24, r30
    3f6c:	08 95       	ret

00003f6e <__tablejump2__>:
    3f6e:	ee 0f       	add	r30, r30
    3f70:	ff 1f       	adc	r31, r31
    3f72:	88 1f       	adc	r24, r24
    3f74:	8b bf       	out	0x3b, r24	; 59
    3f76:	07 90       	elpm	r0, Z+
    3f78:	f6 91       	elpm	r31, Z
    3f7a:	e0 2d       	mov	r30, r0
    3f7c:	19 94       	eijmp

00003f7e <calloc>:
    3f7e:	0f 93       	push	r16
    3f80:	1f 93       	push	r17
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	86 9f       	mul	r24, r22
    3f88:	80 01       	movw	r16, r0
    3f8a:	87 9f       	mul	r24, r23
    3f8c:	10 0d       	add	r17, r0
    3f8e:	96 9f       	mul	r25, r22
    3f90:	10 0d       	add	r17, r0
    3f92:	11 24       	eor	r1, r1
    3f94:	c8 01       	movw	r24, r16
    3f96:	0d d0       	rcall	.+26     	; 0x3fb2 <malloc>
    3f98:	ec 01       	movw	r28, r24
    3f9a:	00 97       	sbiw	r24, 0x00	; 0
    3f9c:	21 f0       	breq	.+8      	; 0x3fa6 <calloc+0x28>
    3f9e:	a8 01       	movw	r20, r16
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	70 e0       	ldi	r23, 0x00	; 0
    3fa4:	34 d1       	rcall	.+616    	; 0x420e <memset>
    3fa6:	ce 01       	movw	r24, r28
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	1f 91       	pop	r17
    3fae:	0f 91       	pop	r16
    3fb0:	08 95       	ret

00003fb2 <malloc>:
    3fb2:	0f 93       	push	r16
    3fb4:	1f 93       	push	r17
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	82 30       	cpi	r24, 0x02	; 2
    3fbc:	91 05       	cpc	r25, r1
    3fbe:	10 f4       	brcc	.+4      	; 0x3fc4 <malloc+0x12>
    3fc0:	82 e0       	ldi	r24, 0x02	; 2
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	e0 91 87 0e 	lds	r30, 0x0E87	; 0x800e87 <__flp>
    3fc8:	f0 91 88 0e 	lds	r31, 0x0E88	; 0x800e88 <__flp+0x1>
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	a0 e0       	ldi	r26, 0x00	; 0
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	30 97       	sbiw	r30, 0x00	; 0
    3fd6:	19 f1       	breq	.+70     	; 0x401e <malloc+0x6c>
    3fd8:	40 81       	ld	r20, Z
    3fda:	51 81       	ldd	r21, Z+1	; 0x01
    3fdc:	02 81       	ldd	r16, Z+2	; 0x02
    3fde:	13 81       	ldd	r17, Z+3	; 0x03
    3fe0:	48 17       	cp	r20, r24
    3fe2:	59 07       	cpc	r21, r25
    3fe4:	c8 f0       	brcs	.+50     	; 0x4018 <malloc+0x66>
    3fe6:	84 17       	cp	r24, r20
    3fe8:	95 07       	cpc	r25, r21
    3fea:	69 f4       	brne	.+26     	; 0x4006 <malloc+0x54>
    3fec:	10 97       	sbiw	r26, 0x00	; 0
    3fee:	31 f0       	breq	.+12     	; 0x3ffc <malloc+0x4a>
    3ff0:	12 96       	adiw	r26, 0x02	; 2
    3ff2:	0c 93       	st	X, r16
    3ff4:	12 97       	sbiw	r26, 0x02	; 2
    3ff6:	13 96       	adiw	r26, 0x03	; 3
    3ff8:	1c 93       	st	X, r17
    3ffa:	27 c0       	rjmp	.+78     	; 0x404a <malloc+0x98>
    3ffc:	00 93 87 0e 	sts	0x0E87, r16	; 0x800e87 <__flp>
    4000:	10 93 88 0e 	sts	0x0E88, r17	; 0x800e88 <__flp+0x1>
    4004:	22 c0       	rjmp	.+68     	; 0x404a <malloc+0x98>
    4006:	21 15       	cp	r18, r1
    4008:	31 05       	cpc	r19, r1
    400a:	19 f0       	breq	.+6      	; 0x4012 <malloc+0x60>
    400c:	42 17       	cp	r20, r18
    400e:	53 07       	cpc	r21, r19
    4010:	18 f4       	brcc	.+6      	; 0x4018 <malloc+0x66>
    4012:	9a 01       	movw	r18, r20
    4014:	bd 01       	movw	r22, r26
    4016:	ef 01       	movw	r28, r30
    4018:	df 01       	movw	r26, r30
    401a:	f8 01       	movw	r30, r16
    401c:	db cf       	rjmp	.-74     	; 0x3fd4 <malloc+0x22>
    401e:	21 15       	cp	r18, r1
    4020:	31 05       	cpc	r19, r1
    4022:	f9 f0       	breq	.+62     	; 0x4062 <malloc+0xb0>
    4024:	28 1b       	sub	r18, r24
    4026:	39 0b       	sbc	r19, r25
    4028:	24 30       	cpi	r18, 0x04	; 4
    402a:	31 05       	cpc	r19, r1
    402c:	80 f4       	brcc	.+32     	; 0x404e <malloc+0x9c>
    402e:	8a 81       	ldd	r24, Y+2	; 0x02
    4030:	9b 81       	ldd	r25, Y+3	; 0x03
    4032:	61 15       	cp	r22, r1
    4034:	71 05       	cpc	r23, r1
    4036:	21 f0       	breq	.+8      	; 0x4040 <malloc+0x8e>
    4038:	fb 01       	movw	r30, r22
    403a:	93 83       	std	Z+3, r25	; 0x03
    403c:	82 83       	std	Z+2, r24	; 0x02
    403e:	04 c0       	rjmp	.+8      	; 0x4048 <malloc+0x96>
    4040:	90 93 88 0e 	sts	0x0E88, r25	; 0x800e88 <__flp+0x1>
    4044:	80 93 87 0e 	sts	0x0E87, r24	; 0x800e87 <__flp>
    4048:	fe 01       	movw	r30, r28
    404a:	32 96       	adiw	r30, 0x02	; 2
    404c:	44 c0       	rjmp	.+136    	; 0x40d6 <malloc+0x124>
    404e:	fe 01       	movw	r30, r28
    4050:	e2 0f       	add	r30, r18
    4052:	f3 1f       	adc	r31, r19
    4054:	81 93       	st	Z+, r24
    4056:	91 93       	st	Z+, r25
    4058:	22 50       	subi	r18, 0x02	; 2
    405a:	31 09       	sbc	r19, r1
    405c:	39 83       	std	Y+1, r19	; 0x01
    405e:	28 83       	st	Y, r18
    4060:	3a c0       	rjmp	.+116    	; 0x40d6 <malloc+0x124>
    4062:	20 91 85 0e 	lds	r18, 0x0E85	; 0x800e85 <__brkval>
    4066:	30 91 86 0e 	lds	r19, 0x0E86	; 0x800e86 <__brkval+0x1>
    406a:	23 2b       	or	r18, r19
    406c:	41 f4       	brne	.+16     	; 0x407e <malloc+0xcc>
    406e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4072:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4076:	30 93 86 0e 	sts	0x0E86, r19	; 0x800e86 <__brkval+0x1>
    407a:	20 93 85 0e 	sts	0x0E85, r18	; 0x800e85 <__brkval>
    407e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4082:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4086:	21 15       	cp	r18, r1
    4088:	31 05       	cpc	r19, r1
    408a:	41 f4       	brne	.+16     	; 0x409c <malloc+0xea>
    408c:	2d b7       	in	r18, 0x3d	; 61
    408e:	3e b7       	in	r19, 0x3e	; 62
    4090:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4094:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4098:	24 1b       	sub	r18, r20
    409a:	35 0b       	sbc	r19, r21
    409c:	e0 91 85 0e 	lds	r30, 0x0E85	; 0x800e85 <__brkval>
    40a0:	f0 91 86 0e 	lds	r31, 0x0E86	; 0x800e86 <__brkval+0x1>
    40a4:	e2 17       	cp	r30, r18
    40a6:	f3 07       	cpc	r31, r19
    40a8:	a0 f4       	brcc	.+40     	; 0x40d2 <malloc+0x120>
    40aa:	2e 1b       	sub	r18, r30
    40ac:	3f 0b       	sbc	r19, r31
    40ae:	28 17       	cp	r18, r24
    40b0:	39 07       	cpc	r19, r25
    40b2:	78 f0       	brcs	.+30     	; 0x40d2 <malloc+0x120>
    40b4:	ac 01       	movw	r20, r24
    40b6:	4e 5f       	subi	r20, 0xFE	; 254
    40b8:	5f 4f       	sbci	r21, 0xFF	; 255
    40ba:	24 17       	cp	r18, r20
    40bc:	35 07       	cpc	r19, r21
    40be:	48 f0       	brcs	.+18     	; 0x40d2 <malloc+0x120>
    40c0:	4e 0f       	add	r20, r30
    40c2:	5f 1f       	adc	r21, r31
    40c4:	50 93 86 0e 	sts	0x0E86, r21	; 0x800e86 <__brkval+0x1>
    40c8:	40 93 85 0e 	sts	0x0E85, r20	; 0x800e85 <__brkval>
    40cc:	81 93       	st	Z+, r24
    40ce:	91 93       	st	Z+, r25
    40d0:	02 c0       	rjmp	.+4      	; 0x40d6 <malloc+0x124>
    40d2:	e0 e0       	ldi	r30, 0x00	; 0
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	cf 01       	movw	r24, r30
    40d8:	df 91       	pop	r29
    40da:	cf 91       	pop	r28
    40dc:	1f 91       	pop	r17
    40de:	0f 91       	pop	r16
    40e0:	08 95       	ret

000040e2 <free>:
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
    40e6:	00 97       	sbiw	r24, 0x00	; 0
    40e8:	09 f4       	brne	.+2      	; 0x40ec <free+0xa>
    40ea:	81 c0       	rjmp	.+258    	; 0x41ee <free+0x10c>
    40ec:	fc 01       	movw	r30, r24
    40ee:	32 97       	sbiw	r30, 0x02	; 2
    40f0:	13 82       	std	Z+3, r1	; 0x03
    40f2:	12 82       	std	Z+2, r1	; 0x02
    40f4:	a0 91 87 0e 	lds	r26, 0x0E87	; 0x800e87 <__flp>
    40f8:	b0 91 88 0e 	lds	r27, 0x0E88	; 0x800e88 <__flp+0x1>
    40fc:	10 97       	sbiw	r26, 0x00	; 0
    40fe:	81 f4       	brne	.+32     	; 0x4120 <free+0x3e>
    4100:	20 81       	ld	r18, Z
    4102:	31 81       	ldd	r19, Z+1	; 0x01
    4104:	82 0f       	add	r24, r18
    4106:	93 1f       	adc	r25, r19
    4108:	20 91 85 0e 	lds	r18, 0x0E85	; 0x800e85 <__brkval>
    410c:	30 91 86 0e 	lds	r19, 0x0E86	; 0x800e86 <__brkval+0x1>
    4110:	28 17       	cp	r18, r24
    4112:	39 07       	cpc	r19, r25
    4114:	51 f5       	brne	.+84     	; 0x416a <free+0x88>
    4116:	f0 93 86 0e 	sts	0x0E86, r31	; 0x800e86 <__brkval+0x1>
    411a:	e0 93 85 0e 	sts	0x0E85, r30	; 0x800e85 <__brkval>
    411e:	67 c0       	rjmp	.+206    	; 0x41ee <free+0x10c>
    4120:	ed 01       	movw	r28, r26
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	ce 17       	cp	r28, r30
    4128:	df 07       	cpc	r29, r31
    412a:	40 f4       	brcc	.+16     	; 0x413c <free+0x5a>
    412c:	4a 81       	ldd	r20, Y+2	; 0x02
    412e:	5b 81       	ldd	r21, Y+3	; 0x03
    4130:	9e 01       	movw	r18, r28
    4132:	41 15       	cp	r20, r1
    4134:	51 05       	cpc	r21, r1
    4136:	f1 f0       	breq	.+60     	; 0x4174 <free+0x92>
    4138:	ea 01       	movw	r28, r20
    413a:	f5 cf       	rjmp	.-22     	; 0x4126 <free+0x44>
    413c:	d3 83       	std	Z+3, r29	; 0x03
    413e:	c2 83       	std	Z+2, r28	; 0x02
    4140:	40 81       	ld	r20, Z
    4142:	51 81       	ldd	r21, Z+1	; 0x01
    4144:	84 0f       	add	r24, r20
    4146:	95 1f       	adc	r25, r21
    4148:	c8 17       	cp	r28, r24
    414a:	d9 07       	cpc	r29, r25
    414c:	59 f4       	brne	.+22     	; 0x4164 <free+0x82>
    414e:	88 81       	ld	r24, Y
    4150:	99 81       	ldd	r25, Y+1	; 0x01
    4152:	84 0f       	add	r24, r20
    4154:	95 1f       	adc	r25, r21
    4156:	02 96       	adiw	r24, 0x02	; 2
    4158:	91 83       	std	Z+1, r25	; 0x01
    415a:	80 83       	st	Z, r24
    415c:	8a 81       	ldd	r24, Y+2	; 0x02
    415e:	9b 81       	ldd	r25, Y+3	; 0x03
    4160:	93 83       	std	Z+3, r25	; 0x03
    4162:	82 83       	std	Z+2, r24	; 0x02
    4164:	21 15       	cp	r18, r1
    4166:	31 05       	cpc	r19, r1
    4168:	29 f4       	brne	.+10     	; 0x4174 <free+0x92>
    416a:	f0 93 88 0e 	sts	0x0E88, r31	; 0x800e88 <__flp+0x1>
    416e:	e0 93 87 0e 	sts	0x0E87, r30	; 0x800e87 <__flp>
    4172:	3d c0       	rjmp	.+122    	; 0x41ee <free+0x10c>
    4174:	e9 01       	movw	r28, r18
    4176:	fb 83       	std	Y+3, r31	; 0x03
    4178:	ea 83       	std	Y+2, r30	; 0x02
    417a:	49 91       	ld	r20, Y+
    417c:	59 91       	ld	r21, Y+
    417e:	c4 0f       	add	r28, r20
    4180:	d5 1f       	adc	r29, r21
    4182:	ec 17       	cp	r30, r28
    4184:	fd 07       	cpc	r31, r29
    4186:	61 f4       	brne	.+24     	; 0x41a0 <free+0xbe>
    4188:	80 81       	ld	r24, Z
    418a:	91 81       	ldd	r25, Z+1	; 0x01
    418c:	84 0f       	add	r24, r20
    418e:	95 1f       	adc	r25, r21
    4190:	02 96       	adiw	r24, 0x02	; 2
    4192:	e9 01       	movw	r28, r18
    4194:	99 83       	std	Y+1, r25	; 0x01
    4196:	88 83       	st	Y, r24
    4198:	82 81       	ldd	r24, Z+2	; 0x02
    419a:	93 81       	ldd	r25, Z+3	; 0x03
    419c:	9b 83       	std	Y+3, r25	; 0x03
    419e:	8a 83       	std	Y+2, r24	; 0x02
    41a0:	e0 e0       	ldi	r30, 0x00	; 0
    41a2:	f0 e0       	ldi	r31, 0x00	; 0
    41a4:	12 96       	adiw	r26, 0x02	; 2
    41a6:	8d 91       	ld	r24, X+
    41a8:	9c 91       	ld	r25, X
    41aa:	13 97       	sbiw	r26, 0x03	; 3
    41ac:	00 97       	sbiw	r24, 0x00	; 0
    41ae:	19 f0       	breq	.+6      	; 0x41b6 <free+0xd4>
    41b0:	fd 01       	movw	r30, r26
    41b2:	dc 01       	movw	r26, r24
    41b4:	f7 cf       	rjmp	.-18     	; 0x41a4 <free+0xc2>
    41b6:	8d 91       	ld	r24, X+
    41b8:	9c 91       	ld	r25, X
    41ba:	11 97       	sbiw	r26, 0x01	; 1
    41bc:	9d 01       	movw	r18, r26
    41be:	2e 5f       	subi	r18, 0xFE	; 254
    41c0:	3f 4f       	sbci	r19, 0xFF	; 255
    41c2:	82 0f       	add	r24, r18
    41c4:	93 1f       	adc	r25, r19
    41c6:	20 91 85 0e 	lds	r18, 0x0E85	; 0x800e85 <__brkval>
    41ca:	30 91 86 0e 	lds	r19, 0x0E86	; 0x800e86 <__brkval+0x1>
    41ce:	28 17       	cp	r18, r24
    41d0:	39 07       	cpc	r19, r25
    41d2:	69 f4       	brne	.+26     	; 0x41ee <free+0x10c>
    41d4:	30 97       	sbiw	r30, 0x00	; 0
    41d6:	29 f4       	brne	.+10     	; 0x41e2 <free+0x100>
    41d8:	10 92 88 0e 	sts	0x0E88, r1	; 0x800e88 <__flp+0x1>
    41dc:	10 92 87 0e 	sts	0x0E87, r1	; 0x800e87 <__flp>
    41e0:	02 c0       	rjmp	.+4      	; 0x41e6 <free+0x104>
    41e2:	13 82       	std	Z+3, r1	; 0x03
    41e4:	12 82       	std	Z+2, r1	; 0x02
    41e6:	b0 93 86 0e 	sts	0x0E86, r27	; 0x800e86 <__brkval+0x1>
    41ea:	a0 93 85 0e 	sts	0x0E85, r26	; 0x800e85 <__brkval>
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	08 95       	ret

000041f4 <abort>:
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	f8 94       	cli
    41fa:	00 c3       	rjmp	.+1536   	; 0x47fc <_exit>

000041fc <memcpy>:
    41fc:	fb 01       	movw	r30, r22
    41fe:	dc 01       	movw	r26, r24
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <memcpy+0xa>
    4202:	01 90       	ld	r0, Z+
    4204:	0d 92       	st	X+, r0
    4206:	41 50       	subi	r20, 0x01	; 1
    4208:	50 40       	sbci	r21, 0x00	; 0
    420a:	d8 f7       	brcc	.-10     	; 0x4202 <memcpy+0x6>
    420c:	08 95       	ret

0000420e <memset>:
    420e:	dc 01       	movw	r26, r24
    4210:	01 c0       	rjmp	.+2      	; 0x4214 <memset+0x6>
    4212:	6d 93       	st	X+, r22
    4214:	41 50       	subi	r20, 0x01	; 1
    4216:	50 40       	sbci	r21, 0x00	; 0
    4218:	e0 f7       	brcc	.-8      	; 0x4212 <memset+0x4>
    421a:	08 95       	ret

0000421c <printf>:
    421c:	cf 93       	push	r28
    421e:	df 93       	push	r29
    4220:	cd b7       	in	r28, 0x3d	; 61
    4222:	de b7       	in	r29, 0x3e	; 62
    4224:	ae 01       	movw	r20, r28
    4226:	4a 5f       	subi	r20, 0xFA	; 250
    4228:	5f 4f       	sbci	r21, 0xFF	; 255
    422a:	fa 01       	movw	r30, r20
    422c:	61 91       	ld	r22, Z+
    422e:	71 91       	ld	r23, Z+
    4230:	af 01       	movw	r20, r30
    4232:	80 91 8b 0e 	lds	r24, 0x0E8B	; 0x800e8b <__iob+0x2>
    4236:	90 91 8c 0e 	lds	r25, 0x0E8C	; 0x800e8c <__iob+0x3>
    423a:	33 d0       	rcall	.+102    	; 0x42a2 <vfprintf>
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	08 95       	ret

00004242 <puts>:
    4242:	0f 93       	push	r16
    4244:	1f 93       	push	r17
    4246:	cf 93       	push	r28
    4248:	df 93       	push	r29
    424a:	e0 91 8b 0e 	lds	r30, 0x0E8B	; 0x800e8b <__iob+0x2>
    424e:	f0 91 8c 0e 	lds	r31, 0x0E8C	; 0x800e8c <__iob+0x3>
    4252:	23 81       	ldd	r18, Z+3	; 0x03
    4254:	21 ff       	sbrs	r18, 1
    4256:	1b c0       	rjmp	.+54     	; 0x428e <puts+0x4c>
    4258:	8c 01       	movw	r16, r24
    425a:	d0 e0       	ldi	r29, 0x00	; 0
    425c:	c0 e0       	ldi	r28, 0x00	; 0
    425e:	f8 01       	movw	r30, r16
    4260:	81 91       	ld	r24, Z+
    4262:	8f 01       	movw	r16, r30
    4264:	60 91 8b 0e 	lds	r22, 0x0E8B	; 0x800e8b <__iob+0x2>
    4268:	70 91 8c 0e 	lds	r23, 0x0E8C	; 0x800e8c <__iob+0x3>
    426c:	db 01       	movw	r26, r22
    426e:	18 96       	adiw	r26, 0x08	; 8
    4270:	ed 91       	ld	r30, X+
    4272:	fc 91       	ld	r31, X
    4274:	19 97       	sbiw	r26, 0x09	; 9
    4276:	88 23       	and	r24, r24
    4278:	31 f0       	breq	.+12     	; 0x4286 <puts+0x44>
    427a:	19 95       	eicall
    427c:	89 2b       	or	r24, r25
    427e:	79 f3       	breq	.-34     	; 0x425e <puts+0x1c>
    4280:	df ef       	ldi	r29, 0xFF	; 255
    4282:	cf ef       	ldi	r28, 0xFF	; 255
    4284:	ec cf       	rjmp	.-40     	; 0x425e <puts+0x1c>
    4286:	8a e0       	ldi	r24, 0x0A	; 10
    4288:	19 95       	eicall
    428a:	89 2b       	or	r24, r25
    428c:	19 f0       	breq	.+6      	; 0x4294 <puts+0x52>
    428e:	8f ef       	ldi	r24, 0xFF	; 255
    4290:	9f ef       	ldi	r25, 0xFF	; 255
    4292:	02 c0       	rjmp	.+4      	; 0x4298 <puts+0x56>
    4294:	8d 2f       	mov	r24, r29
    4296:	9c 2f       	mov	r25, r28
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	08 95       	ret

000042a2 <vfprintf>:
    42a2:	2f 92       	push	r2
    42a4:	3f 92       	push	r3
    42a6:	4f 92       	push	r4
    42a8:	5f 92       	push	r5
    42aa:	6f 92       	push	r6
    42ac:	7f 92       	push	r7
    42ae:	8f 92       	push	r8
    42b0:	9f 92       	push	r9
    42b2:	af 92       	push	r10
    42b4:	bf 92       	push	r11
    42b6:	cf 92       	push	r12
    42b8:	df 92       	push	r13
    42ba:	ef 92       	push	r14
    42bc:	ff 92       	push	r15
    42be:	0f 93       	push	r16
    42c0:	1f 93       	push	r17
    42c2:	cf 93       	push	r28
    42c4:	df 93       	push	r29
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	2b 97       	sbiw	r28, 0x0b	; 11
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	6c 01       	movw	r12, r24
    42d8:	7b 01       	movw	r14, r22
    42da:	8a 01       	movw	r16, r20
    42dc:	fc 01       	movw	r30, r24
    42de:	17 82       	std	Z+7, r1	; 0x07
    42e0:	16 82       	std	Z+6, r1	; 0x06
    42e2:	83 81       	ldd	r24, Z+3	; 0x03
    42e4:	81 ff       	sbrs	r24, 1
    42e6:	bf c1       	rjmp	.+894    	; 0x4666 <vfprintf+0x3c4>
    42e8:	ce 01       	movw	r24, r28
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	3c 01       	movw	r6, r24
    42ee:	f6 01       	movw	r30, r12
    42f0:	93 81       	ldd	r25, Z+3	; 0x03
    42f2:	f7 01       	movw	r30, r14
    42f4:	93 fd       	sbrc	r25, 3
    42f6:	85 91       	lpm	r24, Z+
    42f8:	93 ff       	sbrs	r25, 3
    42fa:	81 91       	ld	r24, Z+
    42fc:	7f 01       	movw	r14, r30
    42fe:	88 23       	and	r24, r24
    4300:	09 f4       	brne	.+2      	; 0x4304 <vfprintf+0x62>
    4302:	ad c1       	rjmp	.+858    	; 0x465e <vfprintf+0x3bc>
    4304:	85 32       	cpi	r24, 0x25	; 37
    4306:	39 f4       	brne	.+14     	; 0x4316 <vfprintf+0x74>
    4308:	93 fd       	sbrc	r25, 3
    430a:	85 91       	lpm	r24, Z+
    430c:	93 ff       	sbrs	r25, 3
    430e:	81 91       	ld	r24, Z+
    4310:	7f 01       	movw	r14, r30
    4312:	85 32       	cpi	r24, 0x25	; 37
    4314:	21 f4       	brne	.+8      	; 0x431e <vfprintf+0x7c>
    4316:	b6 01       	movw	r22, r12
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	d6 d1       	rcall	.+940    	; 0x46c8 <fputc>
    431c:	e8 cf       	rjmp	.-48     	; 0x42ee <vfprintf+0x4c>
    431e:	91 2c       	mov	r9, r1
    4320:	21 2c       	mov	r2, r1
    4322:	31 2c       	mov	r3, r1
    4324:	ff e1       	ldi	r31, 0x1F	; 31
    4326:	f3 15       	cp	r31, r3
    4328:	d8 f0       	brcs	.+54     	; 0x4360 <vfprintf+0xbe>
    432a:	8b 32       	cpi	r24, 0x2B	; 43
    432c:	79 f0       	breq	.+30     	; 0x434c <vfprintf+0xaa>
    432e:	38 f4       	brcc	.+14     	; 0x433e <vfprintf+0x9c>
    4330:	80 32       	cpi	r24, 0x20	; 32
    4332:	79 f0       	breq	.+30     	; 0x4352 <vfprintf+0xb0>
    4334:	83 32       	cpi	r24, 0x23	; 35
    4336:	a1 f4       	brne	.+40     	; 0x4360 <vfprintf+0xbe>
    4338:	23 2d       	mov	r18, r3
    433a:	20 61       	ori	r18, 0x10	; 16
    433c:	1d c0       	rjmp	.+58     	; 0x4378 <vfprintf+0xd6>
    433e:	8d 32       	cpi	r24, 0x2D	; 45
    4340:	61 f0       	breq	.+24     	; 0x435a <vfprintf+0xb8>
    4342:	80 33       	cpi	r24, 0x30	; 48
    4344:	69 f4       	brne	.+26     	; 0x4360 <vfprintf+0xbe>
    4346:	23 2d       	mov	r18, r3
    4348:	21 60       	ori	r18, 0x01	; 1
    434a:	16 c0       	rjmp	.+44     	; 0x4378 <vfprintf+0xd6>
    434c:	83 2d       	mov	r24, r3
    434e:	82 60       	ori	r24, 0x02	; 2
    4350:	38 2e       	mov	r3, r24
    4352:	e3 2d       	mov	r30, r3
    4354:	e4 60       	ori	r30, 0x04	; 4
    4356:	3e 2e       	mov	r3, r30
    4358:	2a c0       	rjmp	.+84     	; 0x43ae <vfprintf+0x10c>
    435a:	f3 2d       	mov	r31, r3
    435c:	f8 60       	ori	r31, 0x08	; 8
    435e:	1d c0       	rjmp	.+58     	; 0x439a <vfprintf+0xf8>
    4360:	37 fc       	sbrc	r3, 7
    4362:	2d c0       	rjmp	.+90     	; 0x43be <vfprintf+0x11c>
    4364:	20 ed       	ldi	r18, 0xD0	; 208
    4366:	28 0f       	add	r18, r24
    4368:	2a 30       	cpi	r18, 0x0A	; 10
    436a:	40 f0       	brcs	.+16     	; 0x437c <vfprintf+0xda>
    436c:	8e 32       	cpi	r24, 0x2E	; 46
    436e:	b9 f4       	brne	.+46     	; 0x439e <vfprintf+0xfc>
    4370:	36 fc       	sbrc	r3, 6
    4372:	75 c1       	rjmp	.+746    	; 0x465e <vfprintf+0x3bc>
    4374:	23 2d       	mov	r18, r3
    4376:	20 64       	ori	r18, 0x40	; 64
    4378:	32 2e       	mov	r3, r18
    437a:	19 c0       	rjmp	.+50     	; 0x43ae <vfprintf+0x10c>
    437c:	36 fe       	sbrs	r3, 6
    437e:	06 c0       	rjmp	.+12     	; 0x438c <vfprintf+0xea>
    4380:	8a e0       	ldi	r24, 0x0A	; 10
    4382:	98 9e       	mul	r9, r24
    4384:	20 0d       	add	r18, r0
    4386:	11 24       	eor	r1, r1
    4388:	92 2e       	mov	r9, r18
    438a:	11 c0       	rjmp	.+34     	; 0x43ae <vfprintf+0x10c>
    438c:	ea e0       	ldi	r30, 0x0A	; 10
    438e:	2e 9e       	mul	r2, r30
    4390:	20 0d       	add	r18, r0
    4392:	11 24       	eor	r1, r1
    4394:	22 2e       	mov	r2, r18
    4396:	f3 2d       	mov	r31, r3
    4398:	f0 62       	ori	r31, 0x20	; 32
    439a:	3f 2e       	mov	r3, r31
    439c:	08 c0       	rjmp	.+16     	; 0x43ae <vfprintf+0x10c>
    439e:	8c 36       	cpi	r24, 0x6C	; 108
    43a0:	21 f4       	brne	.+8      	; 0x43aa <vfprintf+0x108>
    43a2:	83 2d       	mov	r24, r3
    43a4:	80 68       	ori	r24, 0x80	; 128
    43a6:	38 2e       	mov	r3, r24
    43a8:	02 c0       	rjmp	.+4      	; 0x43ae <vfprintf+0x10c>
    43aa:	88 36       	cpi	r24, 0x68	; 104
    43ac:	41 f4       	brne	.+16     	; 0x43be <vfprintf+0x11c>
    43ae:	f7 01       	movw	r30, r14
    43b0:	93 fd       	sbrc	r25, 3
    43b2:	85 91       	lpm	r24, Z+
    43b4:	93 ff       	sbrs	r25, 3
    43b6:	81 91       	ld	r24, Z+
    43b8:	7f 01       	movw	r14, r30
    43ba:	81 11       	cpse	r24, r1
    43bc:	b3 cf       	rjmp	.-154    	; 0x4324 <vfprintf+0x82>
    43be:	98 2f       	mov	r25, r24
    43c0:	9f 7d       	andi	r25, 0xDF	; 223
    43c2:	95 54       	subi	r25, 0x45	; 69
    43c4:	93 30       	cpi	r25, 0x03	; 3
    43c6:	28 f4       	brcc	.+10     	; 0x43d2 <vfprintf+0x130>
    43c8:	0c 5f       	subi	r16, 0xFC	; 252
    43ca:	1f 4f       	sbci	r17, 0xFF	; 255
    43cc:	9f e3       	ldi	r25, 0x3F	; 63
    43ce:	99 83       	std	Y+1, r25	; 0x01
    43d0:	0d c0       	rjmp	.+26     	; 0x43ec <vfprintf+0x14a>
    43d2:	83 36       	cpi	r24, 0x63	; 99
    43d4:	31 f0       	breq	.+12     	; 0x43e2 <vfprintf+0x140>
    43d6:	83 37       	cpi	r24, 0x73	; 115
    43d8:	71 f0       	breq	.+28     	; 0x43f6 <vfprintf+0x154>
    43da:	83 35       	cpi	r24, 0x53	; 83
    43dc:	09 f0       	breq	.+2      	; 0x43e0 <vfprintf+0x13e>
    43de:	55 c0       	rjmp	.+170    	; 0x448a <vfprintf+0x1e8>
    43e0:	20 c0       	rjmp	.+64     	; 0x4422 <vfprintf+0x180>
    43e2:	f8 01       	movw	r30, r16
    43e4:	80 81       	ld	r24, Z
    43e6:	89 83       	std	Y+1, r24	; 0x01
    43e8:	0e 5f       	subi	r16, 0xFE	; 254
    43ea:	1f 4f       	sbci	r17, 0xFF	; 255
    43ec:	88 24       	eor	r8, r8
    43ee:	83 94       	inc	r8
    43f0:	91 2c       	mov	r9, r1
    43f2:	53 01       	movw	r10, r6
    43f4:	12 c0       	rjmp	.+36     	; 0x441a <vfprintf+0x178>
    43f6:	28 01       	movw	r4, r16
    43f8:	f2 e0       	ldi	r31, 0x02	; 2
    43fa:	4f 0e       	add	r4, r31
    43fc:	51 1c       	adc	r5, r1
    43fe:	f8 01       	movw	r30, r16
    4400:	a0 80       	ld	r10, Z
    4402:	b1 80       	ldd	r11, Z+1	; 0x01
    4404:	36 fe       	sbrs	r3, 6
    4406:	03 c0       	rjmp	.+6      	; 0x440e <vfprintf+0x16c>
    4408:	69 2d       	mov	r22, r9
    440a:	70 e0       	ldi	r23, 0x00	; 0
    440c:	02 c0       	rjmp	.+4      	; 0x4412 <vfprintf+0x170>
    440e:	6f ef       	ldi	r22, 0xFF	; 255
    4410:	7f ef       	ldi	r23, 0xFF	; 255
    4412:	c5 01       	movw	r24, r10
    4414:	4e d1       	rcall	.+668    	; 0x46b2 <strnlen>
    4416:	4c 01       	movw	r8, r24
    4418:	82 01       	movw	r16, r4
    441a:	f3 2d       	mov	r31, r3
    441c:	ff 77       	andi	r31, 0x7F	; 127
    441e:	3f 2e       	mov	r3, r31
    4420:	15 c0       	rjmp	.+42     	; 0x444c <vfprintf+0x1aa>
    4422:	28 01       	movw	r4, r16
    4424:	22 e0       	ldi	r18, 0x02	; 2
    4426:	42 0e       	add	r4, r18
    4428:	51 1c       	adc	r5, r1
    442a:	f8 01       	movw	r30, r16
    442c:	a0 80       	ld	r10, Z
    442e:	b1 80       	ldd	r11, Z+1	; 0x01
    4430:	36 fe       	sbrs	r3, 6
    4432:	03 c0       	rjmp	.+6      	; 0x443a <vfprintf+0x198>
    4434:	69 2d       	mov	r22, r9
    4436:	70 e0       	ldi	r23, 0x00	; 0
    4438:	02 c0       	rjmp	.+4      	; 0x443e <vfprintf+0x19c>
    443a:	6f ef       	ldi	r22, 0xFF	; 255
    443c:	7f ef       	ldi	r23, 0xFF	; 255
    443e:	c5 01       	movw	r24, r10
    4440:	2d d1       	rcall	.+602    	; 0x469c <strnlen_P>
    4442:	4c 01       	movw	r8, r24
    4444:	f3 2d       	mov	r31, r3
    4446:	f0 68       	ori	r31, 0x80	; 128
    4448:	3f 2e       	mov	r3, r31
    444a:	82 01       	movw	r16, r4
    444c:	33 fc       	sbrc	r3, 3
    444e:	19 c0       	rjmp	.+50     	; 0x4482 <vfprintf+0x1e0>
    4450:	82 2d       	mov	r24, r2
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	88 16       	cp	r8, r24
    4456:	99 06       	cpc	r9, r25
    4458:	a0 f4       	brcc	.+40     	; 0x4482 <vfprintf+0x1e0>
    445a:	b6 01       	movw	r22, r12
    445c:	80 e2       	ldi	r24, 0x20	; 32
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	33 d1       	rcall	.+614    	; 0x46c8 <fputc>
    4462:	2a 94       	dec	r2
    4464:	f5 cf       	rjmp	.-22     	; 0x4450 <vfprintf+0x1ae>
    4466:	f5 01       	movw	r30, r10
    4468:	37 fc       	sbrc	r3, 7
    446a:	85 91       	lpm	r24, Z+
    446c:	37 fe       	sbrs	r3, 7
    446e:	81 91       	ld	r24, Z+
    4470:	5f 01       	movw	r10, r30
    4472:	b6 01       	movw	r22, r12
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	28 d1       	rcall	.+592    	; 0x46c8 <fputc>
    4478:	21 10       	cpse	r2, r1
    447a:	2a 94       	dec	r2
    447c:	21 e0       	ldi	r18, 0x01	; 1
    447e:	82 1a       	sub	r8, r18
    4480:	91 08       	sbc	r9, r1
    4482:	81 14       	cp	r8, r1
    4484:	91 04       	cpc	r9, r1
    4486:	79 f7       	brne	.-34     	; 0x4466 <vfprintf+0x1c4>
    4488:	e1 c0       	rjmp	.+450    	; 0x464c <vfprintf+0x3aa>
    448a:	84 36       	cpi	r24, 0x64	; 100
    448c:	11 f0       	breq	.+4      	; 0x4492 <vfprintf+0x1f0>
    448e:	89 36       	cpi	r24, 0x69	; 105
    4490:	39 f5       	brne	.+78     	; 0x44e0 <vfprintf+0x23e>
    4492:	f8 01       	movw	r30, r16
    4494:	37 fe       	sbrs	r3, 7
    4496:	07 c0       	rjmp	.+14     	; 0x44a6 <vfprintf+0x204>
    4498:	60 81       	ld	r22, Z
    449a:	71 81       	ldd	r23, Z+1	; 0x01
    449c:	82 81       	ldd	r24, Z+2	; 0x02
    449e:	93 81       	ldd	r25, Z+3	; 0x03
    44a0:	0c 5f       	subi	r16, 0xFC	; 252
    44a2:	1f 4f       	sbci	r17, 0xFF	; 255
    44a4:	08 c0       	rjmp	.+16     	; 0x44b6 <vfprintf+0x214>
    44a6:	60 81       	ld	r22, Z
    44a8:	71 81       	ldd	r23, Z+1	; 0x01
    44aa:	07 2e       	mov	r0, r23
    44ac:	00 0c       	add	r0, r0
    44ae:	88 0b       	sbc	r24, r24
    44b0:	99 0b       	sbc	r25, r25
    44b2:	0e 5f       	subi	r16, 0xFE	; 254
    44b4:	1f 4f       	sbci	r17, 0xFF	; 255
    44b6:	f3 2d       	mov	r31, r3
    44b8:	ff 76       	andi	r31, 0x6F	; 111
    44ba:	3f 2e       	mov	r3, r31
    44bc:	97 ff       	sbrs	r25, 7
    44be:	09 c0       	rjmp	.+18     	; 0x44d2 <vfprintf+0x230>
    44c0:	90 95       	com	r25
    44c2:	80 95       	com	r24
    44c4:	70 95       	com	r23
    44c6:	61 95       	neg	r22
    44c8:	7f 4f       	sbci	r23, 0xFF	; 255
    44ca:	8f 4f       	sbci	r24, 0xFF	; 255
    44cc:	9f 4f       	sbci	r25, 0xFF	; 255
    44ce:	f0 68       	ori	r31, 0x80	; 128
    44d0:	3f 2e       	mov	r3, r31
    44d2:	2a e0       	ldi	r18, 0x0A	; 10
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	a3 01       	movw	r20, r6
    44d8:	33 d1       	rcall	.+614    	; 0x4740 <__ultoa_invert>
    44da:	88 2e       	mov	r8, r24
    44dc:	86 18       	sub	r8, r6
    44de:	44 c0       	rjmp	.+136    	; 0x4568 <vfprintf+0x2c6>
    44e0:	85 37       	cpi	r24, 0x75	; 117
    44e2:	31 f4       	brne	.+12     	; 0x44f0 <vfprintf+0x24e>
    44e4:	23 2d       	mov	r18, r3
    44e6:	2f 7e       	andi	r18, 0xEF	; 239
    44e8:	b2 2e       	mov	r11, r18
    44ea:	2a e0       	ldi	r18, 0x0A	; 10
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	25 c0       	rjmp	.+74     	; 0x453a <vfprintf+0x298>
    44f0:	93 2d       	mov	r25, r3
    44f2:	99 7f       	andi	r25, 0xF9	; 249
    44f4:	b9 2e       	mov	r11, r25
    44f6:	8f 36       	cpi	r24, 0x6F	; 111
    44f8:	c1 f0       	breq	.+48     	; 0x452a <vfprintf+0x288>
    44fa:	18 f4       	brcc	.+6      	; 0x4502 <vfprintf+0x260>
    44fc:	88 35       	cpi	r24, 0x58	; 88
    44fe:	79 f0       	breq	.+30     	; 0x451e <vfprintf+0x27c>
    4500:	ae c0       	rjmp	.+348    	; 0x465e <vfprintf+0x3bc>
    4502:	80 37       	cpi	r24, 0x70	; 112
    4504:	19 f0       	breq	.+6      	; 0x450c <vfprintf+0x26a>
    4506:	88 37       	cpi	r24, 0x78	; 120
    4508:	21 f0       	breq	.+8      	; 0x4512 <vfprintf+0x270>
    450a:	a9 c0       	rjmp	.+338    	; 0x465e <vfprintf+0x3bc>
    450c:	e9 2f       	mov	r30, r25
    450e:	e0 61       	ori	r30, 0x10	; 16
    4510:	be 2e       	mov	r11, r30
    4512:	b4 fe       	sbrs	r11, 4
    4514:	0d c0       	rjmp	.+26     	; 0x4530 <vfprintf+0x28e>
    4516:	fb 2d       	mov	r31, r11
    4518:	f4 60       	ori	r31, 0x04	; 4
    451a:	bf 2e       	mov	r11, r31
    451c:	09 c0       	rjmp	.+18     	; 0x4530 <vfprintf+0x28e>
    451e:	34 fe       	sbrs	r3, 4
    4520:	0a c0       	rjmp	.+20     	; 0x4536 <vfprintf+0x294>
    4522:	29 2f       	mov	r18, r25
    4524:	26 60       	ori	r18, 0x06	; 6
    4526:	b2 2e       	mov	r11, r18
    4528:	06 c0       	rjmp	.+12     	; 0x4536 <vfprintf+0x294>
    452a:	28 e0       	ldi	r18, 0x08	; 8
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	05 c0       	rjmp	.+10     	; 0x453a <vfprintf+0x298>
    4530:	20 e1       	ldi	r18, 0x10	; 16
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	02 c0       	rjmp	.+4      	; 0x453a <vfprintf+0x298>
    4536:	20 e1       	ldi	r18, 0x10	; 16
    4538:	32 e0       	ldi	r19, 0x02	; 2
    453a:	f8 01       	movw	r30, r16
    453c:	b7 fe       	sbrs	r11, 7
    453e:	07 c0       	rjmp	.+14     	; 0x454e <vfprintf+0x2ac>
    4540:	60 81       	ld	r22, Z
    4542:	71 81       	ldd	r23, Z+1	; 0x01
    4544:	82 81       	ldd	r24, Z+2	; 0x02
    4546:	93 81       	ldd	r25, Z+3	; 0x03
    4548:	0c 5f       	subi	r16, 0xFC	; 252
    454a:	1f 4f       	sbci	r17, 0xFF	; 255
    454c:	06 c0       	rjmp	.+12     	; 0x455a <vfprintf+0x2b8>
    454e:	60 81       	ld	r22, Z
    4550:	71 81       	ldd	r23, Z+1	; 0x01
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	0e 5f       	subi	r16, 0xFE	; 254
    4558:	1f 4f       	sbci	r17, 0xFF	; 255
    455a:	a3 01       	movw	r20, r6
    455c:	f1 d0       	rcall	.+482    	; 0x4740 <__ultoa_invert>
    455e:	88 2e       	mov	r8, r24
    4560:	86 18       	sub	r8, r6
    4562:	fb 2d       	mov	r31, r11
    4564:	ff 77       	andi	r31, 0x7F	; 127
    4566:	3f 2e       	mov	r3, r31
    4568:	36 fe       	sbrs	r3, 6
    456a:	0d c0       	rjmp	.+26     	; 0x4586 <vfprintf+0x2e4>
    456c:	23 2d       	mov	r18, r3
    456e:	2e 7f       	andi	r18, 0xFE	; 254
    4570:	a2 2e       	mov	r10, r18
    4572:	89 14       	cp	r8, r9
    4574:	58 f4       	brcc	.+22     	; 0x458c <vfprintf+0x2ea>
    4576:	34 fe       	sbrs	r3, 4
    4578:	0b c0       	rjmp	.+22     	; 0x4590 <vfprintf+0x2ee>
    457a:	32 fc       	sbrc	r3, 2
    457c:	09 c0       	rjmp	.+18     	; 0x4590 <vfprintf+0x2ee>
    457e:	83 2d       	mov	r24, r3
    4580:	8e 7e       	andi	r24, 0xEE	; 238
    4582:	a8 2e       	mov	r10, r24
    4584:	05 c0       	rjmp	.+10     	; 0x4590 <vfprintf+0x2ee>
    4586:	b8 2c       	mov	r11, r8
    4588:	a3 2c       	mov	r10, r3
    458a:	03 c0       	rjmp	.+6      	; 0x4592 <vfprintf+0x2f0>
    458c:	b8 2c       	mov	r11, r8
    458e:	01 c0       	rjmp	.+2      	; 0x4592 <vfprintf+0x2f0>
    4590:	b9 2c       	mov	r11, r9
    4592:	a4 fe       	sbrs	r10, 4
    4594:	0f c0       	rjmp	.+30     	; 0x45b4 <vfprintf+0x312>
    4596:	fe 01       	movw	r30, r28
    4598:	e8 0d       	add	r30, r8
    459a:	f1 1d       	adc	r31, r1
    459c:	80 81       	ld	r24, Z
    459e:	80 33       	cpi	r24, 0x30	; 48
    45a0:	21 f4       	brne	.+8      	; 0x45aa <vfprintf+0x308>
    45a2:	9a 2d       	mov	r25, r10
    45a4:	99 7e       	andi	r25, 0xE9	; 233
    45a6:	a9 2e       	mov	r10, r25
    45a8:	09 c0       	rjmp	.+18     	; 0x45bc <vfprintf+0x31a>
    45aa:	a2 fe       	sbrs	r10, 2
    45ac:	06 c0       	rjmp	.+12     	; 0x45ba <vfprintf+0x318>
    45ae:	b3 94       	inc	r11
    45b0:	b3 94       	inc	r11
    45b2:	04 c0       	rjmp	.+8      	; 0x45bc <vfprintf+0x31a>
    45b4:	8a 2d       	mov	r24, r10
    45b6:	86 78       	andi	r24, 0x86	; 134
    45b8:	09 f0       	breq	.+2      	; 0x45bc <vfprintf+0x31a>
    45ba:	b3 94       	inc	r11
    45bc:	a3 fc       	sbrc	r10, 3
    45be:	10 c0       	rjmp	.+32     	; 0x45e0 <vfprintf+0x33e>
    45c0:	a0 fe       	sbrs	r10, 0
    45c2:	06 c0       	rjmp	.+12     	; 0x45d0 <vfprintf+0x32e>
    45c4:	b2 14       	cp	r11, r2
    45c6:	80 f4       	brcc	.+32     	; 0x45e8 <vfprintf+0x346>
    45c8:	28 0c       	add	r2, r8
    45ca:	92 2c       	mov	r9, r2
    45cc:	9b 18       	sub	r9, r11
    45ce:	0d c0       	rjmp	.+26     	; 0x45ea <vfprintf+0x348>
    45d0:	b2 14       	cp	r11, r2
    45d2:	58 f4       	brcc	.+22     	; 0x45ea <vfprintf+0x348>
    45d4:	b6 01       	movw	r22, r12
    45d6:	80 e2       	ldi	r24, 0x20	; 32
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	76 d0       	rcall	.+236    	; 0x46c8 <fputc>
    45dc:	b3 94       	inc	r11
    45de:	f8 cf       	rjmp	.-16     	; 0x45d0 <vfprintf+0x32e>
    45e0:	b2 14       	cp	r11, r2
    45e2:	18 f4       	brcc	.+6      	; 0x45ea <vfprintf+0x348>
    45e4:	2b 18       	sub	r2, r11
    45e6:	02 c0       	rjmp	.+4      	; 0x45ec <vfprintf+0x34a>
    45e8:	98 2c       	mov	r9, r8
    45ea:	21 2c       	mov	r2, r1
    45ec:	a4 fe       	sbrs	r10, 4
    45ee:	0f c0       	rjmp	.+30     	; 0x460e <vfprintf+0x36c>
    45f0:	b6 01       	movw	r22, r12
    45f2:	80 e3       	ldi	r24, 0x30	; 48
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	68 d0       	rcall	.+208    	; 0x46c8 <fputc>
    45f8:	a2 fe       	sbrs	r10, 2
    45fa:	16 c0       	rjmp	.+44     	; 0x4628 <vfprintf+0x386>
    45fc:	a1 fc       	sbrc	r10, 1
    45fe:	03 c0       	rjmp	.+6      	; 0x4606 <vfprintf+0x364>
    4600:	88 e7       	ldi	r24, 0x78	; 120
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	02 c0       	rjmp	.+4      	; 0x460a <vfprintf+0x368>
    4606:	88 e5       	ldi	r24, 0x58	; 88
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	b6 01       	movw	r22, r12
    460c:	0c c0       	rjmp	.+24     	; 0x4626 <vfprintf+0x384>
    460e:	8a 2d       	mov	r24, r10
    4610:	86 78       	andi	r24, 0x86	; 134
    4612:	51 f0       	breq	.+20     	; 0x4628 <vfprintf+0x386>
    4614:	a1 fe       	sbrs	r10, 1
    4616:	02 c0       	rjmp	.+4      	; 0x461c <vfprintf+0x37a>
    4618:	8b e2       	ldi	r24, 0x2B	; 43
    461a:	01 c0       	rjmp	.+2      	; 0x461e <vfprintf+0x37c>
    461c:	80 e2       	ldi	r24, 0x20	; 32
    461e:	a7 fc       	sbrc	r10, 7
    4620:	8d e2       	ldi	r24, 0x2D	; 45
    4622:	b6 01       	movw	r22, r12
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	50 d0       	rcall	.+160    	; 0x46c8 <fputc>
    4628:	89 14       	cp	r8, r9
    462a:	30 f4       	brcc	.+12     	; 0x4638 <vfprintf+0x396>
    462c:	b6 01       	movw	r22, r12
    462e:	80 e3       	ldi	r24, 0x30	; 48
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	4a d0       	rcall	.+148    	; 0x46c8 <fputc>
    4634:	9a 94       	dec	r9
    4636:	f8 cf       	rjmp	.-16     	; 0x4628 <vfprintf+0x386>
    4638:	8a 94       	dec	r8
    463a:	f3 01       	movw	r30, r6
    463c:	e8 0d       	add	r30, r8
    463e:	f1 1d       	adc	r31, r1
    4640:	80 81       	ld	r24, Z
    4642:	b6 01       	movw	r22, r12
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	40 d0       	rcall	.+128    	; 0x46c8 <fputc>
    4648:	81 10       	cpse	r8, r1
    464a:	f6 cf       	rjmp	.-20     	; 0x4638 <vfprintf+0x396>
    464c:	22 20       	and	r2, r2
    464e:	09 f4       	brne	.+2      	; 0x4652 <vfprintf+0x3b0>
    4650:	4e ce       	rjmp	.-868    	; 0x42ee <vfprintf+0x4c>
    4652:	b6 01       	movw	r22, r12
    4654:	80 e2       	ldi	r24, 0x20	; 32
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	37 d0       	rcall	.+110    	; 0x46c8 <fputc>
    465a:	2a 94       	dec	r2
    465c:	f7 cf       	rjmp	.-18     	; 0x464c <vfprintf+0x3aa>
    465e:	f6 01       	movw	r30, r12
    4660:	86 81       	ldd	r24, Z+6	; 0x06
    4662:	97 81       	ldd	r25, Z+7	; 0x07
    4664:	02 c0       	rjmp	.+4      	; 0x466a <vfprintf+0x3c8>
    4666:	8f ef       	ldi	r24, 0xFF	; 255
    4668:	9f ef       	ldi	r25, 0xFF	; 255
    466a:	2b 96       	adiw	r28, 0x0b	; 11
    466c:	0f b6       	in	r0, 0x3f	; 63
    466e:	f8 94       	cli
    4670:	de bf       	out	0x3e, r29	; 62
    4672:	0f be       	out	0x3f, r0	; 63
    4674:	cd bf       	out	0x3d, r28	; 61
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	1f 91       	pop	r17
    467c:	0f 91       	pop	r16
    467e:	ff 90       	pop	r15
    4680:	ef 90       	pop	r14
    4682:	df 90       	pop	r13
    4684:	cf 90       	pop	r12
    4686:	bf 90       	pop	r11
    4688:	af 90       	pop	r10
    468a:	9f 90       	pop	r9
    468c:	8f 90       	pop	r8
    468e:	7f 90       	pop	r7
    4690:	6f 90       	pop	r6
    4692:	5f 90       	pop	r5
    4694:	4f 90       	pop	r4
    4696:	3f 90       	pop	r3
    4698:	2f 90       	pop	r2
    469a:	08 95       	ret

0000469c <strnlen_P>:
    469c:	fc 01       	movw	r30, r24
    469e:	05 90       	lpm	r0, Z+
    46a0:	61 50       	subi	r22, 0x01	; 1
    46a2:	70 40       	sbci	r23, 0x00	; 0
    46a4:	01 10       	cpse	r0, r1
    46a6:	d8 f7       	brcc	.-10     	; 0x469e <strnlen_P+0x2>
    46a8:	80 95       	com	r24
    46aa:	90 95       	com	r25
    46ac:	8e 0f       	add	r24, r30
    46ae:	9f 1f       	adc	r25, r31
    46b0:	08 95       	ret

000046b2 <strnlen>:
    46b2:	fc 01       	movw	r30, r24
    46b4:	61 50       	subi	r22, 0x01	; 1
    46b6:	70 40       	sbci	r23, 0x00	; 0
    46b8:	01 90       	ld	r0, Z+
    46ba:	01 10       	cpse	r0, r1
    46bc:	d8 f7       	brcc	.-10     	; 0x46b4 <strnlen+0x2>
    46be:	80 95       	com	r24
    46c0:	90 95       	com	r25
    46c2:	8e 0f       	add	r24, r30
    46c4:	9f 1f       	adc	r25, r31
    46c6:	08 95       	ret

000046c8 <fputc>:
    46c8:	0f 93       	push	r16
    46ca:	1f 93       	push	r17
    46cc:	cf 93       	push	r28
    46ce:	df 93       	push	r29
    46d0:	fb 01       	movw	r30, r22
    46d2:	23 81       	ldd	r18, Z+3	; 0x03
    46d4:	21 fd       	sbrc	r18, 1
    46d6:	03 c0       	rjmp	.+6      	; 0x46de <fputc+0x16>
    46d8:	8f ef       	ldi	r24, 0xFF	; 255
    46da:	9f ef       	ldi	r25, 0xFF	; 255
    46dc:	2c c0       	rjmp	.+88     	; 0x4736 <fputc+0x6e>
    46de:	22 ff       	sbrs	r18, 2
    46e0:	16 c0       	rjmp	.+44     	; 0x470e <fputc+0x46>
    46e2:	46 81       	ldd	r20, Z+6	; 0x06
    46e4:	57 81       	ldd	r21, Z+7	; 0x07
    46e6:	24 81       	ldd	r18, Z+4	; 0x04
    46e8:	35 81       	ldd	r19, Z+5	; 0x05
    46ea:	42 17       	cp	r20, r18
    46ec:	53 07       	cpc	r21, r19
    46ee:	44 f4       	brge	.+16     	; 0x4700 <fputc+0x38>
    46f0:	a0 81       	ld	r26, Z
    46f2:	b1 81       	ldd	r27, Z+1	; 0x01
    46f4:	9d 01       	movw	r18, r26
    46f6:	2f 5f       	subi	r18, 0xFF	; 255
    46f8:	3f 4f       	sbci	r19, 0xFF	; 255
    46fa:	31 83       	std	Z+1, r19	; 0x01
    46fc:	20 83       	st	Z, r18
    46fe:	8c 93       	st	X, r24
    4700:	26 81       	ldd	r18, Z+6	; 0x06
    4702:	37 81       	ldd	r19, Z+7	; 0x07
    4704:	2f 5f       	subi	r18, 0xFF	; 255
    4706:	3f 4f       	sbci	r19, 0xFF	; 255
    4708:	37 83       	std	Z+7, r19	; 0x07
    470a:	26 83       	std	Z+6, r18	; 0x06
    470c:	14 c0       	rjmp	.+40     	; 0x4736 <fputc+0x6e>
    470e:	8b 01       	movw	r16, r22
    4710:	ec 01       	movw	r28, r24
    4712:	fb 01       	movw	r30, r22
    4714:	00 84       	ldd	r0, Z+8	; 0x08
    4716:	f1 85       	ldd	r31, Z+9	; 0x09
    4718:	e0 2d       	mov	r30, r0
    471a:	19 95       	eicall
    471c:	89 2b       	or	r24, r25
    471e:	e1 f6       	brne	.-72     	; 0x46d8 <fputc+0x10>
    4720:	d8 01       	movw	r26, r16
    4722:	16 96       	adiw	r26, 0x06	; 6
    4724:	8d 91       	ld	r24, X+
    4726:	9c 91       	ld	r25, X
    4728:	17 97       	sbiw	r26, 0x07	; 7
    472a:	01 96       	adiw	r24, 0x01	; 1
    472c:	17 96       	adiw	r26, 0x07	; 7
    472e:	9c 93       	st	X, r25
    4730:	8e 93       	st	-X, r24
    4732:	16 97       	sbiw	r26, 0x06	; 6
    4734:	ce 01       	movw	r24, r28
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	1f 91       	pop	r17
    473c:	0f 91       	pop	r16
    473e:	08 95       	ret

00004740 <__ultoa_invert>:
    4740:	fa 01       	movw	r30, r20
    4742:	aa 27       	eor	r26, r26
    4744:	28 30       	cpi	r18, 0x08	; 8
    4746:	51 f1       	breq	.+84     	; 0x479c <__ultoa_invert+0x5c>
    4748:	20 31       	cpi	r18, 0x10	; 16
    474a:	81 f1       	breq	.+96     	; 0x47ac <__ultoa_invert+0x6c>
    474c:	e8 94       	clt
    474e:	6f 93       	push	r22
    4750:	6e 7f       	andi	r22, 0xFE	; 254
    4752:	6e 5f       	subi	r22, 0xFE	; 254
    4754:	7f 4f       	sbci	r23, 0xFF	; 255
    4756:	8f 4f       	sbci	r24, 0xFF	; 255
    4758:	9f 4f       	sbci	r25, 0xFF	; 255
    475a:	af 4f       	sbci	r26, 0xFF	; 255
    475c:	b1 e0       	ldi	r27, 0x01	; 1
    475e:	3e d0       	rcall	.+124    	; 0x47dc <__ultoa_invert+0x9c>
    4760:	b4 e0       	ldi	r27, 0x04	; 4
    4762:	3c d0       	rcall	.+120    	; 0x47dc <__ultoa_invert+0x9c>
    4764:	67 0f       	add	r22, r23
    4766:	78 1f       	adc	r23, r24
    4768:	89 1f       	adc	r24, r25
    476a:	9a 1f       	adc	r25, r26
    476c:	a1 1d       	adc	r26, r1
    476e:	68 0f       	add	r22, r24
    4770:	79 1f       	adc	r23, r25
    4772:	8a 1f       	adc	r24, r26
    4774:	91 1d       	adc	r25, r1
    4776:	a1 1d       	adc	r26, r1
    4778:	6a 0f       	add	r22, r26
    477a:	71 1d       	adc	r23, r1
    477c:	81 1d       	adc	r24, r1
    477e:	91 1d       	adc	r25, r1
    4780:	a1 1d       	adc	r26, r1
    4782:	20 d0       	rcall	.+64     	; 0x47c4 <__ultoa_invert+0x84>
    4784:	09 f4       	brne	.+2      	; 0x4788 <__ultoa_invert+0x48>
    4786:	68 94       	set
    4788:	3f 91       	pop	r19
    478a:	2a e0       	ldi	r18, 0x0A	; 10
    478c:	26 9f       	mul	r18, r22
    478e:	11 24       	eor	r1, r1
    4790:	30 19       	sub	r19, r0
    4792:	30 5d       	subi	r19, 0xD0	; 208
    4794:	31 93       	st	Z+, r19
    4796:	de f6       	brtc	.-74     	; 0x474e <__ultoa_invert+0xe>
    4798:	cf 01       	movw	r24, r30
    479a:	08 95       	ret
    479c:	46 2f       	mov	r20, r22
    479e:	47 70       	andi	r20, 0x07	; 7
    47a0:	40 5d       	subi	r20, 0xD0	; 208
    47a2:	41 93       	st	Z+, r20
    47a4:	b3 e0       	ldi	r27, 0x03	; 3
    47a6:	0f d0       	rcall	.+30     	; 0x47c6 <__ultoa_invert+0x86>
    47a8:	c9 f7       	brne	.-14     	; 0x479c <__ultoa_invert+0x5c>
    47aa:	f6 cf       	rjmp	.-20     	; 0x4798 <__ultoa_invert+0x58>
    47ac:	46 2f       	mov	r20, r22
    47ae:	4f 70       	andi	r20, 0x0F	; 15
    47b0:	40 5d       	subi	r20, 0xD0	; 208
    47b2:	4a 33       	cpi	r20, 0x3A	; 58
    47b4:	18 f0       	brcs	.+6      	; 0x47bc <__ultoa_invert+0x7c>
    47b6:	49 5d       	subi	r20, 0xD9	; 217
    47b8:	31 fd       	sbrc	r19, 1
    47ba:	40 52       	subi	r20, 0x20	; 32
    47bc:	41 93       	st	Z+, r20
    47be:	02 d0       	rcall	.+4      	; 0x47c4 <__ultoa_invert+0x84>
    47c0:	a9 f7       	brne	.-22     	; 0x47ac <__ultoa_invert+0x6c>
    47c2:	ea cf       	rjmp	.-44     	; 0x4798 <__ultoa_invert+0x58>
    47c4:	b4 e0       	ldi	r27, 0x04	; 4
    47c6:	a6 95       	lsr	r26
    47c8:	97 95       	ror	r25
    47ca:	87 95       	ror	r24
    47cc:	77 95       	ror	r23
    47ce:	67 95       	ror	r22
    47d0:	ba 95       	dec	r27
    47d2:	c9 f7       	brne	.-14     	; 0x47c6 <__ultoa_invert+0x86>
    47d4:	00 97       	sbiw	r24, 0x00	; 0
    47d6:	61 05       	cpc	r22, r1
    47d8:	71 05       	cpc	r23, r1
    47da:	08 95       	ret
    47dc:	9b 01       	movw	r18, r22
    47de:	ac 01       	movw	r20, r24
    47e0:	0a 2e       	mov	r0, r26
    47e2:	06 94       	lsr	r0
    47e4:	57 95       	ror	r21
    47e6:	47 95       	ror	r20
    47e8:	37 95       	ror	r19
    47ea:	27 95       	ror	r18
    47ec:	ba 95       	dec	r27
    47ee:	c9 f7       	brne	.-14     	; 0x47e2 <__ultoa_invert+0xa2>
    47f0:	62 0f       	add	r22, r18
    47f2:	73 1f       	adc	r23, r19
    47f4:	84 1f       	adc	r24, r20
    47f6:	95 1f       	adc	r25, r21
    47f8:	a0 1d       	adc	r26, r0
    47fa:	08 95       	ret

000047fc <_exit>:
    47fc:	f8 94       	cli

000047fe <__stop_program>:
    47fe:	ff cf       	rjmp	.-2      	; 0x47fe <__stop_program>
