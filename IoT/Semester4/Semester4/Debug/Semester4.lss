
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000064c  00800200  000065fc  00006690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000065fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cb0  0080084c  0080084c  00006cdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006cdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b98  00000000  00000000  00006d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e0e0  00000000  00000000  00007910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003928  00000000  00000000  000159f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f37  00000000  00000000  00019318  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000289c  00000000  00000000  00020250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004416  00000000  00000000  00022aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c54d  00000000  00000000  00026f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab8  00000000  00000000  0003344f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	56 c6       	rjmp	.+3244   	; 0xcde <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ae 26 	jmp	0x4d5c	; 0x4d5c <__vector_25>
      68:	0c 94 00 27 	jmp	0x4e00	; 0x4e00 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 44 27 	jmp	0x4e88	; 0x4e88 <__vector_36>
      94:	0c 94 96 27 	jmp	0x4f2c	; 0x4f2c <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4e 2b 	jmp	0x569c	; 0x569c <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__vector_51>
      d0:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <__vector_54>
      dc:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2b 1c       	adc	r2, r11
      e6:	2b 1c       	adc	r2, r11
      e8:	2b 1c       	adc	r2, r11
      ea:	62 1c       	adc	r6, r2
      ec:	6a 1c       	adc	r6, r10
      ee:	7f 1c       	adc	r7, r15
      f0:	2b 1c       	adc	r2, r11
      f2:	2b 1c       	adc	r2, r11
      f4:	62 1c       	adc	r6, r2
      f6:	6a 1c       	adc	r6, r10
      f8:	70 2b       	or	r23, r16
      fa:	e0 2b       	or	r30, r16
      fc:	e0 2b       	or	r30, r16
      fe:	e0 2b       	or	r30, r16
     100:	e0 2b       	or	r30, r16
     102:	e0 2b       	or	r30, r16
     104:	e0 2b       	or	r30, r16
     106:	e0 2b       	or	r30, r16
     108:	70 2b       	or	r23, r16
     10a:	e0 2b       	or	r30, r16
     10c:	e0 2b       	or	r30, r16
     10e:	e0 2b       	or	r30, r16
     110:	e0 2b       	or	r30, r16
     112:	e0 2b       	or	r30, r16
     114:	e0 2b       	or	r30, r16
     116:	e0 2b       	or	r30, r16
     118:	72 2b       	or	r23, r18
     11a:	e0 2b       	or	r30, r16
     11c:	e0 2b       	or	r30, r16
     11e:	e0 2b       	or	r30, r16
     120:	e0 2b       	or	r30, r16
     122:	e0 2b       	or	r30, r16
     124:	e0 2b       	or	r30, r16
     126:	e0 2b       	or	r30, r16
     128:	e0 2b       	or	r30, r16
     12a:	e0 2b       	or	r30, r16
     12c:	e0 2b       	or	r30, r16
     12e:	e0 2b       	or	r30, r16
     130:	e0 2b       	or	r30, r16
     132:	e0 2b       	or	r30, r16
     134:	e0 2b       	or	r30, r16
     136:	e0 2b       	or	r30, r16
     138:	72 2b       	or	r23, r18
     13a:	e0 2b       	or	r30, r16
     13c:	e0 2b       	or	r30, r16
     13e:	e0 2b       	or	r30, r16
     140:	e0 2b       	or	r30, r16
     142:	e0 2b       	or	r30, r16
     144:	e0 2b       	or	r30, r16
     146:	e0 2b       	or	r30, r16
     148:	e0 2b       	or	r30, r16
     14a:	e0 2b       	or	r30, r16
     14c:	e0 2b       	or	r30, r16
     14e:	e0 2b       	or	r30, r16
     150:	e0 2b       	or	r30, r16
     152:	e0 2b       	or	r30, r16
     154:	e0 2b       	or	r30, r16
     156:	e0 2b       	or	r30, r16
     158:	dc 2b       	or	r29, r28
     15a:	e0 2b       	or	r30, r16
     15c:	e0 2b       	or	r30, r16
     15e:	e0 2b       	or	r30, r16
     160:	e0 2b       	or	r30, r16
     162:	e0 2b       	or	r30, r16
     164:	e0 2b       	or	r30, r16
     166:	e0 2b       	or	r30, r16
     168:	a7 2b       	or	r26, r23
     16a:	e0 2b       	or	r30, r16
     16c:	e0 2b       	or	r30, r16
     16e:	e0 2b       	or	r30, r16
     170:	e0 2b       	or	r30, r16
     172:	e0 2b       	or	r30, r16
     174:	e0 2b       	or	r30, r16
     176:	e0 2b       	or	r30, r16
     178:	e0 2b       	or	r30, r16
     17a:	e0 2b       	or	r30, r16
     17c:	e0 2b       	or	r30, r16
     17e:	e0 2b       	or	r30, r16
     180:	e0 2b       	or	r30, r16
     182:	e0 2b       	or	r30, r16
     184:	e0 2b       	or	r30, r16
     186:	e0 2b       	or	r30, r16
     188:	9b 2b       	or	r25, r27
     18a:	e0 2b       	or	r30, r16
     18c:	e0 2b       	or	r30, r16
     18e:	e0 2b       	or	r30, r16
     190:	e0 2b       	or	r30, r16
     192:	e0 2b       	or	r30, r16
     194:	e0 2b       	or	r30, r16
     196:	e0 2b       	or	r30, r16
     198:	bf 2b       	or	r27, r31

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <prvCheckTasksWaitingTermination>
     19e:	80 91 71 12 	lds	r24, 0x1271	; 0x801271 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	d5 d4       	rcall	.+2474   	; 0xb52 <vPortYield>
     1a8:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 a8 19 	call	0x3350	; 0x3350 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 9d 1b 	call	0x373a	; 0x373a <prvProcessTimerOrBlockTask>
     1c6:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ec ef       	ldi	r30, 0xFC	; 252
     1e4:	f5 e6       	ldi	r31, 0x65	; 101
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ac 34       	cpi	r26, 0x4C	; 76
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	24 e1       	ldi	r18, 0x14	; 20
     1f8:	ac e4       	ldi	r26, 0x4C	; 76
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ac 3f       	cpi	r26, 0xFC	; 252
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <main>
     20a:	0c 94 fc 32 	jmp	0x65f8	; 0x65f8 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <setPackageHandler>:
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <setPackageHandler+0xa>
     21a:	00 d0       	rcall	.+0      	; 0x21c <setPackageHandler+0xc>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	13 c0       	rjmp	.+38     	; 0x24c <setPackageHandler+0x3c>
     226:	b8 01       	movw	r22, r16
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	8c 0f       	add	r24, r28
     232:	9d 1f       	adc	r25, r29
     234:	68 0f       	add	r22, r24
     236:	79 1f       	adc	r23, r25
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <sensorDataQueue>
     242:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <sensorDataQueue+0x1>
     246:	6a d7       	rcall	.+3796   	; 0x111c <xQueueReceive>
     248:	0f 5f       	subi	r16, 0xFF	; 255
     24a:	1f 4f       	sbci	r17, 0xFF	; 255
     24c:	03 30       	cpi	r16, 0x03	; 3
     24e:	11 05       	cpc	r17, r1
     250:	54 f3       	brlt	.-44     	; 0x226 <setPackageHandler+0x16>
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <sensorDataPackageHandler_setTemp_value>
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04
     25e:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <sensorDataPackageHandler_setHumidity_value>
     262:	8d 81       	ldd	r24, Y+5	; 0x05
     264:	9e 81       	ldd	r25, Y+6	; 0x06
     266:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <sensorDataPackageHandler_setCO2_value>
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <sensorDataQueue>
     270:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <sensorDataQueue+0x1>
     274:	0e d6       	rcall	.+3100   	; 0xe92 <xQueueGenericReset>
     276:	26 96       	adiw	r28, 0x06	; 6
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <ApplicationTask>:
     28c:	cc 24       	eor	r12, r12
     28e:	ca 94       	dec	r12
     290:	dc 2c       	mov	r13, r12
     292:	76 01       	movw	r14, r12
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	21 e0       	ldi	r18, 0x01	; 1
     298:	43 e0       	ldi	r20, 0x03	; 3
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 91 ee 14 	lds	r24, 0x14EE	; 0x8014ee <dataEventGroup>
     2a4:	90 91 ef 14 	lds	r25, 0x14EF	; 0x8014ef <dataEventGroup+0x1>
     2a8:	ff d0       	rcall	.+510    	; 0x4a8 <xEventGroupWaitBits>
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <ApplicationTask+0x34>
     2be:	a8 df       	rcall	.-176    	; 0x210 <setPackageHandler>
     2c0:	63 e0       	ldi	r22, 0x03	; 3
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 38 12 	call	0x2470	; 0x2470 <vTaskDelay>
     2cc:	df cf       	rjmp	.-66     	; 0x28c <ApplicationTask>

000002ce <createApplicationTask>:
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	0f 93       	push	r16
     2d4:	e1 2c       	mov	r14, r1
     2d6:	f1 2c       	mov	r15, r1
     2d8:	01 e0       	ldi	r16, 0x01	; 1
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	40 ec       	ldi	r20, 0xC0	; 192
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	6f e6       	ldi	r22, 0x6F	; 111
     2e4:	72 e0       	ldi	r23, 0x02	; 2
     2e6:	86 e4       	ldi	r24, 0x46	; 70
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskCreate>
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	08 95       	ret

000002f6 <myCo2CallBack>:
		vTaskDelay(30);
			
	}
}
void myCo2CallBack(uint16_t ppm)
{
     2f6:	0f 93       	push	r16
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	1f 92       	push	r1
     2fe:	1f 92       	push	r1
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	9a 83       	std	Y+2, r25	; 0x02
     306:	89 83       	std	Y+1, r24	; 0x01
		//printf("CO2 Value: %d\n",ppm);
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     308:	00 e0       	ldi	r16, 0x00	; 0
     30a:	2f ef       	ldi	r18, 0xFF	; 255
     30c:	3f ef       	ldi	r19, 0xFF	; 255
     30e:	a9 01       	movw	r20, r18
     310:	be 01       	movw	r22, r28
     312:	6f 5f       	subi	r22, 0xFF	; 255
     314:	7f 4f       	sbci	r23, 0xFF	; 255
     316:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <sensorDataQueue>
     31a:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <sensorDataQueue+0x1>
     31e:	31 d6       	rcall	.+3170   	; 0xf82 <xQueueGenericSend>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     320:	41 e0       	ldi	r20, 0x01	; 1
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 91 ee 14 	lds	r24, 0x14EE	; 0x8014ee <dataEventGroup>
     32c:	90 91 ef 14 	lds	r25, 0x14EF	; 0x8014ef <dataEventGroup+0x1>
     330:	5b d1       	rcall	.+694    	; 0x5e8 <xEventGroupSetBits>
		xSemaphoreGive(tempHumSemaphore);
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	a9 01       	movw	r20, r18
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <tempHumSemaphore>
     340:	90 91 eb 14 	lds	r25, 0x14EB	; 0x8014eb <tempHumSemaphore+0x1>
     344:	1e d6       	rcall	.+3132   	; 0xf82 <xQueueGenericSend>
		
		

}
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	0f 91       	pop	r16
     350:	08 95       	ret

00000352 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <mh_z19_initialise>
     358:	08 95       	ret

0000035a <measureCO2>:
	
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     35a:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <mh_z19_takeMeassuring>
     35e:	80 93 d9 14 	sts	0x14D9, r24	; 0x8014d9 <rc>
	if (rc != MHZ19_OK)
     362:	88 23       	and	r24, r24
     364:	21 f0       	breq	.+8      	; 0x36e <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     366:	87 e7       	ldi	r24, 0x77	; 119
     368:	92 e0       	ldi	r25, 0x02	; 2
     36a:	0c 94 f1 2f 	jmp	0x5fe2	; 0x5fe2 <puts>
     36e:	08 95       	ret

00000370 <CO2Task>:
}
void CO2Task()
{
	while(1)
	{
		EventBits_t dataEventBits = xEventGroupWaitBits
     370:	cc 24       	eor	r12, r12
     372:	ca 94       	dec	r12
     374:	dc 2c       	mov	r13, r12
     376:	76 01       	movw	r14, r12
     378:	01 e0       	ldi	r16, 0x01	; 1
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	42 e0       	ldi	r20, 0x02	; 2
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	80 91 ee 14 	lds	r24, 0x14EE	; 0x8014ee <dataEventGroup>
     388:	90 91 ef 14 	lds	r25, 0x14EF	; 0x8014ef <dataEventGroup+0x1>
     38c:	8d d0       	rcall	.+282    	; 0x4a8 <xEventGroupWaitBits>
		(dataEventGroup,BIT_HUMIDITY_TEMPERATURE,pdFALSE,pdTRUE,portMAX_DELAY);
		
		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
		{
			//printf("Measured\n");
			measureCO2();
     38e:	61 fd       	sbrc	r22, 1
     390:	e4 df       	rcall	.-56     	; 0x35a <measureCO2>
		
		}
		vTaskDelay(30);
     392:	6e e1       	ldi	r22, 0x1E	; 30
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 38 12 	call	0x2470	; 0x2470 <vTaskDelay>
			
	}
     39e:	e8 cf       	rjmp	.-48     	; 0x370 <CO2Task>

000003a0 <createCO2Task>:
		
		

}
void createCO2Task()
{
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
			initializeCO2Driver();
     3a6:	d5 df       	rcall	.-86     	; 0x352 <initializeCO2Driver>
			mh_z19_injectCallBack(myCo2CallBack);
     3a8:	8b e7       	ldi	r24, 0x7B	; 123
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 39 25 	call	0x4a72	; 0x4a72 <mh_z19_injectCallBack>
			xTaskCreate(
     3b0:	e1 2c       	mov	r14, r1
     3b2:	f1 2c       	mov	r15, r1
     3b4:	01 e0       	ldi	r16, 0x01	; 1
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 ec       	ldi	r20, 0xC0	; 192
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	6e e8       	ldi	r22, 0x8E	; 142
     3c0:	72 e0       	ldi	r23, 0x02	; 2
     3c2:	88 eb       	ldi	r24, 0xB8	; 184
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	08 95       	ret

000003d2 <initializeConfiguration>:
int* ventilationLevel;


void initializeConfiguration()
{
	ventilationLevel = NULL;
     3d2:	10 92 dd 14 	sts	0x14DD, r1	; 0x8014dd <ventilationLevel+0x1>
     3d6:	10 92 dc 14 	sts	0x14DC, r1	; 0x8014dc <ventilationLevel>
	configSemaphore = xSemaphoreCreateBinary();
     3da:	43 e0       	ldi	r20, 0x03	; 3
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	ad d5       	rcall	.+2906   	; 0xf3c <xQueueGenericCreate>
     3e2:	90 93 db 14 	sts	0x14DB, r25	; 0x8014db <configSemaphore+0x1>
     3e6:	80 93 da 14 	sts	0x14DA, r24	; 0x8014da <configSemaphore>
     3ea:	08 95       	ret

000003ec <setVentilationLevel>:
}

void setVentilationLevel(int level)
{
     3ec:	0f 93       	push	r16
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	1f 92       	push	r1
     3f4:	1f 92       	push	r1
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	89 83       	std	Y+1, r24	; 0x01
	if(xSemaphoreTake(configSemaphore,portMAX_DELAY)==pdTRUE)
     3fe:	4f ef       	ldi	r20, 0xFF	; 255
     400:	5f ef       	ldi	r21, 0xFF	; 255
     402:	ba 01       	movw	r22, r20
     404:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <configSemaphore>
     408:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <configSemaphore+0x1>
     40c:	16 d7       	rcall	.+3628   	; 0x123a <xQueueSemaphoreTake>
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	89 f4       	brne	.+34     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	{
		ventilationLevel = &level;
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	90 93 dd 14 	sts	0x14DD, r25	; 0x8014dd <ventilationLevel+0x1>
     41a:	80 93 dc 14 	sts	0x14DC, r24	; 0x8014dc <ventilationLevel>
		xSemaphoreGive(configSemaphore);
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	a9 01       	movw	r20, r18
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <configSemaphore>
     42e:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <configSemaphore+0x1>
     432:	a7 d5       	rcall	.+2894   	; 0xf82 <xQueueGenericSend>
	}
}
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	0f 91       	pop	r16
     43e:	08 95       	ret

00000440 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     440:	0f 93       	push	r16
     442:	01 11       	cpse	r16, r1
     444:	0c c0       	rjmp	.+24     	; 0x45e <prvTestWaitCondition+0x1e>
     446:	dc 01       	movw	r26, r24
     448:	cb 01       	movw	r24, r22
     44a:	82 23       	and	r24, r18
     44c:	93 23       	and	r25, r19
     44e:	a4 23       	and	r26, r20
     450:	b5 23       	and	r27, r21
     452:	89 2b       	or	r24, r25
     454:	8a 2b       	or	r24, r26
     456:	8b 2b       	or	r24, r27
     458:	79 f4       	brne	.+30     	; 0x478 <prvTestWaitCondition+0x38>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	10 c0       	rjmp	.+32     	; 0x47e <prvTestWaitCondition+0x3e>
     45e:	dc 01       	movw	r26, r24
     460:	cb 01       	movw	r24, r22
     462:	82 23       	and	r24, r18
     464:	93 23       	and	r25, r19
     466:	a4 23       	and	r26, r20
     468:	b5 23       	and	r27, r21
     46a:	28 17       	cp	r18, r24
     46c:	39 07       	cpc	r19, r25
     46e:	4a 07       	cpc	r20, r26
     470:	5b 07       	cpc	r21, r27
     472:	21 f0       	breq	.+8      	; 0x47c <prvTestWaitCondition+0x3c>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	03 c0       	rjmp	.+6      	; 0x47e <prvTestWaitCondition+0x3e>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	01 c0       	rjmp	.+2      	; 0x47e <prvTestWaitCondition+0x3e>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <xEventGroupCreate>:
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	8f e0       	ldi	r24, 0x0F	; 15
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	af d1       	rcall	.+862    	; 0x7ea <pvPortMalloc>
     48c:	ec 01       	movw	r28, r24
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	39 f0       	breq	.+14     	; 0x4a0 <xEventGroupCreate+0x1e>
     492:	fc 01       	movw	r30, r24
     494:	11 92       	st	Z+, r1
     496:	11 92       	st	Z+, r1
     498:	11 92       	st	Z+, r1
     49a:	11 92       	st	Z+, r1
     49c:	cf 01       	movw	r24, r30
     49e:	8b d2       	rcall	.+1302   	; 0x9b6 <vListInitialise>
     4a0:	ce 01       	movw	r24, r28
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <xEventGroupWaitBits>:
     4a8:	2f 92       	push	r2
     4aa:	3f 92       	push	r3
     4ac:	4f 92       	push	r4
     4ae:	5f 92       	push	r5
     4b0:	6f 92       	push	r6
     4b2:	7f 92       	push	r7
     4b4:	8f 92       	push	r8
     4b6:	9f 92       	push	r9
     4b8:	af 92       	push	r10
     4ba:	bf 92       	push	r11
     4bc:	cf 92       	push	r12
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
     4ce:	4a 01       	movw	r8, r20
     4d0:	5b 01       	movw	r10, r22
     4d2:	62 2e       	mov	r6, r18
     4d4:	70 2e       	mov	r7, r16
     4d6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <vTaskSuspendAll>
     4da:	28 80       	ld	r2, Y
     4dc:	39 80       	ldd	r3, Y+1	; 0x01
     4de:	4a 80       	ldd	r4, Y+2	; 0x02
     4e0:	5b 80       	ldd	r5, Y+3	; 0x03
     4e2:	a5 01       	movw	r20, r10
     4e4:	94 01       	movw	r18, r8
     4e6:	c2 01       	movw	r24, r4
     4e8:	b1 01       	movw	r22, r2
     4ea:	aa df       	rcall	.-172    	; 0x440 <prvTestWaitCondition>
     4ec:	88 23       	and	r24, r24
     4ee:	a1 f0       	breq	.+40     	; 0x518 <xEventGroupWaitBits+0x70>
     4f0:	66 20       	and	r6, r6
     4f2:	89 f1       	breq	.+98     	; 0x556 <xEventGroupWaitBits+0xae>
     4f4:	d5 01       	movw	r26, r10
     4f6:	c4 01       	movw	r24, r8
     4f8:	80 95       	com	r24
     4fa:	90 95       	com	r25
     4fc:	a0 95       	com	r26
     4fe:	b0 95       	com	r27
     500:	82 21       	and	r24, r2
     502:	93 21       	and	r25, r3
     504:	a4 21       	and	r26, r4
     506:	b5 21       	and	r27, r5
     508:	88 83       	st	Y, r24
     50a:	99 83       	std	Y+1, r25	; 0x01
     50c:	aa 83       	std	Y+2, r26	; 0x02
     50e:	bb 83       	std	Y+3, r27	; 0x03
     510:	c1 2c       	mov	r12, r1
     512:	d1 2c       	mov	r13, r1
     514:	76 01       	movw	r14, r12
     516:	22 c0       	rjmp	.+68     	; 0x55c <xEventGroupWaitBits+0xb4>
     518:	c1 14       	cp	r12, r1
     51a:	d1 04       	cpc	r13, r1
     51c:	e1 04       	cpc	r14, r1
     51e:	f1 04       	cpc	r15, r1
     520:	e9 f0       	breq	.+58     	; 0x55c <xEventGroupWaitBits+0xb4>
     522:	61 10       	cpse	r6, r1
     524:	04 c0       	rjmp	.+8      	; 0x52e <xEventGroupWaitBits+0x86>
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	ba 01       	movw	r22, r20
     52c:	04 c0       	rjmp	.+8      	; 0x536 <xEventGroupWaitBits+0x8e>
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	71 10       	cpse	r7, r1
     538:	74 60       	ori	r23, 0x04	; 4
     53a:	48 29       	or	r20, r8
     53c:	59 29       	or	r21, r9
     53e:	6a 29       	or	r22, r10
     540:	7b 29       	or	r23, r11
     542:	97 01       	movw	r18, r14
     544:	86 01       	movw	r16, r12
     546:	ce 01       	movw	r24, r28
     548:	04 96       	adiw	r24, 0x04	; 4
     54a:	0e 94 cf 12 	call	0x259e	; 0x259e <vTaskPlaceOnUnorderedEventList>
     54e:	21 2c       	mov	r2, r1
     550:	31 2c       	mov	r3, r1
     552:	21 01       	movw	r4, r2
     554:	03 c0       	rjmp	.+6      	; 0x55c <xEventGroupWaitBits+0xb4>
     556:	c1 2c       	mov	r12, r1
     558:	d1 2c       	mov	r13, r1
     55a:	76 01       	movw	r14, r12
     55c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>
     560:	cd 28       	or	r12, r13
     562:	ce 28       	or	r12, r14
     564:	cf 28       	or	r12, r15
     566:	59 f1       	breq	.+86     	; 0x5be <xEventGroupWaitBits+0x116>
     568:	81 11       	cpse	r24, r1
     56a:	01 c0       	rjmp	.+2      	; 0x56e <xEventGroupWaitBits+0xc6>
     56c:	f2 d2       	rcall	.+1508   	; 0xb52 <vPortYield>
     56e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <uxTaskResetEventItemValue>
     572:	6b 01       	movw	r12, r22
     574:	7c 01       	movw	r14, r24
     576:	91 fd       	sbrc	r25, 1
     578:	1f c0       	rjmp	.+62     	; 0x5b8 <xEventGroupWaitBits+0x110>
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	0f 92       	push	r0
     580:	c8 80       	ld	r12, Y
     582:	d9 80       	ldd	r13, Y+1	; 0x01
     584:	ea 80       	ldd	r14, Y+2	; 0x02
     586:	fb 80       	ldd	r15, Y+3	; 0x03
     588:	07 2d       	mov	r16, r7
     58a:	a5 01       	movw	r20, r10
     58c:	94 01       	movw	r18, r8
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	56 df       	rcall	.-340    	; 0x440 <prvTestWaitCondition>
     594:	88 23       	and	r24, r24
     596:	71 f0       	breq	.+28     	; 0x5b4 <xEventGroupWaitBits+0x10c>
     598:	66 20       	and	r6, r6
     59a:	61 f0       	breq	.+24     	; 0x5b4 <xEventGroupWaitBits+0x10c>
     59c:	80 94       	com	r8
     59e:	90 94       	com	r9
     5a0:	a0 94       	com	r10
     5a2:	b0 94       	com	r11
     5a4:	8c 20       	and	r8, r12
     5a6:	9d 20       	and	r9, r13
     5a8:	ae 20       	and	r10, r14
     5aa:	bf 20       	and	r11, r15
     5ac:	88 82       	st	Y, r8
     5ae:	99 82       	std	Y+1, r9	; 0x01
     5b0:	aa 82       	std	Y+2, r10	; 0x02
     5b2:	bb 82       	std	Y+3, r11	; 0x03
     5b4:	0f 90       	pop	r0
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	16 01       	movw	r2, r12
     5ba:	27 01       	movw	r4, r14
     5bc:	55 24       	eor	r5, r5
     5be:	c2 01       	movw	r24, r4
     5c0:	b1 01       	movw	r22, r2
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	bf 90       	pop	r11
     5d4:	af 90       	pop	r10
     5d6:	9f 90       	pop	r9
     5d8:	8f 90       	pop	r8
     5da:	7f 90       	pop	r7
     5dc:	6f 90       	pop	r6
     5de:	5f 90       	pop	r5
     5e0:	4f 90       	pop	r4
     5e2:	3f 90       	pop	r3
     5e4:	2f 90       	pop	r2
     5e6:	08 95       	ret

000005e8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     5e8:	4f 92       	push	r4
     5ea:	5f 92       	push	r5
     5ec:	6f 92       	push	r6
     5ee:	7f 92       	push	r7
     5f0:	af 92       	push	r10
     5f2:	bf 92       	push	r11
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
     606:	6a 01       	movw	r12, r20
     608:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     60a:	8c 01       	movw	r16, r24
     60c:	09 5f       	subi	r16, 0xF9	; 249
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     610:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     614:	eb 85       	ldd	r30, Y+11	; 0x0b
     616:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     618:	88 81       	ld	r24, Y
     61a:	99 81       	ldd	r25, Y+1	; 0x01
     61c:	aa 81       	ldd	r26, Y+2	; 0x02
     61e:	bb 81       	ldd	r27, Y+3	; 0x03
     620:	c8 2a       	or	r12, r24
     622:	d9 2a       	or	r13, r25
     624:	ea 2a       	or	r14, r26
     626:	fb 2a       	or	r15, r27
     628:	c8 82       	st	Y, r12
     62a:	d9 82       	std	Y+1, r13	; 0x01
     62c:	ea 82       	std	Y+2, r14	; 0x02
     62e:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     630:	c1 2c       	mov	r12, r1
     632:	d1 2c       	mov	r13, r1
     634:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     636:	3d c0       	rjmp	.+122    	; 0x6b2 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     638:	a4 80       	ldd	r10, Z+4	; 0x04
     63a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	a2 81       	ldd	r26, Z+2	; 0x02
     642:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     644:	ac 01       	movw	r20, r24
     646:	bd 01       	movw	r22, r26
     648:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     64a:	b2 fd       	sbrc	r27, 2
     64c:	0e c0       	rjmp	.+28     	; 0x66a <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     64e:	48 80       	ld	r4, Y
     650:	59 80       	ldd	r5, Y+1	; 0x01
     652:	6a 80       	ldd	r6, Y+2	; 0x02
     654:	7b 80       	ldd	r7, Y+3	; 0x03
     656:	44 22       	and	r4, r20
     658:	55 22       	and	r5, r21
     65a:	66 22       	and	r6, r22
     65c:	77 22       	and	r7, r23
     65e:	45 28       	or	r4, r5
     660:	46 28       	or	r4, r6
     662:	47 28       	or	r4, r7
     664:	89 f4       	brne	.+34     	; 0x688 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	12 c0       	rjmp	.+36     	; 0x68e <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     66a:	48 80       	ld	r4, Y
     66c:	59 80       	ldd	r5, Y+1	; 0x01
     66e:	6a 80       	ldd	r6, Y+2	; 0x02
     670:	7b 80       	ldd	r7, Y+3	; 0x03
     672:	44 22       	and	r4, r20
     674:	55 22       	and	r5, r21
     676:	66 22       	and	r6, r22
     678:	77 22       	and	r7, r23
     67a:	44 15       	cp	r20, r4
     67c:	55 05       	cpc	r21, r5
     67e:	66 05       	cpc	r22, r6
     680:	77 05       	cpc	r23, r7
     682:	21 f0       	breq	.+8      	; 0x68c <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	03 c0       	rjmp	.+6      	; 0x68e <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	01 c0       	rjmp	.+2      	; 0x68e <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     68c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     68e:	22 23       	and	r18, r18
     690:	71 f0       	breq	.+28     	; 0x6ae <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     692:	b0 ff       	sbrs	r27, 0
     694:	04 c0       	rjmp	.+8      	; 0x69e <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     696:	c4 2a       	or	r12, r20
     698:	d5 2a       	or	r13, r21
     69a:	e6 2a       	or	r14, r22
     69c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     69e:	48 81       	ld	r20, Y
     6a0:	59 81       	ldd	r21, Y+1	; 0x01
     6a2:	6a 81       	ldd	r22, Y+2	; 0x02
     6a4:	7b 81       	ldd	r23, Y+3	; 0x03
     6a6:	72 60       	ori	r23, 0x02	; 2
     6a8:	cf 01       	movw	r24, r30
     6aa:	0e 94 0a 14 	call	0x2814	; 0x2814 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6ae:	ea 2d       	mov	r30, r10
     6b0:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6b2:	e0 17       	cp	r30, r16
     6b4:	f1 07       	cpc	r31, r17
     6b6:	09 f0       	breq	.+2      	; 0x6ba <xEventGroupSetBits+0xd2>
     6b8:	bf cf       	rjmp	.-130    	; 0x638 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     6ba:	c0 94       	com	r12
     6bc:	d0 94       	com	r13
     6be:	e0 94       	com	r14
     6c0:	f0 94       	com	r15
     6c2:	88 81       	ld	r24, Y
     6c4:	99 81       	ldd	r25, Y+1	; 0x01
     6c6:	aa 81       	ldd	r26, Y+2	; 0x02
     6c8:	bb 81       	ldd	r27, Y+3	; 0x03
     6ca:	c8 22       	and	r12, r24
     6cc:	d9 22       	and	r13, r25
     6ce:	ea 22       	and	r14, r26
     6d0:	fb 22       	and	r15, r27
     6d2:	c8 82       	st	Y, r12
     6d4:	d9 82       	std	Y+1, r13	; 0x01
     6d6:	ea 82       	std	Y+2, r14	; 0x02
     6d8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6da:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6de:	68 81       	ld	r22, Y
     6e0:	79 81       	ldd	r23, Y+1	; 0x01
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	bf 90       	pop	r11
     6f8:	af 90       	pop	r10
     6fa:	7f 90       	pop	r7
     6fc:	6f 90       	pop	r6
     6fe:	5f 90       	pop	r5
     700:	4f 90       	pop	r4
     702:	08 95       	ret

00000704 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     704:	e8 e5       	ldi	r30, 0x58	; 88
     706:	f8 e0       	ldi	r31, 0x08	; 8
     708:	ac e5       	ldi	r26, 0x5C	; 92
     70a:	b8 e0       	ldi	r27, 0x08	; 8
     70c:	b1 83       	std	Z+1, r27	; 0x01
     70e:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     710:	13 82       	std	Z+3, r1	; 0x03
     712:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     714:	ec e1       	ldi	r30, 0x1C	; 28
     716:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     718:	f0 93 57 08 	sts	0x0857, r31	; 0x800857 <pxEnd+0x1>
     71c:	e0 93 56 08 	sts	0x0856, r30	; 0x800856 <pxEnd>
    pxEnd->xBlockSize = 0;
     720:	13 82       	std	Z+3, r1	; 0x03
     722:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     724:	11 82       	std	Z+1, r1	; 0x01
     726:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     728:	80 ec       	ldi	r24, 0xC0	; 192
     72a:	99 e0       	ldi	r25, 0x09	; 9
     72c:	13 96       	adiw	r26, 0x03	; 3
     72e:	9c 93       	st	X, r25
     730:	8e 93       	st	-X, r24
     732:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     734:	ed 93       	st	X+, r30
     736:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     738:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <xMinimumEverFreeBytesRemaining+0x1>
     73c:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     740:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <xFreeBytesRemaining+0x1>
     744:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e8       	ldi	r25, 0x80	; 128
     74c:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <__data_end+0x1>
     750:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <__data_end>
     754:	08 95       	ret

00000756 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     75c:	a8 e5       	ldi	r26, 0x58	; 88
     75e:	b8 e0       	ldi	r27, 0x08	; 8
     760:	01 c0       	rjmp	.+2      	; 0x764 <prvInsertBlockIntoFreeList+0xe>
     762:	df 01       	movw	r26, r30
     764:	ed 91       	ld	r30, X+
     766:	fc 91       	ld	r31, X
     768:	11 97       	sbiw	r26, 0x01	; 1
     76a:	ec 17       	cp	r30, r28
     76c:	fd 07       	cpc	r31, r29
     76e:	c8 f3       	brcs	.-14     	; 0x762 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     770:	12 96       	adiw	r26, 0x02	; 2
     772:	8d 91       	ld	r24, X+
     774:	9c 91       	ld	r25, X
     776:	13 97       	sbiw	r26, 0x03	; 3
     778:	9d 01       	movw	r18, r26
     77a:	28 0f       	add	r18, r24
     77c:	39 1f       	adc	r19, r25
     77e:	c2 17       	cp	r28, r18
     780:	d3 07       	cpc	r29, r19
     782:	49 f4       	brne	.+18     	; 0x796 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     784:	2a 81       	ldd	r18, Y+2	; 0x02
     786:	3b 81       	ldd	r19, Y+3	; 0x03
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	13 96       	adiw	r26, 0x03	; 3
     78e:	9c 93       	st	X, r25
     790:	8e 93       	st	-X, r24
     792:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     794:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     796:	8a 81       	ldd	r24, Y+2	; 0x02
     798:	9b 81       	ldd	r25, Y+3	; 0x03
     79a:	9e 01       	movw	r18, r28
     79c:	28 0f       	add	r18, r24
     79e:	39 1f       	adc	r19, r25
     7a0:	e2 17       	cp	r30, r18
     7a2:	f3 07       	cpc	r31, r19
     7a4:	c1 f4       	brne	.+48     	; 0x7d6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     7a6:	20 91 56 08 	lds	r18, 0x0856	; 0x800856 <pxEnd>
     7aa:	30 91 57 08 	lds	r19, 0x0857	; 0x800857 <pxEnd+0x1>
     7ae:	e2 17       	cp	r30, r18
     7b0:	f3 07       	cpc	r31, r19
     7b2:	71 f0       	breq	.+28     	; 0x7d0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7b4:	22 81       	ldd	r18, Z+2	; 0x02
     7b6:	33 81       	ldd	r19, Z+3	; 0x03
     7b8:	82 0f       	add	r24, r18
     7ba:	93 1f       	adc	r25, r19
     7bc:	9b 83       	std	Y+3, r25	; 0x03
     7be:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     7c0:	ed 91       	ld	r30, X+
     7c2:	fc 91       	ld	r31, X
     7c4:	11 97       	sbiw	r26, 0x01	; 1
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	99 83       	std	Y+1, r25	; 0x01
     7cc:	88 83       	st	Y, r24
     7ce:	05 c0       	rjmp	.+10     	; 0x7da <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7d0:	39 83       	std	Y+1, r19	; 0x01
     7d2:	28 83       	st	Y, r18
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7d6:	f9 83       	std	Y+1, r31	; 0x01
     7d8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7da:	ca 17       	cp	r28, r26
     7dc:	db 07       	cpc	r29, r27
     7de:	11 f0       	breq	.+4      	; 0x7e4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7e0:	cd 93       	st	X+, r28
     7e2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     7f8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     7fc:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <pxEnd>
     800:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <pxEnd+0x1>
     804:	89 2b       	or	r24, r25
     806:	09 f4       	brne	.+2      	; 0x80a <pvPortMalloc+0x20>
        {
            prvHeapInit();
     808:	7d df       	rcall	.-262    	; 0x704 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     80a:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <__data_end>
     80e:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <__data_end+0x1>
     812:	80 23       	and	r24, r16
     814:	91 23       	and	r25, r17
     816:	89 2b       	or	r24, r25
     818:	09 f0       	breq	.+2      	; 0x81c <pvPortMalloc+0x32>
     81a:	76 c0       	rjmp	.+236    	; 0x908 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     81c:	01 15       	cp	r16, r1
     81e:	11 05       	cpc	r17, r1
     820:	49 f0       	breq	.+18     	; 0x834 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     822:	c8 01       	movw	r24, r16
     824:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     826:	08 17       	cp	r16, r24
     828:	19 07       	cpc	r17, r25
     82a:	18 f0       	brcs	.+6      	; 0x832 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     82c:	00 e0       	ldi	r16, 0x00	; 0
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	01 c0       	rjmp	.+2      	; 0x834 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     832:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     834:	01 15       	cp	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	09 f4       	brne	.+2      	; 0x83c <pvPortMalloc+0x52>
     83a:	69 c0       	rjmp	.+210    	; 0x90e <pvPortMalloc+0x124>
     83c:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <xFreeBytesRemaining>
     840:	90 91 55 08 	lds	r25, 0x0855	; 0x800855 <xFreeBytesRemaining+0x1>
     844:	80 17       	cp	r24, r16
     846:	91 07       	cpc	r25, r17
     848:	08 f4       	brcc	.+2      	; 0x84c <pvPortMalloc+0x62>
     84a:	64 c0       	rjmp	.+200    	; 0x914 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     84c:	c0 91 58 08 	lds	r28, 0x0858	; 0x800858 <xStart>
     850:	d0 91 59 08 	lds	r29, 0x0859	; 0x800859 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     854:	e8 e5       	ldi	r30, 0x58	; 88
     856:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     858:	02 c0       	rjmp	.+4      	; 0x85e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     85a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     85c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	9b 81       	ldd	r25, Y+3	; 0x03
     862:	80 17       	cp	r24, r16
     864:	91 07       	cpc	r25, r17
     866:	20 f4       	brcc	.+8      	; 0x870 <pvPortMalloc+0x86>
     868:	88 81       	ld	r24, Y
     86a:	99 81       	ldd	r25, Y+1	; 0x01
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	a9 f7       	brne	.-22     	; 0x85a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     870:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <pxEnd>
     874:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <pxEnd+0x1>
     878:	c8 17       	cp	r28, r24
     87a:	d9 07       	cpc	r29, r25
     87c:	09 f4       	brne	.+2      	; 0x880 <pvPortMalloc+0x96>
     87e:	4d c0       	rjmp	.+154    	; 0x91a <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     880:	e0 80       	ld	r14, Z
     882:	f1 80       	ldd	r15, Z+1	; 0x01
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	e8 0e       	add	r14, r24
     888:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     88a:	88 81       	ld	r24, Y
     88c:	99 81       	ldd	r25, Y+1	; 0x01
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     892:	2a 81       	ldd	r18, Y+2	; 0x02
     894:	3b 81       	ldd	r19, Y+3	; 0x03
     896:	20 1b       	sub	r18, r16
     898:	31 0b       	sbc	r19, r17
     89a:	29 30       	cpi	r18, 0x09	; 9
     89c:	31 05       	cpc	r19, r1
     89e:	48 f0       	brcs	.+18     	; 0x8b2 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8a0:	ce 01       	movw	r24, r28
     8a2:	80 0f       	add	r24, r16
     8a4:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8a6:	fc 01       	movw	r30, r24
     8a8:	33 83       	std	Z+3, r19	; 0x03
     8aa:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     8ac:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     8ae:	0a 83       	std	Y+2, r16	; 0x02
     8b0:	52 df       	rcall	.-348    	; 0x756 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     8b2:	2a 81       	ldd	r18, Y+2	; 0x02
     8b4:	3b 81       	ldd	r19, Y+3	; 0x03
     8b6:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <xFreeBytesRemaining>
     8ba:	90 91 55 08 	lds	r25, 0x0855	; 0x800855 <xFreeBytesRemaining+0x1>
     8be:	82 1b       	sub	r24, r18
     8c0:	93 0b       	sbc	r25, r19
     8c2:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <xFreeBytesRemaining+0x1>
     8c6:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     8ca:	40 91 52 08 	lds	r20, 0x0852	; 0x800852 <xMinimumEverFreeBytesRemaining>
     8ce:	50 91 53 08 	lds	r21, 0x0853	; 0x800853 <xMinimumEverFreeBytesRemaining+0x1>
     8d2:	84 17       	cp	r24, r20
     8d4:	95 07       	cpc	r25, r21
     8d6:	20 f4       	brcc	.+8      	; 0x8e0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8d8:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <xMinimumEverFreeBytesRemaining+0x1>
     8dc:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8e0:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <__data_end>
     8e4:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <__data_end+0x1>
     8e8:	28 2b       	or	r18, r24
     8ea:	39 2b       	or	r19, r25
     8ec:	3b 83       	std	Y+3, r19	; 0x03
     8ee:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     8f0:	19 82       	std	Y+1, r1	; 0x01
     8f2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     8f4:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <xNumberOfSuccessfulAllocations>
     8f8:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <xNumberOfSuccessfulAllocations+0x1>
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	90 93 51 08 	sts	0x0851, r25	; 0x800851 <xNumberOfSuccessfulAllocations+0x1>
     902:	80 93 50 08 	sts	0x0850, r24	; 0x800850 <xNumberOfSuccessfulAllocations>
     906:	0b c0       	rjmp	.+22     	; 0x91e <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     908:	e1 2c       	mov	r14, r1
     90a:	f1 2c       	mov	r15, r1
     90c:	08 c0       	rjmp	.+16     	; 0x91e <pvPortMalloc+0x134>
     90e:	e1 2c       	mov	r14, r1
     910:	f1 2c       	mov	r15, r1
     912:	05 c0       	rjmp	.+10     	; 0x91e <pvPortMalloc+0x134>
     914:	e1 2c       	mov	r14, r1
     916:	f1 2c       	mov	r15, r1
     918:	02 c0       	rjmp	.+4      	; 0x91e <pvPortMalloc+0x134>
     91a:	e1 2c       	mov	r14, r1
     91c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     91e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     922:	e1 14       	cp	r14, r1
     924:	f1 04       	cpc	r15, r1
     926:	11 f4       	brne	.+4      	; 0x92c <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     928:	0e 94 b4 1c 	call	0x3968	; 0x3968 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     92c:	c7 01       	movw	r24, r14
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	08 95       	ret

0000093c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	91 f1       	breq	.+100    	; 0x9ac <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     948:	ec 01       	movw	r28, r24
     94a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     94c:	4a 81       	ldd	r20, Y+2	; 0x02
     94e:	5b 81       	ldd	r21, Y+3	; 0x03
     950:	20 91 4c 08 	lds	r18, 0x084C	; 0x80084c <__data_end>
     954:	30 91 4d 08 	lds	r19, 0x084D	; 0x80084d <__data_end+0x1>
     958:	ba 01       	movw	r22, r20
     95a:	62 23       	and	r22, r18
     95c:	73 23       	and	r23, r19
     95e:	67 2b       	or	r22, r23
     960:	29 f1       	breq	.+74     	; 0x9ac <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     962:	68 81       	ld	r22, Y
     964:	79 81       	ldd	r23, Y+1	; 0x01
     966:	67 2b       	or	r22, r23
     968:	09 f5       	brne	.+66     	; 0x9ac <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     96a:	20 95       	com	r18
     96c:	30 95       	com	r19
     96e:	24 23       	and	r18, r20
     970:	35 23       	and	r19, r21
     972:	3b 83       	std	Y+3, r19	; 0x03
     974:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     976:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     97a:	8a 81       	ldd	r24, Y+2	; 0x02
     97c:	9b 81       	ldd	r25, Y+3	; 0x03
     97e:	20 91 54 08 	lds	r18, 0x0854	; 0x800854 <xFreeBytesRemaining>
     982:	30 91 55 08 	lds	r19, 0x0855	; 0x800855 <xFreeBytesRemaining+0x1>
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	90 93 55 08 	sts	0x0855, r25	; 0x800855 <xFreeBytesRemaining+0x1>
     98e:	80 93 54 08 	sts	0x0854, r24	; 0x800854 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     992:	ce 01       	movw	r24, r28
     994:	e0 de       	rcall	.-576    	; 0x756 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     996:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xNumberOfSuccessfulFrees>
     99a:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xNumberOfSuccessfulFrees+0x1>
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <xNumberOfSuccessfulFrees+0x1>
     9a4:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     9a8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	08 95       	ret

000009b6 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9b6:	fc 01       	movw	r30, r24
     9b8:	03 96       	adiw	r24, 0x03	; 3
     9ba:	92 83       	std	Z+2, r25	; 0x02
     9bc:	81 83       	std	Z+1, r24	; 0x01
     9be:	4f ef       	ldi	r20, 0xFF	; 255
     9c0:	5f ef       	ldi	r21, 0xFF	; 255
     9c2:	ba 01       	movw	r22, r20
     9c4:	43 83       	std	Z+3, r20	; 0x03
     9c6:	54 83       	std	Z+4, r21	; 0x04
     9c8:	65 83       	std	Z+5, r22	; 0x05
     9ca:	76 83       	std	Z+6, r23	; 0x06
     9cc:	90 87       	std	Z+8, r25	; 0x08
     9ce:	87 83       	std	Z+7, r24	; 0x07
     9d0:	92 87       	std	Z+10, r25	; 0x0a
     9d2:	81 87       	std	Z+9, r24	; 0x09
     9d4:	10 82       	st	Z, r1
     9d6:	08 95       	ret

000009d8 <vListInitialiseItem>:
     9d8:	fc 01       	movw	r30, r24
     9da:	13 86       	std	Z+11, r1	; 0x0b
     9dc:	12 86       	std	Z+10, r1	; 0x0a
     9de:	08 95       	ret

000009e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9ea:	08 81       	ld	r16, Y
     9ec:	19 81       	ldd	r17, Y+1	; 0x01
     9ee:	2a 81       	ldd	r18, Y+2	; 0x02
     9f0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9f2:	0f 3f       	cpi	r16, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	14 07       	cpc	r17, r20
     9f8:	24 07       	cpc	r18, r20
     9fa:	34 07       	cpc	r19, r20
     9fc:	21 f4       	brne	.+8      	; 0xa06 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9fe:	fc 01       	movw	r30, r24
     a00:	a1 85       	ldd	r26, Z+9	; 0x09
     a02:	b2 85       	ldd	r27, Z+10	; 0x0a
     a04:	11 c0       	rjmp	.+34     	; 0xa28 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a06:	dc 01       	movw	r26, r24
     a08:	13 96       	adiw	r26, 0x03	; 3
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <vListInsert+0x2e>
     a0c:	df 01       	movw	r26, r30
     a0e:	14 96       	adiw	r26, 0x04	; 4
     a10:	ed 91       	ld	r30, X+
     a12:	fc 91       	ld	r31, X
     a14:	15 97       	sbiw	r26, 0x05	; 5
     a16:	40 81       	ld	r20, Z
     a18:	51 81       	ldd	r21, Z+1	; 0x01
     a1a:	62 81       	ldd	r22, Z+2	; 0x02
     a1c:	73 81       	ldd	r23, Z+3	; 0x03
     a1e:	04 17       	cp	r16, r20
     a20:	15 07       	cpc	r17, r21
     a22:	26 07       	cpc	r18, r22
     a24:	37 07       	cpc	r19, r23
     a26:	90 f7       	brcc	.-28     	; 0xa0c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a28:	14 96       	adiw	r26, 0x04	; 4
     a2a:	ed 91       	ld	r30, X+
     a2c:	fc 91       	ld	r31, X
     a2e:	15 97       	sbiw	r26, 0x05	; 5
     a30:	fd 83       	std	Y+5, r31	; 0x05
     a32:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a34:	d7 83       	std	Z+7, r29	; 0x07
     a36:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a38:	bf 83       	std	Y+7, r27	; 0x07
     a3a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a3c:	15 96       	adiw	r26, 0x05	; 5
     a3e:	dc 93       	st	X, r29
     a40:	ce 93       	st	-X, r28
     a42:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a44:	9b 87       	std	Y+11, r25	; 0x0b
     a46:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a48:	fc 01       	movw	r30, r24
     a4a:	20 81       	ld	r18, Z
     a4c:	2f 5f       	subi	r18, 0xFF	; 255
     a4e:	20 83       	st	Z, r18
}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a60:	a2 85       	ldd	r26, Z+10	; 0x0a
     a62:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a64:	c4 81       	ldd	r28, Z+4	; 0x04
     a66:	d5 81       	ldd	r29, Z+5	; 0x05
     a68:	86 81       	ldd	r24, Z+6	; 0x06
     a6a:	97 81       	ldd	r25, Z+7	; 0x07
     a6c:	9f 83       	std	Y+7, r25	; 0x07
     a6e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a70:	c6 81       	ldd	r28, Z+6	; 0x06
     a72:	d7 81       	ldd	r29, Z+7	; 0x07
     a74:	84 81       	ldd	r24, Z+4	; 0x04
     a76:	95 81       	ldd	r25, Z+5	; 0x05
     a78:	9d 83       	std	Y+5, r25	; 0x05
     a7a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a7c:	11 96       	adiw	r26, 0x01	; 1
     a7e:	8d 91       	ld	r24, X+
     a80:	9c 91       	ld	r25, X
     a82:	12 97       	sbiw	r26, 0x02	; 2
     a84:	e8 17       	cp	r30, r24
     a86:	f9 07       	cpc	r31, r25
     a88:	31 f4       	brne	.+12     	; 0xa96 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a8a:	86 81       	ldd	r24, Z+6	; 0x06
     a8c:	97 81       	ldd	r25, Z+7	; 0x07
     a8e:	12 96       	adiw	r26, 0x02	; 2
     a90:	9c 93       	st	X, r25
     a92:	8e 93       	st	-X, r24
     a94:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a96:	13 86       	std	Z+11, r1	; 0x0b
     a98:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a9a:	8c 91       	ld	r24, X
     a9c:	81 50       	subi	r24, 0x01	; 1
     a9e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     aa0:	8c 91       	ld	r24, X
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     aa8:	a8 95       	wdr
     aaa:	90 ec       	ldi	r25, 0xC0	; 192
     aac:	88 e1       	ldi	r24, 0x18	; 24
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	a8 95       	wdr
     ab4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     abe:	08 95       	ret

00000ac0 <pxPortInitialiseStack>:
     ac0:	fc 01       	movw	r30, r24
     ac2:	60 83       	st	Z, r22
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	70 83       	st	Z, r23
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	10 82       	st	Z, r1
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	10 82       	st	Z, r1
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	20 e8       	ldi	r18, 0x80	; 128
     ad4:	20 83       	st	Z, r18
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	10 82       	st	Z, r1
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	10 82       	st	Z, r1
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	10 82       	st	Z, r1
     ae2:	77 97       	sbiw	r30, 0x17	; 23
     ae4:	40 83       	st	Z, r20
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	50 83       	st	Z, r21
     aea:	86 97       	sbiw	r24, 0x26	; 38
     aec:	08 95       	ret

00000aee <xPortStartScheduler>:
     aee:	dc df       	rcall	.-72     	; 0xaa8 <prvSetupTimerInterrupt>
     af0:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
     af4:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
     af8:	cd 91       	ld	r28, X+
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	dd 91       	ld	r29, X+
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	9f 90       	pop	r9
     b2e:	8f 90       	pop	r8
     b30:	7f 90       	pop	r7
     b32:	6f 90       	pop	r6
     b34:	5f 90       	pop	r5
     b36:	4f 90       	pop	r4
     b38:	3f 90       	pop	r3
     b3a:	2f 90       	pop	r2
     b3c:	1f 90       	pop	r1
     b3e:	0f 90       	pop	r0
     b40:	0c be       	out	0x3c, r0	; 60
     b42:	0f 90       	pop	r0
     b44:	0b be       	out	0x3b, r0	; 59
     b46:	0f 90       	pop	r0
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	0f 90       	pop	r0
     b4c:	08 95       	ret
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	08 95       	ret

00000b52 <vPortYield>:
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	0f 92       	push	r0
     b5a:	0b b6       	in	r0, 0x3b	; 59
     b5c:	0f 92       	push	r0
     b5e:	0c b6       	in	r0, 0x3c	; 60
     b60:	0f 92       	push	r0
     b62:	1f 92       	push	r1
     b64:	11 24       	eor	r1, r1
     b66:	2f 92       	push	r2
     b68:	3f 92       	push	r3
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	2f 93       	push	r18
     b88:	3f 93       	push	r19
     b8a:	4f 93       	push	r20
     b8c:	5f 93       	push	r21
     b8e:	6f 93       	push	r22
     b90:	7f 93       	push	r23
     b92:	8f 93       	push	r24
     b94:	9f 93       	push	r25
     b96:	af 93       	push	r26
     b98:	bf 93       	push	r27
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
     ba2:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
     ba6:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
     baa:	0d b6       	in	r0, 0x3d	; 61
     bac:	0d 92       	st	X+, r0
     bae:	0e b6       	in	r0, 0x3e	; 62
     bb0:	0d 92       	st	X+, r0
     bb2:	0e 94 53 12 	call	0x24a6	; 0x24a6 <vTaskSwitchContext>
     bb6:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
     bba:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
     bbe:	cd 91       	ld	r28, X+
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	dd 91       	ld	r29, X+
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	ff 91       	pop	r31
     bc8:	ef 91       	pop	r30
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	7f 91       	pop	r23
     bd8:	6f 91       	pop	r22
     bda:	5f 91       	pop	r21
     bdc:	4f 91       	pop	r20
     bde:	3f 91       	pop	r19
     be0:	2f 91       	pop	r18
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	7f 90       	pop	r7
     bf8:	6f 90       	pop	r6
     bfa:	5f 90       	pop	r5
     bfc:	4f 90       	pop	r4
     bfe:	3f 90       	pop	r3
     c00:	2f 90       	pop	r2
     c02:	1f 90       	pop	r1
     c04:	0f 90       	pop	r0
     c06:	0c be       	out	0x3c, r0	; 60
     c08:	0f 90       	pop	r0
     c0a:	0b be       	out	0x3b, r0	; 59
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	08 95       	ret

00000c14 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	0f 92       	push	r0
     c1c:	0b b6       	in	r0, 0x3b	; 59
     c1e:	0f 92       	push	r0
     c20:	0c b6       	in	r0, 0x3c	; 60
     c22:	0f 92       	push	r0
     c24:	1f 92       	push	r1
     c26:	11 24       	eor	r1, r1
     c28:	2f 92       	push	r2
     c2a:	3f 92       	push	r3
     c2c:	4f 92       	push	r4
     c2e:	5f 92       	push	r5
     c30:	6f 92       	push	r6
     c32:	7f 92       	push	r7
     c34:	8f 92       	push	r8
     c36:	9f 92       	push	r9
     c38:	af 92       	push	r10
     c3a:	bf 92       	push	r11
     c3c:	cf 92       	push	r12
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
     c64:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
     c68:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
     c6c:	0d b6       	in	r0, 0x3d	; 61
     c6e:	0d 92       	st	X+, r0
     c70:	0e b6       	in	r0, 0x3e	; 62
     c72:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c74:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c76:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <xTaskIncrementTick>
     c7a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c7c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c80:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
     c84:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
     c88:	cd 91       	ld	r28, X+
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	dd 91       	ld	r29, X+
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	7f 90       	pop	r7
     cc2:	6f 90       	pop	r6
     cc4:	5f 90       	pop	r5
     cc6:	4f 90       	pop	r4
     cc8:	3f 90       	pop	r3
     cca:	2f 90       	pop	r2
     ccc:	1f 90       	pop	r1
     cce:	0f 90       	pop	r0
     cd0:	0c be       	out	0x3c, r0	; 60
     cd2:	0f 90       	pop	r0
     cd4:	0b be       	out	0x3b, r0	; 59
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     cdc:	08 95       	ret

00000cde <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cde:	9a df       	rcall	.-204    	; 0xc14 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ce0:	18 95       	reti

00000ce2 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ce2:	dc 01       	movw	r26, r24
     ce4:	53 96       	adiw	r26, 0x13	; 19
     ce6:	2c 91       	ld	r18, X
     ce8:	53 97       	sbiw	r26, 0x13	; 19
     cea:	22 23       	and	r18, r18
     cec:	41 f0       	breq	.+16     	; 0xcfe <prvGetDisinheritPriorityAfterTimeout+0x1c>
     cee:	5a 96       	adiw	r26, 0x1a	; 26
     cf0:	ed 91       	ld	r30, X+
     cf2:	fc 91       	ld	r31, X
     cf4:	5b 97       	sbiw	r26, 0x1b	; 27
     cf6:	90 81       	ld	r25, Z
     cf8:	8a e0       	ldi	r24, 0x0A	; 10
     cfa:	89 1b       	sub	r24, r25
     cfc:	08 95       	ret
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	08 95       	ret

00000d02 <prvIsQueueEmpty>:
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	0f 92       	push	r0
     d08:	fc 01       	movw	r30, r24
     d0a:	86 8d       	ldd	r24, Z+30	; 0x1e
     d0c:	81 11       	cpse	r24, r1
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <prvIsQueueEmpty+0x12>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <prvIsQueueEmpty+0x14>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	08 95       	ret

00000d1c <prvIsQueueFull>:
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	0f 92       	push	r0
     d22:	fc 01       	movw	r30, r24
     d24:	26 8d       	ldd	r18, Z+30	; 0x1e
     d26:	87 8d       	ldd	r24, Z+31	; 0x1f
     d28:	28 13       	cpse	r18, r24
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <prvIsQueueFull+0x14>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <prvIsQueueFull+0x16>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	08 95       	ret

00000d38 <prvCopyDataToQueue>:
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
     d42:	04 2f       	mov	r16, r20
     d44:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d46:	48 a1       	ldd	r20, Y+32	; 0x20
     d48:	41 11       	cpse	r20, r1
     d4a:	0c c0       	rjmp	.+24     	; 0xd64 <prvCopyDataToQueue+0x2c>
     d4c:	88 81       	ld	r24, Y
     d4e:	99 81       	ldd	r25, Y+1	; 0x01
     d50:	89 2b       	or	r24, r25
     d52:	09 f0       	breq	.+2      	; 0xd56 <prvCopyDataToQueue+0x1e>
     d54:	42 c0       	rjmp	.+132    	; 0xdda <prvCopyDataToQueue+0xa2>
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <xTaskPriorityDisinherit>
     d5e:	1d 82       	std	Y+5, r1	; 0x05
     d60:	1c 82       	std	Y+4, r1	; 0x04
     d62:	42 c0       	rjmp	.+132    	; 0xde8 <prvCopyDataToQueue+0xb0>
     d64:	01 11       	cpse	r16, r1
     d66:	17 c0       	rjmp	.+46     	; 0xd96 <prvCopyDataToQueue+0x5e>
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <memcpy>
     d72:	28 a1       	ldd	r18, Y+32	; 0x20
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	82 0f       	add	r24, r18
     d7a:	91 1d       	adc	r25, r1
     d7c:	9b 83       	std	Y+3, r25	; 0x03
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	82 17       	cp	r24, r18
     d86:	93 07       	cpc	r25, r19
     d88:	50 f1       	brcs	.+84     	; 0xdde <prvCopyDataToQueue+0xa6>
     d8a:	88 81       	ld	r24, Y
     d8c:	99 81       	ldd	r25, Y+1	; 0x01
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	29 c0       	rjmp	.+82     	; 0xde8 <prvCopyDataToQueue+0xb0>
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	8e 81       	ldd	r24, Y+6	; 0x06
     d9a:	9f 81       	ldd	r25, Y+7	; 0x07
     d9c:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <memcpy>
     da0:	88 a1       	ldd	r24, Y+32	; 0x20
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	91 95       	neg	r25
     da6:	81 95       	neg	r24
     da8:	91 09       	sbc	r25, r1
     daa:	2e 81       	ldd	r18, Y+6	; 0x06
     dac:	3f 81       	ldd	r19, Y+7	; 0x07
     dae:	28 0f       	add	r18, r24
     db0:	39 1f       	adc	r19, r25
     db2:	3f 83       	std	Y+7, r19	; 0x07
     db4:	2e 83       	std	Y+6, r18	; 0x06
     db6:	48 81       	ld	r20, Y
     db8:	59 81       	ldd	r21, Y+1	; 0x01
     dba:	24 17       	cp	r18, r20
     dbc:	35 07       	cpc	r19, r21
     dbe:	30 f4       	brcc	.+12     	; 0xdcc <prvCopyDataToQueue+0x94>
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	3d 81       	ldd	r19, Y+5	; 0x05
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	9f 83       	std	Y+7, r25	; 0x07
     dca:	8e 83       	std	Y+6, r24	; 0x06
     dcc:	02 30       	cpi	r16, 0x02	; 2
     dce:	49 f4       	brne	.+18     	; 0xde2 <prvCopyDataToQueue+0xaa>
     dd0:	11 23       	and	r17, r17
     dd2:	49 f0       	breq	.+18     	; 0xde6 <prvCopyDataToQueue+0xae>
     dd4:	11 50       	subi	r17, 0x01	; 1
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <prvCopyDataToQueue+0xb0>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <prvCopyDataToQueue+0xb0>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <prvCopyDataToQueue+0xb0>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <prvCopyDataToQueue+0xb0>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	1f 5f       	subi	r17, 0xFF	; 255
     dea:	1e 8f       	std	Y+30, r17	; 0x1e
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	08 95       	ret

00000df6 <prvCopyDataFromQueue>:
     df6:	fc 01       	movw	r30, r24
     df8:	40 a1       	ldd	r20, Z+32	; 0x20
     dfa:	44 23       	and	r20, r20
     dfc:	a9 f0       	breq	.+42     	; 0xe28 <prvCopyDataFromQueue+0x32>
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	26 81       	ldd	r18, Z+6	; 0x06
     e02:	37 81       	ldd	r19, Z+7	; 0x07
     e04:	24 0f       	add	r18, r20
     e06:	35 1f       	adc	r19, r21
     e08:	37 83       	std	Z+7, r19	; 0x07
     e0a:	26 83       	std	Z+6, r18	; 0x06
     e0c:	84 81       	ldd	r24, Z+4	; 0x04
     e0e:	95 81       	ldd	r25, Z+5	; 0x05
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	20 f0       	brcs	.+8      	; 0xe1e <prvCopyDataFromQueue+0x28>
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	97 83       	std	Z+7, r25	; 0x07
     e1c:	86 83       	std	Z+6, r24	; 0x06
     e1e:	cb 01       	movw	r24, r22
     e20:	66 81       	ldd	r22, Z+6	; 0x06
     e22:	77 81       	ldd	r23, Z+7	; 0x07
     e24:	0c 94 7f 2f 	jmp	0x5efe	; 0x5efe <memcpy>
     e28:	08 95       	ret

00000e2a <prvUnlockQueue>:
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	0f 92       	push	r0
     e38:	1a a1       	ldd	r17, Y+34	; 0x22
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <prvUnlockQueue+0x28>
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	88 23       	and	r24, r24
     e40:	51 f0       	breq	.+20     	; 0xe56 <prvUnlockQueue+0x2c>
     e42:	ce 01       	movw	r24, r28
     e44:	43 96       	adiw	r24, 0x13	; 19
     e46:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <xTaskRemoveFromEventList>
     e4a:	81 11       	cpse	r24, r1
     e4c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <vTaskMissedYield>
     e50:	11 50       	subi	r17, 0x01	; 1
     e52:	11 16       	cp	r1, r17
     e54:	9c f3       	brlt	.-26     	; 0xe3c <prvUnlockQueue+0x12>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	8a a3       	std	Y+34, r24	; 0x22
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	0f 92       	push	r0
     e64:	19 a1       	ldd	r17, Y+33	; 0x21
     e66:	0b c0       	rjmp	.+22     	; 0xe7e <prvUnlockQueue+0x54>
     e68:	88 85       	ldd	r24, Y+8	; 0x08
     e6a:	88 23       	and	r24, r24
     e6c:	51 f0       	breq	.+20     	; 0xe82 <prvUnlockQueue+0x58>
     e6e:	ce 01       	movw	r24, r28
     e70:	08 96       	adiw	r24, 0x08	; 8
     e72:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <xTaskRemoveFromEventList>
     e76:	81 11       	cpse	r24, r1
     e78:	0e 94 31 15 	call	0x2a62	; 0x2a62 <vTaskMissedYield>
     e7c:	11 50       	subi	r17, 0x01	; 1
     e7e:	11 16       	cp	r1, r17
     e80:	9c f3       	brlt	.-26     	; 0xe68 <prvUnlockQueue+0x3e>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	89 a3       	std	Y+33, r24	; 0x21
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	08 95       	ret

00000e92 <xQueueGenericReset>:
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	0f 92       	push	r0
     e9e:	e8 81       	ld	r30, Y
     ea0:	f9 81       	ldd	r31, Y+1	; 0x01
     ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea4:	28 a1       	ldd	r18, Y+32	; 0x20
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	82 9f       	mul	r24, r18
     eac:	a0 01       	movw	r20, r0
     eae:	83 9f       	mul	r24, r19
     eb0:	50 0d       	add	r21, r0
     eb2:	92 9f       	mul	r25, r18
     eb4:	50 0d       	add	r21, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	4e 0f       	add	r20, r30
     eba:	5f 1f       	adc	r21, r31
     ebc:	5d 83       	std	Y+5, r21	; 0x05
     ebe:	4c 83       	std	Y+4, r20	; 0x04
     ec0:	1e 8e       	std	Y+30, r1	; 0x1e
     ec2:	fb 83       	std	Y+3, r31	; 0x03
     ec4:	ea 83       	std	Y+2, r30	; 0x02
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	28 9f       	mul	r18, r24
     eca:	a0 01       	movw	r20, r0
     ecc:	29 9f       	mul	r18, r25
     ece:	50 0d       	add	r21, r0
     ed0:	38 9f       	mul	r19, r24
     ed2:	50 0d       	add	r21, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	cf 01       	movw	r24, r30
     ed8:	84 0f       	add	r24, r20
     eda:	95 1f       	adc	r25, r21
     edc:	9f 83       	std	Y+7, r25	; 0x07
     ede:	8e 83       	std	Y+6, r24	; 0x06
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	89 a3       	std	Y+33, r24	; 0x21
     ee4:	8a a3       	std	Y+34, r24	; 0x22
     ee6:	61 11       	cpse	r22, r1
     ee8:	0b c0       	rjmp	.+22     	; 0xf00 <xQueueGenericReset+0x6e>
     eea:	88 85       	ldd	r24, Y+8	; 0x08
     eec:	88 23       	and	r24, r24
     eee:	71 f0       	breq	.+28     	; 0xf0c <xQueueGenericReset+0x7a>
     ef0:	ce 01       	movw	r24, r28
     ef2:	08 96       	adiw	r24, 0x08	; 8
     ef4:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <xTaskRemoveFromEventList>
     ef8:	88 23       	and	r24, r24
     efa:	41 f0       	breq	.+16     	; 0xf0c <xQueueGenericReset+0x7a>
     efc:	2a de       	rcall	.-940    	; 0xb52 <vPortYield>
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <xQueueGenericReset+0x7a>
     f00:	ce 01       	movw	r24, r28
     f02:	08 96       	adiw	r24, 0x08	; 8
     f04:	58 dd       	rcall	.-1360   	; 0x9b6 <vListInitialise>
     f06:	ce 01       	movw	r24, r28
     f08:	43 96       	adiw	r24, 0x13	; 19
     f0a:	55 dd       	rcall	.-1366   	; 0x9b6 <vListInitialise>
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <prvInitialiseNewQueue>:
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	f8 01       	movw	r30, r16
     f1e:	61 11       	cpse	r22, r1
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <prvInitialiseNewQueue+0x10>
     f22:	11 83       	std	Z+1, r17	; 0x01
     f24:	00 83       	st	Z, r16
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <prvInitialiseNewQueue+0x14>
     f28:	51 83       	std	Z+1, r21	; 0x01
     f2a:	40 83       	st	Z, r20
     f2c:	87 8f       	std	Z+31, r24	; 0x1f
     f2e:	60 a3       	std	Z+32, r22	; 0x20
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	cf 01       	movw	r24, r30
     f34:	ae df       	rcall	.-164    	; 0xe92 <xQueueGenericReset>
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <xQueueGenericCreate>:
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	f8 2e       	mov	r15, r24
     f4c:	e6 2e       	mov	r14, r22
     f4e:	d4 2e       	mov	r13, r20
     f50:	86 9f       	mul	r24, r22
     f52:	c0 01       	movw	r24, r0
     f54:	11 24       	eor	r1, r1
     f56:	83 96       	adiw	r24, 0x23	; 35
     f58:	48 dc       	rcall	.-1904   	; 0x7ea <pvPortMalloc>
     f5a:	ec 01       	movw	r28, r24
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	41 f0       	breq	.+16     	; 0xf70 <xQueueGenericCreate+0x34>
     f60:	8c 01       	movw	r16, r24
     f62:	2d 2d       	mov	r18, r13
     f64:	ac 01       	movw	r20, r24
     f66:	4d 5d       	subi	r20, 0xDD	; 221
     f68:	5f 4f       	sbci	r21, 0xFF	; 255
     f6a:	6e 2d       	mov	r22, r14
     f6c:	8f 2d       	mov	r24, r15
     f6e:	d4 df       	rcall	.-88     	; 0xf18 <prvInitialiseNewQueue>
     f70:	ce 01       	movw	r24, r28
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	df 90       	pop	r13
     f80:	08 95       	ret

00000f82 <xQueueGenericSend>:
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	29 97       	sbiw	r28, 0x09	; 9
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	7c 01       	movw	r14, r24
     fa4:	6b 01       	movw	r12, r22
     fa6:	2e 83       	std	Y+6, r18	; 0x06
     fa8:	3f 83       	std	Y+7, r19	; 0x07
     faa:	48 87       	std	Y+8, r20	; 0x08
     fac:	59 87       	std	Y+9, r21	; 0x09
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	0f 92       	push	r0
     fb6:	f7 01       	movw	r30, r14
     fb8:	96 8d       	ldd	r25, Z+30	; 0x1e
     fba:	87 8d       	ldd	r24, Z+31	; 0x1f
     fbc:	98 17       	cp	r25, r24
     fbe:	10 f0       	brcs	.+4      	; 0xfc4 <xQueueGenericSend+0x42>
     fc0:	02 30       	cpi	r16, 0x02	; 2
     fc2:	b1 f4       	brne	.+44     	; 0xff0 <xQueueGenericSend+0x6e>
     fc4:	40 2f       	mov	r20, r16
     fc6:	b6 01       	movw	r22, r12
     fc8:	c7 01       	movw	r24, r14
     fca:	b6 de       	rcall	.-660    	; 0xd38 <prvCopyDataToQueue>
     fcc:	f7 01       	movw	r30, r14
     fce:	93 89       	ldd	r25, Z+19	; 0x13
     fd0:	99 23       	and	r25, r25
     fd2:	41 f0       	breq	.+16     	; 0xfe4 <xQueueGenericSend+0x62>
     fd4:	c7 01       	movw	r24, r14
     fd6:	43 96       	adiw	r24, 0x13	; 19
     fd8:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <xTaskRemoveFromEventList>
     fdc:	88 23       	and	r24, r24
     fde:	21 f0       	breq	.+8      	; 0xfe8 <xQueueGenericSend+0x66>
     fe0:	b8 dd       	rcall	.-1168   	; 0xb52 <vPortYield>
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <xQueueGenericSend+0x66>
     fe4:	81 11       	cpse	r24, r1
     fe6:	b5 dd       	rcall	.-1174   	; 0xb52 <vPortYield>
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	4c c0       	rjmp	.+152    	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
     ff0:	8e 81       	ldd	r24, Y+6	; 0x06
     ff2:	9f 81       	ldd	r25, Y+7	; 0x07
     ff4:	a8 85       	ldd	r26, Y+8	; 0x08
     ff6:	b9 85       	ldd	r27, Y+9	; 0x09
     ff8:	89 2b       	or	r24, r25
     ffa:	8a 2b       	or	r24, r26
     ffc:	8b 2b       	or	r24, r27
     ffe:	21 f4       	brne	.+8      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	40 c0       	rjmp	.+128    	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
    1008:	11 11       	cpse	r17, r1
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	0e 94 ba 14 	call	0x2974	; 0x2974 <vTaskInternalSetTimeOutState>
    1014:	11 e0       	ldi	r17, 0x01	; 1
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	a9 d7       	rcall	.+3922   	; 0x1f6e <vTaskSuspendAll>
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	0f 92       	push	r0
    1022:	f7 01       	movw	r30, r14
    1024:	81 a1       	ldd	r24, Z+33	; 0x21
    1026:	8f 3f       	cpi	r24, 0xFF	; 255
    1028:	09 f4       	brne	.+2      	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    102a:	11 a2       	std	Z+33, r1	; 0x21
    102c:	f7 01       	movw	r30, r14
    102e:	82 a1       	ldd	r24, Z+34	; 0x22
    1030:	8f 3f       	cpi	r24, 0xFF	; 255
    1032:	09 f4       	brne	.+2      	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1034:	12 a2       	std	Z+34, r1	; 0x22
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	be 01       	movw	r22, r28
    103c:	6a 5f       	subi	r22, 0xFA	; 250
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskCheckForTimeOut>
    1048:	81 11       	cpse	r24, r1
    104a:	19 c0       	rjmp	.+50     	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
    104c:	c7 01       	movw	r24, r14
    104e:	66 de       	rcall	.-820    	; 0xd1c <prvIsQueueFull>
    1050:	88 23       	and	r24, r24
    1052:	81 f0       	breq	.+32     	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    1054:	4e 81       	ldd	r20, Y+6	; 0x06
    1056:	5f 81       	ldd	r21, Y+7	; 0x07
    1058:	68 85       	ldd	r22, Y+8	; 0x08
    105a:	79 85       	ldd	r23, Y+9	; 0x09
    105c:	c7 01       	movw	r24, r14
    105e:	08 96       	adiw	r24, 0x08	; 8
    1060:	0e 94 b8 12 	call	0x2570	; 0x2570 <vTaskPlaceOnEventList>
    1064:	c7 01       	movw	r24, r14
    1066:	e1 de       	rcall	.-574    	; 0xe2a <prvUnlockQueue>
    1068:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>
    106c:	81 11       	cpse	r24, r1
    106e:	a0 cf       	rjmp	.-192    	; 0xfb0 <xQueueGenericSend+0x2e>
    1070:	70 dd       	rcall	.-1312   	; 0xb52 <vPortYield>
    1072:	9e cf       	rjmp	.-196    	; 0xfb0 <xQueueGenericSend+0x2e>
    1074:	c7 01       	movw	r24, r14
    1076:	d9 de       	rcall	.-590    	; 0xe2a <prvUnlockQueue>
    1078:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>
    107c:	99 cf       	rjmp	.-206    	; 0xfb0 <xQueueGenericSend+0x2e>
    107e:	c7 01       	movw	r24, r14
    1080:	d4 de       	rcall	.-600    	; 0xe2a <prvUnlockQueue>
    1082:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	29 96       	adiw	r28, 0x09	; 9
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	df 90       	pop	r13
    10a2:	cf 90       	pop	r12
    10a4:	08 95       	ret

000010a6 <xQueueGenericSendFromISR>:
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	8a 01       	movw	r16, r20
    10b4:	fc 01       	movw	r30, r24
    10b6:	56 8d       	ldd	r21, Z+30	; 0x1e
    10b8:	37 8d       	ldd	r19, Z+31	; 0x1f
    10ba:	53 17       	cp	r21, r19
    10bc:	10 f0       	brcs	.+4      	; 0x10c2 <xQueueGenericSendFromISR+0x1c>
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	f9 f4       	brne	.+62     	; 0x1100 <xQueueGenericSendFromISR+0x5a>
    10c2:	42 2f       	mov	r20, r18
    10c4:	78 01       	movw	r14, r16
    10c6:	ec 01       	movw	r28, r24
    10c8:	1a a1       	ldd	r17, Y+34	; 0x22
    10ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10cc:	ce 01       	movw	r24, r28
    10ce:	34 de       	rcall	.-920    	; 0xd38 <prvCopyDataToQueue>
    10d0:	1f 3f       	cpi	r17, 0xFF	; 255
    10d2:	81 f4       	brne	.+32     	; 0x10f4 <xQueueGenericSendFromISR+0x4e>
    10d4:	8b 89       	ldd	r24, Y+19	; 0x13
    10d6:	88 23       	and	r24, r24
    10d8:	a9 f0       	breq	.+42     	; 0x1104 <xQueueGenericSendFromISR+0x5e>
    10da:	ce 01       	movw	r24, r28
    10dc:	43 96       	adiw	r24, 0x13	; 19
    10de:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <xTaskRemoveFromEventList>
    10e2:	88 23       	and	r24, r24
    10e4:	89 f0       	breq	.+34     	; 0x1108 <xQueueGenericSendFromISR+0x62>
    10e6:	e1 14       	cp	r14, r1
    10e8:	f1 04       	cpc	r15, r1
    10ea:	81 f0       	breq	.+32     	; 0x110c <xQueueGenericSendFromISR+0x66>
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	f7 01       	movw	r30, r14
    10f0:	80 83       	st	Z, r24
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <xQueueGenericSendFromISR+0x68>
    10f4:	ff 24       	eor	r15, r15
    10f6:	f3 94       	inc	r15
    10f8:	f1 0e       	add	r15, r17
    10fa:	fa a2       	std	Y+34, r15	; 0x22
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	07 c0       	rjmp	.+14     	; 0x110e <xQueueGenericSendFromISR+0x68>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	05 c0       	rjmp	.+10     	; 0x110e <xQueueGenericSendFromISR+0x68>
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	03 c0       	rjmp	.+6      	; 0x110e <xQueueGenericSendFromISR+0x68>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	01 c0       	rjmp	.+2      	; 0x110e <xQueueGenericSendFromISR+0x68>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	08 95       	ret

0000111c <xQueueReceive>:
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	29 97       	sbiw	r28, 0x09	; 9
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	8c 01       	movw	r16, r24
    113e:	6b 01       	movw	r12, r22
    1140:	2e 83       	std	Y+6, r18	; 0x06
    1142:	3f 83       	std	Y+7, r19	; 0x07
    1144:	48 87       	std	Y+8, r20	; 0x08
    1146:	59 87       	std	Y+9, r21	; 0x09
    1148:	e1 2c       	mov	r14, r1
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	0f 92       	push	r0
    1150:	f8 01       	movw	r30, r16
    1152:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1154:	ff 20       	and	r15, r15
    1156:	99 f0       	breq	.+38     	; 0x117e <xQueueReceive+0x62>
    1158:	b6 01       	movw	r22, r12
    115a:	c8 01       	movw	r24, r16
    115c:	4c de       	rcall	.-872    	; 0xdf6 <prvCopyDataFromQueue>
    115e:	fa 94       	dec	r15
    1160:	f8 01       	movw	r30, r16
    1162:	f6 8e       	std	Z+30, r15	; 0x1e
    1164:	80 85       	ldd	r24, Z+8	; 0x08
    1166:	88 23       	and	r24, r24
    1168:	31 f0       	breq	.+12     	; 0x1176 <xQueueReceive+0x5a>
    116a:	c8 01       	movw	r24, r16
    116c:	08 96       	adiw	r24, 0x08	; 8
    116e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <xTaskRemoveFromEventList>
    1172:	81 11       	cpse	r24, r1
    1174:	ee dc       	rcall	.-1572   	; 0xb52 <vPortYield>
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	4f c0       	rjmp	.+158    	; 0x121c <xQueueReceive+0x100>
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	9f 81       	ldd	r25, Y+7	; 0x07
    1182:	a8 85       	ldd	r26, Y+8	; 0x08
    1184:	b9 85       	ldd	r27, Y+9	; 0x09
    1186:	89 2b       	or	r24, r25
    1188:	8a 2b       	or	r24, r26
    118a:	8b 2b       	or	r24, r27
    118c:	21 f4       	brne	.+8      	; 0x1196 <xQueueReceive+0x7a>
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	43 c0       	rjmp	.+134    	; 0x121c <xQueueReceive+0x100>
    1196:	e1 10       	cpse	r14, r1
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <xQueueReceive+0x8a>
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 ba 14 	call	0x2974	; 0x2974 <vTaskInternalSetTimeOutState>
    11a2:	ee 24       	eor	r14, r14
    11a4:	e3 94       	inc	r14
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	e1 d6       	rcall	.+3522   	; 0x1f6e <vTaskSuspendAll>
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	0f 92       	push	r0
    11b2:	f8 01       	movw	r30, r16
    11b4:	81 a1       	ldd	r24, Z+33	; 0x21
    11b6:	8f 3f       	cpi	r24, 0xFF	; 255
    11b8:	09 f4       	brne	.+2      	; 0x11bc <xQueueReceive+0xa0>
    11ba:	11 a2       	std	Z+33, r1	; 0x21
    11bc:	f8 01       	movw	r30, r16
    11be:	82 a1       	ldd	r24, Z+34	; 0x22
    11c0:	8f 3f       	cpi	r24, 0xFF	; 255
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <xQueueReceive+0xaa>
    11c4:	12 a2       	std	Z+34, r1	; 0x22
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	be 01       	movw	r22, r28
    11cc:	6a 5f       	subi	r22, 0xFA	; 250
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskCheckForTimeOut>
    11d8:	81 11       	cpse	r24, r1
    11da:	17 c0       	rjmp	.+46     	; 0x120a <xQueueReceive+0xee>
    11dc:	c8 01       	movw	r24, r16
    11de:	91 dd       	rcall	.-1246   	; 0xd02 <prvIsQueueEmpty>
    11e0:	88 23       	and	r24, r24
    11e2:	79 f0       	breq	.+30     	; 0x1202 <xQueueReceive+0xe6>
    11e4:	4e 81       	ldd	r20, Y+6	; 0x06
    11e6:	5f 81       	ldd	r21, Y+7	; 0x07
    11e8:	68 85       	ldd	r22, Y+8	; 0x08
    11ea:	79 85       	ldd	r23, Y+9	; 0x09
    11ec:	c8 01       	movw	r24, r16
    11ee:	43 96       	adiw	r24, 0x13	; 19
    11f0:	0e 94 b8 12 	call	0x2570	; 0x2570 <vTaskPlaceOnEventList>
    11f4:	c8 01       	movw	r24, r16
    11f6:	19 de       	rcall	.-974    	; 0xe2a <prvUnlockQueue>
    11f8:	fa d7       	rcall	.+4084   	; 0x21ee <xTaskResumeAll>
    11fa:	81 11       	cpse	r24, r1
    11fc:	a6 cf       	rjmp	.-180    	; 0x114a <xQueueReceive+0x2e>
    11fe:	a9 dc       	rcall	.-1710   	; 0xb52 <vPortYield>
    1200:	a4 cf       	rjmp	.-184    	; 0x114a <xQueueReceive+0x2e>
    1202:	c8 01       	movw	r24, r16
    1204:	12 de       	rcall	.-988    	; 0xe2a <prvUnlockQueue>
    1206:	f3 d7       	rcall	.+4070   	; 0x21ee <xTaskResumeAll>
    1208:	a0 cf       	rjmp	.-192    	; 0x114a <xQueueReceive+0x2e>
    120a:	c8 01       	movw	r24, r16
    120c:	0e de       	rcall	.-996    	; 0xe2a <prvUnlockQueue>
    120e:	ef d7       	rcall	.+4062   	; 0x21ee <xTaskResumeAll>
    1210:	c8 01       	movw	r24, r16
    1212:	77 dd       	rcall	.-1298   	; 0xd02 <prvIsQueueEmpty>
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <xQueueReceive+0xfe>
    1218:	98 cf       	rjmp	.-208    	; 0x114a <xQueueReceive+0x2e>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	29 96       	adiw	r28, 0x09	; 9
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	08 95       	ret

0000123a <xQueueSemaphoreTake>:
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	29 97       	sbiw	r28, 0x09	; 9
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	8c 01       	movw	r16, r24
    1258:	4e 83       	std	Y+6, r20	; 0x06
    125a:	5f 83       	std	Y+7, r21	; 0x07
    125c:	68 87       	std	Y+8, r22	; 0x08
    125e:	79 87       	std	Y+9, r23	; 0x09
    1260:	e1 2c       	mov	r14, r1
    1262:	f1 2c       	mov	r15, r1
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	0f 92       	push	r0
    126a:	f8 01       	movw	r30, r16
    126c:	86 8d       	ldd	r24, Z+30	; 0x1e
    126e:	88 23       	and	r24, r24
    1270:	c9 f0       	breq	.+50     	; 0x12a4 <xQueueSemaphoreTake+0x6a>
    1272:	81 50       	subi	r24, 0x01	; 1
    1274:	86 8f       	std	Z+30, r24	; 0x1e
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	89 2b       	or	r24, r25
    127c:	29 f4       	brne	.+10     	; 0x1288 <xQueueSemaphoreTake+0x4e>
    127e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <pvTaskIncrementMutexHeldCount>
    1282:	f8 01       	movw	r30, r16
    1284:	95 83       	std	Z+5, r25	; 0x05
    1286:	84 83       	std	Z+4, r24	; 0x04
    1288:	f8 01       	movw	r30, r16
    128a:	80 85       	ldd	r24, Z+8	; 0x08
    128c:	88 23       	and	r24, r24
    128e:	31 f0       	breq	.+12     	; 0x129c <xQueueSemaphoreTake+0x62>
    1290:	c8 01       	movw	r24, r16
    1292:	08 96       	adiw	r24, 0x08	; 8
    1294:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <xTaskRemoveFromEventList>
    1298:	81 11       	cpse	r24, r1
    129a:	5b dc       	rcall	.-1866   	; 0xb52 <vPortYield>
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	6f c0       	rjmp	.+222    	; 0x1382 <xQueueSemaphoreTake+0x148>
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	9f 81       	ldd	r25, Y+7	; 0x07
    12a8:	a8 85       	ldd	r26, Y+8	; 0x08
    12aa:	b9 85       	ldd	r27, Y+9	; 0x09
    12ac:	89 2b       	or	r24, r25
    12ae:	8a 2b       	or	r24, r26
    12b0:	8b 2b       	or	r24, r27
    12b2:	21 f4       	brne	.+8      	; 0x12bc <xQueueSemaphoreTake+0x82>
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	63 c0       	rjmp	.+198    	; 0x1382 <xQueueSemaphoreTake+0x148>
    12bc:	f1 10       	cpse	r15, r1
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <xQueueSemaphoreTake+0x92>
    12c0:	ce 01       	movw	r24, r28
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	0e 94 ba 14 	call	0x2974	; 0x2974 <vTaskInternalSetTimeOutState>
    12c8:	ff 24       	eor	r15, r15
    12ca:	f3 94       	inc	r15
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	4e d6       	rcall	.+3228   	; 0x1f6e <vTaskSuspendAll>
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	0f 92       	push	r0
    12d8:	f8 01       	movw	r30, r16
    12da:	81 a1       	ldd	r24, Z+33	; 0x21
    12dc:	8f 3f       	cpi	r24, 0xFF	; 255
    12de:	09 f4       	brne	.+2      	; 0x12e2 <xQueueSemaphoreTake+0xa8>
    12e0:	11 a2       	std	Z+33, r1	; 0x21
    12e2:	f8 01       	movw	r30, r16
    12e4:	82 a1       	ldd	r24, Z+34	; 0x22
    12e6:	8f 3f       	cpi	r24, 0xFF	; 255
    12e8:	09 f4       	brne	.+2      	; 0x12ec <xQueueSemaphoreTake+0xb2>
    12ea:	12 a2       	std	Z+34, r1	; 0x22
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	be 01       	movw	r22, r28
    12f2:	6a 5f       	subi	r22, 0xFA	; 250
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	ce 01       	movw	r24, r28
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskCheckForTimeOut>
    12fe:	81 11       	cpse	r24, r1
    1300:	26 c0       	rjmp	.+76     	; 0x134e <xQueueSemaphoreTake+0x114>
    1302:	c8 01       	movw	r24, r16
    1304:	fe dc       	rcall	.-1540   	; 0xd02 <prvIsQueueEmpty>
    1306:	88 23       	and	r24, r24
    1308:	f1 f0       	breq	.+60     	; 0x1346 <xQueueSemaphoreTake+0x10c>
    130a:	f8 01       	movw	r30, r16
    130c:	80 81       	ld	r24, Z
    130e:	91 81       	ldd	r25, Z+1	; 0x01
    1310:	89 2b       	or	r24, r25
    1312:	51 f4       	brne	.+20     	; 0x1328 <xQueueSemaphoreTake+0xee>
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	0f 92       	push	r0
    131a:	84 81       	ldd	r24, Z+4	; 0x04
    131c:	95 81       	ldd	r25, Z+5	; 0x05
    131e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <xTaskPriorityInherit>
    1322:	e8 2e       	mov	r14, r24
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	4e 81       	ldd	r20, Y+6	; 0x06
    132a:	5f 81       	ldd	r21, Y+7	; 0x07
    132c:	68 85       	ldd	r22, Y+8	; 0x08
    132e:	79 85       	ldd	r23, Y+9	; 0x09
    1330:	c8 01       	movw	r24, r16
    1332:	43 96       	adiw	r24, 0x13	; 19
    1334:	0e 94 b8 12 	call	0x2570	; 0x2570 <vTaskPlaceOnEventList>
    1338:	c8 01       	movw	r24, r16
    133a:	77 dd       	rcall	.-1298   	; 0xe2a <prvUnlockQueue>
    133c:	58 d7       	rcall	.+3760   	; 0x21ee <xTaskResumeAll>
    133e:	81 11       	cpse	r24, r1
    1340:	91 cf       	rjmp	.-222    	; 0x1264 <xQueueSemaphoreTake+0x2a>
    1342:	07 dc       	rcall	.-2034   	; 0xb52 <vPortYield>
    1344:	8f cf       	rjmp	.-226    	; 0x1264 <xQueueSemaphoreTake+0x2a>
    1346:	c8 01       	movw	r24, r16
    1348:	70 dd       	rcall	.-1312   	; 0xe2a <prvUnlockQueue>
    134a:	51 d7       	rcall	.+3746   	; 0x21ee <xTaskResumeAll>
    134c:	8b cf       	rjmp	.-234    	; 0x1264 <xQueueSemaphoreTake+0x2a>
    134e:	c8 01       	movw	r24, r16
    1350:	6c dd       	rcall	.-1320   	; 0xe2a <prvUnlockQueue>
    1352:	4d d7       	rcall	.+3738   	; 0x21ee <xTaskResumeAll>
    1354:	c8 01       	movw	r24, r16
    1356:	d5 dc       	rcall	.-1622   	; 0xd02 <prvIsQueueEmpty>
    1358:	88 23       	and	r24, r24
    135a:	09 f4       	brne	.+2      	; 0x135e <xQueueSemaphoreTake+0x124>
    135c:	83 cf       	rjmp	.-250    	; 0x1264 <xQueueSemaphoreTake+0x2a>
    135e:	ee 20       	and	r14, r14
    1360:	79 f0       	breq	.+30     	; 0x1380 <xQueueSemaphoreTake+0x146>
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	0f 92       	push	r0
    1368:	c8 01       	movw	r24, r16
    136a:	bb dc       	rcall	.-1674   	; 0xce2 <prvGetDisinheritPriorityAfterTimeout>
    136c:	68 2f       	mov	r22, r24
    136e:	f8 01       	movw	r30, r16
    1370:	84 81       	ldd	r24, Z+4	; 0x04
    1372:	95 81       	ldd	r25, Z+5	; 0x05
    1374:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <vTaskPriorityDisinheritAfterTimeout>
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <xQueueSemaphoreTake+0x148>
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	29 96       	adiw	r28, 0x09	; 9
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	08 95       	ret

0000139c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	0f 92       	push	r0
    13a8:	89 a1       	ldd	r24, Y+33	; 0x21
    13aa:	8f 3f       	cpi	r24, 0xFF	; 255
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <vQueueWaitForMessageRestricted+0x14>
    13ae:	19 a2       	std	Y+33, r1	; 0x21
    13b0:	8a a1       	ldd	r24, Y+34	; 0x22
    13b2:	8f 3f       	cpi	r24, 0xFF	; 255
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <vQueueWaitForMessageRestricted+0x1c>
    13b6:	1a a2       	std	Y+34, r1	; 0x22
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    13bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13be:	81 11       	cpse	r24, r1
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    13c2:	ce 01       	movw	r24, r28
    13c4:	43 96       	adiw	r24, 0x13	; 19
    13c6:	0e 94 19 13 	call	0x2632	; 0x2632 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    13ca:	ce 01       	movw	r24, r28
    13cc:	2e dd       	rcall	.-1444   	; 0xe2a <prvUnlockQueue>
    }
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    13d4:	fc 01       	movw	r30, r24
    13d6:	44 81       	ldd	r20, Z+4	; 0x04
    13d8:	55 81       	ldd	r21, Z+5	; 0x05
    13da:	22 81       	ldd	r18, Z+2	; 0x02
    13dc:	33 81       	ldd	r19, Z+3	; 0x03
    13de:	24 0f       	add	r18, r20
    13e0:	35 1f       	adc	r19, r21
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	b9 01       	movw	r22, r18
    13e8:	68 1b       	sub	r22, r24
    13ea:	79 0b       	sbc	r23, r25
    13ec:	cb 01       	movw	r24, r22
    13ee:	64 17       	cp	r22, r20
    13f0:	75 07       	cpc	r23, r21
    13f2:	10 f0       	brcs	.+4      	; 0x13f8 <prvBytesInBuffer+0x24>
    13f4:	84 1b       	sub	r24, r20
    13f6:	95 0b       	sbc	r25, r21
    13f8:	08 95       	ret

000013fa <prvInitialiseNewStreamBuffer>:
    13fa:	0f 93       	push	r16
    13fc:	fc 01       	movw	r30, r24
    13fe:	8f e0       	ldi	r24, 0x0F	; 15
    1400:	df 01       	movw	r26, r30
    1402:	1d 92       	st	X+, r1
    1404:	8a 95       	dec	r24
    1406:	e9 f7       	brne	.-6      	; 0x1402 <prvInitialiseNewStreamBuffer+0x8>
    1408:	75 87       	std	Z+13, r23	; 0x0d
    140a:	64 87       	std	Z+12, r22	; 0x0c
    140c:	55 83       	std	Z+5, r21	; 0x05
    140e:	44 83       	std	Z+4, r20	; 0x04
    1410:	37 83       	std	Z+7, r19	; 0x07
    1412:	26 83       	std	Z+6, r18	; 0x06
    1414:	06 87       	std	Z+14, r16	; 0x0e
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <prvWriteBytesToBuffer>:
    141a:	af 92       	push	r10
    141c:	bf 92       	push	r11
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	6c 01       	movw	r12, r24
    1430:	5b 01       	movw	r10, r22
    1432:	7a 01       	movw	r14, r20
    1434:	fc 01       	movw	r30, r24
    1436:	c2 81       	ldd	r28, Z+2	; 0x02
    1438:	d3 81       	ldd	r29, Z+3	; 0x03
    143a:	04 81       	ldd	r16, Z+4	; 0x04
    143c:	15 81       	ldd	r17, Z+5	; 0x05
    143e:	0c 1b       	sub	r16, r28
    1440:	1d 0b       	sbc	r17, r29
    1442:	40 17       	cp	r20, r16
    1444:	51 07       	cpc	r21, r17
    1446:	08 f4       	brcc	.+2      	; 0x144a <prvWriteBytesToBuffer+0x30>
    1448:	8a 01       	movw	r16, r20
    144a:	f6 01       	movw	r30, r12
    144c:	84 85       	ldd	r24, Z+12	; 0x0c
    144e:	95 85       	ldd	r25, Z+13	; 0x0d
    1450:	a8 01       	movw	r20, r16
    1452:	b5 01       	movw	r22, r10
    1454:	8c 0f       	add	r24, r28
    1456:	9d 1f       	adc	r25, r29
    1458:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <memcpy>
    145c:	0e 15       	cp	r16, r14
    145e:	1f 05       	cpc	r17, r15
    1460:	58 f4       	brcc	.+22     	; 0x1478 <prvWriteBytesToBuffer+0x5e>
    1462:	a7 01       	movw	r20, r14
    1464:	40 1b       	sub	r20, r16
    1466:	51 0b       	sbc	r21, r17
    1468:	b5 01       	movw	r22, r10
    146a:	60 0f       	add	r22, r16
    146c:	71 1f       	adc	r23, r17
    146e:	f6 01       	movw	r30, r12
    1470:	84 85       	ldd	r24, Z+12	; 0x0c
    1472:	95 85       	ldd	r25, Z+13	; 0x0d
    1474:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <memcpy>
    1478:	ce 01       	movw	r24, r28
    147a:	8e 0d       	add	r24, r14
    147c:	9f 1d       	adc	r25, r15
    147e:	f6 01       	movw	r30, r12
    1480:	24 81       	ldd	r18, Z+4	; 0x04
    1482:	35 81       	ldd	r19, Z+5	; 0x05
    1484:	82 17       	cp	r24, r18
    1486:	93 07       	cpc	r25, r19
    1488:	10 f0       	brcs	.+4      	; 0x148e <prvWriteBytesToBuffer+0x74>
    148a:	82 1b       	sub	r24, r18
    148c:	93 0b       	sbc	r25, r19
    148e:	f6 01       	movw	r30, r12
    1490:	93 83       	std	Z+3, r25	; 0x03
    1492:	82 83       	std	Z+2, r24	; 0x02
    1494:	c7 01       	movw	r24, r14
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	08 95       	ret

000014ac <prvWriteMessageToBuffer>:
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	1f 92       	push	r1
    14be:	1f 92       	push	r1
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	7c 01       	movw	r14, r24
    14c6:	6b 01       	movw	r12, r22
    14c8:	5a 83       	std	Y+2, r21	; 0x02
    14ca:	49 83       	std	Y+1, r20	; 0x01
    14cc:	21 15       	cp	r18, r1
    14ce:	31 05       	cpc	r19, r1
    14d0:	c1 f0       	breq	.+48     	; 0x1502 <prvWriteMessageToBuffer+0x56>
    14d2:	fc 01       	movw	r30, r24
    14d4:	86 85       	ldd	r24, Z+14	; 0x0e
    14d6:	80 fd       	sbrc	r24, 0
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <prvWriteMessageToBuffer+0x3e>
    14da:	42 17       	cp	r20, r18
    14dc:	53 07       	cpc	r21, r19
    14de:	08 f4       	brcc	.+2      	; 0x14e2 <prvWriteMessageToBuffer+0x36>
    14e0:	9a 01       	movw	r18, r20
    14e2:	3a 83       	std	Y+2, r19	; 0x02
    14e4:	29 83       	std	Y+1, r18	; 0x01
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <prvWriteMessageToBuffer+0x5c>
    14ea:	20 17       	cp	r18, r16
    14ec:	31 07       	cpc	r19, r17
    14ee:	58 f0       	brcs	.+22     	; 0x1506 <prvWriteMessageToBuffer+0x5a>
    14f0:	42 e0       	ldi	r20, 0x02	; 2
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	be 01       	movw	r22, r28
    14f6:	6f 5f       	subi	r22, 0xFF	; 255
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	c7 01       	movw	r24, r14
    14fc:	8e df       	rcall	.-228    	; 0x141a <prvWriteBytesToBuffer>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <prvWriteMessageToBuffer+0x5c>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <prvWriteMessageToBuffer+0x5c>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	88 23       	and	r24, r24
    150a:	31 f0       	breq	.+12     	; 0x1518 <prvWriteMessageToBuffer+0x6c>
    150c:	49 81       	ldd	r20, Y+1	; 0x01
    150e:	5a 81       	ldd	r21, Y+2	; 0x02
    1510:	b6 01       	movw	r22, r12
    1512:	c7 01       	movw	r24, r14
    1514:	82 df       	rcall	.-252    	; 0x141a <prvWriteBytesToBuffer>
    1516:	02 c0       	rjmp	.+4      	; 0x151c <prvWriteMessageToBuffer+0x70>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	08 95       	ret

00001532 <prvReadBytesFromBuffer>:
    1532:	af 92       	push	r10
    1534:	bf 92       	push	r11
    1536:	cf 92       	push	r12
    1538:	df 92       	push	r13
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	7c 01       	movw	r14, r24
    1548:	5b 01       	movw	r10, r22
    154a:	e9 01       	movw	r28, r18
    154c:	42 17       	cp	r20, r18
    154e:	53 07       	cpc	r21, r19
    1550:	08 f4       	brcc	.+2      	; 0x1554 <prvReadBytesFromBuffer+0x22>
    1552:	ea 01       	movw	r28, r20
    1554:	20 97       	sbiw	r28, 0x00	; 0
    1556:	81 f1       	breq	.+96     	; 0x15b8 <prvReadBytesFromBuffer+0x86>
    1558:	f7 01       	movw	r30, r14
    155a:	00 81       	ld	r16, Z
    155c:	11 81       	ldd	r17, Z+1	; 0x01
    155e:	84 81       	ldd	r24, Z+4	; 0x04
    1560:	95 81       	ldd	r25, Z+5	; 0x05
    1562:	80 1b       	sub	r24, r16
    1564:	91 0b       	sbc	r25, r17
    1566:	6e 01       	movw	r12, r28
    1568:	8c 17       	cp	r24, r28
    156a:	9d 07       	cpc	r25, r29
    156c:	08 f4       	brcc	.+2      	; 0x1570 <prvReadBytesFromBuffer+0x3e>
    156e:	6c 01       	movw	r12, r24
    1570:	f7 01       	movw	r30, r14
    1572:	64 85       	ldd	r22, Z+12	; 0x0c
    1574:	75 85       	ldd	r23, Z+13	; 0x0d
    1576:	60 0f       	add	r22, r16
    1578:	71 1f       	adc	r23, r17
    157a:	a6 01       	movw	r20, r12
    157c:	c5 01       	movw	r24, r10
    157e:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <memcpy>
    1582:	cc 16       	cp	r12, r28
    1584:	dd 06       	cpc	r13, r29
    1586:	58 f4       	brcc	.+22     	; 0x159e <prvReadBytesFromBuffer+0x6c>
    1588:	ae 01       	movw	r20, r28
    158a:	4c 19       	sub	r20, r12
    158c:	5d 09       	sbc	r21, r13
    158e:	f7 01       	movw	r30, r14
    1590:	64 85       	ldd	r22, Z+12	; 0x0c
    1592:	75 85       	ldd	r23, Z+13	; 0x0d
    1594:	c5 01       	movw	r24, r10
    1596:	8c 0d       	add	r24, r12
    1598:	9d 1d       	adc	r25, r13
    159a:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <memcpy>
    159e:	0c 0f       	add	r16, r28
    15a0:	1d 1f       	adc	r17, r29
    15a2:	f7 01       	movw	r30, r14
    15a4:	84 81       	ldd	r24, Z+4	; 0x04
    15a6:	95 81       	ldd	r25, Z+5	; 0x05
    15a8:	08 17       	cp	r16, r24
    15aa:	19 07       	cpc	r17, r25
    15ac:	10 f0       	brcs	.+4      	; 0x15b2 <prvReadBytesFromBuffer+0x80>
    15ae:	08 1b       	sub	r16, r24
    15b0:	19 0b       	sbc	r17, r25
    15b2:	f7 01       	movw	r30, r14
    15b4:	11 83       	std	Z+1, r17	; 0x01
    15b6:	00 83       	st	Z, r16
    15b8:	ce 01       	movw	r24, r28
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	bf 90       	pop	r11
    15cc:	af 90       	pop	r10
    15ce:	08 95       	ret

000015d0 <prvReadMessageFromBuffer>:
    15d0:	6f 92       	push	r6
    15d2:	7f 92       	push	r7
    15d4:	8f 92       	push	r8
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	1f 92       	push	r1
    15ee:	1f 92       	push	r1
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	6c 01       	movw	r12, r24
    15f6:	4b 01       	movw	r8, r22
    15f8:	5a 01       	movw	r10, r20
    15fa:	79 01       	movw	r14, r18
    15fc:	01 15       	cp	r16, r1
    15fe:	11 05       	cpc	r17, r1
    1600:	b1 f0       	breq	.+44     	; 0x162e <prvReadMessageFromBuffer+0x5e>
    1602:	fc 01       	movw	r30, r24
    1604:	60 80       	ld	r6, Z
    1606:	71 80       	ldd	r7, Z+1	; 0x01
    1608:	a8 01       	movw	r20, r16
    160a:	be 01       	movw	r22, r28
    160c:	6f 5f       	subi	r22, 0xFF	; 255
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	90 df       	rcall	.-224    	; 0x1532 <prvReadBytesFromBuffer>
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	e0 1a       	sub	r14, r16
    1618:	f1 0a       	sbc	r15, r17
    161a:	a8 16       	cp	r10, r24
    161c:	b9 06       	cpc	r11, r25
    161e:	30 f4       	brcc	.+12     	; 0x162c <prvReadMessageFromBuffer+0x5c>
    1620:	f6 01       	movw	r30, r12
    1622:	71 82       	std	Z+1, r7	; 0x01
    1624:	60 82       	st	Z, r6
    1626:	a1 2c       	mov	r10, r1
    1628:	b1 2c       	mov	r11, r1
    162a:	01 c0       	rjmp	.+2      	; 0x162e <prvReadMessageFromBuffer+0x5e>
    162c:	5c 01       	movw	r10, r24
    162e:	97 01       	movw	r18, r14
    1630:	a5 01       	movw	r20, r10
    1632:	b4 01       	movw	r22, r8
    1634:	c6 01       	movw	r24, r12
    1636:	7d df       	rcall	.-262    	; 0x1532 <prvReadBytesFromBuffer>
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	08 95       	ret

0000165a <xStreamBufferGenericCreate>:
    165a:	cf 92       	push	r12
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
    166a:	6b 01       	movw	r12, r22
    166c:	41 30       	cpi	r20, 0x01	; 1
    166e:	11 f4       	brne	.+4      	; 0x1674 <xStreamBufferGenericCreate+0x1a>
    1670:	01 e0       	ldi	r16, 0x01	; 1
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <xStreamBufferGenericCreate+0x1c>
    1674:	00 e0       	ldi	r16, 0x00	; 0
    1676:	c1 14       	cp	r12, r1
    1678:	d1 04       	cpc	r13, r1
    167a:	19 f4       	brne	.+6      	; 0x1682 <xStreamBufferGenericCreate+0x28>
    167c:	cc 24       	eor	r12, r12
    167e:	c3 94       	inc	r12
    1680:	d1 2c       	mov	r13, r1
    1682:	ce 01       	movw	r24, r28
    1684:	40 96       	adiw	r24, 0x10	; 16
    1686:	c8 17       	cp	r28, r24
    1688:	d9 07       	cpc	r29, r25
    168a:	20 f4       	brcc	.+8      	; 0x1694 <xStreamBufferGenericCreate+0x3a>
    168c:	21 96       	adiw	r28, 0x01	; 1
    168e:	ad d8       	rcall	.-3750   	; 0x7ea <pvPortMalloc>
    1690:	7c 01       	movw	r14, r24
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <xStreamBufferGenericCreate+0x3e>
    1694:	e1 2c       	mov	r14, r1
    1696:	f1 2c       	mov	r15, r1
    1698:	e1 14       	cp	r14, r1
    169a:	f1 04       	cpc	r15, r1
    169c:	39 f0       	breq	.+14     	; 0x16ac <xStreamBufferGenericCreate+0x52>
    169e:	96 01       	movw	r18, r12
    16a0:	ae 01       	movw	r20, r28
    16a2:	b7 01       	movw	r22, r14
    16a4:	61 5f       	subi	r22, 0xF1	; 241
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	c7 01       	movw	r24, r14
    16aa:	a7 de       	rcall	.-690    	; 0x13fa <prvInitialiseNewStreamBuffer>
    16ac:	c7 01       	movw	r24, r14
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	08 95       	ret

000016be <xStreamBufferReset>:
    16be:	0f 93       	push	r16
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	0f 92       	push	r0
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 85       	ldd	r18, Z+8	; 0x08
    16ca:	31 85       	ldd	r19, Z+9	; 0x09
    16cc:	23 2b       	or	r18, r19
    16ce:	71 f4       	brne	.+28     	; 0x16ec <xStreamBufferReset+0x2e>
    16d0:	22 85       	ldd	r18, Z+10	; 0x0a
    16d2:	33 85       	ldd	r19, Z+11	; 0x0b
    16d4:	23 2b       	or	r18, r19
    16d6:	61 f4       	brne	.+24     	; 0x16f0 <xStreamBufferReset+0x32>
    16d8:	26 81       	ldd	r18, Z+6	; 0x06
    16da:	37 81       	ldd	r19, Z+7	; 0x07
    16dc:	44 81       	ldd	r20, Z+4	; 0x04
    16de:	55 81       	ldd	r21, Z+5	; 0x05
    16e0:	64 85       	ldd	r22, Z+12	; 0x0c
    16e2:	75 85       	ldd	r23, Z+13	; 0x0d
    16e4:	06 85       	ldd	r16, Z+14	; 0x0e
    16e6:	89 de       	rcall	.-750    	; 0x13fa <prvInitialiseNewStreamBuffer>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <xStreamBufferReset+0x34>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <xStreamBufferReset+0x34>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	0f 91       	pop	r16
    16f8:	08 95       	ret

000016fa <xStreamBufferSpacesAvailable>:
    16fa:	fc 01       	movw	r30, r24
    16fc:	24 81       	ldd	r18, Z+4	; 0x04
    16fe:	35 81       	ldd	r19, Z+5	; 0x05
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	82 0f       	add	r24, r18
    1706:	93 1f       	adc	r25, r19
    1708:	42 81       	ldd	r20, Z+2	; 0x02
    170a:	53 81       	ldd	r21, Z+3	; 0x03
    170c:	84 1b       	sub	r24, r20
    170e:	95 0b       	sbc	r25, r21
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	82 17       	cp	r24, r18
    1714:	93 07       	cpc	r25, r19
    1716:	10 f0       	brcs	.+4      	; 0x171c <xStreamBufferSpacesAvailable+0x22>
    1718:	82 1b       	sub	r24, r18
    171a:	93 0b       	sbc	r25, r19
    171c:	08 95       	ret

0000171e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    171e:	2f 92       	push	r2
    1720:	3f 92       	push	r3
    1722:	4f 92       	push	r4
    1724:	5f 92       	push	r5
    1726:	6f 92       	push	r6
    1728:	7f 92       	push	r7
    172a:	8f 92       	push	r8
    172c:	9f 92       	push	r9
    172e:	af 92       	push	r10
    1730:	bf 92       	push	r11
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	2b 97       	sbiw	r28, 0x0b	; 11
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	4c 01       	movw	r8, r24
    1754:	7b 87       	std	Y+11, r23	; 0x0b
    1756:	6a 87       	std	Y+10, r22	; 0x0a
    1758:	1a 01       	movw	r2, r20
    175a:	0e 83       	std	Y+6, r16	; 0x06
    175c:	1f 83       	std	Y+7, r17	; 0x07
    175e:	28 87       	std	Y+8, r18	; 0x08
    1760:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1762:	fc 01       	movw	r30, r24
    1764:	84 81       	ldd	r24, Z+4	; 0x04
    1766:	95 81       	ldd	r25, Z+5	; 0x05
    1768:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    176a:	26 85       	ldd	r18, Z+14	; 0x0e
    176c:	20 ff       	sbrs	r18, 0
    176e:	0c c0       	rjmp	.+24     	; 0x1788 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1770:	2a 01       	movw	r4, r20
    1772:	f2 e0       	ldi	r31, 0x02	; 2
    1774:	4f 0e       	add	r4, r31
    1776:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1778:	84 15       	cp	r24, r4
    177a:	95 05       	cpc	r25, r5
    177c:	58 f4       	brcc	.+22     	; 0x1794 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    177e:	1e 82       	std	Y+6, r1	; 0x06
    1780:	1f 82       	std	Y+7, r1	; 0x07
    1782:	18 86       	std	Y+8, r1	; 0x08
    1784:	19 86       	std	Y+9, r1	; 0x09
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1788:	84 17       	cp	r24, r20
    178a:	95 07       	cpc	r25, r21
    178c:	10 f0       	brcs	.+4      	; 0x1792 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    178e:	2a 01       	movw	r4, r20
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1792:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1794:	8e 81       	ldd	r24, Y+6	; 0x06
    1796:	9f 81       	ldd	r25, Y+7	; 0x07
    1798:	a8 85       	ldd	r26, Y+8	; 0x08
    179a:	b9 85       	ldd	r27, Y+9	; 0x09
    179c:	89 2b       	or	r24, r25
    179e:	8a 2b       	or	r24, r26
    17a0:	8b 2b       	or	r24, r27
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <xStreamBufferSend+0x88>
    17a4:	38 c0       	rjmp	.+112    	; 0x1816 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	0e 94 a4 14 	call	0x2948	; 0x2948 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17b4:	c4 01       	movw	r24, r8
    17b6:	a1 df       	rcall	.-190    	; 0x16fa <xStreamBufferSpacesAvailable>
    17b8:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    17ba:	84 15       	cp	r24, r4
    17bc:	95 05       	cpc	r25, r5
    17be:	40 f5       	brcc	.+80     	; 0x1810 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 8e 19 	call	0x331c	; 0x331c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    17ca:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <xTaskGetCurrentTaskHandle>
    17ce:	f4 01       	movw	r30, r8
    17d0:	93 87       	std	Z+11, r25	; 0x0b
    17d2:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    17d8:	ae 80       	ldd	r10, Y+6	; 0x06
    17da:	bf 80       	ldd	r11, Y+7	; 0x07
    17dc:	c8 84       	ldd	r12, Y+8	; 0x08
    17de:	d9 84       	ldd	r13, Y+9	; 0x09
    17e0:	e1 2c       	mov	r14, r1
    17e2:	f1 2c       	mov	r15, r1
    17e4:	00 e0       	ldi	r16, 0x00	; 0
    17e6:	10 e0       	ldi	r17, 0x00	; 0
    17e8:	98 01       	movw	r18, r16
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	ba 01       	movw	r22, r20
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    17f6:	f4 01       	movw	r30, r8
    17f8:	13 86       	std	Z+11, r1	; 0x0b
    17fa:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    17fc:	be 01       	movw	r22, r28
    17fe:	6a 5f       	subi	r22, 0xFA	; 250
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	ce 01       	movw	r24, r28
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	0e 94 cb 14 	call	0x2996	; 0x2996 <xTaskCheckForTimeOut>
    180a:	88 23       	and	r24, r24
    180c:	81 f2       	breq	.-96     	; 0x17ae <xStreamBufferSend+0x90>
    180e:	05 c0       	rjmp	.+10     	; 0x181a <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
                    break;
    1814:	02 c0       	rjmp	.+4      	; 0x181a <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1816:	61 2c       	mov	r6, r1
    1818:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    181a:	61 14       	cp	r6, r1
    181c:	71 04       	cpc	r7, r1
    181e:	19 f4       	brne	.+6      	; 0x1826 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1820:	c4 01       	movw	r24, r8
    1822:	6b df       	rcall	.-298    	; 0x16fa <xStreamBufferSpacesAvailable>
    1824:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1826:	82 01       	movw	r16, r4
    1828:	93 01       	movw	r18, r6
    182a:	a1 01       	movw	r20, r2
    182c:	6a 85       	ldd	r22, Y+10	; 0x0a
    182e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1830:	c4 01       	movw	r24, r8
    1832:	3c de       	rcall	.-904    	; 0x14ac <prvWriteMessageToBuffer>
    1834:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1836:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1838:	e9 f0       	breq	.+58     	; 0x1874 <xStreamBufferSend+0x156>
    183a:	c4 01       	movw	r24, r8
    183c:	cb dd       	rcall	.-1130   	; 0x13d4 <prvBytesInBuffer>
    183e:	f4 01       	movw	r30, r8
    1840:	26 81       	ldd	r18, Z+6	; 0x06
    1842:	37 81       	ldd	r19, Z+7	; 0x07
    1844:	82 17       	cp	r24, r18
    1846:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1848:	a8 f0       	brcs	.+42     	; 0x1874 <xStreamBufferSend+0x156>
    184a:	91 d3       	rcall	.+1826   	; 0x1f6e <vTaskSuspendAll>
    184c:	f4 01       	movw	r30, r8
    184e:	80 85       	ldd	r24, Z+8	; 0x08
    1850:	91 85       	ldd	r25, Z+9	; 0x09
    1852:	89 2b       	or	r24, r25
    1854:	71 f0       	breq	.+28     	; 0x1872 <xStreamBufferSend+0x154>
    1856:	80 85       	ldd	r24, Z+8	; 0x08
    1858:	91 85       	ldd	r25, Z+9	; 0x09
    185a:	e1 2c       	mov	r14, r1
    185c:	f1 2c       	mov	r15, r1
    185e:	00 e0       	ldi	r16, 0x00	; 0
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	a9 01       	movw	r20, r18
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	0e 94 75 17 	call	0x2eea	; 0x2eea <xTaskGenericNotify>
    186c:	f4 01       	movw	r30, r8
    186e:	11 86       	std	Z+9, r1	; 0x09
    1870:	10 86       	std	Z+8, r1	; 0x08
    1872:	bd d4       	rcall	.+2426   	; 0x21ee <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1874:	c6 01       	movw	r24, r12
    1876:	2b 96       	adiw	r28, 0x0b	; 11
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	df 90       	pop	r13
    1890:	cf 90       	pop	r12
    1892:	bf 90       	pop	r11
    1894:	af 90       	pop	r10
    1896:	9f 90       	pop	r9
    1898:	8f 90       	pop	r8
    189a:	7f 90       	pop	r7
    189c:	6f 90       	pop	r6
    189e:	5f 90       	pop	r5
    18a0:	4f 90       	pop	r4
    18a2:	3f 90       	pop	r3
    18a4:	2f 90       	pop	r2
    18a6:	08 95       	ret

000018a8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	ec 01       	movw	r28, r24
    18be:	7b 01       	movw	r14, r22
    18c0:	5a 01       	movw	r10, r20
    18c2:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    18c6:	80 ff       	sbrs	r24, 0
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18ca:	8a 01       	movw	r16, r20
    18cc:	0e 5f       	subi	r16, 0xFE	; 254
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    18d2:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    18d4:	ce 01       	movw	r24, r28
    18d6:	11 df       	rcall	.-478    	; 0x16fa <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    18d8:	9c 01       	movw	r18, r24
    18da:	a5 01       	movw	r20, r10
    18dc:	b7 01       	movw	r22, r14
    18de:	ce 01       	movw	r24, r28
    18e0:	e5 dd       	rcall	.-1078   	; 0x14ac <prvWriteMessageToBuffer>
    18e2:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    18e4:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    18e6:	c1 f0       	breq	.+48     	; 0x1918 <xStreamBufferSendFromISR+0x70>
    18e8:	ce 01       	movw	r24, r28
    18ea:	74 dd       	rcall	.-1304   	; 0x13d4 <prvBytesInBuffer>
    18ec:	2e 81       	ldd	r18, Y+6	; 0x06
    18ee:	3f 81       	ldd	r19, Y+7	; 0x07
    18f0:	82 17       	cp	r24, r18
    18f2:	93 07       	cpc	r25, r19
    18f4:	88 f0       	brcs	.+34     	; 0x1918 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    18f6:	88 85       	ldd	r24, Y+8	; 0x08
    18f8:	99 85       	ldd	r25, Y+9	; 0x09
    18fa:	89 2b       	or	r24, r25
    18fc:	69 f0       	breq	.+26     	; 0x1918 <xStreamBufferSendFromISR+0x70>
    18fe:	88 85       	ldd	r24, Y+8	; 0x08
    1900:	99 85       	ldd	r25, Y+9	; 0x09
    1902:	e1 2c       	mov	r14, r1
    1904:	f1 2c       	mov	r15, r1
    1906:	00 e0       	ldi	r16, 0x00	; 0
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	a9 01       	movw	r20, r18
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <xTaskGenericNotifyFromISR>
    1914:	19 86       	std	Y+9, r1	; 0x09
    1916:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1918:	c5 01       	movw	r24, r10
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	bf 90       	pop	r11
    192c:	af 90       	pop	r10
    192e:	08 95       	ret

00001930 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	ec 01       	movw	r28, r24
    1952:	2b 01       	movw	r4, r22
    1954:	3a 01       	movw	r6, r20
    1956:	58 01       	movw	r10, r16
    1958:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    195a:	8e 85       	ldd	r24, Y+14	; 0x0e
    195c:	80 ff       	sbrs	r24, 0
    195e:	05 c0       	rjmp	.+10     	; 0x196a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1960:	68 94       	set
    1962:	88 24       	eor	r8, r8
    1964:	81 f8       	bld	r8, 1
    1966:	91 2c       	mov	r9, r1
    1968:	02 c0       	rjmp	.+4      	; 0x196e <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    196a:	81 2c       	mov	r8, r1
    196c:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    196e:	a1 14       	cp	r10, r1
    1970:	b1 04       	cpc	r11, r1
    1972:	c1 04       	cpc	r12, r1
    1974:	d1 04       	cpc	r13, r1
    1976:	41 f1       	breq	.+80     	; 0x19c8 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    197e:	ce 01       	movw	r24, r28
    1980:	29 dd       	rcall	.-1454   	; 0x13d4 <prvBytesInBuffer>
    1982:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1984:	88 16       	cp	r8, r24
    1986:	99 06       	cpc	r9, r25
    1988:	48 f0       	brcs	.+18     	; 0x199c <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 8e 19 	call	0x331c	; 0x331c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1994:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <xTaskGetCurrentTaskHandle>
    1998:	99 87       	std	Y+9, r25	; 0x09
    199a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    19a0:	8e 14       	cp	r8, r14
    19a2:	9f 04       	cpc	r9, r15
    19a4:	a0 f0       	brcs	.+40     	; 0x19ce <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    19a6:	e1 2c       	mov	r14, r1
    19a8:	f1 2c       	mov	r15, r1
    19aa:	00 e0       	ldi	r16, 0x00	; 0
    19ac:	10 e0       	ldi	r17, 0x00	; 0
    19ae:	98 01       	movw	r18, r16
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	ba 01       	movw	r22, r20
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    19bc:	19 86       	std	Y+9, r1	; 0x09
    19be:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    19c0:	ce 01       	movw	r24, r28
    19c2:	08 dd       	rcall	.-1520   	; 0x13d4 <prvBytesInBuffer>
    19c4:	7c 01       	movw	r14, r24
    19c6:	03 c0       	rjmp	.+6      	; 0x19ce <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    19c8:	ce 01       	movw	r24, r28
    19ca:	04 dd       	rcall	.-1528   	; 0x13d4 <prvBytesInBuffer>
    19cc:	7c 01       	movw	r14, r24
    19ce:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    19d0:	9f 04       	cpc	r9, r15
    19d2:	e8 f4       	brcc	.+58     	; 0x1a0e <xStreamBufferReceive+0xde>
    19d4:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    19d6:	97 01       	movw	r18, r14
    19d8:	a3 01       	movw	r20, r6
    19da:	b2 01       	movw	r22, r4
    19dc:	ce 01       	movw	r24, r28
    19de:	f8 dd       	rcall	.-1040   	; 0x15d0 <prvReadMessageFromBuffer>
    19e0:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    19e2:	89 2b       	or	r24, r25
    19e4:	b1 f0       	breq	.+44     	; 0x1a12 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    19e6:	c3 d2       	rcall	.+1414   	; 0x1f6e <vTaskSuspendAll>
    19e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ec:	89 2b       	or	r24, r25
    19ee:	69 f0       	breq	.+26     	; 0x1a0a <xStreamBufferReceive+0xda>
    19f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19f4:	e1 2c       	mov	r14, r1
    19f6:	f1 2c       	mov	r15, r1
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	a9 01       	movw	r20, r18
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	0e 94 75 17 	call	0x2eea	; 0x2eea <xTaskGenericNotify>
    1a06:	1b 86       	std	Y+11, r1	; 0x0b
    1a08:	1a 86       	std	Y+10, r1	; 0x0a
    1a0a:	f1 d3       	rcall	.+2018   	; 0x21ee <xTaskResumeAll>
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <xStreamBufferReceive+0xe2>
    1a0e:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1a10:	d1 2c       	mov	r13, r1
    1a12:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	bf 90       	pop	r11
    1a26:	af 90       	pop	r10
    1a28:	9f 90       	pop	r9
    1a2a:	8f 90       	pop	r8
    1a2c:	7f 90       	pop	r7
    1a2e:	6f 90       	pop	r6
    1a30:	5f 90       	pop	r5
    1a32:	4f 90       	pop	r4
    1a34:	08 95       	ret

00001a36 <prvResetNextTaskUnblockTime>:
    1a36:	e0 91 59 12 	lds	r30, 0x1259	; 0x801259 <pxDelayedTaskList>
    1a3a:	f0 91 5a 12 	lds	r31, 0x125A	; 0x80125a <pxDelayedTaskList+0x1>
    1a3e:	80 81       	ld	r24, Z
    1a40:	81 11       	cpse	r24, r1
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <prvResetNextTaskUnblockTime+0x26>
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	9f ef       	ldi	r25, 0xFF	; 255
    1a48:	dc 01       	movw	r26, r24
    1a4a:	80 93 23 12 	sts	0x1223, r24	; 0x801223 <xNextTaskUnblockTime>
    1a4e:	90 93 24 12 	sts	0x1224, r25	; 0x801224 <xNextTaskUnblockTime+0x1>
    1a52:	a0 93 25 12 	sts	0x1225, r26	; 0x801225 <xNextTaskUnblockTime+0x2>
    1a56:	b0 93 26 12 	sts	0x1226, r27	; 0x801226 <xNextTaskUnblockTime+0x3>
    1a5a:	08 95       	ret
    1a5c:	e0 91 59 12 	lds	r30, 0x1259	; 0x801259 <pxDelayedTaskList>
    1a60:	f0 91 5a 12 	lds	r31, 0x125A	; 0x80125a <pxDelayedTaskList+0x1>
    1a64:	07 80       	ldd	r0, Z+7	; 0x07
    1a66:	f0 85       	ldd	r31, Z+8	; 0x08
    1a68:	e0 2d       	mov	r30, r0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a70:	b3 81       	ldd	r27, Z+3	; 0x03
    1a72:	80 93 23 12 	sts	0x1223, r24	; 0x801223 <xNextTaskUnblockTime>
    1a76:	90 93 24 12 	sts	0x1224, r25	; 0x801224 <xNextTaskUnblockTime+0x1>
    1a7a:	a0 93 25 12 	sts	0x1225, r26	; 0x801225 <xNextTaskUnblockTime+0x2>
    1a7e:	b0 93 26 12 	sts	0x1226, r27	; 0x801226 <xNextTaskUnblockTime+0x3>
    1a82:	08 95       	ret

00001a84 <prvDeleteTCB>:
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	ec 01       	movw	r28, r24
    1a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8e:	0e 94 9e 04 	call	0x93c	; 0x93c <vPortFree>
    1a92:	ce 01       	movw	r24, r28
    1a94:	0e 94 9e 04 	call	0x93c	; 0x93c <vPortFree>
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <prvInitialiseNewTask>:
    1a9e:	4f 92       	push	r4
    1aa0:	5f 92       	push	r5
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	2c 01       	movw	r4, r24
    1abe:	5b 01       	movw	r10, r22
    1ac0:	4a 01       	movw	r8, r20
    1ac2:	39 01       	movw	r6, r18
    1ac4:	e6 01       	movw	r28, r12
    1ac6:	65 ea       	ldi	r22, 0xA5	; 165
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1acc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ace:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <memset>
    1ad2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad6:	21 e0       	ldi	r18, 0x01	; 1
    1ad8:	82 1a       	sub	r8, r18
    1ada:	91 08       	sbc	r9, r1
    1adc:	88 0e       	add	r8, r24
    1ade:	99 1e       	adc	r9, r25
    1ae0:	a1 14       	cp	r10, r1
    1ae2:	b1 04       	cpc	r11, r1
    1ae4:	89 f4       	brne	.+34     	; 0x1b08 <prvInitialiseNewTask+0x6a>
    1ae6:	15 c0       	rjmp	.+42     	; 0x1b12 <prvInitialiseNewTask+0x74>
    1ae8:	82 2f       	mov	r24, r18
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	f5 01       	movw	r30, r10
    1aee:	e8 0f       	add	r30, r24
    1af0:	f9 1f       	adc	r31, r25
    1af2:	30 81       	ld	r19, Z
    1af4:	de 01       	movw	r26, r28
    1af6:	a8 0f       	add	r26, r24
    1af8:	b9 1f       	adc	r27, r25
    1afa:	5d 96       	adiw	r26, 0x1d	; 29
    1afc:	3c 93       	st	X, r19
    1afe:	80 81       	ld	r24, Z
    1b00:	88 23       	and	r24, r24
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <prvInitialiseNewTask+0x70>
    1b04:	2f 5f       	subi	r18, 0xFF	; 255
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <prvInitialiseNewTask+0x6c>
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	20 31       	cpi	r18, 0x10	; 16
    1b0c:	68 f3       	brcs	.-38     	; 0x1ae8 <prvInitialiseNewTask+0x4a>
    1b0e:	1c a6       	std	Y+44, r1	; 0x2c
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <prvInitialiseNewTask+0x76>
    1b12:	1d 8e       	std	Y+29, r1	; 0x1d
    1b14:	0a 30       	cpi	r16, 0x0A	; 10
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <prvInitialiseNewTask+0x7c>
    1b18:	09 e0       	ldi	r16, 0x09	; 9
    1b1a:	0a 8f       	std	Y+26, r16	; 0x1a
    1b1c:	0d a7       	std	Y+45, r16	; 0x2d
    1b1e:	1e a6       	std	Y+46, r1	; 0x2e
    1b20:	ce 01       	movw	r24, r28
    1b22:	02 96       	adiw	r24, 0x02	; 2
    1b24:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <vListInitialiseItem>
    1b28:	ce 01       	movw	r24, r28
    1b2a:	0e 96       	adiw	r24, 0x0e	; 14
    1b2c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <vListInitialiseItem>
    1b30:	db 87       	std	Y+11, r29	; 0x0b
    1b32:	ca 87       	std	Y+10, r28	; 0x0a
    1b34:	8a e0       	ldi	r24, 0x0A	; 10
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	80 1b       	sub	r24, r16
    1b3e:	91 09       	sbc	r25, r1
    1b40:	a1 09       	sbc	r26, r1
    1b42:	b1 09       	sbc	r27, r1
    1b44:	8e 87       	std	Y+14, r24	; 0x0e
    1b46:	9f 87       	std	Y+15, r25	; 0x0f
    1b48:	a8 8b       	std	Y+16, r26	; 0x10
    1b4a:	b9 8b       	std	Y+17, r27	; 0x11
    1b4c:	df 8b       	std	Y+23, r29	; 0x17
    1b4e:	ce 8b       	std	Y+22, r28	; 0x16
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	fe 01       	movw	r30, r28
    1b54:	bf 96       	adiw	r30, 0x2f	; 47
    1b56:	df 01       	movw	r26, r30
    1b58:	1d 92       	st	X+, r1
    1b5a:	8a 95       	dec	r24
    1b5c:	e9 f7       	brne	.-6      	; 0x1b58 <prvInitialiseNewTask+0xba>
    1b5e:	1b aa       	std	Y+51, r1	; 0x33
    1b60:	a3 01       	movw	r20, r6
    1b62:	b2 01       	movw	r22, r4
    1b64:	c4 01       	movw	r24, r8
    1b66:	0e 94 60 05 	call	0xac0	; 0xac0 <pxPortInitialiseStack>
    1b6a:	99 83       	std	Y+1, r25	; 0x01
    1b6c:	88 83       	st	Y, r24
    1b6e:	e1 14       	cp	r14, r1
    1b70:	f1 04       	cpc	r15, r1
    1b72:	19 f0       	breq	.+6      	; 0x1b7a <prvInitialiseNewTask+0xdc>
    1b74:	f7 01       	movw	r30, r14
    1b76:	d1 83       	std	Z+1, r29	; 0x01
    1b78:	c0 83       	st	Z, r28
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	df 90       	pop	r13
    1b86:	cf 90       	pop	r12
    1b88:	bf 90       	pop	r11
    1b8a:	af 90       	pop	r10
    1b8c:	9f 90       	pop	r9
    1b8e:	8f 90       	pop	r8
    1b90:	7f 90       	pop	r7
    1b92:	6f 90       	pop	r6
    1b94:	5f 90       	pop	r5
    1b96:	4f 90       	pop	r4
    1b98:	08 95       	ret

00001b9a <prvInitialiseTaskLists>:
    1b9a:	cf 93       	push	r28
    1b9c:	c0 e0       	ldi	r28, 0x00	; 0
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <prvInitialiseTaskLists+0x18>
    1ba0:	2b e0       	ldi	r18, 0x0B	; 11
    1ba2:	c2 9f       	mul	r28, r18
    1ba4:	c0 01       	movw	r24, r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	8f 58       	subi	r24, 0x8F	; 143
    1baa:	9d 4e       	sbci	r25, 0xED	; 237
    1bac:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInitialise>
    1bb0:	cf 5f       	subi	r28, 0xFF	; 255
    1bb2:	ca 30       	cpi	r28, 0x0A	; 10
    1bb4:	a8 f3       	brcs	.-22     	; 0x1ba0 <prvInitialiseTaskLists+0x6>
    1bb6:	86 e6       	ldi	r24, 0x66	; 102
    1bb8:	92 e1       	ldi	r25, 0x12	; 18
    1bba:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInitialise>
    1bbe:	8b e5       	ldi	r24, 0x5B	; 91
    1bc0:	92 e1       	ldi	r25, 0x12	; 18
    1bc2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInitialise>
    1bc6:	8c e4       	ldi	r24, 0x4C	; 76
    1bc8:	92 e1       	ldi	r25, 0x12	; 18
    1bca:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInitialise>
    1bce:	81 e4       	ldi	r24, 0x41	; 65
    1bd0:	92 e1       	ldi	r25, 0x12	; 18
    1bd2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInitialise>
    1bd6:	85 e3       	ldi	r24, 0x35	; 53
    1bd8:	92 e1       	ldi	r25, 0x12	; 18
    1bda:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInitialise>
    1bde:	86 e6       	ldi	r24, 0x66	; 102
    1be0:	92 e1       	ldi	r25, 0x12	; 18
    1be2:	90 93 5a 12 	sts	0x125A, r25	; 0x80125a <pxDelayedTaskList+0x1>
    1be6:	80 93 59 12 	sts	0x1259, r24	; 0x801259 <pxDelayedTaskList>
    1bea:	8b e5       	ldi	r24, 0x5B	; 91
    1bec:	92 e1       	ldi	r25, 0x12	; 18
    1bee:	90 93 58 12 	sts	0x1258, r25	; 0x801258 <pxOverflowDelayedTaskList+0x1>
    1bf2:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <pxOverflowDelayedTaskList>
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <prvAddNewTaskToReadyList>:
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	ec 01       	movw	r28, r24
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	0f 92       	push	r0
    1c06:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxCurrentNumberOfTasks>
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <uxCurrentNumberOfTasks>
    1c10:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    1c14:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1c18:	89 2b       	or	r24, r25
    1c1a:	51 f4       	brne	.+20     	; 0x1c30 <prvAddNewTaskToReadyList+0x36>
    1c1c:	d0 93 e0 12 	sts	0x12E0, r29	; 0x8012e0 <pxCurrentTCB+0x1>
    1c20:	c0 93 df 12 	sts	0x12DF, r28	; 0x8012df <pxCurrentTCB>
    1c24:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxCurrentNumberOfTasks>
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	91 f4       	brne	.+36     	; 0x1c50 <prvAddNewTaskToReadyList+0x56>
    1c2c:	b6 df       	rcall	.-148    	; 0x1b9a <prvInitialiseTaskLists>
    1c2e:	10 c0       	rjmp	.+32     	; 0x1c50 <prvAddNewTaskToReadyList+0x56>
    1c30:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <xSchedulerRunning>
    1c34:	81 11       	cpse	r24, r1
    1c36:	0c c0       	rjmp	.+24     	; 0x1c50 <prvAddNewTaskToReadyList+0x56>
    1c38:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    1c3c:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1c40:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c44:	89 17       	cp	r24, r25
    1c46:	20 f0       	brcs	.+8      	; 0x1c50 <prvAddNewTaskToReadyList+0x56>
    1c48:	d0 93 e0 12 	sts	0x12E0, r29	; 0x8012e0 <pxCurrentTCB+0x1>
    1c4c:	c0 93 df 12 	sts	0x12DF, r28	; 0x8012df <pxCurrentTCB>
    1c50:	80 91 27 12 	lds	r24, 0x1227	; 0x801227 <uxTaskNumber>
    1c54:	8f 5f       	subi	r24, 0xFF	; 255
    1c56:	80 93 27 12 	sts	0x1227, r24	; 0x801227 <uxTaskNumber>
    1c5a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c5c:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    1c60:	8e 17       	cp	r24, r30
    1c62:	10 f4       	brcc	.+4      	; 0x1c68 <prvAddNewTaskToReadyList+0x6e>
    1c64:	e0 93 2f 12 	sts	0x122F, r30	; 0x80122f <uxTopReadyPriority>
    1c68:	8b e0       	ldi	r24, 0x0B	; 11
    1c6a:	8e 9f       	mul	r24, r30
    1c6c:	f0 01       	movw	r30, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	ef 58       	subi	r30, 0x8F	; 143
    1c72:	fd 4e       	sbci	r31, 0xED	; 237
    1c74:	01 80       	ldd	r0, Z+1	; 0x01
    1c76:	f2 81       	ldd	r31, Z+2	; 0x02
    1c78:	e0 2d       	mov	r30, r0
    1c7a:	ff 83       	std	Y+7, r31	; 0x07
    1c7c:	ee 83       	std	Y+6, r30	; 0x06
    1c7e:	26 81       	ldd	r18, Z+6	; 0x06
    1c80:	37 81       	ldd	r19, Z+7	; 0x07
    1c82:	39 87       	std	Y+9, r19	; 0x09
    1c84:	28 87       	std	Y+8, r18	; 0x08
    1c86:	a6 81       	ldd	r26, Z+6	; 0x06
    1c88:	b7 81       	ldd	r27, Z+7	; 0x07
    1c8a:	9e 01       	movw	r18, r28
    1c8c:	2e 5f       	subi	r18, 0xFE	; 254
    1c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c90:	15 96       	adiw	r26, 0x05	; 5
    1c92:	3c 93       	st	X, r19
    1c94:	2e 93       	st	-X, r18
    1c96:	14 97       	sbiw	r26, 0x04	; 4
    1c98:	37 83       	std	Z+7, r19	; 0x07
    1c9a:	26 83       	std	Z+6, r18	; 0x06
    1c9c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c9e:	8e 9f       	mul	r24, r30
    1ca0:	f0 01       	movw	r30, r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	ef 58       	subi	r30, 0x8F	; 143
    1ca6:	fd 4e       	sbci	r31, 0xED	; 237
    1ca8:	fd 87       	std	Y+13, r31	; 0x0d
    1caa:	ec 87       	std	Y+12, r30	; 0x0c
    1cac:	80 81       	ld	r24, Z
    1cae:	8f 5f       	subi	r24, 0xFF	; 255
    1cb0:	80 83       	st	Z, r24
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <xSchedulerRunning>
    1cba:	88 23       	and	r24, r24
    1cbc:	51 f0       	breq	.+20     	; 0x1cd2 <prvAddNewTaskToReadyList+0xd8>
    1cbe:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    1cc2:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1cc6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cca:	98 17       	cp	r25, r24
    1ccc:	10 f4       	brcc	.+4      	; 0x1cd2 <prvAddNewTaskToReadyList+0xd8>
    1cce:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <prvCheckTasksWaitingTermination>:
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	1b c0       	rjmp	.+54     	; 0x1d14 <prvCheckTasksWaitingTermination+0x3c>
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	0f 92       	push	r0
    1ce4:	e0 91 48 12 	lds	r30, 0x1248	; 0x801248 <xTasksWaitingTermination+0x7>
    1ce8:	f0 91 49 12 	lds	r31, 0x1249	; 0x801249 <xTasksWaitingTermination+0x8>
    1cec:	c0 85       	ldd	r28, Z+8	; 0x08
    1cee:	d1 85       	ldd	r29, Z+9	; 0x09
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	02 96       	adiw	r24, 0x02	; 2
    1cf4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uxListRemove>
    1cf8:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxCurrentNumberOfTasks>
    1cfc:	81 50       	subi	r24, 0x01	; 1
    1cfe:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <uxCurrentNumberOfTasks>
    1d02:	80 91 40 12 	lds	r24, 0x1240	; 0x801240 <uxDeletedTasksWaitingCleanUp>
    1d06:	81 50       	subi	r24, 0x01	; 1
    1d08:	80 93 40 12 	sts	0x1240, r24	; 0x801240 <uxDeletedTasksWaitingCleanUp>
    1d0c:	0f 90       	pop	r0
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	ce 01       	movw	r24, r28
    1d12:	b8 de       	rcall	.-656    	; 0x1a84 <prvDeleteTCB>
    1d14:	80 91 40 12 	lds	r24, 0x1240	; 0x801240 <uxDeletedTasksWaitingCleanUp>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	e1 cf       	rjmp	.-62     	; 0x1cde <prvCheckTasksWaitingTermination+0x6>
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret

00001d22 <prvAddCurrentTaskToDelayedList>:
    1d22:	8f 92       	push	r8
    1d24:	9f 92       	push	r9
    1d26:	af 92       	push	r10
    1d28:	bf 92       	push	r11
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	6b 01       	movw	r12, r22
    1d38:	7c 01       	movw	r14, r24
    1d3a:	c4 2f       	mov	r28, r20
    1d3c:	80 90 30 12 	lds	r8, 0x1230	; 0x801230 <xTickCount>
    1d40:	90 90 31 12 	lds	r9, 0x1231	; 0x801231 <xTickCount+0x1>
    1d44:	a0 90 32 12 	lds	r10, 0x1232	; 0x801232 <xTickCount+0x2>
    1d48:	b0 90 33 12 	lds	r11, 0x1233	; 0x801233 <xTickCount+0x3>
    1d4c:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    1d50:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1d54:	02 96       	adiw	r24, 0x02	; 2
    1d56:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uxListRemove>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	c8 16       	cp	r12, r24
    1d5e:	d8 06       	cpc	r13, r24
    1d60:	e8 06       	cpc	r14, r24
    1d62:	f8 06       	cpc	r15, r24
    1d64:	b1 f5       	brne	.+108    	; 0x1dd2 <prvAddCurrentTaskToDelayedList+0xb0>
    1d66:	cc 23       	and	r28, r28
    1d68:	a1 f1       	breq	.+104    	; 0x1dd2 <prvAddCurrentTaskToDelayedList+0xb0>
    1d6a:	e5 e3       	ldi	r30, 0x35	; 53
    1d6c:	f2 e1       	ldi	r31, 0x12	; 18
    1d6e:	a1 81       	ldd	r26, Z+1	; 0x01
    1d70:	b2 81       	ldd	r27, Z+2	; 0x02
    1d72:	c0 91 df 12 	lds	r28, 0x12DF	; 0x8012df <pxCurrentTCB>
    1d76:	d0 91 e0 12 	lds	r29, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1d7a:	bf 83       	std	Y+7, r27	; 0x07
    1d7c:	ae 83       	std	Y+6, r26	; 0x06
    1d7e:	c0 91 df 12 	lds	r28, 0x12DF	; 0x8012df <pxCurrentTCB>
    1d82:	d0 91 e0 12 	lds	r29, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1d86:	16 96       	adiw	r26, 0x06	; 6
    1d88:	8d 91       	ld	r24, X+
    1d8a:	9c 91       	ld	r25, X
    1d8c:	17 97       	sbiw	r26, 0x07	; 7
    1d8e:	99 87       	std	Y+9, r25	; 0x09
    1d90:	88 87       	std	Y+8, r24	; 0x08
    1d92:	16 96       	adiw	r26, 0x06	; 6
    1d94:	cd 91       	ld	r28, X+
    1d96:	dc 91       	ld	r29, X
    1d98:	17 97       	sbiw	r26, 0x07	; 7
    1d9a:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    1d9e:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1da2:	02 96       	adiw	r24, 0x02	; 2
    1da4:	9d 83       	std	Y+5, r25	; 0x05
    1da6:	8c 83       	std	Y+4, r24	; 0x04
    1da8:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    1dac:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1db0:	02 96       	adiw	r24, 0x02	; 2
    1db2:	17 96       	adiw	r26, 0x07	; 7
    1db4:	9c 93       	st	X, r25
    1db6:	8e 93       	st	-X, r24
    1db8:	16 97       	sbiw	r26, 0x06	; 6
    1dba:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    1dbe:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1dc2:	1d 96       	adiw	r26, 0x0d	; 13
    1dc4:	fc 93       	st	X, r31
    1dc6:	ee 93       	st	-X, r30
    1dc8:	1c 97       	sbiw	r26, 0x0c	; 12
    1dca:	80 81       	ld	r24, Z
    1dcc:	8f 5f       	subi	r24, 0xFF	; 255
    1dce:	80 83       	st	Z, r24
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <prvAddCurrentTaskToDelayedList+0x12e>
    1dd2:	c8 0c       	add	r12, r8
    1dd4:	d9 1c       	adc	r13, r9
    1dd6:	ea 1c       	adc	r14, r10
    1dd8:	fb 1c       	adc	r15, r11
    1dda:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    1dde:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1de2:	c2 82       	std	Z+2, r12	; 0x02
    1de4:	d3 82       	std	Z+3, r13	; 0x03
    1de6:	e4 82       	std	Z+4, r14	; 0x04
    1de8:	f5 82       	std	Z+5, r15	; 0x05
    1dea:	c8 14       	cp	r12, r8
    1dec:	d9 04       	cpc	r13, r9
    1dee:	ea 04       	cpc	r14, r10
    1df0:	fb 04       	cpc	r15, r11
    1df2:	68 f4       	brcc	.+26     	; 0x1e0e <prvAddCurrentTaskToDelayedList+0xec>
    1df4:	60 91 df 12 	lds	r22, 0x12DF	; 0x8012df <pxCurrentTCB>
    1df8:	70 91 e0 12 	lds	r23, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1dfc:	80 91 57 12 	lds	r24, 0x1257	; 0x801257 <pxOverflowDelayedTaskList>
    1e00:	90 91 58 12 	lds	r25, 0x1258	; 0x801258 <pxOverflowDelayedTaskList+0x1>
    1e04:	6e 5f       	subi	r22, 0xFE	; 254
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <vListInsert>
    1e0c:	21 c0       	rjmp	.+66     	; 0x1e50 <prvAddCurrentTaskToDelayedList+0x12e>
    1e0e:	60 91 df 12 	lds	r22, 0x12DF	; 0x8012df <pxCurrentTCB>
    1e12:	70 91 e0 12 	lds	r23, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    1e16:	80 91 59 12 	lds	r24, 0x1259	; 0x801259 <pxDelayedTaskList>
    1e1a:	90 91 5a 12 	lds	r25, 0x125A	; 0x80125a <pxDelayedTaskList+0x1>
    1e1e:	6e 5f       	subi	r22, 0xFE	; 254
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <vListInsert>
    1e26:	80 91 23 12 	lds	r24, 0x1223	; 0x801223 <xNextTaskUnblockTime>
    1e2a:	90 91 24 12 	lds	r25, 0x1224	; 0x801224 <xNextTaskUnblockTime+0x1>
    1e2e:	a0 91 25 12 	lds	r26, 0x1225	; 0x801225 <xNextTaskUnblockTime+0x2>
    1e32:	b0 91 26 12 	lds	r27, 0x1226	; 0x801226 <xNextTaskUnblockTime+0x3>
    1e36:	c8 16       	cp	r12, r24
    1e38:	d9 06       	cpc	r13, r25
    1e3a:	ea 06       	cpc	r14, r26
    1e3c:	fb 06       	cpc	r15, r27
    1e3e:	40 f4       	brcc	.+16     	; 0x1e50 <prvAddCurrentTaskToDelayedList+0x12e>
    1e40:	c0 92 23 12 	sts	0x1223, r12	; 0x801223 <xNextTaskUnblockTime>
    1e44:	d0 92 24 12 	sts	0x1224, r13	; 0x801224 <xNextTaskUnblockTime+0x1>
    1e48:	e0 92 25 12 	sts	0x1225, r14	; 0x801225 <xNextTaskUnblockTime+0x2>
    1e4c:	f0 92 26 12 	sts	0x1226, r15	; 0x801226 <xNextTaskUnblockTime+0x3>
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	df 90       	pop	r13
    1e5a:	cf 90       	pop	r12
    1e5c:	bf 90       	pop	r11
    1e5e:	af 90       	pop	r10
    1e60:	9f 90       	pop	r9
    1e62:	8f 90       	pop	r8
    1e64:	08 95       	ret

00001e66 <xTaskCreate>:
    1e66:	2f 92       	push	r2
    1e68:	3f 92       	push	r3
    1e6a:	4f 92       	push	r4
    1e6c:	5f 92       	push	r5
    1e6e:	6f 92       	push	r6
    1e70:	7f 92       	push	r7
    1e72:	8f 92       	push	r8
    1e74:	9f 92       	push	r9
    1e76:	af 92       	push	r10
    1e78:	bf 92       	push	r11
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	3c 01       	movw	r6, r24
    1e8a:	1b 01       	movw	r2, r22
    1e8c:	4a 01       	movw	r8, r20
    1e8e:	29 01       	movw	r4, r18
    1e90:	ca 01       	movw	r24, r20
    1e92:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pvPortMalloc>
    1e96:	6c 01       	movw	r12, r24
    1e98:	89 2b       	or	r24, r25
    1e9a:	71 f0       	breq	.+28     	; 0x1eb8 <xTaskCreate+0x52>
    1e9c:	84 e3       	ldi	r24, 0x34	; 52
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pvPortMalloc>
    1ea4:	ec 01       	movw	r28, r24
    1ea6:	89 2b       	or	r24, r25
    1ea8:	19 f0       	breq	.+6      	; 0x1eb0 <xTaskCreate+0x4a>
    1eaa:	dc 8e       	std	Y+28, r13	; 0x1c
    1eac:	cb 8e       	std	Y+27, r12	; 0x1b
    1eae:	06 c0       	rjmp	.+12     	; 0x1ebc <xTaskCreate+0x56>
    1eb0:	c6 01       	movw	r24, r12
    1eb2:	0e 94 9e 04 	call	0x93c	; 0x93c <vPortFree>
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <xTaskCreate+0x56>
    1eb8:	c0 e0       	ldi	r28, 0x00	; 0
    1eba:	d0 e0       	ldi	r29, 0x00	; 0
    1ebc:	20 97       	sbiw	r28, 0x00	; 0
    1ebe:	61 f0       	breq	.+24     	; 0x1ed8 <xTaskCreate+0x72>
    1ec0:	a1 2c       	mov	r10, r1
    1ec2:	b1 2c       	mov	r11, r1
    1ec4:	6e 01       	movw	r12, r28
    1ec6:	92 01       	movw	r18, r4
    1ec8:	a4 01       	movw	r20, r8
    1eca:	b1 01       	movw	r22, r2
    1ecc:	c3 01       	movw	r24, r6
    1ece:	e7 dd       	rcall	.-1074   	; 0x1a9e <prvInitialiseNewTask>
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	93 de       	rcall	.-730    	; 0x1bfa <prvAddNewTaskToReadyList>
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <xTaskCreate+0x74>
    1ed8:	8f ef       	ldi	r24, 0xFF	; 255
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	bf 90       	pop	r11
    1eea:	af 90       	pop	r10
    1eec:	9f 90       	pop	r9
    1eee:	8f 90       	pop	r8
    1ef0:	7f 90       	pop	r7
    1ef2:	6f 90       	pop	r6
    1ef4:	5f 90       	pop	r5
    1ef6:	4f 90       	pop	r4
    1ef8:	3f 90       	pop	r3
    1efa:	2f 90       	pop	r2
    1efc:	08 95       	ret

00001efe <vTaskStartScheduler>:
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	0f 2e       	mov	r0, r31
    1f06:	f1 e2       	ldi	r31, 0x21	; 33
    1f08:	ef 2e       	mov	r14, r31
    1f0a:	f2 e1       	ldi	r31, 0x12	; 18
    1f0c:	ff 2e       	mov	r15, r31
    1f0e:	f0 2d       	mov	r31, r0
    1f10:	00 e0       	ldi	r16, 0x00	; 0
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 ec       	ldi	r20, 0xC0	; 192
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	66 e9       	ldi	r22, 0x96	; 150
    1f1c:	72 e0       	ldi	r23, 0x02	; 2
    1f1e:	8d ec       	ldi	r24, 0xCD	; 205
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a1 df       	rcall	.-190    	; 0x1e66 <xTaskCreate>
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	11 f4       	brne	.+4      	; 0x1f2c <vTaskStartScheduler+0x2e>
    1f28:	0e 94 32 1a 	call	0x3464	; 0x3464 <xTimerCreateTimerTask>
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	c9 f4       	brne	.+50     	; 0x1f62 <vTaskStartScheduler+0x64>
    1f30:	f8 94       	cli
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	9f ef       	ldi	r25, 0xFF	; 255
    1f36:	dc 01       	movw	r26, r24
    1f38:	80 93 23 12 	sts	0x1223, r24	; 0x801223 <xNextTaskUnblockTime>
    1f3c:	90 93 24 12 	sts	0x1224, r25	; 0x801224 <xNextTaskUnblockTime+0x1>
    1f40:	a0 93 25 12 	sts	0x1225, r26	; 0x801225 <xNextTaskUnblockTime+0x2>
    1f44:	b0 93 26 12 	sts	0x1226, r27	; 0x801226 <xNextTaskUnblockTime+0x3>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	80 93 2e 12 	sts	0x122E, r24	; 0x80122e <xSchedulerRunning>
    1f4e:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <xTickCount>
    1f52:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <xTickCount+0x1>
    1f56:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <xTickCount+0x2>
    1f5a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <xTickCount+0x3>
    1f5e:	0e 94 77 05 	call	0xaee	; 0xaee <xPortStartScheduler>
    1f62:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	08 95       	ret

00001f6e <vTaskSuspendAll>:
    1f6e:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <uxSchedulerSuspended>
    1f72:	8f 5f       	subi	r24, 0xFF	; 255
    1f74:	80 93 20 12 	sts	0x1220, r24	; 0x801220 <uxSchedulerSuspended>
    1f78:	08 95       	ret

00001f7a <xTaskGetTickCount>:
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	0f 92       	push	r0
    1f80:	60 91 30 12 	lds	r22, 0x1230	; 0x801230 <xTickCount>
    1f84:	70 91 31 12 	lds	r23, 0x1231	; 0x801231 <xTickCount+0x1>
    1f88:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <xTickCount+0x2>
    1f8c:	90 91 33 12 	lds	r25, 0x1233	; 0x801233 <xTickCount+0x3>
    1f90:	0f 90       	pop	r0
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	08 95       	ret

00001f96 <xTaskIncrementTick>:
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <uxSchedulerSuspended>
    1fa6:	81 11       	cpse	r24, r1
    1fa8:	05 c1       	rjmp	.+522    	; 0x21b4 <__DATA_REGION_LENGTH__+0x1b4>
    1faa:	c0 90 30 12 	lds	r12, 0x1230	; 0x801230 <xTickCount>
    1fae:	d0 90 31 12 	lds	r13, 0x1231	; 0x801231 <xTickCount+0x1>
    1fb2:	e0 90 32 12 	lds	r14, 0x1232	; 0x801232 <xTickCount+0x2>
    1fb6:	f0 90 33 12 	lds	r15, 0x1233	; 0x801233 <xTickCount+0x3>
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	c8 1a       	sub	r12, r24
    1fbe:	d8 0a       	sbc	r13, r24
    1fc0:	e8 0a       	sbc	r14, r24
    1fc2:	f8 0a       	sbc	r15, r24
    1fc4:	c0 92 30 12 	sts	0x1230, r12	; 0x801230 <xTickCount>
    1fc8:	d0 92 31 12 	sts	0x1231, r13	; 0x801231 <xTickCount+0x1>
    1fcc:	e0 92 32 12 	sts	0x1232, r14	; 0x801232 <xTickCount+0x2>
    1fd0:	f0 92 33 12 	sts	0x1233, r15	; 0x801233 <xTickCount+0x3>
    1fd4:	c1 14       	cp	r12, r1
    1fd6:	d1 04       	cpc	r13, r1
    1fd8:	e1 04       	cpc	r14, r1
    1fda:	f1 04       	cpc	r15, r1
    1fdc:	b1 f4       	brne	.+44     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1fde:	80 91 59 12 	lds	r24, 0x1259	; 0x801259 <pxDelayedTaskList>
    1fe2:	90 91 5a 12 	lds	r25, 0x125A	; 0x80125a <pxDelayedTaskList+0x1>
    1fe6:	20 91 57 12 	lds	r18, 0x1257	; 0x801257 <pxOverflowDelayedTaskList>
    1fea:	30 91 58 12 	lds	r19, 0x1258	; 0x801258 <pxOverflowDelayedTaskList+0x1>
    1fee:	30 93 5a 12 	sts	0x125A, r19	; 0x80125a <pxDelayedTaskList+0x1>
    1ff2:	20 93 59 12 	sts	0x1259, r18	; 0x801259 <pxDelayedTaskList>
    1ff6:	90 93 58 12 	sts	0x1258, r25	; 0x801258 <pxOverflowDelayedTaskList+0x1>
    1ffa:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <pxOverflowDelayedTaskList>
    1ffe:	80 91 28 12 	lds	r24, 0x1228	; 0x801228 <xNumOfOverflows>
    2002:	8f 5f       	subi	r24, 0xFF	; 255
    2004:	80 93 28 12 	sts	0x1228, r24	; 0x801228 <xNumOfOverflows>
    2008:	16 dd       	rcall	.-1492   	; 0x1a36 <prvResetNextTaskUnblockTime>
    200a:	80 91 23 12 	lds	r24, 0x1223	; 0x801223 <xNextTaskUnblockTime>
    200e:	90 91 24 12 	lds	r25, 0x1224	; 0x801224 <xNextTaskUnblockTime+0x1>
    2012:	a0 91 25 12 	lds	r26, 0x1225	; 0x801225 <xNextTaskUnblockTime+0x2>
    2016:	b0 91 26 12 	lds	r27, 0x1226	; 0x801226 <xNextTaskUnblockTime+0x3>
    201a:	c8 16       	cp	r12, r24
    201c:	d9 06       	cpc	r13, r25
    201e:	ea 06       	cpc	r14, r26
    2020:	fb 06       	cpc	r15, r27
    2022:	20 f4       	brcc	.+8      	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	b2 c0       	rjmp	.+356    	; 0x218c <__DATA_REGION_LENGTH__+0x18c>
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	01 c0       	rjmp	.+2      	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	e0 91 59 12 	lds	r30, 0x1259	; 0x801259 <pxDelayedTaskList>
    2032:	f0 91 5a 12 	lds	r31, 0x125A	; 0x80125a <pxDelayedTaskList+0x1>
    2036:	90 81       	ld	r25, Z
    2038:	91 11       	cpse	r25, r1
    203a:	0c c0       	rjmp	.+24     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    203c:	4f ef       	ldi	r20, 0xFF	; 255
    203e:	5f ef       	ldi	r21, 0xFF	; 255
    2040:	ba 01       	movw	r22, r20
    2042:	40 93 23 12 	sts	0x1223, r20	; 0x801223 <xNextTaskUnblockTime>
    2046:	50 93 24 12 	sts	0x1224, r21	; 0x801224 <xNextTaskUnblockTime+0x1>
    204a:	60 93 25 12 	sts	0x1225, r22	; 0x801225 <xNextTaskUnblockTime+0x2>
    204e:	70 93 26 12 	sts	0x1226, r23	; 0x801226 <xNextTaskUnblockTime+0x3>
    2052:	9c c0       	rjmp	.+312    	; 0x218c <__DATA_REGION_LENGTH__+0x18c>
    2054:	e0 91 59 12 	lds	r30, 0x1259	; 0x801259 <pxDelayedTaskList>
    2058:	f0 91 5a 12 	lds	r31, 0x125A	; 0x80125a <pxDelayedTaskList+0x1>
    205c:	07 80       	ldd	r0, Z+7	; 0x07
    205e:	f0 85       	ldd	r31, Z+8	; 0x08
    2060:	e0 2d       	mov	r30, r0
    2062:	00 84       	ldd	r0, Z+8	; 0x08
    2064:	f1 85       	ldd	r31, Z+9	; 0x09
    2066:	e0 2d       	mov	r30, r0
    2068:	42 81       	ldd	r20, Z+2	; 0x02
    206a:	53 81       	ldd	r21, Z+3	; 0x03
    206c:	64 81       	ldd	r22, Z+4	; 0x04
    206e:	75 81       	ldd	r23, Z+5	; 0x05
    2070:	c4 16       	cp	r12, r20
    2072:	d5 06       	cpc	r13, r21
    2074:	e6 06       	cpc	r14, r22
    2076:	f7 06       	cpc	r15, r23
    2078:	48 f4       	brcc	.+18     	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    207a:	40 93 23 12 	sts	0x1223, r20	; 0x801223 <xNextTaskUnblockTime>
    207e:	50 93 24 12 	sts	0x1224, r21	; 0x801224 <xNextTaskUnblockTime+0x1>
    2082:	60 93 25 12 	sts	0x1225, r22	; 0x801225 <xNextTaskUnblockTime+0x2>
    2086:	70 93 26 12 	sts	0x1226, r23	; 0x801226 <xNextTaskUnblockTime+0x3>
    208a:	80 c0       	rjmp	.+256    	; 0x218c <__DATA_REGION_LENGTH__+0x18c>
    208c:	a4 85       	ldd	r26, Z+12	; 0x0c
    208e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2090:	c6 81       	ldd	r28, Z+6	; 0x06
    2092:	d7 81       	ldd	r29, Z+7	; 0x07
    2094:	20 85       	ldd	r18, Z+8	; 0x08
    2096:	31 85       	ldd	r19, Z+9	; 0x09
    2098:	3f 83       	std	Y+7, r19	; 0x07
    209a:	2e 83       	std	Y+6, r18	; 0x06
    209c:	c0 85       	ldd	r28, Z+8	; 0x08
    209e:	d1 85       	ldd	r29, Z+9	; 0x09
    20a0:	26 81       	ldd	r18, Z+6	; 0x06
    20a2:	37 81       	ldd	r19, Z+7	; 0x07
    20a4:	3d 83       	std	Y+5, r19	; 0x05
    20a6:	2c 83       	std	Y+4, r18	; 0x04
    20a8:	11 96       	adiw	r26, 0x01	; 1
    20aa:	4d 91       	ld	r20, X+
    20ac:	5c 91       	ld	r21, X
    20ae:	12 97       	sbiw	r26, 0x02	; 2
    20b0:	9f 01       	movw	r18, r30
    20b2:	2e 5f       	subi	r18, 0xFE	; 254
    20b4:	3f 4f       	sbci	r19, 0xFF	; 255
    20b6:	42 17       	cp	r20, r18
    20b8:	53 07       	cpc	r21, r19
    20ba:	31 f4       	brne	.+12     	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    20bc:	40 85       	ldd	r20, Z+8	; 0x08
    20be:	51 85       	ldd	r21, Z+9	; 0x09
    20c0:	12 96       	adiw	r26, 0x02	; 2
    20c2:	5c 93       	st	X, r21
    20c4:	4e 93       	st	-X, r20
    20c6:	11 97       	sbiw	r26, 0x01	; 1
    20c8:	15 86       	std	Z+13, r1	; 0x0d
    20ca:	14 86       	std	Z+12, r1	; 0x0c
    20cc:	9c 91       	ld	r25, X
    20ce:	91 50       	subi	r25, 0x01	; 1
    20d0:	9c 93       	st	X, r25
    20d2:	a0 8d       	ldd	r26, Z+24	; 0x18
    20d4:	b1 8d       	ldd	r27, Z+25	; 0x19
    20d6:	10 97       	sbiw	r26, 0x00	; 0
    20d8:	09 f1       	breq	.+66     	; 0x211c <__DATA_REGION_LENGTH__+0x11c>
    20da:	c2 89       	ldd	r28, Z+18	; 0x12
    20dc:	d3 89       	ldd	r29, Z+19	; 0x13
    20de:	44 89       	ldd	r20, Z+20	; 0x14
    20e0:	55 89       	ldd	r21, Z+21	; 0x15
    20e2:	5f 83       	std	Y+7, r21	; 0x07
    20e4:	4e 83       	std	Y+6, r20	; 0x06
    20e6:	c4 89       	ldd	r28, Z+20	; 0x14
    20e8:	d5 89       	ldd	r29, Z+21	; 0x15
    20ea:	42 89       	ldd	r20, Z+18	; 0x12
    20ec:	53 89       	ldd	r21, Z+19	; 0x13
    20ee:	5d 83       	std	Y+5, r21	; 0x05
    20f0:	4c 83       	std	Y+4, r20	; 0x04
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	6d 91       	ld	r22, X+
    20f6:	7c 91       	ld	r23, X
    20f8:	12 97       	sbiw	r26, 0x02	; 2
    20fa:	af 01       	movw	r20, r30
    20fc:	42 5f       	subi	r20, 0xF2	; 242
    20fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2100:	64 17       	cp	r22, r20
    2102:	75 07       	cpc	r23, r21
    2104:	31 f4       	brne	.+12     	; 0x2112 <__DATA_REGION_LENGTH__+0x112>
    2106:	44 89       	ldd	r20, Z+20	; 0x14
    2108:	55 89       	ldd	r21, Z+21	; 0x15
    210a:	12 96       	adiw	r26, 0x02	; 2
    210c:	5c 93       	st	X, r21
    210e:	4e 93       	st	-X, r20
    2110:	11 97       	sbiw	r26, 0x01	; 1
    2112:	11 8e       	std	Z+25, r1	; 0x19
    2114:	10 8e       	std	Z+24, r1	; 0x18
    2116:	9c 91       	ld	r25, X
    2118:	91 50       	subi	r25, 0x01	; 1
    211a:	9c 93       	st	X, r25
    211c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    211e:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <uxTopReadyPriority>
    2122:	9a 17       	cp	r25, r26
    2124:	10 f4       	brcc	.+4      	; 0x212a <__DATA_REGION_LENGTH__+0x12a>
    2126:	a0 93 2f 12 	sts	0x122F, r26	; 0x80122f <uxTopReadyPriority>
    212a:	9b e0       	ldi	r25, 0x0B	; 11
    212c:	9a 9f       	mul	r25, r26
    212e:	d0 01       	movw	r26, r0
    2130:	11 24       	eor	r1, r1
    2132:	af 58       	subi	r26, 0x8F	; 143
    2134:	bd 4e       	sbci	r27, 0xED	; 237
    2136:	11 96       	adiw	r26, 0x01	; 1
    2138:	0d 90       	ld	r0, X+
    213a:	bc 91       	ld	r27, X
    213c:	a0 2d       	mov	r26, r0
    213e:	b7 83       	std	Z+7, r27	; 0x07
    2140:	a6 83       	std	Z+6, r26	; 0x06
    2142:	16 96       	adiw	r26, 0x06	; 6
    2144:	4d 91       	ld	r20, X+
    2146:	5c 91       	ld	r21, X
    2148:	17 97       	sbiw	r26, 0x07	; 7
    214a:	51 87       	std	Z+9, r21	; 0x09
    214c:	40 87       	std	Z+8, r20	; 0x08
    214e:	16 96       	adiw	r26, 0x06	; 6
    2150:	cd 91       	ld	r28, X+
    2152:	dc 91       	ld	r29, X
    2154:	17 97       	sbiw	r26, 0x07	; 7
    2156:	3d 83       	std	Y+5, r19	; 0x05
    2158:	2c 83       	std	Y+4, r18	; 0x04
    215a:	17 96       	adiw	r26, 0x07	; 7
    215c:	3c 93       	st	X, r19
    215e:	2e 93       	st	-X, r18
    2160:	16 97       	sbiw	r26, 0x06	; 6
    2162:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2164:	9a 9f       	mul	r25, r26
    2166:	d0 01       	movw	r26, r0
    2168:	11 24       	eor	r1, r1
    216a:	af 58       	subi	r26, 0x8F	; 143
    216c:	bd 4e       	sbci	r27, 0xED	; 237
    216e:	b5 87       	std	Z+13, r27	; 0x0d
    2170:	a4 87       	std	Z+12, r26	; 0x0c
    2172:	9c 91       	ld	r25, X
    2174:	9f 5f       	subi	r25, 0xFF	; 255
    2176:	9c 93       	st	X, r25
    2178:	22 8d       	ldd	r18, Z+26	; 0x1a
    217a:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    217e:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2182:	92 8d       	ldd	r25, Z+26	; 0x1a
    2184:	29 17       	cp	r18, r25
    2186:	08 f0       	brcs	.+2      	; 0x218a <__DATA_REGION_LENGTH__+0x18a>
    2188:	4f cf       	rjmp	.-354    	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
    218a:	51 cf       	rjmp	.-350    	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    218c:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2190:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2194:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2196:	9b e0       	ldi	r25, 0x0B	; 11
    2198:	e9 9f       	mul	r30, r25
    219a:	f0 01       	movw	r30, r0
    219c:	11 24       	eor	r1, r1
    219e:	ef 58       	subi	r30, 0x8F	; 143
    21a0:	fd 4e       	sbci	r31, 0xED	; 237
    21a2:	90 81       	ld	r25, Z
    21a4:	92 30       	cpi	r25, 0x02	; 2
    21a6:	08 f0       	brcs	.+2      	; 0x21aa <__DATA_REGION_LENGTH__+0x1aa>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <xYieldPending>
    21ae:	91 11       	cpse	r25, r1
    21b0:	16 c0       	rjmp	.+44     	; 0x21de <__DATA_REGION_LENGTH__+0x1de>
    21b2:	16 c0       	rjmp	.+44     	; 0x21e0 <__DATA_REGION_LENGTH__+0x1e0>
    21b4:	80 91 2a 12 	lds	r24, 0x122A	; 0x80122a <xPendedTicks>
    21b8:	90 91 2b 12 	lds	r25, 0x122B	; 0x80122b <xPendedTicks+0x1>
    21bc:	a0 91 2c 12 	lds	r26, 0x122C	; 0x80122c <xPendedTicks+0x2>
    21c0:	b0 91 2d 12 	lds	r27, 0x122D	; 0x80122d <xPendedTicks+0x3>
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	a1 1d       	adc	r26, r1
    21c8:	b1 1d       	adc	r27, r1
    21ca:	80 93 2a 12 	sts	0x122A, r24	; 0x80122a <xPendedTicks>
    21ce:	90 93 2b 12 	sts	0x122B, r25	; 0x80122b <xPendedTicks+0x1>
    21d2:	a0 93 2c 12 	sts	0x122C, r26	; 0x80122c <xPendedTicks+0x2>
    21d6:	b0 93 2d 12 	sts	0x122D, r27	; 0x80122d <xPendedTicks+0x3>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <__DATA_REGION_LENGTH__+0x1e0>
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	ff 90       	pop	r15
    21e6:	ef 90       	pop	r14
    21e8:	df 90       	pop	r13
    21ea:	cf 90       	pop	r12
    21ec:	08 95       	ret

000021ee <xTaskResumeAll>:
    21ee:	cf 92       	push	r12
    21f0:	df 92       	push	r13
    21f2:	ef 92       	push	r14
    21f4:	ff 92       	push	r15
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	0f 92       	push	r0
    2200:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <uxSchedulerSuspended>
    2204:	81 50       	subi	r24, 0x01	; 1
    2206:	80 93 20 12 	sts	0x1220, r24	; 0x801220 <uxSchedulerSuspended>
    220a:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <uxSchedulerSuspended>
    220e:	81 11       	cpse	r24, r1
    2210:	be c0       	rjmp	.+380    	; 0x238e <__stack+0x18f>
    2212:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxCurrentNumberOfTasks>
    2216:	81 11       	cpse	r24, r1
    2218:	88 c0       	rjmp	.+272    	; 0x232a <__stack+0x12b>
    221a:	bc c0       	rjmp	.+376    	; 0x2394 <__stack+0x195>
    221c:	e0 91 53 12 	lds	r30, 0x1253	; 0x801253 <xPendingReadyList+0x7>
    2220:	f0 91 54 12 	lds	r31, 0x1254	; 0x801254 <xPendingReadyList+0x8>
    2224:	00 84       	ldd	r0, Z+8	; 0x08
    2226:	f1 85       	ldd	r31, Z+9	; 0x09
    2228:	e0 2d       	mov	r30, r0
    222a:	a0 8d       	ldd	r26, Z+24	; 0x18
    222c:	b1 8d       	ldd	r27, Z+25	; 0x19
    222e:	c2 89       	ldd	r28, Z+18	; 0x12
    2230:	d3 89       	ldd	r29, Z+19	; 0x13
    2232:	84 89       	ldd	r24, Z+20	; 0x14
    2234:	95 89       	ldd	r25, Z+21	; 0x15
    2236:	9f 83       	std	Y+7, r25	; 0x07
    2238:	8e 83       	std	Y+6, r24	; 0x06
    223a:	c4 89       	ldd	r28, Z+20	; 0x14
    223c:	d5 89       	ldd	r29, Z+21	; 0x15
    223e:	82 89       	ldd	r24, Z+18	; 0x12
    2240:	93 89       	ldd	r25, Z+19	; 0x13
    2242:	9d 83       	std	Y+5, r25	; 0x05
    2244:	8c 83       	std	Y+4, r24	; 0x04
    2246:	11 96       	adiw	r26, 0x01	; 1
    2248:	2d 91       	ld	r18, X+
    224a:	3c 91       	ld	r19, X
    224c:	12 97       	sbiw	r26, 0x02	; 2
    224e:	cf 01       	movw	r24, r30
    2250:	0e 96       	adiw	r24, 0x0e	; 14
    2252:	28 17       	cp	r18, r24
    2254:	39 07       	cpc	r19, r25
    2256:	31 f4       	brne	.+12     	; 0x2264 <__stack+0x65>
    2258:	84 89       	ldd	r24, Z+20	; 0x14
    225a:	95 89       	ldd	r25, Z+21	; 0x15
    225c:	12 96       	adiw	r26, 0x02	; 2
    225e:	9c 93       	st	X, r25
    2260:	8e 93       	st	-X, r24
    2262:	11 97       	sbiw	r26, 0x01	; 1
    2264:	11 8e       	std	Z+25, r1	; 0x19
    2266:	10 8e       	std	Z+24, r1	; 0x18
    2268:	8c 91       	ld	r24, X
    226a:	81 50       	subi	r24, 0x01	; 1
    226c:	8c 93       	st	X, r24
    226e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2270:	b5 85       	ldd	r27, Z+13	; 0x0d
    2272:	c6 81       	ldd	r28, Z+6	; 0x06
    2274:	d7 81       	ldd	r29, Z+7	; 0x07
    2276:	80 85       	ldd	r24, Z+8	; 0x08
    2278:	91 85       	ldd	r25, Z+9	; 0x09
    227a:	9f 83       	std	Y+7, r25	; 0x07
    227c:	8e 83       	std	Y+6, r24	; 0x06
    227e:	c0 85       	ldd	r28, Z+8	; 0x08
    2280:	d1 85       	ldd	r29, Z+9	; 0x09
    2282:	86 81       	ldd	r24, Z+6	; 0x06
    2284:	97 81       	ldd	r25, Z+7	; 0x07
    2286:	9d 83       	std	Y+5, r25	; 0x05
    2288:	8c 83       	std	Y+4, r24	; 0x04
    228a:	11 96       	adiw	r26, 0x01	; 1
    228c:	8d 91       	ld	r24, X+
    228e:	9c 91       	ld	r25, X
    2290:	12 97       	sbiw	r26, 0x02	; 2
    2292:	9f 01       	movw	r18, r30
    2294:	2e 5f       	subi	r18, 0xFE	; 254
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	82 17       	cp	r24, r18
    229a:	93 07       	cpc	r25, r19
    229c:	31 f4       	brne	.+12     	; 0x22aa <__stack+0xab>
    229e:	80 85       	ldd	r24, Z+8	; 0x08
    22a0:	91 85       	ldd	r25, Z+9	; 0x09
    22a2:	12 96       	adiw	r26, 0x02	; 2
    22a4:	9c 93       	st	X, r25
    22a6:	8e 93       	st	-X, r24
    22a8:	11 97       	sbiw	r26, 0x01	; 1
    22aa:	15 86       	std	Z+13, r1	; 0x0d
    22ac:	14 86       	std	Z+12, r1	; 0x0c
    22ae:	8c 91       	ld	r24, X
    22b0:	81 50       	subi	r24, 0x01	; 1
    22b2:	8c 93       	st	X, r24
    22b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22b6:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    22ba:	8a 17       	cp	r24, r26
    22bc:	10 f4       	brcc	.+4      	; 0x22c2 <__stack+0xc3>
    22be:	a0 93 2f 12 	sts	0x122F, r26	; 0x80122f <uxTopReadyPriority>
    22c2:	8b e0       	ldi	r24, 0x0B	; 11
    22c4:	8a 9f       	mul	r24, r26
    22c6:	d0 01       	movw	r26, r0
    22c8:	11 24       	eor	r1, r1
    22ca:	af 58       	subi	r26, 0x8F	; 143
    22cc:	bd 4e       	sbci	r27, 0xED	; 237
    22ce:	11 96       	adiw	r26, 0x01	; 1
    22d0:	0d 90       	ld	r0, X+
    22d2:	bc 91       	ld	r27, X
    22d4:	a0 2d       	mov	r26, r0
    22d6:	b7 83       	std	Z+7, r27	; 0x07
    22d8:	a6 83       	std	Z+6, r26	; 0x06
    22da:	16 96       	adiw	r26, 0x06	; 6
    22dc:	4d 91       	ld	r20, X+
    22de:	5c 91       	ld	r21, X
    22e0:	17 97       	sbiw	r26, 0x07	; 7
    22e2:	51 87       	std	Z+9, r21	; 0x09
    22e4:	40 87       	std	Z+8, r20	; 0x08
    22e6:	16 96       	adiw	r26, 0x06	; 6
    22e8:	cd 91       	ld	r28, X+
    22ea:	dc 91       	ld	r29, X
    22ec:	17 97       	sbiw	r26, 0x07	; 7
    22ee:	3d 83       	std	Y+5, r19	; 0x05
    22f0:	2c 83       	std	Y+4, r18	; 0x04
    22f2:	17 96       	adiw	r26, 0x07	; 7
    22f4:	3c 93       	st	X, r19
    22f6:	2e 93       	st	-X, r18
    22f8:	16 97       	sbiw	r26, 0x06	; 6
    22fa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22fc:	8a 9f       	mul	r24, r26
    22fe:	d0 01       	movw	r26, r0
    2300:	11 24       	eor	r1, r1
    2302:	af 58       	subi	r26, 0x8F	; 143
    2304:	bd 4e       	sbci	r27, 0xED	; 237
    2306:	b5 87       	std	Z+13, r27	; 0x0d
    2308:	a4 87       	std	Z+12, r26	; 0x0c
    230a:	8c 91       	ld	r24, X
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8c 93       	st	X, r24
    2310:	92 8d       	ldd	r25, Z+26	; 0x1a
    2312:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    2316:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    231a:	5a 96       	adiw	r26, 0x1a	; 26
    231c:	8c 91       	ld	r24, X
    231e:	98 17       	cp	r25, r24
    2320:	30 f0       	brcs	.+12     	; 0x232e <__stack+0x12f>
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <xYieldPending>
    2328:	02 c0       	rjmp	.+4      	; 0x232e <__stack+0x12f>
    232a:	e0 e0       	ldi	r30, 0x00	; 0
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <xPendingReadyList>
    2332:	81 11       	cpse	r24, r1
    2334:	73 cf       	rjmp	.-282    	; 0x221c <__stack+0x1d>
    2336:	ef 2b       	or	r30, r31
    2338:	09 f0       	breq	.+2      	; 0x233c <__stack+0x13d>
    233a:	7d db       	rcall	.-2310   	; 0x1a36 <prvResetNextTaskUnblockTime>
    233c:	c0 90 2a 12 	lds	r12, 0x122A	; 0x80122a <xPendedTicks>
    2340:	d0 90 2b 12 	lds	r13, 0x122B	; 0x80122b <xPendedTicks+0x1>
    2344:	e0 90 2c 12 	lds	r14, 0x122C	; 0x80122c <xPendedTicks+0x2>
    2348:	f0 90 2d 12 	lds	r15, 0x122D	; 0x80122d <xPendedTicks+0x3>
    234c:	c1 14       	cp	r12, r1
    234e:	d1 04       	cpc	r13, r1
    2350:	e1 04       	cpc	r14, r1
    2352:	f1 04       	cpc	r15, r1
    2354:	a1 f0       	breq	.+40     	; 0x237e <__stack+0x17f>
    2356:	1f de       	rcall	.-962    	; 0x1f96 <xTaskIncrementTick>
    2358:	88 23       	and	r24, r24
    235a:	19 f0       	breq	.+6      	; 0x2362 <__stack+0x163>
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <xYieldPending>
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	c8 1a       	sub	r12, r24
    2366:	d1 08       	sbc	r13, r1
    2368:	e1 08       	sbc	r14, r1
    236a:	f1 08       	sbc	r15, r1
    236c:	a1 f7       	brne	.-24     	; 0x2356 <__stack+0x157>
    236e:	10 92 2a 12 	sts	0x122A, r1	; 0x80122a <xPendedTicks>
    2372:	10 92 2b 12 	sts	0x122B, r1	; 0x80122b <xPendedTicks+0x1>
    2376:	10 92 2c 12 	sts	0x122C, r1	; 0x80122c <xPendedTicks+0x2>
    237a:	10 92 2d 12 	sts	0x122D, r1	; 0x80122d <xPendedTicks+0x3>
    237e:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <xYieldPending>
    2382:	88 23       	and	r24, r24
    2384:	31 f0       	breq	.+12     	; 0x2392 <__stack+0x193>
    2386:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <__stack+0x195>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <__stack+0x195>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	0f 90       	pop	r0
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	df 90       	pop	r13
    23a2:	cf 90       	pop	r12
    23a4:	08 95       	ret

000023a6 <xTaskDelayUntil>:
    23a6:	8f 92       	push	r8
    23a8:	9f 92       	push	r9
    23aa:	af 92       	push	r10
    23ac:	bf 92       	push	r11
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	ec 01       	movw	r28, r24
    23be:	6a 01       	movw	r12, r20
    23c0:	7b 01       	movw	r14, r22
    23c2:	d5 dd       	rcall	.-1110   	; 0x1f6e <vTaskSuspendAll>
    23c4:	80 90 30 12 	lds	r8, 0x1230	; 0x801230 <xTickCount>
    23c8:	90 90 31 12 	lds	r9, 0x1231	; 0x801231 <xTickCount+0x1>
    23cc:	a0 90 32 12 	lds	r10, 0x1232	; 0x801232 <xTickCount+0x2>
    23d0:	b0 90 33 12 	lds	r11, 0x1233	; 0x801233 <xTickCount+0x3>
    23d4:	88 81       	ld	r24, Y
    23d6:	99 81       	ldd	r25, Y+1	; 0x01
    23d8:	aa 81       	ldd	r26, Y+2	; 0x02
    23da:	bb 81       	ldd	r27, Y+3	; 0x03
    23dc:	ac 01       	movw	r20, r24
    23de:	bd 01       	movw	r22, r26
    23e0:	4c 0d       	add	r20, r12
    23e2:	5d 1d       	adc	r21, r13
    23e4:	6e 1d       	adc	r22, r14
    23e6:	7f 1d       	adc	r23, r15
    23e8:	88 16       	cp	r8, r24
    23ea:	99 06       	cpc	r9, r25
    23ec:	aa 06       	cpc	r10, r26
    23ee:	bb 06       	cpc	r11, r27
    23f0:	60 f4       	brcc	.+24     	; 0x240a <xTaskDelayUntil+0x64>
    23f2:	48 17       	cp	r20, r24
    23f4:	59 07       	cpc	r21, r25
    23f6:	6a 07       	cpc	r22, r26
    23f8:	7b 07       	cpc	r23, r27
    23fa:	98 f4       	brcc	.+38     	; 0x2422 <xTaskDelayUntil+0x7c>
    23fc:	84 16       	cp	r8, r20
    23fe:	95 06       	cpc	r9, r21
    2400:	a6 06       	cpc	r10, r22
    2402:	b7 06       	cpc	r11, r23
    2404:	80 f0       	brcs	.+32     	; 0x2426 <xTaskDelayUntil+0x80>
    2406:	10 e0       	ldi	r17, 0x00	; 0
    2408:	13 c0       	rjmp	.+38     	; 0x2430 <xTaskDelayUntil+0x8a>
    240a:	48 17       	cp	r20, r24
    240c:	59 07       	cpc	r21, r25
    240e:	6a 07       	cpc	r22, r26
    2410:	7b 07       	cpc	r23, r27
    2412:	58 f0       	brcs	.+22     	; 0x242a <xTaskDelayUntil+0x84>
    2414:	84 16       	cp	r8, r20
    2416:	95 06       	cpc	r9, r21
    2418:	a6 06       	cpc	r10, r22
    241a:	b7 06       	cpc	r11, r23
    241c:	40 f0       	brcs	.+16     	; 0x242e <xTaskDelayUntil+0x88>
    241e:	10 e0       	ldi	r17, 0x00	; 0
    2420:	07 c0       	rjmp	.+14     	; 0x2430 <xTaskDelayUntil+0x8a>
    2422:	10 e0       	ldi	r17, 0x00	; 0
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <xTaskDelayUntil+0x8a>
    2426:	11 e0       	ldi	r17, 0x01	; 1
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <xTaskDelayUntil+0x8a>
    242a:	11 e0       	ldi	r17, 0x01	; 1
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <xTaskDelayUntil+0x8a>
    242e:	11 e0       	ldi	r17, 0x01	; 1
    2430:	48 83       	st	Y, r20
    2432:	59 83       	std	Y+1, r21	; 0x01
    2434:	6a 83       	std	Y+2, r22	; 0x02
    2436:	7b 83       	std	Y+3, r23	; 0x03
    2438:	11 23       	and	r17, r17
    243a:	41 f0       	breq	.+16     	; 0x244c <xTaskDelayUntil+0xa6>
    243c:	cb 01       	movw	r24, r22
    243e:	ba 01       	movw	r22, r20
    2440:	68 19       	sub	r22, r8
    2442:	79 09       	sbc	r23, r9
    2444:	8a 09       	sbc	r24, r10
    2446:	9b 09       	sbc	r25, r11
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	6b dc       	rcall	.-1834   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    244c:	d0 de       	rcall	.-608    	; 0x21ee <xTaskResumeAll>
    244e:	81 11       	cpse	r24, r1
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <xTaskDelayUntil+0xb0>
    2452:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    2456:	81 2f       	mov	r24, r17
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	1f 91       	pop	r17
    245e:	ff 90       	pop	r15
    2460:	ef 90       	pop	r14
    2462:	df 90       	pop	r13
    2464:	cf 90       	pop	r12
    2466:	bf 90       	pop	r11
    2468:	af 90       	pop	r10
    246a:	9f 90       	pop	r9
    246c:	8f 90       	pop	r8
    246e:	08 95       	ret

00002470 <vTaskDelay>:
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	6b 01       	movw	r12, r22
    247a:	7c 01       	movw	r14, r24
    247c:	67 2b       	or	r22, r23
    247e:	68 2b       	or	r22, r24
    2480:	69 2b       	or	r22, r25
    2482:	39 f0       	breq	.+14     	; 0x2492 <vTaskDelay+0x22>
    2484:	74 dd       	rcall	.-1304   	; 0x1f6e <vTaskSuspendAll>
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	c7 01       	movw	r24, r14
    248a:	b6 01       	movw	r22, r12
    248c:	4a dc       	rcall	.-1900   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    248e:	af de       	rcall	.-674    	; 0x21ee <xTaskResumeAll>
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <vTaskDelay+0x24>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	81 11       	cpse	r24, r1
    2496:	02 c0       	rjmp	.+4      	; 0x249c <vTaskDelay+0x2c>
    2498:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    249c:	ff 90       	pop	r15
    249e:	ef 90       	pop	r14
    24a0:	df 90       	pop	r13
    24a2:	cf 90       	pop	r12
    24a4:	08 95       	ret

000024a6 <vTaskSwitchContext>:
    24a6:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <uxSchedulerSuspended>
    24aa:	88 23       	and	r24, r24
    24ac:	21 f0       	breq	.+8      	; 0x24b6 <vTaskSwitchContext+0x10>
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <xYieldPending>
    24b4:	08 95       	ret
    24b6:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <xYieldPending>
    24ba:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    24be:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    24c2:	20 81       	ld	r18, Z
    24c4:	31 81       	ldd	r19, Z+1	; 0x01
    24c6:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    24ca:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    24ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    24d0:	94 8d       	ldd	r25, Z+28	; 0x1c
    24d2:	82 17       	cp	r24, r18
    24d4:	93 07       	cpc	r25, r19
    24d6:	60 f0       	brcs	.+24     	; 0x24f0 <vTaskSwitchContext+0x4a>
    24d8:	60 91 df 12 	lds	r22, 0x12DF	; 0x8012df <pxCurrentTCB>
    24dc:	70 91 e0 12 	lds	r23, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    24e0:	63 5e       	subi	r22, 0xE3	; 227
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    24e8:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    24ec:	0e 94 c0 1c 	call	0x3980	; 0x3980 <vApplicationStackOverflowHook>
    24f0:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <vTaskSwitchContext+0x52>
    24f6:	81 50       	subi	r24, 0x01	; 1
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	9b e0       	ldi	r25, 0x0B	; 11
    24fe:	92 9f       	mul	r25, r18
    2500:	f0 01       	movw	r30, r0
    2502:	93 9f       	mul	r25, r19
    2504:	f0 0d       	add	r31, r0
    2506:	11 24       	eor	r1, r1
    2508:	ef 58       	subi	r30, 0x8F	; 143
    250a:	fd 4e       	sbci	r31, 0xED	; 237
    250c:	90 81       	ld	r25, Z
    250e:	99 23       	and	r25, r25
    2510:	91 f3       	breq	.-28     	; 0x24f6 <vTaskSwitchContext+0x50>
    2512:	9b e0       	ldi	r25, 0x0B	; 11
    2514:	92 9f       	mul	r25, r18
    2516:	a0 01       	movw	r20, r0
    2518:	93 9f       	mul	r25, r19
    251a:	50 0d       	add	r21, r0
    251c:	11 24       	eor	r1, r1
    251e:	df 01       	movw	r26, r30
    2520:	01 80       	ldd	r0, Z+1	; 0x01
    2522:	f2 81       	ldd	r31, Z+2	; 0x02
    2524:	e0 2d       	mov	r30, r0
    2526:	04 80       	ldd	r0, Z+4	; 0x04
    2528:	f5 81       	ldd	r31, Z+5	; 0x05
    252a:	e0 2d       	mov	r30, r0
    252c:	12 96       	adiw	r26, 0x02	; 2
    252e:	fc 93       	st	X, r31
    2530:	ee 93       	st	-X, r30
    2532:	11 97       	sbiw	r26, 0x01	; 1
    2534:	4c 58       	subi	r20, 0x8C	; 140
    2536:	5d 4e       	sbci	r21, 0xED	; 237
    2538:	e4 17       	cp	r30, r20
    253a:	f5 07       	cpc	r31, r21
    253c:	29 f4       	brne	.+10     	; 0x2548 <vTaskSwitchContext+0xa2>
    253e:	44 81       	ldd	r20, Z+4	; 0x04
    2540:	55 81       	ldd	r21, Z+5	; 0x05
    2542:	fd 01       	movw	r30, r26
    2544:	52 83       	std	Z+2, r21	; 0x02
    2546:	41 83       	std	Z+1, r20	; 0x01
    2548:	9b e0       	ldi	r25, 0x0B	; 11
    254a:	92 9f       	mul	r25, r18
    254c:	f0 01       	movw	r30, r0
    254e:	93 9f       	mul	r25, r19
    2550:	f0 0d       	add	r31, r0
    2552:	11 24       	eor	r1, r1
    2554:	ef 58       	subi	r30, 0x8F	; 143
    2556:	fd 4e       	sbci	r31, 0xED	; 237
    2558:	01 80       	ldd	r0, Z+1	; 0x01
    255a:	f2 81       	ldd	r31, Z+2	; 0x02
    255c:	e0 2d       	mov	r30, r0
    255e:	20 85       	ldd	r18, Z+8	; 0x08
    2560:	31 85       	ldd	r19, Z+9	; 0x09
    2562:	30 93 e0 12 	sts	0x12E0, r19	; 0x8012e0 <pxCurrentTCB+0x1>
    2566:	20 93 df 12 	sts	0x12DF, r18	; 0x8012df <pxCurrentTCB>
    256a:	80 93 2f 12 	sts	0x122F, r24	; 0x80122f <uxTopReadyPriority>
    256e:	08 95       	ret

00002570 <vTaskPlaceOnEventList>:
    2570:	cf 92       	push	r12
    2572:	df 92       	push	r13
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	6a 01       	movw	r12, r20
    257a:	7b 01       	movw	r14, r22
    257c:	60 91 df 12 	lds	r22, 0x12DF	; 0x8012df <pxCurrentTCB>
    2580:	70 91 e0 12 	lds	r23, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2584:	62 5f       	subi	r22, 0xF2	; 242
    2586:	7f 4f       	sbci	r23, 0xFF	; 255
    2588:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <vListInsert>
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	c7 01       	movw	r24, r14
    2590:	b6 01       	movw	r22, r12
    2592:	c7 db       	rcall	.-2162   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	08 95       	ret

0000259e <vTaskPlaceOnUnorderedEventList>:
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	fc 01       	movw	r30, r24
    25a8:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    25ac:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    25b0:	70 68       	ori	r23, 0x80	; 128
    25b2:	1e 96       	adiw	r26, 0x0e	; 14
    25b4:	4d 93       	st	X+, r20
    25b6:	5d 93       	st	X+, r21
    25b8:	6d 93       	st	X+, r22
    25ba:	7c 93       	st	X, r23
    25bc:	51 97       	sbiw	r26, 0x11	; 17
    25be:	a1 81       	ldd	r26, Z+1	; 0x01
    25c0:	b2 81       	ldd	r27, Z+2	; 0x02
    25c2:	c0 91 df 12 	lds	r28, 0x12DF	; 0x8012df <pxCurrentTCB>
    25c6:	d0 91 e0 12 	lds	r29, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    25ca:	bb 8b       	std	Y+19, r27	; 0x13
    25cc:	aa 8b       	std	Y+18, r26	; 0x12
    25ce:	c0 91 df 12 	lds	r28, 0x12DF	; 0x8012df <pxCurrentTCB>
    25d2:	d0 91 e0 12 	lds	r29, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    25d6:	16 96       	adiw	r26, 0x06	; 6
    25d8:	8d 91       	ld	r24, X+
    25da:	9c 91       	ld	r25, X
    25dc:	17 97       	sbiw	r26, 0x07	; 7
    25de:	9d 8b       	std	Y+21, r25	; 0x15
    25e0:	8c 8b       	std	Y+20, r24	; 0x14
    25e2:	16 96       	adiw	r26, 0x06	; 6
    25e4:	cd 91       	ld	r28, X+
    25e6:	dc 91       	ld	r29, X
    25e8:	17 97       	sbiw	r26, 0x07	; 7
    25ea:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    25ee:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    25f2:	0e 96       	adiw	r24, 0x0e	; 14
    25f4:	9d 83       	std	Y+5, r25	; 0x05
    25f6:	8c 83       	std	Y+4, r24	; 0x04
    25f8:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    25fc:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2600:	0e 96       	adiw	r24, 0x0e	; 14
    2602:	17 96       	adiw	r26, 0x07	; 7
    2604:	9c 93       	st	X, r25
    2606:	8e 93       	st	-X, r24
    2608:	16 97       	sbiw	r26, 0x06	; 6
    260a:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    260e:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2612:	59 96       	adiw	r26, 0x19	; 25
    2614:	fc 93       	st	X, r31
    2616:	ee 93       	st	-X, r30
    2618:	58 97       	sbiw	r26, 0x18	; 24
    261a:	80 81       	ld	r24, Z
    261c:	8f 5f       	subi	r24, 0xFF	; 255
    261e:	80 83       	st	Z, r24
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	c9 01       	movw	r24, r18
    2624:	b8 01       	movw	r22, r16
    2626:	7d db       	rcall	.-2310   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	08 95       	ret

00002632 <vTaskPlaceOnEventListRestricted>:
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	fc 01       	movw	r30, r24
    2638:	cb 01       	movw	r24, r22
    263a:	ba 01       	movw	r22, r20
    263c:	a1 81       	ldd	r26, Z+1	; 0x01
    263e:	b2 81       	ldd	r27, Z+2	; 0x02
    2640:	c0 91 df 12 	lds	r28, 0x12DF	; 0x8012df <pxCurrentTCB>
    2644:	d0 91 e0 12 	lds	r29, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2648:	bb 8b       	std	Y+19, r27	; 0x13
    264a:	aa 8b       	std	Y+18, r26	; 0x12
    264c:	c0 91 df 12 	lds	r28, 0x12DF	; 0x8012df <pxCurrentTCB>
    2650:	d0 91 e0 12 	lds	r29, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2654:	16 96       	adiw	r26, 0x06	; 6
    2656:	4d 91       	ld	r20, X+
    2658:	5c 91       	ld	r21, X
    265a:	17 97       	sbiw	r26, 0x07	; 7
    265c:	5d 8b       	std	Y+21, r21	; 0x15
    265e:	4c 8b       	std	Y+20, r20	; 0x14
    2660:	16 96       	adiw	r26, 0x06	; 6
    2662:	cd 91       	ld	r28, X+
    2664:	dc 91       	ld	r29, X
    2666:	17 97       	sbiw	r26, 0x07	; 7
    2668:	40 91 df 12 	lds	r20, 0x12DF	; 0x8012df <pxCurrentTCB>
    266c:	50 91 e0 12 	lds	r21, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2670:	42 5f       	subi	r20, 0xF2	; 242
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	5d 83       	std	Y+5, r21	; 0x05
    2676:	4c 83       	std	Y+4, r20	; 0x04
    2678:	40 91 df 12 	lds	r20, 0x12DF	; 0x8012df <pxCurrentTCB>
    267c:	50 91 e0 12 	lds	r21, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2680:	42 5f       	subi	r20, 0xF2	; 242
    2682:	5f 4f       	sbci	r21, 0xFF	; 255
    2684:	17 96       	adiw	r26, 0x07	; 7
    2686:	5c 93       	st	X, r21
    2688:	4e 93       	st	-X, r20
    268a:	16 97       	sbiw	r26, 0x06	; 6
    268c:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    2690:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2694:	59 96       	adiw	r26, 0x19	; 25
    2696:	fc 93       	st	X, r31
    2698:	ee 93       	st	-X, r30
    269a:	58 97       	sbiw	r26, 0x18	; 24
    269c:	30 81       	ld	r19, Z
    269e:	3f 5f       	subi	r19, 0xFF	; 255
    26a0:	30 83       	st	Z, r19
    26a2:	22 23       	and	r18, r18
    26a4:	19 f0       	breq	.+6      	; 0x26ac <vTaskPlaceOnEventListRestricted+0x7a>
    26a6:	6f ef       	ldi	r22, 0xFF	; 255
    26a8:	7f ef       	ldi	r23, 0xFF	; 255
    26aa:	cb 01       	movw	r24, r22
    26ac:	42 2f       	mov	r20, r18
    26ae:	39 db       	rcall	.-2446   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	08 95       	ret

000026b6 <xTaskRemoveFromEventList>:
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	dc 01       	movw	r26, r24
    26bc:	17 96       	adiw	r26, 0x07	; 7
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	18 97       	sbiw	r26, 0x08	; 8
    26c4:	00 84       	ldd	r0, Z+8	; 0x08
    26c6:	f1 85       	ldd	r31, Z+9	; 0x09
    26c8:	e0 2d       	mov	r30, r0
    26ca:	a0 8d       	ldd	r26, Z+24	; 0x18
    26cc:	b1 8d       	ldd	r27, Z+25	; 0x19
    26ce:	c2 89       	ldd	r28, Z+18	; 0x12
    26d0:	d3 89       	ldd	r29, Z+19	; 0x13
    26d2:	84 89       	ldd	r24, Z+20	; 0x14
    26d4:	95 89       	ldd	r25, Z+21	; 0x15
    26d6:	9f 83       	std	Y+7, r25	; 0x07
    26d8:	8e 83       	std	Y+6, r24	; 0x06
    26da:	c4 89       	ldd	r28, Z+20	; 0x14
    26dc:	d5 89       	ldd	r29, Z+21	; 0x15
    26de:	82 89       	ldd	r24, Z+18	; 0x12
    26e0:	93 89       	ldd	r25, Z+19	; 0x13
    26e2:	9d 83       	std	Y+5, r25	; 0x05
    26e4:	8c 83       	std	Y+4, r24	; 0x04
    26e6:	11 96       	adiw	r26, 0x01	; 1
    26e8:	8d 91       	ld	r24, X+
    26ea:	9c 91       	ld	r25, X
    26ec:	12 97       	sbiw	r26, 0x02	; 2
    26ee:	9f 01       	movw	r18, r30
    26f0:	22 5f       	subi	r18, 0xF2	; 242
    26f2:	3f 4f       	sbci	r19, 0xFF	; 255
    26f4:	82 17       	cp	r24, r18
    26f6:	93 07       	cpc	r25, r19
    26f8:	31 f4       	brne	.+12     	; 0x2706 <xTaskRemoveFromEventList+0x50>
    26fa:	84 89       	ldd	r24, Z+20	; 0x14
    26fc:	95 89       	ldd	r25, Z+21	; 0x15
    26fe:	12 96       	adiw	r26, 0x02	; 2
    2700:	9c 93       	st	X, r25
    2702:	8e 93       	st	-X, r24
    2704:	11 97       	sbiw	r26, 0x01	; 1
    2706:	11 8e       	std	Z+25, r1	; 0x19
    2708:	10 8e       	std	Z+24, r1	; 0x18
    270a:	8c 91       	ld	r24, X
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	8c 93       	st	X, r24
    2710:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <uxSchedulerSuspended>
    2714:	81 11       	cpse	r24, r1
    2716:	52 c0       	rjmp	.+164    	; 0x27bc <xTaskRemoveFromEventList+0x106>
    2718:	a4 85       	ldd	r26, Z+12	; 0x0c
    271a:	b5 85       	ldd	r27, Z+13	; 0x0d
    271c:	c6 81       	ldd	r28, Z+6	; 0x06
    271e:	d7 81       	ldd	r29, Z+7	; 0x07
    2720:	80 85       	ldd	r24, Z+8	; 0x08
    2722:	91 85       	ldd	r25, Z+9	; 0x09
    2724:	9f 83       	std	Y+7, r25	; 0x07
    2726:	8e 83       	std	Y+6, r24	; 0x06
    2728:	c0 85       	ldd	r28, Z+8	; 0x08
    272a:	d1 85       	ldd	r29, Z+9	; 0x09
    272c:	86 81       	ldd	r24, Z+6	; 0x06
    272e:	97 81       	ldd	r25, Z+7	; 0x07
    2730:	9d 83       	std	Y+5, r25	; 0x05
    2732:	8c 83       	std	Y+4, r24	; 0x04
    2734:	11 96       	adiw	r26, 0x01	; 1
    2736:	8d 91       	ld	r24, X+
    2738:	9c 91       	ld	r25, X
    273a:	12 97       	sbiw	r26, 0x02	; 2
    273c:	9f 01       	movw	r18, r30
    273e:	2e 5f       	subi	r18, 0xFE	; 254
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	82 17       	cp	r24, r18
    2744:	93 07       	cpc	r25, r19
    2746:	31 f4       	brne	.+12     	; 0x2754 <xTaskRemoveFromEventList+0x9e>
    2748:	80 85       	ldd	r24, Z+8	; 0x08
    274a:	91 85       	ldd	r25, Z+9	; 0x09
    274c:	12 96       	adiw	r26, 0x02	; 2
    274e:	9c 93       	st	X, r25
    2750:	8e 93       	st	-X, r24
    2752:	11 97       	sbiw	r26, 0x01	; 1
    2754:	15 86       	std	Z+13, r1	; 0x0d
    2756:	14 86       	std	Z+12, r1	; 0x0c
    2758:	8c 91       	ld	r24, X
    275a:	81 50       	subi	r24, 0x01	; 1
    275c:	8c 93       	st	X, r24
    275e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2760:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    2764:	8a 17       	cp	r24, r26
    2766:	10 f4       	brcc	.+4      	; 0x276c <xTaskRemoveFromEventList+0xb6>
    2768:	a0 93 2f 12 	sts	0x122F, r26	; 0x80122f <uxTopReadyPriority>
    276c:	8b e0       	ldi	r24, 0x0B	; 11
    276e:	8a 9f       	mul	r24, r26
    2770:	d0 01       	movw	r26, r0
    2772:	11 24       	eor	r1, r1
    2774:	af 58       	subi	r26, 0x8F	; 143
    2776:	bd 4e       	sbci	r27, 0xED	; 237
    2778:	11 96       	adiw	r26, 0x01	; 1
    277a:	0d 90       	ld	r0, X+
    277c:	bc 91       	ld	r27, X
    277e:	a0 2d       	mov	r26, r0
    2780:	b7 83       	std	Z+7, r27	; 0x07
    2782:	a6 83       	std	Z+6, r26	; 0x06
    2784:	16 96       	adiw	r26, 0x06	; 6
    2786:	4d 91       	ld	r20, X+
    2788:	5c 91       	ld	r21, X
    278a:	17 97       	sbiw	r26, 0x07	; 7
    278c:	51 87       	std	Z+9, r21	; 0x09
    278e:	40 87       	std	Z+8, r20	; 0x08
    2790:	16 96       	adiw	r26, 0x06	; 6
    2792:	cd 91       	ld	r28, X+
    2794:	dc 91       	ld	r29, X
    2796:	17 97       	sbiw	r26, 0x07	; 7
    2798:	3d 83       	std	Y+5, r19	; 0x05
    279a:	2c 83       	std	Y+4, r18	; 0x04
    279c:	17 96       	adiw	r26, 0x07	; 7
    279e:	3c 93       	st	X, r19
    27a0:	2e 93       	st	-X, r18
    27a2:	16 97       	sbiw	r26, 0x06	; 6
    27a4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27a6:	8a 9f       	mul	r24, r26
    27a8:	d0 01       	movw	r26, r0
    27aa:	11 24       	eor	r1, r1
    27ac:	af 58       	subi	r26, 0x8F	; 143
    27ae:	bd 4e       	sbci	r27, 0xED	; 237
    27b0:	b5 87       	std	Z+13, r27	; 0x0d
    27b2:	a4 87       	std	Z+12, r26	; 0x0c
    27b4:	8c 91       	ld	r24, X
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	8c 93       	st	X, r24
    27ba:	1c c0       	rjmp	.+56     	; 0x27f4 <xTaskRemoveFromEventList+0x13e>
    27bc:	4c e4       	ldi	r20, 0x4C	; 76
    27be:	52 e1       	ldi	r21, 0x12	; 18
    27c0:	da 01       	movw	r26, r20
    27c2:	11 96       	adiw	r26, 0x01	; 1
    27c4:	cd 91       	ld	r28, X+
    27c6:	dc 91       	ld	r29, X
    27c8:	12 97       	sbiw	r26, 0x02	; 2
    27ca:	d3 8b       	std	Z+19, r29	; 0x13
    27cc:	c2 8b       	std	Z+18, r28	; 0x12
    27ce:	8e 81       	ldd	r24, Y+6	; 0x06
    27d0:	9f 81       	ldd	r25, Y+7	; 0x07
    27d2:	95 8b       	std	Z+21, r25	; 0x15
    27d4:	84 8b       	std	Z+20, r24	; 0x14
    27d6:	8e 81       	ldd	r24, Y+6	; 0x06
    27d8:	9f 81       	ldd	r25, Y+7	; 0x07
    27da:	dc 01       	movw	r26, r24
    27dc:	15 96       	adiw	r26, 0x05	; 5
    27de:	3c 93       	st	X, r19
    27e0:	2e 93       	st	-X, r18
    27e2:	14 97       	sbiw	r26, 0x04	; 4
    27e4:	3f 83       	std	Y+7, r19	; 0x07
    27e6:	2e 83       	std	Y+6, r18	; 0x06
    27e8:	51 8f       	std	Z+25, r21	; 0x19
    27ea:	40 8f       	std	Z+24, r20	; 0x18
    27ec:	da 01       	movw	r26, r20
    27ee:	8c 91       	ld	r24, X
    27f0:	8f 5f       	subi	r24, 0xFF	; 255
    27f2:	8c 93       	st	X, r24
    27f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    27f6:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    27fa:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    27fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2800:	89 17       	cp	r24, r25
    2802:	20 f4       	brcc	.+8      	; 0x280c <xTaskRemoveFromEventList+0x156>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <xYieldPending>
    280a:	01 c0       	rjmp	.+2      	; 0x280e <xTaskRemoveFromEventList+0x158>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	08 95       	ret

00002814 <vTaskRemoveFromUnorderedEventList>:
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	dc 01       	movw	r26, r24
    281a:	70 68       	ori	r23, 0x80	; 128
    281c:	4d 93       	st	X+, r20
    281e:	5d 93       	st	X+, r21
    2820:	6d 93       	st	X+, r22
    2822:	7c 93       	st	X, r23
    2824:	13 97       	sbiw	r26, 0x03	; 3
    2826:	18 96       	adiw	r26, 0x08	; 8
    2828:	ed 91       	ld	r30, X+
    282a:	fc 91       	ld	r31, X
    282c:	19 97       	sbiw	r26, 0x09	; 9
    282e:	1a 96       	adiw	r26, 0x0a	; 10
    2830:	4d 91       	ld	r20, X+
    2832:	5c 91       	ld	r21, X
    2834:	1b 97       	sbiw	r26, 0x0b	; 11
    2836:	14 96       	adiw	r26, 0x04	; 4
    2838:	8d 91       	ld	r24, X+
    283a:	9c 91       	ld	r25, X
    283c:	15 97       	sbiw	r26, 0x05	; 5
    283e:	16 96       	adiw	r26, 0x06	; 6
    2840:	2d 91       	ld	r18, X+
    2842:	3c 91       	ld	r19, X
    2844:	17 97       	sbiw	r26, 0x07	; 7
    2846:	ec 01       	movw	r28, r24
    2848:	3f 83       	std	Y+7, r19	; 0x07
    284a:	2e 83       	std	Y+6, r18	; 0x06
    284c:	16 96       	adiw	r26, 0x06	; 6
    284e:	8d 91       	ld	r24, X+
    2850:	9c 91       	ld	r25, X
    2852:	17 97       	sbiw	r26, 0x07	; 7
    2854:	14 96       	adiw	r26, 0x04	; 4
    2856:	2d 91       	ld	r18, X+
    2858:	3c 91       	ld	r19, X
    285a:	15 97       	sbiw	r26, 0x05	; 5
    285c:	ec 01       	movw	r28, r24
    285e:	3d 83       	std	Y+5, r19	; 0x05
    2860:	2c 83       	std	Y+4, r18	; 0x04
    2862:	ea 01       	movw	r28, r20
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	a8 17       	cp	r26, r24
    286a:	b9 07       	cpc	r27, r25
    286c:	31 f4       	brne	.+12     	; 0x287a <vTaskRemoveFromUnorderedEventList+0x66>
    286e:	16 96       	adiw	r26, 0x06	; 6
    2870:	8d 91       	ld	r24, X+
    2872:	9c 91       	ld	r25, X
    2874:	17 97       	sbiw	r26, 0x07	; 7
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	1b 96       	adiw	r26, 0x0b	; 11
    287c:	1c 92       	st	X, r1
    287e:	1e 92       	st	-X, r1
    2880:	1a 97       	sbiw	r26, 0x0a	; 10
    2882:	da 01       	movw	r26, r20
    2884:	8c 91       	ld	r24, X
    2886:	81 50       	subi	r24, 0x01	; 1
    2888:	8c 93       	st	X, r24
    288a:	a4 85       	ldd	r26, Z+12	; 0x0c
    288c:	b5 85       	ldd	r27, Z+13	; 0x0d
    288e:	c6 81       	ldd	r28, Z+6	; 0x06
    2890:	d7 81       	ldd	r29, Z+7	; 0x07
    2892:	80 85       	ldd	r24, Z+8	; 0x08
    2894:	91 85       	ldd	r25, Z+9	; 0x09
    2896:	9f 83       	std	Y+7, r25	; 0x07
    2898:	8e 83       	std	Y+6, r24	; 0x06
    289a:	c0 85       	ldd	r28, Z+8	; 0x08
    289c:	d1 85       	ldd	r29, Z+9	; 0x09
    289e:	86 81       	ldd	r24, Z+6	; 0x06
    28a0:	97 81       	ldd	r25, Z+7	; 0x07
    28a2:	9d 83       	std	Y+5, r25	; 0x05
    28a4:	8c 83       	std	Y+4, r24	; 0x04
    28a6:	11 96       	adiw	r26, 0x01	; 1
    28a8:	8d 91       	ld	r24, X+
    28aa:	9c 91       	ld	r25, X
    28ac:	12 97       	sbiw	r26, 0x02	; 2
    28ae:	9f 01       	movw	r18, r30
    28b0:	2e 5f       	subi	r18, 0xFE	; 254
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
    28b4:	82 17       	cp	r24, r18
    28b6:	93 07       	cpc	r25, r19
    28b8:	31 f4       	brne	.+12     	; 0x28c6 <vTaskRemoveFromUnorderedEventList+0xb2>
    28ba:	80 85       	ldd	r24, Z+8	; 0x08
    28bc:	91 85       	ldd	r25, Z+9	; 0x09
    28be:	12 96       	adiw	r26, 0x02	; 2
    28c0:	9c 93       	st	X, r25
    28c2:	8e 93       	st	-X, r24
    28c4:	11 97       	sbiw	r26, 0x01	; 1
    28c6:	15 86       	std	Z+13, r1	; 0x0d
    28c8:	14 86       	std	Z+12, r1	; 0x0c
    28ca:	8c 91       	ld	r24, X
    28cc:	81 50       	subi	r24, 0x01	; 1
    28ce:	8c 93       	st	X, r24
    28d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    28d2:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    28d6:	8a 17       	cp	r24, r26
    28d8:	10 f4       	brcc	.+4      	; 0x28de <vTaskRemoveFromUnorderedEventList+0xca>
    28da:	a0 93 2f 12 	sts	0x122F, r26	; 0x80122f <uxTopReadyPriority>
    28de:	8b e0       	ldi	r24, 0x0B	; 11
    28e0:	8a 9f       	mul	r24, r26
    28e2:	d0 01       	movw	r26, r0
    28e4:	11 24       	eor	r1, r1
    28e6:	af 58       	subi	r26, 0x8F	; 143
    28e8:	bd 4e       	sbci	r27, 0xED	; 237
    28ea:	11 96       	adiw	r26, 0x01	; 1
    28ec:	0d 90       	ld	r0, X+
    28ee:	bc 91       	ld	r27, X
    28f0:	a0 2d       	mov	r26, r0
    28f2:	b7 83       	std	Z+7, r27	; 0x07
    28f4:	a6 83       	std	Z+6, r26	; 0x06
    28f6:	16 96       	adiw	r26, 0x06	; 6
    28f8:	4d 91       	ld	r20, X+
    28fa:	5c 91       	ld	r21, X
    28fc:	17 97       	sbiw	r26, 0x07	; 7
    28fe:	51 87       	std	Z+9, r21	; 0x09
    2900:	40 87       	std	Z+8, r20	; 0x08
    2902:	16 96       	adiw	r26, 0x06	; 6
    2904:	cd 91       	ld	r28, X+
    2906:	dc 91       	ld	r29, X
    2908:	17 97       	sbiw	r26, 0x07	; 7
    290a:	3d 83       	std	Y+5, r19	; 0x05
    290c:	2c 83       	std	Y+4, r18	; 0x04
    290e:	17 96       	adiw	r26, 0x07	; 7
    2910:	3c 93       	st	X, r19
    2912:	2e 93       	st	-X, r18
    2914:	16 97       	sbiw	r26, 0x06	; 6
    2916:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2918:	8a 9f       	mul	r24, r26
    291a:	d0 01       	movw	r26, r0
    291c:	11 24       	eor	r1, r1
    291e:	af 58       	subi	r26, 0x8F	; 143
    2920:	bd 4e       	sbci	r27, 0xED	; 237
    2922:	b5 87       	std	Z+13, r27	; 0x0d
    2924:	a4 87       	std	Z+12, r26	; 0x0c
    2926:	8c 91       	ld	r24, X
    2928:	8f 5f       	subi	r24, 0xFF	; 255
    292a:	8c 93       	st	X, r24
    292c:	92 8d       	ldd	r25, Z+26	; 0x1a
    292e:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2932:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2936:	82 8d       	ldd	r24, Z+26	; 0x1a
    2938:	89 17       	cp	r24, r25
    293a:	18 f4       	brcc	.+6      	; 0x2942 <vTaskRemoveFromUnorderedEventList+0x12e>
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <xYieldPending>
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	08 95       	ret

00002948 <vTaskSetTimeOutState>:
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	0f 92       	push	r0
    294e:	20 91 28 12 	lds	r18, 0x1228	; 0x801228 <xNumOfOverflows>
    2952:	fc 01       	movw	r30, r24
    2954:	20 83       	st	Z, r18
    2956:	40 91 30 12 	lds	r20, 0x1230	; 0x801230 <xTickCount>
    295a:	50 91 31 12 	lds	r21, 0x1231	; 0x801231 <xTickCount+0x1>
    295e:	60 91 32 12 	lds	r22, 0x1232	; 0x801232 <xTickCount+0x2>
    2962:	70 91 33 12 	lds	r23, 0x1233	; 0x801233 <xTickCount+0x3>
    2966:	41 83       	std	Z+1, r20	; 0x01
    2968:	52 83       	std	Z+2, r21	; 0x02
    296a:	63 83       	std	Z+3, r22	; 0x03
    296c:	74 83       	std	Z+4, r23	; 0x04
    296e:	0f 90       	pop	r0
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	08 95       	ret

00002974 <vTaskInternalSetTimeOutState>:
    2974:	20 91 28 12 	lds	r18, 0x1228	; 0x801228 <xNumOfOverflows>
    2978:	fc 01       	movw	r30, r24
    297a:	20 83       	st	Z, r18
    297c:	40 91 30 12 	lds	r20, 0x1230	; 0x801230 <xTickCount>
    2980:	50 91 31 12 	lds	r21, 0x1231	; 0x801231 <xTickCount+0x1>
    2984:	60 91 32 12 	lds	r22, 0x1232	; 0x801232 <xTickCount+0x2>
    2988:	70 91 33 12 	lds	r23, 0x1233	; 0x801233 <xTickCount+0x3>
    298c:	41 83       	std	Z+1, r20	; 0x01
    298e:	52 83       	std	Z+2, r21	; 0x02
    2990:	63 83       	std	Z+3, r22	; 0x03
    2992:	74 83       	std	Z+4, r23	; 0x04
    2994:	08 95       	ret

00002996 <xTaskCheckForTimeOut>:
    2996:	8f 92       	push	r8
    2998:	9f 92       	push	r9
    299a:	af 92       	push	r10
    299c:	bf 92       	push	r11
    299e:	cf 92       	push	r12
    29a0:	df 92       	push	r13
    29a2:	ef 92       	push	r14
    29a4:	ff 92       	push	r15
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	fb 01       	movw	r30, r22
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	0f 92       	push	r0
    29b6:	c0 90 30 12 	lds	r12, 0x1230	; 0x801230 <xTickCount>
    29ba:	d0 90 31 12 	lds	r13, 0x1231	; 0x801231 <xTickCount+0x1>
    29be:	e0 90 32 12 	lds	r14, 0x1232	; 0x801232 <xTickCount+0x2>
    29c2:	f0 90 33 12 	lds	r15, 0x1233	; 0x801233 <xTickCount+0x3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	11 96       	adiw	r26, 0x01	; 1
    29ca:	0d 91       	ld	r16, X+
    29cc:	1d 91       	ld	r17, X+
    29ce:	2d 91       	ld	r18, X+
    29d0:	3c 91       	ld	r19, X
    29d2:	14 97       	sbiw	r26, 0x04	; 4
    29d4:	46 01       	movw	r8, r12
    29d6:	57 01       	movw	r10, r14
    29d8:	80 1a       	sub	r8, r16
    29da:	91 0a       	sbc	r9, r17
    29dc:	a2 0a       	sbc	r10, r18
    29de:	b3 0a       	sbc	r11, r19
    29e0:	40 81       	ld	r20, Z
    29e2:	51 81       	ldd	r21, Z+1	; 0x01
    29e4:	62 81       	ldd	r22, Z+2	; 0x02
    29e6:	73 81       	ldd	r23, Z+3	; 0x03
    29e8:	4f 3f       	cpi	r20, 0xFF	; 255
    29ea:	bf ef       	ldi	r27, 0xFF	; 255
    29ec:	5b 07       	cpc	r21, r27
    29ee:	6b 07       	cpc	r22, r27
    29f0:	7b 07       	cpc	r23, r27
    29f2:	39 f1       	breq	.+78     	; 0x2a42 <xTaskCheckForTimeOut+0xac>
    29f4:	ec 01       	movw	r28, r24
    29f6:	b8 81       	ld	r27, Y
    29f8:	a0 91 28 12 	lds	r26, 0x1228	; 0x801228 <xNumOfOverflows>
    29fc:	ba 17       	cp	r27, r26
    29fe:	59 f0       	breq	.+22     	; 0x2a16 <xTaskCheckForTimeOut+0x80>
    2a00:	c0 16       	cp	r12, r16
    2a02:	d1 06       	cpc	r13, r17
    2a04:	e2 06       	cpc	r14, r18
    2a06:	f3 06       	cpc	r15, r19
    2a08:	30 f0       	brcs	.+12     	; 0x2a16 <xTaskCheckForTimeOut+0x80>
    2a0a:	10 82       	st	Z, r1
    2a0c:	11 82       	std	Z+1, r1	; 0x01
    2a0e:	12 82       	std	Z+2, r1	; 0x02
    2a10:	13 82       	std	Z+3, r1	; 0x03
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	17 c0       	rjmp	.+46     	; 0x2a44 <xTaskCheckForTimeOut+0xae>
    2a16:	84 16       	cp	r8, r20
    2a18:	95 06       	cpc	r9, r21
    2a1a:	a6 06       	cpc	r10, r22
    2a1c:	b7 06       	cpc	r11, r23
    2a1e:	58 f4       	brcc	.+22     	; 0x2a36 <xTaskCheckForTimeOut+0xa0>
    2a20:	48 19       	sub	r20, r8
    2a22:	59 09       	sbc	r21, r9
    2a24:	6a 09       	sbc	r22, r10
    2a26:	7b 09       	sbc	r23, r11
    2a28:	40 83       	st	Z, r20
    2a2a:	51 83       	std	Z+1, r21	; 0x01
    2a2c:	62 83       	std	Z+2, r22	; 0x02
    2a2e:	73 83       	std	Z+3, r23	; 0x03
    2a30:	a1 df       	rcall	.-190    	; 0x2974 <vTaskInternalSetTimeOutState>
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	07 c0       	rjmp	.+14     	; 0x2a44 <xTaskCheckForTimeOut+0xae>
    2a36:	10 82       	st	Z, r1
    2a38:	11 82       	std	Z+1, r1	; 0x01
    2a3a:	12 82       	std	Z+2, r1	; 0x02
    2a3c:	13 82       	std	Z+3, r1	; 0x03
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	01 c0       	rjmp	.+2      	; 0x2a44 <xTaskCheckForTimeOut+0xae>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	0f 90       	pop	r0
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	ff 90       	pop	r15
    2a52:	ef 90       	pop	r14
    2a54:	df 90       	pop	r13
    2a56:	cf 90       	pop	r12
    2a58:	bf 90       	pop	r11
    2a5a:	af 90       	pop	r10
    2a5c:	9f 90       	pop	r9
    2a5e:	8f 90       	pop	r8
    2a60:	08 95       	ret

00002a62 <vTaskMissedYield>:
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <xYieldPending>
    2a68:	08 95       	ret

00002a6a <xTaskGetCurrentTaskHandle>:
    2a6a:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    2a6e:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2a72:	08 95       	ret

00002a74 <xTaskGetSchedulerState>:
    2a74:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <xSchedulerRunning>
    2a78:	88 23       	and	r24, r24
    2a7a:	31 f0       	breq	.+12     	; 0x2a88 <xTaskGetSchedulerState+0x14>
    2a7c:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <uxSchedulerSuspended>
    2a80:	81 11       	cpse	r24, r1
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <xTaskGetSchedulerState+0x18>
    2a84:	82 e0       	ldi	r24, 0x02	; 2
    2a86:	08 95       	ret
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	08 95       	ret
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	08 95       	ret

00002a90 <xTaskPriorityInherit>:
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	cf 93       	push	r28
    2a96:	df 93       	push	r29
    2a98:	fc 01       	movw	r30, r24
    2a9a:	89 2b       	or	r24, r25
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <xTaskPriorityInherit+0x10>
    2a9e:	77 c0       	rjmp	.+238    	; 0x2b8e <xTaskPriorityInherit+0xfe>
    2aa0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aa2:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    2aa6:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2aaa:	5a 96       	adiw	r26, 0x1a	; 26
    2aac:	9c 91       	ld	r25, X
    2aae:	89 17       	cp	r24, r25
    2ab0:	08 f0       	brcs	.+2      	; 0x2ab4 <xTaskPriorityInherit+0x24>
    2ab2:	63 c0       	rjmp	.+198    	; 0x2b7a <xTaskPriorityInherit+0xea>
    2ab4:	46 85       	ldd	r20, Z+14	; 0x0e
    2ab6:	57 85       	ldd	r21, Z+15	; 0x0f
    2ab8:	60 89       	ldd	r22, Z+16	; 0x10
    2aba:	71 89       	ldd	r23, Z+17	; 0x11
    2abc:	77 23       	and	r23, r23
    2abe:	94 f0       	brlt	.+36     	; 0x2ae4 <xTaskPriorityInherit+0x54>
    2ac0:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    2ac4:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2ac8:	5a 96       	adiw	r26, 0x1a	; 26
    2aca:	9c 91       	ld	r25, X
    2acc:	4a e0       	ldi	r20, 0x0A	; 10
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	49 1b       	sub	r20, r25
    2ad6:	51 09       	sbc	r21, r1
    2ad8:	61 09       	sbc	r22, r1
    2ada:	71 09       	sbc	r23, r1
    2adc:	46 87       	std	Z+14, r20	; 0x0e
    2ade:	57 87       	std	Z+15, r21	; 0x0f
    2ae0:	60 8b       	std	Z+16, r22	; 0x10
    2ae2:	71 8b       	std	Z+17, r23	; 0x11
    2ae4:	24 85       	ldd	r18, Z+12	; 0x0c
    2ae6:	35 85       	ldd	r19, Z+13	; 0x0d
    2ae8:	4b e0       	ldi	r20, 0x0B	; 11
    2aea:	84 9f       	mul	r24, r20
    2aec:	c0 01       	movw	r24, r0
    2aee:	11 24       	eor	r1, r1
    2af0:	8f 58       	subi	r24, 0x8F	; 143
    2af2:	9d 4e       	sbci	r25, 0xED	; 237
    2af4:	28 17       	cp	r18, r24
    2af6:	39 07       	cpc	r19, r25
    2af8:	b9 f5       	brne	.+110    	; 0x2b68 <xTaskPriorityInherit+0xd8>
    2afa:	ef 01       	movw	r28, r30
    2afc:	8f 01       	movw	r16, r30
    2afe:	0e 5f       	subi	r16, 0xFE	; 254
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	c8 01       	movw	r24, r16
    2b04:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uxListRemove>
    2b08:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2b0c:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2b10:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2b12:	ea 8f       	std	Y+26, r30	; 0x1a
    2b14:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    2b18:	8e 17       	cp	r24, r30
    2b1a:	10 f4       	brcc	.+4      	; 0x2b20 <xTaskPriorityInherit+0x90>
    2b1c:	e0 93 2f 12 	sts	0x122F, r30	; 0x80122f <uxTopReadyPriority>
    2b20:	8b e0       	ldi	r24, 0x0B	; 11
    2b22:	8e 9f       	mul	r24, r30
    2b24:	f0 01       	movw	r30, r0
    2b26:	11 24       	eor	r1, r1
    2b28:	ef 58       	subi	r30, 0x8F	; 143
    2b2a:	fd 4e       	sbci	r31, 0xED	; 237
    2b2c:	01 80       	ldd	r0, Z+1	; 0x01
    2b2e:	f2 81       	ldd	r31, Z+2	; 0x02
    2b30:	e0 2d       	mov	r30, r0
    2b32:	ff 83       	std	Y+7, r31	; 0x07
    2b34:	ee 83       	std	Y+6, r30	; 0x06
    2b36:	26 81       	ldd	r18, Z+6	; 0x06
    2b38:	37 81       	ldd	r19, Z+7	; 0x07
    2b3a:	39 87       	std	Y+9, r19	; 0x09
    2b3c:	28 87       	std	Y+8, r18	; 0x08
    2b3e:	a6 81       	ldd	r26, Z+6	; 0x06
    2b40:	b7 81       	ldd	r27, Z+7	; 0x07
    2b42:	15 96       	adiw	r26, 0x05	; 5
    2b44:	1c 93       	st	X, r17
    2b46:	0e 93       	st	-X, r16
    2b48:	14 97       	sbiw	r26, 0x04	; 4
    2b4a:	17 83       	std	Z+7, r17	; 0x07
    2b4c:	06 83       	std	Z+6, r16	; 0x06
    2b4e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b50:	8e 9f       	mul	r24, r30
    2b52:	f0 01       	movw	r30, r0
    2b54:	11 24       	eor	r1, r1
    2b56:	ef 58       	subi	r30, 0x8F	; 143
    2b58:	fd 4e       	sbci	r31, 0xED	; 237
    2b5a:	fd 87       	std	Y+13, r31	; 0x0d
    2b5c:	ec 87       	std	Y+12, r30	; 0x0c
    2b5e:	80 81       	ld	r24, Z
    2b60:	8f 5f       	subi	r24, 0xFF	; 255
    2b62:	80 83       	st	Z, r24
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	16 c0       	rjmp	.+44     	; 0x2b94 <xTaskPriorityInherit+0x104>
    2b68:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    2b6c:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2b70:	5a 96       	adiw	r26, 0x1a	; 26
    2b72:	8c 91       	ld	r24, X
    2b74:	82 8f       	std	Z+26, r24	; 0x1a
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	0d c0       	rjmp	.+26     	; 0x2b94 <xTaskPriorityInherit+0x104>
    2b7a:	95 a5       	ldd	r25, Z+45	; 0x2d
    2b7c:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2b80:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2b84:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b86:	98 17       	cp	r25, r24
    2b88:	20 f0       	brcs	.+8      	; 0x2b92 <xTaskPriorityInherit+0x102>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	03 c0       	rjmp	.+6      	; 0x2b94 <xTaskPriorityInherit+0x104>
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	01 c0       	rjmp	.+2      	; 0x2b94 <xTaskPriorityInherit+0x104>
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	08 95       	ret

00002b9e <xTaskPriorityDisinherit>:
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	89 2b       	or	r24, r25
    2baa:	09 f4       	brne	.+2      	; 0x2bae <xTaskPriorityDisinherit+0x10>
    2bac:	49 c0       	rjmp	.+146    	; 0x2c40 <xTaskPriorityDisinherit+0xa2>
    2bae:	86 a5       	ldd	r24, Z+46	; 0x2e
    2bb0:	81 50       	subi	r24, 0x01	; 1
    2bb2:	86 a7       	std	Z+46, r24	; 0x2e
    2bb4:	22 8d       	ldd	r18, Z+26	; 0x1a
    2bb6:	95 a5       	ldd	r25, Z+45	; 0x2d
    2bb8:	29 17       	cp	r18, r25
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <xTaskPriorityDisinherit+0x20>
    2bbc:	43 c0       	rjmp	.+134    	; 0x2c44 <xTaskPriorityDisinherit+0xa6>
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	43 c0       	rjmp	.+134    	; 0x2c48 <xTaskPriorityDisinherit+0xaa>
    2bc2:	ef 01       	movw	r28, r30
    2bc4:	8f 01       	movw	r16, r30
    2bc6:	0e 5f       	subi	r16, 0xFE	; 254
    2bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bca:	c8 01       	movw	r24, r16
    2bcc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uxListRemove>
    2bd0:	ed a5       	ldd	r30, Y+45	; 0x2d
    2bd2:	ea 8f       	std	Y+26, r30	; 0x1a
    2bd4:	8a e0       	ldi	r24, 0x0A	; 10
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a0 e0       	ldi	r26, 0x00	; 0
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	8e 1b       	sub	r24, r30
    2bde:	91 09       	sbc	r25, r1
    2be0:	a1 09       	sbc	r26, r1
    2be2:	b1 09       	sbc	r27, r1
    2be4:	8e 87       	std	Y+14, r24	; 0x0e
    2be6:	9f 87       	std	Y+15, r25	; 0x0f
    2be8:	a8 8b       	std	Y+16, r26	; 0x10
    2bea:	b9 8b       	std	Y+17, r27	; 0x11
    2bec:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    2bf0:	8e 17       	cp	r24, r30
    2bf2:	10 f4       	brcc	.+4      	; 0x2bf8 <xTaskPriorityDisinherit+0x5a>
    2bf4:	e0 93 2f 12 	sts	0x122F, r30	; 0x80122f <uxTopReadyPriority>
    2bf8:	8b e0       	ldi	r24, 0x0B	; 11
    2bfa:	8e 9f       	mul	r24, r30
    2bfc:	f0 01       	movw	r30, r0
    2bfe:	11 24       	eor	r1, r1
    2c00:	ef 58       	subi	r30, 0x8F	; 143
    2c02:	fd 4e       	sbci	r31, 0xED	; 237
    2c04:	01 80       	ldd	r0, Z+1	; 0x01
    2c06:	f2 81       	ldd	r31, Z+2	; 0x02
    2c08:	e0 2d       	mov	r30, r0
    2c0a:	ff 83       	std	Y+7, r31	; 0x07
    2c0c:	ee 83       	std	Y+6, r30	; 0x06
    2c0e:	26 81       	ldd	r18, Z+6	; 0x06
    2c10:	37 81       	ldd	r19, Z+7	; 0x07
    2c12:	39 87       	std	Y+9, r19	; 0x09
    2c14:	28 87       	std	Y+8, r18	; 0x08
    2c16:	a6 81       	ldd	r26, Z+6	; 0x06
    2c18:	b7 81       	ldd	r27, Z+7	; 0x07
    2c1a:	15 96       	adiw	r26, 0x05	; 5
    2c1c:	1c 93       	st	X, r17
    2c1e:	0e 93       	st	-X, r16
    2c20:	14 97       	sbiw	r26, 0x04	; 4
    2c22:	17 83       	std	Z+7, r17	; 0x07
    2c24:	06 83       	std	Z+6, r16	; 0x06
    2c26:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c28:	8e 9f       	mul	r24, r30
    2c2a:	f0 01       	movw	r30, r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	ef 58       	subi	r30, 0x8F	; 143
    2c30:	fd 4e       	sbci	r31, 0xED	; 237
    2c32:	fd 87       	std	Y+13, r31	; 0x0d
    2c34:	ec 87       	std	Y+12, r30	; 0x0c
    2c36:	80 81       	ld	r24, Z
    2c38:	8f 5f       	subi	r24, 0xFF	; 255
    2c3a:	80 83       	st	Z, r24
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	05 c0       	rjmp	.+10     	; 0x2c4a <xTaskPriorityDisinherit+0xac>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <xTaskPriorityDisinherit+0xac>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	01 c0       	rjmp	.+2      	; 0x2c4a <xTaskPriorityDisinherit+0xac>
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	08 95       	ret

00002c54 <vTaskPriorityDisinheritAfterTimeout>:
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	89 2b       	or	r24, r25
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2c62:	5a c0       	rjmp	.+180    	; 0x2d18 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2c64:	85 a5       	ldd	r24, Z+45	; 0x2d
    2c66:	86 17       	cp	r24, r22
    2c68:	08 f4       	brcc	.+2      	; 0x2c6c <vTaskPriorityDisinheritAfterTimeout+0x18>
    2c6a:	86 2f       	mov	r24, r22
    2c6c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c6e:	89 17       	cp	r24, r25
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2c72:	52 c0       	rjmp	.+164    	; 0x2d18 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2c74:	26 a5       	ldd	r18, Z+46	; 0x2e
    2c76:	21 30       	cpi	r18, 0x01	; 1
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <vTaskPriorityDisinheritAfterTimeout+0x28>
    2c7a:	4e c0       	rjmp	.+156    	; 0x2d18 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2c7c:	82 8f       	std	Z+26, r24	; 0x1a
    2c7e:	46 85       	ldd	r20, Z+14	; 0x0e
    2c80:	57 85       	ldd	r21, Z+15	; 0x0f
    2c82:	60 89       	ldd	r22, Z+16	; 0x10
    2c84:	71 89       	ldd	r23, Z+17	; 0x11
    2c86:	77 23       	and	r23, r23
    2c88:	64 f0       	brlt	.+24     	; 0x2ca2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2c8a:	4a e0       	ldi	r20, 0x0A	; 10
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	48 1b       	sub	r20, r24
    2c94:	51 09       	sbc	r21, r1
    2c96:	61 09       	sbc	r22, r1
    2c98:	71 09       	sbc	r23, r1
    2c9a:	46 87       	std	Z+14, r20	; 0x0e
    2c9c:	57 87       	std	Z+15, r21	; 0x0f
    2c9e:	60 8b       	std	Z+16, r22	; 0x10
    2ca0:	71 8b       	std	Z+17, r23	; 0x11
    2ca2:	24 85       	ldd	r18, Z+12	; 0x0c
    2ca4:	35 85       	ldd	r19, Z+13	; 0x0d
    2ca6:	4b e0       	ldi	r20, 0x0B	; 11
    2ca8:	94 9f       	mul	r25, r20
    2caa:	c0 01       	movw	r24, r0
    2cac:	11 24       	eor	r1, r1
    2cae:	8f 58       	subi	r24, 0x8F	; 143
    2cb0:	9d 4e       	sbci	r25, 0xED	; 237
    2cb2:	28 17       	cp	r18, r24
    2cb4:	39 07       	cpc	r19, r25
    2cb6:	81 f5       	brne	.+96     	; 0x2d18 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cb8:	ef 01       	movw	r28, r30
    2cba:	8f 01       	movw	r16, r30
    2cbc:	0e 5f       	subi	r16, 0xFE	; 254
    2cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc0:	c8 01       	movw	r24, r16
    2cc2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uxListRemove>
    2cc6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2cc8:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    2ccc:	8e 17       	cp	r24, r30
    2cce:	10 f4       	brcc	.+4      	; 0x2cd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2cd0:	e0 93 2f 12 	sts	0x122F, r30	; 0x80122f <uxTopReadyPriority>
    2cd4:	8b e0       	ldi	r24, 0x0B	; 11
    2cd6:	8e 9f       	mul	r24, r30
    2cd8:	f0 01       	movw	r30, r0
    2cda:	11 24       	eor	r1, r1
    2cdc:	ef 58       	subi	r30, 0x8F	; 143
    2cde:	fd 4e       	sbci	r31, 0xED	; 237
    2ce0:	01 80       	ldd	r0, Z+1	; 0x01
    2ce2:	f2 81       	ldd	r31, Z+2	; 0x02
    2ce4:	e0 2d       	mov	r30, r0
    2ce6:	ff 83       	std	Y+7, r31	; 0x07
    2ce8:	ee 83       	std	Y+6, r30	; 0x06
    2cea:	26 81       	ldd	r18, Z+6	; 0x06
    2cec:	37 81       	ldd	r19, Z+7	; 0x07
    2cee:	39 87       	std	Y+9, r19	; 0x09
    2cf0:	28 87       	std	Y+8, r18	; 0x08
    2cf2:	a6 81       	ldd	r26, Z+6	; 0x06
    2cf4:	b7 81       	ldd	r27, Z+7	; 0x07
    2cf6:	15 96       	adiw	r26, 0x05	; 5
    2cf8:	1c 93       	st	X, r17
    2cfa:	0e 93       	st	-X, r16
    2cfc:	14 97       	sbiw	r26, 0x04	; 4
    2cfe:	17 83       	std	Z+7, r17	; 0x07
    2d00:	06 83       	std	Z+6, r16	; 0x06
    2d02:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d04:	8e 9f       	mul	r24, r30
    2d06:	f0 01       	movw	r30, r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	ef 58       	subi	r30, 0x8F	; 143
    2d0c:	fd 4e       	sbci	r31, 0xED	; 237
    2d0e:	fd 87       	std	Y+13, r31	; 0x0d
    2d10:	ec 87       	std	Y+12, r30	; 0x0c
    2d12:	80 81       	ld	r24, Z
    2d14:	8f 5f       	subi	r24, 0xFF	; 255
    2d16:	80 83       	st	Z, r24
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	08 95       	ret

00002d22 <uxTaskResetEventItemValue>:
    2d22:	cf 92       	push	r12
    2d24:	df 92       	push	r13
    2d26:	ef 92       	push	r14
    2d28:	ff 92       	push	r15
    2d2a:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2d2e:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2d32:	66 85       	ldd	r22, Z+14	; 0x0e
    2d34:	77 85       	ldd	r23, Z+15	; 0x0f
    2d36:	80 89       	ldd	r24, Z+16	; 0x10
    2d38:	91 89       	ldd	r25, Z+17	; 0x11
    2d3a:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2d3e:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2d42:	a0 91 df 12 	lds	r26, 0x12DF	; 0x8012df <pxCurrentTCB>
    2d46:	b0 91 e0 12 	lds	r27, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2d4a:	5a 96       	adiw	r26, 0x1a	; 26
    2d4c:	2c 91       	ld	r18, X
    2d4e:	0f 2e       	mov	r0, r31
    2d50:	fa e0       	ldi	r31, 0x0A	; 10
    2d52:	cf 2e       	mov	r12, r31
    2d54:	d1 2c       	mov	r13, r1
    2d56:	e1 2c       	mov	r14, r1
    2d58:	f1 2c       	mov	r15, r1
    2d5a:	f0 2d       	mov	r31, r0
    2d5c:	c2 1a       	sub	r12, r18
    2d5e:	d1 08       	sbc	r13, r1
    2d60:	e1 08       	sbc	r14, r1
    2d62:	f1 08       	sbc	r15, r1
    2d64:	c6 86       	std	Z+14, r12	; 0x0e
    2d66:	d7 86       	std	Z+15, r13	; 0x0f
    2d68:	e0 8a       	std	Z+16, r14	; 0x10
    2d6a:	f1 8a       	std	Z+17, r15	; 0x11
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	df 90       	pop	r13
    2d72:	cf 90       	pop	r12
    2d74:	08 95       	ret

00002d76 <pvTaskIncrementMutexHeldCount>:
    2d76:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    2d7a:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2d7e:	89 2b       	or	r24, r25
    2d80:	39 f0       	breq	.+14     	; 0x2d90 <pvTaskIncrementMutexHeldCount+0x1a>
    2d82:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2d86:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2d8a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2d8c:	8f 5f       	subi	r24, 0xFF	; 255
    2d8e:	86 a7       	std	Z+46, r24	; 0x2e
    2d90:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    2d94:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2d98:	08 95       	ret

00002d9a <xTaskGenericNotifyWait>:
    2d9a:	4f 92       	push	r4
    2d9c:	5f 92       	push	r5
    2d9e:	6f 92       	push	r6
    2da0:	7f 92       	push	r7
    2da2:	af 92       	push	r10
    2da4:	bf 92       	push	r11
    2da6:	cf 92       	push	r12
    2da8:	df 92       	push	r13
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	28 01       	movw	r4, r16
    2db8:	39 01       	movw	r6, r18
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	0f 92       	push	r0
    2dc0:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2dc4:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2dc8:	c8 2f       	mov	r28, r24
    2dca:	d0 e0       	ldi	r29, 0x00	; 0
    2dcc:	ec 0f       	add	r30, r28
    2dce:	fd 1f       	adc	r31, r29
    2dd0:	83 a9       	ldd	r24, Z+51	; 0x33
    2dd2:	82 30       	cpi	r24, 0x02	; 2
    2dd4:	79 f1       	breq	.+94     	; 0x2e34 <xTaskGenericNotifyWait+0x9a>
    2dd6:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2dda:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2dde:	ce 01       	movw	r24, r28
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	e8 0f       	add	r30, r24
    2dea:	f9 1f       	adc	r31, r25
    2dec:	87 a5       	ldd	r24, Z+47	; 0x2f
    2dee:	90 a9       	ldd	r25, Z+48	; 0x30
    2df0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2df2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2df4:	40 95       	com	r20
    2df6:	50 95       	com	r21
    2df8:	60 95       	com	r22
    2dfa:	70 95       	com	r23
    2dfc:	48 23       	and	r20, r24
    2dfe:	59 23       	and	r21, r25
    2e00:	6a 23       	and	r22, r26
    2e02:	7b 23       	and	r23, r27
    2e04:	47 a7       	std	Z+47, r20	; 0x2f
    2e06:	50 ab       	std	Z+48, r21	; 0x30
    2e08:	61 ab       	std	Z+49, r22	; 0x31
    2e0a:	72 ab       	std	Z+50, r23	; 0x32
    2e0c:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2e10:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2e14:	ec 0f       	add	r30, r28
    2e16:	fd 1f       	adc	r31, r29
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	83 ab       	std	Z+51, r24	; 0x33
    2e1c:	a1 14       	cp	r10, r1
    2e1e:	b1 04       	cpc	r11, r1
    2e20:	c1 04       	cpc	r12, r1
    2e22:	d1 04       	cpc	r13, r1
    2e24:	39 f0       	breq	.+14     	; 0x2e34 <xTaskGenericNotifyWait+0x9a>
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	c6 01       	movw	r24, r12
    2e2a:	b5 01       	movw	r22, r10
    2e2c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    2e30:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    2e34:	0f 90       	pop	r0
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	0f 92       	push	r0
    2e3e:	e1 14       	cp	r14, r1
    2e40:	f1 04       	cpc	r15, r1
    2e42:	a1 f0       	breq	.+40     	; 0x2e6c <xTaskGenericNotifyWait+0xd2>
    2e44:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2e48:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	e8 0f       	add	r30, r24
    2e58:	f9 1f       	adc	r31, r25
    2e5a:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e5c:	90 a9       	ldd	r25, Z+48	; 0x30
    2e5e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e60:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e62:	f7 01       	movw	r30, r14
    2e64:	80 83       	st	Z, r24
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	a2 83       	std	Z+2, r26	; 0x02
    2e6a:	b3 83       	std	Z+3, r27	; 0x03
    2e6c:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2e70:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2e74:	ec 0f       	add	r30, r28
    2e76:	fd 1f       	adc	r31, r29
    2e78:	83 a9       	ldd	r24, Z+51	; 0x33
    2e7a:	82 30       	cpi	r24, 0x02	; 2
    2e7c:	e9 f4       	brne	.+58     	; 0x2eb8 <xTaskGenericNotifyWait+0x11e>
    2e7e:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    2e82:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2e86:	ce 01       	movw	r24, r28
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	e8 0f       	add	r30, r24
    2e92:	f9 1f       	adc	r31, r25
    2e94:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e96:	90 a9       	ldd	r25, Z+48	; 0x30
    2e98:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e9a:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e9c:	40 94       	com	r4
    2e9e:	50 94       	com	r5
    2ea0:	60 94       	com	r6
    2ea2:	70 94       	com	r7
    2ea4:	48 22       	and	r4, r24
    2ea6:	59 22       	and	r5, r25
    2ea8:	6a 22       	and	r6, r26
    2eaa:	7b 22       	and	r7, r27
    2eac:	47 a6       	std	Z+47, r4	; 0x2f
    2eae:	50 aa       	std	Z+48, r5	; 0x30
    2eb0:	61 aa       	std	Z+49, r6	; 0x31
    2eb2:	72 aa       	std	Z+50, r7	; 0x32
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <xTaskGenericNotifyWait+0x120>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	20 91 df 12 	lds	r18, 0x12DF	; 0x8012df <pxCurrentTCB>
    2ebe:	30 91 e0 12 	lds	r19, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    2ec2:	c2 0f       	add	r28, r18
    2ec4:	d3 1f       	adc	r29, r19
    2ec6:	1b aa       	std	Y+51, r1	; 0x33
    2ec8:	0f 90       	pop	r0
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	1f 91       	pop	r17
    2ed2:	0f 91       	pop	r16
    2ed4:	ff 90       	pop	r15
    2ed6:	ef 90       	pop	r14
    2ed8:	df 90       	pop	r13
    2eda:	cf 90       	pop	r12
    2edc:	bf 90       	pop	r11
    2ede:	af 90       	pop	r10
    2ee0:	7f 90       	pop	r7
    2ee2:	6f 90       	pop	r6
    2ee4:	5f 90       	pop	r5
    2ee6:	4f 90       	pop	r4
    2ee8:	08 95       	ret

00002eea <xTaskGenericNotify>:
    2eea:	8f 92       	push	r8
    2eec:	9f 92       	push	r9
    2eee:	af 92       	push	r10
    2ef0:	bf 92       	push	r11
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	dc 01       	movw	r26, r24
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	0f 92       	push	r0
    2f04:	e1 14       	cp	r14, r1
    2f06:	f1 04       	cpc	r15, r1
    2f08:	89 f0       	breq	.+34     	; 0x2f2c <xTaskGenericNotify+0x42>
    2f0a:	e6 2f       	mov	r30, r22
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	ee 0f       	add	r30, r30
    2f10:	ff 1f       	adc	r31, r31
    2f12:	ee 0f       	add	r30, r30
    2f14:	ff 1f       	adc	r31, r31
    2f16:	e8 0f       	add	r30, r24
    2f18:	f9 1f       	adc	r31, r25
    2f1a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f1c:	90 a8       	ldd	r9, Z+48	; 0x30
    2f1e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f20:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f22:	f7 01       	movw	r30, r14
    2f24:	80 82       	st	Z, r8
    2f26:	91 82       	std	Z+1, r9	; 0x01
    2f28:	a2 82       	std	Z+2, r10	; 0x02
    2f2a:	b3 82       	std	Z+3, r11	; 0x03
    2f2c:	70 e0       	ldi	r23, 0x00	; 0
    2f2e:	fd 01       	movw	r30, r26
    2f30:	e6 0f       	add	r30, r22
    2f32:	f7 1f       	adc	r31, r23
    2f34:	83 a9       	ldd	r24, Z+51	; 0x33
    2f36:	92 e0       	ldi	r25, 0x02	; 2
    2f38:	93 ab       	std	Z+51, r25	; 0x33
    2f3a:	02 30       	cpi	r16, 0x02	; 2
    2f3c:	01 f1       	breq	.+64     	; 0x2f7e <xTaskGenericNotify+0x94>
    2f3e:	18 f4       	brcc	.+6      	; 0x2f46 <xTaskGenericNotify+0x5c>
    2f40:	01 30       	cpi	r16, 0x01	; 1
    2f42:	31 f0       	breq	.+12     	; 0x2f50 <xTaskGenericNotify+0x66>
    2f44:	4d c0       	rjmp	.+154    	; 0x2fe0 <xTaskGenericNotify+0xf6>
    2f46:	03 30       	cpi	r16, 0x03	; 3
    2f48:	79 f1       	breq	.+94     	; 0x2fa8 <xTaskGenericNotify+0xbe>
    2f4a:	04 30       	cpi	r16, 0x04	; 4
    2f4c:	d1 f1       	breq	.+116    	; 0x2fc2 <xTaskGenericNotify+0xd8>
    2f4e:	48 c0       	rjmp	.+144    	; 0x2fe0 <xTaskGenericNotify+0xf6>
    2f50:	66 0f       	add	r22, r22
    2f52:	77 1f       	adc	r23, r23
    2f54:	66 0f       	add	r22, r22
    2f56:	77 1f       	adc	r23, r23
    2f58:	fd 01       	movw	r30, r26
    2f5a:	e6 0f       	add	r30, r22
    2f5c:	f7 1f       	adc	r31, r23
    2f5e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f60:	90 a8       	ldd	r9, Z+48	; 0x30
    2f62:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f64:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f66:	ba 01       	movw	r22, r20
    2f68:	a9 01       	movw	r20, r18
    2f6a:	48 29       	or	r20, r8
    2f6c:	59 29       	or	r21, r9
    2f6e:	6a 29       	or	r22, r10
    2f70:	7b 29       	or	r23, r11
    2f72:	47 a7       	std	Z+47, r20	; 0x2f
    2f74:	50 ab       	std	Z+48, r21	; 0x30
    2f76:	61 ab       	std	Z+49, r22	; 0x31
    2f78:	72 ab       	std	Z+50, r23	; 0x32
    2f7a:	01 e0       	ldi	r16, 0x01	; 1
    2f7c:	34 c0       	rjmp	.+104    	; 0x2fe6 <xTaskGenericNotify+0xfc>
    2f7e:	66 0f       	add	r22, r22
    2f80:	77 1f       	adc	r23, r23
    2f82:	66 0f       	add	r22, r22
    2f84:	77 1f       	adc	r23, r23
    2f86:	fd 01       	movw	r30, r26
    2f88:	e6 0f       	add	r30, r22
    2f8a:	f7 1f       	adc	r31, r23
    2f8c:	47 a5       	ldd	r20, Z+47	; 0x2f
    2f8e:	50 a9       	ldd	r21, Z+48	; 0x30
    2f90:	61 a9       	ldd	r22, Z+49	; 0x31
    2f92:	72 a9       	ldd	r23, Z+50	; 0x32
    2f94:	4f 5f       	subi	r20, 0xFF	; 255
    2f96:	5f 4f       	sbci	r21, 0xFF	; 255
    2f98:	6f 4f       	sbci	r22, 0xFF	; 255
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9c:	47 a7       	std	Z+47, r20	; 0x2f
    2f9e:	50 ab       	std	Z+48, r21	; 0x30
    2fa0:	61 ab       	std	Z+49, r22	; 0x31
    2fa2:	72 ab       	std	Z+50, r23	; 0x32
    2fa4:	01 e0       	ldi	r16, 0x01	; 1
    2fa6:	1f c0       	rjmp	.+62     	; 0x2fe6 <xTaskGenericNotify+0xfc>
    2fa8:	66 0f       	add	r22, r22
    2faa:	77 1f       	adc	r23, r23
    2fac:	66 0f       	add	r22, r22
    2fae:	77 1f       	adc	r23, r23
    2fb0:	fd 01       	movw	r30, r26
    2fb2:	e6 0f       	add	r30, r22
    2fb4:	f7 1f       	adc	r31, r23
    2fb6:	27 a7       	std	Z+47, r18	; 0x2f
    2fb8:	30 ab       	std	Z+48, r19	; 0x30
    2fba:	41 ab       	std	Z+49, r20	; 0x31
    2fbc:	52 ab       	std	Z+50, r21	; 0x32
    2fbe:	01 e0       	ldi	r16, 0x01	; 1
    2fc0:	12 c0       	rjmp	.+36     	; 0x2fe6 <xTaskGenericNotify+0xfc>
    2fc2:	82 30       	cpi	r24, 0x02	; 2
    2fc4:	79 f0       	breq	.+30     	; 0x2fe4 <xTaskGenericNotify+0xfa>
    2fc6:	66 0f       	add	r22, r22
    2fc8:	77 1f       	adc	r23, r23
    2fca:	66 0f       	add	r22, r22
    2fcc:	77 1f       	adc	r23, r23
    2fce:	fd 01       	movw	r30, r26
    2fd0:	e6 0f       	add	r30, r22
    2fd2:	f7 1f       	adc	r31, r23
    2fd4:	27 a7       	std	Z+47, r18	; 0x2f
    2fd6:	30 ab       	std	Z+48, r19	; 0x30
    2fd8:	41 ab       	std	Z+49, r20	; 0x31
    2fda:	52 ab       	std	Z+50, r21	; 0x32
    2fdc:	01 e0       	ldi	r16, 0x01	; 1
    2fde:	03 c0       	rjmp	.+6      	; 0x2fe6 <xTaskGenericNotify+0xfc>
    2fe0:	01 e0       	ldi	r16, 0x01	; 1
    2fe2:	01 c0       	rjmp	.+2      	; 0x2fe6 <xTaskGenericNotify+0xfc>
    2fe4:	00 e0       	ldi	r16, 0x00	; 0
    2fe6:	81 30       	cpi	r24, 0x01	; 1
    2fe8:	09 f0       	breq	.+2      	; 0x2fec <xTaskGenericNotify+0x102>
    2fea:	69 c0       	rjmp	.+210    	; 0x30be <xTaskGenericNotify+0x1d4>
    2fec:	1c 96       	adiw	r26, 0x0c	; 12
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	1d 97       	sbiw	r26, 0x0d	; 13
    2ff4:	16 96       	adiw	r26, 0x06	; 6
    2ff6:	cd 91       	ld	r28, X+
    2ff8:	dc 91       	ld	r29, X
    2ffa:	17 97       	sbiw	r26, 0x07	; 7
    2ffc:	18 96       	adiw	r26, 0x08	; 8
    2ffe:	8d 91       	ld	r24, X+
    3000:	9c 91       	ld	r25, X
    3002:	19 97       	sbiw	r26, 0x09	; 9
    3004:	9f 83       	std	Y+7, r25	; 0x07
    3006:	8e 83       	std	Y+6, r24	; 0x06
    3008:	18 96       	adiw	r26, 0x08	; 8
    300a:	cd 91       	ld	r28, X+
    300c:	dc 91       	ld	r29, X
    300e:	19 97       	sbiw	r26, 0x09	; 9
    3010:	16 96       	adiw	r26, 0x06	; 6
    3012:	8d 91       	ld	r24, X+
    3014:	9c 91       	ld	r25, X
    3016:	17 97       	sbiw	r26, 0x07	; 7
    3018:	9d 83       	std	Y+5, r25	; 0x05
    301a:	8c 83       	std	Y+4, r24	; 0x04
    301c:	81 81       	ldd	r24, Z+1	; 0x01
    301e:	92 81       	ldd	r25, Z+2	; 0x02
    3020:	9d 01       	movw	r18, r26
    3022:	2e 5f       	subi	r18, 0xFE	; 254
    3024:	3f 4f       	sbci	r19, 0xFF	; 255
    3026:	82 17       	cp	r24, r18
    3028:	93 07       	cpc	r25, r19
    302a:	31 f4       	brne	.+12     	; 0x3038 <xTaskGenericNotify+0x14e>
    302c:	18 96       	adiw	r26, 0x08	; 8
    302e:	8d 91       	ld	r24, X+
    3030:	9c 91       	ld	r25, X
    3032:	19 97       	sbiw	r26, 0x09	; 9
    3034:	92 83       	std	Z+2, r25	; 0x02
    3036:	81 83       	std	Z+1, r24	; 0x01
    3038:	1d 96       	adiw	r26, 0x0d	; 13
    303a:	1c 92       	st	X, r1
    303c:	1e 92       	st	-X, r1
    303e:	1c 97       	sbiw	r26, 0x0c	; 12
    3040:	80 81       	ld	r24, Z
    3042:	81 50       	subi	r24, 0x01	; 1
    3044:	80 83       	st	Z, r24
    3046:	5a 96       	adiw	r26, 0x1a	; 26
    3048:	ec 91       	ld	r30, X
    304a:	5a 97       	sbiw	r26, 0x1a	; 26
    304c:	80 91 2f 12 	lds	r24, 0x122F	; 0x80122f <uxTopReadyPriority>
    3050:	8e 17       	cp	r24, r30
    3052:	10 f4       	brcc	.+4      	; 0x3058 <xTaskGenericNotify+0x16e>
    3054:	e0 93 2f 12 	sts	0x122F, r30	; 0x80122f <uxTopReadyPriority>
    3058:	8b e0       	ldi	r24, 0x0B	; 11
    305a:	8e 9f       	mul	r24, r30
    305c:	f0 01       	movw	r30, r0
    305e:	11 24       	eor	r1, r1
    3060:	ef 58       	subi	r30, 0x8F	; 143
    3062:	fd 4e       	sbci	r31, 0xED	; 237
    3064:	01 80       	ldd	r0, Z+1	; 0x01
    3066:	f2 81       	ldd	r31, Z+2	; 0x02
    3068:	e0 2d       	mov	r30, r0
    306a:	17 96       	adiw	r26, 0x07	; 7
    306c:	fc 93       	st	X, r31
    306e:	ee 93       	st	-X, r30
    3070:	16 97       	sbiw	r26, 0x06	; 6
    3072:	46 81       	ldd	r20, Z+6	; 0x06
    3074:	57 81       	ldd	r21, Z+7	; 0x07
    3076:	19 96       	adiw	r26, 0x09	; 9
    3078:	5c 93       	st	X, r21
    307a:	4e 93       	st	-X, r20
    307c:	18 97       	sbiw	r26, 0x08	; 8
    307e:	c6 81       	ldd	r28, Z+6	; 0x06
    3080:	d7 81       	ldd	r29, Z+7	; 0x07
    3082:	3d 83       	std	Y+5, r19	; 0x05
    3084:	2c 83       	std	Y+4, r18	; 0x04
    3086:	37 83       	std	Z+7, r19	; 0x07
    3088:	26 83       	std	Z+6, r18	; 0x06
    308a:	5a 96       	adiw	r26, 0x1a	; 26
    308c:	ec 91       	ld	r30, X
    308e:	5a 97       	sbiw	r26, 0x1a	; 26
    3090:	8e 9f       	mul	r24, r30
    3092:	f0 01       	movw	r30, r0
    3094:	11 24       	eor	r1, r1
    3096:	ef 58       	subi	r30, 0x8F	; 143
    3098:	fd 4e       	sbci	r31, 0xED	; 237
    309a:	1d 96       	adiw	r26, 0x0d	; 13
    309c:	fc 93       	st	X, r31
    309e:	ee 93       	st	-X, r30
    30a0:	1c 97       	sbiw	r26, 0x0c	; 12
    30a2:	80 81       	ld	r24, Z
    30a4:	8f 5f       	subi	r24, 0xFF	; 255
    30a6:	80 83       	st	Z, r24
    30a8:	5a 96       	adiw	r26, 0x1a	; 26
    30aa:	9c 91       	ld	r25, X
    30ac:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    30b0:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    30b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    30b6:	89 17       	cp	r24, r25
    30b8:	10 f4       	brcc	.+4      	; 0x30be <xTaskGenericNotify+0x1d4>
    30ba:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    30be:	0f 90       	pop	r0
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	80 2f       	mov	r24, r16
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	0f 91       	pop	r16
    30ca:	ff 90       	pop	r15
    30cc:	ef 90       	pop	r14
    30ce:	bf 90       	pop	r11
    30d0:	af 90       	pop	r10
    30d2:	9f 90       	pop	r9
    30d4:	8f 90       	pop	r8
    30d6:	08 95       	ret

000030d8 <xTaskGenericNotifyFromISR>:
    30d8:	8f 92       	push	r8
    30da:	9f 92       	push	r9
    30dc:	af 92       	push	r10
    30de:	bf 92       	push	r11
    30e0:	cf 92       	push	r12
    30e2:	df 92       	push	r13
    30e4:	ef 92       	push	r14
    30e6:	ff 92       	push	r15
    30e8:	0f 93       	push	r16
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	dc 01       	movw	r26, r24
    30f0:	e1 14       	cp	r14, r1
    30f2:	f1 04       	cpc	r15, r1
    30f4:	89 f0       	breq	.+34     	; 0x3118 <xTaskGenericNotifyFromISR+0x40>
    30f6:	e6 2f       	mov	r30, r22
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	ee 0f       	add	r30, r30
    30fc:	ff 1f       	adc	r31, r31
    30fe:	ee 0f       	add	r30, r30
    3100:	ff 1f       	adc	r31, r31
    3102:	e8 0f       	add	r30, r24
    3104:	f9 1f       	adc	r31, r25
    3106:	87 a4       	ldd	r8, Z+47	; 0x2f
    3108:	90 a8       	ldd	r9, Z+48	; 0x30
    310a:	a1 a8       	ldd	r10, Z+49	; 0x31
    310c:	b2 a8       	ldd	r11, Z+50	; 0x32
    310e:	f7 01       	movw	r30, r14
    3110:	80 82       	st	Z, r8
    3112:	91 82       	std	Z+1, r9	; 0x01
    3114:	a2 82       	std	Z+2, r10	; 0x02
    3116:	b3 82       	std	Z+3, r11	; 0x03
    3118:	70 e0       	ldi	r23, 0x00	; 0
    311a:	fd 01       	movw	r30, r26
    311c:	e6 0f       	add	r30, r22
    311e:	f7 1f       	adc	r31, r23
    3120:	93 a9       	ldd	r25, Z+51	; 0x33
    3122:	82 e0       	ldi	r24, 0x02	; 2
    3124:	83 ab       	std	Z+51, r24	; 0x33
    3126:	02 30       	cpi	r16, 0x02	; 2
    3128:	01 f1       	breq	.+64     	; 0x316a <xTaskGenericNotifyFromISR+0x92>
    312a:	18 f4       	brcc	.+6      	; 0x3132 <xTaskGenericNotifyFromISR+0x5a>
    312c:	01 30       	cpi	r16, 0x01	; 1
    312e:	31 f0       	breq	.+12     	; 0x313c <xTaskGenericNotifyFromISR+0x64>
    3130:	4d c0       	rjmp	.+154    	; 0x31cc <xTaskGenericNotifyFromISR+0xf4>
    3132:	03 30       	cpi	r16, 0x03	; 3
    3134:	79 f1       	breq	.+94     	; 0x3194 <xTaskGenericNotifyFromISR+0xbc>
    3136:	04 30       	cpi	r16, 0x04	; 4
    3138:	d1 f1       	breq	.+116    	; 0x31ae <xTaskGenericNotifyFromISR+0xd6>
    313a:	48 c0       	rjmp	.+144    	; 0x31cc <xTaskGenericNotifyFromISR+0xf4>
    313c:	66 0f       	add	r22, r22
    313e:	77 1f       	adc	r23, r23
    3140:	66 0f       	add	r22, r22
    3142:	77 1f       	adc	r23, r23
    3144:	fd 01       	movw	r30, r26
    3146:	e6 0f       	add	r30, r22
    3148:	f7 1f       	adc	r31, r23
    314a:	87 a4       	ldd	r8, Z+47	; 0x2f
    314c:	90 a8       	ldd	r9, Z+48	; 0x30
    314e:	a1 a8       	ldd	r10, Z+49	; 0x31
    3150:	b2 a8       	ldd	r11, Z+50	; 0x32
    3152:	ba 01       	movw	r22, r20
    3154:	a9 01       	movw	r20, r18
    3156:	48 29       	or	r20, r8
    3158:	59 29       	or	r21, r9
    315a:	6a 29       	or	r22, r10
    315c:	7b 29       	or	r23, r11
    315e:	47 a7       	std	Z+47, r20	; 0x2f
    3160:	50 ab       	std	Z+48, r21	; 0x30
    3162:	61 ab       	std	Z+49, r22	; 0x31
    3164:	72 ab       	std	Z+50, r23	; 0x32
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	34 c0       	rjmp	.+104    	; 0x31d2 <xTaskGenericNotifyFromISR+0xfa>
    316a:	66 0f       	add	r22, r22
    316c:	77 1f       	adc	r23, r23
    316e:	66 0f       	add	r22, r22
    3170:	77 1f       	adc	r23, r23
    3172:	fd 01       	movw	r30, r26
    3174:	e6 0f       	add	r30, r22
    3176:	f7 1f       	adc	r31, r23
    3178:	47 a5       	ldd	r20, Z+47	; 0x2f
    317a:	50 a9       	ldd	r21, Z+48	; 0x30
    317c:	61 a9       	ldd	r22, Z+49	; 0x31
    317e:	72 a9       	ldd	r23, Z+50	; 0x32
    3180:	4f 5f       	subi	r20, 0xFF	; 255
    3182:	5f 4f       	sbci	r21, 0xFF	; 255
    3184:	6f 4f       	sbci	r22, 0xFF	; 255
    3186:	7f 4f       	sbci	r23, 0xFF	; 255
    3188:	47 a7       	std	Z+47, r20	; 0x2f
    318a:	50 ab       	std	Z+48, r21	; 0x30
    318c:	61 ab       	std	Z+49, r22	; 0x31
    318e:	72 ab       	std	Z+50, r23	; 0x32
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	1f c0       	rjmp	.+62     	; 0x31d2 <xTaskGenericNotifyFromISR+0xfa>
    3194:	66 0f       	add	r22, r22
    3196:	77 1f       	adc	r23, r23
    3198:	66 0f       	add	r22, r22
    319a:	77 1f       	adc	r23, r23
    319c:	fd 01       	movw	r30, r26
    319e:	e6 0f       	add	r30, r22
    31a0:	f7 1f       	adc	r31, r23
    31a2:	27 a7       	std	Z+47, r18	; 0x2f
    31a4:	30 ab       	std	Z+48, r19	; 0x30
    31a6:	41 ab       	std	Z+49, r20	; 0x31
    31a8:	52 ab       	std	Z+50, r21	; 0x32
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	12 c0       	rjmp	.+36     	; 0x31d2 <xTaskGenericNotifyFromISR+0xfa>
    31ae:	92 30       	cpi	r25, 0x02	; 2
    31b0:	79 f0       	breq	.+30     	; 0x31d0 <xTaskGenericNotifyFromISR+0xf8>
    31b2:	66 0f       	add	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	66 0f       	add	r22, r22
    31b8:	77 1f       	adc	r23, r23
    31ba:	fd 01       	movw	r30, r26
    31bc:	e6 0f       	add	r30, r22
    31be:	f7 1f       	adc	r31, r23
    31c0:	27 a7       	std	Z+47, r18	; 0x2f
    31c2:	30 ab       	std	Z+48, r19	; 0x30
    31c4:	41 ab       	std	Z+49, r20	; 0x31
    31c6:	52 ab       	std	Z+50, r21	; 0x32
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	03 c0       	rjmp	.+6      	; 0x31d2 <xTaskGenericNotifyFromISR+0xfa>
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	01 c0       	rjmp	.+2      	; 0x31d2 <xTaskGenericNotifyFromISR+0xfa>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	91 30       	cpi	r25, 0x01	; 1
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <xTaskGenericNotifyFromISR+0x100>
    31d6:	96 c0       	rjmp	.+300    	; 0x3304 <xTaskGenericNotifyFromISR+0x22c>
    31d8:	90 91 20 12 	lds	r25, 0x1220	; 0x801220 <uxSchedulerSuspended>
    31dc:	91 11       	cpse	r25, r1
    31de:	5f c0       	rjmp	.+190    	; 0x329e <xTaskGenericNotifyFromISR+0x1c6>
    31e0:	1c 96       	adiw	r26, 0x0c	; 12
    31e2:	ed 91       	ld	r30, X+
    31e4:	fc 91       	ld	r31, X
    31e6:	1d 97       	sbiw	r26, 0x0d	; 13
    31e8:	16 96       	adiw	r26, 0x06	; 6
    31ea:	cd 91       	ld	r28, X+
    31ec:	dc 91       	ld	r29, X
    31ee:	17 97       	sbiw	r26, 0x07	; 7
    31f0:	18 96       	adiw	r26, 0x08	; 8
    31f2:	2d 91       	ld	r18, X+
    31f4:	3c 91       	ld	r19, X
    31f6:	19 97       	sbiw	r26, 0x09	; 9
    31f8:	3f 83       	std	Y+7, r19	; 0x07
    31fa:	2e 83       	std	Y+6, r18	; 0x06
    31fc:	18 96       	adiw	r26, 0x08	; 8
    31fe:	cd 91       	ld	r28, X+
    3200:	dc 91       	ld	r29, X
    3202:	19 97       	sbiw	r26, 0x09	; 9
    3204:	16 96       	adiw	r26, 0x06	; 6
    3206:	2d 91       	ld	r18, X+
    3208:	3c 91       	ld	r19, X
    320a:	17 97       	sbiw	r26, 0x07	; 7
    320c:	3d 83       	std	Y+5, r19	; 0x05
    320e:	2c 83       	std	Y+4, r18	; 0x04
    3210:	41 81       	ldd	r20, Z+1	; 0x01
    3212:	52 81       	ldd	r21, Z+2	; 0x02
    3214:	9d 01       	movw	r18, r26
    3216:	2e 5f       	subi	r18, 0xFE	; 254
    3218:	3f 4f       	sbci	r19, 0xFF	; 255
    321a:	42 17       	cp	r20, r18
    321c:	53 07       	cpc	r21, r19
    321e:	31 f4       	brne	.+12     	; 0x322c <xTaskGenericNotifyFromISR+0x154>
    3220:	18 96       	adiw	r26, 0x08	; 8
    3222:	4d 91       	ld	r20, X+
    3224:	5c 91       	ld	r21, X
    3226:	19 97       	sbiw	r26, 0x09	; 9
    3228:	52 83       	std	Z+2, r21	; 0x02
    322a:	41 83       	std	Z+1, r20	; 0x01
    322c:	1d 96       	adiw	r26, 0x0d	; 13
    322e:	1c 92       	st	X, r1
    3230:	1e 92       	st	-X, r1
    3232:	1c 97       	sbiw	r26, 0x0c	; 12
    3234:	90 81       	ld	r25, Z
    3236:	91 50       	subi	r25, 0x01	; 1
    3238:	90 83       	st	Z, r25
    323a:	5a 96       	adiw	r26, 0x1a	; 26
    323c:	ec 91       	ld	r30, X
    323e:	5a 97       	sbiw	r26, 0x1a	; 26
    3240:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <uxTopReadyPriority>
    3244:	9e 17       	cp	r25, r30
    3246:	10 f4       	brcc	.+4      	; 0x324c <xTaskGenericNotifyFromISR+0x174>
    3248:	e0 93 2f 12 	sts	0x122F, r30	; 0x80122f <uxTopReadyPriority>
    324c:	9b e0       	ldi	r25, 0x0B	; 11
    324e:	9e 9f       	mul	r25, r30
    3250:	f0 01       	movw	r30, r0
    3252:	11 24       	eor	r1, r1
    3254:	ef 58       	subi	r30, 0x8F	; 143
    3256:	fd 4e       	sbci	r31, 0xED	; 237
    3258:	01 80       	ldd	r0, Z+1	; 0x01
    325a:	f2 81       	ldd	r31, Z+2	; 0x02
    325c:	e0 2d       	mov	r30, r0
    325e:	17 96       	adiw	r26, 0x07	; 7
    3260:	fc 93       	st	X, r31
    3262:	ee 93       	st	-X, r30
    3264:	16 97       	sbiw	r26, 0x06	; 6
    3266:	46 81       	ldd	r20, Z+6	; 0x06
    3268:	57 81       	ldd	r21, Z+7	; 0x07
    326a:	19 96       	adiw	r26, 0x09	; 9
    326c:	5c 93       	st	X, r21
    326e:	4e 93       	st	-X, r20
    3270:	18 97       	sbiw	r26, 0x08	; 8
    3272:	c6 81       	ldd	r28, Z+6	; 0x06
    3274:	d7 81       	ldd	r29, Z+7	; 0x07
    3276:	3d 83       	std	Y+5, r19	; 0x05
    3278:	2c 83       	std	Y+4, r18	; 0x04
    327a:	37 83       	std	Z+7, r19	; 0x07
    327c:	26 83       	std	Z+6, r18	; 0x06
    327e:	5a 96       	adiw	r26, 0x1a	; 26
    3280:	ec 91       	ld	r30, X
    3282:	5a 97       	sbiw	r26, 0x1a	; 26
    3284:	9e 9f       	mul	r25, r30
    3286:	f0 01       	movw	r30, r0
    3288:	11 24       	eor	r1, r1
    328a:	ef 58       	subi	r30, 0x8F	; 143
    328c:	fd 4e       	sbci	r31, 0xED	; 237
    328e:	1d 96       	adiw	r26, 0x0d	; 13
    3290:	fc 93       	st	X, r31
    3292:	ee 93       	st	-X, r30
    3294:	1c 97       	sbiw	r26, 0x0c	; 12
    3296:	90 81       	ld	r25, Z
    3298:	9f 5f       	subi	r25, 0xFF	; 255
    329a:	90 83       	st	Z, r25
    329c:	21 c0       	rjmp	.+66     	; 0x32e0 <xTaskGenericNotifyFromISR+0x208>
    329e:	6c e4       	ldi	r22, 0x4C	; 76
    32a0:	72 e1       	ldi	r23, 0x12	; 18
    32a2:	fb 01       	movw	r30, r22
    32a4:	c1 81       	ldd	r28, Z+1	; 0x01
    32a6:	d2 81       	ldd	r29, Z+2	; 0x02
    32a8:	53 96       	adiw	r26, 0x13	; 19
    32aa:	dc 93       	st	X, r29
    32ac:	ce 93       	st	-X, r28
    32ae:	52 97       	sbiw	r26, 0x12	; 18
    32b0:	2e 81       	ldd	r18, Y+6	; 0x06
    32b2:	3f 81       	ldd	r19, Y+7	; 0x07
    32b4:	55 96       	adiw	r26, 0x15	; 21
    32b6:	3c 93       	st	X, r19
    32b8:	2e 93       	st	-X, r18
    32ba:	54 97       	sbiw	r26, 0x14	; 20
    32bc:	4e 81       	ldd	r20, Y+6	; 0x06
    32be:	5f 81       	ldd	r21, Y+7	; 0x07
    32c0:	9d 01       	movw	r18, r26
    32c2:	22 5f       	subi	r18, 0xF2	; 242
    32c4:	3f 4f       	sbci	r19, 0xFF	; 255
    32c6:	fa 01       	movw	r30, r20
    32c8:	35 83       	std	Z+5, r19	; 0x05
    32ca:	24 83       	std	Z+4, r18	; 0x04
    32cc:	3f 83       	std	Y+7, r19	; 0x07
    32ce:	2e 83       	std	Y+6, r18	; 0x06
    32d0:	59 96       	adiw	r26, 0x19	; 25
    32d2:	7c 93       	st	X, r23
    32d4:	6e 93       	st	-X, r22
    32d6:	58 97       	sbiw	r26, 0x18	; 24
    32d8:	fb 01       	movw	r30, r22
    32da:	90 81       	ld	r25, Z
    32dc:	9f 5f       	subi	r25, 0xFF	; 255
    32de:	90 83       	st	Z, r25
    32e0:	5a 96       	adiw	r26, 0x1a	; 26
    32e2:	2c 91       	ld	r18, X
    32e4:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxCurrentTCB>
    32e8:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>
    32ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    32ee:	92 17       	cp	r25, r18
    32f0:	48 f4       	brcc	.+18     	; 0x3304 <xTaskGenericNotifyFromISR+0x22c>
    32f2:	c1 14       	cp	r12, r1
    32f4:	d1 04       	cpc	r13, r1
    32f6:	19 f0       	breq	.+6      	; 0x32fe <xTaskGenericNotifyFromISR+0x226>
    32f8:	91 e0       	ldi	r25, 0x01	; 1
    32fa:	f6 01       	movw	r30, r12
    32fc:	90 83       	st	Z, r25
    32fe:	91 e0       	ldi	r25, 0x01	; 1
    3300:	90 93 29 12 	sts	0x1229, r25	; 0x801229 <xYieldPending>
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	0f 91       	pop	r16
    330a:	ff 90       	pop	r15
    330c:	ef 90       	pop	r14
    330e:	df 90       	pop	r13
    3310:	cf 90       	pop	r12
    3312:	bf 90       	pop	r11
    3314:	af 90       	pop	r10
    3316:	9f 90       	pop	r9
    3318:	8f 90       	pop	r8
    331a:	08 95       	ret

0000331c <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	21 f4       	brne	.+8      	; 0x3328 <xTaskGenericNotifyStateClear+0xc>
    3320:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxCurrentTCB>
    3324:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	f8 94       	cli
    332c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	fc 01       	movw	r30, r24
    3332:	e6 0f       	add	r30, r22
    3334:	f7 1f       	adc	r31, r23
    3336:	23 a9       	ldd	r18, Z+51	; 0x33
    3338:	22 30       	cpi	r18, 0x02	; 2
    333a:	31 f4       	brne	.+12     	; 0x3348 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    333c:	fc 01       	movw	r30, r24
    333e:	e6 0f       	add	r30, r22
    3340:	f7 1f       	adc	r31, r23
    3342:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	01 c0       	rjmp	.+2      	; 0x334a <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3348:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    334a:	0f 90       	pop	r0
    334c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    334e:	08 95       	ret

00003350 <prvGetNextExpireTime>:
    3350:	dc 01       	movw	r26, r24
    3352:	e0 91 eb 12 	lds	r30, 0x12EB	; 0x8012eb <pxCurrentTimerList>
    3356:	f0 91 ec 12 	lds	r31, 0x12EC	; 0x8012ec <pxCurrentTimerList+0x1>
    335a:	80 81       	ld	r24, Z
    335c:	91 e0       	ldi	r25, 0x01	; 1
    335e:	81 11       	cpse	r24, r1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	9c 93       	st	X, r25
    3364:	91 11       	cpse	r25, r1
    3366:	08 c0       	rjmp	.+16     	; 0x3378 <prvGetNextExpireTime+0x28>
    3368:	07 80       	ldd	r0, Z+7	; 0x07
    336a:	f0 85       	ldd	r31, Z+8	; 0x08
    336c:	e0 2d       	mov	r30, r0
    336e:	60 81       	ld	r22, Z
    3370:	71 81       	ldd	r23, Z+1	; 0x01
    3372:	82 81       	ldd	r24, Z+2	; 0x02
    3374:	93 81       	ldd	r25, Z+3	; 0x03
    3376:	08 95       	ret
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	70 e0       	ldi	r23, 0x00	; 0
    337c:	cb 01       	movw	r24, r22
    337e:	08 95       	ret

00003380 <prvInsertTimerInActiveList>:
    3380:	cf 92       	push	r12
    3382:	df 92       	push	r13
    3384:	ef 92       	push	r14
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	fc 01       	movw	r30, r24
    338e:	42 83       	std	Z+2, r20	; 0x02
    3390:	53 83       	std	Z+3, r21	; 0x03
    3392:	64 83       	std	Z+4, r22	; 0x04
    3394:	75 83       	std	Z+5, r23	; 0x05
    3396:	93 87       	std	Z+11, r25	; 0x0b
    3398:	82 87       	std	Z+10, r24	; 0x0a
    339a:	04 17       	cp	r16, r20
    339c:	15 07       	cpc	r17, r21
    339e:	26 07       	cpc	r18, r22
    33a0:	37 07       	cpc	r19, r23
    33a2:	c0 f0       	brcs	.+48     	; 0x33d4 <prvInsertTimerInActiveList+0x54>
    33a4:	0c 19       	sub	r16, r12
    33a6:	1d 09       	sbc	r17, r13
    33a8:	2e 09       	sbc	r18, r14
    33aa:	3f 09       	sbc	r19, r15
    33ac:	86 85       	ldd	r24, Z+14	; 0x0e
    33ae:	97 85       	ldd	r25, Z+15	; 0x0f
    33b0:	a0 89       	ldd	r26, Z+16	; 0x10
    33b2:	b1 89       	ldd	r27, Z+17	; 0x11
    33b4:	08 17       	cp	r16, r24
    33b6:	19 07       	cpc	r17, r25
    33b8:	2a 07       	cpc	r18, r26
    33ba:	3b 07       	cpc	r19, r27
    33bc:	00 f5       	brcc	.+64     	; 0x33fe <prvInsertTimerInActiveList+0x7e>
    33be:	bf 01       	movw	r22, r30
    33c0:	6e 5f       	subi	r22, 0xFE	; 254
    33c2:	7f 4f       	sbci	r23, 0xFF	; 255
    33c4:	80 91 e9 12 	lds	r24, 0x12E9	; 0x8012e9 <pxOverflowTimerList>
    33c8:	90 91 ea 12 	lds	r25, 0x12EA	; 0x8012ea <pxOverflowTimerList+0x1>
    33cc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <vListInsert>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	18 c0       	rjmp	.+48     	; 0x3404 <prvInsertTimerInActiveList+0x84>
    33d4:	0c 15       	cp	r16, r12
    33d6:	1d 05       	cpc	r17, r13
    33d8:	2e 05       	cpc	r18, r14
    33da:	3f 05       	cpc	r19, r15
    33dc:	28 f4       	brcc	.+10     	; 0x33e8 <prvInsertTimerInActiveList+0x68>
    33de:	4c 15       	cp	r20, r12
    33e0:	5d 05       	cpc	r21, r13
    33e2:	6e 05       	cpc	r22, r14
    33e4:	7f 05       	cpc	r23, r15
    33e6:	68 f4       	brcc	.+26     	; 0x3402 <prvInsertTimerInActiveList+0x82>
    33e8:	bf 01       	movw	r22, r30
    33ea:	6e 5f       	subi	r22, 0xFE	; 254
    33ec:	7f 4f       	sbci	r23, 0xFF	; 255
    33ee:	80 91 eb 12 	lds	r24, 0x12EB	; 0x8012eb <pxCurrentTimerList>
    33f2:	90 91 ec 12 	lds	r25, 0x12EC	; 0x8012ec <pxCurrentTimerList+0x1>
    33f6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <vListInsert>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	03 c0       	rjmp	.+6      	; 0x3404 <prvInsertTimerInActiveList+0x84>
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	01 c0       	rjmp	.+2      	; 0x3404 <prvInsertTimerInActiveList+0x84>
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	ff 90       	pop	r15
    340a:	ef 90       	pop	r14
    340c:	df 90       	pop	r13
    340e:	cf 90       	pop	r12
    3410:	08 95       	ret

00003412 <prvCheckForValidListAndQueue>:
    3412:	0f b6       	in	r0, 0x3f	; 63
    3414:	f8 94       	cli
    3416:	0f 92       	push	r0
    3418:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <xTimerQueue>
    341c:	90 91 e8 12 	lds	r25, 0x12E8	; 0x8012e8 <xTimerQueue+0x1>
    3420:	89 2b       	or	r24, r25
    3422:	e9 f4       	brne	.+58     	; 0x345e <prvCheckForValidListAndQueue+0x4c>
    3424:	88 ef       	ldi	r24, 0xF8	; 248
    3426:	92 e1       	ldi	r25, 0x12	; 18
    3428:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInitialise>
    342c:	8d ee       	ldi	r24, 0xED	; 237
    342e:	92 e1       	ldi	r25, 0x12	; 18
    3430:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInitialise>
    3434:	88 ef       	ldi	r24, 0xF8	; 248
    3436:	92 e1       	ldi	r25, 0x12	; 18
    3438:	90 93 ec 12 	sts	0x12EC, r25	; 0x8012ec <pxCurrentTimerList+0x1>
    343c:	80 93 eb 12 	sts	0x12EB, r24	; 0x8012eb <pxCurrentTimerList>
    3440:	8d ee       	ldi	r24, 0xED	; 237
    3442:	92 e1       	ldi	r25, 0x12	; 18
    3444:	90 93 ea 12 	sts	0x12EA, r25	; 0x8012ea <pxOverflowTimerList+0x1>
    3448:	80 93 e9 12 	sts	0x12E9, r24	; 0x8012e9 <pxOverflowTimerList>
    344c:	40 e0       	ldi	r20, 0x00	; 0
    344e:	67 e0       	ldi	r22, 0x07	; 7
    3450:	8a e0       	ldi	r24, 0x0A	; 10
    3452:	0e 94 9e 07 	call	0xf3c	; 0xf3c <xQueueGenericCreate>
    3456:	90 93 e8 12 	sts	0x12E8, r25	; 0x8012e8 <xTimerQueue+0x1>
    345a:	80 93 e7 12 	sts	0x12E7, r24	; 0x8012e7 <xTimerQueue>
    345e:	0f 90       	pop	r0
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	08 95       	ret

00003464 <xTimerCreateTimerTask>:
    3464:	ef 92       	push	r14
    3466:	ff 92       	push	r15
    3468:	0f 93       	push	r16
    346a:	d3 df       	rcall	.-90     	; 0x3412 <prvCheckForValidListAndQueue>
    346c:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <xTimerQueue>
    3470:	90 91 e8 12 	lds	r25, 0x12E8	; 0x8012e8 <xTimerQueue+0x1>
    3474:	89 2b       	or	r24, r25
    3476:	91 f0       	breq	.+36     	; 0x349c <xTimerCreateTimerTask+0x38>
    3478:	0f 2e       	mov	r0, r31
    347a:	f5 ee       	ldi	r31, 0xE5	; 229
    347c:	ef 2e       	mov	r14, r31
    347e:	f2 e1       	ldi	r31, 0x12	; 18
    3480:	ff 2e       	mov	r15, r31
    3482:	f0 2d       	mov	r31, r0
    3484:	03 e0       	ldi	r16, 0x03	; 3
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 ec       	ldi	r20, 0xC0	; 192
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	6b e9       	ldi	r22, 0x9B	; 155
    3490:	72 e0       	ldi	r23, 0x02	; 2
    3492:	87 ed       	ldi	r24, 0xD7	; 215
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskCreate>
    349a:	01 c0       	rjmp	.+2      	; 0x349e <xTimerCreateTimerTask+0x3a>
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	0f 91       	pop	r16
    34a0:	ff 90       	pop	r15
    34a2:	ef 90       	pop	r14
    34a4:	08 95       	ret

000034a6 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    34a6:	8f 92       	push	r8
    34a8:	9f 92       	push	r9
    34aa:	af 92       	push	r10
    34ac:	bf 92       	push	r11
    34ae:	cf 92       	push	r12
    34b0:	df 92       	push	r13
    34b2:	ef 92       	push	r14
    34b4:	ff 92       	push	r15
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	27 97       	sbiw	r28, 0x07	; 7
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    34ce:	e0 91 e7 12 	lds	r30, 0x12E7	; 0x8012e7 <xTimerQueue>
    34d2:	f0 91 e8 12 	lds	r31, 0x12E8	; 0x8012e8 <xTimerQueue+0x1>
    34d6:	30 97       	sbiw	r30, 0x00	; 0
    34d8:	81 f1       	breq	.+96     	; 0x353a <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    34da:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    34dc:	2a 83       	std	Y+2, r18	; 0x02
    34de:	3b 83       	std	Y+3, r19	; 0x03
    34e0:	4c 83       	std	Y+4, r20	; 0x04
    34e2:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    34e4:	9f 83       	std	Y+7, r25	; 0x07
    34e6:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    34e8:	66 30       	cpi	r22, 0x06	; 6
    34ea:	f4 f4       	brge	.+60     	; 0x3528 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    34ec:	c3 da       	rcall	.-2682   	; 0x2a74 <xTaskGetSchedulerState>
    34ee:	82 30       	cpi	r24, 0x02	; 2
    34f0:	69 f4       	brne	.+26     	; 0x350c <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    34f2:	00 e0       	ldi	r16, 0x00	; 0
    34f4:	a7 01       	movw	r20, r14
    34f6:	96 01       	movw	r18, r12
    34f8:	be 01       	movw	r22, r28
    34fa:	6f 5f       	subi	r22, 0xFF	; 255
    34fc:	7f 4f       	sbci	r23, 0xFF	; 255
    34fe:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <xTimerQueue>
    3502:	90 91 e8 12 	lds	r25, 0x12E8	; 0x8012e8 <xTimerQueue+0x1>
    3506:	0e 94 c1 07 	call	0xf82	; 0xf82 <xQueueGenericSend>
    350a:	18 c0       	rjmp	.+48     	; 0x353c <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    350c:	00 e0       	ldi	r16, 0x00	; 0
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	a9 01       	movw	r20, r18
    3514:	be 01       	movw	r22, r28
    3516:	6f 5f       	subi	r22, 0xFF	; 255
    3518:	7f 4f       	sbci	r23, 0xFF	; 255
    351a:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <xTimerQueue>
    351e:	90 91 e8 12 	lds	r25, 0x12E8	; 0x8012e8 <xTimerQueue+0x1>
    3522:	0e 94 c1 07 	call	0xf82	; 0xf82 <xQueueGenericSend>
    3526:	0a c0       	rjmp	.+20     	; 0x353c <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	a8 01       	movw	r20, r16
    352c:	be 01       	movw	r22, r28
    352e:	6f 5f       	subi	r22, 0xFF	; 255
    3530:	7f 4f       	sbci	r23, 0xFF	; 255
    3532:	cf 01       	movw	r24, r30
    3534:	0e 94 53 08 	call	0x10a6	; 0x10a6 <xQueueGenericSendFromISR>
    3538:	01 c0       	rjmp	.+2      	; 0x353c <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    353a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    353c:	27 96       	adiw	r28, 0x07	; 7
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	1f 91       	pop	r17
    354e:	0f 91       	pop	r16
    3550:	ff 90       	pop	r15
    3552:	ef 90       	pop	r14
    3554:	df 90       	pop	r13
    3556:	cf 90       	pop	r12
    3558:	bf 90       	pop	r11
    355a:	af 90       	pop	r10
    355c:	9f 90       	pop	r9
    355e:	8f 90       	pop	r8
    3560:	08 95       	ret

00003562 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3562:	8f 92       	push	r8
    3564:	9f 92       	push	r9
    3566:	af 92       	push	r10
    3568:	bf 92       	push	r11
    356a:	cf 92       	push	r12
    356c:	df 92       	push	r13
    356e:	ef 92       	push	r14
    3570:	ff 92       	push	r15
    3572:	0f 93       	push	r16
    3574:	1f 93       	push	r17
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    357a:	3b c0       	rjmp	.+118    	; 0x35f2 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    357c:	07 80       	ldd	r0, Z+7	; 0x07
    357e:	f0 85       	ldd	r31, Z+8	; 0x08
    3580:	e0 2d       	mov	r30, r0
    3582:	80 80       	ld	r8, Z
    3584:	91 80       	ldd	r9, Z+1	; 0x01
    3586:	a2 80       	ldd	r10, Z+2	; 0x02
    3588:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    358a:	c0 85       	ldd	r28, Z+8	; 0x08
    358c:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    358e:	8e 01       	movw	r16, r28
    3590:	0e 5f       	subi	r16, 0xFE	; 254
    3592:	1f 4f       	sbci	r17, 0xFF	; 255
    3594:	c8 01       	movw	r24, r16
    3596:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    359a:	ec 89       	ldd	r30, Y+20	; 0x14
    359c:	fd 89       	ldd	r31, Y+21	; 0x15
    359e:	ce 01       	movw	r24, r28
    35a0:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35a2:	8e 89       	ldd	r24, Y+22	; 0x16
    35a4:	82 ff       	sbrs	r24, 2
    35a6:	25 c0       	rjmp	.+74     	; 0x35f2 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    35a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    35aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    35ac:	a8 89       	ldd	r26, Y+16	; 0x10
    35ae:	b9 89       	ldd	r27, Y+17	; 0x11
    35b0:	88 0d       	add	r24, r8
    35b2:	99 1d       	adc	r25, r9
    35b4:	aa 1d       	adc	r26, r10
    35b6:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    35b8:	88 16       	cp	r8, r24
    35ba:	99 06       	cpc	r9, r25
    35bc:	aa 06       	cpc	r10, r26
    35be:	bb 06       	cpc	r11, r27
    35c0:	70 f4       	brcc	.+28     	; 0x35de <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    35c2:	8a 83       	std	Y+2, r24	; 0x02
    35c4:	9b 83       	std	Y+3, r25	; 0x03
    35c6:	ac 83       	std	Y+4, r26	; 0x04
    35c8:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    35ca:	db 87       	std	Y+11, r29	; 0x0b
    35cc:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    35ce:	b8 01       	movw	r22, r16
    35d0:	80 91 eb 12 	lds	r24, 0x12EB	; 0x8012eb <pxCurrentTimerList>
    35d4:	90 91 ec 12 	lds	r25, 0x12EC	; 0x8012ec <pxCurrentTimerList+0x1>
    35d8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <vListInsert>
    35dc:	0a c0       	rjmp	.+20     	; 0x35f2 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    35de:	c1 2c       	mov	r12, r1
    35e0:	d1 2c       	mov	r13, r1
    35e2:	76 01       	movw	r14, r12
    35e4:	00 e0       	ldi	r16, 0x00	; 0
    35e6:	10 e0       	ldi	r17, 0x00	; 0
    35e8:	a5 01       	movw	r20, r10
    35ea:	94 01       	movw	r18, r8
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	ce 01       	movw	r24, r28
    35f0:	5a df       	rcall	.-332    	; 0x34a6 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    35f2:	e0 91 eb 12 	lds	r30, 0x12EB	; 0x8012eb <pxCurrentTimerList>
    35f6:	f0 91 ec 12 	lds	r31, 0x12EC	; 0x8012ec <pxCurrentTimerList+0x1>
    35fa:	80 81       	ld	r24, Z
    35fc:	81 11       	cpse	r24, r1
    35fe:	be cf       	rjmp	.-132    	; 0x357c <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3600:	80 91 e9 12 	lds	r24, 0x12E9	; 0x8012e9 <pxOverflowTimerList>
    3604:	90 91 ea 12 	lds	r25, 0x12EA	; 0x8012ea <pxOverflowTimerList+0x1>
    3608:	90 93 ec 12 	sts	0x12EC, r25	; 0x8012ec <pxCurrentTimerList+0x1>
    360c:	80 93 eb 12 	sts	0x12EB, r24	; 0x8012eb <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3610:	f0 93 ea 12 	sts	0x12EA, r31	; 0x8012ea <pxOverflowTimerList+0x1>
    3614:	e0 93 e9 12 	sts	0x12E9, r30	; 0x8012e9 <pxOverflowTimerList>
    }
    3618:	df 91       	pop	r29
    361a:	cf 91       	pop	r28
    361c:	1f 91       	pop	r17
    361e:	0f 91       	pop	r16
    3620:	ff 90       	pop	r15
    3622:	ef 90       	pop	r14
    3624:	df 90       	pop	r13
    3626:	cf 90       	pop	r12
    3628:	bf 90       	pop	r11
    362a:	af 90       	pop	r10
    362c:	9f 90       	pop	r9
    362e:	8f 90       	pop	r8
    3630:	08 95       	ret

00003632 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3632:	cf 92       	push	r12
    3634:	df 92       	push	r13
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	cf 93       	push	r28
    363c:	df 93       	push	r29
    363e:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3640:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <xTaskGetTickCount>
    3644:	6b 01       	movw	r12, r22
    3646:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3648:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <xLastTime.2436>
    364c:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <xLastTime.2436+0x1>
    3650:	a0 91 e3 12 	lds	r26, 0x12E3	; 0x8012e3 <xLastTime.2436+0x2>
    3654:	b0 91 e4 12 	lds	r27, 0x12E4	; 0x8012e4 <xLastTime.2436+0x3>
    3658:	c8 16       	cp	r12, r24
    365a:	d9 06       	cpc	r13, r25
    365c:	ea 06       	cpc	r14, r26
    365e:	fb 06       	cpc	r15, r27
    3660:	20 f4       	brcc	.+8      	; 0x366a <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3662:	7f df       	rcall	.-258    	; 0x3562 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	88 83       	st	Y, r24
    3668:	01 c0       	rjmp	.+2      	; 0x366c <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    366a:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    366c:	c0 92 e1 12 	sts	0x12E1, r12	; 0x8012e1 <xLastTime.2436>
    3670:	d0 92 e2 12 	sts	0x12E2, r13	; 0x8012e2 <xLastTime.2436+0x1>
    3674:	e0 92 e3 12 	sts	0x12E3, r14	; 0x8012e3 <xLastTime.2436+0x2>
    3678:	f0 92 e4 12 	sts	0x12E4, r15	; 0x8012e4 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    367c:	c7 01       	movw	r24, r14
    367e:	b6 01       	movw	r22, r12
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
    3684:	ff 90       	pop	r15
    3686:	ef 90       	pop	r14
    3688:	df 90       	pop	r13
    368a:	cf 90       	pop	r12
    368c:	08 95       	ret

0000368e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    368e:	4f 92       	push	r4
    3690:	5f 92       	push	r5
    3692:	6f 92       	push	r6
    3694:	7f 92       	push	r7
    3696:	8f 92       	push	r8
    3698:	9f 92       	push	r9
    369a:	af 92       	push	r10
    369c:	bf 92       	push	r11
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	4b 01       	movw	r8, r22
    36b0:	5c 01       	movw	r10, r24
    36b2:	29 01       	movw	r4, r18
    36b4:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    36b6:	e0 91 eb 12 	lds	r30, 0x12EB	; 0x8012eb <pxCurrentTimerList>
    36ba:	f0 91 ec 12 	lds	r31, 0x12EC	; 0x8012ec <pxCurrentTimerList+0x1>
    36be:	07 80       	ldd	r0, Z+7	; 0x07
    36c0:	f0 85       	ldd	r31, Z+8	; 0x08
    36c2:	e0 2d       	mov	r30, r0
    36c4:	c0 85       	ldd	r28, Z+8	; 0x08
    36c6:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    36c8:	ce 01       	movw	r24, r28
    36ca:	02 96       	adiw	r24, 0x02	; 2
    36cc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    36d0:	8e 89       	ldd	r24, Y+22	; 0x16
    36d2:	82 ff       	sbrs	r24, 2
    36d4:	1b c0       	rjmp	.+54     	; 0x370c <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    36d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    36d8:	5f 85       	ldd	r21, Y+15	; 0x0f
    36da:	68 89       	ldd	r22, Y+16	; 0x10
    36dc:	79 89       	ldd	r23, Y+17	; 0x11
    36de:	48 0d       	add	r20, r8
    36e0:	59 1d       	adc	r21, r9
    36e2:	6a 1d       	adc	r22, r10
    36e4:	7b 1d       	adc	r23, r11
    36e6:	75 01       	movw	r14, r10
    36e8:	64 01       	movw	r12, r8
    36ea:	93 01       	movw	r18, r6
    36ec:	82 01       	movw	r16, r4
    36ee:	ce 01       	movw	r24, r28
    36f0:	47 de       	rcall	.-882    	; 0x3380 <prvInsertTimerInActiveList>
    36f2:	88 23       	and	r24, r24
    36f4:	69 f0       	breq	.+26     	; 0x3710 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    36f6:	c1 2c       	mov	r12, r1
    36f8:	d1 2c       	mov	r13, r1
    36fa:	76 01       	movw	r14, r12
    36fc:	00 e0       	ldi	r16, 0x00	; 0
    36fe:	10 e0       	ldi	r17, 0x00	; 0
    3700:	a5 01       	movw	r20, r10
    3702:	94 01       	movw	r18, r8
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	ce 01       	movw	r24, r28
    3708:	ce de       	rcall	.-612    	; 0x34a6 <xTimerGenericCommand>
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    370c:	8e 7f       	andi	r24, 0xFE	; 254
    370e:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3710:	ec 89       	ldd	r30, Y+20	; 0x14
    3712:	fd 89       	ldd	r31, Y+21	; 0x15
    3714:	ce 01       	movw	r24, r28
    3716:	19 95       	eicall
    }
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	df 90       	pop	r13
    3726:	cf 90       	pop	r12
    3728:	bf 90       	pop	r11
    372a:	af 90       	pop	r10
    372c:	9f 90       	pop	r9
    372e:	8f 90       	pop	r8
    3730:	7f 90       	pop	r7
    3732:	6f 90       	pop	r6
    3734:	5f 90       	pop	r5
    3736:	4f 90       	pop	r4
    3738:	08 95       	ret

0000373a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    373a:	8f 92       	push	r8
    373c:	9f 92       	push	r9
    373e:	af 92       	push	r10
    3740:	bf 92       	push	r11
    3742:	cf 92       	push	r12
    3744:	df 92       	push	r13
    3746:	ef 92       	push	r14
    3748:	ff 92       	push	r15
    374a:	1f 93       	push	r17
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
    3750:	1f 92       	push	r1
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	6b 01       	movw	r12, r22
    3758:	7c 01       	movw	r14, r24
    375a:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    375c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3760:	ce 01       	movw	r24, r28
    3762:	01 96       	adiw	r24, 0x01	; 1
    3764:	66 df       	rcall	.-308    	; 0x3632 <prvSampleTimeNow>
    3766:	4b 01       	movw	r8, r22
    3768:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	81 11       	cpse	r24, r1
    376e:	2d c0       	rjmp	.+90     	; 0x37ca <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3770:	11 11       	cpse	r17, r1
    3772:	0d c0       	rjmp	.+26     	; 0x378e <prvProcessTimerOrBlockTask+0x54>
    3774:	8c 14       	cp	r8, r12
    3776:	9d 04       	cpc	r9, r13
    3778:	ae 04       	cpc	r10, r14
    377a:	bf 04       	cpc	r11, r15
    377c:	40 f0       	brcs	.+16     	; 0x378e <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    377e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3782:	a5 01       	movw	r20, r10
    3784:	94 01       	movw	r18, r8
    3786:	c7 01       	movw	r24, r14
    3788:	b6 01       	movw	r22, r12
    378a:	81 df       	rcall	.-254    	; 0x368e <prvProcessExpiredTimer>
    378c:	20 c0       	rjmp	.+64     	; 0x37ce <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    378e:	11 23       	and	r17, r17
    3790:	41 f0       	breq	.+16     	; 0x37a2 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3792:	e0 91 e9 12 	lds	r30, 0x12E9	; 0x8012e9 <pxOverflowTimerList>
    3796:	f0 91 ea 12 	lds	r31, 0x12EA	; 0x8012ea <pxOverflowTimerList+0x1>
    379a:	80 81       	ld	r24, Z
    379c:	11 e0       	ldi	r17, 0x01	; 1
    379e:	81 11       	cpse	r24, r1
    37a0:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    37a2:	b7 01       	movw	r22, r14
    37a4:	a6 01       	movw	r20, r12
    37a6:	48 19       	sub	r20, r8
    37a8:	59 09       	sbc	r21, r9
    37aa:	6a 09       	sbc	r22, r10
    37ac:	7b 09       	sbc	r23, r11
    37ae:	21 2f       	mov	r18, r17
    37b0:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <xTimerQueue>
    37b4:	90 91 e8 12 	lds	r25, 0x12E8	; 0x8012e8 <xTimerQueue+0x1>
    37b8:	0e 94 ce 09 	call	0x139c	; 0x139c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    37bc:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>
    37c0:	81 11       	cpse	r24, r1
    37c2:	05 c0       	rjmp	.+10     	; 0x37ce <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    37c4:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    37ca:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskResumeAll>
            }
        }
    }
    37ce:	0f 90       	pop	r0
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	1f 91       	pop	r17
    37d6:	ff 90       	pop	r15
    37d8:	ef 90       	pop	r14
    37da:	df 90       	pop	r13
    37dc:	cf 90       	pop	r12
    37de:	bf 90       	pop	r11
    37e0:	af 90       	pop	r10
    37e2:	9f 90       	pop	r9
    37e4:	8f 90       	pop	r8
    37e6:	08 95       	ret

000037e8 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    37e8:	af 92       	push	r10
    37ea:	bf 92       	push	r11
    37ec:	cf 92       	push	r12
    37ee:	df 92       	push	r13
    37f0:	ef 92       	push	r14
    37f2:	ff 92       	push	r15
    37f4:	0f 93       	push	r16
    37f6:	1f 93       	push	r17
    37f8:	cf 93       	push	r28
    37fa:	df 93       	push	r29
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
    3800:	28 97       	sbiw	r28, 0x08	; 8
    3802:	0f b6       	in	r0, 0x3f	; 63
    3804:	f8 94       	cli
    3806:	de bf       	out	0x3e, r29	; 62
    3808:	0f be       	out	0x3f, r0	; 63
    380a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    380c:	82 c0       	rjmp	.+260    	; 0x3912 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	88 23       	and	r24, r24
    3812:	0c f4       	brge	.+2      	; 0x3816 <prvProcessReceivedCommands+0x2e>
    3814:	7e c0       	rjmp	.+252    	; 0x3912 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3816:	ae 80       	ldd	r10, Y+6	; 0x06
    3818:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    381a:	d5 01       	movw	r26, r10
    381c:	1c 96       	adiw	r26, 0x0c	; 12
    381e:	8d 91       	ld	r24, X+
    3820:	9c 91       	ld	r25, X
    3822:	1d 97       	sbiw	r26, 0x0d	; 13
    3824:	89 2b       	or	r24, r25
    3826:	21 f0       	breq	.+8      	; 0x3830 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3828:	c5 01       	movw	r24, r10
    382a:	02 96       	adiw	r24, 0x02	; 2
    382c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3830:	ce 01       	movw	r24, r28
    3832:	08 96       	adiw	r24, 0x08	; 8
    3834:	fe de       	rcall	.-516    	; 0x3632 <prvSampleTimeNow>
    3836:	8b 01       	movw	r16, r22
    3838:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    383a:	e9 81       	ldd	r30, Y+1	; 0x01
    383c:	0e 2e       	mov	r0, r30
    383e:	00 0c       	add	r0, r0
    3840:	ff 0b       	sbc	r31, r31
    3842:	ea 30       	cpi	r30, 0x0A	; 10
    3844:	f1 05       	cpc	r31, r1
    3846:	08 f0       	brcs	.+2      	; 0x384a <prvProcessReceivedCommands+0x62>
    3848:	64 c0       	rjmp	.+200    	; 0x3912 <prvProcessReceivedCommands+0x12a>
    384a:	88 27       	eor	r24, r24
    384c:	ee 58       	subi	r30, 0x8E	; 142
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	8f 4f       	sbci	r24, 0xFF	; 255
    3852:	0c 94 38 2e 	jmp	0x5c70	; 0x5c70 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3856:	f5 01       	movw	r30, r10
    3858:	86 89       	ldd	r24, Z+22	; 0x16
    385a:	81 60       	ori	r24, 0x01	; 1
    385c:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    385e:	ca 80       	ldd	r12, Y+2	; 0x02
    3860:	db 80       	ldd	r13, Y+3	; 0x03
    3862:	ec 80       	ldd	r14, Y+4	; 0x04
    3864:	fd 80       	ldd	r15, Y+5	; 0x05
    3866:	46 85       	ldd	r20, Z+14	; 0x0e
    3868:	57 85       	ldd	r21, Z+15	; 0x0f
    386a:	60 89       	ldd	r22, Z+16	; 0x10
    386c:	71 89       	ldd	r23, Z+17	; 0x11
    386e:	4c 0d       	add	r20, r12
    3870:	5d 1d       	adc	r21, r13
    3872:	6e 1d       	adc	r22, r14
    3874:	7f 1d       	adc	r23, r15
    3876:	c5 01       	movw	r24, r10
    3878:	83 dd       	rcall	.-1274   	; 0x3380 <prvInsertTimerInActiveList>
    387a:	88 23       	and	r24, r24
    387c:	09 f4       	brne	.+2      	; 0x3880 <prvProcessReceivedCommands+0x98>
    387e:	49 c0       	rjmp	.+146    	; 0x3912 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3880:	d5 01       	movw	r26, r10
    3882:	54 96       	adiw	r26, 0x14	; 20
    3884:	ed 91       	ld	r30, X+
    3886:	fc 91       	ld	r31, X
    3888:	55 97       	sbiw	r26, 0x15	; 21
    388a:	c5 01       	movw	r24, r10
    388c:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    388e:	f5 01       	movw	r30, r10
    3890:	86 89       	ldd	r24, Z+22	; 0x16
    3892:	82 ff       	sbrs	r24, 2
    3894:	3e c0       	rjmp	.+124    	; 0x3912 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3896:	4a 81       	ldd	r20, Y+2	; 0x02
    3898:	5b 81       	ldd	r21, Y+3	; 0x03
    389a:	6c 81       	ldd	r22, Y+4	; 0x04
    389c:	7d 81       	ldd	r23, Y+5	; 0x05
    389e:	86 85       	ldd	r24, Z+14	; 0x0e
    38a0:	97 85       	ldd	r25, Z+15	; 0x0f
    38a2:	a0 89       	ldd	r26, Z+16	; 0x10
    38a4:	b1 89       	ldd	r27, Z+17	; 0x11
    38a6:	9a 01       	movw	r18, r20
    38a8:	ab 01       	movw	r20, r22
    38aa:	28 0f       	add	r18, r24
    38ac:	39 1f       	adc	r19, r25
    38ae:	4a 1f       	adc	r20, r26
    38b0:	5b 1f       	adc	r21, r27
    38b2:	c1 2c       	mov	r12, r1
    38b4:	d1 2c       	mov	r13, r1
    38b6:	76 01       	movw	r14, r12
    38b8:	00 e0       	ldi	r16, 0x00	; 0
    38ba:	10 e0       	ldi	r17, 0x00	; 0
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	c5 01       	movw	r24, r10
    38c0:	f2 dd       	rcall	.-1052   	; 0x34a6 <xTimerGenericCommand>
    38c2:	27 c0       	rjmp	.+78     	; 0x3912 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    38c4:	d5 01       	movw	r26, r10
    38c6:	56 96       	adiw	r26, 0x16	; 22
    38c8:	8c 91       	ld	r24, X
    38ca:	56 97       	sbiw	r26, 0x16	; 22
    38cc:	8e 7f       	andi	r24, 0xFE	; 254
    38ce:	56 96       	adiw	r26, 0x16	; 22
    38d0:	8c 93       	st	X, r24
                        break;
    38d2:	1f c0       	rjmp	.+62     	; 0x3912 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    38d4:	f5 01       	movw	r30, r10
    38d6:	86 89       	ldd	r24, Z+22	; 0x16
    38d8:	81 60       	ori	r24, 0x01	; 1
    38da:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    38dc:	4a 81       	ldd	r20, Y+2	; 0x02
    38de:	5b 81       	ldd	r21, Y+3	; 0x03
    38e0:	6c 81       	ldd	r22, Y+4	; 0x04
    38e2:	7d 81       	ldd	r23, Y+5	; 0x05
    38e4:	46 87       	std	Z+14, r20	; 0x0e
    38e6:	57 87       	std	Z+15, r21	; 0x0f
    38e8:	60 8b       	std	Z+16, r22	; 0x10
    38ea:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    38ec:	40 0f       	add	r20, r16
    38ee:	51 1f       	adc	r21, r17
    38f0:	62 1f       	adc	r22, r18
    38f2:	73 1f       	adc	r23, r19
    38f4:	68 01       	movw	r12, r16
    38f6:	79 01       	movw	r14, r18
    38f8:	c5 01       	movw	r24, r10
    38fa:	42 dd       	rcall	.-1404   	; 0x3380 <prvInsertTimerInActiveList>
                        break;
    38fc:	0a c0       	rjmp	.+20     	; 0x3912 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    38fe:	f5 01       	movw	r30, r10
    3900:	86 89       	ldd	r24, Z+22	; 0x16
    3902:	81 fd       	sbrc	r24, 1
    3904:	04 c0       	rjmp	.+8      	; 0x390e <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3906:	c5 01       	movw	r24, r10
    3908:	0e 94 9e 04 	call	0x93c	; 0x93c <vPortFree>
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    390e:	8e 7f       	andi	r24, 0xFE	; 254
    3910:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	a9 01       	movw	r20, r18
    3918:	be 01       	movw	r22, r28
    391a:	6f 5f       	subi	r22, 0xFF	; 255
    391c:	7f 4f       	sbci	r23, 0xFF	; 255
    391e:	80 91 e7 12 	lds	r24, 0x12E7	; 0x8012e7 <xTimerQueue>
    3922:	90 91 e8 12 	lds	r25, 0x12E8	; 0x8012e8 <xTimerQueue+0x1>
    3926:	0e 94 8e 08 	call	0x111c	; 0x111c <xQueueReceive>
    392a:	81 11       	cpse	r24, r1
    392c:	70 cf       	rjmp	.-288    	; 0x380e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    392e:	28 96       	adiw	r28, 0x08	; 8
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	1f 91       	pop	r17
    3940:	0f 91       	pop	r16
    3942:	ff 90       	pop	r15
    3944:	ef 90       	pop	r14
    3946:	df 90       	pop	r13
    3948:	cf 90       	pop	r12
    394a:	bf 90       	pop	r11
    394c:	af 90       	pop	r10
    394e:	08 95       	ret

00003950 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3950:	08 95       	ret

00003952 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3952:	84 b1       	in	r24, 0x04	; 4
    3954:	80 68       	ori	r24, 0x80	; 128
    3956:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3958:	85 b1       	in	r24, 0x05	; 5
    395a:	80 68       	ori	r24, 0x80	; 128
    395c:	85 b9       	out	0x05, r24	; 5
    395e:	08 95       	ret

00003960 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3960:	83 b1       	in	r24, 0x03	; 3
    3962:	80 68       	ori	r24, 0x80	; 128
    3964:	83 b9       	out	0x03, r24	; 3
    3966:	08 95       	ret

00003968 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3968:	f4 df       	rcall	.-24     	; 0x3952 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    396a:	2f ef       	ldi	r18, 0xFF	; 255
    396c:	80 e7       	ldi	r24, 0x70	; 112
    396e:	92 e0       	ldi	r25, 0x02	; 2
    3970:	21 50       	subi	r18, 0x01	; 1
    3972:	80 40       	sbci	r24, 0x00	; 0
    3974:	90 40       	sbci	r25, 0x00	; 0
    3976:	e1 f7       	brne	.-8      	; 0x3970 <vApplicationMallocFailedHook+0x8>
    3978:	00 c0       	rjmp	.+0      	; 0x397a <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    397a:	00 00       	nop
    397c:	f1 df       	rcall	.-30     	; 0x3960 <prvBlinkMainLed>
    397e:	f5 cf       	rjmp	.-22     	; 0x396a <vApplicationMallocFailedHook+0x2>

00003980 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3980:	e8 df       	rcall	.-48     	; 0x3952 <prvSetMainLedOn>
    3982:	2f ef       	ldi	r18, 0xFF	; 255
    3984:	87 ea       	ldi	r24, 0xA7	; 167
    3986:	91 e6       	ldi	r25, 0x61	; 97
    3988:	21 50       	subi	r18, 0x01	; 1
    398a:	80 40       	sbci	r24, 0x00	; 0
    398c:	90 40       	sbci	r25, 0x00	; 0
    398e:	e1 f7       	brne	.-8      	; 0x3988 <vApplicationStackOverflowHook+0x8>
    3990:	00 c0       	rjmp	.+0      	; 0x3992 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3992:	00 00       	nop
    3994:	e5 df       	rcall	.-54     	; 0x3960 <prvBlinkMainLed>
    3996:	f5 cf       	rjmp	.-22     	; 0x3982 <vApplicationStackOverflowHook+0x2>

00003998 <lora_downLink_task>:

void lora_downLink_task()
{
	for(;;)
	{
		xMessageBufferReceive(downlinkMessageBuffer, &lora_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    3998:	0f ef       	ldi	r16, 0xFF	; 255
    399a:	1f ef       	ldi	r17, 0xFF	; 255
    399c:	98 01       	movw	r18, r16
    399e:	46 e1       	ldi	r20, 0x16	; 22
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	63 e0       	ldi	r22, 0x03	; 3
    39a4:	73 e1       	ldi	r23, 0x13	; 19
    39a6:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <downlinkMessageBuffer>
    39aa:	90 91 ed 14 	lds	r25, 0x14ED	; 0x8014ed <downlinkMessageBuffer+0x1>
    39ae:	0e 94 98 0c 	call	0x1930	; 0x1930 <xStreamBufferReceive>
		printf("DOWN LINK: from port: %d with %d bytes received!",lora_downlink_payload.portNo, lora_downlink_payload.len); // Just for Debug
    39b2:	c3 e0       	ldi	r28, 0x03	; 3
    39b4:	d3 e1       	ldi	r29, 0x13	; 19
    39b6:	99 81       	ldd	r25, Y+1	; 0x01
    39b8:	88 81       	ld	r24, Y
    39ba:	1f 92       	push	r1
    39bc:	9f 93       	push	r25
    39be:	1f 92       	push	r1
    39c0:	8f 93       	push	r24
    39c2:	83 ea       	ldi	r24, 0xA3	; 163
    39c4:	92 e0       	ldi	r25, 0x02	; 2
    39c6:	9f 93       	push	r25
    39c8:	8f 93       	push	r24
    39ca:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
		if (2 == lora_downlink_payload.len) // Check that we have got the expected 4 bytes
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	82 30       	cpi	r24, 0x02	; 2
    39de:	e1 f6       	brne	.-72     	; 0x3998 <lora_downLink_task>
		{
			level =  (lora_downlink_payload.bytes[0] << 8) + lora_downlink_payload.bytes[1];
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	98 2f       	mov	r25, r24
    39e6:	88 27       	eor	r24, r24
    39e8:	2b 81       	ldd	r18, Y+3	; 0x03
    39ea:	82 0f       	add	r24, r18
    39ec:	91 1d       	adc	r25, r1
    39ee:	90 93 df 14 	sts	0x14DF, r25	; 0x8014df <level+0x1>
    39f2:	80 93 de 14 	sts	0x14DE, r24	; 0x8014de <level>
			setVentilationLevel(ventilationLevel);
    39f6:	80 91 dc 14 	lds	r24, 0x14DC	; 0x8014dc <ventilationLevel>
    39fa:	90 91 dd 14 	lds	r25, 0x14DD	; 0x8014dd <ventilationLevel+0x1>
    39fe:	0e 94 f6 01 	call	0x3ec	; 0x3ec <setVentilationLevel>
    3a02:	ca cf       	rjmp	.-108    	; 0x3998 <lora_downLink_task>

00003a04 <lora_downlink_handler_create>:
	vTaskDelay(30);
}


 void lora_downlink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3a04:	ef 92       	push	r14
    3a06:	ff 92       	push	r15
    3a08:	0f 93       	push	r16
 xTaskCreate(
    3a0a:	e1 2c       	mov	r14, r1
    3a0c:	f1 2c       	mov	r15, r1
    3a0e:	08 2f       	mov	r16, r24
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 ec       	ldi	r20, 0xC0	; 192
    3a16:	50 e0       	ldi	r21, 0x00	; 0
    3a18:	64 ed       	ldi	r22, 0xD4	; 212
    3a1a:	72 e0       	ldi	r23, 0x02	; 2
    3a1c:	8c ec       	ldi	r24, 0xCC	; 204
    3a1e:	9c e1       	ldi	r25, 0x1C	; 28
    3a20:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskCreate>
 , NULL
 ,	tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
 , NULL );
	 
	 
 }
    3a24:	0f 91       	pop	r16
    3a26:	ff 90       	pop	r15
    3a28:	ef 90       	pop	r14
    3a2a:	08 95       	ret

00003a2c <_lora_setup>:
 #define LORA_appKEY "266F209D5D1F15A2AF87F013DC002926"

 static char _out_buf[100];

 static void _lora_setup(void)
 {
    3a2c:	cf 93       	push	r28
    3a2e:	df 93       	push	r29
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	0e 94 e5 29 	call	0x53ca	; 0x53ca <status_leds_slowBlink>

	 // Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3a36:	9f d4       	rcall	.+2366   	; 0x4376 <lora_driver_rn2483FactoryReset>
    3a38:	1b d7       	rcall	.+3638   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3a3a:	9f 93       	push	r25
    3a3c:	8f 93       	push	r24
    3a3e:	82 ee       	ldi	r24, 0xE2	; 226
    3a40:	92 e0       	ldi	r25, 0x02	; 2
    3a42:	9f 93       	push	r25
    3a44:	8f 93       	push	r24
    3a46:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3a4a:	13 d6       	rcall	.+3110   	; 0x4672 <lora_driver_configureToEu868>
    3a4c:	11 d7       	rcall	.+3618   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3a4e:	9f 93       	push	r25
    3a50:	8f 93       	push	r24
    3a52:	85 ef       	ldi	r24, 0xF5	; 245
    3a54:	92 e0       	ldi	r25, 0x02	; 2
    3a56:	9f 93       	push	r25
    3a58:	8f 93       	push	r24
    3a5a:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3a5e:	89 e1       	ldi	r24, 0x19	; 25

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
    3a60:	93 e1       	ldi	r25, 0x13	; 19
    3a62:	9b d4       	rcall	.+2358   	; 0x439a <lora_driver_getRn2483Hweui>
    3a64:	05 d7       	rcall	.+3594   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3a66:	c9 e1       	ldi	r28, 0x19	; 25
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3a68:	d3 e1       	ldi	r29, 0x13	; 19
    3a6a:	df 93       	push	r29
    3a6c:	cf 93       	push	r28
    3a6e:	9f 93       	push	r25
    3a70:	8f 93       	push	r24
    3a72:	8e e0       	ldi	r24, 0x0E	; 14
    3a74:	93 e0       	ldi	r25, 0x03	; 3
    3a76:	9f 93       	push	r25
    3a78:	8f 93       	push	r24
    3a7a:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3a7e:	ce 01       	movw	r24, r28

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3a80:	a8 d4       	rcall	.+2384   	; 0x43d2 <lora_driver_setDeviceIdentifier>
    3a82:	f6 d6       	rcall	.+3564   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3a84:	9f 93       	push	r25
    3a86:	8f 93       	push	r24
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	82 e2       	ldi	r24, 0x22	; 34
    3a8e:	93 e0       	ldi	r25, 0x03	; 3
    3a90:	9f 93       	push	r25
    3a92:	8f 93       	push	r24
    3a94:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3a98:	ae 01       	movw	r20, r28

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3a9a:	67 e3       	ldi	r22, 0x37	; 55
    3a9c:	73 e0       	ldi	r23, 0x03	; 3
    3a9e:	88 e5       	ldi	r24, 0x58	; 88
    3aa0:	93 e0       	ldi	r25, 0x03	; 3
    3aa2:	c5 d6       	rcall	.+3466   	; 0x482e <lora_driver_setOtaaIdentity>
    3aa4:	e5 d6       	rcall	.+3530   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3aa6:	9f 93       	push	r25
    3aa8:	8f 93       	push	r24
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	87 e3       	ldi	r24, 0x37	; 55
    3ab0:	93 e0       	ldi	r25, 0x03	; 3
    3ab2:	9f 93       	push	r25
    3ab4:	8f 93       	push	r24
    3ab6:	88 e5       	ldi	r24, 0x58	; 88
    3ab8:	93 e0       	ldi	r25, 0x03	; 3
    3aba:	9f 93       	push	r25
    3abc:	8f 93       	push	r24
    3abe:	89 e6       	ldi	r24, 0x69	; 105
    3ac0:	93 e0       	ldi	r25, 0x03	; 3
    3ac2:	9f 93       	push	r25
    3ac4:	8f 93       	push	r24
    3ac6:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3aca:	b6 d4       	rcall	.+2412   	; 0x4438 <lora_driver_saveMac>

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3acc:	d1 d6       	rcall	.+3490   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3ace:	9f 93       	push	r25
    3ad0:	8f 93       	push	r24
    3ad2:	8f e9       	ldi	r24, 0x9F	; 159
    3ad4:	93 e0       	ldi	r25, 0x03	; 3
    3ad6:	9f 93       	push	r25
    3ad8:	8f 93       	push	r24
    3ada:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3ade:	8d b7       	in	r24, 0x3d	; 61

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3ae0:	9e b7       	in	r25, 0x3e	; 62
    3ae2:	82 96       	adiw	r24, 0x22	; 34
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	9e bf       	out	0x3e, r25	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	8d bf       	out	0x3d, r24	; 61
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	9d d5       	rcall	.+2874   	; 0x462c <lora_driver_setAdaptiveDataRate>
    3af2:	be d6       	rcall	.+3452   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3af4:	9f 93       	push	r25
    3af6:	8f 93       	push	r24
    3af8:	8e ea       	ldi	r24, 0xAE	; 174
    3afa:	93 e0       	ldi	r25, 0x03	; 3
    3afc:	9f 93       	push	r25
    3afe:	8f 93       	push	r24
    3b00:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3b04:	84 ef       	ldi	r24, 0xF4	; 244

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3b06:	91 e0       	ldi	r25, 0x01	; 1
    3b08:	9c d5       	rcall	.+2872   	; 0x4642 <lora_driver_setReceiveDelay>
    3b0a:	b2 d6       	rcall	.+3428   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3b0c:	9f 93       	push	r25
    3b0e:	8f 93       	push	r24
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	8f 93       	push	r24
    3b14:	84 ef       	ldi	r24, 0xF4	; 244
    3b16:	8f 93       	push	r24
    3b18:	8f ec       	ldi	r24, 0xCF	; 207
    3b1a:	93 e0       	ldi	r25, 0x03	; 3
    3b1c:	9f 93       	push	r25
    3b1e:	8f 93       	push	r24
    3b20:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3b24:	8d b7       	in	r24, 0x3d	; 61
    3b26:	9e b7       	in	r25, 0x3e	; 62
    3b28:	0a 96       	adiw	r24, 0x0a	; 10
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	9e bf       	out	0x3e, r25	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	8d bf       	out	0x3d, r24	; 61
    3b34:	ca e0       	ldi	r28, 0x0A	; 10

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
    3b36:	80 e0       	ldi	r24, 0x00	; 0
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
    3b38:	85 d4       	rcall	.+2314   	; 0x4444 <lora_driver_join>
    3b3a:	d8 2f       	mov	r29, r24
    3b3c:	99 d6       	rcall	.+3378   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3b3e:	9f 93       	push	r25
		 
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3b40:	8f 93       	push	r24
    3b42:	1f 92       	push	r1
    3b44:	cf 93       	push	r28
    3b46:	8f ee       	ldi	r24, 0xEF	; 239
    3b48:	93 e0       	ldi	r25, 0x03	; 3
    3b4a:	9f 93       	push	r25
    3b4c:	8f 93       	push	r24
    3b4e:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0

		 if ( rc != LORA_ACCEPTED)
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	d8 30       	cpi	r29, 0x08	; 8
    3b60:	59 f0       	breq	.+22     	; 0x3b78 <_lora_setup+0x14c>
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	0e 94 49 2a 	call	0x5492	; 0x5492 <status_leds_longPuls>
		 {
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
    3b68:	66 e3       	ldi	r22, 0x36	; 54
    3b6a:	71 e0       	ldi	r23, 0x01	; 1
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	0e 94 38 12 	call	0x2470	; 0x2470 <vTaskDelay>
    3b74:	c1 50       	subi	r28, 0x01	; 1
    3b76:	f9 f6       	brne	.-66     	; 0x3b36 <_lora_setup+0x10a>
    3b78:	d8 30       	cpi	r29, 0x08	; 8
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
    3b7a:	21 f4       	brne	.+8      	; 0x3b84 <_lora_setup+0x158>
    3b7c:	81 e0       	ldi	r24, 0x01	; 1

	 if (rc == LORA_ACCEPTED)
    3b7e:	0e 94 2b 2a 	call	0x5456	; 0x5456 <status_leds_ledOn>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
    3b82:	09 c0       	rjmp	.+18     	; 0x3b96 <_lora_setup+0x16a>
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	0e 94 3a 2a 	call	0x5474	; 0x5474 <status_leds_ledOff>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	0e 94 08 2a 	call	0x5410	; 0x5410 <status_leds_fastBlink>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
    3b90:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    3b94:	fd cf       	rjmp	.-6      	; 0x3b90 <_lora_setup+0x164>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
    3b96:	df 91       	pop	r29
    3b98:	cf 91       	pop	r28
    3b9a:	08 95       	ret

00003b9c <lora_uplink_handler_task>:
		 }
	 }
 }
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	cd b7       	in	r28, 0x3d	; 61

 void lora_uplink_handler_task( void *pvParameters )
 {
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	6a 97       	sbiw	r28, 0x1a	; 26
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	d3 d3       	rcall	.+1958   	; 0x435a <lora_driver_resetRn2483>
	vTaskDelay(2);
    3bb4:	62 e0       	ldi	r22, 0x02	; 2
    3bb6:	70 e0       	ldi	r23, 0x00	; 0
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	0e 94 38 12 	call	0x2470	; 0x2470 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	cb d3       	rcall	.+1942   	; 0x435a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3bc4:	66 e9       	ldi	r22, 0x96	; 150
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 38 12 	call	0x2470	; 0x2470 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3bd0:	7d d3       	rcall	.+1786   	; 0x42cc <lora_driver_flushBuffers>

	_lora_setup();
    3bd2:	2c df       	rcall	.-424    	; 0x3a2c <_lora_setup>
    3bd4:	8f e0       	ldi	r24, 0x0F	; 15
	
	printf("a facut setup\n");	
    3bd6:	94 e0       	ldi	r25, 0x04	; 4
    3bd8:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <puts>
    3bdc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3be0:	69 83       	std	Y+1, r22	; 0x01
    3be2:	7a 83       	std	Y+2, r23	; 0x02
    3be4:	8b 83       	std	Y+3, r24	; 0x03
    3be6:	9c 83       	std	Y+4, r25	; 0x04

	//size_t bytesReceivedApplication;

	sensorDataPackageHandler_setPackage_lenght(6);
    3be8:	86 e0       	ldi	r24, 0x06	; 6
    3bea:	82 d0       	rcall	.+260    	; 0x3cf0 <sensorDataPackageHandler_setPackage_lenght>
	
	for(;;)
	{
		lora_driver_payload_t _uplink_payload = sensorDataPackageHandler_getLoRaPayload(2);
    3bec:	62 e0       	ldi	r22, 0x02	; 2
    3bee:	ce 01       	movw	r24, r28
    3bf0:	05 96       	adiw	r24, 0x05	; 5
    3bf2:	90 d0       	rcall	.+288    	; 0x3d14 <sensorDataPackageHandler_getLoRaPayload>
    3bf4:	8d e1       	ldi	r24, 0x1D	; 29
		printf("a luat data de la package handler \n");
    3bf6:	94 e0       	ldi	r25, 0x04	; 4
    3bf8:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <puts>
    3bfc:	80 e4       	ldi	r24, 0x40	; 64

		printf("inainte de delay\n");
    3bfe:	94 e0       	ldi	r25, 0x04	; 4
    3c00:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <puts>
    3c04:	44 e4       	ldi	r20, 0x44	; 68
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c06:	57 e0       	ldi	r21, 0x07	; 7
    3c08:	60 e0       	ldi	r22, 0x00	; 0
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	01 96       	adiw	r24, 0x01	; 1
    3c10:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <xTaskDelayUntil>
    3c14:	81 e5       	ldi	r24, 0x51	; 81
		printf("dupa delay, dar inainte sa trimita\n");
    3c16:	94 e0       	ldi	r25, 0x04	; 4
    3c18:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <puts>
    3c1c:	8e 81       	ldd	r24, Y+6	; 0x06
		printf("%d payload\n",_uplink_payload.len);
    3c1e:	1f 92       	push	r1
    3c20:	8f 93       	push	r24
    3c22:	84 e7       	ldi	r24, 0x74	; 116
    3c24:	94 e0       	ldi	r25, 0x04	; 4
    3c26:	9f 93       	push	r25
    3c28:	8f 93       	push	r24
    3c2a:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3c2e:	83 e0       	ldi	r24, 0x03	; 3

		if( _uplink_payload.bytes > 0 )
		{
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3c30:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <status_leds_shortPuls>
    3c34:	8f 81       	ldd	r24, Y+7	; 0x07
			printf("0 -> %x\n", _uplink_payload.bytes[0]);
    3c36:	1f 92       	push	r1
    3c38:	8f 93       	push	r24
    3c3a:	80 e8       	ldi	r24, 0x80	; 128
    3c3c:	94 e0       	ldi	r25, 0x04	; 4
    3c3e:	9f 93       	push	r25
    3c40:	8f 93       	push	r24
    3c42:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3c46:	88 85       	ldd	r24, Y+8	; 0x08
			printf("1 -> %x\n", _uplink_payload.bytes[1]);
    3c48:	1f 92       	push	r1
    3c4a:	8f 93       	push	r24
    3c4c:	89 e8       	ldi	r24, 0x89	; 137
    3c4e:	94 e0       	ldi	r25, 0x04	; 4
    3c50:	9f 93       	push	r25
    3c52:	8f 93       	push	r24
    3c54:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3c58:	89 85       	ldd	r24, Y+9	; 0x09
			printf("2 -> %x\n", _uplink_payload.bytes[2]);
    3c5a:	1f 92       	push	r1
    3c5c:	8f 93       	push	r24
    3c5e:	82 e9       	ldi	r24, 0x92	; 146
    3c60:	94 e0       	ldi	r25, 0x04	; 4
    3c62:	9f 93       	push	r25
    3c64:	8f 93       	push	r24
    3c66:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3c6a:	8a 85       	ldd	r24, Y+10	; 0x0a
			printf("3 -> %x\n", _uplink_payload.bytes[3]);
    3c6c:	1f 92       	push	r1
    3c6e:	8f 93       	push	r24
    3c70:	8b e9       	ldi	r24, 0x9B	; 155
    3c72:	94 e0       	ldi	r25, 0x04	; 4
    3c74:	9f 93       	push	r25
    3c76:	8f 93       	push	r24
    3c78:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3c7c:	8b 85       	ldd	r24, Y+11	; 0x0b
			printf("4 -> %x\n", _uplink_payload.bytes[4]);
    3c7e:	1f 92       	push	r1
    3c80:	8f 93       	push	r24
    3c82:	84 ea       	ldi	r24, 0xA4	; 164
    3c84:	94 e0       	ldi	r25, 0x04	; 4
    3c86:	9f 93       	push	r25
    3c88:	8f 93       	push	r24
    3c8a:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3c8e:	8c 85       	ldd	r24, Y+12	; 0x0c
			printf("5 -> %x\n", _uplink_payload.bytes[5]);
    3c90:	1f 92       	push	r1
    3c92:	8f 93       	push	r24
    3c94:	8d ea       	ldi	r24, 0xAD	; 173
    3c96:	94 e0       	ldi	r25, 0x04	; 4
    3c98:	9f 93       	push	r25
    3c9a:	8f 93       	push	r24
    3c9c:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3ca0:	be 01       	movw	r22, r28
    3ca2:	6b 5f       	subi	r22, 0xFB	; 251
    3ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	f6 d3       	rcall	.+2028   	; 0x4496 <lora_driver_sendUploadMessage>
    3caa:	e2 d5       	rcall	.+3012   	; 0x4870 <lora_driver_mapReturnCodeToText>
    3cac:	9f 93       	push	r25
    3cae:	8f 93       	push	r24
    3cb0:	86 eb       	ldi	r24, 0xB6	; 182
    3cb2:	94 e0       	ldi	r25, 0x04	; 4
    3cb4:	9f 93       	push	r25
    3cb6:	8f 93       	push	r24
    3cb8:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <printf>
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
    3cc6:	92 cf       	rjmp	.-220    	; 0x3bec <lora_uplink_handler_task+0x50>

00003cc8 <lora_uplink_handler_create>:
    3cc8:	ef 92       	push	r14
    3cca:	ff 92       	push	r15
		}
	}
 }

 void lora_uplink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3ccc:	0f 93       	push	r16
	 xTaskCreate(
    3cce:	e1 2c       	mov	r14, r1
    3cd0:	f1 2c       	mov	r15, r1
    3cd2:	08 2f       	mov	r16, r24
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 ec       	ldi	r20, 0xC0	; 192
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	6b ec       	ldi	r22, 0xCB	; 203
    3cde:	74 e0       	ldi	r23, 0x04	; 4
    3ce0:	8e ec       	ldi	r24, 0xCE	; 206
    3ce2:	9d e1       	ldi	r25, 0x1D	; 29
    3ce4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskCreate>
	 "LRHandUplink"  // A name just for humans
	, configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	, NULL
	, tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );
 }
    3ce8:	0f 91       	pop	r16
    3cea:	ff 90       	pop	r15
    3cec:	ef 90       	pop	r14
    3cee:	08 95       	ret

00003cf0 <sensorDataPackageHandler_setPackage_lenght>:
    3cf0:	80 93 e7 14 	sts	0x14E7, r24	; 0x8014e7 <package_lenght>
    3cf4:	08 95       	ret

00003cf6 <sensorDataPackageHandler_setCO2_value>:
    3cf6:	90 93 e6 14 	sts	0x14E6, r25	; 0x8014e6 <co2_value+0x1>
    3cfa:	80 93 e5 14 	sts	0x14E5, r24	; 0x8014e5 <co2_value>
    3cfe:	08 95       	ret

00003d00 <sensorDataPackageHandler_setTemp_value>:
    3d00:	90 93 e1 14 	sts	0x14E1, r25	; 0x8014e1 <temp_value+0x1>
    3d04:	80 93 e0 14 	sts	0x14E0, r24	; 0x8014e0 <temp_value>
    3d08:	08 95       	ret

00003d0a <sensorDataPackageHandler_setHumidity_value>:
    3d0a:	90 93 e4 14 	sts	0x14E4, r25	; 0x8014e4 <hum_value+0x1>
    3d0e:	80 93 e3 14 	sts	0x14E3, r24	; 0x8014e3 <hum_value>
    3d12:	08 95       	ret

00003d14 <sensorDataPackageHandler_getLoRaPayload>:
    3d14:	1f 93       	push	r17
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	ec 01       	movw	r28, r24
    3d1c:	16 2f       	mov	r17, r22
    3d1e:	86 e1       	ldi	r24, 0x16	; 22
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	0e 94 f5 03 	call	0x7ea	; 0x7ea <pvPortMalloc>
    3d26:	fc 01       	movw	r30, r24
    3d28:	89 2b       	or	r24, r25
    3d2a:	b1 f0       	breq	.+44     	; 0x3d58 <sensorDataPackageHandler_getLoRaPayload+0x44>
    3d2c:	10 83       	st	Z, r17
    3d2e:	80 91 e7 14 	lds	r24, 0x14E7	; 0x8014e7 <package_lenght>
    3d32:	81 83       	std	Z+1, r24	; 0x01
    3d34:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <co2_value>
    3d38:	90 91 e6 14 	lds	r25, 0x14E6	; 0x8014e6 <co2_value+0x1>
    3d3c:	92 83       	std	Z+2, r25	; 0x02
    3d3e:	83 83       	std	Z+3, r24	; 0x03
    3d40:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <hum_value>
    3d44:	90 91 e4 14 	lds	r25, 0x14E4	; 0x8014e4 <hum_value+0x1>
    3d48:	94 83       	std	Z+4, r25	; 0x04
    3d4a:	85 83       	std	Z+5, r24	; 0x05
    3d4c:	80 91 e0 14 	lds	r24, 0x14E0	; 0x8014e0 <temp_value>
    3d50:	90 91 e1 14 	lds	r25, 0x14E1	; 0x8014e1 <temp_value+0x1>
    3d54:	96 83       	std	Z+6, r25	; 0x06
    3d56:	87 83       	std	Z+7, r24	; 0x07
    3d58:	86 e1       	ldi	r24, 0x16	; 22
    3d5a:	de 01       	movw	r26, r28
    3d5c:	01 90       	ld	r0, Z+
    3d5e:	0d 92       	st	X+, r0
    3d60:	8a 95       	dec	r24
    3d62:	e1 f7       	brne	.-8      	; 0x3d5c <sensorDataPackageHandler_getLoRaPayload+0x48>
    3d64:	ce 01       	movw	r24, r28
    3d66:	df 91       	pop	r29
    3d68:	cf 91       	pop	r28
    3d6a:	1f 91       	pop	r17
    3d6c:	08 95       	ret

00003d6e <initializeTempAndHumiditySemaphore>:
  EventGroupHandle_t dataEventGroup;
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
    3d6e:	0f 93       	push	r16
	tempHumSemaphore = xSemaphoreCreateBinary();
    3d70:	43 e0       	ldi	r20, 0x03	; 3
    3d72:	60 e0       	ldi	r22, 0x00	; 0
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	0e 94 9e 07 	call	0xf3c	; 0xf3c <xQueueGenericCreate>
    3d7a:	90 93 eb 14 	sts	0x14EB, r25	; 0x8014eb <tempHumSemaphore+0x1>
    3d7e:	80 93 ea 14 	sts	0x14EA, r24	; 0x8014ea <tempHumSemaphore>
	xSemaphoreGive(tempHumSemaphore);
    3d82:	00 e0       	ldi	r16, 0x00	; 0
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	a9 01       	movw	r20, r18
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	0e 94 c1 07 	call	0xf82	; 0xf82 <xQueueGenericSend>
}
    3d92:	0f 91       	pop	r16
    3d94:	08 95       	ret

00003d96 <initializeQueue>:

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	62 e0       	ldi	r22, 0x02	; 2
    3d9a:	83 e0       	ldi	r24, 0x03	; 3
    3d9c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <xQueueGenericCreate>
    3da0:	90 93 e9 14 	sts	0x14E9, r25	; 0x8014e9 <sensorDataQueue+0x1>
    3da4:	80 93 e8 14 	sts	0x14E8, r24	; 0x8014e8 <sensorDataQueue>
    3da8:	08 95       	ret

00003daa <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    3daa:	0e 94 41 02 	call	0x482	; 0x482 <xEventGroupCreate>
    3dae:	90 93 ef 14 	sts	0x14EF, r25	; 0x8014ef <dataEventGroup+0x1>
    3db2:	80 93 ee 14 	sts	0x14EE, r24	; 0x8014ee <dataEventGroup>
    3db6:	08 95       	ret

00003db8 <initializeUplinkMessageBuffer>:
}

void initializeUplinkMessageBuffer()
{
	uplinkMessageBuffer = xMessageBufferCreate(100);
    3db8:	41 e0       	ldi	r20, 0x01	; 1
    3dba:	60 e0       	ldi	r22, 0x00	; 0
    3dbc:	70 e0       	ldi	r23, 0x00	; 0
    3dbe:	84 e6       	ldi	r24, 0x64	; 100
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	0e 94 2d 0b 	call	0x165a	; 0x165a <xStreamBufferGenericCreate>
    3dc6:	90 93 f1 14 	sts	0x14F1, r25	; 0x8014f1 <uplinkMessageBuffer+0x1>
    3dca:	80 93 f0 14 	sts	0x14F0, r24	; 0x8014f0 <uplinkMessageBuffer>
    3dce:	08 95       	ret

00003dd0 <initializeDownlinkMessageBuffer>:
}

void initializeDownlinkMessageBuffer()
{
	downlinkMessageBuffer = xMessageBufferCreate(100);
    3dd0:	41 e0       	ldi	r20, 0x01	; 1
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	70 e0       	ldi	r23, 0x00	; 0
    3dd6:	84 e6       	ldi	r24, 0x64	; 100
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 2d 0b 	call	0x165a	; 0x165a <xStreamBufferGenericCreate>
    3dde:	90 93 ed 14 	sts	0x14ED, r25	; 0x8014ed <downlinkMessageBuffer+0x1>
    3de2:	80 93 ec 14 	sts	0x14EC, r24	; 0x8014ec <downlinkMessageBuffer>
    3de6:	08 95       	ret

00003de8 <initializeTempAndHumDriver>:
    3de8:	d5 d0       	rcall	.+426    	; 0x3f94 <hih8120_initialise>
    3dea:	81 11       	cpse	r24, r1
    3dec:	05 c0       	rjmp	.+10     	; 0x3df8 <initializeTempAndHumDriver+0x10>
    3dee:	88 ed       	ldi	r24, 0xD8	; 216
    3df0:	94 e0       	ldi	r25, 0x04	; 4
    3df2:	0c 94 f1 2f 	jmp	0x5fe2	; 0x5fe2 <puts>
    3df6:	08 95       	ret
    3df8:	8b ef       	ldi	r24, 0xFB	; 251
    3dfa:	94 e0       	ldi	r25, 0x04	; 4
    3dfc:	0c 94 f1 2f 	jmp	0x5fe2	; 0x5fe2 <puts>
    3e00:	08 95       	ret

00003e02 <measureTempAndHum>:
    3e02:	e0 d0       	rcall	.+448    	; 0x3fc4 <hih8120_wakeup>
    3e04:	88 23       	and	r24, r24
    3e06:	21 f0       	breq	.+8      	; 0x3e10 <measureTempAndHum+0xe>
    3e08:	85 e1       	ldi	r24, 0x15	; 21
    3e0a:	95 e0       	ldi	r25, 0x05	; 5
    3e0c:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <puts>
    3e10:	63 e0       	ldi	r22, 0x03	; 3
    3e12:	70 e0       	ldi	r23, 0x00	; 0
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	0e 94 38 12 	call	0x2470	; 0x2470 <vTaskDelay>
    3e1c:	e8 d0       	rcall	.+464    	; 0x3fee <hih8120_measure>
    3e1e:	88 23       	and	r24, r24
    3e20:	21 f0       	breq	.+8      	; 0x3e2a <measureTempAndHum+0x28>
    3e22:	85 e3       	ldi	r24, 0x35	; 53
    3e24:	95 e0       	ldi	r25, 0x05	; 5
    3e26:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <puts>
    3e2a:	61 e0       	ldi	r22, 0x01	; 1
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0c 94 38 12 	jmp	0x2470	; 0x2470 <vTaskDelay>
    3e36:	08 95       	ret

00003e38 <TempAndHumTask>:
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <TempAndHumTask+0x6>
    3e3e:	1f 92       	push	r1
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	1c 82       	std	Y+4, r1	; 0x04
    3e46:	1b 82       	std	Y+3, r1	; 0x03
    3e48:	1a 82       	std	Y+2, r1	; 0x02
    3e4a:	19 82       	std	Y+1, r1	; 0x01
    3e4c:	4f ef       	ldi	r20, 0xFF	; 255
    3e4e:	5f ef       	ldi	r21, 0xFF	; 255
    3e50:	ba 01       	movw	r22, r20
    3e52:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <tempHumSemaphore>
    3e56:	90 91 eb 14 	lds	r25, 0x14EB	; 0x8014eb <tempHumSemaphore+0x1>
    3e5a:	0e 94 1d 09 	call	0x123a	; 0x123a <xQueueSemaphoreTake>
    3e5e:	81 30       	cpi	r24, 0x01	; 1
    3e60:	51 f5       	brne	.+84     	; 0x3eb6 <TempAndHumTask+0x7e>
    3e62:	cf df       	rcall	.-98     	; 0x3e02 <measureTempAndHum>
    3e64:	10 d1       	rcall	.+544    	; 0x4086 <hih8120_getTemperature_x10>
    3e66:	9c 83       	std	Y+4, r25	; 0x04
    3e68:	8b 83       	std	Y+3, r24	; 0x03
    3e6a:	e7 d0       	rcall	.+462    	; 0x403a <hih8120_getHumidityPercent_x10>
    3e6c:	9a 83       	std	Y+2, r25	; 0x02
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    3e70:	00 e0       	ldi	r16, 0x00	; 0
    3e72:	2f ef       	ldi	r18, 0xFF	; 255
    3e74:	3f ef       	ldi	r19, 0xFF	; 255
    3e76:	a9 01       	movw	r20, r18
    3e78:	be 01       	movw	r22, r28
    3e7a:	6d 5f       	subi	r22, 0xFD	; 253
    3e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7e:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <sensorDataQueue>
    3e82:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <sensorDataQueue+0x1>
    3e86:	0e 94 c1 07 	call	0xf82	; 0xf82 <xQueueGenericSend>
    3e8a:	2f ef       	ldi	r18, 0xFF	; 255
    3e8c:	3f ef       	ldi	r19, 0xFF	; 255
    3e8e:	a9 01       	movw	r20, r18
    3e90:	be 01       	movw	r22, r28
    3e92:	6f 5f       	subi	r22, 0xFF	; 255
    3e94:	7f 4f       	sbci	r23, 0xFF	; 255
    3e96:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <sensorDataQueue>
    3e9a:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <sensorDataQueue+0x1>
    3e9e:	0e 94 c1 07 	call	0xf82	; 0xf82 <xQueueGenericSend>
    3ea2:	42 e0       	ldi	r20, 0x02	; 2
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	60 e0       	ldi	r22, 0x00	; 0
    3ea8:	70 e0       	ldi	r23, 0x00	; 0
    3eaa:	80 91 ee 14 	lds	r24, 0x14EE	; 0x8014ee <dataEventGroup>
    3eae:	90 91 ef 14 	lds	r25, 0x14EF	; 0x8014ef <dataEventGroup+0x1>
    3eb2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <xEventGroupSetBits>
    3eb6:	6a e0       	ldi	r22, 0x0A	; 10
    3eb8:	70 e0       	ldi	r23, 0x00	; 0
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	0e 94 38 12 	call	0x2470	; 0x2470 <vTaskDelay>
    3ec2:	c0 cf       	rjmp	.-128    	; 0x3e44 <TempAndHumTask+0xc>

00003ec4 <createTempAndHumTask>:
    3ec4:	ef 92       	push	r14
    3ec6:	ff 92       	push	r15
    3ec8:	0f 93       	push	r16
    3eca:	8e df       	rcall	.-228    	; 0x3de8 <initializeTempAndHumDriver>
    3ecc:	e1 2c       	mov	r14, r1
    3ece:	f1 2c       	mov	r15, r1
    3ed0:	01 e0       	ldi	r16, 0x01	; 1
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	40 ec       	ldi	r20, 0xC0	; 192
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	6a e5       	ldi	r22, 0x5A	; 90
    3edc:	75 e0       	ldi	r23, 0x05	; 5
    3ede:	8c e1       	ldi	r24, 0x1C	; 28
    3ee0:	9f e1       	ldi	r25, 0x1F	; 31
    3ee2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <xTaskCreate>
    3ee6:	0f 91       	pop	r16
    3ee8:	ff 90       	pop	r15
    3eea:	ef 90       	pop	r14
    3eec:	08 95       	ret

00003eee <initializeUsedData>:
#include <status_leds.h>


void initializeUsedData()
{
	initializeEventGroup();
    3eee:	5d df       	rcall	.-326    	; 0x3daa <initializeEventGroup>
	initializeQueue();
    3ef0:	52 df       	rcall	.-348    	; 0x3d96 <initializeQueue>
	initializeTempAndHumiditySemaphore();
    3ef2:	3d df       	rcall	.-390    	; 0x3d6e <initializeTempAndHumiditySemaphore>
	initializeUplinkMessageBuffer();
    3ef4:	61 df       	rcall	.-318    	; 0x3db8 <initializeUplinkMessageBuffer>
    3ef6:	6c df       	rcall	.-296    	; 0x3dd0 <initializeDownlinkMessageBuffer>
	initializeDownlinkMessageBuffer();
    3ef8:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <initializeConfiguration>
	initializeConfiguration();
    3efc:	08 95       	ret

00003efe <create_tasks>:
    3efe:	e2 df       	rcall	.-60     	; 0x3ec4 <createTempAndHumTask>
    3f00:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <createCO2Task>
/*-----------------------------------------------------------*/
void create_tasks(void)
{		
		createTempAndHumTask();
		createCO2Task();
		createApplicationTask();	
    3f04:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <createApplicationTask>
    3f08:	08 95       	ret

00003f0a <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	0e 94 24 29 	call	0x5248	; 0x5248 <stdio_initialise>
	initializeUsedData();
    3f10:	ee df       	rcall	.-36     	; 0x3eee <initializeUsedData>
	create_tasks();
    3f12:	f5 df       	rcall	.-22     	; 0x3efe <create_tasks>
    3f14:	60 91 ec 14 	lds	r22, 0x14EC	; 0x8014ec <downlinkMessageBuffer>

	lora_driver_initialise(1, downlinkMessageBuffer);
    3f18:	70 91 ed 14 	lds	r23, 0x14ED	; 0x8014ed <downlinkMessageBuffer+0x1>
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	dd d1       	rcall	.+954    	; 0x42da <lora_driver_initialise>
	lora_uplink_handler_create(2);
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	d2 de       	rcall	.-604    	; 0x3cc8 <lora_uplink_handler_create>
	lora_downlink_handler_create(3);
    3f24:	83 e0       	ldi	r24, 0x03	; 3
    3f26:	6e cd       	rjmp	.-1316   	; 0x3a04 <lora_downlink_handler_create>
    3f28:	08 95       	ret

00003f2a <main>:
    3f2a:	ef df       	rcall	.-34     	; 0x3f0a <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Stttttarted!!\n");
    3f2c:	89 e6       	ldi	r24, 0x69	; 105
    3f2e:	95 e0       	ldi	r25, 0x05	; 5
    3f30:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3f34:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <vTaskStartScheduler>
    3f38:	ff cf       	rjmp	.-2      	; 0x3f38 <main+0xe>

00003f3a <_hihTwiCallback>:
    3f3a:	65 30       	cpi	r22, 0x05	; 5
    3f3c:	f1 f4       	brne	.+60     	; 0x3f7a <_hihTwiCallback+0x40>
    3f3e:	fa 01       	movw	r30, r20
    3f40:	80 81       	ld	r24, Z
    3f42:	8f 73       	andi	r24, 0x3F	; 63
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	98 2f       	mov	r25, r24
    3f48:	88 27       	eor	r24, r24
    3f4a:	21 81       	ldd	r18, Z+1	; 0x01
    3f4c:	82 2b       	or	r24, r18
    3f4e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3f52:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	f0 e4       	ldi	r31, 0x40	; 64
    3f5a:	8f 9f       	mul	r24, r31
    3f5c:	c0 01       	movw	r24, r0
    3f5e:	11 24       	eor	r1, r1
    3f60:	fa 01       	movw	r30, r20
    3f62:	23 81       	ldd	r18, Z+3	; 0x03
    3f64:	26 95       	lsr	r18
    3f66:	26 95       	lsr	r18
    3f68:	82 2b       	or	r24, r18
    3f6a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3f6e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	80 93 7d 13 	sts	0x137D, r24	; 0x80137d <_measuringIsReady>
    3f78:	08 95       	ret
    3f7a:	64 30       	cpi	r22, 0x04	; 4
    3f7c:	51 f0       	breq	.+20     	; 0x3f92 <_hihTwiCallback+0x58>
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	90 e4       	ldi	r25, 0x40	; 64
    3f82:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3f86:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3f8a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3f8e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3f92:	08 95       	ret

00003f94 <hih8120_initialise>:
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	0d e9       	ldi	r16, 0x9D	; 157
    3f9a:	1f e1       	ldi	r17, 0x1F	; 31
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	34 e2       	ldi	r19, 0x24	; 36
    3fa0:	44 ef       	ldi	r20, 0xF4	; 244
    3fa2:	50 e0       	ldi	r21, 0x00	; 0
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	87 e2       	ldi	r24, 0x27	; 39
    3fa8:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <twiCreate>
    3fac:	90 93 7f 13 	sts	0x137F, r25	; 0x80137f <_hih8120Handler+0x1>
    3fb0:	80 93 7e 13 	sts	0x137E, r24	; 0x80137e <_hih8120Handler>
    3fb4:	21 e0       	ldi	r18, 0x01	; 1
    3fb6:	89 2b       	or	r24, r25
    3fb8:	09 f0       	breq	.+2      	; 0x3fbc <hih8120_initialise+0x28>
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	82 2f       	mov	r24, r18
    3fbe:	1f 91       	pop	r17
    3fc0:	0f 91       	pop	r16
    3fc2:	08 95       	ret

00003fc4 <hih8120_wakeup>:
    3fc4:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_hih8120Handler>
    3fc8:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_hih8120Handler+0x1>
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	59 f0       	breq	.+22     	; 0x3fe6 <hih8120_wakeup+0x22>
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	60 e0       	ldi	r22, 0x00	; 0
    3fd4:	70 e0       	ldi	r23, 0x00	; 0
    3fd6:	0e 94 cf 2a 	call	0x559e	; 0x559e <twiTransmit>
    3fda:	84 30       	cpi	r24, 0x04	; 4
    3fdc:	31 f4       	brne	.+12     	; 0x3fea <hih8120_wakeup+0x26>
    3fde:	10 92 7d 13 	sts	0x137D, r1	; 0x80137d <_measuringIsReady>
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	08 95       	ret
    3fe6:	82 e0       	ldi	r24, 0x02	; 2
    3fe8:	08 95       	ret
    3fea:	83 e0       	ldi	r24, 0x03	; 3
    3fec:	08 95       	ret

00003fee <hih8120_measure>:
    3fee:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_hih8120Handler>
    3ff2:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_hih8120Handler+0x1>
    3ff6:	00 97       	sbiw	r24, 0x00	; 0
    3ff8:	39 f0       	breq	.+14     	; 0x4008 <hih8120_measure+0x1a>
    3ffa:	64 e0       	ldi	r22, 0x04	; 4
    3ffc:	0e 94 1b 2b 	call	0x5636	; 0x5636 <twiReceive>
    4000:	85 30       	cpi	r24, 0x05	; 5
    4002:	21 f0       	breq	.+8      	; 0x400c <hih8120_measure+0x1e>
    4004:	83 e0       	ldi	r24, 0x03	; 3
    4006:	08 95       	ret
    4008:	82 e0       	ldi	r24, 0x02	; 2
    400a:	08 95       	ret
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	08 95       	ret

00004010 <hih8120_getHumidity>:
    4010:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4014:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__floatunsisf>
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	48 ec       	ldi	r20, 0xC8	; 200
    4026:	52 e4       	ldi	r21, 0x42	; 66
    4028:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__mulsf3>
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	38 ef       	ldi	r19, 0xF8	; 248
    4030:	4f e7       	ldi	r20, 0x7F	; 127
    4032:	56 e4       	ldi	r21, 0x46	; 70
    4034:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__divsf3>
    4038:	08 95       	ret

0000403a <hih8120_getHumidityPercent_x10>:
    403a:	ea df       	rcall	.-44     	; 0x4010 <hih8120_getHumidity>
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	40 e2       	ldi	r20, 0x20	; 32
    4042:	51 e4       	ldi	r21, 0x41	; 65
    4044:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__mulsf3>
    4048:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <__fixunssfsi>
    404c:	cb 01       	movw	r24, r22
    404e:	08 95       	ret

00004050 <hih8120_getTemperature>:
    4050:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4054:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__floatunsisf>
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	45 e2       	ldi	r20, 0x25	; 37
    4066:	53 e4       	ldi	r21, 0x43	; 67
    4068:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__mulsf3>
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	38 ef       	ldi	r19, 0xF8	; 248
    4070:	4f e7       	ldi	r20, 0x7F	; 127
    4072:	56 e4       	ldi	r21, 0x46	; 70
    4074:	0e 94 8c 2c 	call	0x5918	; 0x5918 <__divsf3>
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 e2       	ldi	r20, 0x20	; 32
    407e:	52 e4       	ldi	r21, 0x42	; 66
    4080:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__subsf3>
    4084:	08 95       	ret

00004086 <hih8120_getTemperature_x10>:
    4086:	e4 df       	rcall	.-56     	; 0x4050 <hih8120_getTemperature>
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	40 e2       	ldi	r20, 0x20	; 32
    408e:	51 e4       	ldi	r21, 0x41	; 65
    4090:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__mulsf3>
    4094:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
    4098:	cb 01       	movw	r24, r22
    409a:	08 95       	ret

0000409c <_serialCallBack>:
    409c:	0f 93       	push	r16
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	1f 92       	push	r1
    40a6:	1f 92       	push	r1
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	8c 01       	movw	r16, r24
    40ae:	19 82       	std	Y+1, r1	; 0x01
    40b0:	2d c0       	rjmp	.+90     	; 0x410c <_serialCallBack+0x70>
    40b2:	e0 91 e4 13 	lds	r30, 0x13E4	; 0x8013e4 <rec_buf_inp.2878>
    40b6:	ec 32       	cpi	r30, 0x2C	; 44
    40b8:	50 f4       	brcc	.+20     	; 0x40ce <_serialCallBack+0x32>
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	8e 0f       	add	r24, r30
    40be:	80 93 e4 13 	sts	0x13E4, r24	; 0x8013e4 <rec_buf_inp.2878>
    40c2:	f0 e0       	ldi	r31, 0x00	; 0
    40c4:	ea 5e       	subi	r30, 0xEA	; 234
    40c6:	fb 4e       	sbci	r31, 0xEB	; 235
    40c8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ca:	80 83       	st	Z, r24
    40cc:	02 c0       	rjmp	.+4      	; 0x40d2 <_serialCallBack+0x36>
    40ce:	10 92 e4 13 	sts	0x13E4, r1	; 0x8013e4 <rec_buf_inp.2878>
    40d2:	8a 81       	ldd	r24, Y+2	; 0x02
    40d4:	8a 30       	cpi	r24, 0x0A	; 10
    40d6:	d1 f4       	brne	.+52     	; 0x410c <_serialCallBack+0x70>
    40d8:	40 91 e4 13 	lds	r20, 0x13E4	; 0x8013e4 <rec_buf_inp.2878>
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	fa 01       	movw	r30, r20
    40e0:	ec 5e       	subi	r30, 0xEC	; 236
    40e2:	fb 4e       	sbci	r31, 0xEB	; 235
    40e4:	10 82       	st	Z, r1
    40e6:	41 50       	subi	r20, 0x01	; 1
    40e8:	51 09       	sbc	r21, r1
    40ea:	9e 01       	movw	r18, r28
    40ec:	2f 5f       	subi	r18, 0xFF	; 255
    40ee:	3f 4f       	sbci	r19, 0xFF	; 255
    40f0:	66 e1       	ldi	r22, 0x16	; 22
    40f2:	74 e1       	ldi	r23, 0x14	; 20
    40f4:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    40f8:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    40fc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <xStreamBufferSendFromISR>
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	81 11       	cpse	r24, r1
    4104:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortYield>
    4108:	10 92 e4 13 	sts	0x13E4, r1	; 0x8013e4 <rec_buf_inp.2878>
    410c:	be 01       	movw	r22, r28
    410e:	6e 5f       	subi	r22, 0xFE	; 254
    4110:	7f 4f       	sbci	r23, 0xFF	; 255
    4112:	c8 01       	movw	r24, r16
    4114:	03 d6       	rcall	.+3078   	; 0x4d1c <serial_getByte>
    4116:	88 23       	and	r24, r24
    4118:	61 f2       	breq	.-104    	; 0x40b2 <_serialCallBack+0x16>
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	df 91       	pop	r29
    4120:	cf 91       	pop	r28
    4122:	1f 91       	pop	r17
    4124:	0f 91       	pop	r16
    4126:	08 95       	ret

00004128 <_uploadMessage>:
    4128:	0f 93       	push	r16
    412a:	1f 93       	push	r17
    412c:	cf 93       	push	r28
    412e:	df 93       	push	r29
    4130:	8c 01       	movw	r16, r24
    4132:	eb 01       	movw	r28, r22
    4134:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    4138:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    413c:	0e 94 5f 0b 	call	0x16be	; 0x16be <xStreamBufferReset>
    4140:	b8 01       	movw	r22, r16
    4142:	80 e8       	ldi	r24, 0x80	; 128
    4144:	93 e1       	ldi	r25, 0x13	; 19
    4146:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <strcpy>
    414a:	20 97       	sbiw	r28, 0x00	; 0
    414c:	79 f0       	breq	.+30     	; 0x416c <_uploadMessage+0x44>
    414e:	e0 e8       	ldi	r30, 0x80	; 128
    4150:	f3 e1       	ldi	r31, 0x13	; 19
    4152:	01 90       	ld	r0, Z+
    4154:	00 20       	and	r0, r0
    4156:	e9 f7       	brne	.-6      	; 0x4152 <_uploadMessage+0x2a>
    4158:	31 97       	sbiw	r30, 0x01	; 1
    415a:	80 e2       	ldi	r24, 0x20	; 32
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	91 83       	std	Z+1, r25	; 0x01
    4160:	80 83       	st	Z, r24
    4162:	be 01       	movw	r22, r28
    4164:	80 e8       	ldi	r24, 0x80	; 128
    4166:	93 e1       	ldi	r25, 0x13	; 19
    4168:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>
    416c:	e0 e8       	ldi	r30, 0x80	; 128
    416e:	f3 e1       	ldi	r31, 0x13	; 19
    4170:	df 01       	movw	r26, r30
    4172:	0d 90       	ld	r0, X+
    4174:	00 20       	and	r0, r0
    4176:	e9 f7       	brne	.-6      	; 0x4172 <_uploadMessage+0x4a>
    4178:	11 97       	sbiw	r26, 0x01	; 1
    417a:	8d e0       	ldi	r24, 0x0D	; 13
    417c:	9a e0       	ldi	r25, 0x0A	; 10
    417e:	11 96       	adiw	r26, 0x01	; 1
    4180:	9c 93       	st	X, r25
    4182:	8e 93       	st	-X, r24
    4184:	12 96       	adiw	r26, 0x02	; 2
    4186:	1c 92       	st	X, r1
    4188:	01 90       	ld	r0, Z+
    418a:	00 20       	and	r0, r0
    418c:	e9 f7       	brne	.-6      	; 0x4188 <_uploadMessage+0x60>
    418e:	31 97       	sbiw	r30, 0x01	; 1
    4190:	e0 58       	subi	r30, 0x80	; 128
    4192:	f3 41       	sbci	r31, 0x13	; 19
    4194:	ae 2f       	mov	r26, r30
    4196:	80 e8       	ldi	r24, 0x80	; 128
    4198:	93 e1       	ldi	r25, 0x13	; 19
    419a:	ac 01       	movw	r20, r24
    419c:	6a 2f       	mov	r22, r26
    419e:	80 91 e9 13 	lds	r24, 0x13E9	; 0x8013e9 <_rn2483_serial>
    41a2:	90 91 ea 13 	lds	r25, 0x13EA	; 0x8013ea <_rn2483_serial+0x1>
    41a6:	65 d5       	rcall	.+2762   	; 0x4c72 <serial_sendBytes>
    41a8:	81 11       	cpse	r24, r1
    41aa:	11 c0       	rjmp	.+34     	; 0x41ce <_uploadMessage+0xa6>
    41ac:	08 e2       	ldi	r16, 0x28	; 40
    41ae:	15 e0       	ldi	r17, 0x05	; 5
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	4d e2       	ldi	r20, 0x2D	; 45
    41b6:	50 e0       	ldi	r21, 0x00	; 0
    41b8:	60 e7       	ldi	r22, 0x70	; 112
    41ba:	74 e1       	ldi	r23, 0x14	; 20
    41bc:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    41c0:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    41c4:	0e 94 98 0c 	call	0x1930	; 0x1930 <xStreamBufferReceive>
    41c8:	80 e7       	ldi	r24, 0x70	; 112
    41ca:	94 e1       	ldi	r25, 0x14	; 20
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <_uploadMessage+0xaa>
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	df 91       	pop	r29
    41d4:	cf 91       	pop	r28
    41d6:	1f 91       	pop	r17
    41d8:	0f 91       	pop	r16
    41da:	08 95       	ret

000041dc <_reply2ReturnCode>:
    41dc:	2f 92       	push	r2
    41de:	3f 92       	push	r3
    41e0:	4f 92       	push	r4
    41e2:	5f 92       	push	r5
    41e4:	6f 92       	push	r6
    41e6:	7f 92       	push	r7
    41e8:	8f 92       	push	r8
    41ea:	9f 92       	push	r9
    41ec:	af 92       	push	r10
    41ee:	bf 92       	push	r11
    41f0:	cf 92       	push	r12
    41f2:	df 92       	push	r13
    41f4:	ef 92       	push	r14
    41f6:	ff 92       	push	r15
    41f8:	0f 93       	push	r16
    41fa:	1f 93       	push	r17
    41fc:	cf 93       	push	r28
    41fe:	df 93       	push	r29
    4200:	5c 01       	movw	r10, r24
    4202:	fc 01       	movw	r30, r24
    4204:	01 90       	ld	r0, Z+
    4206:	00 20       	and	r0, r0
    4208:	e9 f7       	brne	.-6      	; 0x4204 <_reply2ReturnCode+0x28>
    420a:	31 97       	sbiw	r30, 0x01	; 1
    420c:	6f 01       	movw	r12, r30
    420e:	c8 1a       	sub	r12, r24
    4210:	d9 0a       	sbc	r13, r25
    4212:	5c 2c       	mov	r5, r12
    4214:	0f 2e       	mov	r0, r31
    4216:	f8 e1       	ldi	r31, 0x18	; 24
    4218:	8f 2e       	mov	r8, r31
    421a:	f8 e0       	ldi	r31, 0x08	; 8
    421c:	9f 2e       	mov	r9, r31
    421e:	f0 2d       	mov	r31, r0
    4220:	e1 2c       	mov	r14, r1
    4222:	f1 2c       	mov	r15, r1
    4224:	4c 2c       	mov	r4, r12
    4226:	37 01       	movw	r6, r14
    4228:	f4 01       	movw	r30, r8
    422a:	01 81       	ldd	r16, Z+1	; 0x01
    422c:	12 81       	ldd	r17, Z+2	; 0x02
    422e:	e8 01       	movw	r28, r16
    4230:	09 90       	ld	r0, Y+
    4232:	00 20       	and	r0, r0
    4234:	e9 f7       	brne	.-6      	; 0x4230 <_reply2ReturnCode+0x54>
    4236:	21 97       	sbiw	r28, 0x01	; 1
    4238:	c0 1b       	sub	r28, r16
    423a:	d1 0b       	sbc	r29, r17
    423c:	3c 2e       	mov	r3, r28
    423e:	f9 e0       	ldi	r31, 0x09	; 9
    4240:	cf 16       	cp	r12, r31
    4242:	d1 04       	cpc	r13, r1
    4244:	58 f0       	brcs	.+22     	; 0x425c <_reply2ReturnCode+0x80>
    4246:	f4 01       	movw	r30, r8
    4248:	20 80       	ld	r2, Z
    424a:	fe e0       	ldi	r31, 0x0E	; 14
    424c:	2f 12       	cpse	r2, r31
    424e:	06 c0       	rjmp	.+12     	; 0x425c <_reply2ReturnCode+0x80>
    4250:	b8 01       	movw	r22, r16
    4252:	c5 01       	movw	r24, r10
    4254:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <strcasestr>
    4258:	89 2b       	or	r24, r25
    425a:	09 f5       	brne	.+66     	; 0x429e <_reply2ReturnCode+0xc2>
    425c:	44 2d       	mov	r20, r4
    425e:	35 14       	cp	r3, r5
    4260:	08 f4       	brcc	.+2      	; 0x4264 <_reply2ReturnCode+0x88>
    4262:	4c 2f       	mov	r20, r28
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	b8 01       	movw	r22, r16
    4268:	c5 01       	movw	r24, r10
    426a:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <strncasecmp>
    426e:	89 2b       	or	r24, r25
    4270:	49 f4       	brne	.+18     	; 0x4284 <_reply2ReturnCode+0xa8>
    4272:	f3 01       	movw	r30, r6
    4274:	ee 0f       	add	r30, r30
    4276:	ff 1f       	adc	r31, r31
    4278:	e6 0d       	add	r30, r6
    427a:	f7 1d       	adc	r31, r7
    427c:	e8 5e       	subi	r30, 0xE8	; 232
    427e:	f7 4f       	sbci	r31, 0xF7	; 247
    4280:	20 80       	ld	r2, Z
    4282:	0d c0       	rjmp	.+26     	; 0x429e <_reply2ReturnCode+0xc2>
    4284:	8f ef       	ldi	r24, 0xFF	; 255
    4286:	e8 1a       	sub	r14, r24
    4288:	f8 0a       	sbc	r15, r24
    428a:	e3 e0       	ldi	r30, 0x03	; 3
    428c:	8e 0e       	add	r8, r30
    428e:	91 1c       	adc	r9, r1
    4290:	f1 e1       	ldi	r31, 0x11	; 17
    4292:	ef 16       	cp	r14, r31
    4294:	f1 04       	cpc	r15, r1
    4296:	39 f6       	brne	.-114    	; 0x4226 <_reply2ReturnCode+0x4a>
    4298:	68 94       	set
    429a:	22 24       	eor	r2, r2
    429c:	24 f8       	bld	r2, 4
    429e:	82 2d       	mov	r24, r2
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	1f 91       	pop	r17
    42a6:	0f 91       	pop	r16
    42a8:	ff 90       	pop	r15
    42aa:	ef 90       	pop	r14
    42ac:	df 90       	pop	r13
    42ae:	cf 90       	pop	r12
    42b0:	bf 90       	pop	r11
    42b2:	af 90       	pop	r10
    42b4:	9f 90       	pop	r9
    42b6:	8f 90       	pop	r8
    42b8:	7f 90       	pop	r7
    42ba:	6f 90       	pop	r6
    42bc:	5f 90       	pop	r5
    42be:	4f 90       	pop	r4
    42c0:	3f 90       	pop	r3
    42c2:	2f 90       	pop	r2
    42c4:	08 95       	ret

000042c6 <_uploadMessageRc>:
    42c6:	30 df       	rcall	.-416    	; 0x4128 <_uploadMessage>
    42c8:	89 cf       	rjmp	.-238    	; 0x41dc <_reply2ReturnCode>
    42ca:	08 95       	ret

000042cc <lora_driver_flushBuffers>:
    42cc:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    42d0:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    42d4:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <xStreamBufferReset>
    42d8:	08 95       	ret

000042da <lora_driver_initialise>:
    42da:	8f 92       	push	r8
    42dc:	9f 92       	push	r9
    42de:	af 92       	push	r10
    42e0:	cf 92       	push	r12
    42e2:	ef 92       	push	r14
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	cf 93       	push	r28
    42ea:	c8 2f       	mov	r28, r24
    42ec:	8b 01       	movw	r16, r22
    42ee:	41 e0       	ldi	r20, 0x01	; 1
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	88 ec       	ldi	r24, 0xC8	; 200
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	0e 94 2d 0b 	call	0x165a	; 0x165a <xStreamBufferGenericCreate>
    42fc:	90 93 e8 13 	sts	0x13E8, r25	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    4300:	80 93 e7 13 	sts	0x13E7, r24	; 0x8013e7 <_serialReplyBufferHandle>
    4304:	10 93 e6 13 	sts	0x13E6, r17	; 0x8013e6 <_downlinkMessageBuffer+0x1>
    4308:	00 93 e5 13 	sts	0x13E5, r16	; 0x8013e5 <_downlinkMessageBuffer>
    430c:	0f 2e       	mov	r0, r31
    430e:	fe e4       	ldi	r31, 0x4E	; 78
    4310:	8f 2e       	mov	r8, r31
    4312:	f0 e2       	ldi	r31, 0x20	; 32
    4314:	9f 2e       	mov	r9, r31
    4316:	f0 2d       	mov	r31, r0
    4318:	68 94       	set
    431a:	aa 24       	eor	r10, r10
    431c:	a6 f8       	bld	r10, 6
    431e:	68 94       	set
    4320:	cc 24       	eor	r12, r12
    4322:	c6 f8       	bld	r12, 6
    4324:	e1 2c       	mov	r14, r1
    4326:	00 e0       	ldi	r16, 0x00	; 0
    4328:	23 e0       	ldi	r18, 0x03	; 3
    432a:	40 e0       	ldi	r20, 0x00	; 0
    432c:	51 ee       	ldi	r21, 0xE1	; 225
    432e:	60 e0       	ldi	r22, 0x00	; 0
    4330:	70 e0       	ldi	r23, 0x00	; 0
    4332:	8c 2f       	mov	r24, r28
    4334:	d2 d3       	rcall	.+1956   	; 0x4ada <serial_create>
    4336:	90 93 ea 13 	sts	0x13EA, r25	; 0x8013ea <_rn2483_serial+0x1>
    433a:	80 93 e9 13 	sts	0x13E9, r24	; 0x8013e9 <_rn2483_serial>
    433e:	e7 e0       	ldi	r30, 0x07	; 7
    4340:	f1 e0       	ldi	r31, 0x01	; 1
    4342:	80 81       	ld	r24, Z
    4344:	80 61       	ori	r24, 0x10	; 16
    4346:	80 83       	st	Z, r24
    4348:	cf 91       	pop	r28
    434a:	1f 91       	pop	r17
    434c:	0f 91       	pop	r16
    434e:	ef 90       	pop	r14
    4350:	cf 90       	pop	r12
    4352:	af 90       	pop	r10
    4354:	9f 90       	pop	r9
    4356:	8f 90       	pop	r8
    4358:	08 95       	ret

0000435a <lora_driver_resetRn2483>:
    435a:	88 23       	and	r24, r24
    435c:	31 f0       	breq	.+12     	; 0x436a <lora_driver_resetRn2483+0x10>
    435e:	e8 e0       	ldi	r30, 0x08	; 8
    4360:	f1 e0       	ldi	r31, 0x01	; 1
    4362:	80 81       	ld	r24, Z
    4364:	8f 7e       	andi	r24, 0xEF	; 239
    4366:	80 83       	st	Z, r24
    4368:	08 95       	ret
    436a:	e8 e0       	ldi	r30, 0x08	; 8
    436c:	f1 e0       	ldi	r31, 0x01	; 1
    436e:	80 81       	ld	r24, Z
    4370:	80 61       	ori	r24, 0x10	; 16
    4372:	80 83       	st	Z, r24
    4374:	08 95       	ret

00004376 <lora_driver_rn2483FactoryReset>:
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	70 e0       	ldi	r23, 0x00	; 0
    437a:	8e e9       	ldi	r24, 0x9E	; 158
    437c:	95 e0       	ldi	r25, 0x05	; 5
    437e:	d4 de       	rcall	.-600    	; 0x4128 <_uploadMessage>
    4380:	e0 e7       	ldi	r30, 0x70	; 112
    4382:	f4 e1       	ldi	r31, 0x14	; 20
    4384:	01 90       	ld	r0, Z+
    4386:	00 20       	and	r0, r0
    4388:	e9 f7       	brne	.-6      	; 0x4384 <lora_driver_rn2483FactoryReset+0xe>
    438a:	31 97       	sbiw	r30, 0x01	; 1
    438c:	e0 57       	subi	r30, 0x70	; 112
    438e:	f4 41       	sbci	r31, 0x14	; 20
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	75 97       	sbiw	r30, 0x15	; 21
    4394:	08 f0       	brcs	.+2      	; 0x4398 <lora_driver_rn2483FactoryReset+0x22>
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	08 95       	ret

0000439a <lora_driver_getRn2483Hweui>:
    439a:	cf 93       	push	r28
    439c:	df 93       	push	r29
    439e:	ec 01       	movw	r28, r24
    43a0:	60 e0       	ldi	r22, 0x00	; 0
    43a2:	70 e0       	ldi	r23, 0x00	; 0
    43a4:	8f ea       	ldi	r24, 0xAF	; 175
    43a6:	95 e0       	ldi	r25, 0x05	; 5
    43a8:	bf de       	rcall	.-642    	; 0x4128 <_uploadMessage>
    43aa:	e0 e7       	ldi	r30, 0x70	; 112
    43ac:	f4 e1       	ldi	r31, 0x14	; 20
    43ae:	01 90       	ld	r0, Z+
    43b0:	00 20       	and	r0, r0
    43b2:	e9 f7       	brne	.-6      	; 0x43ae <lora_driver_getRn2483Hweui+0x14>
    43b4:	e1 58       	subi	r30, 0x81	; 129
    43b6:	f4 41       	sbci	r31, 0x14	; 20
    43b8:	39 f4       	brne	.+14     	; 0x43c8 <lora_driver_getRn2483Hweui+0x2e>
    43ba:	60 e7       	ldi	r22, 0x70	; 112
    43bc:	74 e1       	ldi	r23, 0x14	; 20
    43be:	ce 01       	movw	r24, r28
    43c0:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <strcpy>
    43c4:	80 e0       	ldi	r24, 0x00	; 0
    43c6:	02 c0       	rjmp	.+4      	; 0x43cc <lora_driver_getRn2483Hweui+0x32>
    43c8:	18 82       	st	Y, r1
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	df 91       	pop	r29
    43ce:	cf 91       	pop	r28
    43d0:	08 95       	ret

000043d2 <lora_driver_setDeviceIdentifier>:
    43d2:	fc 01       	movw	r30, r24
    43d4:	01 90       	ld	r0, Z+
    43d6:	00 20       	and	r0, r0
    43d8:	e9 f7       	brne	.-6      	; 0x43d4 <lora_driver_setDeviceIdentifier+0x2>
    43da:	9f 01       	movw	r18, r30
    43dc:	21 51       	subi	r18, 0x11	; 17
    43de:	31 09       	sbc	r19, r1
    43e0:	28 17       	cp	r18, r24
    43e2:	39 07       	cpc	r19, r25
    43e4:	29 f4       	brne	.+10     	; 0x43f0 <lora_driver_setDeviceIdentifier+0x1e>
    43e6:	bc 01       	movw	r22, r24
    43e8:	8d ed       	ldi	r24, 0xDD	; 221
    43ea:	95 e0       	ldi	r25, 0x05	; 5
    43ec:	6c cf       	rjmp	.-296    	; 0x42c6 <_uploadMessageRc>
    43ee:	08 95       	ret
    43f0:	89 e0       	ldi	r24, 0x09	; 9
    43f2:	08 95       	ret

000043f4 <lora_driver_setApplicationIdentifier>:
    43f4:	fc 01       	movw	r30, r24
    43f6:	01 90       	ld	r0, Z+
    43f8:	00 20       	and	r0, r0
    43fa:	e9 f7       	brne	.-6      	; 0x43f6 <lora_driver_setApplicationIdentifier+0x2>
    43fc:	9f 01       	movw	r18, r30
    43fe:	21 51       	subi	r18, 0x11	; 17
    4400:	31 09       	sbc	r19, r1
    4402:	28 17       	cp	r18, r24
    4404:	39 07       	cpc	r19, r25
    4406:	29 f4       	brne	.+10     	; 0x4412 <lora_driver_setApplicationIdentifier+0x1e>
    4408:	bc 01       	movw	r22, r24
    440a:	8c ee       	ldi	r24, 0xEC	; 236
    440c:	95 e0       	ldi	r25, 0x05	; 5
    440e:	5b cf       	rjmp	.-330    	; 0x42c6 <_uploadMessageRc>
    4410:	08 95       	ret
    4412:	89 e0       	ldi	r24, 0x09	; 9
    4414:	08 95       	ret

00004416 <lora_driver_setApplicationKey>:
    4416:	fc 01       	movw	r30, r24
    4418:	01 90       	ld	r0, Z+
    441a:	00 20       	and	r0, r0
    441c:	e9 f7       	brne	.-6      	; 0x4418 <lora_driver_setApplicationKey+0x2>
    441e:	9f 01       	movw	r18, r30
    4420:	21 52       	subi	r18, 0x21	; 33
    4422:	31 09       	sbc	r19, r1
    4424:	28 17       	cp	r18, r24
    4426:	39 07       	cpc	r19, r25
    4428:	29 f4       	brne	.+10     	; 0x4434 <lora_driver_setApplicationKey+0x1e>
    442a:	bc 01       	movw	r22, r24
    442c:	8b ef       	ldi	r24, 0xFB	; 251
    442e:	95 e0       	ldi	r25, 0x05	; 5
    4430:	4a cf       	rjmp	.-364    	; 0x42c6 <_uploadMessageRc>
    4432:	08 95       	ret
    4434:	89 e0       	ldi	r24, 0x09	; 9
    4436:	08 95       	ret

00004438 <lora_driver_saveMac>:
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	70 e0       	ldi	r23, 0x00	; 0
    443c:	8a e3       	ldi	r24, 0x3A	; 58
    443e:	96 e0       	ldi	r25, 0x06	; 6
    4440:	42 cf       	rjmp	.-380    	; 0x42c6 <_uploadMessageRc>
    4442:	08 95       	ret

00004444 <lora_driver_join>:
    4444:	0f 93       	push	r16
    4446:	1f 93       	push	r17
    4448:	e8 2f       	mov	r30, r24
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	ee 0f       	add	r30, r30
    444e:	ff 1f       	adc	r31, r31
    4450:	ec 5e       	subi	r30, 0xEC	; 236
    4452:	f7 4f       	sbci	r31, 0xF7	; 247
    4454:	60 81       	ld	r22, Z
    4456:	71 81       	ldd	r23, Z+1	; 0x01
    4458:	83 e4       	ldi	r24, 0x43	; 67
    445a:	96 e0       	ldi	r25, 0x06	; 6
    445c:	34 df       	rcall	.-408    	; 0x42c6 <_uploadMessageRc>
    445e:	81 11       	cpse	r24, r1
    4460:	14 c0       	rjmp	.+40     	; 0x448a <lora_driver_join+0x46>
    4462:	08 e2       	ldi	r16, 0x28	; 40
    4464:	15 e0       	ldi	r17, 0x05	; 5
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	4d e2       	ldi	r20, 0x2D	; 45
    446c:	50 e0       	ldi	r21, 0x00	; 0
    446e:	60 e7       	ldi	r22, 0x70	; 112
    4470:	74 e1       	ldi	r23, 0x14	; 20
    4472:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    4476:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    447a:	0e 94 98 0c 	call	0x1930	; 0x1930 <xStreamBufferReceive>
    447e:	88 23       	and	r24, r24
    4480:	21 f0       	breq	.+8      	; 0x448a <lora_driver_join+0x46>
    4482:	80 e7       	ldi	r24, 0x70	; 112
    4484:	94 e1       	ldi	r25, 0x14	; 20
    4486:	aa de       	rcall	.-684    	; 0x41dc <_reply2ReturnCode>
    4488:	03 c0       	rjmp	.+6      	; 0x4490 <lora_driver_join+0x4c>
    448a:	80 e7       	ldi	r24, 0x70	; 112
    448c:	94 e1       	ldi	r25, 0x14	; 20
    448e:	a6 de       	rcall	.-692    	; 0x41dc <_reply2ReturnCode>
    4490:	1f 91       	pop	r17
    4492:	0f 91       	pop	r16
    4494:	08 95       	ret

00004496 <lora_driver_sendUploadMessage>:
    4496:	0f 93       	push	r16
    4498:	1f 93       	push	r17
    449a:	cf 93       	push	r28
    449c:	df 93       	push	r29
    449e:	1f 92       	push	r1
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	db 01       	movw	r26, r22
    44a6:	11 96       	adiw	r26, 0x01	; 1
    44a8:	9c 91       	ld	r25, X
    44aa:	11 97       	sbiw	r26, 0x01	; 1
    44ac:	95 31       	cpi	r25, 0x15	; 21
    44ae:	08 f0       	brcs	.+2      	; 0x44b2 <lora_driver_sendUploadMessage+0x1c>
    44b0:	b4 c0       	rjmp	.+360    	; 0x461a <lora_driver_sendUploadMessage+0x184>
    44b2:	99 23       	and	r25, r25
    44b4:	81 f1       	breq	.+96     	; 0x4516 <lora_driver_sendUploadMessage+0x80>
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	70 e0       	ldi	r23, 0x00	; 0
    44ba:	27 2f       	mov	r18, r23
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	46 2f       	mov	r20, r22
    44c0:	50 e0       	ldi	r21, 0x00	; 0
    44c2:	fd 01       	movw	r30, r26
    44c4:	e4 0f       	add	r30, r20
    44c6:	f5 1f       	adc	r31, r21
    44c8:	92 81       	ldd	r25, Z+2	; 0x02
    44ca:	92 95       	swap	r25
    44cc:	9f 70       	andi	r25, 0x0F	; 15
    44ce:	9a 30       	cpi	r25, 0x0A	; 10
    44d0:	10 f0       	brcs	.+4      	; 0x44d6 <lora_driver_sendUploadMessage+0x40>
    44d2:	99 5c       	subi	r25, 0xC9	; 201
    44d4:	01 c0       	rjmp	.+2      	; 0x44d8 <lora_driver_sendUploadMessage+0x42>
    44d6:	90 5d       	subi	r25, 0xD0	; 208
    44d8:	f9 01       	movw	r30, r18
    44da:	ef 5f       	subi	r30, 0xFF	; 255
    44dc:	fb 4e       	sbci	r31, 0xEB	; 235
    44de:	90 83       	st	Z, r25
    44e0:	2f 5f       	subi	r18, 0xFF	; 255
    44e2:	3f 4f       	sbci	r19, 0xFF	; 255
    44e4:	fd 01       	movw	r30, r26
    44e6:	e4 0f       	add	r30, r20
    44e8:	f5 1f       	adc	r31, r21
    44ea:	92 81       	ldd	r25, Z+2	; 0x02
    44ec:	9f 70       	andi	r25, 0x0F	; 15
    44ee:	49 2f       	mov	r20, r25
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	4a 30       	cpi	r20, 0x0A	; 10
    44f4:	51 05       	cpc	r21, r1
    44f6:	14 f0       	brlt	.+4      	; 0x44fc <lora_driver_sendUploadMessage+0x66>
    44f8:	99 5c       	subi	r25, 0xC9	; 201
    44fa:	01 c0       	rjmp	.+2      	; 0x44fe <lora_driver_sendUploadMessage+0x68>
    44fc:	90 5d       	subi	r25, 0xD0	; 208
    44fe:	f9 01       	movw	r30, r18
    4500:	ef 5f       	subi	r30, 0xFF	; 255
    4502:	fb 4e       	sbci	r31, 0xEB	; 235
    4504:	90 83       	st	Z, r25
    4506:	7e 5f       	subi	r23, 0xFE	; 254
    4508:	6f 5f       	subi	r22, 0xFF	; 255
    450a:	11 96       	adiw	r26, 0x01	; 1
    450c:	9c 91       	ld	r25, X
    450e:	11 97       	sbiw	r26, 0x01	; 1
    4510:	69 17       	cp	r22, r25
    4512:	98 f2       	brcs	.-90     	; 0x44ba <lora_driver_sendUploadMessage+0x24>
    4514:	01 c0       	rjmp	.+2      	; 0x4518 <lora_driver_sendUploadMessage+0x82>
    4516:	70 e0       	ldi	r23, 0x00	; 0
    4518:	e7 2f       	mov	r30, r23
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	ef 5f       	subi	r30, 0xFF	; 255
    451e:	fb 4e       	sbci	r31, 0xEB	; 235
    4520:	10 82       	st	Z, r1
    4522:	4c 91       	ld	r20, X
    4524:	81 11       	cpse	r24, r1
    4526:	03 c0       	rjmp	.+6      	; 0x452e <lora_driver_sendUploadMessage+0x98>
    4528:	8c e4       	ldi	r24, 0x4C	; 76
    452a:	96 e0       	ldi	r25, 0x06	; 6
    452c:	02 c0       	rjmp	.+4      	; 0x4532 <lora_driver_sendUploadMessage+0x9c>
    452e:	8e e4       	ldi	r24, 0x4E	; 78
    4530:	96 e0       	ldi	r25, 0x06	; 6
    4532:	21 e0       	ldi	r18, 0x01	; 1
    4534:	34 e1       	ldi	r19, 0x14	; 20
    4536:	3f 93       	push	r19
    4538:	2f 93       	push	r18
    453a:	1f 92       	push	r1
    453c:	4f 93       	push	r20
    453e:	9f 93       	push	r25
    4540:	8f 93       	push	r24
    4542:	82 e5       	ldi	r24, 0x52	; 82
    4544:	96 e0       	ldi	r25, 0x06	; 6
    4546:	9f 93       	push	r25
    4548:	8f 93       	push	r24
    454a:	83 e4       	ldi	r24, 0x43	; 67
    454c:	94 e1       	ldi	r25, 0x14	; 20
    454e:	9f 93       	push	r25
    4550:	8f 93       	push	r24
    4552:	0e 94 21 30 	call	0x6042	; 0x6042 <sprintf>
    4556:	60 e0       	ldi	r22, 0x00	; 0
    4558:	70 e0       	ldi	r23, 0x00	; 0
    455a:	83 e4       	ldi	r24, 0x43	; 67
    455c:	94 e1       	ldi	r25, 0x14	; 20
    455e:	b3 de       	rcall	.-666    	; 0x42c6 <_uploadMessageRc>
    4560:	0f b6       	in	r0, 0x3f	; 63
    4562:	f8 94       	cli
    4564:	de bf       	out	0x3e, r29	; 62
    4566:	0f be       	out	0x3f, r0	; 63
    4568:	cd bf       	out	0x3d, r28	; 61
    456a:	81 11       	cpse	r24, r1
    456c:	59 c0       	rjmp	.+178    	; 0x4620 <lora_driver_sendUploadMessage+0x18a>
    456e:	08 e2       	ldi	r16, 0x28	; 40
    4570:	15 e0       	ldi	r17, 0x05	; 5
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	4d e2       	ldi	r20, 0x2D	; 45
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	60 e7       	ldi	r22, 0x70	; 112
    457c:	74 e1       	ldi	r23, 0x14	; 20
    457e:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    4582:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    4586:	0e 94 98 0c 	call	0x1930	; 0x1930 <xStreamBufferReceive>
    458a:	88 23       	and	r24, r24
    458c:	09 f4       	brne	.+2      	; 0x4590 <lora_driver_sendUploadMessage+0xfa>
    458e:	47 c0       	rjmp	.+142    	; 0x461e <lora_driver_sendUploadMessage+0x188>
    4590:	80 e7       	ldi	r24, 0x70	; 112
    4592:	94 e1       	ldi	r25, 0x14	; 20
    4594:	23 de       	rcall	.-954    	; 0x41dc <_reply2ReturnCode>
    4596:	8e 30       	cpi	r24, 0x0E	; 14
    4598:	09 f0       	breq	.+2      	; 0x459c <lora_driver_sendUploadMessage+0x106>
    459a:	42 c0       	rjmp	.+132    	; 0x4620 <lora_driver_sendUploadMessage+0x18a>
    459c:	87 e0       	ldi	r24, 0x07	; 7
    459e:	89 83       	std	Y+1, r24	; 0x01
    45a0:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <_downlinkMessageBuffer>
    45a4:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <_downlinkMessageBuffer+0x1>
    45a8:	89 2b       	or	r24, r25
    45aa:	a9 f1       	breq	.+106    	; 0x4616 <lora_driver_sendUploadMessage+0x180>
    45ac:	be 01       	movw	r22, r28
    45ae:	6f 5f       	subi	r22, 0xFF	; 255
    45b0:	7f 4f       	sbci	r23, 0xFF	; 255
    45b2:	80 e7       	ldi	r24, 0x70	; 112
    45b4:	94 e1       	ldi	r25, 0x14	; 20
    45b6:	68 d1       	rcall	.+720    	; 0x4888 <decode_port_no>
    45b8:	80 93 eb 13 	sts	0x13EB, r24	; 0x8013eb <_downlinkPayload>
    45bc:	e9 81       	ldd	r30, Y+1	; 0x01
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	e0 59       	subi	r30, 0x90	; 144
    45c2:	fb 4e       	sbci	r31, 0xEB	; 235
    45c4:	df 01       	movw	r26, r30
    45c6:	0d 90       	ld	r0, X+
    45c8:	00 20       	and	r0, r0
    45ca:	e9 f7       	brne	.-6      	; 0x45c6 <lora_driver_sendUploadMessage+0x130>
    45cc:	11 97       	sbiw	r26, 0x01	; 1
    45ce:	ae 1b       	sub	r26, r30
    45d0:	bf 0b       	sbc	r27, r31
    45d2:	aa 23       	and	r26, r26
    45d4:	91 f0       	breq	.+36     	; 0x45fa <lora_driver_sendUploadMessage+0x164>
    45d6:	bb 27       	eor	r27, r27
    45d8:	cd 01       	movw	r24, r26
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	9c 01       	movw	r18, r24
    45de:	12 f4       	brpl	.+4      	; 0x45e4 <lora_driver_sendUploadMessage+0x14e>
    45e0:	2f 5f       	subi	r18, 0xFF	; 255
    45e2:	3f 4f       	sbci	r19, 0xFF	; 255
    45e4:	35 95       	asr	r19
    45e6:	27 95       	ror	r18
    45e8:	20 93 ec 13 	sts	0x13EC, r18	; 0x8013ec <_downlinkPayload+0x1>
    45ec:	af 01       	movw	r20, r30
    45ee:	4f 5f       	subi	r20, 0xFF	; 255
    45f0:	5f 4f       	sbci	r21, 0xFF	; 255
    45f2:	64 e1       	ldi	r22, 0x14	; 20
    45f4:	8d ee       	ldi	r24, 0xED	; 237
    45f6:	93 e1       	ldi	r25, 0x13	; 19
    45f8:	73 d1       	rcall	.+742    	; 0x48e0 <decode_hexadecimal_string_bytes>
    45fa:	01 e0       	ldi	r16, 0x01	; 1
    45fc:	10 e0       	ldi	r17, 0x00	; 0
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	46 e1       	ldi	r20, 0x16	; 22
    4604:	50 e0       	ldi	r21, 0x00	; 0
    4606:	6b ee       	ldi	r22, 0xEB	; 235
    4608:	73 e1       	ldi	r23, 0x13	; 19
    460a:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <_downlinkMessageBuffer>
    460e:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <_downlinkMessageBuffer+0x1>
    4612:	0e 94 8f 0b 	call	0x171e	; 0x171e <xStreamBufferSend>
    4616:	8e e0       	ldi	r24, 0x0E	; 14
    4618:	03 c0       	rjmp	.+6      	; 0x4620 <lora_driver_sendUploadMessage+0x18a>
    461a:	84 e1       	ldi	r24, 0x14	; 20
    461c:	01 c0       	rjmp	.+2      	; 0x4620 <lora_driver_sendUploadMessage+0x18a>
    461e:	80 e0       	ldi	r24, 0x00	; 0
    4620:	0f 90       	pop	r0
    4622:	df 91       	pop	r29
    4624:	cf 91       	pop	r28
    4626:	1f 91       	pop	r17
    4628:	0f 91       	pop	r16
    462a:	08 95       	ret

0000462c <lora_driver_setAdaptiveDataRate>:
    462c:	81 30       	cpi	r24, 0x01	; 1
    462e:	19 f0       	breq	.+6      	; 0x4636 <lora_driver_setAdaptiveDataRate+0xa>
    4630:	62 e6       	ldi	r22, 0x62	; 98
    4632:	76 e0       	ldi	r23, 0x06	; 6
    4634:	02 c0       	rjmp	.+4      	; 0x463a <lora_driver_setAdaptiveDataRate+0xe>
    4636:	6b e3       	ldi	r22, 0x3B	; 59
    4638:	77 e0       	ldi	r23, 0x07	; 7
    463a:	86 e6       	ldi	r24, 0x66	; 102
    463c:	96 e0       	ldi	r25, 0x06	; 6
    463e:	43 ce       	rjmp	.-890    	; 0x42c6 <_uploadMessageRc>
    4640:	08 95       	ret

00004642 <lora_driver_setReceiveDelay>:
    4642:	9f 93       	push	r25
    4644:	8f 93       	push	r24
    4646:	87 e9       	ldi	r24, 0x97	; 151
    4648:	96 e0       	ldi	r25, 0x06	; 6
    464a:	9f 93       	push	r25
    464c:	8f 93       	push	r24
    464e:	83 e4       	ldi	r24, 0x43	; 67
    4650:	94 e1       	ldi	r25, 0x14	; 20
    4652:	9f 93       	push	r25
    4654:	8f 93       	push	r24
    4656:	0e 94 21 30 	call	0x6042	; 0x6042 <sprintf>
    465a:	60 e0       	ldi	r22, 0x00	; 0
    465c:	70 e0       	ldi	r23, 0x00	; 0
    465e:	83 e4       	ldi	r24, 0x43	; 67
    4660:	94 e1       	ldi	r25, 0x14	; 20
    4662:	31 de       	rcall	.-926    	; 0x42c6 <_uploadMessageRc>
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	0f 90       	pop	r0
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
    4670:	08 95       	ret

00004672 <lora_driver_configureToEu868>:
    4672:	2f 92       	push	r2
    4674:	3f 92       	push	r3
    4676:	4f 92       	push	r4
    4678:	5f 92       	push	r5
    467a:	6f 92       	push	r6
    467c:	7f 92       	push	r7
    467e:	8f 92       	push	r8
    4680:	9f 92       	push	r9
    4682:	af 92       	push	r10
    4684:	bf 92       	push	r11
    4686:	cf 92       	push	r12
    4688:	df 92       	push	r13
    468a:	ef 92       	push	r14
    468c:	ff 92       	push	r15
    468e:	0f 93       	push	r16
    4690:	1f 93       	push	r17
    4692:	cf 93       	push	r28
    4694:	df 93       	push	r29
    4696:	cd b7       	in	r28, 0x3d	; 61
    4698:	de b7       	in	r29, 0x3e	; 62
    469a:	a0 97       	sbiw	r28, 0x20	; 32
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	f8 94       	cli
    46a0:	de bf       	out	0x3e, r29	; 62
    46a2:	0f be       	out	0x3f, r0	; 63
    46a4:	cd bf       	out	0x3d, r28	; 61
    46a6:	64 ec       	ldi	r22, 0xC4	; 196
    46a8:	76 e0       	ldi	r23, 0x06	; 6
    46aa:	80 ed       	ldi	r24, 0xD0	; 208
    46ac:	96 e0       	ldi	r25, 0x06	; 6
    46ae:	3c dd       	rcall	.-1416   	; 0x4128 <_uploadMessage>
    46b0:	95 dd       	rcall	.-1238   	; 0x41dc <_reply2ReturnCode>
    46b2:	81 11       	cpse	r24, r1
    46b4:	a3 c0       	rjmp	.+326    	; 0x47fc <lora_driver_configureToEu868+0x18a>
    46b6:	80 e2       	ldi	r24, 0x20	; 32
    46b8:	e2 e2       	ldi	r30, 0x22	; 34
    46ba:	f2 e0       	ldi	r31, 0x02	; 2
    46bc:	de 01       	movw	r26, r28
    46be:	11 96       	adiw	r26, 0x01	; 1
    46c0:	01 90       	ld	r0, Z+
    46c2:	0d 92       	st	X+, r0
    46c4:	8a 95       	dec	r24
    46c6:	e1 f7       	brne	.-8      	; 0x46c0 <lora_driver_configureToEu868+0x4e>
    46c8:	9e 01       	movw	r18, r28
    46ca:	2f 5f       	subi	r18, 0xFF	; 255
    46cc:	3f 4f       	sbci	r19, 0xFF	; 255
    46ce:	69 01       	movw	r12, r18
    46d0:	e1 2c       	mov	r14, r1
    46d2:	f1 2c       	mov	r15, r1
    46d4:	0f 2e       	mov	r0, r31
    46d6:	fc ed       	ldi	r31, 0xDC	; 220
    46d8:	af 2e       	mov	r10, r31
    46da:	f6 e0       	ldi	r31, 0x06	; 6
    46dc:	bf 2e       	mov	r11, r31
    46de:	f0 2d       	mov	r31, r0
    46e0:	03 e4       	ldi	r16, 0x43	; 67
    46e2:	14 e1       	ldi	r17, 0x14	; 20
    46e4:	0f 2e       	mov	r0, r31
    46e6:	f5 ef       	ldi	r31, 0xF5	; 245
    46e8:	4f 2e       	mov	r4, r31
    46ea:	f6 e0       	ldi	r31, 0x06	; 6
    46ec:	5f 2e       	mov	r5, r31
    46ee:	f0 2d       	mov	r31, r0
    46f0:	0f 2e       	mov	r0, r31
    46f2:	fc e0       	ldi	r31, 0x0C	; 12
    46f4:	8f 2e       	mov	r8, r31
    46f6:	f7 e0       	ldi	r31, 0x07	; 7
    46f8:	9f 2e       	mov	r9, r31
    46fa:	f0 2d       	mov	r31, r0
    46fc:	0f 2e       	mov	r0, r31
    46fe:	f6 e2       	ldi	r31, 0x26	; 38
    4700:	6f 2e       	mov	r6, r31
    4702:	f7 e0       	ldi	r31, 0x07	; 7
    4704:	7f 2e       	mov	r7, r31
    4706:	f0 2d       	mov	r31, r0
    4708:	3e 2c       	mov	r3, r14
    470a:	2f 2c       	mov	r2, r15
    470c:	ff 92       	push	r15
    470e:	ef 92       	push	r14
    4710:	bf 92       	push	r11
    4712:	af 92       	push	r10
    4714:	1f 93       	push	r17
    4716:	0f 93       	push	r16
    4718:	0e 94 21 30 	call	0x6042	; 0x6042 <sprintf>
    471c:	60 e0       	ldi	r22, 0x00	; 0
    471e:	70 e0       	ldi	r23, 0x00	; 0
    4720:	c8 01       	movw	r24, r16
    4722:	02 dd       	rcall	.-1532   	; 0x4128 <_uploadMessage>
    4724:	5b dd       	rcall	.-1354   	; 0x41dc <_reply2ReturnCode>
    4726:	0f 90       	pop	r0
    4728:	0f 90       	pop	r0
    472a:	0f 90       	pop	r0
    472c:	0f 90       	pop	r0
    472e:	0f 90       	pop	r0
    4730:	0f 90       	pop	r0
    4732:	81 11       	cpse	r24, r1
    4734:	63 c0       	rjmp	.+198    	; 0x47fc <lora_driver_configureToEu868+0x18a>
    4736:	32 e0       	ldi	r19, 0x02	; 2
    4738:	3e 15       	cp	r19, r14
    473a:	e8 f4       	brcc	.+58     	; 0x4776 <lora_driver_configureToEu868+0x104>
    473c:	f6 01       	movw	r30, r12
    473e:	83 81       	ldd	r24, Z+3	; 0x03
    4740:	8f 93       	push	r24
    4742:	82 81       	ldd	r24, Z+2	; 0x02
    4744:	8f 93       	push	r24
    4746:	81 81       	ldd	r24, Z+1	; 0x01
    4748:	8f 93       	push	r24
    474a:	80 81       	ld	r24, Z
    474c:	8f 93       	push	r24
    474e:	ff 92       	push	r15
    4750:	ef 92       	push	r14
    4752:	5f 92       	push	r5
    4754:	4f 92       	push	r4
    4756:	1f 93       	push	r17
    4758:	0f 93       	push	r16
    475a:	0e 94 21 30 	call	0x6042	; 0x6042 <sprintf>
    475e:	60 e0       	ldi	r22, 0x00	; 0
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	c8 01       	movw	r24, r16
    4764:	e1 dc       	rcall	.-1598   	; 0x4128 <_uploadMessage>
    4766:	3a dd       	rcall	.-1420   	; 0x41dc <_reply2ReturnCode>
    4768:	0f b6       	in	r0, 0x3f	; 63
    476a:	f8 94       	cli
    476c:	de bf       	out	0x3e, r29	; 62
    476e:	0f be       	out	0x3f, r0	; 63
    4770:	cd bf       	out	0x3d, r28	; 61
    4772:	81 11       	cpse	r24, r1
    4774:	43 c0       	rjmp	.+134    	; 0x47fc <lora_driver_configureToEu868+0x18a>
    4776:	2f 92       	push	r2
    4778:	3f 92       	push	r3
    477a:	9f 92       	push	r9
    477c:	8f 92       	push	r8
    477e:	1f 93       	push	r17
    4780:	0f 93       	push	r16
    4782:	0e 94 21 30 	call	0x6042	; 0x6042 <sprintf>
    4786:	60 e0       	ldi	r22, 0x00	; 0
    4788:	70 e0       	ldi	r23, 0x00	; 0
    478a:	c8 01       	movw	r24, r16
    478c:	cd dc       	rcall	.-1638   	; 0x4128 <_uploadMessage>
    478e:	26 dd       	rcall	.-1460   	; 0x41dc <_reply2ReturnCode>
    4790:	0f 90       	pop	r0
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	0f 90       	pop	r0
    4798:	0f 90       	pop	r0
    479a:	0f 90       	pop	r0
    479c:	81 11       	cpse	r24, r1
    479e:	2e c0       	rjmp	.+92     	; 0x47fc <lora_driver_configureToEu868+0x18a>
    47a0:	2f 92       	push	r2
    47a2:	3f 92       	push	r3
    47a4:	7f 92       	push	r7
    47a6:	6f 92       	push	r6
    47a8:	1f 93       	push	r17
    47aa:	0f 93       	push	r16
    47ac:	0e 94 21 30 	call	0x6042	; 0x6042 <sprintf>
    47b0:	60 e0       	ldi	r22, 0x00	; 0
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	c8 01       	movw	r24, r16
    47b6:	b8 dc       	rcall	.-1680   	; 0x4128 <_uploadMessage>
    47b8:	11 dd       	rcall	.-1502   	; 0x41dc <_reply2ReturnCode>
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	0f 90       	pop	r0
    47c6:	81 11       	cpse	r24, r1
    47c8:	19 c0       	rjmp	.+50     	; 0x47fc <lora_driver_configureToEu868+0x18a>
    47ca:	3f ef       	ldi	r19, 0xFF	; 255
    47cc:	e3 1a       	sub	r14, r19
    47ce:	f3 0a       	sbc	r15, r19
    47d0:	84 e0       	ldi	r24, 0x04	; 4
    47d2:	c8 0e       	add	r12, r24
    47d4:	d1 1c       	adc	r13, r1
    47d6:	98 e0       	ldi	r25, 0x08	; 8
    47d8:	e9 16       	cp	r14, r25
    47da:	f1 04       	cpc	r15, r1
    47dc:	09 f0       	breq	.+2      	; 0x47e0 <lora_driver_configureToEu868+0x16e>
    47de:	94 cf       	rjmp	.-216    	; 0x4708 <lora_driver_configureToEu868+0x96>
    47e0:	60 e0       	ldi	r22, 0x00	; 0
    47e2:	70 e0       	ldi	r23, 0x00	; 0
    47e4:	8e e3       	ldi	r24, 0x3E	; 62
    47e6:	97 e0       	ldi	r25, 0x07	; 7
    47e8:	9f dc       	rcall	.-1730   	; 0x4128 <_uploadMessage>
    47ea:	f8 dc       	rcall	.-1552   	; 0x41dc <_reply2ReturnCode>
    47ec:	81 11       	cpse	r24, r1
    47ee:	06 c0       	rjmp	.+12     	; 0x47fc <lora_driver_configureToEu868+0x18a>
    47f0:	60 e0       	ldi	r22, 0x00	; 0
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	8f e4       	ldi	r24, 0x4F	; 79
    47f6:	97 e0       	ldi	r25, 0x07	; 7
    47f8:	97 dc       	rcall	.-1746   	; 0x4128 <_uploadMessage>
    47fa:	f0 dc       	rcall	.-1568   	; 0x41dc <_reply2ReturnCode>
    47fc:	a0 96       	adiw	r28, 0x20	; 32
    47fe:	0f b6       	in	r0, 0x3f	; 63
    4800:	f8 94       	cli
    4802:	de bf       	out	0x3e, r29	; 62
    4804:	0f be       	out	0x3f, r0	; 63
    4806:	cd bf       	out	0x3d, r28	; 61
    4808:	df 91       	pop	r29
    480a:	cf 91       	pop	r28
    480c:	1f 91       	pop	r17
    480e:	0f 91       	pop	r16
    4810:	ff 90       	pop	r15
    4812:	ef 90       	pop	r14
    4814:	df 90       	pop	r13
    4816:	cf 90       	pop	r12
    4818:	bf 90       	pop	r11
    481a:	af 90       	pop	r10
    481c:	9f 90       	pop	r9
    481e:	8f 90       	pop	r8
    4820:	7f 90       	pop	r7
    4822:	6f 90       	pop	r6
    4824:	5f 90       	pop	r5
    4826:	4f 90       	pop	r4
    4828:	3f 90       	pop	r3
    482a:	2f 90       	pop	r2
    482c:	08 95       	ret

0000482e <lora_driver_setOtaaIdentity>:
    482e:	ef 92       	push	r14
    4830:	ff 92       	push	r15
    4832:	0f 93       	push	r16
    4834:	1f 93       	push	r17
    4836:	cf 93       	push	r28
    4838:	df 93       	push	r29
    483a:	ec 01       	movw	r28, r24
    483c:	8b 01       	movw	r16, r22
    483e:	7a 01       	movw	r14, r20
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	f4 de       	rcall	.-536    	; 0x462c <lora_driver_setAdaptiveDataRate>
    4844:	81 11       	cpse	r24, r1
    4846:	0d c0       	rjmp	.+26     	; 0x4862 <lora_driver_setOtaaIdentity+0x34>
    4848:	ce 01       	movw	r24, r28
    484a:	d4 dd       	rcall	.-1112   	; 0x43f4 <lora_driver_setApplicationIdentifier>
    484c:	81 11       	cpse	r24, r1
    484e:	09 c0       	rjmp	.+18     	; 0x4862 <lora_driver_setOtaaIdentity+0x34>
    4850:	c8 01       	movw	r24, r16
    4852:	e1 dd       	rcall	.-1086   	; 0x4416 <lora_driver_setApplicationKey>
    4854:	81 11       	cpse	r24, r1
    4856:	05 c0       	rjmp	.+10     	; 0x4862 <lora_driver_setOtaaIdentity+0x34>
    4858:	c7 01       	movw	r24, r14
    485a:	bb dd       	rcall	.-1162   	; 0x43d2 <lora_driver_setDeviceIdentifier>
    485c:	81 11       	cpse	r24, r1
    485e:	01 c0       	rjmp	.+2      	; 0x4862 <lora_driver_setOtaaIdentity+0x34>
    4860:	eb dd       	rcall	.-1066   	; 0x4438 <lora_driver_saveMac>
    4862:	df 91       	pop	r29
    4864:	cf 91       	pop	r28
    4866:	1f 91       	pop	r17
    4868:	0f 91       	pop	r16
    486a:	ff 90       	pop	r15
    486c:	ef 90       	pop	r14
    486e:	08 95       	ret

00004870 <lora_driver_mapReturnCodeToText>:
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	fc 01       	movw	r30, r24
    4874:	ee 0f       	add	r30, r30
    4876:	ff 1f       	adc	r31, r31
    4878:	8e 0f       	add	r24, r30
    487a:	9f 1f       	adc	r25, r31
    487c:	fc 01       	movw	r30, r24
    487e:	e8 5e       	subi	r30, 0xE8	; 232
    4880:	f7 4f       	sbci	r31, 0xF7	; 247
    4882:	81 81       	ldd	r24, Z+1	; 0x01
    4884:	92 81       	ldd	r25, Z+2	; 0x02
    4886:	08 95       	ret

00004888 <decode_port_no>:
    4888:	dc 01       	movw	r26, r24
    488a:	00 97       	sbiw	r24, 0x00	; 0
    488c:	29 f1       	breq	.+74     	; 0x48d8 <decode_port_no+0x50>
    488e:	fb 01       	movw	r30, r22
    4890:	20 81       	ld	r18, Z
    4892:	fc 01       	movw	r30, r24
    4894:	01 90       	ld	r0, Z+
    4896:	00 20       	and	r0, r0
    4898:	e9 f7       	brne	.-6      	; 0x4894 <decode_port_no+0xc>
    489a:	31 97       	sbiw	r30, 0x01	; 1
    489c:	e8 1b       	sub	r30, r24
    489e:	f9 0b       	sbc	r31, r25
    48a0:	82 2f       	mov	r24, r18
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	e8 17       	cp	r30, r24
    48a6:	f9 07       	cpc	r31, r25
    48a8:	c8 f0       	brcs	.+50     	; 0x48dc <decode_port_no+0x54>
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	08 c0       	rjmp	.+16     	; 0x48be <decode_port_no+0x36>
    48ae:	88 0f       	add	r24, r24
    48b0:	38 2f       	mov	r19, r24
    48b2:	33 0f       	add	r19, r19
    48b4:	33 0f       	add	r19, r19
    48b6:	83 0f       	add	r24, r19
    48b8:	80 53       	subi	r24, 0x30	; 48
    48ba:	89 0f       	add	r24, r25
    48bc:	2f 5f       	subi	r18, 0xFF	; 255
    48be:	fd 01       	movw	r30, r26
    48c0:	e2 0f       	add	r30, r18
    48c2:	f1 1d       	adc	r31, r1
    48c4:	90 81       	ld	r25, Z
    48c6:	30 ed       	ldi	r19, 0xD0	; 208
    48c8:	39 0f       	add	r19, r25
    48ca:	3a 30       	cpi	r19, 0x0A	; 10
    48cc:	10 f4       	brcc	.+4      	; 0x48d2 <decode_port_no+0x4a>
    48ce:	91 11       	cpse	r25, r1
    48d0:	ee cf       	rjmp	.-36     	; 0x48ae <decode_port_no+0x26>
    48d2:	fb 01       	movw	r30, r22
    48d4:	20 83       	st	Z, r18
    48d6:	08 95       	ret
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	08 95       	ret
    48dc:	80 e0       	ldi	r24, 0x00	; 0
    48de:	08 95       	ret

000048e0 <decode_hexadecimal_string_bytes>:
    48e0:	0f 93       	push	r16
    48e2:	1f 93       	push	r17
    48e4:	cf 93       	push	r28
    48e6:	df 93       	push	r29
    48e8:	dc 01       	movw	r26, r24
    48ea:	ea 01       	movw	r28, r20
    48ec:	20 97       	sbiw	r28, 0x00	; 0
    48ee:	e1 f1       	breq	.+120    	; 0x4968 <decode_hexadecimal_string_bytes+0x88>
    48f0:	fa 01       	movw	r30, r20
    48f2:	01 90       	ld	r0, Z+
    48f4:	00 20       	and	r0, r0
    48f6:	e9 f7       	brne	.-6      	; 0x48f2 <decode_hexadecimal_string_bytes+0x12>
    48f8:	31 97       	sbiw	r30, 0x01	; 1
    48fa:	e4 1b       	sub	r30, r20
    48fc:	f5 0b       	sbc	r31, r21
    48fe:	32 97       	sbiw	r30, 0x02	; 2
    4900:	10 f5       	brcc	.+68     	; 0x4946 <decode_hexadecimal_string_bytes+0x66>
    4902:	32 c0       	rjmp	.+100    	; 0x4968 <decode_hexadecimal_string_bytes+0x88>
    4904:	8d 01       	movw	r16, r26
    4906:	04 0f       	add	r16, r20
    4908:	15 1f       	adc	r17, r21
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	ae 01       	movw	r20, r28
    490e:	42 0f       	add	r20, r18
    4910:	53 1f       	adc	r21, r19
    4912:	fa 01       	movw	r30, r20
    4914:	90 81       	ld	r25, Z
    4916:	91 34       	cpi	r25, 0x41	; 65
    4918:	28 f0       	brcs	.+10     	; 0x4924 <decode_hexadecimal_string_bytes+0x44>
    491a:	97 53       	subi	r25, 0x37	; 55
    491c:	59 2f       	mov	r21, r25
    491e:	52 95       	swap	r21
    4920:	50 7f       	andi	r21, 0xF0	; 240
    4922:	03 c0       	rjmp	.+6      	; 0x492a <decode_hexadecimal_string_bytes+0x4a>
    4924:	59 2f       	mov	r21, r25
    4926:	52 95       	swap	r21
    4928:	50 7f       	andi	r21, 0xF0	; 240
    492a:	2c 0f       	add	r18, r28
    492c:	3d 1f       	adc	r19, r29
    492e:	f9 01       	movw	r30, r18
    4930:	91 81       	ldd	r25, Z+1	; 0x01
    4932:	91 34       	cpi	r25, 0x41	; 65
    4934:	10 f0       	brcs	.+4      	; 0x493a <decode_hexadecimal_string_bytes+0x5a>
    4936:	97 53       	subi	r25, 0x37	; 55
    4938:	01 c0       	rjmp	.+2      	; 0x493c <decode_hexadecimal_string_bytes+0x5c>
    493a:	90 53       	subi	r25, 0x30	; 48
    493c:	95 0f       	add	r25, r21
    493e:	f8 01       	movw	r30, r16
    4940:	90 83       	st	Z, r25
    4942:	8f 5f       	subi	r24, 0xFF	; 255
    4944:	01 c0       	rjmp	.+2      	; 0x4948 <decode_hexadecimal_string_bytes+0x68>
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	28 2f       	mov	r18, r24
    494a:	22 0f       	add	r18, r18
    494c:	48 2f       	mov	r20, r24
    494e:	50 e0       	ldi	r21, 0x00	; 0
    4950:	fe 01       	movw	r30, r28
    4952:	01 90       	ld	r0, Z+
    4954:	00 20       	and	r0, r0
    4956:	e9 f7       	brne	.-6      	; 0x4952 <decode_hexadecimal_string_bytes+0x72>
    4958:	31 97       	sbiw	r30, 0x01	; 1
    495a:	ec 1b       	sub	r30, r28
    495c:	fd 0b       	sbc	r31, r29
    495e:	4e 17       	cp	r20, r30
    4960:	5f 07       	cpc	r21, r31
    4962:	10 f4       	brcc	.+4      	; 0x4968 <decode_hexadecimal_string_bytes+0x88>
    4964:	86 13       	cpse	r24, r22
    4966:	ce cf       	rjmp	.-100    	; 0x4904 <decode_hexadecimal_string_bytes+0x24>
    4968:	df 91       	pop	r29
    496a:	cf 91       	pop	r28
    496c:	1f 91       	pop	r17
    496e:	0f 91       	pop	r16
    4970:	08 95       	ret

00004972 <_serialCallBack>:
    4972:	80 91 a0 14 	lds	r24, 0x14A0	; 0x8014a0 <crc_sum.1945>
    4976:	86 0f       	add	r24, r22
    4978:	80 93 a0 14 	sts	0x14A0, r24	; 0x8014a0 <crc_sum.1945>
    497c:	90 91 a3 14 	lds	r25, 0x14A3	; 0x8014a3 <_mh_state>
    4980:	91 30       	cpi	r25, 0x01	; 1
    4982:	79 f0       	breq	.+30     	; 0x49a2 <_serialCallBack+0x30>
    4984:	28 f0       	brcs	.+10     	; 0x4990 <_serialCallBack+0x1e>
    4986:	92 30       	cpi	r25, 0x02	; 2
    4988:	a9 f0       	breq	.+42     	; 0x49b4 <_serialCallBack+0x42>
    498a:	93 30       	cpi	r25, 0x03	; 3
    498c:	19 f1       	breq	.+70     	; 0x49d4 <_serialCallBack+0x62>
    498e:	08 95       	ret
    4990:	6f 3f       	cpi	r22, 0xFF	; 255
    4992:	09 f0       	breq	.+2      	; 0x4996 <_serialCallBack+0x24>
    4994:	48 c0       	rjmp	.+144    	; 0x4a26 <_serialCallBack+0xb4>
    4996:	10 92 a0 14 	sts	0x14A0, r1	; 0x8014a0 <crc_sum.1945>
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	80 93 a3 14 	sts	0x14A3, r24	; 0x8014a3 <_mh_state>
    49a0:	08 95       	ret
    49a2:	66 38       	cpi	r22, 0x86	; 134
    49a4:	09 f0       	breq	.+2      	; 0x49a8 <_serialCallBack+0x36>
    49a6:	3f c0       	rjmp	.+126    	; 0x4a26 <_serialCallBack+0xb4>
    49a8:	10 92 9f 14 	sts	0x149F, r1	; 0x80149f <inDex.1943>
    49ac:	82 e0       	ldi	r24, 0x02	; 2
    49ae:	80 93 a3 14 	sts	0x14A3, r24	; 0x8014a3 <_mh_state>
    49b2:	08 95       	ret
    49b4:	e0 91 9f 14 	lds	r30, 0x149F	; 0x80149f <inDex.1943>
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	8e 0f       	add	r24, r30
    49bc:	80 93 9f 14 	sts	0x149F, r24	; 0x80149f <inDex.1943>
    49c0:	f0 e0       	ldi	r31, 0x00	; 0
    49c2:	e3 56       	subi	r30, 0x63	; 99
    49c4:	fb 4e       	sbci	r31, 0xEB	; 235
    49c6:	60 83       	st	Z, r22
    49c8:	82 30       	cpi	r24, 0x02	; 2
    49ca:	69 f5       	brne	.+90     	; 0x4a26 <_serialCallBack+0xb4>
    49cc:	83 e0       	ldi	r24, 0x03	; 3
    49ce:	80 93 a3 14 	sts	0x14A3, r24	; 0x8014a3 <_mh_state>
    49d2:	08 95       	ret
    49d4:	90 91 9f 14 	lds	r25, 0x149F	; 0x80149f <inDex.1943>
    49d8:	21 e0       	ldi	r18, 0x01	; 1
    49da:	29 0f       	add	r18, r25
    49dc:	20 93 9f 14 	sts	0x149F, r18	; 0x80149f <inDex.1943>
    49e0:	96 30       	cpi	r25, 0x06	; 6
    49e2:	09 f5       	brne	.+66     	; 0x4a26 <_serialCallBack+0xb4>
    49e4:	81 11       	cpse	r24, r1
    49e6:	0e c0       	rjmp	.+28     	; 0x4a04 <_serialCallBack+0x92>
    49e8:	ed e9       	ldi	r30, 0x9D	; 157
    49ea:	f4 e1       	ldi	r31, 0x14	; 20
    49ec:	80 81       	ld	r24, Z
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	98 2f       	mov	r25, r24
    49f2:	88 27       	eor	r24, r24
    49f4:	21 81       	ldd	r18, Z+1	; 0x01
    49f6:	82 0f       	add	r24, r18
    49f8:	91 1d       	adc	r25, r1
    49fa:	90 93 a5 14 	sts	0x14A5, r25	; 0x8014a5 <_ppm+0x1>
    49fe:	80 93 a4 14 	sts	0x14A4, r24	; 0x8014a4 <_ppm>
    4a02:	04 c0       	rjmp	.+8      	; 0x4a0c <_serialCallBack+0x9a>
    4a04:	10 92 a5 14 	sts	0x14A5, r1	; 0x8014a5 <_ppm+0x1>
    4a08:	10 92 a4 14 	sts	0x14A4, r1	; 0x8014a4 <_ppm>
    4a0c:	10 92 a3 14 	sts	0x14A3, r1	; 0x8014a3 <_mh_state>
    4a10:	e0 91 a1 14 	lds	r30, 0x14A1	; 0x8014a1 <_appCallBack>
    4a14:	f0 91 a2 14 	lds	r31, 0x14A2	; 0x8014a2 <_appCallBack+0x1>
    4a18:	30 97       	sbiw	r30, 0x00	; 0
    4a1a:	29 f0       	breq	.+10     	; 0x4a26 <_serialCallBack+0xb4>
    4a1c:	80 91 a4 14 	lds	r24, 0x14A4	; 0x8014a4 <_ppm>
    4a20:	90 91 a5 14 	lds	r25, 0x14A5	; 0x8014a5 <_ppm+0x1>
    4a24:	19 95       	eicall
    4a26:	08 95       	ret

00004a28 <mh_z19_initialise>:
    4a28:	8f 92       	push	r8
    4a2a:	9f 92       	push	r9
    4a2c:	af 92       	push	r10
    4a2e:	cf 92       	push	r12
    4a30:	ef 92       	push	r14
    4a32:	0f 93       	push	r16
    4a34:	0f 2e       	mov	r0, r31
    4a36:	f9 eb       	ldi	r31, 0xB9	; 185
    4a38:	8f 2e       	mov	r8, r31
    4a3a:	f4 e2       	ldi	r31, 0x24	; 36
    4a3c:	9f 2e       	mov	r9, r31
    4a3e:	f0 2d       	mov	r31, r0
    4a40:	68 94       	set
    4a42:	aa 24       	eor	r10, r10
    4a44:	a4 f8       	bld	r10, 4
    4a46:	68 94       	set
    4a48:	cc 24       	eor	r12, r12
    4a4a:	c4 f8       	bld	r12, 4
    4a4c:	e1 2c       	mov	r14, r1
    4a4e:	00 e0       	ldi	r16, 0x00	; 0
    4a50:	23 e0       	ldi	r18, 0x03	; 3
    4a52:	40 e8       	ldi	r20, 0x80	; 128
    4a54:	55 e2       	ldi	r21, 0x25	; 37
    4a56:	60 e0       	ldi	r22, 0x00	; 0
    4a58:	70 e0       	ldi	r23, 0x00	; 0
    4a5a:	3f d0       	rcall	.+126    	; 0x4ada <serial_create>
    4a5c:	90 93 a7 14 	sts	0x14A7, r25	; 0x8014a7 <_serial+0x1>
    4a60:	80 93 a6 14 	sts	0x14A6, r24	; 0x8014a6 <_serial>
    4a64:	0f 91       	pop	r16
    4a66:	ef 90       	pop	r14
    4a68:	cf 90       	pop	r12
    4a6a:	af 90       	pop	r10
    4a6c:	9f 90       	pop	r9
    4a6e:	8f 90       	pop	r8
    4a70:	08 95       	ret

00004a72 <mh_z19_injectCallBack>:
    4a72:	90 93 a2 14 	sts	0x14A2, r25	; 0x8014a2 <_appCallBack+0x1>
    4a76:	80 93 a1 14 	sts	0x14A1, r24	; 0x8014a1 <_appCallBack>
    4a7a:	08 95       	ret

00004a7c <mh_z19_takeMeassuring>:
    4a7c:	cf 93       	push	r28
    4a7e:	df 93       	push	r29
    4a80:	cd b7       	in	r28, 0x3d	; 61
    4a82:	de b7       	in	r29, 0x3e	; 62
    4a84:	29 97       	sbiw	r28, 0x09	; 9
    4a86:	0f b6       	in	r0, 0x3f	; 63
    4a88:	f8 94       	cli
    4a8a:	de bf       	out	0x3e, r29	; 62
    4a8c:	0f be       	out	0x3f, r0	; 63
    4a8e:	cd bf       	out	0x3d, r28	; 61
    4a90:	89 e0       	ldi	r24, 0x09	; 9
    4a92:	e2 e4       	ldi	r30, 0x42	; 66
    4a94:	f2 e0       	ldi	r31, 0x02	; 2
    4a96:	9e 01       	movw	r18, r28
    4a98:	2f 5f       	subi	r18, 0xFF	; 255
    4a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a9c:	d9 01       	movw	r26, r18
    4a9e:	01 90       	ld	r0, Z+
    4aa0:	0d 92       	st	X+, r0
    4aa2:	8a 95       	dec	r24
    4aa4:	e1 f7       	brne	.-8      	; 0x4a9e <mh_z19_takeMeassuring+0x22>
    4aa6:	10 92 a5 14 	sts	0x14A5, r1	; 0x8014a5 <_ppm+0x1>
    4aaa:	10 92 a4 14 	sts	0x14A4, r1	; 0x8014a4 <_ppm>
    4aae:	80 91 a6 14 	lds	r24, 0x14A6	; 0x8014a6 <_serial>
    4ab2:	90 91 a7 14 	lds	r25, 0x14A7	; 0x8014a7 <_serial+0x1>
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	31 f0       	breq	.+12     	; 0x4ac6 <mh_z19_takeMeassuring+0x4a>
    4aba:	42 2f       	mov	r20, r18
    4abc:	53 2f       	mov	r21, r19
    4abe:	69 e0       	ldi	r22, 0x09	; 9
    4ac0:	d8 d0       	rcall	.+432    	; 0x4c72 <serial_sendBytes>
    4ac2:	80 e0       	ldi	r24, 0x00	; 0
    4ac4:	01 c0       	rjmp	.+2      	; 0x4ac8 <mh_z19_takeMeassuring+0x4c>
    4ac6:	82 e0       	ldi	r24, 0x02	; 2
    4ac8:	29 96       	adiw	r28, 0x09	; 9
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	f8 94       	cli
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	0f be       	out	0x3f, r0	; 63
    4ad2:	cd bf       	out	0x3d, r28	; 61
    4ad4:	df 91       	pop	r29
    4ad6:	cf 91       	pop	r28
    4ad8:	08 95       	ret

00004ada <serial_create>:
    4ada:	2f 92       	push	r2
    4adc:	3f 92       	push	r3
    4ade:	4f 92       	push	r4
    4ae0:	5f 92       	push	r5
    4ae2:	6f 92       	push	r6
    4ae4:	7f 92       	push	r7
    4ae6:	8f 92       	push	r8
    4ae8:	9f 92       	push	r9
    4aea:	af 92       	push	r10
    4aec:	cf 92       	push	r12
    4aee:	ef 92       	push	r14
    4af0:	ff 92       	push	r15
    4af2:	0f 93       	push	r16
    4af4:	1f 93       	push	r17
    4af6:	cf 93       	push	r28
    4af8:	df 93       	push	r29
    4afa:	cd b7       	in	r28, 0x3d	; 61
    4afc:	de b7       	in	r29, 0x3e	; 62
    4afe:	f8 2e       	mov	r15, r24
    4b00:	2a 01       	movw	r4, r20
    4b02:	3b 01       	movw	r6, r22
    4b04:	88 e0       	ldi	r24, 0x08	; 8
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <malloc>
    4b0c:	8c 01       	movw	r16, r24
    4b0e:	8f 2d       	mov	r24, r15
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	fc 01       	movw	r30, r24
    4b14:	ee 0f       	add	r30, r30
    4b16:	ff 1f       	adc	r31, r31
    4b18:	e8 55       	subi	r30, 0x58	; 88
    4b1a:	fb 4e       	sbci	r31, 0xEB	; 235
    4b1c:	11 83       	std	Z+1, r17	; 0x01
    4b1e:	00 83       	st	Z, r16
    4b20:	01 15       	cp	r16, r1
    4b22:	11 05       	cpc	r17, r1
    4b24:	09 f4       	brne	.+2      	; 0x4b28 <serial_create+0x4e>
    4b26:	68 c0       	rjmp	.+208    	; 0x4bf8 <serial_create+0x11e>
    4b28:	88 0f       	add	r24, r24
    4b2a:	99 1f       	adc	r25, r25
    4b2c:	fc 01       	movw	r30, r24
    4b2e:	e5 5f       	subi	r30, 0xF5	; 245
    4b30:	fd 4f       	sbci	r31, 0xFD	; 253
    4b32:	80 81       	ld	r24, Z
    4b34:	91 81       	ldd	r25, Z+1	; 0x01
    4b36:	d8 01       	movw	r26, r16
    4b38:	8d 93       	st	X+, r24
    4b3a:	9c 93       	st	X, r25
    4b3c:	6c 2d       	mov	r22, r12
    4b3e:	70 e0       	ldi	r23, 0x00	; 0
    4b40:	84 e0       	ldi	r24, 0x04	; 4
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <calloc>
    4b48:	1c 01       	movw	r2, r24
    4b4a:	61 e0       	ldi	r22, 0x01	; 1
    4b4c:	70 e0       	ldi	r23, 0x00	; 0
    4b4e:	86 e0       	ldi	r24, 0x06	; 6
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <calloc>
    4b56:	7c 01       	movw	r14, r24
    4b58:	4c 2d       	mov	r20, r12
    4b5a:	b1 01       	movw	r22, r2
    4b5c:	5c d6       	rcall	.+3256   	; 0x5816 <fifo_init>
    4b5e:	f8 01       	movw	r30, r16
    4b60:	f5 82       	std	Z+5, r15	; 0x05
    4b62:	e4 82       	std	Z+4, r14	; 0x04
    4b64:	6a 2d       	mov	r22, r10
    4b66:	70 e0       	ldi	r23, 0x00	; 0
    4b68:	84 e0       	ldi	r24, 0x04	; 4
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <calloc>
    4b70:	1c 01       	movw	r2, r24
    4b72:	61 e0       	ldi	r22, 0x01	; 1
    4b74:	70 e0       	ldi	r23, 0x00	; 0
    4b76:	86 e0       	ldi	r24, 0x06	; 6
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <calloc>
    4b7e:	7c 01       	movw	r14, r24
    4b80:	4a 2d       	mov	r20, r10
    4b82:	b1 01       	movw	r22, r2
    4b84:	48 d6       	rcall	.+3216   	; 0x5816 <fifo_init>
    4b86:	d8 01       	movw	r26, r16
    4b88:	13 96       	adiw	r26, 0x03	; 3
    4b8a:	fc 92       	st	X, r15
    4b8c:	ee 92       	st	-X, r14
    4b8e:	12 97       	sbiw	r26, 0x02	; 2
    4b90:	17 96       	adiw	r26, 0x07	; 7
    4b92:	9c 92       	st	X, r9
    4b94:	8e 92       	st	-X, r8
    4b96:	16 97       	sbiw	r26, 0x06	; 6
    4b98:	ff b6       	in	r15, 0x3f	; 63
    4b9a:	f8 94       	cli
    4b9c:	ed 91       	ld	r30, X+
    4b9e:	fc 91       	ld	r31, X
    4ba0:	11 97       	sbiw	r26, 0x01	; 1
    4ba2:	36 97       	sbiw	r30, 0x06	; 6
    4ba4:	80 81       	ld	r24, Z
    4ba6:	82 60       	ori	r24, 0x02	; 2
    4ba8:	80 83       	st	Z, r24
    4baa:	8d 90       	ld	r8, X+
    4bac:	9c 90       	ld	r9, X
    4bae:	c3 01       	movw	r24, r6
    4bb0:	b2 01       	movw	r22, r4
    4bb2:	4b d7       	rcall	.+3734   	; 0x5a4a <__floatunsisf>
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	40 e0       	ldi	r20, 0x00	; 0
    4bba:	51 e4       	ldi	r21, 0x41	; 65
    4bbc:	d4 d7       	rcall	.+4008   	; 0x5b66 <__mulsf3>
    4bbe:	9b 01       	movw	r18, r22
    4bc0:	ac 01       	movw	r20, r24
    4bc2:	60 e0       	ldi	r22, 0x00	; 0
    4bc4:	74 e2       	ldi	r23, 0x24	; 36
    4bc6:	84 e7       	ldi	r24, 0x74	; 116
    4bc8:	9b e4       	ldi	r25, 0x4B	; 75
    4bca:	a6 d6       	rcall	.+3404   	; 0x5918 <__divsf3>
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	40 e8       	ldi	r20, 0x80	; 128
    4bd2:	5f e3       	ldi	r21, 0x3F	; 63
    4bd4:	3c d6       	rcall	.+3192   	; 0x584e <__subsf3>
    4bd6:	0d d7       	rcall	.+3610   	; 0x59f2 <__fixunssfsi>
    4bd8:	f4 01       	movw	r30, r8
    4bda:	32 97       	sbiw	r30, 0x02	; 2
    4bdc:	60 83       	st	Z, r22
    4bde:	d8 01       	movw	r26, r16
    4be0:	ed 91       	ld	r30, X+
    4be2:	fc 91       	ld	r31, X
    4be4:	11 97       	sbiw	r26, 0x01	; 1
    4be6:	35 97       	sbiw	r30, 0x05	; 5
    4be8:	88 e9       	ldi	r24, 0x98	; 152
    4bea:	80 83       	st	Z, r24
    4bec:	ed 91       	ld	r30, X+
    4bee:	fc 91       	ld	r31, X
    4bf0:	34 97       	sbiw	r30, 0x04	; 4
    4bf2:	86 e0       	ldi	r24, 0x06	; 6
    4bf4:	80 83       	st	Z, r24
    4bf6:	ff be       	out	0x3f, r15	; 63
    4bf8:	c8 01       	movw	r24, r16
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	1f 91       	pop	r17
    4c00:	0f 91       	pop	r16
    4c02:	ff 90       	pop	r15
    4c04:	ef 90       	pop	r14
    4c06:	cf 90       	pop	r12
    4c08:	af 90       	pop	r10
    4c0a:	9f 90       	pop	r9
    4c0c:	8f 90       	pop	r8
    4c0e:	7f 90       	pop	r7
    4c10:	6f 90       	pop	r6
    4c12:	5f 90       	pop	r5
    4c14:	4f 90       	pop	r4
    4c16:	3f 90       	pop	r3
    4c18:	2f 90       	pop	r2
    4c1a:	08 95       	ret

00004c1c <serial_sendByte>:
    4c1c:	cf 93       	push	r28
    4c1e:	df 93       	push	r29
    4c20:	dc 01       	movw	r26, r24
    4c22:	89 2b       	or	r24, r25
    4c24:	01 f1       	breq	.+64     	; 0x4c66 <serial_sendByte+0x4a>
    4c26:	12 96       	adiw	r26, 0x02	; 2
    4c28:	ed 91       	ld	r30, X+
    4c2a:	fc 91       	ld	r31, X
    4c2c:	13 97       	sbiw	r26, 0x03	; 3
    4c2e:	93 81       	ldd	r25, Z+3	; 0x03
    4c30:	82 81       	ldd	r24, Z+2	; 0x02
    4c32:	25 81       	ldd	r18, Z+5	; 0x05
    4c34:	98 1b       	sub	r25, r24
    4c36:	92 23       	and	r25, r18
    4c38:	84 81       	ldd	r24, Z+4	; 0x04
    4c3a:	98 17       	cp	r25, r24
    4c3c:	b1 f0       	breq	.+44     	; 0x4c6a <serial_sendByte+0x4e>
    4c3e:	83 81       	ldd	r24, Z+3	; 0x03
    4c40:	26 95       	lsr	r18
    4c42:	28 23       	and	r18, r24
    4c44:	c0 81       	ld	r28, Z
    4c46:	d1 81       	ldd	r29, Z+1	; 0x01
    4c48:	c2 0f       	add	r28, r18
    4c4a:	d1 1d       	adc	r29, r1
    4c4c:	68 83       	st	Y, r22
    4c4e:	8f 5f       	subi	r24, 0xFF	; 255
    4c50:	95 81       	ldd	r25, Z+5	; 0x05
    4c52:	89 23       	and	r24, r25
    4c54:	83 83       	std	Z+3, r24	; 0x03
    4c56:	ed 91       	ld	r30, X+
    4c58:	fc 91       	ld	r31, X
    4c5a:	35 97       	sbiw	r30, 0x05	; 5
    4c5c:	80 81       	ld	r24, Z
    4c5e:	80 62       	ori	r24, 0x20	; 32
    4c60:	80 83       	st	Z, r24
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	03 c0       	rjmp	.+6      	; 0x4c6c <serial_sendByte+0x50>
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	01 c0       	rjmp	.+2      	; 0x4c6c <serial_sendByte+0x50>
    4c6a:	82 e0       	ldi	r24, 0x02	; 2
    4c6c:	df 91       	pop	r29
    4c6e:	cf 91       	pop	r28
    4c70:	08 95       	ret

00004c72 <serial_sendBytes>:
    4c72:	ef 92       	push	r14
    4c74:	ff 92       	push	r15
    4c76:	0f 93       	push	r16
    4c78:	1f 93       	push	r17
    4c7a:	cf 93       	push	r28
    4c7c:	df 93       	push	r29
    4c7e:	7c 01       	movw	r14, r24
    4c80:	00 97       	sbiw	r24, 0x00	; 0
    4c82:	09 f4       	brne	.+2      	; 0x4c86 <serial_sendBytes+0x14>
    4c84:	41 c0       	rjmp	.+130    	; 0x4d08 <serial_sendBytes+0x96>
    4c86:	dc 01       	movw	r26, r24
    4c88:	12 96       	adiw	r26, 0x02	; 2
    4c8a:	ed 91       	ld	r30, X+
    4c8c:	fc 91       	ld	r31, X
    4c8e:	13 97       	sbiw	r26, 0x03	; 3
    4c90:	93 81       	ldd	r25, Z+3	; 0x03
    4c92:	82 81       	ldd	r24, Z+2	; 0x02
    4c94:	98 1b       	sub	r25, r24
    4c96:	85 81       	ldd	r24, Z+5	; 0x05
    4c98:	98 23       	and	r25, r24
    4c9a:	84 81       	ldd	r24, Z+4	; 0x04
    4c9c:	89 1b       	sub	r24, r25
    4c9e:	86 17       	cp	r24, r22
    4ca0:	a8 f1       	brcs	.+106    	; 0x4d0c <serial_sendBytes+0x9a>
    4ca2:	66 23       	and	r22, r22
    4ca4:	41 f1       	breq	.+80     	; 0x4cf6 <serial_sendBytes+0x84>
    4ca6:	84 2f       	mov	r24, r20
    4ca8:	95 2f       	mov	r25, r21
    4caa:	dc 01       	movw	r26, r24
    4cac:	61 50       	subi	r22, 0x01	; 1
    4cae:	46 2f       	mov	r20, r22
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	4f 5f       	subi	r20, 0xFF	; 255
    4cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb6:	48 0f       	add	r20, r24
    4cb8:	59 1f       	adc	r21, r25
    4cba:	e7 01       	movw	r28, r14
    4cbc:	ea 81       	ldd	r30, Y+2	; 0x02
    4cbe:	fb 81       	ldd	r31, Y+3	; 0x03
    4cc0:	93 81       	ldd	r25, Z+3	; 0x03
    4cc2:	82 81       	ldd	r24, Z+2	; 0x02
    4cc4:	25 81       	ldd	r18, Z+5	; 0x05
    4cc6:	98 1b       	sub	r25, r24
    4cc8:	92 23       	and	r25, r18
    4cca:	84 81       	ldd	r24, Z+4	; 0x04
    4ccc:	98 17       	cp	r25, r24
    4cce:	79 f0       	breq	.+30     	; 0x4cee <serial_sendBytes+0x7c>
    4cd0:	8c 91       	ld	r24, X
    4cd2:	93 81       	ldd	r25, Z+3	; 0x03
    4cd4:	26 95       	lsr	r18
    4cd6:	29 23       	and	r18, r25
    4cd8:	60 81       	ld	r22, Z
    4cda:	71 81       	ldd	r23, Z+1	; 0x01
    4cdc:	8b 01       	movw	r16, r22
    4cde:	02 0f       	add	r16, r18
    4ce0:	11 1d       	adc	r17, r1
    4ce2:	e8 01       	movw	r28, r16
    4ce4:	88 83       	st	Y, r24
    4ce6:	9f 5f       	subi	r25, 0xFF	; 255
    4ce8:	85 81       	ldd	r24, Z+5	; 0x05
    4cea:	98 23       	and	r25, r24
    4cec:	93 83       	std	Z+3, r25	; 0x03
    4cee:	11 96       	adiw	r26, 0x01	; 1
    4cf0:	a4 17       	cp	r26, r20
    4cf2:	b5 07       	cpc	r27, r21
    4cf4:	11 f7       	brne	.-60     	; 0x4cba <serial_sendBytes+0x48>
    4cf6:	d7 01       	movw	r26, r14
    4cf8:	ed 91       	ld	r30, X+
    4cfa:	fc 91       	ld	r31, X
    4cfc:	35 97       	sbiw	r30, 0x05	; 5
    4cfe:	80 81       	ld	r24, Z
    4d00:	80 62       	ori	r24, 0x20	; 32
    4d02:	80 83       	st	Z, r24
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	03 c0       	rjmp	.+6      	; 0x4d0e <serial_sendBytes+0x9c>
    4d08:	81 e0       	ldi	r24, 0x01	; 1
    4d0a:	01 c0       	rjmp	.+2      	; 0x4d0e <serial_sendBytes+0x9c>
    4d0c:	82 e0       	ldi	r24, 0x02	; 2
    4d0e:	df 91       	pop	r29
    4d10:	cf 91       	pop	r28
    4d12:	1f 91       	pop	r17
    4d14:	0f 91       	pop	r16
    4d16:	ff 90       	pop	r15
    4d18:	ef 90       	pop	r14
    4d1a:	08 95       	ret

00004d1c <serial_getByte>:
    4d1c:	00 97       	sbiw	r24, 0x00	; 0
    4d1e:	d1 f0       	breq	.+52     	; 0x4d54 <serial_getByte+0x38>
    4d20:	dc 01       	movw	r26, r24
    4d22:	14 96       	adiw	r26, 0x04	; 4
    4d24:	ed 91       	ld	r30, X+
    4d26:	fc 91       	ld	r31, X
    4d28:	15 97       	sbiw	r26, 0x05	; 5
    4d2a:	93 81       	ldd	r25, Z+3	; 0x03
    4d2c:	82 81       	ldd	r24, Z+2	; 0x02
    4d2e:	98 17       	cp	r25, r24
    4d30:	99 f0       	breq	.+38     	; 0x4d58 <serial_getByte+0x3c>
    4d32:	92 81       	ldd	r25, Z+2	; 0x02
    4d34:	85 81       	ldd	r24, Z+5	; 0x05
    4d36:	86 95       	lsr	r24
    4d38:	89 23       	and	r24, r25
    4d3a:	a0 81       	ld	r26, Z
    4d3c:	b1 81       	ldd	r27, Z+1	; 0x01
    4d3e:	a8 0f       	add	r26, r24
    4d40:	b1 1d       	adc	r27, r1
    4d42:	8c 91       	ld	r24, X
    4d44:	db 01       	movw	r26, r22
    4d46:	8c 93       	st	X, r24
    4d48:	9f 5f       	subi	r25, 0xFF	; 255
    4d4a:	85 81       	ldd	r24, Z+5	; 0x05
    4d4c:	98 23       	and	r25, r24
    4d4e:	92 83       	std	Z+2, r25	; 0x02
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	08 95       	ret
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	08 95       	ret
    4d58:	83 e0       	ldi	r24, 0x03	; 3
    4d5a:	08 95       	ret

00004d5c <__vector_25>:
    4d5c:	1f 92       	push	r1
    4d5e:	0f 92       	push	r0
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	0f 92       	push	r0
    4d64:	11 24       	eor	r1, r1
    4d66:	0b b6       	in	r0, 0x3b	; 59
    4d68:	0f 92       	push	r0
    4d6a:	2f 93       	push	r18
    4d6c:	3f 93       	push	r19
    4d6e:	4f 93       	push	r20
    4d70:	5f 93       	push	r21
    4d72:	6f 93       	push	r22
    4d74:	7f 93       	push	r23
    4d76:	8f 93       	push	r24
    4d78:	9f 93       	push	r25
    4d7a:	af 93       	push	r26
    4d7c:	bf 93       	push	r27
    4d7e:	cf 93       	push	r28
    4d80:	df 93       	push	r29
    4d82:	ef 93       	push	r30
    4d84:	ff 93       	push	r31
    4d86:	a0 91 a8 14 	lds	r26, 0x14A8	; 0x8014a8 <_ser_handle>
    4d8a:	b0 91 a9 14 	lds	r27, 0x14A9	; 0x8014a9 <_ser_handle+0x1>
    4d8e:	10 97       	sbiw	r26, 0x00	; 0
    4d90:	11 f1       	breq	.+68     	; 0x4dd6 <__vector_25+0x7a>
    4d92:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4d96:	14 96       	adiw	r26, 0x04	; 4
    4d98:	ed 91       	ld	r30, X+
    4d9a:	fc 91       	ld	r31, X
    4d9c:	15 97       	sbiw	r26, 0x05	; 5
    4d9e:	93 81       	ldd	r25, Z+3	; 0x03
    4da0:	82 81       	ldd	r24, Z+2	; 0x02
    4da2:	25 81       	ldd	r18, Z+5	; 0x05
    4da4:	98 1b       	sub	r25, r24
    4da6:	92 23       	and	r25, r18
    4da8:	84 81       	ldd	r24, Z+4	; 0x04
    4daa:	98 17       	cp	r25, r24
    4dac:	61 f0       	breq	.+24     	; 0x4dc6 <__vector_25+0x6a>
    4dae:	83 81       	ldd	r24, Z+3	; 0x03
    4db0:	26 95       	lsr	r18
    4db2:	28 23       	and	r18, r24
    4db4:	c0 81       	ld	r28, Z
    4db6:	d1 81       	ldd	r29, Z+1	; 0x01
    4db8:	c2 0f       	add	r28, r18
    4dba:	d1 1d       	adc	r29, r1
    4dbc:	68 83       	st	Y, r22
    4dbe:	8f 5f       	subi	r24, 0xFF	; 255
    4dc0:	95 81       	ldd	r25, Z+5	; 0x05
    4dc2:	89 23       	and	r24, r25
    4dc4:	83 83       	std	Z+3, r24	; 0x03
    4dc6:	16 96       	adiw	r26, 0x06	; 6
    4dc8:	ed 91       	ld	r30, X+
    4dca:	fc 91       	ld	r31, X
    4dcc:	17 97       	sbiw	r26, 0x07	; 7
    4dce:	30 97       	sbiw	r30, 0x00	; 0
    4dd0:	11 f0       	breq	.+4      	; 0x4dd6 <__vector_25+0x7a>
    4dd2:	cd 01       	movw	r24, r26
    4dd4:	19 95       	eicall
    4dd6:	ff 91       	pop	r31
    4dd8:	ef 91       	pop	r30
    4dda:	df 91       	pop	r29
    4ddc:	cf 91       	pop	r28
    4dde:	bf 91       	pop	r27
    4de0:	af 91       	pop	r26
    4de2:	9f 91       	pop	r25
    4de4:	8f 91       	pop	r24
    4de6:	7f 91       	pop	r23
    4de8:	6f 91       	pop	r22
    4dea:	5f 91       	pop	r21
    4dec:	4f 91       	pop	r20
    4dee:	3f 91       	pop	r19
    4df0:	2f 91       	pop	r18
    4df2:	0f 90       	pop	r0
    4df4:	0b be       	out	0x3b, r0	; 59
    4df6:	0f 90       	pop	r0
    4df8:	0f be       	out	0x3f, r0	; 63
    4dfa:	0f 90       	pop	r0
    4dfc:	1f 90       	pop	r1
    4dfe:	18 95       	reti

00004e00 <__vector_26>:
    4e00:	1f 92       	push	r1
    4e02:	0f 92       	push	r0
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	0f 92       	push	r0
    4e08:	11 24       	eor	r1, r1
    4e0a:	0b b6       	in	r0, 0x3b	; 59
    4e0c:	0f 92       	push	r0
    4e0e:	2f 93       	push	r18
    4e10:	8f 93       	push	r24
    4e12:	9f 93       	push	r25
    4e14:	af 93       	push	r26
    4e16:	bf 93       	push	r27
    4e18:	ef 93       	push	r30
    4e1a:	ff 93       	push	r31
    4e1c:	e0 91 a8 14 	lds	r30, 0x14A8	; 0x8014a8 <_ser_handle>
    4e20:	f0 91 a9 14 	lds	r31, 0x14A9	; 0x8014a9 <_ser_handle+0x1>
    4e24:	30 97       	sbiw	r30, 0x00	; 0
    4e26:	b9 f0       	breq	.+46     	; 0x4e56 <__vector_26+0x56>
    4e28:	02 80       	ldd	r0, Z+2	; 0x02
    4e2a:	f3 81       	ldd	r31, Z+3	; 0x03
    4e2c:	e0 2d       	mov	r30, r0
    4e2e:	93 81       	ldd	r25, Z+3	; 0x03
    4e30:	82 81       	ldd	r24, Z+2	; 0x02
    4e32:	98 17       	cp	r25, r24
    4e34:	b1 f0       	breq	.+44     	; 0x4e62 <__vector_26+0x62>
    4e36:	92 81       	ldd	r25, Z+2	; 0x02
    4e38:	85 81       	ldd	r24, Z+5	; 0x05
    4e3a:	28 2f       	mov	r18, r24
    4e3c:	26 95       	lsr	r18
    4e3e:	29 23       	and	r18, r25
    4e40:	a0 81       	ld	r26, Z
    4e42:	b1 81       	ldd	r27, Z+1	; 0x01
    4e44:	a2 0f       	add	r26, r18
    4e46:	b1 1d       	adc	r27, r1
    4e48:	2c 91       	ld	r18, X
    4e4a:	9f 5f       	subi	r25, 0xFF	; 255
    4e4c:	89 23       	and	r24, r25
    4e4e:	82 83       	std	Z+2, r24	; 0x02
    4e50:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4e54:	0b c0       	rjmp	.+22     	; 0x4e6c <__vector_26+0x6c>
    4e56:	e1 ec       	ldi	r30, 0xC1	; 193
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	80 81       	ld	r24, Z
    4e5c:	8f 7d       	andi	r24, 0xDF	; 223
    4e5e:	80 83       	st	Z, r24
    4e60:	05 c0       	rjmp	.+10     	; 0x4e6c <__vector_26+0x6c>
    4e62:	e1 ec       	ldi	r30, 0xC1	; 193
    4e64:	f0 e0       	ldi	r31, 0x00	; 0
    4e66:	80 81       	ld	r24, Z
    4e68:	8f 7d       	andi	r24, 0xDF	; 223
    4e6a:	80 83       	st	Z, r24
    4e6c:	ff 91       	pop	r31
    4e6e:	ef 91       	pop	r30
    4e70:	bf 91       	pop	r27
    4e72:	af 91       	pop	r26
    4e74:	9f 91       	pop	r25
    4e76:	8f 91       	pop	r24
    4e78:	2f 91       	pop	r18
    4e7a:	0f 90       	pop	r0
    4e7c:	0b be       	out	0x3b, r0	; 59
    4e7e:	0f 90       	pop	r0
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	0f 90       	pop	r0
    4e84:	1f 90       	pop	r1
    4e86:	18 95       	reti

00004e88 <__vector_36>:
    4e88:	1f 92       	push	r1
    4e8a:	0f 92       	push	r0
    4e8c:	0f b6       	in	r0, 0x3f	; 63
    4e8e:	0f 92       	push	r0
    4e90:	11 24       	eor	r1, r1
    4e92:	0b b6       	in	r0, 0x3b	; 59
    4e94:	0f 92       	push	r0
    4e96:	2f 93       	push	r18
    4e98:	3f 93       	push	r19
    4e9a:	4f 93       	push	r20
    4e9c:	5f 93       	push	r21
    4e9e:	6f 93       	push	r22
    4ea0:	7f 93       	push	r23
    4ea2:	8f 93       	push	r24
    4ea4:	9f 93       	push	r25
    4ea6:	af 93       	push	r26
    4ea8:	bf 93       	push	r27
    4eaa:	cf 93       	push	r28
    4eac:	df 93       	push	r29
    4eae:	ef 93       	push	r30
    4eb0:	ff 93       	push	r31
    4eb2:	a0 91 aa 14 	lds	r26, 0x14AA	; 0x8014aa <_ser_handle+0x2>
    4eb6:	b0 91 ab 14 	lds	r27, 0x14AB	; 0x8014ab <_ser_handle+0x3>
    4eba:	10 97       	sbiw	r26, 0x00	; 0
    4ebc:	11 f1       	breq	.+68     	; 0x4f02 <__vector_36+0x7a>
    4ebe:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4ec2:	14 96       	adiw	r26, 0x04	; 4
    4ec4:	ed 91       	ld	r30, X+
    4ec6:	fc 91       	ld	r31, X
    4ec8:	15 97       	sbiw	r26, 0x05	; 5
    4eca:	93 81       	ldd	r25, Z+3	; 0x03
    4ecc:	82 81       	ldd	r24, Z+2	; 0x02
    4ece:	25 81       	ldd	r18, Z+5	; 0x05
    4ed0:	98 1b       	sub	r25, r24
    4ed2:	92 23       	and	r25, r18
    4ed4:	84 81       	ldd	r24, Z+4	; 0x04
    4ed6:	98 17       	cp	r25, r24
    4ed8:	61 f0       	breq	.+24     	; 0x4ef2 <__vector_36+0x6a>
    4eda:	83 81       	ldd	r24, Z+3	; 0x03
    4edc:	26 95       	lsr	r18
    4ede:	28 23       	and	r18, r24
    4ee0:	c0 81       	ld	r28, Z
    4ee2:	d1 81       	ldd	r29, Z+1	; 0x01
    4ee4:	c2 0f       	add	r28, r18
    4ee6:	d1 1d       	adc	r29, r1
    4ee8:	68 83       	st	Y, r22
    4eea:	8f 5f       	subi	r24, 0xFF	; 255
    4eec:	95 81       	ldd	r25, Z+5	; 0x05
    4eee:	89 23       	and	r24, r25
    4ef0:	83 83       	std	Z+3, r24	; 0x03
    4ef2:	16 96       	adiw	r26, 0x06	; 6
    4ef4:	ed 91       	ld	r30, X+
    4ef6:	fc 91       	ld	r31, X
    4ef8:	17 97       	sbiw	r26, 0x07	; 7
    4efa:	30 97       	sbiw	r30, 0x00	; 0
    4efc:	11 f0       	breq	.+4      	; 0x4f02 <__vector_36+0x7a>
    4efe:	cd 01       	movw	r24, r26
    4f00:	19 95       	eicall
    4f02:	ff 91       	pop	r31
    4f04:	ef 91       	pop	r30
    4f06:	df 91       	pop	r29
    4f08:	cf 91       	pop	r28
    4f0a:	bf 91       	pop	r27
    4f0c:	af 91       	pop	r26
    4f0e:	9f 91       	pop	r25
    4f10:	8f 91       	pop	r24
    4f12:	7f 91       	pop	r23
    4f14:	6f 91       	pop	r22
    4f16:	5f 91       	pop	r21
    4f18:	4f 91       	pop	r20
    4f1a:	3f 91       	pop	r19
    4f1c:	2f 91       	pop	r18
    4f1e:	0f 90       	pop	r0
    4f20:	0b be       	out	0x3b, r0	; 59
    4f22:	0f 90       	pop	r0
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	0f 90       	pop	r0
    4f28:	1f 90       	pop	r1
    4f2a:	18 95       	reti

00004f2c <__vector_37>:
    4f2c:	1f 92       	push	r1
    4f2e:	0f 92       	push	r0
    4f30:	0f b6       	in	r0, 0x3f	; 63
    4f32:	0f 92       	push	r0
    4f34:	11 24       	eor	r1, r1
    4f36:	0b b6       	in	r0, 0x3b	; 59
    4f38:	0f 92       	push	r0
    4f3a:	2f 93       	push	r18
    4f3c:	8f 93       	push	r24
    4f3e:	9f 93       	push	r25
    4f40:	af 93       	push	r26
    4f42:	bf 93       	push	r27
    4f44:	ef 93       	push	r30
    4f46:	ff 93       	push	r31
    4f48:	e0 91 aa 14 	lds	r30, 0x14AA	; 0x8014aa <_ser_handle+0x2>
    4f4c:	f0 91 ab 14 	lds	r31, 0x14AB	; 0x8014ab <_ser_handle+0x3>
    4f50:	30 97       	sbiw	r30, 0x00	; 0
    4f52:	b9 f0       	breq	.+46     	; 0x4f82 <__vector_37+0x56>
    4f54:	02 80       	ldd	r0, Z+2	; 0x02
    4f56:	f3 81       	ldd	r31, Z+3	; 0x03
    4f58:	e0 2d       	mov	r30, r0
    4f5a:	93 81       	ldd	r25, Z+3	; 0x03
    4f5c:	82 81       	ldd	r24, Z+2	; 0x02
    4f5e:	98 17       	cp	r25, r24
    4f60:	b1 f0       	breq	.+44     	; 0x4f8e <__vector_37+0x62>
    4f62:	92 81       	ldd	r25, Z+2	; 0x02
    4f64:	85 81       	ldd	r24, Z+5	; 0x05
    4f66:	28 2f       	mov	r18, r24
    4f68:	26 95       	lsr	r18
    4f6a:	29 23       	and	r18, r25
    4f6c:	a0 81       	ld	r26, Z
    4f6e:	b1 81       	ldd	r27, Z+1	; 0x01
    4f70:	a2 0f       	add	r26, r18
    4f72:	b1 1d       	adc	r27, r1
    4f74:	2c 91       	ld	r18, X
    4f76:	9f 5f       	subi	r25, 0xFF	; 255
    4f78:	89 23       	and	r24, r25
    4f7a:	82 83       	std	Z+2, r24	; 0x02
    4f7c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4f80:	0b c0       	rjmp	.+22     	; 0x4f98 <__vector_37+0x6c>
    4f82:	e9 ec       	ldi	r30, 0xC9	; 201
    4f84:	f0 e0       	ldi	r31, 0x00	; 0
    4f86:	80 81       	ld	r24, Z
    4f88:	8f 7d       	andi	r24, 0xDF	; 223
    4f8a:	80 83       	st	Z, r24
    4f8c:	05 c0       	rjmp	.+10     	; 0x4f98 <__vector_37+0x6c>
    4f8e:	e9 ec       	ldi	r30, 0xC9	; 201
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	80 81       	ld	r24, Z
    4f94:	8f 7d       	andi	r24, 0xDF	; 223
    4f96:	80 83       	st	Z, r24
    4f98:	ff 91       	pop	r31
    4f9a:	ef 91       	pop	r30
    4f9c:	bf 91       	pop	r27
    4f9e:	af 91       	pop	r26
    4fa0:	9f 91       	pop	r25
    4fa2:	8f 91       	pop	r24
    4fa4:	2f 91       	pop	r18
    4fa6:	0f 90       	pop	r0
    4fa8:	0b be       	out	0x3b, r0	; 59
    4faa:	0f 90       	pop	r0
    4fac:	0f be       	out	0x3f, r0	; 63
    4fae:	0f 90       	pop	r0
    4fb0:	1f 90       	pop	r1
    4fb2:	18 95       	reti

00004fb4 <__vector_51>:
    4fb4:	1f 92       	push	r1
    4fb6:	0f 92       	push	r0
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	0f 92       	push	r0
    4fbc:	11 24       	eor	r1, r1
    4fbe:	0b b6       	in	r0, 0x3b	; 59
    4fc0:	0f 92       	push	r0
    4fc2:	2f 93       	push	r18
    4fc4:	3f 93       	push	r19
    4fc6:	4f 93       	push	r20
    4fc8:	5f 93       	push	r21
    4fca:	6f 93       	push	r22
    4fcc:	7f 93       	push	r23
    4fce:	8f 93       	push	r24
    4fd0:	9f 93       	push	r25
    4fd2:	af 93       	push	r26
    4fd4:	bf 93       	push	r27
    4fd6:	cf 93       	push	r28
    4fd8:	df 93       	push	r29
    4fda:	ef 93       	push	r30
    4fdc:	ff 93       	push	r31
    4fde:	a0 91 ac 14 	lds	r26, 0x14AC	; 0x8014ac <_ser_handle+0x4>
    4fe2:	b0 91 ad 14 	lds	r27, 0x14AD	; 0x8014ad <_ser_handle+0x5>
    4fe6:	10 97       	sbiw	r26, 0x00	; 0
    4fe8:	11 f1       	breq	.+68     	; 0x502e <__vector_51+0x7a>
    4fea:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4fee:	14 96       	adiw	r26, 0x04	; 4
    4ff0:	ed 91       	ld	r30, X+
    4ff2:	fc 91       	ld	r31, X
    4ff4:	15 97       	sbiw	r26, 0x05	; 5
    4ff6:	93 81       	ldd	r25, Z+3	; 0x03
    4ff8:	82 81       	ldd	r24, Z+2	; 0x02
    4ffa:	25 81       	ldd	r18, Z+5	; 0x05
    4ffc:	98 1b       	sub	r25, r24
    4ffe:	92 23       	and	r25, r18
    5000:	84 81       	ldd	r24, Z+4	; 0x04
    5002:	98 17       	cp	r25, r24
    5004:	61 f0       	breq	.+24     	; 0x501e <__vector_51+0x6a>
    5006:	83 81       	ldd	r24, Z+3	; 0x03
    5008:	26 95       	lsr	r18
    500a:	28 23       	and	r18, r24
    500c:	c0 81       	ld	r28, Z
    500e:	d1 81       	ldd	r29, Z+1	; 0x01
    5010:	c2 0f       	add	r28, r18
    5012:	d1 1d       	adc	r29, r1
    5014:	68 83       	st	Y, r22
    5016:	8f 5f       	subi	r24, 0xFF	; 255
    5018:	95 81       	ldd	r25, Z+5	; 0x05
    501a:	89 23       	and	r24, r25
    501c:	83 83       	std	Z+3, r24	; 0x03
    501e:	16 96       	adiw	r26, 0x06	; 6
    5020:	ed 91       	ld	r30, X+
    5022:	fc 91       	ld	r31, X
    5024:	17 97       	sbiw	r26, 0x07	; 7
    5026:	30 97       	sbiw	r30, 0x00	; 0
    5028:	11 f0       	breq	.+4      	; 0x502e <__vector_51+0x7a>
    502a:	cd 01       	movw	r24, r26
    502c:	19 95       	eicall
    502e:	ff 91       	pop	r31
    5030:	ef 91       	pop	r30
    5032:	df 91       	pop	r29
    5034:	cf 91       	pop	r28
    5036:	bf 91       	pop	r27
    5038:	af 91       	pop	r26
    503a:	9f 91       	pop	r25
    503c:	8f 91       	pop	r24
    503e:	7f 91       	pop	r23
    5040:	6f 91       	pop	r22
    5042:	5f 91       	pop	r21
    5044:	4f 91       	pop	r20
    5046:	3f 91       	pop	r19
    5048:	2f 91       	pop	r18
    504a:	0f 90       	pop	r0
    504c:	0b be       	out	0x3b, r0	; 59
    504e:	0f 90       	pop	r0
    5050:	0f be       	out	0x3f, r0	; 63
    5052:	0f 90       	pop	r0
    5054:	1f 90       	pop	r1
    5056:	18 95       	reti

00005058 <__vector_52>:
    5058:	1f 92       	push	r1
    505a:	0f 92       	push	r0
    505c:	0f b6       	in	r0, 0x3f	; 63
    505e:	0f 92       	push	r0
    5060:	11 24       	eor	r1, r1
    5062:	0b b6       	in	r0, 0x3b	; 59
    5064:	0f 92       	push	r0
    5066:	2f 93       	push	r18
    5068:	8f 93       	push	r24
    506a:	9f 93       	push	r25
    506c:	af 93       	push	r26
    506e:	bf 93       	push	r27
    5070:	ef 93       	push	r30
    5072:	ff 93       	push	r31
    5074:	e0 91 ac 14 	lds	r30, 0x14AC	; 0x8014ac <_ser_handle+0x4>
    5078:	f0 91 ad 14 	lds	r31, 0x14AD	; 0x8014ad <_ser_handle+0x5>
    507c:	30 97       	sbiw	r30, 0x00	; 0
    507e:	b9 f0       	breq	.+46     	; 0x50ae <__vector_52+0x56>
    5080:	02 80       	ldd	r0, Z+2	; 0x02
    5082:	f3 81       	ldd	r31, Z+3	; 0x03
    5084:	e0 2d       	mov	r30, r0
    5086:	93 81       	ldd	r25, Z+3	; 0x03
    5088:	82 81       	ldd	r24, Z+2	; 0x02
    508a:	98 17       	cp	r25, r24
    508c:	b1 f0       	breq	.+44     	; 0x50ba <__vector_52+0x62>
    508e:	92 81       	ldd	r25, Z+2	; 0x02
    5090:	85 81       	ldd	r24, Z+5	; 0x05
    5092:	28 2f       	mov	r18, r24
    5094:	26 95       	lsr	r18
    5096:	29 23       	and	r18, r25
    5098:	a0 81       	ld	r26, Z
    509a:	b1 81       	ldd	r27, Z+1	; 0x01
    509c:	a2 0f       	add	r26, r18
    509e:	b1 1d       	adc	r27, r1
    50a0:	2c 91       	ld	r18, X
    50a2:	9f 5f       	subi	r25, 0xFF	; 255
    50a4:	89 23       	and	r24, r25
    50a6:	82 83       	std	Z+2, r24	; 0x02
    50a8:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    50ac:	0b c0       	rjmp	.+22     	; 0x50c4 <__vector_52+0x6c>
    50ae:	e1 ed       	ldi	r30, 0xD1	; 209
    50b0:	f0 e0       	ldi	r31, 0x00	; 0
    50b2:	80 81       	ld	r24, Z
    50b4:	8f 7d       	andi	r24, 0xDF	; 223
    50b6:	80 83       	st	Z, r24
    50b8:	05 c0       	rjmp	.+10     	; 0x50c4 <__vector_52+0x6c>
    50ba:	e1 ed       	ldi	r30, 0xD1	; 209
    50bc:	f0 e0       	ldi	r31, 0x00	; 0
    50be:	80 81       	ld	r24, Z
    50c0:	8f 7d       	andi	r24, 0xDF	; 223
    50c2:	80 83       	st	Z, r24
    50c4:	ff 91       	pop	r31
    50c6:	ef 91       	pop	r30
    50c8:	bf 91       	pop	r27
    50ca:	af 91       	pop	r26
    50cc:	9f 91       	pop	r25
    50ce:	8f 91       	pop	r24
    50d0:	2f 91       	pop	r18
    50d2:	0f 90       	pop	r0
    50d4:	0b be       	out	0x3b, r0	; 59
    50d6:	0f 90       	pop	r0
    50d8:	0f be       	out	0x3f, r0	; 63
    50da:	0f 90       	pop	r0
    50dc:	1f 90       	pop	r1
    50de:	18 95       	reti

000050e0 <__vector_54>:
    50e0:	1f 92       	push	r1
    50e2:	0f 92       	push	r0
    50e4:	0f b6       	in	r0, 0x3f	; 63
    50e6:	0f 92       	push	r0
    50e8:	11 24       	eor	r1, r1
    50ea:	0b b6       	in	r0, 0x3b	; 59
    50ec:	0f 92       	push	r0
    50ee:	2f 93       	push	r18
    50f0:	3f 93       	push	r19
    50f2:	4f 93       	push	r20
    50f4:	5f 93       	push	r21
    50f6:	6f 93       	push	r22
    50f8:	7f 93       	push	r23
    50fa:	8f 93       	push	r24
    50fc:	9f 93       	push	r25
    50fe:	af 93       	push	r26
    5100:	bf 93       	push	r27
    5102:	cf 93       	push	r28
    5104:	df 93       	push	r29
    5106:	ef 93       	push	r30
    5108:	ff 93       	push	r31
    510a:	a0 91 ae 14 	lds	r26, 0x14AE	; 0x8014ae <_ser_handle+0x6>
    510e:	b0 91 af 14 	lds	r27, 0x14AF	; 0x8014af <_ser_handle+0x7>
    5112:	10 97       	sbiw	r26, 0x00	; 0
    5114:	11 f1       	breq	.+68     	; 0x515a <__vector_54+0x7a>
    5116:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    511a:	14 96       	adiw	r26, 0x04	; 4
    511c:	ed 91       	ld	r30, X+
    511e:	fc 91       	ld	r31, X
    5120:	15 97       	sbiw	r26, 0x05	; 5
    5122:	93 81       	ldd	r25, Z+3	; 0x03
    5124:	82 81       	ldd	r24, Z+2	; 0x02
    5126:	25 81       	ldd	r18, Z+5	; 0x05
    5128:	98 1b       	sub	r25, r24
    512a:	92 23       	and	r25, r18
    512c:	84 81       	ldd	r24, Z+4	; 0x04
    512e:	98 17       	cp	r25, r24
    5130:	61 f0       	breq	.+24     	; 0x514a <__vector_54+0x6a>
    5132:	83 81       	ldd	r24, Z+3	; 0x03
    5134:	26 95       	lsr	r18
    5136:	28 23       	and	r18, r24
    5138:	c0 81       	ld	r28, Z
    513a:	d1 81       	ldd	r29, Z+1	; 0x01
    513c:	c2 0f       	add	r28, r18
    513e:	d1 1d       	adc	r29, r1
    5140:	68 83       	st	Y, r22
    5142:	8f 5f       	subi	r24, 0xFF	; 255
    5144:	95 81       	ldd	r25, Z+5	; 0x05
    5146:	89 23       	and	r24, r25
    5148:	83 83       	std	Z+3, r24	; 0x03
    514a:	16 96       	adiw	r26, 0x06	; 6
    514c:	ed 91       	ld	r30, X+
    514e:	fc 91       	ld	r31, X
    5150:	17 97       	sbiw	r26, 0x07	; 7
    5152:	30 97       	sbiw	r30, 0x00	; 0
    5154:	11 f0       	breq	.+4      	; 0x515a <__vector_54+0x7a>
    5156:	cd 01       	movw	r24, r26
    5158:	19 95       	eicall
    515a:	ff 91       	pop	r31
    515c:	ef 91       	pop	r30
    515e:	df 91       	pop	r29
    5160:	cf 91       	pop	r28
    5162:	bf 91       	pop	r27
    5164:	af 91       	pop	r26
    5166:	9f 91       	pop	r25
    5168:	8f 91       	pop	r24
    516a:	7f 91       	pop	r23
    516c:	6f 91       	pop	r22
    516e:	5f 91       	pop	r21
    5170:	4f 91       	pop	r20
    5172:	3f 91       	pop	r19
    5174:	2f 91       	pop	r18
    5176:	0f 90       	pop	r0
    5178:	0b be       	out	0x3b, r0	; 59
    517a:	0f 90       	pop	r0
    517c:	0f be       	out	0x3f, r0	; 63
    517e:	0f 90       	pop	r0
    5180:	1f 90       	pop	r1
    5182:	18 95       	reti

00005184 <__vector_55>:
    5184:	1f 92       	push	r1
    5186:	0f 92       	push	r0
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	0f 92       	push	r0
    518c:	11 24       	eor	r1, r1
    518e:	0b b6       	in	r0, 0x3b	; 59
    5190:	0f 92       	push	r0
    5192:	2f 93       	push	r18
    5194:	8f 93       	push	r24
    5196:	9f 93       	push	r25
    5198:	af 93       	push	r26
    519a:	bf 93       	push	r27
    519c:	ef 93       	push	r30
    519e:	ff 93       	push	r31
    51a0:	e0 91 ae 14 	lds	r30, 0x14AE	; 0x8014ae <_ser_handle+0x6>
    51a4:	f0 91 af 14 	lds	r31, 0x14AF	; 0x8014af <_ser_handle+0x7>
    51a8:	30 97       	sbiw	r30, 0x00	; 0
    51aa:	b9 f0       	breq	.+46     	; 0x51da <__vector_55+0x56>
    51ac:	02 80       	ldd	r0, Z+2	; 0x02
    51ae:	f3 81       	ldd	r31, Z+3	; 0x03
    51b0:	e0 2d       	mov	r30, r0
    51b2:	93 81       	ldd	r25, Z+3	; 0x03
    51b4:	82 81       	ldd	r24, Z+2	; 0x02
    51b6:	98 17       	cp	r25, r24
    51b8:	b1 f0       	breq	.+44     	; 0x51e6 <__vector_55+0x62>
    51ba:	92 81       	ldd	r25, Z+2	; 0x02
    51bc:	85 81       	ldd	r24, Z+5	; 0x05
    51be:	28 2f       	mov	r18, r24
    51c0:	26 95       	lsr	r18
    51c2:	29 23       	and	r18, r25
    51c4:	a0 81       	ld	r26, Z
    51c6:	b1 81       	ldd	r27, Z+1	; 0x01
    51c8:	a2 0f       	add	r26, r18
    51ca:	b1 1d       	adc	r27, r1
    51cc:	2c 91       	ld	r18, X
    51ce:	9f 5f       	subi	r25, 0xFF	; 255
    51d0:	89 23       	and	r24, r25
    51d2:	82 83       	std	Z+2, r24	; 0x02
    51d4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    51d8:	0b c0       	rjmp	.+22     	; 0x51f0 <__vector_55+0x6c>
    51da:	e1 e3       	ldi	r30, 0x31	; 49
    51dc:	f1 e0       	ldi	r31, 0x01	; 1
    51de:	80 81       	ld	r24, Z
    51e0:	8f 7d       	andi	r24, 0xDF	; 223
    51e2:	80 83       	st	Z, r24
    51e4:	05 c0       	rjmp	.+10     	; 0x51f0 <__vector_55+0x6c>
    51e6:	e1 e3       	ldi	r30, 0x31	; 49
    51e8:	f1 e0       	ldi	r31, 0x01	; 1
    51ea:	80 81       	ld	r24, Z
    51ec:	8f 7d       	andi	r24, 0xDF	; 223
    51ee:	80 83       	st	Z, r24
    51f0:	ff 91       	pop	r31
    51f2:	ef 91       	pop	r30
    51f4:	bf 91       	pop	r27
    51f6:	af 91       	pop	r26
    51f8:	9f 91       	pop	r25
    51fa:	8f 91       	pop	r24
    51fc:	2f 91       	pop	r18
    51fe:	0f 90       	pop	r0
    5200:	0b be       	out	0x3b, r0	; 59
    5202:	0f 90       	pop	r0
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	0f 90       	pop	r0
    5208:	1f 90       	pop	r1
    520a:	18 95       	reti

0000520c <usart_getchar>:
    520c:	cf 93       	push	r28
    520e:	df 93       	push	r29
    5210:	1f 92       	push	r1
    5212:	cd b7       	in	r28, 0x3d	; 61
    5214:	de b7       	in	r29, 0x3e	; 62
    5216:	be 01       	movw	r22, r28
    5218:	6f 5f       	subi	r22, 0xFF	; 255
    521a:	7f 4f       	sbci	r23, 0xFF	; 255
    521c:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <_com_serial_instance>
    5220:	90 91 b1 14 	lds	r25, 0x14B1	; 0x8014b1 <_com_serial_instance+0x1>
    5224:	7b dd       	rcall	.-1290   	; 0x4d1c <serial_getByte>
    5226:	81 11       	cpse	r24, r1
    5228:	f6 cf       	rjmp	.-20     	; 0x5216 <usart_getchar+0xa>
    522a:	89 81       	ldd	r24, Y+1	; 0x01
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	0f 90       	pop	r0
    5230:	df 91       	pop	r29
    5232:	cf 91       	pop	r28
    5234:	08 95       	ret

00005236 <usart_putchar>:
    5236:	68 2f       	mov	r22, r24
    5238:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <_com_serial_instance>
    523c:	90 91 b1 14 	lds	r25, 0x14B1	; 0x8014b1 <_com_serial_instance+0x1>
    5240:	ed dc       	rcall	.-1574   	; 0x4c1c <serial_sendByte>
    5242:	80 e0       	ldi	r24, 0x00	; 0
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	08 95       	ret

00005248 <stdio_initialise>:
    5248:	8f 92       	push	r8
    524a:	9f 92       	push	r9
    524c:	af 92       	push	r10
    524e:	cf 92       	push	r12
    5250:	ef 92       	push	r14
    5252:	0f 93       	push	r16
    5254:	81 2c       	mov	r8, r1
    5256:	91 2c       	mov	r9, r1
    5258:	68 94       	set
    525a:	aa 24       	eor	r10, r10
    525c:	a7 f8       	bld	r10, 7
    525e:	68 94       	set
    5260:	cc 24       	eor	r12, r12
    5262:	c7 f8       	bld	r12, 7
    5264:	e1 2c       	mov	r14, r1
    5266:	00 e0       	ldi	r16, 0x00	; 0
    5268:	23 e0       	ldi	r18, 0x03	; 3
    526a:	40 e0       	ldi	r20, 0x00	; 0
    526c:	51 ee       	ldi	r21, 0xE1	; 225
    526e:	60 e0       	ldi	r22, 0x00	; 0
    5270:	70 e0       	ldi	r23, 0x00	; 0
    5272:	33 dc       	rcall	.-1946   	; 0x4ada <serial_create>
    5274:	90 93 b1 14 	sts	0x14B1, r25	; 0x8014b1 <_com_serial_instance+0x1>
    5278:	80 93 b0 14 	sts	0x14B0, r24	; 0x8014b0 <_com_serial_instance>
    527c:	e6 ef       	ldi	r30, 0xF6	; 246
    527e:	f4 e1       	ldi	r31, 0x14	; 20
    5280:	83 e1       	ldi	r24, 0x13	; 19
    5282:	92 e0       	ldi	r25, 0x02	; 2
    5284:	91 83       	std	Z+1, r25	; 0x01
    5286:	80 83       	st	Z, r24
    5288:	93 83       	std	Z+3, r25	; 0x03
    528a:	82 83       	std	Z+2, r24	; 0x02
    528c:	0f 91       	pop	r16
    528e:	ef 90       	pop	r14
    5290:	cf 90       	pop	r12
    5292:	af 90       	pop	r10
    5294:	9f 90       	pop	r9
    5296:	8f 90       	pop	r8
    5298:	08 95       	ret

0000529a <_turn_off>:
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	fc 01       	movw	r30, r24
    529e:	ee 0f       	add	r30, r30
    52a0:	ff 1f       	adc	r31, r31
    52a2:	e8 0f       	add	r30, r24
    52a4:	f9 1f       	adc	r31, r25
    52a6:	ee 0f       	add	r30, r30
    52a8:	ff 1f       	adc	r31, r31
    52aa:	ee 54       	subi	r30, 0x4E	; 78
    52ac:	fb 4e       	sbci	r31, 0xEB	; 235
    52ae:	23 81       	ldd	r18, Z+3	; 0x03
    52b0:	21 11       	cpse	r18, r1
    52b2:	1f c0       	rjmp	.+62     	; 0x52f2 <_turn_off+0x58>
    52b4:	9c 01       	movw	r18, r24
    52b6:	22 0f       	add	r18, r18
    52b8:	33 1f       	adc	r19, r19
    52ba:	f9 01       	movw	r30, r18
    52bc:	e8 0f       	add	r30, r24
    52be:	f9 1f       	adc	r31, r25
    52c0:	ee 0f       	add	r30, r30
    52c2:	ff 1f       	adc	r31, r31
    52c4:	ee 54       	subi	r30, 0x4E	; 78
    52c6:	fb 4e       	sbci	r31, 0xEB	; 235
    52c8:	a0 81       	ld	r26, Z
    52ca:	b1 81       	ldd	r27, Z+1	; 0x01
    52cc:	4c 91       	ld	r20, X
    52ce:	f9 01       	movw	r30, r18
    52d0:	e8 0f       	add	r30, r24
    52d2:	f9 1f       	adc	r31, r25
    52d4:	ee 0f       	add	r30, r30
    52d6:	ff 1f       	adc	r31, r31
    52d8:	ee 54       	subi	r30, 0x4E	; 78
    52da:	fb 4e       	sbci	r31, 0xEB	; 235
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	02 80       	ldd	r0, Z+2	; 0x02
    52e2:	02 c0       	rjmp	.+4      	; 0x52e8 <_turn_off+0x4e>
    52e4:	88 0f       	add	r24, r24
    52e6:	99 1f       	adc	r25, r25
    52e8:	0a 94       	dec	r0
    52ea:	e2 f7       	brpl	.-8      	; 0x52e4 <_turn_off+0x4a>
    52ec:	84 2b       	or	r24, r20
    52ee:	8c 93       	st	X, r24
    52f0:	08 95       	ret
    52f2:	fc 01       	movw	r30, r24
    52f4:	ee 0f       	add	r30, r30
    52f6:	ff 1f       	adc	r31, r31
    52f8:	df 01       	movw	r26, r30
    52fa:	a8 0f       	add	r26, r24
    52fc:	b9 1f       	adc	r27, r25
    52fe:	aa 0f       	add	r26, r26
    5300:	bb 1f       	adc	r27, r27
    5302:	ae 54       	subi	r26, 0x4E	; 78
    5304:	bb 4e       	sbci	r27, 0xEB	; 235
    5306:	0d 90       	ld	r0, X+
    5308:	bc 91       	ld	r27, X
    530a:	a0 2d       	mov	r26, r0
    530c:	2c 91       	ld	r18, X
    530e:	e8 0f       	add	r30, r24
    5310:	f9 1f       	adc	r31, r25
    5312:	ee 0f       	add	r30, r30
    5314:	ff 1f       	adc	r31, r31
    5316:	ee 54       	subi	r30, 0x4E	; 78
    5318:	fb 4e       	sbci	r31, 0xEB	; 235
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	02 80       	ldd	r0, Z+2	; 0x02
    5320:	02 c0       	rjmp	.+4      	; 0x5326 <_turn_off+0x8c>
    5322:	88 0f       	add	r24, r24
    5324:	99 1f       	adc	r25, r25
    5326:	0a 94       	dec	r0
    5328:	e2 f7       	brpl	.-8      	; 0x5322 <_turn_off+0x88>
    532a:	80 95       	com	r24
    532c:	82 23       	and	r24, r18
    532e:	8c 93       	st	X, r24
    5330:	08 95       	ret

00005332 <_turn_on>:
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	fc 01       	movw	r30, r24
    5336:	ee 0f       	add	r30, r30
    5338:	ff 1f       	adc	r31, r31
    533a:	e8 0f       	add	r30, r24
    533c:	f9 1f       	adc	r31, r25
    533e:	ee 0f       	add	r30, r30
    5340:	ff 1f       	adc	r31, r31
    5342:	ee 54       	subi	r30, 0x4E	; 78
    5344:	fb 4e       	sbci	r31, 0xEB	; 235
    5346:	23 81       	ldd	r18, Z+3	; 0x03
    5348:	21 11       	cpse	r18, r1
    534a:	20 c0       	rjmp	.+64     	; 0x538c <_turn_on+0x5a>
    534c:	9c 01       	movw	r18, r24
    534e:	22 0f       	add	r18, r18
    5350:	33 1f       	adc	r19, r19
    5352:	f9 01       	movw	r30, r18
    5354:	e8 0f       	add	r30, r24
    5356:	f9 1f       	adc	r31, r25
    5358:	ee 0f       	add	r30, r30
    535a:	ff 1f       	adc	r31, r31
    535c:	ee 54       	subi	r30, 0x4E	; 78
    535e:	fb 4e       	sbci	r31, 0xEB	; 235
    5360:	a0 81       	ld	r26, Z
    5362:	b1 81       	ldd	r27, Z+1	; 0x01
    5364:	4c 91       	ld	r20, X
    5366:	f9 01       	movw	r30, r18
    5368:	e8 0f       	add	r30, r24
    536a:	f9 1f       	adc	r31, r25
    536c:	ee 0f       	add	r30, r30
    536e:	ff 1f       	adc	r31, r31
    5370:	ee 54       	subi	r30, 0x4E	; 78
    5372:	fb 4e       	sbci	r31, 0xEB	; 235
    5374:	81 e0       	ldi	r24, 0x01	; 1
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	02 80       	ldd	r0, Z+2	; 0x02
    537a:	02 c0       	rjmp	.+4      	; 0x5380 <_turn_on+0x4e>
    537c:	88 0f       	add	r24, r24
    537e:	99 1f       	adc	r25, r25
    5380:	0a 94       	dec	r0
    5382:	e2 f7       	brpl	.-8      	; 0x537c <_turn_on+0x4a>
    5384:	80 95       	com	r24
    5386:	84 23       	and	r24, r20
    5388:	8c 93       	st	X, r24
    538a:	08 95       	ret
    538c:	fc 01       	movw	r30, r24
    538e:	ee 0f       	add	r30, r30
    5390:	ff 1f       	adc	r31, r31
    5392:	df 01       	movw	r26, r30
    5394:	a8 0f       	add	r26, r24
    5396:	b9 1f       	adc	r27, r25
    5398:	aa 0f       	add	r26, r26
    539a:	bb 1f       	adc	r27, r27
    539c:	ae 54       	subi	r26, 0x4E	; 78
    539e:	bb 4e       	sbci	r27, 0xEB	; 235
    53a0:	0d 90       	ld	r0, X+
    53a2:	bc 91       	ld	r27, X
    53a4:	a0 2d       	mov	r26, r0
    53a6:	2c 91       	ld	r18, X
    53a8:	e8 0f       	add	r30, r24
    53aa:	f9 1f       	adc	r31, r25
    53ac:	ee 0f       	add	r30, r30
    53ae:	ff 1f       	adc	r31, r31
    53b0:	ee 54       	subi	r30, 0x4E	; 78
    53b2:	fb 4e       	sbci	r31, 0xEB	; 235
    53b4:	81 e0       	ldi	r24, 0x01	; 1
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	02 80       	ldd	r0, Z+2	; 0x02
    53ba:	02 c0       	rjmp	.+4      	; 0x53c0 <_turn_on+0x8e>
    53bc:	88 0f       	add	r24, r24
    53be:	99 1f       	adc	r25, r25
    53c0:	0a 94       	dec	r0
    53c2:	e2 f7       	brpl	.-8      	; 0x53bc <_turn_on+0x8a>
    53c4:	82 2b       	or	r24, r18
    53c6:	8c 93       	st	X, r24
    53c8:	08 95       	ret

000053ca <status_leds_slowBlink>:
    53ca:	cf 93       	push	r28
    53cc:	df 93       	push	r29
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	fc 01       	movw	r30, r24
    53d2:	ee 0f       	add	r30, r30
    53d4:	ff 1f       	adc	r31, r31
    53d6:	df 01       	movw	r26, r30
    53d8:	a8 0f       	add	r26, r24
    53da:	b9 1f       	adc	r27, r25
    53dc:	aa 0f       	add	r26, r26
    53de:	bb 1f       	adc	r27, r27
    53e0:	ae 54       	subi	r26, 0x4E	; 78
    53e2:	bb 4e       	sbci	r27, 0xEB	; 235
    53e4:	cd 91       	ld	r28, X+
    53e6:	dc 91       	ld	r29, X
    53e8:	11 97       	sbiw	r26, 0x01	; 1
    53ea:	48 81       	ld	r20, Y
    53ec:	21 e0       	ldi	r18, 0x01	; 1
    53ee:	30 e0       	ldi	r19, 0x00	; 0
    53f0:	12 96       	adiw	r26, 0x02	; 2
    53f2:	0c 90       	ld	r0, X
    53f4:	12 97       	sbiw	r26, 0x02	; 2
    53f6:	02 c0       	rjmp	.+4      	; 0x53fc <status_leds_slowBlink+0x32>
    53f8:	22 0f       	add	r18, r18
    53fa:	33 1f       	adc	r19, r19
    53fc:	0a 94       	dec	r0
    53fe:	e2 f7       	brpl	.-8      	; 0x53f8 <status_leds_slowBlink+0x2e>
    5400:	24 27       	eor	r18, r20
    5402:	28 83       	st	Y, r18
    5404:	fd 01       	movw	r30, r26
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	84 83       	std	Z+4, r24	; 0x04
    540a:	df 91       	pop	r29
    540c:	cf 91       	pop	r28
    540e:	08 95       	ret

00005410 <status_leds_fastBlink>:
    5410:	cf 93       	push	r28
    5412:	df 93       	push	r29
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	fc 01       	movw	r30, r24
    5418:	ee 0f       	add	r30, r30
    541a:	ff 1f       	adc	r31, r31
    541c:	df 01       	movw	r26, r30
    541e:	a8 0f       	add	r26, r24
    5420:	b9 1f       	adc	r27, r25
    5422:	aa 0f       	add	r26, r26
    5424:	bb 1f       	adc	r27, r27
    5426:	ae 54       	subi	r26, 0x4E	; 78
    5428:	bb 4e       	sbci	r27, 0xEB	; 235
    542a:	cd 91       	ld	r28, X+
    542c:	dc 91       	ld	r29, X
    542e:	11 97       	sbiw	r26, 0x01	; 1
    5430:	48 81       	ld	r20, Y
    5432:	21 e0       	ldi	r18, 0x01	; 1
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	12 96       	adiw	r26, 0x02	; 2
    5438:	0c 90       	ld	r0, X
    543a:	12 97       	sbiw	r26, 0x02	; 2
    543c:	02 c0       	rjmp	.+4      	; 0x5442 <status_leds_fastBlink+0x32>
    543e:	22 0f       	add	r18, r18
    5440:	33 1f       	adc	r19, r19
    5442:	0a 94       	dec	r0
    5444:	e2 f7       	brpl	.-8      	; 0x543e <status_leds_fastBlink+0x2e>
    5446:	24 27       	eor	r18, r20
    5448:	28 83       	st	Y, r18
    544a:	fd 01       	movw	r30, r26
    544c:	82 e0       	ldi	r24, 0x02	; 2
    544e:	84 83       	std	Z+4, r24	; 0x04
    5450:	df 91       	pop	r29
    5452:	cf 91       	pop	r28
    5454:	08 95       	ret

00005456 <status_leds_ledOn>:
    5456:	28 2f       	mov	r18, r24
    5458:	30 e0       	ldi	r19, 0x00	; 0
    545a:	f9 01       	movw	r30, r18
    545c:	ee 0f       	add	r30, r30
    545e:	ff 1f       	adc	r31, r31
    5460:	e2 0f       	add	r30, r18
    5462:	f3 1f       	adc	r31, r19
    5464:	ee 0f       	add	r30, r30
    5466:	ff 1f       	adc	r31, r31
    5468:	ee 54       	subi	r30, 0x4E	; 78
    546a:	fb 4e       	sbci	r31, 0xEB	; 235
    546c:	93 e0       	ldi	r25, 0x03	; 3
    546e:	94 83       	std	Z+4, r25	; 0x04
    5470:	60 cf       	rjmp	.-320    	; 0x5332 <_turn_on>
    5472:	08 95       	ret

00005474 <status_leds_ledOff>:
    5474:	28 2f       	mov	r18, r24
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	f9 01       	movw	r30, r18
    547a:	ee 0f       	add	r30, r30
    547c:	ff 1f       	adc	r31, r31
    547e:	e2 0f       	add	r30, r18
    5480:	f3 1f       	adc	r31, r19
    5482:	ee 0f       	add	r30, r30
    5484:	ff 1f       	adc	r31, r31
    5486:	ee 54       	subi	r30, 0x4E	; 78
    5488:	fb 4e       	sbci	r31, 0xEB	; 235
    548a:	94 e0       	ldi	r25, 0x04	; 4
    548c:	94 83       	std	Z+4, r25	; 0x04
    548e:	05 cf       	rjmp	.-502    	; 0x529a <_turn_off>
    5490:	08 95       	ret

00005492 <status_leds_longPuls>:
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	fc 01       	movw	r30, r24
    5496:	ee 0f       	add	r30, r30
    5498:	ff 1f       	adc	r31, r31
    549a:	df 01       	movw	r26, r30
    549c:	a8 0f       	add	r26, r24
    549e:	b9 1f       	adc	r27, r25
    54a0:	aa 0f       	add	r26, r26
    54a2:	bb 1f       	adc	r27, r27
    54a4:	ae 54       	subi	r26, 0x4E	; 78
    54a6:	bb 4e       	sbci	r27, 0xEB	; 235
    54a8:	24 e0       	ldi	r18, 0x04	; 4
    54aa:	15 96       	adiw	r26, 0x05	; 5
    54ac:	2c 93       	st	X, r18
    54ae:	15 97       	sbiw	r26, 0x05	; 5
    54b0:	fd 01       	movw	r30, r26
    54b2:	14 82       	std	Z+4, r1	; 0x04
    54b4:	08 95       	ret

000054b6 <status_leds_shortPuls>:
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	fc 01       	movw	r30, r24
    54ba:	ee 0f       	add	r30, r30
    54bc:	ff 1f       	adc	r31, r31
    54be:	df 01       	movw	r26, r30
    54c0:	a8 0f       	add	r26, r24
    54c2:	b9 1f       	adc	r27, r25
    54c4:	aa 0f       	add	r26, r26
    54c6:	bb 1f       	adc	r27, r27
    54c8:	ae 54       	subi	r26, 0x4E	; 78
    54ca:	bb 4e       	sbci	r27, 0xEB	; 235
    54cc:	21 e0       	ldi	r18, 0x01	; 1
    54ce:	15 96       	adiw	r26, 0x05	; 5
    54d0:	2c 93       	st	X, r18
    54d2:	15 97       	sbiw	r26, 0x05	; 5
    54d4:	fd 01       	movw	r30, r26
    54d6:	14 82       	std	Z+4, r1	; 0x04
    54d8:	08 95       	ret

000054da <_initTwiInterface>:
    54da:	80 91 d8 14 	lds	r24, 0x14D8	; 0x8014d8 <_twiIsInitiated>
    54de:	81 11       	cpse	r24, r1
    54e0:	0c c0       	rjmp	.+24     	; 0x54fa <_initTwiInterface+0x20>
    54e2:	8c e0       	ldi	r24, 0x0C	; 12
    54e4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    54e8:	8f ef       	ldi	r24, 0xFF	; 255
    54ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54ee:	84 e0       	ldi	r24, 0x04	; 4
    54f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54f4:	81 e0       	ldi	r24, 0x01	; 1
    54f6:	80 93 d8 14 	sts	0x14D8, r24	; 0x8014d8 <_twiIsInitiated>
    54fa:	08 95       	ret

000054fc <twiCreate>:
    54fc:	af 92       	push	r10
    54fe:	bf 92       	push	r11
    5500:	cf 92       	push	r12
    5502:	df 92       	push	r13
    5504:	ef 92       	push	r14
    5506:	ff 92       	push	r15
    5508:	0f 93       	push	r16
    550a:	1f 93       	push	r17
    550c:	cf 93       	push	r28
    550e:	df 93       	push	r29
    5510:	a8 2e       	mov	r10, r24
    5512:	b6 2e       	mov	r11, r22
    5514:	69 01       	movw	r12, r18
    5516:	7a 01       	movw	r14, r20
    5518:	84 e0       	ldi	r24, 0x04	; 4
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	cb d3       	rcall	.+1942   	; 0x5cb4 <malloc>
    551e:	ec 01       	movw	r28, r24
    5520:	89 2b       	or	r24, r25
    5522:	61 f1       	breq	.+88     	; 0x557c <twiCreate+0x80>
    5524:	a8 82       	st	Y, r10
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	b8 12       	cpse	r11, r24
    552a:	12 c0       	rjmp	.+36     	; 0x5550 <twiCreate+0x54>
    552c:	c7 01       	movw	r24, r14
    552e:	b6 01       	movw	r22, r12
    5530:	20 ea       	ldi	r18, 0xA0	; 160
    5532:	36 e8       	ldi	r19, 0x86	; 134
    5534:	41 e0       	ldi	r20, 0x01	; 1
    5536:	50 e0       	ldi	r21, 0x00	; 0
    5538:	79 d3       	rcall	.+1778   	; 0x5c2c <__udivmodsi4>
    553a:	da 01       	movw	r26, r20
    553c:	c9 01       	movw	r24, r18
    553e:	40 97       	sbiw	r24, 0x10	; 16
    5540:	a1 09       	sbc	r26, r1
    5542:	b1 09       	sbc	r27, r1
    5544:	b6 95       	lsr	r27
    5546:	a7 95       	ror	r26
    5548:	97 95       	ror	r25
    554a:	87 95       	ror	r24
    554c:	89 83       	std	Y+1, r24	; 0x01
    554e:	11 c0       	rjmp	.+34     	; 0x5572 <twiCreate+0x76>
    5550:	c7 01       	movw	r24, r14
    5552:	b6 01       	movw	r22, r12
    5554:	20 e8       	ldi	r18, 0x80	; 128
    5556:	3a e1       	ldi	r19, 0x1A	; 26
    5558:	46 e0       	ldi	r20, 0x06	; 6
    555a:	50 e0       	ldi	r21, 0x00	; 0
    555c:	67 d3       	rcall	.+1742   	; 0x5c2c <__udivmodsi4>
    555e:	da 01       	movw	r26, r20
    5560:	c9 01       	movw	r24, r18
    5562:	40 97       	sbiw	r24, 0x10	; 16
    5564:	a1 09       	sbc	r26, r1
    5566:	b1 09       	sbc	r27, r1
    5568:	b6 95       	lsr	r27
    556a:	a7 95       	ror	r26
    556c:	97 95       	ror	r25
    556e:	87 95       	ror	r24
    5570:	89 83       	std	Y+1, r24	; 0x01
    5572:	1b 83       	std	Y+3, r17	; 0x03
    5574:	0a 83       	std	Y+2, r16	; 0x02
    5576:	8c 2f       	mov	r24, r28
    5578:	9d 2f       	mov	r25, r29
    557a:	02 c0       	rjmp	.+4      	; 0x5580 <twiCreate+0x84>
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	90 e0       	ldi	r25, 0x00	; 0
    5580:	df 91       	pop	r29
    5582:	cf 91       	pop	r28
    5584:	1f 91       	pop	r17
    5586:	0f 91       	pop	r16
    5588:	ff 90       	pop	r15
    558a:	ef 90       	pop	r14
    558c:	df 90       	pop	r13
    558e:	cf 90       	pop	r12
    5590:	bf 90       	pop	r11
    5592:	af 90       	pop	r10
    5594:	08 95       	ret

00005596 <twiIsBusy>:
    5596:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    559a:	81 70       	andi	r24, 0x01	; 1
    559c:	08 95       	ret

0000559e <twiTransmit>:
    559e:	ff 92       	push	r15
    55a0:	0f 93       	push	r16
    55a2:	1f 93       	push	r17
    55a4:	cf 93       	push	r28
    55a6:	df 93       	push	r29
    55a8:	00 97       	sbiw	r24, 0x00	; 0
    55aa:	d1 f1       	breq	.+116    	; 0x5620 <twiTransmit+0x82>
    55ac:	4a 30       	cpi	r20, 0x0A	; 10
    55ae:	d0 f5       	brcc	.+116    	; 0x5624 <twiTransmit+0x86>
    55b0:	f4 2e       	mov	r15, r20
    55b2:	8b 01       	movw	r16, r22
    55b4:	ec 01       	movw	r28, r24
    55b6:	ef df       	rcall	.-34     	; 0x5596 <twiIsBusy>
    55b8:	81 11       	cpse	r24, r1
    55ba:	36 c0       	rjmp	.+108    	; 0x5628 <twiTransmit+0x8a>
    55bc:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    55c0:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    55c4:	c8 17       	cp	r28, r24
    55c6:	d9 07       	cpc	r29, r25
    55c8:	41 f0       	breq	.+16     	; 0x55da <twiTransmit+0x3c>
    55ca:	87 df       	rcall	.-242    	; 0x54da <_initTwiInterface>
    55cc:	89 81       	ldd	r24, Y+1	; 0x01
    55ce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    55d2:	d0 93 cc 14 	sts	0x14CC, r29	; 0x8014cc <_twiCurrentHandler+0x1>
    55d6:	c0 93 cb 14 	sts	0x14CB, r28	; 0x8014cb <_twiCurrentHandler>
    55da:	81 e0       	ldi	r24, 0x01	; 1
    55dc:	8f 0d       	add	r24, r15
    55de:	80 93 cd 14 	sts	0x14CD, r24	; 0x8014cd <_twiMessageLen>
    55e2:	88 81       	ld	r24, Y
    55e4:	88 0f       	add	r24, r24
    55e6:	80 93 ce 14 	sts	0x14CE, r24	; 0x8014ce <_twiMessageBuffer>
    55ea:	ff 20       	and	r15, r15
    55ec:	89 f0       	breq	.+34     	; 0x5610 <twiTransmit+0x72>
    55ee:	f8 01       	movw	r30, r16
    55f0:	af ec       	ldi	r26, 0xCF	; 207
    55f2:	b4 e1       	ldi	r27, 0x14	; 20
    55f4:	4f ef       	ldi	r20, 0xFF	; 255
    55f6:	4f 0d       	add	r20, r15
    55f8:	64 2f       	mov	r22, r20
    55fa:	70 e0       	ldi	r23, 0x00	; 0
    55fc:	cb 01       	movw	r24, r22
    55fe:	01 96       	adiw	r24, 0x01	; 1
    5600:	b8 01       	movw	r22, r16
    5602:	68 0f       	add	r22, r24
    5604:	79 1f       	adc	r23, r25
    5606:	81 91       	ld	r24, Z+
    5608:	8d 93       	st	X+, r24
    560a:	e6 17       	cp	r30, r22
    560c:	f7 07       	cpc	r31, r23
    560e:	d9 f7       	brne	.-10     	; 0x5606 <twiTransmit+0x68>
    5610:	88 ef       	ldi	r24, 0xF8	; 248
    5612:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5616:	85 ea       	ldi	r24, 0xA5	; 165
    5618:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    561c:	84 e0       	ldi	r24, 0x04	; 4
    561e:	05 c0       	rjmp	.+10     	; 0x562a <twiTransmit+0x8c>
    5620:	86 e0       	ldi	r24, 0x06	; 6
    5622:	03 c0       	rjmp	.+6      	; 0x562a <twiTransmit+0x8c>
    5624:	87 e0       	ldi	r24, 0x07	; 7
    5626:	01 c0       	rjmp	.+2      	; 0x562a <twiTransmit+0x8c>
    5628:	82 e0       	ldi	r24, 0x02	; 2
    562a:	df 91       	pop	r29
    562c:	cf 91       	pop	r28
    562e:	1f 91       	pop	r17
    5630:	0f 91       	pop	r16
    5632:	ff 90       	pop	r15
    5634:	08 95       	ret

00005636 <twiReceive>:
    5636:	1f 93       	push	r17
    5638:	cf 93       	push	r28
    563a:	df 93       	push	r29
    563c:	00 97       	sbiw	r24, 0x00	; 0
    563e:	29 f1       	breq	.+74     	; 0x568a <twiReceive+0x54>
    5640:	6b 30       	cpi	r22, 0x0B	; 11
    5642:	28 f5       	brcc	.+74     	; 0x568e <twiReceive+0x58>
    5644:	16 2f       	mov	r17, r22
    5646:	ec 01       	movw	r28, r24
    5648:	a6 df       	rcall	.-180    	; 0x5596 <twiIsBusy>
    564a:	81 11       	cpse	r24, r1
    564c:	22 c0       	rjmp	.+68     	; 0x5692 <twiReceive+0x5c>
    564e:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    5652:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    5656:	c8 17       	cp	r28, r24
    5658:	d9 07       	cpc	r29, r25
    565a:	41 f0       	breq	.+16     	; 0x566c <twiReceive+0x36>
    565c:	3e df       	rcall	.-388    	; 0x54da <_initTwiInterface>
    565e:	89 81       	ldd	r24, Y+1	; 0x01
    5660:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5664:	d0 93 cc 14 	sts	0x14CC, r29	; 0x8014cc <_twiCurrentHandler+0x1>
    5668:	c0 93 cb 14 	sts	0x14CB, r28	; 0x8014cb <_twiCurrentHandler>
    566c:	10 93 cd 14 	sts	0x14CD, r17	; 0x8014cd <_twiMessageLen>
    5670:	88 81       	ld	r24, Y
    5672:	88 0f       	add	r24, r24
    5674:	81 60       	ori	r24, 0x01	; 1
    5676:	80 93 ce 14 	sts	0x14CE, r24	; 0x8014ce <_twiMessageBuffer>
    567a:	88 ef       	ldi	r24, 0xF8	; 248
    567c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5680:	85 ea       	ldi	r24, 0xA5	; 165
    5682:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5686:	85 e0       	ldi	r24, 0x05	; 5
    5688:	05 c0       	rjmp	.+10     	; 0x5694 <twiReceive+0x5e>
    568a:	86 e0       	ldi	r24, 0x06	; 6
    568c:	03 c0       	rjmp	.+6      	; 0x5694 <twiReceive+0x5e>
    568e:	87 e0       	ldi	r24, 0x07	; 7
    5690:	01 c0       	rjmp	.+2      	; 0x5694 <twiReceive+0x5e>
    5692:	82 e0       	ldi	r24, 0x02	; 2
    5694:	df 91       	pop	r29
    5696:	cf 91       	pop	r28
    5698:	1f 91       	pop	r17
    569a:	08 95       	ret

0000569c <__vector_39>:
    569c:	1f 92       	push	r1
    569e:	0f 92       	push	r0
    56a0:	0f b6       	in	r0, 0x3f	; 63
    56a2:	0f 92       	push	r0
    56a4:	11 24       	eor	r1, r1
    56a6:	0b b6       	in	r0, 0x3b	; 59
    56a8:	0f 92       	push	r0
    56aa:	2f 93       	push	r18
    56ac:	3f 93       	push	r19
    56ae:	4f 93       	push	r20
    56b0:	5f 93       	push	r21
    56b2:	6f 93       	push	r22
    56b4:	7f 93       	push	r23
    56b6:	8f 93       	push	r24
    56b8:	9f 93       	push	r25
    56ba:	af 93       	push	r26
    56bc:	bf 93       	push	r27
    56be:	ef 93       	push	r30
    56c0:	ff 93       	push	r31
    56c2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    56c6:	8e 2f       	mov	r24, r30
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	fc 01       	movw	r30, r24
    56cc:	38 97       	sbiw	r30, 0x08	; 8
    56ce:	e1 35       	cpi	r30, 0x51	; 81
    56d0:	f1 05       	cpc	r31, r1
    56d2:	08 f0       	brcs	.+2      	; 0x56d6 <__vector_39+0x3a>
    56d4:	75 c0       	rjmp	.+234    	; 0x57c0 <__vector_39+0x124>
    56d6:	88 27       	eor	r24, r24
    56d8:	e4 58       	subi	r30, 0x84	; 132
    56da:	ff 4f       	sbci	r31, 0xFF	; 255
    56dc:	8f 4f       	sbci	r24, 0xFF	; 255
    56de:	c8 c2       	rjmp	.+1424   	; 0x5c70 <__tablejump2__>
    56e0:	10 92 ca 14 	sts	0x14CA, r1	; 0x8014ca <_index.1885>
    56e4:	e0 91 ca 14 	lds	r30, 0x14CA	; 0x8014ca <_index.1885>
    56e8:	80 91 cd 14 	lds	r24, 0x14CD	; 0x8014cd <_twiMessageLen>
    56ec:	e8 17       	cp	r30, r24
    56ee:	70 f4       	brcc	.+28     	; 0x570c <__vector_39+0x70>
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	8e 0f       	add	r24, r30
    56f4:	80 93 ca 14 	sts	0x14CA, r24	; 0x8014ca <_index.1885>
    56f8:	f0 e0       	ldi	r31, 0x00	; 0
    56fa:	e2 53       	subi	r30, 0x32	; 50
    56fc:	fb 4e       	sbci	r31, 0xEB	; 235
    56fe:	80 81       	ld	r24, Z
    5700:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5704:	85 e8       	ldi	r24, 0x85	; 133
    5706:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    570a:	72 c0       	rjmp	.+228    	; 0x57f0 <__vector_39+0x154>
    570c:	84 e9       	ldi	r24, 0x94	; 148
    570e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5712:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    5716:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    571a:	dc 01       	movw	r26, r24
    571c:	12 96       	adiw	r26, 0x02	; 2
    571e:	ed 91       	ld	r30, X+
    5720:	fc 91       	ld	r31, X
    5722:	13 97       	sbiw	r26, 0x03	; 3
    5724:	30 97       	sbiw	r30, 0x00	; 0
    5726:	09 f4       	brne	.+2      	; 0x572a <__vector_39+0x8e>
    5728:	63 c0       	rjmp	.+198    	; 0x57f0 <__vector_39+0x154>
    572a:	20 e0       	ldi	r18, 0x00	; 0
    572c:	40 e0       	ldi	r20, 0x00	; 0
    572e:	50 e0       	ldi	r21, 0x00	; 0
    5730:	64 e0       	ldi	r22, 0x04	; 4
    5732:	19 95       	eicall
    5734:	5d c0       	rjmp	.+186    	; 0x57f0 <__vector_39+0x154>
    5736:	e0 91 ca 14 	lds	r30, 0x14CA	; 0x8014ca <_index.1885>
    573a:	81 e0       	ldi	r24, 0x01	; 1
    573c:	8e 0f       	add	r24, r30
    573e:	80 93 ca 14 	sts	0x14CA, r24	; 0x8014ca <_index.1885>
    5742:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5746:	f0 e0       	ldi	r31, 0x00	; 0
    5748:	e2 53       	subi	r30, 0x32	; 50
    574a:	fb 4e       	sbci	r31, 0xEB	; 235
    574c:	80 83       	st	Z, r24
    574e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5752:	80 34       	cpi	r24, 0x40	; 64
    5754:	11 f4       	brne	.+4      	; 0x575a <__vector_39+0xbe>
    5756:	10 92 ca 14 	sts	0x14CA, r1	; 0x8014ca <_index.1885>
    575a:	20 91 ca 14 	lds	r18, 0x14CA	; 0x8014ca <_index.1885>
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	80 91 cd 14 	lds	r24, 0x14CD	; 0x8014cd <_twiMessageLen>
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	01 97       	sbiw	r24, 0x01	; 1
    5768:	28 17       	cp	r18, r24
    576a:	39 07       	cpc	r19, r25
    576c:	24 f4       	brge	.+8      	; 0x5776 <__vector_39+0xda>
    576e:	85 ec       	ldi	r24, 0xC5	; 197
    5770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5774:	3d c0       	rjmp	.+122    	; 0x57f0 <__vector_39+0x154>
    5776:	85 e8       	ldi	r24, 0x85	; 133
    5778:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    577c:	39 c0       	rjmp	.+114    	; 0x57f0 <__vector_39+0x154>
    577e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5782:	e0 91 ca 14 	lds	r30, 0x14CA	; 0x8014ca <_index.1885>
    5786:	f0 e0       	ldi	r31, 0x00	; 0
    5788:	e2 53       	subi	r30, 0x32	; 50
    578a:	fb 4e       	sbci	r31, 0xEB	; 235
    578c:	80 83       	st	Z, r24
    578e:	84 e9       	ldi	r24, 0x94	; 148
    5790:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5794:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    5798:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    579c:	dc 01       	movw	r26, r24
    579e:	12 96       	adiw	r26, 0x02	; 2
    57a0:	ed 91       	ld	r30, X+
    57a2:	fc 91       	ld	r31, X
    57a4:	13 97       	sbiw	r26, 0x03	; 3
    57a6:	30 97       	sbiw	r30, 0x00	; 0
    57a8:	19 f1       	breq	.+70     	; 0x57f0 <__vector_39+0x154>
    57aa:	20 91 cd 14 	lds	r18, 0x14CD	; 0x8014cd <_twiMessageLen>
    57ae:	4e ec       	ldi	r20, 0xCE	; 206
    57b0:	54 e1       	ldi	r21, 0x14	; 20
    57b2:	65 e0       	ldi	r22, 0x05	; 5
    57b4:	19 95       	eicall
    57b6:	1c c0       	rjmp	.+56     	; 0x57f0 <__vector_39+0x154>
    57b8:	85 ea       	ldi	r24, 0xA5	; 165
    57ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57be:	18 c0       	rjmp	.+48     	; 0x57f0 <__vector_39+0x154>
    57c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    57c4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    57c8:	84 e0       	ldi	r24, 0x04	; 4
    57ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57ce:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    57d2:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    57d6:	dc 01       	movw	r26, r24
    57d8:	12 96       	adiw	r26, 0x02	; 2
    57da:	ed 91       	ld	r30, X+
    57dc:	fc 91       	ld	r31, X
    57de:	13 97       	sbiw	r26, 0x03	; 3
    57e0:	30 97       	sbiw	r30, 0x00	; 0
    57e2:	31 f0       	breq	.+12     	; 0x57f0 <__vector_39+0x154>
    57e4:	20 e0       	ldi	r18, 0x00	; 0
    57e6:	40 e0       	ldi	r20, 0x00	; 0
    57e8:	50 e0       	ldi	r21, 0x00	; 0
    57ea:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    57ee:	19 95       	eicall
    57f0:	ff 91       	pop	r31
    57f2:	ef 91       	pop	r30
    57f4:	bf 91       	pop	r27
    57f6:	af 91       	pop	r26
    57f8:	9f 91       	pop	r25
    57fa:	8f 91       	pop	r24
    57fc:	7f 91       	pop	r23
    57fe:	6f 91       	pop	r22
    5800:	5f 91       	pop	r21
    5802:	4f 91       	pop	r20
    5804:	3f 91       	pop	r19
    5806:	2f 91       	pop	r18
    5808:	0f 90       	pop	r0
    580a:	0b be       	out	0x3b, r0	; 59
    580c:	0f 90       	pop	r0
    580e:	0f be       	out	0x3f, r0	; 63
    5810:	0f 90       	pop	r0
    5812:	1f 90       	pop	r1
    5814:	18 95       	reti

00005816 <fifo_init>:
    5816:	fc 01       	movw	r30, r24
    5818:	41 11       	cpse	r20, r1
    581a:	01 c0       	rjmp	.+2      	; 0x581e <fifo_init+0x8>
    581c:	6c d3       	rcall	.+1752   	; 0x5ef6 <abort>
    581e:	84 2f       	mov	r24, r20
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	9c 01       	movw	r18, r24
    5824:	21 50       	subi	r18, 0x01	; 1
    5826:	31 09       	sbc	r19, r1
    5828:	82 23       	and	r24, r18
    582a:	93 23       	and	r25, r19
    582c:	89 2b       	or	r24, r25
    582e:	09 f0       	breq	.+2      	; 0x5832 <fifo_init+0x1c>
    5830:	62 d3       	rcall	.+1732   	; 0x5ef6 <abort>
    5832:	41 38       	cpi	r20, 0x81	; 129
    5834:	08 f0       	brcs	.+2      	; 0x5838 <fifo_init+0x22>
    5836:	5f d3       	rcall	.+1726   	; 0x5ef6 <abort>
    5838:	12 82       	std	Z+2, r1	; 0x02
    583a:	13 82       	std	Z+3, r1	; 0x03
    583c:	44 83       	std	Z+4, r20	; 0x04
    583e:	44 0f       	add	r20, r20
    5840:	41 50       	subi	r20, 0x01	; 1
    5842:	45 83       	std	Z+5, r20	; 0x05
    5844:	71 83       	std	Z+1, r23	; 0x01
    5846:	60 83       	st	Z, r22
    5848:	80 e0       	ldi	r24, 0x00	; 0
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	08 95       	ret

0000584e <__subsf3>:
    584e:	50 58       	subi	r21, 0x80	; 128

00005850 <__addsf3>:
    5850:	bb 27       	eor	r27, r27
    5852:	aa 27       	eor	r26, r26
    5854:	0e d0       	rcall	.+28     	; 0x5872 <__addsf3x>
    5856:	4d c1       	rjmp	.+666    	; 0x5af2 <__fp_round>
    5858:	3e d1       	rcall	.+636    	; 0x5ad6 <__fp_pscA>
    585a:	30 f0       	brcs	.+12     	; 0x5868 <__addsf3+0x18>
    585c:	43 d1       	rcall	.+646    	; 0x5ae4 <__fp_pscB>
    585e:	20 f0       	brcs	.+8      	; 0x5868 <__addsf3+0x18>
    5860:	31 f4       	brne	.+12     	; 0x586e <__addsf3+0x1e>
    5862:	9f 3f       	cpi	r25, 0xFF	; 255
    5864:	11 f4       	brne	.+4      	; 0x586a <__addsf3+0x1a>
    5866:	1e f4       	brtc	.+6      	; 0x586e <__addsf3+0x1e>
    5868:	33 c1       	rjmp	.+614    	; 0x5ad0 <__fp_nan>
    586a:	0e f4       	brtc	.+2      	; 0x586e <__addsf3+0x1e>
    586c:	e0 95       	com	r30
    586e:	e7 fb       	bst	r30, 7
    5870:	29 c1       	rjmp	.+594    	; 0x5ac4 <__fp_inf>

00005872 <__addsf3x>:
    5872:	e9 2f       	mov	r30, r25
    5874:	4f d1       	rcall	.+670    	; 0x5b14 <__fp_split3>
    5876:	80 f3       	brcs	.-32     	; 0x5858 <__addsf3+0x8>
    5878:	ba 17       	cp	r27, r26
    587a:	62 07       	cpc	r22, r18
    587c:	73 07       	cpc	r23, r19
    587e:	84 07       	cpc	r24, r20
    5880:	95 07       	cpc	r25, r21
    5882:	18 f0       	brcs	.+6      	; 0x588a <__addsf3x+0x18>
    5884:	71 f4       	brne	.+28     	; 0x58a2 <__addsf3x+0x30>
    5886:	9e f5       	brtc	.+102    	; 0x58ee <__addsf3x+0x7c>
    5888:	67 c1       	rjmp	.+718    	; 0x5b58 <__fp_zero>
    588a:	0e f4       	brtc	.+2      	; 0x588e <__addsf3x+0x1c>
    588c:	e0 95       	com	r30
    588e:	0b 2e       	mov	r0, r27
    5890:	ba 2f       	mov	r27, r26
    5892:	a0 2d       	mov	r26, r0
    5894:	0b 01       	movw	r0, r22
    5896:	b9 01       	movw	r22, r18
    5898:	90 01       	movw	r18, r0
    589a:	0c 01       	movw	r0, r24
    589c:	ca 01       	movw	r24, r20
    589e:	a0 01       	movw	r20, r0
    58a0:	11 24       	eor	r1, r1
    58a2:	ff 27       	eor	r31, r31
    58a4:	59 1b       	sub	r21, r25
    58a6:	99 f0       	breq	.+38     	; 0x58ce <__addsf3x+0x5c>
    58a8:	59 3f       	cpi	r21, 0xF9	; 249
    58aa:	50 f4       	brcc	.+20     	; 0x58c0 <__addsf3x+0x4e>
    58ac:	50 3e       	cpi	r21, 0xE0	; 224
    58ae:	68 f1       	brcs	.+90     	; 0x590a <__addsf3x+0x98>
    58b0:	1a 16       	cp	r1, r26
    58b2:	f0 40       	sbci	r31, 0x00	; 0
    58b4:	a2 2f       	mov	r26, r18
    58b6:	23 2f       	mov	r18, r19
    58b8:	34 2f       	mov	r19, r20
    58ba:	44 27       	eor	r20, r20
    58bc:	58 5f       	subi	r21, 0xF8	; 248
    58be:	f3 cf       	rjmp	.-26     	; 0x58a6 <__addsf3x+0x34>
    58c0:	46 95       	lsr	r20
    58c2:	37 95       	ror	r19
    58c4:	27 95       	ror	r18
    58c6:	a7 95       	ror	r26
    58c8:	f0 40       	sbci	r31, 0x00	; 0
    58ca:	53 95       	inc	r21
    58cc:	c9 f7       	brne	.-14     	; 0x58c0 <__addsf3x+0x4e>
    58ce:	7e f4       	brtc	.+30     	; 0x58ee <__addsf3x+0x7c>
    58d0:	1f 16       	cp	r1, r31
    58d2:	ba 0b       	sbc	r27, r26
    58d4:	62 0b       	sbc	r22, r18
    58d6:	73 0b       	sbc	r23, r19
    58d8:	84 0b       	sbc	r24, r20
    58da:	ba f0       	brmi	.+46     	; 0x590a <__addsf3x+0x98>
    58dc:	91 50       	subi	r25, 0x01	; 1
    58de:	a1 f0       	breq	.+40     	; 0x5908 <__addsf3x+0x96>
    58e0:	ff 0f       	add	r31, r31
    58e2:	bb 1f       	adc	r27, r27
    58e4:	66 1f       	adc	r22, r22
    58e6:	77 1f       	adc	r23, r23
    58e8:	88 1f       	adc	r24, r24
    58ea:	c2 f7       	brpl	.-16     	; 0x58dc <__addsf3x+0x6a>
    58ec:	0e c0       	rjmp	.+28     	; 0x590a <__addsf3x+0x98>
    58ee:	ba 0f       	add	r27, r26
    58f0:	62 1f       	adc	r22, r18
    58f2:	73 1f       	adc	r23, r19
    58f4:	84 1f       	adc	r24, r20
    58f6:	48 f4       	brcc	.+18     	; 0x590a <__addsf3x+0x98>
    58f8:	87 95       	ror	r24
    58fa:	77 95       	ror	r23
    58fc:	67 95       	ror	r22
    58fe:	b7 95       	ror	r27
    5900:	f7 95       	ror	r31
    5902:	9e 3f       	cpi	r25, 0xFE	; 254
    5904:	08 f0       	brcs	.+2      	; 0x5908 <__addsf3x+0x96>
    5906:	b3 cf       	rjmp	.-154    	; 0x586e <__addsf3+0x1e>
    5908:	93 95       	inc	r25
    590a:	88 0f       	add	r24, r24
    590c:	08 f0       	brcs	.+2      	; 0x5910 <__addsf3x+0x9e>
    590e:	99 27       	eor	r25, r25
    5910:	ee 0f       	add	r30, r30
    5912:	97 95       	ror	r25
    5914:	87 95       	ror	r24
    5916:	08 95       	ret

00005918 <__divsf3>:
    5918:	0c d0       	rcall	.+24     	; 0x5932 <__divsf3x>
    591a:	eb c0       	rjmp	.+470    	; 0x5af2 <__fp_round>
    591c:	e3 d0       	rcall	.+454    	; 0x5ae4 <__fp_pscB>
    591e:	40 f0       	brcs	.+16     	; 0x5930 <__divsf3+0x18>
    5920:	da d0       	rcall	.+436    	; 0x5ad6 <__fp_pscA>
    5922:	30 f0       	brcs	.+12     	; 0x5930 <__divsf3+0x18>
    5924:	21 f4       	brne	.+8      	; 0x592e <__divsf3+0x16>
    5926:	5f 3f       	cpi	r21, 0xFF	; 255
    5928:	19 f0       	breq	.+6      	; 0x5930 <__divsf3+0x18>
    592a:	cc c0       	rjmp	.+408    	; 0x5ac4 <__fp_inf>
    592c:	51 11       	cpse	r21, r1
    592e:	15 c1       	rjmp	.+554    	; 0x5b5a <__fp_szero>
    5930:	cf c0       	rjmp	.+414    	; 0x5ad0 <__fp_nan>

00005932 <__divsf3x>:
    5932:	f0 d0       	rcall	.+480    	; 0x5b14 <__fp_split3>
    5934:	98 f3       	brcs	.-26     	; 0x591c <__divsf3+0x4>

00005936 <__divsf3_pse>:
    5936:	99 23       	and	r25, r25
    5938:	c9 f3       	breq	.-14     	; 0x592c <__divsf3+0x14>
    593a:	55 23       	and	r21, r21
    593c:	b1 f3       	breq	.-20     	; 0x592a <__divsf3+0x12>
    593e:	95 1b       	sub	r25, r21
    5940:	55 0b       	sbc	r21, r21
    5942:	bb 27       	eor	r27, r27
    5944:	aa 27       	eor	r26, r26
    5946:	62 17       	cp	r22, r18
    5948:	73 07       	cpc	r23, r19
    594a:	84 07       	cpc	r24, r20
    594c:	38 f0       	brcs	.+14     	; 0x595c <__divsf3_pse+0x26>
    594e:	9f 5f       	subi	r25, 0xFF	; 255
    5950:	5f 4f       	sbci	r21, 0xFF	; 255
    5952:	22 0f       	add	r18, r18
    5954:	33 1f       	adc	r19, r19
    5956:	44 1f       	adc	r20, r20
    5958:	aa 1f       	adc	r26, r26
    595a:	a9 f3       	breq	.-22     	; 0x5946 <__divsf3_pse+0x10>
    595c:	33 d0       	rcall	.+102    	; 0x59c4 <__divsf3_pse+0x8e>
    595e:	0e 2e       	mov	r0, r30
    5960:	3a f0       	brmi	.+14     	; 0x5970 <__divsf3_pse+0x3a>
    5962:	e0 e8       	ldi	r30, 0x80	; 128
    5964:	30 d0       	rcall	.+96     	; 0x59c6 <__divsf3_pse+0x90>
    5966:	91 50       	subi	r25, 0x01	; 1
    5968:	50 40       	sbci	r21, 0x00	; 0
    596a:	e6 95       	lsr	r30
    596c:	00 1c       	adc	r0, r0
    596e:	ca f7       	brpl	.-14     	; 0x5962 <__divsf3_pse+0x2c>
    5970:	29 d0       	rcall	.+82     	; 0x59c4 <__divsf3_pse+0x8e>
    5972:	fe 2f       	mov	r31, r30
    5974:	27 d0       	rcall	.+78     	; 0x59c4 <__divsf3_pse+0x8e>
    5976:	66 0f       	add	r22, r22
    5978:	77 1f       	adc	r23, r23
    597a:	88 1f       	adc	r24, r24
    597c:	bb 1f       	adc	r27, r27
    597e:	26 17       	cp	r18, r22
    5980:	37 07       	cpc	r19, r23
    5982:	48 07       	cpc	r20, r24
    5984:	ab 07       	cpc	r26, r27
    5986:	b0 e8       	ldi	r27, 0x80	; 128
    5988:	09 f0       	breq	.+2      	; 0x598c <__divsf3_pse+0x56>
    598a:	bb 0b       	sbc	r27, r27
    598c:	80 2d       	mov	r24, r0
    598e:	bf 01       	movw	r22, r30
    5990:	ff 27       	eor	r31, r31
    5992:	93 58       	subi	r25, 0x83	; 131
    5994:	5f 4f       	sbci	r21, 0xFF	; 255
    5996:	2a f0       	brmi	.+10     	; 0x59a2 <__divsf3_pse+0x6c>
    5998:	9e 3f       	cpi	r25, 0xFE	; 254
    599a:	51 05       	cpc	r21, r1
    599c:	68 f0       	brcs	.+26     	; 0x59b8 <__divsf3_pse+0x82>
    599e:	92 c0       	rjmp	.+292    	; 0x5ac4 <__fp_inf>
    59a0:	dc c0       	rjmp	.+440    	; 0x5b5a <__fp_szero>
    59a2:	5f 3f       	cpi	r21, 0xFF	; 255
    59a4:	ec f3       	brlt	.-6      	; 0x59a0 <__divsf3_pse+0x6a>
    59a6:	98 3e       	cpi	r25, 0xE8	; 232
    59a8:	dc f3       	brlt	.-10     	; 0x59a0 <__divsf3_pse+0x6a>
    59aa:	86 95       	lsr	r24
    59ac:	77 95       	ror	r23
    59ae:	67 95       	ror	r22
    59b0:	b7 95       	ror	r27
    59b2:	f7 95       	ror	r31
    59b4:	9f 5f       	subi	r25, 0xFF	; 255
    59b6:	c9 f7       	brne	.-14     	; 0x59aa <__divsf3_pse+0x74>
    59b8:	88 0f       	add	r24, r24
    59ba:	91 1d       	adc	r25, r1
    59bc:	96 95       	lsr	r25
    59be:	87 95       	ror	r24
    59c0:	97 f9       	bld	r25, 7
    59c2:	08 95       	ret
    59c4:	e1 e0       	ldi	r30, 0x01	; 1
    59c6:	66 0f       	add	r22, r22
    59c8:	77 1f       	adc	r23, r23
    59ca:	88 1f       	adc	r24, r24
    59cc:	bb 1f       	adc	r27, r27
    59ce:	62 17       	cp	r22, r18
    59d0:	73 07       	cpc	r23, r19
    59d2:	84 07       	cpc	r24, r20
    59d4:	ba 07       	cpc	r27, r26
    59d6:	20 f0       	brcs	.+8      	; 0x59e0 <__divsf3_pse+0xaa>
    59d8:	62 1b       	sub	r22, r18
    59da:	73 0b       	sbc	r23, r19
    59dc:	84 0b       	sbc	r24, r20
    59de:	ba 0b       	sbc	r27, r26
    59e0:	ee 1f       	adc	r30, r30
    59e2:	88 f7       	brcc	.-30     	; 0x59c6 <__divsf3_pse+0x90>
    59e4:	e0 95       	com	r30
    59e6:	08 95       	ret

000059e8 <__fixsfsi>:
    59e8:	04 d0       	rcall	.+8      	; 0x59f2 <__fixunssfsi>
    59ea:	68 94       	set
    59ec:	b1 11       	cpse	r27, r1
    59ee:	b5 c0       	rjmp	.+362    	; 0x5b5a <__fp_szero>
    59f0:	08 95       	ret

000059f2 <__fixunssfsi>:
    59f2:	98 d0       	rcall	.+304    	; 0x5b24 <__fp_splitA>
    59f4:	88 f0       	brcs	.+34     	; 0x5a18 <__fixunssfsi+0x26>
    59f6:	9f 57       	subi	r25, 0x7F	; 127
    59f8:	90 f0       	brcs	.+36     	; 0x5a1e <__fixunssfsi+0x2c>
    59fa:	b9 2f       	mov	r27, r25
    59fc:	99 27       	eor	r25, r25
    59fe:	b7 51       	subi	r27, 0x17	; 23
    5a00:	a0 f0       	brcs	.+40     	; 0x5a2a <__fixunssfsi+0x38>
    5a02:	d1 f0       	breq	.+52     	; 0x5a38 <__fixunssfsi+0x46>
    5a04:	66 0f       	add	r22, r22
    5a06:	77 1f       	adc	r23, r23
    5a08:	88 1f       	adc	r24, r24
    5a0a:	99 1f       	adc	r25, r25
    5a0c:	1a f0       	brmi	.+6      	; 0x5a14 <__fixunssfsi+0x22>
    5a0e:	ba 95       	dec	r27
    5a10:	c9 f7       	brne	.-14     	; 0x5a04 <__fixunssfsi+0x12>
    5a12:	12 c0       	rjmp	.+36     	; 0x5a38 <__fixunssfsi+0x46>
    5a14:	b1 30       	cpi	r27, 0x01	; 1
    5a16:	81 f0       	breq	.+32     	; 0x5a38 <__fixunssfsi+0x46>
    5a18:	9f d0       	rcall	.+318    	; 0x5b58 <__fp_zero>
    5a1a:	b1 e0       	ldi	r27, 0x01	; 1
    5a1c:	08 95       	ret
    5a1e:	9c c0       	rjmp	.+312    	; 0x5b58 <__fp_zero>
    5a20:	67 2f       	mov	r22, r23
    5a22:	78 2f       	mov	r23, r24
    5a24:	88 27       	eor	r24, r24
    5a26:	b8 5f       	subi	r27, 0xF8	; 248
    5a28:	39 f0       	breq	.+14     	; 0x5a38 <__fixunssfsi+0x46>
    5a2a:	b9 3f       	cpi	r27, 0xF9	; 249
    5a2c:	cc f3       	brlt	.-14     	; 0x5a20 <__fixunssfsi+0x2e>
    5a2e:	86 95       	lsr	r24
    5a30:	77 95       	ror	r23
    5a32:	67 95       	ror	r22
    5a34:	b3 95       	inc	r27
    5a36:	d9 f7       	brne	.-10     	; 0x5a2e <__fixunssfsi+0x3c>
    5a38:	3e f4       	brtc	.+14     	; 0x5a48 <__fixunssfsi+0x56>
    5a3a:	90 95       	com	r25
    5a3c:	80 95       	com	r24
    5a3e:	70 95       	com	r23
    5a40:	61 95       	neg	r22
    5a42:	7f 4f       	sbci	r23, 0xFF	; 255
    5a44:	8f 4f       	sbci	r24, 0xFF	; 255
    5a46:	9f 4f       	sbci	r25, 0xFF	; 255
    5a48:	08 95       	ret

00005a4a <__floatunsisf>:
    5a4a:	e8 94       	clt
    5a4c:	09 c0       	rjmp	.+18     	; 0x5a60 <__floatsisf+0x12>

00005a4e <__floatsisf>:
    5a4e:	97 fb       	bst	r25, 7
    5a50:	3e f4       	brtc	.+14     	; 0x5a60 <__floatsisf+0x12>
    5a52:	90 95       	com	r25
    5a54:	80 95       	com	r24
    5a56:	70 95       	com	r23
    5a58:	61 95       	neg	r22
    5a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a60:	99 23       	and	r25, r25
    5a62:	a9 f0       	breq	.+42     	; 0x5a8e <__floatsisf+0x40>
    5a64:	f9 2f       	mov	r31, r25
    5a66:	96 e9       	ldi	r25, 0x96	; 150
    5a68:	bb 27       	eor	r27, r27
    5a6a:	93 95       	inc	r25
    5a6c:	f6 95       	lsr	r31
    5a6e:	87 95       	ror	r24
    5a70:	77 95       	ror	r23
    5a72:	67 95       	ror	r22
    5a74:	b7 95       	ror	r27
    5a76:	f1 11       	cpse	r31, r1
    5a78:	f8 cf       	rjmp	.-16     	; 0x5a6a <__floatsisf+0x1c>
    5a7a:	fa f4       	brpl	.+62     	; 0x5aba <__floatsisf+0x6c>
    5a7c:	bb 0f       	add	r27, r27
    5a7e:	11 f4       	brne	.+4      	; 0x5a84 <__floatsisf+0x36>
    5a80:	60 ff       	sbrs	r22, 0
    5a82:	1b c0       	rjmp	.+54     	; 0x5aba <__floatsisf+0x6c>
    5a84:	6f 5f       	subi	r22, 0xFF	; 255
    5a86:	7f 4f       	sbci	r23, 0xFF	; 255
    5a88:	8f 4f       	sbci	r24, 0xFF	; 255
    5a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a8c:	16 c0       	rjmp	.+44     	; 0x5aba <__floatsisf+0x6c>
    5a8e:	88 23       	and	r24, r24
    5a90:	11 f0       	breq	.+4      	; 0x5a96 <__floatsisf+0x48>
    5a92:	96 e9       	ldi	r25, 0x96	; 150
    5a94:	11 c0       	rjmp	.+34     	; 0x5ab8 <__floatsisf+0x6a>
    5a96:	77 23       	and	r23, r23
    5a98:	21 f0       	breq	.+8      	; 0x5aa2 <__floatsisf+0x54>
    5a9a:	9e e8       	ldi	r25, 0x8E	; 142
    5a9c:	87 2f       	mov	r24, r23
    5a9e:	76 2f       	mov	r23, r22
    5aa0:	05 c0       	rjmp	.+10     	; 0x5aac <__floatsisf+0x5e>
    5aa2:	66 23       	and	r22, r22
    5aa4:	71 f0       	breq	.+28     	; 0x5ac2 <__floatsisf+0x74>
    5aa6:	96 e8       	ldi	r25, 0x86	; 134
    5aa8:	86 2f       	mov	r24, r22
    5aaa:	70 e0       	ldi	r23, 0x00	; 0
    5aac:	60 e0       	ldi	r22, 0x00	; 0
    5aae:	2a f0       	brmi	.+10     	; 0x5aba <__floatsisf+0x6c>
    5ab0:	9a 95       	dec	r25
    5ab2:	66 0f       	add	r22, r22
    5ab4:	77 1f       	adc	r23, r23
    5ab6:	88 1f       	adc	r24, r24
    5ab8:	da f7       	brpl	.-10     	; 0x5ab0 <__floatsisf+0x62>
    5aba:	88 0f       	add	r24, r24
    5abc:	96 95       	lsr	r25
    5abe:	87 95       	ror	r24
    5ac0:	97 f9       	bld	r25, 7
    5ac2:	08 95       	ret

00005ac4 <__fp_inf>:
    5ac4:	97 f9       	bld	r25, 7
    5ac6:	9f 67       	ori	r25, 0x7F	; 127
    5ac8:	80 e8       	ldi	r24, 0x80	; 128
    5aca:	70 e0       	ldi	r23, 0x00	; 0
    5acc:	60 e0       	ldi	r22, 0x00	; 0
    5ace:	08 95       	ret

00005ad0 <__fp_nan>:
    5ad0:	9f ef       	ldi	r25, 0xFF	; 255
    5ad2:	80 ec       	ldi	r24, 0xC0	; 192
    5ad4:	08 95       	ret

00005ad6 <__fp_pscA>:
    5ad6:	00 24       	eor	r0, r0
    5ad8:	0a 94       	dec	r0
    5ada:	16 16       	cp	r1, r22
    5adc:	17 06       	cpc	r1, r23
    5ade:	18 06       	cpc	r1, r24
    5ae0:	09 06       	cpc	r0, r25
    5ae2:	08 95       	ret

00005ae4 <__fp_pscB>:
    5ae4:	00 24       	eor	r0, r0
    5ae6:	0a 94       	dec	r0
    5ae8:	12 16       	cp	r1, r18
    5aea:	13 06       	cpc	r1, r19
    5aec:	14 06       	cpc	r1, r20
    5aee:	05 06       	cpc	r0, r21
    5af0:	08 95       	ret

00005af2 <__fp_round>:
    5af2:	09 2e       	mov	r0, r25
    5af4:	03 94       	inc	r0
    5af6:	00 0c       	add	r0, r0
    5af8:	11 f4       	brne	.+4      	; 0x5afe <__fp_round+0xc>
    5afa:	88 23       	and	r24, r24
    5afc:	52 f0       	brmi	.+20     	; 0x5b12 <__fp_round+0x20>
    5afe:	bb 0f       	add	r27, r27
    5b00:	40 f4       	brcc	.+16     	; 0x5b12 <__fp_round+0x20>
    5b02:	bf 2b       	or	r27, r31
    5b04:	11 f4       	brne	.+4      	; 0x5b0a <__fp_round+0x18>
    5b06:	60 ff       	sbrs	r22, 0
    5b08:	04 c0       	rjmp	.+8      	; 0x5b12 <__fp_round+0x20>
    5b0a:	6f 5f       	subi	r22, 0xFF	; 255
    5b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    5b10:	9f 4f       	sbci	r25, 0xFF	; 255
    5b12:	08 95       	ret

00005b14 <__fp_split3>:
    5b14:	57 fd       	sbrc	r21, 7
    5b16:	90 58       	subi	r25, 0x80	; 128
    5b18:	44 0f       	add	r20, r20
    5b1a:	55 1f       	adc	r21, r21
    5b1c:	59 f0       	breq	.+22     	; 0x5b34 <__fp_splitA+0x10>
    5b1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5b20:	71 f0       	breq	.+28     	; 0x5b3e <__fp_splitA+0x1a>
    5b22:	47 95       	ror	r20

00005b24 <__fp_splitA>:
    5b24:	88 0f       	add	r24, r24
    5b26:	97 fb       	bst	r25, 7
    5b28:	99 1f       	adc	r25, r25
    5b2a:	61 f0       	breq	.+24     	; 0x5b44 <__fp_splitA+0x20>
    5b2c:	9f 3f       	cpi	r25, 0xFF	; 255
    5b2e:	79 f0       	breq	.+30     	; 0x5b4e <__fp_splitA+0x2a>
    5b30:	87 95       	ror	r24
    5b32:	08 95       	ret
    5b34:	12 16       	cp	r1, r18
    5b36:	13 06       	cpc	r1, r19
    5b38:	14 06       	cpc	r1, r20
    5b3a:	55 1f       	adc	r21, r21
    5b3c:	f2 cf       	rjmp	.-28     	; 0x5b22 <__fp_split3+0xe>
    5b3e:	46 95       	lsr	r20
    5b40:	f1 df       	rcall	.-30     	; 0x5b24 <__fp_splitA>
    5b42:	08 c0       	rjmp	.+16     	; 0x5b54 <__fp_splitA+0x30>
    5b44:	16 16       	cp	r1, r22
    5b46:	17 06       	cpc	r1, r23
    5b48:	18 06       	cpc	r1, r24
    5b4a:	99 1f       	adc	r25, r25
    5b4c:	f1 cf       	rjmp	.-30     	; 0x5b30 <__fp_splitA+0xc>
    5b4e:	86 95       	lsr	r24
    5b50:	71 05       	cpc	r23, r1
    5b52:	61 05       	cpc	r22, r1
    5b54:	08 94       	sec
    5b56:	08 95       	ret

00005b58 <__fp_zero>:
    5b58:	e8 94       	clt

00005b5a <__fp_szero>:
    5b5a:	bb 27       	eor	r27, r27
    5b5c:	66 27       	eor	r22, r22
    5b5e:	77 27       	eor	r23, r23
    5b60:	cb 01       	movw	r24, r22
    5b62:	97 f9       	bld	r25, 7
    5b64:	08 95       	ret

00005b66 <__mulsf3>:
    5b66:	0b d0       	rcall	.+22     	; 0x5b7e <__mulsf3x>
    5b68:	c4 cf       	rjmp	.-120    	; 0x5af2 <__fp_round>
    5b6a:	b5 df       	rcall	.-150    	; 0x5ad6 <__fp_pscA>
    5b6c:	28 f0       	brcs	.+10     	; 0x5b78 <__mulsf3+0x12>
    5b6e:	ba df       	rcall	.-140    	; 0x5ae4 <__fp_pscB>
    5b70:	18 f0       	brcs	.+6      	; 0x5b78 <__mulsf3+0x12>
    5b72:	95 23       	and	r25, r21
    5b74:	09 f0       	breq	.+2      	; 0x5b78 <__mulsf3+0x12>
    5b76:	a6 cf       	rjmp	.-180    	; 0x5ac4 <__fp_inf>
    5b78:	ab cf       	rjmp	.-170    	; 0x5ad0 <__fp_nan>
    5b7a:	11 24       	eor	r1, r1
    5b7c:	ee cf       	rjmp	.-36     	; 0x5b5a <__fp_szero>

00005b7e <__mulsf3x>:
    5b7e:	ca df       	rcall	.-108    	; 0x5b14 <__fp_split3>
    5b80:	a0 f3       	brcs	.-24     	; 0x5b6a <__mulsf3+0x4>

00005b82 <__mulsf3_pse>:
    5b82:	95 9f       	mul	r25, r21
    5b84:	d1 f3       	breq	.-12     	; 0x5b7a <__mulsf3+0x14>
    5b86:	95 0f       	add	r25, r21
    5b88:	50 e0       	ldi	r21, 0x00	; 0
    5b8a:	55 1f       	adc	r21, r21
    5b8c:	62 9f       	mul	r22, r18
    5b8e:	f0 01       	movw	r30, r0
    5b90:	72 9f       	mul	r23, r18
    5b92:	bb 27       	eor	r27, r27
    5b94:	f0 0d       	add	r31, r0
    5b96:	b1 1d       	adc	r27, r1
    5b98:	63 9f       	mul	r22, r19
    5b9a:	aa 27       	eor	r26, r26
    5b9c:	f0 0d       	add	r31, r0
    5b9e:	b1 1d       	adc	r27, r1
    5ba0:	aa 1f       	adc	r26, r26
    5ba2:	64 9f       	mul	r22, r20
    5ba4:	66 27       	eor	r22, r22
    5ba6:	b0 0d       	add	r27, r0
    5ba8:	a1 1d       	adc	r26, r1
    5baa:	66 1f       	adc	r22, r22
    5bac:	82 9f       	mul	r24, r18
    5bae:	22 27       	eor	r18, r18
    5bb0:	b0 0d       	add	r27, r0
    5bb2:	a1 1d       	adc	r26, r1
    5bb4:	62 1f       	adc	r22, r18
    5bb6:	73 9f       	mul	r23, r19
    5bb8:	b0 0d       	add	r27, r0
    5bba:	a1 1d       	adc	r26, r1
    5bbc:	62 1f       	adc	r22, r18
    5bbe:	83 9f       	mul	r24, r19
    5bc0:	a0 0d       	add	r26, r0
    5bc2:	61 1d       	adc	r22, r1
    5bc4:	22 1f       	adc	r18, r18
    5bc6:	74 9f       	mul	r23, r20
    5bc8:	33 27       	eor	r19, r19
    5bca:	a0 0d       	add	r26, r0
    5bcc:	61 1d       	adc	r22, r1
    5bce:	23 1f       	adc	r18, r19
    5bd0:	84 9f       	mul	r24, r20
    5bd2:	60 0d       	add	r22, r0
    5bd4:	21 1d       	adc	r18, r1
    5bd6:	82 2f       	mov	r24, r18
    5bd8:	76 2f       	mov	r23, r22
    5bda:	6a 2f       	mov	r22, r26
    5bdc:	11 24       	eor	r1, r1
    5bde:	9f 57       	subi	r25, 0x7F	; 127
    5be0:	50 40       	sbci	r21, 0x00	; 0
    5be2:	8a f0       	brmi	.+34     	; 0x5c06 <__mulsf3_pse+0x84>
    5be4:	e1 f0       	breq	.+56     	; 0x5c1e <__mulsf3_pse+0x9c>
    5be6:	88 23       	and	r24, r24
    5be8:	4a f0       	brmi	.+18     	; 0x5bfc <__mulsf3_pse+0x7a>
    5bea:	ee 0f       	add	r30, r30
    5bec:	ff 1f       	adc	r31, r31
    5bee:	bb 1f       	adc	r27, r27
    5bf0:	66 1f       	adc	r22, r22
    5bf2:	77 1f       	adc	r23, r23
    5bf4:	88 1f       	adc	r24, r24
    5bf6:	91 50       	subi	r25, 0x01	; 1
    5bf8:	50 40       	sbci	r21, 0x00	; 0
    5bfa:	a9 f7       	brne	.-22     	; 0x5be6 <__mulsf3_pse+0x64>
    5bfc:	9e 3f       	cpi	r25, 0xFE	; 254
    5bfe:	51 05       	cpc	r21, r1
    5c00:	70 f0       	brcs	.+28     	; 0x5c1e <__mulsf3_pse+0x9c>
    5c02:	60 cf       	rjmp	.-320    	; 0x5ac4 <__fp_inf>
    5c04:	aa cf       	rjmp	.-172    	; 0x5b5a <__fp_szero>
    5c06:	5f 3f       	cpi	r21, 0xFF	; 255
    5c08:	ec f3       	brlt	.-6      	; 0x5c04 <__mulsf3_pse+0x82>
    5c0a:	98 3e       	cpi	r25, 0xE8	; 232
    5c0c:	dc f3       	brlt	.-10     	; 0x5c04 <__mulsf3_pse+0x82>
    5c0e:	86 95       	lsr	r24
    5c10:	77 95       	ror	r23
    5c12:	67 95       	ror	r22
    5c14:	b7 95       	ror	r27
    5c16:	f7 95       	ror	r31
    5c18:	e7 95       	ror	r30
    5c1a:	9f 5f       	subi	r25, 0xFF	; 255
    5c1c:	c1 f7       	brne	.-16     	; 0x5c0e <__mulsf3_pse+0x8c>
    5c1e:	fe 2b       	or	r31, r30
    5c20:	88 0f       	add	r24, r24
    5c22:	91 1d       	adc	r25, r1
    5c24:	96 95       	lsr	r25
    5c26:	87 95       	ror	r24
    5c28:	97 f9       	bld	r25, 7
    5c2a:	08 95       	ret

00005c2c <__udivmodsi4>:
    5c2c:	a1 e2       	ldi	r26, 0x21	; 33
    5c2e:	1a 2e       	mov	r1, r26
    5c30:	aa 1b       	sub	r26, r26
    5c32:	bb 1b       	sub	r27, r27
    5c34:	fd 01       	movw	r30, r26
    5c36:	0d c0       	rjmp	.+26     	; 0x5c52 <__udivmodsi4_ep>

00005c38 <__udivmodsi4_loop>:
    5c38:	aa 1f       	adc	r26, r26
    5c3a:	bb 1f       	adc	r27, r27
    5c3c:	ee 1f       	adc	r30, r30
    5c3e:	ff 1f       	adc	r31, r31
    5c40:	a2 17       	cp	r26, r18
    5c42:	b3 07       	cpc	r27, r19
    5c44:	e4 07       	cpc	r30, r20
    5c46:	f5 07       	cpc	r31, r21
    5c48:	20 f0       	brcs	.+8      	; 0x5c52 <__udivmodsi4_ep>
    5c4a:	a2 1b       	sub	r26, r18
    5c4c:	b3 0b       	sbc	r27, r19
    5c4e:	e4 0b       	sbc	r30, r20
    5c50:	f5 0b       	sbc	r31, r21

00005c52 <__udivmodsi4_ep>:
    5c52:	66 1f       	adc	r22, r22
    5c54:	77 1f       	adc	r23, r23
    5c56:	88 1f       	adc	r24, r24
    5c58:	99 1f       	adc	r25, r25
    5c5a:	1a 94       	dec	r1
    5c5c:	69 f7       	brne	.-38     	; 0x5c38 <__udivmodsi4_loop>
    5c5e:	60 95       	com	r22
    5c60:	70 95       	com	r23
    5c62:	80 95       	com	r24
    5c64:	90 95       	com	r25
    5c66:	9b 01       	movw	r18, r22
    5c68:	ac 01       	movw	r20, r24
    5c6a:	bd 01       	movw	r22, r26
    5c6c:	cf 01       	movw	r24, r30
    5c6e:	08 95       	ret

00005c70 <__tablejump2__>:
    5c70:	ee 0f       	add	r30, r30
    5c72:	ff 1f       	adc	r31, r31
    5c74:	88 1f       	adc	r24, r24
    5c76:	8b bf       	out	0x3b, r24	; 59
    5c78:	07 90       	elpm	r0, Z+
    5c7a:	f6 91       	elpm	r31, Z
    5c7c:	e0 2d       	mov	r30, r0
    5c7e:	19 94       	eijmp

00005c80 <calloc>:
    5c80:	0f 93       	push	r16
    5c82:	1f 93       	push	r17
    5c84:	cf 93       	push	r28
    5c86:	df 93       	push	r29
    5c88:	86 9f       	mul	r24, r22
    5c8a:	80 01       	movw	r16, r0
    5c8c:	87 9f       	mul	r24, r23
    5c8e:	10 0d       	add	r17, r0
    5c90:	96 9f       	mul	r25, r22
    5c92:	10 0d       	add	r17, r0
    5c94:	11 24       	eor	r1, r1
    5c96:	c8 01       	movw	r24, r16
    5c98:	0d d0       	rcall	.+26     	; 0x5cb4 <malloc>
    5c9a:	ec 01       	movw	r28, r24
    5c9c:	00 97       	sbiw	r24, 0x00	; 0
    5c9e:	21 f0       	breq	.+8      	; 0x5ca8 <calloc+0x28>
    5ca0:	a8 01       	movw	r20, r16
    5ca2:	60 e0       	ldi	r22, 0x00	; 0
    5ca4:	70 e0       	ldi	r23, 0x00	; 0
    5ca6:	34 d1       	rcall	.+616    	; 0x5f10 <memset>
    5ca8:	ce 01       	movw	r24, r28
    5caa:	df 91       	pop	r29
    5cac:	cf 91       	pop	r28
    5cae:	1f 91       	pop	r17
    5cb0:	0f 91       	pop	r16
    5cb2:	08 95       	ret

00005cb4 <malloc>:
    5cb4:	0f 93       	push	r16
    5cb6:	1f 93       	push	r17
    5cb8:	cf 93       	push	r28
    5cba:	df 93       	push	r29
    5cbc:	82 30       	cpi	r24, 0x02	; 2
    5cbe:	91 05       	cpc	r25, r1
    5cc0:	10 f4       	brcc	.+4      	; 0x5cc6 <malloc+0x12>
    5cc2:	82 e0       	ldi	r24, 0x02	; 2
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	e0 91 f4 14 	lds	r30, 0x14F4	; 0x8014f4 <__flp>
    5cca:	f0 91 f5 14 	lds	r31, 0x14F5	; 0x8014f5 <__flp+0x1>
    5cce:	20 e0       	ldi	r18, 0x00	; 0
    5cd0:	30 e0       	ldi	r19, 0x00	; 0
    5cd2:	a0 e0       	ldi	r26, 0x00	; 0
    5cd4:	b0 e0       	ldi	r27, 0x00	; 0
    5cd6:	30 97       	sbiw	r30, 0x00	; 0
    5cd8:	19 f1       	breq	.+70     	; 0x5d20 <malloc+0x6c>
    5cda:	40 81       	ld	r20, Z
    5cdc:	51 81       	ldd	r21, Z+1	; 0x01
    5cde:	02 81       	ldd	r16, Z+2	; 0x02
    5ce0:	13 81       	ldd	r17, Z+3	; 0x03
    5ce2:	48 17       	cp	r20, r24
    5ce4:	59 07       	cpc	r21, r25
    5ce6:	c8 f0       	brcs	.+50     	; 0x5d1a <malloc+0x66>
    5ce8:	84 17       	cp	r24, r20
    5cea:	95 07       	cpc	r25, r21
    5cec:	69 f4       	brne	.+26     	; 0x5d08 <malloc+0x54>
    5cee:	10 97       	sbiw	r26, 0x00	; 0
    5cf0:	31 f0       	breq	.+12     	; 0x5cfe <malloc+0x4a>
    5cf2:	12 96       	adiw	r26, 0x02	; 2
    5cf4:	0c 93       	st	X, r16
    5cf6:	12 97       	sbiw	r26, 0x02	; 2
    5cf8:	13 96       	adiw	r26, 0x03	; 3
    5cfa:	1c 93       	st	X, r17
    5cfc:	27 c0       	rjmp	.+78     	; 0x5d4c <malloc+0x98>
    5cfe:	00 93 f4 14 	sts	0x14F4, r16	; 0x8014f4 <__flp>
    5d02:	10 93 f5 14 	sts	0x14F5, r17	; 0x8014f5 <__flp+0x1>
    5d06:	22 c0       	rjmp	.+68     	; 0x5d4c <malloc+0x98>
    5d08:	21 15       	cp	r18, r1
    5d0a:	31 05       	cpc	r19, r1
    5d0c:	19 f0       	breq	.+6      	; 0x5d14 <malloc+0x60>
    5d0e:	42 17       	cp	r20, r18
    5d10:	53 07       	cpc	r21, r19
    5d12:	18 f4       	brcc	.+6      	; 0x5d1a <malloc+0x66>
    5d14:	9a 01       	movw	r18, r20
    5d16:	bd 01       	movw	r22, r26
    5d18:	ef 01       	movw	r28, r30
    5d1a:	df 01       	movw	r26, r30
    5d1c:	f8 01       	movw	r30, r16
    5d1e:	db cf       	rjmp	.-74     	; 0x5cd6 <malloc+0x22>
    5d20:	21 15       	cp	r18, r1
    5d22:	31 05       	cpc	r19, r1
    5d24:	f9 f0       	breq	.+62     	; 0x5d64 <malloc+0xb0>
    5d26:	28 1b       	sub	r18, r24
    5d28:	39 0b       	sbc	r19, r25
    5d2a:	24 30       	cpi	r18, 0x04	; 4
    5d2c:	31 05       	cpc	r19, r1
    5d2e:	80 f4       	brcc	.+32     	; 0x5d50 <malloc+0x9c>
    5d30:	8a 81       	ldd	r24, Y+2	; 0x02
    5d32:	9b 81       	ldd	r25, Y+3	; 0x03
    5d34:	61 15       	cp	r22, r1
    5d36:	71 05       	cpc	r23, r1
    5d38:	21 f0       	breq	.+8      	; 0x5d42 <malloc+0x8e>
    5d3a:	fb 01       	movw	r30, r22
    5d3c:	93 83       	std	Z+3, r25	; 0x03
    5d3e:	82 83       	std	Z+2, r24	; 0x02
    5d40:	04 c0       	rjmp	.+8      	; 0x5d4a <malloc+0x96>
    5d42:	90 93 f5 14 	sts	0x14F5, r25	; 0x8014f5 <__flp+0x1>
    5d46:	80 93 f4 14 	sts	0x14F4, r24	; 0x8014f4 <__flp>
    5d4a:	fe 01       	movw	r30, r28
    5d4c:	32 96       	adiw	r30, 0x02	; 2
    5d4e:	44 c0       	rjmp	.+136    	; 0x5dd8 <malloc+0x124>
    5d50:	fe 01       	movw	r30, r28
    5d52:	e2 0f       	add	r30, r18
    5d54:	f3 1f       	adc	r31, r19
    5d56:	81 93       	st	Z+, r24
    5d58:	91 93       	st	Z+, r25
    5d5a:	22 50       	subi	r18, 0x02	; 2
    5d5c:	31 09       	sbc	r19, r1
    5d5e:	39 83       	std	Y+1, r19	; 0x01
    5d60:	28 83       	st	Y, r18
    5d62:	3a c0       	rjmp	.+116    	; 0x5dd8 <malloc+0x124>
    5d64:	20 91 f2 14 	lds	r18, 0x14F2	; 0x8014f2 <__brkval>
    5d68:	30 91 f3 14 	lds	r19, 0x14F3	; 0x8014f3 <__brkval+0x1>
    5d6c:	23 2b       	or	r18, r19
    5d6e:	41 f4       	brne	.+16     	; 0x5d80 <malloc+0xcc>
    5d70:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5d74:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5d78:	30 93 f3 14 	sts	0x14F3, r19	; 0x8014f3 <__brkval+0x1>
    5d7c:	20 93 f2 14 	sts	0x14F2, r18	; 0x8014f2 <__brkval>
    5d80:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5d84:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5d88:	21 15       	cp	r18, r1
    5d8a:	31 05       	cpc	r19, r1
    5d8c:	41 f4       	brne	.+16     	; 0x5d9e <malloc+0xea>
    5d8e:	2d b7       	in	r18, 0x3d	; 61
    5d90:	3e b7       	in	r19, 0x3e	; 62
    5d92:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5d96:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d9a:	24 1b       	sub	r18, r20
    5d9c:	35 0b       	sbc	r19, r21
    5d9e:	e0 91 f2 14 	lds	r30, 0x14F2	; 0x8014f2 <__brkval>
    5da2:	f0 91 f3 14 	lds	r31, 0x14F3	; 0x8014f3 <__brkval+0x1>
    5da6:	e2 17       	cp	r30, r18
    5da8:	f3 07       	cpc	r31, r19
    5daa:	a0 f4       	brcc	.+40     	; 0x5dd4 <malloc+0x120>
    5dac:	2e 1b       	sub	r18, r30
    5dae:	3f 0b       	sbc	r19, r31
    5db0:	28 17       	cp	r18, r24
    5db2:	39 07       	cpc	r19, r25
    5db4:	78 f0       	brcs	.+30     	; 0x5dd4 <malloc+0x120>
    5db6:	ac 01       	movw	r20, r24
    5db8:	4e 5f       	subi	r20, 0xFE	; 254
    5dba:	5f 4f       	sbci	r21, 0xFF	; 255
    5dbc:	24 17       	cp	r18, r20
    5dbe:	35 07       	cpc	r19, r21
    5dc0:	48 f0       	brcs	.+18     	; 0x5dd4 <malloc+0x120>
    5dc2:	4e 0f       	add	r20, r30
    5dc4:	5f 1f       	adc	r21, r31
    5dc6:	50 93 f3 14 	sts	0x14F3, r21	; 0x8014f3 <__brkval+0x1>
    5dca:	40 93 f2 14 	sts	0x14F2, r20	; 0x8014f2 <__brkval>
    5dce:	81 93       	st	Z+, r24
    5dd0:	91 93       	st	Z+, r25
    5dd2:	02 c0       	rjmp	.+4      	; 0x5dd8 <malloc+0x124>
    5dd4:	e0 e0       	ldi	r30, 0x00	; 0
    5dd6:	f0 e0       	ldi	r31, 0x00	; 0
    5dd8:	cf 01       	movw	r24, r30
    5dda:	df 91       	pop	r29
    5ddc:	cf 91       	pop	r28
    5dde:	1f 91       	pop	r17
    5de0:	0f 91       	pop	r16
    5de2:	08 95       	ret

00005de4 <free>:
    5de4:	cf 93       	push	r28
    5de6:	df 93       	push	r29
    5de8:	00 97       	sbiw	r24, 0x00	; 0
    5dea:	09 f4       	brne	.+2      	; 0x5dee <free+0xa>
    5dec:	81 c0       	rjmp	.+258    	; 0x5ef0 <free+0x10c>
    5dee:	fc 01       	movw	r30, r24
    5df0:	32 97       	sbiw	r30, 0x02	; 2
    5df2:	13 82       	std	Z+3, r1	; 0x03
    5df4:	12 82       	std	Z+2, r1	; 0x02
    5df6:	a0 91 f4 14 	lds	r26, 0x14F4	; 0x8014f4 <__flp>
    5dfa:	b0 91 f5 14 	lds	r27, 0x14F5	; 0x8014f5 <__flp+0x1>
    5dfe:	10 97       	sbiw	r26, 0x00	; 0
    5e00:	81 f4       	brne	.+32     	; 0x5e22 <free+0x3e>
    5e02:	20 81       	ld	r18, Z
    5e04:	31 81       	ldd	r19, Z+1	; 0x01
    5e06:	82 0f       	add	r24, r18
    5e08:	93 1f       	adc	r25, r19
    5e0a:	20 91 f2 14 	lds	r18, 0x14F2	; 0x8014f2 <__brkval>
    5e0e:	30 91 f3 14 	lds	r19, 0x14F3	; 0x8014f3 <__brkval+0x1>
    5e12:	28 17       	cp	r18, r24
    5e14:	39 07       	cpc	r19, r25
    5e16:	51 f5       	brne	.+84     	; 0x5e6c <free+0x88>
    5e18:	f0 93 f3 14 	sts	0x14F3, r31	; 0x8014f3 <__brkval+0x1>
    5e1c:	e0 93 f2 14 	sts	0x14F2, r30	; 0x8014f2 <__brkval>
    5e20:	67 c0       	rjmp	.+206    	; 0x5ef0 <free+0x10c>
    5e22:	ed 01       	movw	r28, r26
    5e24:	20 e0       	ldi	r18, 0x00	; 0
    5e26:	30 e0       	ldi	r19, 0x00	; 0
    5e28:	ce 17       	cp	r28, r30
    5e2a:	df 07       	cpc	r29, r31
    5e2c:	40 f4       	brcc	.+16     	; 0x5e3e <free+0x5a>
    5e2e:	4a 81       	ldd	r20, Y+2	; 0x02
    5e30:	5b 81       	ldd	r21, Y+3	; 0x03
    5e32:	9e 01       	movw	r18, r28
    5e34:	41 15       	cp	r20, r1
    5e36:	51 05       	cpc	r21, r1
    5e38:	f1 f0       	breq	.+60     	; 0x5e76 <free+0x92>
    5e3a:	ea 01       	movw	r28, r20
    5e3c:	f5 cf       	rjmp	.-22     	; 0x5e28 <free+0x44>
    5e3e:	d3 83       	std	Z+3, r29	; 0x03
    5e40:	c2 83       	std	Z+2, r28	; 0x02
    5e42:	40 81       	ld	r20, Z
    5e44:	51 81       	ldd	r21, Z+1	; 0x01
    5e46:	84 0f       	add	r24, r20
    5e48:	95 1f       	adc	r25, r21
    5e4a:	c8 17       	cp	r28, r24
    5e4c:	d9 07       	cpc	r29, r25
    5e4e:	59 f4       	brne	.+22     	; 0x5e66 <free+0x82>
    5e50:	88 81       	ld	r24, Y
    5e52:	99 81       	ldd	r25, Y+1	; 0x01
    5e54:	84 0f       	add	r24, r20
    5e56:	95 1f       	adc	r25, r21
    5e58:	02 96       	adiw	r24, 0x02	; 2
    5e5a:	91 83       	std	Z+1, r25	; 0x01
    5e5c:	80 83       	st	Z, r24
    5e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e60:	9b 81       	ldd	r25, Y+3	; 0x03
    5e62:	93 83       	std	Z+3, r25	; 0x03
    5e64:	82 83       	std	Z+2, r24	; 0x02
    5e66:	21 15       	cp	r18, r1
    5e68:	31 05       	cpc	r19, r1
    5e6a:	29 f4       	brne	.+10     	; 0x5e76 <free+0x92>
    5e6c:	f0 93 f5 14 	sts	0x14F5, r31	; 0x8014f5 <__flp+0x1>
    5e70:	e0 93 f4 14 	sts	0x14F4, r30	; 0x8014f4 <__flp>
    5e74:	3d c0       	rjmp	.+122    	; 0x5ef0 <free+0x10c>
    5e76:	e9 01       	movw	r28, r18
    5e78:	fb 83       	std	Y+3, r31	; 0x03
    5e7a:	ea 83       	std	Y+2, r30	; 0x02
    5e7c:	49 91       	ld	r20, Y+
    5e7e:	59 91       	ld	r21, Y+
    5e80:	c4 0f       	add	r28, r20
    5e82:	d5 1f       	adc	r29, r21
    5e84:	ec 17       	cp	r30, r28
    5e86:	fd 07       	cpc	r31, r29
    5e88:	61 f4       	brne	.+24     	; 0x5ea2 <free+0xbe>
    5e8a:	80 81       	ld	r24, Z
    5e8c:	91 81       	ldd	r25, Z+1	; 0x01
    5e8e:	84 0f       	add	r24, r20
    5e90:	95 1f       	adc	r25, r21
    5e92:	02 96       	adiw	r24, 0x02	; 2
    5e94:	e9 01       	movw	r28, r18
    5e96:	99 83       	std	Y+1, r25	; 0x01
    5e98:	88 83       	st	Y, r24
    5e9a:	82 81       	ldd	r24, Z+2	; 0x02
    5e9c:	93 81       	ldd	r25, Z+3	; 0x03
    5e9e:	9b 83       	std	Y+3, r25	; 0x03
    5ea0:	8a 83       	std	Y+2, r24	; 0x02
    5ea2:	e0 e0       	ldi	r30, 0x00	; 0
    5ea4:	f0 e0       	ldi	r31, 0x00	; 0
    5ea6:	12 96       	adiw	r26, 0x02	; 2
    5ea8:	8d 91       	ld	r24, X+
    5eaa:	9c 91       	ld	r25, X
    5eac:	13 97       	sbiw	r26, 0x03	; 3
    5eae:	00 97       	sbiw	r24, 0x00	; 0
    5eb0:	19 f0       	breq	.+6      	; 0x5eb8 <free+0xd4>
    5eb2:	fd 01       	movw	r30, r26
    5eb4:	dc 01       	movw	r26, r24
    5eb6:	f7 cf       	rjmp	.-18     	; 0x5ea6 <free+0xc2>
    5eb8:	8d 91       	ld	r24, X+
    5eba:	9c 91       	ld	r25, X
    5ebc:	11 97       	sbiw	r26, 0x01	; 1
    5ebe:	9d 01       	movw	r18, r26
    5ec0:	2e 5f       	subi	r18, 0xFE	; 254
    5ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ec4:	82 0f       	add	r24, r18
    5ec6:	93 1f       	adc	r25, r19
    5ec8:	20 91 f2 14 	lds	r18, 0x14F2	; 0x8014f2 <__brkval>
    5ecc:	30 91 f3 14 	lds	r19, 0x14F3	; 0x8014f3 <__brkval+0x1>
    5ed0:	28 17       	cp	r18, r24
    5ed2:	39 07       	cpc	r19, r25
    5ed4:	69 f4       	brne	.+26     	; 0x5ef0 <free+0x10c>
    5ed6:	30 97       	sbiw	r30, 0x00	; 0
    5ed8:	29 f4       	brne	.+10     	; 0x5ee4 <free+0x100>
    5eda:	10 92 f5 14 	sts	0x14F5, r1	; 0x8014f5 <__flp+0x1>
    5ede:	10 92 f4 14 	sts	0x14F4, r1	; 0x8014f4 <__flp>
    5ee2:	02 c0       	rjmp	.+4      	; 0x5ee8 <free+0x104>
    5ee4:	13 82       	std	Z+3, r1	; 0x03
    5ee6:	12 82       	std	Z+2, r1	; 0x02
    5ee8:	b0 93 f3 14 	sts	0x14F3, r27	; 0x8014f3 <__brkval+0x1>
    5eec:	a0 93 f2 14 	sts	0x14F2, r26	; 0x8014f2 <__brkval>
    5ef0:	df 91       	pop	r29
    5ef2:	cf 91       	pop	r28
    5ef4:	08 95       	ret

00005ef6 <abort>:
    5ef6:	81 e0       	ldi	r24, 0x01	; 1
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	f8 94       	cli
    5efc:	7d c3       	rjmp	.+1786   	; 0x65f8 <_exit>

00005efe <memcpy>:
    5efe:	fb 01       	movw	r30, r22
    5f00:	dc 01       	movw	r26, r24
    5f02:	02 c0       	rjmp	.+4      	; 0x5f08 <memcpy+0xa>
    5f04:	01 90       	ld	r0, Z+
    5f06:	0d 92       	st	X+, r0
    5f08:	41 50       	subi	r20, 0x01	; 1
    5f0a:	50 40       	sbci	r21, 0x00	; 0
    5f0c:	d8 f7       	brcc	.-10     	; 0x5f04 <memcpy+0x6>
    5f0e:	08 95       	ret

00005f10 <memset>:
    5f10:	dc 01       	movw	r26, r24
    5f12:	01 c0       	rjmp	.+2      	; 0x5f16 <memset+0x6>
    5f14:	6d 93       	st	X+, r22
    5f16:	41 50       	subi	r20, 0x01	; 1
    5f18:	50 40       	sbci	r21, 0x00	; 0
    5f1a:	e0 f7       	brcc	.-8      	; 0x5f14 <memset+0x4>
    5f1c:	08 95       	ret

00005f1e <strcasestr>:
    5f1e:	fb 01       	movw	r30, r22
    5f20:	51 91       	ld	r21, Z+
    5f22:	55 23       	and	r21, r21
    5f24:	b1 f0       	breq	.+44     	; 0x5f52 <strcasestr+0x34>
    5f26:	bf 01       	movw	r22, r30
    5f28:	dc 01       	movw	r26, r24
    5f2a:	05 2e       	mov	r0, r21
    5f2c:	4d 91       	ld	r20, X+
    5f2e:	44 23       	and	r20, r20
    5f30:	69 f0       	breq	.+26     	; 0x5f4c <strcasestr+0x2e>
    5f32:	10 d0       	rcall	.+32     	; 0x5f54 <strcasestr+0x36>
    5f34:	d9 f7       	brne	.-10     	; 0x5f2c <strcasestr+0xe>
    5f36:	cd 01       	movw	r24, r26
    5f38:	01 90       	ld	r0, Z+
    5f3a:	00 20       	and	r0, r0
    5f3c:	49 f0       	breq	.+18     	; 0x5f50 <strcasestr+0x32>
    5f3e:	4d 91       	ld	r20, X+
    5f40:	41 11       	cpse	r20, r1
    5f42:	08 d0       	rcall	.+16     	; 0x5f54 <strcasestr+0x36>
    5f44:	c9 f3       	breq	.-14     	; 0x5f38 <strcasestr+0x1a>
    5f46:	fb 01       	movw	r30, r22
    5f48:	41 11       	cpse	r20, r1
    5f4a:	ee cf       	rjmp	.-36     	; 0x5f28 <strcasestr+0xa>
    5f4c:	81 e0       	ldi	r24, 0x01	; 1
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	08 95       	ret
    5f54:	40 25       	eor	r20, r0
    5f56:	39 f0       	breq	.+14     	; 0x5f66 <strcasestr+0x48>
    5f58:	40 32       	cpi	r20, 0x20	; 32
    5f5a:	29 f4       	brne	.+10     	; 0x5f66 <strcasestr+0x48>
    5f5c:	40 29       	or	r20, r0
    5f5e:	4b 57       	subi	r20, 0x7B	; 123
    5f60:	46 5e       	subi	r20, 0xE6	; 230
    5f62:	08 f0       	brcs	.+2      	; 0x5f66 <strcasestr+0x48>
    5f64:	18 94       	sez
    5f66:	08 95       	ret

00005f68 <strcat>:
    5f68:	fb 01       	movw	r30, r22
    5f6a:	dc 01       	movw	r26, r24
    5f6c:	0d 90       	ld	r0, X+
    5f6e:	00 20       	and	r0, r0
    5f70:	e9 f7       	brne	.-6      	; 0x5f6c <strcat+0x4>
    5f72:	11 97       	sbiw	r26, 0x01	; 1
    5f74:	01 90       	ld	r0, Z+
    5f76:	0d 92       	st	X+, r0
    5f78:	00 20       	and	r0, r0
    5f7a:	e1 f7       	brne	.-8      	; 0x5f74 <strcat+0xc>
    5f7c:	08 95       	ret

00005f7e <strcpy>:
    5f7e:	fb 01       	movw	r30, r22
    5f80:	dc 01       	movw	r26, r24
    5f82:	01 90       	ld	r0, Z+
    5f84:	0d 92       	st	X+, r0
    5f86:	00 20       	and	r0, r0
    5f88:	e1 f7       	brne	.-8      	; 0x5f82 <strcpy+0x4>
    5f8a:	08 95       	ret

00005f8c <strncasecmp>:
    5f8c:	fb 01       	movw	r30, r22
    5f8e:	dc 01       	movw	r26, r24
    5f90:	41 50       	subi	r20, 0x01	; 1
    5f92:	50 40       	sbci	r21, 0x00	; 0
    5f94:	88 f0       	brcs	.+34     	; 0x5fb8 <strncasecmp+0x2c>
    5f96:	8d 91       	ld	r24, X+
    5f98:	81 34       	cpi	r24, 0x41	; 65
    5f9a:	1c f0       	brlt	.+6      	; 0x5fa2 <strncasecmp+0x16>
    5f9c:	8b 35       	cpi	r24, 0x5B	; 91
    5f9e:	0c f4       	brge	.+2      	; 0x5fa2 <strncasecmp+0x16>
    5fa0:	80 5e       	subi	r24, 0xE0	; 224
    5fa2:	61 91       	ld	r22, Z+
    5fa4:	61 34       	cpi	r22, 0x41	; 65
    5fa6:	1c f0       	brlt	.+6      	; 0x5fae <strncasecmp+0x22>
    5fa8:	6b 35       	cpi	r22, 0x5B	; 91
    5faa:	0c f4       	brge	.+2      	; 0x5fae <strncasecmp+0x22>
    5fac:	60 5e       	subi	r22, 0xE0	; 224
    5fae:	86 1b       	sub	r24, r22
    5fb0:	61 11       	cpse	r22, r1
    5fb2:	71 f3       	breq	.-36     	; 0x5f90 <strncasecmp+0x4>
    5fb4:	99 0b       	sbc	r25, r25
    5fb6:	08 95       	ret
    5fb8:	88 1b       	sub	r24, r24
    5fba:	fc cf       	rjmp	.-8      	; 0x5fb4 <strncasecmp+0x28>

00005fbc <printf>:
    5fbc:	cf 93       	push	r28
    5fbe:	df 93       	push	r29
    5fc0:	cd b7       	in	r28, 0x3d	; 61
    5fc2:	de b7       	in	r29, 0x3e	; 62
    5fc4:	ae 01       	movw	r20, r28
    5fc6:	4a 5f       	subi	r20, 0xFA	; 250
    5fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    5fca:	fa 01       	movw	r30, r20
    5fcc:	61 91       	ld	r22, Z+
    5fce:	71 91       	ld	r23, Z+
    5fd0:	af 01       	movw	r20, r30
    5fd2:	80 91 f8 14 	lds	r24, 0x14F8	; 0x8014f8 <__iob+0x2>
    5fd6:	90 91 f9 14 	lds	r25, 0x14F9	; 0x8014f9 <__iob+0x3>
    5fda:	61 d0       	rcall	.+194    	; 0x609e <vfprintf>
    5fdc:	df 91       	pop	r29
    5fde:	cf 91       	pop	r28
    5fe0:	08 95       	ret

00005fe2 <puts>:
    5fe2:	0f 93       	push	r16
    5fe4:	1f 93       	push	r17
    5fe6:	cf 93       	push	r28
    5fe8:	df 93       	push	r29
    5fea:	e0 91 f8 14 	lds	r30, 0x14F8	; 0x8014f8 <__iob+0x2>
    5fee:	f0 91 f9 14 	lds	r31, 0x14F9	; 0x8014f9 <__iob+0x3>
    5ff2:	23 81       	ldd	r18, Z+3	; 0x03
    5ff4:	21 ff       	sbrs	r18, 1
    5ff6:	1b c0       	rjmp	.+54     	; 0x602e <puts+0x4c>
    5ff8:	8c 01       	movw	r16, r24
    5ffa:	d0 e0       	ldi	r29, 0x00	; 0
    5ffc:	c0 e0       	ldi	r28, 0x00	; 0
    5ffe:	f8 01       	movw	r30, r16
    6000:	81 91       	ld	r24, Z+
    6002:	8f 01       	movw	r16, r30
    6004:	60 91 f8 14 	lds	r22, 0x14F8	; 0x8014f8 <__iob+0x2>
    6008:	70 91 f9 14 	lds	r23, 0x14F9	; 0x8014f9 <__iob+0x3>
    600c:	db 01       	movw	r26, r22
    600e:	18 96       	adiw	r26, 0x08	; 8
    6010:	ed 91       	ld	r30, X+
    6012:	fc 91       	ld	r31, X
    6014:	19 97       	sbiw	r26, 0x09	; 9
    6016:	88 23       	and	r24, r24
    6018:	31 f0       	breq	.+12     	; 0x6026 <puts+0x44>
    601a:	19 95       	eicall
    601c:	89 2b       	or	r24, r25
    601e:	79 f3       	breq	.-34     	; 0x5ffe <puts+0x1c>
    6020:	df ef       	ldi	r29, 0xFF	; 255
    6022:	cf ef       	ldi	r28, 0xFF	; 255
    6024:	ec cf       	rjmp	.-40     	; 0x5ffe <puts+0x1c>
    6026:	8a e0       	ldi	r24, 0x0A	; 10
    6028:	19 95       	eicall
    602a:	89 2b       	or	r24, r25
    602c:	19 f0       	breq	.+6      	; 0x6034 <puts+0x52>
    602e:	8f ef       	ldi	r24, 0xFF	; 255
    6030:	9f ef       	ldi	r25, 0xFF	; 255
    6032:	02 c0       	rjmp	.+4      	; 0x6038 <puts+0x56>
    6034:	8d 2f       	mov	r24, r29
    6036:	9c 2f       	mov	r25, r28
    6038:	df 91       	pop	r29
    603a:	cf 91       	pop	r28
    603c:	1f 91       	pop	r17
    603e:	0f 91       	pop	r16
    6040:	08 95       	ret

00006042 <sprintf>:
    6042:	0f 93       	push	r16
    6044:	1f 93       	push	r17
    6046:	cf 93       	push	r28
    6048:	df 93       	push	r29
    604a:	cd b7       	in	r28, 0x3d	; 61
    604c:	de b7       	in	r29, 0x3e	; 62
    604e:	2e 97       	sbiw	r28, 0x0e	; 14
    6050:	0f b6       	in	r0, 0x3f	; 63
    6052:	f8 94       	cli
    6054:	de bf       	out	0x3e, r29	; 62
    6056:	0f be       	out	0x3f, r0	; 63
    6058:	cd bf       	out	0x3d, r28	; 61
    605a:	0e 89       	ldd	r16, Y+22	; 0x16
    605c:	1f 89       	ldd	r17, Y+23	; 0x17
    605e:	86 e0       	ldi	r24, 0x06	; 6
    6060:	8c 83       	std	Y+4, r24	; 0x04
    6062:	1a 83       	std	Y+2, r17	; 0x02
    6064:	09 83       	std	Y+1, r16	; 0x01
    6066:	8f ef       	ldi	r24, 0xFF	; 255
    6068:	9f e7       	ldi	r25, 0x7F	; 127
    606a:	9e 83       	std	Y+6, r25	; 0x06
    606c:	8d 83       	std	Y+5, r24	; 0x05
    606e:	ae 01       	movw	r20, r28
    6070:	46 5e       	subi	r20, 0xE6	; 230
    6072:	5f 4f       	sbci	r21, 0xFF	; 255
    6074:	68 8d       	ldd	r22, Y+24	; 0x18
    6076:	79 8d       	ldd	r23, Y+25	; 0x19
    6078:	ce 01       	movw	r24, r28
    607a:	01 96       	adiw	r24, 0x01	; 1
    607c:	10 d0       	rcall	.+32     	; 0x609e <vfprintf>
    607e:	ef 81       	ldd	r30, Y+7	; 0x07
    6080:	f8 85       	ldd	r31, Y+8	; 0x08
    6082:	e0 0f       	add	r30, r16
    6084:	f1 1f       	adc	r31, r17
    6086:	10 82       	st	Z, r1
    6088:	2e 96       	adiw	r28, 0x0e	; 14
    608a:	0f b6       	in	r0, 0x3f	; 63
    608c:	f8 94       	cli
    608e:	de bf       	out	0x3e, r29	; 62
    6090:	0f be       	out	0x3f, r0	; 63
    6092:	cd bf       	out	0x3d, r28	; 61
    6094:	df 91       	pop	r29
    6096:	cf 91       	pop	r28
    6098:	1f 91       	pop	r17
    609a:	0f 91       	pop	r16
    609c:	08 95       	ret

0000609e <vfprintf>:
    609e:	2f 92       	push	r2
    60a0:	3f 92       	push	r3
    60a2:	4f 92       	push	r4
    60a4:	5f 92       	push	r5
    60a6:	6f 92       	push	r6
    60a8:	7f 92       	push	r7
    60aa:	8f 92       	push	r8
    60ac:	9f 92       	push	r9
    60ae:	af 92       	push	r10
    60b0:	bf 92       	push	r11
    60b2:	cf 92       	push	r12
    60b4:	df 92       	push	r13
    60b6:	ef 92       	push	r14
    60b8:	ff 92       	push	r15
    60ba:	0f 93       	push	r16
    60bc:	1f 93       	push	r17
    60be:	cf 93       	push	r28
    60c0:	df 93       	push	r29
    60c2:	cd b7       	in	r28, 0x3d	; 61
    60c4:	de b7       	in	r29, 0x3e	; 62
    60c6:	2b 97       	sbiw	r28, 0x0b	; 11
    60c8:	0f b6       	in	r0, 0x3f	; 63
    60ca:	f8 94       	cli
    60cc:	de bf       	out	0x3e, r29	; 62
    60ce:	0f be       	out	0x3f, r0	; 63
    60d0:	cd bf       	out	0x3d, r28	; 61
    60d2:	6c 01       	movw	r12, r24
    60d4:	7b 01       	movw	r14, r22
    60d6:	8a 01       	movw	r16, r20
    60d8:	fc 01       	movw	r30, r24
    60da:	17 82       	std	Z+7, r1	; 0x07
    60dc:	16 82       	std	Z+6, r1	; 0x06
    60de:	83 81       	ldd	r24, Z+3	; 0x03
    60e0:	81 ff       	sbrs	r24, 1
    60e2:	bf c1       	rjmp	.+894    	; 0x6462 <vfprintf+0x3c4>
    60e4:	ce 01       	movw	r24, r28
    60e6:	01 96       	adiw	r24, 0x01	; 1
    60e8:	3c 01       	movw	r6, r24
    60ea:	f6 01       	movw	r30, r12
    60ec:	93 81       	ldd	r25, Z+3	; 0x03
    60ee:	f7 01       	movw	r30, r14
    60f0:	93 fd       	sbrc	r25, 3
    60f2:	85 91       	lpm	r24, Z+
    60f4:	93 ff       	sbrs	r25, 3
    60f6:	81 91       	ld	r24, Z+
    60f8:	7f 01       	movw	r14, r30
    60fa:	88 23       	and	r24, r24
    60fc:	09 f4       	brne	.+2      	; 0x6100 <vfprintf+0x62>
    60fe:	ad c1       	rjmp	.+858    	; 0x645a <vfprintf+0x3bc>
    6100:	85 32       	cpi	r24, 0x25	; 37
    6102:	39 f4       	brne	.+14     	; 0x6112 <vfprintf+0x74>
    6104:	93 fd       	sbrc	r25, 3
    6106:	85 91       	lpm	r24, Z+
    6108:	93 ff       	sbrs	r25, 3
    610a:	81 91       	ld	r24, Z+
    610c:	7f 01       	movw	r14, r30
    610e:	85 32       	cpi	r24, 0x25	; 37
    6110:	21 f4       	brne	.+8      	; 0x611a <vfprintf+0x7c>
    6112:	b6 01       	movw	r22, r12
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	d6 d1       	rcall	.+940    	; 0x64c4 <fputc>
    6118:	e8 cf       	rjmp	.-48     	; 0x60ea <vfprintf+0x4c>
    611a:	91 2c       	mov	r9, r1
    611c:	21 2c       	mov	r2, r1
    611e:	31 2c       	mov	r3, r1
    6120:	ff e1       	ldi	r31, 0x1F	; 31
    6122:	f3 15       	cp	r31, r3
    6124:	d8 f0       	brcs	.+54     	; 0x615c <vfprintf+0xbe>
    6126:	8b 32       	cpi	r24, 0x2B	; 43
    6128:	79 f0       	breq	.+30     	; 0x6148 <vfprintf+0xaa>
    612a:	38 f4       	brcc	.+14     	; 0x613a <vfprintf+0x9c>
    612c:	80 32       	cpi	r24, 0x20	; 32
    612e:	79 f0       	breq	.+30     	; 0x614e <vfprintf+0xb0>
    6130:	83 32       	cpi	r24, 0x23	; 35
    6132:	a1 f4       	brne	.+40     	; 0x615c <vfprintf+0xbe>
    6134:	23 2d       	mov	r18, r3
    6136:	20 61       	ori	r18, 0x10	; 16
    6138:	1d c0       	rjmp	.+58     	; 0x6174 <vfprintf+0xd6>
    613a:	8d 32       	cpi	r24, 0x2D	; 45
    613c:	61 f0       	breq	.+24     	; 0x6156 <vfprintf+0xb8>
    613e:	80 33       	cpi	r24, 0x30	; 48
    6140:	69 f4       	brne	.+26     	; 0x615c <vfprintf+0xbe>
    6142:	23 2d       	mov	r18, r3
    6144:	21 60       	ori	r18, 0x01	; 1
    6146:	16 c0       	rjmp	.+44     	; 0x6174 <vfprintf+0xd6>
    6148:	83 2d       	mov	r24, r3
    614a:	82 60       	ori	r24, 0x02	; 2
    614c:	38 2e       	mov	r3, r24
    614e:	e3 2d       	mov	r30, r3
    6150:	e4 60       	ori	r30, 0x04	; 4
    6152:	3e 2e       	mov	r3, r30
    6154:	2a c0       	rjmp	.+84     	; 0x61aa <vfprintf+0x10c>
    6156:	f3 2d       	mov	r31, r3
    6158:	f8 60       	ori	r31, 0x08	; 8
    615a:	1d c0       	rjmp	.+58     	; 0x6196 <vfprintf+0xf8>
    615c:	37 fc       	sbrc	r3, 7
    615e:	2d c0       	rjmp	.+90     	; 0x61ba <vfprintf+0x11c>
    6160:	20 ed       	ldi	r18, 0xD0	; 208
    6162:	28 0f       	add	r18, r24
    6164:	2a 30       	cpi	r18, 0x0A	; 10
    6166:	40 f0       	brcs	.+16     	; 0x6178 <vfprintf+0xda>
    6168:	8e 32       	cpi	r24, 0x2E	; 46
    616a:	b9 f4       	brne	.+46     	; 0x619a <vfprintf+0xfc>
    616c:	36 fc       	sbrc	r3, 6
    616e:	75 c1       	rjmp	.+746    	; 0x645a <vfprintf+0x3bc>
    6170:	23 2d       	mov	r18, r3
    6172:	20 64       	ori	r18, 0x40	; 64
    6174:	32 2e       	mov	r3, r18
    6176:	19 c0       	rjmp	.+50     	; 0x61aa <vfprintf+0x10c>
    6178:	36 fe       	sbrs	r3, 6
    617a:	06 c0       	rjmp	.+12     	; 0x6188 <vfprintf+0xea>
    617c:	8a e0       	ldi	r24, 0x0A	; 10
    617e:	98 9e       	mul	r9, r24
    6180:	20 0d       	add	r18, r0
    6182:	11 24       	eor	r1, r1
    6184:	92 2e       	mov	r9, r18
    6186:	11 c0       	rjmp	.+34     	; 0x61aa <vfprintf+0x10c>
    6188:	ea e0       	ldi	r30, 0x0A	; 10
    618a:	2e 9e       	mul	r2, r30
    618c:	20 0d       	add	r18, r0
    618e:	11 24       	eor	r1, r1
    6190:	22 2e       	mov	r2, r18
    6192:	f3 2d       	mov	r31, r3
    6194:	f0 62       	ori	r31, 0x20	; 32
    6196:	3f 2e       	mov	r3, r31
    6198:	08 c0       	rjmp	.+16     	; 0x61aa <vfprintf+0x10c>
    619a:	8c 36       	cpi	r24, 0x6C	; 108
    619c:	21 f4       	brne	.+8      	; 0x61a6 <vfprintf+0x108>
    619e:	83 2d       	mov	r24, r3
    61a0:	80 68       	ori	r24, 0x80	; 128
    61a2:	38 2e       	mov	r3, r24
    61a4:	02 c0       	rjmp	.+4      	; 0x61aa <vfprintf+0x10c>
    61a6:	88 36       	cpi	r24, 0x68	; 104
    61a8:	41 f4       	brne	.+16     	; 0x61ba <vfprintf+0x11c>
    61aa:	f7 01       	movw	r30, r14
    61ac:	93 fd       	sbrc	r25, 3
    61ae:	85 91       	lpm	r24, Z+
    61b0:	93 ff       	sbrs	r25, 3
    61b2:	81 91       	ld	r24, Z+
    61b4:	7f 01       	movw	r14, r30
    61b6:	81 11       	cpse	r24, r1
    61b8:	b3 cf       	rjmp	.-154    	; 0x6120 <vfprintf+0x82>
    61ba:	98 2f       	mov	r25, r24
    61bc:	9f 7d       	andi	r25, 0xDF	; 223
    61be:	95 54       	subi	r25, 0x45	; 69
    61c0:	93 30       	cpi	r25, 0x03	; 3
    61c2:	28 f4       	brcc	.+10     	; 0x61ce <vfprintf+0x130>
    61c4:	0c 5f       	subi	r16, 0xFC	; 252
    61c6:	1f 4f       	sbci	r17, 0xFF	; 255
    61c8:	9f e3       	ldi	r25, 0x3F	; 63
    61ca:	99 83       	std	Y+1, r25	; 0x01
    61cc:	0d c0       	rjmp	.+26     	; 0x61e8 <vfprintf+0x14a>
    61ce:	83 36       	cpi	r24, 0x63	; 99
    61d0:	31 f0       	breq	.+12     	; 0x61de <vfprintf+0x140>
    61d2:	83 37       	cpi	r24, 0x73	; 115
    61d4:	71 f0       	breq	.+28     	; 0x61f2 <vfprintf+0x154>
    61d6:	83 35       	cpi	r24, 0x53	; 83
    61d8:	09 f0       	breq	.+2      	; 0x61dc <vfprintf+0x13e>
    61da:	55 c0       	rjmp	.+170    	; 0x6286 <vfprintf+0x1e8>
    61dc:	20 c0       	rjmp	.+64     	; 0x621e <vfprintf+0x180>
    61de:	f8 01       	movw	r30, r16
    61e0:	80 81       	ld	r24, Z
    61e2:	89 83       	std	Y+1, r24	; 0x01
    61e4:	0e 5f       	subi	r16, 0xFE	; 254
    61e6:	1f 4f       	sbci	r17, 0xFF	; 255
    61e8:	88 24       	eor	r8, r8
    61ea:	83 94       	inc	r8
    61ec:	91 2c       	mov	r9, r1
    61ee:	53 01       	movw	r10, r6
    61f0:	12 c0       	rjmp	.+36     	; 0x6216 <vfprintf+0x178>
    61f2:	28 01       	movw	r4, r16
    61f4:	f2 e0       	ldi	r31, 0x02	; 2
    61f6:	4f 0e       	add	r4, r31
    61f8:	51 1c       	adc	r5, r1
    61fa:	f8 01       	movw	r30, r16
    61fc:	a0 80       	ld	r10, Z
    61fe:	b1 80       	ldd	r11, Z+1	; 0x01
    6200:	36 fe       	sbrs	r3, 6
    6202:	03 c0       	rjmp	.+6      	; 0x620a <vfprintf+0x16c>
    6204:	69 2d       	mov	r22, r9
    6206:	70 e0       	ldi	r23, 0x00	; 0
    6208:	02 c0       	rjmp	.+4      	; 0x620e <vfprintf+0x170>
    620a:	6f ef       	ldi	r22, 0xFF	; 255
    620c:	7f ef       	ldi	r23, 0xFF	; 255
    620e:	c5 01       	movw	r24, r10
    6210:	4e d1       	rcall	.+668    	; 0x64ae <strnlen>
    6212:	4c 01       	movw	r8, r24
    6214:	82 01       	movw	r16, r4
    6216:	f3 2d       	mov	r31, r3
    6218:	ff 77       	andi	r31, 0x7F	; 127
    621a:	3f 2e       	mov	r3, r31
    621c:	15 c0       	rjmp	.+42     	; 0x6248 <vfprintf+0x1aa>
    621e:	28 01       	movw	r4, r16
    6220:	22 e0       	ldi	r18, 0x02	; 2
    6222:	42 0e       	add	r4, r18
    6224:	51 1c       	adc	r5, r1
    6226:	f8 01       	movw	r30, r16
    6228:	a0 80       	ld	r10, Z
    622a:	b1 80       	ldd	r11, Z+1	; 0x01
    622c:	36 fe       	sbrs	r3, 6
    622e:	03 c0       	rjmp	.+6      	; 0x6236 <vfprintf+0x198>
    6230:	69 2d       	mov	r22, r9
    6232:	70 e0       	ldi	r23, 0x00	; 0
    6234:	02 c0       	rjmp	.+4      	; 0x623a <vfprintf+0x19c>
    6236:	6f ef       	ldi	r22, 0xFF	; 255
    6238:	7f ef       	ldi	r23, 0xFF	; 255
    623a:	c5 01       	movw	r24, r10
    623c:	2d d1       	rcall	.+602    	; 0x6498 <strnlen_P>
    623e:	4c 01       	movw	r8, r24
    6240:	f3 2d       	mov	r31, r3
    6242:	f0 68       	ori	r31, 0x80	; 128
    6244:	3f 2e       	mov	r3, r31
    6246:	82 01       	movw	r16, r4
    6248:	33 fc       	sbrc	r3, 3
    624a:	19 c0       	rjmp	.+50     	; 0x627e <vfprintf+0x1e0>
    624c:	82 2d       	mov	r24, r2
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	88 16       	cp	r8, r24
    6252:	99 06       	cpc	r9, r25
    6254:	a0 f4       	brcc	.+40     	; 0x627e <vfprintf+0x1e0>
    6256:	b6 01       	movw	r22, r12
    6258:	80 e2       	ldi	r24, 0x20	; 32
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	33 d1       	rcall	.+614    	; 0x64c4 <fputc>
    625e:	2a 94       	dec	r2
    6260:	f5 cf       	rjmp	.-22     	; 0x624c <vfprintf+0x1ae>
    6262:	f5 01       	movw	r30, r10
    6264:	37 fc       	sbrc	r3, 7
    6266:	85 91       	lpm	r24, Z+
    6268:	37 fe       	sbrs	r3, 7
    626a:	81 91       	ld	r24, Z+
    626c:	5f 01       	movw	r10, r30
    626e:	b6 01       	movw	r22, r12
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	28 d1       	rcall	.+592    	; 0x64c4 <fputc>
    6274:	21 10       	cpse	r2, r1
    6276:	2a 94       	dec	r2
    6278:	21 e0       	ldi	r18, 0x01	; 1
    627a:	82 1a       	sub	r8, r18
    627c:	91 08       	sbc	r9, r1
    627e:	81 14       	cp	r8, r1
    6280:	91 04       	cpc	r9, r1
    6282:	79 f7       	brne	.-34     	; 0x6262 <vfprintf+0x1c4>
    6284:	e1 c0       	rjmp	.+450    	; 0x6448 <vfprintf+0x3aa>
    6286:	84 36       	cpi	r24, 0x64	; 100
    6288:	11 f0       	breq	.+4      	; 0x628e <vfprintf+0x1f0>
    628a:	89 36       	cpi	r24, 0x69	; 105
    628c:	39 f5       	brne	.+78     	; 0x62dc <vfprintf+0x23e>
    628e:	f8 01       	movw	r30, r16
    6290:	37 fe       	sbrs	r3, 7
    6292:	07 c0       	rjmp	.+14     	; 0x62a2 <vfprintf+0x204>
    6294:	60 81       	ld	r22, Z
    6296:	71 81       	ldd	r23, Z+1	; 0x01
    6298:	82 81       	ldd	r24, Z+2	; 0x02
    629a:	93 81       	ldd	r25, Z+3	; 0x03
    629c:	0c 5f       	subi	r16, 0xFC	; 252
    629e:	1f 4f       	sbci	r17, 0xFF	; 255
    62a0:	08 c0       	rjmp	.+16     	; 0x62b2 <vfprintf+0x214>
    62a2:	60 81       	ld	r22, Z
    62a4:	71 81       	ldd	r23, Z+1	; 0x01
    62a6:	07 2e       	mov	r0, r23
    62a8:	00 0c       	add	r0, r0
    62aa:	88 0b       	sbc	r24, r24
    62ac:	99 0b       	sbc	r25, r25
    62ae:	0e 5f       	subi	r16, 0xFE	; 254
    62b0:	1f 4f       	sbci	r17, 0xFF	; 255
    62b2:	f3 2d       	mov	r31, r3
    62b4:	ff 76       	andi	r31, 0x6F	; 111
    62b6:	3f 2e       	mov	r3, r31
    62b8:	97 ff       	sbrs	r25, 7
    62ba:	09 c0       	rjmp	.+18     	; 0x62ce <vfprintf+0x230>
    62bc:	90 95       	com	r25
    62be:	80 95       	com	r24
    62c0:	70 95       	com	r23
    62c2:	61 95       	neg	r22
    62c4:	7f 4f       	sbci	r23, 0xFF	; 255
    62c6:	8f 4f       	sbci	r24, 0xFF	; 255
    62c8:	9f 4f       	sbci	r25, 0xFF	; 255
    62ca:	f0 68       	ori	r31, 0x80	; 128
    62cc:	3f 2e       	mov	r3, r31
    62ce:	2a e0       	ldi	r18, 0x0A	; 10
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	a3 01       	movw	r20, r6
    62d4:	33 d1       	rcall	.+614    	; 0x653c <__ultoa_invert>
    62d6:	88 2e       	mov	r8, r24
    62d8:	86 18       	sub	r8, r6
    62da:	44 c0       	rjmp	.+136    	; 0x6364 <vfprintf+0x2c6>
    62dc:	85 37       	cpi	r24, 0x75	; 117
    62de:	31 f4       	brne	.+12     	; 0x62ec <vfprintf+0x24e>
    62e0:	23 2d       	mov	r18, r3
    62e2:	2f 7e       	andi	r18, 0xEF	; 239
    62e4:	b2 2e       	mov	r11, r18
    62e6:	2a e0       	ldi	r18, 0x0A	; 10
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	25 c0       	rjmp	.+74     	; 0x6336 <vfprintf+0x298>
    62ec:	93 2d       	mov	r25, r3
    62ee:	99 7f       	andi	r25, 0xF9	; 249
    62f0:	b9 2e       	mov	r11, r25
    62f2:	8f 36       	cpi	r24, 0x6F	; 111
    62f4:	c1 f0       	breq	.+48     	; 0x6326 <vfprintf+0x288>
    62f6:	18 f4       	brcc	.+6      	; 0x62fe <vfprintf+0x260>
    62f8:	88 35       	cpi	r24, 0x58	; 88
    62fa:	79 f0       	breq	.+30     	; 0x631a <vfprintf+0x27c>
    62fc:	ae c0       	rjmp	.+348    	; 0x645a <vfprintf+0x3bc>
    62fe:	80 37       	cpi	r24, 0x70	; 112
    6300:	19 f0       	breq	.+6      	; 0x6308 <vfprintf+0x26a>
    6302:	88 37       	cpi	r24, 0x78	; 120
    6304:	21 f0       	breq	.+8      	; 0x630e <vfprintf+0x270>
    6306:	a9 c0       	rjmp	.+338    	; 0x645a <vfprintf+0x3bc>
    6308:	e9 2f       	mov	r30, r25
    630a:	e0 61       	ori	r30, 0x10	; 16
    630c:	be 2e       	mov	r11, r30
    630e:	b4 fe       	sbrs	r11, 4
    6310:	0d c0       	rjmp	.+26     	; 0x632c <vfprintf+0x28e>
    6312:	fb 2d       	mov	r31, r11
    6314:	f4 60       	ori	r31, 0x04	; 4
    6316:	bf 2e       	mov	r11, r31
    6318:	09 c0       	rjmp	.+18     	; 0x632c <vfprintf+0x28e>
    631a:	34 fe       	sbrs	r3, 4
    631c:	0a c0       	rjmp	.+20     	; 0x6332 <vfprintf+0x294>
    631e:	29 2f       	mov	r18, r25
    6320:	26 60       	ori	r18, 0x06	; 6
    6322:	b2 2e       	mov	r11, r18
    6324:	06 c0       	rjmp	.+12     	; 0x6332 <vfprintf+0x294>
    6326:	28 e0       	ldi	r18, 0x08	; 8
    6328:	30 e0       	ldi	r19, 0x00	; 0
    632a:	05 c0       	rjmp	.+10     	; 0x6336 <vfprintf+0x298>
    632c:	20 e1       	ldi	r18, 0x10	; 16
    632e:	30 e0       	ldi	r19, 0x00	; 0
    6330:	02 c0       	rjmp	.+4      	; 0x6336 <vfprintf+0x298>
    6332:	20 e1       	ldi	r18, 0x10	; 16
    6334:	32 e0       	ldi	r19, 0x02	; 2
    6336:	f8 01       	movw	r30, r16
    6338:	b7 fe       	sbrs	r11, 7
    633a:	07 c0       	rjmp	.+14     	; 0x634a <vfprintf+0x2ac>
    633c:	60 81       	ld	r22, Z
    633e:	71 81       	ldd	r23, Z+1	; 0x01
    6340:	82 81       	ldd	r24, Z+2	; 0x02
    6342:	93 81       	ldd	r25, Z+3	; 0x03
    6344:	0c 5f       	subi	r16, 0xFC	; 252
    6346:	1f 4f       	sbci	r17, 0xFF	; 255
    6348:	06 c0       	rjmp	.+12     	; 0x6356 <vfprintf+0x2b8>
    634a:	60 81       	ld	r22, Z
    634c:	71 81       	ldd	r23, Z+1	; 0x01
    634e:	80 e0       	ldi	r24, 0x00	; 0
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	0e 5f       	subi	r16, 0xFE	; 254
    6354:	1f 4f       	sbci	r17, 0xFF	; 255
    6356:	a3 01       	movw	r20, r6
    6358:	f1 d0       	rcall	.+482    	; 0x653c <__ultoa_invert>
    635a:	88 2e       	mov	r8, r24
    635c:	86 18       	sub	r8, r6
    635e:	fb 2d       	mov	r31, r11
    6360:	ff 77       	andi	r31, 0x7F	; 127
    6362:	3f 2e       	mov	r3, r31
    6364:	36 fe       	sbrs	r3, 6
    6366:	0d c0       	rjmp	.+26     	; 0x6382 <vfprintf+0x2e4>
    6368:	23 2d       	mov	r18, r3
    636a:	2e 7f       	andi	r18, 0xFE	; 254
    636c:	a2 2e       	mov	r10, r18
    636e:	89 14       	cp	r8, r9
    6370:	58 f4       	brcc	.+22     	; 0x6388 <vfprintf+0x2ea>
    6372:	34 fe       	sbrs	r3, 4
    6374:	0b c0       	rjmp	.+22     	; 0x638c <vfprintf+0x2ee>
    6376:	32 fc       	sbrc	r3, 2
    6378:	09 c0       	rjmp	.+18     	; 0x638c <vfprintf+0x2ee>
    637a:	83 2d       	mov	r24, r3
    637c:	8e 7e       	andi	r24, 0xEE	; 238
    637e:	a8 2e       	mov	r10, r24
    6380:	05 c0       	rjmp	.+10     	; 0x638c <vfprintf+0x2ee>
    6382:	b8 2c       	mov	r11, r8
    6384:	a3 2c       	mov	r10, r3
    6386:	03 c0       	rjmp	.+6      	; 0x638e <vfprintf+0x2f0>
    6388:	b8 2c       	mov	r11, r8
    638a:	01 c0       	rjmp	.+2      	; 0x638e <vfprintf+0x2f0>
    638c:	b9 2c       	mov	r11, r9
    638e:	a4 fe       	sbrs	r10, 4
    6390:	0f c0       	rjmp	.+30     	; 0x63b0 <vfprintf+0x312>
    6392:	fe 01       	movw	r30, r28
    6394:	e8 0d       	add	r30, r8
    6396:	f1 1d       	adc	r31, r1
    6398:	80 81       	ld	r24, Z
    639a:	80 33       	cpi	r24, 0x30	; 48
    639c:	21 f4       	brne	.+8      	; 0x63a6 <vfprintf+0x308>
    639e:	9a 2d       	mov	r25, r10
    63a0:	99 7e       	andi	r25, 0xE9	; 233
    63a2:	a9 2e       	mov	r10, r25
    63a4:	09 c0       	rjmp	.+18     	; 0x63b8 <vfprintf+0x31a>
    63a6:	a2 fe       	sbrs	r10, 2
    63a8:	06 c0       	rjmp	.+12     	; 0x63b6 <vfprintf+0x318>
    63aa:	b3 94       	inc	r11
    63ac:	b3 94       	inc	r11
    63ae:	04 c0       	rjmp	.+8      	; 0x63b8 <vfprintf+0x31a>
    63b0:	8a 2d       	mov	r24, r10
    63b2:	86 78       	andi	r24, 0x86	; 134
    63b4:	09 f0       	breq	.+2      	; 0x63b8 <vfprintf+0x31a>
    63b6:	b3 94       	inc	r11
    63b8:	a3 fc       	sbrc	r10, 3
    63ba:	10 c0       	rjmp	.+32     	; 0x63dc <vfprintf+0x33e>
    63bc:	a0 fe       	sbrs	r10, 0
    63be:	06 c0       	rjmp	.+12     	; 0x63cc <vfprintf+0x32e>
    63c0:	b2 14       	cp	r11, r2
    63c2:	80 f4       	brcc	.+32     	; 0x63e4 <vfprintf+0x346>
    63c4:	28 0c       	add	r2, r8
    63c6:	92 2c       	mov	r9, r2
    63c8:	9b 18       	sub	r9, r11
    63ca:	0d c0       	rjmp	.+26     	; 0x63e6 <vfprintf+0x348>
    63cc:	b2 14       	cp	r11, r2
    63ce:	58 f4       	brcc	.+22     	; 0x63e6 <vfprintf+0x348>
    63d0:	b6 01       	movw	r22, r12
    63d2:	80 e2       	ldi	r24, 0x20	; 32
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	76 d0       	rcall	.+236    	; 0x64c4 <fputc>
    63d8:	b3 94       	inc	r11
    63da:	f8 cf       	rjmp	.-16     	; 0x63cc <vfprintf+0x32e>
    63dc:	b2 14       	cp	r11, r2
    63de:	18 f4       	brcc	.+6      	; 0x63e6 <vfprintf+0x348>
    63e0:	2b 18       	sub	r2, r11
    63e2:	02 c0       	rjmp	.+4      	; 0x63e8 <vfprintf+0x34a>
    63e4:	98 2c       	mov	r9, r8
    63e6:	21 2c       	mov	r2, r1
    63e8:	a4 fe       	sbrs	r10, 4
    63ea:	0f c0       	rjmp	.+30     	; 0x640a <vfprintf+0x36c>
    63ec:	b6 01       	movw	r22, r12
    63ee:	80 e3       	ldi	r24, 0x30	; 48
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	68 d0       	rcall	.+208    	; 0x64c4 <fputc>
    63f4:	a2 fe       	sbrs	r10, 2
    63f6:	16 c0       	rjmp	.+44     	; 0x6424 <vfprintf+0x386>
    63f8:	a1 fc       	sbrc	r10, 1
    63fa:	03 c0       	rjmp	.+6      	; 0x6402 <vfprintf+0x364>
    63fc:	88 e7       	ldi	r24, 0x78	; 120
    63fe:	90 e0       	ldi	r25, 0x00	; 0
    6400:	02 c0       	rjmp	.+4      	; 0x6406 <vfprintf+0x368>
    6402:	88 e5       	ldi	r24, 0x58	; 88
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	b6 01       	movw	r22, r12
    6408:	0c c0       	rjmp	.+24     	; 0x6422 <vfprintf+0x384>
    640a:	8a 2d       	mov	r24, r10
    640c:	86 78       	andi	r24, 0x86	; 134
    640e:	51 f0       	breq	.+20     	; 0x6424 <vfprintf+0x386>
    6410:	a1 fe       	sbrs	r10, 1
    6412:	02 c0       	rjmp	.+4      	; 0x6418 <vfprintf+0x37a>
    6414:	8b e2       	ldi	r24, 0x2B	; 43
    6416:	01 c0       	rjmp	.+2      	; 0x641a <vfprintf+0x37c>
    6418:	80 e2       	ldi	r24, 0x20	; 32
    641a:	a7 fc       	sbrc	r10, 7
    641c:	8d e2       	ldi	r24, 0x2D	; 45
    641e:	b6 01       	movw	r22, r12
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	50 d0       	rcall	.+160    	; 0x64c4 <fputc>
    6424:	89 14       	cp	r8, r9
    6426:	30 f4       	brcc	.+12     	; 0x6434 <vfprintf+0x396>
    6428:	b6 01       	movw	r22, r12
    642a:	80 e3       	ldi	r24, 0x30	; 48
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	4a d0       	rcall	.+148    	; 0x64c4 <fputc>
    6430:	9a 94       	dec	r9
    6432:	f8 cf       	rjmp	.-16     	; 0x6424 <vfprintf+0x386>
    6434:	8a 94       	dec	r8
    6436:	f3 01       	movw	r30, r6
    6438:	e8 0d       	add	r30, r8
    643a:	f1 1d       	adc	r31, r1
    643c:	80 81       	ld	r24, Z
    643e:	b6 01       	movw	r22, r12
    6440:	90 e0       	ldi	r25, 0x00	; 0
    6442:	40 d0       	rcall	.+128    	; 0x64c4 <fputc>
    6444:	81 10       	cpse	r8, r1
    6446:	f6 cf       	rjmp	.-20     	; 0x6434 <vfprintf+0x396>
    6448:	22 20       	and	r2, r2
    644a:	09 f4       	brne	.+2      	; 0x644e <vfprintf+0x3b0>
    644c:	4e ce       	rjmp	.-868    	; 0x60ea <vfprintf+0x4c>
    644e:	b6 01       	movw	r22, r12
    6450:	80 e2       	ldi	r24, 0x20	; 32
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	37 d0       	rcall	.+110    	; 0x64c4 <fputc>
    6456:	2a 94       	dec	r2
    6458:	f7 cf       	rjmp	.-18     	; 0x6448 <vfprintf+0x3aa>
    645a:	f6 01       	movw	r30, r12
    645c:	86 81       	ldd	r24, Z+6	; 0x06
    645e:	97 81       	ldd	r25, Z+7	; 0x07
    6460:	02 c0       	rjmp	.+4      	; 0x6466 <vfprintf+0x3c8>
    6462:	8f ef       	ldi	r24, 0xFF	; 255
    6464:	9f ef       	ldi	r25, 0xFF	; 255
    6466:	2b 96       	adiw	r28, 0x0b	; 11
    6468:	0f b6       	in	r0, 0x3f	; 63
    646a:	f8 94       	cli
    646c:	de bf       	out	0x3e, r29	; 62
    646e:	0f be       	out	0x3f, r0	; 63
    6470:	cd bf       	out	0x3d, r28	; 61
    6472:	df 91       	pop	r29
    6474:	cf 91       	pop	r28
    6476:	1f 91       	pop	r17
    6478:	0f 91       	pop	r16
    647a:	ff 90       	pop	r15
    647c:	ef 90       	pop	r14
    647e:	df 90       	pop	r13
    6480:	cf 90       	pop	r12
    6482:	bf 90       	pop	r11
    6484:	af 90       	pop	r10
    6486:	9f 90       	pop	r9
    6488:	8f 90       	pop	r8
    648a:	7f 90       	pop	r7
    648c:	6f 90       	pop	r6
    648e:	5f 90       	pop	r5
    6490:	4f 90       	pop	r4
    6492:	3f 90       	pop	r3
    6494:	2f 90       	pop	r2
    6496:	08 95       	ret

00006498 <strnlen_P>:
    6498:	fc 01       	movw	r30, r24
    649a:	05 90       	lpm	r0, Z+
    649c:	61 50       	subi	r22, 0x01	; 1
    649e:	70 40       	sbci	r23, 0x00	; 0
    64a0:	01 10       	cpse	r0, r1
    64a2:	d8 f7       	brcc	.-10     	; 0x649a <strnlen_P+0x2>
    64a4:	80 95       	com	r24
    64a6:	90 95       	com	r25
    64a8:	8e 0f       	add	r24, r30
    64aa:	9f 1f       	adc	r25, r31
    64ac:	08 95       	ret

000064ae <strnlen>:
    64ae:	fc 01       	movw	r30, r24
    64b0:	61 50       	subi	r22, 0x01	; 1
    64b2:	70 40       	sbci	r23, 0x00	; 0
    64b4:	01 90       	ld	r0, Z+
    64b6:	01 10       	cpse	r0, r1
    64b8:	d8 f7       	brcc	.-10     	; 0x64b0 <strnlen+0x2>
    64ba:	80 95       	com	r24
    64bc:	90 95       	com	r25
    64be:	8e 0f       	add	r24, r30
    64c0:	9f 1f       	adc	r25, r31
    64c2:	08 95       	ret

000064c4 <fputc>:
    64c4:	0f 93       	push	r16
    64c6:	1f 93       	push	r17
    64c8:	cf 93       	push	r28
    64ca:	df 93       	push	r29
    64cc:	fb 01       	movw	r30, r22
    64ce:	23 81       	ldd	r18, Z+3	; 0x03
    64d0:	21 fd       	sbrc	r18, 1
    64d2:	03 c0       	rjmp	.+6      	; 0x64da <fputc+0x16>
    64d4:	8f ef       	ldi	r24, 0xFF	; 255
    64d6:	9f ef       	ldi	r25, 0xFF	; 255
    64d8:	2c c0       	rjmp	.+88     	; 0x6532 <fputc+0x6e>
    64da:	22 ff       	sbrs	r18, 2
    64dc:	16 c0       	rjmp	.+44     	; 0x650a <fputc+0x46>
    64de:	46 81       	ldd	r20, Z+6	; 0x06
    64e0:	57 81       	ldd	r21, Z+7	; 0x07
    64e2:	24 81       	ldd	r18, Z+4	; 0x04
    64e4:	35 81       	ldd	r19, Z+5	; 0x05
    64e6:	42 17       	cp	r20, r18
    64e8:	53 07       	cpc	r21, r19
    64ea:	44 f4       	brge	.+16     	; 0x64fc <fputc+0x38>
    64ec:	a0 81       	ld	r26, Z
    64ee:	b1 81       	ldd	r27, Z+1	; 0x01
    64f0:	9d 01       	movw	r18, r26
    64f2:	2f 5f       	subi	r18, 0xFF	; 255
    64f4:	3f 4f       	sbci	r19, 0xFF	; 255
    64f6:	31 83       	std	Z+1, r19	; 0x01
    64f8:	20 83       	st	Z, r18
    64fa:	8c 93       	st	X, r24
    64fc:	26 81       	ldd	r18, Z+6	; 0x06
    64fe:	37 81       	ldd	r19, Z+7	; 0x07
    6500:	2f 5f       	subi	r18, 0xFF	; 255
    6502:	3f 4f       	sbci	r19, 0xFF	; 255
    6504:	37 83       	std	Z+7, r19	; 0x07
    6506:	26 83       	std	Z+6, r18	; 0x06
    6508:	14 c0       	rjmp	.+40     	; 0x6532 <fputc+0x6e>
    650a:	8b 01       	movw	r16, r22
    650c:	ec 01       	movw	r28, r24
    650e:	fb 01       	movw	r30, r22
    6510:	00 84       	ldd	r0, Z+8	; 0x08
    6512:	f1 85       	ldd	r31, Z+9	; 0x09
    6514:	e0 2d       	mov	r30, r0
    6516:	19 95       	eicall
    6518:	89 2b       	or	r24, r25
    651a:	e1 f6       	brne	.-72     	; 0x64d4 <fputc+0x10>
    651c:	d8 01       	movw	r26, r16
    651e:	16 96       	adiw	r26, 0x06	; 6
    6520:	8d 91       	ld	r24, X+
    6522:	9c 91       	ld	r25, X
    6524:	17 97       	sbiw	r26, 0x07	; 7
    6526:	01 96       	adiw	r24, 0x01	; 1
    6528:	17 96       	adiw	r26, 0x07	; 7
    652a:	9c 93       	st	X, r25
    652c:	8e 93       	st	-X, r24
    652e:	16 97       	sbiw	r26, 0x06	; 6
    6530:	ce 01       	movw	r24, r28
    6532:	df 91       	pop	r29
    6534:	cf 91       	pop	r28
    6536:	1f 91       	pop	r17
    6538:	0f 91       	pop	r16
    653a:	08 95       	ret

0000653c <__ultoa_invert>:
    653c:	fa 01       	movw	r30, r20
    653e:	aa 27       	eor	r26, r26
    6540:	28 30       	cpi	r18, 0x08	; 8
    6542:	51 f1       	breq	.+84     	; 0x6598 <__ultoa_invert+0x5c>
    6544:	20 31       	cpi	r18, 0x10	; 16
    6546:	81 f1       	breq	.+96     	; 0x65a8 <__ultoa_invert+0x6c>
    6548:	e8 94       	clt
    654a:	6f 93       	push	r22
    654c:	6e 7f       	andi	r22, 0xFE	; 254
    654e:	6e 5f       	subi	r22, 0xFE	; 254
    6550:	7f 4f       	sbci	r23, 0xFF	; 255
    6552:	8f 4f       	sbci	r24, 0xFF	; 255
    6554:	9f 4f       	sbci	r25, 0xFF	; 255
    6556:	af 4f       	sbci	r26, 0xFF	; 255
    6558:	b1 e0       	ldi	r27, 0x01	; 1
    655a:	3e d0       	rcall	.+124    	; 0x65d8 <__ultoa_invert+0x9c>
    655c:	b4 e0       	ldi	r27, 0x04	; 4
    655e:	3c d0       	rcall	.+120    	; 0x65d8 <__ultoa_invert+0x9c>
    6560:	67 0f       	add	r22, r23
    6562:	78 1f       	adc	r23, r24
    6564:	89 1f       	adc	r24, r25
    6566:	9a 1f       	adc	r25, r26
    6568:	a1 1d       	adc	r26, r1
    656a:	68 0f       	add	r22, r24
    656c:	79 1f       	adc	r23, r25
    656e:	8a 1f       	adc	r24, r26
    6570:	91 1d       	adc	r25, r1
    6572:	a1 1d       	adc	r26, r1
    6574:	6a 0f       	add	r22, r26
    6576:	71 1d       	adc	r23, r1
    6578:	81 1d       	adc	r24, r1
    657a:	91 1d       	adc	r25, r1
    657c:	a1 1d       	adc	r26, r1
    657e:	20 d0       	rcall	.+64     	; 0x65c0 <__ultoa_invert+0x84>
    6580:	09 f4       	brne	.+2      	; 0x6584 <__ultoa_invert+0x48>
    6582:	68 94       	set
    6584:	3f 91       	pop	r19
    6586:	2a e0       	ldi	r18, 0x0A	; 10
    6588:	26 9f       	mul	r18, r22
    658a:	11 24       	eor	r1, r1
    658c:	30 19       	sub	r19, r0
    658e:	30 5d       	subi	r19, 0xD0	; 208
    6590:	31 93       	st	Z+, r19
    6592:	de f6       	brtc	.-74     	; 0x654a <__ultoa_invert+0xe>
    6594:	cf 01       	movw	r24, r30
    6596:	08 95       	ret
    6598:	46 2f       	mov	r20, r22
    659a:	47 70       	andi	r20, 0x07	; 7
    659c:	40 5d       	subi	r20, 0xD0	; 208
    659e:	41 93       	st	Z+, r20
    65a0:	b3 e0       	ldi	r27, 0x03	; 3
    65a2:	0f d0       	rcall	.+30     	; 0x65c2 <__ultoa_invert+0x86>
    65a4:	c9 f7       	brne	.-14     	; 0x6598 <__ultoa_invert+0x5c>
    65a6:	f6 cf       	rjmp	.-20     	; 0x6594 <__ultoa_invert+0x58>
    65a8:	46 2f       	mov	r20, r22
    65aa:	4f 70       	andi	r20, 0x0F	; 15
    65ac:	40 5d       	subi	r20, 0xD0	; 208
    65ae:	4a 33       	cpi	r20, 0x3A	; 58
    65b0:	18 f0       	brcs	.+6      	; 0x65b8 <__ultoa_invert+0x7c>
    65b2:	49 5d       	subi	r20, 0xD9	; 217
    65b4:	31 fd       	sbrc	r19, 1
    65b6:	40 52       	subi	r20, 0x20	; 32
    65b8:	41 93       	st	Z+, r20
    65ba:	02 d0       	rcall	.+4      	; 0x65c0 <__ultoa_invert+0x84>
    65bc:	a9 f7       	brne	.-22     	; 0x65a8 <__ultoa_invert+0x6c>
    65be:	ea cf       	rjmp	.-44     	; 0x6594 <__ultoa_invert+0x58>
    65c0:	b4 e0       	ldi	r27, 0x04	; 4
    65c2:	a6 95       	lsr	r26
    65c4:	97 95       	ror	r25
    65c6:	87 95       	ror	r24
    65c8:	77 95       	ror	r23
    65ca:	67 95       	ror	r22
    65cc:	ba 95       	dec	r27
    65ce:	c9 f7       	brne	.-14     	; 0x65c2 <__ultoa_invert+0x86>
    65d0:	00 97       	sbiw	r24, 0x00	; 0
    65d2:	61 05       	cpc	r22, r1
    65d4:	71 05       	cpc	r23, r1
    65d6:	08 95       	ret
    65d8:	9b 01       	movw	r18, r22
    65da:	ac 01       	movw	r20, r24
    65dc:	0a 2e       	mov	r0, r26
    65de:	06 94       	lsr	r0
    65e0:	57 95       	ror	r21
    65e2:	47 95       	ror	r20
    65e4:	37 95       	ror	r19
    65e6:	27 95       	ror	r18
    65e8:	ba 95       	dec	r27
    65ea:	c9 f7       	brne	.-14     	; 0x65de <__ultoa_invert+0xa2>
    65ec:	62 0f       	add	r22, r18
    65ee:	73 1f       	adc	r23, r19
    65f0:	84 1f       	adc	r24, r20
    65f2:	95 1f       	adc	r25, r21
    65f4:	a0 1d       	adc	r26, r0
    65f6:	08 95       	ret

000065f8 <_exit>:
    65f8:	f8 94       	cli

000065fa <__stop_program>:
    65fa:	ff cf       	rjmp	.-2      	; 0x65fa <__stop_program>
