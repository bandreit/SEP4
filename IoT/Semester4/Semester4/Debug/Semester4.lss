
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800200  000047cc  00004860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000af5  008003b2  008003b2  00004a12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004a12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  00004ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a1f5  00000000  00000000  000052f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ca7  00000000  00000000  0000f4ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000535f  00000000  00000000  00012194  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ce4  00000000  00000000  000174f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033d3  00000000  00000000  000191d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008d56  00000000  00000000  0001c5ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  00025301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	cc c5       	rjmp	.+2968   	; 0xbca <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__vector_25>
      68:	0c 94 85 19 	jmp	0x330a	; 0x330a <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__vector_36>
      94:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__vector_51>
      d0:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__vector_54>
      dc:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ef 14       	cp	r14, r15
      e6:	ef 14       	cp	r14, r15
      e8:	ef 14       	cp	r14, r15
      ea:	26 15       	cp	r18, r6
      ec:	2e 15       	cp	r18, r14
      ee:	43 15       	cp	r20, r3
      f0:	ef 14       	cp	r14, r15
      f2:	ef 14       	cp	r14, r15
      f4:	26 15       	cp	r18, r6
      f6:	2e 15       	cp	r18, r14
      f8:	d5 1c       	adc	r13, r5
      fa:	45 1d       	adc	r20, r5
      fc:	45 1d       	adc	r20, r5
      fe:	45 1d       	adc	r20, r5
     100:	45 1d       	adc	r20, r5
     102:	45 1d       	adc	r20, r5
     104:	45 1d       	adc	r20, r5
     106:	45 1d       	adc	r20, r5
     108:	d5 1c       	adc	r13, r5
     10a:	45 1d       	adc	r20, r5
     10c:	45 1d       	adc	r20, r5
     10e:	45 1d       	adc	r20, r5
     110:	45 1d       	adc	r20, r5
     112:	45 1d       	adc	r20, r5
     114:	45 1d       	adc	r20, r5
     116:	45 1d       	adc	r20, r5
     118:	d7 1c       	adc	r13, r7
     11a:	45 1d       	adc	r20, r5
     11c:	45 1d       	adc	r20, r5
     11e:	45 1d       	adc	r20, r5
     120:	45 1d       	adc	r20, r5
     122:	45 1d       	adc	r20, r5
     124:	45 1d       	adc	r20, r5
     126:	45 1d       	adc	r20, r5
     128:	45 1d       	adc	r20, r5
     12a:	45 1d       	adc	r20, r5
     12c:	45 1d       	adc	r20, r5
     12e:	45 1d       	adc	r20, r5
     130:	45 1d       	adc	r20, r5
     132:	45 1d       	adc	r20, r5
     134:	45 1d       	adc	r20, r5
     136:	45 1d       	adc	r20, r5
     138:	d7 1c       	adc	r13, r7
     13a:	45 1d       	adc	r20, r5
     13c:	45 1d       	adc	r20, r5
     13e:	45 1d       	adc	r20, r5
     140:	45 1d       	adc	r20, r5
     142:	45 1d       	adc	r20, r5
     144:	45 1d       	adc	r20, r5
     146:	45 1d       	adc	r20, r5
     148:	45 1d       	adc	r20, r5
     14a:	45 1d       	adc	r20, r5
     14c:	45 1d       	adc	r20, r5
     14e:	45 1d       	adc	r20, r5
     150:	45 1d       	adc	r20, r5
     152:	45 1d       	adc	r20, r5
     154:	45 1d       	adc	r20, r5
     156:	45 1d       	adc	r20, r5
     158:	41 1d       	adc	r20, r1
     15a:	45 1d       	adc	r20, r5
     15c:	45 1d       	adc	r20, r5
     15e:	45 1d       	adc	r20, r5
     160:	45 1d       	adc	r20, r5
     162:	45 1d       	adc	r20, r5
     164:	45 1d       	adc	r20, r5
     166:	45 1d       	adc	r20, r5
     168:	0c 1d       	adc	r16, r12
     16a:	45 1d       	adc	r20, r5
     16c:	45 1d       	adc	r20, r5
     16e:	45 1d       	adc	r20, r5
     170:	45 1d       	adc	r20, r5
     172:	45 1d       	adc	r20, r5
     174:	45 1d       	adc	r20, r5
     176:	45 1d       	adc	r20, r5
     178:	45 1d       	adc	r20, r5
     17a:	45 1d       	adc	r20, r5
     17c:	45 1d       	adc	r20, r5
     17e:	45 1d       	adc	r20, r5
     180:	45 1d       	adc	r20, r5
     182:	45 1d       	adc	r20, r5
     184:	45 1d       	adc	r20, r5
     186:	45 1d       	adc	r20, r5
     188:	00 1d       	adc	r16, r0
     18a:	45 1d       	adc	r20, r5
     18c:	45 1d       	adc	r20, r5
     18e:	45 1d       	adc	r20, r5
     190:	45 1d       	adc	r20, r5
     192:	45 1d       	adc	r20, r5
     194:	45 1d       	adc	r20, r5
     196:	45 1d       	adc	r20, r5
     198:	24 1d       	adc	r18, r4

0000019a <prvIdleTask>:
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = ( TaskHandle_t ) pxCurrentTCB;

        return xReturn;
    }
     19a:	0e 94 97 0a 	call	0x152e	; 0x152e <prvCheckTasksWaitingTermination>
     19e:	80 91 d7 0d 	lds	r24, 0x0DD7	; 0x800dd7 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	4c d4       	rcall	.+2200   	; 0xa40 <vPortYield>
     1a8:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 70 12 	call	0x24e0	; 0x24e0 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 64 14 	call	0x28c8	; 0x28c8 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 b8 14 	call	0x2970	; 0x2970 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	13 e0       	ldi	r17, 0x03	; 3
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ec ec       	ldi	r30, 0xCC	; 204
     1e4:	f7 e4       	ldi	r31, 0x47	; 71
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 3b       	cpi	r26, 0xB2	; 178
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	2e e0       	ldi	r18, 0x0E	; 14
     1f8:	a2 eb       	ldi	r26, 0xB2	; 178
     1fa:	b3 e0       	ldi	r27, 0x03	; 3
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a7 3a       	cpi	r26, 0xA7	; 167
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <main>
     20a:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <myCo2CallBack>:
		vTaskDelay(300);
			
	}
}
void myCo2CallBack(uint16_t ppm)
{
     210:	0f 93       	push	r16
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	1f 92       	push	r1
     218:	1f 92       	push	r1
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	9a 83       	std	Y+2, r25	; 0x02
     220:	89 83       	std	Y+1, r24	; 0x01
		printf("CO2 Value: %d",ppm);
     222:	8a 81       	ldd	r24, Y+2	; 0x02
     224:	8f 93       	push	r24
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	8f 93       	push	r24
     22a:	8f e4       	ldi	r24, 0x4F	; 79
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <printf>
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	be 01       	movw	r22, r28
     240:	6f 5f       	subi	r22, 0xFF	; 255
     242:	7f 4f       	sbci	r23, 0xFF	; 255
     244:	80 91 99 0e 	lds	r24, 0x0E99	; 0x800e99 <sensorDataQueue>
     248:	90 91 9a 0e 	lds	r25, 0x0E9A	; 0x800e9a <sensorDataQueue+0x1>
     24c:	10 d6       	rcall	.+3104   	; 0xe6e <xQueueGenericSend>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     24e:	41 e0       	ldi	r20, 0x01	; 1
     250:	50 e0       	ldi	r21, 0x00	; 0
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	80 91 94 0e 	lds	r24, 0x0E94	; 0x800e94 <dataEventGroup>
     25a:	90 91 95 0e 	lds	r25, 0x0E95	; 0x800e95 <dataEventGroup+0x1>
     25e:	3c d1       	rcall	.+632    	; 0x4d8 <xEventGroupSetBits>
		xSemaphoreGive(tempHumSemaphore);
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	a9 01       	movw	r20, r18
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	80 91 92 0e 	lds	r24, 0x0E92	; 0x800e92 <tempHumSemaphore>
     26e:	90 91 93 0e 	lds	r25, 0x0E93	; 0x800e93 <tempHumSemaphore+0x1>
     272:	fd d5       	rcall	.+3066   	; 0xe6e <xQueueGenericSend>

}
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	0f 91       	pop	r16
     286:	08 95       	ret

00000288 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
     28e:	88 e0       	ldi	r24, 0x08	; 8
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <mh_z19_injectCallBack>
     296:	08 95       	ret

00000298 <measureCO2>:
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     298:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <mh_z19_takeMeassuring>
     29c:	80 93 98 0e 	sts	0x0E98, r24	; 0x800e98 <rc>
	if (rc != MHZ19_OK)
     2a0:	88 23       	and	r24, r24
     2a2:	21 f0       	breq	.+8      	; 0x2ac <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     2a4:	8d e5       	ldi	r24, 0x5D	; 93
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	0c 94 07 21 	jmp	0x420e	; 0x420e <puts>
     2ac:	08 95       	ret

000002ae <CO2Task>:
void CO2Task()
{
	while(1)
	{

printf("CO2 Task\n");
     2ae:	84 e7       	ldi	r24, 0x74	; 116
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
EventBits_t dataEventBits = xEventGroupWaitBits
     2b6:	cc 24       	eor	r12, r12
     2b8:	ca 94       	dec	r12
     2ba:	dc 2c       	mov	r13, r12
     2bc:	76 01       	movw	r14, r12
     2be:	01 e0       	ldi	r16, 0x01	; 1
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	42 e0       	ldi	r20, 0x02	; 2
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	80 91 94 0e 	lds	r24, 0x0E94	; 0x800e94 <dataEventGroup>
     2ce:	90 91 95 0e 	lds	r25, 0x0E95	; 0x800e95 <dataEventGroup+0x1>
     2d2:	62 d0       	rcall	.+196    	; 0x398 <xEventGroupWaitBits>
(dataEventGroup,BIT_HUMIDITY_TEMPERATURE,pdFALSE,pdTRUE,portMAX_DELAY);

		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
     2d4:	61 ff       	sbrs	r22, 1
     2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <CO2Task+0x36>
		{
		printf("Measured\n");
     2d8:	81 e8       	ldi	r24, 0x81	; 129
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
			measureCO2();
     2e0:	db df       	rcall	.-74     	; 0x298 <measureCO2>
     2e2:	0a c0       	rjmp	.+20     	; 0x2f8 <CO2Task+0x4a>
		
		}
		else
		{
			printf("Not Measured\n");
     2e4:	8d e7       	ldi	r24, 0x7D	; 125
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
			vTaskDelay(300);
     2ec:	6c e2       	ldi	r22, 0x2C	; 44
     2ee:	71 e0       	ldi	r23, 0x01	; 1
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <vTaskDelay>
		}
		vTaskDelay(300);
     2f8:	6c e2       	ldi	r22, 0x2C	; 44
     2fa:	71 e0       	ldi	r23, 0x01	; 1
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <vTaskDelay>
			
	}
     304:	d4 cf       	rjmp	.-88     	; 0x2ae <CO2Task>

00000306 <createCO2Task>:
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
		xSemaphoreGive(tempHumSemaphore);

}
void createCO2Task(void *pvpParameter)
{
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
			initializeCO2Driver();
     30c:	bd df       	rcall	.-134    	; 0x288 <initializeCO2Driver>
			xTaskCreate(
     30e:	e1 2c       	mov	r14, r1
     310:	f1 2c       	mov	r15, r1
     312:	01 e0       	ldi	r16, 0x01	; 1
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 ec       	ldi	r20, 0xC0	; 192
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	6a e8       	ldi	r22, 0x8A	; 138
     31e:	72 e0       	ldi	r23, 0x02	; 2
     320:	87 e5       	ldi	r24, 0x57	; 87
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     328:	0f 91       	pop	r16
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	08 95       	ret

00000330 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     330:	0f 93       	push	r16
     332:	01 11       	cpse	r16, r1
     334:	0c c0       	rjmp	.+24     	; 0x34e <prvTestWaitCondition+0x1e>
     336:	dc 01       	movw	r26, r24
     338:	cb 01       	movw	r24, r22
     33a:	82 23       	and	r24, r18
     33c:	93 23       	and	r25, r19
     33e:	a4 23       	and	r26, r20
     340:	b5 23       	and	r27, r21
     342:	89 2b       	or	r24, r25
     344:	8a 2b       	or	r24, r26
     346:	8b 2b       	or	r24, r27
     348:	79 f4       	brne	.+30     	; 0x368 <prvTestWaitCondition+0x38>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	10 c0       	rjmp	.+32     	; 0x36e <prvTestWaitCondition+0x3e>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	82 23       	and	r24, r18
     354:	93 23       	and	r25, r19
     356:	a4 23       	and	r26, r20
     358:	b5 23       	and	r27, r21
     35a:	28 17       	cp	r18, r24
     35c:	39 07       	cpc	r19, r25
     35e:	4a 07       	cpc	r20, r26
     360:	5b 07       	cpc	r21, r27
     362:	21 f0       	breq	.+8      	; 0x36c <prvTestWaitCondition+0x3c>
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	03 c0       	rjmp	.+6      	; 0x36e <prvTestWaitCondition+0x3e>
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	01 c0       	rjmp	.+2      	; 0x36e <prvTestWaitCondition+0x3e>
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0f 91       	pop	r16
     370:	08 95       	ret

00000372 <xEventGroupCreate>:
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	8f e0       	ldi	r24, 0x0F	; 15
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	af d1       	rcall	.+862    	; 0x6da <pvPortMalloc>
     37c:	ec 01       	movw	r28, r24
     37e:	00 97       	sbiw	r24, 0x00	; 0
     380:	39 f0       	breq	.+14     	; 0x390 <xEventGroupCreate+0x1e>
     382:	fc 01       	movw	r30, r24
     384:	11 92       	st	Z+, r1
     386:	11 92       	st	Z+, r1
     388:	11 92       	st	Z+, r1
     38a:	11 92       	st	Z+, r1
     38c:	cf 01       	movw	r24, r30
     38e:	8a d2       	rcall	.+1300   	; 0x8a4 <vListInitialise>
     390:	ce 01       	movw	r24, r28
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <xEventGroupWaitBits>:
     398:	2f 92       	push	r2
     39a:	3f 92       	push	r3
     39c:	4f 92       	push	r4
     39e:	5f 92       	push	r5
     3a0:	6f 92       	push	r6
     3a2:	7f 92       	push	r7
     3a4:	8f 92       	push	r8
     3a6:	9f 92       	push	r9
     3a8:	af 92       	push	r10
     3aa:	bf 92       	push	r11
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	ec 01       	movw	r28, r24
     3be:	4a 01       	movw	r8, r20
     3c0:	5b 01       	movw	r10, r22
     3c2:	62 2e       	mov	r6, r18
     3c4:	70 2e       	mov	r7, r16
     3c6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <vTaskSuspendAll>
     3ca:	28 80       	ld	r2, Y
     3cc:	39 80       	ldd	r3, Y+1	; 0x01
     3ce:	4a 80       	ldd	r4, Y+2	; 0x02
     3d0:	5b 80       	ldd	r5, Y+3	; 0x03
     3d2:	a5 01       	movw	r20, r10
     3d4:	94 01       	movw	r18, r8
     3d6:	c2 01       	movw	r24, r4
     3d8:	b1 01       	movw	r22, r2
     3da:	aa df       	rcall	.-172    	; 0x330 <prvTestWaitCondition>
     3dc:	88 23       	and	r24, r24
     3de:	a1 f0       	breq	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3e0:	66 20       	and	r6, r6
     3e2:	89 f1       	breq	.+98     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3e4:	d5 01       	movw	r26, r10
     3e6:	c4 01       	movw	r24, r8
     3e8:	80 95       	com	r24
     3ea:	90 95       	com	r25
     3ec:	a0 95       	com	r26
     3ee:	b0 95       	com	r27
     3f0:	82 21       	and	r24, r2
     3f2:	93 21       	and	r25, r3
     3f4:	a4 21       	and	r26, r4
     3f6:	b5 21       	and	r27, r5
     3f8:	88 83       	st	Y, r24
     3fa:	99 83       	std	Y+1, r25	; 0x01
     3fc:	aa 83       	std	Y+2, r26	; 0x02
     3fe:	bb 83       	std	Y+3, r27	; 0x03
     400:	c1 2c       	mov	r12, r1
     402:	d1 2c       	mov	r13, r1
     404:	76 01       	movw	r14, r12
     406:	22 c0       	rjmp	.+68     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     408:	c1 14       	cp	r12, r1
     40a:	d1 04       	cpc	r13, r1
     40c:	e1 04       	cpc	r14, r1
     40e:	f1 04       	cpc	r15, r1
     410:	e9 f0       	breq	.+58     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     412:	61 10       	cpse	r6, r1
     414:	04 c0       	rjmp	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	ba 01       	movw	r22, r20
     41c:	04 c0       	rjmp	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	71 10       	cpse	r7, r1
     428:	74 60       	ori	r23, 0x04	; 4
     42a:	48 29       	or	r20, r8
     42c:	59 29       	or	r21, r9
     42e:	6a 29       	or	r22, r10
     430:	7b 29       	or	r23, r11
     432:	97 01       	movw	r18, r14
     434:	86 01       	movw	r16, r12
     436:	ce 01       	movw	r24, r28
     438:	04 96       	adiw	r24, 0x04	; 4
     43a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskPlaceOnUnorderedEventList>
     43e:	21 2c       	mov	r2, r1
     440:	31 2c       	mov	r3, r1
     442:	21 01       	movw	r4, r2
     444:	03 c0       	rjmp	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     446:	c1 2c       	mov	r12, r1
     448:	d1 2c       	mov	r13, r1
     44a:	76 01       	movw	r14, r12
     44c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskResumeAll>
     450:	cd 28       	or	r12, r13
     452:	ce 28       	or	r12, r14
     454:	cf 28       	or	r12, r15
     456:	59 f1       	breq	.+86     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     458:	81 11       	cpse	r24, r1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	f1 d2       	rcall	.+1506   	; 0xa40 <vPortYield>
     45e:	0e 94 34 12 	call	0x2468	; 0x2468 <uxTaskResetEventItemValue>
     462:	6b 01       	movw	r12, r22
     464:	7c 01       	movw	r14, r24
     466:	91 fd       	sbrc	r25, 1
     468:	1f c0       	rjmp	.+62     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	0f 92       	push	r0
     470:	c8 80       	ld	r12, Y
     472:	d9 80       	ldd	r13, Y+1	; 0x01
     474:	ea 80       	ldd	r14, Y+2	; 0x02
     476:	fb 80       	ldd	r15, Y+3	; 0x03
     478:	07 2d       	mov	r16, r7
     47a:	a5 01       	movw	r20, r10
     47c:	94 01       	movw	r18, r8
     47e:	c7 01       	movw	r24, r14
     480:	b6 01       	movw	r22, r12
     482:	56 df       	rcall	.-340    	; 0x330 <prvTestWaitCondition>
     484:	88 23       	and	r24, r24
     486:	71 f0       	breq	.+28     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     488:	66 20       	and	r6, r6
     48a:	61 f0       	breq	.+24     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     48c:	80 94       	com	r8
     48e:	90 94       	com	r9
     490:	a0 94       	com	r10
     492:	b0 94       	com	r11
     494:	8c 20       	and	r8, r12
     496:	9d 20       	and	r9, r13
     498:	ae 20       	and	r10, r14
     49a:	bf 20       	and	r11, r15
     49c:	88 82       	st	Y, r8
     49e:	99 82       	std	Y+1, r9	; 0x01
     4a0:	aa 82       	std	Y+2, r10	; 0x02
     4a2:	bb 82       	std	Y+3, r11	; 0x03
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	16 01       	movw	r2, r12
     4aa:	27 01       	movw	r4, r14
     4ac:	55 24       	eor	r5, r5
     4ae:	c2 01       	movw	r24, r4
     4b0:	b1 01       	movw	r22, r2
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	bf 90       	pop	r11
     4c4:	af 90       	pop	r10
     4c6:	9f 90       	pop	r9
     4c8:	8f 90       	pop	r8
     4ca:	7f 90       	pop	r7
     4cc:	6f 90       	pop	r6
     4ce:	5f 90       	pop	r5
     4d0:	4f 90       	pop	r4
     4d2:	3f 90       	pop	r3
     4d4:	2f 90       	pop	r2
     4d6:	08 95       	ret

000004d8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     4d8:	4f 92       	push	r4
     4da:	5f 92       	push	r5
     4dc:	6f 92       	push	r6
     4de:	7f 92       	push	r7
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	ec 01       	movw	r28, r24
     4f6:	6a 01       	movw	r12, r20
     4f8:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4fa:	8c 01       	movw	r16, r24
     4fc:	09 5f       	subi	r16, 0xF9	; 249
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     500:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     504:	eb 85       	ldd	r30, Y+11	; 0x0b
     506:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     508:	88 81       	ld	r24, Y
     50a:	99 81       	ldd	r25, Y+1	; 0x01
     50c:	aa 81       	ldd	r26, Y+2	; 0x02
     50e:	bb 81       	ldd	r27, Y+3	; 0x03
     510:	c8 2a       	or	r12, r24
     512:	d9 2a       	or	r13, r25
     514:	ea 2a       	or	r14, r26
     516:	fb 2a       	or	r15, r27
     518:	c8 82       	st	Y, r12
     51a:	d9 82       	std	Y+1, r13	; 0x01
     51c:	ea 82       	std	Y+2, r14	; 0x02
     51e:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     520:	c1 2c       	mov	r12, r1
     522:	d1 2c       	mov	r13, r1
     524:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     526:	3d c0       	rjmp	.+122    	; 0x5a2 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     528:	a4 80       	ldd	r10, Z+4	; 0x04
     52a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	a2 81       	ldd	r26, Z+2	; 0x02
     532:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     534:	ac 01       	movw	r20, r24
     536:	bd 01       	movw	r22, r26
     538:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     53a:	b2 fd       	sbrc	r27, 2
     53c:	0e c0       	rjmp	.+28     	; 0x55a <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     53e:	48 80       	ld	r4, Y
     540:	59 80       	ldd	r5, Y+1	; 0x01
     542:	6a 80       	ldd	r6, Y+2	; 0x02
     544:	7b 80       	ldd	r7, Y+3	; 0x03
     546:	44 22       	and	r4, r20
     548:	55 22       	and	r5, r21
     54a:	66 22       	and	r6, r22
     54c:	77 22       	and	r7, r23
     54e:	45 28       	or	r4, r5
     550:	46 28       	or	r4, r6
     552:	47 28       	or	r4, r7
     554:	89 f4       	brne	.+34     	; 0x578 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	12 c0       	rjmp	.+36     	; 0x57e <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     55a:	48 80       	ld	r4, Y
     55c:	59 80       	ldd	r5, Y+1	; 0x01
     55e:	6a 80       	ldd	r6, Y+2	; 0x02
     560:	7b 80       	ldd	r7, Y+3	; 0x03
     562:	44 22       	and	r4, r20
     564:	55 22       	and	r5, r21
     566:	66 22       	and	r6, r22
     568:	77 22       	and	r7, r23
     56a:	44 15       	cp	r20, r4
     56c:	55 05       	cpc	r21, r5
     56e:	66 05       	cpc	r22, r6
     570:	77 05       	cpc	r23, r7
     572:	21 f0       	breq	.+8      	; 0x57c <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	03 c0       	rjmp	.+6      	; 0x57e <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     578:	21 e0       	ldi	r18, 0x01	; 1
     57a:	01 c0       	rjmp	.+2      	; 0x57e <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     57c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     57e:	22 23       	and	r18, r18
     580:	71 f0       	breq	.+28     	; 0x59e <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     582:	b0 ff       	sbrs	r27, 0
     584:	04 c0       	rjmp	.+8      	; 0x58e <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     586:	c4 2a       	or	r12, r20
     588:	d5 2a       	or	r13, r21
     58a:	e6 2a       	or	r14, r22
     58c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     58e:	48 81       	ld	r20, Y
     590:	59 81       	ldd	r21, Y+1	; 0x01
     592:	6a 81       	ldd	r22, Y+2	; 0x02
     594:	7b 81       	ldd	r23, Y+3	; 0x03
     596:	72 60       	ori	r23, 0x02	; 2
     598:	cf 01       	movw	r24, r30
     59a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     59e:	ea 2d       	mov	r30, r10
     5a0:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     5a2:	e0 17       	cp	r30, r16
     5a4:	f1 07       	cpc	r31, r17
     5a6:	09 f0       	breq	.+2      	; 0x5aa <xEventGroupSetBits+0xd2>
     5a8:	bf cf       	rjmp	.-130    	; 0x528 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     5aa:	c0 94       	com	r12
     5ac:	d0 94       	com	r13
     5ae:	e0 94       	com	r14
     5b0:	f0 94       	com	r15
     5b2:	88 81       	ld	r24, Y
     5b4:	99 81       	ldd	r25, Y+1	; 0x01
     5b6:	aa 81       	ldd	r26, Y+2	; 0x02
     5b8:	bb 81       	ldd	r27, Y+3	; 0x03
     5ba:	c8 22       	and	r12, r24
     5bc:	d9 22       	and	r13, r25
     5be:	ea 22       	and	r14, r26
     5c0:	fb 22       	and	r15, r27
     5c2:	c8 82       	st	Y, r12
     5c4:	d9 82       	std	Y+1, r13	; 0x01
     5c6:	ea 82       	std	Y+2, r14	; 0x02
     5c8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     5ca:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     5ce:	68 81       	ld	r22, Y
     5d0:	79 81       	ldd	r23, Y+1	; 0x01
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	df 90       	pop	r13
     5e4:	cf 90       	pop	r12
     5e6:	bf 90       	pop	r11
     5e8:	af 90       	pop	r10
     5ea:	7f 90       	pop	r7
     5ec:	6f 90       	pop	r6
     5ee:	5f 90       	pop	r5
     5f0:	4f 90       	pop	r4
     5f2:	08 95       	ret

000005f4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5f4:	ee eb       	ldi	r30, 0xBE	; 190
     5f6:	f3 e0       	ldi	r31, 0x03	; 3
     5f8:	a2 ec       	ldi	r26, 0xC2	; 194
     5fa:	b3 e0       	ldi	r27, 0x03	; 3
     5fc:	b1 83       	std	Z+1, r27	; 0x01
     5fe:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     600:	13 82       	std	Z+3, r1	; 0x03
     602:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     604:	e2 e8       	ldi	r30, 0x82	; 130
     606:	fd e0       	ldi	r31, 0x0D	; 13
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     608:	f0 93 bd 03 	sts	0x03BD, r31	; 0x8003bd <pxEnd+0x1>
     60c:	e0 93 bc 03 	sts	0x03BC, r30	; 0x8003bc <pxEnd>
    pxEnd->xBlockSize = 0;
     610:	13 82       	std	Z+3, r1	; 0x03
     612:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     614:	11 82       	std	Z+1, r1	; 0x01
     616:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     618:	80 ec       	ldi	r24, 0xC0	; 192
     61a:	99 e0       	ldi	r25, 0x09	; 9
     61c:	13 96       	adiw	r26, 0x03	; 3
     61e:	9c 93       	st	X, r25
     620:	8e 93       	st	-X, r24
     622:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     624:	ed 93       	st	X+, r30
     626:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     628:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <xMinimumEverFreeBytesRemaining+0x1>
     62c:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     630:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <xFreeBytesRemaining+0x1>
     634:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e8       	ldi	r25, 0x80	; 128
     63c:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <__data_end+0x1>
     640:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <__data_end>
     644:	08 95       	ret

00000646 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     64c:	ae eb       	ldi	r26, 0xBE	; 190
     64e:	b3 e0       	ldi	r27, 0x03	; 3
     650:	01 c0       	rjmp	.+2      	; 0x654 <prvInsertBlockIntoFreeList+0xe>
     652:	df 01       	movw	r26, r30
     654:	ed 91       	ld	r30, X+
     656:	fc 91       	ld	r31, X
     658:	11 97       	sbiw	r26, 0x01	; 1
     65a:	ec 17       	cp	r30, r28
     65c:	fd 07       	cpc	r31, r29
     65e:	c8 f3       	brcs	.-14     	; 0x652 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     660:	12 96       	adiw	r26, 0x02	; 2
     662:	8d 91       	ld	r24, X+
     664:	9c 91       	ld	r25, X
     666:	13 97       	sbiw	r26, 0x03	; 3
     668:	9d 01       	movw	r18, r26
     66a:	28 0f       	add	r18, r24
     66c:	39 1f       	adc	r19, r25
     66e:	c2 17       	cp	r28, r18
     670:	d3 07       	cpc	r29, r19
     672:	49 f4       	brne	.+18     	; 0x686 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     674:	2a 81       	ldd	r18, Y+2	; 0x02
     676:	3b 81       	ldd	r19, Y+3	; 0x03
     678:	82 0f       	add	r24, r18
     67a:	93 1f       	adc	r25, r19
     67c:	13 96       	adiw	r26, 0x03	; 3
     67e:	9c 93       	st	X, r25
     680:	8e 93       	st	-X, r24
     682:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     684:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	9b 81       	ldd	r25, Y+3	; 0x03
     68a:	9e 01       	movw	r18, r28
     68c:	28 0f       	add	r18, r24
     68e:	39 1f       	adc	r19, r25
     690:	e2 17       	cp	r30, r18
     692:	f3 07       	cpc	r31, r19
     694:	c1 f4       	brne	.+48     	; 0x6c6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     696:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <pxEnd>
     69a:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <pxEnd+0x1>
     69e:	e2 17       	cp	r30, r18
     6a0:	f3 07       	cpc	r31, r19
     6a2:	71 f0       	breq	.+28     	; 0x6c0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     6a4:	22 81       	ldd	r18, Z+2	; 0x02
     6a6:	33 81       	ldd	r19, Z+3	; 0x03
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	9b 83       	std	Y+3, r25	; 0x03
     6ae:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     6b0:	ed 91       	ld	r30, X+
     6b2:	fc 91       	ld	r31, X
     6b4:	11 97       	sbiw	r26, 0x01	; 1
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	99 83       	std	Y+1, r25	; 0x01
     6bc:	88 83       	st	Y, r24
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     6c0:	39 83       	std	Y+1, r19	; 0x01
     6c2:	28 83       	st	Y, r18
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     6c6:	f9 83       	std	Y+1, r31	; 0x01
     6c8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     6ca:	ca 17       	cp	r28, r26
     6cc:	db 07       	cpc	r29, r27
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     6d0:	cd 93       	st	X+, r28
     6d2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     6e8:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     6ec:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pxEnd>
     6f0:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pxEnd+0x1>
     6f4:	89 2b       	or	r24, r25
     6f6:	09 f4       	brne	.+2      	; 0x6fa <pvPortMalloc+0x20>
        {
            prvHeapInit();
     6f8:	7d df       	rcall	.-262    	; 0x5f4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     6fa:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <__data_end>
     6fe:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <__data_end+0x1>
     702:	80 23       	and	r24, r16
     704:	91 23       	and	r25, r17
     706:	89 2b       	or	r24, r25
     708:	09 f0       	breq	.+2      	; 0x70c <pvPortMalloc+0x32>
     70a:	76 c0       	rjmp	.+236    	; 0x7f8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     70c:	01 15       	cp	r16, r1
     70e:	11 05       	cpc	r17, r1
     710:	49 f0       	breq	.+18     	; 0x724 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     712:	c8 01       	movw	r24, r16
     714:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     716:	08 17       	cp	r16, r24
     718:	19 07       	cpc	r17, r25
     71a:	18 f0       	brcs	.+6      	; 0x722 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	10 e0       	ldi	r17, 0x00	; 0
     720:	01 c0       	rjmp	.+2      	; 0x724 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     722:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     724:	01 15       	cp	r16, r1
     726:	11 05       	cpc	r17, r1
     728:	09 f4       	brne	.+2      	; 0x72c <pvPortMalloc+0x52>
     72a:	69 c0       	rjmp	.+210    	; 0x7fe <pvPortMalloc+0x124>
     72c:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <xFreeBytesRemaining>
     730:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <xFreeBytesRemaining+0x1>
     734:	80 17       	cp	r24, r16
     736:	91 07       	cpc	r25, r17
     738:	08 f4       	brcc	.+2      	; 0x73c <pvPortMalloc+0x62>
     73a:	64 c0       	rjmp	.+200    	; 0x804 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     73c:	c0 91 be 03 	lds	r28, 0x03BE	; 0x8003be <xStart>
     740:	d0 91 bf 03 	lds	r29, 0x03BF	; 0x8003bf <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     744:	ee eb       	ldi	r30, 0xBE	; 190
     746:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     748:	02 c0       	rjmp	.+4      	; 0x74e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     74a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     74c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	9b 81       	ldd	r25, Y+3	; 0x03
     752:	80 17       	cp	r24, r16
     754:	91 07       	cpc	r25, r17
     756:	20 f4       	brcc	.+8      	; 0x760 <pvPortMalloc+0x86>
     758:	88 81       	ld	r24, Y
     75a:	99 81       	ldd	r25, Y+1	; 0x01
     75c:	00 97       	sbiw	r24, 0x00	; 0
     75e:	a9 f7       	brne	.-22     	; 0x74a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     760:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pxEnd>
     764:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pxEnd+0x1>
     768:	c8 17       	cp	r28, r24
     76a:	d9 07       	cpc	r29, r25
     76c:	09 f4       	brne	.+2      	; 0x770 <pvPortMalloc+0x96>
     76e:	4d c0       	rjmp	.+154    	; 0x80a <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     770:	e0 80       	ld	r14, Z
     772:	f1 80       	ldd	r15, Z+1	; 0x01
     774:	84 e0       	ldi	r24, 0x04	; 4
     776:	e8 0e       	add	r14, r24
     778:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     77a:	88 81       	ld	r24, Y
     77c:	99 81       	ldd	r25, Y+1	; 0x01
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     782:	2a 81       	ldd	r18, Y+2	; 0x02
     784:	3b 81       	ldd	r19, Y+3	; 0x03
     786:	20 1b       	sub	r18, r16
     788:	31 0b       	sbc	r19, r17
     78a:	29 30       	cpi	r18, 0x09	; 9
     78c:	31 05       	cpc	r19, r1
     78e:	48 f0       	brcs	.+18     	; 0x7a2 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     790:	ce 01       	movw	r24, r28
     792:	80 0f       	add	r24, r16
     794:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     796:	fc 01       	movw	r30, r24
     798:	33 83       	std	Z+3, r19	; 0x03
     79a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     79c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     79e:	0a 83       	std	Y+2, r16	; 0x02
     7a0:	52 df       	rcall	.-348    	; 0x646 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     7a2:	2a 81       	ldd	r18, Y+2	; 0x02
     7a4:	3b 81       	ldd	r19, Y+3	; 0x03
     7a6:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <xFreeBytesRemaining>
     7aa:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <xFreeBytesRemaining+0x1>
     7ae:	82 1b       	sub	r24, r18
     7b0:	93 0b       	sbc	r25, r19
     7b2:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <xFreeBytesRemaining+0x1>
     7b6:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     7ba:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <xMinimumEverFreeBytesRemaining>
     7be:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <xMinimumEverFreeBytesRemaining+0x1>
     7c2:	84 17       	cp	r24, r20
     7c4:	95 07       	cpc	r25, r21
     7c6:	20 f4       	brcc	.+8      	; 0x7d0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     7c8:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <xMinimumEverFreeBytesRemaining+0x1>
     7cc:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     7d0:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <__data_end>
     7d4:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <__data_end+0x1>
     7d8:	28 2b       	or	r18, r24
     7da:	39 2b       	or	r19, r25
     7dc:	3b 83       	std	Y+3, r19	; 0x03
     7de:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     7e0:	19 82       	std	Y+1, r1	; 0x01
     7e2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     7e4:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <xNumberOfSuccessfulAllocations>
     7e8:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <xNumberOfSuccessfulAllocations+0x1>
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <xNumberOfSuccessfulAllocations+0x1>
     7f2:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <xNumberOfSuccessfulAllocations>
     7f6:	0b c0       	rjmp	.+22     	; 0x80e <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     7f8:	e1 2c       	mov	r14, r1
     7fa:	f1 2c       	mov	r15, r1
     7fc:	08 c0       	rjmp	.+16     	; 0x80e <pvPortMalloc+0x134>
     7fe:	e1 2c       	mov	r14, r1
     800:	f1 2c       	mov	r15, r1
     802:	05 c0       	rjmp	.+10     	; 0x80e <pvPortMalloc+0x134>
     804:	e1 2c       	mov	r14, r1
     806:	f1 2c       	mov	r15, r1
     808:	02 c0       	rjmp	.+4      	; 0x80e <pvPortMalloc+0x134>
     80a:	e1 2c       	mov	r14, r1
     80c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     80e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     812:	e1 14       	cp	r14, r1
     814:	f1 04       	cpc	r15, r1
     816:	11 f4       	brne	.+4      	; 0x81c <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     818:	0e 94 78 15 	call	0x2af0	; 0x2af0 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     81c:	c7 01       	movw	r24, r14
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	08 95       	ret

0000082c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	89 f1       	breq	.+98     	; 0x89a <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     838:	ec 01       	movw	r28, r24
     83a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     83c:	4a 81       	ldd	r20, Y+2	; 0x02
     83e:	5b 81       	ldd	r21, Y+3	; 0x03
     840:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <__data_end>
     844:	30 91 b3 03 	lds	r19, 0x03B3	; 0x8003b3 <__data_end+0x1>
     848:	ba 01       	movw	r22, r20
     84a:	62 23       	and	r22, r18
     84c:	73 23       	and	r23, r19
     84e:	67 2b       	or	r22, r23
     850:	21 f1       	breq	.+72     	; 0x89a <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     852:	68 81       	ld	r22, Y
     854:	79 81       	ldd	r23, Y+1	; 0x01
     856:	67 2b       	or	r22, r23
     858:	01 f5       	brne	.+64     	; 0x89a <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     85a:	20 95       	com	r18
     85c:	30 95       	com	r19
     85e:	24 23       	and	r18, r20
     860:	35 23       	and	r19, r21
     862:	3b 83       	std	Y+3, r19	; 0x03
     864:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     866:	a7 d7       	rcall	.+3918   	; 0x17b6 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <xFreeBytesRemaining>
     870:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <xFreeBytesRemaining+0x1>
     874:	82 0f       	add	r24, r18
     876:	93 1f       	adc	r25, r19
     878:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <xFreeBytesRemaining+0x1>
     87c:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     880:	ce 01       	movw	r24, r28
     882:	e1 de       	rcall	.-574    	; 0x646 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     884:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <xNumberOfSuccessfulFrees>
     888:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <xNumberOfSuccessfulFrees+0x1>
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <xNumberOfSuccessfulFrees+0x1>
     892:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     896:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	08 95       	ret

000008a4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     8a4:	fc 01       	movw	r30, r24
     8a6:	03 96       	adiw	r24, 0x03	; 3
     8a8:	92 83       	std	Z+2, r25	; 0x02
     8aa:	81 83       	std	Z+1, r24	; 0x01
     8ac:	4f ef       	ldi	r20, 0xFF	; 255
     8ae:	5f ef       	ldi	r21, 0xFF	; 255
     8b0:	ba 01       	movw	r22, r20
     8b2:	43 83       	std	Z+3, r20	; 0x03
     8b4:	54 83       	std	Z+4, r21	; 0x04
     8b6:	65 83       	std	Z+5, r22	; 0x05
     8b8:	76 83       	std	Z+6, r23	; 0x06
     8ba:	90 87       	std	Z+8, r25	; 0x08
     8bc:	87 83       	std	Z+7, r24	; 0x07
     8be:	92 87       	std	Z+10, r25	; 0x0a
     8c0:	81 87       	std	Z+9, r24	; 0x09
     8c2:	10 82       	st	Z, r1
     8c4:	08 95       	ret

000008c6 <vListInitialiseItem>:
     8c6:	fc 01       	movw	r30, r24
     8c8:	13 86       	std	Z+11, r1	; 0x0b
     8ca:	12 86       	std	Z+10, r1	; 0x0a
     8cc:	08 95       	ret

000008ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8d8:	08 81       	ld	r16, Y
     8da:	19 81       	ldd	r17, Y+1	; 0x01
     8dc:	2a 81       	ldd	r18, Y+2	; 0x02
     8de:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     8e0:	0f 3f       	cpi	r16, 0xFF	; 255
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	14 07       	cpc	r17, r20
     8e6:	24 07       	cpc	r18, r20
     8e8:	34 07       	cpc	r19, r20
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     8ec:	fc 01       	movw	r30, r24
     8ee:	a1 85       	ldd	r26, Z+9	; 0x09
     8f0:	b2 85       	ldd	r27, Z+10	; 0x0a
     8f2:	11 c0       	rjmp	.+34     	; 0x916 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     8f4:	dc 01       	movw	r26, r24
     8f6:	13 96       	adiw	r26, 0x03	; 3
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <vListInsert+0x2e>
     8fa:	df 01       	movw	r26, r30
     8fc:	14 96       	adiw	r26, 0x04	; 4
     8fe:	ed 91       	ld	r30, X+
     900:	fc 91       	ld	r31, X
     902:	15 97       	sbiw	r26, 0x05	; 5
     904:	40 81       	ld	r20, Z
     906:	51 81       	ldd	r21, Z+1	; 0x01
     908:	62 81       	ldd	r22, Z+2	; 0x02
     90a:	73 81       	ldd	r23, Z+3	; 0x03
     90c:	04 17       	cp	r16, r20
     90e:	15 07       	cpc	r17, r21
     910:	26 07       	cpc	r18, r22
     912:	37 07       	cpc	r19, r23
     914:	90 f7       	brcc	.-28     	; 0x8fa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     916:	14 96       	adiw	r26, 0x04	; 4
     918:	ed 91       	ld	r30, X+
     91a:	fc 91       	ld	r31, X
     91c:	15 97       	sbiw	r26, 0x05	; 5
     91e:	fd 83       	std	Y+5, r31	; 0x05
     920:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     922:	d7 83       	std	Z+7, r29	; 0x07
     924:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     926:	bf 83       	std	Y+7, r27	; 0x07
     928:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     92a:	15 96       	adiw	r26, 0x05	; 5
     92c:	dc 93       	st	X, r29
     92e:	ce 93       	st	-X, r28
     930:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     932:	9b 87       	std	Y+11, r25	; 0x0b
     934:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     936:	fc 01       	movw	r30, r24
     938:	20 81       	ld	r18, Z
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	20 83       	st	Z, r18
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	08 95       	ret

00000948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     94e:	a2 85       	ldd	r26, Z+10	; 0x0a
     950:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     952:	c4 81       	ldd	r28, Z+4	; 0x04
     954:	d5 81       	ldd	r29, Z+5	; 0x05
     956:	86 81       	ldd	r24, Z+6	; 0x06
     958:	97 81       	ldd	r25, Z+7	; 0x07
     95a:	9f 83       	std	Y+7, r25	; 0x07
     95c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     95e:	c6 81       	ldd	r28, Z+6	; 0x06
     960:	d7 81       	ldd	r29, Z+7	; 0x07
     962:	84 81       	ldd	r24, Z+4	; 0x04
     964:	95 81       	ldd	r25, Z+5	; 0x05
     966:	9d 83       	std	Y+5, r25	; 0x05
     968:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     96a:	11 96       	adiw	r26, 0x01	; 1
     96c:	8d 91       	ld	r24, X+
     96e:	9c 91       	ld	r25, X
     970:	12 97       	sbiw	r26, 0x02	; 2
     972:	e8 17       	cp	r30, r24
     974:	f9 07       	cpc	r31, r25
     976:	31 f4       	brne	.+12     	; 0x984 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     978:	86 81       	ldd	r24, Z+6	; 0x06
     97a:	97 81       	ldd	r25, Z+7	; 0x07
     97c:	12 96       	adiw	r26, 0x02	; 2
     97e:	9c 93       	st	X, r25
     980:	8e 93       	st	-X, r24
     982:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     984:	13 86       	std	Z+11, r1	; 0x0b
     986:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     988:	8c 91       	ld	r24, X
     98a:	81 50       	subi	r24, 0x01	; 1
     98c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     98e:	8c 91       	ld	r24, X
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     996:	a8 95       	wdr
     998:	90 ec       	ldi	r25, 0xC0	; 192
     99a:	88 e1       	ldi	r24, 0x18	; 24
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	a8 95       	wdr
     9a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9ac:	08 95       	ret

000009ae <pxPortInitialiseStack>:
     9ae:	fc 01       	movw	r30, r24
     9b0:	60 83       	st	Z, r22
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	70 83       	st	Z, r23
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	10 82       	st	Z, r1
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	10 82       	st	Z, r1
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	20 e8       	ldi	r18, 0x80	; 128
     9c2:	20 83       	st	Z, r18
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	10 82       	st	Z, r1
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	10 82       	st	Z, r1
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	10 82       	st	Z, r1
     9d0:	77 97       	sbiw	r30, 0x17	; 23
     9d2:	40 83       	st	Z, r20
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	50 83       	st	Z, r21
     9d8:	86 97       	sbiw	r24, 0x26	; 38
     9da:	08 95       	ret

000009dc <xPortStartScheduler>:
     9dc:	dc df       	rcall	.-72     	; 0x996 <prvSetupTimerInterrupt>
     9de:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
     9e2:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
     9e6:	cd 91       	ld	r28, X+
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	dd 91       	ld	r29, X+
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	9f 90       	pop	r9
     a1c:	8f 90       	pop	r8
     a1e:	7f 90       	pop	r7
     a20:	6f 90       	pop	r6
     a22:	5f 90       	pop	r5
     a24:	4f 90       	pop	r4
     a26:	3f 90       	pop	r3
     a28:	2f 90       	pop	r2
     a2a:	1f 90       	pop	r1
     a2c:	0f 90       	pop	r0
     a2e:	0c be       	out	0x3c, r0	; 60
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	08 95       	ret
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	08 95       	ret

00000a40 <vPortYield>:
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	0f 92       	push	r0
     a48:	0b b6       	in	r0, 0x3b	; 59
     a4a:	0f 92       	push	r0
     a4c:	0c b6       	in	r0, 0x3c	; 60
     a4e:	0f 92       	push	r0
     a50:	1f 92       	push	r1
     a52:	11 24       	eor	r1, r1
     a54:	2f 92       	push	r2
     a56:	3f 92       	push	r3
     a58:	4f 92       	push	r4
     a5a:	5f 92       	push	r5
     a5c:	6f 92       	push	r6
     a5e:	7f 92       	push	r7
     a60:	8f 92       	push	r8
     a62:	9f 92       	push	r9
     a64:	af 92       	push	r10
     a66:	bf 92       	push	r11
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	2f 93       	push	r18
     a76:	3f 93       	push	r19
     a78:	4f 93       	push	r20
     a7a:	5f 93       	push	r21
     a7c:	6f 93       	push	r22
     a7e:	7f 93       	push	r23
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	af 93       	push	r26
     a86:	bf 93       	push	r27
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ef 93       	push	r30
     a8e:	ff 93       	push	r31
     a90:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
     a94:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
     a98:	0d b6       	in	r0, 0x3d	; 61
     a9a:	0d 92       	st	X+, r0
     a9c:	0e b6       	in	r0, 0x3e	; 62
     a9e:	0d 92       	st	X+, r0
     aa0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <vTaskSwitchContext>
     aa4:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
     aa8:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
     aac:	cd 91       	ld	r28, X+
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	dd 91       	ld	r29, X+
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	7f 90       	pop	r7
     ae6:	6f 90       	pop	r6
     ae8:	5f 90       	pop	r5
     aea:	4f 90       	pop	r4
     aec:	3f 90       	pop	r3
     aee:	2f 90       	pop	r2
     af0:	1f 90       	pop	r1
     af2:	0f 90       	pop	r0
     af4:	0c be       	out	0x3c, r0	; 60
     af6:	0f 90       	pop	r0
     af8:	0b be       	out	0x3b, r0	; 59
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	0f 90       	pop	r0
     b00:	08 95       	ret

00000b02 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	0f 92       	push	r0
     b0a:	0b b6       	in	r0, 0x3b	; 59
     b0c:	0f 92       	push	r0
     b0e:	0c b6       	in	r0, 0x3c	; 60
     b10:	0f 92       	push	r0
     b12:	1f 92       	push	r1
     b14:	11 24       	eor	r1, r1
     b16:	2f 92       	push	r2
     b18:	3f 92       	push	r3
     b1a:	4f 92       	push	r4
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	2f 93       	push	r18
     b38:	3f 93       	push	r19
     b3a:	4f 93       	push	r20
     b3c:	5f 93       	push	r21
     b3e:	6f 93       	push	r22
     b40:	7f 93       	push	r23
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
     b46:	af 93       	push	r26
     b48:	bf 93       	push	r27
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31
     b52:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
     b56:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
     b5a:	0d b6       	in	r0, 0x3d	; 61
     b5c:	0d 92       	st	X+, r0
     b5e:	0e b6       	in	r0, 0x3e	; 62
     b60:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     b62:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     b64:	3c d6       	rcall	.+3192   	; 0x17de <xTaskIncrementTick>
     b66:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     b68:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     b6c:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
     b70:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
     b74:	cd 91       	ld	r28, X+
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	dd 91       	ld	r29, X+
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	bf 90       	pop	r11
     ba6:	af 90       	pop	r10
     ba8:	9f 90       	pop	r9
     baa:	8f 90       	pop	r8
     bac:	7f 90       	pop	r7
     bae:	6f 90       	pop	r6
     bb0:	5f 90       	pop	r5
     bb2:	4f 90       	pop	r4
     bb4:	3f 90       	pop	r3
     bb6:	2f 90       	pop	r2
     bb8:	1f 90       	pop	r1
     bba:	0f 90       	pop	r0
     bbc:	0c be       	out	0x3c, r0	; 60
     bbe:	0f 90       	pop	r0
     bc0:	0b be       	out	0x3b, r0	; 59
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     bc8:	08 95       	ret

00000bca <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     bca:	9b df       	rcall	.-202    	; 0xb02 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     bcc:	18 95       	reti

00000bce <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     bce:	dc 01       	movw	r26, r24
     bd0:	53 96       	adiw	r26, 0x13	; 19
     bd2:	2c 91       	ld	r18, X
     bd4:	53 97       	sbiw	r26, 0x13	; 19
     bd6:	22 23       	and	r18, r18
     bd8:	41 f0       	breq	.+16     	; 0xbea <prvGetDisinheritPriorityAfterTimeout+0x1c>
     bda:	5a 96       	adiw	r26, 0x1a	; 26
     bdc:	ed 91       	ld	r30, X+
     bde:	fc 91       	ld	r31, X
     be0:	5b 97       	sbiw	r26, 0x1b	; 27
     be2:	90 81       	ld	r25, Z
     be4:	8a e0       	ldi	r24, 0x0A	; 10
     be6:	89 1b       	sub	r24, r25
     be8:	08 95       	ret
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	08 95       	ret

00000bee <prvIsQueueEmpty>:
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	0f 92       	push	r0
     bf4:	fc 01       	movw	r30, r24
     bf6:	86 8d       	ldd	r24, Z+30	; 0x1e
     bf8:	81 11       	cpse	r24, r1
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <prvIsQueueEmpty+0x12>
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <prvIsQueueEmpty+0x14>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	08 95       	ret

00000c08 <prvIsQueueFull>:
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	0f 92       	push	r0
     c0e:	fc 01       	movw	r30, r24
     c10:	26 8d       	ldd	r18, Z+30	; 0x1e
     c12:	87 8d       	ldd	r24, Z+31	; 0x1f
     c14:	28 13       	cpse	r18, r24
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <prvIsQueueFull+0x14>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <prvIsQueueFull+0x16>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	08 95       	ret

00000c24 <prvCopyDataToQueue>:
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	ec 01       	movw	r28, r24
     c2e:	04 2f       	mov	r16, r20
     c30:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c32:	48 a1       	ldd	r20, Y+32	; 0x20
     c34:	41 11       	cpse	r20, r1
     c36:	0c c0       	rjmp	.+24     	; 0xc50 <prvCopyDataToQueue+0x2c>
     c38:	88 81       	ld	r24, Y
     c3a:	99 81       	ldd	r25, Y+1	; 0x01
     c3c:	89 2b       	or	r24, r25
     c3e:	09 f0       	breq	.+2      	; 0xc42 <prvCopyDataToQueue+0x1e>
     c40:	42 c0       	rjmp	.+132    	; 0xcc6 <prvCopyDataToQueue+0xa2>
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	9d 81       	ldd	r25, Y+5	; 0x05
     c46:	0e 94 72 11 	call	0x22e4	; 0x22e4 <xTaskPriorityDisinherit>
     c4a:	1d 82       	std	Y+5, r1	; 0x05
     c4c:	1c 82       	std	Y+4, r1	; 0x04
     c4e:	42 c0       	rjmp	.+132    	; 0xcd4 <prvCopyDataToQueue+0xb0>
     c50:	01 11       	cpse	r16, r1
     c52:	17 c0       	rjmp	.+46     	; 0xc82 <prvCopyDataToQueue+0x5e>
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	9b 81       	ldd	r25, Y+3	; 0x03
     c5a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <memcpy>
     c5e:	28 a1       	ldd	r18, Y+32	; 0x20
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	82 0f       	add	r24, r18
     c66:	91 1d       	adc	r25, r1
     c68:	9b 83       	std	Y+3, r25	; 0x03
     c6a:	8a 83       	std	Y+2, r24	; 0x02
     c6c:	2c 81       	ldd	r18, Y+4	; 0x04
     c6e:	3d 81       	ldd	r19, Y+5	; 0x05
     c70:	82 17       	cp	r24, r18
     c72:	93 07       	cpc	r25, r19
     c74:	50 f1       	brcs	.+84     	; 0xcca <prvCopyDataToQueue+0xa6>
     c76:	88 81       	ld	r24, Y
     c78:	99 81       	ldd	r25, Y+1	; 0x01
     c7a:	9b 83       	std	Y+3, r25	; 0x03
     c7c:	8a 83       	std	Y+2, r24	; 0x02
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	29 c0       	rjmp	.+82     	; 0xcd4 <prvCopyDataToQueue+0xb0>
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	8e 81       	ldd	r24, Y+6	; 0x06
     c86:	9f 81       	ldd	r25, Y+7	; 0x07
     c88:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <memcpy>
     c8c:	88 a1       	ldd	r24, Y+32	; 0x20
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	91 95       	neg	r25
     c92:	81 95       	neg	r24
     c94:	91 09       	sbc	r25, r1
     c96:	2e 81       	ldd	r18, Y+6	; 0x06
     c98:	3f 81       	ldd	r19, Y+7	; 0x07
     c9a:	28 0f       	add	r18, r24
     c9c:	39 1f       	adc	r19, r25
     c9e:	3f 83       	std	Y+7, r19	; 0x07
     ca0:	2e 83       	std	Y+6, r18	; 0x06
     ca2:	48 81       	ld	r20, Y
     ca4:	59 81       	ldd	r21, Y+1	; 0x01
     ca6:	24 17       	cp	r18, r20
     ca8:	35 07       	cpc	r19, r21
     caa:	30 f4       	brcc	.+12     	; 0xcb8 <prvCopyDataToQueue+0x94>
     cac:	2c 81       	ldd	r18, Y+4	; 0x04
     cae:	3d 81       	ldd	r19, Y+5	; 0x05
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	9f 83       	std	Y+7, r25	; 0x07
     cb6:	8e 83       	std	Y+6, r24	; 0x06
     cb8:	02 30       	cpi	r16, 0x02	; 2
     cba:	49 f4       	brne	.+18     	; 0xcce <prvCopyDataToQueue+0xaa>
     cbc:	11 23       	and	r17, r17
     cbe:	49 f0       	breq	.+18     	; 0xcd2 <prvCopyDataToQueue+0xae>
     cc0:	11 50       	subi	r17, 0x01	; 1
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <prvCopyDataToQueue+0xb0>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <prvCopyDataToQueue+0xb0>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <prvCopyDataToQueue+0xb0>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <prvCopyDataToQueue+0xb0>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	1f 5f       	subi	r17, 0xFF	; 255
     cd6:	1e 8f       	std	Y+30, r17	; 0x1e
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <prvCopyDataFromQueue>:
     ce2:	fc 01       	movw	r30, r24
     ce4:	40 a1       	ldd	r20, Z+32	; 0x20
     ce6:	44 23       	and	r20, r20
     ce8:	a9 f0       	breq	.+42     	; 0xd14 <prvCopyDataFromQueue+0x32>
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	26 81       	ldd	r18, Z+6	; 0x06
     cee:	37 81       	ldd	r19, Z+7	; 0x07
     cf0:	24 0f       	add	r18, r20
     cf2:	35 1f       	adc	r19, r21
     cf4:	37 83       	std	Z+7, r19	; 0x07
     cf6:	26 83       	std	Z+6, r18	; 0x06
     cf8:	84 81       	ldd	r24, Z+4	; 0x04
     cfa:	95 81       	ldd	r25, Z+5	; 0x05
     cfc:	28 17       	cp	r18, r24
     cfe:	39 07       	cpc	r19, r25
     d00:	20 f0       	brcs	.+8      	; 0xd0a <prvCopyDataFromQueue+0x28>
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	97 83       	std	Z+7, r25	; 0x07
     d08:	86 83       	std	Z+6, r24	; 0x06
     d0a:	cb 01       	movw	r24, r22
     d0c:	66 81       	ldd	r22, Z+6	; 0x06
     d0e:	77 81       	ldd	r23, Z+7	; 0x07
     d10:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <memcpy>
     d14:	08 95       	ret

00000d16 <prvUnlockQueue>:
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	ec 01       	movw	r28, r24
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	0f 92       	push	r0
     d24:	1a a1       	ldd	r17, Y+34	; 0x22
     d26:	0b c0       	rjmp	.+22     	; 0xd3e <prvUnlockQueue+0x28>
     d28:	8b 89       	ldd	r24, Y+19	; 0x13
     d2a:	88 23       	and	r24, r24
     d2c:	51 f0       	breq	.+20     	; 0xd42 <prvUnlockQueue+0x2c>
     d2e:	ce 01       	movw	r24, r28
     d30:	43 96       	adiw	r24, 0x13	; 19
     d32:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskRemoveFromEventList>
     d36:	81 11       	cpse	r24, r1
     d38:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <vTaskMissedYield>
     d3c:	11 50       	subi	r17, 0x01	; 1
     d3e:	11 16       	cp	r1, r17
     d40:	9c f3       	brlt	.-26     	; 0xd28 <prvUnlockQueue+0x12>
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	8a a3       	std	Y+34, r24	; 0x22
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	0f 92       	push	r0
     d50:	19 a1       	ldd	r17, Y+33	; 0x21
     d52:	0b c0       	rjmp	.+22     	; 0xd6a <prvUnlockQueue+0x54>
     d54:	88 85       	ldd	r24, Y+8	; 0x08
     d56:	88 23       	and	r24, r24
     d58:	51 f0       	breq	.+20     	; 0xd6e <prvUnlockQueue+0x58>
     d5a:	ce 01       	movw	r24, r28
     d5c:	08 96       	adiw	r24, 0x08	; 8
     d5e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskRemoveFromEventList>
     d62:	81 11       	cpse	r24, r1
     d64:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <vTaskMissedYield>
     d68:	11 50       	subi	r17, 0x01	; 1
     d6a:	11 16       	cp	r1, r17
     d6c:	9c f3       	brlt	.-26     	; 0xd54 <prvUnlockQueue+0x3e>
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	89 a3       	std	Y+33, r24	; 0x21
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	08 95       	ret

00000d7e <xQueueGenericReset>:
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	ec 01       	movw	r28, r24
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	0f 92       	push	r0
     d8a:	e8 81       	ld	r30, Y
     d8c:	f9 81       	ldd	r31, Y+1	; 0x01
     d8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d90:	28 a1       	ldd	r18, Y+32	; 0x20
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	82 9f       	mul	r24, r18
     d98:	a0 01       	movw	r20, r0
     d9a:	83 9f       	mul	r24, r19
     d9c:	50 0d       	add	r21, r0
     d9e:	92 9f       	mul	r25, r18
     da0:	50 0d       	add	r21, r0
     da2:	11 24       	eor	r1, r1
     da4:	4e 0f       	add	r20, r30
     da6:	5f 1f       	adc	r21, r31
     da8:	5d 83       	std	Y+5, r21	; 0x05
     daa:	4c 83       	std	Y+4, r20	; 0x04
     dac:	1e 8e       	std	Y+30, r1	; 0x1e
     dae:	fb 83       	std	Y+3, r31	; 0x03
     db0:	ea 83       	std	Y+2, r30	; 0x02
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	28 9f       	mul	r18, r24
     db6:	a0 01       	movw	r20, r0
     db8:	29 9f       	mul	r18, r25
     dba:	50 0d       	add	r21, r0
     dbc:	38 9f       	mul	r19, r24
     dbe:	50 0d       	add	r21, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	cf 01       	movw	r24, r30
     dc4:	84 0f       	add	r24, r20
     dc6:	95 1f       	adc	r25, r21
     dc8:	9f 83       	std	Y+7, r25	; 0x07
     dca:	8e 83       	std	Y+6, r24	; 0x06
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	89 a3       	std	Y+33, r24	; 0x21
     dd0:	8a a3       	std	Y+34, r24	; 0x22
     dd2:	61 11       	cpse	r22, r1
     dd4:	0b c0       	rjmp	.+22     	; 0xdec <xQueueGenericReset+0x6e>
     dd6:	88 85       	ldd	r24, Y+8	; 0x08
     dd8:	88 23       	and	r24, r24
     dda:	71 f0       	breq	.+28     	; 0xdf8 <xQueueGenericReset+0x7a>
     ddc:	ce 01       	movw	r24, r28
     dde:	08 96       	adiw	r24, 0x08	; 8
     de0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskRemoveFromEventList>
     de4:	88 23       	and	r24, r24
     de6:	41 f0       	breq	.+16     	; 0xdf8 <xQueueGenericReset+0x7a>
     de8:	2b de       	rcall	.-938    	; 0xa40 <vPortYield>
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <xQueueGenericReset+0x7a>
     dec:	ce 01       	movw	r24, r28
     dee:	08 96       	adiw	r24, 0x08	; 8
     df0:	59 dd       	rcall	.-1358   	; 0x8a4 <vListInitialise>
     df2:	ce 01       	movw	r24, r28
     df4:	43 96       	adiw	r24, 0x13	; 19
     df6:	56 dd       	rcall	.-1364   	; 0x8a4 <vListInitialise>
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <prvInitialiseNewQueue>:
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	f8 01       	movw	r30, r16
     e0a:	61 11       	cpse	r22, r1
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <prvInitialiseNewQueue+0x10>
     e0e:	11 83       	std	Z+1, r17	; 0x01
     e10:	00 83       	st	Z, r16
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <prvInitialiseNewQueue+0x14>
     e14:	51 83       	std	Z+1, r21	; 0x01
     e16:	40 83       	st	Z, r20
     e18:	87 8f       	std	Z+31, r24	; 0x1f
     e1a:	60 a3       	std	Z+32, r22	; 0x20
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	cf 01       	movw	r24, r30
     e20:	ae df       	rcall	.-164    	; 0xd7e <xQueueGenericReset>
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret

00000e28 <xQueueGenericCreate>:
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	f8 2e       	mov	r15, r24
     e38:	e6 2e       	mov	r14, r22
     e3a:	d4 2e       	mov	r13, r20
     e3c:	86 9f       	mul	r24, r22
     e3e:	c0 01       	movw	r24, r0
     e40:	11 24       	eor	r1, r1
     e42:	83 96       	adiw	r24, 0x23	; 35
     e44:	4a dc       	rcall	.-1900   	; 0x6da <pvPortMalloc>
     e46:	ec 01       	movw	r28, r24
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	41 f0       	breq	.+16     	; 0xe5c <xQueueGenericCreate+0x34>
     e4c:	8c 01       	movw	r16, r24
     e4e:	2d 2d       	mov	r18, r13
     e50:	ac 01       	movw	r20, r24
     e52:	4d 5d       	subi	r20, 0xDD	; 221
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	6e 2d       	mov	r22, r14
     e58:	8f 2d       	mov	r24, r15
     e5a:	d4 df       	rcall	.-88     	; 0xe04 <prvInitialiseNewQueue>
     e5c:	ce 01       	movw	r24, r28
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	08 95       	ret

00000e6e <xQueueGenericSend>:
     e6e:	cf 92       	push	r12
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	29 97       	sbiw	r28, 0x09	; 9
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	7c 01       	movw	r14, r24
     e90:	6b 01       	movw	r12, r22
     e92:	2e 83       	std	Y+6, r18	; 0x06
     e94:	3f 83       	std	Y+7, r19	; 0x07
     e96:	48 87       	std	Y+8, r20	; 0x08
     e98:	59 87       	std	Y+9, r21	; 0x09
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	0f 92       	push	r0
     ea2:	f7 01       	movw	r30, r14
     ea4:	96 8d       	ldd	r25, Z+30	; 0x1e
     ea6:	87 8d       	ldd	r24, Z+31	; 0x1f
     ea8:	98 17       	cp	r25, r24
     eaa:	10 f0       	brcs	.+4      	; 0xeb0 <xQueueGenericSend+0x42>
     eac:	02 30       	cpi	r16, 0x02	; 2
     eae:	a9 f4       	brne	.+42     	; 0xeda <xQueueGenericSend+0x6c>
     eb0:	40 2f       	mov	r20, r16
     eb2:	b6 01       	movw	r22, r12
     eb4:	c7 01       	movw	r24, r14
     eb6:	b6 de       	rcall	.-660    	; 0xc24 <prvCopyDataToQueue>
     eb8:	f7 01       	movw	r30, r14
     eba:	93 89       	ldd	r25, Z+19	; 0x13
     ebc:	99 23       	and	r25, r25
     ebe:	39 f0       	breq	.+14     	; 0xece <xQueueGenericSend+0x60>
     ec0:	c7 01       	movw	r24, r14
     ec2:	43 96       	adiw	r24, 0x13	; 19
     ec4:	b6 d7       	rcall	.+3948   	; 0x1e32 <xTaskRemoveFromEventList>
     ec6:	88 23       	and	r24, r24
     ec8:	21 f0       	breq	.+8      	; 0xed2 <xQueueGenericSend+0x64>
     eca:	ba dd       	rcall	.-1164   	; 0xa40 <vPortYield>
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <xQueueGenericSend+0x64>
     ece:	81 11       	cpse	r24, r1
     ed0:	b7 dd       	rcall	.-1170   	; 0xa40 <vPortYield>
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	48 c0       	rjmp	.+144    	; 0xf6a <xQueueGenericSend+0xfc>
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	a8 85       	ldd	r26, Y+8	; 0x08
     ee0:	b9 85       	ldd	r27, Y+9	; 0x09
     ee2:	89 2b       	or	r24, r25
     ee4:	8a 2b       	or	r24, r26
     ee6:	8b 2b       	or	r24, r27
     ee8:	21 f4       	brne	.+8      	; 0xef2 <xQueueGenericSend+0x84>
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	3c c0       	rjmp	.+120    	; 0xf6a <xQueueGenericSend+0xfc>
     ef2:	11 11       	cpse	r17, r1
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <xQueueGenericSend+0x92>
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 62 10 	call	0x20c4	; 0x20c4 <vTaskInternalSetTimeOutState>
     efe:	11 e0       	ldi	r17, 0x01	; 1
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	58 d4       	rcall	.+2224   	; 0x17b6 <vTaskSuspendAll>
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	0f 92       	push	r0
     f0c:	f7 01       	movw	r30, r14
     f0e:	81 a1       	ldd	r24, Z+33	; 0x21
     f10:	8f 3f       	cpi	r24, 0xFF	; 255
     f12:	09 f4       	brne	.+2      	; 0xf16 <xQueueGenericSend+0xa8>
     f14:	11 a2       	std	Z+33, r1	; 0x21
     f16:	f7 01       	movw	r30, r14
     f18:	82 a1       	ldd	r24, Z+34	; 0x22
     f1a:	8f 3f       	cpi	r24, 0xFF	; 255
     f1c:	09 f4       	brne	.+2      	; 0xf20 <xQueueGenericSend+0xb2>
     f1e:	12 a2       	std	Z+34, r1	; 0x22
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	be 01       	movw	r22, r28
     f26:	6a 5f       	subi	r22, 0xFA	; 250
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xTaskCheckForTimeOut>
     f32:	81 11       	cpse	r24, r1
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <xQueueGenericSend+0xf4>
     f36:	c7 01       	movw	r24, r14
     f38:	67 de       	rcall	.-818    	; 0xc08 <prvIsQueueFull>
     f3a:	88 23       	and	r24, r24
     f3c:	71 f0       	breq	.+28     	; 0xf5a <xQueueGenericSend+0xec>
     f3e:	4e 81       	ldd	r20, Y+6	; 0x06
     f40:	5f 81       	ldd	r21, Y+7	; 0x07
     f42:	68 85       	ldd	r22, Y+8	; 0x08
     f44:	79 85       	ldd	r23, Y+9	; 0x09
     f46:	c7 01       	movw	r24, r14
     f48:	08 96       	adiw	r24, 0x08	; 8
     f4a:	d0 d6       	rcall	.+3488   	; 0x1cec <vTaskPlaceOnEventList>
     f4c:	c7 01       	movw	r24, r14
     f4e:	e3 de       	rcall	.-570    	; 0xd16 <prvUnlockQueue>
     f50:	72 d5       	rcall	.+2788   	; 0x1a36 <xTaskResumeAll>
     f52:	81 11       	cpse	r24, r1
     f54:	a3 cf       	rjmp	.-186    	; 0xe9c <xQueueGenericSend+0x2e>
     f56:	74 dd       	rcall	.-1304   	; 0xa40 <vPortYield>
     f58:	a1 cf       	rjmp	.-190    	; 0xe9c <xQueueGenericSend+0x2e>
     f5a:	c7 01       	movw	r24, r14
     f5c:	dc de       	rcall	.-584    	; 0xd16 <prvUnlockQueue>
     f5e:	6b d5       	rcall	.+2774   	; 0x1a36 <xTaskResumeAll>
     f60:	9d cf       	rjmp	.-198    	; 0xe9c <xQueueGenericSend+0x2e>
     f62:	c7 01       	movw	r24, r14
     f64:	d8 de       	rcall	.-592    	; 0xd16 <prvUnlockQueue>
     f66:	67 d5       	rcall	.+2766   	; 0x1a36 <xTaskResumeAll>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	29 96       	adiw	r28, 0x09	; 9
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	08 95       	ret

00000f88 <xQueueGenericSendFromISR>:
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	8a 01       	movw	r16, r20
     f96:	fc 01       	movw	r30, r24
     f98:	56 8d       	ldd	r21, Z+30	; 0x1e
     f9a:	37 8d       	ldd	r19, Z+31	; 0x1f
     f9c:	53 17       	cp	r21, r19
     f9e:	10 f0       	brcs	.+4      	; 0xfa4 <xQueueGenericSendFromISR+0x1c>
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	f1 f4       	brne	.+60     	; 0xfe0 <xQueueGenericSendFromISR+0x58>
     fa4:	42 2f       	mov	r20, r18
     fa6:	78 01       	movw	r14, r16
     fa8:	ec 01       	movw	r28, r24
     faa:	1a a1       	ldd	r17, Y+34	; 0x22
     fac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fae:	ce 01       	movw	r24, r28
     fb0:	39 de       	rcall	.-910    	; 0xc24 <prvCopyDataToQueue>
     fb2:	1f 3f       	cpi	r17, 0xFF	; 255
     fb4:	79 f4       	brne	.+30     	; 0xfd4 <xQueueGenericSendFromISR+0x4c>
     fb6:	8b 89       	ldd	r24, Y+19	; 0x13
     fb8:	88 23       	and	r24, r24
     fba:	a1 f0       	breq	.+40     	; 0xfe4 <xQueueGenericSendFromISR+0x5c>
     fbc:	ce 01       	movw	r24, r28
     fbe:	43 96       	adiw	r24, 0x13	; 19
     fc0:	38 d7       	rcall	.+3696   	; 0x1e32 <xTaskRemoveFromEventList>
     fc2:	88 23       	and	r24, r24
     fc4:	89 f0       	breq	.+34     	; 0xfe8 <xQueueGenericSendFromISR+0x60>
     fc6:	e1 14       	cp	r14, r1
     fc8:	f1 04       	cpc	r15, r1
     fca:	81 f0       	breq	.+32     	; 0xfec <xQueueGenericSendFromISR+0x64>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	f7 01       	movw	r30, r14
     fd0:	80 83       	st	Z, r24
     fd2:	0d c0       	rjmp	.+26     	; 0xfee <xQueueGenericSendFromISR+0x66>
     fd4:	ff 24       	eor	r15, r15
     fd6:	f3 94       	inc	r15
     fd8:	f1 0e       	add	r15, r17
     fda:	fa a2       	std	Y+34, r15	; 0x22
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	07 c0       	rjmp	.+14     	; 0xfee <xQueueGenericSendFromISR+0x66>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <xQueueGenericSendFromISR+0x66>
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <xQueueGenericSendFromISR+0x66>
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	01 c0       	rjmp	.+2      	; 0xfee <xQueueGenericSendFromISR+0x66>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	08 95       	ret

00000ffc <xQueueReceive>:
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	29 97       	sbiw	r28, 0x09	; 9
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	8c 01       	movw	r16, r24
    101e:	6b 01       	movw	r12, r22
    1020:	2e 83       	std	Y+6, r18	; 0x06
    1022:	3f 83       	std	Y+7, r19	; 0x07
    1024:	48 87       	std	Y+8, r20	; 0x08
    1026:	59 87       	std	Y+9, r21	; 0x09
    1028:	e1 2c       	mov	r14, r1
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	0f 92       	push	r0
    1030:	f8 01       	movw	r30, r16
    1032:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1034:	ff 20       	and	r15, r15
    1036:	91 f0       	breq	.+36     	; 0x105c <__EEPROM_REGION_LENGTH__+0x5c>
    1038:	b6 01       	movw	r22, r12
    103a:	c8 01       	movw	r24, r16
    103c:	52 de       	rcall	.-860    	; 0xce2 <prvCopyDataFromQueue>
    103e:	fa 94       	dec	r15
    1040:	f8 01       	movw	r30, r16
    1042:	f6 8e       	std	Z+30, r15	; 0x1e
    1044:	80 85       	ldd	r24, Z+8	; 0x08
    1046:	88 23       	and	r24, r24
    1048:	29 f0       	breq	.+10     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    104a:	c8 01       	movw	r24, r16
    104c:	08 96       	adiw	r24, 0x08	; 8
    104e:	f1 d6       	rcall	.+3554   	; 0x1e32 <xTaskRemoveFromEventList>
    1050:	81 11       	cpse	r24, r1
    1052:	f6 dc       	rcall	.-1556   	; 0xa40 <vPortYield>
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	4e c0       	rjmp	.+156    	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    105c:	8e 81       	ldd	r24, Y+6	; 0x06
    105e:	9f 81       	ldd	r25, Y+7	; 0x07
    1060:	a8 85       	ldd	r26, Y+8	; 0x08
    1062:	b9 85       	ldd	r27, Y+9	; 0x09
    1064:	89 2b       	or	r24, r25
    1066:	8a 2b       	or	r24, r26
    1068:	8b 2b       	or	r24, r27
    106a:	21 f4       	brne	.+8      	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	42 c0       	rjmp	.+132    	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    1074:	e1 10       	cpse	r14, r1
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <vTaskInternalSetTimeOutState>
    1080:	ee 24       	eor	r14, r14
    1082:	e3 94       	inc	r14
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	96 d3       	rcall	.+1836   	; 0x17b6 <vTaskSuspendAll>
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	0f 92       	push	r0
    1090:	f8 01       	movw	r30, r16
    1092:	81 a1       	ldd	r24, Z+33	; 0x21
    1094:	8f 3f       	cpi	r24, 0xFF	; 255
    1096:	09 f4       	brne	.+2      	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
    1098:	11 a2       	std	Z+33, r1	; 0x21
    109a:	f8 01       	movw	r30, r16
    109c:	82 a1       	ldd	r24, Z+34	; 0x22
    109e:	8f 3f       	cpi	r24, 0xFF	; 255
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    10a2:	12 a2       	std	Z+34, r1	; 0x22
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	be 01       	movw	r22, r28
    10aa:	6a 5f       	subi	r22, 0xFA	; 250
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	ce 01       	movw	r24, r28
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xTaskCheckForTimeOut>
    10b6:	81 11       	cpse	r24, r1
    10b8:	16 c0       	rjmp	.+44     	; 0x10e6 <__EEPROM_REGION_LENGTH__+0xe6>
    10ba:	c8 01       	movw	r24, r16
    10bc:	98 dd       	rcall	.-1232   	; 0xbee <prvIsQueueEmpty>
    10be:	88 23       	and	r24, r24
    10c0:	71 f0       	breq	.+28     	; 0x10de <__EEPROM_REGION_LENGTH__+0xde>
    10c2:	4e 81       	ldd	r20, Y+6	; 0x06
    10c4:	5f 81       	ldd	r21, Y+7	; 0x07
    10c6:	68 85       	ldd	r22, Y+8	; 0x08
    10c8:	79 85       	ldd	r23, Y+9	; 0x09
    10ca:	c8 01       	movw	r24, r16
    10cc:	43 96       	adiw	r24, 0x13	; 19
    10ce:	0e d6       	rcall	.+3100   	; 0x1cec <vTaskPlaceOnEventList>
    10d0:	c8 01       	movw	r24, r16
    10d2:	21 de       	rcall	.-958    	; 0xd16 <prvUnlockQueue>
    10d4:	b0 d4       	rcall	.+2400   	; 0x1a36 <xTaskResumeAll>
    10d6:	81 11       	cpse	r24, r1
    10d8:	a8 cf       	rjmp	.-176    	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    10da:	b2 dc       	rcall	.-1692   	; 0xa40 <vPortYield>
    10dc:	a6 cf       	rjmp	.-180    	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    10de:	c8 01       	movw	r24, r16
    10e0:	1a de       	rcall	.-972    	; 0xd16 <prvUnlockQueue>
    10e2:	a9 d4       	rcall	.+2386   	; 0x1a36 <xTaskResumeAll>
    10e4:	a2 cf       	rjmp	.-188    	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    10e6:	c8 01       	movw	r24, r16
    10e8:	16 de       	rcall	.-980    	; 0xd16 <prvUnlockQueue>
    10ea:	a5 d4       	rcall	.+2378   	; 0x1a36 <xTaskResumeAll>
    10ec:	c8 01       	movw	r24, r16
    10ee:	7f dd       	rcall	.-1282   	; 0xbee <prvIsQueueEmpty>
    10f0:	88 23       	and	r24, r24
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    10f4:	9a cf       	rjmp	.-204    	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	29 96       	adiw	r28, 0x09	; 9
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	08 95       	ret

00001116 <xQueueSemaphoreTake>:
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	29 97       	sbiw	r28, 0x09	; 9
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	8c 01       	movw	r16, r24
    1134:	4e 83       	std	Y+6, r20	; 0x06
    1136:	5f 83       	std	Y+7, r21	; 0x07
    1138:	68 87       	std	Y+8, r22	; 0x08
    113a:	79 87       	std	Y+9, r23	; 0x09
    113c:	e1 2c       	mov	r14, r1
    113e:	f1 2c       	mov	r15, r1
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	0f 92       	push	r0
    1146:	f8 01       	movw	r30, r16
    1148:	86 8d       	ldd	r24, Z+30	; 0x1e
    114a:	88 23       	and	r24, r24
    114c:	c1 f0       	breq	.+48     	; 0x117e <xQueueSemaphoreTake+0x68>
    114e:	81 50       	subi	r24, 0x01	; 1
    1150:	86 8f       	std	Z+30, r24	; 0x1e
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	89 2b       	or	r24, r25
    1158:	29 f4       	brne	.+10     	; 0x1164 <xQueueSemaphoreTake+0x4e>
    115a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <pvTaskIncrementMutexHeldCount>
    115e:	f8 01       	movw	r30, r16
    1160:	95 83       	std	Z+5, r25	; 0x05
    1162:	84 83       	std	Z+4, r24	; 0x04
    1164:	f8 01       	movw	r30, r16
    1166:	80 85       	ldd	r24, Z+8	; 0x08
    1168:	88 23       	and	r24, r24
    116a:	29 f0       	breq	.+10     	; 0x1176 <xQueueSemaphoreTake+0x60>
    116c:	c8 01       	movw	r24, r16
    116e:	08 96       	adiw	r24, 0x08	; 8
    1170:	60 d6       	rcall	.+3264   	; 0x1e32 <xTaskRemoveFromEventList>
    1172:	81 11       	cpse	r24, r1
    1174:	65 dc       	rcall	.-1846   	; 0xa40 <vPortYield>
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	6b c0       	rjmp	.+214    	; 0x1254 <xQueueSemaphoreTake+0x13e>
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	9f 81       	ldd	r25, Y+7	; 0x07
    1182:	a8 85       	ldd	r26, Y+8	; 0x08
    1184:	b9 85       	ldd	r27, Y+9	; 0x09
    1186:	89 2b       	or	r24, r25
    1188:	8a 2b       	or	r24, r26
    118a:	8b 2b       	or	r24, r27
    118c:	21 f4       	brne	.+8      	; 0x1196 <xQueueSemaphoreTake+0x80>
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	5f c0       	rjmp	.+190    	; 0x1254 <xQueueSemaphoreTake+0x13e>
    1196:	f1 10       	cpse	r15, r1
    1198:	05 c0       	rjmp	.+10     	; 0x11a4 <xQueueSemaphoreTake+0x8e>
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	92 d7       	rcall	.+3876   	; 0x20c4 <vTaskInternalSetTimeOutState>
    11a0:	ff 24       	eor	r15, r15
    11a2:	f3 94       	inc	r15
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	06 d3       	rcall	.+1548   	; 0x17b6 <vTaskSuspendAll>
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	0f 92       	push	r0
    11b0:	f8 01       	movw	r30, r16
    11b2:	81 a1       	ldd	r24, Z+33	; 0x21
    11b4:	8f 3f       	cpi	r24, 0xFF	; 255
    11b6:	09 f4       	brne	.+2      	; 0x11ba <xQueueSemaphoreTake+0xa4>
    11b8:	11 a2       	std	Z+33, r1	; 0x21
    11ba:	f8 01       	movw	r30, r16
    11bc:	82 a1       	ldd	r24, Z+34	; 0x22
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <xQueueSemaphoreTake+0xae>
    11c2:	12 a2       	std	Z+34, r1	; 0x22
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	be 01       	movw	r22, r28
    11ca:	6a 5f       	subi	r22, 0xFA	; 250
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	89 d7       	rcall	.+3858   	; 0x20e6 <xTaskCheckForTimeOut>
    11d4:	81 11       	cpse	r24, r1
    11d6:	24 c0       	rjmp	.+72     	; 0x1220 <xQueueSemaphoreTake+0x10a>
    11d8:	c8 01       	movw	r24, r16
    11da:	09 dd       	rcall	.-1518   	; 0xbee <prvIsQueueEmpty>
    11dc:	88 23       	and	r24, r24
    11de:	e1 f0       	breq	.+56     	; 0x1218 <xQueueSemaphoreTake+0x102>
    11e0:	f8 01       	movw	r30, r16
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	89 2b       	or	r24, r25
    11e8:	49 f4       	brne	.+18     	; 0x11fc <xQueueSemaphoreTake+0xe6>
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	0f 92       	push	r0
    11f0:	84 81       	ldd	r24, Z+4	; 0x04
    11f2:	95 81       	ldd	r25, Z+5	; 0x05
    11f4:	f0 d7       	rcall	.+4064   	; 0x21d6 <xTaskPriorityInherit>
    11f6:	e8 2e       	mov	r14, r24
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	4e 81       	ldd	r20, Y+6	; 0x06
    11fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1200:	68 85       	ldd	r22, Y+8	; 0x08
    1202:	79 85       	ldd	r23, Y+9	; 0x09
    1204:	c8 01       	movw	r24, r16
    1206:	43 96       	adiw	r24, 0x13	; 19
    1208:	71 d5       	rcall	.+2786   	; 0x1cec <vTaskPlaceOnEventList>
    120a:	c8 01       	movw	r24, r16
    120c:	84 dd       	rcall	.-1272   	; 0xd16 <prvUnlockQueue>
    120e:	13 d4       	rcall	.+2086   	; 0x1a36 <xTaskResumeAll>
    1210:	81 11       	cpse	r24, r1
    1212:	96 cf       	rjmp	.-212    	; 0x1140 <xQueueSemaphoreTake+0x2a>
    1214:	15 dc       	rcall	.-2006   	; 0xa40 <vPortYield>
    1216:	94 cf       	rjmp	.-216    	; 0x1140 <xQueueSemaphoreTake+0x2a>
    1218:	c8 01       	movw	r24, r16
    121a:	7d dd       	rcall	.-1286   	; 0xd16 <prvUnlockQueue>
    121c:	0c d4       	rcall	.+2072   	; 0x1a36 <xTaskResumeAll>
    121e:	90 cf       	rjmp	.-224    	; 0x1140 <xQueueSemaphoreTake+0x2a>
    1220:	c8 01       	movw	r24, r16
    1222:	79 dd       	rcall	.-1294   	; 0xd16 <prvUnlockQueue>
    1224:	08 d4       	rcall	.+2064   	; 0x1a36 <xTaskResumeAll>
    1226:	c8 01       	movw	r24, r16
    1228:	e2 dc       	rcall	.-1596   	; 0xbee <prvIsQueueEmpty>
    122a:	88 23       	and	r24, r24
    122c:	09 f4       	brne	.+2      	; 0x1230 <xQueueSemaphoreTake+0x11a>
    122e:	88 cf       	rjmp	.-240    	; 0x1140 <xQueueSemaphoreTake+0x2a>
    1230:	ee 20       	and	r14, r14
    1232:	79 f0       	breq	.+30     	; 0x1252 <xQueueSemaphoreTake+0x13c>
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	0f 92       	push	r0
    123a:	c8 01       	movw	r24, r16
    123c:	c8 dc       	rcall	.-1648   	; 0xbce <prvGetDisinheritPriorityAfterTimeout>
    123e:	68 2f       	mov	r22, r24
    1240:	f8 01       	movw	r30, r16
    1242:	84 81       	ldd	r24, Z+4	; 0x04
    1244:	95 81       	ldd	r25, Z+5	; 0x05
    1246:	0e 94 cd 11 	call	0x239a	; 0x239a <vTaskPriorityDisinheritAfterTimeout>
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <xQueueSemaphoreTake+0x13e>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	29 96       	adiw	r28, 0x09	; 9
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	08 95       	ret

0000126e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	0f 92       	push	r0
    127a:	89 a1       	ldd	r24, Y+33	; 0x21
    127c:	8f 3f       	cpi	r24, 0xFF	; 255
    127e:	09 f4       	brne	.+2      	; 0x1282 <vQueueWaitForMessageRestricted+0x14>
    1280:	19 a2       	std	Y+33, r1	; 0x21
    1282:	8a a1       	ldd	r24, Y+34	; 0x22
    1284:	8f 3f       	cpi	r24, 0xFF	; 255
    1286:	09 f4       	brne	.+2      	; 0x128a <vQueueWaitForMessageRestricted+0x1c>
    1288:	1a a2       	std	Y+34, r1	; 0x22
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    128e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1290:	81 11       	cpse	r24, r1
    1292:	03 c0       	rjmp	.+6      	; 0x129a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1294:	ce 01       	movw	r24, r28
    1296:	43 96       	adiw	r24, 0x13	; 19
    1298:	8a d5       	rcall	.+2836   	; 0x1dae <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    129a:	ce 01       	movw	r24, r28
    129c:	3c dd       	rcall	.-1416   	; 0xd16 <prvUnlockQueue>
    }
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <prvResetNextTaskUnblockTime>:
    12a4:	e0 91 bf 0d 	lds	r30, 0x0DBF	; 0x800dbf <pxDelayedTaskList>
    12a8:	f0 91 c0 0d 	lds	r31, 0x0DC0	; 0x800dc0 <pxDelayedTaskList+0x1>
    12ac:	80 81       	ld	r24, Z
    12ae:	81 11       	cpse	r24, r1
    12b0:	0c c0       	rjmp	.+24     	; 0x12ca <prvResetNextTaskUnblockTime+0x26>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	9f ef       	ldi	r25, 0xFF	; 255
    12b6:	dc 01       	movw	r26, r24
    12b8:	80 93 89 0d 	sts	0x0D89, r24	; 0x800d89 <xNextTaskUnblockTime>
    12bc:	90 93 8a 0d 	sts	0x0D8A, r25	; 0x800d8a <xNextTaskUnblockTime+0x1>
    12c0:	a0 93 8b 0d 	sts	0x0D8B, r26	; 0x800d8b <xNextTaskUnblockTime+0x2>
    12c4:	b0 93 8c 0d 	sts	0x0D8C, r27	; 0x800d8c <xNextTaskUnblockTime+0x3>
    12c8:	08 95       	ret
    12ca:	e0 91 bf 0d 	lds	r30, 0x0DBF	; 0x800dbf <pxDelayedTaskList>
    12ce:	f0 91 c0 0d 	lds	r31, 0x0DC0	; 0x800dc0 <pxDelayedTaskList+0x1>
    12d2:	07 80       	ldd	r0, Z+7	; 0x07
    12d4:	f0 85       	ldd	r31, Z+8	; 0x08
    12d6:	e0 2d       	mov	r30, r0
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	a2 81       	ldd	r26, Z+2	; 0x02
    12de:	b3 81       	ldd	r27, Z+3	; 0x03
    12e0:	80 93 89 0d 	sts	0x0D89, r24	; 0x800d89 <xNextTaskUnblockTime>
    12e4:	90 93 8a 0d 	sts	0x0D8A, r25	; 0x800d8a <xNextTaskUnblockTime+0x1>
    12e8:	a0 93 8b 0d 	sts	0x0D8B, r26	; 0x800d8b <xNextTaskUnblockTime+0x2>
    12ec:	b0 93 8c 0d 	sts	0x0D8C, r27	; 0x800d8c <xNextTaskUnblockTime+0x3>
    12f0:	08 95       	ret

000012f2 <prvDeleteTCB>:
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	ec 01       	movw	r28, r24
    12f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12fc:	97 da       	rcall	.-2770   	; 0x82c <vPortFree>
    12fe:	ce 01       	movw	r24, r28
    1300:	95 da       	rcall	.-2774   	; 0x82c <vPortFree>
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <prvInitialiseNewTask>:
    1308:	4f 92       	push	r4
    130a:	5f 92       	push	r5
    130c:	6f 92       	push	r6
    130e:	7f 92       	push	r7
    1310:	8f 92       	push	r8
    1312:	9f 92       	push	r9
    1314:	af 92       	push	r10
    1316:	bf 92       	push	r11
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	0f 93       	push	r16
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	2c 01       	movw	r4, r24
    1328:	5b 01       	movw	r10, r22
    132a:	4a 01       	movw	r8, r20
    132c:	39 01       	movw	r6, r18
    132e:	e6 01       	movw	r28, r12
    1330:	65 ea       	ldi	r22, 0xA5	; 165
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1338:	0e 94 ed 20 	call	0x41da	; 0x41da <memset>
    133c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	82 1a       	sub	r8, r18
    1344:	91 08       	sbc	r9, r1
    1346:	88 0e       	add	r8, r24
    1348:	99 1e       	adc	r9, r25
    134a:	a1 14       	cp	r10, r1
    134c:	b1 04       	cpc	r11, r1
    134e:	89 f4       	brne	.+34     	; 0x1372 <prvInitialiseNewTask+0x6a>
    1350:	15 c0       	rjmp	.+42     	; 0x137c <prvInitialiseNewTask+0x74>
    1352:	82 2f       	mov	r24, r18
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	f5 01       	movw	r30, r10
    1358:	e8 0f       	add	r30, r24
    135a:	f9 1f       	adc	r31, r25
    135c:	30 81       	ld	r19, Z
    135e:	de 01       	movw	r26, r28
    1360:	a8 0f       	add	r26, r24
    1362:	b9 1f       	adc	r27, r25
    1364:	5d 96       	adiw	r26, 0x1d	; 29
    1366:	3c 93       	st	X, r19
    1368:	80 81       	ld	r24, Z
    136a:	88 23       	and	r24, r24
    136c:	29 f0       	breq	.+10     	; 0x1378 <prvInitialiseNewTask+0x70>
    136e:	2f 5f       	subi	r18, 0xFF	; 255
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <prvInitialiseNewTask+0x6c>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	20 31       	cpi	r18, 0x10	; 16
    1376:	68 f3       	brcs	.-38     	; 0x1352 <prvInitialiseNewTask+0x4a>
    1378:	1c a6       	std	Y+44, r1	; 0x2c
    137a:	01 c0       	rjmp	.+2      	; 0x137e <prvInitialiseNewTask+0x76>
    137c:	1d 8e       	std	Y+29, r1	; 0x1d
    137e:	0a 30       	cpi	r16, 0x0A	; 10
    1380:	08 f0       	brcs	.+2      	; 0x1384 <prvInitialiseNewTask+0x7c>
    1382:	09 e0       	ldi	r16, 0x09	; 9
    1384:	0a 8f       	std	Y+26, r16	; 0x1a
    1386:	0d a7       	std	Y+45, r16	; 0x2d
    1388:	1e a6       	std	Y+46, r1	; 0x2e
    138a:	ce 01       	movw	r24, r28
    138c:	02 96       	adiw	r24, 0x02	; 2
    138e:	9b da       	rcall	.-2762   	; 0x8c6 <vListInitialiseItem>
    1390:	ce 01       	movw	r24, r28
    1392:	0e 96       	adiw	r24, 0x0e	; 14
    1394:	98 da       	rcall	.-2768   	; 0x8c6 <vListInitialiseItem>
    1396:	db 87       	std	Y+11, r29	; 0x0b
    1398:	ca 87       	std	Y+10, r28	; 0x0a
    139a:	8a e0       	ldi	r24, 0x0A	; 10
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	80 1b       	sub	r24, r16
    13a4:	91 09       	sbc	r25, r1
    13a6:	a1 09       	sbc	r26, r1
    13a8:	b1 09       	sbc	r27, r1
    13aa:	8e 87       	std	Y+14, r24	; 0x0e
    13ac:	9f 87       	std	Y+15, r25	; 0x0f
    13ae:	a8 8b       	std	Y+16, r26	; 0x10
    13b0:	b9 8b       	std	Y+17, r27	; 0x11
    13b2:	df 8b       	std	Y+23, r29	; 0x17
    13b4:	ce 8b       	std	Y+22, r28	; 0x16
    13b6:	84 e0       	ldi	r24, 0x04	; 4
    13b8:	fe 01       	movw	r30, r28
    13ba:	bf 96       	adiw	r30, 0x2f	; 47
    13bc:	df 01       	movw	r26, r30
    13be:	1d 92       	st	X+, r1
    13c0:	8a 95       	dec	r24
    13c2:	e9 f7       	brne	.-6      	; 0x13be <prvInitialiseNewTask+0xb6>
    13c4:	1b aa       	std	Y+51, r1	; 0x33
    13c6:	a3 01       	movw	r20, r6
    13c8:	b2 01       	movw	r22, r4
    13ca:	c4 01       	movw	r24, r8
    13cc:	f0 da       	rcall	.-2592   	; 0x9ae <pxPortInitialiseStack>
    13ce:	99 83       	std	Y+1, r25	; 0x01
    13d0:	88 83       	st	Y, r24
    13d2:	e1 14       	cp	r14, r1
    13d4:	f1 04       	cpc	r15, r1
    13d6:	19 f0       	breq	.+6      	; 0x13de <prvInitialiseNewTask+0xd6>
    13d8:	f7 01       	movw	r30, r14
    13da:	d1 83       	std	Z+1, r29	; 0x01
    13dc:	c0 83       	st	Z, r28
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	9f 90       	pop	r9
    13f2:	8f 90       	pop	r8
    13f4:	7f 90       	pop	r7
    13f6:	6f 90       	pop	r6
    13f8:	5f 90       	pop	r5
    13fa:	4f 90       	pop	r4
    13fc:	08 95       	ret

000013fe <prvInitialiseTaskLists>:
    13fe:	cf 93       	push	r28
    1400:	c0 e0       	ldi	r28, 0x00	; 0
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <prvInitialiseTaskLists+0x16>
    1404:	2b e0       	ldi	r18, 0x0B	; 11
    1406:	c2 9f       	mul	r28, r18
    1408:	c0 01       	movw	r24, r0
    140a:	11 24       	eor	r1, r1
    140c:	89 52       	subi	r24, 0x29	; 41
    140e:	92 4f       	sbci	r25, 0xF2	; 242
    1410:	49 da       	rcall	.-2926   	; 0x8a4 <vListInitialise>
    1412:	cf 5f       	subi	r28, 0xFF	; 255
    1414:	ca 30       	cpi	r28, 0x0A	; 10
    1416:	b0 f3       	brcs	.-20     	; 0x1404 <prvInitialiseTaskLists+0x6>
    1418:	8c ec       	ldi	r24, 0xCC	; 204
    141a:	9d e0       	ldi	r25, 0x0D	; 13
    141c:	43 da       	rcall	.-2938   	; 0x8a4 <vListInitialise>
    141e:	81 ec       	ldi	r24, 0xC1	; 193
    1420:	9d e0       	ldi	r25, 0x0D	; 13
    1422:	40 da       	rcall	.-2944   	; 0x8a4 <vListInitialise>
    1424:	82 eb       	ldi	r24, 0xB2	; 178
    1426:	9d e0       	ldi	r25, 0x0D	; 13
    1428:	3d da       	rcall	.-2950   	; 0x8a4 <vListInitialise>
    142a:	87 ea       	ldi	r24, 0xA7	; 167
    142c:	9d e0       	ldi	r25, 0x0D	; 13
    142e:	3a da       	rcall	.-2956   	; 0x8a4 <vListInitialise>
    1430:	8b e9       	ldi	r24, 0x9B	; 155
    1432:	9d e0       	ldi	r25, 0x0D	; 13
    1434:	37 da       	rcall	.-2962   	; 0x8a4 <vListInitialise>
    1436:	8c ec       	ldi	r24, 0xCC	; 204
    1438:	9d e0       	ldi	r25, 0x0D	; 13
    143a:	90 93 c0 0d 	sts	0x0DC0, r25	; 0x800dc0 <pxDelayedTaskList+0x1>
    143e:	80 93 bf 0d 	sts	0x0DBF, r24	; 0x800dbf <pxDelayedTaskList>
    1442:	81 ec       	ldi	r24, 0xC1	; 193
    1444:	9d e0       	ldi	r25, 0x0D	; 13
    1446:	90 93 be 0d 	sts	0x0DBE, r25	; 0x800dbe <pxOverflowDelayedTaskList+0x1>
    144a:	80 93 bd 0d 	sts	0x0DBD, r24	; 0x800dbd <pxOverflowDelayedTaskList>
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <prvAddNewTaskToReadyList>:
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ec 01       	movw	r28, r24
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	0f 92       	push	r0
    145e:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <uxCurrentNumberOfTasks>
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	80 93 9a 0d 	sts	0x0D9A, r24	; 0x800d9a <uxCurrentNumberOfTasks>
    1468:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    146c:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1470:	89 2b       	or	r24, r25
    1472:	51 f4       	brne	.+20     	; 0x1488 <prvAddNewTaskToReadyList+0x36>
    1474:	d0 93 46 0e 	sts	0x0E46, r29	; 0x800e46 <pxCurrentTCB+0x1>
    1478:	c0 93 45 0e 	sts	0x0E45, r28	; 0x800e45 <pxCurrentTCB>
    147c:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <uxCurrentNumberOfTasks>
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	91 f4       	brne	.+36     	; 0x14a8 <prvAddNewTaskToReadyList+0x56>
    1484:	bc df       	rcall	.-136    	; 0x13fe <prvInitialiseTaskLists>
    1486:	10 c0       	rjmp	.+32     	; 0x14a8 <prvAddNewTaskToReadyList+0x56>
    1488:	80 91 94 0d 	lds	r24, 0x0D94	; 0x800d94 <xSchedulerRunning>
    148c:	81 11       	cpse	r24, r1
    148e:	0c c0       	rjmp	.+24     	; 0x14a8 <prvAddNewTaskToReadyList+0x56>
    1490:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1494:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1498:	92 8d       	ldd	r25, Z+26	; 0x1a
    149a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    149c:	89 17       	cp	r24, r25
    149e:	20 f0       	brcs	.+8      	; 0x14a8 <prvAddNewTaskToReadyList+0x56>
    14a0:	d0 93 46 0e 	sts	0x0E46, r29	; 0x800e46 <pxCurrentTCB+0x1>
    14a4:	c0 93 45 0e 	sts	0x0E45, r28	; 0x800e45 <pxCurrentTCB>
    14a8:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <uxTaskNumber>
    14ac:	8f 5f       	subi	r24, 0xFF	; 255
    14ae:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <uxTaskNumber>
    14b2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14b4:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    14b8:	8e 17       	cp	r24, r30
    14ba:	10 f4       	brcc	.+4      	; 0x14c0 <prvAddNewTaskToReadyList+0x6e>
    14bc:	e0 93 95 0d 	sts	0x0D95, r30	; 0x800d95 <uxTopReadyPriority>
    14c0:	8b e0       	ldi	r24, 0x0B	; 11
    14c2:	8e 9f       	mul	r24, r30
    14c4:	f0 01       	movw	r30, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	e9 52       	subi	r30, 0x29	; 41
    14ca:	f2 4f       	sbci	r31, 0xF2	; 242
    14cc:	01 80       	ldd	r0, Z+1	; 0x01
    14ce:	f2 81       	ldd	r31, Z+2	; 0x02
    14d0:	e0 2d       	mov	r30, r0
    14d2:	ff 83       	std	Y+7, r31	; 0x07
    14d4:	ee 83       	std	Y+6, r30	; 0x06
    14d6:	26 81       	ldd	r18, Z+6	; 0x06
    14d8:	37 81       	ldd	r19, Z+7	; 0x07
    14da:	39 87       	std	Y+9, r19	; 0x09
    14dc:	28 87       	std	Y+8, r18	; 0x08
    14de:	a6 81       	ldd	r26, Z+6	; 0x06
    14e0:	b7 81       	ldd	r27, Z+7	; 0x07
    14e2:	9e 01       	movw	r18, r28
    14e4:	2e 5f       	subi	r18, 0xFE	; 254
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	15 96       	adiw	r26, 0x05	; 5
    14ea:	3c 93       	st	X, r19
    14ec:	2e 93       	st	-X, r18
    14ee:	14 97       	sbiw	r26, 0x04	; 4
    14f0:	37 83       	std	Z+7, r19	; 0x07
    14f2:	26 83       	std	Z+6, r18	; 0x06
    14f4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14f6:	8e 9f       	mul	r24, r30
    14f8:	f0 01       	movw	r30, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	e9 52       	subi	r30, 0x29	; 41
    14fe:	f2 4f       	sbci	r31, 0xF2	; 242
    1500:	fd 87       	std	Y+13, r31	; 0x0d
    1502:	ec 87       	std	Y+12, r30	; 0x0c
    1504:	80 81       	ld	r24, Z
    1506:	8f 5f       	subi	r24, 0xFF	; 255
    1508:	80 83       	st	Z, r24
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	80 91 94 0d 	lds	r24, 0x0D94	; 0x800d94 <xSchedulerRunning>
    1512:	88 23       	and	r24, r24
    1514:	49 f0       	breq	.+18     	; 0x1528 <prvAddNewTaskToReadyList+0xd6>
    1516:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    151a:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    151e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1520:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1522:	98 17       	cp	r25, r24
    1524:	08 f4       	brcc	.+2      	; 0x1528 <prvAddNewTaskToReadyList+0xd6>
    1526:	8c da       	rcall	.-2792   	; 0xa40 <vPortYield>
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <prvCheckTasksWaitingTermination>:
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	1a c0       	rjmp	.+52     	; 0x1568 <prvCheckTasksWaitingTermination+0x3a>
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	0f 92       	push	r0
    153a:	e0 91 ae 0d 	lds	r30, 0x0DAE	; 0x800dae <xTasksWaitingTermination+0x7>
    153e:	f0 91 af 0d 	lds	r31, 0x0DAF	; 0x800daf <xTasksWaitingTermination+0x8>
    1542:	c0 85       	ldd	r28, Z+8	; 0x08
    1544:	d1 85       	ldd	r29, Z+9	; 0x09
    1546:	ce 01       	movw	r24, r28
    1548:	02 96       	adiw	r24, 0x02	; 2
    154a:	fe d9       	rcall	.-3076   	; 0x948 <uxListRemove>
    154c:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <uxCurrentNumberOfTasks>
    1550:	81 50       	subi	r24, 0x01	; 1
    1552:	80 93 9a 0d 	sts	0x0D9A, r24	; 0x800d9a <uxCurrentNumberOfTasks>
    1556:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <uxDeletedTasksWaitingCleanUp>
    155a:	81 50       	subi	r24, 0x01	; 1
    155c:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <uxDeletedTasksWaitingCleanUp>
    1560:	0f 90       	pop	r0
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	ce 01       	movw	r24, r28
    1566:	c5 de       	rcall	.-630    	; 0x12f2 <prvDeleteTCB>
    1568:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <uxDeletedTasksWaitingCleanUp>
    156c:	81 11       	cpse	r24, r1
    156e:	e2 cf       	rjmp	.-60     	; 0x1534 <prvCheckTasksWaitingTermination+0x6>
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <prvAddCurrentTaskToDelayedList>:
    1576:	8f 92       	push	r8
    1578:	9f 92       	push	r9
    157a:	af 92       	push	r10
    157c:	bf 92       	push	r11
    157e:	cf 92       	push	r12
    1580:	df 92       	push	r13
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	6b 01       	movw	r12, r22
    158c:	7c 01       	movw	r14, r24
    158e:	c4 2f       	mov	r28, r20
    1590:	80 90 96 0d 	lds	r8, 0x0D96	; 0x800d96 <xTickCount>
    1594:	90 90 97 0d 	lds	r9, 0x0D97	; 0x800d97 <xTickCount+0x1>
    1598:	a0 90 98 0d 	lds	r10, 0x0D98	; 0x800d98 <xTickCount+0x2>
    159c:	b0 90 99 0d 	lds	r11, 0x0D99	; 0x800d99 <xTickCount+0x3>
    15a0:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    15a4:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    15a8:	02 96       	adiw	r24, 0x02	; 2
    15aa:	ce d9       	rcall	.-3172   	; 0x948 <uxListRemove>
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	c8 16       	cp	r12, r24
    15b0:	d8 06       	cpc	r13, r24
    15b2:	e8 06       	cpc	r14, r24
    15b4:	f8 06       	cpc	r15, r24
    15b6:	b1 f5       	brne	.+108    	; 0x1624 <prvAddCurrentTaskToDelayedList+0xae>
    15b8:	cc 23       	and	r28, r28
    15ba:	a1 f1       	breq	.+104    	; 0x1624 <prvAddCurrentTaskToDelayedList+0xae>
    15bc:	eb e9       	ldi	r30, 0x9B	; 155
    15be:	fd e0       	ldi	r31, 0x0D	; 13
    15c0:	a1 81       	ldd	r26, Z+1	; 0x01
    15c2:	b2 81       	ldd	r27, Z+2	; 0x02
    15c4:	c0 91 45 0e 	lds	r28, 0x0E45	; 0x800e45 <pxCurrentTCB>
    15c8:	d0 91 46 0e 	lds	r29, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    15cc:	bf 83       	std	Y+7, r27	; 0x07
    15ce:	ae 83       	std	Y+6, r26	; 0x06
    15d0:	c0 91 45 0e 	lds	r28, 0x0E45	; 0x800e45 <pxCurrentTCB>
    15d4:	d0 91 46 0e 	lds	r29, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    15d8:	16 96       	adiw	r26, 0x06	; 6
    15da:	8d 91       	ld	r24, X+
    15dc:	9c 91       	ld	r25, X
    15de:	17 97       	sbiw	r26, 0x07	; 7
    15e0:	99 87       	std	Y+9, r25	; 0x09
    15e2:	88 87       	std	Y+8, r24	; 0x08
    15e4:	16 96       	adiw	r26, 0x06	; 6
    15e6:	cd 91       	ld	r28, X+
    15e8:	dc 91       	ld	r29, X
    15ea:	17 97       	sbiw	r26, 0x07	; 7
    15ec:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    15f0:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    15f4:	02 96       	adiw	r24, 0x02	; 2
    15f6:	9d 83       	std	Y+5, r25	; 0x05
    15f8:	8c 83       	std	Y+4, r24	; 0x04
    15fa:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    15fe:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1602:	02 96       	adiw	r24, 0x02	; 2
    1604:	17 96       	adiw	r26, 0x07	; 7
    1606:	9c 93       	st	X, r25
    1608:	8e 93       	st	-X, r24
    160a:	16 97       	sbiw	r26, 0x06	; 6
    160c:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1610:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1614:	1d 96       	adiw	r26, 0x0d	; 13
    1616:	fc 93       	st	X, r31
    1618:	ee 93       	st	-X, r30
    161a:	1c 97       	sbiw	r26, 0x0c	; 12
    161c:	80 81       	ld	r24, Z
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	80 83       	st	Z, r24
    1622:	3d c0       	rjmp	.+122    	; 0x169e <prvAddCurrentTaskToDelayedList+0x128>
    1624:	c8 0c       	add	r12, r8
    1626:	d9 1c       	adc	r13, r9
    1628:	ea 1c       	adc	r14, r10
    162a:	fb 1c       	adc	r15, r11
    162c:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1630:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1634:	c2 82       	std	Z+2, r12	; 0x02
    1636:	d3 82       	std	Z+3, r13	; 0x03
    1638:	e4 82       	std	Z+4, r14	; 0x04
    163a:	f5 82       	std	Z+5, r15	; 0x05
    163c:	c8 14       	cp	r12, r8
    163e:	d9 04       	cpc	r13, r9
    1640:	ea 04       	cpc	r14, r10
    1642:	fb 04       	cpc	r15, r11
    1644:	60 f4       	brcc	.+24     	; 0x165e <prvAddCurrentTaskToDelayedList+0xe8>
    1646:	60 91 45 0e 	lds	r22, 0x0E45	; 0x800e45 <pxCurrentTCB>
    164a:	70 91 46 0e 	lds	r23, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    164e:	80 91 bd 0d 	lds	r24, 0x0DBD	; 0x800dbd <pxOverflowDelayedTaskList>
    1652:	90 91 be 0d 	lds	r25, 0x0DBE	; 0x800dbe <pxOverflowDelayedTaskList+0x1>
    1656:	6e 5f       	subi	r22, 0xFE	; 254
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	39 d9       	rcall	.-3470   	; 0x8ce <vListInsert>
    165c:	20 c0       	rjmp	.+64     	; 0x169e <prvAddCurrentTaskToDelayedList+0x128>
    165e:	60 91 45 0e 	lds	r22, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1662:	70 91 46 0e 	lds	r23, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1666:	80 91 bf 0d 	lds	r24, 0x0DBF	; 0x800dbf <pxDelayedTaskList>
    166a:	90 91 c0 0d 	lds	r25, 0x0DC0	; 0x800dc0 <pxDelayedTaskList+0x1>
    166e:	6e 5f       	subi	r22, 0xFE	; 254
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	2d d9       	rcall	.-3494   	; 0x8ce <vListInsert>
    1674:	80 91 89 0d 	lds	r24, 0x0D89	; 0x800d89 <xNextTaskUnblockTime>
    1678:	90 91 8a 0d 	lds	r25, 0x0D8A	; 0x800d8a <xNextTaskUnblockTime+0x1>
    167c:	a0 91 8b 0d 	lds	r26, 0x0D8B	; 0x800d8b <xNextTaskUnblockTime+0x2>
    1680:	b0 91 8c 0d 	lds	r27, 0x0D8C	; 0x800d8c <xNextTaskUnblockTime+0x3>
    1684:	c8 16       	cp	r12, r24
    1686:	d9 06       	cpc	r13, r25
    1688:	ea 06       	cpc	r14, r26
    168a:	fb 06       	cpc	r15, r27
    168c:	40 f4       	brcc	.+16     	; 0x169e <prvAddCurrentTaskToDelayedList+0x128>
    168e:	c0 92 89 0d 	sts	0x0D89, r12	; 0x800d89 <xNextTaskUnblockTime>
    1692:	d0 92 8a 0d 	sts	0x0D8A, r13	; 0x800d8a <xNextTaskUnblockTime+0x1>
    1696:	e0 92 8b 0d 	sts	0x0D8B, r14	; 0x800d8b <xNextTaskUnblockTime+0x2>
    169a:	f0 92 8c 0d 	sts	0x0D8C, r15	; 0x800d8c <xNextTaskUnblockTime+0x3>
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	af 90       	pop	r10
    16ae:	9f 90       	pop	r9
    16b0:	8f 90       	pop	r8
    16b2:	08 95       	ret

000016b4 <xTaskCreate>:
    16b4:	2f 92       	push	r2
    16b6:	3f 92       	push	r3
    16b8:	4f 92       	push	r4
    16ba:	5f 92       	push	r5
    16bc:	6f 92       	push	r6
    16be:	7f 92       	push	r7
    16c0:	8f 92       	push	r8
    16c2:	9f 92       	push	r9
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	3c 01       	movw	r6, r24
    16d8:	1b 01       	movw	r2, r22
    16da:	4a 01       	movw	r8, r20
    16dc:	29 01       	movw	r4, r18
    16de:	ca 01       	movw	r24, r20
    16e0:	0e 94 6d 03 	call	0x6da	; 0x6da <pvPortMalloc>
    16e4:	6c 01       	movw	r12, r24
    16e6:	89 2b       	or	r24, r25
    16e8:	69 f0       	breq	.+26     	; 0x1704 <xTaskCreate+0x50>
    16ea:	84 e3       	ldi	r24, 0x34	; 52
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 6d 03 	call	0x6da	; 0x6da <pvPortMalloc>
    16f2:	ec 01       	movw	r28, r24
    16f4:	89 2b       	or	r24, r25
    16f6:	19 f0       	breq	.+6      	; 0x16fe <xTaskCreate+0x4a>
    16f8:	dc 8e       	std	Y+28, r13	; 0x1c
    16fa:	cb 8e       	std	Y+27, r12	; 0x1b
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <xTaskCreate+0x54>
    16fe:	c6 01       	movw	r24, r12
    1700:	95 d8       	rcall	.-3798   	; 0x82c <vPortFree>
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <xTaskCreate+0x54>
    1704:	c0 e0       	ldi	r28, 0x00	; 0
    1706:	d0 e0       	ldi	r29, 0x00	; 0
    1708:	20 97       	sbiw	r28, 0x00	; 0
    170a:	61 f0       	breq	.+24     	; 0x1724 <xTaskCreate+0x70>
    170c:	a1 2c       	mov	r10, r1
    170e:	b1 2c       	mov	r11, r1
    1710:	6e 01       	movw	r12, r28
    1712:	92 01       	movw	r18, r4
    1714:	a4 01       	movw	r20, r8
    1716:	b1 01       	movw	r22, r2
    1718:	c3 01       	movw	r24, r6
    171a:	f6 dd       	rcall	.-1044   	; 0x1308 <prvInitialiseNewTask>
    171c:	ce 01       	movw	r24, r28
    171e:	99 de       	rcall	.-718    	; 0x1452 <prvAddNewTaskToReadyList>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <xTaskCreate+0x72>
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	9f 90       	pop	r9
    173a:	8f 90       	pop	r8
    173c:	7f 90       	pop	r7
    173e:	6f 90       	pop	r6
    1740:	5f 90       	pop	r5
    1742:	4f 90       	pop	r4
    1744:	3f 90       	pop	r3
    1746:	2f 90       	pop	r2
    1748:	08 95       	ret

0000174a <vTaskStartScheduler>:
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	0f 2e       	mov	r0, r31
    1752:	f7 e8       	ldi	r31, 0x87	; 135
    1754:	ef 2e       	mov	r14, r31
    1756:	fd e0       	ldi	r31, 0x0D	; 13
    1758:	ff 2e       	mov	r15, r31
    175a:	f0 2d       	mov	r31, r0
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 ec       	ldi	r20, 0xC0	; 192
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	62 e9       	ldi	r22, 0x92	; 146
    1768:	72 e0       	ldi	r23, 0x02	; 2
    176a:	8d ec       	ldi	r24, 0xCD	; 205
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a2 df       	rcall	.-188    	; 0x16b4 <xTaskCreate>
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	09 f4       	brne	.+2      	; 0x1776 <vTaskStartScheduler+0x2c>
    1774:	3f d7       	rcall	.+3710   	; 0x25f4 <xTimerCreateTimerTask>
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	c1 f4       	brne	.+48     	; 0x17aa <vTaskStartScheduler+0x60>
    177a:	f8 94       	cli
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	dc 01       	movw	r26, r24
    1782:	80 93 89 0d 	sts	0x0D89, r24	; 0x800d89 <xNextTaskUnblockTime>
    1786:	90 93 8a 0d 	sts	0x0D8A, r25	; 0x800d8a <xNextTaskUnblockTime+0x1>
    178a:	a0 93 8b 0d 	sts	0x0D8B, r26	; 0x800d8b <xNextTaskUnblockTime+0x2>
    178e:	b0 93 8c 0d 	sts	0x0D8C, r27	; 0x800d8c <xNextTaskUnblockTime+0x3>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	80 93 94 0d 	sts	0x0D94, r24	; 0x800d94 <xSchedulerRunning>
    1798:	10 92 96 0d 	sts	0x0D96, r1	; 0x800d96 <xTickCount>
    179c:	10 92 97 0d 	sts	0x0D97, r1	; 0x800d97 <xTickCount+0x1>
    17a0:	10 92 98 0d 	sts	0x0D98, r1	; 0x800d98 <xTickCount+0x2>
    17a4:	10 92 99 0d 	sts	0x0D99, r1	; 0x800d99 <xTickCount+0x3>
    17a8:	19 d9       	rcall	.-3534   	; 0x9dc <xPortStartScheduler>
    17aa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	08 95       	ret

000017b6 <vTaskSuspendAll>:
    17b6:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <uxSchedulerSuspended>
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	80 93 86 0d 	sts	0x0D86, r24	; 0x800d86 <uxSchedulerSuspended>
    17c0:	08 95       	ret

000017c2 <xTaskGetTickCount>:
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	0f 92       	push	r0
    17c8:	60 91 96 0d 	lds	r22, 0x0D96	; 0x800d96 <xTickCount>
    17cc:	70 91 97 0d 	lds	r23, 0x0D97	; 0x800d97 <xTickCount+0x1>
    17d0:	80 91 98 0d 	lds	r24, 0x0D98	; 0x800d98 <xTickCount+0x2>
    17d4:	90 91 99 0d 	lds	r25, 0x0D99	; 0x800d99 <xTickCount+0x3>
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	08 95       	ret

000017de <xTaskIncrementTick>:
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <uxSchedulerSuspended>
    17ee:	81 11       	cpse	r24, r1
    17f0:	05 c1       	rjmp	.+522    	; 0x19fc <xTaskIncrementTick+0x21e>
    17f2:	c0 90 96 0d 	lds	r12, 0x0D96	; 0x800d96 <xTickCount>
    17f6:	d0 90 97 0d 	lds	r13, 0x0D97	; 0x800d97 <xTickCount+0x1>
    17fa:	e0 90 98 0d 	lds	r14, 0x0D98	; 0x800d98 <xTickCount+0x2>
    17fe:	f0 90 99 0d 	lds	r15, 0x0D99	; 0x800d99 <xTickCount+0x3>
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	c8 1a       	sub	r12, r24
    1806:	d8 0a       	sbc	r13, r24
    1808:	e8 0a       	sbc	r14, r24
    180a:	f8 0a       	sbc	r15, r24
    180c:	c0 92 96 0d 	sts	0x0D96, r12	; 0x800d96 <xTickCount>
    1810:	d0 92 97 0d 	sts	0x0D97, r13	; 0x800d97 <xTickCount+0x1>
    1814:	e0 92 98 0d 	sts	0x0D98, r14	; 0x800d98 <xTickCount+0x2>
    1818:	f0 92 99 0d 	sts	0x0D99, r15	; 0x800d99 <xTickCount+0x3>
    181c:	c1 14       	cp	r12, r1
    181e:	d1 04       	cpc	r13, r1
    1820:	e1 04       	cpc	r14, r1
    1822:	f1 04       	cpc	r15, r1
    1824:	b1 f4       	brne	.+44     	; 0x1852 <xTaskIncrementTick+0x74>
    1826:	80 91 bf 0d 	lds	r24, 0x0DBF	; 0x800dbf <pxDelayedTaskList>
    182a:	90 91 c0 0d 	lds	r25, 0x0DC0	; 0x800dc0 <pxDelayedTaskList+0x1>
    182e:	20 91 bd 0d 	lds	r18, 0x0DBD	; 0x800dbd <pxOverflowDelayedTaskList>
    1832:	30 91 be 0d 	lds	r19, 0x0DBE	; 0x800dbe <pxOverflowDelayedTaskList+0x1>
    1836:	30 93 c0 0d 	sts	0x0DC0, r19	; 0x800dc0 <pxDelayedTaskList+0x1>
    183a:	20 93 bf 0d 	sts	0x0DBF, r18	; 0x800dbf <pxDelayedTaskList>
    183e:	90 93 be 0d 	sts	0x0DBE, r25	; 0x800dbe <pxOverflowDelayedTaskList+0x1>
    1842:	80 93 bd 0d 	sts	0x0DBD, r24	; 0x800dbd <pxOverflowDelayedTaskList>
    1846:	80 91 8e 0d 	lds	r24, 0x0D8E	; 0x800d8e <xNumOfOverflows>
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	80 93 8e 0d 	sts	0x0D8E, r24	; 0x800d8e <xNumOfOverflows>
    1850:	29 dd       	rcall	.-1454   	; 0x12a4 <prvResetNextTaskUnblockTime>
    1852:	80 91 89 0d 	lds	r24, 0x0D89	; 0x800d89 <xNextTaskUnblockTime>
    1856:	90 91 8a 0d 	lds	r25, 0x0D8A	; 0x800d8a <xNextTaskUnblockTime+0x1>
    185a:	a0 91 8b 0d 	lds	r26, 0x0D8B	; 0x800d8b <xNextTaskUnblockTime+0x2>
    185e:	b0 91 8c 0d 	lds	r27, 0x0D8C	; 0x800d8c <xNextTaskUnblockTime+0x3>
    1862:	c8 16       	cp	r12, r24
    1864:	d9 06       	cpc	r13, r25
    1866:	ea 06       	cpc	r14, r26
    1868:	fb 06       	cpc	r15, r27
    186a:	20 f4       	brcc	.+8      	; 0x1874 <xTaskIncrementTick+0x96>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	b2 c0       	rjmp	.+356    	; 0x19d4 <xTaskIncrementTick+0x1f6>
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <xTaskIncrementTick+0x98>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	e0 91 bf 0d 	lds	r30, 0x0DBF	; 0x800dbf <pxDelayedTaskList>
    187a:	f0 91 c0 0d 	lds	r31, 0x0DC0	; 0x800dc0 <pxDelayedTaskList+0x1>
    187e:	90 81       	ld	r25, Z
    1880:	91 11       	cpse	r25, r1
    1882:	0c c0       	rjmp	.+24     	; 0x189c <xTaskIncrementTick+0xbe>
    1884:	4f ef       	ldi	r20, 0xFF	; 255
    1886:	5f ef       	ldi	r21, 0xFF	; 255
    1888:	ba 01       	movw	r22, r20
    188a:	40 93 89 0d 	sts	0x0D89, r20	; 0x800d89 <xNextTaskUnblockTime>
    188e:	50 93 8a 0d 	sts	0x0D8A, r21	; 0x800d8a <xNextTaskUnblockTime+0x1>
    1892:	60 93 8b 0d 	sts	0x0D8B, r22	; 0x800d8b <xNextTaskUnblockTime+0x2>
    1896:	70 93 8c 0d 	sts	0x0D8C, r23	; 0x800d8c <xNextTaskUnblockTime+0x3>
    189a:	9c c0       	rjmp	.+312    	; 0x19d4 <xTaskIncrementTick+0x1f6>
    189c:	e0 91 bf 0d 	lds	r30, 0x0DBF	; 0x800dbf <pxDelayedTaskList>
    18a0:	f0 91 c0 0d 	lds	r31, 0x0DC0	; 0x800dc0 <pxDelayedTaskList+0x1>
    18a4:	07 80       	ldd	r0, Z+7	; 0x07
    18a6:	f0 85       	ldd	r31, Z+8	; 0x08
    18a8:	e0 2d       	mov	r30, r0
    18aa:	00 84       	ldd	r0, Z+8	; 0x08
    18ac:	f1 85       	ldd	r31, Z+9	; 0x09
    18ae:	e0 2d       	mov	r30, r0
    18b0:	42 81       	ldd	r20, Z+2	; 0x02
    18b2:	53 81       	ldd	r21, Z+3	; 0x03
    18b4:	64 81       	ldd	r22, Z+4	; 0x04
    18b6:	75 81       	ldd	r23, Z+5	; 0x05
    18b8:	c4 16       	cp	r12, r20
    18ba:	d5 06       	cpc	r13, r21
    18bc:	e6 06       	cpc	r14, r22
    18be:	f7 06       	cpc	r15, r23
    18c0:	48 f4       	brcc	.+18     	; 0x18d4 <xTaskIncrementTick+0xf6>
    18c2:	40 93 89 0d 	sts	0x0D89, r20	; 0x800d89 <xNextTaskUnblockTime>
    18c6:	50 93 8a 0d 	sts	0x0D8A, r21	; 0x800d8a <xNextTaskUnblockTime+0x1>
    18ca:	60 93 8b 0d 	sts	0x0D8B, r22	; 0x800d8b <xNextTaskUnblockTime+0x2>
    18ce:	70 93 8c 0d 	sts	0x0D8C, r23	; 0x800d8c <xNextTaskUnblockTime+0x3>
    18d2:	80 c0       	rjmp	.+256    	; 0x19d4 <xTaskIncrementTick+0x1f6>
    18d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    18d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    18d8:	c6 81       	ldd	r28, Z+6	; 0x06
    18da:	d7 81       	ldd	r29, Z+7	; 0x07
    18dc:	20 85       	ldd	r18, Z+8	; 0x08
    18de:	31 85       	ldd	r19, Z+9	; 0x09
    18e0:	3f 83       	std	Y+7, r19	; 0x07
    18e2:	2e 83       	std	Y+6, r18	; 0x06
    18e4:	c0 85       	ldd	r28, Z+8	; 0x08
    18e6:	d1 85       	ldd	r29, Z+9	; 0x09
    18e8:	26 81       	ldd	r18, Z+6	; 0x06
    18ea:	37 81       	ldd	r19, Z+7	; 0x07
    18ec:	3d 83       	std	Y+5, r19	; 0x05
    18ee:	2c 83       	std	Y+4, r18	; 0x04
    18f0:	11 96       	adiw	r26, 0x01	; 1
    18f2:	4d 91       	ld	r20, X+
    18f4:	5c 91       	ld	r21, X
    18f6:	12 97       	sbiw	r26, 0x02	; 2
    18f8:	9f 01       	movw	r18, r30
    18fa:	2e 5f       	subi	r18, 0xFE	; 254
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	42 17       	cp	r20, r18
    1900:	53 07       	cpc	r21, r19
    1902:	31 f4       	brne	.+12     	; 0x1910 <xTaskIncrementTick+0x132>
    1904:	40 85       	ldd	r20, Z+8	; 0x08
    1906:	51 85       	ldd	r21, Z+9	; 0x09
    1908:	12 96       	adiw	r26, 0x02	; 2
    190a:	5c 93       	st	X, r21
    190c:	4e 93       	st	-X, r20
    190e:	11 97       	sbiw	r26, 0x01	; 1
    1910:	15 86       	std	Z+13, r1	; 0x0d
    1912:	14 86       	std	Z+12, r1	; 0x0c
    1914:	9c 91       	ld	r25, X
    1916:	91 50       	subi	r25, 0x01	; 1
    1918:	9c 93       	st	X, r25
    191a:	a0 8d       	ldd	r26, Z+24	; 0x18
    191c:	b1 8d       	ldd	r27, Z+25	; 0x19
    191e:	10 97       	sbiw	r26, 0x00	; 0
    1920:	09 f1       	breq	.+66     	; 0x1964 <xTaskIncrementTick+0x186>
    1922:	c2 89       	ldd	r28, Z+18	; 0x12
    1924:	d3 89       	ldd	r29, Z+19	; 0x13
    1926:	44 89       	ldd	r20, Z+20	; 0x14
    1928:	55 89       	ldd	r21, Z+21	; 0x15
    192a:	5f 83       	std	Y+7, r21	; 0x07
    192c:	4e 83       	std	Y+6, r20	; 0x06
    192e:	c4 89       	ldd	r28, Z+20	; 0x14
    1930:	d5 89       	ldd	r29, Z+21	; 0x15
    1932:	42 89       	ldd	r20, Z+18	; 0x12
    1934:	53 89       	ldd	r21, Z+19	; 0x13
    1936:	5d 83       	std	Y+5, r21	; 0x05
    1938:	4c 83       	std	Y+4, r20	; 0x04
    193a:	11 96       	adiw	r26, 0x01	; 1
    193c:	6d 91       	ld	r22, X+
    193e:	7c 91       	ld	r23, X
    1940:	12 97       	sbiw	r26, 0x02	; 2
    1942:	af 01       	movw	r20, r30
    1944:	42 5f       	subi	r20, 0xF2	; 242
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
    1948:	64 17       	cp	r22, r20
    194a:	75 07       	cpc	r23, r21
    194c:	31 f4       	brne	.+12     	; 0x195a <xTaskIncrementTick+0x17c>
    194e:	44 89       	ldd	r20, Z+20	; 0x14
    1950:	55 89       	ldd	r21, Z+21	; 0x15
    1952:	12 96       	adiw	r26, 0x02	; 2
    1954:	5c 93       	st	X, r21
    1956:	4e 93       	st	-X, r20
    1958:	11 97       	sbiw	r26, 0x01	; 1
    195a:	11 8e       	std	Z+25, r1	; 0x19
    195c:	10 8e       	std	Z+24, r1	; 0x18
    195e:	9c 91       	ld	r25, X
    1960:	91 50       	subi	r25, 0x01	; 1
    1962:	9c 93       	st	X, r25
    1964:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1966:	90 91 95 0d 	lds	r25, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    196a:	9a 17       	cp	r25, r26
    196c:	10 f4       	brcc	.+4      	; 0x1972 <xTaskIncrementTick+0x194>
    196e:	a0 93 95 0d 	sts	0x0D95, r26	; 0x800d95 <uxTopReadyPriority>
    1972:	9b e0       	ldi	r25, 0x0B	; 11
    1974:	9a 9f       	mul	r25, r26
    1976:	d0 01       	movw	r26, r0
    1978:	11 24       	eor	r1, r1
    197a:	a9 52       	subi	r26, 0x29	; 41
    197c:	b2 4f       	sbci	r27, 0xF2	; 242
    197e:	11 96       	adiw	r26, 0x01	; 1
    1980:	0d 90       	ld	r0, X+
    1982:	bc 91       	ld	r27, X
    1984:	a0 2d       	mov	r26, r0
    1986:	b7 83       	std	Z+7, r27	; 0x07
    1988:	a6 83       	std	Z+6, r26	; 0x06
    198a:	16 96       	adiw	r26, 0x06	; 6
    198c:	4d 91       	ld	r20, X+
    198e:	5c 91       	ld	r21, X
    1990:	17 97       	sbiw	r26, 0x07	; 7
    1992:	51 87       	std	Z+9, r21	; 0x09
    1994:	40 87       	std	Z+8, r20	; 0x08
    1996:	16 96       	adiw	r26, 0x06	; 6
    1998:	cd 91       	ld	r28, X+
    199a:	dc 91       	ld	r29, X
    199c:	17 97       	sbiw	r26, 0x07	; 7
    199e:	3d 83       	std	Y+5, r19	; 0x05
    19a0:	2c 83       	std	Y+4, r18	; 0x04
    19a2:	17 96       	adiw	r26, 0x07	; 7
    19a4:	3c 93       	st	X, r19
    19a6:	2e 93       	st	-X, r18
    19a8:	16 97       	sbiw	r26, 0x06	; 6
    19aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    19ac:	9a 9f       	mul	r25, r26
    19ae:	d0 01       	movw	r26, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	a9 52       	subi	r26, 0x29	; 41
    19b4:	b2 4f       	sbci	r27, 0xF2	; 242
    19b6:	b5 87       	std	Z+13, r27	; 0x0d
    19b8:	a4 87       	std	Z+12, r26	; 0x0c
    19ba:	9c 91       	ld	r25, X
    19bc:	9f 5f       	subi	r25, 0xFF	; 255
    19be:	9c 93       	st	X, r25
    19c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    19c2:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    19c6:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    19ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    19cc:	29 17       	cp	r18, r25
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <xTaskIncrementTick+0x1f4>
    19d0:	4f cf       	rjmp	.-354    	; 0x1870 <xTaskIncrementTick+0x92>
    19d2:	51 cf       	rjmp	.-350    	; 0x1876 <xTaskIncrementTick+0x98>
    19d4:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    19d8:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    19dc:	e2 8d       	ldd	r30, Z+26	; 0x1a
    19de:	9b e0       	ldi	r25, 0x0B	; 11
    19e0:	e9 9f       	mul	r30, r25
    19e2:	f0 01       	movw	r30, r0
    19e4:	11 24       	eor	r1, r1
    19e6:	e9 52       	subi	r30, 0x29	; 41
    19e8:	f2 4f       	sbci	r31, 0xF2	; 242
    19ea:	90 81       	ld	r25, Z
    19ec:	92 30       	cpi	r25, 0x02	; 2
    19ee:	08 f0       	brcs	.+2      	; 0x19f2 <xTaskIncrementTick+0x214>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 91 8f 0d 	lds	r25, 0x0D8F	; 0x800d8f <xYieldPending>
    19f6:	91 11       	cpse	r25, r1
    19f8:	16 c0       	rjmp	.+44     	; 0x1a26 <xTaskIncrementTick+0x248>
    19fa:	16 c0       	rjmp	.+44     	; 0x1a28 <xTaskIncrementTick+0x24a>
    19fc:	80 91 90 0d 	lds	r24, 0x0D90	; 0x800d90 <xPendedTicks>
    1a00:	90 91 91 0d 	lds	r25, 0x0D91	; 0x800d91 <xPendedTicks+0x1>
    1a04:	a0 91 92 0d 	lds	r26, 0x0D92	; 0x800d92 <xPendedTicks+0x2>
    1a08:	b0 91 93 0d 	lds	r27, 0x0D93	; 0x800d93 <xPendedTicks+0x3>
    1a0c:	01 96       	adiw	r24, 0x01	; 1
    1a0e:	a1 1d       	adc	r26, r1
    1a10:	b1 1d       	adc	r27, r1
    1a12:	80 93 90 0d 	sts	0x0D90, r24	; 0x800d90 <xPendedTicks>
    1a16:	90 93 91 0d 	sts	0x0D91, r25	; 0x800d91 <xPendedTicks+0x1>
    1a1a:	a0 93 92 0d 	sts	0x0D92, r26	; 0x800d92 <xPendedTicks+0x2>
    1a1e:	b0 93 93 0d 	sts	0x0D93, r27	; 0x800d93 <xPendedTicks+0x3>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <xTaskIncrementTick+0x24a>
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	08 95       	ret

00001a36 <xTaskResumeAll>:
    1a36:	cf 92       	push	r12
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	0f 92       	push	r0
    1a48:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <uxSchedulerSuspended>
    1a4c:	81 50       	subi	r24, 0x01	; 1
    1a4e:	80 93 86 0d 	sts	0x0D86, r24	; 0x800d86 <uxSchedulerSuspended>
    1a52:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <uxSchedulerSuspended>
    1a56:	81 11       	cpse	r24, r1
    1a58:	be c0       	rjmp	.+380    	; 0x1bd6 <xTaskResumeAll+0x1a0>
    1a5a:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <uxCurrentNumberOfTasks>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	88 c0       	rjmp	.+272    	; 0x1b72 <xTaskResumeAll+0x13c>
    1a62:	bc c0       	rjmp	.+376    	; 0x1bdc <xTaskResumeAll+0x1a6>
    1a64:	e0 91 b9 0d 	lds	r30, 0x0DB9	; 0x800db9 <xPendingReadyList+0x7>
    1a68:	f0 91 ba 0d 	lds	r31, 0x0DBA	; 0x800dba <xPendingReadyList+0x8>
    1a6c:	00 84       	ldd	r0, Z+8	; 0x08
    1a6e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a70:	e0 2d       	mov	r30, r0
    1a72:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a74:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a76:	c2 89       	ldd	r28, Z+18	; 0x12
    1a78:	d3 89       	ldd	r29, Z+19	; 0x13
    1a7a:	84 89       	ldd	r24, Z+20	; 0x14
    1a7c:	95 89       	ldd	r25, Z+21	; 0x15
    1a7e:	9f 83       	std	Y+7, r25	; 0x07
    1a80:	8e 83       	std	Y+6, r24	; 0x06
    1a82:	c4 89       	ldd	r28, Z+20	; 0x14
    1a84:	d5 89       	ldd	r29, Z+21	; 0x15
    1a86:	82 89       	ldd	r24, Z+18	; 0x12
    1a88:	93 89       	ldd	r25, Z+19	; 0x13
    1a8a:	9d 83       	std	Y+5, r25	; 0x05
    1a8c:	8c 83       	std	Y+4, r24	; 0x04
    1a8e:	11 96       	adiw	r26, 0x01	; 1
    1a90:	2d 91       	ld	r18, X+
    1a92:	3c 91       	ld	r19, X
    1a94:	12 97       	sbiw	r26, 0x02	; 2
    1a96:	cf 01       	movw	r24, r30
    1a98:	0e 96       	adiw	r24, 0x0e	; 14
    1a9a:	28 17       	cp	r18, r24
    1a9c:	39 07       	cpc	r19, r25
    1a9e:	31 f4       	brne	.+12     	; 0x1aac <xTaskResumeAll+0x76>
    1aa0:	84 89       	ldd	r24, Z+20	; 0x14
    1aa2:	95 89       	ldd	r25, Z+21	; 0x15
    1aa4:	12 96       	adiw	r26, 0x02	; 2
    1aa6:	9c 93       	st	X, r25
    1aa8:	8e 93       	st	-X, r24
    1aaa:	11 97       	sbiw	r26, 0x01	; 1
    1aac:	11 8e       	std	Z+25, r1	; 0x19
    1aae:	10 8e       	std	Z+24, r1	; 0x18
    1ab0:	8c 91       	ld	r24, X
    1ab2:	81 50       	subi	r24, 0x01	; 1
    1ab4:	8c 93       	st	X, r24
    1ab6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ab8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1aba:	c6 81       	ldd	r28, Z+6	; 0x06
    1abc:	d7 81       	ldd	r29, Z+7	; 0x07
    1abe:	80 85       	ldd	r24, Z+8	; 0x08
    1ac0:	91 85       	ldd	r25, Z+9	; 0x09
    1ac2:	9f 83       	std	Y+7, r25	; 0x07
    1ac4:	8e 83       	std	Y+6, r24	; 0x06
    1ac6:	c0 85       	ldd	r28, Z+8	; 0x08
    1ac8:	d1 85       	ldd	r29, Z+9	; 0x09
    1aca:	86 81       	ldd	r24, Z+6	; 0x06
    1acc:	97 81       	ldd	r25, Z+7	; 0x07
    1ace:	9d 83       	std	Y+5, r25	; 0x05
    1ad0:	8c 83       	std	Y+4, r24	; 0x04
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	8d 91       	ld	r24, X+
    1ad6:	9c 91       	ld	r25, X
    1ad8:	12 97       	sbiw	r26, 0x02	; 2
    1ada:	9f 01       	movw	r18, r30
    1adc:	2e 5f       	subi	r18, 0xFE	; 254
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	82 17       	cp	r24, r18
    1ae2:	93 07       	cpc	r25, r19
    1ae4:	31 f4       	brne	.+12     	; 0x1af2 <xTaskResumeAll+0xbc>
    1ae6:	80 85       	ldd	r24, Z+8	; 0x08
    1ae8:	91 85       	ldd	r25, Z+9	; 0x09
    1aea:	12 96       	adiw	r26, 0x02	; 2
    1aec:	9c 93       	st	X, r25
    1aee:	8e 93       	st	-X, r24
    1af0:	11 97       	sbiw	r26, 0x01	; 1
    1af2:	15 86       	std	Z+13, r1	; 0x0d
    1af4:	14 86       	std	Z+12, r1	; 0x0c
    1af6:	8c 91       	ld	r24, X
    1af8:	81 50       	subi	r24, 0x01	; 1
    1afa:	8c 93       	st	X, r24
    1afc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1afe:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    1b02:	8a 17       	cp	r24, r26
    1b04:	10 f4       	brcc	.+4      	; 0x1b0a <xTaskResumeAll+0xd4>
    1b06:	a0 93 95 0d 	sts	0x0D95, r26	; 0x800d95 <uxTopReadyPriority>
    1b0a:	8b e0       	ldi	r24, 0x0B	; 11
    1b0c:	8a 9f       	mul	r24, r26
    1b0e:	d0 01       	movw	r26, r0
    1b10:	11 24       	eor	r1, r1
    1b12:	a9 52       	subi	r26, 0x29	; 41
    1b14:	b2 4f       	sbci	r27, 0xF2	; 242
    1b16:	11 96       	adiw	r26, 0x01	; 1
    1b18:	0d 90       	ld	r0, X+
    1b1a:	bc 91       	ld	r27, X
    1b1c:	a0 2d       	mov	r26, r0
    1b1e:	b7 83       	std	Z+7, r27	; 0x07
    1b20:	a6 83       	std	Z+6, r26	; 0x06
    1b22:	16 96       	adiw	r26, 0x06	; 6
    1b24:	4d 91       	ld	r20, X+
    1b26:	5c 91       	ld	r21, X
    1b28:	17 97       	sbiw	r26, 0x07	; 7
    1b2a:	51 87       	std	Z+9, r21	; 0x09
    1b2c:	40 87       	std	Z+8, r20	; 0x08
    1b2e:	16 96       	adiw	r26, 0x06	; 6
    1b30:	cd 91       	ld	r28, X+
    1b32:	dc 91       	ld	r29, X
    1b34:	17 97       	sbiw	r26, 0x07	; 7
    1b36:	3d 83       	std	Y+5, r19	; 0x05
    1b38:	2c 83       	std	Y+4, r18	; 0x04
    1b3a:	17 96       	adiw	r26, 0x07	; 7
    1b3c:	3c 93       	st	X, r19
    1b3e:	2e 93       	st	-X, r18
    1b40:	16 97       	sbiw	r26, 0x06	; 6
    1b42:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b44:	8a 9f       	mul	r24, r26
    1b46:	d0 01       	movw	r26, r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	a9 52       	subi	r26, 0x29	; 41
    1b4c:	b2 4f       	sbci	r27, 0xF2	; 242
    1b4e:	b5 87       	std	Z+13, r27	; 0x0d
    1b50:	a4 87       	std	Z+12, r26	; 0x0c
    1b52:	8c 91       	ld	r24, X
    1b54:	8f 5f       	subi	r24, 0xFF	; 255
    1b56:	8c 93       	st	X, r24
    1b58:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b5a:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1b5e:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1b62:	5a 96       	adiw	r26, 0x1a	; 26
    1b64:	8c 91       	ld	r24, X
    1b66:	98 17       	cp	r25, r24
    1b68:	30 f0       	brcs	.+12     	; 0x1b76 <xTaskResumeAll+0x140>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <xYieldPending>
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <xTaskResumeAll+0x140>
    1b72:	e0 e0       	ldi	r30, 0x00	; 0
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <xPendingReadyList>
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	73 cf       	rjmp	.-282    	; 0x1a64 <xTaskResumeAll+0x2e>
    1b7e:	ef 2b       	or	r30, r31
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <xTaskResumeAll+0x14e>
    1b82:	90 db       	rcall	.-2272   	; 0x12a4 <prvResetNextTaskUnblockTime>
    1b84:	c0 90 90 0d 	lds	r12, 0x0D90	; 0x800d90 <xPendedTicks>
    1b88:	d0 90 91 0d 	lds	r13, 0x0D91	; 0x800d91 <xPendedTicks+0x1>
    1b8c:	e0 90 92 0d 	lds	r14, 0x0D92	; 0x800d92 <xPendedTicks+0x2>
    1b90:	f0 90 93 0d 	lds	r15, 0x0D93	; 0x800d93 <xPendedTicks+0x3>
    1b94:	c1 14       	cp	r12, r1
    1b96:	d1 04       	cpc	r13, r1
    1b98:	e1 04       	cpc	r14, r1
    1b9a:	f1 04       	cpc	r15, r1
    1b9c:	a1 f0       	breq	.+40     	; 0x1bc6 <xTaskResumeAll+0x190>
    1b9e:	1f de       	rcall	.-962    	; 0x17de <xTaskIncrementTick>
    1ba0:	88 23       	and	r24, r24
    1ba2:	19 f0       	breq	.+6      	; 0x1baa <xTaskResumeAll+0x174>
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <xYieldPending>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	c8 1a       	sub	r12, r24
    1bae:	d1 08       	sbc	r13, r1
    1bb0:	e1 08       	sbc	r14, r1
    1bb2:	f1 08       	sbc	r15, r1
    1bb4:	a1 f7       	brne	.-24     	; 0x1b9e <xTaskResumeAll+0x168>
    1bb6:	10 92 90 0d 	sts	0x0D90, r1	; 0x800d90 <xPendedTicks>
    1bba:	10 92 91 0d 	sts	0x0D91, r1	; 0x800d91 <xPendedTicks+0x1>
    1bbe:	10 92 92 0d 	sts	0x0D92, r1	; 0x800d92 <xPendedTicks+0x2>
    1bc2:	10 92 93 0d 	sts	0x0D93, r1	; 0x800d93 <xPendedTicks+0x3>
    1bc6:	80 91 8f 0d 	lds	r24, 0x0D8F	; 0x800d8f <xYieldPending>
    1bca:	88 23       	and	r24, r24
    1bcc:	31 f0       	breq	.+12     	; 0x1bda <xTaskResumeAll+0x1a4>
    1bce:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	03 c0       	rjmp	.+6      	; 0x1bdc <xTaskResumeAll+0x1a6>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <xTaskResumeAll+0x1a6>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	0f 90       	pop	r0
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	08 95       	ret

00001bee <vTaskDelay>:
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	6b 01       	movw	r12, r22
    1bf8:	7c 01       	movw	r14, r24
    1bfa:	67 2b       	or	r22, r23
    1bfc:	68 2b       	or	r22, r24
    1bfe:	69 2b       	or	r22, r25
    1c00:	39 f0       	breq	.+14     	; 0x1c10 <vTaskDelay+0x22>
    1c02:	d9 dd       	rcall	.-1102   	; 0x17b6 <vTaskSuspendAll>
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	c7 01       	movw	r24, r14
    1c08:	b6 01       	movw	r22, r12
    1c0a:	b5 dc       	rcall	.-1686   	; 0x1576 <prvAddCurrentTaskToDelayedList>
    1c0c:	14 df       	rcall	.-472    	; 0x1a36 <xTaskResumeAll>
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <vTaskDelay+0x24>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	81 11       	cpse	r24, r1
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <vTaskDelay+0x2c>
    1c16:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	08 95       	ret

00001c24 <vTaskSwitchContext>:
    1c24:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <uxSchedulerSuspended>
    1c28:	88 23       	and	r24, r24
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <vTaskSwitchContext+0x10>
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <xYieldPending>
    1c32:	08 95       	ret
    1c34:	10 92 8f 0d 	sts	0x0D8F, r1	; 0x800d8f <xYieldPending>
    1c38:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1c3c:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1c40:	20 81       	ld	r18, Z
    1c42:	31 81       	ldd	r19, Z+1	; 0x01
    1c44:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1c48:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1c4c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c4e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1c50:	82 17       	cp	r24, r18
    1c52:	93 07       	cpc	r25, r19
    1c54:	58 f0       	brcs	.+22     	; 0x1c6c <vTaskSwitchContext+0x48>
    1c56:	60 91 45 0e 	lds	r22, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1c5a:	70 91 46 0e 	lds	r23, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1c5e:	63 5e       	subi	r22, 0xE3	; 227
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1c66:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1c6a:	4e d7       	rcall	.+3740   	; 0x2b08 <vApplicationStackOverflowHook>
    1c6c:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    1c70:	01 c0       	rjmp	.+2      	; 0x1c74 <vTaskSwitchContext+0x50>
    1c72:	81 50       	subi	r24, 0x01	; 1
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	9b e0       	ldi	r25, 0x0B	; 11
    1c7a:	92 9f       	mul	r25, r18
    1c7c:	f0 01       	movw	r30, r0
    1c7e:	93 9f       	mul	r25, r19
    1c80:	f0 0d       	add	r31, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	e9 52       	subi	r30, 0x29	; 41
    1c86:	f2 4f       	sbci	r31, 0xF2	; 242
    1c88:	90 81       	ld	r25, Z
    1c8a:	99 23       	and	r25, r25
    1c8c:	91 f3       	breq	.-28     	; 0x1c72 <vTaskSwitchContext+0x4e>
    1c8e:	9b e0       	ldi	r25, 0x0B	; 11
    1c90:	92 9f       	mul	r25, r18
    1c92:	a0 01       	movw	r20, r0
    1c94:	93 9f       	mul	r25, r19
    1c96:	50 0d       	add	r21, r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	df 01       	movw	r26, r30
    1c9c:	01 80       	ldd	r0, Z+1	; 0x01
    1c9e:	f2 81       	ldd	r31, Z+2	; 0x02
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	04 80       	ldd	r0, Z+4	; 0x04
    1ca4:	f5 81       	ldd	r31, Z+5	; 0x05
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	12 96       	adiw	r26, 0x02	; 2
    1caa:	fc 93       	st	X, r31
    1cac:	ee 93       	st	-X, r30
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	46 52       	subi	r20, 0x26	; 38
    1cb2:	52 4f       	sbci	r21, 0xF2	; 242
    1cb4:	e4 17       	cp	r30, r20
    1cb6:	f5 07       	cpc	r31, r21
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <vTaskSwitchContext+0xa0>
    1cba:	44 81       	ldd	r20, Z+4	; 0x04
    1cbc:	55 81       	ldd	r21, Z+5	; 0x05
    1cbe:	fd 01       	movw	r30, r26
    1cc0:	52 83       	std	Z+2, r21	; 0x02
    1cc2:	41 83       	std	Z+1, r20	; 0x01
    1cc4:	9b e0       	ldi	r25, 0x0B	; 11
    1cc6:	92 9f       	mul	r25, r18
    1cc8:	f0 01       	movw	r30, r0
    1cca:	93 9f       	mul	r25, r19
    1ccc:	f0 0d       	add	r31, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	e9 52       	subi	r30, 0x29	; 41
    1cd2:	f2 4f       	sbci	r31, 0xF2	; 242
    1cd4:	01 80       	ldd	r0, Z+1	; 0x01
    1cd6:	f2 81       	ldd	r31, Z+2	; 0x02
    1cd8:	e0 2d       	mov	r30, r0
    1cda:	20 85       	ldd	r18, Z+8	; 0x08
    1cdc:	31 85       	ldd	r19, Z+9	; 0x09
    1cde:	30 93 46 0e 	sts	0x0E46, r19	; 0x800e46 <pxCurrentTCB+0x1>
    1ce2:	20 93 45 0e 	sts	0x0E45, r18	; 0x800e45 <pxCurrentTCB>
    1ce6:	80 93 95 0d 	sts	0x0D95, r24	; 0x800d95 <uxTopReadyPriority>
    1cea:	08 95       	ret

00001cec <vTaskPlaceOnEventList>:
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	6a 01       	movw	r12, r20
    1cf6:	7b 01       	movw	r14, r22
    1cf8:	60 91 45 0e 	lds	r22, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1cfc:	70 91 46 0e 	lds	r23, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1d00:	62 5f       	subi	r22, 0xF2	; 242
    1d02:	7f 4f       	sbci	r23, 0xFF	; 255
    1d04:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	c7 01       	movw	r24, r14
    1d0c:	b6 01       	movw	r22, r12
    1d0e:	33 dc       	rcall	.-1946   	; 0x1576 <prvAddCurrentTaskToDelayedList>
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	08 95       	ret

00001d1a <vTaskPlaceOnUnorderedEventList>:
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	fc 01       	movw	r30, r24
    1d24:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1d28:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1d2c:	70 68       	ori	r23, 0x80	; 128
    1d2e:	1e 96       	adiw	r26, 0x0e	; 14
    1d30:	4d 93       	st	X+, r20
    1d32:	5d 93       	st	X+, r21
    1d34:	6d 93       	st	X+, r22
    1d36:	7c 93       	st	X, r23
    1d38:	51 97       	sbiw	r26, 0x11	; 17
    1d3a:	a1 81       	ldd	r26, Z+1	; 0x01
    1d3c:	b2 81       	ldd	r27, Z+2	; 0x02
    1d3e:	c0 91 45 0e 	lds	r28, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1d42:	d0 91 46 0e 	lds	r29, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1d46:	bb 8b       	std	Y+19, r27	; 0x13
    1d48:	aa 8b       	std	Y+18, r26	; 0x12
    1d4a:	c0 91 45 0e 	lds	r28, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1d4e:	d0 91 46 0e 	lds	r29, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1d52:	16 96       	adiw	r26, 0x06	; 6
    1d54:	8d 91       	ld	r24, X+
    1d56:	9c 91       	ld	r25, X
    1d58:	17 97       	sbiw	r26, 0x07	; 7
    1d5a:	9d 8b       	std	Y+21, r25	; 0x15
    1d5c:	8c 8b       	std	Y+20, r24	; 0x14
    1d5e:	16 96       	adiw	r26, 0x06	; 6
    1d60:	cd 91       	ld	r28, X+
    1d62:	dc 91       	ld	r29, X
    1d64:	17 97       	sbiw	r26, 0x07	; 7
    1d66:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1d6a:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1d6e:	0e 96       	adiw	r24, 0x0e	; 14
    1d70:	9d 83       	std	Y+5, r25	; 0x05
    1d72:	8c 83       	std	Y+4, r24	; 0x04
    1d74:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1d78:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1d7c:	0e 96       	adiw	r24, 0x0e	; 14
    1d7e:	17 96       	adiw	r26, 0x07	; 7
    1d80:	9c 93       	st	X, r25
    1d82:	8e 93       	st	-X, r24
    1d84:	16 97       	sbiw	r26, 0x06	; 6
    1d86:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1d8a:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1d8e:	59 96       	adiw	r26, 0x19	; 25
    1d90:	fc 93       	st	X, r31
    1d92:	ee 93       	st	-X, r30
    1d94:	58 97       	sbiw	r26, 0x18	; 24
    1d96:	80 81       	ld	r24, Z
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	80 83       	st	Z, r24
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	c9 01       	movw	r24, r18
    1da0:	b8 01       	movw	r22, r16
    1da2:	e9 db       	rcall	.-2094   	; 0x1576 <prvAddCurrentTaskToDelayedList>
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <vTaskPlaceOnEventListRestricted>:
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	fc 01       	movw	r30, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	ba 01       	movw	r22, r20
    1db8:	a1 81       	ldd	r26, Z+1	; 0x01
    1dba:	b2 81       	ldd	r27, Z+2	; 0x02
    1dbc:	c0 91 45 0e 	lds	r28, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1dc0:	d0 91 46 0e 	lds	r29, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1dc4:	bb 8b       	std	Y+19, r27	; 0x13
    1dc6:	aa 8b       	std	Y+18, r26	; 0x12
    1dc8:	c0 91 45 0e 	lds	r28, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1dcc:	d0 91 46 0e 	lds	r29, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1dd0:	16 96       	adiw	r26, 0x06	; 6
    1dd2:	4d 91       	ld	r20, X+
    1dd4:	5c 91       	ld	r21, X
    1dd6:	17 97       	sbiw	r26, 0x07	; 7
    1dd8:	5d 8b       	std	Y+21, r21	; 0x15
    1dda:	4c 8b       	std	Y+20, r20	; 0x14
    1ddc:	16 96       	adiw	r26, 0x06	; 6
    1dde:	cd 91       	ld	r28, X+
    1de0:	dc 91       	ld	r29, X
    1de2:	17 97       	sbiw	r26, 0x07	; 7
    1de4:	40 91 45 0e 	lds	r20, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1de8:	50 91 46 0e 	lds	r21, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1dec:	42 5f       	subi	r20, 0xF2	; 242
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	5d 83       	std	Y+5, r21	; 0x05
    1df2:	4c 83       	std	Y+4, r20	; 0x04
    1df4:	40 91 45 0e 	lds	r20, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1df8:	50 91 46 0e 	lds	r21, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1dfc:	42 5f       	subi	r20, 0xF2	; 242
    1dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1e00:	17 96       	adiw	r26, 0x07	; 7
    1e02:	5c 93       	st	X, r21
    1e04:	4e 93       	st	-X, r20
    1e06:	16 97       	sbiw	r26, 0x06	; 6
    1e08:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1e0c:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1e10:	59 96       	adiw	r26, 0x19	; 25
    1e12:	fc 93       	st	X, r31
    1e14:	ee 93       	st	-X, r30
    1e16:	58 97       	sbiw	r26, 0x18	; 24
    1e18:	30 81       	ld	r19, Z
    1e1a:	3f 5f       	subi	r19, 0xFF	; 255
    1e1c:	30 83       	st	Z, r19
    1e1e:	22 23       	and	r18, r18
    1e20:	19 f0       	breq	.+6      	; 0x1e28 <vTaskPlaceOnEventListRestricted+0x7a>
    1e22:	6f ef       	ldi	r22, 0xFF	; 255
    1e24:	7f ef       	ldi	r23, 0xFF	; 255
    1e26:	cb 01       	movw	r24, r22
    1e28:	42 2f       	mov	r20, r18
    1e2a:	a5 db       	rcall	.-2230   	; 0x1576 <prvAddCurrentTaskToDelayedList>
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	08 95       	ret

00001e32 <xTaskRemoveFromEventList>:
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	dc 01       	movw	r26, r24
    1e38:	17 96       	adiw	r26, 0x07	; 7
    1e3a:	ed 91       	ld	r30, X+
    1e3c:	fc 91       	ld	r31, X
    1e3e:	18 97       	sbiw	r26, 0x08	; 8
    1e40:	00 84       	ldd	r0, Z+8	; 0x08
    1e42:	f1 85       	ldd	r31, Z+9	; 0x09
    1e44:	e0 2d       	mov	r30, r0
    1e46:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e48:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e4a:	c2 89       	ldd	r28, Z+18	; 0x12
    1e4c:	d3 89       	ldd	r29, Z+19	; 0x13
    1e4e:	84 89       	ldd	r24, Z+20	; 0x14
    1e50:	95 89       	ldd	r25, Z+21	; 0x15
    1e52:	9f 83       	std	Y+7, r25	; 0x07
    1e54:	8e 83       	std	Y+6, r24	; 0x06
    1e56:	c4 89       	ldd	r28, Z+20	; 0x14
    1e58:	d5 89       	ldd	r29, Z+21	; 0x15
    1e5a:	82 89       	ldd	r24, Z+18	; 0x12
    1e5c:	93 89       	ldd	r25, Z+19	; 0x13
    1e5e:	9d 83       	std	Y+5, r25	; 0x05
    1e60:	8c 83       	std	Y+4, r24	; 0x04
    1e62:	11 96       	adiw	r26, 0x01	; 1
    1e64:	8d 91       	ld	r24, X+
    1e66:	9c 91       	ld	r25, X
    1e68:	12 97       	sbiw	r26, 0x02	; 2
    1e6a:	9f 01       	movw	r18, r30
    1e6c:	22 5f       	subi	r18, 0xF2	; 242
    1e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e70:	82 17       	cp	r24, r18
    1e72:	93 07       	cpc	r25, r19
    1e74:	31 f4       	brne	.+12     	; 0x1e82 <xTaskRemoveFromEventList+0x50>
    1e76:	84 89       	ldd	r24, Z+20	; 0x14
    1e78:	95 89       	ldd	r25, Z+21	; 0x15
    1e7a:	12 96       	adiw	r26, 0x02	; 2
    1e7c:	9c 93       	st	X, r25
    1e7e:	8e 93       	st	-X, r24
    1e80:	11 97       	sbiw	r26, 0x01	; 1
    1e82:	11 8e       	std	Z+25, r1	; 0x19
    1e84:	10 8e       	std	Z+24, r1	; 0x18
    1e86:	8c 91       	ld	r24, X
    1e88:	81 50       	subi	r24, 0x01	; 1
    1e8a:	8c 93       	st	X, r24
    1e8c:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <uxSchedulerSuspended>
    1e90:	81 11       	cpse	r24, r1
    1e92:	52 c0       	rjmp	.+164    	; 0x1f38 <xTaskRemoveFromEventList+0x106>
    1e94:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e96:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e98:	c6 81       	ldd	r28, Z+6	; 0x06
    1e9a:	d7 81       	ldd	r29, Z+7	; 0x07
    1e9c:	80 85       	ldd	r24, Z+8	; 0x08
    1e9e:	91 85       	ldd	r25, Z+9	; 0x09
    1ea0:	9f 83       	std	Y+7, r25	; 0x07
    1ea2:	8e 83       	std	Y+6, r24	; 0x06
    1ea4:	c0 85       	ldd	r28, Z+8	; 0x08
    1ea6:	d1 85       	ldd	r29, Z+9	; 0x09
    1ea8:	86 81       	ldd	r24, Z+6	; 0x06
    1eaa:	97 81       	ldd	r25, Z+7	; 0x07
    1eac:	9d 83       	std	Y+5, r25	; 0x05
    1eae:	8c 83       	std	Y+4, r24	; 0x04
    1eb0:	11 96       	adiw	r26, 0x01	; 1
    1eb2:	8d 91       	ld	r24, X+
    1eb4:	9c 91       	ld	r25, X
    1eb6:	12 97       	sbiw	r26, 0x02	; 2
    1eb8:	9f 01       	movw	r18, r30
    1eba:	2e 5f       	subi	r18, 0xFE	; 254
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	82 17       	cp	r24, r18
    1ec0:	93 07       	cpc	r25, r19
    1ec2:	31 f4       	brne	.+12     	; 0x1ed0 <xTaskRemoveFromEventList+0x9e>
    1ec4:	80 85       	ldd	r24, Z+8	; 0x08
    1ec6:	91 85       	ldd	r25, Z+9	; 0x09
    1ec8:	12 96       	adiw	r26, 0x02	; 2
    1eca:	9c 93       	st	X, r25
    1ecc:	8e 93       	st	-X, r24
    1ece:	11 97       	sbiw	r26, 0x01	; 1
    1ed0:	15 86       	std	Z+13, r1	; 0x0d
    1ed2:	14 86       	std	Z+12, r1	; 0x0c
    1ed4:	8c 91       	ld	r24, X
    1ed6:	81 50       	subi	r24, 0x01	; 1
    1ed8:	8c 93       	st	X, r24
    1eda:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1edc:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    1ee0:	8a 17       	cp	r24, r26
    1ee2:	10 f4       	brcc	.+4      	; 0x1ee8 <xTaskRemoveFromEventList+0xb6>
    1ee4:	a0 93 95 0d 	sts	0x0D95, r26	; 0x800d95 <uxTopReadyPriority>
    1ee8:	8b e0       	ldi	r24, 0x0B	; 11
    1eea:	8a 9f       	mul	r24, r26
    1eec:	d0 01       	movw	r26, r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	a9 52       	subi	r26, 0x29	; 41
    1ef2:	b2 4f       	sbci	r27, 0xF2	; 242
    1ef4:	11 96       	adiw	r26, 0x01	; 1
    1ef6:	0d 90       	ld	r0, X+
    1ef8:	bc 91       	ld	r27, X
    1efa:	a0 2d       	mov	r26, r0
    1efc:	b7 83       	std	Z+7, r27	; 0x07
    1efe:	a6 83       	std	Z+6, r26	; 0x06
    1f00:	16 96       	adiw	r26, 0x06	; 6
    1f02:	4d 91       	ld	r20, X+
    1f04:	5c 91       	ld	r21, X
    1f06:	17 97       	sbiw	r26, 0x07	; 7
    1f08:	51 87       	std	Z+9, r21	; 0x09
    1f0a:	40 87       	std	Z+8, r20	; 0x08
    1f0c:	16 96       	adiw	r26, 0x06	; 6
    1f0e:	cd 91       	ld	r28, X+
    1f10:	dc 91       	ld	r29, X
    1f12:	17 97       	sbiw	r26, 0x07	; 7
    1f14:	3d 83       	std	Y+5, r19	; 0x05
    1f16:	2c 83       	std	Y+4, r18	; 0x04
    1f18:	17 96       	adiw	r26, 0x07	; 7
    1f1a:	3c 93       	st	X, r19
    1f1c:	2e 93       	st	-X, r18
    1f1e:	16 97       	sbiw	r26, 0x06	; 6
    1f20:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f22:	8a 9f       	mul	r24, r26
    1f24:	d0 01       	movw	r26, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	a9 52       	subi	r26, 0x29	; 41
    1f2a:	b2 4f       	sbci	r27, 0xF2	; 242
    1f2c:	b5 87       	std	Z+13, r27	; 0x0d
    1f2e:	a4 87       	std	Z+12, r26	; 0x0c
    1f30:	8c 91       	ld	r24, X
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	8c 93       	st	X, r24
    1f36:	1c c0       	rjmp	.+56     	; 0x1f70 <xTaskRemoveFromEventList+0x13e>
    1f38:	42 eb       	ldi	r20, 0xB2	; 178
    1f3a:	5d e0       	ldi	r21, 0x0D	; 13
    1f3c:	da 01       	movw	r26, r20
    1f3e:	11 96       	adiw	r26, 0x01	; 1
    1f40:	cd 91       	ld	r28, X+
    1f42:	dc 91       	ld	r29, X
    1f44:	12 97       	sbiw	r26, 0x02	; 2
    1f46:	d3 8b       	std	Z+19, r29	; 0x13
    1f48:	c2 8b       	std	Z+18, r28	; 0x12
    1f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f4e:	95 8b       	std	Z+21, r25	; 0x15
    1f50:	84 8b       	std	Z+20, r24	; 0x14
    1f52:	8e 81       	ldd	r24, Y+6	; 0x06
    1f54:	9f 81       	ldd	r25, Y+7	; 0x07
    1f56:	dc 01       	movw	r26, r24
    1f58:	15 96       	adiw	r26, 0x05	; 5
    1f5a:	3c 93       	st	X, r19
    1f5c:	2e 93       	st	-X, r18
    1f5e:	14 97       	sbiw	r26, 0x04	; 4
    1f60:	3f 83       	std	Y+7, r19	; 0x07
    1f62:	2e 83       	std	Y+6, r18	; 0x06
    1f64:	51 8f       	std	Z+25, r21	; 0x19
    1f66:	40 8f       	std	Z+24, r20	; 0x18
    1f68:	da 01       	movw	r26, r20
    1f6a:	8c 91       	ld	r24, X
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	8c 93       	st	X, r24
    1f70:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f72:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    1f76:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    1f7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f7c:	89 17       	cp	r24, r25
    1f7e:	20 f4       	brcc	.+8      	; 0x1f88 <xTaskRemoveFromEventList+0x156>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <xYieldPending>
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <xTaskRemoveFromEventList+0x158>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	08 95       	ret

00001f90 <vTaskRemoveFromUnorderedEventList>:
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	dc 01       	movw	r26, r24
    1f96:	70 68       	ori	r23, 0x80	; 128
    1f98:	4d 93       	st	X+, r20
    1f9a:	5d 93       	st	X+, r21
    1f9c:	6d 93       	st	X+, r22
    1f9e:	7c 93       	st	X, r23
    1fa0:	13 97       	sbiw	r26, 0x03	; 3
    1fa2:	18 96       	adiw	r26, 0x08	; 8
    1fa4:	ed 91       	ld	r30, X+
    1fa6:	fc 91       	ld	r31, X
    1fa8:	19 97       	sbiw	r26, 0x09	; 9
    1faa:	1a 96       	adiw	r26, 0x0a	; 10
    1fac:	4d 91       	ld	r20, X+
    1fae:	5c 91       	ld	r21, X
    1fb0:	1b 97       	sbiw	r26, 0x0b	; 11
    1fb2:	14 96       	adiw	r26, 0x04	; 4
    1fb4:	8d 91       	ld	r24, X+
    1fb6:	9c 91       	ld	r25, X
    1fb8:	15 97       	sbiw	r26, 0x05	; 5
    1fba:	16 96       	adiw	r26, 0x06	; 6
    1fbc:	2d 91       	ld	r18, X+
    1fbe:	3c 91       	ld	r19, X
    1fc0:	17 97       	sbiw	r26, 0x07	; 7
    1fc2:	ec 01       	movw	r28, r24
    1fc4:	3f 83       	std	Y+7, r19	; 0x07
    1fc6:	2e 83       	std	Y+6, r18	; 0x06
    1fc8:	16 96       	adiw	r26, 0x06	; 6
    1fca:	8d 91       	ld	r24, X+
    1fcc:	9c 91       	ld	r25, X
    1fce:	17 97       	sbiw	r26, 0x07	; 7
    1fd0:	14 96       	adiw	r26, 0x04	; 4
    1fd2:	2d 91       	ld	r18, X+
    1fd4:	3c 91       	ld	r19, X
    1fd6:	15 97       	sbiw	r26, 0x05	; 5
    1fd8:	ec 01       	movw	r28, r24
    1fda:	3d 83       	std	Y+5, r19	; 0x05
    1fdc:	2c 83       	std	Y+4, r18	; 0x04
    1fde:	ea 01       	movw	r28, r20
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	a8 17       	cp	r26, r24
    1fe6:	b9 07       	cpc	r27, r25
    1fe8:	31 f4       	brne	.+12     	; 0x1ff6 <vTaskRemoveFromUnorderedEventList+0x66>
    1fea:	16 96       	adiw	r26, 0x06	; 6
    1fec:	8d 91       	ld	r24, X+
    1fee:	9c 91       	ld	r25, X
    1ff0:	17 97       	sbiw	r26, 0x07	; 7
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	1b 96       	adiw	r26, 0x0b	; 11
    1ff8:	1c 92       	st	X, r1
    1ffa:	1e 92       	st	-X, r1
    1ffc:	1a 97       	sbiw	r26, 0x0a	; 10
    1ffe:	da 01       	movw	r26, r20
    2000:	8c 91       	ld	r24, X
    2002:	81 50       	subi	r24, 0x01	; 1
    2004:	8c 93       	st	X, r24
    2006:	a4 85       	ldd	r26, Z+12	; 0x0c
    2008:	b5 85       	ldd	r27, Z+13	; 0x0d
    200a:	c6 81       	ldd	r28, Z+6	; 0x06
    200c:	d7 81       	ldd	r29, Z+7	; 0x07
    200e:	80 85       	ldd	r24, Z+8	; 0x08
    2010:	91 85       	ldd	r25, Z+9	; 0x09
    2012:	9f 83       	std	Y+7, r25	; 0x07
    2014:	8e 83       	std	Y+6, r24	; 0x06
    2016:	c0 85       	ldd	r28, Z+8	; 0x08
    2018:	d1 85       	ldd	r29, Z+9	; 0x09
    201a:	86 81       	ldd	r24, Z+6	; 0x06
    201c:	97 81       	ldd	r25, Z+7	; 0x07
    201e:	9d 83       	std	Y+5, r25	; 0x05
    2020:	8c 83       	std	Y+4, r24	; 0x04
    2022:	11 96       	adiw	r26, 0x01	; 1
    2024:	8d 91       	ld	r24, X+
    2026:	9c 91       	ld	r25, X
    2028:	12 97       	sbiw	r26, 0x02	; 2
    202a:	9f 01       	movw	r18, r30
    202c:	2e 5f       	subi	r18, 0xFE	; 254
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	82 17       	cp	r24, r18
    2032:	93 07       	cpc	r25, r19
    2034:	31 f4       	brne	.+12     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    2036:	80 85       	ldd	r24, Z+8	; 0x08
    2038:	91 85       	ldd	r25, Z+9	; 0x09
    203a:	12 96       	adiw	r26, 0x02	; 2
    203c:	9c 93       	st	X, r25
    203e:	8e 93       	st	-X, r24
    2040:	11 97       	sbiw	r26, 0x01	; 1
    2042:	15 86       	std	Z+13, r1	; 0x0d
    2044:	14 86       	std	Z+12, r1	; 0x0c
    2046:	8c 91       	ld	r24, X
    2048:	81 50       	subi	r24, 0x01	; 1
    204a:	8c 93       	st	X, r24
    204c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    204e:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    2052:	8a 17       	cp	r24, r26
    2054:	10 f4       	brcc	.+4      	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    2056:	a0 93 95 0d 	sts	0x0D95, r26	; 0x800d95 <uxTopReadyPriority>
    205a:	8b e0       	ldi	r24, 0x0B	; 11
    205c:	8a 9f       	mul	r24, r26
    205e:	d0 01       	movw	r26, r0
    2060:	11 24       	eor	r1, r1
    2062:	a9 52       	subi	r26, 0x29	; 41
    2064:	b2 4f       	sbci	r27, 0xF2	; 242
    2066:	11 96       	adiw	r26, 0x01	; 1
    2068:	0d 90       	ld	r0, X+
    206a:	bc 91       	ld	r27, X
    206c:	a0 2d       	mov	r26, r0
    206e:	b7 83       	std	Z+7, r27	; 0x07
    2070:	a6 83       	std	Z+6, r26	; 0x06
    2072:	16 96       	adiw	r26, 0x06	; 6
    2074:	4d 91       	ld	r20, X+
    2076:	5c 91       	ld	r21, X
    2078:	17 97       	sbiw	r26, 0x07	; 7
    207a:	51 87       	std	Z+9, r21	; 0x09
    207c:	40 87       	std	Z+8, r20	; 0x08
    207e:	16 96       	adiw	r26, 0x06	; 6
    2080:	cd 91       	ld	r28, X+
    2082:	dc 91       	ld	r29, X
    2084:	17 97       	sbiw	r26, 0x07	; 7
    2086:	3d 83       	std	Y+5, r19	; 0x05
    2088:	2c 83       	std	Y+4, r18	; 0x04
    208a:	17 96       	adiw	r26, 0x07	; 7
    208c:	3c 93       	st	X, r19
    208e:	2e 93       	st	-X, r18
    2090:	16 97       	sbiw	r26, 0x06	; 6
    2092:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2094:	8a 9f       	mul	r24, r26
    2096:	d0 01       	movw	r26, r0
    2098:	11 24       	eor	r1, r1
    209a:	a9 52       	subi	r26, 0x29	; 41
    209c:	b2 4f       	sbci	r27, 0xF2	; 242
    209e:	b5 87       	std	Z+13, r27	; 0x0d
    20a0:	a4 87       	std	Z+12, r26	; 0x0c
    20a2:	8c 91       	ld	r24, X
    20a4:	8f 5f       	subi	r24, 0xFF	; 255
    20a6:	8c 93       	st	X, r24
    20a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    20aa:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    20ae:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    20b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    20b4:	89 17       	cp	r24, r25
    20b6:	18 f4       	brcc	.+6      	; 0x20be <__DATA_REGION_LENGTH__+0xbe>
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <xYieldPending>
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret

000020c4 <vTaskInternalSetTimeOutState>:
    20c4:	20 91 8e 0d 	lds	r18, 0x0D8E	; 0x800d8e <xNumOfOverflows>
    20c8:	fc 01       	movw	r30, r24
    20ca:	20 83       	st	Z, r18
    20cc:	40 91 96 0d 	lds	r20, 0x0D96	; 0x800d96 <xTickCount>
    20d0:	50 91 97 0d 	lds	r21, 0x0D97	; 0x800d97 <xTickCount+0x1>
    20d4:	60 91 98 0d 	lds	r22, 0x0D98	; 0x800d98 <xTickCount+0x2>
    20d8:	70 91 99 0d 	lds	r23, 0x0D99	; 0x800d99 <xTickCount+0x3>
    20dc:	41 83       	std	Z+1, r20	; 0x01
    20de:	52 83       	std	Z+2, r21	; 0x02
    20e0:	63 83       	std	Z+3, r22	; 0x03
    20e2:	74 83       	std	Z+4, r23	; 0x04
    20e4:	08 95       	ret

000020e6 <xTaskCheckForTimeOut>:
    20e6:	8f 92       	push	r8
    20e8:	9f 92       	push	r9
    20ea:	af 92       	push	r10
    20ec:	bf 92       	push	r11
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	fb 01       	movw	r30, r22
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	0f 92       	push	r0
    2106:	c0 90 96 0d 	lds	r12, 0x0D96	; 0x800d96 <xTickCount>
    210a:	d0 90 97 0d 	lds	r13, 0x0D97	; 0x800d97 <xTickCount+0x1>
    210e:	e0 90 98 0d 	lds	r14, 0x0D98	; 0x800d98 <xTickCount+0x2>
    2112:	f0 90 99 0d 	lds	r15, 0x0D99	; 0x800d99 <xTickCount+0x3>
    2116:	dc 01       	movw	r26, r24
    2118:	11 96       	adiw	r26, 0x01	; 1
    211a:	0d 91       	ld	r16, X+
    211c:	1d 91       	ld	r17, X+
    211e:	2d 91       	ld	r18, X+
    2120:	3c 91       	ld	r19, X
    2122:	14 97       	sbiw	r26, 0x04	; 4
    2124:	46 01       	movw	r8, r12
    2126:	57 01       	movw	r10, r14
    2128:	80 1a       	sub	r8, r16
    212a:	91 0a       	sbc	r9, r17
    212c:	a2 0a       	sbc	r10, r18
    212e:	b3 0a       	sbc	r11, r19
    2130:	40 81       	ld	r20, Z
    2132:	51 81       	ldd	r21, Z+1	; 0x01
    2134:	62 81       	ldd	r22, Z+2	; 0x02
    2136:	73 81       	ldd	r23, Z+3	; 0x03
    2138:	4f 3f       	cpi	r20, 0xFF	; 255
    213a:	bf ef       	ldi	r27, 0xFF	; 255
    213c:	5b 07       	cpc	r21, r27
    213e:	6b 07       	cpc	r22, r27
    2140:	7b 07       	cpc	r23, r27
    2142:	39 f1       	breq	.+78     	; 0x2192 <xTaskCheckForTimeOut+0xac>
    2144:	ec 01       	movw	r28, r24
    2146:	b8 81       	ld	r27, Y
    2148:	a0 91 8e 0d 	lds	r26, 0x0D8E	; 0x800d8e <xNumOfOverflows>
    214c:	ba 17       	cp	r27, r26
    214e:	59 f0       	breq	.+22     	; 0x2166 <xTaskCheckForTimeOut+0x80>
    2150:	c0 16       	cp	r12, r16
    2152:	d1 06       	cpc	r13, r17
    2154:	e2 06       	cpc	r14, r18
    2156:	f3 06       	cpc	r15, r19
    2158:	30 f0       	brcs	.+12     	; 0x2166 <xTaskCheckForTimeOut+0x80>
    215a:	10 82       	st	Z, r1
    215c:	11 82       	std	Z+1, r1	; 0x01
    215e:	12 82       	std	Z+2, r1	; 0x02
    2160:	13 82       	std	Z+3, r1	; 0x03
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	17 c0       	rjmp	.+46     	; 0x2194 <xTaskCheckForTimeOut+0xae>
    2166:	84 16       	cp	r8, r20
    2168:	95 06       	cpc	r9, r21
    216a:	a6 06       	cpc	r10, r22
    216c:	b7 06       	cpc	r11, r23
    216e:	58 f4       	brcc	.+22     	; 0x2186 <xTaskCheckForTimeOut+0xa0>
    2170:	48 19       	sub	r20, r8
    2172:	59 09       	sbc	r21, r9
    2174:	6a 09       	sbc	r22, r10
    2176:	7b 09       	sbc	r23, r11
    2178:	40 83       	st	Z, r20
    217a:	51 83       	std	Z+1, r21	; 0x01
    217c:	62 83       	std	Z+2, r22	; 0x02
    217e:	73 83       	std	Z+3, r23	; 0x03
    2180:	a1 df       	rcall	.-190    	; 0x20c4 <vTaskInternalSetTimeOutState>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	07 c0       	rjmp	.+14     	; 0x2194 <xTaskCheckForTimeOut+0xae>
    2186:	10 82       	st	Z, r1
    2188:	11 82       	std	Z+1, r1	; 0x01
    218a:	12 82       	std	Z+2, r1	; 0x02
    218c:	13 82       	std	Z+3, r1	; 0x03
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <xTaskCheckForTimeOut+0xae>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	df 90       	pop	r13
    21a6:	cf 90       	pop	r12
    21a8:	bf 90       	pop	r11
    21aa:	af 90       	pop	r10
    21ac:	9f 90       	pop	r9
    21ae:	8f 90       	pop	r8
    21b0:	08 95       	ret

000021b2 <vTaskMissedYield>:
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <xYieldPending>
    21b8:	08 95       	ret

000021ba <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    21ba:	80 91 94 0d 	lds	r24, 0x0D94	; 0x800d94 <xSchedulerRunning>
    21be:	88 23       	and	r24, r24
    21c0:	31 f0       	breq	.+12     	; 0x21ce <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    21c2:	80 91 86 0d 	lds	r24, 0x0D86	; 0x800d86 <uxSchedulerSuspended>
    21c6:	81 11       	cpse	r24, r1
    21c8:	04 c0       	rjmp	.+8      	; 0x21d2 <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	08 95       	ret
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    21d2:	80 e0       	ldi	r24, 0x00	; 0
            }
        }

        return xReturn;
    }
    21d4:	08 95       	ret

000021d6 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	fc 01       	movw	r30, r24
        BaseType_t xReturn = pdFALSE;

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
    21e0:	89 2b       	or	r24, r25
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <xTaskPriorityInherit+0x10>
    21e4:	77 c0       	rjmp	.+238    	; 0x22d4 <__stack+0xd5>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    21e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    21e8:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    21ec:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    21f0:	5a 96       	adiw	r26, 0x1a	; 26
    21f2:	9c 91       	ld	r25, X
    21f4:	89 17       	cp	r24, r25
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <xTaskPriorityInherit+0x24>
    21f8:	63 c0       	rjmp	.+198    	; 0x22c0 <__stack+0xc1>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    21fa:	46 85       	ldd	r20, Z+14	; 0x0e
    21fc:	57 85       	ldd	r21, Z+15	; 0x0f
    21fe:	60 89       	ldd	r22, Z+16	; 0x10
    2200:	71 89       	ldd	r23, Z+17	; 0x11
    2202:	77 23       	and	r23, r23
    2204:	94 f0       	brlt	.+36     	; 0x222a <__stack+0x2b>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2206:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    220a:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    220e:	5a 96       	adiw	r26, 0x1a	; 26
    2210:	9c 91       	ld	r25, X
    2212:	4a e0       	ldi	r20, 0x0A	; 10
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	49 1b       	sub	r20, r25
    221c:	51 09       	sbc	r21, r1
    221e:	61 09       	sbc	r22, r1
    2220:	71 09       	sbc	r23, r1
    2222:	46 87       	std	Z+14, r20	; 0x0e
    2224:	57 87       	std	Z+15, r21	; 0x0f
    2226:	60 8b       	std	Z+16, r22	; 0x10
    2228:	71 8b       	std	Z+17, r23	; 0x11
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    222a:	24 85       	ldd	r18, Z+12	; 0x0c
    222c:	35 85       	ldd	r19, Z+13	; 0x0d
    222e:	4b e0       	ldi	r20, 0x0B	; 11
    2230:	84 9f       	mul	r24, r20
    2232:	c0 01       	movw	r24, r0
    2234:	11 24       	eor	r1, r1
    2236:	89 52       	subi	r24, 0x29	; 41
    2238:	92 4f       	sbci	r25, 0xF2	; 242
    223a:	28 17       	cp	r18, r24
    223c:	39 07       	cpc	r19, r25
    223e:	b9 f5       	brne	.+110    	; 0x22ae <__stack+0xaf>
    2240:	ef 01       	movw	r28, r30
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2242:	8f 01       	movw	r16, r30
    2244:	0e 5f       	subi	r16, 0xFE	; 254
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	c8 01       	movw	r24, r16
    224a:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    224e:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    2252:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    2256:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2258:	ea 8f       	std	Y+26, r30	; 0x1a
                    prvAddTaskToReadyList( pxMutexHolderTCB );
    225a:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    225e:	8e 17       	cp	r24, r30
    2260:	10 f4       	brcc	.+4      	; 0x2266 <__stack+0x67>
    2262:	e0 93 95 0d 	sts	0x0D95, r30	; 0x800d95 <uxTopReadyPriority>
    2266:	8b e0       	ldi	r24, 0x0B	; 11
    2268:	8e 9f       	mul	r24, r30
    226a:	f0 01       	movw	r30, r0
    226c:	11 24       	eor	r1, r1
    226e:	e9 52       	subi	r30, 0x29	; 41
    2270:	f2 4f       	sbci	r31, 0xF2	; 242
    2272:	01 80       	ldd	r0, Z+1	; 0x01
    2274:	f2 81       	ldd	r31, Z+2	; 0x02
    2276:	e0 2d       	mov	r30, r0
    2278:	ff 83       	std	Y+7, r31	; 0x07
    227a:	ee 83       	std	Y+6, r30	; 0x06
    227c:	26 81       	ldd	r18, Z+6	; 0x06
    227e:	37 81       	ldd	r19, Z+7	; 0x07
    2280:	39 87       	std	Y+9, r19	; 0x09
    2282:	28 87       	std	Y+8, r18	; 0x08
    2284:	a6 81       	ldd	r26, Z+6	; 0x06
    2286:	b7 81       	ldd	r27, Z+7	; 0x07
    2288:	15 96       	adiw	r26, 0x05	; 5
    228a:	1c 93       	st	X, r17
    228c:	0e 93       	st	-X, r16
    228e:	14 97       	sbiw	r26, 0x04	; 4
    2290:	17 83       	std	Z+7, r17	; 0x07
    2292:	06 83       	std	Z+6, r16	; 0x06
    2294:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2296:	8e 9f       	mul	r24, r30
    2298:	f0 01       	movw	r30, r0
    229a:	11 24       	eor	r1, r1
    229c:	e9 52       	subi	r30, 0x29	; 41
    229e:	f2 4f       	sbci	r31, 0xF2	; 242
    22a0:	fd 87       	std	Y+13, r31	; 0x0d
    22a2:	ec 87       	std	Y+12, r30	; 0x0c
    22a4:	80 81       	ld	r24, Z
    22a6:	8f 5f       	subi	r24, 0xFF	; 255
    22a8:	80 83       	st	Z, r24
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	16 c0       	rjmp	.+44     	; 0x22da <__stack+0xdb>
                    prvAddTaskToReadyList( pxMutexHolderTCB );
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    22ae:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    22b2:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    22b6:	5a 96       	adiw	r26, 0x1a	; 26
    22b8:	8c 91       	ld	r24, X
    22ba:	82 8f       	std	Z+26, r24	; 0x1a
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	0d c0       	rjmp	.+26     	; 0x22da <__stack+0xdb>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    22c0:	95 a5       	ldd	r25, Z+45	; 0x2d
    22c2:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    22c6:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    22ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    22cc:	98 17       	cp	r25, r24
    22ce:	20 f0       	brcs	.+8      	; 0x22d8 <__stack+0xd9>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <__stack+0xdb>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <__stack+0xdb>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	08 95       	ret

000022e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    22ee:	89 2b       	or	r24, r25
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <xTaskPriorityDisinherit+0x10>
    22f2:	49 c0       	rjmp	.+146    	; 0x2386 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    22f4:	86 a5       	ldd	r24, Z+46	; 0x2e
    22f6:	81 50       	subi	r24, 0x01	; 1
    22f8:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    22fa:	22 8d       	ldd	r18, Z+26	; 0x1a
    22fc:	95 a5       	ldd	r25, Z+45	; 0x2d
    22fe:	29 17       	cp	r18, r25
    2300:	09 f4       	brne	.+2      	; 0x2304 <xTaskPriorityDisinherit+0x20>
    2302:	43 c0       	rjmp	.+134    	; 0x238a <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2304:	81 11       	cpse	r24, r1
    2306:	43 c0       	rjmp	.+134    	; 0x238e <xTaskPriorityDisinherit+0xaa>
    2308:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    230a:	8f 01       	movw	r16, r30
    230c:	0e 5f       	subi	r16, 0xFE	; 254
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	c8 01       	movw	r24, r16
    2312:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2316:	ed a5       	ldd	r30, Y+45	; 0x2d
    2318:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    231a:	8a e0       	ldi	r24, 0x0A	; 10
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	a0 e0       	ldi	r26, 0x00	; 0
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	8e 1b       	sub	r24, r30
    2324:	91 09       	sbc	r25, r1
    2326:	a1 09       	sbc	r26, r1
    2328:	b1 09       	sbc	r27, r1
    232a:	8e 87       	std	Y+14, r24	; 0x0e
    232c:	9f 87       	std	Y+15, r25	; 0x0f
    232e:	a8 8b       	std	Y+16, r26	; 0x10
    2330:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    2332:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    2336:	8e 17       	cp	r24, r30
    2338:	10 f4       	brcc	.+4      	; 0x233e <xTaskPriorityDisinherit+0x5a>
    233a:	e0 93 95 0d 	sts	0x0D95, r30	; 0x800d95 <uxTopReadyPriority>
    233e:	8b e0       	ldi	r24, 0x0B	; 11
    2340:	8e 9f       	mul	r24, r30
    2342:	f0 01       	movw	r30, r0
    2344:	11 24       	eor	r1, r1
    2346:	e9 52       	subi	r30, 0x29	; 41
    2348:	f2 4f       	sbci	r31, 0xF2	; 242
    234a:	01 80       	ldd	r0, Z+1	; 0x01
    234c:	f2 81       	ldd	r31, Z+2	; 0x02
    234e:	e0 2d       	mov	r30, r0
    2350:	ff 83       	std	Y+7, r31	; 0x07
    2352:	ee 83       	std	Y+6, r30	; 0x06
    2354:	26 81       	ldd	r18, Z+6	; 0x06
    2356:	37 81       	ldd	r19, Z+7	; 0x07
    2358:	39 87       	std	Y+9, r19	; 0x09
    235a:	28 87       	std	Y+8, r18	; 0x08
    235c:	a6 81       	ldd	r26, Z+6	; 0x06
    235e:	b7 81       	ldd	r27, Z+7	; 0x07
    2360:	15 96       	adiw	r26, 0x05	; 5
    2362:	1c 93       	st	X, r17
    2364:	0e 93       	st	-X, r16
    2366:	14 97       	sbiw	r26, 0x04	; 4
    2368:	17 83       	std	Z+7, r17	; 0x07
    236a:	06 83       	std	Z+6, r16	; 0x06
    236c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    236e:	8e 9f       	mul	r24, r30
    2370:	f0 01       	movw	r30, r0
    2372:	11 24       	eor	r1, r1
    2374:	e9 52       	subi	r30, 0x29	; 41
    2376:	f2 4f       	sbci	r31, 0xF2	; 242
    2378:	fd 87       	std	Y+13, r31	; 0x0d
    237a:	ec 87       	std	Y+12, r30	; 0x0c
    237c:	80 81       	ld	r24, Z
    237e:	8f 5f       	subi	r24, 0xFF	; 255
    2380:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	05 c0       	rjmp	.+10     	; 0x2390 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	03 c0       	rjmp	.+6      	; 0x2390 <xTaskPriorityDisinherit+0xac>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	01 c0       	rjmp	.+2      	; 0x2390 <xTaskPriorityDisinherit+0xac>
    238e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	08 95       	ret

0000239a <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

        if( pxMutexHolder != NULL )
    23a4:	89 2b       	or	r24, r25
    23a6:	09 f4       	brne	.+2      	; 0x23aa <vTaskPriorityDisinheritAfterTimeout+0x10>
    23a8:	5a c0       	rjmp	.+180    	; 0x245e <vTaskPriorityDisinheritAfterTimeout+0xc4>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    23aa:	85 a5       	ldd	r24, Z+45	; 0x2d
    23ac:	86 17       	cp	r24, r22
    23ae:	08 f4       	brcc	.+2      	; 0x23b2 <vTaskPriorityDisinheritAfterTimeout+0x18>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
    23b0:	86 2f       	mov	r24, r22
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
    23b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    23b4:	89 17       	cp	r24, r25
    23b6:	09 f4       	brne	.+2      	; 0x23ba <vTaskPriorityDisinheritAfterTimeout+0x20>
    23b8:	52 c0       	rjmp	.+164    	; 0x245e <vTaskPriorityDisinheritAfterTimeout+0xc4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    23ba:	26 a5       	ldd	r18, Z+46	; 0x2e
    23bc:	21 30       	cpi	r18, 0x01	; 1
    23be:	09 f0       	breq	.+2      	; 0x23c2 <vTaskPriorityDisinheritAfterTimeout+0x28>
    23c0:	4e c0       	rjmp	.+156    	; 0x245e <vTaskPriorityDisinheritAfterTimeout+0xc4>
                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
                    pxTCB->uxPriority = uxPriorityToUse;
    23c2:	82 8f       	std	Z+26, r24	; 0x1a

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    23c4:	46 85       	ldd	r20, Z+14	; 0x0e
    23c6:	57 85       	ldd	r21, Z+15	; 0x0f
    23c8:	60 89       	ldd	r22, Z+16	; 0x10
    23ca:	71 89       	ldd	r23, Z+17	; 0x11
    23cc:	77 23       	and	r23, r23
    23ce:	64 f0       	brlt	.+24     	; 0x23e8 <vTaskPriorityDisinheritAfterTimeout+0x4e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    23d0:	4a e0       	ldi	r20, 0x0A	; 10
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	48 1b       	sub	r20, r24
    23da:	51 09       	sbc	r21, r1
    23dc:	61 09       	sbc	r22, r1
    23de:	71 09       	sbc	r23, r1
    23e0:	46 87       	std	Z+14, r20	; 0x0e
    23e2:	57 87       	std	Z+15, r21	; 0x0f
    23e4:	60 8b       	std	Z+16, r22	; 0x10
    23e6:	71 8b       	std	Z+17, r23	; 0x11
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    23e8:	24 85       	ldd	r18, Z+12	; 0x0c
    23ea:	35 85       	ldd	r19, Z+13	; 0x0d
    23ec:	4b e0       	ldi	r20, 0x0B	; 11
    23ee:	94 9f       	mul	r25, r20
    23f0:	c0 01       	movw	r24, r0
    23f2:	11 24       	eor	r1, r1
    23f4:	89 52       	subi	r24, 0x29	; 41
    23f6:	92 4f       	sbci	r25, 0xF2	; 242
    23f8:	28 17       	cp	r18, r24
    23fa:	39 07       	cpc	r19, r25
    23fc:	81 f5       	brne	.+96     	; 0x245e <vTaskPriorityDisinheritAfterTimeout+0xc4>
    23fe:	ef 01       	movw	r28, r30
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2400:	8f 01       	movw	r16, r30
    2402:	0e 5f       	subi	r16, 0xFE	; 254
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	c8 01       	movw	r24, r16
    2408:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
    240c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    240e:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <uxTopReadyPriority>
    2412:	8e 17       	cp	r24, r30
    2414:	10 f4       	brcc	.+4      	; 0x241a <vTaskPriorityDisinheritAfterTimeout+0x80>
    2416:	e0 93 95 0d 	sts	0x0D95, r30	; 0x800d95 <uxTopReadyPriority>
    241a:	8b e0       	ldi	r24, 0x0B	; 11
    241c:	8e 9f       	mul	r24, r30
    241e:	f0 01       	movw	r30, r0
    2420:	11 24       	eor	r1, r1
    2422:	e9 52       	subi	r30, 0x29	; 41
    2424:	f2 4f       	sbci	r31, 0xF2	; 242
    2426:	01 80       	ldd	r0, Z+1	; 0x01
    2428:	f2 81       	ldd	r31, Z+2	; 0x02
    242a:	e0 2d       	mov	r30, r0
    242c:	ff 83       	std	Y+7, r31	; 0x07
    242e:	ee 83       	std	Y+6, r30	; 0x06
    2430:	26 81       	ldd	r18, Z+6	; 0x06
    2432:	37 81       	ldd	r19, Z+7	; 0x07
    2434:	39 87       	std	Y+9, r19	; 0x09
    2436:	28 87       	std	Y+8, r18	; 0x08
    2438:	a6 81       	ldd	r26, Z+6	; 0x06
    243a:	b7 81       	ldd	r27, Z+7	; 0x07
    243c:	15 96       	adiw	r26, 0x05	; 5
    243e:	1c 93       	st	X, r17
    2440:	0e 93       	st	-X, r16
    2442:	14 97       	sbiw	r26, 0x04	; 4
    2444:	17 83       	std	Z+7, r17	; 0x07
    2446:	06 83       	std	Z+6, r16	; 0x06
    2448:	ea 8d       	ldd	r30, Y+26	; 0x1a
    244a:	8e 9f       	mul	r24, r30
    244c:	f0 01       	movw	r30, r0
    244e:	11 24       	eor	r1, r1
    2450:	e9 52       	subi	r30, 0x29	; 41
    2452:	f2 4f       	sbci	r31, 0xF2	; 242
    2454:	fd 87       	std	Y+13, r31	; 0x0d
    2456:	ec 87       	std	Y+12, r30	; 0x0c
    2458:	80 81       	ld	r24, Z
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	80 83       	st	Z, r24
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	08 95       	ret

00002468 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    2468:	cf 92       	push	r12
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    2470:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    2474:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    2478:	66 85       	ldd	r22, Z+14	; 0x0e
    247a:	77 85       	ldd	r23, Z+15	; 0x0f
    247c:	80 89       	ldd	r24, Z+16	; 0x10
    247e:	91 89       	ldd	r25, Z+17	; 0x11

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2480:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    2484:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    2488:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <pxCurrentTCB>
    248c:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    2490:	5a 96       	adiw	r26, 0x1a	; 26
    2492:	2c 91       	ld	r18, X
    2494:	0f 2e       	mov	r0, r31
    2496:	fa e0       	ldi	r31, 0x0A	; 10
    2498:	cf 2e       	mov	r12, r31
    249a:	d1 2c       	mov	r13, r1
    249c:	e1 2c       	mov	r14, r1
    249e:	f1 2c       	mov	r15, r1
    24a0:	f0 2d       	mov	r31, r0
    24a2:	c2 1a       	sub	r12, r18
    24a4:	d1 08       	sbc	r13, r1
    24a6:	e1 08       	sbc	r14, r1
    24a8:	f1 08       	sbc	r15, r1
    24aa:	c6 86       	std	Z+14, r12	; 0x0e
    24ac:	d7 86       	std	Z+15, r13	; 0x0f
    24ae:	e0 8a       	std	Z+16, r14	; 0x10
    24b0:	f1 8a       	std	Z+17, r15	; 0x11

    return uxReturn;
}
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	df 90       	pop	r13
    24b8:	cf 90       	pop	r12
    24ba:	08 95       	ret

000024bc <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    24bc:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    24c0:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    24c4:	89 2b       	or	r24, r25
    24c6:	39 f0       	breq	.+14     	; 0x24d6 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    24c8:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <pxCurrentTCB>
    24cc:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    24d0:	86 a5       	ldd	r24, Z+46	; 0x2e
    24d2:	8f 5f       	subi	r24, 0xFF	; 255
    24d4:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    24d6:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <pxCurrentTCB>
    24da:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <pxCurrentTCB+0x1>
    }
    24de:	08 95       	ret

000024e0 <prvGetNextExpireTime>:
    24e0:	dc 01       	movw	r26, r24
    24e2:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <pxCurrentTimerList>
    24e6:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <pxCurrentTimerList+0x1>
    24ea:	80 81       	ld	r24, Z
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	81 11       	cpse	r24, r1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 93       	st	X, r25
    24f4:	91 11       	cpse	r25, r1
    24f6:	08 c0       	rjmp	.+16     	; 0x2508 <prvGetNextExpireTime+0x28>
    24f8:	07 80       	ldd	r0, Z+7	; 0x07
    24fa:	f0 85       	ldd	r31, Z+8	; 0x08
    24fc:	e0 2d       	mov	r30, r0
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	08 95       	ret
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	cb 01       	movw	r24, r22
    250e:	08 95       	ret

00002510 <prvInsertTimerInActiveList>:
    2510:	cf 92       	push	r12
    2512:	df 92       	push	r13
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	0f 93       	push	r16
    251a:	1f 93       	push	r17
    251c:	fc 01       	movw	r30, r24
    251e:	42 83       	std	Z+2, r20	; 0x02
    2520:	53 83       	std	Z+3, r21	; 0x03
    2522:	64 83       	std	Z+4, r22	; 0x04
    2524:	75 83       	std	Z+5, r23	; 0x05
    2526:	93 87       	std	Z+11, r25	; 0x0b
    2528:	82 87       	std	Z+10, r24	; 0x0a
    252a:	04 17       	cp	r16, r20
    252c:	15 07       	cpc	r17, r21
    252e:	26 07       	cpc	r18, r22
    2530:	37 07       	cpc	r19, r23
    2532:	c0 f0       	brcs	.+48     	; 0x2564 <prvInsertTimerInActiveList+0x54>
    2534:	0c 19       	sub	r16, r12
    2536:	1d 09       	sbc	r17, r13
    2538:	2e 09       	sbc	r18, r14
    253a:	3f 09       	sbc	r19, r15
    253c:	86 85       	ldd	r24, Z+14	; 0x0e
    253e:	97 85       	ldd	r25, Z+15	; 0x0f
    2540:	a0 89       	ldd	r26, Z+16	; 0x10
    2542:	b1 89       	ldd	r27, Z+17	; 0x11
    2544:	08 17       	cp	r16, r24
    2546:	19 07       	cpc	r17, r25
    2548:	2a 07       	cpc	r18, r26
    254a:	3b 07       	cpc	r19, r27
    254c:	00 f5       	brcc	.+64     	; 0x258e <prvInsertTimerInActiveList+0x7e>
    254e:	bf 01       	movw	r22, r30
    2550:	6e 5f       	subi	r22, 0xFE	; 254
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	80 91 4f 0e 	lds	r24, 0x0E4F	; 0x800e4f <pxOverflowTimerList>
    2558:	90 91 50 0e 	lds	r25, 0x0E50	; 0x800e50 <pxOverflowTimerList+0x1>
    255c:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	18 c0       	rjmp	.+48     	; 0x2594 <prvInsertTimerInActiveList+0x84>
    2564:	0c 15       	cp	r16, r12
    2566:	1d 05       	cpc	r17, r13
    2568:	2e 05       	cpc	r18, r14
    256a:	3f 05       	cpc	r19, r15
    256c:	28 f4       	brcc	.+10     	; 0x2578 <prvInsertTimerInActiveList+0x68>
    256e:	4c 15       	cp	r20, r12
    2570:	5d 05       	cpc	r21, r13
    2572:	6e 05       	cpc	r22, r14
    2574:	7f 05       	cpc	r23, r15
    2576:	68 f4       	brcc	.+26     	; 0x2592 <prvInsertTimerInActiveList+0x82>
    2578:	bf 01       	movw	r22, r30
    257a:	6e 5f       	subi	r22, 0xFE	; 254
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	80 91 51 0e 	lds	r24, 0x0E51	; 0x800e51 <pxCurrentTimerList>
    2582:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <pxCurrentTimerList+0x1>
    2586:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <prvInsertTimerInActiveList+0x84>
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	01 c0       	rjmp	.+2      	; 0x2594 <prvInsertTimerInActiveList+0x84>
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	ff 90       	pop	r15
    259a:	ef 90       	pop	r14
    259c:	df 90       	pop	r13
    259e:	cf 90       	pop	r12
    25a0:	08 95       	ret

000025a2 <prvCheckForValidListAndQueue>:
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	0f 92       	push	r0
    25a8:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <xTimerQueue>
    25ac:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <xTimerQueue+0x1>
    25b0:	89 2b       	or	r24, r25
    25b2:	e9 f4       	brne	.+58     	; 0x25ee <prvCheckForValidListAndQueue+0x4c>
    25b4:	8e e5       	ldi	r24, 0x5E	; 94
    25b6:	9e e0       	ldi	r25, 0x0E	; 14
    25b8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    25bc:	83 e5       	ldi	r24, 0x53	; 83
    25be:	9e e0       	ldi	r25, 0x0E	; 14
    25c0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialise>
    25c4:	8e e5       	ldi	r24, 0x5E	; 94
    25c6:	9e e0       	ldi	r25, 0x0E	; 14
    25c8:	90 93 52 0e 	sts	0x0E52, r25	; 0x800e52 <pxCurrentTimerList+0x1>
    25cc:	80 93 51 0e 	sts	0x0E51, r24	; 0x800e51 <pxCurrentTimerList>
    25d0:	83 e5       	ldi	r24, 0x53	; 83
    25d2:	9e e0       	ldi	r25, 0x0E	; 14
    25d4:	90 93 50 0e 	sts	0x0E50, r25	; 0x800e50 <pxOverflowTimerList+0x1>
    25d8:	80 93 4f 0e 	sts	0x0E4F, r24	; 0x800e4f <pxOverflowTimerList>
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	67 e0       	ldi	r22, 0x07	; 7
    25e0:	8a e0       	ldi	r24, 0x0A	; 10
    25e2:	0e 94 14 07 	call	0xe28	; 0xe28 <xQueueGenericCreate>
    25e6:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <xTimerQueue+0x1>
    25ea:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <xTimerQueue>
    25ee:	0f 90       	pop	r0
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	08 95       	ret

000025f4 <xTimerCreateTimerTask>:
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	0f 93       	push	r16
    25fa:	d3 df       	rcall	.-90     	; 0x25a2 <prvCheckForValidListAndQueue>
    25fc:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <xTimerQueue>
    2600:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <xTimerQueue+0x1>
    2604:	89 2b       	or	r24, r25
    2606:	89 f0       	breq	.+34     	; 0x262a <xTimerCreateTimerTask+0x36>
    2608:	0f 2e       	mov	r0, r31
    260a:	fb e4       	ldi	r31, 0x4B	; 75
    260c:	ef 2e       	mov	r14, r31
    260e:	fe e0       	ldi	r31, 0x0E	; 14
    2610:	ff 2e       	mov	r15, r31
    2612:	f0 2d       	mov	r31, r0
    2614:	03 e0       	ldi	r16, 0x03	; 3
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 ec       	ldi	r20, 0xC0	; 192
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	67 e9       	ldi	r22, 0x97	; 151
    2620:	72 e0       	ldi	r23, 0x02	; 2
    2622:	87 ed       	ldi	r24, 0xD7	; 215
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	46 d8       	rcall	.-3956   	; 0x16b4 <xTaskCreate>
    2628:	01 c0       	rjmp	.+2      	; 0x262c <xTimerCreateTimerTask+0x38>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	08 95       	ret

00002634 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2634:	8f 92       	push	r8
    2636:	9f 92       	push	r9
    2638:	af 92       	push	r10
    263a:	bf 92       	push	r11
    263c:	cf 92       	push	r12
    263e:	df 92       	push	r13
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	27 97       	sbiw	r28, 0x07	; 7
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    265c:	e0 91 4d 0e 	lds	r30, 0x0E4D	; 0x800e4d <xTimerQueue>
    2660:	f0 91 4e 0e 	lds	r31, 0x0E4E	; 0x800e4e <xTimerQueue+0x1>
    2664:	30 97       	sbiw	r30, 0x00	; 0
    2666:	81 f1       	breq	.+96     	; 0x26c8 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2668:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    266a:	2a 83       	std	Y+2, r18	; 0x02
    266c:	3b 83       	std	Y+3, r19	; 0x03
    266e:	4c 83       	std	Y+4, r20	; 0x04
    2670:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2672:	9f 83       	std	Y+7, r25	; 0x07
    2674:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2676:	66 30       	cpi	r22, 0x06	; 6
    2678:	f4 f4       	brge	.+60     	; 0x26b6 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    267a:	9f dd       	rcall	.-1218   	; 0x21ba <xTaskGetSchedulerState>
    267c:	82 30       	cpi	r24, 0x02	; 2
    267e:	69 f4       	brne	.+26     	; 0x269a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2680:	00 e0       	ldi	r16, 0x00	; 0
    2682:	a7 01       	movw	r20, r14
    2684:	96 01       	movw	r18, r12
    2686:	be 01       	movw	r22, r28
    2688:	6f 5f       	subi	r22, 0xFF	; 255
    268a:	7f 4f       	sbci	r23, 0xFF	; 255
    268c:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <xTimerQueue>
    2690:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <xTimerQueue+0x1>
    2694:	0e 94 37 07 	call	0xe6e	; 0xe6e <xQueueGenericSend>
    2698:	18 c0       	rjmp	.+48     	; 0x26ca <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    269a:	00 e0       	ldi	r16, 0x00	; 0
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	a9 01       	movw	r20, r18
    26a2:	be 01       	movw	r22, r28
    26a4:	6f 5f       	subi	r22, 0xFF	; 255
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <xTimerQueue>
    26ac:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <xTimerQueue+0x1>
    26b0:	0e 94 37 07 	call	0xe6e	; 0xe6e <xQueueGenericSend>
    26b4:	0a c0       	rjmp	.+20     	; 0x26ca <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	a8 01       	movw	r20, r16
    26ba:	be 01       	movw	r22, r28
    26bc:	6f 5f       	subi	r22, 0xFF	; 255
    26be:	7f 4f       	sbci	r23, 0xFF	; 255
    26c0:	cf 01       	movw	r24, r30
    26c2:	0e 94 c4 07 	call	0xf88	; 0xf88 <xQueueGenericSendFromISR>
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    26c8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    26ca:	27 96       	adiw	r28, 0x07	; 7
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	df 90       	pop	r13
    26e4:	cf 90       	pop	r12
    26e6:	bf 90       	pop	r11
    26e8:	af 90       	pop	r10
    26ea:	9f 90       	pop	r9
    26ec:	8f 90       	pop	r8
    26ee:	08 95       	ret

000026f0 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    26f0:	8f 92       	push	r8
    26f2:	9f 92       	push	r9
    26f4:	af 92       	push	r10
    26f6:	bf 92       	push	r11
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2708:	3b c0       	rjmp	.+118    	; 0x2780 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    270a:	07 80       	ldd	r0, Z+7	; 0x07
    270c:	f0 85       	ldd	r31, Z+8	; 0x08
    270e:	e0 2d       	mov	r30, r0
    2710:	80 80       	ld	r8, Z
    2712:	91 80       	ldd	r9, Z+1	; 0x01
    2714:	a2 80       	ldd	r10, Z+2	; 0x02
    2716:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2718:	c0 85       	ldd	r28, Z+8	; 0x08
    271a:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    271c:	8e 01       	movw	r16, r28
    271e:	0e 5f       	subi	r16, 0xFE	; 254
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	c8 01       	movw	r24, r16
    2724:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2728:	ec 89       	ldd	r30, Y+20	; 0x14
    272a:	fd 89       	ldd	r31, Y+21	; 0x15
    272c:	ce 01       	movw	r24, r28
    272e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2730:	8e 89       	ldd	r24, Y+22	; 0x16
    2732:	82 ff       	sbrs	r24, 2
    2734:	25 c0       	rjmp	.+74     	; 0x2780 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2736:	8e 85       	ldd	r24, Y+14	; 0x0e
    2738:	9f 85       	ldd	r25, Y+15	; 0x0f
    273a:	a8 89       	ldd	r26, Y+16	; 0x10
    273c:	b9 89       	ldd	r27, Y+17	; 0x11
    273e:	88 0d       	add	r24, r8
    2740:	99 1d       	adc	r25, r9
    2742:	aa 1d       	adc	r26, r10
    2744:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2746:	88 16       	cp	r8, r24
    2748:	99 06       	cpc	r9, r25
    274a:	aa 06       	cpc	r10, r26
    274c:	bb 06       	cpc	r11, r27
    274e:	70 f4       	brcc	.+28     	; 0x276c <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2750:	8a 83       	std	Y+2, r24	; 0x02
    2752:	9b 83       	std	Y+3, r25	; 0x03
    2754:	ac 83       	std	Y+4, r26	; 0x04
    2756:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2758:	db 87       	std	Y+11, r29	; 0x0b
    275a:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    275c:	b8 01       	movw	r22, r16
    275e:	80 91 51 0e 	lds	r24, 0x0E51	; 0x800e51 <pxCurrentTimerList>
    2762:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <pxCurrentTimerList+0x1>
    2766:	0e 94 67 04 	call	0x8ce	; 0x8ce <vListInsert>
    276a:	0a c0       	rjmp	.+20     	; 0x2780 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    276c:	c1 2c       	mov	r12, r1
    276e:	d1 2c       	mov	r13, r1
    2770:	76 01       	movw	r14, r12
    2772:	00 e0       	ldi	r16, 0x00	; 0
    2774:	10 e0       	ldi	r17, 0x00	; 0
    2776:	a5 01       	movw	r20, r10
    2778:	94 01       	movw	r18, r8
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	ce 01       	movw	r24, r28
    277e:	5a df       	rcall	.-332    	; 0x2634 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2780:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <pxCurrentTimerList>
    2784:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <pxCurrentTimerList+0x1>
    2788:	80 81       	ld	r24, Z
    278a:	81 11       	cpse	r24, r1
    278c:	be cf       	rjmp	.-132    	; 0x270a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    278e:	80 91 4f 0e 	lds	r24, 0x0E4F	; 0x800e4f <pxOverflowTimerList>
    2792:	90 91 50 0e 	lds	r25, 0x0E50	; 0x800e50 <pxOverflowTimerList+0x1>
    2796:	90 93 52 0e 	sts	0x0E52, r25	; 0x800e52 <pxCurrentTimerList+0x1>
    279a:	80 93 51 0e 	sts	0x0E51, r24	; 0x800e51 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    279e:	f0 93 50 0e 	sts	0x0E50, r31	; 0x800e50 <pxOverflowTimerList+0x1>
    27a2:	e0 93 4f 0e 	sts	0x0E4F, r30	; 0x800e4f <pxOverflowTimerList>
    }
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	1f 91       	pop	r17
    27ac:	0f 91       	pop	r16
    27ae:	ff 90       	pop	r15
    27b0:	ef 90       	pop	r14
    27b2:	df 90       	pop	r13
    27b4:	cf 90       	pop	r12
    27b6:	bf 90       	pop	r11
    27b8:	af 90       	pop	r10
    27ba:	9f 90       	pop	r9
    27bc:	8f 90       	pop	r8
    27be:	08 95       	ret

000027c0 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    27c0:	cf 92       	push	r12
    27c2:	df 92       	push	r13
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    27ce:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xTaskGetTickCount>
    27d2:	6b 01       	movw	r12, r22
    27d4:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    27d6:	80 91 47 0e 	lds	r24, 0x0E47	; 0x800e47 <xLastTime.2436>
    27da:	90 91 48 0e 	lds	r25, 0x0E48	; 0x800e48 <xLastTime.2436+0x1>
    27de:	a0 91 49 0e 	lds	r26, 0x0E49	; 0x800e49 <xLastTime.2436+0x2>
    27e2:	b0 91 4a 0e 	lds	r27, 0x0E4A	; 0x800e4a <xLastTime.2436+0x3>
    27e6:	c8 16       	cp	r12, r24
    27e8:	d9 06       	cpc	r13, r25
    27ea:	ea 06       	cpc	r14, r26
    27ec:	fb 06       	cpc	r15, r27
    27ee:	20 f4       	brcc	.+8      	; 0x27f8 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    27f0:	7f df       	rcall	.-258    	; 0x26f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	88 83       	st	Y, r24
    27f6:	01 c0       	rjmp	.+2      	; 0x27fa <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    27f8:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    27fa:	c0 92 47 0e 	sts	0x0E47, r12	; 0x800e47 <xLastTime.2436>
    27fe:	d0 92 48 0e 	sts	0x0E48, r13	; 0x800e48 <xLastTime.2436+0x1>
    2802:	e0 92 49 0e 	sts	0x0E49, r14	; 0x800e49 <xLastTime.2436+0x2>
    2806:	f0 92 4a 0e 	sts	0x0E4A, r15	; 0x800e4a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    280a:	c7 01       	movw	r24, r14
    280c:	b6 01       	movw	r22, r12
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	ff 90       	pop	r15
    2814:	ef 90       	pop	r14
    2816:	df 90       	pop	r13
    2818:	cf 90       	pop	r12
    281a:	08 95       	ret

0000281c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    281c:	4f 92       	push	r4
    281e:	5f 92       	push	r5
    2820:	6f 92       	push	r6
    2822:	7f 92       	push	r7
    2824:	8f 92       	push	r8
    2826:	9f 92       	push	r9
    2828:	af 92       	push	r10
    282a:	bf 92       	push	r11
    282c:	cf 92       	push	r12
    282e:	df 92       	push	r13
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	4b 01       	movw	r8, r22
    283e:	5c 01       	movw	r10, r24
    2840:	29 01       	movw	r4, r18
    2842:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2844:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <pxCurrentTimerList>
    2848:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <pxCurrentTimerList+0x1>
    284c:	07 80       	ldd	r0, Z+7	; 0x07
    284e:	f0 85       	ldd	r31, Z+8	; 0x08
    2850:	e0 2d       	mov	r30, r0
    2852:	c0 85       	ldd	r28, Z+8	; 0x08
    2854:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2856:	ce 01       	movw	r24, r28
    2858:	02 96       	adiw	r24, 0x02	; 2
    285a:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    285e:	8e 89       	ldd	r24, Y+22	; 0x16
    2860:	82 ff       	sbrs	r24, 2
    2862:	1b c0       	rjmp	.+54     	; 0x289a <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2864:	4e 85       	ldd	r20, Y+14	; 0x0e
    2866:	5f 85       	ldd	r21, Y+15	; 0x0f
    2868:	68 89       	ldd	r22, Y+16	; 0x10
    286a:	79 89       	ldd	r23, Y+17	; 0x11
    286c:	48 0d       	add	r20, r8
    286e:	59 1d       	adc	r21, r9
    2870:	6a 1d       	adc	r22, r10
    2872:	7b 1d       	adc	r23, r11
    2874:	75 01       	movw	r14, r10
    2876:	64 01       	movw	r12, r8
    2878:	93 01       	movw	r18, r6
    287a:	82 01       	movw	r16, r4
    287c:	ce 01       	movw	r24, r28
    287e:	48 de       	rcall	.-880    	; 0x2510 <prvInsertTimerInActiveList>
    2880:	88 23       	and	r24, r24
    2882:	69 f0       	breq	.+26     	; 0x289e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2884:	c1 2c       	mov	r12, r1
    2886:	d1 2c       	mov	r13, r1
    2888:	76 01       	movw	r14, r12
    288a:	00 e0       	ldi	r16, 0x00	; 0
    288c:	10 e0       	ldi	r17, 0x00	; 0
    288e:	a5 01       	movw	r20, r10
    2890:	94 01       	movw	r18, r8
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	ce 01       	movw	r24, r28
    2896:	ce de       	rcall	.-612    	; 0x2634 <xTimerGenericCommand>
    2898:	02 c0       	rjmp	.+4      	; 0x289e <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    289a:	8e 7f       	andi	r24, 0xFE	; 254
    289c:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    289e:	ec 89       	ldd	r30, Y+20	; 0x14
    28a0:	fd 89       	ldd	r31, Y+21	; 0x15
    28a2:	ce 01       	movw	r24, r28
    28a4:	19 95       	eicall
    }
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	ff 90       	pop	r15
    28b0:	ef 90       	pop	r14
    28b2:	df 90       	pop	r13
    28b4:	cf 90       	pop	r12
    28b6:	bf 90       	pop	r11
    28b8:	af 90       	pop	r10
    28ba:	9f 90       	pop	r9
    28bc:	8f 90       	pop	r8
    28be:	7f 90       	pop	r7
    28c0:	6f 90       	pop	r6
    28c2:	5f 90       	pop	r5
    28c4:	4f 90       	pop	r4
    28c6:	08 95       	ret

000028c8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    28c8:	8f 92       	push	r8
    28ca:	9f 92       	push	r9
    28cc:	af 92       	push	r10
    28ce:	bf 92       	push	r11
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	1f 92       	push	r1
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	6b 01       	movw	r12, r22
    28e6:	7c 01       	movw	r14, r24
    28e8:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    28ea:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    28ee:	ce 01       	movw	r24, r28
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	66 df       	rcall	.-308    	; 0x27c0 <prvSampleTimeNow>
    28f4:	4b 01       	movw	r8, r22
    28f6:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	81 11       	cpse	r24, r1
    28fc:	2b c0       	rjmp	.+86     	; 0x2954 <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    28fe:	11 11       	cpse	r17, r1
    2900:	0c c0       	rjmp	.+24     	; 0x291a <prvProcessTimerOrBlockTask+0x52>
    2902:	8c 14       	cp	r8, r12
    2904:	9d 04       	cpc	r9, r13
    2906:	ae 04       	cpc	r10, r14
    2908:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    290a:	38 f0       	brcs	.+14     	; 0x291a <prvProcessTimerOrBlockTask+0x52>
    290c:	94 d8       	rcall	.-3800   	; 0x1a36 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    290e:	a5 01       	movw	r20, r10
    2910:	94 01       	movw	r18, r8
    2912:	c7 01       	movw	r24, r14
    2914:	b6 01       	movw	r22, r12
    2916:	82 df       	rcall	.-252    	; 0x281c <prvProcessExpiredTimer>
    2918:	1e c0       	rjmp	.+60     	; 0x2956 <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    291a:	11 23       	and	r17, r17
    291c:	41 f0       	breq	.+16     	; 0x292e <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    291e:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <pxOverflowTimerList>
    2922:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <pxOverflowTimerList+0x1>
    2926:	80 81       	ld	r24, Z
    2928:	11 e0       	ldi	r17, 0x01	; 1
    292a:	81 11       	cpse	r24, r1
    292c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    292e:	b7 01       	movw	r22, r14
    2930:	a6 01       	movw	r20, r12
    2932:	48 19       	sub	r20, r8
    2934:	59 09       	sbc	r21, r9
    2936:	6a 09       	sbc	r22, r10
    2938:	7b 09       	sbc	r23, r11
    293a:	21 2f       	mov	r18, r17
    293c:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <xTimerQueue>
    2940:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <xTimerQueue+0x1>
    2944:	0e 94 37 09 	call	0x126e	; 0x126e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2948:	76 d8       	rcall	.-3860   	; 0x1a36 <xTaskResumeAll>
    294a:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    294c:	04 c0       	rjmp	.+8      	; 0x2956 <prvProcessTimerOrBlockTask+0x8e>
    294e:	0e 94 20 05 	call	0xa40	; 0xa40 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2952:	01 c0       	rjmp	.+2      	; 0x2956 <prvProcessTimerOrBlockTask+0x8e>
    2954:	70 d8       	rcall	.-3872   	; 0x1a36 <xTaskResumeAll>
            }
        }
    }
    2956:	0f 90       	pop	r0
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	ff 90       	pop	r15
    2960:	ef 90       	pop	r14
    2962:	df 90       	pop	r13
    2964:	cf 90       	pop	r12
    2966:	bf 90       	pop	r11
    2968:	af 90       	pop	r10
    296a:	9f 90       	pop	r9
    296c:	8f 90       	pop	r8
    296e:	08 95       	ret

00002970 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2970:	af 92       	push	r10
    2972:	bf 92       	push	r11
    2974:	cf 92       	push	r12
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	28 97       	sbiw	r28, 0x08	; 8
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2994:	82 c0       	rjmp	.+260    	; 0x2a9a <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	88 23       	and	r24, r24
    299a:	0c f4       	brge	.+2      	; 0x299e <prvProcessReceivedCommands+0x2e>
    299c:	7e c0       	rjmp	.+252    	; 0x2a9a <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    299e:	ae 80       	ldd	r10, Y+6	; 0x06
    29a0:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    29a2:	d5 01       	movw	r26, r10
    29a4:	1c 96       	adiw	r26, 0x0c	; 12
    29a6:	8d 91       	ld	r24, X+
    29a8:	9c 91       	ld	r25, X
    29aa:	1d 97       	sbiw	r26, 0x0d	; 13
    29ac:	89 2b       	or	r24, r25
    29ae:	21 f0       	breq	.+8      	; 0x29b8 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29b0:	c5 01       	movw	r24, r10
    29b2:	02 96       	adiw	r24, 0x02	; 2
    29b4:	0e 94 a4 04 	call	0x948	; 0x948 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    29b8:	ce 01       	movw	r24, r28
    29ba:	08 96       	adiw	r24, 0x08	; 8
    29bc:	01 df       	rcall	.-510    	; 0x27c0 <prvSampleTimeNow>
    29be:	8b 01       	movw	r16, r22
    29c0:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    29c2:	e9 81       	ldd	r30, Y+1	; 0x01
    29c4:	0e 2e       	mov	r0, r30
    29c6:	00 0c       	add	r0, r0
    29c8:	ff 0b       	sbc	r31, r31
    29ca:	ea 30       	cpi	r30, 0x0A	; 10
    29cc:	f1 05       	cpc	r31, r1
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <prvProcessReceivedCommands+0x62>
    29d0:	64 c0       	rjmp	.+200    	; 0x2a9a <prvProcessReceivedCommands+0x12a>
    29d2:	88 27       	eor	r24, r24
    29d4:	ee 58       	subi	r30, 0x8E	; 142
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	8f 4f       	sbci	r24, 0xFF	; 255
    29da:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    29de:	f5 01       	movw	r30, r10
    29e0:	86 89       	ldd	r24, Z+22	; 0x16
    29e2:	81 60       	ori	r24, 0x01	; 1
    29e4:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    29e6:	ca 80       	ldd	r12, Y+2	; 0x02
    29e8:	db 80       	ldd	r13, Y+3	; 0x03
    29ea:	ec 80       	ldd	r14, Y+4	; 0x04
    29ec:	fd 80       	ldd	r15, Y+5	; 0x05
    29ee:	46 85       	ldd	r20, Z+14	; 0x0e
    29f0:	57 85       	ldd	r21, Z+15	; 0x0f
    29f2:	60 89       	ldd	r22, Z+16	; 0x10
    29f4:	71 89       	ldd	r23, Z+17	; 0x11
    29f6:	4c 0d       	add	r20, r12
    29f8:	5d 1d       	adc	r21, r13
    29fa:	6e 1d       	adc	r22, r14
    29fc:	7f 1d       	adc	r23, r15
    29fe:	c5 01       	movw	r24, r10
    2a00:	87 dd       	rcall	.-1266   	; 0x2510 <prvInsertTimerInActiveList>
    2a02:	88 23       	and	r24, r24
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <prvProcessReceivedCommands+0x98>
    2a06:	49 c0       	rjmp	.+146    	; 0x2a9a <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a08:	d5 01       	movw	r26, r10
    2a0a:	54 96       	adiw	r26, 0x14	; 20
    2a0c:	ed 91       	ld	r30, X+
    2a0e:	fc 91       	ld	r31, X
    2a10:	55 97       	sbiw	r26, 0x15	; 21
    2a12:	c5 01       	movw	r24, r10
    2a14:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a16:	f5 01       	movw	r30, r10
    2a18:	86 89       	ldd	r24, Z+22	; 0x16
    2a1a:	82 ff       	sbrs	r24, 2
    2a1c:	3e c0       	rjmp	.+124    	; 0x2a9a <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2a1e:	4a 81       	ldd	r20, Y+2	; 0x02
    2a20:	5b 81       	ldd	r21, Y+3	; 0x03
    2a22:	6c 81       	ldd	r22, Y+4	; 0x04
    2a24:	7d 81       	ldd	r23, Y+5	; 0x05
    2a26:	86 85       	ldd	r24, Z+14	; 0x0e
    2a28:	97 85       	ldd	r25, Z+15	; 0x0f
    2a2a:	a0 89       	ldd	r26, Z+16	; 0x10
    2a2c:	b1 89       	ldd	r27, Z+17	; 0x11
    2a2e:	9a 01       	movw	r18, r20
    2a30:	ab 01       	movw	r20, r22
    2a32:	28 0f       	add	r18, r24
    2a34:	39 1f       	adc	r19, r25
    2a36:	4a 1f       	adc	r20, r26
    2a38:	5b 1f       	adc	r21, r27
    2a3a:	c1 2c       	mov	r12, r1
    2a3c:	d1 2c       	mov	r13, r1
    2a3e:	76 01       	movw	r14, r12
    2a40:	00 e0       	ldi	r16, 0x00	; 0
    2a42:	10 e0       	ldi	r17, 0x00	; 0
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	c5 01       	movw	r24, r10
    2a48:	f5 dd       	rcall	.-1046   	; 0x2634 <xTimerGenericCommand>
    2a4a:	27 c0       	rjmp	.+78     	; 0x2a9a <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2a4c:	d5 01       	movw	r26, r10
    2a4e:	56 96       	adiw	r26, 0x16	; 22
    2a50:	8c 91       	ld	r24, X
    2a52:	56 97       	sbiw	r26, 0x16	; 22
    2a54:	8e 7f       	andi	r24, 0xFE	; 254
    2a56:	56 96       	adiw	r26, 0x16	; 22
    2a58:	8c 93       	st	X, r24
                        break;
    2a5a:	1f c0       	rjmp	.+62     	; 0x2a9a <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2a5c:	f5 01       	movw	r30, r10
    2a5e:	86 89       	ldd	r24, Z+22	; 0x16
    2a60:	81 60       	ori	r24, 0x01	; 1
    2a62:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2a64:	4a 81       	ldd	r20, Y+2	; 0x02
    2a66:	5b 81       	ldd	r21, Y+3	; 0x03
    2a68:	6c 81       	ldd	r22, Y+4	; 0x04
    2a6a:	7d 81       	ldd	r23, Y+5	; 0x05
    2a6c:	46 87       	std	Z+14, r20	; 0x0e
    2a6e:	57 87       	std	Z+15, r21	; 0x0f
    2a70:	60 8b       	std	Z+16, r22	; 0x10
    2a72:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2a74:	40 0f       	add	r20, r16
    2a76:	51 1f       	adc	r21, r17
    2a78:	62 1f       	adc	r22, r18
    2a7a:	73 1f       	adc	r23, r19
    2a7c:	68 01       	movw	r12, r16
    2a7e:	79 01       	movw	r14, r18
    2a80:	c5 01       	movw	r24, r10
    2a82:	46 dd       	rcall	.-1396   	; 0x2510 <prvInsertTimerInActiveList>
                        break;
    2a84:	0a c0       	rjmp	.+20     	; 0x2a9a <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2a86:	f5 01       	movw	r30, r10
    2a88:	86 89       	ldd	r24, Z+22	; 0x16
    2a8a:	81 fd       	sbrc	r24, 1
    2a8c:	04 c0       	rjmp	.+8      	; 0x2a96 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2a8e:	c5 01       	movw	r24, r10
    2a90:	0e 94 16 04 	call	0x82c	; 0x82c <vPortFree>
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2a96:	8e 7f       	andi	r24, 0xFE	; 254
    2a98:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	a9 01       	movw	r20, r18
    2aa0:	be 01       	movw	r22, r28
    2aa2:	6f 5f       	subi	r22, 0xFF	; 255
    2aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa6:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <xTimerQueue>
    2aaa:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <xTimerQueue+0x1>
    2aae:	0e 94 fe 07 	call	0xffc	; 0xffc <xQueueReceive>
    2ab2:	81 11       	cpse	r24, r1
    2ab4:	70 cf       	rjmp	.-288    	; 0x2996 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2ab6:	28 96       	adiw	r28, 0x08	; 8
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	1f 91       	pop	r17
    2ac8:	0f 91       	pop	r16
    2aca:	ff 90       	pop	r15
    2acc:	ef 90       	pop	r14
    2ace:	df 90       	pop	r13
    2ad0:	cf 90       	pop	r12
    2ad2:	bf 90       	pop	r11
    2ad4:	af 90       	pop	r10
    2ad6:	08 95       	ret

00002ad8 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2ad8:	08 95       	ret

00002ada <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ada:	84 b1       	in	r24, 0x04	; 4
    2adc:	80 68       	ori	r24, 0x80	; 128
    2ade:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ae0:	85 b1       	in	r24, 0x05	; 5
    2ae2:	80 68       	ori	r24, 0x80	; 128
    2ae4:	85 b9       	out	0x05, r24	; 5
    2ae6:	08 95       	ret

00002ae8 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2ae8:	83 b1       	in	r24, 0x03	; 3
    2aea:	80 68       	ori	r24, 0x80	; 128
    2aec:	83 b9       	out	0x03, r24	; 3
    2aee:	08 95       	ret

00002af0 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2af0:	f4 df       	rcall	.-24     	; 0x2ada <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2af2:	2f ef       	ldi	r18, 0xFF	; 255
    2af4:	80 e7       	ldi	r24, 0x70	; 112
    2af6:	92 e0       	ldi	r25, 0x02	; 2
    2af8:	21 50       	subi	r18, 0x01	; 1
    2afa:	80 40       	sbci	r24, 0x00	; 0
    2afc:	90 40       	sbci	r25, 0x00	; 0
    2afe:	e1 f7       	brne	.-8      	; 0x2af8 <vApplicationMallocFailedHook+0x8>
    2b00:	00 c0       	rjmp	.+0      	; 0x2b02 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2b02:	00 00       	nop
    2b04:	f1 df       	rcall	.-30     	; 0x2ae8 <prvBlinkMainLed>
    2b06:	f5 cf       	rjmp	.-22     	; 0x2af2 <vApplicationMallocFailedHook+0x2>

00002b08 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2b08:	e8 df       	rcall	.-48     	; 0x2ada <prvSetMainLedOn>
    2b0a:	2f ef       	ldi	r18, 0xFF	; 255
    2b0c:	87 ea       	ldi	r24, 0xA7	; 167
    2b0e:	91 e6       	ldi	r25, 0x61	; 97
    2b10:	21 50       	subi	r18, 0x01	; 1
    2b12:	80 40       	sbci	r24, 0x00	; 0
    2b14:	90 40       	sbci	r25, 0x00	; 0
    2b16:	e1 f7       	brne	.-8      	; 0x2b10 <vApplicationStackOverflowHook+0x8>
    2b18:	00 c0       	rjmp	.+0      	; 0x2b1a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2b1a:	00 00       	nop
    2b1c:	e5 df       	rcall	.-54     	; 0x2ae8 <prvBlinkMainLed>
    2b1e:	f5 cf       	rjmp	.-22     	; 0x2b0a <vApplicationStackOverflowHook+0x2>

00002b20 <initializeTempAndHumiditySemaphore>:
  EventGroupHandle_t dataEventGroup;
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
    2b20:	0f 93       	push	r16
	tempHumSemaphore = xSemaphoreCreateBinary();
    2b22:	43 e0       	ldi	r20, 0x03	; 3
    2b24:	60 e0       	ldi	r22, 0x00	; 0
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	0e 94 14 07 	call	0xe28	; 0xe28 <xQueueGenericCreate>
    2b2c:	90 93 93 0e 	sts	0x0E93, r25	; 0x800e93 <tempHumSemaphore+0x1>
    2b30:	80 93 92 0e 	sts	0x0E92, r24	; 0x800e92 <tempHumSemaphore>
	xSemaphoreGive(tempHumSemaphore);
    2b34:	00 e0       	ldi	r16, 0x00	; 0
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	a9 01       	movw	r20, r18
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	70 e0       	ldi	r23, 0x00	; 0
    2b40:	0e 94 37 07 	call	0xe6e	; 0xe6e <xQueueGenericSend>
}
    2b44:	0f 91       	pop	r16
    2b46:	08 95       	ret

00002b48 <initializeQueue>:

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	62 e0       	ldi	r22, 0x02	; 2
    2b4c:	83 e0       	ldi	r24, 0x03	; 3
    2b4e:	0e 94 14 07 	call	0xe28	; 0xe28 <xQueueGenericCreate>
    2b52:	90 93 9a 0e 	sts	0x0E9A, r25	; 0x800e9a <sensorDataQueue+0x1>
    2b56:	80 93 99 0e 	sts	0x0E99, r24	; 0x800e99 <sensorDataQueue>
    2b5a:	08 95       	ret

00002b5c <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    2b5c:	0e 94 b9 01 	call	0x372	; 0x372 <xEventGroupCreate>
    2b60:	90 93 95 0e 	sts	0x0E95, r25	; 0x800e95 <dataEventGroup+0x1>
    2b64:	80 93 94 0e 	sts	0x0E94, r24	; 0x800e94 <dataEventGroup>
    2b68:	08 95       	ret

00002b6a <initializeTempAndHumDriver>:
#include "TempAndHum.h"
#include "Setup.h"

void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    2b6a:	16 d1       	rcall	.+556    	; 0x2d98 <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    2b6c:	81 11       	cpse	r24, r1
    2b6e:	05 c0       	rjmp	.+10     	; 0x2b7a <initializeTempAndHumDriver+0x10>
		{
			printf("Temp and Hum Driver Initialized ok\n");
    2b70:	8f e9       	ldi	r24, 0x9F	; 159
    2b72:	92 e0       	ldi	r25, 0x02	; 2
    2b74:	0c 94 07 21 	jmp	0x420e	; 0x420e <puts>
    2b78:	08 95       	ret
		}
		
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    2b7a:	82 ec       	ldi	r24, 0xC2	; 194
    2b7c:	92 e0       	ldi	r25, 0x02	; 2
    2b7e:	0c 94 07 21 	jmp	0x420e	; 0x420e <puts>
    2b82:	08 95       	ret

00002b84 <measureTempAndHum>:
		}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    2b84:	20 d1       	rcall	.+576    	; 0x2dc6 <hih8120_wakeup>
    2b86:	88 23       	and	r24, r24
    2b88:	21 f0       	breq	.+8      	; 0x2b92 <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    2b8a:	8c ed       	ldi	r24, 0xDC	; 220
    2b8c:	92 e0       	ldi	r25, 0x02	; 2
    2b8e:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    2b92:	63 e0       	ldi	r22, 0x03	; 3
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
	
	if ( HIH8120_OK !=  hih8120_measure() )
    2b9a:	29 d8       	rcall	.-4014   	; 0x1bee <vTaskDelay>
    2b9c:	28 d1       	rcall	.+592    	; 0x2dee <hih8120_measure>
    2b9e:	88 23       	and	r24, r24
    2ba0:	21 f0       	breq	.+8      	; 0x2baa <measureTempAndHum+0x26>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    2ba2:	8c ef       	ldi	r24, 0xFC	; 252
    2ba4:	92 e0       	ldi	r25, 0x02	; 2
    2ba6:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    2baa:	61 e0       	ldi	r22, 0x01	; 1
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	1d c8       	rjmp	.-4038   	; 0x1bee <vTaskDelay>
    2bb4:	08 95       	ret

00002bb6 <TempAndHumTask>:
	while(1)
	{
		uint16_t Temp = 0;
		uint16_t Humidity = 0;
		
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    2bb6:	4f ef       	ldi	r20, 0xFF	; 255
    2bb8:	5f ef       	ldi	r21, 0xFF	; 255
    2bba:	ba 01       	movw	r22, r20
    2bbc:	80 91 92 0e 	lds	r24, 0x0E92	; 0x800e92 <tempHumSemaphore>
    2bc0:	90 91 93 0e 	lds	r25, 0x0E93	; 0x800e93 <tempHumSemaphore+0x1>
    2bc4:	0e 94 8b 08 	call	0x1116	; 0x1116 <xQueueSemaphoreTake>
    2bc8:	81 30       	cpi	r24, 0x01	; 1
    2bca:	99 f5       	brne	.+102    	; 0x2c32 <TempAndHumTask+0x7c>
		{
			measureTempAndHum();
    2bcc:	db df       	rcall	.-74     	; 0x2b84 <measureTempAndHum>
			Temp = hih8120_getTemperature_x10();
    2bce:	52 d1       	rcall	.+676    	; 0x2e74 <hih8120_getTemperature_x10>
    2bd0:	18 2f       	mov	r17, r24
    2bd2:	09 2f       	mov	r16, r25
			Humidity = hih8120_getHumidityPercent_x10();
    2bd4:	2f d1       	rcall	.+606    	; 0x2e34 <hih8120_getHumidityPercent_x10>
    2bd6:	c8 2f       	mov	r28, r24
    2bd8:	d9 2f       	mov	r29, r25
    2bda:	0f 93       	push	r16
			printf("Temperature: %d\n",Temp);
    2bdc:	1f 93       	push	r17
    2bde:	81 e2       	ldi	r24, 0x21	; 33
    2be0:	93 e0       	ldi	r25, 0x03	; 3
    2be2:	9f 93       	push	r25
    2be4:	8f 93       	push	r24
    2be6:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <printf>
    2bea:	df 93       	push	r29
			printf("Humidity: %d\n",Humidity);
    2bec:	cf 93       	push	r28
    2bee:	82 e3       	ldi	r24, 0x32	; 50
    2bf0:	93 e0       	ldi	r25, 0x03	; 3
    2bf2:	9f 93       	push	r25
    2bf4:	8f 93       	push	r24
    2bf6:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <printf>
    2bfa:	42 e0       	ldi	r20, 0x02	; 2
			//xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
			//xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	70 e0       	ldi	r23, 0x00	; 0
    2c02:	80 91 94 0e 	lds	r24, 0x0E94	; 0x800e94 <dataEventGroup>
    2c06:	90 91 95 0e 	lds	r25, 0x0E95	; 0x800e95 <dataEventGroup+0x1>
    2c0a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <xEventGroupSetBits>
    2c0e:	80 e4       	ldi	r24, 0x40	; 64
			//xSemaphoreGive(tempHumSemaphore);
			printf("Temp mesured\n");
    2c10:	93 e0       	ldi	r25, 0x03	; 3
    2c12:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
    2c16:	6c e2       	ldi	r22, 0x2C	; 44
			vTaskDelay(300);
    2c18:	71 e0       	ldi	r23, 0x01	; 1
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <vTaskDelay>
    2c22:	8d b7       	in	r24, 0x3d	; 61
    2c24:	9e b7       	in	r25, 0x3e	; 62
    2c26:	08 96       	adiw	r24, 0x08	; 8
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	9e bf       	out	0x3e, r25	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	8d bf       	out	0x3d, r24	; 61
    2c32:	6c e2       	ldi	r22, 0x2C	; 44
		else
		{
			//printf("Temp not measured\n");
		}
		
		vTaskDelay(300);
    2c34:	71 e0       	ldi	r23, 0x01	; 1
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <vTaskDelay>
    2c3e:	bb cf       	rjmp	.-138    	; 0x2bb6 <TempAndHumTask>

00002c40 <createTempAndHumTask>:
		
	}
    2c40:	ef 92       	push	r14
}

void createTempAndHumTask(void* pvpParameter)
{
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
	initializeTempAndHumDriver();
    2c46:	91 df       	rcall	.-222    	; 0x2b6a <initializeTempAndHumDriver>
		xTaskCreate(
    2c48:	e1 2c       	mov	r14, r1
    2c4a:	f1 2c       	mov	r15, r1
    2c4c:	01 e0       	ldi	r16, 0x01	; 1
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 ec       	ldi	r20, 0xC0	; 192
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	6d e4       	ldi	r22, 0x4D	; 77
    2c58:	73 e0       	ldi	r23, 0x03	; 3
    2c5a:	8b ed       	ldi	r24, 0xDB	; 219
    2c5c:	95 e1       	ldi	r25, 0x15	; 21
    2c5e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xTaskCreate>
		,  "TempAndHumTask"  // A name just for humans
		,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	08 95       	ret

00002c6a <ApplicationTask>:
	const TickType_t xTicksToWait = 500 / portTICK_PERIOD_MS;
	for (;;)
	{
		
	//	printf("Before EventBits\n");
		EventBits_t eventBits = xEventGroupWaitBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,portMAX_DELAY);
    2c6a:	cc 24       	eor	r12, r12
    2c6c:	ca 94       	dec	r12
    2c6e:	dc 2c       	mov	r13, r12
    2c70:	76 01       	movw	r14, r12
    2c72:	01 e0       	ldi	r16, 0x01	; 1
    2c74:	21 e0       	ldi	r18, 0x01	; 1
    2c76:	43 e0       	ldi	r20, 0x03	; 3
    2c78:	50 e0       	ldi	r21, 0x00	; 0
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	80 91 94 0e 	lds	r24, 0x0E94	; 0x800e94 <dataEventGroup>
    2c82:	90 91 95 0e 	lds	r25, 0x0E95	; 0x800e95 <dataEventGroup+0x1>
    2c86:	0e 94 cc 01 	call	0x398	; 0x398 <xEventGroupWaitBits>
	//	printf("After\n");
		if((eventBits &(BIT_CO2 | BIT_HUMIDITY_TEMPERATURE))==(BIT_CO2|BIT_HUMIDITY_TEMPERATURE))
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	83 70       	andi	r24, 0x03	; 3
    2c90:	99 27       	eor	r25, r25
    2c92:	aa 27       	eor	r26, r26
    2c94:	bb 27       	eor	r27, r27
    2c96:	03 97       	sbiw	r24, 0x03	; 3
    2c98:	a1 05       	cpc	r26, r1
    2c9a:	b1 05       	cpc	r27, r1
    2c9c:	79 f4       	brne	.+30     	; 0x2cbc <ApplicationTask+0x52>
		{
			printf("All Data Colected;");
    2c9e:	8c e5       	ldi	r24, 0x5C	; 92
    2ca0:	93 e0       	ldi	r25, 0x03	; 3
    2ca2:	9f 93       	push	r25
    2ca4:	8f 93       	push	r24
    2ca6:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <printf>
////			xEventGroupClearBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2);
			vTaskDelay(pdMS_TO_TICKS(1000));
    2caa:	6e e3       	ldi	r22, 0x3E	; 62
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <vTaskDelay>
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	04 c0       	rjmp	.+8      	; 0x2cc4 <ApplicationTask+0x5a>
			
		}
		else{
			printf("GIVE TEMP SEMP\n");
    2cbc:	8f e6       	ldi	r24, 0x6F	; 111
    2cbe:	93 e0       	ldi	r25, 0x03	; 3
    2cc0:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
			//xSemaphoreGive(tempHumSemaphore);
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
    2cc4:	6e e3       	ldi	r22, 0x3E	; 62
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <vTaskDelay>
		
	}
    2cd0:	cc cf       	rjmp	.-104    	; 0x2c6a <ApplicationTask>

00002cd2 <initializeUsedData>:
void ApplicationTask();
//void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

void initializeUsedData()
{
	printf("DATA");
    2cd2:	8e e7       	ldi	r24, 0x7E	; 126
    2cd4:	93 e0       	ldi	r25, 0x03	; 3
    2cd6:	9f 93       	push	r25
    2cd8:	8f 93       	push	r24
    2cda:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <printf>
	initializeEventGroup();
    2cde:	3e df       	rcall	.-388    	; 0x2b5c <initializeEventGroup>
	initializeQueue();
    2ce0:	33 df       	rcall	.-410    	; 0x2b48 <initializeQueue>
	initializeTempAndHumiditySemaphore();
    2ce2:	1e df       	rcall	.-452    	; 0x2b20 <initializeTempAndHumiditySemaphore>
    2ce4:	0f 90       	pop	r0
}
    2ce6:	0f 90       	pop	r0
    2ce8:	08 95       	ret

00002cea <createApplicationTask>:
    2cea:	ef 92       	push	r14
		createCO2Task();
		
}

void createApplicationTask()
{
    2cec:	ff 92       	push	r15
    2cee:	0f 93       	push	r16
	xTaskCreate(
    2cf0:	e1 2c       	mov	r14, r1
    2cf2:	f1 2c       	mov	r15, r1
    2cf4:	01 e0       	ldi	r16, 0x01	; 1
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 ec       	ldi	r20, 0xC0	; 192
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	63 e8       	ldi	r22, 0x83	; 131
    2d00:	73 e0       	ldi	r23, 0x03	; 3
    2d02:	85 e3       	ldi	r24, 0x35	; 53
    2d04:	96 e1       	ldi	r25, 0x16	; 22
    2d06:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
    2d0a:	0f 91       	pop	r16
    2d0c:	ff 90       	pop	r15
    2d0e:	ef 90       	pop	r14
    2d10:	08 95       	ret

00002d12 <create_tasks_and_semaphores>:
	initializeTempAndHumiditySemaphore();
}
/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{		
	createApplicationTask();	
    2d12:	eb df       	rcall	.-42     	; 0x2cea <createApplicationTask>
		createTempAndHumTask();
    2d14:	95 df       	rcall	.-214    	; 0x2c40 <createTempAndHumTask>
    2d16:	0c 94 83 01 	jmp	0x306	; 0x306 <createCO2Task>
		createCO2Task();
    2d1a:	08 95       	ret

00002d1c <initialiseSystem>:
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
{
	// Set output ports for leds used in the example
	//DDRA |= _BV(DDA0) | _BV(DDA7);

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    2d1e:	19 d5       	rcall	.+2610   	; 0x3752 <stdio_initialise>
	// Let's create some tasks
//	initializeDriver()
printf("Data Initialized\n");
    2d20:	8b e8       	ldi	r24, 0x8B	; 139
    2d22:	93 e0       	ldi	r25, 0x03	; 3
    2d24:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
	initializeUsedData();
	create_tasks_and_semaphores();
    2d28:	d4 df       	rcall	.-88     	; 0x2cd2 <initializeUsedData>
    2d2a:	f3 cf       	rjmp	.-26     	; 0x2d12 <create_tasks_and_semaphores>
    2d2c:	08 95       	ret

00002d2e <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    2d2e:	f6 df       	rcall	.-20     	; 0x2d1c <initialiseSystem>
	printf("Program Stttttarted!!\n");
    2d30:	8c e9       	ldi	r24, 0x9C	; 156
    2d32:	93 e0       	ldi	r25, 0x03	; 3
    2d34:	0e 94 07 21 	call	0x420e	; 0x420e <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2d38:	0e 94 a5 0b 	call	0x174a	; 0x174a <vTaskStartScheduler>
    2d3c:	ff cf       	rjmp	.-2      	; 0x2d3c <main+0xe>

00002d3e <_hihTwiCallback>:
    2d3e:	65 30       	cpi	r22, 0x05	; 5
    2d40:	f1 f4       	brne	.+60     	; 0x2d7e <_hihTwiCallback+0x40>
    2d42:	fa 01       	movw	r30, r20
    2d44:	80 81       	ld	r24, Z
    2d46:	8f 73       	andi	r24, 0x3F	; 63
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	98 2f       	mov	r25, r24
    2d4c:	88 27       	eor	r24, r24
    2d4e:	21 81       	ldd	r18, Z+1	; 0x01
    2d50:	82 2b       	or	r24, r18
    2d52:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2d56:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	f0 e4       	ldi	r31, 0x40	; 64
    2d5e:	8f 9f       	mul	r24, r31
    2d60:	c0 01       	movw	r24, r0
    2d62:	11 24       	eor	r1, r1
    2d64:	fa 01       	movw	r30, r20
    2d66:	23 81       	ldd	r18, Z+3	; 0x03
    2d68:	26 95       	lsr	r18
    2d6a:	26 95       	lsr	r18
    2d6c:	82 2b       	or	r24, r18
    2d6e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2d72:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	80 93 69 0e 	sts	0x0E69, r24	; 0x800e69 <_measuringIsReady>
    2d7c:	08 95       	ret
    2d7e:	64 30       	cpi	r22, 0x04	; 4
    2d80:	51 f0       	breq	.+20     	; 0x2d96 <_hihTwiCallback+0x58>
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e4       	ldi	r25, 0x40	; 64
    2d86:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2d8a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2d8e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2d92:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2d96:	08 95       	ret

00002d98 <hih8120_initialise>:
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	0f e9       	ldi	r16, 0x9F	; 159
    2d9e:	16 e1       	ldi	r17, 0x16	; 22
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	34 e2       	ldi	r19, 0x24	; 36
    2da4:	44 ef       	ldi	r20, 0xF4	; 244
    2da6:	50 e0       	ldi	r21, 0x00	; 0
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	87 e2       	ldi	r24, 0x27	; 39
    2dac:	0c d5       	rcall	.+2584   	; 0x37c6 <twiCreate>
    2dae:	90 93 6b 0e 	sts	0x0E6B, r25	; 0x800e6b <_hih8120Handler+0x1>
    2db2:	80 93 6a 0e 	sts	0x0E6A, r24	; 0x800e6a <_hih8120Handler>
    2db6:	21 e0       	ldi	r18, 0x01	; 1
    2db8:	89 2b       	or	r24, r25
    2dba:	09 f0       	breq	.+2      	; 0x2dbe <hih8120_initialise+0x26>
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	82 2f       	mov	r24, r18
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	08 95       	ret

00002dc6 <hih8120_wakeup>:
    2dc6:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <_hih8120Handler>
    2dca:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <_hih8120Handler+0x1>
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	51 f0       	breq	.+20     	; 0x2de6 <hih8120_wakeup+0x20>
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	47 d5       	rcall	.+2702   	; 0x3868 <twiTransmit>
    2dda:	84 30       	cpi	r24, 0x04	; 4
    2ddc:	31 f4       	brne	.+12     	; 0x2dea <hih8120_wakeup+0x24>
    2dde:	10 92 69 0e 	sts	0x0E69, r1	; 0x800e69 <_measuringIsReady>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	08 95       	ret
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	08 95       	ret
    2dea:	83 e0       	ldi	r24, 0x03	; 3
    2dec:	08 95       	ret

00002dee <hih8120_measure>:
    2dee:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <_hih8120Handler>
    2df2:	90 91 6b 0e 	lds	r25, 0x0E6B	; 0x800e6b <_hih8120Handler+0x1>
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	31 f0       	breq	.+12     	; 0x2e06 <hih8120_measure+0x18>
    2dfa:	64 e0       	ldi	r22, 0x04	; 4
    2dfc:	81 d5       	rcall	.+2818   	; 0x3900 <twiReceive>
    2dfe:	85 30       	cpi	r24, 0x05	; 5
    2e00:	21 f0       	breq	.+8      	; 0x2e0a <hih8120_measure+0x1c>
    2e02:	83 e0       	ldi	r24, 0x03	; 3
    2e04:	08 95       	ret
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	08 95       	ret
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	08 95       	ret

00002e0e <hih8120_getHumidity>:
    2e0e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    2e12:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	7c d7       	rcall	.+3832   	; 0x3d14 <__floatunsisf>
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	48 ec       	ldi	r20, 0xC8	; 200
    2e22:	52 e4       	ldi	r21, 0x42	; 66
    2e24:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <__mulsf3>
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	38 ef       	ldi	r19, 0xF8	; 248
    2e2c:	4f e7       	ldi	r20, 0x7F	; 127
    2e2e:	56 e4       	ldi	r21, 0x46	; 70
    2e30:	d8 c6       	rjmp	.+3504   	; 0x3be2 <__divsf3>
    2e32:	08 95       	ret

00002e34 <hih8120_getHumidityPercent_x10>:
    2e34:	ec df       	rcall	.-40     	; 0x2e0e <hih8120_getHumidity>
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	f8 d7       	rcall	.+4080   	; 0x3e30 <__mulsf3>
    2e40:	3d d7       	rcall	.+3706   	; 0x3cbc <__fixunssfsi>
    2e42:	cb 01       	movw	r24, r22
    2e44:	08 95       	ret

00002e46 <hih8120_getTemperature>:
    2e46:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    2e4a:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	60 d7       	rcall	.+3776   	; 0x3d14 <__floatunsisf>
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	45 e2       	ldi	r20, 0x25	; 37
    2e5a:	53 e4       	ldi	r21, 0x43	; 67
    2e5c:	e9 d7       	rcall	.+4050   	; 0x3e30 <__mulsf3>
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	38 ef       	ldi	r19, 0xF8	; 248
    2e62:	4f e7       	ldi	r20, 0x7F	; 127
    2e64:	56 e4       	ldi	r21, 0x46	; 70
    2e66:	bd d6       	rcall	.+3450   	; 0x3be2 <__divsf3>
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	52 e4       	ldi	r21, 0x42	; 66
    2e70:	53 c6       	rjmp	.+3238   	; 0x3b18 <__subsf3>
    2e72:	08 95       	ret

00002e74 <hih8120_getTemperature_x10>:
    2e74:	e8 df       	rcall	.-48     	; 0x2e46 <hih8120_getTemperature>
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e2       	ldi	r20, 0x20	; 32
    2e7c:	51 e4       	ldi	r21, 0x41	; 65
    2e7e:	d8 d7       	rcall	.+4016   	; 0x3e30 <__mulsf3>
    2e80:	18 d7       	rcall	.+3632   	; 0x3cb2 <__fixsfsi>
    2e82:	cb 01       	movw	r24, r22
    2e84:	08 95       	ret

00002e86 <_serialCallBack>:
    2e86:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <crc_sum.1945>
    2e8a:	86 0f       	add	r24, r22
    2e8c:	80 93 6f 0e 	sts	0x0E6F, r24	; 0x800e6f <crc_sum.1945>
    2e90:	90 91 72 0e 	lds	r25, 0x0E72	; 0x800e72 <_mh_state>
    2e94:	91 30       	cpi	r25, 0x01	; 1
    2e96:	79 f0       	breq	.+30     	; 0x2eb6 <_serialCallBack+0x30>
    2e98:	28 f0       	brcs	.+10     	; 0x2ea4 <_serialCallBack+0x1e>
    2e9a:	92 30       	cpi	r25, 0x02	; 2
    2e9c:	a9 f0       	breq	.+42     	; 0x2ec8 <_serialCallBack+0x42>
    2e9e:	93 30       	cpi	r25, 0x03	; 3
    2ea0:	19 f1       	breq	.+70     	; 0x2ee8 <_serialCallBack+0x62>
    2ea2:	08 95       	ret
    2ea4:	6f 3f       	cpi	r22, 0xFF	; 255
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <_serialCallBack+0x24>
    2ea8:	48 c0       	rjmp	.+144    	; 0x2f3a <_serialCallBack+0xb4>
    2eaa:	10 92 6f 0e 	sts	0x0E6F, r1	; 0x800e6f <crc_sum.1945>
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	80 93 72 0e 	sts	0x0E72, r24	; 0x800e72 <_mh_state>
    2eb4:	08 95       	ret
    2eb6:	66 38       	cpi	r22, 0x86	; 134
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <_serialCallBack+0x36>
    2eba:	3f c0       	rjmp	.+126    	; 0x2f3a <_serialCallBack+0xb4>
    2ebc:	10 92 6e 0e 	sts	0x0E6E, r1	; 0x800e6e <inDex.1943>
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	80 93 72 0e 	sts	0x0E72, r24	; 0x800e72 <_mh_state>
    2ec6:	08 95       	ret
    2ec8:	e0 91 6e 0e 	lds	r30, 0x0E6E	; 0x800e6e <inDex.1943>
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	8e 0f       	add	r24, r30
    2ed0:	80 93 6e 0e 	sts	0x0E6E, r24	; 0x800e6e <inDex.1943>
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	e4 59       	subi	r30, 0x94	; 148
    2ed8:	f1 4f       	sbci	r31, 0xF1	; 241
    2eda:	60 83       	st	Z, r22
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	69 f5       	brne	.+90     	; 0x2f3a <_serialCallBack+0xb4>
    2ee0:	83 e0       	ldi	r24, 0x03	; 3
    2ee2:	80 93 72 0e 	sts	0x0E72, r24	; 0x800e72 <_mh_state>
    2ee6:	08 95       	ret
    2ee8:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <inDex.1943>
    2eec:	21 e0       	ldi	r18, 0x01	; 1
    2eee:	29 0f       	add	r18, r25
    2ef0:	20 93 6e 0e 	sts	0x0E6E, r18	; 0x800e6e <inDex.1943>
    2ef4:	96 30       	cpi	r25, 0x06	; 6
    2ef6:	09 f5       	brne	.+66     	; 0x2f3a <_serialCallBack+0xb4>
    2ef8:	81 11       	cpse	r24, r1
    2efa:	0e c0       	rjmp	.+28     	; 0x2f18 <_serialCallBack+0x92>
    2efc:	ec e6       	ldi	r30, 0x6C	; 108
    2efe:	fe e0       	ldi	r31, 0x0E	; 14
    2f00:	80 81       	ld	r24, Z
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	98 2f       	mov	r25, r24
    2f06:	88 27       	eor	r24, r24
    2f08:	21 81       	ldd	r18, Z+1	; 0x01
    2f0a:	82 0f       	add	r24, r18
    2f0c:	91 1d       	adc	r25, r1
    2f0e:	90 93 74 0e 	sts	0x0E74, r25	; 0x800e74 <_ppm+0x1>
    2f12:	80 93 73 0e 	sts	0x0E73, r24	; 0x800e73 <_ppm>
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <_serialCallBack+0x9a>
    2f18:	10 92 74 0e 	sts	0x0E74, r1	; 0x800e74 <_ppm+0x1>
    2f1c:	10 92 73 0e 	sts	0x0E73, r1	; 0x800e73 <_ppm>
    2f20:	10 92 72 0e 	sts	0x0E72, r1	; 0x800e72 <_mh_state>
    2f24:	e0 91 70 0e 	lds	r30, 0x0E70	; 0x800e70 <_appCallBack>
    2f28:	f0 91 71 0e 	lds	r31, 0x0E71	; 0x800e71 <_appCallBack+0x1>
    2f2c:	30 97       	sbiw	r30, 0x00	; 0
    2f2e:	29 f0       	breq	.+10     	; 0x2f3a <_serialCallBack+0xb4>
    2f30:	80 91 73 0e 	lds	r24, 0x0E73	; 0x800e73 <_ppm>
    2f34:	90 91 74 0e 	lds	r25, 0x0E74	; 0x800e74 <_ppm+0x1>
    2f38:	19 95       	eicall
    2f3a:	08 95       	ret

00002f3c <mh_z19_initialise>:
    2f3c:	8f 92       	push	r8
    2f3e:	9f 92       	push	r9
    2f40:	af 92       	push	r10
    2f42:	cf 92       	push	r12
    2f44:	ef 92       	push	r14
    2f46:	0f 93       	push	r16
    2f48:	0f 2e       	mov	r0, r31
    2f4a:	f3 e4       	ldi	r31, 0x43	; 67
    2f4c:	8f 2e       	mov	r8, r31
    2f4e:	f7 e1       	ldi	r31, 0x17	; 23
    2f50:	9f 2e       	mov	r9, r31
    2f52:	f0 2d       	mov	r31, r0
    2f54:	68 94       	set
    2f56:	aa 24       	eor	r10, r10
    2f58:	a4 f8       	bld	r10, 4
    2f5a:	68 94       	set
    2f5c:	cc 24       	eor	r12, r12
    2f5e:	c4 f8       	bld	r12, 4
    2f60:	e1 2c       	mov	r14, r1
    2f62:	00 e0       	ldi	r16, 0x00	; 0
    2f64:	23 e0       	ldi	r18, 0x03	; 3
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	55 e2       	ldi	r21, 0x25	; 37
    2f6a:	60 e0       	ldi	r22, 0x00	; 0
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	3f d0       	rcall	.+126    	; 0x2fee <serial_create>
    2f70:	90 93 76 0e 	sts	0x0E76, r25	; 0x800e76 <_serial+0x1>
    2f74:	80 93 75 0e 	sts	0x0E75, r24	; 0x800e75 <_serial>
    2f78:	0f 91       	pop	r16
    2f7a:	ef 90       	pop	r14
    2f7c:	cf 90       	pop	r12
    2f7e:	af 90       	pop	r10
    2f80:	9f 90       	pop	r9
    2f82:	8f 90       	pop	r8
    2f84:	08 95       	ret

00002f86 <mh_z19_injectCallBack>:
    2f86:	90 93 71 0e 	sts	0x0E71, r25	; 0x800e71 <_appCallBack+0x1>
    2f8a:	80 93 70 0e 	sts	0x0E70, r24	; 0x800e70 <_appCallBack>
    2f8e:	08 95       	ret

00002f90 <mh_z19_takeMeassuring>:
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	29 97       	sbiw	r28, 0x09	; 9
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	89 e0       	ldi	r24, 0x09	; 9
    2fa6:	e2 e2       	ldi	r30, 0x22	; 34
    2fa8:	f2 e0       	ldi	r31, 0x02	; 2
    2faa:	9e 01       	movw	r18, r28
    2fac:	2f 5f       	subi	r18, 0xFF	; 255
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	d9 01       	movw	r26, r18
    2fb2:	01 90       	ld	r0, Z+
    2fb4:	0d 92       	st	X+, r0
    2fb6:	8a 95       	dec	r24
    2fb8:	e1 f7       	brne	.-8      	; 0x2fb2 <mh_z19_takeMeassuring+0x22>
    2fba:	10 92 74 0e 	sts	0x0E74, r1	; 0x800e74 <_ppm+0x1>
    2fbe:	10 92 73 0e 	sts	0x0E73, r1	; 0x800e73 <_ppm>
    2fc2:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <_serial>
    2fc6:	90 91 76 0e 	lds	r25, 0x0E76	; 0x800e76 <_serial+0x1>
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	31 f0       	breq	.+12     	; 0x2fda <mh_z19_takeMeassuring+0x4a>
    2fce:	42 2f       	mov	r20, r18
    2fd0:	53 2f       	mov	r21, r19
    2fd2:	69 e0       	ldi	r22, 0x09	; 9
    2fd4:	d3 d0       	rcall	.+422    	; 0x317c <serial_sendBytes>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	01 c0       	rjmp	.+2      	; 0x2fdc <mh_z19_takeMeassuring+0x4c>
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	29 96       	adiw	r28, 0x09	; 9
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	f8 94       	cli
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	cd bf       	out	0x3d, r28	; 61
    2fe8:	df 91       	pop	r29
    2fea:	cf 91       	pop	r28
    2fec:	08 95       	ret

00002fee <serial_create>:
    2fee:	2f 92       	push	r2
    2ff0:	3f 92       	push	r3
    2ff2:	4f 92       	push	r4
    2ff4:	5f 92       	push	r5
    2ff6:	6f 92       	push	r6
    2ff8:	7f 92       	push	r7
    2ffa:	8f 92       	push	r8
    2ffc:	9f 92       	push	r9
    2ffe:	af 92       	push	r10
    3000:	cf 92       	push	r12
    3002:	ef 92       	push	r14
    3004:	ff 92       	push	r15
    3006:	0f 93       	push	r16
    3008:	1f 93       	push	r17
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	f8 2e       	mov	r15, r24
    3014:	2a 01       	movw	r4, r20
    3016:	3b 01       	movw	r6, r22
    3018:	88 e0       	ldi	r24, 0x08	; 8
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	b0 d7       	rcall	.+3936   	; 0x3f7e <malloc>
    301e:	8c 01       	movw	r16, r24
    3020:	8f 2d       	mov	r24, r15
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	fc 01       	movw	r30, r24
    3026:	ee 0f       	add	r30, r30
    3028:	ff 1f       	adc	r31, r31
    302a:	e9 58       	subi	r30, 0x89	; 137
    302c:	f1 4f       	sbci	r31, 0xF1	; 241
    302e:	11 83       	std	Z+1, r17	; 0x01
    3030:	00 83       	st	Z, r16
    3032:	01 15       	cp	r16, r1
    3034:	11 05       	cpc	r17, r1
    3036:	09 f4       	brne	.+2      	; 0x303a <serial_create+0x4c>
    3038:	64 c0       	rjmp	.+200    	; 0x3102 <serial_create+0x114>
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	fc 01       	movw	r30, r24
    3040:	e5 5f       	subi	r30, 0xF5	; 245
    3042:	fd 4f       	sbci	r31, 0xFD	; 253
    3044:	80 81       	ld	r24, Z
    3046:	91 81       	ldd	r25, Z+1	; 0x01
    3048:	d8 01       	movw	r26, r16
    304a:	8d 93       	st	X+, r24
    304c:	9c 93       	st	X, r25
    304e:	6c 2d       	mov	r22, r12
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	84 e0       	ldi	r24, 0x04	; 4
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	79 d7       	rcall	.+3826   	; 0x3f4a <calloc>
    3058:	1c 01       	movw	r2, r24
    305a:	61 e0       	ldi	r22, 0x01	; 1
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	86 e0       	ldi	r24, 0x06	; 6
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	73 d7       	rcall	.+3814   	; 0x3f4a <calloc>
    3064:	7c 01       	movw	r14, r24
    3066:	4c 2d       	mov	r20, r12
    3068:	b1 01       	movw	r22, r2
    306a:	3a d5       	rcall	.+2676   	; 0x3ae0 <fifo_init>
    306c:	f8 01       	movw	r30, r16
    306e:	f5 82       	std	Z+5, r15	; 0x05
    3070:	e4 82       	std	Z+4, r14	; 0x04
    3072:	6a 2d       	mov	r22, r10
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	84 e0       	ldi	r24, 0x04	; 4
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	67 d7       	rcall	.+3790   	; 0x3f4a <calloc>
    307c:	1c 01       	movw	r2, r24
    307e:	61 e0       	ldi	r22, 0x01	; 1
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	86 e0       	ldi	r24, 0x06	; 6
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	61 d7       	rcall	.+3778   	; 0x3f4a <calloc>
    3088:	7c 01       	movw	r14, r24
    308a:	4a 2d       	mov	r20, r10
    308c:	b1 01       	movw	r22, r2
    308e:	28 d5       	rcall	.+2640   	; 0x3ae0 <fifo_init>
    3090:	d8 01       	movw	r26, r16
    3092:	13 96       	adiw	r26, 0x03	; 3
    3094:	fc 92       	st	X, r15
    3096:	ee 92       	st	-X, r14
    3098:	12 97       	sbiw	r26, 0x02	; 2
    309a:	17 96       	adiw	r26, 0x07	; 7
    309c:	9c 92       	st	X, r9
    309e:	8e 92       	st	-X, r8
    30a0:	16 97       	sbiw	r26, 0x06	; 6
    30a2:	ff b6       	in	r15, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	11 97       	sbiw	r26, 0x01	; 1
    30ac:	36 97       	sbiw	r30, 0x06	; 6
    30ae:	80 81       	ld	r24, Z
    30b0:	82 60       	ori	r24, 0x02	; 2
    30b2:	80 83       	st	Z, r24
    30b4:	8d 90       	ld	r8, X+
    30b6:	9c 90       	ld	r9, X
    30b8:	c3 01       	movw	r24, r6
    30ba:	b2 01       	movw	r22, r4
    30bc:	2b d6       	rcall	.+3158   	; 0x3d14 <__floatunsisf>
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e0       	ldi	r20, 0x00	; 0
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	b4 d6       	rcall	.+3432   	; 0x3e30 <__mulsf3>
    30c8:	9b 01       	movw	r18, r22
    30ca:	ac 01       	movw	r20, r24
    30cc:	60 e0       	ldi	r22, 0x00	; 0
    30ce:	74 e2       	ldi	r23, 0x24	; 36
    30d0:	84 e7       	ldi	r24, 0x74	; 116
    30d2:	9b e4       	ldi	r25, 0x4B	; 75
    30d4:	86 d5       	rcall	.+2828   	; 0x3be2 <__divsf3>
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e8       	ldi	r20, 0x80	; 128
    30dc:	5f e3       	ldi	r21, 0x3F	; 63
    30de:	1c d5       	rcall	.+2616   	; 0x3b18 <__subsf3>
    30e0:	ed d5       	rcall	.+3034   	; 0x3cbc <__fixunssfsi>
    30e2:	f4 01       	movw	r30, r8
    30e4:	32 97       	sbiw	r30, 0x02	; 2
    30e6:	60 83       	st	Z, r22
    30e8:	d8 01       	movw	r26, r16
    30ea:	ed 91       	ld	r30, X+
    30ec:	fc 91       	ld	r31, X
    30ee:	11 97       	sbiw	r26, 0x01	; 1
    30f0:	35 97       	sbiw	r30, 0x05	; 5
    30f2:	88 e9       	ldi	r24, 0x98	; 152
    30f4:	80 83       	st	Z, r24
    30f6:	ed 91       	ld	r30, X+
    30f8:	fc 91       	ld	r31, X
    30fa:	34 97       	sbiw	r30, 0x04	; 4
    30fc:	86 e0       	ldi	r24, 0x06	; 6
    30fe:	80 83       	st	Z, r24
    3100:	ff be       	out	0x3f, r15	; 63
    3102:	c8 01       	movw	r24, r16
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	1f 91       	pop	r17
    310a:	0f 91       	pop	r16
    310c:	ff 90       	pop	r15
    310e:	ef 90       	pop	r14
    3110:	cf 90       	pop	r12
    3112:	af 90       	pop	r10
    3114:	9f 90       	pop	r9
    3116:	8f 90       	pop	r8
    3118:	7f 90       	pop	r7
    311a:	6f 90       	pop	r6
    311c:	5f 90       	pop	r5
    311e:	4f 90       	pop	r4
    3120:	3f 90       	pop	r3
    3122:	2f 90       	pop	r2
    3124:	08 95       	ret

00003126 <serial_sendByte>:
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	dc 01       	movw	r26, r24
    312c:	89 2b       	or	r24, r25
    312e:	01 f1       	breq	.+64     	; 0x3170 <serial_sendByte+0x4a>
    3130:	12 96       	adiw	r26, 0x02	; 2
    3132:	ed 91       	ld	r30, X+
    3134:	fc 91       	ld	r31, X
    3136:	13 97       	sbiw	r26, 0x03	; 3
    3138:	93 81       	ldd	r25, Z+3	; 0x03
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	25 81       	ldd	r18, Z+5	; 0x05
    313e:	98 1b       	sub	r25, r24
    3140:	92 23       	and	r25, r18
    3142:	84 81       	ldd	r24, Z+4	; 0x04
    3144:	98 17       	cp	r25, r24
    3146:	b1 f0       	breq	.+44     	; 0x3174 <serial_sendByte+0x4e>
    3148:	83 81       	ldd	r24, Z+3	; 0x03
    314a:	26 95       	lsr	r18
    314c:	28 23       	and	r18, r24
    314e:	c0 81       	ld	r28, Z
    3150:	d1 81       	ldd	r29, Z+1	; 0x01
    3152:	c2 0f       	add	r28, r18
    3154:	d1 1d       	adc	r29, r1
    3156:	68 83       	st	Y, r22
    3158:	8f 5f       	subi	r24, 0xFF	; 255
    315a:	95 81       	ldd	r25, Z+5	; 0x05
    315c:	89 23       	and	r24, r25
    315e:	83 83       	std	Z+3, r24	; 0x03
    3160:	ed 91       	ld	r30, X+
    3162:	fc 91       	ld	r31, X
    3164:	35 97       	sbiw	r30, 0x05	; 5
    3166:	80 81       	ld	r24, Z
    3168:	80 62       	ori	r24, 0x20	; 32
    316a:	80 83       	st	Z, r24
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	03 c0       	rjmp	.+6      	; 0x3176 <serial_sendByte+0x50>
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	01 c0       	rjmp	.+2      	; 0x3176 <serial_sendByte+0x50>
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	08 95       	ret

0000317c <serial_sendBytes>:
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	7c 01       	movw	r14, r24
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	09 f4       	brne	.+2      	; 0x3190 <serial_sendBytes+0x14>
    318e:	41 c0       	rjmp	.+130    	; 0x3212 <serial_sendBytes+0x96>
    3190:	dc 01       	movw	r26, r24
    3192:	12 96       	adiw	r26, 0x02	; 2
    3194:	ed 91       	ld	r30, X+
    3196:	fc 91       	ld	r31, X
    3198:	13 97       	sbiw	r26, 0x03	; 3
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	98 1b       	sub	r25, r24
    31a0:	85 81       	ldd	r24, Z+5	; 0x05
    31a2:	98 23       	and	r25, r24
    31a4:	84 81       	ldd	r24, Z+4	; 0x04
    31a6:	89 1b       	sub	r24, r25
    31a8:	86 17       	cp	r24, r22
    31aa:	a8 f1       	brcs	.+106    	; 0x3216 <serial_sendBytes+0x9a>
    31ac:	66 23       	and	r22, r22
    31ae:	41 f1       	breq	.+80     	; 0x3200 <serial_sendBytes+0x84>
    31b0:	84 2f       	mov	r24, r20
    31b2:	95 2f       	mov	r25, r21
    31b4:	dc 01       	movw	r26, r24
    31b6:	61 50       	subi	r22, 0x01	; 1
    31b8:	46 2f       	mov	r20, r22
    31ba:	50 e0       	ldi	r21, 0x00	; 0
    31bc:	4f 5f       	subi	r20, 0xFF	; 255
    31be:	5f 4f       	sbci	r21, 0xFF	; 255
    31c0:	48 0f       	add	r20, r24
    31c2:	59 1f       	adc	r21, r25
    31c4:	e7 01       	movw	r28, r14
    31c6:	ea 81       	ldd	r30, Y+2	; 0x02
    31c8:	fb 81       	ldd	r31, Y+3	; 0x03
    31ca:	93 81       	ldd	r25, Z+3	; 0x03
    31cc:	82 81       	ldd	r24, Z+2	; 0x02
    31ce:	25 81       	ldd	r18, Z+5	; 0x05
    31d0:	98 1b       	sub	r25, r24
    31d2:	92 23       	and	r25, r18
    31d4:	84 81       	ldd	r24, Z+4	; 0x04
    31d6:	98 17       	cp	r25, r24
    31d8:	79 f0       	breq	.+30     	; 0x31f8 <serial_sendBytes+0x7c>
    31da:	8c 91       	ld	r24, X
    31dc:	93 81       	ldd	r25, Z+3	; 0x03
    31de:	26 95       	lsr	r18
    31e0:	29 23       	and	r18, r25
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	8b 01       	movw	r16, r22
    31e8:	02 0f       	add	r16, r18
    31ea:	11 1d       	adc	r17, r1
    31ec:	e8 01       	movw	r28, r16
    31ee:	88 83       	st	Y, r24
    31f0:	9f 5f       	subi	r25, 0xFF	; 255
    31f2:	85 81       	ldd	r24, Z+5	; 0x05
    31f4:	98 23       	and	r25, r24
    31f6:	93 83       	std	Z+3, r25	; 0x03
    31f8:	11 96       	adiw	r26, 0x01	; 1
    31fa:	a4 17       	cp	r26, r20
    31fc:	b5 07       	cpc	r27, r21
    31fe:	11 f7       	brne	.-60     	; 0x31c4 <serial_sendBytes+0x48>
    3200:	d7 01       	movw	r26, r14
    3202:	ed 91       	ld	r30, X+
    3204:	fc 91       	ld	r31, X
    3206:	35 97       	sbiw	r30, 0x05	; 5
    3208:	80 81       	ld	r24, Z
    320a:	80 62       	ori	r24, 0x20	; 32
    320c:	80 83       	st	Z, r24
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	03 c0       	rjmp	.+6      	; 0x3218 <serial_sendBytes+0x9c>
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	01 c0       	rjmp	.+2      	; 0x3218 <serial_sendBytes+0x9c>
    3216:	82 e0       	ldi	r24, 0x02	; 2
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	08 95       	ret

00003226 <serial_getByte>:
    3226:	00 97       	sbiw	r24, 0x00	; 0
    3228:	d1 f0       	breq	.+52     	; 0x325e <serial_getByte+0x38>
    322a:	dc 01       	movw	r26, r24
    322c:	14 96       	adiw	r26, 0x04	; 4
    322e:	ed 91       	ld	r30, X+
    3230:	fc 91       	ld	r31, X
    3232:	15 97       	sbiw	r26, 0x05	; 5
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	98 17       	cp	r25, r24
    323a:	99 f0       	breq	.+38     	; 0x3262 <serial_getByte+0x3c>
    323c:	92 81       	ldd	r25, Z+2	; 0x02
    323e:	85 81       	ldd	r24, Z+5	; 0x05
    3240:	86 95       	lsr	r24
    3242:	89 23       	and	r24, r25
    3244:	a0 81       	ld	r26, Z
    3246:	b1 81       	ldd	r27, Z+1	; 0x01
    3248:	a8 0f       	add	r26, r24
    324a:	b1 1d       	adc	r27, r1
    324c:	8c 91       	ld	r24, X
    324e:	db 01       	movw	r26, r22
    3250:	8c 93       	st	X, r24
    3252:	9f 5f       	subi	r25, 0xFF	; 255
    3254:	85 81       	ldd	r24, Z+5	; 0x05
    3256:	98 23       	and	r25, r24
    3258:	92 83       	std	Z+2, r25	; 0x02
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	08 95       	ret
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	08 95       	ret
    3262:	83 e0       	ldi	r24, 0x03	; 3
    3264:	08 95       	ret

00003266 <__vector_25>:
    3266:	1f 92       	push	r1
    3268:	0f 92       	push	r0
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	0f 92       	push	r0
    326e:	11 24       	eor	r1, r1
    3270:	0b b6       	in	r0, 0x3b	; 59
    3272:	0f 92       	push	r0
    3274:	2f 93       	push	r18
    3276:	3f 93       	push	r19
    3278:	4f 93       	push	r20
    327a:	5f 93       	push	r21
    327c:	6f 93       	push	r22
    327e:	7f 93       	push	r23
    3280:	8f 93       	push	r24
    3282:	9f 93       	push	r25
    3284:	af 93       	push	r26
    3286:	bf 93       	push	r27
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
    328c:	ef 93       	push	r30
    328e:	ff 93       	push	r31
    3290:	a0 91 77 0e 	lds	r26, 0x0E77	; 0x800e77 <_ser_handle>
    3294:	b0 91 78 0e 	lds	r27, 0x0E78	; 0x800e78 <_ser_handle+0x1>
    3298:	10 97       	sbiw	r26, 0x00	; 0
    329a:	11 f1       	breq	.+68     	; 0x32e0 <__vector_25+0x7a>
    329c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    32a0:	14 96       	adiw	r26, 0x04	; 4
    32a2:	ed 91       	ld	r30, X+
    32a4:	fc 91       	ld	r31, X
    32a6:	15 97       	sbiw	r26, 0x05	; 5
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	82 81       	ldd	r24, Z+2	; 0x02
    32ac:	25 81       	ldd	r18, Z+5	; 0x05
    32ae:	98 1b       	sub	r25, r24
    32b0:	92 23       	and	r25, r18
    32b2:	84 81       	ldd	r24, Z+4	; 0x04
    32b4:	98 17       	cp	r25, r24
    32b6:	61 f0       	breq	.+24     	; 0x32d0 <__vector_25+0x6a>
    32b8:	83 81       	ldd	r24, Z+3	; 0x03
    32ba:	26 95       	lsr	r18
    32bc:	28 23       	and	r18, r24
    32be:	c0 81       	ld	r28, Z
    32c0:	d1 81       	ldd	r29, Z+1	; 0x01
    32c2:	c2 0f       	add	r28, r18
    32c4:	d1 1d       	adc	r29, r1
    32c6:	68 83       	st	Y, r22
    32c8:	8f 5f       	subi	r24, 0xFF	; 255
    32ca:	95 81       	ldd	r25, Z+5	; 0x05
    32cc:	89 23       	and	r24, r25
    32ce:	83 83       	std	Z+3, r24	; 0x03
    32d0:	16 96       	adiw	r26, 0x06	; 6
    32d2:	ed 91       	ld	r30, X+
    32d4:	fc 91       	ld	r31, X
    32d6:	17 97       	sbiw	r26, 0x07	; 7
    32d8:	30 97       	sbiw	r30, 0x00	; 0
    32da:	11 f0       	breq	.+4      	; 0x32e0 <__vector_25+0x7a>
    32dc:	cd 01       	movw	r24, r26
    32de:	19 95       	eicall
    32e0:	ff 91       	pop	r31
    32e2:	ef 91       	pop	r30
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	bf 91       	pop	r27
    32ea:	af 91       	pop	r26
    32ec:	9f 91       	pop	r25
    32ee:	8f 91       	pop	r24
    32f0:	7f 91       	pop	r23
    32f2:	6f 91       	pop	r22
    32f4:	5f 91       	pop	r21
    32f6:	4f 91       	pop	r20
    32f8:	3f 91       	pop	r19
    32fa:	2f 91       	pop	r18
    32fc:	0f 90       	pop	r0
    32fe:	0b be       	out	0x3b, r0	; 59
    3300:	0f 90       	pop	r0
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	0f 90       	pop	r0
    3306:	1f 90       	pop	r1
    3308:	18 95       	reti

0000330a <__vector_26>:
    330a:	1f 92       	push	r1
    330c:	0f 92       	push	r0
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	0f 92       	push	r0
    3312:	11 24       	eor	r1, r1
    3314:	0b b6       	in	r0, 0x3b	; 59
    3316:	0f 92       	push	r0
    3318:	2f 93       	push	r18
    331a:	8f 93       	push	r24
    331c:	9f 93       	push	r25
    331e:	af 93       	push	r26
    3320:	bf 93       	push	r27
    3322:	ef 93       	push	r30
    3324:	ff 93       	push	r31
    3326:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <_ser_handle>
    332a:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <_ser_handle+0x1>
    332e:	30 97       	sbiw	r30, 0x00	; 0
    3330:	b9 f0       	breq	.+46     	; 0x3360 <__vector_26+0x56>
    3332:	02 80       	ldd	r0, Z+2	; 0x02
    3334:	f3 81       	ldd	r31, Z+3	; 0x03
    3336:	e0 2d       	mov	r30, r0
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	98 17       	cp	r25, r24
    333e:	b1 f0       	breq	.+44     	; 0x336c <__vector_26+0x62>
    3340:	92 81       	ldd	r25, Z+2	; 0x02
    3342:	85 81       	ldd	r24, Z+5	; 0x05
    3344:	28 2f       	mov	r18, r24
    3346:	26 95       	lsr	r18
    3348:	29 23       	and	r18, r25
    334a:	a0 81       	ld	r26, Z
    334c:	b1 81       	ldd	r27, Z+1	; 0x01
    334e:	a2 0f       	add	r26, r18
    3350:	b1 1d       	adc	r27, r1
    3352:	2c 91       	ld	r18, X
    3354:	9f 5f       	subi	r25, 0xFF	; 255
    3356:	89 23       	and	r24, r25
    3358:	82 83       	std	Z+2, r24	; 0x02
    335a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    335e:	0b c0       	rjmp	.+22     	; 0x3376 <__vector_26+0x6c>
    3360:	e1 ec       	ldi	r30, 0xC1	; 193
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	8f 7d       	andi	r24, 0xDF	; 223
    3368:	80 83       	st	Z, r24
    336a:	05 c0       	rjmp	.+10     	; 0x3376 <__vector_26+0x6c>
    336c:	e1 ec       	ldi	r30, 0xC1	; 193
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	8f 7d       	andi	r24, 0xDF	; 223
    3374:	80 83       	st	Z, r24
    3376:	ff 91       	pop	r31
    3378:	ef 91       	pop	r30
    337a:	bf 91       	pop	r27
    337c:	af 91       	pop	r26
    337e:	9f 91       	pop	r25
    3380:	8f 91       	pop	r24
    3382:	2f 91       	pop	r18
    3384:	0f 90       	pop	r0
    3386:	0b be       	out	0x3b, r0	; 59
    3388:	0f 90       	pop	r0
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	0f 90       	pop	r0
    338e:	1f 90       	pop	r1
    3390:	18 95       	reti

00003392 <__vector_36>:
    3392:	1f 92       	push	r1
    3394:	0f 92       	push	r0
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	0f 92       	push	r0
    339a:	11 24       	eor	r1, r1
    339c:	0b b6       	in	r0, 0x3b	; 59
    339e:	0f 92       	push	r0
    33a0:	2f 93       	push	r18
    33a2:	3f 93       	push	r19
    33a4:	4f 93       	push	r20
    33a6:	5f 93       	push	r21
    33a8:	6f 93       	push	r22
    33aa:	7f 93       	push	r23
    33ac:	8f 93       	push	r24
    33ae:	9f 93       	push	r25
    33b0:	af 93       	push	r26
    33b2:	bf 93       	push	r27
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	ef 93       	push	r30
    33ba:	ff 93       	push	r31
    33bc:	a0 91 79 0e 	lds	r26, 0x0E79	; 0x800e79 <_ser_handle+0x2>
    33c0:	b0 91 7a 0e 	lds	r27, 0x0E7A	; 0x800e7a <_ser_handle+0x3>
    33c4:	10 97       	sbiw	r26, 0x00	; 0
    33c6:	11 f1       	breq	.+68     	; 0x340c <__vector_36+0x7a>
    33c8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    33cc:	14 96       	adiw	r26, 0x04	; 4
    33ce:	ed 91       	ld	r30, X+
    33d0:	fc 91       	ld	r31, X
    33d2:	15 97       	sbiw	r26, 0x05	; 5
    33d4:	93 81       	ldd	r25, Z+3	; 0x03
    33d6:	82 81       	ldd	r24, Z+2	; 0x02
    33d8:	25 81       	ldd	r18, Z+5	; 0x05
    33da:	98 1b       	sub	r25, r24
    33dc:	92 23       	and	r25, r18
    33de:	84 81       	ldd	r24, Z+4	; 0x04
    33e0:	98 17       	cp	r25, r24
    33e2:	61 f0       	breq	.+24     	; 0x33fc <__vector_36+0x6a>
    33e4:	83 81       	ldd	r24, Z+3	; 0x03
    33e6:	26 95       	lsr	r18
    33e8:	28 23       	and	r18, r24
    33ea:	c0 81       	ld	r28, Z
    33ec:	d1 81       	ldd	r29, Z+1	; 0x01
    33ee:	c2 0f       	add	r28, r18
    33f0:	d1 1d       	adc	r29, r1
    33f2:	68 83       	st	Y, r22
    33f4:	8f 5f       	subi	r24, 0xFF	; 255
    33f6:	95 81       	ldd	r25, Z+5	; 0x05
    33f8:	89 23       	and	r24, r25
    33fa:	83 83       	std	Z+3, r24	; 0x03
    33fc:	16 96       	adiw	r26, 0x06	; 6
    33fe:	ed 91       	ld	r30, X+
    3400:	fc 91       	ld	r31, X
    3402:	17 97       	sbiw	r26, 0x07	; 7
    3404:	30 97       	sbiw	r30, 0x00	; 0
    3406:	11 f0       	breq	.+4      	; 0x340c <__vector_36+0x7a>
    3408:	cd 01       	movw	r24, r26
    340a:	19 95       	eicall
    340c:	ff 91       	pop	r31
    340e:	ef 91       	pop	r30
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	bf 91       	pop	r27
    3416:	af 91       	pop	r26
    3418:	9f 91       	pop	r25
    341a:	8f 91       	pop	r24
    341c:	7f 91       	pop	r23
    341e:	6f 91       	pop	r22
    3420:	5f 91       	pop	r21
    3422:	4f 91       	pop	r20
    3424:	3f 91       	pop	r19
    3426:	2f 91       	pop	r18
    3428:	0f 90       	pop	r0
    342a:	0b be       	out	0x3b, r0	; 59
    342c:	0f 90       	pop	r0
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	0f 90       	pop	r0
    3432:	1f 90       	pop	r1
    3434:	18 95       	reti

00003436 <__vector_37>:
    3436:	1f 92       	push	r1
    3438:	0f 92       	push	r0
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	0f 92       	push	r0
    343e:	11 24       	eor	r1, r1
    3440:	0b b6       	in	r0, 0x3b	; 59
    3442:	0f 92       	push	r0
    3444:	2f 93       	push	r18
    3446:	8f 93       	push	r24
    3448:	9f 93       	push	r25
    344a:	af 93       	push	r26
    344c:	bf 93       	push	r27
    344e:	ef 93       	push	r30
    3450:	ff 93       	push	r31
    3452:	e0 91 79 0e 	lds	r30, 0x0E79	; 0x800e79 <_ser_handle+0x2>
    3456:	f0 91 7a 0e 	lds	r31, 0x0E7A	; 0x800e7a <_ser_handle+0x3>
    345a:	30 97       	sbiw	r30, 0x00	; 0
    345c:	b9 f0       	breq	.+46     	; 0x348c <__vector_37+0x56>
    345e:	02 80       	ldd	r0, Z+2	; 0x02
    3460:	f3 81       	ldd	r31, Z+3	; 0x03
    3462:	e0 2d       	mov	r30, r0
    3464:	93 81       	ldd	r25, Z+3	; 0x03
    3466:	82 81       	ldd	r24, Z+2	; 0x02
    3468:	98 17       	cp	r25, r24
    346a:	b1 f0       	breq	.+44     	; 0x3498 <__vector_37+0x62>
    346c:	92 81       	ldd	r25, Z+2	; 0x02
    346e:	85 81       	ldd	r24, Z+5	; 0x05
    3470:	28 2f       	mov	r18, r24
    3472:	26 95       	lsr	r18
    3474:	29 23       	and	r18, r25
    3476:	a0 81       	ld	r26, Z
    3478:	b1 81       	ldd	r27, Z+1	; 0x01
    347a:	a2 0f       	add	r26, r18
    347c:	b1 1d       	adc	r27, r1
    347e:	2c 91       	ld	r18, X
    3480:	9f 5f       	subi	r25, 0xFF	; 255
    3482:	89 23       	and	r24, r25
    3484:	82 83       	std	Z+2, r24	; 0x02
    3486:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    348a:	0b c0       	rjmp	.+22     	; 0x34a2 <__vector_37+0x6c>
    348c:	e9 ec       	ldi	r30, 0xC9	; 201
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	8f 7d       	andi	r24, 0xDF	; 223
    3494:	80 83       	st	Z, r24
    3496:	05 c0       	rjmp	.+10     	; 0x34a2 <__vector_37+0x6c>
    3498:	e9 ec       	ldi	r30, 0xC9	; 201
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	80 81       	ld	r24, Z
    349e:	8f 7d       	andi	r24, 0xDF	; 223
    34a0:	80 83       	st	Z, r24
    34a2:	ff 91       	pop	r31
    34a4:	ef 91       	pop	r30
    34a6:	bf 91       	pop	r27
    34a8:	af 91       	pop	r26
    34aa:	9f 91       	pop	r25
    34ac:	8f 91       	pop	r24
    34ae:	2f 91       	pop	r18
    34b0:	0f 90       	pop	r0
    34b2:	0b be       	out	0x3b, r0	; 59
    34b4:	0f 90       	pop	r0
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	0f 90       	pop	r0
    34ba:	1f 90       	pop	r1
    34bc:	18 95       	reti

000034be <__vector_51>:
    34be:	1f 92       	push	r1
    34c0:	0f 92       	push	r0
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	0f 92       	push	r0
    34c6:	11 24       	eor	r1, r1
    34c8:	0b b6       	in	r0, 0x3b	; 59
    34ca:	0f 92       	push	r0
    34cc:	2f 93       	push	r18
    34ce:	3f 93       	push	r19
    34d0:	4f 93       	push	r20
    34d2:	5f 93       	push	r21
    34d4:	6f 93       	push	r22
    34d6:	7f 93       	push	r23
    34d8:	8f 93       	push	r24
    34da:	9f 93       	push	r25
    34dc:	af 93       	push	r26
    34de:	bf 93       	push	r27
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	ef 93       	push	r30
    34e6:	ff 93       	push	r31
    34e8:	a0 91 7b 0e 	lds	r26, 0x0E7B	; 0x800e7b <_ser_handle+0x4>
    34ec:	b0 91 7c 0e 	lds	r27, 0x0E7C	; 0x800e7c <_ser_handle+0x5>
    34f0:	10 97       	sbiw	r26, 0x00	; 0
    34f2:	11 f1       	breq	.+68     	; 0x3538 <__vector_51+0x7a>
    34f4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    34f8:	14 96       	adiw	r26, 0x04	; 4
    34fa:	ed 91       	ld	r30, X+
    34fc:	fc 91       	ld	r31, X
    34fe:	15 97       	sbiw	r26, 0x05	; 5
    3500:	93 81       	ldd	r25, Z+3	; 0x03
    3502:	82 81       	ldd	r24, Z+2	; 0x02
    3504:	25 81       	ldd	r18, Z+5	; 0x05
    3506:	98 1b       	sub	r25, r24
    3508:	92 23       	and	r25, r18
    350a:	84 81       	ldd	r24, Z+4	; 0x04
    350c:	98 17       	cp	r25, r24
    350e:	61 f0       	breq	.+24     	; 0x3528 <__vector_51+0x6a>
    3510:	83 81       	ldd	r24, Z+3	; 0x03
    3512:	26 95       	lsr	r18
    3514:	28 23       	and	r18, r24
    3516:	c0 81       	ld	r28, Z
    3518:	d1 81       	ldd	r29, Z+1	; 0x01
    351a:	c2 0f       	add	r28, r18
    351c:	d1 1d       	adc	r29, r1
    351e:	68 83       	st	Y, r22
    3520:	8f 5f       	subi	r24, 0xFF	; 255
    3522:	95 81       	ldd	r25, Z+5	; 0x05
    3524:	89 23       	and	r24, r25
    3526:	83 83       	std	Z+3, r24	; 0x03
    3528:	16 96       	adiw	r26, 0x06	; 6
    352a:	ed 91       	ld	r30, X+
    352c:	fc 91       	ld	r31, X
    352e:	17 97       	sbiw	r26, 0x07	; 7
    3530:	30 97       	sbiw	r30, 0x00	; 0
    3532:	11 f0       	breq	.+4      	; 0x3538 <__vector_51+0x7a>
    3534:	cd 01       	movw	r24, r26
    3536:	19 95       	eicall
    3538:	ff 91       	pop	r31
    353a:	ef 91       	pop	r30
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	bf 91       	pop	r27
    3542:	af 91       	pop	r26
    3544:	9f 91       	pop	r25
    3546:	8f 91       	pop	r24
    3548:	7f 91       	pop	r23
    354a:	6f 91       	pop	r22
    354c:	5f 91       	pop	r21
    354e:	4f 91       	pop	r20
    3550:	3f 91       	pop	r19
    3552:	2f 91       	pop	r18
    3554:	0f 90       	pop	r0
    3556:	0b be       	out	0x3b, r0	; 59
    3558:	0f 90       	pop	r0
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	0f 90       	pop	r0
    355e:	1f 90       	pop	r1
    3560:	18 95       	reti

00003562 <__vector_52>:
    3562:	1f 92       	push	r1
    3564:	0f 92       	push	r0
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	0f 92       	push	r0
    356a:	11 24       	eor	r1, r1
    356c:	0b b6       	in	r0, 0x3b	; 59
    356e:	0f 92       	push	r0
    3570:	2f 93       	push	r18
    3572:	8f 93       	push	r24
    3574:	9f 93       	push	r25
    3576:	af 93       	push	r26
    3578:	bf 93       	push	r27
    357a:	ef 93       	push	r30
    357c:	ff 93       	push	r31
    357e:	e0 91 7b 0e 	lds	r30, 0x0E7B	; 0x800e7b <_ser_handle+0x4>
    3582:	f0 91 7c 0e 	lds	r31, 0x0E7C	; 0x800e7c <_ser_handle+0x5>
    3586:	30 97       	sbiw	r30, 0x00	; 0
    3588:	b9 f0       	breq	.+46     	; 0x35b8 <__vector_52+0x56>
    358a:	02 80       	ldd	r0, Z+2	; 0x02
    358c:	f3 81       	ldd	r31, Z+3	; 0x03
    358e:	e0 2d       	mov	r30, r0
    3590:	93 81       	ldd	r25, Z+3	; 0x03
    3592:	82 81       	ldd	r24, Z+2	; 0x02
    3594:	98 17       	cp	r25, r24
    3596:	b1 f0       	breq	.+44     	; 0x35c4 <__vector_52+0x62>
    3598:	92 81       	ldd	r25, Z+2	; 0x02
    359a:	85 81       	ldd	r24, Z+5	; 0x05
    359c:	28 2f       	mov	r18, r24
    359e:	26 95       	lsr	r18
    35a0:	29 23       	and	r18, r25
    35a2:	a0 81       	ld	r26, Z
    35a4:	b1 81       	ldd	r27, Z+1	; 0x01
    35a6:	a2 0f       	add	r26, r18
    35a8:	b1 1d       	adc	r27, r1
    35aa:	2c 91       	ld	r18, X
    35ac:	9f 5f       	subi	r25, 0xFF	; 255
    35ae:	89 23       	and	r24, r25
    35b0:	82 83       	std	Z+2, r24	; 0x02
    35b2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    35b6:	0b c0       	rjmp	.+22     	; 0x35ce <__vector_52+0x6c>
    35b8:	e1 ed       	ldi	r30, 0xD1	; 209
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	8f 7d       	andi	r24, 0xDF	; 223
    35c0:	80 83       	st	Z, r24
    35c2:	05 c0       	rjmp	.+10     	; 0x35ce <__vector_52+0x6c>
    35c4:	e1 ed       	ldi	r30, 0xD1	; 209
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	80 81       	ld	r24, Z
    35ca:	8f 7d       	andi	r24, 0xDF	; 223
    35cc:	80 83       	st	Z, r24
    35ce:	ff 91       	pop	r31
    35d0:	ef 91       	pop	r30
    35d2:	bf 91       	pop	r27
    35d4:	af 91       	pop	r26
    35d6:	9f 91       	pop	r25
    35d8:	8f 91       	pop	r24
    35da:	2f 91       	pop	r18
    35dc:	0f 90       	pop	r0
    35de:	0b be       	out	0x3b, r0	; 59
    35e0:	0f 90       	pop	r0
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	0f 90       	pop	r0
    35e6:	1f 90       	pop	r1
    35e8:	18 95       	reti

000035ea <__vector_54>:
    35ea:	1f 92       	push	r1
    35ec:	0f 92       	push	r0
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	0f 92       	push	r0
    35f2:	11 24       	eor	r1, r1
    35f4:	0b b6       	in	r0, 0x3b	; 59
    35f6:	0f 92       	push	r0
    35f8:	2f 93       	push	r18
    35fa:	3f 93       	push	r19
    35fc:	4f 93       	push	r20
    35fe:	5f 93       	push	r21
    3600:	6f 93       	push	r22
    3602:	7f 93       	push	r23
    3604:	8f 93       	push	r24
    3606:	9f 93       	push	r25
    3608:	af 93       	push	r26
    360a:	bf 93       	push	r27
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	ef 93       	push	r30
    3612:	ff 93       	push	r31
    3614:	a0 91 7d 0e 	lds	r26, 0x0E7D	; 0x800e7d <_ser_handle+0x6>
    3618:	b0 91 7e 0e 	lds	r27, 0x0E7E	; 0x800e7e <_ser_handle+0x7>
    361c:	10 97       	sbiw	r26, 0x00	; 0
    361e:	11 f1       	breq	.+68     	; 0x3664 <__vector_54+0x7a>
    3620:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3624:	14 96       	adiw	r26, 0x04	; 4
    3626:	ed 91       	ld	r30, X+
    3628:	fc 91       	ld	r31, X
    362a:	15 97       	sbiw	r26, 0x05	; 5
    362c:	93 81       	ldd	r25, Z+3	; 0x03
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	25 81       	ldd	r18, Z+5	; 0x05
    3632:	98 1b       	sub	r25, r24
    3634:	92 23       	and	r25, r18
    3636:	84 81       	ldd	r24, Z+4	; 0x04
    3638:	98 17       	cp	r25, r24
    363a:	61 f0       	breq	.+24     	; 0x3654 <__vector_54+0x6a>
    363c:	83 81       	ldd	r24, Z+3	; 0x03
    363e:	26 95       	lsr	r18
    3640:	28 23       	and	r18, r24
    3642:	c0 81       	ld	r28, Z
    3644:	d1 81       	ldd	r29, Z+1	; 0x01
    3646:	c2 0f       	add	r28, r18
    3648:	d1 1d       	adc	r29, r1
    364a:	68 83       	st	Y, r22
    364c:	8f 5f       	subi	r24, 0xFF	; 255
    364e:	95 81       	ldd	r25, Z+5	; 0x05
    3650:	89 23       	and	r24, r25
    3652:	83 83       	std	Z+3, r24	; 0x03
    3654:	16 96       	adiw	r26, 0x06	; 6
    3656:	ed 91       	ld	r30, X+
    3658:	fc 91       	ld	r31, X
    365a:	17 97       	sbiw	r26, 0x07	; 7
    365c:	30 97       	sbiw	r30, 0x00	; 0
    365e:	11 f0       	breq	.+4      	; 0x3664 <__vector_54+0x7a>
    3660:	cd 01       	movw	r24, r26
    3662:	19 95       	eicall
    3664:	ff 91       	pop	r31
    3666:	ef 91       	pop	r30
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	bf 91       	pop	r27
    366e:	af 91       	pop	r26
    3670:	9f 91       	pop	r25
    3672:	8f 91       	pop	r24
    3674:	7f 91       	pop	r23
    3676:	6f 91       	pop	r22
    3678:	5f 91       	pop	r21
    367a:	4f 91       	pop	r20
    367c:	3f 91       	pop	r19
    367e:	2f 91       	pop	r18
    3680:	0f 90       	pop	r0
    3682:	0b be       	out	0x3b, r0	; 59
    3684:	0f 90       	pop	r0
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	0f 90       	pop	r0
    368a:	1f 90       	pop	r1
    368c:	18 95       	reti

0000368e <__vector_55>:
    368e:	1f 92       	push	r1
    3690:	0f 92       	push	r0
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	0f 92       	push	r0
    3696:	11 24       	eor	r1, r1
    3698:	0b b6       	in	r0, 0x3b	; 59
    369a:	0f 92       	push	r0
    369c:	2f 93       	push	r18
    369e:	8f 93       	push	r24
    36a0:	9f 93       	push	r25
    36a2:	af 93       	push	r26
    36a4:	bf 93       	push	r27
    36a6:	ef 93       	push	r30
    36a8:	ff 93       	push	r31
    36aa:	e0 91 7d 0e 	lds	r30, 0x0E7D	; 0x800e7d <_ser_handle+0x6>
    36ae:	f0 91 7e 0e 	lds	r31, 0x0E7E	; 0x800e7e <_ser_handle+0x7>
    36b2:	30 97       	sbiw	r30, 0x00	; 0
    36b4:	b9 f0       	breq	.+46     	; 0x36e4 <__vector_55+0x56>
    36b6:	02 80       	ldd	r0, Z+2	; 0x02
    36b8:	f3 81       	ldd	r31, Z+3	; 0x03
    36ba:	e0 2d       	mov	r30, r0
    36bc:	93 81       	ldd	r25, Z+3	; 0x03
    36be:	82 81       	ldd	r24, Z+2	; 0x02
    36c0:	98 17       	cp	r25, r24
    36c2:	b1 f0       	breq	.+44     	; 0x36f0 <__vector_55+0x62>
    36c4:	92 81       	ldd	r25, Z+2	; 0x02
    36c6:	85 81       	ldd	r24, Z+5	; 0x05
    36c8:	28 2f       	mov	r18, r24
    36ca:	26 95       	lsr	r18
    36cc:	29 23       	and	r18, r25
    36ce:	a0 81       	ld	r26, Z
    36d0:	b1 81       	ldd	r27, Z+1	; 0x01
    36d2:	a2 0f       	add	r26, r18
    36d4:	b1 1d       	adc	r27, r1
    36d6:	2c 91       	ld	r18, X
    36d8:	9f 5f       	subi	r25, 0xFF	; 255
    36da:	89 23       	and	r24, r25
    36dc:	82 83       	std	Z+2, r24	; 0x02
    36de:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    36e2:	0b c0       	rjmp	.+22     	; 0x36fa <__vector_55+0x6c>
    36e4:	e1 e3       	ldi	r30, 0x31	; 49
    36e6:	f1 e0       	ldi	r31, 0x01	; 1
    36e8:	80 81       	ld	r24, Z
    36ea:	8f 7d       	andi	r24, 0xDF	; 223
    36ec:	80 83       	st	Z, r24
    36ee:	05 c0       	rjmp	.+10     	; 0x36fa <__vector_55+0x6c>
    36f0:	e1 e3       	ldi	r30, 0x31	; 49
    36f2:	f1 e0       	ldi	r31, 0x01	; 1
    36f4:	80 81       	ld	r24, Z
    36f6:	8f 7d       	andi	r24, 0xDF	; 223
    36f8:	80 83       	st	Z, r24
    36fa:	ff 91       	pop	r31
    36fc:	ef 91       	pop	r30
    36fe:	bf 91       	pop	r27
    3700:	af 91       	pop	r26
    3702:	9f 91       	pop	r25
    3704:	8f 91       	pop	r24
    3706:	2f 91       	pop	r18
    3708:	0f 90       	pop	r0
    370a:	0b be       	out	0x3b, r0	; 59
    370c:	0f 90       	pop	r0
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	0f 90       	pop	r0
    3712:	1f 90       	pop	r1
    3714:	18 95       	reti

00003716 <usart_getchar>:
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	1f 92       	push	r1
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	be 01       	movw	r22, r28
    3722:	6f 5f       	subi	r22, 0xFF	; 255
    3724:	7f 4f       	sbci	r23, 0xFF	; 255
    3726:	80 91 7f 0e 	lds	r24, 0x0E7F	; 0x800e7f <_com_serial_instance>
    372a:	90 91 80 0e 	lds	r25, 0x0E80	; 0x800e80 <_com_serial_instance+0x1>
    372e:	7b dd       	rcall	.-1290   	; 0x3226 <serial_getByte>
    3730:	81 11       	cpse	r24, r1
    3732:	f6 cf       	rjmp	.-20     	; 0x3720 <usart_getchar+0xa>
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0f 90       	pop	r0
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	08 95       	ret

00003740 <usart_putchar>:
    3740:	68 2f       	mov	r22, r24
    3742:	80 91 7f 0e 	lds	r24, 0x0E7F	; 0x800e7f <_com_serial_instance>
    3746:	90 91 80 0e 	lds	r25, 0x0E80	; 0x800e80 <_com_serial_instance+0x1>
    374a:	ed dc       	rcall	.-1574   	; 0x3126 <serial_sendByte>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	08 95       	ret

00003752 <stdio_initialise>:
    3752:	8f 92       	push	r8
    3754:	9f 92       	push	r9
    3756:	af 92       	push	r10
    3758:	cf 92       	push	r12
    375a:	ef 92       	push	r14
    375c:	0f 93       	push	r16
    375e:	81 2c       	mov	r8, r1
    3760:	91 2c       	mov	r9, r1
    3762:	68 94       	set
    3764:	aa 24       	eor	r10, r10
    3766:	a7 f8       	bld	r10, 7
    3768:	68 94       	set
    376a:	cc 24       	eor	r12, r12
    376c:	c7 f8       	bld	r12, 7
    376e:	e1 2c       	mov	r14, r1
    3770:	00 e0       	ldi	r16, 0x00	; 0
    3772:	23 e0       	ldi	r18, 0x03	; 3
    3774:	40 e0       	ldi	r20, 0x00	; 0
    3776:	51 ee       	ldi	r21, 0xE1	; 225
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	70 e0       	ldi	r23, 0x00	; 0
    377c:	38 dc       	rcall	.-1936   	; 0x2fee <serial_create>
    377e:	90 93 80 0e 	sts	0x0E80, r25	; 0x800e80 <_com_serial_instance+0x1>
    3782:	80 93 7f 0e 	sts	0x0E7F, r24	; 0x800e7f <_com_serial_instance>
    3786:	e1 ea       	ldi	r30, 0xA1	; 161
    3788:	fe e0       	ldi	r31, 0x0E	; 14
    378a:	83 e1       	ldi	r24, 0x13	; 19
    378c:	92 e0       	ldi	r25, 0x02	; 2
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	80 83       	st	Z, r24
    3792:	93 83       	std	Z+3, r25	; 0x03
    3794:	82 83       	std	Z+2, r24	; 0x02
    3796:	0f 91       	pop	r16
    3798:	ef 90       	pop	r14
    379a:	cf 90       	pop	r12
    379c:	af 90       	pop	r10
    379e:	9f 90       	pop	r9
    37a0:	8f 90       	pop	r8
    37a2:	08 95       	ret

000037a4 <_initTwiInterface>:
    37a4:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <_twiIsInitiated>
    37a8:	81 11       	cpse	r24, r1
    37aa:	0c c0       	rjmp	.+24     	; 0x37c4 <_initTwiInterface+0x20>
    37ac:	8c e0       	ldi	r24, 0x0C	; 12
    37ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    37b2:	8f ef       	ldi	r24, 0xFF	; 255
    37b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    37b8:	84 e0       	ldi	r24, 0x04	; 4
    37ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	80 93 8f 0e 	sts	0x0E8F, r24	; 0x800e8f <_twiIsInitiated>
    37c4:	08 95       	ret

000037c6 <twiCreate>:
    37c6:	af 92       	push	r10
    37c8:	bf 92       	push	r11
    37ca:	cf 92       	push	r12
    37cc:	df 92       	push	r13
    37ce:	ef 92       	push	r14
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	a8 2e       	mov	r10, r24
    37dc:	b6 2e       	mov	r11, r22
    37de:	69 01       	movw	r12, r18
    37e0:	7a 01       	movw	r14, r20
    37e2:	84 e0       	ldi	r24, 0x04	; 4
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	cb d3       	rcall	.+1942   	; 0x3f7e <malloc>
    37e8:	ec 01       	movw	r28, r24
    37ea:	89 2b       	or	r24, r25
    37ec:	61 f1       	breq	.+88     	; 0x3846 <twiCreate+0x80>
    37ee:	a8 82       	st	Y, r10
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	b8 12       	cpse	r11, r24
    37f4:	12 c0       	rjmp	.+36     	; 0x381a <twiCreate+0x54>
    37f6:	c7 01       	movw	r24, r14
    37f8:	b6 01       	movw	r22, r12
    37fa:	20 ea       	ldi	r18, 0xA0	; 160
    37fc:	36 e8       	ldi	r19, 0x86	; 134
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	79 d3       	rcall	.+1778   	; 0x3ef6 <__udivmodsi4>
    3804:	da 01       	movw	r26, r20
    3806:	c9 01       	movw	r24, r18
    3808:	40 97       	sbiw	r24, 0x10	; 16
    380a:	a1 09       	sbc	r26, r1
    380c:	b1 09       	sbc	r27, r1
    380e:	b6 95       	lsr	r27
    3810:	a7 95       	ror	r26
    3812:	97 95       	ror	r25
    3814:	87 95       	ror	r24
    3816:	89 83       	std	Y+1, r24	; 0x01
    3818:	11 c0       	rjmp	.+34     	; 0x383c <twiCreate+0x76>
    381a:	c7 01       	movw	r24, r14
    381c:	b6 01       	movw	r22, r12
    381e:	20 e8       	ldi	r18, 0x80	; 128
    3820:	3a e1       	ldi	r19, 0x1A	; 26
    3822:	46 e0       	ldi	r20, 0x06	; 6
    3824:	50 e0       	ldi	r21, 0x00	; 0
    3826:	67 d3       	rcall	.+1742   	; 0x3ef6 <__udivmodsi4>
    3828:	da 01       	movw	r26, r20
    382a:	c9 01       	movw	r24, r18
    382c:	40 97       	sbiw	r24, 0x10	; 16
    382e:	a1 09       	sbc	r26, r1
    3830:	b1 09       	sbc	r27, r1
    3832:	b6 95       	lsr	r27
    3834:	a7 95       	ror	r26
    3836:	97 95       	ror	r25
    3838:	87 95       	ror	r24
    383a:	89 83       	std	Y+1, r24	; 0x01
    383c:	1b 83       	std	Y+3, r17	; 0x03
    383e:	0a 83       	std	Y+2, r16	; 0x02
    3840:	8c 2f       	mov	r24, r28
    3842:	9d 2f       	mov	r25, r29
    3844:	02 c0       	rjmp	.+4      	; 0x384a <twiCreate+0x84>
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	df 91       	pop	r29
    384c:	cf 91       	pop	r28
    384e:	1f 91       	pop	r17
    3850:	0f 91       	pop	r16
    3852:	ff 90       	pop	r15
    3854:	ef 90       	pop	r14
    3856:	df 90       	pop	r13
    3858:	cf 90       	pop	r12
    385a:	bf 90       	pop	r11
    385c:	af 90       	pop	r10
    385e:	08 95       	ret

00003860 <twiIsBusy>:
    3860:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3864:	81 70       	andi	r24, 0x01	; 1
    3866:	08 95       	ret

00003868 <twiTransmit>:
    3868:	ff 92       	push	r15
    386a:	0f 93       	push	r16
    386c:	1f 93       	push	r17
    386e:	cf 93       	push	r28
    3870:	df 93       	push	r29
    3872:	00 97       	sbiw	r24, 0x00	; 0
    3874:	d1 f1       	breq	.+116    	; 0x38ea <twiTransmit+0x82>
    3876:	4a 30       	cpi	r20, 0x0A	; 10
    3878:	d0 f5       	brcc	.+116    	; 0x38ee <twiTransmit+0x86>
    387a:	f4 2e       	mov	r15, r20
    387c:	8b 01       	movw	r16, r22
    387e:	ec 01       	movw	r28, r24
    3880:	ef df       	rcall	.-34     	; 0x3860 <twiIsBusy>
    3882:	81 11       	cpse	r24, r1
    3884:	36 c0       	rjmp	.+108    	; 0x38f2 <twiTransmit+0x8a>
    3886:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <_twiCurrentHandler>
    388a:	90 91 83 0e 	lds	r25, 0x0E83	; 0x800e83 <_twiCurrentHandler+0x1>
    388e:	c8 17       	cp	r28, r24
    3890:	d9 07       	cpc	r29, r25
    3892:	41 f0       	breq	.+16     	; 0x38a4 <twiTransmit+0x3c>
    3894:	87 df       	rcall	.-242    	; 0x37a4 <_initTwiInterface>
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    389c:	d0 93 83 0e 	sts	0x0E83, r29	; 0x800e83 <_twiCurrentHandler+0x1>
    38a0:	c0 93 82 0e 	sts	0x0E82, r28	; 0x800e82 <_twiCurrentHandler>
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	8f 0d       	add	r24, r15
    38a8:	80 93 84 0e 	sts	0x0E84, r24	; 0x800e84 <_twiMessageLen>
    38ac:	88 81       	ld	r24, Y
    38ae:	88 0f       	add	r24, r24
    38b0:	80 93 85 0e 	sts	0x0E85, r24	; 0x800e85 <_twiMessageBuffer>
    38b4:	ff 20       	and	r15, r15
    38b6:	89 f0       	breq	.+34     	; 0x38da <twiTransmit+0x72>
    38b8:	f8 01       	movw	r30, r16
    38ba:	a6 e8       	ldi	r26, 0x86	; 134
    38bc:	be e0       	ldi	r27, 0x0E	; 14
    38be:	4f ef       	ldi	r20, 0xFF	; 255
    38c0:	4f 0d       	add	r20, r15
    38c2:	64 2f       	mov	r22, r20
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	cb 01       	movw	r24, r22
    38c8:	01 96       	adiw	r24, 0x01	; 1
    38ca:	b8 01       	movw	r22, r16
    38cc:	68 0f       	add	r22, r24
    38ce:	79 1f       	adc	r23, r25
    38d0:	81 91       	ld	r24, Z+
    38d2:	8d 93       	st	X+, r24
    38d4:	e6 17       	cp	r30, r22
    38d6:	f7 07       	cpc	r31, r23
    38d8:	d9 f7       	brne	.-10     	; 0x38d0 <twiTransmit+0x68>
    38da:	88 ef       	ldi	r24, 0xF8	; 248
    38dc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    38e0:	85 ea       	ldi	r24, 0xA5	; 165
    38e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    38e6:	84 e0       	ldi	r24, 0x04	; 4
    38e8:	05 c0       	rjmp	.+10     	; 0x38f4 <twiTransmit+0x8c>
    38ea:	86 e0       	ldi	r24, 0x06	; 6
    38ec:	03 c0       	rjmp	.+6      	; 0x38f4 <twiTransmit+0x8c>
    38ee:	87 e0       	ldi	r24, 0x07	; 7
    38f0:	01 c0       	rjmp	.+2      	; 0x38f4 <twiTransmit+0x8c>
    38f2:	82 e0       	ldi	r24, 0x02	; 2
    38f4:	df 91       	pop	r29
    38f6:	cf 91       	pop	r28
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	ff 90       	pop	r15
    38fe:	08 95       	ret

00003900 <twiReceive>:
    3900:	1f 93       	push	r17
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	29 f1       	breq	.+74     	; 0x3954 <twiReceive+0x54>
    390a:	6b 30       	cpi	r22, 0x0B	; 11
    390c:	28 f5       	brcc	.+74     	; 0x3958 <twiReceive+0x58>
    390e:	16 2f       	mov	r17, r22
    3910:	ec 01       	movw	r28, r24
    3912:	a6 df       	rcall	.-180    	; 0x3860 <twiIsBusy>
    3914:	81 11       	cpse	r24, r1
    3916:	22 c0       	rjmp	.+68     	; 0x395c <twiReceive+0x5c>
    3918:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <_twiCurrentHandler>
    391c:	90 91 83 0e 	lds	r25, 0x0E83	; 0x800e83 <_twiCurrentHandler+0x1>
    3920:	c8 17       	cp	r28, r24
    3922:	d9 07       	cpc	r29, r25
    3924:	41 f0       	breq	.+16     	; 0x3936 <twiReceive+0x36>
    3926:	3e df       	rcall	.-388    	; 0x37a4 <_initTwiInterface>
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    392e:	d0 93 83 0e 	sts	0x0E83, r29	; 0x800e83 <_twiCurrentHandler+0x1>
    3932:	c0 93 82 0e 	sts	0x0E82, r28	; 0x800e82 <_twiCurrentHandler>
    3936:	10 93 84 0e 	sts	0x0E84, r17	; 0x800e84 <_twiMessageLen>
    393a:	88 81       	ld	r24, Y
    393c:	88 0f       	add	r24, r24
    393e:	81 60       	ori	r24, 0x01	; 1
    3940:	80 93 85 0e 	sts	0x0E85, r24	; 0x800e85 <_twiMessageBuffer>
    3944:	88 ef       	ldi	r24, 0xF8	; 248
    3946:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    394a:	85 ea       	ldi	r24, 0xA5	; 165
    394c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3950:	85 e0       	ldi	r24, 0x05	; 5
    3952:	05 c0       	rjmp	.+10     	; 0x395e <twiReceive+0x5e>
    3954:	86 e0       	ldi	r24, 0x06	; 6
    3956:	03 c0       	rjmp	.+6      	; 0x395e <twiReceive+0x5e>
    3958:	87 e0       	ldi	r24, 0x07	; 7
    395a:	01 c0       	rjmp	.+2      	; 0x395e <twiReceive+0x5e>
    395c:	82 e0       	ldi	r24, 0x02	; 2
    395e:	df 91       	pop	r29
    3960:	cf 91       	pop	r28
    3962:	1f 91       	pop	r17
    3964:	08 95       	ret

00003966 <__vector_39>:
    3966:	1f 92       	push	r1
    3968:	0f 92       	push	r0
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	0f 92       	push	r0
    396e:	11 24       	eor	r1, r1
    3970:	0b b6       	in	r0, 0x3b	; 59
    3972:	0f 92       	push	r0
    3974:	2f 93       	push	r18
    3976:	3f 93       	push	r19
    3978:	4f 93       	push	r20
    397a:	5f 93       	push	r21
    397c:	6f 93       	push	r22
    397e:	7f 93       	push	r23
    3980:	8f 93       	push	r24
    3982:	9f 93       	push	r25
    3984:	af 93       	push	r26
    3986:	bf 93       	push	r27
    3988:	ef 93       	push	r30
    398a:	ff 93       	push	r31
    398c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3990:	8e 2f       	mov	r24, r30
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	fc 01       	movw	r30, r24
    3996:	38 97       	sbiw	r30, 0x08	; 8
    3998:	e1 35       	cpi	r30, 0x51	; 81
    399a:	f1 05       	cpc	r31, r1
    399c:	08 f0       	brcs	.+2      	; 0x39a0 <__vector_39+0x3a>
    399e:	75 c0       	rjmp	.+234    	; 0x3a8a <__vector_39+0x124>
    39a0:	88 27       	eor	r24, r24
    39a2:	e4 58       	subi	r30, 0x84	; 132
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	8f 4f       	sbci	r24, 0xFF	; 255
    39a8:	c8 c2       	rjmp	.+1424   	; 0x3f3a <__tablejump2__>
    39aa:	10 92 81 0e 	sts	0x0E81, r1	; 0x800e81 <_index.1885>
    39ae:	e0 91 81 0e 	lds	r30, 0x0E81	; 0x800e81 <_index.1885>
    39b2:	80 91 84 0e 	lds	r24, 0x0E84	; 0x800e84 <_twiMessageLen>
    39b6:	e8 17       	cp	r30, r24
    39b8:	70 f4       	brcc	.+28     	; 0x39d6 <__vector_39+0x70>
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	8e 0f       	add	r24, r30
    39be:	80 93 81 0e 	sts	0x0E81, r24	; 0x800e81 <_index.1885>
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	eb 57       	subi	r30, 0x7B	; 123
    39c6:	f1 4f       	sbci	r31, 0xF1	; 241
    39c8:	80 81       	ld	r24, Z
    39ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    39ce:	85 e8       	ldi	r24, 0x85	; 133
    39d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    39d4:	72 c0       	rjmp	.+228    	; 0x3aba <__vector_39+0x154>
    39d6:	84 e9       	ldi	r24, 0x94	; 148
    39d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    39dc:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <_twiCurrentHandler>
    39e0:	90 91 83 0e 	lds	r25, 0x0E83	; 0x800e83 <_twiCurrentHandler+0x1>
    39e4:	dc 01       	movw	r26, r24
    39e6:	12 96       	adiw	r26, 0x02	; 2
    39e8:	ed 91       	ld	r30, X+
    39ea:	fc 91       	ld	r31, X
    39ec:	13 97       	sbiw	r26, 0x03	; 3
    39ee:	30 97       	sbiw	r30, 0x00	; 0
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <__vector_39+0x8e>
    39f2:	63 c0       	rjmp	.+198    	; 0x3aba <__vector_39+0x154>
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	64 e0       	ldi	r22, 0x04	; 4
    39fc:	19 95       	eicall
    39fe:	5d c0       	rjmp	.+186    	; 0x3aba <__vector_39+0x154>
    3a00:	e0 91 81 0e 	lds	r30, 0x0E81	; 0x800e81 <_index.1885>
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	8e 0f       	add	r24, r30
    3a08:	80 93 81 0e 	sts	0x0E81, r24	; 0x800e81 <_index.1885>
    3a0c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	eb 57       	subi	r30, 0x7B	; 123
    3a14:	f1 4f       	sbci	r31, 0xF1	; 241
    3a16:	80 83       	st	Z, r24
    3a18:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3a1c:	80 34       	cpi	r24, 0x40	; 64
    3a1e:	11 f4       	brne	.+4      	; 0x3a24 <__vector_39+0xbe>
    3a20:	10 92 81 0e 	sts	0x0E81, r1	; 0x800e81 <_index.1885>
    3a24:	20 91 81 0e 	lds	r18, 0x0E81	; 0x800e81 <_index.1885>
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	80 91 84 0e 	lds	r24, 0x0E84	; 0x800e84 <_twiMessageLen>
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	28 17       	cp	r18, r24
    3a34:	39 07       	cpc	r19, r25
    3a36:	24 f4       	brge	.+8      	; 0x3a40 <__vector_39+0xda>
    3a38:	85 ec       	ldi	r24, 0xC5	; 197
    3a3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a3e:	3d c0       	rjmp	.+122    	; 0x3aba <__vector_39+0x154>
    3a40:	85 e8       	ldi	r24, 0x85	; 133
    3a42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a46:	39 c0       	rjmp	.+114    	; 0x3aba <__vector_39+0x154>
    3a48:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3a4c:	e0 91 81 0e 	lds	r30, 0x0E81	; 0x800e81 <_index.1885>
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	eb 57       	subi	r30, 0x7B	; 123
    3a54:	f1 4f       	sbci	r31, 0xF1	; 241
    3a56:	80 83       	st	Z, r24
    3a58:	84 e9       	ldi	r24, 0x94	; 148
    3a5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a5e:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <_twiCurrentHandler>
    3a62:	90 91 83 0e 	lds	r25, 0x0E83	; 0x800e83 <_twiCurrentHandler+0x1>
    3a66:	dc 01       	movw	r26, r24
    3a68:	12 96       	adiw	r26, 0x02	; 2
    3a6a:	ed 91       	ld	r30, X+
    3a6c:	fc 91       	ld	r31, X
    3a6e:	13 97       	sbiw	r26, 0x03	; 3
    3a70:	30 97       	sbiw	r30, 0x00	; 0
    3a72:	19 f1       	breq	.+70     	; 0x3aba <__vector_39+0x154>
    3a74:	20 91 84 0e 	lds	r18, 0x0E84	; 0x800e84 <_twiMessageLen>
    3a78:	45 e8       	ldi	r20, 0x85	; 133
    3a7a:	5e e0       	ldi	r21, 0x0E	; 14
    3a7c:	65 e0       	ldi	r22, 0x05	; 5
    3a7e:	19 95       	eicall
    3a80:	1c c0       	rjmp	.+56     	; 0x3aba <__vector_39+0x154>
    3a82:	85 ea       	ldi	r24, 0xA5	; 165
    3a84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a88:	18 c0       	rjmp	.+48     	; 0x3aba <__vector_39+0x154>
    3a8a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3a8e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3a92:	84 e0       	ldi	r24, 0x04	; 4
    3a94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a98:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <_twiCurrentHandler>
    3a9c:	90 91 83 0e 	lds	r25, 0x0E83	; 0x800e83 <_twiCurrentHandler+0x1>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	12 96       	adiw	r26, 0x02	; 2
    3aa4:	ed 91       	ld	r30, X+
    3aa6:	fc 91       	ld	r31, X
    3aa8:	13 97       	sbiw	r26, 0x03	; 3
    3aaa:	30 97       	sbiw	r30, 0x00	; 0
    3aac:	31 f0       	breq	.+12     	; 0x3aba <__vector_39+0x154>
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	50 e0       	ldi	r21, 0x00	; 0
    3ab4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    3ab8:	19 95       	eicall
    3aba:	ff 91       	pop	r31
    3abc:	ef 91       	pop	r30
    3abe:	bf 91       	pop	r27
    3ac0:	af 91       	pop	r26
    3ac2:	9f 91       	pop	r25
    3ac4:	8f 91       	pop	r24
    3ac6:	7f 91       	pop	r23
    3ac8:	6f 91       	pop	r22
    3aca:	5f 91       	pop	r21
    3acc:	4f 91       	pop	r20
    3ace:	3f 91       	pop	r19
    3ad0:	2f 91       	pop	r18
    3ad2:	0f 90       	pop	r0
    3ad4:	0b be       	out	0x3b, r0	; 59
    3ad6:	0f 90       	pop	r0
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	0f 90       	pop	r0
    3adc:	1f 90       	pop	r1
    3ade:	18 95       	reti

00003ae0 <fifo_init>:
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	41 11       	cpse	r20, r1
    3ae4:	01 c0       	rjmp	.+2      	; 0x3ae8 <fifo_init+0x8>
    3ae6:	6c d3       	rcall	.+1752   	; 0x41c0 <abort>
    3ae8:	84 2f       	mov	r24, r20
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	9c 01       	movw	r18, r24
    3aee:	21 50       	subi	r18, 0x01	; 1
    3af0:	31 09       	sbc	r19, r1
    3af2:	82 23       	and	r24, r18
    3af4:	93 23       	and	r25, r19
    3af6:	89 2b       	or	r24, r25
    3af8:	09 f0       	breq	.+2      	; 0x3afc <fifo_init+0x1c>
    3afa:	62 d3       	rcall	.+1732   	; 0x41c0 <abort>
    3afc:	41 38       	cpi	r20, 0x81	; 129
    3afe:	08 f0       	brcs	.+2      	; 0x3b02 <fifo_init+0x22>
    3b00:	5f d3       	rcall	.+1726   	; 0x41c0 <abort>
    3b02:	12 82       	std	Z+2, r1	; 0x02
    3b04:	13 82       	std	Z+3, r1	; 0x03
    3b06:	44 83       	std	Z+4, r20	; 0x04
    3b08:	44 0f       	add	r20, r20
    3b0a:	41 50       	subi	r20, 0x01	; 1
    3b0c:	45 83       	std	Z+5, r20	; 0x05
    3b0e:	71 83       	std	Z+1, r23	; 0x01
    3b10:	60 83       	st	Z, r22
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	08 95       	ret

00003b18 <__subsf3>:
    3b18:	50 58       	subi	r21, 0x80	; 128

00003b1a <__addsf3>:
    3b1a:	bb 27       	eor	r27, r27
    3b1c:	aa 27       	eor	r26, r26
    3b1e:	0e d0       	rcall	.+28     	; 0x3b3c <__addsf3x>
    3b20:	4d c1       	rjmp	.+666    	; 0x3dbc <__fp_round>
    3b22:	3e d1       	rcall	.+636    	; 0x3da0 <__fp_pscA>
    3b24:	30 f0       	brcs	.+12     	; 0x3b32 <__addsf3+0x18>
    3b26:	43 d1       	rcall	.+646    	; 0x3dae <__fp_pscB>
    3b28:	20 f0       	brcs	.+8      	; 0x3b32 <__addsf3+0x18>
    3b2a:	31 f4       	brne	.+12     	; 0x3b38 <__addsf3+0x1e>
    3b2c:	9f 3f       	cpi	r25, 0xFF	; 255
    3b2e:	11 f4       	brne	.+4      	; 0x3b34 <__addsf3+0x1a>
    3b30:	1e f4       	brtc	.+6      	; 0x3b38 <__addsf3+0x1e>
    3b32:	33 c1       	rjmp	.+614    	; 0x3d9a <__fp_nan>
    3b34:	0e f4       	brtc	.+2      	; 0x3b38 <__addsf3+0x1e>
    3b36:	e0 95       	com	r30
    3b38:	e7 fb       	bst	r30, 7
    3b3a:	29 c1       	rjmp	.+594    	; 0x3d8e <__fp_inf>

00003b3c <__addsf3x>:
    3b3c:	e9 2f       	mov	r30, r25
    3b3e:	4f d1       	rcall	.+670    	; 0x3dde <__fp_split3>
    3b40:	80 f3       	brcs	.-32     	; 0x3b22 <__addsf3+0x8>
    3b42:	ba 17       	cp	r27, r26
    3b44:	62 07       	cpc	r22, r18
    3b46:	73 07       	cpc	r23, r19
    3b48:	84 07       	cpc	r24, r20
    3b4a:	95 07       	cpc	r25, r21
    3b4c:	18 f0       	brcs	.+6      	; 0x3b54 <__addsf3x+0x18>
    3b4e:	71 f4       	brne	.+28     	; 0x3b6c <__addsf3x+0x30>
    3b50:	9e f5       	brtc	.+102    	; 0x3bb8 <__addsf3x+0x7c>
    3b52:	67 c1       	rjmp	.+718    	; 0x3e22 <__fp_zero>
    3b54:	0e f4       	brtc	.+2      	; 0x3b58 <__addsf3x+0x1c>
    3b56:	e0 95       	com	r30
    3b58:	0b 2e       	mov	r0, r27
    3b5a:	ba 2f       	mov	r27, r26
    3b5c:	a0 2d       	mov	r26, r0
    3b5e:	0b 01       	movw	r0, r22
    3b60:	b9 01       	movw	r22, r18
    3b62:	90 01       	movw	r18, r0
    3b64:	0c 01       	movw	r0, r24
    3b66:	ca 01       	movw	r24, r20
    3b68:	a0 01       	movw	r20, r0
    3b6a:	11 24       	eor	r1, r1
    3b6c:	ff 27       	eor	r31, r31
    3b6e:	59 1b       	sub	r21, r25
    3b70:	99 f0       	breq	.+38     	; 0x3b98 <__addsf3x+0x5c>
    3b72:	59 3f       	cpi	r21, 0xF9	; 249
    3b74:	50 f4       	brcc	.+20     	; 0x3b8a <__addsf3x+0x4e>
    3b76:	50 3e       	cpi	r21, 0xE0	; 224
    3b78:	68 f1       	brcs	.+90     	; 0x3bd4 <__addsf3x+0x98>
    3b7a:	1a 16       	cp	r1, r26
    3b7c:	f0 40       	sbci	r31, 0x00	; 0
    3b7e:	a2 2f       	mov	r26, r18
    3b80:	23 2f       	mov	r18, r19
    3b82:	34 2f       	mov	r19, r20
    3b84:	44 27       	eor	r20, r20
    3b86:	58 5f       	subi	r21, 0xF8	; 248
    3b88:	f3 cf       	rjmp	.-26     	; 0x3b70 <__addsf3x+0x34>
    3b8a:	46 95       	lsr	r20
    3b8c:	37 95       	ror	r19
    3b8e:	27 95       	ror	r18
    3b90:	a7 95       	ror	r26
    3b92:	f0 40       	sbci	r31, 0x00	; 0
    3b94:	53 95       	inc	r21
    3b96:	c9 f7       	brne	.-14     	; 0x3b8a <__addsf3x+0x4e>
    3b98:	7e f4       	brtc	.+30     	; 0x3bb8 <__addsf3x+0x7c>
    3b9a:	1f 16       	cp	r1, r31
    3b9c:	ba 0b       	sbc	r27, r26
    3b9e:	62 0b       	sbc	r22, r18
    3ba0:	73 0b       	sbc	r23, r19
    3ba2:	84 0b       	sbc	r24, r20
    3ba4:	ba f0       	brmi	.+46     	; 0x3bd4 <__addsf3x+0x98>
    3ba6:	91 50       	subi	r25, 0x01	; 1
    3ba8:	a1 f0       	breq	.+40     	; 0x3bd2 <__addsf3x+0x96>
    3baa:	ff 0f       	add	r31, r31
    3bac:	bb 1f       	adc	r27, r27
    3bae:	66 1f       	adc	r22, r22
    3bb0:	77 1f       	adc	r23, r23
    3bb2:	88 1f       	adc	r24, r24
    3bb4:	c2 f7       	brpl	.-16     	; 0x3ba6 <__addsf3x+0x6a>
    3bb6:	0e c0       	rjmp	.+28     	; 0x3bd4 <__addsf3x+0x98>
    3bb8:	ba 0f       	add	r27, r26
    3bba:	62 1f       	adc	r22, r18
    3bbc:	73 1f       	adc	r23, r19
    3bbe:	84 1f       	adc	r24, r20
    3bc0:	48 f4       	brcc	.+18     	; 0x3bd4 <__addsf3x+0x98>
    3bc2:	87 95       	ror	r24
    3bc4:	77 95       	ror	r23
    3bc6:	67 95       	ror	r22
    3bc8:	b7 95       	ror	r27
    3bca:	f7 95       	ror	r31
    3bcc:	9e 3f       	cpi	r25, 0xFE	; 254
    3bce:	08 f0       	brcs	.+2      	; 0x3bd2 <__addsf3x+0x96>
    3bd0:	b3 cf       	rjmp	.-154    	; 0x3b38 <__addsf3+0x1e>
    3bd2:	93 95       	inc	r25
    3bd4:	88 0f       	add	r24, r24
    3bd6:	08 f0       	brcs	.+2      	; 0x3bda <__addsf3x+0x9e>
    3bd8:	99 27       	eor	r25, r25
    3bda:	ee 0f       	add	r30, r30
    3bdc:	97 95       	ror	r25
    3bde:	87 95       	ror	r24
    3be0:	08 95       	ret

00003be2 <__divsf3>:
    3be2:	0c d0       	rcall	.+24     	; 0x3bfc <__divsf3x>
    3be4:	eb c0       	rjmp	.+470    	; 0x3dbc <__fp_round>
    3be6:	e3 d0       	rcall	.+454    	; 0x3dae <__fp_pscB>
    3be8:	40 f0       	brcs	.+16     	; 0x3bfa <__divsf3+0x18>
    3bea:	da d0       	rcall	.+436    	; 0x3da0 <__fp_pscA>
    3bec:	30 f0       	brcs	.+12     	; 0x3bfa <__divsf3+0x18>
    3bee:	21 f4       	brne	.+8      	; 0x3bf8 <__divsf3+0x16>
    3bf0:	5f 3f       	cpi	r21, 0xFF	; 255
    3bf2:	19 f0       	breq	.+6      	; 0x3bfa <__divsf3+0x18>
    3bf4:	cc c0       	rjmp	.+408    	; 0x3d8e <__fp_inf>
    3bf6:	51 11       	cpse	r21, r1
    3bf8:	15 c1       	rjmp	.+554    	; 0x3e24 <__fp_szero>
    3bfa:	cf c0       	rjmp	.+414    	; 0x3d9a <__fp_nan>

00003bfc <__divsf3x>:
    3bfc:	f0 d0       	rcall	.+480    	; 0x3dde <__fp_split3>
    3bfe:	98 f3       	brcs	.-26     	; 0x3be6 <__divsf3+0x4>

00003c00 <__divsf3_pse>:
    3c00:	99 23       	and	r25, r25
    3c02:	c9 f3       	breq	.-14     	; 0x3bf6 <__divsf3+0x14>
    3c04:	55 23       	and	r21, r21
    3c06:	b1 f3       	breq	.-20     	; 0x3bf4 <__divsf3+0x12>
    3c08:	95 1b       	sub	r25, r21
    3c0a:	55 0b       	sbc	r21, r21
    3c0c:	bb 27       	eor	r27, r27
    3c0e:	aa 27       	eor	r26, r26
    3c10:	62 17       	cp	r22, r18
    3c12:	73 07       	cpc	r23, r19
    3c14:	84 07       	cpc	r24, r20
    3c16:	38 f0       	brcs	.+14     	; 0x3c26 <__divsf3_pse+0x26>
    3c18:	9f 5f       	subi	r25, 0xFF	; 255
    3c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c1c:	22 0f       	add	r18, r18
    3c1e:	33 1f       	adc	r19, r19
    3c20:	44 1f       	adc	r20, r20
    3c22:	aa 1f       	adc	r26, r26
    3c24:	a9 f3       	breq	.-22     	; 0x3c10 <__divsf3_pse+0x10>
    3c26:	33 d0       	rcall	.+102    	; 0x3c8e <__divsf3_pse+0x8e>
    3c28:	0e 2e       	mov	r0, r30
    3c2a:	3a f0       	brmi	.+14     	; 0x3c3a <__divsf3_pse+0x3a>
    3c2c:	e0 e8       	ldi	r30, 0x80	; 128
    3c2e:	30 d0       	rcall	.+96     	; 0x3c90 <__divsf3_pse+0x90>
    3c30:	91 50       	subi	r25, 0x01	; 1
    3c32:	50 40       	sbci	r21, 0x00	; 0
    3c34:	e6 95       	lsr	r30
    3c36:	00 1c       	adc	r0, r0
    3c38:	ca f7       	brpl	.-14     	; 0x3c2c <__divsf3_pse+0x2c>
    3c3a:	29 d0       	rcall	.+82     	; 0x3c8e <__divsf3_pse+0x8e>
    3c3c:	fe 2f       	mov	r31, r30
    3c3e:	27 d0       	rcall	.+78     	; 0x3c8e <__divsf3_pse+0x8e>
    3c40:	66 0f       	add	r22, r22
    3c42:	77 1f       	adc	r23, r23
    3c44:	88 1f       	adc	r24, r24
    3c46:	bb 1f       	adc	r27, r27
    3c48:	26 17       	cp	r18, r22
    3c4a:	37 07       	cpc	r19, r23
    3c4c:	48 07       	cpc	r20, r24
    3c4e:	ab 07       	cpc	r26, r27
    3c50:	b0 e8       	ldi	r27, 0x80	; 128
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <__divsf3_pse+0x56>
    3c54:	bb 0b       	sbc	r27, r27
    3c56:	80 2d       	mov	r24, r0
    3c58:	bf 01       	movw	r22, r30
    3c5a:	ff 27       	eor	r31, r31
    3c5c:	93 58       	subi	r25, 0x83	; 131
    3c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c60:	2a f0       	brmi	.+10     	; 0x3c6c <__divsf3_pse+0x6c>
    3c62:	9e 3f       	cpi	r25, 0xFE	; 254
    3c64:	51 05       	cpc	r21, r1
    3c66:	68 f0       	brcs	.+26     	; 0x3c82 <__divsf3_pse+0x82>
    3c68:	92 c0       	rjmp	.+292    	; 0x3d8e <__fp_inf>
    3c6a:	dc c0       	rjmp	.+440    	; 0x3e24 <__fp_szero>
    3c6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c6e:	ec f3       	brlt	.-6      	; 0x3c6a <__divsf3_pse+0x6a>
    3c70:	98 3e       	cpi	r25, 0xE8	; 232
    3c72:	dc f3       	brlt	.-10     	; 0x3c6a <__divsf3_pse+0x6a>
    3c74:	86 95       	lsr	r24
    3c76:	77 95       	ror	r23
    3c78:	67 95       	ror	r22
    3c7a:	b7 95       	ror	r27
    3c7c:	f7 95       	ror	r31
    3c7e:	9f 5f       	subi	r25, 0xFF	; 255
    3c80:	c9 f7       	brne	.-14     	; 0x3c74 <__divsf3_pse+0x74>
    3c82:	88 0f       	add	r24, r24
    3c84:	91 1d       	adc	r25, r1
    3c86:	96 95       	lsr	r25
    3c88:	87 95       	ror	r24
    3c8a:	97 f9       	bld	r25, 7
    3c8c:	08 95       	ret
    3c8e:	e1 e0       	ldi	r30, 0x01	; 1
    3c90:	66 0f       	add	r22, r22
    3c92:	77 1f       	adc	r23, r23
    3c94:	88 1f       	adc	r24, r24
    3c96:	bb 1f       	adc	r27, r27
    3c98:	62 17       	cp	r22, r18
    3c9a:	73 07       	cpc	r23, r19
    3c9c:	84 07       	cpc	r24, r20
    3c9e:	ba 07       	cpc	r27, r26
    3ca0:	20 f0       	brcs	.+8      	; 0x3caa <__divsf3_pse+0xaa>
    3ca2:	62 1b       	sub	r22, r18
    3ca4:	73 0b       	sbc	r23, r19
    3ca6:	84 0b       	sbc	r24, r20
    3ca8:	ba 0b       	sbc	r27, r26
    3caa:	ee 1f       	adc	r30, r30
    3cac:	88 f7       	brcc	.-30     	; 0x3c90 <__divsf3_pse+0x90>
    3cae:	e0 95       	com	r30
    3cb0:	08 95       	ret

00003cb2 <__fixsfsi>:
    3cb2:	04 d0       	rcall	.+8      	; 0x3cbc <__fixunssfsi>
    3cb4:	68 94       	set
    3cb6:	b1 11       	cpse	r27, r1
    3cb8:	b5 c0       	rjmp	.+362    	; 0x3e24 <__fp_szero>
    3cba:	08 95       	ret

00003cbc <__fixunssfsi>:
    3cbc:	98 d0       	rcall	.+304    	; 0x3dee <__fp_splitA>
    3cbe:	88 f0       	brcs	.+34     	; 0x3ce2 <__fixunssfsi+0x26>
    3cc0:	9f 57       	subi	r25, 0x7F	; 127
    3cc2:	90 f0       	brcs	.+36     	; 0x3ce8 <__fixunssfsi+0x2c>
    3cc4:	b9 2f       	mov	r27, r25
    3cc6:	99 27       	eor	r25, r25
    3cc8:	b7 51       	subi	r27, 0x17	; 23
    3cca:	a0 f0       	brcs	.+40     	; 0x3cf4 <__fixunssfsi+0x38>
    3ccc:	d1 f0       	breq	.+52     	; 0x3d02 <__fixunssfsi+0x46>
    3cce:	66 0f       	add	r22, r22
    3cd0:	77 1f       	adc	r23, r23
    3cd2:	88 1f       	adc	r24, r24
    3cd4:	99 1f       	adc	r25, r25
    3cd6:	1a f0       	brmi	.+6      	; 0x3cde <__fixunssfsi+0x22>
    3cd8:	ba 95       	dec	r27
    3cda:	c9 f7       	brne	.-14     	; 0x3cce <__fixunssfsi+0x12>
    3cdc:	12 c0       	rjmp	.+36     	; 0x3d02 <__fixunssfsi+0x46>
    3cde:	b1 30       	cpi	r27, 0x01	; 1
    3ce0:	81 f0       	breq	.+32     	; 0x3d02 <__fixunssfsi+0x46>
    3ce2:	9f d0       	rcall	.+318    	; 0x3e22 <__fp_zero>
    3ce4:	b1 e0       	ldi	r27, 0x01	; 1
    3ce6:	08 95       	ret
    3ce8:	9c c0       	rjmp	.+312    	; 0x3e22 <__fp_zero>
    3cea:	67 2f       	mov	r22, r23
    3cec:	78 2f       	mov	r23, r24
    3cee:	88 27       	eor	r24, r24
    3cf0:	b8 5f       	subi	r27, 0xF8	; 248
    3cf2:	39 f0       	breq	.+14     	; 0x3d02 <__fixunssfsi+0x46>
    3cf4:	b9 3f       	cpi	r27, 0xF9	; 249
    3cf6:	cc f3       	brlt	.-14     	; 0x3cea <__fixunssfsi+0x2e>
    3cf8:	86 95       	lsr	r24
    3cfa:	77 95       	ror	r23
    3cfc:	67 95       	ror	r22
    3cfe:	b3 95       	inc	r27
    3d00:	d9 f7       	brne	.-10     	; 0x3cf8 <__fixunssfsi+0x3c>
    3d02:	3e f4       	brtc	.+14     	; 0x3d12 <__fixunssfsi+0x56>
    3d04:	90 95       	com	r25
    3d06:	80 95       	com	r24
    3d08:	70 95       	com	r23
    3d0a:	61 95       	neg	r22
    3d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d0e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d10:	9f 4f       	sbci	r25, 0xFF	; 255
    3d12:	08 95       	ret

00003d14 <__floatunsisf>:
    3d14:	e8 94       	clt
    3d16:	09 c0       	rjmp	.+18     	; 0x3d2a <__floatsisf+0x12>

00003d18 <__floatsisf>:
    3d18:	97 fb       	bst	r25, 7
    3d1a:	3e f4       	brtc	.+14     	; 0x3d2a <__floatsisf+0x12>
    3d1c:	90 95       	com	r25
    3d1e:	80 95       	com	r24
    3d20:	70 95       	com	r23
    3d22:	61 95       	neg	r22
    3d24:	7f 4f       	sbci	r23, 0xFF	; 255
    3d26:	8f 4f       	sbci	r24, 0xFF	; 255
    3d28:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2a:	99 23       	and	r25, r25
    3d2c:	a9 f0       	breq	.+42     	; 0x3d58 <__floatsisf+0x40>
    3d2e:	f9 2f       	mov	r31, r25
    3d30:	96 e9       	ldi	r25, 0x96	; 150
    3d32:	bb 27       	eor	r27, r27
    3d34:	93 95       	inc	r25
    3d36:	f6 95       	lsr	r31
    3d38:	87 95       	ror	r24
    3d3a:	77 95       	ror	r23
    3d3c:	67 95       	ror	r22
    3d3e:	b7 95       	ror	r27
    3d40:	f1 11       	cpse	r31, r1
    3d42:	f8 cf       	rjmp	.-16     	; 0x3d34 <__floatsisf+0x1c>
    3d44:	fa f4       	brpl	.+62     	; 0x3d84 <__floatsisf+0x6c>
    3d46:	bb 0f       	add	r27, r27
    3d48:	11 f4       	brne	.+4      	; 0x3d4e <__floatsisf+0x36>
    3d4a:	60 ff       	sbrs	r22, 0
    3d4c:	1b c0       	rjmp	.+54     	; 0x3d84 <__floatsisf+0x6c>
    3d4e:	6f 5f       	subi	r22, 0xFF	; 255
    3d50:	7f 4f       	sbci	r23, 0xFF	; 255
    3d52:	8f 4f       	sbci	r24, 0xFF	; 255
    3d54:	9f 4f       	sbci	r25, 0xFF	; 255
    3d56:	16 c0       	rjmp	.+44     	; 0x3d84 <__floatsisf+0x6c>
    3d58:	88 23       	and	r24, r24
    3d5a:	11 f0       	breq	.+4      	; 0x3d60 <__floatsisf+0x48>
    3d5c:	96 e9       	ldi	r25, 0x96	; 150
    3d5e:	11 c0       	rjmp	.+34     	; 0x3d82 <__floatsisf+0x6a>
    3d60:	77 23       	and	r23, r23
    3d62:	21 f0       	breq	.+8      	; 0x3d6c <__floatsisf+0x54>
    3d64:	9e e8       	ldi	r25, 0x8E	; 142
    3d66:	87 2f       	mov	r24, r23
    3d68:	76 2f       	mov	r23, r22
    3d6a:	05 c0       	rjmp	.+10     	; 0x3d76 <__floatsisf+0x5e>
    3d6c:	66 23       	and	r22, r22
    3d6e:	71 f0       	breq	.+28     	; 0x3d8c <__floatsisf+0x74>
    3d70:	96 e8       	ldi	r25, 0x86	; 134
    3d72:	86 2f       	mov	r24, r22
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	60 e0       	ldi	r22, 0x00	; 0
    3d78:	2a f0       	brmi	.+10     	; 0x3d84 <__floatsisf+0x6c>
    3d7a:	9a 95       	dec	r25
    3d7c:	66 0f       	add	r22, r22
    3d7e:	77 1f       	adc	r23, r23
    3d80:	88 1f       	adc	r24, r24
    3d82:	da f7       	brpl	.-10     	; 0x3d7a <__floatsisf+0x62>
    3d84:	88 0f       	add	r24, r24
    3d86:	96 95       	lsr	r25
    3d88:	87 95       	ror	r24
    3d8a:	97 f9       	bld	r25, 7
    3d8c:	08 95       	ret

00003d8e <__fp_inf>:
    3d8e:	97 f9       	bld	r25, 7
    3d90:	9f 67       	ori	r25, 0x7F	; 127
    3d92:	80 e8       	ldi	r24, 0x80	; 128
    3d94:	70 e0       	ldi	r23, 0x00	; 0
    3d96:	60 e0       	ldi	r22, 0x00	; 0
    3d98:	08 95       	ret

00003d9a <__fp_nan>:
    3d9a:	9f ef       	ldi	r25, 0xFF	; 255
    3d9c:	80 ec       	ldi	r24, 0xC0	; 192
    3d9e:	08 95       	ret

00003da0 <__fp_pscA>:
    3da0:	00 24       	eor	r0, r0
    3da2:	0a 94       	dec	r0
    3da4:	16 16       	cp	r1, r22
    3da6:	17 06       	cpc	r1, r23
    3da8:	18 06       	cpc	r1, r24
    3daa:	09 06       	cpc	r0, r25
    3dac:	08 95       	ret

00003dae <__fp_pscB>:
    3dae:	00 24       	eor	r0, r0
    3db0:	0a 94       	dec	r0
    3db2:	12 16       	cp	r1, r18
    3db4:	13 06       	cpc	r1, r19
    3db6:	14 06       	cpc	r1, r20
    3db8:	05 06       	cpc	r0, r21
    3dba:	08 95       	ret

00003dbc <__fp_round>:
    3dbc:	09 2e       	mov	r0, r25
    3dbe:	03 94       	inc	r0
    3dc0:	00 0c       	add	r0, r0
    3dc2:	11 f4       	brne	.+4      	; 0x3dc8 <__fp_round+0xc>
    3dc4:	88 23       	and	r24, r24
    3dc6:	52 f0       	brmi	.+20     	; 0x3ddc <__fp_round+0x20>
    3dc8:	bb 0f       	add	r27, r27
    3dca:	40 f4       	brcc	.+16     	; 0x3ddc <__fp_round+0x20>
    3dcc:	bf 2b       	or	r27, r31
    3dce:	11 f4       	brne	.+4      	; 0x3dd4 <__fp_round+0x18>
    3dd0:	60 ff       	sbrs	r22, 0
    3dd2:	04 c0       	rjmp	.+8      	; 0x3ddc <__fp_round+0x20>
    3dd4:	6f 5f       	subi	r22, 0xFF	; 255
    3dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3dda:	9f 4f       	sbci	r25, 0xFF	; 255
    3ddc:	08 95       	ret

00003dde <__fp_split3>:
    3dde:	57 fd       	sbrc	r21, 7
    3de0:	90 58       	subi	r25, 0x80	; 128
    3de2:	44 0f       	add	r20, r20
    3de4:	55 1f       	adc	r21, r21
    3de6:	59 f0       	breq	.+22     	; 0x3dfe <__fp_splitA+0x10>
    3de8:	5f 3f       	cpi	r21, 0xFF	; 255
    3dea:	71 f0       	breq	.+28     	; 0x3e08 <__fp_splitA+0x1a>
    3dec:	47 95       	ror	r20

00003dee <__fp_splitA>:
    3dee:	88 0f       	add	r24, r24
    3df0:	97 fb       	bst	r25, 7
    3df2:	99 1f       	adc	r25, r25
    3df4:	61 f0       	breq	.+24     	; 0x3e0e <__fp_splitA+0x20>
    3df6:	9f 3f       	cpi	r25, 0xFF	; 255
    3df8:	79 f0       	breq	.+30     	; 0x3e18 <__fp_splitA+0x2a>
    3dfa:	87 95       	ror	r24
    3dfc:	08 95       	ret
    3dfe:	12 16       	cp	r1, r18
    3e00:	13 06       	cpc	r1, r19
    3e02:	14 06       	cpc	r1, r20
    3e04:	55 1f       	adc	r21, r21
    3e06:	f2 cf       	rjmp	.-28     	; 0x3dec <__fp_split3+0xe>
    3e08:	46 95       	lsr	r20
    3e0a:	f1 df       	rcall	.-30     	; 0x3dee <__fp_splitA>
    3e0c:	08 c0       	rjmp	.+16     	; 0x3e1e <__fp_splitA+0x30>
    3e0e:	16 16       	cp	r1, r22
    3e10:	17 06       	cpc	r1, r23
    3e12:	18 06       	cpc	r1, r24
    3e14:	99 1f       	adc	r25, r25
    3e16:	f1 cf       	rjmp	.-30     	; 0x3dfa <__fp_splitA+0xc>
    3e18:	86 95       	lsr	r24
    3e1a:	71 05       	cpc	r23, r1
    3e1c:	61 05       	cpc	r22, r1
    3e1e:	08 94       	sec
    3e20:	08 95       	ret

00003e22 <__fp_zero>:
    3e22:	e8 94       	clt

00003e24 <__fp_szero>:
    3e24:	bb 27       	eor	r27, r27
    3e26:	66 27       	eor	r22, r22
    3e28:	77 27       	eor	r23, r23
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	97 f9       	bld	r25, 7
    3e2e:	08 95       	ret

00003e30 <__mulsf3>:
    3e30:	0b d0       	rcall	.+22     	; 0x3e48 <__mulsf3x>
    3e32:	c4 cf       	rjmp	.-120    	; 0x3dbc <__fp_round>
    3e34:	b5 df       	rcall	.-150    	; 0x3da0 <__fp_pscA>
    3e36:	28 f0       	brcs	.+10     	; 0x3e42 <__mulsf3+0x12>
    3e38:	ba df       	rcall	.-140    	; 0x3dae <__fp_pscB>
    3e3a:	18 f0       	brcs	.+6      	; 0x3e42 <__mulsf3+0x12>
    3e3c:	95 23       	and	r25, r21
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <__mulsf3+0x12>
    3e40:	a6 cf       	rjmp	.-180    	; 0x3d8e <__fp_inf>
    3e42:	ab cf       	rjmp	.-170    	; 0x3d9a <__fp_nan>
    3e44:	11 24       	eor	r1, r1
    3e46:	ee cf       	rjmp	.-36     	; 0x3e24 <__fp_szero>

00003e48 <__mulsf3x>:
    3e48:	ca df       	rcall	.-108    	; 0x3dde <__fp_split3>
    3e4a:	a0 f3       	brcs	.-24     	; 0x3e34 <__mulsf3+0x4>

00003e4c <__mulsf3_pse>:
    3e4c:	95 9f       	mul	r25, r21
    3e4e:	d1 f3       	breq	.-12     	; 0x3e44 <__mulsf3+0x14>
    3e50:	95 0f       	add	r25, r21
    3e52:	50 e0       	ldi	r21, 0x00	; 0
    3e54:	55 1f       	adc	r21, r21
    3e56:	62 9f       	mul	r22, r18
    3e58:	f0 01       	movw	r30, r0
    3e5a:	72 9f       	mul	r23, r18
    3e5c:	bb 27       	eor	r27, r27
    3e5e:	f0 0d       	add	r31, r0
    3e60:	b1 1d       	adc	r27, r1
    3e62:	63 9f       	mul	r22, r19
    3e64:	aa 27       	eor	r26, r26
    3e66:	f0 0d       	add	r31, r0
    3e68:	b1 1d       	adc	r27, r1
    3e6a:	aa 1f       	adc	r26, r26
    3e6c:	64 9f       	mul	r22, r20
    3e6e:	66 27       	eor	r22, r22
    3e70:	b0 0d       	add	r27, r0
    3e72:	a1 1d       	adc	r26, r1
    3e74:	66 1f       	adc	r22, r22
    3e76:	82 9f       	mul	r24, r18
    3e78:	22 27       	eor	r18, r18
    3e7a:	b0 0d       	add	r27, r0
    3e7c:	a1 1d       	adc	r26, r1
    3e7e:	62 1f       	adc	r22, r18
    3e80:	73 9f       	mul	r23, r19
    3e82:	b0 0d       	add	r27, r0
    3e84:	a1 1d       	adc	r26, r1
    3e86:	62 1f       	adc	r22, r18
    3e88:	83 9f       	mul	r24, r19
    3e8a:	a0 0d       	add	r26, r0
    3e8c:	61 1d       	adc	r22, r1
    3e8e:	22 1f       	adc	r18, r18
    3e90:	74 9f       	mul	r23, r20
    3e92:	33 27       	eor	r19, r19
    3e94:	a0 0d       	add	r26, r0
    3e96:	61 1d       	adc	r22, r1
    3e98:	23 1f       	adc	r18, r19
    3e9a:	84 9f       	mul	r24, r20
    3e9c:	60 0d       	add	r22, r0
    3e9e:	21 1d       	adc	r18, r1
    3ea0:	82 2f       	mov	r24, r18
    3ea2:	76 2f       	mov	r23, r22
    3ea4:	6a 2f       	mov	r22, r26
    3ea6:	11 24       	eor	r1, r1
    3ea8:	9f 57       	subi	r25, 0x7F	; 127
    3eaa:	50 40       	sbci	r21, 0x00	; 0
    3eac:	8a f0       	brmi	.+34     	; 0x3ed0 <__mulsf3_pse+0x84>
    3eae:	e1 f0       	breq	.+56     	; 0x3ee8 <__mulsf3_pse+0x9c>
    3eb0:	88 23       	and	r24, r24
    3eb2:	4a f0       	brmi	.+18     	; 0x3ec6 <__mulsf3_pse+0x7a>
    3eb4:	ee 0f       	add	r30, r30
    3eb6:	ff 1f       	adc	r31, r31
    3eb8:	bb 1f       	adc	r27, r27
    3eba:	66 1f       	adc	r22, r22
    3ebc:	77 1f       	adc	r23, r23
    3ebe:	88 1f       	adc	r24, r24
    3ec0:	91 50       	subi	r25, 0x01	; 1
    3ec2:	50 40       	sbci	r21, 0x00	; 0
    3ec4:	a9 f7       	brne	.-22     	; 0x3eb0 <__mulsf3_pse+0x64>
    3ec6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ec8:	51 05       	cpc	r21, r1
    3eca:	70 f0       	brcs	.+28     	; 0x3ee8 <__mulsf3_pse+0x9c>
    3ecc:	60 cf       	rjmp	.-320    	; 0x3d8e <__fp_inf>
    3ece:	aa cf       	rjmp	.-172    	; 0x3e24 <__fp_szero>
    3ed0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ed2:	ec f3       	brlt	.-6      	; 0x3ece <__mulsf3_pse+0x82>
    3ed4:	98 3e       	cpi	r25, 0xE8	; 232
    3ed6:	dc f3       	brlt	.-10     	; 0x3ece <__mulsf3_pse+0x82>
    3ed8:	86 95       	lsr	r24
    3eda:	77 95       	ror	r23
    3edc:	67 95       	ror	r22
    3ede:	b7 95       	ror	r27
    3ee0:	f7 95       	ror	r31
    3ee2:	e7 95       	ror	r30
    3ee4:	9f 5f       	subi	r25, 0xFF	; 255
    3ee6:	c1 f7       	brne	.-16     	; 0x3ed8 <__mulsf3_pse+0x8c>
    3ee8:	fe 2b       	or	r31, r30
    3eea:	88 0f       	add	r24, r24
    3eec:	91 1d       	adc	r25, r1
    3eee:	96 95       	lsr	r25
    3ef0:	87 95       	ror	r24
    3ef2:	97 f9       	bld	r25, 7
    3ef4:	08 95       	ret

00003ef6 <__udivmodsi4>:
    3ef6:	a1 e2       	ldi	r26, 0x21	; 33
    3ef8:	1a 2e       	mov	r1, r26
    3efa:	aa 1b       	sub	r26, r26
    3efc:	bb 1b       	sub	r27, r27
    3efe:	fd 01       	movw	r30, r26
    3f00:	0d c0       	rjmp	.+26     	; 0x3f1c <__udivmodsi4_ep>

00003f02 <__udivmodsi4_loop>:
    3f02:	aa 1f       	adc	r26, r26
    3f04:	bb 1f       	adc	r27, r27
    3f06:	ee 1f       	adc	r30, r30
    3f08:	ff 1f       	adc	r31, r31
    3f0a:	a2 17       	cp	r26, r18
    3f0c:	b3 07       	cpc	r27, r19
    3f0e:	e4 07       	cpc	r30, r20
    3f10:	f5 07       	cpc	r31, r21
    3f12:	20 f0       	brcs	.+8      	; 0x3f1c <__udivmodsi4_ep>
    3f14:	a2 1b       	sub	r26, r18
    3f16:	b3 0b       	sbc	r27, r19
    3f18:	e4 0b       	sbc	r30, r20
    3f1a:	f5 0b       	sbc	r31, r21

00003f1c <__udivmodsi4_ep>:
    3f1c:	66 1f       	adc	r22, r22
    3f1e:	77 1f       	adc	r23, r23
    3f20:	88 1f       	adc	r24, r24
    3f22:	99 1f       	adc	r25, r25
    3f24:	1a 94       	dec	r1
    3f26:	69 f7       	brne	.-38     	; 0x3f02 <__udivmodsi4_loop>
    3f28:	60 95       	com	r22
    3f2a:	70 95       	com	r23
    3f2c:	80 95       	com	r24
    3f2e:	90 95       	com	r25
    3f30:	9b 01       	movw	r18, r22
    3f32:	ac 01       	movw	r20, r24
    3f34:	bd 01       	movw	r22, r26
    3f36:	cf 01       	movw	r24, r30
    3f38:	08 95       	ret

00003f3a <__tablejump2__>:
    3f3a:	ee 0f       	add	r30, r30
    3f3c:	ff 1f       	adc	r31, r31
    3f3e:	88 1f       	adc	r24, r24
    3f40:	8b bf       	out	0x3b, r24	; 59
    3f42:	07 90       	elpm	r0, Z+
    3f44:	f6 91       	elpm	r31, Z
    3f46:	e0 2d       	mov	r30, r0
    3f48:	19 94       	eijmp

00003f4a <calloc>:
    3f4a:	0f 93       	push	r16
    3f4c:	1f 93       	push	r17
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	86 9f       	mul	r24, r22
    3f54:	80 01       	movw	r16, r0
    3f56:	87 9f       	mul	r24, r23
    3f58:	10 0d       	add	r17, r0
    3f5a:	96 9f       	mul	r25, r22
    3f5c:	10 0d       	add	r17, r0
    3f5e:	11 24       	eor	r1, r1
    3f60:	c8 01       	movw	r24, r16
    3f62:	0d d0       	rcall	.+26     	; 0x3f7e <malloc>
    3f64:	ec 01       	movw	r28, r24
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	21 f0       	breq	.+8      	; 0x3f72 <calloc+0x28>
    3f6a:	a8 01       	movw	r20, r16
    3f6c:	60 e0       	ldi	r22, 0x00	; 0
    3f6e:	70 e0       	ldi	r23, 0x00	; 0
    3f70:	34 d1       	rcall	.+616    	; 0x41da <memset>
    3f72:	ce 01       	movw	r24, r28
    3f74:	df 91       	pop	r29
    3f76:	cf 91       	pop	r28
    3f78:	1f 91       	pop	r17
    3f7a:	0f 91       	pop	r16
    3f7c:	08 95       	ret

00003f7e <malloc>:
    3f7e:	0f 93       	push	r16
    3f80:	1f 93       	push	r17
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	82 30       	cpi	r24, 0x02	; 2
    3f88:	91 05       	cpc	r25, r1
    3f8a:	10 f4       	brcc	.+4      	; 0x3f90 <malloc+0x12>
    3f8c:	82 e0       	ldi	r24, 0x02	; 2
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	e0 91 9f 0e 	lds	r30, 0x0E9F	; 0x800e9f <__flp>
    3f94:	f0 91 a0 0e 	lds	r31, 0x0EA0	; 0x800ea0 <__flp+0x1>
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	a0 e0       	ldi	r26, 0x00	; 0
    3f9e:	b0 e0       	ldi	r27, 0x00	; 0
    3fa0:	30 97       	sbiw	r30, 0x00	; 0
    3fa2:	19 f1       	breq	.+70     	; 0x3fea <malloc+0x6c>
    3fa4:	40 81       	ld	r20, Z
    3fa6:	51 81       	ldd	r21, Z+1	; 0x01
    3fa8:	02 81       	ldd	r16, Z+2	; 0x02
    3faa:	13 81       	ldd	r17, Z+3	; 0x03
    3fac:	48 17       	cp	r20, r24
    3fae:	59 07       	cpc	r21, r25
    3fb0:	c8 f0       	brcs	.+50     	; 0x3fe4 <malloc+0x66>
    3fb2:	84 17       	cp	r24, r20
    3fb4:	95 07       	cpc	r25, r21
    3fb6:	69 f4       	brne	.+26     	; 0x3fd2 <malloc+0x54>
    3fb8:	10 97       	sbiw	r26, 0x00	; 0
    3fba:	31 f0       	breq	.+12     	; 0x3fc8 <malloc+0x4a>
    3fbc:	12 96       	adiw	r26, 0x02	; 2
    3fbe:	0c 93       	st	X, r16
    3fc0:	12 97       	sbiw	r26, 0x02	; 2
    3fc2:	13 96       	adiw	r26, 0x03	; 3
    3fc4:	1c 93       	st	X, r17
    3fc6:	27 c0       	rjmp	.+78     	; 0x4016 <malloc+0x98>
    3fc8:	00 93 9f 0e 	sts	0x0E9F, r16	; 0x800e9f <__flp>
    3fcc:	10 93 a0 0e 	sts	0x0EA0, r17	; 0x800ea0 <__flp+0x1>
    3fd0:	22 c0       	rjmp	.+68     	; 0x4016 <malloc+0x98>
    3fd2:	21 15       	cp	r18, r1
    3fd4:	31 05       	cpc	r19, r1
    3fd6:	19 f0       	breq	.+6      	; 0x3fde <malloc+0x60>
    3fd8:	42 17       	cp	r20, r18
    3fda:	53 07       	cpc	r21, r19
    3fdc:	18 f4       	brcc	.+6      	; 0x3fe4 <malloc+0x66>
    3fde:	9a 01       	movw	r18, r20
    3fe0:	bd 01       	movw	r22, r26
    3fe2:	ef 01       	movw	r28, r30
    3fe4:	df 01       	movw	r26, r30
    3fe6:	f8 01       	movw	r30, r16
    3fe8:	db cf       	rjmp	.-74     	; 0x3fa0 <malloc+0x22>
    3fea:	21 15       	cp	r18, r1
    3fec:	31 05       	cpc	r19, r1
    3fee:	f9 f0       	breq	.+62     	; 0x402e <malloc+0xb0>
    3ff0:	28 1b       	sub	r18, r24
    3ff2:	39 0b       	sbc	r19, r25
    3ff4:	24 30       	cpi	r18, 0x04	; 4
    3ff6:	31 05       	cpc	r19, r1
    3ff8:	80 f4       	brcc	.+32     	; 0x401a <malloc+0x9c>
    3ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ffe:	61 15       	cp	r22, r1
    4000:	71 05       	cpc	r23, r1
    4002:	21 f0       	breq	.+8      	; 0x400c <malloc+0x8e>
    4004:	fb 01       	movw	r30, r22
    4006:	93 83       	std	Z+3, r25	; 0x03
    4008:	82 83       	std	Z+2, r24	; 0x02
    400a:	04 c0       	rjmp	.+8      	; 0x4014 <malloc+0x96>
    400c:	90 93 a0 0e 	sts	0x0EA0, r25	; 0x800ea0 <__flp+0x1>
    4010:	80 93 9f 0e 	sts	0x0E9F, r24	; 0x800e9f <__flp>
    4014:	fe 01       	movw	r30, r28
    4016:	32 96       	adiw	r30, 0x02	; 2
    4018:	44 c0       	rjmp	.+136    	; 0x40a2 <malloc+0x124>
    401a:	fe 01       	movw	r30, r28
    401c:	e2 0f       	add	r30, r18
    401e:	f3 1f       	adc	r31, r19
    4020:	81 93       	st	Z+, r24
    4022:	91 93       	st	Z+, r25
    4024:	22 50       	subi	r18, 0x02	; 2
    4026:	31 09       	sbc	r19, r1
    4028:	39 83       	std	Y+1, r19	; 0x01
    402a:	28 83       	st	Y, r18
    402c:	3a c0       	rjmp	.+116    	; 0x40a2 <malloc+0x124>
    402e:	20 91 9d 0e 	lds	r18, 0x0E9D	; 0x800e9d <__brkval>
    4032:	30 91 9e 0e 	lds	r19, 0x0E9E	; 0x800e9e <__brkval+0x1>
    4036:	23 2b       	or	r18, r19
    4038:	41 f4       	brne	.+16     	; 0x404a <malloc+0xcc>
    403a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    403e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4042:	30 93 9e 0e 	sts	0x0E9E, r19	; 0x800e9e <__brkval+0x1>
    4046:	20 93 9d 0e 	sts	0x0E9D, r18	; 0x800e9d <__brkval>
    404a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    404e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4052:	21 15       	cp	r18, r1
    4054:	31 05       	cpc	r19, r1
    4056:	41 f4       	brne	.+16     	; 0x4068 <malloc+0xea>
    4058:	2d b7       	in	r18, 0x3d	; 61
    405a:	3e b7       	in	r19, 0x3e	; 62
    405c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4060:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4064:	24 1b       	sub	r18, r20
    4066:	35 0b       	sbc	r19, r21
    4068:	e0 91 9d 0e 	lds	r30, 0x0E9D	; 0x800e9d <__brkval>
    406c:	f0 91 9e 0e 	lds	r31, 0x0E9E	; 0x800e9e <__brkval+0x1>
    4070:	e2 17       	cp	r30, r18
    4072:	f3 07       	cpc	r31, r19
    4074:	a0 f4       	brcc	.+40     	; 0x409e <malloc+0x120>
    4076:	2e 1b       	sub	r18, r30
    4078:	3f 0b       	sbc	r19, r31
    407a:	28 17       	cp	r18, r24
    407c:	39 07       	cpc	r19, r25
    407e:	78 f0       	brcs	.+30     	; 0x409e <malloc+0x120>
    4080:	ac 01       	movw	r20, r24
    4082:	4e 5f       	subi	r20, 0xFE	; 254
    4084:	5f 4f       	sbci	r21, 0xFF	; 255
    4086:	24 17       	cp	r18, r20
    4088:	35 07       	cpc	r19, r21
    408a:	48 f0       	brcs	.+18     	; 0x409e <malloc+0x120>
    408c:	4e 0f       	add	r20, r30
    408e:	5f 1f       	adc	r21, r31
    4090:	50 93 9e 0e 	sts	0x0E9E, r21	; 0x800e9e <__brkval+0x1>
    4094:	40 93 9d 0e 	sts	0x0E9D, r20	; 0x800e9d <__brkval>
    4098:	81 93       	st	Z+, r24
    409a:	91 93       	st	Z+, r25
    409c:	02 c0       	rjmp	.+4      	; 0x40a2 <malloc+0x124>
    409e:	e0 e0       	ldi	r30, 0x00	; 0
    40a0:	f0 e0       	ldi	r31, 0x00	; 0
    40a2:	cf 01       	movw	r24, r30
    40a4:	df 91       	pop	r29
    40a6:	cf 91       	pop	r28
    40a8:	1f 91       	pop	r17
    40aa:	0f 91       	pop	r16
    40ac:	08 95       	ret

000040ae <free>:
    40ae:	cf 93       	push	r28
    40b0:	df 93       	push	r29
    40b2:	00 97       	sbiw	r24, 0x00	; 0
    40b4:	09 f4       	brne	.+2      	; 0x40b8 <free+0xa>
    40b6:	81 c0       	rjmp	.+258    	; 0x41ba <free+0x10c>
    40b8:	fc 01       	movw	r30, r24
    40ba:	32 97       	sbiw	r30, 0x02	; 2
    40bc:	13 82       	std	Z+3, r1	; 0x03
    40be:	12 82       	std	Z+2, r1	; 0x02
    40c0:	a0 91 9f 0e 	lds	r26, 0x0E9F	; 0x800e9f <__flp>
    40c4:	b0 91 a0 0e 	lds	r27, 0x0EA0	; 0x800ea0 <__flp+0x1>
    40c8:	10 97       	sbiw	r26, 0x00	; 0
    40ca:	81 f4       	brne	.+32     	; 0x40ec <free+0x3e>
    40cc:	20 81       	ld	r18, Z
    40ce:	31 81       	ldd	r19, Z+1	; 0x01
    40d0:	82 0f       	add	r24, r18
    40d2:	93 1f       	adc	r25, r19
    40d4:	20 91 9d 0e 	lds	r18, 0x0E9D	; 0x800e9d <__brkval>
    40d8:	30 91 9e 0e 	lds	r19, 0x0E9E	; 0x800e9e <__brkval+0x1>
    40dc:	28 17       	cp	r18, r24
    40de:	39 07       	cpc	r19, r25
    40e0:	51 f5       	brne	.+84     	; 0x4136 <free+0x88>
    40e2:	f0 93 9e 0e 	sts	0x0E9E, r31	; 0x800e9e <__brkval+0x1>
    40e6:	e0 93 9d 0e 	sts	0x0E9D, r30	; 0x800e9d <__brkval>
    40ea:	67 c0       	rjmp	.+206    	; 0x41ba <free+0x10c>
    40ec:	ed 01       	movw	r28, r26
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	ce 17       	cp	r28, r30
    40f4:	df 07       	cpc	r29, r31
    40f6:	40 f4       	brcc	.+16     	; 0x4108 <free+0x5a>
    40f8:	4a 81       	ldd	r20, Y+2	; 0x02
    40fa:	5b 81       	ldd	r21, Y+3	; 0x03
    40fc:	9e 01       	movw	r18, r28
    40fe:	41 15       	cp	r20, r1
    4100:	51 05       	cpc	r21, r1
    4102:	f1 f0       	breq	.+60     	; 0x4140 <free+0x92>
    4104:	ea 01       	movw	r28, r20
    4106:	f5 cf       	rjmp	.-22     	; 0x40f2 <free+0x44>
    4108:	d3 83       	std	Z+3, r29	; 0x03
    410a:	c2 83       	std	Z+2, r28	; 0x02
    410c:	40 81       	ld	r20, Z
    410e:	51 81       	ldd	r21, Z+1	; 0x01
    4110:	84 0f       	add	r24, r20
    4112:	95 1f       	adc	r25, r21
    4114:	c8 17       	cp	r28, r24
    4116:	d9 07       	cpc	r29, r25
    4118:	59 f4       	brne	.+22     	; 0x4130 <free+0x82>
    411a:	88 81       	ld	r24, Y
    411c:	99 81       	ldd	r25, Y+1	; 0x01
    411e:	84 0f       	add	r24, r20
    4120:	95 1f       	adc	r25, r21
    4122:	02 96       	adiw	r24, 0x02	; 2
    4124:	91 83       	std	Z+1, r25	; 0x01
    4126:	80 83       	st	Z, r24
    4128:	8a 81       	ldd	r24, Y+2	; 0x02
    412a:	9b 81       	ldd	r25, Y+3	; 0x03
    412c:	93 83       	std	Z+3, r25	; 0x03
    412e:	82 83       	std	Z+2, r24	; 0x02
    4130:	21 15       	cp	r18, r1
    4132:	31 05       	cpc	r19, r1
    4134:	29 f4       	brne	.+10     	; 0x4140 <free+0x92>
    4136:	f0 93 a0 0e 	sts	0x0EA0, r31	; 0x800ea0 <__flp+0x1>
    413a:	e0 93 9f 0e 	sts	0x0E9F, r30	; 0x800e9f <__flp>
    413e:	3d c0       	rjmp	.+122    	; 0x41ba <free+0x10c>
    4140:	e9 01       	movw	r28, r18
    4142:	fb 83       	std	Y+3, r31	; 0x03
    4144:	ea 83       	std	Y+2, r30	; 0x02
    4146:	49 91       	ld	r20, Y+
    4148:	59 91       	ld	r21, Y+
    414a:	c4 0f       	add	r28, r20
    414c:	d5 1f       	adc	r29, r21
    414e:	ec 17       	cp	r30, r28
    4150:	fd 07       	cpc	r31, r29
    4152:	61 f4       	brne	.+24     	; 0x416c <free+0xbe>
    4154:	80 81       	ld	r24, Z
    4156:	91 81       	ldd	r25, Z+1	; 0x01
    4158:	84 0f       	add	r24, r20
    415a:	95 1f       	adc	r25, r21
    415c:	02 96       	adiw	r24, 0x02	; 2
    415e:	e9 01       	movw	r28, r18
    4160:	99 83       	std	Y+1, r25	; 0x01
    4162:	88 83       	st	Y, r24
    4164:	82 81       	ldd	r24, Z+2	; 0x02
    4166:	93 81       	ldd	r25, Z+3	; 0x03
    4168:	9b 83       	std	Y+3, r25	; 0x03
    416a:	8a 83       	std	Y+2, r24	; 0x02
    416c:	e0 e0       	ldi	r30, 0x00	; 0
    416e:	f0 e0       	ldi	r31, 0x00	; 0
    4170:	12 96       	adiw	r26, 0x02	; 2
    4172:	8d 91       	ld	r24, X+
    4174:	9c 91       	ld	r25, X
    4176:	13 97       	sbiw	r26, 0x03	; 3
    4178:	00 97       	sbiw	r24, 0x00	; 0
    417a:	19 f0       	breq	.+6      	; 0x4182 <free+0xd4>
    417c:	fd 01       	movw	r30, r26
    417e:	dc 01       	movw	r26, r24
    4180:	f7 cf       	rjmp	.-18     	; 0x4170 <free+0xc2>
    4182:	8d 91       	ld	r24, X+
    4184:	9c 91       	ld	r25, X
    4186:	11 97       	sbiw	r26, 0x01	; 1
    4188:	9d 01       	movw	r18, r26
    418a:	2e 5f       	subi	r18, 0xFE	; 254
    418c:	3f 4f       	sbci	r19, 0xFF	; 255
    418e:	82 0f       	add	r24, r18
    4190:	93 1f       	adc	r25, r19
    4192:	20 91 9d 0e 	lds	r18, 0x0E9D	; 0x800e9d <__brkval>
    4196:	30 91 9e 0e 	lds	r19, 0x0E9E	; 0x800e9e <__brkval+0x1>
    419a:	28 17       	cp	r18, r24
    419c:	39 07       	cpc	r19, r25
    419e:	69 f4       	brne	.+26     	; 0x41ba <free+0x10c>
    41a0:	30 97       	sbiw	r30, 0x00	; 0
    41a2:	29 f4       	brne	.+10     	; 0x41ae <free+0x100>
    41a4:	10 92 a0 0e 	sts	0x0EA0, r1	; 0x800ea0 <__flp+0x1>
    41a8:	10 92 9f 0e 	sts	0x0E9F, r1	; 0x800e9f <__flp>
    41ac:	02 c0       	rjmp	.+4      	; 0x41b2 <free+0x104>
    41ae:	13 82       	std	Z+3, r1	; 0x03
    41b0:	12 82       	std	Z+2, r1	; 0x02
    41b2:	b0 93 9e 0e 	sts	0x0E9E, r27	; 0x800e9e <__brkval+0x1>
    41b6:	a0 93 9d 0e 	sts	0x0E9D, r26	; 0x800e9d <__brkval>
    41ba:	df 91       	pop	r29
    41bc:	cf 91       	pop	r28
    41be:	08 95       	ret

000041c0 <abort>:
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	f8 94       	cli
    41c6:	00 c3       	rjmp	.+1536   	; 0x47c8 <_exit>

000041c8 <memcpy>:
    41c8:	fb 01       	movw	r30, r22
    41ca:	dc 01       	movw	r26, r24
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <memcpy+0xa>
    41ce:	01 90       	ld	r0, Z+
    41d0:	0d 92       	st	X+, r0
    41d2:	41 50       	subi	r20, 0x01	; 1
    41d4:	50 40       	sbci	r21, 0x00	; 0
    41d6:	d8 f7       	brcc	.-10     	; 0x41ce <memcpy+0x6>
    41d8:	08 95       	ret

000041da <memset>:
    41da:	dc 01       	movw	r26, r24
    41dc:	01 c0       	rjmp	.+2      	; 0x41e0 <memset+0x6>
    41de:	6d 93       	st	X+, r22
    41e0:	41 50       	subi	r20, 0x01	; 1
    41e2:	50 40       	sbci	r21, 0x00	; 0
    41e4:	e0 f7       	brcc	.-8      	; 0x41de <memset+0x4>
    41e6:	08 95       	ret

000041e8 <printf>:
    41e8:	cf 93       	push	r28
    41ea:	df 93       	push	r29
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	ae 01       	movw	r20, r28
    41f2:	4a 5f       	subi	r20, 0xFA	; 250
    41f4:	5f 4f       	sbci	r21, 0xFF	; 255
    41f6:	fa 01       	movw	r30, r20
    41f8:	61 91       	ld	r22, Z+
    41fa:	71 91       	ld	r23, Z+
    41fc:	af 01       	movw	r20, r30
    41fe:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <__iob+0x2>
    4202:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <__iob+0x3>
    4206:	33 d0       	rcall	.+102    	; 0x426e <vfprintf>
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	08 95       	ret

0000420e <puts>:
    420e:	0f 93       	push	r16
    4210:	1f 93       	push	r17
    4212:	cf 93       	push	r28
    4214:	df 93       	push	r29
    4216:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <__iob+0x2>
    421a:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <__iob+0x3>
    421e:	23 81       	ldd	r18, Z+3	; 0x03
    4220:	21 ff       	sbrs	r18, 1
    4222:	1b c0       	rjmp	.+54     	; 0x425a <puts+0x4c>
    4224:	8c 01       	movw	r16, r24
    4226:	d0 e0       	ldi	r29, 0x00	; 0
    4228:	c0 e0       	ldi	r28, 0x00	; 0
    422a:	f8 01       	movw	r30, r16
    422c:	81 91       	ld	r24, Z+
    422e:	8f 01       	movw	r16, r30
    4230:	60 91 a3 0e 	lds	r22, 0x0EA3	; 0x800ea3 <__iob+0x2>
    4234:	70 91 a4 0e 	lds	r23, 0x0EA4	; 0x800ea4 <__iob+0x3>
    4238:	db 01       	movw	r26, r22
    423a:	18 96       	adiw	r26, 0x08	; 8
    423c:	ed 91       	ld	r30, X+
    423e:	fc 91       	ld	r31, X
    4240:	19 97       	sbiw	r26, 0x09	; 9
    4242:	88 23       	and	r24, r24
    4244:	31 f0       	breq	.+12     	; 0x4252 <puts+0x44>
    4246:	19 95       	eicall
    4248:	89 2b       	or	r24, r25
    424a:	79 f3       	breq	.-34     	; 0x422a <puts+0x1c>
    424c:	df ef       	ldi	r29, 0xFF	; 255
    424e:	cf ef       	ldi	r28, 0xFF	; 255
    4250:	ec cf       	rjmp	.-40     	; 0x422a <puts+0x1c>
    4252:	8a e0       	ldi	r24, 0x0A	; 10
    4254:	19 95       	eicall
    4256:	89 2b       	or	r24, r25
    4258:	19 f0       	breq	.+6      	; 0x4260 <puts+0x52>
    425a:	8f ef       	ldi	r24, 0xFF	; 255
    425c:	9f ef       	ldi	r25, 0xFF	; 255
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <puts+0x56>
    4260:	8d 2f       	mov	r24, r29
    4262:	9c 2f       	mov	r25, r28
    4264:	df 91       	pop	r29
    4266:	cf 91       	pop	r28
    4268:	1f 91       	pop	r17
    426a:	0f 91       	pop	r16
    426c:	08 95       	ret

0000426e <vfprintf>:
    426e:	2f 92       	push	r2
    4270:	3f 92       	push	r3
    4272:	4f 92       	push	r4
    4274:	5f 92       	push	r5
    4276:	6f 92       	push	r6
    4278:	7f 92       	push	r7
    427a:	8f 92       	push	r8
    427c:	9f 92       	push	r9
    427e:	af 92       	push	r10
    4280:	bf 92       	push	r11
    4282:	cf 92       	push	r12
    4284:	df 92       	push	r13
    4286:	ef 92       	push	r14
    4288:	ff 92       	push	r15
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
    4296:	2b 97       	sbiw	r28, 0x0b	; 11
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	f8 94       	cli
    429c:	de bf       	out	0x3e, r29	; 62
    429e:	0f be       	out	0x3f, r0	; 63
    42a0:	cd bf       	out	0x3d, r28	; 61
    42a2:	6c 01       	movw	r12, r24
    42a4:	7b 01       	movw	r14, r22
    42a6:	8a 01       	movw	r16, r20
    42a8:	fc 01       	movw	r30, r24
    42aa:	17 82       	std	Z+7, r1	; 0x07
    42ac:	16 82       	std	Z+6, r1	; 0x06
    42ae:	83 81       	ldd	r24, Z+3	; 0x03
    42b0:	81 ff       	sbrs	r24, 1
    42b2:	bf c1       	rjmp	.+894    	; 0x4632 <vfprintf+0x3c4>
    42b4:	ce 01       	movw	r24, r28
    42b6:	01 96       	adiw	r24, 0x01	; 1
    42b8:	3c 01       	movw	r6, r24
    42ba:	f6 01       	movw	r30, r12
    42bc:	93 81       	ldd	r25, Z+3	; 0x03
    42be:	f7 01       	movw	r30, r14
    42c0:	93 fd       	sbrc	r25, 3
    42c2:	85 91       	lpm	r24, Z+
    42c4:	93 ff       	sbrs	r25, 3
    42c6:	81 91       	ld	r24, Z+
    42c8:	7f 01       	movw	r14, r30
    42ca:	88 23       	and	r24, r24
    42cc:	09 f4       	brne	.+2      	; 0x42d0 <vfprintf+0x62>
    42ce:	ad c1       	rjmp	.+858    	; 0x462a <vfprintf+0x3bc>
    42d0:	85 32       	cpi	r24, 0x25	; 37
    42d2:	39 f4       	brne	.+14     	; 0x42e2 <vfprintf+0x74>
    42d4:	93 fd       	sbrc	r25, 3
    42d6:	85 91       	lpm	r24, Z+
    42d8:	93 ff       	sbrs	r25, 3
    42da:	81 91       	ld	r24, Z+
    42dc:	7f 01       	movw	r14, r30
    42de:	85 32       	cpi	r24, 0x25	; 37
    42e0:	21 f4       	brne	.+8      	; 0x42ea <vfprintf+0x7c>
    42e2:	b6 01       	movw	r22, r12
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	d6 d1       	rcall	.+940    	; 0x4694 <fputc>
    42e8:	e8 cf       	rjmp	.-48     	; 0x42ba <vfprintf+0x4c>
    42ea:	91 2c       	mov	r9, r1
    42ec:	21 2c       	mov	r2, r1
    42ee:	31 2c       	mov	r3, r1
    42f0:	ff e1       	ldi	r31, 0x1F	; 31
    42f2:	f3 15       	cp	r31, r3
    42f4:	d8 f0       	brcs	.+54     	; 0x432c <vfprintf+0xbe>
    42f6:	8b 32       	cpi	r24, 0x2B	; 43
    42f8:	79 f0       	breq	.+30     	; 0x4318 <vfprintf+0xaa>
    42fa:	38 f4       	brcc	.+14     	; 0x430a <vfprintf+0x9c>
    42fc:	80 32       	cpi	r24, 0x20	; 32
    42fe:	79 f0       	breq	.+30     	; 0x431e <vfprintf+0xb0>
    4300:	83 32       	cpi	r24, 0x23	; 35
    4302:	a1 f4       	brne	.+40     	; 0x432c <vfprintf+0xbe>
    4304:	23 2d       	mov	r18, r3
    4306:	20 61       	ori	r18, 0x10	; 16
    4308:	1d c0       	rjmp	.+58     	; 0x4344 <vfprintf+0xd6>
    430a:	8d 32       	cpi	r24, 0x2D	; 45
    430c:	61 f0       	breq	.+24     	; 0x4326 <vfprintf+0xb8>
    430e:	80 33       	cpi	r24, 0x30	; 48
    4310:	69 f4       	brne	.+26     	; 0x432c <vfprintf+0xbe>
    4312:	23 2d       	mov	r18, r3
    4314:	21 60       	ori	r18, 0x01	; 1
    4316:	16 c0       	rjmp	.+44     	; 0x4344 <vfprintf+0xd6>
    4318:	83 2d       	mov	r24, r3
    431a:	82 60       	ori	r24, 0x02	; 2
    431c:	38 2e       	mov	r3, r24
    431e:	e3 2d       	mov	r30, r3
    4320:	e4 60       	ori	r30, 0x04	; 4
    4322:	3e 2e       	mov	r3, r30
    4324:	2a c0       	rjmp	.+84     	; 0x437a <vfprintf+0x10c>
    4326:	f3 2d       	mov	r31, r3
    4328:	f8 60       	ori	r31, 0x08	; 8
    432a:	1d c0       	rjmp	.+58     	; 0x4366 <vfprintf+0xf8>
    432c:	37 fc       	sbrc	r3, 7
    432e:	2d c0       	rjmp	.+90     	; 0x438a <vfprintf+0x11c>
    4330:	20 ed       	ldi	r18, 0xD0	; 208
    4332:	28 0f       	add	r18, r24
    4334:	2a 30       	cpi	r18, 0x0A	; 10
    4336:	40 f0       	brcs	.+16     	; 0x4348 <vfprintf+0xda>
    4338:	8e 32       	cpi	r24, 0x2E	; 46
    433a:	b9 f4       	brne	.+46     	; 0x436a <vfprintf+0xfc>
    433c:	36 fc       	sbrc	r3, 6
    433e:	75 c1       	rjmp	.+746    	; 0x462a <vfprintf+0x3bc>
    4340:	23 2d       	mov	r18, r3
    4342:	20 64       	ori	r18, 0x40	; 64
    4344:	32 2e       	mov	r3, r18
    4346:	19 c0       	rjmp	.+50     	; 0x437a <vfprintf+0x10c>
    4348:	36 fe       	sbrs	r3, 6
    434a:	06 c0       	rjmp	.+12     	; 0x4358 <vfprintf+0xea>
    434c:	8a e0       	ldi	r24, 0x0A	; 10
    434e:	98 9e       	mul	r9, r24
    4350:	20 0d       	add	r18, r0
    4352:	11 24       	eor	r1, r1
    4354:	92 2e       	mov	r9, r18
    4356:	11 c0       	rjmp	.+34     	; 0x437a <vfprintf+0x10c>
    4358:	ea e0       	ldi	r30, 0x0A	; 10
    435a:	2e 9e       	mul	r2, r30
    435c:	20 0d       	add	r18, r0
    435e:	11 24       	eor	r1, r1
    4360:	22 2e       	mov	r2, r18
    4362:	f3 2d       	mov	r31, r3
    4364:	f0 62       	ori	r31, 0x20	; 32
    4366:	3f 2e       	mov	r3, r31
    4368:	08 c0       	rjmp	.+16     	; 0x437a <vfprintf+0x10c>
    436a:	8c 36       	cpi	r24, 0x6C	; 108
    436c:	21 f4       	brne	.+8      	; 0x4376 <vfprintf+0x108>
    436e:	83 2d       	mov	r24, r3
    4370:	80 68       	ori	r24, 0x80	; 128
    4372:	38 2e       	mov	r3, r24
    4374:	02 c0       	rjmp	.+4      	; 0x437a <vfprintf+0x10c>
    4376:	88 36       	cpi	r24, 0x68	; 104
    4378:	41 f4       	brne	.+16     	; 0x438a <vfprintf+0x11c>
    437a:	f7 01       	movw	r30, r14
    437c:	93 fd       	sbrc	r25, 3
    437e:	85 91       	lpm	r24, Z+
    4380:	93 ff       	sbrs	r25, 3
    4382:	81 91       	ld	r24, Z+
    4384:	7f 01       	movw	r14, r30
    4386:	81 11       	cpse	r24, r1
    4388:	b3 cf       	rjmp	.-154    	; 0x42f0 <vfprintf+0x82>
    438a:	98 2f       	mov	r25, r24
    438c:	9f 7d       	andi	r25, 0xDF	; 223
    438e:	95 54       	subi	r25, 0x45	; 69
    4390:	93 30       	cpi	r25, 0x03	; 3
    4392:	28 f4       	brcc	.+10     	; 0x439e <vfprintf+0x130>
    4394:	0c 5f       	subi	r16, 0xFC	; 252
    4396:	1f 4f       	sbci	r17, 0xFF	; 255
    4398:	9f e3       	ldi	r25, 0x3F	; 63
    439a:	99 83       	std	Y+1, r25	; 0x01
    439c:	0d c0       	rjmp	.+26     	; 0x43b8 <vfprintf+0x14a>
    439e:	83 36       	cpi	r24, 0x63	; 99
    43a0:	31 f0       	breq	.+12     	; 0x43ae <vfprintf+0x140>
    43a2:	83 37       	cpi	r24, 0x73	; 115
    43a4:	71 f0       	breq	.+28     	; 0x43c2 <vfprintf+0x154>
    43a6:	83 35       	cpi	r24, 0x53	; 83
    43a8:	09 f0       	breq	.+2      	; 0x43ac <vfprintf+0x13e>
    43aa:	55 c0       	rjmp	.+170    	; 0x4456 <vfprintf+0x1e8>
    43ac:	20 c0       	rjmp	.+64     	; 0x43ee <vfprintf+0x180>
    43ae:	f8 01       	movw	r30, r16
    43b0:	80 81       	ld	r24, Z
    43b2:	89 83       	std	Y+1, r24	; 0x01
    43b4:	0e 5f       	subi	r16, 0xFE	; 254
    43b6:	1f 4f       	sbci	r17, 0xFF	; 255
    43b8:	88 24       	eor	r8, r8
    43ba:	83 94       	inc	r8
    43bc:	91 2c       	mov	r9, r1
    43be:	53 01       	movw	r10, r6
    43c0:	12 c0       	rjmp	.+36     	; 0x43e6 <vfprintf+0x178>
    43c2:	28 01       	movw	r4, r16
    43c4:	f2 e0       	ldi	r31, 0x02	; 2
    43c6:	4f 0e       	add	r4, r31
    43c8:	51 1c       	adc	r5, r1
    43ca:	f8 01       	movw	r30, r16
    43cc:	a0 80       	ld	r10, Z
    43ce:	b1 80       	ldd	r11, Z+1	; 0x01
    43d0:	36 fe       	sbrs	r3, 6
    43d2:	03 c0       	rjmp	.+6      	; 0x43da <vfprintf+0x16c>
    43d4:	69 2d       	mov	r22, r9
    43d6:	70 e0       	ldi	r23, 0x00	; 0
    43d8:	02 c0       	rjmp	.+4      	; 0x43de <vfprintf+0x170>
    43da:	6f ef       	ldi	r22, 0xFF	; 255
    43dc:	7f ef       	ldi	r23, 0xFF	; 255
    43de:	c5 01       	movw	r24, r10
    43e0:	4e d1       	rcall	.+668    	; 0x467e <strnlen>
    43e2:	4c 01       	movw	r8, r24
    43e4:	82 01       	movw	r16, r4
    43e6:	f3 2d       	mov	r31, r3
    43e8:	ff 77       	andi	r31, 0x7F	; 127
    43ea:	3f 2e       	mov	r3, r31
    43ec:	15 c0       	rjmp	.+42     	; 0x4418 <vfprintf+0x1aa>
    43ee:	28 01       	movw	r4, r16
    43f0:	22 e0       	ldi	r18, 0x02	; 2
    43f2:	42 0e       	add	r4, r18
    43f4:	51 1c       	adc	r5, r1
    43f6:	f8 01       	movw	r30, r16
    43f8:	a0 80       	ld	r10, Z
    43fa:	b1 80       	ldd	r11, Z+1	; 0x01
    43fc:	36 fe       	sbrs	r3, 6
    43fe:	03 c0       	rjmp	.+6      	; 0x4406 <vfprintf+0x198>
    4400:	69 2d       	mov	r22, r9
    4402:	70 e0       	ldi	r23, 0x00	; 0
    4404:	02 c0       	rjmp	.+4      	; 0x440a <vfprintf+0x19c>
    4406:	6f ef       	ldi	r22, 0xFF	; 255
    4408:	7f ef       	ldi	r23, 0xFF	; 255
    440a:	c5 01       	movw	r24, r10
    440c:	2d d1       	rcall	.+602    	; 0x4668 <strnlen_P>
    440e:	4c 01       	movw	r8, r24
    4410:	f3 2d       	mov	r31, r3
    4412:	f0 68       	ori	r31, 0x80	; 128
    4414:	3f 2e       	mov	r3, r31
    4416:	82 01       	movw	r16, r4
    4418:	33 fc       	sbrc	r3, 3
    441a:	19 c0       	rjmp	.+50     	; 0x444e <vfprintf+0x1e0>
    441c:	82 2d       	mov	r24, r2
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	88 16       	cp	r8, r24
    4422:	99 06       	cpc	r9, r25
    4424:	a0 f4       	brcc	.+40     	; 0x444e <vfprintf+0x1e0>
    4426:	b6 01       	movw	r22, r12
    4428:	80 e2       	ldi	r24, 0x20	; 32
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	33 d1       	rcall	.+614    	; 0x4694 <fputc>
    442e:	2a 94       	dec	r2
    4430:	f5 cf       	rjmp	.-22     	; 0x441c <vfprintf+0x1ae>
    4432:	f5 01       	movw	r30, r10
    4434:	37 fc       	sbrc	r3, 7
    4436:	85 91       	lpm	r24, Z+
    4438:	37 fe       	sbrs	r3, 7
    443a:	81 91       	ld	r24, Z+
    443c:	5f 01       	movw	r10, r30
    443e:	b6 01       	movw	r22, r12
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	28 d1       	rcall	.+592    	; 0x4694 <fputc>
    4444:	21 10       	cpse	r2, r1
    4446:	2a 94       	dec	r2
    4448:	21 e0       	ldi	r18, 0x01	; 1
    444a:	82 1a       	sub	r8, r18
    444c:	91 08       	sbc	r9, r1
    444e:	81 14       	cp	r8, r1
    4450:	91 04       	cpc	r9, r1
    4452:	79 f7       	brne	.-34     	; 0x4432 <vfprintf+0x1c4>
    4454:	e1 c0       	rjmp	.+450    	; 0x4618 <vfprintf+0x3aa>
    4456:	84 36       	cpi	r24, 0x64	; 100
    4458:	11 f0       	breq	.+4      	; 0x445e <vfprintf+0x1f0>
    445a:	89 36       	cpi	r24, 0x69	; 105
    445c:	39 f5       	brne	.+78     	; 0x44ac <vfprintf+0x23e>
    445e:	f8 01       	movw	r30, r16
    4460:	37 fe       	sbrs	r3, 7
    4462:	07 c0       	rjmp	.+14     	; 0x4472 <vfprintf+0x204>
    4464:	60 81       	ld	r22, Z
    4466:	71 81       	ldd	r23, Z+1	; 0x01
    4468:	82 81       	ldd	r24, Z+2	; 0x02
    446a:	93 81       	ldd	r25, Z+3	; 0x03
    446c:	0c 5f       	subi	r16, 0xFC	; 252
    446e:	1f 4f       	sbci	r17, 0xFF	; 255
    4470:	08 c0       	rjmp	.+16     	; 0x4482 <vfprintf+0x214>
    4472:	60 81       	ld	r22, Z
    4474:	71 81       	ldd	r23, Z+1	; 0x01
    4476:	07 2e       	mov	r0, r23
    4478:	00 0c       	add	r0, r0
    447a:	88 0b       	sbc	r24, r24
    447c:	99 0b       	sbc	r25, r25
    447e:	0e 5f       	subi	r16, 0xFE	; 254
    4480:	1f 4f       	sbci	r17, 0xFF	; 255
    4482:	f3 2d       	mov	r31, r3
    4484:	ff 76       	andi	r31, 0x6F	; 111
    4486:	3f 2e       	mov	r3, r31
    4488:	97 ff       	sbrs	r25, 7
    448a:	09 c0       	rjmp	.+18     	; 0x449e <vfprintf+0x230>
    448c:	90 95       	com	r25
    448e:	80 95       	com	r24
    4490:	70 95       	com	r23
    4492:	61 95       	neg	r22
    4494:	7f 4f       	sbci	r23, 0xFF	; 255
    4496:	8f 4f       	sbci	r24, 0xFF	; 255
    4498:	9f 4f       	sbci	r25, 0xFF	; 255
    449a:	f0 68       	ori	r31, 0x80	; 128
    449c:	3f 2e       	mov	r3, r31
    449e:	2a e0       	ldi	r18, 0x0A	; 10
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	a3 01       	movw	r20, r6
    44a4:	33 d1       	rcall	.+614    	; 0x470c <__ultoa_invert>
    44a6:	88 2e       	mov	r8, r24
    44a8:	86 18       	sub	r8, r6
    44aa:	44 c0       	rjmp	.+136    	; 0x4534 <vfprintf+0x2c6>
    44ac:	85 37       	cpi	r24, 0x75	; 117
    44ae:	31 f4       	brne	.+12     	; 0x44bc <vfprintf+0x24e>
    44b0:	23 2d       	mov	r18, r3
    44b2:	2f 7e       	andi	r18, 0xEF	; 239
    44b4:	b2 2e       	mov	r11, r18
    44b6:	2a e0       	ldi	r18, 0x0A	; 10
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	25 c0       	rjmp	.+74     	; 0x4506 <vfprintf+0x298>
    44bc:	93 2d       	mov	r25, r3
    44be:	99 7f       	andi	r25, 0xF9	; 249
    44c0:	b9 2e       	mov	r11, r25
    44c2:	8f 36       	cpi	r24, 0x6F	; 111
    44c4:	c1 f0       	breq	.+48     	; 0x44f6 <vfprintf+0x288>
    44c6:	18 f4       	brcc	.+6      	; 0x44ce <vfprintf+0x260>
    44c8:	88 35       	cpi	r24, 0x58	; 88
    44ca:	79 f0       	breq	.+30     	; 0x44ea <vfprintf+0x27c>
    44cc:	ae c0       	rjmp	.+348    	; 0x462a <vfprintf+0x3bc>
    44ce:	80 37       	cpi	r24, 0x70	; 112
    44d0:	19 f0       	breq	.+6      	; 0x44d8 <vfprintf+0x26a>
    44d2:	88 37       	cpi	r24, 0x78	; 120
    44d4:	21 f0       	breq	.+8      	; 0x44de <vfprintf+0x270>
    44d6:	a9 c0       	rjmp	.+338    	; 0x462a <vfprintf+0x3bc>
    44d8:	e9 2f       	mov	r30, r25
    44da:	e0 61       	ori	r30, 0x10	; 16
    44dc:	be 2e       	mov	r11, r30
    44de:	b4 fe       	sbrs	r11, 4
    44e0:	0d c0       	rjmp	.+26     	; 0x44fc <vfprintf+0x28e>
    44e2:	fb 2d       	mov	r31, r11
    44e4:	f4 60       	ori	r31, 0x04	; 4
    44e6:	bf 2e       	mov	r11, r31
    44e8:	09 c0       	rjmp	.+18     	; 0x44fc <vfprintf+0x28e>
    44ea:	34 fe       	sbrs	r3, 4
    44ec:	0a c0       	rjmp	.+20     	; 0x4502 <vfprintf+0x294>
    44ee:	29 2f       	mov	r18, r25
    44f0:	26 60       	ori	r18, 0x06	; 6
    44f2:	b2 2e       	mov	r11, r18
    44f4:	06 c0       	rjmp	.+12     	; 0x4502 <vfprintf+0x294>
    44f6:	28 e0       	ldi	r18, 0x08	; 8
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	05 c0       	rjmp	.+10     	; 0x4506 <vfprintf+0x298>
    44fc:	20 e1       	ldi	r18, 0x10	; 16
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	02 c0       	rjmp	.+4      	; 0x4506 <vfprintf+0x298>
    4502:	20 e1       	ldi	r18, 0x10	; 16
    4504:	32 e0       	ldi	r19, 0x02	; 2
    4506:	f8 01       	movw	r30, r16
    4508:	b7 fe       	sbrs	r11, 7
    450a:	07 c0       	rjmp	.+14     	; 0x451a <vfprintf+0x2ac>
    450c:	60 81       	ld	r22, Z
    450e:	71 81       	ldd	r23, Z+1	; 0x01
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	93 81       	ldd	r25, Z+3	; 0x03
    4514:	0c 5f       	subi	r16, 0xFC	; 252
    4516:	1f 4f       	sbci	r17, 0xFF	; 255
    4518:	06 c0       	rjmp	.+12     	; 0x4526 <vfprintf+0x2b8>
    451a:	60 81       	ld	r22, Z
    451c:	71 81       	ldd	r23, Z+1	; 0x01
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	0e 5f       	subi	r16, 0xFE	; 254
    4524:	1f 4f       	sbci	r17, 0xFF	; 255
    4526:	a3 01       	movw	r20, r6
    4528:	f1 d0       	rcall	.+482    	; 0x470c <__ultoa_invert>
    452a:	88 2e       	mov	r8, r24
    452c:	86 18       	sub	r8, r6
    452e:	fb 2d       	mov	r31, r11
    4530:	ff 77       	andi	r31, 0x7F	; 127
    4532:	3f 2e       	mov	r3, r31
    4534:	36 fe       	sbrs	r3, 6
    4536:	0d c0       	rjmp	.+26     	; 0x4552 <vfprintf+0x2e4>
    4538:	23 2d       	mov	r18, r3
    453a:	2e 7f       	andi	r18, 0xFE	; 254
    453c:	a2 2e       	mov	r10, r18
    453e:	89 14       	cp	r8, r9
    4540:	58 f4       	brcc	.+22     	; 0x4558 <vfprintf+0x2ea>
    4542:	34 fe       	sbrs	r3, 4
    4544:	0b c0       	rjmp	.+22     	; 0x455c <vfprintf+0x2ee>
    4546:	32 fc       	sbrc	r3, 2
    4548:	09 c0       	rjmp	.+18     	; 0x455c <vfprintf+0x2ee>
    454a:	83 2d       	mov	r24, r3
    454c:	8e 7e       	andi	r24, 0xEE	; 238
    454e:	a8 2e       	mov	r10, r24
    4550:	05 c0       	rjmp	.+10     	; 0x455c <vfprintf+0x2ee>
    4552:	b8 2c       	mov	r11, r8
    4554:	a3 2c       	mov	r10, r3
    4556:	03 c0       	rjmp	.+6      	; 0x455e <vfprintf+0x2f0>
    4558:	b8 2c       	mov	r11, r8
    455a:	01 c0       	rjmp	.+2      	; 0x455e <vfprintf+0x2f0>
    455c:	b9 2c       	mov	r11, r9
    455e:	a4 fe       	sbrs	r10, 4
    4560:	0f c0       	rjmp	.+30     	; 0x4580 <vfprintf+0x312>
    4562:	fe 01       	movw	r30, r28
    4564:	e8 0d       	add	r30, r8
    4566:	f1 1d       	adc	r31, r1
    4568:	80 81       	ld	r24, Z
    456a:	80 33       	cpi	r24, 0x30	; 48
    456c:	21 f4       	brne	.+8      	; 0x4576 <vfprintf+0x308>
    456e:	9a 2d       	mov	r25, r10
    4570:	99 7e       	andi	r25, 0xE9	; 233
    4572:	a9 2e       	mov	r10, r25
    4574:	09 c0       	rjmp	.+18     	; 0x4588 <vfprintf+0x31a>
    4576:	a2 fe       	sbrs	r10, 2
    4578:	06 c0       	rjmp	.+12     	; 0x4586 <vfprintf+0x318>
    457a:	b3 94       	inc	r11
    457c:	b3 94       	inc	r11
    457e:	04 c0       	rjmp	.+8      	; 0x4588 <vfprintf+0x31a>
    4580:	8a 2d       	mov	r24, r10
    4582:	86 78       	andi	r24, 0x86	; 134
    4584:	09 f0       	breq	.+2      	; 0x4588 <vfprintf+0x31a>
    4586:	b3 94       	inc	r11
    4588:	a3 fc       	sbrc	r10, 3
    458a:	10 c0       	rjmp	.+32     	; 0x45ac <vfprintf+0x33e>
    458c:	a0 fe       	sbrs	r10, 0
    458e:	06 c0       	rjmp	.+12     	; 0x459c <vfprintf+0x32e>
    4590:	b2 14       	cp	r11, r2
    4592:	80 f4       	brcc	.+32     	; 0x45b4 <vfprintf+0x346>
    4594:	28 0c       	add	r2, r8
    4596:	92 2c       	mov	r9, r2
    4598:	9b 18       	sub	r9, r11
    459a:	0d c0       	rjmp	.+26     	; 0x45b6 <vfprintf+0x348>
    459c:	b2 14       	cp	r11, r2
    459e:	58 f4       	brcc	.+22     	; 0x45b6 <vfprintf+0x348>
    45a0:	b6 01       	movw	r22, r12
    45a2:	80 e2       	ldi	r24, 0x20	; 32
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	76 d0       	rcall	.+236    	; 0x4694 <fputc>
    45a8:	b3 94       	inc	r11
    45aa:	f8 cf       	rjmp	.-16     	; 0x459c <vfprintf+0x32e>
    45ac:	b2 14       	cp	r11, r2
    45ae:	18 f4       	brcc	.+6      	; 0x45b6 <vfprintf+0x348>
    45b0:	2b 18       	sub	r2, r11
    45b2:	02 c0       	rjmp	.+4      	; 0x45b8 <vfprintf+0x34a>
    45b4:	98 2c       	mov	r9, r8
    45b6:	21 2c       	mov	r2, r1
    45b8:	a4 fe       	sbrs	r10, 4
    45ba:	0f c0       	rjmp	.+30     	; 0x45da <vfprintf+0x36c>
    45bc:	b6 01       	movw	r22, r12
    45be:	80 e3       	ldi	r24, 0x30	; 48
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	68 d0       	rcall	.+208    	; 0x4694 <fputc>
    45c4:	a2 fe       	sbrs	r10, 2
    45c6:	16 c0       	rjmp	.+44     	; 0x45f4 <vfprintf+0x386>
    45c8:	a1 fc       	sbrc	r10, 1
    45ca:	03 c0       	rjmp	.+6      	; 0x45d2 <vfprintf+0x364>
    45cc:	88 e7       	ldi	r24, 0x78	; 120
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	02 c0       	rjmp	.+4      	; 0x45d6 <vfprintf+0x368>
    45d2:	88 e5       	ldi	r24, 0x58	; 88
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	b6 01       	movw	r22, r12
    45d8:	0c c0       	rjmp	.+24     	; 0x45f2 <vfprintf+0x384>
    45da:	8a 2d       	mov	r24, r10
    45dc:	86 78       	andi	r24, 0x86	; 134
    45de:	51 f0       	breq	.+20     	; 0x45f4 <vfprintf+0x386>
    45e0:	a1 fe       	sbrs	r10, 1
    45e2:	02 c0       	rjmp	.+4      	; 0x45e8 <vfprintf+0x37a>
    45e4:	8b e2       	ldi	r24, 0x2B	; 43
    45e6:	01 c0       	rjmp	.+2      	; 0x45ea <vfprintf+0x37c>
    45e8:	80 e2       	ldi	r24, 0x20	; 32
    45ea:	a7 fc       	sbrc	r10, 7
    45ec:	8d e2       	ldi	r24, 0x2D	; 45
    45ee:	b6 01       	movw	r22, r12
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	50 d0       	rcall	.+160    	; 0x4694 <fputc>
    45f4:	89 14       	cp	r8, r9
    45f6:	30 f4       	brcc	.+12     	; 0x4604 <vfprintf+0x396>
    45f8:	b6 01       	movw	r22, r12
    45fa:	80 e3       	ldi	r24, 0x30	; 48
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	4a d0       	rcall	.+148    	; 0x4694 <fputc>
    4600:	9a 94       	dec	r9
    4602:	f8 cf       	rjmp	.-16     	; 0x45f4 <vfprintf+0x386>
    4604:	8a 94       	dec	r8
    4606:	f3 01       	movw	r30, r6
    4608:	e8 0d       	add	r30, r8
    460a:	f1 1d       	adc	r31, r1
    460c:	80 81       	ld	r24, Z
    460e:	b6 01       	movw	r22, r12
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	40 d0       	rcall	.+128    	; 0x4694 <fputc>
    4614:	81 10       	cpse	r8, r1
    4616:	f6 cf       	rjmp	.-20     	; 0x4604 <vfprintf+0x396>
    4618:	22 20       	and	r2, r2
    461a:	09 f4       	brne	.+2      	; 0x461e <vfprintf+0x3b0>
    461c:	4e ce       	rjmp	.-868    	; 0x42ba <vfprintf+0x4c>
    461e:	b6 01       	movw	r22, r12
    4620:	80 e2       	ldi	r24, 0x20	; 32
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	37 d0       	rcall	.+110    	; 0x4694 <fputc>
    4626:	2a 94       	dec	r2
    4628:	f7 cf       	rjmp	.-18     	; 0x4618 <vfprintf+0x3aa>
    462a:	f6 01       	movw	r30, r12
    462c:	86 81       	ldd	r24, Z+6	; 0x06
    462e:	97 81       	ldd	r25, Z+7	; 0x07
    4630:	02 c0       	rjmp	.+4      	; 0x4636 <vfprintf+0x3c8>
    4632:	8f ef       	ldi	r24, 0xFF	; 255
    4634:	9f ef       	ldi	r25, 0xFF	; 255
    4636:	2b 96       	adiw	r28, 0x0b	; 11
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	f8 94       	cli
    463c:	de bf       	out	0x3e, r29	; 62
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	cd bf       	out	0x3d, r28	; 61
    4642:	df 91       	pop	r29
    4644:	cf 91       	pop	r28
    4646:	1f 91       	pop	r17
    4648:	0f 91       	pop	r16
    464a:	ff 90       	pop	r15
    464c:	ef 90       	pop	r14
    464e:	df 90       	pop	r13
    4650:	cf 90       	pop	r12
    4652:	bf 90       	pop	r11
    4654:	af 90       	pop	r10
    4656:	9f 90       	pop	r9
    4658:	8f 90       	pop	r8
    465a:	7f 90       	pop	r7
    465c:	6f 90       	pop	r6
    465e:	5f 90       	pop	r5
    4660:	4f 90       	pop	r4
    4662:	3f 90       	pop	r3
    4664:	2f 90       	pop	r2
    4666:	08 95       	ret

00004668 <strnlen_P>:
    4668:	fc 01       	movw	r30, r24
    466a:	05 90       	lpm	r0, Z+
    466c:	61 50       	subi	r22, 0x01	; 1
    466e:	70 40       	sbci	r23, 0x00	; 0
    4670:	01 10       	cpse	r0, r1
    4672:	d8 f7       	brcc	.-10     	; 0x466a <strnlen_P+0x2>
    4674:	80 95       	com	r24
    4676:	90 95       	com	r25
    4678:	8e 0f       	add	r24, r30
    467a:	9f 1f       	adc	r25, r31
    467c:	08 95       	ret

0000467e <strnlen>:
    467e:	fc 01       	movw	r30, r24
    4680:	61 50       	subi	r22, 0x01	; 1
    4682:	70 40       	sbci	r23, 0x00	; 0
    4684:	01 90       	ld	r0, Z+
    4686:	01 10       	cpse	r0, r1
    4688:	d8 f7       	brcc	.-10     	; 0x4680 <strnlen+0x2>
    468a:	80 95       	com	r24
    468c:	90 95       	com	r25
    468e:	8e 0f       	add	r24, r30
    4690:	9f 1f       	adc	r25, r31
    4692:	08 95       	ret

00004694 <fputc>:
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	fb 01       	movw	r30, r22
    469e:	23 81       	ldd	r18, Z+3	; 0x03
    46a0:	21 fd       	sbrc	r18, 1
    46a2:	03 c0       	rjmp	.+6      	; 0x46aa <fputc+0x16>
    46a4:	8f ef       	ldi	r24, 0xFF	; 255
    46a6:	9f ef       	ldi	r25, 0xFF	; 255
    46a8:	2c c0       	rjmp	.+88     	; 0x4702 <fputc+0x6e>
    46aa:	22 ff       	sbrs	r18, 2
    46ac:	16 c0       	rjmp	.+44     	; 0x46da <fputc+0x46>
    46ae:	46 81       	ldd	r20, Z+6	; 0x06
    46b0:	57 81       	ldd	r21, Z+7	; 0x07
    46b2:	24 81       	ldd	r18, Z+4	; 0x04
    46b4:	35 81       	ldd	r19, Z+5	; 0x05
    46b6:	42 17       	cp	r20, r18
    46b8:	53 07       	cpc	r21, r19
    46ba:	44 f4       	brge	.+16     	; 0x46cc <fputc+0x38>
    46bc:	a0 81       	ld	r26, Z
    46be:	b1 81       	ldd	r27, Z+1	; 0x01
    46c0:	9d 01       	movw	r18, r26
    46c2:	2f 5f       	subi	r18, 0xFF	; 255
    46c4:	3f 4f       	sbci	r19, 0xFF	; 255
    46c6:	31 83       	std	Z+1, r19	; 0x01
    46c8:	20 83       	st	Z, r18
    46ca:	8c 93       	st	X, r24
    46cc:	26 81       	ldd	r18, Z+6	; 0x06
    46ce:	37 81       	ldd	r19, Z+7	; 0x07
    46d0:	2f 5f       	subi	r18, 0xFF	; 255
    46d2:	3f 4f       	sbci	r19, 0xFF	; 255
    46d4:	37 83       	std	Z+7, r19	; 0x07
    46d6:	26 83       	std	Z+6, r18	; 0x06
    46d8:	14 c0       	rjmp	.+40     	; 0x4702 <fputc+0x6e>
    46da:	8b 01       	movw	r16, r22
    46dc:	ec 01       	movw	r28, r24
    46de:	fb 01       	movw	r30, r22
    46e0:	00 84       	ldd	r0, Z+8	; 0x08
    46e2:	f1 85       	ldd	r31, Z+9	; 0x09
    46e4:	e0 2d       	mov	r30, r0
    46e6:	19 95       	eicall
    46e8:	89 2b       	or	r24, r25
    46ea:	e1 f6       	brne	.-72     	; 0x46a4 <fputc+0x10>
    46ec:	d8 01       	movw	r26, r16
    46ee:	16 96       	adiw	r26, 0x06	; 6
    46f0:	8d 91       	ld	r24, X+
    46f2:	9c 91       	ld	r25, X
    46f4:	17 97       	sbiw	r26, 0x07	; 7
    46f6:	01 96       	adiw	r24, 0x01	; 1
    46f8:	17 96       	adiw	r26, 0x07	; 7
    46fa:	9c 93       	st	X, r25
    46fc:	8e 93       	st	-X, r24
    46fe:	16 97       	sbiw	r26, 0x06	; 6
    4700:	ce 01       	movw	r24, r28
    4702:	df 91       	pop	r29
    4704:	cf 91       	pop	r28
    4706:	1f 91       	pop	r17
    4708:	0f 91       	pop	r16
    470a:	08 95       	ret

0000470c <__ultoa_invert>:
    470c:	fa 01       	movw	r30, r20
    470e:	aa 27       	eor	r26, r26
    4710:	28 30       	cpi	r18, 0x08	; 8
    4712:	51 f1       	breq	.+84     	; 0x4768 <__ultoa_invert+0x5c>
    4714:	20 31       	cpi	r18, 0x10	; 16
    4716:	81 f1       	breq	.+96     	; 0x4778 <__ultoa_invert+0x6c>
    4718:	e8 94       	clt
    471a:	6f 93       	push	r22
    471c:	6e 7f       	andi	r22, 0xFE	; 254
    471e:	6e 5f       	subi	r22, 0xFE	; 254
    4720:	7f 4f       	sbci	r23, 0xFF	; 255
    4722:	8f 4f       	sbci	r24, 0xFF	; 255
    4724:	9f 4f       	sbci	r25, 0xFF	; 255
    4726:	af 4f       	sbci	r26, 0xFF	; 255
    4728:	b1 e0       	ldi	r27, 0x01	; 1
    472a:	3e d0       	rcall	.+124    	; 0x47a8 <__ultoa_invert+0x9c>
    472c:	b4 e0       	ldi	r27, 0x04	; 4
    472e:	3c d0       	rcall	.+120    	; 0x47a8 <__ultoa_invert+0x9c>
    4730:	67 0f       	add	r22, r23
    4732:	78 1f       	adc	r23, r24
    4734:	89 1f       	adc	r24, r25
    4736:	9a 1f       	adc	r25, r26
    4738:	a1 1d       	adc	r26, r1
    473a:	68 0f       	add	r22, r24
    473c:	79 1f       	adc	r23, r25
    473e:	8a 1f       	adc	r24, r26
    4740:	91 1d       	adc	r25, r1
    4742:	a1 1d       	adc	r26, r1
    4744:	6a 0f       	add	r22, r26
    4746:	71 1d       	adc	r23, r1
    4748:	81 1d       	adc	r24, r1
    474a:	91 1d       	adc	r25, r1
    474c:	a1 1d       	adc	r26, r1
    474e:	20 d0       	rcall	.+64     	; 0x4790 <__ultoa_invert+0x84>
    4750:	09 f4       	brne	.+2      	; 0x4754 <__ultoa_invert+0x48>
    4752:	68 94       	set
    4754:	3f 91       	pop	r19
    4756:	2a e0       	ldi	r18, 0x0A	; 10
    4758:	26 9f       	mul	r18, r22
    475a:	11 24       	eor	r1, r1
    475c:	30 19       	sub	r19, r0
    475e:	30 5d       	subi	r19, 0xD0	; 208
    4760:	31 93       	st	Z+, r19
    4762:	de f6       	brtc	.-74     	; 0x471a <__ultoa_invert+0xe>
    4764:	cf 01       	movw	r24, r30
    4766:	08 95       	ret
    4768:	46 2f       	mov	r20, r22
    476a:	47 70       	andi	r20, 0x07	; 7
    476c:	40 5d       	subi	r20, 0xD0	; 208
    476e:	41 93       	st	Z+, r20
    4770:	b3 e0       	ldi	r27, 0x03	; 3
    4772:	0f d0       	rcall	.+30     	; 0x4792 <__ultoa_invert+0x86>
    4774:	c9 f7       	brne	.-14     	; 0x4768 <__ultoa_invert+0x5c>
    4776:	f6 cf       	rjmp	.-20     	; 0x4764 <__ultoa_invert+0x58>
    4778:	46 2f       	mov	r20, r22
    477a:	4f 70       	andi	r20, 0x0F	; 15
    477c:	40 5d       	subi	r20, 0xD0	; 208
    477e:	4a 33       	cpi	r20, 0x3A	; 58
    4780:	18 f0       	brcs	.+6      	; 0x4788 <__ultoa_invert+0x7c>
    4782:	49 5d       	subi	r20, 0xD9	; 217
    4784:	31 fd       	sbrc	r19, 1
    4786:	40 52       	subi	r20, 0x20	; 32
    4788:	41 93       	st	Z+, r20
    478a:	02 d0       	rcall	.+4      	; 0x4790 <__ultoa_invert+0x84>
    478c:	a9 f7       	brne	.-22     	; 0x4778 <__ultoa_invert+0x6c>
    478e:	ea cf       	rjmp	.-44     	; 0x4764 <__ultoa_invert+0x58>
    4790:	b4 e0       	ldi	r27, 0x04	; 4
    4792:	a6 95       	lsr	r26
    4794:	97 95       	ror	r25
    4796:	87 95       	ror	r24
    4798:	77 95       	ror	r23
    479a:	67 95       	ror	r22
    479c:	ba 95       	dec	r27
    479e:	c9 f7       	brne	.-14     	; 0x4792 <__ultoa_invert+0x86>
    47a0:	00 97       	sbiw	r24, 0x00	; 0
    47a2:	61 05       	cpc	r22, r1
    47a4:	71 05       	cpc	r23, r1
    47a6:	08 95       	ret
    47a8:	9b 01       	movw	r18, r22
    47aa:	ac 01       	movw	r20, r24
    47ac:	0a 2e       	mov	r0, r26
    47ae:	06 94       	lsr	r0
    47b0:	57 95       	ror	r21
    47b2:	47 95       	ror	r20
    47b4:	37 95       	ror	r19
    47b6:	27 95       	ror	r18
    47b8:	ba 95       	dec	r27
    47ba:	c9 f7       	brne	.-14     	; 0x47ae <__ultoa_invert+0xa2>
    47bc:	62 0f       	add	r22, r18
    47be:	73 1f       	adc	r23, r19
    47c0:	84 1f       	adc	r24, r20
    47c2:	95 1f       	adc	r25, r21
    47c4:	a0 1d       	adc	r26, r0
    47c6:	08 95       	ret

000047c8 <_exit>:
    47c8:	f8 94       	cli

000047ca <__stop_program>:
    47ca:	ff cf       	rjmp	.-2      	; 0x47ca <__stop_program>
