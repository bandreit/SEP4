
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000764  00800200  000067bc  00006850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000067bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f6b  00800964  00800964  00006fb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006fb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf0  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e5ec  00000000  00000000  00007c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003aff  00000000  00000000  0001622c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007224  00000000  00000000  00019d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002940  00000000  00000000  00020f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044ae  00000000  00000000  00023890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c65f  00000000  00000000  00027d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af0  00000000  00000000  0003439d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c6       	rjmp	.+3256   	; 0xcea <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8e 27 	jmp	0x4f1c	; 0x4f1c <__vector_25>
      68:	0c 94 e0 27 	jmp	0x4fc0	; 0x4fc0 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 24 28 	jmp	0x5048	; 0x5048 <__vector_36>
      94:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 2e 2c 	jmp	0x585c	; 0x585c <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <__vector_51>
      d0:	0c 94 0c 29 	jmp	0x5218	; 0x5218 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 50 29 	jmp	0x52a0	; 0x52a0 <__vector_54>
      dc:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	49 1c       	adc	r4, r9
      e6:	49 1c       	adc	r4, r9
      e8:	49 1c       	adc	r4, r9
      ea:	80 1c       	adc	r8, r0
      ec:	88 1c       	adc	r8, r8
      ee:	9d 1c       	adc	r9, r13
      f0:	49 1c       	adc	r4, r9
      f2:	49 1c       	adc	r4, r9
      f4:	80 1c       	adc	r8, r0
      f6:	88 1c       	adc	r8, r8
      f8:	50 2c       	mov	r5, r0
      fa:	c0 2c       	mov	r12, r0
      fc:	c0 2c       	mov	r12, r0
      fe:	c0 2c       	mov	r12, r0
     100:	c0 2c       	mov	r12, r0
     102:	c0 2c       	mov	r12, r0
     104:	c0 2c       	mov	r12, r0
     106:	c0 2c       	mov	r12, r0
     108:	50 2c       	mov	r5, r0
     10a:	c0 2c       	mov	r12, r0
     10c:	c0 2c       	mov	r12, r0
     10e:	c0 2c       	mov	r12, r0
     110:	c0 2c       	mov	r12, r0
     112:	c0 2c       	mov	r12, r0
     114:	c0 2c       	mov	r12, r0
     116:	c0 2c       	mov	r12, r0
     118:	52 2c       	mov	r5, r2
     11a:	c0 2c       	mov	r12, r0
     11c:	c0 2c       	mov	r12, r0
     11e:	c0 2c       	mov	r12, r0
     120:	c0 2c       	mov	r12, r0
     122:	c0 2c       	mov	r12, r0
     124:	c0 2c       	mov	r12, r0
     126:	c0 2c       	mov	r12, r0
     128:	c0 2c       	mov	r12, r0
     12a:	c0 2c       	mov	r12, r0
     12c:	c0 2c       	mov	r12, r0
     12e:	c0 2c       	mov	r12, r0
     130:	c0 2c       	mov	r12, r0
     132:	c0 2c       	mov	r12, r0
     134:	c0 2c       	mov	r12, r0
     136:	c0 2c       	mov	r12, r0
     138:	52 2c       	mov	r5, r2
     13a:	c0 2c       	mov	r12, r0
     13c:	c0 2c       	mov	r12, r0
     13e:	c0 2c       	mov	r12, r0
     140:	c0 2c       	mov	r12, r0
     142:	c0 2c       	mov	r12, r0
     144:	c0 2c       	mov	r12, r0
     146:	c0 2c       	mov	r12, r0
     148:	c0 2c       	mov	r12, r0
     14a:	c0 2c       	mov	r12, r0
     14c:	c0 2c       	mov	r12, r0
     14e:	c0 2c       	mov	r12, r0
     150:	c0 2c       	mov	r12, r0
     152:	c0 2c       	mov	r12, r0
     154:	c0 2c       	mov	r12, r0
     156:	c0 2c       	mov	r12, r0
     158:	bc 2c       	mov	r11, r12
     15a:	c0 2c       	mov	r12, r0
     15c:	c0 2c       	mov	r12, r0
     15e:	c0 2c       	mov	r12, r0
     160:	c0 2c       	mov	r12, r0
     162:	c0 2c       	mov	r12, r0
     164:	c0 2c       	mov	r12, r0
     166:	c0 2c       	mov	r12, r0
     168:	87 2c       	mov	r8, r7
     16a:	c0 2c       	mov	r12, r0
     16c:	c0 2c       	mov	r12, r0
     16e:	c0 2c       	mov	r12, r0
     170:	c0 2c       	mov	r12, r0
     172:	c0 2c       	mov	r12, r0
     174:	c0 2c       	mov	r12, r0
     176:	c0 2c       	mov	r12, r0
     178:	c0 2c       	mov	r12, r0
     17a:	c0 2c       	mov	r12, r0
     17c:	c0 2c       	mov	r12, r0
     17e:	c0 2c       	mov	r12, r0
     180:	c0 2c       	mov	r12, r0
     182:	c0 2c       	mov	r12, r0
     184:	c0 2c       	mov	r12, r0
     186:	c0 2c       	mov	r12, r0
     188:	7b 2c       	mov	r7, r11
     18a:	c0 2c       	mov	r12, r0
     18c:	c0 2c       	mov	r12, r0
     18e:	c0 2c       	mov	r12, r0
     190:	c0 2c       	mov	r12, r0
     192:	c0 2c       	mov	r12, r0
     194:	c0 2c       	mov	r12, r0
     196:	c0 2c       	mov	r12, r0
     198:	9f 2c       	mov	r9, r15

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <prvCheckTasksWaitingTermination>
     19e:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	db d4       	rcall	.+2486   	; 0xb5e <vPortYield>
     1a8:	0e 94 c6 1c 	call	0x398c	; 0x398c <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 c6 19 	call	0x338c	; 0x338c <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 12 1c 	call	0x3824	; 0x3824 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	19 e0       	ldi	r17, 0x09	; 9
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ec eb       	ldi	r30, 0xBC	; 188
     1e4:	f7 e6       	ldi	r31, 0x67	; 103
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 36       	cpi	r26, 0x64	; 100
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a4 e6       	ldi	r26, 0x64	; 100
     1fa:	b9 e0       	ldi	r27, 0x09	; 9
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 3c       	cpi	r26, 0xCF	; 207
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 41 20 	call	0x4082	; 0x4082 <main>
     20a:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <setPackageHandler>:
#include "application.h"



void setPackageHandler()
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <setPackageHandler+0xa>
     21a:	00 d0       	rcall	.+0      	; 0x21c <setPackageHandler+0xc>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	uint16_t data[3];
	for(int i=0;i<3;i++)
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	13 c0       	rjmp	.+38     	; 0x24c <setPackageHandler+0x3c>
	{
		if(xQueueReceive(sensorDataQueue,&data[i],portMAX_DELAY)==pdPASS)
     226:	b8 01       	movw	r22, r16
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	8c 0f       	add	r24, r28
     232:	9d 1f       	adc	r25, r29
     234:	68 0f       	add	r22, r24
     236:	79 1f       	adc	r23, r25
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	80 91 b9 18 	lds	r24, 0x18B9	; 0x8018b9 <sensorDataQueue>
     242:	90 91 ba 18 	lds	r25, 0x18BA	; 0x8018ba <sensorDataQueue+0x1>
     246:	70 d7       	rcall	.+3808   	; 0x1128 <xQueueReceive>


void setPackageHandler()
{
	uint16_t data[3];
	for(int i=0;i<3;i++)
     248:	0f 5f       	subi	r16, 0xFF	; 255
     24a:	1f 4f       	sbci	r17, 0xFF	; 255
     24c:	03 30       	cpi	r16, 0x03	; 3
     24e:	11 05       	cpc	r17, r1
     250:	54 f3       	brlt	.-44     	; 0x226 <setPackageHandler+0x16>
			{
				//printf("Parameter[%i] : %d\n", i , data[i]);
			}
	}
	
	sensorDataPackageHandler_setTemp_value(data[0]);
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <sensorDataPackageHandler_setTemp_value>
	sensorDataPackageHandler_setHumidity_value(data[1]);
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04
     25e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <sensorDataPackageHandler_setHumidity_value>
	sensorDataPackageHandler_setCO2_value(data[2]);
     262:	8d 81       	ldd	r24, Y+5	; 0x05
     264:	9e 81       	ldd	r25, Y+6	; 0x06
     266:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <sensorDataPackageHandler_setCO2_value>
	xQueueReset(sensorDataQueue);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 91 b9 18 	lds	r24, 0x18B9	; 0x8018b9 <sensorDataQueue>
     270:	90 91 ba 18 	lds	r25, 0x18BA	; 0x8018ba <sensorDataQueue+0x1>
     274:	14 d6       	rcall	.+3112   	; 0xe9e <xQueueGenericReset>
	
}
     276:	26 96       	adiw	r28, 0x06	; 6
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <ApplicationTask>:
void ApplicationTask(void *pvParameters)
{
	for (;;)
	{
		
		EventBits_t eventBits = xEventGroupWaitBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,portMAX_DELAY);
     28c:	cc 24       	eor	r12, r12
     28e:	ca 94       	dec	r12
     290:	dc 2c       	mov	r13, r12
     292:	76 01       	movw	r14, r12
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	21 e0       	ldi	r18, 0x01	; 1
     298:	43 e0       	ldi	r20, 0x03	; 3
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <dataEventGroup>
     2a4:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <dataEventGroup+0x1>
     2a8:	05 d1       	rcall	.+522    	; 0x4b4 <xEventGroupWaitBits>
		
		if((eventBits &(BIT_CO2 | BIT_HUMIDITY_TEMPERATURE))==(BIT_CO2|BIT_HUMIDITY_TEMPERATURE))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	b1 f4       	brne	.+44     	; 0x2ea <ApplicationTask+0x5e>
		{
			printf("ALL DATA COLLECTED\n");
     2be:	8f e6       	ldi	r24, 0x6F	; 111
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
			setPackageHandler();
     2c6:	a4 df       	rcall	.-184    	; 0x210 <setPackageHandler>
			vTaskDelay(pdMS_TO_TICKS(3000));
     2c8:	6a eb       	ldi	r22, 0xBA	; 186
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
			xSemaphoreGive(tempHumSemaphore);
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 91 bd 18 	lds	r24, 0x18BD	; 0x8018bd <tempHumSemaphore>
     2e4:	90 91 be 18 	lds	r25, 0x18BE	; 0x8018be <tempHumSemaphore+0x1>
     2e8:	52 d6       	rcall	.+3236   	; 0xf8e <xQueueGenericSend>

		}
		vTaskDelay(pdMS_TO_TICKS(50));
     2ea:	63 e0       	ldi	r22, 0x03	; 3
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
		
	}
     2f6:	ca cf       	rjmp	.-108    	; 0x28c <ApplicationTask>

000002f8 <createApplicationTask>:
}

void createApplicationTask()
{
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
	
	xTaskCreate(
     2fe:	e1 2c       	mov	r14, r1
     300:	f1 2c       	mov	r15, r1
     302:	01 e0       	ldi	r16, 0x01	; 1
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 ec       	ldi	r20, 0xC0	; 192
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	62 e8       	ldi	r22, 0x82	; 130
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	86 e4       	ldi	r24, 0x46	; 70
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <myCo2CallBack>:
		vTaskDelay(30);
			
	}
}
void myCo2CallBack(uint16_t ppm)
{
     320:	0f 93       	push	r16
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	1f 92       	push	r1
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	89 83       	std	Y+1, r24	; 0x01
		//printf("CO2 Value: %d\n",ppm);
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	2f ef       	ldi	r18, 0xFF	; 255
     336:	3f ef       	ldi	r19, 0xFF	; 255
     338:	a9 01       	movw	r20, r18
     33a:	be 01       	movw	r22, r28
     33c:	6f 5f       	subi	r22, 0xFF	; 255
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	80 91 b9 18 	lds	r24, 0x18B9	; 0x8018b9 <sensorDataQueue>
     344:	90 91 ba 18 	lds	r25, 0x18BA	; 0x8018ba <sensorDataQueue+0x1>
     348:	22 d6       	rcall	.+3140   	; 0xf8e <xQueueGenericSend>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     34a:	41 e0       	ldi	r20, 0x01	; 1
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <dataEventGroup>
     356:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <dataEventGroup+0x1>
     35a:	4c d1       	rcall	.+664    	; 0x5f4 <xEventGroupSetBits>
		//xSemaphoreGive(tempHumSemaphore);
		
		

}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	0c 94 c0 25 	jmp	0x4b80	; 0x4b80 <mh_z19_initialise>
     36e:	08 95       	ret

00000370 <measureCO2>:
	
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     370:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <mh_z19_takeMeassuring>
     374:	80 93 97 18 	sts	0x1897, r24	; 0x801897 <rc>
	if (rc != MHZ19_OK)
     378:	88 23       	and	r24, r24
     37a:	21 f0       	breq	.+8      	; 0x384 <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     37c:	8a e8       	ldi	r24, 0x8A	; 138
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0c 94 d1 30 	jmp	0x61a2	; 0x61a2 <puts>
     384:	08 95       	ret

00000386 <CO2Task>:
void CO2Task()
{
	while(1)
	{
//printf("CO2 Task\n");
EventBits_t dataEventBits = xEventGroupWaitBits
     386:	cc 24       	eor	r12, r12
     388:	ca 94       	dec	r12
     38a:	dc 2c       	mov	r13, r12
     38c:	76 01       	movw	r14, r12
     38e:	01 e0       	ldi	r16, 0x01	; 1
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	42 e0       	ldi	r20, 0x02	; 2
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <dataEventGroup>
     39e:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <dataEventGroup+0x1>
     3a2:	88 d0       	rcall	.+272    	; 0x4b4 <xEventGroupWaitBits>


		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
		{
			//printf("Measured\n");
			measureCO2();
     3a4:	61 fd       	sbrc	r22, 1
     3a6:	e4 df       	rcall	.-56     	; 0x370 <measureCO2>
		
		}
		vTaskDelay(30);
     3a8:	6e e1       	ldi	r22, 0x1E	; 30
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
			
	}
     3b4:	e8 cf       	rjmp	.-48     	; 0x386 <CO2Task>

000003b6 <createCO2Task>:
		
		

}
void createCO2Task()
{
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
			initializeCO2Driver();
     3bc:	d5 df       	rcall	.-86     	; 0x368 <initializeCO2Driver>
			mh_z19_injectCallBack(myCo2CallBack);
     3be:	80 e9       	ldi	r24, 0x90	; 144
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 e5 25 	call	0x4bca	; 0x4bca <mh_z19_injectCallBack>
			xTaskCreate(
     3c6:	e1 2c       	mov	r14, r1
     3c8:	f1 2c       	mov	r15, r1
     3ca:	01 e0       	ldi	r16, 0x01	; 1
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	40 ec       	ldi	r20, 0xC0	; 192
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	61 ea       	ldi	r22, 0xA1	; 161
     3d6:	72 e0       	ldi	r23, 0x02	; 2
     3d8:	83 ec       	ldi	r24, 0xC3	; 195
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <initializeConfiguration>:
SemaphoreHandle_t configSemaphore;
uint8_t ventilationLevel;


void initializeConfiguration()
{
     3e8:	0f 93       	push	r16
	ventilationLevel = -100;
     3ea:	8c e9       	ldi	r24, 0x9C	; 156
     3ec:	80 93 9a 18 	sts	0x189A, r24	; 0x80189a <ventilationLevel>
	configSemaphore = xSemaphoreCreateBinary();
     3f0:	43 e0       	ldi	r20, 0x03	; 3
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	a8 d5       	rcall	.+2896   	; 0xf48 <xQueueGenericCreate>
     3f8:	90 93 99 18 	sts	0x1899, r25	; 0x801899 <configSemaphore+0x1>
     3fc:	80 93 98 18 	sts	0x1898, r24	; 0x801898 <configSemaphore>
	xSemaphoreGive(configSemaphore);
     400:	00 e0       	ldi	r16, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	a9 01       	movw	r20, r18
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	c0 d5       	rcall	.+2944   	; 0xf8e <xQueueGenericSend>
}
     40e:	0f 91       	pop	r16
     410:	08 95       	ret

00000412 <setVentilationLevel>:

void setVentilationLevel(uint8_t level)
{
     412:	0f 93       	push	r16
     414:	cf 93       	push	r28
     416:	c8 2f       	mov	r28, r24
	if(xSemaphoreTake(configSemaphore,portMAX_DELAY)==pdTRUE)
     418:	4f ef       	ldi	r20, 0xFF	; 255
     41a:	5f ef       	ldi	r21, 0xFF	; 255
     41c:	ba 01       	movw	r22, r20
     41e:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <configSemaphore>
     422:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <configSemaphore+0x1>
     426:	12 d7       	rcall	.+3620   	; 0x124c <xQueueSemaphoreTake>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	69 f4       	brne	.+26     	; 0x446 <setVentilationLevel+0x34>
	{
		ventilationLevel = level;
     42c:	c0 93 9a 18 	sts	0x189A, r28	; 0x80189a <ventilationLevel>
		xSemaphoreGive(configSemaphore);
     430:	00 e0       	ldi	r16, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	a9 01       	movw	r20, r18
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <configSemaphore>
     440:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <configSemaphore+0x1>
     444:	a4 d5       	rcall	.+2888   	; 0xf8e <xQueueGenericSend>
	}
}
     446:	cf 91       	pop	r28
     448:	0f 91       	pop	r16
     44a:	08 95       	ret

0000044c <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     44c:	0f 93       	push	r16
     44e:	01 11       	cpse	r16, r1
     450:	0c c0       	rjmp	.+24     	; 0x46a <prvTestWaitCondition+0x1e>
     452:	dc 01       	movw	r26, r24
     454:	cb 01       	movw	r24, r22
     456:	82 23       	and	r24, r18
     458:	93 23       	and	r25, r19
     45a:	a4 23       	and	r26, r20
     45c:	b5 23       	and	r27, r21
     45e:	89 2b       	or	r24, r25
     460:	8a 2b       	or	r24, r26
     462:	8b 2b       	or	r24, r27
     464:	79 f4       	brne	.+30     	; 0x484 <prvTestWaitCondition+0x38>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	10 c0       	rjmp	.+32     	; 0x48a <prvTestWaitCondition+0x3e>
     46a:	dc 01       	movw	r26, r24
     46c:	cb 01       	movw	r24, r22
     46e:	82 23       	and	r24, r18
     470:	93 23       	and	r25, r19
     472:	a4 23       	and	r26, r20
     474:	b5 23       	and	r27, r21
     476:	28 17       	cp	r18, r24
     478:	39 07       	cpc	r19, r25
     47a:	4a 07       	cpc	r20, r26
     47c:	5b 07       	cpc	r21, r27
     47e:	21 f0       	breq	.+8      	; 0x488 <prvTestWaitCondition+0x3c>
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	03 c0       	rjmp	.+6      	; 0x48a <prvTestWaitCondition+0x3e>
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	01 c0       	rjmp	.+2      	; 0x48a <prvTestWaitCondition+0x3e>
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <xEventGroupCreate>:
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	8f e0       	ldi	r24, 0x0F	; 15
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	af d1       	rcall	.+862    	; 0x7f6 <pvPortMalloc>
     498:	ec 01       	movw	r28, r24
     49a:	00 97       	sbiw	r24, 0x00	; 0
     49c:	39 f0       	breq	.+14     	; 0x4ac <xEventGroupCreate+0x1e>
     49e:	fc 01       	movw	r30, r24
     4a0:	11 92       	st	Z+, r1
     4a2:	11 92       	st	Z+, r1
     4a4:	11 92       	st	Z+, r1
     4a6:	11 92       	st	Z+, r1
     4a8:	cf 01       	movw	r24, r30
     4aa:	8b d2       	rcall	.+1302   	; 0x9c2 <vListInitialise>
     4ac:	ce 01       	movw	r24, r28
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <xEventGroupWaitBits>:
     4b4:	2f 92       	push	r2
     4b6:	3f 92       	push	r3
     4b8:	4f 92       	push	r4
     4ba:	5f 92       	push	r5
     4bc:	6f 92       	push	r6
     4be:	7f 92       	push	r7
     4c0:	8f 92       	push	r8
     4c2:	9f 92       	push	r9
     4c4:	af 92       	push	r10
     4c6:	bf 92       	push	r11
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	ec 01       	movw	r28, r24
     4da:	4a 01       	movw	r8, r20
     4dc:	5b 01       	movw	r10, r22
     4de:	62 2e       	mov	r6, r18
     4e0:	70 2e       	mov	r7, r16
     4e2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vTaskSuspendAll>
     4e6:	28 80       	ld	r2, Y
     4e8:	39 80       	ldd	r3, Y+1	; 0x01
     4ea:	4a 80       	ldd	r4, Y+2	; 0x02
     4ec:	5b 80       	ldd	r5, Y+3	; 0x03
     4ee:	a5 01       	movw	r20, r10
     4f0:	94 01       	movw	r18, r8
     4f2:	c2 01       	movw	r24, r4
     4f4:	b1 01       	movw	r22, r2
     4f6:	aa df       	rcall	.-172    	; 0x44c <prvTestWaitCondition>
     4f8:	88 23       	and	r24, r24
     4fa:	a1 f0       	breq	.+40     	; 0x524 <xEventGroupWaitBits+0x70>
     4fc:	66 20       	and	r6, r6
     4fe:	89 f1       	breq	.+98     	; 0x562 <xEventGroupWaitBits+0xae>
     500:	d5 01       	movw	r26, r10
     502:	c4 01       	movw	r24, r8
     504:	80 95       	com	r24
     506:	90 95       	com	r25
     508:	a0 95       	com	r26
     50a:	b0 95       	com	r27
     50c:	82 21       	and	r24, r2
     50e:	93 21       	and	r25, r3
     510:	a4 21       	and	r26, r4
     512:	b5 21       	and	r27, r5
     514:	88 83       	st	Y, r24
     516:	99 83       	std	Y+1, r25	; 0x01
     518:	aa 83       	std	Y+2, r26	; 0x02
     51a:	bb 83       	std	Y+3, r27	; 0x03
     51c:	c1 2c       	mov	r12, r1
     51e:	d1 2c       	mov	r13, r1
     520:	76 01       	movw	r14, r12
     522:	22 c0       	rjmp	.+68     	; 0x568 <xEventGroupWaitBits+0xb4>
     524:	c1 14       	cp	r12, r1
     526:	d1 04       	cpc	r13, r1
     528:	e1 04       	cpc	r14, r1
     52a:	f1 04       	cpc	r15, r1
     52c:	e9 f0       	breq	.+58     	; 0x568 <xEventGroupWaitBits+0xb4>
     52e:	61 10       	cpse	r6, r1
     530:	04 c0       	rjmp	.+8      	; 0x53a <xEventGroupWaitBits+0x86>
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	ba 01       	movw	r22, r20
     538:	04 c0       	rjmp	.+8      	; 0x542 <xEventGroupWaitBits+0x8e>
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	71 e0       	ldi	r23, 0x01	; 1
     542:	71 10       	cpse	r7, r1
     544:	74 60       	ori	r23, 0x04	; 4
     546:	48 29       	or	r20, r8
     548:	59 29       	or	r21, r9
     54a:	6a 29       	or	r22, r10
     54c:	7b 29       	or	r23, r11
     54e:	97 01       	movw	r18, r14
     550:	86 01       	movw	r16, r12
     552:	ce 01       	movw	r24, r28
     554:	04 96       	adiw	r24, 0x04	; 4
     556:	0e 94 ed 12 	call	0x25da	; 0x25da <vTaskPlaceOnUnorderedEventList>
     55a:	21 2c       	mov	r2, r1
     55c:	31 2c       	mov	r3, r1
     55e:	21 01       	movw	r4, r2
     560:	03 c0       	rjmp	.+6      	; 0x568 <xEventGroupWaitBits+0xb4>
     562:	c1 2c       	mov	r12, r1
     564:	d1 2c       	mov	r13, r1
     566:	76 01       	movw	r14, r12
     568:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
     56c:	cd 28       	or	r12, r13
     56e:	ce 28       	or	r12, r14
     570:	cf 28       	or	r12, r15
     572:	59 f1       	breq	.+86     	; 0x5ca <xEventGroupWaitBits+0x116>
     574:	81 11       	cpse	r24, r1
     576:	01 c0       	rjmp	.+2      	; 0x57a <xEventGroupWaitBits+0xc6>
     578:	f2 d2       	rcall	.+1508   	; 0xb5e <vPortYield>
     57a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <uxTaskResetEventItemValue>
     57e:	6b 01       	movw	r12, r22
     580:	7c 01       	movw	r14, r24
     582:	91 fd       	sbrc	r25, 1
     584:	1f c0       	rjmp	.+62     	; 0x5c4 <xEventGroupWaitBits+0x110>
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	0f 92       	push	r0
     58c:	c8 80       	ld	r12, Y
     58e:	d9 80       	ldd	r13, Y+1	; 0x01
     590:	ea 80       	ldd	r14, Y+2	; 0x02
     592:	fb 80       	ldd	r15, Y+3	; 0x03
     594:	07 2d       	mov	r16, r7
     596:	a5 01       	movw	r20, r10
     598:	94 01       	movw	r18, r8
     59a:	c7 01       	movw	r24, r14
     59c:	b6 01       	movw	r22, r12
     59e:	56 df       	rcall	.-340    	; 0x44c <prvTestWaitCondition>
     5a0:	88 23       	and	r24, r24
     5a2:	71 f0       	breq	.+28     	; 0x5c0 <xEventGroupWaitBits+0x10c>
     5a4:	66 20       	and	r6, r6
     5a6:	61 f0       	breq	.+24     	; 0x5c0 <xEventGroupWaitBits+0x10c>
     5a8:	80 94       	com	r8
     5aa:	90 94       	com	r9
     5ac:	a0 94       	com	r10
     5ae:	b0 94       	com	r11
     5b0:	8c 20       	and	r8, r12
     5b2:	9d 20       	and	r9, r13
     5b4:	ae 20       	and	r10, r14
     5b6:	bf 20       	and	r11, r15
     5b8:	88 82       	st	Y, r8
     5ba:	99 82       	std	Y+1, r9	; 0x01
     5bc:	aa 82       	std	Y+2, r10	; 0x02
     5be:	bb 82       	std	Y+3, r11	; 0x03
     5c0:	0f 90       	pop	r0
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	16 01       	movw	r2, r12
     5c6:	27 01       	movw	r4, r14
     5c8:	55 24       	eor	r5, r5
     5ca:	c2 01       	movw	r24, r4
     5cc:	b1 01       	movw	r22, r2
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	8f 90       	pop	r8
     5e6:	7f 90       	pop	r7
     5e8:	6f 90       	pop	r6
     5ea:	5f 90       	pop	r5
     5ec:	4f 90       	pop	r4
     5ee:	3f 90       	pop	r3
     5f0:	2f 90       	pop	r2
     5f2:	08 95       	ret

000005f4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     5f4:	4f 92       	push	r4
     5f6:	5f 92       	push	r5
     5f8:	6f 92       	push	r6
     5fa:	7f 92       	push	r7
     5fc:	af 92       	push	r10
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
     612:	6a 01       	movw	r12, r20
     614:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     616:	8c 01       	movw	r16, r24
     618:	09 5f       	subi	r16, 0xF9	; 249
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     61c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     620:	eb 85       	ldd	r30, Y+11	; 0x0b
     622:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     624:	88 81       	ld	r24, Y
     626:	99 81       	ldd	r25, Y+1	; 0x01
     628:	aa 81       	ldd	r26, Y+2	; 0x02
     62a:	bb 81       	ldd	r27, Y+3	; 0x03
     62c:	c8 2a       	or	r12, r24
     62e:	d9 2a       	or	r13, r25
     630:	ea 2a       	or	r14, r26
     632:	fb 2a       	or	r15, r27
     634:	c8 82       	st	Y, r12
     636:	d9 82       	std	Y+1, r13	; 0x01
     638:	ea 82       	std	Y+2, r14	; 0x02
     63a:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     63c:	c1 2c       	mov	r12, r1
     63e:	d1 2c       	mov	r13, r1
     640:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     642:	3d c0       	rjmp	.+122    	; 0x6be <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     644:	a4 80       	ldd	r10, Z+4	; 0x04
     646:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	a2 81       	ldd	r26, Z+2	; 0x02
     64e:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     650:	ac 01       	movw	r20, r24
     652:	bd 01       	movw	r22, r26
     654:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     656:	b2 fd       	sbrc	r27, 2
     658:	0e c0       	rjmp	.+28     	; 0x676 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     65a:	48 80       	ld	r4, Y
     65c:	59 80       	ldd	r5, Y+1	; 0x01
     65e:	6a 80       	ldd	r6, Y+2	; 0x02
     660:	7b 80       	ldd	r7, Y+3	; 0x03
     662:	44 22       	and	r4, r20
     664:	55 22       	and	r5, r21
     666:	66 22       	and	r6, r22
     668:	77 22       	and	r7, r23
     66a:	45 28       	or	r4, r5
     66c:	46 28       	or	r4, r6
     66e:	47 28       	or	r4, r7
     670:	89 f4       	brne	.+34     	; 0x694 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	12 c0       	rjmp	.+36     	; 0x69a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     676:	48 80       	ld	r4, Y
     678:	59 80       	ldd	r5, Y+1	; 0x01
     67a:	6a 80       	ldd	r6, Y+2	; 0x02
     67c:	7b 80       	ldd	r7, Y+3	; 0x03
     67e:	44 22       	and	r4, r20
     680:	55 22       	and	r5, r21
     682:	66 22       	and	r6, r22
     684:	77 22       	and	r7, r23
     686:	44 15       	cp	r20, r4
     688:	55 05       	cpc	r21, r5
     68a:	66 05       	cpc	r22, r6
     68c:	77 05       	cpc	r23, r7
     68e:	21 f0       	breq	.+8      	; 0x698 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	03 c0       	rjmp	.+6      	; 0x69a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	01 c0       	rjmp	.+2      	; 0x69a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     698:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     69a:	22 23       	and	r18, r18
     69c:	71 f0       	breq	.+28     	; 0x6ba <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     69e:	b0 ff       	sbrs	r27, 0
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     6a2:	c4 2a       	or	r12, r20
     6a4:	d5 2a       	or	r13, r21
     6a6:	e6 2a       	or	r14, r22
     6a8:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     6aa:	48 81       	ld	r20, Y
     6ac:	59 81       	ldd	r21, Y+1	; 0x01
     6ae:	6a 81       	ldd	r22, Y+2	; 0x02
     6b0:	7b 81       	ldd	r23, Y+3	; 0x03
     6b2:	72 60       	ori	r23, 0x02	; 2
     6b4:	cf 01       	movw	r24, r30
     6b6:	0e 94 28 14 	call	0x2850	; 0x2850 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6ba:	ea 2d       	mov	r30, r10
     6bc:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6be:	e0 17       	cp	r30, r16
     6c0:	f1 07       	cpc	r31, r17
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <xEventGroupSetBits+0xd2>
     6c4:	bf cf       	rjmp	.-130    	; 0x644 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     6c6:	c0 94       	com	r12
     6c8:	d0 94       	com	r13
     6ca:	e0 94       	com	r14
     6cc:	f0 94       	com	r15
     6ce:	88 81       	ld	r24, Y
     6d0:	99 81       	ldd	r25, Y+1	; 0x01
     6d2:	aa 81       	ldd	r26, Y+2	; 0x02
     6d4:	bb 81       	ldd	r27, Y+3	; 0x03
     6d6:	c8 22       	and	r12, r24
     6d8:	d9 22       	and	r13, r25
     6da:	ea 22       	and	r14, r26
     6dc:	fb 22       	and	r15, r27
     6de:	c8 82       	st	Y, r12
     6e0:	d9 82       	std	Y+1, r13	; 0x01
     6e2:	ea 82       	std	Y+2, r14	; 0x02
     6e4:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6e6:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6ea:	68 81       	ld	r22, Y
     6ec:	79 81       	ldd	r23, Y+1	; 0x01
     6ee:	8a 81       	ldd	r24, Y+2	; 0x02
     6f0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	df 90       	pop	r13
     700:	cf 90       	pop	r12
     702:	bf 90       	pop	r11
     704:	af 90       	pop	r10
     706:	7f 90       	pop	r7
     708:	6f 90       	pop	r6
     70a:	5f 90       	pop	r5
     70c:	4f 90       	pop	r4
     70e:	08 95       	ret

00000710 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     710:	e0 e7       	ldi	r30, 0x70	; 112
     712:	f9 e0       	ldi	r31, 0x09	; 9
     714:	a4 e7       	ldi	r26, 0x74	; 116
     716:	b9 e0       	ldi	r27, 0x09	; 9
     718:	b1 83       	std	Z+1, r27	; 0x01
     71a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     71c:	13 82       	std	Z+3, r1	; 0x03
     71e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     720:	e0 ef       	ldi	r30, 0xF0	; 240
     722:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     724:	f0 93 6f 09 	sts	0x096F, r31	; 0x80096f <pxEnd+0x1>
     728:	e0 93 6e 09 	sts	0x096E, r30	; 0x80096e <pxEnd>
    pxEnd->xBlockSize = 0;
     72c:	13 82       	std	Z+3, r1	; 0x03
     72e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     730:	11 82       	std	Z+1, r1	; 0x01
     732:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     734:	8c e7       	ldi	r24, 0x7C	; 124
     736:	9c e0       	ldi	r25, 0x0C	; 12
     738:	13 96       	adiw	r26, 0x03	; 3
     73a:	9c 93       	st	X, r25
     73c:	8e 93       	st	-X, r24
     73e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     740:	ed 93       	st	X+, r30
     742:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     744:	90 93 6b 09 	sts	0x096B, r25	; 0x80096b <xMinimumEverFreeBytesRemaining+0x1>
     748:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     74c:	90 93 6d 09 	sts	0x096D, r25	; 0x80096d <xFreeBytesRemaining+0x1>
     750:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e8       	ldi	r25, 0x80	; 128
     758:	90 93 65 09 	sts	0x0965, r25	; 0x800965 <__data_end+0x1>
     75c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <__data_end>
     760:	08 95       	ret

00000762 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     768:	a0 e7       	ldi	r26, 0x70	; 112
     76a:	b9 e0       	ldi	r27, 0x09	; 9
     76c:	01 c0       	rjmp	.+2      	; 0x770 <prvInsertBlockIntoFreeList+0xe>
     76e:	df 01       	movw	r26, r30
     770:	ed 91       	ld	r30, X+
     772:	fc 91       	ld	r31, X
     774:	11 97       	sbiw	r26, 0x01	; 1
     776:	ec 17       	cp	r30, r28
     778:	fd 07       	cpc	r31, r29
     77a:	c8 f3       	brcs	.-14     	; 0x76e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     77c:	12 96       	adiw	r26, 0x02	; 2
     77e:	8d 91       	ld	r24, X+
     780:	9c 91       	ld	r25, X
     782:	13 97       	sbiw	r26, 0x03	; 3
     784:	9d 01       	movw	r18, r26
     786:	28 0f       	add	r18, r24
     788:	39 1f       	adc	r19, r25
     78a:	c2 17       	cp	r28, r18
     78c:	d3 07       	cpc	r29, r19
     78e:	49 f4       	brne	.+18     	; 0x7a2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     790:	2a 81       	ldd	r18, Y+2	; 0x02
     792:	3b 81       	ldd	r19, Y+3	; 0x03
     794:	82 0f       	add	r24, r18
     796:	93 1f       	adc	r25, r19
     798:	13 96       	adiw	r26, 0x03	; 3
     79a:	9c 93       	st	X, r25
     79c:	8e 93       	st	-X, r24
     79e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     7a0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     7a2:	8a 81       	ldd	r24, Y+2	; 0x02
     7a4:	9b 81       	ldd	r25, Y+3	; 0x03
     7a6:	9e 01       	movw	r18, r28
     7a8:	28 0f       	add	r18, r24
     7aa:	39 1f       	adc	r19, r25
     7ac:	e2 17       	cp	r30, r18
     7ae:	f3 07       	cpc	r31, r19
     7b0:	c1 f4       	brne	.+48     	; 0x7e2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     7b2:	20 91 6e 09 	lds	r18, 0x096E	; 0x80096e <pxEnd>
     7b6:	30 91 6f 09 	lds	r19, 0x096F	; 0x80096f <pxEnd+0x1>
     7ba:	e2 17       	cp	r30, r18
     7bc:	f3 07       	cpc	r31, r19
     7be:	71 f0       	breq	.+28     	; 0x7dc <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7c0:	22 81       	ldd	r18, Z+2	; 0x02
     7c2:	33 81       	ldd	r19, Z+3	; 0x03
     7c4:	82 0f       	add	r24, r18
     7c6:	93 1f       	adc	r25, r19
     7c8:	9b 83       	std	Y+3, r25	; 0x03
     7ca:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	11 97       	sbiw	r26, 0x01	; 1
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	99 83       	std	Y+1, r25	; 0x01
     7d8:	88 83       	st	Y, r24
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7dc:	39 83       	std	Y+1, r19	; 0x01
     7de:	28 83       	st	Y, r18
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7e2:	f9 83       	std	Y+1, r31	; 0x01
     7e4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7e6:	ca 17       	cp	r28, r26
     7e8:	db 07       	cpc	r29, r27
     7ea:	11 f0       	breq	.+4      	; 0x7f0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7ec:	cd 93       	st	X+, r28
     7ee:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     804:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     808:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <pxEnd>
     80c:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <pxEnd+0x1>
     810:	89 2b       	or	r24, r25
     812:	09 f4       	brne	.+2      	; 0x816 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     814:	7d df       	rcall	.-262    	; 0x710 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     816:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <__data_end>
     81a:	90 91 65 09 	lds	r25, 0x0965	; 0x800965 <__data_end+0x1>
     81e:	80 23       	and	r24, r16
     820:	91 23       	and	r25, r17
     822:	89 2b       	or	r24, r25
     824:	09 f0       	breq	.+2      	; 0x828 <pvPortMalloc+0x32>
     826:	76 c0       	rjmp	.+236    	; 0x914 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     828:	01 15       	cp	r16, r1
     82a:	11 05       	cpc	r17, r1
     82c:	49 f0       	breq	.+18     	; 0x840 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     82e:	c8 01       	movw	r24, r16
     830:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     832:	08 17       	cp	r16, r24
     834:	19 07       	cpc	r17, r25
     836:	18 f0       	brcs	.+6      	; 0x83e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     838:	00 e0       	ldi	r16, 0x00	; 0
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	01 c0       	rjmp	.+2      	; 0x840 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     83e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     840:	01 15       	cp	r16, r1
     842:	11 05       	cpc	r17, r1
     844:	09 f4       	brne	.+2      	; 0x848 <pvPortMalloc+0x52>
     846:	69 c0       	rjmp	.+210    	; 0x91a <pvPortMalloc+0x124>
     848:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <xFreeBytesRemaining>
     84c:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <xFreeBytesRemaining+0x1>
     850:	80 17       	cp	r24, r16
     852:	91 07       	cpc	r25, r17
     854:	08 f4       	brcc	.+2      	; 0x858 <pvPortMalloc+0x62>
     856:	64 c0       	rjmp	.+200    	; 0x920 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     858:	c0 91 70 09 	lds	r28, 0x0970	; 0x800970 <xStart>
     85c:	d0 91 71 09 	lds	r29, 0x0971	; 0x800971 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     860:	e0 e7       	ldi	r30, 0x70	; 112
     862:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     864:	02 c0       	rjmp	.+4      	; 0x86a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     866:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     868:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	9b 81       	ldd	r25, Y+3	; 0x03
     86e:	80 17       	cp	r24, r16
     870:	91 07       	cpc	r25, r17
     872:	20 f4       	brcc	.+8      	; 0x87c <pvPortMalloc+0x86>
     874:	88 81       	ld	r24, Y
     876:	99 81       	ldd	r25, Y+1	; 0x01
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a9 f7       	brne	.-22     	; 0x866 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     87c:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <pxEnd>
     880:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <pxEnd+0x1>
     884:	c8 17       	cp	r28, r24
     886:	d9 07       	cpc	r29, r25
     888:	09 f4       	brne	.+2      	; 0x88c <pvPortMalloc+0x96>
     88a:	4d c0       	rjmp	.+154    	; 0x926 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     88c:	e0 80       	ld	r14, Z
     88e:	f1 80       	ldd	r15, Z+1	; 0x01
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	e8 0e       	add	r14, r24
     894:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     896:	88 81       	ld	r24, Y
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     89e:	2a 81       	ldd	r18, Y+2	; 0x02
     8a0:	3b 81       	ldd	r19, Y+3	; 0x03
     8a2:	20 1b       	sub	r18, r16
     8a4:	31 0b       	sbc	r19, r17
     8a6:	29 30       	cpi	r18, 0x09	; 9
     8a8:	31 05       	cpc	r19, r1
     8aa:	48 f0       	brcs	.+18     	; 0x8be <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8ac:	ce 01       	movw	r24, r28
     8ae:	80 0f       	add	r24, r16
     8b0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8b2:	fc 01       	movw	r30, r24
     8b4:	33 83       	std	Z+3, r19	; 0x03
     8b6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     8b8:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     8ba:	0a 83       	std	Y+2, r16	; 0x02
     8bc:	52 df       	rcall	.-348    	; 0x762 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     8be:	2a 81       	ldd	r18, Y+2	; 0x02
     8c0:	3b 81       	ldd	r19, Y+3	; 0x03
     8c2:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <xFreeBytesRemaining>
     8c6:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <xFreeBytesRemaining+0x1>
     8ca:	82 1b       	sub	r24, r18
     8cc:	93 0b       	sbc	r25, r19
     8ce:	90 93 6d 09 	sts	0x096D, r25	; 0x80096d <xFreeBytesRemaining+0x1>
     8d2:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     8d6:	40 91 6a 09 	lds	r20, 0x096A	; 0x80096a <xMinimumEverFreeBytesRemaining>
     8da:	50 91 6b 09 	lds	r21, 0x096B	; 0x80096b <xMinimumEverFreeBytesRemaining+0x1>
     8de:	84 17       	cp	r24, r20
     8e0:	95 07       	cpc	r25, r21
     8e2:	20 f4       	brcc	.+8      	; 0x8ec <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8e4:	90 93 6b 09 	sts	0x096B, r25	; 0x80096b <xMinimumEverFreeBytesRemaining+0x1>
     8e8:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8ec:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <__data_end>
     8f0:	90 91 65 09 	lds	r25, 0x0965	; 0x800965 <__data_end+0x1>
     8f4:	28 2b       	or	r18, r24
     8f6:	39 2b       	or	r19, r25
     8f8:	3b 83       	std	Y+3, r19	; 0x03
     8fa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     8fc:	19 82       	std	Y+1, r1	; 0x01
     8fe:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     900:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <xNumberOfSuccessfulAllocations>
     904:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <xNumberOfSuccessfulAllocations+0x1>
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <xNumberOfSuccessfulAllocations+0x1>
     90e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <xNumberOfSuccessfulAllocations>
     912:	0b c0       	rjmp	.+22     	; 0x92a <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     914:	e1 2c       	mov	r14, r1
     916:	f1 2c       	mov	r15, r1
     918:	08 c0       	rjmp	.+16     	; 0x92a <pvPortMalloc+0x134>
     91a:	e1 2c       	mov	r14, r1
     91c:	f1 2c       	mov	r15, r1
     91e:	05 c0       	rjmp	.+10     	; 0x92a <pvPortMalloc+0x134>
     920:	e1 2c       	mov	r14, r1
     922:	f1 2c       	mov	r15, r1
     924:	02 c0       	rjmp	.+4      	; 0x92a <pvPortMalloc+0x134>
     926:	e1 2c       	mov	r14, r1
     928:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     92a:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     92e:	e1 14       	cp	r14, r1
     930:	f1 04       	cpc	r15, r1
     932:	11 f4       	brne	.+4      	; 0x938 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     934:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     938:	c7 01       	movw	r24, r14
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	08 95       	ret

00000948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     950:	00 97       	sbiw	r24, 0x00	; 0
     952:	91 f1       	breq	.+100    	; 0x9b8 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     954:	ec 01       	movw	r28, r24
     956:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     958:	4a 81       	ldd	r20, Y+2	; 0x02
     95a:	5b 81       	ldd	r21, Y+3	; 0x03
     95c:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <__data_end>
     960:	30 91 65 09 	lds	r19, 0x0965	; 0x800965 <__data_end+0x1>
     964:	ba 01       	movw	r22, r20
     966:	62 23       	and	r22, r18
     968:	73 23       	and	r23, r19
     96a:	67 2b       	or	r22, r23
     96c:	29 f1       	breq	.+74     	; 0x9b8 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     96e:	68 81       	ld	r22, Y
     970:	79 81       	ldd	r23, Y+1	; 0x01
     972:	67 2b       	or	r22, r23
     974:	09 f5       	brne	.+66     	; 0x9b8 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     976:	20 95       	com	r18
     978:	30 95       	com	r19
     97a:	24 23       	and	r18, r20
     97c:	35 23       	and	r19, r21
     97e:	3b 83       	std	Y+3, r19	; 0x03
     980:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     982:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	9b 81       	ldd	r25, Y+3	; 0x03
     98a:	20 91 6c 09 	lds	r18, 0x096C	; 0x80096c <xFreeBytesRemaining>
     98e:	30 91 6d 09 	lds	r19, 0x096D	; 0x80096d <xFreeBytesRemaining+0x1>
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	90 93 6d 09 	sts	0x096D, r25	; 0x80096d <xFreeBytesRemaining+0x1>
     99a:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     99e:	ce 01       	movw	r24, r28
     9a0:	e0 de       	rcall	.-576    	; 0x762 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     9a2:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <xNumberOfSuccessfulFrees>
     9a6:	90 91 67 09 	lds	r25, 0x0967	; 0x800967 <xNumberOfSuccessfulFrees+0x1>
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <xNumberOfSuccessfulFrees+0x1>
     9b0:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     9b4:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	08 95       	ret

000009c2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9c2:	fc 01       	movw	r30, r24
     9c4:	03 96       	adiw	r24, 0x03	; 3
     9c6:	92 83       	std	Z+2, r25	; 0x02
     9c8:	81 83       	std	Z+1, r24	; 0x01
     9ca:	4f ef       	ldi	r20, 0xFF	; 255
     9cc:	5f ef       	ldi	r21, 0xFF	; 255
     9ce:	ba 01       	movw	r22, r20
     9d0:	43 83       	std	Z+3, r20	; 0x03
     9d2:	54 83       	std	Z+4, r21	; 0x04
     9d4:	65 83       	std	Z+5, r22	; 0x05
     9d6:	76 83       	std	Z+6, r23	; 0x06
     9d8:	90 87       	std	Z+8, r25	; 0x08
     9da:	87 83       	std	Z+7, r24	; 0x07
     9dc:	92 87       	std	Z+10, r25	; 0x0a
     9de:	81 87       	std	Z+9, r24	; 0x09
     9e0:	10 82       	st	Z, r1
     9e2:	08 95       	ret

000009e4 <vListInitialiseItem>:
     9e4:	fc 01       	movw	r30, r24
     9e6:	13 86       	std	Z+11, r1	; 0x0b
     9e8:	12 86       	std	Z+10, r1	; 0x0a
     9ea:	08 95       	ret

000009ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9f6:	08 81       	ld	r16, Y
     9f8:	19 81       	ldd	r17, Y+1	; 0x01
     9fa:	2a 81       	ldd	r18, Y+2	; 0x02
     9fc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9fe:	0f 3f       	cpi	r16, 0xFF	; 255
     a00:	4f ef       	ldi	r20, 0xFF	; 255
     a02:	14 07       	cpc	r17, r20
     a04:	24 07       	cpc	r18, r20
     a06:	34 07       	cpc	r19, r20
     a08:	21 f4       	brne	.+8      	; 0xa12 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a0a:	fc 01       	movw	r30, r24
     a0c:	a1 85       	ldd	r26, Z+9	; 0x09
     a0e:	b2 85       	ldd	r27, Z+10	; 0x0a
     a10:	11 c0       	rjmp	.+34     	; 0xa34 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a12:	dc 01       	movw	r26, r24
     a14:	13 96       	adiw	r26, 0x03	; 3
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <vListInsert+0x2e>
     a18:	df 01       	movw	r26, r30
     a1a:	14 96       	adiw	r26, 0x04	; 4
     a1c:	ed 91       	ld	r30, X+
     a1e:	fc 91       	ld	r31, X
     a20:	15 97       	sbiw	r26, 0x05	; 5
     a22:	40 81       	ld	r20, Z
     a24:	51 81       	ldd	r21, Z+1	; 0x01
     a26:	62 81       	ldd	r22, Z+2	; 0x02
     a28:	73 81       	ldd	r23, Z+3	; 0x03
     a2a:	04 17       	cp	r16, r20
     a2c:	15 07       	cpc	r17, r21
     a2e:	26 07       	cpc	r18, r22
     a30:	37 07       	cpc	r19, r23
     a32:	90 f7       	brcc	.-28     	; 0xa18 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	ed 91       	ld	r30, X+
     a38:	fc 91       	ld	r31, X
     a3a:	15 97       	sbiw	r26, 0x05	; 5
     a3c:	fd 83       	std	Y+5, r31	; 0x05
     a3e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a40:	d7 83       	std	Z+7, r29	; 0x07
     a42:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a44:	bf 83       	std	Y+7, r27	; 0x07
     a46:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a48:	15 96       	adiw	r26, 0x05	; 5
     a4a:	dc 93       	st	X, r29
     a4c:	ce 93       	st	-X, r28
     a4e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a50:	9b 87       	std	Y+11, r25	; 0x0b
     a52:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a54:	fc 01       	movw	r30, r24
     a56:	20 81       	ld	r18, Z
     a58:	2f 5f       	subi	r18, 0xFF	; 255
     a5a:	20 83       	st	Z, r18
}
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a6c:	a2 85       	ldd	r26, Z+10	; 0x0a
     a6e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a70:	c4 81       	ldd	r28, Z+4	; 0x04
     a72:	d5 81       	ldd	r29, Z+5	; 0x05
     a74:	86 81       	ldd	r24, Z+6	; 0x06
     a76:	97 81       	ldd	r25, Z+7	; 0x07
     a78:	9f 83       	std	Y+7, r25	; 0x07
     a7a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a7c:	c6 81       	ldd	r28, Z+6	; 0x06
     a7e:	d7 81       	ldd	r29, Z+7	; 0x07
     a80:	84 81       	ldd	r24, Z+4	; 0x04
     a82:	95 81       	ldd	r25, Z+5	; 0x05
     a84:	9d 83       	std	Y+5, r25	; 0x05
     a86:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	8d 91       	ld	r24, X+
     a8c:	9c 91       	ld	r25, X
     a8e:	12 97       	sbiw	r26, 0x02	; 2
     a90:	e8 17       	cp	r30, r24
     a92:	f9 07       	cpc	r31, r25
     a94:	31 f4       	brne	.+12     	; 0xaa2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a96:	86 81       	ldd	r24, Z+6	; 0x06
     a98:	97 81       	ldd	r25, Z+7	; 0x07
     a9a:	12 96       	adiw	r26, 0x02	; 2
     a9c:	9c 93       	st	X, r25
     a9e:	8e 93       	st	-X, r24
     aa0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     aa2:	13 86       	std	Z+11, r1	; 0x0b
     aa4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     aa6:	8c 91       	ld	r24, X
     aa8:	81 50       	subi	r24, 0x01	; 1
     aaa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     aac:	8c 91       	ld	r24, X
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     ab4:	a8 95       	wdr
     ab6:	90 ec       	ldi	r25, 0xC0	; 192
     ab8:	88 e1       	ldi	r24, 0x18	; 24
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	a8 95       	wdr
     ac0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     aca:	08 95       	ret

00000acc <pxPortInitialiseStack>:
     acc:	fc 01       	movw	r30, r24
     ace:	60 83       	st	Z, r22
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	70 83       	st	Z, r23
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	10 82       	st	Z, r1
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	10 82       	st	Z, r1
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	20 e8       	ldi	r18, 0x80	; 128
     ae0:	20 83       	st	Z, r18
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	10 82       	st	Z, r1
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	10 82       	st	Z, r1
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	10 82       	st	Z, r1
     aee:	77 97       	sbiw	r30, 0x17	; 23
     af0:	40 83       	st	Z, r20
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	50 83       	st	Z, r21
     af6:	86 97       	sbiw	r24, 0x26	; 38
     af8:	08 95       	ret

00000afa <xPortStartScheduler>:
     afa:	dc df       	rcall	.-72     	; 0xab4 <prvSetupTimerInterrupt>
     afc:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     b00:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     b04:	cd 91       	ld	r28, X+
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	dd 91       	ld	r29, X+
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	bf 91       	pop	r27
     b16:	af 91       	pop	r26
     b18:	9f 91       	pop	r25
     b1a:	8f 91       	pop	r24
     b1c:	7f 91       	pop	r23
     b1e:	6f 91       	pop	r22
     b20:	5f 91       	pop	r21
     b22:	4f 91       	pop	r20
     b24:	3f 91       	pop	r19
     b26:	2f 91       	pop	r18
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	bf 90       	pop	r11
     b36:	af 90       	pop	r10
     b38:	9f 90       	pop	r9
     b3a:	8f 90       	pop	r8
     b3c:	7f 90       	pop	r7
     b3e:	6f 90       	pop	r6
     b40:	5f 90       	pop	r5
     b42:	4f 90       	pop	r4
     b44:	3f 90       	pop	r3
     b46:	2f 90       	pop	r2
     b48:	1f 90       	pop	r1
     b4a:	0f 90       	pop	r0
     b4c:	0c be       	out	0x3c, r0	; 60
     b4e:	0f 90       	pop	r0
     b50:	0b be       	out	0x3b, r0	; 59
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	08 95       	ret
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	08 95       	ret

00000b5e <vPortYield>:
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	0f 92       	push	r0
     b66:	0b b6       	in	r0, 0x3b	; 59
     b68:	0f 92       	push	r0
     b6a:	0c b6       	in	r0, 0x3c	; 60
     b6c:	0f 92       	push	r0
     b6e:	1f 92       	push	r1
     b70:	11 24       	eor	r1, r1
     b72:	2f 92       	push	r2
     b74:	3f 92       	push	r3
     b76:	4f 92       	push	r4
     b78:	5f 92       	push	r5
     b7a:	6f 92       	push	r6
     b7c:	7f 92       	push	r7
     b7e:	8f 92       	push	r8
     b80:	9f 92       	push	r9
     b82:	af 92       	push	r10
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ef 93       	push	r30
     bac:	ff 93       	push	r31
     bae:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     bb2:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     bb6:	0d b6       	in	r0, 0x3d	; 61
     bb8:	0d 92       	st	X+, r0
     bba:	0e b6       	in	r0, 0x3e	; 62
     bbc:	0d 92       	st	X+, r0
     bbe:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskSwitchContext>
     bc2:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     bc6:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     bca:	cd 91       	ld	r28, X+
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	dd 91       	ld	r29, X+
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	bf 91       	pop	r27
     bdc:	af 91       	pop	r26
     bde:	9f 91       	pop	r25
     be0:	8f 91       	pop	r24
     be2:	7f 91       	pop	r23
     be4:	6f 91       	pop	r22
     be6:	5f 91       	pop	r21
     be8:	4f 91       	pop	r20
     bea:	3f 91       	pop	r19
     bec:	2f 91       	pop	r18
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	3f 90       	pop	r3
     c0c:	2f 90       	pop	r2
     c0e:	1f 90       	pop	r1
     c10:	0f 90       	pop	r0
     c12:	0c be       	out	0x3c, r0	; 60
     c14:	0f 90       	pop	r0
     c16:	0b be       	out	0x3b, r0	; 59
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0
     c1e:	08 95       	ret

00000c20 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	0f 92       	push	r0
     c28:	0b b6       	in	r0, 0x3b	; 59
     c2a:	0f 92       	push	r0
     c2c:	0c b6       	in	r0, 0x3c	; 60
     c2e:	0f 92       	push	r0
     c30:	1f 92       	push	r1
     c32:	11 24       	eor	r1, r1
     c34:	2f 92       	push	r2
     c36:	3f 92       	push	r3
     c38:	4f 92       	push	r4
     c3a:	5f 92       	push	r5
     c3c:	6f 92       	push	r6
     c3e:	7f 92       	push	r7
     c40:	8f 92       	push	r8
     c42:	9f 92       	push	r9
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	2f 93       	push	r18
     c56:	3f 93       	push	r19
     c58:	4f 93       	push	r20
     c5a:	5f 93       	push	r21
     c5c:	6f 93       	push	r22
     c5e:	7f 93       	push	r23
     c60:	8f 93       	push	r24
     c62:	9f 93       	push	r25
     c64:	af 93       	push	r26
     c66:	bf 93       	push	r27
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
     c70:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     c74:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     c78:	0d b6       	in	r0, 0x3d	; 61
     c7a:	0d 92       	st	X+, r0
     c7c:	0e b6       	in	r0, 0x3e	; 62
     c7e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c80:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c82:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <xTaskIncrementTick>
     c86:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c88:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c8c:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     c90:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     c94:	cd 91       	ld	r28, X+
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	dd 91       	ld	r29, X+
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	7f 90       	pop	r7
     cce:	6f 90       	pop	r6
     cd0:	5f 90       	pop	r5
     cd2:	4f 90       	pop	r4
     cd4:	3f 90       	pop	r3
     cd6:	2f 90       	pop	r2
     cd8:	1f 90       	pop	r1
     cda:	0f 90       	pop	r0
     cdc:	0c be       	out	0x3c, r0	; 60
     cde:	0f 90       	pop	r0
     ce0:	0b be       	out	0x3b, r0	; 59
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ce8:	08 95       	ret

00000cea <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cea:	9a df       	rcall	.-204    	; 0xc20 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cec:	18 95       	reti

00000cee <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cee:	dc 01       	movw	r26, r24
     cf0:	53 96       	adiw	r26, 0x13	; 19
     cf2:	2c 91       	ld	r18, X
     cf4:	53 97       	sbiw	r26, 0x13	; 19
     cf6:	22 23       	and	r18, r18
     cf8:	41 f0       	breq	.+16     	; 0xd0a <prvGetDisinheritPriorityAfterTimeout+0x1c>
     cfa:	5a 96       	adiw	r26, 0x1a	; 26
     cfc:	ed 91       	ld	r30, X+
     cfe:	fc 91       	ld	r31, X
     d00:	5b 97       	sbiw	r26, 0x1b	; 27
     d02:	90 81       	ld	r25, Z
     d04:	8a e0       	ldi	r24, 0x0A	; 10
     d06:	89 1b       	sub	r24, r25
     d08:	08 95       	ret
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	08 95       	ret

00000d0e <prvIsQueueEmpty>:
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	0f 92       	push	r0
     d14:	fc 01       	movw	r30, r24
     d16:	86 8d       	ldd	r24, Z+30	; 0x1e
     d18:	81 11       	cpse	r24, r1
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <prvIsQueueEmpty+0x12>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <prvIsQueueEmpty+0x14>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	08 95       	ret

00000d28 <prvIsQueueFull>:
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	0f 92       	push	r0
     d2e:	fc 01       	movw	r30, r24
     d30:	26 8d       	ldd	r18, Z+30	; 0x1e
     d32:	87 8d       	ldd	r24, Z+31	; 0x1f
     d34:	28 13       	cpse	r18, r24
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <prvIsQueueFull+0x14>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <prvIsQueueFull+0x16>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	08 95       	ret

00000d44 <prvCopyDataToQueue>:
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	ec 01       	movw	r28, r24
     d4e:	04 2f       	mov	r16, r20
     d50:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d52:	48 a1       	ldd	r20, Y+32	; 0x20
     d54:	41 11       	cpse	r20, r1
     d56:	0c c0       	rjmp	.+24     	; 0xd70 <prvCopyDataToQueue+0x2c>
     d58:	88 81       	ld	r24, Y
     d5a:	99 81       	ldd	r25, Y+1	; 0x01
     d5c:	89 2b       	or	r24, r25
     d5e:	09 f0       	breq	.+2      	; 0xd62 <prvCopyDataToQueue+0x1e>
     d60:	42 c0       	rjmp	.+132    	; 0xde6 <prvCopyDataToQueue+0xa2>
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	9d 81       	ldd	r25, Y+5	; 0x05
     d66:	0e 94 ed 15 	call	0x2bda	; 0x2bda <xTaskPriorityDisinherit>
     d6a:	1d 82       	std	Y+5, r1	; 0x05
     d6c:	1c 82       	std	Y+4, r1	; 0x04
     d6e:	42 c0       	rjmp	.+132    	; 0xdf4 <prvCopyDataToQueue+0xb0>
     d70:	01 11       	cpse	r16, r1
     d72:	17 c0       	rjmp	.+46     	; 0xda2 <prvCopyDataToQueue+0x5e>
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	9b 81       	ldd	r25, Y+3	; 0x03
     d7a:	0e 94 5f 30 	call	0x60be	; 0x60be <memcpy>
     d7e:	28 a1       	ldd	r18, Y+32	; 0x20
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	9b 81       	ldd	r25, Y+3	; 0x03
     d84:	82 0f       	add	r24, r18
     d86:	91 1d       	adc	r25, r1
     d88:	9b 83       	std	Y+3, r25	; 0x03
     d8a:	8a 83       	std	Y+2, r24	; 0x02
     d8c:	2c 81       	ldd	r18, Y+4	; 0x04
     d8e:	3d 81       	ldd	r19, Y+5	; 0x05
     d90:	82 17       	cp	r24, r18
     d92:	93 07       	cpc	r25, r19
     d94:	50 f1       	brcs	.+84     	; 0xdea <prvCopyDataToQueue+0xa6>
     d96:	88 81       	ld	r24, Y
     d98:	99 81       	ldd	r25, Y+1	; 0x01
     d9a:	9b 83       	std	Y+3, r25	; 0x03
     d9c:	8a 83       	std	Y+2, r24	; 0x02
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	29 c0       	rjmp	.+82     	; 0xdf4 <prvCopyDataToQueue+0xb0>
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	8e 81       	ldd	r24, Y+6	; 0x06
     da6:	9f 81       	ldd	r25, Y+7	; 0x07
     da8:	0e 94 5f 30 	call	0x60be	; 0x60be <memcpy>
     dac:	88 a1       	ldd	r24, Y+32	; 0x20
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	91 95       	neg	r25
     db2:	81 95       	neg	r24
     db4:	91 09       	sbc	r25, r1
     db6:	2e 81       	ldd	r18, Y+6	; 0x06
     db8:	3f 81       	ldd	r19, Y+7	; 0x07
     dba:	28 0f       	add	r18, r24
     dbc:	39 1f       	adc	r19, r25
     dbe:	3f 83       	std	Y+7, r19	; 0x07
     dc0:	2e 83       	std	Y+6, r18	; 0x06
     dc2:	48 81       	ld	r20, Y
     dc4:	59 81       	ldd	r21, Y+1	; 0x01
     dc6:	24 17       	cp	r18, r20
     dc8:	35 07       	cpc	r19, r21
     dca:	30 f4       	brcc	.+12     	; 0xdd8 <prvCopyDataToQueue+0x94>
     dcc:	2c 81       	ldd	r18, Y+4	; 0x04
     dce:	3d 81       	ldd	r19, Y+5	; 0x05
     dd0:	82 0f       	add	r24, r18
     dd2:	93 1f       	adc	r25, r19
     dd4:	9f 83       	std	Y+7, r25	; 0x07
     dd6:	8e 83       	std	Y+6, r24	; 0x06
     dd8:	02 30       	cpi	r16, 0x02	; 2
     dda:	49 f4       	brne	.+18     	; 0xdee <prvCopyDataToQueue+0xaa>
     ddc:	11 23       	and	r17, r17
     dde:	49 f0       	breq	.+18     	; 0xdf2 <prvCopyDataToQueue+0xae>
     de0:	11 50       	subi	r17, 0x01	; 1
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <prvCopyDataToQueue+0xb0>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <prvCopyDataToQueue+0xb0>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <prvCopyDataToQueue+0xb0>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <prvCopyDataToQueue+0xb0>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	1f 5f       	subi	r17, 0xFF	; 255
     df6:	1e 8f       	std	Y+30, r17	; 0x1e
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <prvCopyDataFromQueue>:
     e02:	fc 01       	movw	r30, r24
     e04:	40 a1       	ldd	r20, Z+32	; 0x20
     e06:	44 23       	and	r20, r20
     e08:	a9 f0       	breq	.+42     	; 0xe34 <prvCopyDataFromQueue+0x32>
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	26 81       	ldd	r18, Z+6	; 0x06
     e0e:	37 81       	ldd	r19, Z+7	; 0x07
     e10:	24 0f       	add	r18, r20
     e12:	35 1f       	adc	r19, r21
     e14:	37 83       	std	Z+7, r19	; 0x07
     e16:	26 83       	std	Z+6, r18	; 0x06
     e18:	84 81       	ldd	r24, Z+4	; 0x04
     e1a:	95 81       	ldd	r25, Z+5	; 0x05
     e1c:	28 17       	cp	r18, r24
     e1e:	39 07       	cpc	r19, r25
     e20:	20 f0       	brcs	.+8      	; 0xe2a <prvCopyDataFromQueue+0x28>
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	97 83       	std	Z+7, r25	; 0x07
     e28:	86 83       	std	Z+6, r24	; 0x06
     e2a:	cb 01       	movw	r24, r22
     e2c:	66 81       	ldd	r22, Z+6	; 0x06
     e2e:	77 81       	ldd	r23, Z+7	; 0x07
     e30:	0c 94 5f 30 	jmp	0x60be	; 0x60be <memcpy>
     e34:	08 95       	ret

00000e36 <prvUnlockQueue>:
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	ec 01       	movw	r28, r24
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	0f 92       	push	r0
     e44:	1a a1       	ldd	r17, Y+34	; 0x22
     e46:	0b c0       	rjmp	.+22     	; 0xe5e <prvUnlockQueue+0x28>
     e48:	8b 89       	ldd	r24, Y+19	; 0x13
     e4a:	88 23       	and	r24, r24
     e4c:	51 f0       	breq	.+20     	; 0xe62 <prvUnlockQueue+0x2c>
     e4e:	ce 01       	movw	r24, r28
     e50:	43 96       	adiw	r24, 0x13	; 19
     e52:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskRemoveFromEventList>
     e56:	81 11       	cpse	r24, r1
     e58:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <vTaskMissedYield>
     e5c:	11 50       	subi	r17, 0x01	; 1
     e5e:	11 16       	cp	r1, r17
     e60:	9c f3       	brlt	.-26     	; 0xe48 <prvUnlockQueue+0x12>
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	8a a3       	std	Y+34, r24	; 0x22
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	0f 92       	push	r0
     e70:	19 a1       	ldd	r17, Y+33	; 0x21
     e72:	0b c0       	rjmp	.+22     	; 0xe8a <prvUnlockQueue+0x54>
     e74:	88 85       	ldd	r24, Y+8	; 0x08
     e76:	88 23       	and	r24, r24
     e78:	51 f0       	breq	.+20     	; 0xe8e <prvUnlockQueue+0x58>
     e7a:	ce 01       	movw	r24, r28
     e7c:	08 96       	adiw	r24, 0x08	; 8
     e7e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskRemoveFromEventList>
     e82:	81 11       	cpse	r24, r1
     e84:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <vTaskMissedYield>
     e88:	11 50       	subi	r17, 0x01	; 1
     e8a:	11 16       	cp	r1, r17
     e8c:	9c f3       	brlt	.-26     	; 0xe74 <prvUnlockQueue+0x3e>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	89 a3       	std	Y+33, r24	; 0x21
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	08 95       	ret

00000e9e <xQueueGenericReset>:
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	ec 01       	movw	r28, r24
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	0f 92       	push	r0
     eaa:	e8 81       	ld	r30, Y
     eac:	f9 81       	ldd	r31, Y+1	; 0x01
     eae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eb0:	28 a1       	ldd	r18, Y+32	; 0x20
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	82 9f       	mul	r24, r18
     eb8:	a0 01       	movw	r20, r0
     eba:	83 9f       	mul	r24, r19
     ebc:	50 0d       	add	r21, r0
     ebe:	92 9f       	mul	r25, r18
     ec0:	50 0d       	add	r21, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	4e 0f       	add	r20, r30
     ec6:	5f 1f       	adc	r21, r31
     ec8:	5d 83       	std	Y+5, r21	; 0x05
     eca:	4c 83       	std	Y+4, r20	; 0x04
     ecc:	1e 8e       	std	Y+30, r1	; 0x1e
     ece:	fb 83       	std	Y+3, r31	; 0x03
     ed0:	ea 83       	std	Y+2, r30	; 0x02
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	28 9f       	mul	r18, r24
     ed6:	a0 01       	movw	r20, r0
     ed8:	29 9f       	mul	r18, r25
     eda:	50 0d       	add	r21, r0
     edc:	38 9f       	mul	r19, r24
     ede:	50 0d       	add	r21, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	cf 01       	movw	r24, r30
     ee4:	84 0f       	add	r24, r20
     ee6:	95 1f       	adc	r25, r21
     ee8:	9f 83       	std	Y+7, r25	; 0x07
     eea:	8e 83       	std	Y+6, r24	; 0x06
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	89 a3       	std	Y+33, r24	; 0x21
     ef0:	8a a3       	std	Y+34, r24	; 0x22
     ef2:	61 11       	cpse	r22, r1
     ef4:	0b c0       	rjmp	.+22     	; 0xf0c <xQueueGenericReset+0x6e>
     ef6:	88 85       	ldd	r24, Y+8	; 0x08
     ef8:	88 23       	and	r24, r24
     efa:	71 f0       	breq	.+28     	; 0xf18 <xQueueGenericReset+0x7a>
     efc:	ce 01       	movw	r24, r28
     efe:	08 96       	adiw	r24, 0x08	; 8
     f00:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskRemoveFromEventList>
     f04:	88 23       	and	r24, r24
     f06:	41 f0       	breq	.+16     	; 0xf18 <xQueueGenericReset+0x7a>
     f08:	2a de       	rcall	.-940    	; 0xb5e <vPortYield>
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <xQueueGenericReset+0x7a>
     f0c:	ce 01       	movw	r24, r28
     f0e:	08 96       	adiw	r24, 0x08	; 8
     f10:	58 dd       	rcall	.-1360   	; 0x9c2 <vListInitialise>
     f12:	ce 01       	movw	r24, r28
     f14:	43 96       	adiw	r24, 0x13	; 19
     f16:	55 dd       	rcall	.-1366   	; 0x9c2 <vListInitialise>
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <prvInitialiseNewQueue>:
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	f8 01       	movw	r30, r16
     f2a:	61 11       	cpse	r22, r1
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <prvInitialiseNewQueue+0x10>
     f2e:	11 83       	std	Z+1, r17	; 0x01
     f30:	00 83       	st	Z, r16
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <prvInitialiseNewQueue+0x14>
     f34:	51 83       	std	Z+1, r21	; 0x01
     f36:	40 83       	st	Z, r20
     f38:	87 8f       	std	Z+31, r24	; 0x1f
     f3a:	60 a3       	std	Z+32, r22	; 0x20
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	cf 01       	movw	r24, r30
     f40:	ae df       	rcall	.-164    	; 0xe9e <xQueueGenericReset>
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <xQueueGenericCreate>:
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	f8 2e       	mov	r15, r24
     f58:	e6 2e       	mov	r14, r22
     f5a:	d4 2e       	mov	r13, r20
     f5c:	86 9f       	mul	r24, r22
     f5e:	c0 01       	movw	r24, r0
     f60:	11 24       	eor	r1, r1
     f62:	83 96       	adiw	r24, 0x23	; 35
     f64:	48 dc       	rcall	.-1904   	; 0x7f6 <pvPortMalloc>
     f66:	ec 01       	movw	r28, r24
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	41 f0       	breq	.+16     	; 0xf7c <xQueueGenericCreate+0x34>
     f6c:	8c 01       	movw	r16, r24
     f6e:	2d 2d       	mov	r18, r13
     f70:	ac 01       	movw	r20, r24
     f72:	4d 5d       	subi	r20, 0xDD	; 221
     f74:	5f 4f       	sbci	r21, 0xFF	; 255
     f76:	6e 2d       	mov	r22, r14
     f78:	8f 2d       	mov	r24, r15
     f7a:	d4 df       	rcall	.-88     	; 0xf24 <prvInitialiseNewQueue>
     f7c:	ce 01       	movw	r24, r28
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	08 95       	ret

00000f8e <xQueueGenericSend>:
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	29 97       	sbiw	r28, 0x09	; 9
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	7c 01       	movw	r14, r24
     fb0:	6b 01       	movw	r12, r22
     fb2:	2e 83       	std	Y+6, r18	; 0x06
     fb4:	3f 83       	std	Y+7, r19	; 0x07
     fb6:	48 87       	std	Y+8, r20	; 0x08
     fb8:	59 87       	std	Y+9, r21	; 0x09
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	0f 92       	push	r0
     fc2:	f7 01       	movw	r30, r14
     fc4:	96 8d       	ldd	r25, Z+30	; 0x1e
     fc6:	87 8d       	ldd	r24, Z+31	; 0x1f
     fc8:	98 17       	cp	r25, r24
     fca:	10 f0       	brcs	.+4      	; 0xfd0 <xQueueGenericSend+0x42>
     fcc:	02 30       	cpi	r16, 0x02	; 2
     fce:	b1 f4       	brne	.+44     	; 0xffc <xQueueGenericSend+0x6e>
     fd0:	40 2f       	mov	r20, r16
     fd2:	b6 01       	movw	r22, r12
     fd4:	c7 01       	movw	r24, r14
     fd6:	b6 de       	rcall	.-660    	; 0xd44 <prvCopyDataToQueue>
     fd8:	f7 01       	movw	r30, r14
     fda:	93 89       	ldd	r25, Z+19	; 0x13
     fdc:	99 23       	and	r25, r25
     fde:	41 f0       	breq	.+16     	; 0xff0 <xQueueGenericSend+0x62>
     fe0:	c7 01       	movw	r24, r14
     fe2:	43 96       	adiw	r24, 0x13	; 19
     fe4:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskRemoveFromEventList>
     fe8:	88 23       	and	r24, r24
     fea:	21 f0       	breq	.+8      	; 0xff4 <xQueueGenericSend+0x66>
     fec:	b8 dd       	rcall	.-1168   	; 0xb5e <vPortYield>
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <xQueueGenericSend+0x66>
     ff0:	81 11       	cpse	r24, r1
     ff2:	b5 dd       	rcall	.-1174   	; 0xb5e <vPortYield>
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	4c c0       	rjmp	.+152    	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
     ffc:	8e 81       	ldd	r24, Y+6	; 0x06
     ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    1000:	a8 85       	ldd	r26, Y+8	; 0x08
    1002:	b9 85       	ldd	r27, Y+9	; 0x09
    1004:	89 2b       	or	r24, r25
    1006:	8a 2b       	or	r24, r26
    1008:	8b 2b       	or	r24, r27
    100a:	21 f4       	brne	.+8      	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	40 c0       	rjmp	.+128    	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    1014:	11 11       	cpse	r17, r1
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    1018:	ce 01       	movw	r24, r28
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <vTaskInternalSetTimeOutState>
    1020:	11 e0       	ldi	r17, 0x01	; 1
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	c1 d7       	rcall	.+3970   	; 0x1faa <vTaskSuspendAll>
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	0f 92       	push	r0
    102e:	f7 01       	movw	r30, r14
    1030:	81 a1       	ldd	r24, Z+33	; 0x21
    1032:	8f 3f       	cpi	r24, 0xFF	; 255
    1034:	09 f4       	brne	.+2      	; 0x1038 <__EEPROM_REGION_LENGTH__+0x38>
    1036:	11 a2       	std	Z+33, r1	; 0x21
    1038:	f7 01       	movw	r30, r14
    103a:	82 a1       	ldd	r24, Z+34	; 0x22
    103c:	8f 3f       	cpi	r24, 0xFF	; 255
    103e:	09 f4       	brne	.+2      	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    1040:	12 a2       	std	Z+34, r1	; 0x22
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	be 01       	movw	r22, r28
    1048:	6a 5f       	subi	r22, 0xFA	; 250
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <xTaskCheckForTimeOut>
    1054:	81 11       	cpse	r24, r1
    1056:	19 c0       	rjmp	.+50     	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    1058:	c7 01       	movw	r24, r14
    105a:	66 de       	rcall	.-820    	; 0xd28 <prvIsQueueFull>
    105c:	88 23       	and	r24, r24
    105e:	81 f0       	breq	.+32     	; 0x1080 <__EEPROM_REGION_LENGTH__+0x80>
    1060:	4e 81       	ldd	r20, Y+6	; 0x06
    1062:	5f 81       	ldd	r21, Y+7	; 0x07
    1064:	68 85       	ldd	r22, Y+8	; 0x08
    1066:	79 85       	ldd	r23, Y+9	; 0x09
    1068:	c7 01       	movw	r24, r14
    106a:	08 96       	adiw	r24, 0x08	; 8
    106c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <vTaskPlaceOnEventList>
    1070:	c7 01       	movw	r24, r14
    1072:	e1 de       	rcall	.-574    	; 0xe36 <prvUnlockQueue>
    1074:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
    1078:	81 11       	cpse	r24, r1
    107a:	a0 cf       	rjmp	.-192    	; 0xfbc <xQueueGenericSend+0x2e>
    107c:	70 dd       	rcall	.-1312   	; 0xb5e <vPortYield>
    107e:	9e cf       	rjmp	.-196    	; 0xfbc <xQueueGenericSend+0x2e>
    1080:	c7 01       	movw	r24, r14
    1082:	d9 de       	rcall	.-590    	; 0xe36 <prvUnlockQueue>
    1084:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
    1088:	99 cf       	rjmp	.-206    	; 0xfbc <xQueueGenericSend+0x2e>
    108a:	c7 01       	movw	r24, r14
    108c:	d4 de       	rcall	.-600    	; 0xe36 <prvUnlockQueue>
    108e:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	29 96       	adiw	r28, 0x09	; 9
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	08 95       	ret

000010b2 <xQueueGenericSendFromISR>:
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	8a 01       	movw	r16, r20
    10c0:	fc 01       	movw	r30, r24
    10c2:	56 8d       	ldd	r21, Z+30	; 0x1e
    10c4:	37 8d       	ldd	r19, Z+31	; 0x1f
    10c6:	53 17       	cp	r21, r19
    10c8:	10 f0       	brcs	.+4      	; 0x10ce <xQueueGenericSendFromISR+0x1c>
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	f9 f4       	brne	.+62     	; 0x110c <xQueueGenericSendFromISR+0x5a>
    10ce:	42 2f       	mov	r20, r18
    10d0:	78 01       	movw	r14, r16
    10d2:	ec 01       	movw	r28, r24
    10d4:	1a a1       	ldd	r17, Y+34	; 0x22
    10d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10d8:	ce 01       	movw	r24, r28
    10da:	34 de       	rcall	.-920    	; 0xd44 <prvCopyDataToQueue>
    10dc:	1f 3f       	cpi	r17, 0xFF	; 255
    10de:	81 f4       	brne	.+32     	; 0x1100 <xQueueGenericSendFromISR+0x4e>
    10e0:	8b 89       	ldd	r24, Y+19	; 0x13
    10e2:	88 23       	and	r24, r24
    10e4:	a9 f0       	breq	.+42     	; 0x1110 <xQueueGenericSendFromISR+0x5e>
    10e6:	ce 01       	movw	r24, r28
    10e8:	43 96       	adiw	r24, 0x13	; 19
    10ea:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskRemoveFromEventList>
    10ee:	88 23       	and	r24, r24
    10f0:	89 f0       	breq	.+34     	; 0x1114 <xQueueGenericSendFromISR+0x62>
    10f2:	e1 14       	cp	r14, r1
    10f4:	f1 04       	cpc	r15, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <xQueueGenericSendFromISR+0x66>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	f7 01       	movw	r30, r14
    10fc:	80 83       	st	Z, r24
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <xQueueGenericSendFromISR+0x68>
    1100:	ff 24       	eor	r15, r15
    1102:	f3 94       	inc	r15
    1104:	f1 0e       	add	r15, r17
    1106:	fa a2       	std	Y+34, r15	; 0x22
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	07 c0       	rjmp	.+14     	; 0x111a <xQueueGenericSendFromISR+0x68>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	05 c0       	rjmp	.+10     	; 0x111a <xQueueGenericSendFromISR+0x68>
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <xQueueGenericSendFromISR+0x68>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	01 c0       	rjmp	.+2      	; 0x111a <xQueueGenericSendFromISR+0x68>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	08 95       	ret

00001128 <xQueueReceive>:
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	29 97       	sbiw	r28, 0x09	; 9
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	8c 01       	movw	r16, r24
    114a:	6b 01       	movw	r12, r22
    114c:	2e 83       	std	Y+6, r18	; 0x06
    114e:	3f 83       	std	Y+7, r19	; 0x07
    1150:	48 87       	std	Y+8, r20	; 0x08
    1152:	59 87       	std	Y+9, r21	; 0x09
    1154:	e1 2c       	mov	r14, r1
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	0f 92       	push	r0
    115c:	f8 01       	movw	r30, r16
    115e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1160:	ff 20       	and	r15, r15
    1162:	99 f0       	breq	.+38     	; 0x118a <xQueueReceive+0x62>
    1164:	b6 01       	movw	r22, r12
    1166:	c8 01       	movw	r24, r16
    1168:	4c de       	rcall	.-872    	; 0xe02 <prvCopyDataFromQueue>
    116a:	fa 94       	dec	r15
    116c:	f8 01       	movw	r30, r16
    116e:	f6 8e       	std	Z+30, r15	; 0x1e
    1170:	80 85       	ldd	r24, Z+8	; 0x08
    1172:	88 23       	and	r24, r24
    1174:	31 f0       	breq	.+12     	; 0x1182 <xQueueReceive+0x5a>
    1176:	c8 01       	movw	r24, r16
    1178:	08 96       	adiw	r24, 0x08	; 8
    117a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskRemoveFromEventList>
    117e:	81 11       	cpse	r24, r1
    1180:	ee dc       	rcall	.-1572   	; 0xb5e <vPortYield>
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	52 c0       	rjmp	.+164    	; 0x122e <xQueueReceive+0x106>
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	9f 81       	ldd	r25, Y+7	; 0x07
    118e:	a8 85       	ldd	r26, Y+8	; 0x08
    1190:	b9 85       	ldd	r27, Y+9	; 0x09
    1192:	89 2b       	or	r24, r25
    1194:	8a 2b       	or	r24, r26
    1196:	8b 2b       	or	r24, r27
    1198:	21 f4       	brne	.+8      	; 0x11a2 <xQueueReceive+0x7a>
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	46 c0       	rjmp	.+140    	; 0x122e <xQueueReceive+0x106>
    11a2:	e1 10       	cpse	r14, r1
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <xQueueReceive+0x8a>
    11a6:	ce 01       	movw	r24, r28
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <vTaskInternalSetTimeOutState>
    11ae:	ee 24       	eor	r14, r14
    11b0:	e3 94       	inc	r14
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	f9 d6       	rcall	.+3570   	; 0x1faa <vTaskSuspendAll>
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	0f 92       	push	r0
    11be:	f8 01       	movw	r30, r16
    11c0:	81 a1       	ldd	r24, Z+33	; 0x21
    11c2:	8f 3f       	cpi	r24, 0xFF	; 255
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <xQueueReceive+0xa0>
    11c6:	11 a2       	std	Z+33, r1	; 0x21
    11c8:	f8 01       	movw	r30, r16
    11ca:	82 a1       	ldd	r24, Z+34	; 0x22
    11cc:	8f 3f       	cpi	r24, 0xFF	; 255
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <xQueueReceive+0xaa>
    11d0:	12 a2       	std	Z+34, r1	; 0x22
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	be 01       	movw	r22, r28
    11d8:	6a 5f       	subi	r22, 0xFA	; 250
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <xTaskCheckForTimeOut>
    11e4:	81 11       	cpse	r24, r1
    11e6:	19 c0       	rjmp	.+50     	; 0x121a <xQueueReceive+0xf2>
    11e8:	c8 01       	movw	r24, r16
    11ea:	91 dd       	rcall	.-1246   	; 0xd0e <prvIsQueueEmpty>
    11ec:	88 23       	and	r24, r24
    11ee:	81 f0       	breq	.+32     	; 0x1210 <xQueueReceive+0xe8>
    11f0:	4e 81       	ldd	r20, Y+6	; 0x06
    11f2:	5f 81       	ldd	r21, Y+7	; 0x07
    11f4:	68 85       	ldd	r22, Y+8	; 0x08
    11f6:	79 85       	ldd	r23, Y+9	; 0x09
    11f8:	c8 01       	movw	r24, r16
    11fa:	43 96       	adiw	r24, 0x13	; 19
    11fc:	0e 94 d6 12 	call	0x25ac	; 0x25ac <vTaskPlaceOnEventList>
    1200:	c8 01       	movw	r24, r16
    1202:	19 de       	rcall	.-974    	; 0xe36 <prvUnlockQueue>
    1204:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
    1208:	81 11       	cpse	r24, r1
    120a:	a5 cf       	rjmp	.-182    	; 0x1156 <xQueueReceive+0x2e>
    120c:	a8 dc       	rcall	.-1712   	; 0xb5e <vPortYield>
    120e:	a3 cf       	rjmp	.-186    	; 0x1156 <xQueueReceive+0x2e>
    1210:	c8 01       	movw	r24, r16
    1212:	11 de       	rcall	.-990    	; 0xe36 <prvUnlockQueue>
    1214:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
    1218:	9e cf       	rjmp	.-196    	; 0x1156 <xQueueReceive+0x2e>
    121a:	c8 01       	movw	r24, r16
    121c:	0c de       	rcall	.-1000   	; 0xe36 <prvUnlockQueue>
    121e:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
    1222:	c8 01       	movw	r24, r16
    1224:	74 dd       	rcall	.-1304   	; 0xd0e <prvIsQueueEmpty>
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <xQueueReceive+0x104>
    122a:	95 cf       	rjmp	.-214    	; 0x1156 <xQueueReceive+0x2e>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	29 96       	adiw	r28, 0x09	; 9
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	08 95       	ret

0000124c <xQueueSemaphoreTake>:
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	29 97       	sbiw	r28, 0x09	; 9
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	8c 01       	movw	r16, r24
    126a:	4e 83       	std	Y+6, r20	; 0x06
    126c:	5f 83       	std	Y+7, r21	; 0x07
    126e:	68 87       	std	Y+8, r22	; 0x08
    1270:	79 87       	std	Y+9, r23	; 0x09
    1272:	e1 2c       	mov	r14, r1
    1274:	f1 2c       	mov	r15, r1
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	0f 92       	push	r0
    127c:	f8 01       	movw	r30, r16
    127e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1280:	88 23       	and	r24, r24
    1282:	c9 f0       	breq	.+50     	; 0x12b6 <xQueueSemaphoreTake+0x6a>
    1284:	81 50       	subi	r24, 0x01	; 1
    1286:	86 8f       	std	Z+30, r24	; 0x1e
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	89 2b       	or	r24, r25
    128e:	29 f4       	brne	.+10     	; 0x129a <xQueueSemaphoreTake+0x4e>
    1290:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <pvTaskIncrementMutexHeldCount>
    1294:	f8 01       	movw	r30, r16
    1296:	95 83       	std	Z+5, r25	; 0x05
    1298:	84 83       	std	Z+4, r24	; 0x04
    129a:	f8 01       	movw	r30, r16
    129c:	80 85       	ldd	r24, Z+8	; 0x08
    129e:	88 23       	and	r24, r24
    12a0:	31 f0       	breq	.+12     	; 0x12ae <xQueueSemaphoreTake+0x62>
    12a2:	c8 01       	movw	r24, r16
    12a4:	08 96       	adiw	r24, 0x08	; 8
    12a6:	0e 94 79 13 	call	0x26f2	; 0x26f2 <xTaskRemoveFromEventList>
    12aa:	81 11       	cpse	r24, r1
    12ac:	58 dc       	rcall	.-1872   	; 0xb5e <vPortYield>
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	6f c0       	rjmp	.+222    	; 0x1394 <xQueueSemaphoreTake+0x148>
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ba:	a8 85       	ldd	r26, Y+8	; 0x08
    12bc:	b9 85       	ldd	r27, Y+9	; 0x09
    12be:	89 2b       	or	r24, r25
    12c0:	8a 2b       	or	r24, r26
    12c2:	8b 2b       	or	r24, r27
    12c4:	21 f4       	brne	.+8      	; 0x12ce <xQueueSemaphoreTake+0x82>
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	63 c0       	rjmp	.+198    	; 0x1394 <xQueueSemaphoreTake+0x148>
    12ce:	f1 10       	cpse	r15, r1
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <xQueueSemaphoreTake+0x92>
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <vTaskInternalSetTimeOutState>
    12da:	ff 24       	eor	r15, r15
    12dc:	f3 94       	inc	r15
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	63 d6       	rcall	.+3270   	; 0x1faa <vTaskSuspendAll>
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	0f 92       	push	r0
    12ea:	f8 01       	movw	r30, r16
    12ec:	81 a1       	ldd	r24, Z+33	; 0x21
    12ee:	8f 3f       	cpi	r24, 0xFF	; 255
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <xQueueSemaphoreTake+0xa8>
    12f2:	11 a2       	std	Z+33, r1	; 0x21
    12f4:	f8 01       	movw	r30, r16
    12f6:	82 a1       	ldd	r24, Z+34	; 0x22
    12f8:	8f 3f       	cpi	r24, 0xFF	; 255
    12fa:	09 f4       	brne	.+2      	; 0x12fe <xQueueSemaphoreTake+0xb2>
    12fc:	12 a2       	std	Z+34, r1	; 0x22
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	be 01       	movw	r22, r28
    1304:	6a 5f       	subi	r22, 0xFA	; 250
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <xTaskCheckForTimeOut>
    1310:	81 11       	cpse	r24, r1
    1312:	26 c0       	rjmp	.+76     	; 0x1360 <xQueueSemaphoreTake+0x114>
    1314:	c8 01       	movw	r24, r16
    1316:	fb dc       	rcall	.-1546   	; 0xd0e <prvIsQueueEmpty>
    1318:	88 23       	and	r24, r24
    131a:	f1 f0       	breq	.+60     	; 0x1358 <xQueueSemaphoreTake+0x10c>
    131c:	f8 01       	movw	r30, r16
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	89 2b       	or	r24, r25
    1324:	51 f4       	brne	.+20     	; 0x133a <xQueueSemaphoreTake+0xee>
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	0f 92       	push	r0
    132c:	84 81       	ldd	r24, Z+4	; 0x04
    132e:	95 81       	ldd	r25, Z+5	; 0x05
    1330:	0e 94 66 15 	call	0x2acc	; 0x2acc <xTaskPriorityInherit>
    1334:	e8 2e       	mov	r14, r24
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	4e 81       	ldd	r20, Y+6	; 0x06
    133c:	5f 81       	ldd	r21, Y+7	; 0x07
    133e:	68 85       	ldd	r22, Y+8	; 0x08
    1340:	79 85       	ldd	r23, Y+9	; 0x09
    1342:	c8 01       	movw	r24, r16
    1344:	43 96       	adiw	r24, 0x13	; 19
    1346:	0e 94 d6 12 	call	0x25ac	; 0x25ac <vTaskPlaceOnEventList>
    134a:	c8 01       	movw	r24, r16
    134c:	74 dd       	rcall	.-1304   	; 0xe36 <prvUnlockQueue>
    134e:	6d d7       	rcall	.+3802   	; 0x222a <xTaskResumeAll>
    1350:	81 11       	cpse	r24, r1
    1352:	91 cf       	rjmp	.-222    	; 0x1276 <xQueueSemaphoreTake+0x2a>
    1354:	04 dc       	rcall	.-2040   	; 0xb5e <vPortYield>
    1356:	8f cf       	rjmp	.-226    	; 0x1276 <xQueueSemaphoreTake+0x2a>
    1358:	c8 01       	movw	r24, r16
    135a:	6d dd       	rcall	.-1318   	; 0xe36 <prvUnlockQueue>
    135c:	66 d7       	rcall	.+3788   	; 0x222a <xTaskResumeAll>
    135e:	8b cf       	rjmp	.-234    	; 0x1276 <xQueueSemaphoreTake+0x2a>
    1360:	c8 01       	movw	r24, r16
    1362:	69 dd       	rcall	.-1326   	; 0xe36 <prvUnlockQueue>
    1364:	62 d7       	rcall	.+3780   	; 0x222a <xTaskResumeAll>
    1366:	c8 01       	movw	r24, r16
    1368:	d2 dc       	rcall	.-1628   	; 0xd0e <prvIsQueueEmpty>
    136a:	88 23       	and	r24, r24
    136c:	09 f4       	brne	.+2      	; 0x1370 <xQueueSemaphoreTake+0x124>
    136e:	83 cf       	rjmp	.-250    	; 0x1276 <xQueueSemaphoreTake+0x2a>
    1370:	ee 20       	and	r14, r14
    1372:	79 f0       	breq	.+30     	; 0x1392 <xQueueSemaphoreTake+0x146>
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	0f 92       	push	r0
    137a:	c8 01       	movw	r24, r16
    137c:	b8 dc       	rcall	.-1680   	; 0xcee <prvGetDisinheritPriorityAfterTimeout>
    137e:	68 2f       	mov	r22, r24
    1380:	f8 01       	movw	r30, r16
    1382:	84 81       	ldd	r24, Z+4	; 0x04
    1384:	95 81       	ldd	r25, Z+5	; 0x05
    1386:	0e 94 48 16 	call	0x2c90	; 0x2c90 <vTaskPriorityDisinheritAfterTimeout>
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <xQueueSemaphoreTake+0x148>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	29 96       	adiw	r28, 0x09	; 9
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	08 95       	ret

000013ae <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	0f 92       	push	r0
    13ba:	89 a1       	ldd	r24, Y+33	; 0x21
    13bc:	8f 3f       	cpi	r24, 0xFF	; 255
    13be:	09 f4       	brne	.+2      	; 0x13c2 <vQueueWaitForMessageRestricted+0x14>
    13c0:	19 a2       	std	Y+33, r1	; 0x21
    13c2:	8a a1       	ldd	r24, Y+34	; 0x22
    13c4:	8f 3f       	cpi	r24, 0xFF	; 255
    13c6:	09 f4       	brne	.+2      	; 0x13ca <vQueueWaitForMessageRestricted+0x1c>
    13c8:	1a a2       	std	Y+34, r1	; 0x22
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    13ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d0:	81 11       	cpse	r24, r1
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    13d4:	ce 01       	movw	r24, r28
    13d6:	43 96       	adiw	r24, 0x13	; 19
    13d8:	0e 94 37 13 	call	0x266e	; 0x266e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    13dc:	ce 01       	movw	r24, r28
    13de:	2b dd       	rcall	.-1450   	; 0xe36 <prvUnlockQueue>
    }
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <prvBytesInBuffer>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
}
    13e6:	fc 01       	movw	r30, r24
    13e8:	44 81       	ldd	r20, Z+4	; 0x04
    13ea:	55 81       	ldd	r21, Z+5	; 0x05
    13ec:	22 81       	ldd	r18, Z+2	; 0x02
    13ee:	33 81       	ldd	r19, Z+3	; 0x03
    13f0:	24 0f       	add	r18, r20
    13f2:	35 1f       	adc	r19, r21
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	b9 01       	movw	r22, r18
    13fa:	68 1b       	sub	r22, r24
    13fc:	79 0b       	sbc	r23, r25
    13fe:	cb 01       	movw	r24, r22
    1400:	64 17       	cp	r22, r20
    1402:	75 07       	cpc	r23, r21
    1404:	10 f0       	brcs	.+4      	; 0x140a <prvBytesInBuffer+0x24>
    1406:	84 1b       	sub	r24, r20
    1408:	95 0b       	sbc	r25, r21
    140a:	08 95       	ret

0000140c <prvInitialiseNewStreamBuffer>:
    140c:	0f 93       	push	r16
    140e:	fc 01       	movw	r30, r24
    1410:	8f e0       	ldi	r24, 0x0F	; 15
    1412:	df 01       	movw	r26, r30
    1414:	1d 92       	st	X+, r1
    1416:	8a 95       	dec	r24
    1418:	e9 f7       	brne	.-6      	; 0x1414 <prvInitialiseNewStreamBuffer+0x8>
    141a:	75 87       	std	Z+13, r23	; 0x0d
    141c:	64 87       	std	Z+12, r22	; 0x0c
    141e:	55 83       	std	Z+5, r21	; 0x05
    1420:	44 83       	std	Z+4, r20	; 0x04
    1422:	37 83       	std	Z+7, r19	; 0x07
    1424:	26 83       	std	Z+6, r18	; 0x06
    1426:	06 87       	std	Z+14, r16	; 0x0e
    1428:	0f 91       	pop	r16
    142a:	08 95       	ret

0000142c <prvWriteBytesToBuffer>:
    142c:	af 92       	push	r10
    142e:	bf 92       	push	r11
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	6c 01       	movw	r12, r24
    1442:	5b 01       	movw	r10, r22
    1444:	7a 01       	movw	r14, r20
    1446:	fc 01       	movw	r30, r24
    1448:	c2 81       	ldd	r28, Z+2	; 0x02
    144a:	d3 81       	ldd	r29, Z+3	; 0x03
    144c:	04 81       	ldd	r16, Z+4	; 0x04
    144e:	15 81       	ldd	r17, Z+5	; 0x05
    1450:	0c 1b       	sub	r16, r28
    1452:	1d 0b       	sbc	r17, r29
    1454:	40 17       	cp	r20, r16
    1456:	51 07       	cpc	r21, r17
    1458:	08 f4       	brcc	.+2      	; 0x145c <prvWriteBytesToBuffer+0x30>
    145a:	8a 01       	movw	r16, r20
    145c:	f6 01       	movw	r30, r12
    145e:	84 85       	ldd	r24, Z+12	; 0x0c
    1460:	95 85       	ldd	r25, Z+13	; 0x0d
    1462:	a8 01       	movw	r20, r16
    1464:	b5 01       	movw	r22, r10
    1466:	8c 0f       	add	r24, r28
    1468:	9d 1f       	adc	r25, r29
    146a:	0e 94 5f 30 	call	0x60be	; 0x60be <memcpy>
    146e:	0e 15       	cp	r16, r14
    1470:	1f 05       	cpc	r17, r15
    1472:	58 f4       	brcc	.+22     	; 0x148a <prvWriteBytesToBuffer+0x5e>
    1474:	a7 01       	movw	r20, r14
    1476:	40 1b       	sub	r20, r16
    1478:	51 0b       	sbc	r21, r17
    147a:	b5 01       	movw	r22, r10
    147c:	60 0f       	add	r22, r16
    147e:	71 1f       	adc	r23, r17
    1480:	f6 01       	movw	r30, r12
    1482:	84 85       	ldd	r24, Z+12	; 0x0c
    1484:	95 85       	ldd	r25, Z+13	; 0x0d
    1486:	0e 94 5f 30 	call	0x60be	; 0x60be <memcpy>
    148a:	ce 01       	movw	r24, r28
    148c:	8e 0d       	add	r24, r14
    148e:	9f 1d       	adc	r25, r15
    1490:	f6 01       	movw	r30, r12
    1492:	24 81       	ldd	r18, Z+4	; 0x04
    1494:	35 81       	ldd	r19, Z+5	; 0x05
    1496:	82 17       	cp	r24, r18
    1498:	93 07       	cpc	r25, r19
    149a:	10 f0       	brcs	.+4      	; 0x14a0 <prvWriteBytesToBuffer+0x74>
    149c:	82 1b       	sub	r24, r18
    149e:	93 0b       	sbc	r25, r19
    14a0:	f6 01       	movw	r30, r12
    14a2:	93 83       	std	Z+3, r25	; 0x03
    14a4:	82 83       	std	Z+2, r24	; 0x02
    14a6:	c7 01       	movw	r24, r14
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	bf 90       	pop	r11
    14ba:	af 90       	pop	r10
    14bc:	08 95       	ret

000014be <prvWriteMessageToBuffer>:
    14be:	cf 92       	push	r12
    14c0:	df 92       	push	r13
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	1f 92       	push	r1
    14d0:	1f 92       	push	r1
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	7c 01       	movw	r14, r24
    14d8:	6b 01       	movw	r12, r22
    14da:	5a 83       	std	Y+2, r21	; 0x02
    14dc:	49 83       	std	Y+1, r20	; 0x01
    14de:	21 15       	cp	r18, r1
    14e0:	31 05       	cpc	r19, r1
    14e2:	c1 f0       	breq	.+48     	; 0x1514 <prvWriteMessageToBuffer+0x56>
    14e4:	fc 01       	movw	r30, r24
    14e6:	86 85       	ldd	r24, Z+14	; 0x0e
    14e8:	80 fd       	sbrc	r24, 0
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <prvWriteMessageToBuffer+0x3e>
    14ec:	42 17       	cp	r20, r18
    14ee:	53 07       	cpc	r21, r19
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <prvWriteMessageToBuffer+0x36>
    14f2:	9a 01       	movw	r18, r20
    14f4:	3a 83       	std	Y+2, r19	; 0x02
    14f6:	29 83       	std	Y+1, r18	; 0x01
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <prvWriteMessageToBuffer+0x5c>
    14fc:	20 17       	cp	r18, r16
    14fe:	31 07       	cpc	r19, r17
    1500:	58 f0       	brcs	.+22     	; 0x1518 <prvWriteMessageToBuffer+0x5a>
    1502:	42 e0       	ldi	r20, 0x02	; 2
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	be 01       	movw	r22, r28
    1508:	6f 5f       	subi	r22, 0xFF	; 255
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	c7 01       	movw	r24, r14
    150e:	8e df       	rcall	.-228    	; 0x142c <prvWriteBytesToBuffer>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	03 c0       	rjmp	.+6      	; 0x151a <prvWriteMessageToBuffer+0x5c>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	01 c0       	rjmp	.+2      	; 0x151a <prvWriteMessageToBuffer+0x5c>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	88 23       	and	r24, r24
    151c:	31 f0       	breq	.+12     	; 0x152a <prvWriteMessageToBuffer+0x6c>
    151e:	49 81       	ldd	r20, Y+1	; 0x01
    1520:	5a 81       	ldd	r21, Y+2	; 0x02
    1522:	b6 01       	movw	r22, r12
    1524:	c7 01       	movw	r24, r14
    1526:	82 df       	rcall	.-252    	; 0x142c <prvWriteBytesToBuffer>
    1528:	02 c0       	rjmp	.+4      	; 0x152e <prvWriteMessageToBuffer+0x70>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	08 95       	ret

00001544 <prvReadBytesFromBuffer>:
    1544:	af 92       	push	r10
    1546:	bf 92       	push	r11
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	7c 01       	movw	r14, r24
    155a:	5b 01       	movw	r10, r22
    155c:	e9 01       	movw	r28, r18
    155e:	42 17       	cp	r20, r18
    1560:	53 07       	cpc	r21, r19
    1562:	08 f4       	brcc	.+2      	; 0x1566 <prvReadBytesFromBuffer+0x22>
    1564:	ea 01       	movw	r28, r20
    1566:	20 97       	sbiw	r28, 0x00	; 0
    1568:	81 f1       	breq	.+96     	; 0x15ca <prvReadBytesFromBuffer+0x86>
    156a:	f7 01       	movw	r30, r14
    156c:	00 81       	ld	r16, Z
    156e:	11 81       	ldd	r17, Z+1	; 0x01
    1570:	84 81       	ldd	r24, Z+4	; 0x04
    1572:	95 81       	ldd	r25, Z+5	; 0x05
    1574:	80 1b       	sub	r24, r16
    1576:	91 0b       	sbc	r25, r17
    1578:	6e 01       	movw	r12, r28
    157a:	8c 17       	cp	r24, r28
    157c:	9d 07       	cpc	r25, r29
    157e:	08 f4       	brcc	.+2      	; 0x1582 <prvReadBytesFromBuffer+0x3e>
    1580:	6c 01       	movw	r12, r24
    1582:	f7 01       	movw	r30, r14
    1584:	64 85       	ldd	r22, Z+12	; 0x0c
    1586:	75 85       	ldd	r23, Z+13	; 0x0d
    1588:	60 0f       	add	r22, r16
    158a:	71 1f       	adc	r23, r17
    158c:	a6 01       	movw	r20, r12
    158e:	c5 01       	movw	r24, r10
    1590:	0e 94 5f 30 	call	0x60be	; 0x60be <memcpy>
    1594:	cc 16       	cp	r12, r28
    1596:	dd 06       	cpc	r13, r29
    1598:	58 f4       	brcc	.+22     	; 0x15b0 <prvReadBytesFromBuffer+0x6c>
    159a:	ae 01       	movw	r20, r28
    159c:	4c 19       	sub	r20, r12
    159e:	5d 09       	sbc	r21, r13
    15a0:	f7 01       	movw	r30, r14
    15a2:	64 85       	ldd	r22, Z+12	; 0x0c
    15a4:	75 85       	ldd	r23, Z+13	; 0x0d
    15a6:	c5 01       	movw	r24, r10
    15a8:	8c 0d       	add	r24, r12
    15aa:	9d 1d       	adc	r25, r13
    15ac:	0e 94 5f 30 	call	0x60be	; 0x60be <memcpy>
    15b0:	0c 0f       	add	r16, r28
    15b2:	1d 1f       	adc	r17, r29
    15b4:	f7 01       	movw	r30, r14
    15b6:	84 81       	ldd	r24, Z+4	; 0x04
    15b8:	95 81       	ldd	r25, Z+5	; 0x05
    15ba:	08 17       	cp	r16, r24
    15bc:	19 07       	cpc	r17, r25
    15be:	10 f0       	brcs	.+4      	; 0x15c4 <prvReadBytesFromBuffer+0x80>
    15c0:	08 1b       	sub	r16, r24
    15c2:	19 0b       	sbc	r17, r25
    15c4:	f7 01       	movw	r30, r14
    15c6:	11 83       	std	Z+1, r17	; 0x01
    15c8:	00 83       	st	Z, r16
    15ca:	ce 01       	movw	r24, r28
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	bf 90       	pop	r11
    15de:	af 90       	pop	r10
    15e0:	08 95       	ret

000015e2 <prvReadMessageFromBuffer>:
    15e2:	6f 92       	push	r6
    15e4:	7f 92       	push	r7
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	1f 92       	push	r1
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	6c 01       	movw	r12, r24
    1608:	4b 01       	movw	r8, r22
    160a:	5a 01       	movw	r10, r20
    160c:	79 01       	movw	r14, r18
    160e:	01 15       	cp	r16, r1
    1610:	11 05       	cpc	r17, r1
    1612:	b1 f0       	breq	.+44     	; 0x1640 <prvReadMessageFromBuffer+0x5e>
    1614:	fc 01       	movw	r30, r24
    1616:	60 80       	ld	r6, Z
    1618:	71 80       	ldd	r7, Z+1	; 0x01
    161a:	a8 01       	movw	r20, r16
    161c:	be 01       	movw	r22, r28
    161e:	6f 5f       	subi	r22, 0xFF	; 255
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	90 df       	rcall	.-224    	; 0x1544 <prvReadBytesFromBuffer>
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	e0 1a       	sub	r14, r16
    162a:	f1 0a       	sbc	r15, r17
    162c:	a8 16       	cp	r10, r24
    162e:	b9 06       	cpc	r11, r25
    1630:	30 f4       	brcc	.+12     	; 0x163e <prvReadMessageFromBuffer+0x5c>
    1632:	f6 01       	movw	r30, r12
    1634:	71 82       	std	Z+1, r7	; 0x01
    1636:	60 82       	st	Z, r6
    1638:	a1 2c       	mov	r10, r1
    163a:	b1 2c       	mov	r11, r1
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <prvReadMessageFromBuffer+0x5e>
    163e:	5c 01       	movw	r10, r24
    1640:	97 01       	movw	r18, r14
    1642:	a5 01       	movw	r20, r10
    1644:	b4 01       	movw	r22, r8
    1646:	c6 01       	movw	r24, r12
    1648:	7d df       	rcall	.-262    	; 0x1544 <prvReadBytesFromBuffer>
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	bf 90       	pop	r11
    1660:	af 90       	pop	r10
    1662:	9f 90       	pop	r9
    1664:	8f 90       	pop	r8
    1666:	7f 90       	pop	r7
    1668:	6f 90       	pop	r6
    166a:	08 95       	ret

0000166c <xStreamBufferGenericCreate>:
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	ec 01       	movw	r28, r24
    167c:	6b 01       	movw	r12, r22
    167e:	41 30       	cpi	r20, 0x01	; 1
    1680:	11 f4       	brne	.+4      	; 0x1686 <xStreamBufferGenericCreate+0x1a>
    1682:	01 e0       	ldi	r16, 0x01	; 1
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <xStreamBufferGenericCreate+0x1c>
    1686:	00 e0       	ldi	r16, 0x00	; 0
    1688:	c1 14       	cp	r12, r1
    168a:	d1 04       	cpc	r13, r1
    168c:	19 f4       	brne	.+6      	; 0x1694 <xStreamBufferGenericCreate+0x28>
    168e:	cc 24       	eor	r12, r12
    1690:	c3 94       	inc	r12
    1692:	d1 2c       	mov	r13, r1
    1694:	ce 01       	movw	r24, r28
    1696:	40 96       	adiw	r24, 0x10	; 16
    1698:	c8 17       	cp	r28, r24
    169a:	d9 07       	cpc	r29, r25
    169c:	20 f4       	brcc	.+8      	; 0x16a6 <xStreamBufferGenericCreate+0x3a>
    169e:	21 96       	adiw	r28, 0x01	; 1
    16a0:	aa d8       	rcall	.-3756   	; 0x7f6 <pvPortMalloc>
    16a2:	7c 01       	movw	r14, r24
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <xStreamBufferGenericCreate+0x3e>
    16a6:	e1 2c       	mov	r14, r1
    16a8:	f1 2c       	mov	r15, r1
    16aa:	e1 14       	cp	r14, r1
    16ac:	f1 04       	cpc	r15, r1
    16ae:	39 f0       	breq	.+14     	; 0x16be <xStreamBufferGenericCreate+0x52>
    16b0:	96 01       	movw	r18, r12
    16b2:	ae 01       	movw	r20, r28
    16b4:	b7 01       	movw	r22, r14
    16b6:	61 5f       	subi	r22, 0xF1	; 241
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	c7 01       	movw	r24, r14
    16bc:	a7 de       	rcall	.-690    	; 0x140c <prvInitialiseNewStreamBuffer>
    16be:	c7 01       	movw	r24, r14
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	0f 91       	pop	r16
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	df 90       	pop	r13
    16cc:	cf 90       	pop	r12
    16ce:	08 95       	ret

000016d0 <xStreamBufferReset>:
    16d0:	0f 93       	push	r16
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	0f 92       	push	r0
    16d8:	fc 01       	movw	r30, r24
    16da:	20 85       	ldd	r18, Z+8	; 0x08
    16dc:	31 85       	ldd	r19, Z+9	; 0x09
    16de:	23 2b       	or	r18, r19
    16e0:	71 f4       	brne	.+28     	; 0x16fe <xStreamBufferReset+0x2e>
    16e2:	22 85       	ldd	r18, Z+10	; 0x0a
    16e4:	33 85       	ldd	r19, Z+11	; 0x0b
    16e6:	23 2b       	or	r18, r19
    16e8:	61 f4       	brne	.+24     	; 0x1702 <xStreamBufferReset+0x32>
    16ea:	26 81       	ldd	r18, Z+6	; 0x06
    16ec:	37 81       	ldd	r19, Z+7	; 0x07
    16ee:	44 81       	ldd	r20, Z+4	; 0x04
    16f0:	55 81       	ldd	r21, Z+5	; 0x05
    16f2:	64 85       	ldd	r22, Z+12	; 0x0c
    16f4:	75 85       	ldd	r23, Z+13	; 0x0d
    16f6:	06 85       	ldd	r16, Z+14	; 0x0e
    16f8:	89 de       	rcall	.-750    	; 0x140c <prvInitialiseNewStreamBuffer>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <xStreamBufferReset+0x34>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <xStreamBufferReset+0x34>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 91       	pop	r16
    170a:	08 95       	ret

0000170c <xStreamBufferSpacesAvailable>:
    170c:	fc 01       	movw	r30, r24
    170e:	24 81       	ldd	r18, Z+4	; 0x04
    1710:	35 81       	ldd	r19, Z+5	; 0x05
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	42 81       	ldd	r20, Z+2	; 0x02
    171c:	53 81       	ldd	r21, Z+3	; 0x03
    171e:	84 1b       	sub	r24, r20
    1720:	95 0b       	sbc	r25, r21
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	82 17       	cp	r24, r18
    1726:	93 07       	cpc	r25, r19
    1728:	10 f0       	brcs	.+4      	; 0x172e <xStreamBufferSpacesAvailable+0x22>
    172a:	82 1b       	sub	r24, r18
    172c:	93 0b       	sbc	r25, r19
    172e:	08 95       	ret

00001730 <xStreamBufferSend>:
    1730:	2f 92       	push	r2
    1732:	3f 92       	push	r3
    1734:	4f 92       	push	r4
    1736:	5f 92       	push	r5
    1738:	6f 92       	push	r6
    173a:	7f 92       	push	r7
    173c:	8f 92       	push	r8
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	2b 97       	sbiw	r28, 0x0b	; 11
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	4c 01       	movw	r8, r24
    1766:	7b 87       	std	Y+11, r23	; 0x0b
    1768:	6a 87       	std	Y+10, r22	; 0x0a
    176a:	1a 01       	movw	r2, r20
    176c:	0e 83       	std	Y+6, r16	; 0x06
    176e:	1f 83       	std	Y+7, r17	; 0x07
    1770:	28 87       	std	Y+8, r18	; 0x08
    1772:	39 87       	std	Y+9, r19	; 0x09
    1774:	fc 01       	movw	r30, r24
    1776:	84 81       	ldd	r24, Z+4	; 0x04
    1778:	95 81       	ldd	r25, Z+5	; 0x05
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	26 85       	ldd	r18, Z+14	; 0x0e
    177e:	20 ff       	sbrs	r18, 0
    1780:	0c c0       	rjmp	.+24     	; 0x179a <xStreamBufferSend+0x6a>
    1782:	2a 01       	movw	r4, r20
    1784:	f2 e0       	ldi	r31, 0x02	; 2
    1786:	4f 0e       	add	r4, r31
    1788:	51 1c       	adc	r5, r1
    178a:	84 15       	cp	r24, r4
    178c:	95 05       	cpc	r25, r5
    178e:	58 f4       	brcc	.+22     	; 0x17a6 <xStreamBufferSend+0x76>
    1790:	1e 82       	std	Y+6, r1	; 0x06
    1792:	1f 82       	std	Y+7, r1	; 0x07
    1794:	18 86       	std	Y+8, r1	; 0x08
    1796:	19 86       	std	Y+9, r1	; 0x09
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <xStreamBufferSend+0x76>
    179a:	84 17       	cp	r24, r20
    179c:	95 07       	cpc	r25, r21
    179e:	10 f0       	brcs	.+4      	; 0x17a4 <xStreamBufferSend+0x74>
    17a0:	2a 01       	movw	r4, r20
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <xStreamBufferSend+0x76>
    17a4:	2c 01       	movw	r4, r24
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	a8 85       	ldd	r26, Y+8	; 0x08
    17ac:	b9 85       	ldd	r27, Y+9	; 0x09
    17ae:	89 2b       	or	r24, r25
    17b0:	8a 2b       	or	r24, r26
    17b2:	8b 2b       	or	r24, r27
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <xStreamBufferSend+0x88>
    17b6:	38 c0       	rjmp	.+112    	; 0x1828 <xStreamBufferSend+0xf8>
    17b8:	ce 01       	movw	r24, r28
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	0e 94 c2 14 	call	0x2984	; 0x2984 <vTaskSetTimeOutState>
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	0f 92       	push	r0
    17c6:	c4 01       	movw	r24, r8
    17c8:	a1 df       	rcall	.-190    	; 0x170c <xStreamBufferSpacesAvailable>
    17ca:	3c 01       	movw	r6, r24
    17cc:	84 15       	cp	r24, r4
    17ce:	95 05       	cpc	r25, r5
    17d0:	40 f5       	brcc	.+80     	; 0x1822 <xStreamBufferSend+0xf2>
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 ac 19 	call	0x3358	; 0x3358 <xTaskGenericNotifyStateClear>
    17dc:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskGetCurrentTaskHandle>
    17e0:	f4 01       	movw	r30, r8
    17e2:	93 87       	std	Z+11, r25	; 0x0b
    17e4:	82 87       	std	Z+10, r24	; 0x0a
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	ae 80       	ldd	r10, Y+6	; 0x06
    17ec:	bf 80       	ldd	r11, Y+7	; 0x07
    17ee:	c8 84       	ldd	r12, Y+8	; 0x08
    17f0:	d9 84       	ldd	r13, Y+9	; 0x09
    17f2:	e1 2c       	mov	r14, r1
    17f4:	f1 2c       	mov	r15, r1
    17f6:	00 e0       	ldi	r16, 0x00	; 0
    17f8:	10 e0       	ldi	r17, 0x00	; 0
    17fa:	98 01       	movw	r18, r16
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	ba 01       	movw	r22, r20
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <xTaskGenericNotifyWait>
    1808:	f4 01       	movw	r30, r8
    180a:	13 86       	std	Z+11, r1	; 0x0b
    180c:	12 86       	std	Z+10, r1	; 0x0a
    180e:	be 01       	movw	r22, r28
    1810:	6a 5f       	subi	r22, 0xFA	; 250
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	ce 01       	movw	r24, r28
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <xTaskCheckForTimeOut>
    181c:	88 23       	and	r24, r24
    181e:	81 f2       	breq	.-96     	; 0x17c0 <xStreamBufferSend+0x90>
    1820:	05 c0       	rjmp	.+10     	; 0x182c <xStreamBufferSend+0xfc>
    1822:	0f 90       	pop	r0
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	02 c0       	rjmp	.+4      	; 0x182c <xStreamBufferSend+0xfc>
    1828:	61 2c       	mov	r6, r1
    182a:	71 2c       	mov	r7, r1
    182c:	61 14       	cp	r6, r1
    182e:	71 04       	cpc	r7, r1
    1830:	19 f4       	brne	.+6      	; 0x1838 <xStreamBufferSend+0x108>
    1832:	c4 01       	movw	r24, r8
    1834:	6b df       	rcall	.-298    	; 0x170c <xStreamBufferSpacesAvailable>
    1836:	3c 01       	movw	r6, r24
    1838:	82 01       	movw	r16, r4
    183a:	93 01       	movw	r18, r6
    183c:	a1 01       	movw	r20, r2
    183e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1840:	7b 85       	ldd	r23, Y+11	; 0x0b
    1842:	c4 01       	movw	r24, r8
    1844:	3c de       	rcall	.-904    	; 0x14be <prvWriteMessageToBuffer>
    1846:	6c 01       	movw	r12, r24
    1848:	89 2b       	or	r24, r25
    184a:	e9 f0       	breq	.+58     	; 0x1886 <xStreamBufferSend+0x156>
    184c:	c4 01       	movw	r24, r8
    184e:	cb dd       	rcall	.-1130   	; 0x13e6 <prvBytesInBuffer>
    1850:	f4 01       	movw	r30, r8
    1852:	26 81       	ldd	r18, Z+6	; 0x06
    1854:	37 81       	ldd	r19, Z+7	; 0x07
    1856:	82 17       	cp	r24, r18
    1858:	93 07       	cpc	r25, r19
    185a:	a8 f0       	brcs	.+42     	; 0x1886 <xStreamBufferSend+0x156>
    185c:	a6 d3       	rcall	.+1868   	; 0x1faa <vTaskSuspendAll>
    185e:	f4 01       	movw	r30, r8
    1860:	80 85       	ldd	r24, Z+8	; 0x08
    1862:	91 85       	ldd	r25, Z+9	; 0x09
    1864:	89 2b       	or	r24, r25
    1866:	71 f0       	breq	.+28     	; 0x1884 <xStreamBufferSend+0x154>
    1868:	80 85       	ldd	r24, Z+8	; 0x08
    186a:	91 85       	ldd	r25, Z+9	; 0x09
    186c:	e1 2c       	mov	r14, r1
    186e:	f1 2c       	mov	r15, r1
    1870:	00 e0       	ldi	r16, 0x00	; 0
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	a9 01       	movw	r20, r18
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskGenericNotify>
    187e:	f4 01       	movw	r30, r8
    1880:	11 86       	std	Z+9, r1	; 0x09
    1882:	10 86       	std	Z+8, r1	; 0x08
    1884:	d2 d4       	rcall	.+2468   	; 0x222a <xTaskResumeAll>
    1886:	c6 01       	movw	r24, r12
    1888:	2b 96       	adiw	r28, 0x0b	; 11
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	df 90       	pop	r13
    18a2:	cf 90       	pop	r12
    18a4:	bf 90       	pop	r11
    18a6:	af 90       	pop	r10
    18a8:	9f 90       	pop	r9
    18aa:	8f 90       	pop	r8
    18ac:	7f 90       	pop	r7
    18ae:	6f 90       	pop	r6
    18b0:	5f 90       	pop	r5
    18b2:	4f 90       	pop	r4
    18b4:	3f 90       	pop	r3
    18b6:	2f 90       	pop	r2
    18b8:	08 95       	ret

000018ba <xStreamBufferSendFromISR>:
    18ba:	af 92       	push	r10
    18bc:	bf 92       	push	r11
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ec 01       	movw	r28, r24
    18d0:	7b 01       	movw	r14, r22
    18d2:	5a 01       	movw	r10, r20
    18d4:	69 01       	movw	r12, r18
    18d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18d8:	80 ff       	sbrs	r24, 0
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <xStreamBufferSendFromISR+0x2a>
    18dc:	8a 01       	movw	r16, r20
    18de:	0e 5f       	subi	r16, 0xFE	; 254
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <xStreamBufferSendFromISR+0x2c>
    18e4:	8a 01       	movw	r16, r20
    18e6:	ce 01       	movw	r24, r28
    18e8:	11 df       	rcall	.-478    	; 0x170c <xStreamBufferSpacesAvailable>
    18ea:	9c 01       	movw	r18, r24
    18ec:	a5 01       	movw	r20, r10
    18ee:	b7 01       	movw	r22, r14
    18f0:	ce 01       	movw	r24, r28
    18f2:	e5 dd       	rcall	.-1078   	; 0x14be <prvWriteMessageToBuffer>
    18f4:	5c 01       	movw	r10, r24
    18f6:	89 2b       	or	r24, r25
    18f8:	c1 f0       	breq	.+48     	; 0x192a <xStreamBufferSendFromISR+0x70>
    18fa:	ce 01       	movw	r24, r28
    18fc:	74 dd       	rcall	.-1304   	; 0x13e6 <prvBytesInBuffer>
    18fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1900:	3f 81       	ldd	r19, Y+7	; 0x07
    1902:	82 17       	cp	r24, r18
    1904:	93 07       	cpc	r25, r19
    1906:	88 f0       	brcs	.+34     	; 0x192a <xStreamBufferSendFromISR+0x70>
    1908:	88 85       	ldd	r24, Y+8	; 0x08
    190a:	99 85       	ldd	r25, Y+9	; 0x09
    190c:	89 2b       	or	r24, r25
    190e:	69 f0       	breq	.+26     	; 0x192a <xStreamBufferSendFromISR+0x70>
    1910:	88 85       	ldd	r24, Y+8	; 0x08
    1912:	99 85       	ldd	r25, Y+9	; 0x09
    1914:	e1 2c       	mov	r14, r1
    1916:	f1 2c       	mov	r15, r1
    1918:	00 e0       	ldi	r16, 0x00	; 0
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	0e 94 8a 18 	call	0x3114	; 0x3114 <xTaskGenericNotifyFromISR>
    1926:	19 86       	std	Y+9, r1	; 0x09
    1928:	18 86       	std	Y+8, r1	; 0x08
    192a:	c5 01       	movw	r24, r10
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	df 90       	pop	r13
    193a:	cf 90       	pop	r12
    193c:	bf 90       	pop	r11
    193e:	af 90       	pop	r10
    1940:	08 95       	ret

00001942 <xStreamBufferReceive>:
    1942:	4f 92       	push	r4
    1944:	5f 92       	push	r5
    1946:	6f 92       	push	r6
    1948:	7f 92       	push	r7
    194a:	8f 92       	push	r8
    194c:	9f 92       	push	r9
    194e:	af 92       	push	r10
    1950:	bf 92       	push	r11
    1952:	cf 92       	push	r12
    1954:	df 92       	push	r13
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ec 01       	movw	r28, r24
    1964:	2b 01       	movw	r4, r22
    1966:	3a 01       	movw	r6, r20
    1968:	58 01       	movw	r10, r16
    196a:	69 01       	movw	r12, r18
    196c:	8e 85       	ldd	r24, Y+14	; 0x0e
    196e:	80 ff       	sbrs	r24, 0
    1970:	05 c0       	rjmp	.+10     	; 0x197c <xStreamBufferReceive+0x3a>
    1972:	68 94       	set
    1974:	88 24       	eor	r8, r8
    1976:	81 f8       	bld	r8, 1
    1978:	91 2c       	mov	r9, r1
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <xStreamBufferReceive+0x3e>
    197c:	81 2c       	mov	r8, r1
    197e:	91 2c       	mov	r9, r1
    1980:	a1 14       	cp	r10, r1
    1982:	b1 04       	cpc	r11, r1
    1984:	c1 04       	cpc	r12, r1
    1986:	d1 04       	cpc	r13, r1
    1988:	41 f1       	breq	.+80     	; 0x19da <xStreamBufferReceive+0x98>
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	0f 92       	push	r0
    1990:	ce 01       	movw	r24, r28
    1992:	29 dd       	rcall	.-1454   	; 0x13e6 <prvBytesInBuffer>
    1994:	7c 01       	movw	r14, r24
    1996:	88 16       	cp	r8, r24
    1998:	99 06       	cpc	r9, r25
    199a:	48 f0       	brcs	.+18     	; 0x19ae <xStreamBufferReceive+0x6c>
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 ac 19 	call	0x3358	; 0x3358 <xTaskGenericNotifyStateClear>
    19a6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskGetCurrentTaskHandle>
    19aa:	99 87       	std	Y+9, r25	; 0x09
    19ac:	88 87       	std	Y+8, r24	; 0x08
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	8e 14       	cp	r8, r14
    19b4:	9f 04       	cpc	r9, r15
    19b6:	a0 f0       	brcs	.+40     	; 0x19e0 <xStreamBufferReceive+0x9e>
    19b8:	e1 2c       	mov	r14, r1
    19ba:	f1 2c       	mov	r15, r1
    19bc:	00 e0       	ldi	r16, 0x00	; 0
    19be:	10 e0       	ldi	r17, 0x00	; 0
    19c0:	98 01       	movw	r18, r16
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	ba 01       	movw	r22, r20
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <xTaskGenericNotifyWait>
    19ce:	19 86       	std	Y+9, r1	; 0x09
    19d0:	18 86       	std	Y+8, r1	; 0x08
    19d2:	ce 01       	movw	r24, r28
    19d4:	08 dd       	rcall	.-1520   	; 0x13e6 <prvBytesInBuffer>
    19d6:	7c 01       	movw	r14, r24
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <xStreamBufferReceive+0x9e>
    19da:	ce 01       	movw	r24, r28
    19dc:	04 dd       	rcall	.-1528   	; 0x13e6 <prvBytesInBuffer>
    19de:	7c 01       	movw	r14, r24
    19e0:	8e 14       	cp	r8, r14
    19e2:	9f 04       	cpc	r9, r15
    19e4:	e8 f4       	brcc	.+58     	; 0x1a20 <xStreamBufferReceive+0xde>
    19e6:	84 01       	movw	r16, r8
    19e8:	97 01       	movw	r18, r14
    19ea:	a3 01       	movw	r20, r6
    19ec:	b2 01       	movw	r22, r4
    19ee:	ce 01       	movw	r24, r28
    19f0:	f8 dd       	rcall	.-1040   	; 0x15e2 <prvReadMessageFromBuffer>
    19f2:	6c 01       	movw	r12, r24
    19f4:	89 2b       	or	r24, r25
    19f6:	b1 f0       	breq	.+44     	; 0x1a24 <xStreamBufferReceive+0xe2>
    19f8:	d8 d2       	rcall	.+1456   	; 0x1faa <vTaskSuspendAll>
    19fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    19fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    19fe:	89 2b       	or	r24, r25
    1a00:	69 f0       	breq	.+26     	; 0x1a1c <xStreamBufferReceive+0xda>
    1a02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a06:	e1 2c       	mov	r14, r1
    1a08:	f1 2c       	mov	r15, r1
    1a0a:	00 e0       	ldi	r16, 0x00	; 0
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	a9 01       	movw	r20, r18
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	0e 94 93 17 	call	0x2f26	; 0x2f26 <xTaskGenericNotify>
    1a18:	1b 86       	std	Y+11, r1	; 0x0b
    1a1a:	1a 86       	std	Y+10, r1	; 0x0a
    1a1c:	06 d4       	rcall	.+2060   	; 0x222a <xTaskResumeAll>
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <xStreamBufferReceive+0xe2>
    1a20:	c1 2c       	mov	r12, r1
    1a22:	d1 2c       	mov	r13, r1
    1a24:	c6 01       	movw	r24, r12
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	bf 90       	pop	r11
    1a38:	af 90       	pop	r10
    1a3a:	9f 90       	pop	r9
    1a3c:	8f 90       	pop	r8
    1a3e:	7f 90       	pop	r7
    1a40:	6f 90       	pop	r6
    1a42:	5f 90       	pop	r5
    1a44:	4f 90       	pop	r4
    1a46:	08 95       	ret

00001a48 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	26 85       	ldd	r18, Z+14	; 0x0e
    1a50:	20 ff       	sbrs	r18, 0
    1a52:	03 c0       	rjmp	.+6      	; 0x1a5a <xStreamBufferIsFull+0x12>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a54:	c2 e0       	ldi	r28, 0x02	; 2
    1a56:	d0 e0       	ldi	r29, 0x00	; 0
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <xStreamBufferIsFull+0x16>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1a5a:	c0 e0       	ldi	r28, 0x00	; 0
    1a5c:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    1a5e:	56 de       	rcall	.-852    	; 0x170c <xStreamBufferSpacesAvailable>
    1a60:	c8 17       	cp	r28, r24
    1a62:	d9 07       	cpc	r29, r25
    1a64:	10 f0       	brcs	.+4      	; 0x1a6a <xStreamBufferIsFull+0x22>
    {
        xReturn = pdTRUE;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <xStreamBufferIsFull+0x24>
    }
    else
    {
        xReturn = pdFALSE;
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    }

    return xReturn;
}
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <prvResetNextTaskUnblockTime>:
    1a72:	e0 91 2d 16 	lds	r30, 0x162D	; 0x80162d <pxDelayedTaskList>
    1a76:	f0 91 2e 16 	lds	r31, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    1a7a:	80 81       	ld	r24, Z
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	0c c0       	rjmp	.+24     	; 0x1a98 <prvResetNextTaskUnblockTime+0x26>
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	9f ef       	ldi	r25, 0xFF	; 255
    1a84:	dc 01       	movw	r26, r24
    1a86:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <xNextTaskUnblockTime>
    1a8a:	90 93 f8 15 	sts	0x15F8, r25	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1a8e:	a0 93 f9 15 	sts	0x15F9, r26	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1a92:	b0 93 fa 15 	sts	0x15FA, r27	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1a96:	08 95       	ret
    1a98:	e0 91 2d 16 	lds	r30, 0x162D	; 0x80162d <pxDelayedTaskList>
    1a9c:	f0 91 2e 16 	lds	r31, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    1aa0:	07 80       	ldd	r0, Z+7	; 0x07
    1aa2:	f0 85       	ldd	r31, Z+8	; 0x08
    1aa4:	e0 2d       	mov	r30, r0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	a2 81       	ldd	r26, Z+2	; 0x02
    1aac:	b3 81       	ldd	r27, Z+3	; 0x03
    1aae:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <xNextTaskUnblockTime>
    1ab2:	90 93 f8 15 	sts	0x15F8, r25	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1ab6:	a0 93 f9 15 	sts	0x15F9, r26	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1aba:	b0 93 fa 15 	sts	0x15FA, r27	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1abe:	08 95       	ret

00001ac0 <prvDeleteTCB>:
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	ec 01       	movw	r28, r24
    1ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aca:	0e 94 a4 04 	call	0x948	; 0x948 <vPortFree>
    1ace:	ce 01       	movw	r24, r28
    1ad0:	0e 94 a4 04 	call	0x948	; 0x948 <vPortFree>
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	08 95       	ret

00001ada <prvInitialiseNewTask>:
    1ada:	4f 92       	push	r4
    1adc:	5f 92       	push	r5
    1ade:	6f 92       	push	r6
    1ae0:	7f 92       	push	r7
    1ae2:	8f 92       	push	r8
    1ae4:	9f 92       	push	r9
    1ae6:	af 92       	push	r10
    1ae8:	bf 92       	push	r11
    1aea:	cf 92       	push	r12
    1aec:	df 92       	push	r13
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	2c 01       	movw	r4, r24
    1afa:	5b 01       	movw	r10, r22
    1afc:	4a 01       	movw	r8, r20
    1afe:	39 01       	movw	r6, r18
    1b00:	e6 01       	movw	r28, r12
    1b02:	65 ea       	ldi	r22, 0xA5	; 165
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b0a:	0e 94 68 30 	call	0x60d0	; 0x60d0 <memset>
    1b0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b12:	21 e0       	ldi	r18, 0x01	; 1
    1b14:	82 1a       	sub	r8, r18
    1b16:	91 08       	sbc	r9, r1
    1b18:	88 0e       	add	r8, r24
    1b1a:	99 1e       	adc	r9, r25
    1b1c:	a1 14       	cp	r10, r1
    1b1e:	b1 04       	cpc	r11, r1
    1b20:	89 f4       	brne	.+34     	; 0x1b44 <prvInitialiseNewTask+0x6a>
    1b22:	15 c0       	rjmp	.+42     	; 0x1b4e <prvInitialiseNewTask+0x74>
    1b24:	82 2f       	mov	r24, r18
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	f5 01       	movw	r30, r10
    1b2a:	e8 0f       	add	r30, r24
    1b2c:	f9 1f       	adc	r31, r25
    1b2e:	30 81       	ld	r19, Z
    1b30:	de 01       	movw	r26, r28
    1b32:	a8 0f       	add	r26, r24
    1b34:	b9 1f       	adc	r27, r25
    1b36:	5d 96       	adiw	r26, 0x1d	; 29
    1b38:	3c 93       	st	X, r19
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 23       	and	r24, r24
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <prvInitialiseNewTask+0x70>
    1b40:	2f 5f       	subi	r18, 0xFF	; 255
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <prvInitialiseNewTask+0x6c>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	20 31       	cpi	r18, 0x10	; 16
    1b48:	68 f3       	brcs	.-38     	; 0x1b24 <prvInitialiseNewTask+0x4a>
    1b4a:	1c a6       	std	Y+44, r1	; 0x2c
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <prvInitialiseNewTask+0x76>
    1b4e:	1d 8e       	std	Y+29, r1	; 0x1d
    1b50:	0a 30       	cpi	r16, 0x0A	; 10
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <prvInitialiseNewTask+0x7c>
    1b54:	09 e0       	ldi	r16, 0x09	; 9
    1b56:	0a 8f       	std	Y+26, r16	; 0x1a
    1b58:	0d a7       	std	Y+45, r16	; 0x2d
    1b5a:	1e a6       	std	Y+46, r1	; 0x2e
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	02 96       	adiw	r24, 0x02	; 2
    1b60:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInitialiseItem>
    1b64:	ce 01       	movw	r24, r28
    1b66:	0e 96       	adiw	r24, 0x0e	; 14
    1b68:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <vListInitialiseItem>
    1b6c:	db 87       	std	Y+11, r29	; 0x0b
    1b6e:	ca 87       	std	Y+10, r28	; 0x0a
    1b70:	8a e0       	ldi	r24, 0x0A	; 10
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e0       	ldi	r26, 0x00	; 0
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	80 1b       	sub	r24, r16
    1b7a:	91 09       	sbc	r25, r1
    1b7c:	a1 09       	sbc	r26, r1
    1b7e:	b1 09       	sbc	r27, r1
    1b80:	8e 87       	std	Y+14, r24	; 0x0e
    1b82:	9f 87       	std	Y+15, r25	; 0x0f
    1b84:	a8 8b       	std	Y+16, r26	; 0x10
    1b86:	b9 8b       	std	Y+17, r27	; 0x11
    1b88:	df 8b       	std	Y+23, r29	; 0x17
    1b8a:	ce 8b       	std	Y+22, r28	; 0x16
    1b8c:	84 e0       	ldi	r24, 0x04	; 4
    1b8e:	fe 01       	movw	r30, r28
    1b90:	bf 96       	adiw	r30, 0x2f	; 47
    1b92:	df 01       	movw	r26, r30
    1b94:	1d 92       	st	X+, r1
    1b96:	8a 95       	dec	r24
    1b98:	e9 f7       	brne	.-6      	; 0x1b94 <prvInitialiseNewTask+0xba>
    1b9a:	1b aa       	std	Y+51, r1	; 0x33
    1b9c:	a3 01       	movw	r20, r6
    1b9e:	b2 01       	movw	r22, r4
    1ba0:	c4 01       	movw	r24, r8
    1ba2:	0e 94 66 05 	call	0xacc	; 0xacc <pxPortInitialiseStack>
    1ba6:	99 83       	std	Y+1, r25	; 0x01
    1ba8:	88 83       	st	Y, r24
    1baa:	e1 14       	cp	r14, r1
    1bac:	f1 04       	cpc	r15, r1
    1bae:	19 f0       	breq	.+6      	; 0x1bb6 <prvInitialiseNewTask+0xdc>
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	d1 83       	std	Z+1, r29	; 0x01
    1bb4:	c0 83       	st	Z, r28
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	0f 91       	pop	r16
    1bbc:	ff 90       	pop	r15
    1bbe:	ef 90       	pop	r14
    1bc0:	df 90       	pop	r13
    1bc2:	cf 90       	pop	r12
    1bc4:	bf 90       	pop	r11
    1bc6:	af 90       	pop	r10
    1bc8:	9f 90       	pop	r9
    1bca:	8f 90       	pop	r8
    1bcc:	7f 90       	pop	r7
    1bce:	6f 90       	pop	r6
    1bd0:	5f 90       	pop	r5
    1bd2:	4f 90       	pop	r4
    1bd4:	08 95       	ret

00001bd6 <prvInitialiseTaskLists>:
    1bd6:	cf 93       	push	r28
    1bd8:	c0 e0       	ldi	r28, 0x00	; 0
    1bda:	09 c0       	rjmp	.+18     	; 0x1bee <prvInitialiseTaskLists+0x18>
    1bdc:	2b e0       	ldi	r18, 0x0B	; 11
    1bde:	c2 9f       	mul	r28, r18
    1be0:	c0 01       	movw	r24, r0
    1be2:	11 24       	eor	r1, r1
    1be4:	8b 5b       	subi	r24, 0xBB	; 187
    1be6:	99 4e       	sbci	r25, 0xE9	; 233
    1be8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <vListInitialise>
    1bec:	cf 5f       	subi	r28, 0xFF	; 255
    1bee:	ca 30       	cpi	r28, 0x0A	; 10
    1bf0:	a8 f3       	brcs	.-22     	; 0x1bdc <prvInitialiseTaskLists+0x6>
    1bf2:	8a e3       	ldi	r24, 0x3A	; 58
    1bf4:	96 e1       	ldi	r25, 0x16	; 22
    1bf6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <vListInitialise>
    1bfa:	8f e2       	ldi	r24, 0x2F	; 47
    1bfc:	96 e1       	ldi	r25, 0x16	; 22
    1bfe:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <vListInitialise>
    1c02:	80 e2       	ldi	r24, 0x20	; 32
    1c04:	96 e1       	ldi	r25, 0x16	; 22
    1c06:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <vListInitialise>
    1c0a:	85 e1       	ldi	r24, 0x15	; 21
    1c0c:	96 e1       	ldi	r25, 0x16	; 22
    1c0e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <vListInitialise>
    1c12:	89 e0       	ldi	r24, 0x09	; 9
    1c14:	96 e1       	ldi	r25, 0x16	; 22
    1c16:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <vListInitialise>
    1c1a:	8a e3       	ldi	r24, 0x3A	; 58
    1c1c:	96 e1       	ldi	r25, 0x16	; 22
    1c1e:	90 93 2e 16 	sts	0x162E, r25	; 0x80162e <pxDelayedTaskList+0x1>
    1c22:	80 93 2d 16 	sts	0x162D, r24	; 0x80162d <pxDelayedTaskList>
    1c26:	8f e2       	ldi	r24, 0x2F	; 47
    1c28:	96 e1       	ldi	r25, 0x16	; 22
    1c2a:	90 93 2c 16 	sts	0x162C, r25	; 0x80162c <pxOverflowDelayedTaskList+0x1>
    1c2e:	80 93 2b 16 	sts	0x162B, r24	; 0x80162b <pxOverflowDelayedTaskList>
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <prvAddNewTaskToReadyList>:
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	ec 01       	movw	r28, r24
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	0f 92       	push	r0
    1c42:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxCurrentNumberOfTasks>
    1c46:	8f 5f       	subi	r24, 0xFF	; 255
    1c48:	80 93 08 16 	sts	0x1608, r24	; 0x801608 <uxCurrentNumberOfTasks>
    1c4c:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1c50:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1c54:	89 2b       	or	r24, r25
    1c56:	51 f4       	brne	.+20     	; 0x1c6c <prvAddNewTaskToReadyList+0x36>
    1c58:	d0 93 b4 16 	sts	0x16B4, r29	; 0x8016b4 <pxCurrentTCB+0x1>
    1c5c:	c0 93 b3 16 	sts	0x16B3, r28	; 0x8016b3 <pxCurrentTCB>
    1c60:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxCurrentNumberOfTasks>
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	91 f4       	brne	.+36     	; 0x1c8c <prvAddNewTaskToReadyList+0x56>
    1c68:	b6 df       	rcall	.-148    	; 0x1bd6 <prvInitialiseTaskLists>
    1c6a:	10 c0       	rjmp	.+32     	; 0x1c8c <prvAddNewTaskToReadyList+0x56>
    1c6c:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <xSchedulerRunning>
    1c70:	81 11       	cpse	r24, r1
    1c72:	0c c0       	rjmp	.+24     	; 0x1c8c <prvAddNewTaskToReadyList+0x56>
    1c74:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1c78:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1c7c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c80:	89 17       	cp	r24, r25
    1c82:	20 f0       	brcs	.+8      	; 0x1c8c <prvAddNewTaskToReadyList+0x56>
    1c84:	d0 93 b4 16 	sts	0x16B4, r29	; 0x8016b4 <pxCurrentTCB+0x1>
    1c88:	c0 93 b3 16 	sts	0x16B3, r28	; 0x8016b3 <pxCurrentTCB>
    1c8c:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <uxTaskNumber>
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	80 93 fb 15 	sts	0x15FB, r24	; 0x8015fb <uxTaskNumber>
    1c96:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c98:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    1c9c:	8e 17       	cp	r24, r30
    1c9e:	10 f4       	brcc	.+4      	; 0x1ca4 <prvAddNewTaskToReadyList+0x6e>
    1ca0:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    1ca4:	8b e0       	ldi	r24, 0x0B	; 11
    1ca6:	8e 9f       	mul	r24, r30
    1ca8:	f0 01       	movw	r30, r0
    1caa:	11 24       	eor	r1, r1
    1cac:	eb 5b       	subi	r30, 0xBB	; 187
    1cae:	f9 4e       	sbci	r31, 0xE9	; 233
    1cb0:	01 80       	ldd	r0, Z+1	; 0x01
    1cb2:	f2 81       	ldd	r31, Z+2	; 0x02
    1cb4:	e0 2d       	mov	r30, r0
    1cb6:	ff 83       	std	Y+7, r31	; 0x07
    1cb8:	ee 83       	std	Y+6, r30	; 0x06
    1cba:	26 81       	ldd	r18, Z+6	; 0x06
    1cbc:	37 81       	ldd	r19, Z+7	; 0x07
    1cbe:	39 87       	std	Y+9, r19	; 0x09
    1cc0:	28 87       	std	Y+8, r18	; 0x08
    1cc2:	a6 81       	ldd	r26, Z+6	; 0x06
    1cc4:	b7 81       	ldd	r27, Z+7	; 0x07
    1cc6:	9e 01       	movw	r18, r28
    1cc8:	2e 5f       	subi	r18, 0xFE	; 254
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	15 96       	adiw	r26, 0x05	; 5
    1cce:	3c 93       	st	X, r19
    1cd0:	2e 93       	st	-X, r18
    1cd2:	14 97       	sbiw	r26, 0x04	; 4
    1cd4:	37 83       	std	Z+7, r19	; 0x07
    1cd6:	26 83       	std	Z+6, r18	; 0x06
    1cd8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1cda:	8e 9f       	mul	r24, r30
    1cdc:	f0 01       	movw	r30, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	eb 5b       	subi	r30, 0xBB	; 187
    1ce2:	f9 4e       	sbci	r31, 0xE9	; 233
    1ce4:	fd 87       	std	Y+13, r31	; 0x0d
    1ce6:	ec 87       	std	Y+12, r30	; 0x0c
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 5f       	subi	r24, 0xFF	; 255
    1cec:	80 83       	st	Z, r24
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <xSchedulerRunning>
    1cf6:	88 23       	and	r24, r24
    1cf8:	51 f0       	breq	.+20     	; 0x1d0e <prvAddNewTaskToReadyList+0xd8>
    1cfa:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1cfe:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1d02:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d06:	98 17       	cp	r25, r24
    1d08:	10 f4       	brcc	.+4      	; 0x1d0e <prvAddNewTaskToReadyList+0xd8>
    1d0a:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <prvCheckTasksWaitingTermination>:
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	1b c0       	rjmp	.+54     	; 0x1d50 <prvCheckTasksWaitingTermination+0x3c>
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	0f 92       	push	r0
    1d20:	e0 91 1c 16 	lds	r30, 0x161C	; 0x80161c <xTasksWaitingTermination+0x7>
    1d24:	f0 91 1d 16 	lds	r31, 0x161D	; 0x80161d <xTasksWaitingTermination+0x8>
    1d28:	c0 85       	ldd	r28, Z+8	; 0x08
    1d2a:	d1 85       	ldd	r29, Z+9	; 0x09
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	02 96       	adiw	r24, 0x02	; 2
    1d30:	0e 94 33 05 	call	0xa66	; 0xa66 <uxListRemove>
    1d34:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxCurrentNumberOfTasks>
    1d38:	81 50       	subi	r24, 0x01	; 1
    1d3a:	80 93 08 16 	sts	0x1608, r24	; 0x801608 <uxCurrentNumberOfTasks>
    1d3e:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <uxDeletedTasksWaitingCleanUp>
    1d42:	81 50       	subi	r24, 0x01	; 1
    1d44:	80 93 14 16 	sts	0x1614, r24	; 0x801614 <uxDeletedTasksWaitingCleanUp>
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	b8 de       	rcall	.-656    	; 0x1ac0 <prvDeleteTCB>
    1d50:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <uxDeletedTasksWaitingCleanUp>
    1d54:	81 11       	cpse	r24, r1
    1d56:	e1 cf       	rjmp	.-62     	; 0x1d1a <prvCheckTasksWaitingTermination+0x6>
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	08 95       	ret

00001d5e <prvAddCurrentTaskToDelayedList>:
    1d5e:	8f 92       	push	r8
    1d60:	9f 92       	push	r9
    1d62:	af 92       	push	r10
    1d64:	bf 92       	push	r11
    1d66:	cf 92       	push	r12
    1d68:	df 92       	push	r13
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	6b 01       	movw	r12, r22
    1d74:	7c 01       	movw	r14, r24
    1d76:	c4 2f       	mov	r28, r20
    1d78:	80 90 04 16 	lds	r8, 0x1604	; 0x801604 <xTickCount>
    1d7c:	90 90 05 16 	lds	r9, 0x1605	; 0x801605 <xTickCount+0x1>
    1d80:	a0 90 06 16 	lds	r10, 0x1606	; 0x801606 <xTickCount+0x2>
    1d84:	b0 90 07 16 	lds	r11, 0x1607	; 0x801607 <xTickCount+0x3>
    1d88:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1d8c:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1d90:	02 96       	adiw	r24, 0x02	; 2
    1d92:	0e 94 33 05 	call	0xa66	; 0xa66 <uxListRemove>
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	c8 16       	cp	r12, r24
    1d9a:	d8 06       	cpc	r13, r24
    1d9c:	e8 06       	cpc	r14, r24
    1d9e:	f8 06       	cpc	r15, r24
    1da0:	b1 f5       	brne	.+108    	; 0x1e0e <prvAddCurrentTaskToDelayedList+0xb0>
    1da2:	cc 23       	and	r28, r28
    1da4:	a1 f1       	breq	.+104    	; 0x1e0e <prvAddCurrentTaskToDelayedList+0xb0>
    1da6:	e9 e0       	ldi	r30, 0x09	; 9
    1da8:	f6 e1       	ldi	r31, 0x16	; 22
    1daa:	a1 81       	ldd	r26, Z+1	; 0x01
    1dac:	b2 81       	ldd	r27, Z+2	; 0x02
    1dae:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1db2:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1db6:	bf 83       	std	Y+7, r27	; 0x07
    1db8:	ae 83       	std	Y+6, r26	; 0x06
    1dba:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1dbe:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1dc2:	16 96       	adiw	r26, 0x06	; 6
    1dc4:	8d 91       	ld	r24, X+
    1dc6:	9c 91       	ld	r25, X
    1dc8:	17 97       	sbiw	r26, 0x07	; 7
    1dca:	99 87       	std	Y+9, r25	; 0x09
    1dcc:	88 87       	std	Y+8, r24	; 0x08
    1dce:	16 96       	adiw	r26, 0x06	; 6
    1dd0:	cd 91       	ld	r28, X+
    1dd2:	dc 91       	ld	r29, X
    1dd4:	17 97       	sbiw	r26, 0x07	; 7
    1dd6:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1dda:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1dde:	02 96       	adiw	r24, 0x02	; 2
    1de0:	9d 83       	std	Y+5, r25	; 0x05
    1de2:	8c 83       	std	Y+4, r24	; 0x04
    1de4:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1de8:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1dec:	02 96       	adiw	r24, 0x02	; 2
    1dee:	17 96       	adiw	r26, 0x07	; 7
    1df0:	9c 93       	st	X, r25
    1df2:	8e 93       	st	-X, r24
    1df4:	16 97       	sbiw	r26, 0x06	; 6
    1df6:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1dfa:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1dfe:	1d 96       	adiw	r26, 0x0d	; 13
    1e00:	fc 93       	st	X, r31
    1e02:	ee 93       	st	-X, r30
    1e04:	1c 97       	sbiw	r26, 0x0c	; 12
    1e06:	80 81       	ld	r24, Z
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	80 83       	st	Z, r24
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <prvAddCurrentTaskToDelayedList+0x12e>
    1e0e:	c8 0c       	add	r12, r8
    1e10:	d9 1c       	adc	r13, r9
    1e12:	ea 1c       	adc	r14, r10
    1e14:	fb 1c       	adc	r15, r11
    1e16:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1e1a:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1e1e:	c2 82       	std	Z+2, r12	; 0x02
    1e20:	d3 82       	std	Z+3, r13	; 0x03
    1e22:	e4 82       	std	Z+4, r14	; 0x04
    1e24:	f5 82       	std	Z+5, r15	; 0x05
    1e26:	c8 14       	cp	r12, r8
    1e28:	d9 04       	cpc	r13, r9
    1e2a:	ea 04       	cpc	r14, r10
    1e2c:	fb 04       	cpc	r15, r11
    1e2e:	68 f4       	brcc	.+26     	; 0x1e4a <prvAddCurrentTaskToDelayedList+0xec>
    1e30:	60 91 b3 16 	lds	r22, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1e34:	70 91 b4 16 	lds	r23, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1e38:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxOverflowDelayedTaskList>
    1e3c:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxOverflowDelayedTaskList+0x1>
    1e40:	6e 5f       	subi	r22, 0xFE	; 254
    1e42:	7f 4f       	sbci	r23, 0xFF	; 255
    1e44:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vListInsert>
    1e48:	21 c0       	rjmp	.+66     	; 0x1e8c <prvAddCurrentTaskToDelayedList+0x12e>
    1e4a:	60 91 b3 16 	lds	r22, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1e4e:	70 91 b4 16 	lds	r23, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1e52:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <pxDelayedTaskList>
    1e56:	90 91 2e 16 	lds	r25, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    1e5a:	6e 5f       	subi	r22, 0xFE	; 254
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vListInsert>
    1e62:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xNextTaskUnblockTime>
    1e66:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1e6a:	a0 91 f9 15 	lds	r26, 0x15F9	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1e6e:	b0 91 fa 15 	lds	r27, 0x15FA	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1e72:	c8 16       	cp	r12, r24
    1e74:	d9 06       	cpc	r13, r25
    1e76:	ea 06       	cpc	r14, r26
    1e78:	fb 06       	cpc	r15, r27
    1e7a:	40 f4       	brcc	.+16     	; 0x1e8c <prvAddCurrentTaskToDelayedList+0x12e>
    1e7c:	c0 92 f7 15 	sts	0x15F7, r12	; 0x8015f7 <xNextTaskUnblockTime>
    1e80:	d0 92 f8 15 	sts	0x15F8, r13	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1e84:	e0 92 f9 15 	sts	0x15F9, r14	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1e88:	f0 92 fa 15 	sts	0x15FA, r15	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	bf 90       	pop	r11
    1e9a:	af 90       	pop	r10
    1e9c:	9f 90       	pop	r9
    1e9e:	8f 90       	pop	r8
    1ea0:	08 95       	ret

00001ea2 <xTaskCreate>:
    1ea2:	2f 92       	push	r2
    1ea4:	3f 92       	push	r3
    1ea6:	4f 92       	push	r4
    1ea8:	5f 92       	push	r5
    1eaa:	6f 92       	push	r6
    1eac:	7f 92       	push	r7
    1eae:	8f 92       	push	r8
    1eb0:	9f 92       	push	r9
    1eb2:	af 92       	push	r10
    1eb4:	bf 92       	push	r11
    1eb6:	cf 92       	push	r12
    1eb8:	df 92       	push	r13
    1eba:	ef 92       	push	r14
    1ebc:	ff 92       	push	r15
    1ebe:	0f 93       	push	r16
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	3c 01       	movw	r6, r24
    1ec6:	1b 01       	movw	r2, r22
    1ec8:	4a 01       	movw	r8, r20
    1eca:	29 01       	movw	r4, r18
    1ecc:	ca 01       	movw	r24, r20
    1ece:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <pvPortMalloc>
    1ed2:	6c 01       	movw	r12, r24
    1ed4:	89 2b       	or	r24, r25
    1ed6:	71 f0       	breq	.+28     	; 0x1ef4 <xTaskCreate+0x52>
    1ed8:	84 e3       	ldi	r24, 0x34	; 52
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <pvPortMalloc>
    1ee0:	ec 01       	movw	r28, r24
    1ee2:	89 2b       	or	r24, r25
    1ee4:	19 f0       	breq	.+6      	; 0x1eec <xTaskCreate+0x4a>
    1ee6:	dc 8e       	std	Y+28, r13	; 0x1c
    1ee8:	cb 8e       	std	Y+27, r12	; 0x1b
    1eea:	06 c0       	rjmp	.+12     	; 0x1ef8 <xTaskCreate+0x56>
    1eec:	c6 01       	movw	r24, r12
    1eee:	0e 94 a4 04 	call	0x948	; 0x948 <vPortFree>
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <xTaskCreate+0x56>
    1ef4:	c0 e0       	ldi	r28, 0x00	; 0
    1ef6:	d0 e0       	ldi	r29, 0x00	; 0
    1ef8:	20 97       	sbiw	r28, 0x00	; 0
    1efa:	61 f0       	breq	.+24     	; 0x1f14 <xTaskCreate+0x72>
    1efc:	a1 2c       	mov	r10, r1
    1efe:	b1 2c       	mov	r11, r1
    1f00:	6e 01       	movw	r12, r28
    1f02:	92 01       	movw	r18, r4
    1f04:	a4 01       	movw	r20, r8
    1f06:	b1 01       	movw	r22, r2
    1f08:	c3 01       	movw	r24, r6
    1f0a:	e7 dd       	rcall	.-1074   	; 0x1ada <prvInitialiseNewTask>
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	93 de       	rcall	.-730    	; 0x1c36 <prvAddNewTaskToReadyList>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	01 c0       	rjmp	.+2      	; 0x1f16 <xTaskCreate+0x74>
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	bf 90       	pop	r11
    1f26:	af 90       	pop	r10
    1f28:	9f 90       	pop	r9
    1f2a:	8f 90       	pop	r8
    1f2c:	7f 90       	pop	r7
    1f2e:	6f 90       	pop	r6
    1f30:	5f 90       	pop	r5
    1f32:	4f 90       	pop	r4
    1f34:	3f 90       	pop	r3
    1f36:	2f 90       	pop	r2
    1f38:	08 95       	ret

00001f3a <vTaskStartScheduler>:
    1f3a:	ef 92       	push	r14
    1f3c:	ff 92       	push	r15
    1f3e:	0f 93       	push	r16
    1f40:	0f 2e       	mov	r0, r31
    1f42:	f5 ef       	ldi	r31, 0xF5	; 245
    1f44:	ef 2e       	mov	r14, r31
    1f46:	f5 e1       	ldi	r31, 0x15	; 21
    1f48:	ff 2e       	mov	r15, r31
    1f4a:	f0 2d       	mov	r31, r0
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 ec       	ldi	r20, 0xC0	; 192
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	69 ea       	ldi	r22, 0xA9	; 169
    1f58:	72 e0       	ldi	r23, 0x02	; 2
    1f5a:	8d ec       	ldi	r24, 0xCD	; 205
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a1 df       	rcall	.-190    	; 0x1ea2 <xTaskCreate>
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <vTaskStartScheduler+0x2e>
    1f64:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <xTimerCreateTimerTask>
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	c9 f4       	brne	.+50     	; 0x1f9e <vTaskStartScheduler+0x64>
    1f6c:	f8 94       	cli
    1f6e:	8f ef       	ldi	r24, 0xFF	; 255
    1f70:	9f ef       	ldi	r25, 0xFF	; 255
    1f72:	dc 01       	movw	r26, r24
    1f74:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <xNextTaskUnblockTime>
    1f78:	90 93 f8 15 	sts	0x15F8, r25	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1f7c:	a0 93 f9 15 	sts	0x15F9, r26	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1f80:	b0 93 fa 15 	sts	0x15FA, r27	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	80 93 02 16 	sts	0x1602, r24	; 0x801602 <xSchedulerRunning>
    1f8a:	10 92 04 16 	sts	0x1604, r1	; 0x801604 <xTickCount>
    1f8e:	10 92 05 16 	sts	0x1605, r1	; 0x801605 <xTickCount+0x1>
    1f92:	10 92 06 16 	sts	0x1606, r1	; 0x801606 <xTickCount+0x2>
    1f96:	10 92 07 16 	sts	0x1607, r1	; 0x801607 <xTickCount+0x3>
    1f9a:	0e 94 7d 05 	call	0xafa	; 0xafa <xPortStartScheduler>
    1f9e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	08 95       	ret

00001faa <vTaskSuspendAll>:
    1faa:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    1fae:	8f 5f       	subi	r24, 0xFF	; 255
    1fb0:	80 93 f4 15 	sts	0x15F4, r24	; 0x8015f4 <uxSchedulerSuspended>
    1fb4:	08 95       	ret

00001fb6 <xTaskGetTickCount>:
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	0f 92       	push	r0
    1fbc:	60 91 04 16 	lds	r22, 0x1604	; 0x801604 <xTickCount>
    1fc0:	70 91 05 16 	lds	r23, 0x1605	; 0x801605 <xTickCount+0x1>
    1fc4:	80 91 06 16 	lds	r24, 0x1606	; 0x801606 <xTickCount+0x2>
    1fc8:	90 91 07 16 	lds	r25, 0x1607	; 0x801607 <xTickCount+0x3>
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	08 95       	ret

00001fd2 <xTaskIncrementTick>:
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	05 c1       	rjmp	.+522    	; 0x21f0 <__DATA_REGION_LENGTH__+0x1f0>
    1fe6:	c0 90 04 16 	lds	r12, 0x1604	; 0x801604 <xTickCount>
    1fea:	d0 90 05 16 	lds	r13, 0x1605	; 0x801605 <xTickCount+0x1>
    1fee:	e0 90 06 16 	lds	r14, 0x1606	; 0x801606 <xTickCount+0x2>
    1ff2:	f0 90 07 16 	lds	r15, 0x1607	; 0x801607 <xTickCount+0x3>
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	c8 1a       	sub	r12, r24
    1ffa:	d8 0a       	sbc	r13, r24
    1ffc:	e8 0a       	sbc	r14, r24
    1ffe:	f8 0a       	sbc	r15, r24
    2000:	c0 92 04 16 	sts	0x1604, r12	; 0x801604 <xTickCount>
    2004:	d0 92 05 16 	sts	0x1605, r13	; 0x801605 <xTickCount+0x1>
    2008:	e0 92 06 16 	sts	0x1606, r14	; 0x801606 <xTickCount+0x2>
    200c:	f0 92 07 16 	sts	0x1607, r15	; 0x801607 <xTickCount+0x3>
    2010:	c1 14       	cp	r12, r1
    2012:	d1 04       	cpc	r13, r1
    2014:	e1 04       	cpc	r14, r1
    2016:	f1 04       	cpc	r15, r1
    2018:	b1 f4       	brne	.+44     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    201a:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <pxDelayedTaskList>
    201e:	90 91 2e 16 	lds	r25, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    2022:	20 91 2b 16 	lds	r18, 0x162B	; 0x80162b <pxOverflowDelayedTaskList>
    2026:	30 91 2c 16 	lds	r19, 0x162C	; 0x80162c <pxOverflowDelayedTaskList+0x1>
    202a:	30 93 2e 16 	sts	0x162E, r19	; 0x80162e <pxDelayedTaskList+0x1>
    202e:	20 93 2d 16 	sts	0x162D, r18	; 0x80162d <pxDelayedTaskList>
    2032:	90 93 2c 16 	sts	0x162C, r25	; 0x80162c <pxOverflowDelayedTaskList+0x1>
    2036:	80 93 2b 16 	sts	0x162B, r24	; 0x80162b <pxOverflowDelayedTaskList>
    203a:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <xNumOfOverflows>
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	80 93 fc 15 	sts	0x15FC, r24	; 0x8015fc <xNumOfOverflows>
    2044:	16 dd       	rcall	.-1492   	; 0x1a72 <prvResetNextTaskUnblockTime>
    2046:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xNextTaskUnblockTime>
    204a:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    204e:	a0 91 f9 15 	lds	r26, 0x15F9	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    2052:	b0 91 fa 15 	lds	r27, 0x15FA	; 0x8015fa <xNextTaskUnblockTime+0x3>
    2056:	c8 16       	cp	r12, r24
    2058:	d9 06       	cpc	r13, r25
    205a:	ea 06       	cpc	r14, r26
    205c:	fb 06       	cpc	r15, r27
    205e:	20 f4       	brcc	.+8      	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	b2 c0       	rjmp	.+356    	; 0x21c8 <__DATA_REGION_LENGTH__+0x1c8>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	01 c0       	rjmp	.+2      	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	e0 91 2d 16 	lds	r30, 0x162D	; 0x80162d <pxDelayedTaskList>
    206e:	f0 91 2e 16 	lds	r31, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    2072:	90 81       	ld	r25, Z
    2074:	91 11       	cpse	r25, r1
    2076:	0c c0       	rjmp	.+24     	; 0x2090 <__DATA_REGION_LENGTH__+0x90>
    2078:	4f ef       	ldi	r20, 0xFF	; 255
    207a:	5f ef       	ldi	r21, 0xFF	; 255
    207c:	ba 01       	movw	r22, r20
    207e:	40 93 f7 15 	sts	0x15F7, r20	; 0x8015f7 <xNextTaskUnblockTime>
    2082:	50 93 f8 15 	sts	0x15F8, r21	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    2086:	60 93 f9 15 	sts	0x15F9, r22	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    208a:	70 93 fa 15 	sts	0x15FA, r23	; 0x8015fa <xNextTaskUnblockTime+0x3>
    208e:	9c c0       	rjmp	.+312    	; 0x21c8 <__DATA_REGION_LENGTH__+0x1c8>
    2090:	e0 91 2d 16 	lds	r30, 0x162D	; 0x80162d <pxDelayedTaskList>
    2094:	f0 91 2e 16 	lds	r31, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    2098:	07 80       	ldd	r0, Z+7	; 0x07
    209a:	f0 85       	ldd	r31, Z+8	; 0x08
    209c:	e0 2d       	mov	r30, r0
    209e:	00 84       	ldd	r0, Z+8	; 0x08
    20a0:	f1 85       	ldd	r31, Z+9	; 0x09
    20a2:	e0 2d       	mov	r30, r0
    20a4:	42 81       	ldd	r20, Z+2	; 0x02
    20a6:	53 81       	ldd	r21, Z+3	; 0x03
    20a8:	64 81       	ldd	r22, Z+4	; 0x04
    20aa:	75 81       	ldd	r23, Z+5	; 0x05
    20ac:	c4 16       	cp	r12, r20
    20ae:	d5 06       	cpc	r13, r21
    20b0:	e6 06       	cpc	r14, r22
    20b2:	f7 06       	cpc	r15, r23
    20b4:	48 f4       	brcc	.+18     	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    20b6:	40 93 f7 15 	sts	0x15F7, r20	; 0x8015f7 <xNextTaskUnblockTime>
    20ba:	50 93 f8 15 	sts	0x15F8, r21	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    20be:	60 93 f9 15 	sts	0x15F9, r22	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    20c2:	70 93 fa 15 	sts	0x15FA, r23	; 0x8015fa <xNextTaskUnblockTime+0x3>
    20c6:	80 c0       	rjmp	.+256    	; 0x21c8 <__DATA_REGION_LENGTH__+0x1c8>
    20c8:	a4 85       	ldd	r26, Z+12	; 0x0c
    20ca:	b5 85       	ldd	r27, Z+13	; 0x0d
    20cc:	c6 81       	ldd	r28, Z+6	; 0x06
    20ce:	d7 81       	ldd	r29, Z+7	; 0x07
    20d0:	20 85       	ldd	r18, Z+8	; 0x08
    20d2:	31 85       	ldd	r19, Z+9	; 0x09
    20d4:	3f 83       	std	Y+7, r19	; 0x07
    20d6:	2e 83       	std	Y+6, r18	; 0x06
    20d8:	c0 85       	ldd	r28, Z+8	; 0x08
    20da:	d1 85       	ldd	r29, Z+9	; 0x09
    20dc:	26 81       	ldd	r18, Z+6	; 0x06
    20de:	37 81       	ldd	r19, Z+7	; 0x07
    20e0:	3d 83       	std	Y+5, r19	; 0x05
    20e2:	2c 83       	std	Y+4, r18	; 0x04
    20e4:	11 96       	adiw	r26, 0x01	; 1
    20e6:	4d 91       	ld	r20, X+
    20e8:	5c 91       	ld	r21, X
    20ea:	12 97       	sbiw	r26, 0x02	; 2
    20ec:	9f 01       	movw	r18, r30
    20ee:	2e 5f       	subi	r18, 0xFE	; 254
    20f0:	3f 4f       	sbci	r19, 0xFF	; 255
    20f2:	42 17       	cp	r20, r18
    20f4:	53 07       	cpc	r21, r19
    20f6:	31 f4       	brne	.+12     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    20f8:	40 85       	ldd	r20, Z+8	; 0x08
    20fa:	51 85       	ldd	r21, Z+9	; 0x09
    20fc:	12 96       	adiw	r26, 0x02	; 2
    20fe:	5c 93       	st	X, r21
    2100:	4e 93       	st	-X, r20
    2102:	11 97       	sbiw	r26, 0x01	; 1
    2104:	15 86       	std	Z+13, r1	; 0x0d
    2106:	14 86       	std	Z+12, r1	; 0x0c
    2108:	9c 91       	ld	r25, X
    210a:	91 50       	subi	r25, 0x01	; 1
    210c:	9c 93       	st	X, r25
    210e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2110:	b1 8d       	ldd	r27, Z+25	; 0x19
    2112:	10 97       	sbiw	r26, 0x00	; 0
    2114:	09 f1       	breq	.+66     	; 0x2158 <__DATA_REGION_LENGTH__+0x158>
    2116:	c2 89       	ldd	r28, Z+18	; 0x12
    2118:	d3 89       	ldd	r29, Z+19	; 0x13
    211a:	44 89       	ldd	r20, Z+20	; 0x14
    211c:	55 89       	ldd	r21, Z+21	; 0x15
    211e:	5f 83       	std	Y+7, r21	; 0x07
    2120:	4e 83       	std	Y+6, r20	; 0x06
    2122:	c4 89       	ldd	r28, Z+20	; 0x14
    2124:	d5 89       	ldd	r29, Z+21	; 0x15
    2126:	42 89       	ldd	r20, Z+18	; 0x12
    2128:	53 89       	ldd	r21, Z+19	; 0x13
    212a:	5d 83       	std	Y+5, r21	; 0x05
    212c:	4c 83       	std	Y+4, r20	; 0x04
    212e:	11 96       	adiw	r26, 0x01	; 1
    2130:	6d 91       	ld	r22, X+
    2132:	7c 91       	ld	r23, X
    2134:	12 97       	sbiw	r26, 0x02	; 2
    2136:	af 01       	movw	r20, r30
    2138:	42 5f       	subi	r20, 0xF2	; 242
    213a:	5f 4f       	sbci	r21, 0xFF	; 255
    213c:	64 17       	cp	r22, r20
    213e:	75 07       	cpc	r23, r21
    2140:	31 f4       	brne	.+12     	; 0x214e <__DATA_REGION_LENGTH__+0x14e>
    2142:	44 89       	ldd	r20, Z+20	; 0x14
    2144:	55 89       	ldd	r21, Z+21	; 0x15
    2146:	12 96       	adiw	r26, 0x02	; 2
    2148:	5c 93       	st	X, r21
    214a:	4e 93       	st	-X, r20
    214c:	11 97       	sbiw	r26, 0x01	; 1
    214e:	11 8e       	std	Z+25, r1	; 0x19
    2150:	10 8e       	std	Z+24, r1	; 0x18
    2152:	9c 91       	ld	r25, X
    2154:	91 50       	subi	r25, 0x01	; 1
    2156:	9c 93       	st	X, r25
    2158:	a2 8d       	ldd	r26, Z+26	; 0x1a
    215a:	90 91 03 16 	lds	r25, 0x1603	; 0x801603 <uxTopReadyPriority>
    215e:	9a 17       	cp	r25, r26
    2160:	10 f4       	brcc	.+4      	; 0x2166 <__DATA_REGION_LENGTH__+0x166>
    2162:	a0 93 03 16 	sts	0x1603, r26	; 0x801603 <uxTopReadyPriority>
    2166:	9b e0       	ldi	r25, 0x0B	; 11
    2168:	9a 9f       	mul	r25, r26
    216a:	d0 01       	movw	r26, r0
    216c:	11 24       	eor	r1, r1
    216e:	ab 5b       	subi	r26, 0xBB	; 187
    2170:	b9 4e       	sbci	r27, 0xE9	; 233
    2172:	11 96       	adiw	r26, 0x01	; 1
    2174:	0d 90       	ld	r0, X+
    2176:	bc 91       	ld	r27, X
    2178:	a0 2d       	mov	r26, r0
    217a:	b7 83       	std	Z+7, r27	; 0x07
    217c:	a6 83       	std	Z+6, r26	; 0x06
    217e:	16 96       	adiw	r26, 0x06	; 6
    2180:	4d 91       	ld	r20, X+
    2182:	5c 91       	ld	r21, X
    2184:	17 97       	sbiw	r26, 0x07	; 7
    2186:	51 87       	std	Z+9, r21	; 0x09
    2188:	40 87       	std	Z+8, r20	; 0x08
    218a:	16 96       	adiw	r26, 0x06	; 6
    218c:	cd 91       	ld	r28, X+
    218e:	dc 91       	ld	r29, X
    2190:	17 97       	sbiw	r26, 0x07	; 7
    2192:	3d 83       	std	Y+5, r19	; 0x05
    2194:	2c 83       	std	Y+4, r18	; 0x04
    2196:	17 96       	adiw	r26, 0x07	; 7
    2198:	3c 93       	st	X, r19
    219a:	2e 93       	st	-X, r18
    219c:	16 97       	sbiw	r26, 0x06	; 6
    219e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21a0:	9a 9f       	mul	r25, r26
    21a2:	d0 01       	movw	r26, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	ab 5b       	subi	r26, 0xBB	; 187
    21a8:	b9 4e       	sbci	r27, 0xE9	; 233
    21aa:	b5 87       	std	Z+13, r27	; 0x0d
    21ac:	a4 87       	std	Z+12, r26	; 0x0c
    21ae:	9c 91       	ld	r25, X
    21b0:	9f 5f       	subi	r25, 0xFF	; 255
    21b2:	9c 93       	st	X, r25
    21b4:	22 8d       	ldd	r18, Z+26	; 0x1a
    21b6:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    21ba:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    21be:	92 8d       	ldd	r25, Z+26	; 0x1a
    21c0:	29 17       	cp	r18, r25
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <__DATA_REGION_LENGTH__+0x1c6>
    21c4:	4f cf       	rjmp	.-354    	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    21c6:	51 cf       	rjmp	.-350    	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    21c8:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    21cc:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    21d0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    21d2:	9b e0       	ldi	r25, 0x0B	; 11
    21d4:	e9 9f       	mul	r30, r25
    21d6:	f0 01       	movw	r30, r0
    21d8:	11 24       	eor	r1, r1
    21da:	eb 5b       	subi	r30, 0xBB	; 187
    21dc:	f9 4e       	sbci	r31, 0xE9	; 233
    21de:	90 81       	ld	r25, Z
    21e0:	92 30       	cpi	r25, 0x02	; 2
    21e2:	08 f0       	brcs	.+2      	; 0x21e6 <__DATA_REGION_LENGTH__+0x1e6>
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <xYieldPending>
    21ea:	91 11       	cpse	r25, r1
    21ec:	16 c0       	rjmp	.+44     	; 0x221a <__stack+0x1b>
    21ee:	16 c0       	rjmp	.+44     	; 0x221c <__stack+0x1d>
    21f0:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xPendedTicks>
    21f4:	90 91 ff 15 	lds	r25, 0x15FF	; 0x8015ff <xPendedTicks+0x1>
    21f8:	a0 91 00 16 	lds	r26, 0x1600	; 0x801600 <xPendedTicks+0x2>
    21fc:	b0 91 01 16 	lds	r27, 0x1601	; 0x801601 <xPendedTicks+0x3>
    2200:	01 96       	adiw	r24, 0x01	; 1
    2202:	a1 1d       	adc	r26, r1
    2204:	b1 1d       	adc	r27, r1
    2206:	80 93 fe 15 	sts	0x15FE, r24	; 0x8015fe <xPendedTicks>
    220a:	90 93 ff 15 	sts	0x15FF, r25	; 0x8015ff <xPendedTicks+0x1>
    220e:	a0 93 00 16 	sts	0x1600, r26	; 0x801600 <xPendedTicks+0x2>
    2212:	b0 93 01 16 	sts	0x1601, r27	; 0x801601 <xPendedTicks+0x3>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	01 c0       	rjmp	.+2      	; 0x221c <__stack+0x1d>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	df 90       	pop	r13
    2226:	cf 90       	pop	r12
    2228:	08 95       	ret

0000222a <xTaskResumeAll>:
    222a:	cf 92       	push	r12
    222c:	df 92       	push	r13
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	0f 92       	push	r0
    223c:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    2240:	81 50       	subi	r24, 0x01	; 1
    2242:	80 93 f4 15 	sts	0x15F4, r24	; 0x8015f4 <uxSchedulerSuspended>
    2246:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    224a:	81 11       	cpse	r24, r1
    224c:	be c0       	rjmp	.+380    	; 0x23ca <xTaskResumeAll+0x1a0>
    224e:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxCurrentNumberOfTasks>
    2252:	81 11       	cpse	r24, r1
    2254:	88 c0       	rjmp	.+272    	; 0x2366 <xTaskResumeAll+0x13c>
    2256:	bc c0       	rjmp	.+376    	; 0x23d0 <xTaskResumeAll+0x1a6>
    2258:	e0 91 27 16 	lds	r30, 0x1627	; 0x801627 <xPendingReadyList+0x7>
    225c:	f0 91 28 16 	lds	r31, 0x1628	; 0x801628 <xPendingReadyList+0x8>
    2260:	00 84       	ldd	r0, Z+8	; 0x08
    2262:	f1 85       	ldd	r31, Z+9	; 0x09
    2264:	e0 2d       	mov	r30, r0
    2266:	a0 8d       	ldd	r26, Z+24	; 0x18
    2268:	b1 8d       	ldd	r27, Z+25	; 0x19
    226a:	c2 89       	ldd	r28, Z+18	; 0x12
    226c:	d3 89       	ldd	r29, Z+19	; 0x13
    226e:	84 89       	ldd	r24, Z+20	; 0x14
    2270:	95 89       	ldd	r25, Z+21	; 0x15
    2272:	9f 83       	std	Y+7, r25	; 0x07
    2274:	8e 83       	std	Y+6, r24	; 0x06
    2276:	c4 89       	ldd	r28, Z+20	; 0x14
    2278:	d5 89       	ldd	r29, Z+21	; 0x15
    227a:	82 89       	ldd	r24, Z+18	; 0x12
    227c:	93 89       	ldd	r25, Z+19	; 0x13
    227e:	9d 83       	std	Y+5, r25	; 0x05
    2280:	8c 83       	std	Y+4, r24	; 0x04
    2282:	11 96       	adiw	r26, 0x01	; 1
    2284:	2d 91       	ld	r18, X+
    2286:	3c 91       	ld	r19, X
    2288:	12 97       	sbiw	r26, 0x02	; 2
    228a:	cf 01       	movw	r24, r30
    228c:	0e 96       	adiw	r24, 0x0e	; 14
    228e:	28 17       	cp	r18, r24
    2290:	39 07       	cpc	r19, r25
    2292:	31 f4       	brne	.+12     	; 0x22a0 <xTaskResumeAll+0x76>
    2294:	84 89       	ldd	r24, Z+20	; 0x14
    2296:	95 89       	ldd	r25, Z+21	; 0x15
    2298:	12 96       	adiw	r26, 0x02	; 2
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
    229e:	11 97       	sbiw	r26, 0x01	; 1
    22a0:	11 8e       	std	Z+25, r1	; 0x19
    22a2:	10 8e       	std	Z+24, r1	; 0x18
    22a4:	8c 91       	ld	r24, X
    22a6:	81 50       	subi	r24, 0x01	; 1
    22a8:	8c 93       	st	X, r24
    22aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    22ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    22ae:	c6 81       	ldd	r28, Z+6	; 0x06
    22b0:	d7 81       	ldd	r29, Z+7	; 0x07
    22b2:	80 85       	ldd	r24, Z+8	; 0x08
    22b4:	91 85       	ldd	r25, Z+9	; 0x09
    22b6:	9f 83       	std	Y+7, r25	; 0x07
    22b8:	8e 83       	std	Y+6, r24	; 0x06
    22ba:	c0 85       	ldd	r28, Z+8	; 0x08
    22bc:	d1 85       	ldd	r29, Z+9	; 0x09
    22be:	86 81       	ldd	r24, Z+6	; 0x06
    22c0:	97 81       	ldd	r25, Z+7	; 0x07
    22c2:	9d 83       	std	Y+5, r25	; 0x05
    22c4:	8c 83       	std	Y+4, r24	; 0x04
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	8d 91       	ld	r24, X+
    22ca:	9c 91       	ld	r25, X
    22cc:	12 97       	sbiw	r26, 0x02	; 2
    22ce:	9f 01       	movw	r18, r30
    22d0:	2e 5f       	subi	r18, 0xFE	; 254
    22d2:	3f 4f       	sbci	r19, 0xFF	; 255
    22d4:	82 17       	cp	r24, r18
    22d6:	93 07       	cpc	r25, r19
    22d8:	31 f4       	brne	.+12     	; 0x22e6 <xTaskResumeAll+0xbc>
    22da:	80 85       	ldd	r24, Z+8	; 0x08
    22dc:	91 85       	ldd	r25, Z+9	; 0x09
    22de:	12 96       	adiw	r26, 0x02	; 2
    22e0:	9c 93       	st	X, r25
    22e2:	8e 93       	st	-X, r24
    22e4:	11 97       	sbiw	r26, 0x01	; 1
    22e6:	15 86       	std	Z+13, r1	; 0x0d
    22e8:	14 86       	std	Z+12, r1	; 0x0c
    22ea:	8c 91       	ld	r24, X
    22ec:	81 50       	subi	r24, 0x01	; 1
    22ee:	8c 93       	st	X, r24
    22f0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22f2:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    22f6:	8a 17       	cp	r24, r26
    22f8:	10 f4       	brcc	.+4      	; 0x22fe <xTaskResumeAll+0xd4>
    22fa:	a0 93 03 16 	sts	0x1603, r26	; 0x801603 <uxTopReadyPriority>
    22fe:	8b e0       	ldi	r24, 0x0B	; 11
    2300:	8a 9f       	mul	r24, r26
    2302:	d0 01       	movw	r26, r0
    2304:	11 24       	eor	r1, r1
    2306:	ab 5b       	subi	r26, 0xBB	; 187
    2308:	b9 4e       	sbci	r27, 0xE9	; 233
    230a:	11 96       	adiw	r26, 0x01	; 1
    230c:	0d 90       	ld	r0, X+
    230e:	bc 91       	ld	r27, X
    2310:	a0 2d       	mov	r26, r0
    2312:	b7 83       	std	Z+7, r27	; 0x07
    2314:	a6 83       	std	Z+6, r26	; 0x06
    2316:	16 96       	adiw	r26, 0x06	; 6
    2318:	4d 91       	ld	r20, X+
    231a:	5c 91       	ld	r21, X
    231c:	17 97       	sbiw	r26, 0x07	; 7
    231e:	51 87       	std	Z+9, r21	; 0x09
    2320:	40 87       	std	Z+8, r20	; 0x08
    2322:	16 96       	adiw	r26, 0x06	; 6
    2324:	cd 91       	ld	r28, X+
    2326:	dc 91       	ld	r29, X
    2328:	17 97       	sbiw	r26, 0x07	; 7
    232a:	3d 83       	std	Y+5, r19	; 0x05
    232c:	2c 83       	std	Y+4, r18	; 0x04
    232e:	17 96       	adiw	r26, 0x07	; 7
    2330:	3c 93       	st	X, r19
    2332:	2e 93       	st	-X, r18
    2334:	16 97       	sbiw	r26, 0x06	; 6
    2336:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2338:	8a 9f       	mul	r24, r26
    233a:	d0 01       	movw	r26, r0
    233c:	11 24       	eor	r1, r1
    233e:	ab 5b       	subi	r26, 0xBB	; 187
    2340:	b9 4e       	sbci	r27, 0xE9	; 233
    2342:	b5 87       	std	Z+13, r27	; 0x0d
    2344:	a4 87       	std	Z+12, r26	; 0x0c
    2346:	8c 91       	ld	r24, X
    2348:	8f 5f       	subi	r24, 0xFF	; 255
    234a:	8c 93       	st	X, r24
    234c:	92 8d       	ldd	r25, Z+26	; 0x1a
    234e:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2352:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2356:	5a 96       	adiw	r26, 0x1a	; 26
    2358:	8c 91       	ld	r24, X
    235a:	98 17       	cp	r25, r24
    235c:	30 f0       	brcs	.+12     	; 0x236a <xTaskResumeAll+0x140>
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    2364:	02 c0       	rjmp	.+4      	; 0x236a <xTaskResumeAll+0x140>
    2366:	e0 e0       	ldi	r30, 0x00	; 0
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <xPendingReadyList>
    236e:	81 11       	cpse	r24, r1
    2370:	73 cf       	rjmp	.-282    	; 0x2258 <xTaskResumeAll+0x2e>
    2372:	ef 2b       	or	r30, r31
    2374:	09 f0       	breq	.+2      	; 0x2378 <xTaskResumeAll+0x14e>
    2376:	7d db       	rcall	.-2310   	; 0x1a72 <prvResetNextTaskUnblockTime>
    2378:	c0 90 fe 15 	lds	r12, 0x15FE	; 0x8015fe <xPendedTicks>
    237c:	d0 90 ff 15 	lds	r13, 0x15FF	; 0x8015ff <xPendedTicks+0x1>
    2380:	e0 90 00 16 	lds	r14, 0x1600	; 0x801600 <xPendedTicks+0x2>
    2384:	f0 90 01 16 	lds	r15, 0x1601	; 0x801601 <xPendedTicks+0x3>
    2388:	c1 14       	cp	r12, r1
    238a:	d1 04       	cpc	r13, r1
    238c:	e1 04       	cpc	r14, r1
    238e:	f1 04       	cpc	r15, r1
    2390:	a1 f0       	breq	.+40     	; 0x23ba <xTaskResumeAll+0x190>
    2392:	1f de       	rcall	.-962    	; 0x1fd2 <xTaskIncrementTick>
    2394:	88 23       	and	r24, r24
    2396:	19 f0       	breq	.+6      	; 0x239e <xTaskResumeAll+0x174>
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	c8 1a       	sub	r12, r24
    23a2:	d1 08       	sbc	r13, r1
    23a4:	e1 08       	sbc	r14, r1
    23a6:	f1 08       	sbc	r15, r1
    23a8:	a1 f7       	brne	.-24     	; 0x2392 <xTaskResumeAll+0x168>
    23aa:	10 92 fe 15 	sts	0x15FE, r1	; 0x8015fe <xPendedTicks>
    23ae:	10 92 ff 15 	sts	0x15FF, r1	; 0x8015ff <xPendedTicks+0x1>
    23b2:	10 92 00 16 	sts	0x1600, r1	; 0x801600 <xPendedTicks+0x2>
    23b6:	10 92 01 16 	sts	0x1601, r1	; 0x801601 <xPendedTicks+0x3>
    23ba:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <xYieldPending>
    23be:	88 23       	and	r24, r24
    23c0:	31 f0       	breq	.+12     	; 0x23ce <xTaskResumeAll+0x1a4>
    23c2:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <xTaskResumeAll+0x1a6>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	01 c0       	rjmp	.+2      	; 0x23d0 <xTaskResumeAll+0x1a6>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	08 95       	ret

000023e2 <xTaskDelayUntil>:
    23e2:	8f 92       	push	r8
    23e4:	9f 92       	push	r9
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	ec 01       	movw	r28, r24
    23fa:	6a 01       	movw	r12, r20
    23fc:	7b 01       	movw	r14, r22
    23fe:	d5 dd       	rcall	.-1110   	; 0x1faa <vTaskSuspendAll>
    2400:	80 90 04 16 	lds	r8, 0x1604	; 0x801604 <xTickCount>
    2404:	90 90 05 16 	lds	r9, 0x1605	; 0x801605 <xTickCount+0x1>
    2408:	a0 90 06 16 	lds	r10, 0x1606	; 0x801606 <xTickCount+0x2>
    240c:	b0 90 07 16 	lds	r11, 0x1607	; 0x801607 <xTickCount+0x3>
    2410:	88 81       	ld	r24, Y
    2412:	99 81       	ldd	r25, Y+1	; 0x01
    2414:	aa 81       	ldd	r26, Y+2	; 0x02
    2416:	bb 81       	ldd	r27, Y+3	; 0x03
    2418:	ac 01       	movw	r20, r24
    241a:	bd 01       	movw	r22, r26
    241c:	4c 0d       	add	r20, r12
    241e:	5d 1d       	adc	r21, r13
    2420:	6e 1d       	adc	r22, r14
    2422:	7f 1d       	adc	r23, r15
    2424:	88 16       	cp	r8, r24
    2426:	99 06       	cpc	r9, r25
    2428:	aa 06       	cpc	r10, r26
    242a:	bb 06       	cpc	r11, r27
    242c:	60 f4       	brcc	.+24     	; 0x2446 <xTaskDelayUntil+0x64>
    242e:	48 17       	cp	r20, r24
    2430:	59 07       	cpc	r21, r25
    2432:	6a 07       	cpc	r22, r26
    2434:	7b 07       	cpc	r23, r27
    2436:	98 f4       	brcc	.+38     	; 0x245e <xTaskDelayUntil+0x7c>
    2438:	84 16       	cp	r8, r20
    243a:	95 06       	cpc	r9, r21
    243c:	a6 06       	cpc	r10, r22
    243e:	b7 06       	cpc	r11, r23
    2440:	80 f0       	brcs	.+32     	; 0x2462 <xTaskDelayUntil+0x80>
    2442:	10 e0       	ldi	r17, 0x00	; 0
    2444:	13 c0       	rjmp	.+38     	; 0x246c <xTaskDelayUntil+0x8a>
    2446:	48 17       	cp	r20, r24
    2448:	59 07       	cpc	r21, r25
    244a:	6a 07       	cpc	r22, r26
    244c:	7b 07       	cpc	r23, r27
    244e:	58 f0       	brcs	.+22     	; 0x2466 <xTaskDelayUntil+0x84>
    2450:	84 16       	cp	r8, r20
    2452:	95 06       	cpc	r9, r21
    2454:	a6 06       	cpc	r10, r22
    2456:	b7 06       	cpc	r11, r23
    2458:	40 f0       	brcs	.+16     	; 0x246a <xTaskDelayUntil+0x88>
    245a:	10 e0       	ldi	r17, 0x00	; 0
    245c:	07 c0       	rjmp	.+14     	; 0x246c <xTaskDelayUntil+0x8a>
    245e:	10 e0       	ldi	r17, 0x00	; 0
    2460:	05 c0       	rjmp	.+10     	; 0x246c <xTaskDelayUntil+0x8a>
    2462:	11 e0       	ldi	r17, 0x01	; 1
    2464:	03 c0       	rjmp	.+6      	; 0x246c <xTaskDelayUntil+0x8a>
    2466:	11 e0       	ldi	r17, 0x01	; 1
    2468:	01 c0       	rjmp	.+2      	; 0x246c <xTaskDelayUntil+0x8a>
    246a:	11 e0       	ldi	r17, 0x01	; 1
    246c:	48 83       	st	Y, r20
    246e:	59 83       	std	Y+1, r21	; 0x01
    2470:	6a 83       	std	Y+2, r22	; 0x02
    2472:	7b 83       	std	Y+3, r23	; 0x03
    2474:	11 23       	and	r17, r17
    2476:	41 f0       	breq	.+16     	; 0x2488 <xTaskDelayUntil+0xa6>
    2478:	cb 01       	movw	r24, r22
    247a:	ba 01       	movw	r22, r20
    247c:	68 19       	sub	r22, r8
    247e:	79 09       	sbc	r23, r9
    2480:	8a 09       	sbc	r24, r10
    2482:	9b 09       	sbc	r25, r11
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	6b dc       	rcall	.-1834   	; 0x1d5e <prvAddCurrentTaskToDelayedList>
    2488:	d0 de       	rcall	.-608    	; 0x222a <xTaskResumeAll>
    248a:	81 11       	cpse	r24, r1
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <xTaskDelayUntil+0xb0>
    248e:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    2492:	81 2f       	mov	r24, r17
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	ff 90       	pop	r15
    249c:	ef 90       	pop	r14
    249e:	df 90       	pop	r13
    24a0:	cf 90       	pop	r12
    24a2:	bf 90       	pop	r11
    24a4:	af 90       	pop	r10
    24a6:	9f 90       	pop	r9
    24a8:	8f 90       	pop	r8
    24aa:	08 95       	ret

000024ac <vTaskDelay>:
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	6b 01       	movw	r12, r22
    24b6:	7c 01       	movw	r14, r24
    24b8:	67 2b       	or	r22, r23
    24ba:	68 2b       	or	r22, r24
    24bc:	69 2b       	or	r22, r25
    24be:	39 f0       	breq	.+14     	; 0x24ce <vTaskDelay+0x22>
    24c0:	74 dd       	rcall	.-1304   	; 0x1faa <vTaskSuspendAll>
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	c7 01       	movw	r24, r14
    24c6:	b6 01       	movw	r22, r12
    24c8:	4a dc       	rcall	.-1900   	; 0x1d5e <prvAddCurrentTaskToDelayedList>
    24ca:	af de       	rcall	.-674    	; 0x222a <xTaskResumeAll>
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <vTaskDelay+0x24>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	81 11       	cpse	r24, r1
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vTaskDelay+0x2c>
    24d4:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
    24e0:	08 95       	ret

000024e2 <vTaskSwitchContext>:
    24e2:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    24e6:	88 23       	and	r24, r24
    24e8:	21 f0       	breq	.+8      	; 0x24f2 <vTaskSwitchContext+0x10>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    24f0:	08 95       	ret
    24f2:	10 92 fd 15 	sts	0x15FD, r1	; 0x8015fd <xYieldPending>
    24f6:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    24fa:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    24fe:	20 81       	ld	r18, Z
    2500:	31 81       	ldd	r19, Z+1	; 0x01
    2502:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2506:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    250a:	83 8d       	ldd	r24, Z+27	; 0x1b
    250c:	94 8d       	ldd	r25, Z+28	; 0x1c
    250e:	82 17       	cp	r24, r18
    2510:	93 07       	cpc	r25, r19
    2512:	60 f0       	brcs	.+24     	; 0x252c <vTaskSwitchContext+0x4a>
    2514:	60 91 b3 16 	lds	r22, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2518:	70 91 b4 16 	lds	r23, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    251c:	63 5e       	subi	r22, 0xE3	; 227
    251e:	7f 4f       	sbci	r23, 0xFF	; 255
    2520:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2524:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2528:	0e 94 de 1c 	call	0x39bc	; 0x39bc <vApplicationStackOverflowHook>
    252c:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2530:	01 c0       	rjmp	.+2      	; 0x2534 <vTaskSwitchContext+0x52>
    2532:	81 50       	subi	r24, 0x01	; 1
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	9b e0       	ldi	r25, 0x0B	; 11
    253a:	92 9f       	mul	r25, r18
    253c:	f0 01       	movw	r30, r0
    253e:	93 9f       	mul	r25, r19
    2540:	f0 0d       	add	r31, r0
    2542:	11 24       	eor	r1, r1
    2544:	eb 5b       	subi	r30, 0xBB	; 187
    2546:	f9 4e       	sbci	r31, 0xE9	; 233
    2548:	90 81       	ld	r25, Z
    254a:	99 23       	and	r25, r25
    254c:	91 f3       	breq	.-28     	; 0x2532 <vTaskSwitchContext+0x50>
    254e:	9b e0       	ldi	r25, 0x0B	; 11
    2550:	92 9f       	mul	r25, r18
    2552:	a0 01       	movw	r20, r0
    2554:	93 9f       	mul	r25, r19
    2556:	50 0d       	add	r21, r0
    2558:	11 24       	eor	r1, r1
    255a:	df 01       	movw	r26, r30
    255c:	01 80       	ldd	r0, Z+1	; 0x01
    255e:	f2 81       	ldd	r31, Z+2	; 0x02
    2560:	e0 2d       	mov	r30, r0
    2562:	04 80       	ldd	r0, Z+4	; 0x04
    2564:	f5 81       	ldd	r31, Z+5	; 0x05
    2566:	e0 2d       	mov	r30, r0
    2568:	12 96       	adiw	r26, 0x02	; 2
    256a:	fc 93       	st	X, r31
    256c:	ee 93       	st	-X, r30
    256e:	11 97       	sbiw	r26, 0x01	; 1
    2570:	48 5b       	subi	r20, 0xB8	; 184
    2572:	59 4e       	sbci	r21, 0xE9	; 233
    2574:	e4 17       	cp	r30, r20
    2576:	f5 07       	cpc	r31, r21
    2578:	29 f4       	brne	.+10     	; 0x2584 <vTaskSwitchContext+0xa2>
    257a:	44 81       	ldd	r20, Z+4	; 0x04
    257c:	55 81       	ldd	r21, Z+5	; 0x05
    257e:	fd 01       	movw	r30, r26
    2580:	52 83       	std	Z+2, r21	; 0x02
    2582:	41 83       	std	Z+1, r20	; 0x01
    2584:	9b e0       	ldi	r25, 0x0B	; 11
    2586:	92 9f       	mul	r25, r18
    2588:	f0 01       	movw	r30, r0
    258a:	93 9f       	mul	r25, r19
    258c:	f0 0d       	add	r31, r0
    258e:	11 24       	eor	r1, r1
    2590:	eb 5b       	subi	r30, 0xBB	; 187
    2592:	f9 4e       	sbci	r31, 0xE9	; 233
    2594:	01 80       	ldd	r0, Z+1	; 0x01
    2596:	f2 81       	ldd	r31, Z+2	; 0x02
    2598:	e0 2d       	mov	r30, r0
    259a:	20 85       	ldd	r18, Z+8	; 0x08
    259c:	31 85       	ldd	r19, Z+9	; 0x09
    259e:	30 93 b4 16 	sts	0x16B4, r19	; 0x8016b4 <pxCurrentTCB+0x1>
    25a2:	20 93 b3 16 	sts	0x16B3, r18	; 0x8016b3 <pxCurrentTCB>
    25a6:	80 93 03 16 	sts	0x1603, r24	; 0x801603 <uxTopReadyPriority>
    25aa:	08 95       	ret

000025ac <vTaskPlaceOnEventList>:
    25ac:	cf 92       	push	r12
    25ae:	df 92       	push	r13
    25b0:	ef 92       	push	r14
    25b2:	ff 92       	push	r15
    25b4:	6a 01       	movw	r12, r20
    25b6:	7b 01       	movw	r14, r22
    25b8:	60 91 b3 16 	lds	r22, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    25bc:	70 91 b4 16 	lds	r23, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    25c0:	62 5f       	subi	r22, 0xF2	; 242
    25c2:	7f 4f       	sbci	r23, 0xFF	; 255
    25c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vListInsert>
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	c7 01       	movw	r24, r14
    25cc:	b6 01       	movw	r22, r12
    25ce:	c7 db       	rcall	.-2162   	; 0x1d5e <prvAddCurrentTaskToDelayedList>
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	08 95       	ret

000025da <vTaskPlaceOnUnorderedEventList>:
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	fc 01       	movw	r30, r24
    25e4:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    25e8:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    25ec:	70 68       	ori	r23, 0x80	; 128
    25ee:	1e 96       	adiw	r26, 0x0e	; 14
    25f0:	4d 93       	st	X+, r20
    25f2:	5d 93       	st	X+, r21
    25f4:	6d 93       	st	X+, r22
    25f6:	7c 93       	st	X, r23
    25f8:	51 97       	sbiw	r26, 0x11	; 17
    25fa:	a1 81       	ldd	r26, Z+1	; 0x01
    25fc:	b2 81       	ldd	r27, Z+2	; 0x02
    25fe:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2602:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2606:	bb 8b       	std	Y+19, r27	; 0x13
    2608:	aa 8b       	std	Y+18, r26	; 0x12
    260a:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    260e:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2612:	16 96       	adiw	r26, 0x06	; 6
    2614:	8d 91       	ld	r24, X+
    2616:	9c 91       	ld	r25, X
    2618:	17 97       	sbiw	r26, 0x07	; 7
    261a:	9d 8b       	std	Y+21, r25	; 0x15
    261c:	8c 8b       	std	Y+20, r24	; 0x14
    261e:	16 96       	adiw	r26, 0x06	; 6
    2620:	cd 91       	ld	r28, X+
    2622:	dc 91       	ld	r29, X
    2624:	17 97       	sbiw	r26, 0x07	; 7
    2626:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    262a:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    262e:	0e 96       	adiw	r24, 0x0e	; 14
    2630:	9d 83       	std	Y+5, r25	; 0x05
    2632:	8c 83       	std	Y+4, r24	; 0x04
    2634:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2638:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    263c:	0e 96       	adiw	r24, 0x0e	; 14
    263e:	17 96       	adiw	r26, 0x07	; 7
    2640:	9c 93       	st	X, r25
    2642:	8e 93       	st	-X, r24
    2644:	16 97       	sbiw	r26, 0x06	; 6
    2646:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    264a:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    264e:	59 96       	adiw	r26, 0x19	; 25
    2650:	fc 93       	st	X, r31
    2652:	ee 93       	st	-X, r30
    2654:	58 97       	sbiw	r26, 0x18	; 24
    2656:	80 81       	ld	r24, Z
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	80 83       	st	Z, r24
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	c9 01       	movw	r24, r18
    2660:	b8 01       	movw	r22, r16
    2662:	7d db       	rcall	.-2310   	; 0x1d5e <prvAddCurrentTaskToDelayedList>
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	08 95       	ret

0000266e <vTaskPlaceOnEventListRestricted>:
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	fc 01       	movw	r30, r24
    2674:	cb 01       	movw	r24, r22
    2676:	ba 01       	movw	r22, r20
    2678:	a1 81       	ldd	r26, Z+1	; 0x01
    267a:	b2 81       	ldd	r27, Z+2	; 0x02
    267c:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2680:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2684:	bb 8b       	std	Y+19, r27	; 0x13
    2686:	aa 8b       	std	Y+18, r26	; 0x12
    2688:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    268c:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2690:	16 96       	adiw	r26, 0x06	; 6
    2692:	4d 91       	ld	r20, X+
    2694:	5c 91       	ld	r21, X
    2696:	17 97       	sbiw	r26, 0x07	; 7
    2698:	5d 8b       	std	Y+21, r21	; 0x15
    269a:	4c 8b       	std	Y+20, r20	; 0x14
    269c:	16 96       	adiw	r26, 0x06	; 6
    269e:	cd 91       	ld	r28, X+
    26a0:	dc 91       	ld	r29, X
    26a2:	17 97       	sbiw	r26, 0x07	; 7
    26a4:	40 91 b3 16 	lds	r20, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    26a8:	50 91 b4 16 	lds	r21, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    26ac:	42 5f       	subi	r20, 0xF2	; 242
    26ae:	5f 4f       	sbci	r21, 0xFF	; 255
    26b0:	5d 83       	std	Y+5, r21	; 0x05
    26b2:	4c 83       	std	Y+4, r20	; 0x04
    26b4:	40 91 b3 16 	lds	r20, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    26b8:	50 91 b4 16 	lds	r21, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    26bc:	42 5f       	subi	r20, 0xF2	; 242
    26be:	5f 4f       	sbci	r21, 0xFF	; 255
    26c0:	17 96       	adiw	r26, 0x07	; 7
    26c2:	5c 93       	st	X, r21
    26c4:	4e 93       	st	-X, r20
    26c6:	16 97       	sbiw	r26, 0x06	; 6
    26c8:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    26cc:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    26d0:	59 96       	adiw	r26, 0x19	; 25
    26d2:	fc 93       	st	X, r31
    26d4:	ee 93       	st	-X, r30
    26d6:	58 97       	sbiw	r26, 0x18	; 24
    26d8:	30 81       	ld	r19, Z
    26da:	3f 5f       	subi	r19, 0xFF	; 255
    26dc:	30 83       	st	Z, r19
    26de:	22 23       	and	r18, r18
    26e0:	19 f0       	breq	.+6      	; 0x26e8 <vTaskPlaceOnEventListRestricted+0x7a>
    26e2:	6f ef       	ldi	r22, 0xFF	; 255
    26e4:	7f ef       	ldi	r23, 0xFF	; 255
    26e6:	cb 01       	movw	r24, r22
    26e8:	42 2f       	mov	r20, r18
    26ea:	39 db       	rcall	.-2446   	; 0x1d5e <prvAddCurrentTaskToDelayedList>
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <xTaskRemoveFromEventList>:
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	dc 01       	movw	r26, r24
    26f8:	17 96       	adiw	r26, 0x07	; 7
    26fa:	ed 91       	ld	r30, X+
    26fc:	fc 91       	ld	r31, X
    26fe:	18 97       	sbiw	r26, 0x08	; 8
    2700:	00 84       	ldd	r0, Z+8	; 0x08
    2702:	f1 85       	ldd	r31, Z+9	; 0x09
    2704:	e0 2d       	mov	r30, r0
    2706:	a0 8d       	ldd	r26, Z+24	; 0x18
    2708:	b1 8d       	ldd	r27, Z+25	; 0x19
    270a:	c2 89       	ldd	r28, Z+18	; 0x12
    270c:	d3 89       	ldd	r29, Z+19	; 0x13
    270e:	84 89       	ldd	r24, Z+20	; 0x14
    2710:	95 89       	ldd	r25, Z+21	; 0x15
    2712:	9f 83       	std	Y+7, r25	; 0x07
    2714:	8e 83       	std	Y+6, r24	; 0x06
    2716:	c4 89       	ldd	r28, Z+20	; 0x14
    2718:	d5 89       	ldd	r29, Z+21	; 0x15
    271a:	82 89       	ldd	r24, Z+18	; 0x12
    271c:	93 89       	ldd	r25, Z+19	; 0x13
    271e:	9d 83       	std	Y+5, r25	; 0x05
    2720:	8c 83       	std	Y+4, r24	; 0x04
    2722:	11 96       	adiw	r26, 0x01	; 1
    2724:	8d 91       	ld	r24, X+
    2726:	9c 91       	ld	r25, X
    2728:	12 97       	sbiw	r26, 0x02	; 2
    272a:	9f 01       	movw	r18, r30
    272c:	22 5f       	subi	r18, 0xF2	; 242
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	82 17       	cp	r24, r18
    2732:	93 07       	cpc	r25, r19
    2734:	31 f4       	brne	.+12     	; 0x2742 <xTaskRemoveFromEventList+0x50>
    2736:	84 89       	ldd	r24, Z+20	; 0x14
    2738:	95 89       	ldd	r25, Z+21	; 0x15
    273a:	12 96       	adiw	r26, 0x02	; 2
    273c:	9c 93       	st	X, r25
    273e:	8e 93       	st	-X, r24
    2740:	11 97       	sbiw	r26, 0x01	; 1
    2742:	11 8e       	std	Z+25, r1	; 0x19
    2744:	10 8e       	std	Z+24, r1	; 0x18
    2746:	8c 91       	ld	r24, X
    2748:	81 50       	subi	r24, 0x01	; 1
    274a:	8c 93       	st	X, r24
    274c:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    2750:	81 11       	cpse	r24, r1
    2752:	52 c0       	rjmp	.+164    	; 0x27f8 <xTaskRemoveFromEventList+0x106>
    2754:	a4 85       	ldd	r26, Z+12	; 0x0c
    2756:	b5 85       	ldd	r27, Z+13	; 0x0d
    2758:	c6 81       	ldd	r28, Z+6	; 0x06
    275a:	d7 81       	ldd	r29, Z+7	; 0x07
    275c:	80 85       	ldd	r24, Z+8	; 0x08
    275e:	91 85       	ldd	r25, Z+9	; 0x09
    2760:	9f 83       	std	Y+7, r25	; 0x07
    2762:	8e 83       	std	Y+6, r24	; 0x06
    2764:	c0 85       	ldd	r28, Z+8	; 0x08
    2766:	d1 85       	ldd	r29, Z+9	; 0x09
    2768:	86 81       	ldd	r24, Z+6	; 0x06
    276a:	97 81       	ldd	r25, Z+7	; 0x07
    276c:	9d 83       	std	Y+5, r25	; 0x05
    276e:	8c 83       	std	Y+4, r24	; 0x04
    2770:	11 96       	adiw	r26, 0x01	; 1
    2772:	8d 91       	ld	r24, X+
    2774:	9c 91       	ld	r25, X
    2776:	12 97       	sbiw	r26, 0x02	; 2
    2778:	9f 01       	movw	r18, r30
    277a:	2e 5f       	subi	r18, 0xFE	; 254
    277c:	3f 4f       	sbci	r19, 0xFF	; 255
    277e:	82 17       	cp	r24, r18
    2780:	93 07       	cpc	r25, r19
    2782:	31 f4       	brne	.+12     	; 0x2790 <xTaskRemoveFromEventList+0x9e>
    2784:	80 85       	ldd	r24, Z+8	; 0x08
    2786:	91 85       	ldd	r25, Z+9	; 0x09
    2788:	12 96       	adiw	r26, 0x02	; 2
    278a:	9c 93       	st	X, r25
    278c:	8e 93       	st	-X, r24
    278e:	11 97       	sbiw	r26, 0x01	; 1
    2790:	15 86       	std	Z+13, r1	; 0x0d
    2792:	14 86       	std	Z+12, r1	; 0x0c
    2794:	8c 91       	ld	r24, X
    2796:	81 50       	subi	r24, 0x01	; 1
    2798:	8c 93       	st	X, r24
    279a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    279c:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    27a0:	8a 17       	cp	r24, r26
    27a2:	10 f4       	brcc	.+4      	; 0x27a8 <xTaskRemoveFromEventList+0xb6>
    27a4:	a0 93 03 16 	sts	0x1603, r26	; 0x801603 <uxTopReadyPriority>
    27a8:	8b e0       	ldi	r24, 0x0B	; 11
    27aa:	8a 9f       	mul	r24, r26
    27ac:	d0 01       	movw	r26, r0
    27ae:	11 24       	eor	r1, r1
    27b0:	ab 5b       	subi	r26, 0xBB	; 187
    27b2:	b9 4e       	sbci	r27, 0xE9	; 233
    27b4:	11 96       	adiw	r26, 0x01	; 1
    27b6:	0d 90       	ld	r0, X+
    27b8:	bc 91       	ld	r27, X
    27ba:	a0 2d       	mov	r26, r0
    27bc:	b7 83       	std	Z+7, r27	; 0x07
    27be:	a6 83       	std	Z+6, r26	; 0x06
    27c0:	16 96       	adiw	r26, 0x06	; 6
    27c2:	4d 91       	ld	r20, X+
    27c4:	5c 91       	ld	r21, X
    27c6:	17 97       	sbiw	r26, 0x07	; 7
    27c8:	51 87       	std	Z+9, r21	; 0x09
    27ca:	40 87       	std	Z+8, r20	; 0x08
    27cc:	16 96       	adiw	r26, 0x06	; 6
    27ce:	cd 91       	ld	r28, X+
    27d0:	dc 91       	ld	r29, X
    27d2:	17 97       	sbiw	r26, 0x07	; 7
    27d4:	3d 83       	std	Y+5, r19	; 0x05
    27d6:	2c 83       	std	Y+4, r18	; 0x04
    27d8:	17 96       	adiw	r26, 0x07	; 7
    27da:	3c 93       	st	X, r19
    27dc:	2e 93       	st	-X, r18
    27de:	16 97       	sbiw	r26, 0x06	; 6
    27e0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27e2:	8a 9f       	mul	r24, r26
    27e4:	d0 01       	movw	r26, r0
    27e6:	11 24       	eor	r1, r1
    27e8:	ab 5b       	subi	r26, 0xBB	; 187
    27ea:	b9 4e       	sbci	r27, 0xE9	; 233
    27ec:	b5 87       	std	Z+13, r27	; 0x0d
    27ee:	a4 87       	std	Z+12, r26	; 0x0c
    27f0:	8c 91       	ld	r24, X
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	8c 93       	st	X, r24
    27f6:	1c c0       	rjmp	.+56     	; 0x2830 <xTaskRemoveFromEventList+0x13e>
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	56 e1       	ldi	r21, 0x16	; 22
    27fc:	da 01       	movw	r26, r20
    27fe:	11 96       	adiw	r26, 0x01	; 1
    2800:	cd 91       	ld	r28, X+
    2802:	dc 91       	ld	r29, X
    2804:	12 97       	sbiw	r26, 0x02	; 2
    2806:	d3 8b       	std	Z+19, r29	; 0x13
    2808:	c2 8b       	std	Z+18, r28	; 0x12
    280a:	8e 81       	ldd	r24, Y+6	; 0x06
    280c:	9f 81       	ldd	r25, Y+7	; 0x07
    280e:	95 8b       	std	Z+21, r25	; 0x15
    2810:	84 8b       	std	Z+20, r24	; 0x14
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	9f 81       	ldd	r25, Y+7	; 0x07
    2816:	dc 01       	movw	r26, r24
    2818:	15 96       	adiw	r26, 0x05	; 5
    281a:	3c 93       	st	X, r19
    281c:	2e 93       	st	-X, r18
    281e:	14 97       	sbiw	r26, 0x04	; 4
    2820:	3f 83       	std	Y+7, r19	; 0x07
    2822:	2e 83       	std	Y+6, r18	; 0x06
    2824:	51 8f       	std	Z+25, r21	; 0x19
    2826:	40 8f       	std	Z+24, r20	; 0x18
    2828:	da 01       	movw	r26, r20
    282a:	8c 91       	ld	r24, X
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	8c 93       	st	X, r24
    2830:	92 8d       	ldd	r25, Z+26	; 0x1a
    2832:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2836:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    283a:	82 8d       	ldd	r24, Z+26	; 0x1a
    283c:	89 17       	cp	r24, r25
    283e:	20 f4       	brcc	.+8      	; 0x2848 <xTaskRemoveFromEventList+0x156>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    2846:	01 c0       	rjmp	.+2      	; 0x284a <xTaskRemoveFromEventList+0x158>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	08 95       	ret

00002850 <vTaskRemoveFromUnorderedEventList>:
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	dc 01       	movw	r26, r24
    2856:	70 68       	ori	r23, 0x80	; 128
    2858:	4d 93       	st	X+, r20
    285a:	5d 93       	st	X+, r21
    285c:	6d 93       	st	X+, r22
    285e:	7c 93       	st	X, r23
    2860:	13 97       	sbiw	r26, 0x03	; 3
    2862:	18 96       	adiw	r26, 0x08	; 8
    2864:	ed 91       	ld	r30, X+
    2866:	fc 91       	ld	r31, X
    2868:	19 97       	sbiw	r26, 0x09	; 9
    286a:	1a 96       	adiw	r26, 0x0a	; 10
    286c:	4d 91       	ld	r20, X+
    286e:	5c 91       	ld	r21, X
    2870:	1b 97       	sbiw	r26, 0x0b	; 11
    2872:	14 96       	adiw	r26, 0x04	; 4
    2874:	8d 91       	ld	r24, X+
    2876:	9c 91       	ld	r25, X
    2878:	15 97       	sbiw	r26, 0x05	; 5
    287a:	16 96       	adiw	r26, 0x06	; 6
    287c:	2d 91       	ld	r18, X+
    287e:	3c 91       	ld	r19, X
    2880:	17 97       	sbiw	r26, 0x07	; 7
    2882:	ec 01       	movw	r28, r24
    2884:	3f 83       	std	Y+7, r19	; 0x07
    2886:	2e 83       	std	Y+6, r18	; 0x06
    2888:	16 96       	adiw	r26, 0x06	; 6
    288a:	8d 91       	ld	r24, X+
    288c:	9c 91       	ld	r25, X
    288e:	17 97       	sbiw	r26, 0x07	; 7
    2890:	14 96       	adiw	r26, 0x04	; 4
    2892:	2d 91       	ld	r18, X+
    2894:	3c 91       	ld	r19, X
    2896:	15 97       	sbiw	r26, 0x05	; 5
    2898:	ec 01       	movw	r28, r24
    289a:	3d 83       	std	Y+5, r19	; 0x05
    289c:	2c 83       	std	Y+4, r18	; 0x04
    289e:	ea 01       	movw	r28, r20
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	a8 17       	cp	r26, r24
    28a6:	b9 07       	cpc	r27, r25
    28a8:	31 f4       	brne	.+12     	; 0x28b6 <vTaskRemoveFromUnorderedEventList+0x66>
    28aa:	16 96       	adiw	r26, 0x06	; 6
    28ac:	8d 91       	ld	r24, X+
    28ae:	9c 91       	ld	r25, X
    28b0:	17 97       	sbiw	r26, 0x07	; 7
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	1b 96       	adiw	r26, 0x0b	; 11
    28b8:	1c 92       	st	X, r1
    28ba:	1e 92       	st	-X, r1
    28bc:	1a 97       	sbiw	r26, 0x0a	; 10
    28be:	da 01       	movw	r26, r20
    28c0:	8c 91       	ld	r24, X
    28c2:	81 50       	subi	r24, 0x01	; 1
    28c4:	8c 93       	st	X, r24
    28c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    28c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    28ca:	c6 81       	ldd	r28, Z+6	; 0x06
    28cc:	d7 81       	ldd	r29, Z+7	; 0x07
    28ce:	80 85       	ldd	r24, Z+8	; 0x08
    28d0:	91 85       	ldd	r25, Z+9	; 0x09
    28d2:	9f 83       	std	Y+7, r25	; 0x07
    28d4:	8e 83       	std	Y+6, r24	; 0x06
    28d6:	c0 85       	ldd	r28, Z+8	; 0x08
    28d8:	d1 85       	ldd	r29, Z+9	; 0x09
    28da:	86 81       	ldd	r24, Z+6	; 0x06
    28dc:	97 81       	ldd	r25, Z+7	; 0x07
    28de:	9d 83       	std	Y+5, r25	; 0x05
    28e0:	8c 83       	std	Y+4, r24	; 0x04
    28e2:	11 96       	adiw	r26, 0x01	; 1
    28e4:	8d 91       	ld	r24, X+
    28e6:	9c 91       	ld	r25, X
    28e8:	12 97       	sbiw	r26, 0x02	; 2
    28ea:	9f 01       	movw	r18, r30
    28ec:	2e 5f       	subi	r18, 0xFE	; 254
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	82 17       	cp	r24, r18
    28f2:	93 07       	cpc	r25, r19
    28f4:	31 f4       	brne	.+12     	; 0x2902 <vTaskRemoveFromUnorderedEventList+0xb2>
    28f6:	80 85       	ldd	r24, Z+8	; 0x08
    28f8:	91 85       	ldd	r25, Z+9	; 0x09
    28fa:	12 96       	adiw	r26, 0x02	; 2
    28fc:	9c 93       	st	X, r25
    28fe:	8e 93       	st	-X, r24
    2900:	11 97       	sbiw	r26, 0x01	; 1
    2902:	15 86       	std	Z+13, r1	; 0x0d
    2904:	14 86       	std	Z+12, r1	; 0x0c
    2906:	8c 91       	ld	r24, X
    2908:	81 50       	subi	r24, 0x01	; 1
    290a:	8c 93       	st	X, r24
    290c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    290e:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2912:	8a 17       	cp	r24, r26
    2914:	10 f4       	brcc	.+4      	; 0x291a <vTaskRemoveFromUnorderedEventList+0xca>
    2916:	a0 93 03 16 	sts	0x1603, r26	; 0x801603 <uxTopReadyPriority>
    291a:	8b e0       	ldi	r24, 0x0B	; 11
    291c:	8a 9f       	mul	r24, r26
    291e:	d0 01       	movw	r26, r0
    2920:	11 24       	eor	r1, r1
    2922:	ab 5b       	subi	r26, 0xBB	; 187
    2924:	b9 4e       	sbci	r27, 0xE9	; 233
    2926:	11 96       	adiw	r26, 0x01	; 1
    2928:	0d 90       	ld	r0, X+
    292a:	bc 91       	ld	r27, X
    292c:	a0 2d       	mov	r26, r0
    292e:	b7 83       	std	Z+7, r27	; 0x07
    2930:	a6 83       	std	Z+6, r26	; 0x06
    2932:	16 96       	adiw	r26, 0x06	; 6
    2934:	4d 91       	ld	r20, X+
    2936:	5c 91       	ld	r21, X
    2938:	17 97       	sbiw	r26, 0x07	; 7
    293a:	51 87       	std	Z+9, r21	; 0x09
    293c:	40 87       	std	Z+8, r20	; 0x08
    293e:	16 96       	adiw	r26, 0x06	; 6
    2940:	cd 91       	ld	r28, X+
    2942:	dc 91       	ld	r29, X
    2944:	17 97       	sbiw	r26, 0x07	; 7
    2946:	3d 83       	std	Y+5, r19	; 0x05
    2948:	2c 83       	std	Y+4, r18	; 0x04
    294a:	17 96       	adiw	r26, 0x07	; 7
    294c:	3c 93       	st	X, r19
    294e:	2e 93       	st	-X, r18
    2950:	16 97       	sbiw	r26, 0x06	; 6
    2952:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2954:	8a 9f       	mul	r24, r26
    2956:	d0 01       	movw	r26, r0
    2958:	11 24       	eor	r1, r1
    295a:	ab 5b       	subi	r26, 0xBB	; 187
    295c:	b9 4e       	sbci	r27, 0xE9	; 233
    295e:	b5 87       	std	Z+13, r27	; 0x0d
    2960:	a4 87       	std	Z+12, r26	; 0x0c
    2962:	8c 91       	ld	r24, X
    2964:	8f 5f       	subi	r24, 0xFF	; 255
    2966:	8c 93       	st	X, r24
    2968:	92 8d       	ldd	r25, Z+26	; 0x1a
    296a:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    296e:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2972:	82 8d       	ldd	r24, Z+26	; 0x1a
    2974:	89 17       	cp	r24, r25
    2976:	18 f4       	brcc	.+6      	; 0x297e <vTaskRemoveFromUnorderedEventList+0x12e>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	08 95       	ret

00002984 <vTaskSetTimeOutState>:
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	0f 92       	push	r0
    298a:	20 91 fc 15 	lds	r18, 0x15FC	; 0x8015fc <xNumOfOverflows>
    298e:	fc 01       	movw	r30, r24
    2990:	20 83       	st	Z, r18
    2992:	40 91 04 16 	lds	r20, 0x1604	; 0x801604 <xTickCount>
    2996:	50 91 05 16 	lds	r21, 0x1605	; 0x801605 <xTickCount+0x1>
    299a:	60 91 06 16 	lds	r22, 0x1606	; 0x801606 <xTickCount+0x2>
    299e:	70 91 07 16 	lds	r23, 0x1607	; 0x801607 <xTickCount+0x3>
    29a2:	41 83       	std	Z+1, r20	; 0x01
    29a4:	52 83       	std	Z+2, r21	; 0x02
    29a6:	63 83       	std	Z+3, r22	; 0x03
    29a8:	74 83       	std	Z+4, r23	; 0x04
    29aa:	0f 90       	pop	r0
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	08 95       	ret

000029b0 <vTaskInternalSetTimeOutState>:
    29b0:	20 91 fc 15 	lds	r18, 0x15FC	; 0x8015fc <xNumOfOverflows>
    29b4:	fc 01       	movw	r30, r24
    29b6:	20 83       	st	Z, r18
    29b8:	40 91 04 16 	lds	r20, 0x1604	; 0x801604 <xTickCount>
    29bc:	50 91 05 16 	lds	r21, 0x1605	; 0x801605 <xTickCount+0x1>
    29c0:	60 91 06 16 	lds	r22, 0x1606	; 0x801606 <xTickCount+0x2>
    29c4:	70 91 07 16 	lds	r23, 0x1607	; 0x801607 <xTickCount+0x3>
    29c8:	41 83       	std	Z+1, r20	; 0x01
    29ca:	52 83       	std	Z+2, r21	; 0x02
    29cc:	63 83       	std	Z+3, r22	; 0x03
    29ce:	74 83       	std	Z+4, r23	; 0x04
    29d0:	08 95       	ret

000029d2 <xTaskCheckForTimeOut>:
    29d2:	8f 92       	push	r8
    29d4:	9f 92       	push	r9
    29d6:	af 92       	push	r10
    29d8:	bf 92       	push	r11
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	fb 01       	movw	r30, r22
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	0f 92       	push	r0
    29f2:	c0 90 04 16 	lds	r12, 0x1604	; 0x801604 <xTickCount>
    29f6:	d0 90 05 16 	lds	r13, 0x1605	; 0x801605 <xTickCount+0x1>
    29fa:	e0 90 06 16 	lds	r14, 0x1606	; 0x801606 <xTickCount+0x2>
    29fe:	f0 90 07 16 	lds	r15, 0x1607	; 0x801607 <xTickCount+0x3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	11 96       	adiw	r26, 0x01	; 1
    2a06:	0d 91       	ld	r16, X+
    2a08:	1d 91       	ld	r17, X+
    2a0a:	2d 91       	ld	r18, X+
    2a0c:	3c 91       	ld	r19, X
    2a0e:	14 97       	sbiw	r26, 0x04	; 4
    2a10:	46 01       	movw	r8, r12
    2a12:	57 01       	movw	r10, r14
    2a14:	80 1a       	sub	r8, r16
    2a16:	91 0a       	sbc	r9, r17
    2a18:	a2 0a       	sbc	r10, r18
    2a1a:	b3 0a       	sbc	r11, r19
    2a1c:	40 81       	ld	r20, Z
    2a1e:	51 81       	ldd	r21, Z+1	; 0x01
    2a20:	62 81       	ldd	r22, Z+2	; 0x02
    2a22:	73 81       	ldd	r23, Z+3	; 0x03
    2a24:	4f 3f       	cpi	r20, 0xFF	; 255
    2a26:	bf ef       	ldi	r27, 0xFF	; 255
    2a28:	5b 07       	cpc	r21, r27
    2a2a:	6b 07       	cpc	r22, r27
    2a2c:	7b 07       	cpc	r23, r27
    2a2e:	39 f1       	breq	.+78     	; 0x2a7e <xTaskCheckForTimeOut+0xac>
    2a30:	ec 01       	movw	r28, r24
    2a32:	b8 81       	ld	r27, Y
    2a34:	a0 91 fc 15 	lds	r26, 0x15FC	; 0x8015fc <xNumOfOverflows>
    2a38:	ba 17       	cp	r27, r26
    2a3a:	59 f0       	breq	.+22     	; 0x2a52 <xTaskCheckForTimeOut+0x80>
    2a3c:	c0 16       	cp	r12, r16
    2a3e:	d1 06       	cpc	r13, r17
    2a40:	e2 06       	cpc	r14, r18
    2a42:	f3 06       	cpc	r15, r19
    2a44:	30 f0       	brcs	.+12     	; 0x2a52 <xTaskCheckForTimeOut+0x80>
    2a46:	10 82       	st	Z, r1
    2a48:	11 82       	std	Z+1, r1	; 0x01
    2a4a:	12 82       	std	Z+2, r1	; 0x02
    2a4c:	13 82       	std	Z+3, r1	; 0x03
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	17 c0       	rjmp	.+46     	; 0x2a80 <xTaskCheckForTimeOut+0xae>
    2a52:	84 16       	cp	r8, r20
    2a54:	95 06       	cpc	r9, r21
    2a56:	a6 06       	cpc	r10, r22
    2a58:	b7 06       	cpc	r11, r23
    2a5a:	58 f4       	brcc	.+22     	; 0x2a72 <xTaskCheckForTimeOut+0xa0>
    2a5c:	48 19       	sub	r20, r8
    2a5e:	59 09       	sbc	r21, r9
    2a60:	6a 09       	sbc	r22, r10
    2a62:	7b 09       	sbc	r23, r11
    2a64:	40 83       	st	Z, r20
    2a66:	51 83       	std	Z+1, r21	; 0x01
    2a68:	62 83       	std	Z+2, r22	; 0x02
    2a6a:	73 83       	std	Z+3, r23	; 0x03
    2a6c:	a1 df       	rcall	.-190    	; 0x29b0 <vTaskInternalSetTimeOutState>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	07 c0       	rjmp	.+14     	; 0x2a80 <xTaskCheckForTimeOut+0xae>
    2a72:	10 82       	st	Z, r1
    2a74:	11 82       	std	Z+1, r1	; 0x01
    2a76:	12 82       	std	Z+2, r1	; 0x02
    2a78:	13 82       	std	Z+3, r1	; 0x03
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	01 c0       	rjmp	.+2      	; 0x2a80 <xTaskCheckForTimeOut+0xae>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0f 90       	pop	r0
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	ef 90       	pop	r14
    2a90:	df 90       	pop	r13
    2a92:	cf 90       	pop	r12
    2a94:	bf 90       	pop	r11
    2a96:	af 90       	pop	r10
    2a98:	9f 90       	pop	r9
    2a9a:	8f 90       	pop	r8
    2a9c:	08 95       	ret

00002a9e <vTaskMissedYield>:
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    2aa4:	08 95       	ret

00002aa6 <xTaskGetCurrentTaskHandle>:
    2aa6:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2aaa:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2aae:	08 95       	ret

00002ab0 <xTaskGetSchedulerState>:
    2ab0:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <xSchedulerRunning>
    2ab4:	88 23       	and	r24, r24
    2ab6:	31 f0       	breq	.+12     	; 0x2ac4 <xTaskGetSchedulerState+0x14>
    2ab8:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    2abc:	81 11       	cpse	r24, r1
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <xTaskGetSchedulerState+0x18>
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	08 95       	ret
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	08 95       	ret
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	08 95       	ret

00002acc <xTaskPriorityInherit>:
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	89 2b       	or	r24, r25
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <xTaskPriorityInherit+0x10>
    2ada:	77 c0       	rjmp	.+238    	; 0x2bca <xTaskPriorityInherit+0xfe>
    2adc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ade:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2ae2:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2ae6:	5a 96       	adiw	r26, 0x1a	; 26
    2ae8:	9c 91       	ld	r25, X
    2aea:	89 17       	cp	r24, r25
    2aec:	08 f0       	brcs	.+2      	; 0x2af0 <xTaskPriorityInherit+0x24>
    2aee:	63 c0       	rjmp	.+198    	; 0x2bb6 <xTaskPriorityInherit+0xea>
    2af0:	46 85       	ldd	r20, Z+14	; 0x0e
    2af2:	57 85       	ldd	r21, Z+15	; 0x0f
    2af4:	60 89       	ldd	r22, Z+16	; 0x10
    2af6:	71 89       	ldd	r23, Z+17	; 0x11
    2af8:	77 23       	and	r23, r23
    2afa:	94 f0       	brlt	.+36     	; 0x2b20 <xTaskPriorityInherit+0x54>
    2afc:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2b00:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2b04:	5a 96       	adiw	r26, 0x1a	; 26
    2b06:	9c 91       	ld	r25, X
    2b08:	4a e0       	ldi	r20, 0x0A	; 10
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	70 e0       	ldi	r23, 0x00	; 0
    2b10:	49 1b       	sub	r20, r25
    2b12:	51 09       	sbc	r21, r1
    2b14:	61 09       	sbc	r22, r1
    2b16:	71 09       	sbc	r23, r1
    2b18:	46 87       	std	Z+14, r20	; 0x0e
    2b1a:	57 87       	std	Z+15, r21	; 0x0f
    2b1c:	60 8b       	std	Z+16, r22	; 0x10
    2b1e:	71 8b       	std	Z+17, r23	; 0x11
    2b20:	24 85       	ldd	r18, Z+12	; 0x0c
    2b22:	35 85       	ldd	r19, Z+13	; 0x0d
    2b24:	4b e0       	ldi	r20, 0x0B	; 11
    2b26:	84 9f       	mul	r24, r20
    2b28:	c0 01       	movw	r24, r0
    2b2a:	11 24       	eor	r1, r1
    2b2c:	8b 5b       	subi	r24, 0xBB	; 187
    2b2e:	99 4e       	sbci	r25, 0xE9	; 233
    2b30:	28 17       	cp	r18, r24
    2b32:	39 07       	cpc	r19, r25
    2b34:	b9 f5       	brne	.+110    	; 0x2ba4 <xTaskPriorityInherit+0xd8>
    2b36:	ef 01       	movw	r28, r30
    2b38:	8f 01       	movw	r16, r30
    2b3a:	0e 5f       	subi	r16, 0xFE	; 254
    2b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3e:	c8 01       	movw	r24, r16
    2b40:	0e 94 33 05 	call	0xa66	; 0xa66 <uxListRemove>
    2b44:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2b48:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2b4c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2b4e:	ea 8f       	std	Y+26, r30	; 0x1a
    2b50:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2b54:	8e 17       	cp	r24, r30
    2b56:	10 f4       	brcc	.+4      	; 0x2b5c <xTaskPriorityInherit+0x90>
    2b58:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    2b5c:	8b e0       	ldi	r24, 0x0B	; 11
    2b5e:	8e 9f       	mul	r24, r30
    2b60:	f0 01       	movw	r30, r0
    2b62:	11 24       	eor	r1, r1
    2b64:	eb 5b       	subi	r30, 0xBB	; 187
    2b66:	f9 4e       	sbci	r31, 0xE9	; 233
    2b68:	01 80       	ldd	r0, Z+1	; 0x01
    2b6a:	f2 81       	ldd	r31, Z+2	; 0x02
    2b6c:	e0 2d       	mov	r30, r0
    2b6e:	ff 83       	std	Y+7, r31	; 0x07
    2b70:	ee 83       	std	Y+6, r30	; 0x06
    2b72:	26 81       	ldd	r18, Z+6	; 0x06
    2b74:	37 81       	ldd	r19, Z+7	; 0x07
    2b76:	39 87       	std	Y+9, r19	; 0x09
    2b78:	28 87       	std	Y+8, r18	; 0x08
    2b7a:	a6 81       	ldd	r26, Z+6	; 0x06
    2b7c:	b7 81       	ldd	r27, Z+7	; 0x07
    2b7e:	15 96       	adiw	r26, 0x05	; 5
    2b80:	1c 93       	st	X, r17
    2b82:	0e 93       	st	-X, r16
    2b84:	14 97       	sbiw	r26, 0x04	; 4
    2b86:	17 83       	std	Z+7, r17	; 0x07
    2b88:	06 83       	std	Z+6, r16	; 0x06
    2b8a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b8c:	8e 9f       	mul	r24, r30
    2b8e:	f0 01       	movw	r30, r0
    2b90:	11 24       	eor	r1, r1
    2b92:	eb 5b       	subi	r30, 0xBB	; 187
    2b94:	f9 4e       	sbci	r31, 0xE9	; 233
    2b96:	fd 87       	std	Y+13, r31	; 0x0d
    2b98:	ec 87       	std	Y+12, r30	; 0x0c
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8f 5f       	subi	r24, 0xFF	; 255
    2b9e:	80 83       	st	Z, r24
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	16 c0       	rjmp	.+44     	; 0x2bd0 <xTaskPriorityInherit+0x104>
    2ba4:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2ba8:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2bac:	5a 96       	adiw	r26, 0x1a	; 26
    2bae:	8c 91       	ld	r24, X
    2bb0:	82 8f       	std	Z+26, r24	; 0x1a
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	0d c0       	rjmp	.+26     	; 0x2bd0 <xTaskPriorityInherit+0x104>
    2bb6:	95 a5       	ldd	r25, Z+45	; 0x2d
    2bb8:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2bbc:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2bc0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bc2:	98 17       	cp	r25, r24
    2bc4:	20 f0       	brcs	.+8      	; 0x2bce <xTaskPriorityInherit+0x102>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	03 c0       	rjmp	.+6      	; 0x2bd0 <xTaskPriorityInherit+0x104>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	01 c0       	rjmp	.+2      	; 0x2bd0 <xTaskPriorityInherit+0x104>
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	08 95       	ret

00002bda <xTaskPriorityDisinherit>:
    2bda:	0f 93       	push	r16
    2bdc:	1f 93       	push	r17
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	fc 01       	movw	r30, r24
    2be4:	89 2b       	or	r24, r25
    2be6:	09 f4       	brne	.+2      	; 0x2bea <xTaskPriorityDisinherit+0x10>
    2be8:	49 c0       	rjmp	.+146    	; 0x2c7c <xTaskPriorityDisinherit+0xa2>
    2bea:	86 a5       	ldd	r24, Z+46	; 0x2e
    2bec:	81 50       	subi	r24, 0x01	; 1
    2bee:	86 a7       	std	Z+46, r24	; 0x2e
    2bf0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2bf2:	95 a5       	ldd	r25, Z+45	; 0x2d
    2bf4:	29 17       	cp	r18, r25
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <xTaskPriorityDisinherit+0x20>
    2bf8:	43 c0       	rjmp	.+134    	; 0x2c80 <xTaskPriorityDisinherit+0xa6>
    2bfa:	81 11       	cpse	r24, r1
    2bfc:	43 c0       	rjmp	.+134    	; 0x2c84 <xTaskPriorityDisinherit+0xaa>
    2bfe:	ef 01       	movw	r28, r30
    2c00:	8f 01       	movw	r16, r30
    2c02:	0e 5f       	subi	r16, 0xFE	; 254
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	c8 01       	movw	r24, r16
    2c08:	0e 94 33 05 	call	0xa66	; 0xa66 <uxListRemove>
    2c0c:	ed a5       	ldd	r30, Y+45	; 0x2d
    2c0e:	ea 8f       	std	Y+26, r30	; 0x1a
    2c10:	8a e0       	ldi	r24, 0x0A	; 10
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a0 e0       	ldi	r26, 0x00	; 0
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	8e 1b       	sub	r24, r30
    2c1a:	91 09       	sbc	r25, r1
    2c1c:	a1 09       	sbc	r26, r1
    2c1e:	b1 09       	sbc	r27, r1
    2c20:	8e 87       	std	Y+14, r24	; 0x0e
    2c22:	9f 87       	std	Y+15, r25	; 0x0f
    2c24:	a8 8b       	std	Y+16, r26	; 0x10
    2c26:	b9 8b       	std	Y+17, r27	; 0x11
    2c28:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2c2c:	8e 17       	cp	r24, r30
    2c2e:	10 f4       	brcc	.+4      	; 0x2c34 <xTaskPriorityDisinherit+0x5a>
    2c30:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    2c34:	8b e0       	ldi	r24, 0x0B	; 11
    2c36:	8e 9f       	mul	r24, r30
    2c38:	f0 01       	movw	r30, r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	eb 5b       	subi	r30, 0xBB	; 187
    2c3e:	f9 4e       	sbci	r31, 0xE9	; 233
    2c40:	01 80       	ldd	r0, Z+1	; 0x01
    2c42:	f2 81       	ldd	r31, Z+2	; 0x02
    2c44:	e0 2d       	mov	r30, r0
    2c46:	ff 83       	std	Y+7, r31	; 0x07
    2c48:	ee 83       	std	Y+6, r30	; 0x06
    2c4a:	26 81       	ldd	r18, Z+6	; 0x06
    2c4c:	37 81       	ldd	r19, Z+7	; 0x07
    2c4e:	39 87       	std	Y+9, r19	; 0x09
    2c50:	28 87       	std	Y+8, r18	; 0x08
    2c52:	a6 81       	ldd	r26, Z+6	; 0x06
    2c54:	b7 81       	ldd	r27, Z+7	; 0x07
    2c56:	15 96       	adiw	r26, 0x05	; 5
    2c58:	1c 93       	st	X, r17
    2c5a:	0e 93       	st	-X, r16
    2c5c:	14 97       	sbiw	r26, 0x04	; 4
    2c5e:	17 83       	std	Z+7, r17	; 0x07
    2c60:	06 83       	std	Z+6, r16	; 0x06
    2c62:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c64:	8e 9f       	mul	r24, r30
    2c66:	f0 01       	movw	r30, r0
    2c68:	11 24       	eor	r1, r1
    2c6a:	eb 5b       	subi	r30, 0xBB	; 187
    2c6c:	f9 4e       	sbci	r31, 0xE9	; 233
    2c6e:	fd 87       	std	Y+13, r31	; 0x0d
    2c70:	ec 87       	std	Y+12, r30	; 0x0c
    2c72:	80 81       	ld	r24, Z
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	80 83       	st	Z, r24
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	05 c0       	rjmp	.+10     	; 0x2c86 <xTaskPriorityDisinherit+0xac>
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	03 c0       	rjmp	.+6      	; 0x2c86 <xTaskPriorityDisinherit+0xac>
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <xTaskPriorityDisinherit+0xac>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	08 95       	ret

00002c90 <vTaskPriorityDisinheritAfterTimeout>:
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	fc 01       	movw	r30, r24
    2c9a:	89 2b       	or	r24, r25
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2c9e:	5a c0       	rjmp	.+180    	; 0x2d54 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ca0:	85 a5       	ldd	r24, Z+45	; 0x2d
    2ca2:	86 17       	cp	r24, r22
    2ca4:	08 f4       	brcc	.+2      	; 0x2ca8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2ca6:	86 2f       	mov	r24, r22
    2ca8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2caa:	89 17       	cp	r24, r25
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2cae:	52 c0       	rjmp	.+164    	; 0x2d54 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cb0:	26 a5       	ldd	r18, Z+46	; 0x2e
    2cb2:	21 30       	cpi	r18, 0x01	; 1
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2cb6:	4e c0       	rjmp	.+156    	; 0x2d54 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cb8:	82 8f       	std	Z+26, r24	; 0x1a
    2cba:	46 85       	ldd	r20, Z+14	; 0x0e
    2cbc:	57 85       	ldd	r21, Z+15	; 0x0f
    2cbe:	60 89       	ldd	r22, Z+16	; 0x10
    2cc0:	71 89       	ldd	r23, Z+17	; 0x11
    2cc2:	77 23       	and	r23, r23
    2cc4:	64 f0       	brlt	.+24     	; 0x2cde <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2cc6:	4a e0       	ldi	r20, 0x0A	; 10
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	48 1b       	sub	r20, r24
    2cd0:	51 09       	sbc	r21, r1
    2cd2:	61 09       	sbc	r22, r1
    2cd4:	71 09       	sbc	r23, r1
    2cd6:	46 87       	std	Z+14, r20	; 0x0e
    2cd8:	57 87       	std	Z+15, r21	; 0x0f
    2cda:	60 8b       	std	Z+16, r22	; 0x10
    2cdc:	71 8b       	std	Z+17, r23	; 0x11
    2cde:	24 85       	ldd	r18, Z+12	; 0x0c
    2ce0:	35 85       	ldd	r19, Z+13	; 0x0d
    2ce2:	4b e0       	ldi	r20, 0x0B	; 11
    2ce4:	94 9f       	mul	r25, r20
    2ce6:	c0 01       	movw	r24, r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	8b 5b       	subi	r24, 0xBB	; 187
    2cec:	99 4e       	sbci	r25, 0xE9	; 233
    2cee:	28 17       	cp	r18, r24
    2cf0:	39 07       	cpc	r19, r25
    2cf2:	81 f5       	brne	.+96     	; 0x2d54 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cf4:	ef 01       	movw	r28, r30
    2cf6:	8f 01       	movw	r16, r30
    2cf8:	0e 5f       	subi	r16, 0xFE	; 254
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	c8 01       	movw	r24, r16
    2cfe:	0e 94 33 05 	call	0xa66	; 0xa66 <uxListRemove>
    2d02:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d04:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2d08:	8e 17       	cp	r24, r30
    2d0a:	10 f4       	brcc	.+4      	; 0x2d10 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2d0c:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    2d10:	8b e0       	ldi	r24, 0x0B	; 11
    2d12:	8e 9f       	mul	r24, r30
    2d14:	f0 01       	movw	r30, r0
    2d16:	11 24       	eor	r1, r1
    2d18:	eb 5b       	subi	r30, 0xBB	; 187
    2d1a:	f9 4e       	sbci	r31, 0xE9	; 233
    2d1c:	01 80       	ldd	r0, Z+1	; 0x01
    2d1e:	f2 81       	ldd	r31, Z+2	; 0x02
    2d20:	e0 2d       	mov	r30, r0
    2d22:	ff 83       	std	Y+7, r31	; 0x07
    2d24:	ee 83       	std	Y+6, r30	; 0x06
    2d26:	26 81       	ldd	r18, Z+6	; 0x06
    2d28:	37 81       	ldd	r19, Z+7	; 0x07
    2d2a:	39 87       	std	Y+9, r19	; 0x09
    2d2c:	28 87       	std	Y+8, r18	; 0x08
    2d2e:	a6 81       	ldd	r26, Z+6	; 0x06
    2d30:	b7 81       	ldd	r27, Z+7	; 0x07
    2d32:	15 96       	adiw	r26, 0x05	; 5
    2d34:	1c 93       	st	X, r17
    2d36:	0e 93       	st	-X, r16
    2d38:	14 97       	sbiw	r26, 0x04	; 4
    2d3a:	17 83       	std	Z+7, r17	; 0x07
    2d3c:	06 83       	std	Z+6, r16	; 0x06
    2d3e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d40:	8e 9f       	mul	r24, r30
    2d42:	f0 01       	movw	r30, r0
    2d44:	11 24       	eor	r1, r1
    2d46:	eb 5b       	subi	r30, 0xBB	; 187
    2d48:	f9 4e       	sbci	r31, 0xE9	; 233
    2d4a:	fd 87       	std	Y+13, r31	; 0x0d
    2d4c:	ec 87       	std	Y+12, r30	; 0x0c
    2d4e:	80 81       	ld	r24, Z
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	80 83       	st	Z, r24
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	1f 91       	pop	r17
    2d5a:	0f 91       	pop	r16
    2d5c:	08 95       	ret

00002d5e <uxTaskResetEventItemValue>:
    2d5e:	cf 92       	push	r12
    2d60:	df 92       	push	r13
    2d62:	ef 92       	push	r14
    2d64:	ff 92       	push	r15
    2d66:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2d6a:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2d6e:	66 85       	ldd	r22, Z+14	; 0x0e
    2d70:	77 85       	ldd	r23, Z+15	; 0x0f
    2d72:	80 89       	ldd	r24, Z+16	; 0x10
    2d74:	91 89       	ldd	r25, Z+17	; 0x11
    2d76:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2d7a:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2d7e:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2d82:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2d86:	5a 96       	adiw	r26, 0x1a	; 26
    2d88:	2c 91       	ld	r18, X
    2d8a:	0f 2e       	mov	r0, r31
    2d8c:	fa e0       	ldi	r31, 0x0A	; 10
    2d8e:	cf 2e       	mov	r12, r31
    2d90:	d1 2c       	mov	r13, r1
    2d92:	e1 2c       	mov	r14, r1
    2d94:	f1 2c       	mov	r15, r1
    2d96:	f0 2d       	mov	r31, r0
    2d98:	c2 1a       	sub	r12, r18
    2d9a:	d1 08       	sbc	r13, r1
    2d9c:	e1 08       	sbc	r14, r1
    2d9e:	f1 08       	sbc	r15, r1
    2da0:	c6 86       	std	Z+14, r12	; 0x0e
    2da2:	d7 86       	std	Z+15, r13	; 0x0f
    2da4:	e0 8a       	std	Z+16, r14	; 0x10
    2da6:	f1 8a       	std	Z+17, r15	; 0x11
    2da8:	ff 90       	pop	r15
    2daa:	ef 90       	pop	r14
    2dac:	df 90       	pop	r13
    2dae:	cf 90       	pop	r12
    2db0:	08 95       	ret

00002db2 <pvTaskIncrementMutexHeldCount>:
    2db2:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2db6:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2dba:	89 2b       	or	r24, r25
    2dbc:	39 f0       	breq	.+14     	; 0x2dcc <pvTaskIncrementMutexHeldCount+0x1a>
    2dbe:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2dc2:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2dc6:	86 a5       	ldd	r24, Z+46	; 0x2e
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	86 a7       	std	Z+46, r24	; 0x2e
    2dcc:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2dd0:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2dd4:	08 95       	ret

00002dd6 <xTaskGenericNotifyWait>:
    2dd6:	4f 92       	push	r4
    2dd8:	5f 92       	push	r5
    2dda:	6f 92       	push	r6
    2ddc:	7f 92       	push	r7
    2dde:	af 92       	push	r10
    2de0:	bf 92       	push	r11
    2de2:	cf 92       	push	r12
    2de4:	df 92       	push	r13
    2de6:	ef 92       	push	r14
    2de8:	ff 92       	push	r15
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	28 01       	movw	r4, r16
    2df4:	39 01       	movw	r6, r18
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	0f 92       	push	r0
    2dfc:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2e00:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2e04:	c8 2f       	mov	r28, r24
    2e06:	d0 e0       	ldi	r29, 0x00	; 0
    2e08:	ec 0f       	add	r30, r28
    2e0a:	fd 1f       	adc	r31, r29
    2e0c:	83 a9       	ldd	r24, Z+51	; 0x33
    2e0e:	82 30       	cpi	r24, 0x02	; 2
    2e10:	79 f1       	breq	.+94     	; 0x2e70 <xTaskGenericNotifyWait+0x9a>
    2e12:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2e16:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	e8 0f       	add	r30, r24
    2e26:	f9 1f       	adc	r31, r25
    2e28:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e2a:	90 a9       	ldd	r25, Z+48	; 0x30
    2e2c:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e2e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e30:	40 95       	com	r20
    2e32:	50 95       	com	r21
    2e34:	60 95       	com	r22
    2e36:	70 95       	com	r23
    2e38:	48 23       	and	r20, r24
    2e3a:	59 23       	and	r21, r25
    2e3c:	6a 23       	and	r22, r26
    2e3e:	7b 23       	and	r23, r27
    2e40:	47 a7       	std	Z+47, r20	; 0x2f
    2e42:	50 ab       	std	Z+48, r21	; 0x30
    2e44:	61 ab       	std	Z+49, r22	; 0x31
    2e46:	72 ab       	std	Z+50, r23	; 0x32
    2e48:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2e4c:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2e50:	ec 0f       	add	r30, r28
    2e52:	fd 1f       	adc	r31, r29
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	83 ab       	std	Z+51, r24	; 0x33
    2e58:	a1 14       	cp	r10, r1
    2e5a:	b1 04       	cpc	r11, r1
    2e5c:	c1 04       	cpc	r12, r1
    2e5e:	d1 04       	cpc	r13, r1
    2e60:	39 f0       	breq	.+14     	; 0x2e70 <xTaskGenericNotifyWait+0x9a>
    2e62:	41 e0       	ldi	r20, 0x01	; 1
    2e64:	c6 01       	movw	r24, r12
    2e66:	b5 01       	movw	r22, r10
    2e68:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <prvAddCurrentTaskToDelayedList>
    2e6c:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    2e70:	0f 90       	pop	r0
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	0f 92       	push	r0
    2e7a:	e1 14       	cp	r14, r1
    2e7c:	f1 04       	cpc	r15, r1
    2e7e:	a1 f0       	breq	.+40     	; 0x2ea8 <xTaskGenericNotifyWait+0xd2>
    2e80:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2e84:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2e88:	ce 01       	movw	r24, r28
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	e8 0f       	add	r30, r24
    2e94:	f9 1f       	adc	r31, r25
    2e96:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e98:	90 a9       	ldd	r25, Z+48	; 0x30
    2e9a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e9c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e9e:	f7 01       	movw	r30, r14
    2ea0:	80 83       	st	Z, r24
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	a2 83       	std	Z+2, r26	; 0x02
    2ea6:	b3 83       	std	Z+3, r27	; 0x03
    2ea8:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2eac:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2eb0:	ec 0f       	add	r30, r28
    2eb2:	fd 1f       	adc	r31, r29
    2eb4:	83 a9       	ldd	r24, Z+51	; 0x33
    2eb6:	82 30       	cpi	r24, 0x02	; 2
    2eb8:	e9 f4       	brne	.+58     	; 0x2ef4 <xTaskGenericNotifyWait+0x11e>
    2eba:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2ebe:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2ec2:	ce 01       	movw	r24, r28
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	e8 0f       	add	r30, r24
    2ece:	f9 1f       	adc	r31, r25
    2ed0:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ed2:	90 a9       	ldd	r25, Z+48	; 0x30
    2ed4:	a1 a9       	ldd	r26, Z+49	; 0x31
    2ed6:	b2 a9       	ldd	r27, Z+50	; 0x32
    2ed8:	40 94       	com	r4
    2eda:	50 94       	com	r5
    2edc:	60 94       	com	r6
    2ede:	70 94       	com	r7
    2ee0:	48 22       	and	r4, r24
    2ee2:	59 22       	and	r5, r25
    2ee4:	6a 22       	and	r6, r26
    2ee6:	7b 22       	and	r7, r27
    2ee8:	47 a6       	std	Z+47, r4	; 0x2f
    2eea:	50 aa       	std	Z+48, r5	; 0x30
    2eec:	61 aa       	std	Z+49, r6	; 0x31
    2eee:	72 aa       	std	Z+50, r7	; 0x32
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	01 c0       	rjmp	.+2      	; 0x2ef6 <xTaskGenericNotifyWait+0x120>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	20 91 b3 16 	lds	r18, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2efa:	30 91 b4 16 	lds	r19, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2efe:	c2 0f       	add	r28, r18
    2f00:	d3 1f       	adc	r29, r19
    2f02:	1b aa       	std	Y+51, r1	; 0x33
    2f04:	0f 90       	pop	r0
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	ff 90       	pop	r15
    2f12:	ef 90       	pop	r14
    2f14:	df 90       	pop	r13
    2f16:	cf 90       	pop	r12
    2f18:	bf 90       	pop	r11
    2f1a:	af 90       	pop	r10
    2f1c:	7f 90       	pop	r7
    2f1e:	6f 90       	pop	r6
    2f20:	5f 90       	pop	r5
    2f22:	4f 90       	pop	r4
    2f24:	08 95       	ret

00002f26 <xTaskGenericNotify>:
    2f26:	8f 92       	push	r8
    2f28:	9f 92       	push	r9
    2f2a:	af 92       	push	r10
    2f2c:	bf 92       	push	r11
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	dc 01       	movw	r26, r24
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	0f 92       	push	r0
    2f40:	e1 14       	cp	r14, r1
    2f42:	f1 04       	cpc	r15, r1
    2f44:	89 f0       	breq	.+34     	; 0x2f68 <xTaskGenericNotify+0x42>
    2f46:	e6 2f       	mov	r30, r22
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	ee 0f       	add	r30, r30
    2f4c:	ff 1f       	adc	r31, r31
    2f4e:	ee 0f       	add	r30, r30
    2f50:	ff 1f       	adc	r31, r31
    2f52:	e8 0f       	add	r30, r24
    2f54:	f9 1f       	adc	r31, r25
    2f56:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f58:	90 a8       	ldd	r9, Z+48	; 0x30
    2f5a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f5c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f5e:	f7 01       	movw	r30, r14
    2f60:	80 82       	st	Z, r8
    2f62:	91 82       	std	Z+1, r9	; 0x01
    2f64:	a2 82       	std	Z+2, r10	; 0x02
    2f66:	b3 82       	std	Z+3, r11	; 0x03
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	fd 01       	movw	r30, r26
    2f6c:	e6 0f       	add	r30, r22
    2f6e:	f7 1f       	adc	r31, r23
    2f70:	83 a9       	ldd	r24, Z+51	; 0x33
    2f72:	92 e0       	ldi	r25, 0x02	; 2
    2f74:	93 ab       	std	Z+51, r25	; 0x33
    2f76:	02 30       	cpi	r16, 0x02	; 2
    2f78:	01 f1       	breq	.+64     	; 0x2fba <xTaskGenericNotify+0x94>
    2f7a:	18 f4       	brcc	.+6      	; 0x2f82 <xTaskGenericNotify+0x5c>
    2f7c:	01 30       	cpi	r16, 0x01	; 1
    2f7e:	31 f0       	breq	.+12     	; 0x2f8c <xTaskGenericNotify+0x66>
    2f80:	4d c0       	rjmp	.+154    	; 0x301c <xTaskGenericNotify+0xf6>
    2f82:	03 30       	cpi	r16, 0x03	; 3
    2f84:	79 f1       	breq	.+94     	; 0x2fe4 <xTaskGenericNotify+0xbe>
    2f86:	04 30       	cpi	r16, 0x04	; 4
    2f88:	d1 f1       	breq	.+116    	; 0x2ffe <xTaskGenericNotify+0xd8>
    2f8a:	48 c0       	rjmp	.+144    	; 0x301c <xTaskGenericNotify+0xf6>
    2f8c:	66 0f       	add	r22, r22
    2f8e:	77 1f       	adc	r23, r23
    2f90:	66 0f       	add	r22, r22
    2f92:	77 1f       	adc	r23, r23
    2f94:	fd 01       	movw	r30, r26
    2f96:	e6 0f       	add	r30, r22
    2f98:	f7 1f       	adc	r31, r23
    2f9a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f9c:	90 a8       	ldd	r9, Z+48	; 0x30
    2f9e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2fa0:	b2 a8       	ldd	r11, Z+50	; 0x32
    2fa2:	ba 01       	movw	r22, r20
    2fa4:	a9 01       	movw	r20, r18
    2fa6:	48 29       	or	r20, r8
    2fa8:	59 29       	or	r21, r9
    2faa:	6a 29       	or	r22, r10
    2fac:	7b 29       	or	r23, r11
    2fae:	47 a7       	std	Z+47, r20	; 0x2f
    2fb0:	50 ab       	std	Z+48, r21	; 0x30
    2fb2:	61 ab       	std	Z+49, r22	; 0x31
    2fb4:	72 ab       	std	Z+50, r23	; 0x32
    2fb6:	01 e0       	ldi	r16, 0x01	; 1
    2fb8:	34 c0       	rjmp	.+104    	; 0x3022 <xTaskGenericNotify+0xfc>
    2fba:	66 0f       	add	r22, r22
    2fbc:	77 1f       	adc	r23, r23
    2fbe:	66 0f       	add	r22, r22
    2fc0:	77 1f       	adc	r23, r23
    2fc2:	fd 01       	movw	r30, r26
    2fc4:	e6 0f       	add	r30, r22
    2fc6:	f7 1f       	adc	r31, r23
    2fc8:	47 a5       	ldd	r20, Z+47	; 0x2f
    2fca:	50 a9       	ldd	r21, Z+48	; 0x30
    2fcc:	61 a9       	ldd	r22, Z+49	; 0x31
    2fce:	72 a9       	ldd	r23, Z+50	; 0x32
    2fd0:	4f 5f       	subi	r20, 0xFF	; 255
    2fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd4:	6f 4f       	sbci	r22, 0xFF	; 255
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	47 a7       	std	Z+47, r20	; 0x2f
    2fda:	50 ab       	std	Z+48, r21	; 0x30
    2fdc:	61 ab       	std	Z+49, r22	; 0x31
    2fde:	72 ab       	std	Z+50, r23	; 0x32
    2fe0:	01 e0       	ldi	r16, 0x01	; 1
    2fe2:	1f c0       	rjmp	.+62     	; 0x3022 <xTaskGenericNotify+0xfc>
    2fe4:	66 0f       	add	r22, r22
    2fe6:	77 1f       	adc	r23, r23
    2fe8:	66 0f       	add	r22, r22
    2fea:	77 1f       	adc	r23, r23
    2fec:	fd 01       	movw	r30, r26
    2fee:	e6 0f       	add	r30, r22
    2ff0:	f7 1f       	adc	r31, r23
    2ff2:	27 a7       	std	Z+47, r18	; 0x2f
    2ff4:	30 ab       	std	Z+48, r19	; 0x30
    2ff6:	41 ab       	std	Z+49, r20	; 0x31
    2ff8:	52 ab       	std	Z+50, r21	; 0x32
    2ffa:	01 e0       	ldi	r16, 0x01	; 1
    2ffc:	12 c0       	rjmp	.+36     	; 0x3022 <xTaskGenericNotify+0xfc>
    2ffe:	82 30       	cpi	r24, 0x02	; 2
    3000:	79 f0       	breq	.+30     	; 0x3020 <xTaskGenericNotify+0xfa>
    3002:	66 0f       	add	r22, r22
    3004:	77 1f       	adc	r23, r23
    3006:	66 0f       	add	r22, r22
    3008:	77 1f       	adc	r23, r23
    300a:	fd 01       	movw	r30, r26
    300c:	e6 0f       	add	r30, r22
    300e:	f7 1f       	adc	r31, r23
    3010:	27 a7       	std	Z+47, r18	; 0x2f
    3012:	30 ab       	std	Z+48, r19	; 0x30
    3014:	41 ab       	std	Z+49, r20	; 0x31
    3016:	52 ab       	std	Z+50, r21	; 0x32
    3018:	01 e0       	ldi	r16, 0x01	; 1
    301a:	03 c0       	rjmp	.+6      	; 0x3022 <xTaskGenericNotify+0xfc>
    301c:	01 e0       	ldi	r16, 0x01	; 1
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <xTaskGenericNotify+0xfc>
    3020:	00 e0       	ldi	r16, 0x00	; 0
    3022:	81 30       	cpi	r24, 0x01	; 1
    3024:	09 f0       	breq	.+2      	; 0x3028 <xTaskGenericNotify+0x102>
    3026:	69 c0       	rjmp	.+210    	; 0x30fa <xTaskGenericNotify+0x1d4>
    3028:	1c 96       	adiw	r26, 0x0c	; 12
    302a:	ed 91       	ld	r30, X+
    302c:	fc 91       	ld	r31, X
    302e:	1d 97       	sbiw	r26, 0x0d	; 13
    3030:	16 96       	adiw	r26, 0x06	; 6
    3032:	cd 91       	ld	r28, X+
    3034:	dc 91       	ld	r29, X
    3036:	17 97       	sbiw	r26, 0x07	; 7
    3038:	18 96       	adiw	r26, 0x08	; 8
    303a:	8d 91       	ld	r24, X+
    303c:	9c 91       	ld	r25, X
    303e:	19 97       	sbiw	r26, 0x09	; 9
    3040:	9f 83       	std	Y+7, r25	; 0x07
    3042:	8e 83       	std	Y+6, r24	; 0x06
    3044:	18 96       	adiw	r26, 0x08	; 8
    3046:	cd 91       	ld	r28, X+
    3048:	dc 91       	ld	r29, X
    304a:	19 97       	sbiw	r26, 0x09	; 9
    304c:	16 96       	adiw	r26, 0x06	; 6
    304e:	8d 91       	ld	r24, X+
    3050:	9c 91       	ld	r25, X
    3052:	17 97       	sbiw	r26, 0x07	; 7
    3054:	9d 83       	std	Y+5, r25	; 0x05
    3056:	8c 83       	std	Y+4, r24	; 0x04
    3058:	81 81       	ldd	r24, Z+1	; 0x01
    305a:	92 81       	ldd	r25, Z+2	; 0x02
    305c:	9d 01       	movw	r18, r26
    305e:	2e 5f       	subi	r18, 0xFE	; 254
    3060:	3f 4f       	sbci	r19, 0xFF	; 255
    3062:	82 17       	cp	r24, r18
    3064:	93 07       	cpc	r25, r19
    3066:	31 f4       	brne	.+12     	; 0x3074 <xTaskGenericNotify+0x14e>
    3068:	18 96       	adiw	r26, 0x08	; 8
    306a:	8d 91       	ld	r24, X+
    306c:	9c 91       	ld	r25, X
    306e:	19 97       	sbiw	r26, 0x09	; 9
    3070:	92 83       	std	Z+2, r25	; 0x02
    3072:	81 83       	std	Z+1, r24	; 0x01
    3074:	1d 96       	adiw	r26, 0x0d	; 13
    3076:	1c 92       	st	X, r1
    3078:	1e 92       	st	-X, r1
    307a:	1c 97       	sbiw	r26, 0x0c	; 12
    307c:	80 81       	ld	r24, Z
    307e:	81 50       	subi	r24, 0x01	; 1
    3080:	80 83       	st	Z, r24
    3082:	5a 96       	adiw	r26, 0x1a	; 26
    3084:	ec 91       	ld	r30, X
    3086:	5a 97       	sbiw	r26, 0x1a	; 26
    3088:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    308c:	8e 17       	cp	r24, r30
    308e:	10 f4       	brcc	.+4      	; 0x3094 <xTaskGenericNotify+0x16e>
    3090:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    3094:	8b e0       	ldi	r24, 0x0B	; 11
    3096:	8e 9f       	mul	r24, r30
    3098:	f0 01       	movw	r30, r0
    309a:	11 24       	eor	r1, r1
    309c:	eb 5b       	subi	r30, 0xBB	; 187
    309e:	f9 4e       	sbci	r31, 0xE9	; 233
    30a0:	01 80       	ldd	r0, Z+1	; 0x01
    30a2:	f2 81       	ldd	r31, Z+2	; 0x02
    30a4:	e0 2d       	mov	r30, r0
    30a6:	17 96       	adiw	r26, 0x07	; 7
    30a8:	fc 93       	st	X, r31
    30aa:	ee 93       	st	-X, r30
    30ac:	16 97       	sbiw	r26, 0x06	; 6
    30ae:	46 81       	ldd	r20, Z+6	; 0x06
    30b0:	57 81       	ldd	r21, Z+7	; 0x07
    30b2:	19 96       	adiw	r26, 0x09	; 9
    30b4:	5c 93       	st	X, r21
    30b6:	4e 93       	st	-X, r20
    30b8:	18 97       	sbiw	r26, 0x08	; 8
    30ba:	c6 81       	ldd	r28, Z+6	; 0x06
    30bc:	d7 81       	ldd	r29, Z+7	; 0x07
    30be:	3d 83       	std	Y+5, r19	; 0x05
    30c0:	2c 83       	std	Y+4, r18	; 0x04
    30c2:	37 83       	std	Z+7, r19	; 0x07
    30c4:	26 83       	std	Z+6, r18	; 0x06
    30c6:	5a 96       	adiw	r26, 0x1a	; 26
    30c8:	ec 91       	ld	r30, X
    30ca:	5a 97       	sbiw	r26, 0x1a	; 26
    30cc:	8e 9f       	mul	r24, r30
    30ce:	f0 01       	movw	r30, r0
    30d0:	11 24       	eor	r1, r1
    30d2:	eb 5b       	subi	r30, 0xBB	; 187
    30d4:	f9 4e       	sbci	r31, 0xE9	; 233
    30d6:	1d 96       	adiw	r26, 0x0d	; 13
    30d8:	fc 93       	st	X, r31
    30da:	ee 93       	st	-X, r30
    30dc:	1c 97       	sbiw	r26, 0x0c	; 12
    30de:	80 81       	ld	r24, Z
    30e0:	8f 5f       	subi	r24, 0xFF	; 255
    30e2:	80 83       	st	Z, r24
    30e4:	5a 96       	adiw	r26, 0x1a	; 26
    30e6:	9c 91       	ld	r25, X
    30e8:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    30ec:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    30f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    30f2:	89 17       	cp	r24, r25
    30f4:	10 f4       	brcc	.+4      	; 0x30fa <xTaskGenericNotify+0x1d4>
    30f6:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    30fa:	0f 90       	pop	r0
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	80 2f       	mov	r24, r16
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	0f 91       	pop	r16
    3106:	ff 90       	pop	r15
    3108:	ef 90       	pop	r14
    310a:	bf 90       	pop	r11
    310c:	af 90       	pop	r10
    310e:	9f 90       	pop	r9
    3110:	8f 90       	pop	r8
    3112:	08 95       	ret

00003114 <xTaskGenericNotifyFromISR>:
    3114:	8f 92       	push	r8
    3116:	9f 92       	push	r9
    3118:	af 92       	push	r10
    311a:	bf 92       	push	r11
    311c:	cf 92       	push	r12
    311e:	df 92       	push	r13
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	dc 01       	movw	r26, r24
    312c:	e1 14       	cp	r14, r1
    312e:	f1 04       	cpc	r15, r1
    3130:	89 f0       	breq	.+34     	; 0x3154 <xTaskGenericNotifyFromISR+0x40>
    3132:	e6 2f       	mov	r30, r22
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	ee 0f       	add	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	ee 0f       	add	r30, r30
    313c:	ff 1f       	adc	r31, r31
    313e:	e8 0f       	add	r30, r24
    3140:	f9 1f       	adc	r31, r25
    3142:	87 a4       	ldd	r8, Z+47	; 0x2f
    3144:	90 a8       	ldd	r9, Z+48	; 0x30
    3146:	a1 a8       	ldd	r10, Z+49	; 0x31
    3148:	b2 a8       	ldd	r11, Z+50	; 0x32
    314a:	f7 01       	movw	r30, r14
    314c:	80 82       	st	Z, r8
    314e:	91 82       	std	Z+1, r9	; 0x01
    3150:	a2 82       	std	Z+2, r10	; 0x02
    3152:	b3 82       	std	Z+3, r11	; 0x03
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	fd 01       	movw	r30, r26
    3158:	e6 0f       	add	r30, r22
    315a:	f7 1f       	adc	r31, r23
    315c:	93 a9       	ldd	r25, Z+51	; 0x33
    315e:	82 e0       	ldi	r24, 0x02	; 2
    3160:	83 ab       	std	Z+51, r24	; 0x33
    3162:	02 30       	cpi	r16, 0x02	; 2
    3164:	01 f1       	breq	.+64     	; 0x31a6 <xTaskGenericNotifyFromISR+0x92>
    3166:	18 f4       	brcc	.+6      	; 0x316e <xTaskGenericNotifyFromISR+0x5a>
    3168:	01 30       	cpi	r16, 0x01	; 1
    316a:	31 f0       	breq	.+12     	; 0x3178 <xTaskGenericNotifyFromISR+0x64>
    316c:	4d c0       	rjmp	.+154    	; 0x3208 <xTaskGenericNotifyFromISR+0xf4>
    316e:	03 30       	cpi	r16, 0x03	; 3
    3170:	79 f1       	breq	.+94     	; 0x31d0 <xTaskGenericNotifyFromISR+0xbc>
    3172:	04 30       	cpi	r16, 0x04	; 4
    3174:	d1 f1       	breq	.+116    	; 0x31ea <xTaskGenericNotifyFromISR+0xd6>
    3176:	48 c0       	rjmp	.+144    	; 0x3208 <xTaskGenericNotifyFromISR+0xf4>
    3178:	66 0f       	add	r22, r22
    317a:	77 1f       	adc	r23, r23
    317c:	66 0f       	add	r22, r22
    317e:	77 1f       	adc	r23, r23
    3180:	fd 01       	movw	r30, r26
    3182:	e6 0f       	add	r30, r22
    3184:	f7 1f       	adc	r31, r23
    3186:	87 a4       	ldd	r8, Z+47	; 0x2f
    3188:	90 a8       	ldd	r9, Z+48	; 0x30
    318a:	a1 a8       	ldd	r10, Z+49	; 0x31
    318c:	b2 a8       	ldd	r11, Z+50	; 0x32
    318e:	ba 01       	movw	r22, r20
    3190:	a9 01       	movw	r20, r18
    3192:	48 29       	or	r20, r8
    3194:	59 29       	or	r21, r9
    3196:	6a 29       	or	r22, r10
    3198:	7b 29       	or	r23, r11
    319a:	47 a7       	std	Z+47, r20	; 0x2f
    319c:	50 ab       	std	Z+48, r21	; 0x30
    319e:	61 ab       	std	Z+49, r22	; 0x31
    31a0:	72 ab       	std	Z+50, r23	; 0x32
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	34 c0       	rjmp	.+104    	; 0x320e <xTaskGenericNotifyFromISR+0xfa>
    31a6:	66 0f       	add	r22, r22
    31a8:	77 1f       	adc	r23, r23
    31aa:	66 0f       	add	r22, r22
    31ac:	77 1f       	adc	r23, r23
    31ae:	fd 01       	movw	r30, r26
    31b0:	e6 0f       	add	r30, r22
    31b2:	f7 1f       	adc	r31, r23
    31b4:	47 a5       	ldd	r20, Z+47	; 0x2f
    31b6:	50 a9       	ldd	r21, Z+48	; 0x30
    31b8:	61 a9       	ldd	r22, Z+49	; 0x31
    31ba:	72 a9       	ldd	r23, Z+50	; 0x32
    31bc:	4f 5f       	subi	r20, 0xFF	; 255
    31be:	5f 4f       	sbci	r21, 0xFF	; 255
    31c0:	6f 4f       	sbci	r22, 0xFF	; 255
    31c2:	7f 4f       	sbci	r23, 0xFF	; 255
    31c4:	47 a7       	std	Z+47, r20	; 0x2f
    31c6:	50 ab       	std	Z+48, r21	; 0x30
    31c8:	61 ab       	std	Z+49, r22	; 0x31
    31ca:	72 ab       	std	Z+50, r23	; 0x32
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	1f c0       	rjmp	.+62     	; 0x320e <xTaskGenericNotifyFromISR+0xfa>
    31d0:	66 0f       	add	r22, r22
    31d2:	77 1f       	adc	r23, r23
    31d4:	66 0f       	add	r22, r22
    31d6:	77 1f       	adc	r23, r23
    31d8:	fd 01       	movw	r30, r26
    31da:	e6 0f       	add	r30, r22
    31dc:	f7 1f       	adc	r31, r23
    31de:	27 a7       	std	Z+47, r18	; 0x2f
    31e0:	30 ab       	std	Z+48, r19	; 0x30
    31e2:	41 ab       	std	Z+49, r20	; 0x31
    31e4:	52 ab       	std	Z+50, r21	; 0x32
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	12 c0       	rjmp	.+36     	; 0x320e <xTaskGenericNotifyFromISR+0xfa>
    31ea:	92 30       	cpi	r25, 0x02	; 2
    31ec:	79 f0       	breq	.+30     	; 0x320c <xTaskGenericNotifyFromISR+0xf8>
    31ee:	66 0f       	add	r22, r22
    31f0:	77 1f       	adc	r23, r23
    31f2:	66 0f       	add	r22, r22
    31f4:	77 1f       	adc	r23, r23
    31f6:	fd 01       	movw	r30, r26
    31f8:	e6 0f       	add	r30, r22
    31fa:	f7 1f       	adc	r31, r23
    31fc:	27 a7       	std	Z+47, r18	; 0x2f
    31fe:	30 ab       	std	Z+48, r19	; 0x30
    3200:	41 ab       	std	Z+49, r20	; 0x31
    3202:	52 ab       	std	Z+50, r21	; 0x32
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	03 c0       	rjmp	.+6      	; 0x320e <xTaskGenericNotifyFromISR+0xfa>
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	01 c0       	rjmp	.+2      	; 0x320e <xTaskGenericNotifyFromISR+0xfa>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	91 30       	cpi	r25, 0x01	; 1
    3210:	09 f0       	breq	.+2      	; 0x3214 <xTaskGenericNotifyFromISR+0x100>
    3212:	96 c0       	rjmp	.+300    	; 0x3340 <xTaskGenericNotifyFromISR+0x22c>
    3214:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    3218:	91 11       	cpse	r25, r1
    321a:	5f c0       	rjmp	.+190    	; 0x32da <xTaskGenericNotifyFromISR+0x1c6>
    321c:	1c 96       	adiw	r26, 0x0c	; 12
    321e:	ed 91       	ld	r30, X+
    3220:	fc 91       	ld	r31, X
    3222:	1d 97       	sbiw	r26, 0x0d	; 13
    3224:	16 96       	adiw	r26, 0x06	; 6
    3226:	cd 91       	ld	r28, X+
    3228:	dc 91       	ld	r29, X
    322a:	17 97       	sbiw	r26, 0x07	; 7
    322c:	18 96       	adiw	r26, 0x08	; 8
    322e:	2d 91       	ld	r18, X+
    3230:	3c 91       	ld	r19, X
    3232:	19 97       	sbiw	r26, 0x09	; 9
    3234:	3f 83       	std	Y+7, r19	; 0x07
    3236:	2e 83       	std	Y+6, r18	; 0x06
    3238:	18 96       	adiw	r26, 0x08	; 8
    323a:	cd 91       	ld	r28, X+
    323c:	dc 91       	ld	r29, X
    323e:	19 97       	sbiw	r26, 0x09	; 9
    3240:	16 96       	adiw	r26, 0x06	; 6
    3242:	2d 91       	ld	r18, X+
    3244:	3c 91       	ld	r19, X
    3246:	17 97       	sbiw	r26, 0x07	; 7
    3248:	3d 83       	std	Y+5, r19	; 0x05
    324a:	2c 83       	std	Y+4, r18	; 0x04
    324c:	41 81       	ldd	r20, Z+1	; 0x01
    324e:	52 81       	ldd	r21, Z+2	; 0x02
    3250:	9d 01       	movw	r18, r26
    3252:	2e 5f       	subi	r18, 0xFE	; 254
    3254:	3f 4f       	sbci	r19, 0xFF	; 255
    3256:	42 17       	cp	r20, r18
    3258:	53 07       	cpc	r21, r19
    325a:	31 f4       	brne	.+12     	; 0x3268 <xTaskGenericNotifyFromISR+0x154>
    325c:	18 96       	adiw	r26, 0x08	; 8
    325e:	4d 91       	ld	r20, X+
    3260:	5c 91       	ld	r21, X
    3262:	19 97       	sbiw	r26, 0x09	; 9
    3264:	52 83       	std	Z+2, r21	; 0x02
    3266:	41 83       	std	Z+1, r20	; 0x01
    3268:	1d 96       	adiw	r26, 0x0d	; 13
    326a:	1c 92       	st	X, r1
    326c:	1e 92       	st	-X, r1
    326e:	1c 97       	sbiw	r26, 0x0c	; 12
    3270:	90 81       	ld	r25, Z
    3272:	91 50       	subi	r25, 0x01	; 1
    3274:	90 83       	st	Z, r25
    3276:	5a 96       	adiw	r26, 0x1a	; 26
    3278:	ec 91       	ld	r30, X
    327a:	5a 97       	sbiw	r26, 0x1a	; 26
    327c:	90 91 03 16 	lds	r25, 0x1603	; 0x801603 <uxTopReadyPriority>
    3280:	9e 17       	cp	r25, r30
    3282:	10 f4       	brcc	.+4      	; 0x3288 <xTaskGenericNotifyFromISR+0x174>
    3284:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    3288:	9b e0       	ldi	r25, 0x0B	; 11
    328a:	9e 9f       	mul	r25, r30
    328c:	f0 01       	movw	r30, r0
    328e:	11 24       	eor	r1, r1
    3290:	eb 5b       	subi	r30, 0xBB	; 187
    3292:	f9 4e       	sbci	r31, 0xE9	; 233
    3294:	01 80       	ldd	r0, Z+1	; 0x01
    3296:	f2 81       	ldd	r31, Z+2	; 0x02
    3298:	e0 2d       	mov	r30, r0
    329a:	17 96       	adiw	r26, 0x07	; 7
    329c:	fc 93       	st	X, r31
    329e:	ee 93       	st	-X, r30
    32a0:	16 97       	sbiw	r26, 0x06	; 6
    32a2:	46 81       	ldd	r20, Z+6	; 0x06
    32a4:	57 81       	ldd	r21, Z+7	; 0x07
    32a6:	19 96       	adiw	r26, 0x09	; 9
    32a8:	5c 93       	st	X, r21
    32aa:	4e 93       	st	-X, r20
    32ac:	18 97       	sbiw	r26, 0x08	; 8
    32ae:	c6 81       	ldd	r28, Z+6	; 0x06
    32b0:	d7 81       	ldd	r29, Z+7	; 0x07
    32b2:	3d 83       	std	Y+5, r19	; 0x05
    32b4:	2c 83       	std	Y+4, r18	; 0x04
    32b6:	37 83       	std	Z+7, r19	; 0x07
    32b8:	26 83       	std	Z+6, r18	; 0x06
    32ba:	5a 96       	adiw	r26, 0x1a	; 26
    32bc:	ec 91       	ld	r30, X
    32be:	5a 97       	sbiw	r26, 0x1a	; 26
    32c0:	9e 9f       	mul	r25, r30
    32c2:	f0 01       	movw	r30, r0
    32c4:	11 24       	eor	r1, r1
    32c6:	eb 5b       	subi	r30, 0xBB	; 187
    32c8:	f9 4e       	sbci	r31, 0xE9	; 233
    32ca:	1d 96       	adiw	r26, 0x0d	; 13
    32cc:	fc 93       	st	X, r31
    32ce:	ee 93       	st	-X, r30
    32d0:	1c 97       	sbiw	r26, 0x0c	; 12
    32d2:	90 81       	ld	r25, Z
    32d4:	9f 5f       	subi	r25, 0xFF	; 255
    32d6:	90 83       	st	Z, r25
    32d8:	21 c0       	rjmp	.+66     	; 0x331c <xTaskGenericNotifyFromISR+0x208>
    32da:	60 e2       	ldi	r22, 0x20	; 32
    32dc:	76 e1       	ldi	r23, 0x16	; 22
    32de:	fb 01       	movw	r30, r22
    32e0:	c1 81       	ldd	r28, Z+1	; 0x01
    32e2:	d2 81       	ldd	r29, Z+2	; 0x02
    32e4:	53 96       	adiw	r26, 0x13	; 19
    32e6:	dc 93       	st	X, r29
    32e8:	ce 93       	st	-X, r28
    32ea:	52 97       	sbiw	r26, 0x12	; 18
    32ec:	2e 81       	ldd	r18, Y+6	; 0x06
    32ee:	3f 81       	ldd	r19, Y+7	; 0x07
    32f0:	55 96       	adiw	r26, 0x15	; 21
    32f2:	3c 93       	st	X, r19
    32f4:	2e 93       	st	-X, r18
    32f6:	54 97       	sbiw	r26, 0x14	; 20
    32f8:	4e 81       	ldd	r20, Y+6	; 0x06
    32fa:	5f 81       	ldd	r21, Y+7	; 0x07
    32fc:	9d 01       	movw	r18, r26
    32fe:	22 5f       	subi	r18, 0xF2	; 242
    3300:	3f 4f       	sbci	r19, 0xFF	; 255
    3302:	fa 01       	movw	r30, r20
    3304:	35 83       	std	Z+5, r19	; 0x05
    3306:	24 83       	std	Z+4, r18	; 0x04
    3308:	3f 83       	std	Y+7, r19	; 0x07
    330a:	2e 83       	std	Y+6, r18	; 0x06
    330c:	59 96       	adiw	r26, 0x19	; 25
    330e:	7c 93       	st	X, r23
    3310:	6e 93       	st	-X, r22
    3312:	58 97       	sbiw	r26, 0x18	; 24
    3314:	fb 01       	movw	r30, r22
    3316:	90 81       	ld	r25, Z
    3318:	9f 5f       	subi	r25, 0xFF	; 255
    331a:	90 83       	st	Z, r25
    331c:	5a 96       	adiw	r26, 0x1a	; 26
    331e:	2c 91       	ld	r18, X
    3320:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    3324:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    3328:	92 8d       	ldd	r25, Z+26	; 0x1a
    332a:	92 17       	cp	r25, r18
    332c:	48 f4       	brcc	.+18     	; 0x3340 <xTaskGenericNotifyFromISR+0x22c>
    332e:	c1 14       	cp	r12, r1
    3330:	d1 04       	cpc	r13, r1
    3332:	19 f0       	breq	.+6      	; 0x333a <xTaskGenericNotifyFromISR+0x226>
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	f6 01       	movw	r30, r12
    3338:	90 83       	st	Z, r25
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	90 93 fd 15 	sts	0x15FD, r25	; 0x8015fd <xYieldPending>
    3340:	df 91       	pop	r29
    3342:	cf 91       	pop	r28
    3344:	0f 91       	pop	r16
    3346:	ff 90       	pop	r15
    3348:	ef 90       	pop	r14
    334a:	df 90       	pop	r13
    334c:	cf 90       	pop	r12
    334e:	bf 90       	pop	r11
    3350:	af 90       	pop	r10
    3352:	9f 90       	pop	r9
    3354:	8f 90       	pop	r8
    3356:	08 95       	ret

00003358 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	21 f4       	brne	.+8      	; 0x3364 <xTaskGenericNotifyStateClear+0xc>
    335c:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    3360:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	fc 01       	movw	r30, r24
    336e:	e6 0f       	add	r30, r22
    3370:	f7 1f       	adc	r31, r23
    3372:	23 a9       	ldd	r18, Z+51	; 0x33
    3374:	22 30       	cpi	r18, 0x02	; 2
    3376:	31 f4       	brne	.+12     	; 0x3384 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3378:	fc 01       	movw	r30, r24
    337a:	e6 0f       	add	r30, r22
    337c:	f7 1f       	adc	r31, r23
    337e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	01 c0       	rjmp	.+2      	; 0x3386 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3384:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3386:	0f 90       	pop	r0
    3388:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    338a:	08 95       	ret

0000338c <prvGetNextExpireTime>:
    338c:	dc 01       	movw	r26, r24
    338e:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    3392:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    3396:	80 81       	ld	r24, Z
    3398:	91 e0       	ldi	r25, 0x01	; 1
    339a:	81 11       	cpse	r24, r1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	9c 93       	st	X, r25
    33a0:	91 11       	cpse	r25, r1
    33a2:	08 c0       	rjmp	.+16     	; 0x33b4 <prvGetNextExpireTime+0x28>
    33a4:	07 80       	ldd	r0, Z+7	; 0x07
    33a6:	f0 85       	ldd	r31, Z+8	; 0x08
    33a8:	e0 2d       	mov	r30, r0
    33aa:	60 81       	ld	r22, Z
    33ac:	71 81       	ldd	r23, Z+1	; 0x01
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	08 95       	ret
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	cb 01       	movw	r24, r22
    33ba:	08 95       	ret

000033bc <prvInsertTimerInActiveList>:
    33bc:	cf 92       	push	r12
    33be:	df 92       	push	r13
    33c0:	ef 92       	push	r14
    33c2:	ff 92       	push	r15
    33c4:	0f 93       	push	r16
    33c6:	1f 93       	push	r17
    33c8:	fc 01       	movw	r30, r24
    33ca:	42 83       	std	Z+2, r20	; 0x02
    33cc:	53 83       	std	Z+3, r21	; 0x03
    33ce:	64 83       	std	Z+4, r22	; 0x04
    33d0:	75 83       	std	Z+5, r23	; 0x05
    33d2:	93 87       	std	Z+11, r25	; 0x0b
    33d4:	82 87       	std	Z+10, r24	; 0x0a
    33d6:	04 17       	cp	r16, r20
    33d8:	15 07       	cpc	r17, r21
    33da:	26 07       	cpc	r18, r22
    33dc:	37 07       	cpc	r19, r23
    33de:	c0 f0       	brcs	.+48     	; 0x3410 <prvInsertTimerInActiveList+0x54>
    33e0:	0c 19       	sub	r16, r12
    33e2:	1d 09       	sbc	r17, r13
    33e4:	2e 09       	sbc	r18, r14
    33e6:	3f 09       	sbc	r19, r15
    33e8:	86 85       	ldd	r24, Z+14	; 0x0e
    33ea:	97 85       	ldd	r25, Z+15	; 0x0f
    33ec:	a0 89       	ldd	r26, Z+16	; 0x10
    33ee:	b1 89       	ldd	r27, Z+17	; 0x11
    33f0:	08 17       	cp	r16, r24
    33f2:	19 07       	cpc	r17, r25
    33f4:	2a 07       	cpc	r18, r26
    33f6:	3b 07       	cpc	r19, r27
    33f8:	00 f5       	brcc	.+64     	; 0x343a <prvInsertTimerInActiveList+0x7e>
    33fa:	bf 01       	movw	r22, r30
    33fc:	6e 5f       	subi	r22, 0xFE	; 254
    33fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3400:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <pxOverflowTimerList>
    3404:	90 91 be 16 	lds	r25, 0x16BE	; 0x8016be <pxOverflowTimerList+0x1>
    3408:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vListInsert>
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	18 c0       	rjmp	.+48     	; 0x3440 <prvInsertTimerInActiveList+0x84>
    3410:	0c 15       	cp	r16, r12
    3412:	1d 05       	cpc	r17, r13
    3414:	2e 05       	cpc	r18, r14
    3416:	3f 05       	cpc	r19, r15
    3418:	28 f4       	brcc	.+10     	; 0x3424 <prvInsertTimerInActiveList+0x68>
    341a:	4c 15       	cp	r20, r12
    341c:	5d 05       	cpc	r21, r13
    341e:	6e 05       	cpc	r22, r14
    3420:	7f 05       	cpc	r23, r15
    3422:	68 f4       	brcc	.+26     	; 0x343e <prvInsertTimerInActiveList+0x82>
    3424:	bf 01       	movw	r22, r30
    3426:	6e 5f       	subi	r22, 0xFE	; 254
    3428:	7f 4f       	sbci	r23, 0xFF	; 255
    342a:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    342e:	90 91 c0 16 	lds	r25, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    3432:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vListInsert>
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	03 c0       	rjmp	.+6      	; 0x3440 <prvInsertTimerInActiveList+0x84>
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	01 c0       	rjmp	.+2      	; 0x3440 <prvInsertTimerInActiveList+0x84>
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	1f 91       	pop	r17
    3442:	0f 91       	pop	r16
    3444:	ff 90       	pop	r15
    3446:	ef 90       	pop	r14
    3448:	df 90       	pop	r13
    344a:	cf 90       	pop	r12
    344c:	08 95       	ret

0000344e <prvCheckForValidListAndQueue>:
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	f8 94       	cli
    3452:	0f 92       	push	r0
    3454:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    3458:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    345c:	89 2b       	or	r24, r25
    345e:	e9 f4       	brne	.+58     	; 0x349a <prvCheckForValidListAndQueue+0x4c>
    3460:	8c ec       	ldi	r24, 0xCC	; 204
    3462:	96 e1       	ldi	r25, 0x16	; 22
    3464:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <vListInitialise>
    3468:	81 ec       	ldi	r24, 0xC1	; 193
    346a:	96 e1       	ldi	r25, 0x16	; 22
    346c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <vListInitialise>
    3470:	8c ec       	ldi	r24, 0xCC	; 204
    3472:	96 e1       	ldi	r25, 0x16	; 22
    3474:	90 93 c0 16 	sts	0x16C0, r25	; 0x8016c0 <pxCurrentTimerList+0x1>
    3478:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <pxCurrentTimerList>
    347c:	81 ec       	ldi	r24, 0xC1	; 193
    347e:	96 e1       	ldi	r25, 0x16	; 22
    3480:	90 93 be 16 	sts	0x16BE, r25	; 0x8016be <pxOverflowTimerList+0x1>
    3484:	80 93 bd 16 	sts	0x16BD, r24	; 0x8016bd <pxOverflowTimerList>
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	67 e0       	ldi	r22, 0x07	; 7
    348c:	8a e0       	ldi	r24, 0x0A	; 10
    348e:	0e 94 a4 07 	call	0xf48	; 0xf48 <xQueueGenericCreate>
    3492:	90 93 bc 16 	sts	0x16BC, r25	; 0x8016bc <xTimerQueue+0x1>
    3496:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <xTimerQueue>
    349a:	0f 90       	pop	r0
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	08 95       	ret

000034a0 <xTimerCreateTimerTask>:
    34a0:	ef 92       	push	r14
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	d3 df       	rcall	.-90     	; 0x344e <prvCheckForValidListAndQueue>
    34a8:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    34ac:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    34b0:	89 2b       	or	r24, r25
    34b2:	91 f0       	breq	.+36     	; 0x34d8 <xTimerCreateTimerTask+0x38>
    34b4:	0f 2e       	mov	r0, r31
    34b6:	f9 eb       	ldi	r31, 0xB9	; 185
    34b8:	ef 2e       	mov	r14, r31
    34ba:	f6 e1       	ldi	r31, 0x16	; 22
    34bc:	ff 2e       	mov	r15, r31
    34be:	f0 2d       	mov	r31, r0
    34c0:	03 e0       	ldi	r16, 0x03	; 3
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 ec       	ldi	r20, 0xC0	; 192
    34c8:	50 e0       	ldi	r21, 0x00	; 0
    34ca:	6e ea       	ldi	r22, 0xAE	; 174
    34cc:	72 e0       	ldi	r23, 0x02	; 2
    34ce:	87 ed       	ldi	r24, 0xD7	; 215
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <xTaskCreate>
    34d6:	01 c0       	rjmp	.+2      	; 0x34da <xTimerCreateTimerTask+0x3a>
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	0f 91       	pop	r16
    34dc:	ff 90       	pop	r15
    34de:	ef 90       	pop	r14
    34e0:	08 95       	ret

000034e2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    34e2:	8f 92       	push	r8
    34e4:	9f 92       	push	r9
    34e6:	af 92       	push	r10
    34e8:	bf 92       	push	r11
    34ea:	cf 92       	push	r12
    34ec:	df 92       	push	r13
    34ee:	ef 92       	push	r14
    34f0:	ff 92       	push	r15
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
    34fe:	27 97       	sbiw	r28, 0x07	; 7
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    350a:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <xTimerQueue>
    350e:	f0 91 bc 16 	lds	r31, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    3512:	30 97       	sbiw	r30, 0x00	; 0
    3514:	81 f1       	breq	.+96     	; 0x3576 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3516:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3518:	2a 83       	std	Y+2, r18	; 0x02
    351a:	3b 83       	std	Y+3, r19	; 0x03
    351c:	4c 83       	std	Y+4, r20	; 0x04
    351e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3520:	9f 83       	std	Y+7, r25	; 0x07
    3522:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3524:	66 30       	cpi	r22, 0x06	; 6
    3526:	f4 f4       	brge	.+60     	; 0x3564 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3528:	c3 da       	rcall	.-2682   	; 0x2ab0 <xTaskGetSchedulerState>
    352a:	82 30       	cpi	r24, 0x02	; 2
    352c:	69 f4       	brne	.+26     	; 0x3548 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    352e:	00 e0       	ldi	r16, 0x00	; 0
    3530:	a7 01       	movw	r20, r14
    3532:	96 01       	movw	r18, r12
    3534:	be 01       	movw	r22, r28
    3536:	6f 5f       	subi	r22, 0xFF	; 255
    3538:	7f 4f       	sbci	r23, 0xFF	; 255
    353a:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    353e:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    3542:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    3546:	18 c0       	rjmp	.+48     	; 0x3578 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3548:	00 e0       	ldi	r16, 0x00	; 0
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	a9 01       	movw	r20, r18
    3550:	be 01       	movw	r22, r28
    3552:	6f 5f       	subi	r22, 0xFF	; 255
    3554:	7f 4f       	sbci	r23, 0xFF	; 255
    3556:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    355a:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    355e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    3562:	0a c0       	rjmp	.+20     	; 0x3578 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	a8 01       	movw	r20, r16
    3568:	be 01       	movw	r22, r28
    356a:	6f 5f       	subi	r22, 0xFF	; 255
    356c:	7f 4f       	sbci	r23, 0xFF	; 255
    356e:	cf 01       	movw	r24, r30
    3570:	0e 94 59 08 	call	0x10b2	; 0x10b2 <xQueueGenericSendFromISR>
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3576:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3578:	27 96       	adiw	r28, 0x07	; 7
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	bf 90       	pop	r11
    3596:	af 90       	pop	r10
    3598:	9f 90       	pop	r9
    359a:	8f 90       	pop	r8
    359c:	08 95       	ret

0000359e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    359e:	8f 92       	push	r8
    35a0:	9f 92       	push	r9
    35a2:	af 92       	push	r10
    35a4:	bf 92       	push	r11
    35a6:	cf 92       	push	r12
    35a8:	df 92       	push	r13
    35aa:	ef 92       	push	r14
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    35b6:	3b c0       	rjmp	.+118    	; 0x362e <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    35b8:	07 80       	ldd	r0, Z+7	; 0x07
    35ba:	f0 85       	ldd	r31, Z+8	; 0x08
    35bc:	e0 2d       	mov	r30, r0
    35be:	80 80       	ld	r8, Z
    35c0:	91 80       	ldd	r9, Z+1	; 0x01
    35c2:	a2 80       	ldd	r10, Z+2	; 0x02
    35c4:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    35c6:	c0 85       	ldd	r28, Z+8	; 0x08
    35c8:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    35ca:	8e 01       	movw	r16, r28
    35cc:	0e 5f       	subi	r16, 0xFE	; 254
    35ce:	1f 4f       	sbci	r17, 0xFF	; 255
    35d0:	c8 01       	movw	r24, r16
    35d2:	0e 94 33 05 	call	0xa66	; 0xa66 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    35d6:	ec 89       	ldd	r30, Y+20	; 0x14
    35d8:	fd 89       	ldd	r31, Y+21	; 0x15
    35da:	ce 01       	movw	r24, r28
    35dc:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35de:	8e 89       	ldd	r24, Y+22	; 0x16
    35e0:	82 ff       	sbrs	r24, 2
    35e2:	25 c0       	rjmp	.+74     	; 0x362e <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    35e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    35e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    35e8:	a8 89       	ldd	r26, Y+16	; 0x10
    35ea:	b9 89       	ldd	r27, Y+17	; 0x11
    35ec:	88 0d       	add	r24, r8
    35ee:	99 1d       	adc	r25, r9
    35f0:	aa 1d       	adc	r26, r10
    35f2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    35f4:	88 16       	cp	r8, r24
    35f6:	99 06       	cpc	r9, r25
    35f8:	aa 06       	cpc	r10, r26
    35fa:	bb 06       	cpc	r11, r27
    35fc:	70 f4       	brcc	.+28     	; 0x361a <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    35fe:	8a 83       	std	Y+2, r24	; 0x02
    3600:	9b 83       	std	Y+3, r25	; 0x03
    3602:	ac 83       	std	Y+4, r26	; 0x04
    3604:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3606:	db 87       	std	Y+11, r29	; 0x0b
    3608:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    360a:	b8 01       	movw	r22, r16
    360c:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    3610:	90 91 c0 16 	lds	r25, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    3614:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vListInsert>
    3618:	0a c0       	rjmp	.+20     	; 0x362e <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    361a:	c1 2c       	mov	r12, r1
    361c:	d1 2c       	mov	r13, r1
    361e:	76 01       	movw	r14, r12
    3620:	00 e0       	ldi	r16, 0x00	; 0
    3622:	10 e0       	ldi	r17, 0x00	; 0
    3624:	a5 01       	movw	r20, r10
    3626:	94 01       	movw	r18, r8
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	ce 01       	movw	r24, r28
    362c:	5a df       	rcall	.-332    	; 0x34e2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    362e:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    3632:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    3636:	80 81       	ld	r24, Z
    3638:	81 11       	cpse	r24, r1
    363a:	be cf       	rjmp	.-132    	; 0x35b8 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    363c:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <pxOverflowTimerList>
    3640:	90 91 be 16 	lds	r25, 0x16BE	; 0x8016be <pxOverflowTimerList+0x1>
    3644:	90 93 c0 16 	sts	0x16C0, r25	; 0x8016c0 <pxCurrentTimerList+0x1>
    3648:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    364c:	f0 93 be 16 	sts	0x16BE, r31	; 0x8016be <pxOverflowTimerList+0x1>
    3650:	e0 93 bd 16 	sts	0x16BD, r30	; 0x8016bd <pxOverflowTimerList>
    }
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
    365c:	ff 90       	pop	r15
    365e:	ef 90       	pop	r14
    3660:	df 90       	pop	r13
    3662:	cf 90       	pop	r12
    3664:	bf 90       	pop	r11
    3666:	af 90       	pop	r10
    3668:	9f 90       	pop	r9
    366a:	8f 90       	pop	r8
    366c:	08 95       	ret

0000366e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    366e:	cf 92       	push	r12
    3670:	df 92       	push	r13
    3672:	ef 92       	push	r14
    3674:	ff 92       	push	r15
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    367c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <xTaskGetTickCount>
    3680:	6b 01       	movw	r12, r22
    3682:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3684:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xLastTime.2436>
    3688:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <xLastTime.2436+0x1>
    368c:	a0 91 b7 16 	lds	r26, 0x16B7	; 0x8016b7 <xLastTime.2436+0x2>
    3690:	b0 91 b8 16 	lds	r27, 0x16B8	; 0x8016b8 <xLastTime.2436+0x3>
    3694:	c8 16       	cp	r12, r24
    3696:	d9 06       	cpc	r13, r25
    3698:	ea 06       	cpc	r14, r26
    369a:	fb 06       	cpc	r15, r27
    369c:	20 f4       	brcc	.+8      	; 0x36a6 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    369e:	7f df       	rcall	.-258    	; 0x359e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	88 83       	st	Y, r24
    36a4:	01 c0       	rjmp	.+2      	; 0x36a8 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    36a6:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    36a8:	c0 92 b5 16 	sts	0x16B5, r12	; 0x8016b5 <xLastTime.2436>
    36ac:	d0 92 b6 16 	sts	0x16B6, r13	; 0x8016b6 <xLastTime.2436+0x1>
    36b0:	e0 92 b7 16 	sts	0x16B7, r14	; 0x8016b7 <xLastTime.2436+0x2>
    36b4:	f0 92 b8 16 	sts	0x16B8, r15	; 0x8016b8 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    36b8:	c7 01       	movw	r24, r14
    36ba:	b6 01       	movw	r22, r12
    36bc:	df 91       	pop	r29
    36be:	cf 91       	pop	r28
    36c0:	ff 90       	pop	r15
    36c2:	ef 90       	pop	r14
    36c4:	df 90       	pop	r13
    36c6:	cf 90       	pop	r12
    36c8:	08 95       	ret

000036ca <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    36ca:	4f 92       	push	r4
    36cc:	5f 92       	push	r5
    36ce:	6f 92       	push	r6
    36d0:	7f 92       	push	r7
    36d2:	8f 92       	push	r8
    36d4:	9f 92       	push	r9
    36d6:	af 92       	push	r10
    36d8:	bf 92       	push	r11
    36da:	cf 92       	push	r12
    36dc:	df 92       	push	r13
    36de:	ef 92       	push	r14
    36e0:	ff 92       	push	r15
    36e2:	0f 93       	push	r16
    36e4:	1f 93       	push	r17
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	4b 01       	movw	r8, r22
    36ec:	5c 01       	movw	r10, r24
    36ee:	29 01       	movw	r4, r18
    36f0:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    36f2:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    36f6:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    36fa:	07 80       	ldd	r0, Z+7	; 0x07
    36fc:	f0 85       	ldd	r31, Z+8	; 0x08
    36fe:	e0 2d       	mov	r30, r0
    3700:	c0 85       	ldd	r28, Z+8	; 0x08
    3702:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3704:	ce 01       	movw	r24, r28
    3706:	02 96       	adiw	r24, 0x02	; 2
    3708:	0e 94 33 05 	call	0xa66	; 0xa66 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    370c:	8e 89       	ldd	r24, Y+22	; 0x16
    370e:	82 ff       	sbrs	r24, 2
    3710:	1b c0       	rjmp	.+54     	; 0x3748 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3712:	4e 85       	ldd	r20, Y+14	; 0x0e
    3714:	5f 85       	ldd	r21, Y+15	; 0x0f
    3716:	68 89       	ldd	r22, Y+16	; 0x10
    3718:	79 89       	ldd	r23, Y+17	; 0x11
    371a:	48 0d       	add	r20, r8
    371c:	59 1d       	adc	r21, r9
    371e:	6a 1d       	adc	r22, r10
    3720:	7b 1d       	adc	r23, r11
    3722:	75 01       	movw	r14, r10
    3724:	64 01       	movw	r12, r8
    3726:	93 01       	movw	r18, r6
    3728:	82 01       	movw	r16, r4
    372a:	ce 01       	movw	r24, r28
    372c:	47 de       	rcall	.-882    	; 0x33bc <prvInsertTimerInActiveList>
    372e:	88 23       	and	r24, r24
    3730:	69 f0       	breq	.+26     	; 0x374c <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3732:	c1 2c       	mov	r12, r1
    3734:	d1 2c       	mov	r13, r1
    3736:	76 01       	movw	r14, r12
    3738:	00 e0       	ldi	r16, 0x00	; 0
    373a:	10 e0       	ldi	r17, 0x00	; 0
    373c:	a5 01       	movw	r20, r10
    373e:	94 01       	movw	r18, r8
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	ce 01       	movw	r24, r28
    3744:	ce de       	rcall	.-612    	; 0x34e2 <xTimerGenericCommand>
    3746:	02 c0       	rjmp	.+4      	; 0x374c <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3748:	8e 7f       	andi	r24, 0xFE	; 254
    374a:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    374c:	ec 89       	ldd	r30, Y+20	; 0x14
    374e:	fd 89       	ldd	r31, Y+21	; 0x15
    3750:	ce 01       	movw	r24, r28
    3752:	19 95       	eicall
    }
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	1f 91       	pop	r17
    375a:	0f 91       	pop	r16
    375c:	ff 90       	pop	r15
    375e:	ef 90       	pop	r14
    3760:	df 90       	pop	r13
    3762:	cf 90       	pop	r12
    3764:	bf 90       	pop	r11
    3766:	af 90       	pop	r10
    3768:	9f 90       	pop	r9
    376a:	8f 90       	pop	r8
    376c:	7f 90       	pop	r7
    376e:	6f 90       	pop	r6
    3770:	5f 90       	pop	r5
    3772:	4f 90       	pop	r4
    3774:	08 95       	ret

00003776 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3776:	8f 92       	push	r8
    3778:	9f 92       	push	r9
    377a:	af 92       	push	r10
    377c:	bf 92       	push	r11
    377e:	cf 92       	push	r12
    3780:	df 92       	push	r13
    3782:	ef 92       	push	r14
    3784:	ff 92       	push	r15
    3786:	1f 93       	push	r17
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	1f 92       	push	r1
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    3792:	6b 01       	movw	r12, r22
    3794:	7c 01       	movw	r14, r24
    3796:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3798:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    379c:	ce 01       	movw	r24, r28
    379e:	01 96       	adiw	r24, 0x01	; 1
    37a0:	66 df       	rcall	.-308    	; 0x366e <prvSampleTimeNow>
    37a2:	4b 01       	movw	r8, r22
    37a4:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	81 11       	cpse	r24, r1
    37aa:	2d c0       	rjmp	.+90     	; 0x3806 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    37ac:	11 11       	cpse	r17, r1
    37ae:	0d c0       	rjmp	.+26     	; 0x37ca <prvProcessTimerOrBlockTask+0x54>
    37b0:	8c 14       	cp	r8, r12
    37b2:	9d 04       	cpc	r9, r13
    37b4:	ae 04       	cpc	r10, r14
    37b6:	bf 04       	cpc	r11, r15
    37b8:	40 f0       	brcs	.+16     	; 0x37ca <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    37ba:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    37be:	a5 01       	movw	r20, r10
    37c0:	94 01       	movw	r18, r8
    37c2:	c7 01       	movw	r24, r14
    37c4:	b6 01       	movw	r22, r12
    37c6:	81 df       	rcall	.-254    	; 0x36ca <prvProcessExpiredTimer>
    37c8:	20 c0       	rjmp	.+64     	; 0x380a <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    37ca:	11 23       	and	r17, r17
    37cc:	41 f0       	breq	.+16     	; 0x37de <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    37ce:	e0 91 bd 16 	lds	r30, 0x16BD	; 0x8016bd <pxOverflowTimerList>
    37d2:	f0 91 be 16 	lds	r31, 0x16BE	; 0x8016be <pxOverflowTimerList+0x1>
    37d6:	80 81       	ld	r24, Z
    37d8:	11 e0       	ldi	r17, 0x01	; 1
    37da:	81 11       	cpse	r24, r1
    37dc:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    37de:	b7 01       	movw	r22, r14
    37e0:	a6 01       	movw	r20, r12
    37e2:	48 19       	sub	r20, r8
    37e4:	59 09       	sbc	r21, r9
    37e6:	6a 09       	sbc	r22, r10
    37e8:	7b 09       	sbc	r23, r11
    37ea:	21 2f       	mov	r18, r17
    37ec:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    37f0:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    37f4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    37f8:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
    37fc:	81 11       	cpse	r24, r1
    37fe:	05 c0       	rjmp	.+10     	; 0x380a <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3800:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    3804:	02 c0       	rjmp	.+4      	; 0x380a <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3806:	0e 94 15 11 	call	0x222a	; 0x222a <xTaskResumeAll>
            }
        }
    }
    380a:	0f 90       	pop	r0
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	1f 91       	pop	r17
    3812:	ff 90       	pop	r15
    3814:	ef 90       	pop	r14
    3816:	df 90       	pop	r13
    3818:	cf 90       	pop	r12
    381a:	bf 90       	pop	r11
    381c:	af 90       	pop	r10
    381e:	9f 90       	pop	r9
    3820:	8f 90       	pop	r8
    3822:	08 95       	ret

00003824 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3824:	af 92       	push	r10
    3826:	bf 92       	push	r11
    3828:	cf 92       	push	r12
    382a:	df 92       	push	r13
    382c:	ef 92       	push	r14
    382e:	ff 92       	push	r15
    3830:	0f 93       	push	r16
    3832:	1f 93       	push	r17
    3834:	cf 93       	push	r28
    3836:	df 93       	push	r29
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
    383c:	28 97       	sbiw	r28, 0x08	; 8
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3848:	82 c0       	rjmp	.+260    	; 0x394e <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	88 23       	and	r24, r24
    384e:	0c f4       	brge	.+2      	; 0x3852 <prvProcessReceivedCommands+0x2e>
    3850:	7e c0       	rjmp	.+252    	; 0x394e <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3852:	ae 80       	ldd	r10, Y+6	; 0x06
    3854:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3856:	d5 01       	movw	r26, r10
    3858:	1c 96       	adiw	r26, 0x0c	; 12
    385a:	8d 91       	ld	r24, X+
    385c:	9c 91       	ld	r25, X
    385e:	1d 97       	sbiw	r26, 0x0d	; 13
    3860:	89 2b       	or	r24, r25
    3862:	21 f0       	breq	.+8      	; 0x386c <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3864:	c5 01       	movw	r24, r10
    3866:	02 96       	adiw	r24, 0x02	; 2
    3868:	0e 94 33 05 	call	0xa66	; 0xa66 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    386c:	ce 01       	movw	r24, r28
    386e:	08 96       	adiw	r24, 0x08	; 8
    3870:	fe de       	rcall	.-516    	; 0x366e <prvSampleTimeNow>
    3872:	8b 01       	movw	r16, r22
    3874:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3876:	e9 81       	ldd	r30, Y+1	; 0x01
    3878:	0e 2e       	mov	r0, r30
    387a:	00 0c       	add	r0, r0
    387c:	ff 0b       	sbc	r31, r31
    387e:	ea 30       	cpi	r30, 0x0A	; 10
    3880:	f1 05       	cpc	r31, r1
    3882:	08 f0       	brcs	.+2      	; 0x3886 <prvProcessReceivedCommands+0x62>
    3884:	64 c0       	rjmp	.+200    	; 0x394e <prvProcessReceivedCommands+0x12a>
    3886:	88 27       	eor	r24, r24
    3888:	ee 58       	subi	r30, 0x8E	; 142
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	8f 4f       	sbci	r24, 0xFF	; 255
    388e:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3892:	f5 01       	movw	r30, r10
    3894:	86 89       	ldd	r24, Z+22	; 0x16
    3896:	81 60       	ori	r24, 0x01	; 1
    3898:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    389a:	ca 80       	ldd	r12, Y+2	; 0x02
    389c:	db 80       	ldd	r13, Y+3	; 0x03
    389e:	ec 80       	ldd	r14, Y+4	; 0x04
    38a0:	fd 80       	ldd	r15, Y+5	; 0x05
    38a2:	46 85       	ldd	r20, Z+14	; 0x0e
    38a4:	57 85       	ldd	r21, Z+15	; 0x0f
    38a6:	60 89       	ldd	r22, Z+16	; 0x10
    38a8:	71 89       	ldd	r23, Z+17	; 0x11
    38aa:	4c 0d       	add	r20, r12
    38ac:	5d 1d       	adc	r21, r13
    38ae:	6e 1d       	adc	r22, r14
    38b0:	7f 1d       	adc	r23, r15
    38b2:	c5 01       	movw	r24, r10
    38b4:	83 dd       	rcall	.-1274   	; 0x33bc <prvInsertTimerInActiveList>
    38b6:	88 23       	and	r24, r24
    38b8:	09 f4       	brne	.+2      	; 0x38bc <prvProcessReceivedCommands+0x98>
    38ba:	49 c0       	rjmp	.+146    	; 0x394e <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    38bc:	d5 01       	movw	r26, r10
    38be:	54 96       	adiw	r26, 0x14	; 20
    38c0:	ed 91       	ld	r30, X+
    38c2:	fc 91       	ld	r31, X
    38c4:	55 97       	sbiw	r26, 0x15	; 21
    38c6:	c5 01       	movw	r24, r10
    38c8:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    38ca:	f5 01       	movw	r30, r10
    38cc:	86 89       	ldd	r24, Z+22	; 0x16
    38ce:	82 ff       	sbrs	r24, 2
    38d0:	3e c0       	rjmp	.+124    	; 0x394e <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    38d2:	4a 81       	ldd	r20, Y+2	; 0x02
    38d4:	5b 81       	ldd	r21, Y+3	; 0x03
    38d6:	6c 81       	ldd	r22, Y+4	; 0x04
    38d8:	7d 81       	ldd	r23, Y+5	; 0x05
    38da:	86 85       	ldd	r24, Z+14	; 0x0e
    38dc:	97 85       	ldd	r25, Z+15	; 0x0f
    38de:	a0 89       	ldd	r26, Z+16	; 0x10
    38e0:	b1 89       	ldd	r27, Z+17	; 0x11
    38e2:	9a 01       	movw	r18, r20
    38e4:	ab 01       	movw	r20, r22
    38e6:	28 0f       	add	r18, r24
    38e8:	39 1f       	adc	r19, r25
    38ea:	4a 1f       	adc	r20, r26
    38ec:	5b 1f       	adc	r21, r27
    38ee:	c1 2c       	mov	r12, r1
    38f0:	d1 2c       	mov	r13, r1
    38f2:	76 01       	movw	r14, r12
    38f4:	00 e0       	ldi	r16, 0x00	; 0
    38f6:	10 e0       	ldi	r17, 0x00	; 0
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	c5 01       	movw	r24, r10
    38fc:	f2 dd       	rcall	.-1052   	; 0x34e2 <xTimerGenericCommand>
    38fe:	27 c0       	rjmp	.+78     	; 0x394e <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3900:	d5 01       	movw	r26, r10
    3902:	56 96       	adiw	r26, 0x16	; 22
    3904:	8c 91       	ld	r24, X
    3906:	56 97       	sbiw	r26, 0x16	; 22
    3908:	8e 7f       	andi	r24, 0xFE	; 254
    390a:	56 96       	adiw	r26, 0x16	; 22
    390c:	8c 93       	st	X, r24
                        break;
    390e:	1f c0       	rjmp	.+62     	; 0x394e <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3910:	f5 01       	movw	r30, r10
    3912:	86 89       	ldd	r24, Z+22	; 0x16
    3914:	81 60       	ori	r24, 0x01	; 1
    3916:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3918:	4a 81       	ldd	r20, Y+2	; 0x02
    391a:	5b 81       	ldd	r21, Y+3	; 0x03
    391c:	6c 81       	ldd	r22, Y+4	; 0x04
    391e:	7d 81       	ldd	r23, Y+5	; 0x05
    3920:	46 87       	std	Z+14, r20	; 0x0e
    3922:	57 87       	std	Z+15, r21	; 0x0f
    3924:	60 8b       	std	Z+16, r22	; 0x10
    3926:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3928:	40 0f       	add	r20, r16
    392a:	51 1f       	adc	r21, r17
    392c:	62 1f       	adc	r22, r18
    392e:	73 1f       	adc	r23, r19
    3930:	68 01       	movw	r12, r16
    3932:	79 01       	movw	r14, r18
    3934:	c5 01       	movw	r24, r10
    3936:	42 dd       	rcall	.-1404   	; 0x33bc <prvInsertTimerInActiveList>
                        break;
    3938:	0a c0       	rjmp	.+20     	; 0x394e <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    393a:	f5 01       	movw	r30, r10
    393c:	86 89       	ldd	r24, Z+22	; 0x16
    393e:	81 fd       	sbrc	r24, 1
    3940:	04 c0       	rjmp	.+8      	; 0x394a <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3942:	c5 01       	movw	r24, r10
    3944:	0e 94 a4 04 	call	0x948	; 0x948 <vPortFree>
    3948:	02 c0       	rjmp	.+4      	; 0x394e <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    394a:	8e 7f       	andi	r24, 0xFE	; 254
    394c:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	a9 01       	movw	r20, r18
    3954:	be 01       	movw	r22, r28
    3956:	6f 5f       	subi	r22, 0xFF	; 255
    3958:	7f 4f       	sbci	r23, 0xFF	; 255
    395a:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    395e:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    3962:	0e 94 94 08 	call	0x1128	; 0x1128 <xQueueReceive>
    3966:	81 11       	cpse	r24, r1
    3968:	70 cf       	rjmp	.-288    	; 0x384a <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    396a:	28 96       	adiw	r28, 0x08	; 8
    396c:	0f b6       	in	r0, 0x3f	; 63
    396e:	f8 94       	cli
    3970:	de bf       	out	0x3e, r29	; 62
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	cd bf       	out	0x3d, r28	; 61
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	ff 90       	pop	r15
    3980:	ef 90       	pop	r14
    3982:	df 90       	pop	r13
    3984:	cf 90       	pop	r12
    3986:	bf 90       	pop	r11
    3988:	af 90       	pop	r10
    398a:	08 95       	ret

0000398c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    398c:	08 95       	ret

0000398e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    398e:	84 b1       	in	r24, 0x04	; 4
    3990:	80 68       	ori	r24, 0x80	; 128
    3992:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3994:	85 b1       	in	r24, 0x05	; 5
    3996:	80 68       	ori	r24, 0x80	; 128
    3998:	85 b9       	out	0x05, r24	; 5
    399a:	08 95       	ret

0000399c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    399c:	83 b1       	in	r24, 0x03	; 3
    399e:	80 68       	ori	r24, 0x80	; 128
    39a0:	83 b9       	out	0x03, r24	; 3
    39a2:	08 95       	ret

000039a4 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    39a4:	f4 df       	rcall	.-24     	; 0x398e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    39a6:	2f ef       	ldi	r18, 0xFF	; 255
    39a8:	80 e7       	ldi	r24, 0x70	; 112
    39aa:	92 e0       	ldi	r25, 0x02	; 2
    39ac:	21 50       	subi	r18, 0x01	; 1
    39ae:	80 40       	sbci	r24, 0x00	; 0
    39b0:	90 40       	sbci	r25, 0x00	; 0
    39b2:	e1 f7       	brne	.-8      	; 0x39ac <vApplicationMallocFailedHook+0x8>
    39b4:	00 c0       	rjmp	.+0      	; 0x39b6 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    39b6:	00 00       	nop
    39b8:	f1 df       	rcall	.-30     	; 0x399c <prvBlinkMainLed>
    39ba:	f5 cf       	rjmp	.-22     	; 0x39a6 <vApplicationMallocFailedHook+0x2>

000039bc <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    39bc:	e8 df       	rcall	.-48     	; 0x398e <prvSetMainLedOn>
    39be:	2f ef       	ldi	r18, 0xFF	; 255
    39c0:	87 ea       	ldi	r24, 0xA7	; 167
    39c2:	91 e6       	ldi	r25, 0x61	; 97
    39c4:	21 50       	subi	r18, 0x01	; 1
    39c6:	80 40       	sbci	r24, 0x00	; 0
    39c8:	90 40       	sbci	r25, 0x00	; 0
    39ca:	e1 f7       	brne	.-8      	; 0x39c4 <vApplicationStackOverflowHook+0x8>
    39cc:	00 c0       	rjmp	.+0      	; 0x39ce <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    39ce:	00 00       	nop
    39d0:	e5 df       	rcall	.-54     	; 0x399c <prvBlinkMainLed>
    39d2:	f5 cf       	rjmp	.-22     	; 0x39be <vApplicationStackOverflowHook+0x2>

000039d4 <lora_downLink_task>:

void lora_downLink_task()
{
	for(;;)
	{
		printf("Before message buffer downlink\n");
    39d4:	86 eb       	ldi	r24, 0xB6	; 182
    39d6:	92 e0       	ldi	r25, 0x02	; 2
    39d8:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
		xMessageBufferReceive(downlinkMessageBuffer, &lora_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    39dc:	0f ef       	ldi	r16, 0xFF	; 255
    39de:	1f ef       	ldi	r17, 0xFF	; 255
    39e0:	98 01       	movw	r18, r16
    39e2:	46 e1       	ldi	r20, 0x16	; 22
    39e4:	50 e0       	ldi	r21, 0x00	; 0
    39e6:	6b e9       	ldi	r22, 0x9B	; 155
    39e8:	78 e1       	ldi	r23, 0x18	; 24
    39ea:	80 91 bf 18 	lds	r24, 0x18BF	; 0x8018bf <downlinkMessageBuffer>
    39ee:	90 91 c0 18 	lds	r25, 0x18C0	; 0x8018c0 <downlinkMessageBuffer+0x1>
    39f2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <xStreamBufferReceive>
		printf("DOWN LINK<<<<<: from port: %d with %d bytes received!",lora_downlink_payload.portNo, lora_downlink_payload.len); // Just for Debug
    39f6:	cb e9       	ldi	r28, 0x9B	; 155
    39f8:	d8 e1       	ldi	r29, 0x18	; 24
    39fa:	99 81       	ldd	r25, Y+1	; 0x01
    39fc:	88 81       	ld	r24, Y
    39fe:	1f 92       	push	r1
    3a00:	9f 93       	push	r25
    3a02:	1f 92       	push	r1
    3a04:	8f 93       	push	r24
    3a06:	85 ed       	ldi	r24, 0xD5	; 213
    3a08:	92 e0       	ldi	r25, 0x02	; 2
    3a0a:	9f 93       	push	r25
    3a0c:	8f 93       	push	r24
    3a0e:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
		if (1 == lora_downlink_payload.len) // Check that we have got the expected 4 bytes
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	81 30       	cpi	r24, 0x01	; 1
    3a22:	99 f5       	brne	.+102    	; 0x3a8a <lora_downLink_task+0xb6>
		{
			 uint8_t level =  (lora_downlink_payload.bytes[0]);
    3a24:	c0 91 9d 18 	lds	r28, 0x189D	; 0x80189d <lora_downlink_payload+0x2>
			 printf("%d dddd\n", lora_downlink_payload.bytes[0]);
    3a28:	1f 92       	push	r1
    3a2a:	cf 93       	push	r28
    3a2c:	8b e0       	ldi	r24, 0x0B	; 11
    3a2e:	93 e0       	ldi	r25, 0x03	; 3
    3a30:	9f 93       	push	r25
    3a32:	8f 93       	push	r24
    3a34:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
			 printf("%d\n",xMessageBufferIsFull(downlinkMessageBuffer) == pdFALSE);
    3a38:	80 91 bf 18 	lds	r24, 0x18BF	; 0x8018bf <downlinkMessageBuffer>
    3a3c:	90 91 c0 18 	lds	r25, 0x18C0	; 0x8018c0 <downlinkMessageBuffer+0x1>
    3a40:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <xStreamBufferIsFull>
    3a44:	91 e0       	ldi	r25, 0x01	; 1
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	81 11       	cpse	r24, r1
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	2f 93       	push	r18
    3a4e:	9f 93       	push	r25
    3a50:	84 e1       	ldi	r24, 0x14	; 20
    3a52:	93 e0       	ldi	r25, 0x03	; 3
    3a54:	9f 93       	push	r25
    3a56:	8f 93       	push	r24
    3a58:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
			 setVentilationLevel(level);
    3a5c:	8c 2f       	mov	r24, r28
    3a5e:	0e 94 09 02 	call	0x412	; 0x412 <setVentilationLevel>
			 xSemaphoreGive(ventilationSemaphore);
    3a62:	00 e0       	ldi	r16, 0x00	; 0
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	a9 01       	movw	r20, r18
    3a6a:	60 e0       	ldi	r22, 0x00	; 0
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <ventilationSemaphore>
    3a72:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <ventilationSemaphore+0x1>
    3a76:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    3a7a:	8d b7       	in	r24, 0x3d	; 61
    3a7c:	9e b7       	in	r25, 0x3e	; 62
    3a7e:	08 96       	adiw	r24, 0x08	; 8
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	9e bf       	out	0x3e, r25	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	8d bf       	out	0x3d, r24	; 61
		}

		vTaskDelay(100);
    3a8a:	64 e6       	ldi	r22, 0x64	; 100
    3a8c:	70 e0       	ldi	r23, 0x00	; 0
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
	}
    3a96:	9e cf       	rjmp	.-196    	; 0x39d4 <lora_downLink_task>

00003a98 <lora_downlink_handler_create>:

}


 void lora_downlink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3a98:	ef 92       	push	r14
    3a9a:	ff 92       	push	r15
    3a9c:	0f 93       	push	r16

 xTaskCreate(
    3a9e:	e1 2c       	mov	r14, r1
    3aa0:	f1 2c       	mov	r15, r1
    3aa2:	08 2f       	mov	r16, r24
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	40 ec       	ldi	r20, 0xC0	; 192
    3aaa:	50 e0       	ldi	r21, 0x00	; 0
    3aac:	68 e1       	ldi	r22, 0x18	; 24
    3aae:	73 e0       	ldi	r23, 0x03	; 3
    3ab0:	8a ee       	ldi	r24, 0xEA	; 234
    3ab2:	9c e1       	ldi	r25, 0x1C	; 28
    3ab4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <xTaskCreate>
 , NULL
 ,	tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
 , NULL );
	 
	 
 }
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	08 95       	ret

00003ac0 <_lora_setup>:
 #define LORA_appKEY "266F209D5D1F15A2AF87F013DC002926"

 static char _out_buf[100];

 static void _lora_setup(void)
 {
    3ac0:	cf 93       	push	r28
    3ac2:	df 93       	push	r29
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	0e 94 c5 2a 	call	0x558a	; 0x558a <status_leds_slowBlink>

	 // Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3aca:	01 d5       	rcall	.+2562   	; 0x44ce <lora_driver_rn2483FactoryReset>
    3acc:	7d d7       	rcall	.+3834   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3ace:	9f 93       	push	r25
    3ad0:	8f 93       	push	r24
    3ad2:	86 e2       	ldi	r24, 0x26	; 38
    3ad4:	93 e0       	ldi	r25, 0x03	; 3
    3ad6:	9f 93       	push	r25
    3ad8:	8f 93       	push	r24
    3ada:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3ade:	75 d6       	rcall	.+3306   	; 0x47ca <lora_driver_configureToEu868>
    3ae0:	73 d7       	rcall	.+3814   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3ae2:	9f 93       	push	r25
    3ae4:	8f 93       	push	r24
    3ae6:	89 e3       	ldi	r24, 0x39	; 57
    3ae8:	93 e0       	ldi	r25, 0x03	; 3
    3aea:	9f 93       	push	r25
    3aec:	8f 93       	push	r24
    3aee:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3af2:	87 ed       	ldi	r24, 0xD7	; 215

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
    3af4:	96 e1       	ldi	r25, 0x16	; 22
    3af6:	fd d4       	rcall	.+2554   	; 0x44f2 <lora_driver_getRn2483Hweui>
    3af8:	67 d7       	rcall	.+3790   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3afa:	c7 ed       	ldi	r28, 0xD7	; 215
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3afc:	d6 e1       	ldi	r29, 0x16	; 22
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	9f 93       	push	r25
    3b04:	8f 93       	push	r24
    3b06:	82 e5       	ldi	r24, 0x52	; 82
    3b08:	93 e0       	ldi	r25, 0x03	; 3
    3b0a:	9f 93       	push	r25
    3b0c:	8f 93       	push	r24
    3b0e:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3b12:	ce 01       	movw	r24, r28

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3b14:	0a d5       	rcall	.+2580   	; 0x452a <lora_driver_setDeviceIdentifier>
    3b16:	58 d7       	rcall	.+3760   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3b18:	9f 93       	push	r25
    3b1a:	8f 93       	push	r24
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	86 e6       	ldi	r24, 0x66	; 102
    3b22:	93 e0       	ldi	r25, 0x03	; 3
    3b24:	9f 93       	push	r25
    3b26:	8f 93       	push	r24
    3b28:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3b2c:	ae 01       	movw	r20, r28

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3b2e:	6b e7       	ldi	r22, 0x7B	; 123
    3b30:	73 e0       	ldi	r23, 0x03	; 3
    3b32:	8c e9       	ldi	r24, 0x9C	; 156
    3b34:	93 e0       	ldi	r25, 0x03	; 3
    3b36:	27 d7       	rcall	.+3662   	; 0x4986 <lora_driver_setOtaaIdentity>
    3b38:	47 d7       	rcall	.+3726   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3b3a:	9f 93       	push	r25
    3b3c:	8f 93       	push	r24
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	8b e7       	ldi	r24, 0x7B	; 123
    3b44:	93 e0       	ldi	r25, 0x03	; 3
    3b46:	9f 93       	push	r25
    3b48:	8f 93       	push	r24
    3b4a:	8c e9       	ldi	r24, 0x9C	; 156
    3b4c:	93 e0       	ldi	r25, 0x03	; 3
    3b4e:	9f 93       	push	r25
    3b50:	8f 93       	push	r24
    3b52:	8d ea       	ldi	r24, 0xAD	; 173
    3b54:	93 e0       	ldi	r25, 0x03	; 3
    3b56:	9f 93       	push	r25
    3b58:	8f 93       	push	r24
    3b5a:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3b5e:	18 d5       	rcall	.+2608   	; 0x4590 <lora_driver_saveMac>

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b60:	33 d7       	rcall	.+3686   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3b62:	9f 93       	push	r25
    3b64:	8f 93       	push	r24
    3b66:	83 ee       	ldi	r24, 0xE3	; 227
    3b68:	93 e0       	ldi	r25, 0x03	; 3
    3b6a:	9f 93       	push	r25
    3b6c:	8f 93       	push	r24
    3b6e:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3b72:	8d b7       	in	r24, 0x3d	; 61

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3b74:	9e b7       	in	r25, 0x3e	; 62
    3b76:	82 96       	adiw	r24, 0x22	; 34
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	9e bf       	out	0x3e, r25	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	8d bf       	out	0x3d, r24	; 61
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	ff d5       	rcall	.+3070   	; 0x4784 <lora_driver_setAdaptiveDataRate>
    3b86:	20 d7       	rcall	.+3648   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3b88:	9f 93       	push	r25
    3b8a:	8f 93       	push	r24
    3b8c:	82 ef       	ldi	r24, 0xF2	; 242
    3b8e:	93 e0       	ldi	r25, 0x03	; 3
    3b90:	9f 93       	push	r25
    3b92:	8f 93       	push	r24
    3b94:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3b98:	84 ef       	ldi	r24, 0xF4	; 244

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3b9a:	91 e0       	ldi	r25, 0x01	; 1
    3b9c:	fe d5       	rcall	.+3068   	; 0x479a <lora_driver_setReceiveDelay>
    3b9e:	14 d7       	rcall	.+3624   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3ba0:	9f 93       	push	r25
    3ba2:	8f 93       	push	r24
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	8f 93       	push	r24
    3ba8:	84 ef       	ldi	r24, 0xF4	; 244
    3baa:	8f 93       	push	r24
    3bac:	83 e1       	ldi	r24, 0x13	; 19
    3bae:	94 e0       	ldi	r25, 0x04	; 4
    3bb0:	9f 93       	push	r25
    3bb2:	8f 93       	push	r24
    3bb4:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3bb8:	8d b7       	in	r24, 0x3d	; 61
    3bba:	9e b7       	in	r25, 0x3e	; 62
    3bbc:	0a 96       	adiw	r24, 0x0a	; 10
    3bbe:	0f b6       	in	r0, 0x3f	; 63
    3bc0:	f8 94       	cli
    3bc2:	9e bf       	out	0x3e, r25	; 62
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	8d bf       	out	0x3d, r24	; 61
    3bc8:	ca e0       	ldi	r28, 0x0A	; 10

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
    3bca:	80 e0       	ldi	r24, 0x00	; 0
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
    3bcc:	e7 d4       	rcall	.+2510   	; 0x459c <lora_driver_join>
    3bce:	d8 2f       	mov	r29, r24
    3bd0:	fb d6       	rcall	.+3574   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3bd2:	9f 93       	push	r25
		 
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3bd4:	8f 93       	push	r24
    3bd6:	1f 92       	push	r1
    3bd8:	cf 93       	push	r28
    3bda:	83 e3       	ldi	r24, 0x33	; 51
    3bdc:	94 e0       	ldi	r25, 0x04	; 4
    3bde:	9f 93       	push	r25
    3be0:	8f 93       	push	r24
    3be2:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3be6:	0f 90       	pop	r0
    3be8:	0f 90       	pop	r0
    3bea:	0f 90       	pop	r0

		 if ( rc != LORA_ACCEPTED)
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	d8 30       	cpi	r29, 0x08	; 8
    3bf4:	59 f0       	breq	.+22     	; 0x3c0c <_lora_setup+0x14c>
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	0e 94 29 2b 	call	0x5652	; 0x5652 <status_leds_longPuls>
		 {
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
    3bfc:	66 e3       	ldi	r22, 0x36	; 54
    3bfe:	71 e0       	ldi	r23, 0x01	; 1
    3c00:	80 e0       	ldi	r24, 0x00	; 0
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
    3c08:	c1 50       	subi	r28, 0x01	; 1
    3c0a:	f9 f6       	brne	.-66     	; 0x3bca <_lora_setup+0x10a>
    3c0c:	d8 30       	cpi	r29, 0x08	; 8
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
    3c0e:	21 f4       	brne	.+8      	; 0x3c18 <_lora_setup+0x158>
    3c10:	81 e0       	ldi	r24, 0x01	; 1

	 if (rc == LORA_ACCEPTED)
    3c12:	0e 94 0b 2b 	call	0x5616	; 0x5616 <status_leds_ledOn>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
    3c16:	09 c0       	rjmp	.+18     	; 0x3c2a <_lora_setup+0x16a>
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	0e 94 1a 2b 	call	0x5634	; 0x5634 <status_leds_ledOff>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <status_leds_fastBlink>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
    3c24:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    3c28:	fd cf       	rjmp	.-6      	; 0x3c24 <_lora_setup+0x164>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	08 95       	ret

00003c30 <lora_uplink_handler_task>:
		 }
	 }
 }
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	cd b7       	in	r28, 0x3d	; 61

 void lora_uplink_handler_task( void *pvParameters )
 {
    3c36:	de b7       	in	r29, 0x3e	; 62
    3c38:	6a 97       	sbiw	r28, 0x1a	; 26
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	35 d4       	rcall	.+2154   	; 0x44b2 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3c48:	62 e0       	ldi	r22, 0x02	; 2
    3c4a:	70 e0       	ldi	r23, 0x00	; 0
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
	lora_driver_resetRn2483(0);
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	2d d4       	rcall	.+2138   	; 0x44b2 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3c58:	66 e9       	ldi	r22, 0x96	; 150
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c64:	df d3       	rcall	.+1982   	; 0x4424 <lora_driver_flushBuffers>

	_lora_setup();
    3c66:	2c df       	rcall	.-424    	; 0x3ac0 <_lora_setup>
    3c68:	83 e5       	ldi	r24, 0x53	; 83
	
	printf("a facut setup\n");	
    3c6a:	94 e0       	ldi	r25, 0x04	; 4
    3c6c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
    3c70:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(60000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3c74:	69 83       	std	Y+1, r22	; 0x01
    3c76:	7a 83       	std	Y+2, r23	; 0x02
    3c78:	8b 83       	std	Y+3, r24	; 0x03
    3c7a:	9c 83       	std	Y+4, r25	; 0x04

	//size_t bytesReceivedApplication;

	sensorDataPackageHandler_setPackage_lenght(6);
    3c7c:	86 e0       	ldi	r24, 0x06	; 6
    3c7e:	88 d0       	rcall	.+272    	; 0x3d90 <sensorDataPackageHandler_setPackage_lenght>
	
	for(;;)
	{
		lora_driver_payload_t _uplink_payload = sensorDataPackageHandler_getLoRaPayload(2);
    3c80:	62 e0       	ldi	r22, 0x02	; 2
    3c82:	ce 01       	movw	r24, r28
    3c84:	05 96       	adiw	r24, 0x05	; 5
    3c86:	96 d0       	rcall	.+300    	; 0x3db4 <sensorDataPackageHandler_getLoRaPayload>
    3c88:	81 e6       	ldi	r24, 0x61	; 97
		printf("took data from package handler \n");
    3c8a:	94 e0       	ldi	r25, 0x04	; 4
    3c8c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
    3c90:	81 e8       	ldi	r24, 0x81	; 129

		printf("before delay\n");
    3c92:	94 e0       	ldi	r25, 0x04	; 4
    3c94:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
    3c98:	48 e8       	ldi	r20, 0x88	; 136
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c9a:	5e e0       	ldi	r21, 0x0E	; 14
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	01 96       	adiw	r24, 0x01	; 1
    3ca4:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <xTaskDelayUntil>
    3ca8:	8e e8       	ldi	r24, 0x8E	; 142
		printf("after delay, but before sending \n");
    3caa:	94 e0       	ldi	r25, 0x04	; 4
    3cac:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
    3cb0:	8e 81       	ldd	r24, Y+6	; 0x06
		printf("%d payload\n",_uplink_payload.len);
    3cb2:	1f 92       	push	r1
    3cb4:	8f 93       	push	r24
    3cb6:	8f ea       	ldi	r24, 0xAF	; 175
    3cb8:	94 e0       	ldi	r25, 0x04	; 4
    3cba:	9f 93       	push	r25
    3cbc:	8f 93       	push	r24
    3cbe:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3cc2:	83 e0       	ldi	r24, 0x03	; 3

		if( _uplink_payload.bytes > 0 )
		{
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3cc4:	0e 94 3b 2b 	call	0x5676	; 0x5676 <status_leds_shortPuls>
    3cc8:	8f 81       	ldd	r24, Y+7	; 0x07
			printf("0 -> %x\n", _uplink_payload.bytes[0]);
    3cca:	1f 92       	push	r1
    3ccc:	8f 93       	push	r24
    3cce:	8b eb       	ldi	r24, 0xBB	; 187
    3cd0:	94 e0       	ldi	r25, 0x04	; 4
    3cd2:	9f 93       	push	r25
    3cd4:	8f 93       	push	r24
    3cd6:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3cda:	88 85       	ldd	r24, Y+8	; 0x08
			printf("1 -> %x\n", _uplink_payload.bytes[1]);
    3cdc:	1f 92       	push	r1
    3cde:	8f 93       	push	r24
    3ce0:	84 ec       	ldi	r24, 0xC4	; 196
    3ce2:	94 e0       	ldi	r25, 0x04	; 4
    3ce4:	9f 93       	push	r25
    3ce6:	8f 93       	push	r24
    3ce8:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3cec:	89 85       	ldd	r24, Y+9	; 0x09
			printf("2 -> %x\n", _uplink_payload.bytes[2]);
    3cee:	1f 92       	push	r1
    3cf0:	8f 93       	push	r24
    3cf2:	8d ec       	ldi	r24, 0xCD	; 205
    3cf4:	94 e0       	ldi	r25, 0x04	; 4
    3cf6:	9f 93       	push	r25
    3cf8:	8f 93       	push	r24
    3cfa:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
			printf("3 -> %x\n", _uplink_payload.bytes[3]);
    3d00:	1f 92       	push	r1
    3d02:	8f 93       	push	r24
    3d04:	86 ed       	ldi	r24, 0xD6	; 214
    3d06:	94 e0       	ldi	r25, 0x04	; 4
    3d08:	9f 93       	push	r25
    3d0a:	8f 93       	push	r24
    3d0c:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3d10:	8b 85       	ldd	r24, Y+11	; 0x0b
			printf("4 -> %x\n", _uplink_payload.bytes[4]);
    3d12:	1f 92       	push	r1
    3d14:	8f 93       	push	r24
    3d16:	8f ed       	ldi	r24, 0xDF	; 223
    3d18:	94 e0       	ldi	r25, 0x04	; 4
    3d1a:	9f 93       	push	r25
    3d1c:	8f 93       	push	r24
    3d1e:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3d22:	8c 85       	ldd	r24, Y+12	; 0x0c
			printf("5 -> %x\n", _uplink_payload.bytes[5]);
    3d24:	1f 92       	push	r1
    3d26:	8f 93       	push	r24
    3d28:	88 ee       	ldi	r24, 0xE8	; 232
    3d2a:	94 e0       	ldi	r25, 0x04	; 4
    3d2c:	9f 93       	push	r25
    3d2e:	8f 93       	push	r24
    3d30:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
			printf("Uploaded Message ------------------>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3d34:	be 01       	movw	r22, r28
    3d36:	6b 5f       	subi	r22, 0xFB	; 251
    3d38:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	58 d4       	rcall	.+2224   	; 0x45ee <lora_driver_sendUploadMessage>
    3d3e:	44 d6       	rcall	.+3208   	; 0x49c8 <lora_driver_mapReturnCodeToText>
    3d40:	9f 93       	push	r25
    3d42:	8f 93       	push	r24
    3d44:	81 ef       	ldi	r24, 0xF1	; 241
    3d46:	94 e0       	ldi	r25, 0x04	; 4
    3d48:	9f 93       	push	r25
    3d4a:	8f 93       	push	r24
    3d4c:	0e 94 be 30 	call	0x617c	; 0x617c <printf>
    3d50:	0f b6       	in	r0, 0x3f	; 63
    3d52:	f8 94       	cli
		}
		vTaskDelay(100);
    3d54:	de bf       	out	0x3e, r29	; 62
    3d56:	0f be       	out	0x3f, r0	; 63
    3d58:	cd bf       	out	0x3d, r28	; 61
    3d5a:	64 e6       	ldi	r22, 0x64	; 100
    3d5c:	70 e0       	ldi	r23, 0x00	; 0
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
    3d66:	8c cf       	rjmp	.-232    	; 0x3c80 <lora_uplink_handler_task+0x50>

00003d68 <lora_uplink_handler_create>:
    3d68:	ef 92       	push	r14
    3d6a:	ff 92       	push	r15
	}
 }

 void lora_uplink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3d6c:	0f 93       	push	r16
	 xTaskCreate(
    3d6e:	e1 2c       	mov	r14, r1
    3d70:	f1 2c       	mov	r15, r1
    3d72:	08 2f       	mov	r16, r24
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 ec       	ldi	r20, 0xC0	; 192
    3d7a:	50 e0       	ldi	r21, 0x00	; 0
    3d7c:	6a e1       	ldi	r22, 0x1A	; 26
    3d7e:	75 e0       	ldi	r23, 0x05	; 5
    3d80:	88 e1       	ldi	r24, 0x18	; 24
    3d82:	9e e1       	ldi	r25, 0x1E	; 30
    3d84:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <xTaskCreate>
	, tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );


	
 }
    3d88:	0f 91       	pop	r16
    3d8a:	ff 90       	pop	r15
    3d8c:	ef 90       	pop	r14
    3d8e:	08 95       	ret

00003d90 <sensorDataPackageHandler_setPackage_lenght>:
	hum_value=value;
}

void sensorDataPackageHandler_setVentilator_servo(uint8_t ventilator_state_servo)
{
	ventilator_servo=ventilator_state_servo;
    3d90:	80 93 b8 18 	sts	0x18B8, r24	; 0x8018b8 <package_lenght>
    3d94:	08 95       	ret

00003d96 <sensorDataPackageHandler_setCO2_value>:
    3d96:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <co2_value+0x1>
    3d9a:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <co2_value>
    3d9e:	08 95       	ret

00003da0 <sensorDataPackageHandler_setTemp_value>:
    3da0:	90 93 b2 18 	sts	0x18B2, r25	; 0x8018b2 <temp_value+0x1>
    3da4:	80 93 b1 18 	sts	0x18B1, r24	; 0x8018b1 <temp_value>
    3da8:	08 95       	ret

00003daa <sensorDataPackageHandler_setHumidity_value>:
    3daa:	90 93 b5 18 	sts	0x18B5, r25	; 0x8018b5 <hum_value+0x1>
    3dae:	80 93 b4 18 	sts	0x18B4, r24	; 0x8018b4 <hum_value>
    3db2:	08 95       	ret

00003db4 <sensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t sensorDataPackageHandler_getLoRaPayload(uint8_t port_No)
{
    3db4:	1f 93       	push	r17
    3db6:	cf 93       	push	r28
    3db8:	df 93       	push	r29
    3dba:	ec 01       	movw	r28, r24
    3dbc:	16 2f       	mov	r17, r22
	lora_driver_payload_t *uplink_payload;
	
	uplink_payload=pvPortMalloc(sizeof(lora_driver_payload_t));
    3dbe:	86 e1       	ldi	r24, 0x16	; 22
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <pvPortMalloc>
    3dc6:	fc 01       	movw	r30, r24
	
	if(uplink_payload != NULL){
    3dc8:	89 2b       	or	r24, r25
    3dca:	b1 f0       	breq	.+44     	; 0x3df8 <sensorDataPackageHandler_getLoRaPayload+0x44>
		uplink_payload->portNo=port_No;
    3dcc:	10 83       	st	Z, r17
		uplink_payload->len=package_lenght;
    3dce:	80 91 b8 18 	lds	r24, 0x18B8	; 0x8018b8 <package_lenght>
    3dd2:	81 83       	std	Z+1, r24	; 0x01
		uplink_payload->bytes[0]=co2_value >> 8;
    3dd4:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <co2_value>
    3dd8:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <co2_value+0x1>
    3ddc:	92 83       	std	Z+2, r25	; 0x02
		uplink_payload->bytes[1]=co2_value & 0xFF;
    3dde:	83 83       	std	Z+3, r24	; 0x03
		uplink_payload->bytes[2]=hum_value >> 8;
    3de0:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <hum_value>
    3de4:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <hum_value+0x1>
    3de8:	94 83       	std	Z+4, r25	; 0x04
		uplink_payload->bytes[3]=hum_value & 0xFF;
    3dea:	85 83       	std	Z+5, r24	; 0x05
		uplink_payload->bytes[4]=temp_value >> 8;
    3dec:	80 91 b1 18 	lds	r24, 0x18B1	; 0x8018b1 <temp_value>
    3df0:	90 91 b2 18 	lds	r25, 0x18B2	; 0x8018b2 <temp_value+0x1>
    3df4:	96 83       	std	Z+6, r25	; 0x06
		uplink_payload->bytes[5]=temp_value & 0xFF;
    3df6:	87 83       	std	Z+7, r24	; 0x07
	}
	
	return *uplink_payload;
    3df8:	86 e1       	ldi	r24, 0x16	; 22
    3dfa:	de 01       	movw	r26, r28
    3dfc:	01 90       	ld	r0, Z+
    3dfe:	0d 92       	st	X+, r0
    3e00:	8a 95       	dec	r24
    3e02:	e1 f7       	brne	.-8      	; 0x3dfc <sensorDataPackageHandler_getLoRaPayload+0x48>
}
    3e04:	ce 01       	movw	r24, r28
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	1f 91       	pop	r17
    3e0c:	08 95       	ret

00003e0e <initializeTempAndHumiditySemaphore>:
  EventGroupHandle_t dataEventGroup;
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
    3e0e:	0f 93       	push	r16
	tempHumSemaphore = xSemaphoreCreateBinary();
    3e10:	43 e0       	ldi	r20, 0x03	; 3
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	0e 94 a4 07 	call	0xf48	; 0xf48 <xQueueGenericCreate>
    3e1a:	90 93 be 18 	sts	0x18BE, r25	; 0x8018be <tempHumSemaphore+0x1>
    3e1e:	80 93 bd 18 	sts	0x18BD, r24	; 0x8018bd <tempHumSemaphore>
	xSemaphoreGive(tempHumSemaphore);
    3e22:	00 e0       	ldi	r16, 0x00	; 0
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	a9 01       	movw	r20, r18
    3e2a:	60 e0       	ldi	r22, 0x00	; 0
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
}
    3e32:	0f 91       	pop	r16
    3e34:	08 95       	ret

00003e36 <initializeVentilationSemaphore>:

void initializeVentilationSemaphore()
{
    3e36:	0f 93       	push	r16
	ventilationSemaphore = xSemaphoreCreateBinary();
    3e38:	43 e0       	ldi	r20, 0x03	; 3
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	0e 94 a4 07 	call	0xf48	; 0xf48 <xQueueGenericCreate>
    3e42:	90 93 bc 18 	sts	0x18BC, r25	; 0x8018bc <ventilationSemaphore+0x1>
    3e46:	80 93 bb 18 	sts	0x18BB, r24	; 0x8018bb <ventilationSemaphore>
	xSemaphoreGive(ventilationSemaphore);
    3e4a:	00 e0       	ldi	r16, 0x00	; 0
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	a9 01       	movw	r20, r18
    3e52:	60 e0       	ldi	r22, 0x00	; 0
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
}
    3e5a:	0f 91       	pop	r16
    3e5c:	08 95       	ret

00003e5e <initializeQueue>:

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    3e5e:	40 e0       	ldi	r20, 0x00	; 0
    3e60:	62 e0       	ldi	r22, 0x02	; 2
    3e62:	83 e0       	ldi	r24, 0x03	; 3
    3e64:	0e 94 a4 07 	call	0xf48	; 0xf48 <xQueueGenericCreate>
    3e68:	90 93 ba 18 	sts	0x18BA, r25	; 0x8018ba <sensorDataQueue+0x1>
    3e6c:	80 93 b9 18 	sts	0x18B9, r24	; 0x8018b9 <sensorDataQueue>
    3e70:	08 95       	ret

00003e72 <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    3e72:	0e 94 47 02 	call	0x48e	; 0x48e <xEventGroupCreate>
    3e76:	90 93 c2 18 	sts	0x18C2, r25	; 0x8018c2 <dataEventGroup+0x1>
    3e7a:	80 93 c1 18 	sts	0x18C1, r24	; 0x8018c1 <dataEventGroup>
    3e7e:	08 95       	ret

00003e80 <initializeUplinkMessageBuffer>:
}

void initializeUplinkMessageBuffer()
{
	uplinkMessageBuffer = xMessageBufferCreate(100);
    3e80:	41 e0       	ldi	r20, 0x01	; 1
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	84 e6       	ldi	r24, 0x64	; 100
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 94 36 0b 	call	0x166c	; 0x166c <xStreamBufferGenericCreate>
    3e8e:	90 93 c4 18 	sts	0x18C4, r25	; 0x8018c4 <uplinkMessageBuffer+0x1>
    3e92:	80 93 c3 18 	sts	0x18C3, r24	; 0x8018c3 <uplinkMessageBuffer>
    3e96:	08 95       	ret

00003e98 <initializeDownlinkMessageBuffer>:
}

void initializeDownlinkMessageBuffer()
{
	downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2);
    3e98:	41 e0       	ldi	r20, 0x01	; 1
    3e9a:	60 e0       	ldi	r22, 0x00	; 0
    3e9c:	70 e0       	ldi	r23, 0x00	; 0
    3e9e:	8c e2       	ldi	r24, 0x2C	; 44
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	0e 94 36 0b 	call	0x166c	; 0x166c <xStreamBufferGenericCreate>
    3ea6:	90 93 c0 18 	sts	0x18C0, r25	; 0x8018c0 <downlinkMessageBuffer+0x1>
    3eaa:	80 93 bf 18 	sts	0x18BF, r24	; 0x8018bf <downlinkMessageBuffer>
    3eae:	08 95       	ret

00003eb0 <initializeTempAndHumDriver>:
#include "TempAndHum.h"
#include "Setup.h"

void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    3eb0:	1d d1       	rcall	.+570    	; 0x40ec <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	05 c0       	rjmp	.+10     	; 0x3ec0 <initializeTempAndHumDriver+0x10>
	{
		printf("Temp and Hum Driver Initialized ok\n");
    3eb6:	87 e2       	ldi	r24, 0x27	; 39
    3eb8:	95 e0       	ldi	r25, 0x05	; 5
    3eba:	0c 94 d1 30 	jmp	0x61a2	; 0x61a2 <puts>
    3ebe:	08 95       	ret
	}
	
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    3ec0:	8a e4       	ldi	r24, 0x4A	; 74
    3ec2:	95 e0       	ldi	r25, 0x05	; 5
    3ec4:	0c 94 d1 30 	jmp	0x61a2	; 0x61a2 <puts>
    3ec8:	08 95       	ret

00003eca <measureTempAndHum>:
	}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    3eca:	28 d1       	rcall	.+592    	; 0x411c <hih8120_wakeup>
    3ecc:	88 23       	and	r24, r24
    3ece:	21 f0       	breq	.+8      	; 0x3ed8 <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    3ed0:	84 e6       	ldi	r24, 0x64	; 100
    3ed2:	95 e0       	ldi	r25, 0x05	; 5
    3ed4:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    3ed8:	63 e0       	ldi	r22, 0x03	; 3
    3eda:	70 e0       	ldi	r23, 0x00	; 0
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
	
	if ( HIH8120_OK !=  hih8120_measure() )
    3ee4:	30 d1       	rcall	.+608    	; 0x4146 <hih8120_measure>
    3ee6:	88 23       	and	r24, r24
    3ee8:	21 f0       	breq	.+8      	; 0x3ef2 <measureTempAndHum+0x28>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    3eea:	84 e8       	ldi	r24, 0x84	; 132
    3eec:	95 e0       	ldi	r25, 0x05	; 5
    3eee:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    3ef2:	61 e0       	ldi	r22, 0x01	; 1
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <vTaskDelay>
    3efe:	08 95       	ret

00003f00 <TempAndHumTask>:
	
}

void TempAndHumTask(void* pvpParameter)
{
    3f00:	cf 93       	push	r28
    3f02:	df 93       	push	r29
    3f04:	00 d0       	rcall	.+0      	; 0x3f06 <TempAndHumTask+0x6>
    3f06:	1f 92       	push	r1
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
	
	while(1)
	{
		uint16_t Temp = 0;
    3f0c:	1c 82       	std	Y+4, r1	; 0x04
    3f0e:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t Humidity = 0;
    3f10:	1a 82       	std	Y+2, r1	; 0x02
    3f12:	19 82       	std	Y+1, r1	; 0x01
		//printf("TEMP TASK \n");
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    3f14:	4f ef       	ldi	r20, 0xFF	; 255
    3f16:	5f ef       	ldi	r21, 0xFF	; 255
    3f18:	ba 01       	movw	r22, r20
    3f1a:	80 91 bd 18 	lds	r24, 0x18BD	; 0x8018bd <tempHumSemaphore>
    3f1e:	90 91 be 18 	lds	r25, 0x18BE	; 0x8018be <tempHumSemaphore+0x1>
    3f22:	0e 94 26 09 	call	0x124c	; 0x124c <xQueueSemaphoreTake>
    3f26:	81 30       	cpi	r24, 0x01	; 1
    3f28:	51 f5       	brne	.+84     	; 0x3f7e <TempAndHumTask+0x7e>
		{
			measureTempAndHum();
    3f2a:	cf df       	rcall	.-98     	; 0x3eca <measureTempAndHum>
			Temp = hih8120_getTemperature_x10();
    3f2c:	58 d1       	rcall	.+688    	; 0x41de <hih8120_getTemperature_x10>
    3f2e:	9c 83       	std	Y+4, r25	; 0x04
    3f30:	8b 83       	std	Y+3, r24	; 0x03
			Humidity = hih8120_getHumidityPercent_x10();
    3f32:	2f d1       	rcall	.+606    	; 0x4192 <hih8120_getHumidityPercent_x10>
    3f34:	9a 83       	std	Y+2, r25	; 0x02
    3f36:	89 83       	std	Y+1, r24	; 0x01
    3f38:	00 e0       	ldi	r16, 0x00	; 0
			//printf("Temperature: %d\n",Temp);
			//printf("Humidity: %d\n",Humidity);
			xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
    3f3a:	2f ef       	ldi	r18, 0xFF	; 255
    3f3c:	3f ef       	ldi	r19, 0xFF	; 255
    3f3e:	a9 01       	movw	r20, r18
    3f40:	be 01       	movw	r22, r28
    3f42:	6d 5f       	subi	r22, 0xFD	; 253
    3f44:	7f 4f       	sbci	r23, 0xFF	; 255
    3f46:	80 91 b9 18 	lds	r24, 0x18B9	; 0x8018b9 <sensorDataQueue>
    3f4a:	90 91 ba 18 	lds	r25, 0x18BA	; 0x8018ba <sensorDataQueue+0x1>
    3f4e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    3f52:	2f ef       	ldi	r18, 0xFF	; 255
			xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
    3f54:	3f ef       	ldi	r19, 0xFF	; 255
    3f56:	a9 01       	movw	r20, r18
    3f58:	be 01       	movw	r22, r28
    3f5a:	6f 5f       	subi	r22, 0xFF	; 255
    3f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5e:	80 91 b9 18 	lds	r24, 0x18B9	; 0x8018b9 <sensorDataQueue>
    3f62:	90 91 ba 18 	lds	r25, 0x18BA	; 0x8018ba <sensorDataQueue+0x1>
    3f66:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    3f6a:	42 e0       	ldi	r20, 0x02	; 2

			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    3f6c:	50 e0       	ldi	r21, 0x00	; 0
    3f6e:	60 e0       	ldi	r22, 0x00	; 0
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <dataEventGroup>
    3f76:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <dataEventGroup+0x1>
    3f7a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <xEventGroupSetBits>
    3f7e:	6a e0       	ldi	r22, 0x0A	; 10

		}
		vTaskDelay(10);
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
    3f8a:	c0 cf       	rjmp	.-128    	; 0x3f0c <TempAndHumTask+0xc>

00003f8c <createTempAndHumTask>:
		
	}
    3f8c:	ef 92       	push	r14
}

void createTempAndHumTask()
{
    3f8e:	ff 92       	push	r15
    3f90:	0f 93       	push	r16
	initializeTempAndHumDriver();
    3f92:	8e df       	rcall	.-228    	; 0x3eb0 <initializeTempAndHumDriver>
		xTaskCreate(
    3f94:	e1 2c       	mov	r14, r1
    3f96:	f1 2c       	mov	r15, r1
    3f98:	01 e0       	ldi	r16, 0x01	; 1
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	40 ec       	ldi	r20, 0xC0	; 192
    3fa0:	50 e0       	ldi	r21, 0x00	; 0
    3fa2:	69 ea       	ldi	r22, 0xA9	; 169
    3fa4:	75 e0       	ldi	r23, 0x05	; 5
    3fa6:	80 e8       	ldi	r24, 0x80	; 128
    3fa8:	9f e1       	ldi	r25, 0x1F	; 31
    3faa:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <xTaskCreate>
		,  "TempAndHumTask"  // A name just for humans
		,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}
    3fae:	0f 91       	pop	r16
    3fb0:	ff 90       	pop	r15
    3fb2:	ef 90       	pop	r14
    3fb4:	08 95       	ret

00003fb6 <ventilationTask>:
#include "ventilation.h"


void ventilationTask(void* pvpParameter)
{
	printf("in ventilaion----------------\n");
    3fb6:	88 eb       	ldi	r24, 0xB8	; 184
    3fb8:	95 e0       	ldi	r25, 0x05	; 5
    3fba:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
	for(;;)
	{
		printf("inSIDEE ventilaion----------------\n");
    3fbe:	86 ed       	ldi	r24, 0xD6	; 214
    3fc0:	95 e0       	ldi	r25, 0x05	; 5
    3fc2:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
	
		if(xSemaphoreTake(ventilationSemaphore,portMAX_DELAY)==pdTRUE)
    3fc6:	4f ef       	ldi	r20, 0xFF	; 255
    3fc8:	5f ef       	ldi	r21, 0xFF	; 255
    3fca:	ba 01       	movw	r22, r20
    3fcc:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <ventilationSemaphore>
    3fd0:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <ventilationSemaphore+0x1>
    3fd4:	0e 94 26 09 	call	0x124c	; 0x124c <xQueueSemaphoreTake>
    3fd8:	81 30       	cpi	r24, 0x01	; 1
    3fda:	21 f4       	brne	.+8      	; 0x3fe4 <ventilationTask+0x2e>
		{
			printf("setting the ventilation level.....\n");
    3fdc:	89 ef       	ldi	r24, 0xF9	; 249
    3fde:	95 e0       	ldi	r25, 0x05	; 5
    3fe0:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
			//rc_servo_setPosition(1, getVentilationLevel());
		}
		vTaskDelay(pdMS_TO_TICKS(100));
    3fe4:	66 e0       	ldi	r22, 0x06	; 6
    3fe6:	70 e0       	ldi	r23, 0x00	; 0
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskDelay>
	}
    3ff0:	e6 cf       	rjmp	.-52     	; 0x3fbe <ventilationTask+0x8>

00003ff2 <createVentilationTask>:
}

void createVentilationTask()
{
    3ff2:	ef 92       	push	r14
    3ff4:	ff 92       	push	r15
    3ff6:	0f 93       	push	r16
	rc_servo_initialise();
    3ff8:	34 d6       	rcall	.+3176   	; 0x4c62 <rc_servo_initialise>
	rc_servo_setPosition(1, 0);
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	19 d6       	rcall	.+3122   	; 0x4c32 <rc_servo_setPosition>

	printf("SHTO ZA HUINNNEAAAAAAAAAAAAA\n");
    4000:	8c e1       	ldi	r24, 0x1C	; 28
    4002:	96 e0       	ldi	r25, 0x06	; 6
    4004:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
		
	xTaskCreate(
    4008:	e1 2c       	mov	r14, r1
    400a:	f1 2c       	mov	r15, r1
    400c:	03 e0       	ldi	r16, 0x03	; 3
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	40 ec       	ldi	r20, 0xC0	; 192
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	69 e3       	ldi	r22, 0x39	; 57
    4018:	76 e0       	ldi	r23, 0x06	; 6
    401a:	8b ed       	ldi	r24, 0xDB	; 219
    401c:	9f e1       	ldi	r25, 0x1F	; 31
    401e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
		
}
    4022:	0f 91       	pop	r16
    4024:	ff 90       	pop	r15
    4026:	ef 90       	pop	r14
    4028:	08 95       	ret

0000402a <initializeUsedData>:
#include <status_leds.h>


void initializeUsedData()
{
	initializeEventGroup();
    402a:	23 df       	rcall	.-442    	; 0x3e72 <initializeEventGroup>
	initializeQueue();
    402c:	18 df       	rcall	.-464    	; 0x3e5e <initializeQueue>
	initializeTempAndHumiditySemaphore();
    402e:	ef de       	rcall	.-546    	; 0x3e0e <initializeTempAndHumiditySemaphore>
    4030:	02 df       	rcall	.-508    	; 0x3e36 <initializeVentilationSemaphore>
	initializeVentilationSemaphore();
    4032:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <initializeConfiguration>
	initializeConfiguration();
    4036:	24 df       	rcall	.-440    	; 0x3e80 <initializeUplinkMessageBuffer>
	initializeUplinkMessageBuffer();
    4038:	2f cf       	rjmp	.-418    	; 0x3e98 <initializeDownlinkMessageBuffer>
    403a:	08 95       	ret

0000403c <create_tasks>:
	initializeDownlinkMessageBuffer();
    403c:	a7 df       	rcall	.-178    	; 0x3f8c <createTempAndHumTask>
    403e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <createCO2Task>
/*-----------------------------------------------------------*/
void create_tasks(void)
{		
		createTempAndHumTask();
		createCO2Task();
		createApplicationTask();	
    4042:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <createApplicationTask>
    4046:	08 95       	ret

00004048 <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	0e 94 04 2a 	call	0x5408	; 0x5408 <stdio_initialise>
	initializeUsedData();
    404e:	ed df       	rcall	.-38     	; 0x402a <initializeUsedData>
	create_tasks();
    4050:	f5 df       	rcall	.-22     	; 0x403c <create_tasks>
    4052:	60 91 bf 18 	lds	r22, 0x18BF	; 0x8018bf <downlinkMessageBuffer>

	lora_driver_initialise(ser_USART1, downlinkMessageBuffer);
    4056:	70 91 c0 18 	lds	r23, 0x18C0	; 0x8018c0 <downlinkMessageBuffer+0x1>
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	ea d1       	rcall	.+980    	; 0x4432 <lora_driver_initialise>
	lora_uplink_handler_create(4);
    405e:	84 e0       	ldi	r24, 0x04	; 4
    4060:	83 de       	rcall	.-762    	; 0x3d68 <lora_uplink_handler_create>
    4062:	85 e4       	ldi	r24, 0x45	; 69
	printf("Before craete downlink\n");
    4064:	96 e0       	ldi	r25, 0x06	; 6
    4066:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
	lora_downlink_handler_create(3);
    406a:	83 e0       	ldi	r24, 0x03	; 3
    406c:	15 dd       	rcall	.-1494   	; 0x3a98 <lora_downlink_handler_create>
	printf("Before venitolation\n");
    406e:	8c e5       	ldi	r24, 0x5C	; 92
    4070:	96 e0       	ldi	r25, 0x06	; 6
    4072:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
	createVentilationTask();
    4076:	bd df       	rcall	.-134    	; 0x3ff2 <createVentilationTask>
    4078:	80 e7       	ldi	r24, 0x70	; 112
	printf("After ventilation\n");
    407a:	96 e0       	ldi	r25, 0x06	; 6
    407c:	0c 94 d1 30 	jmp	0x61a2	; 0x61a2 <puts>
    4080:	08 95       	ret

00004082 <main>:
    4082:	e2 df       	rcall	.-60     	; 0x4048 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Stttttarted!!\n");
    4084:	82 e8       	ldi	r24, 0x82	; 130
    4086:	96 e0       	ldi	r25, 0x06	; 6
    4088:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    408c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <vTaskStartScheduler>
    4090:	ff cf       	rjmp	.-2      	; 0x4090 <main+0xe>

00004092 <_hihTwiCallback>:
    4092:	65 30       	cpi	r22, 0x05	; 5
    4094:	f1 f4       	brne	.+60     	; 0x40d2 <_hihTwiCallback+0x40>
    4096:	fa 01       	movw	r30, r20
    4098:	80 81       	ld	r24, Z
    409a:	8f 73       	andi	r24, 0x3F	; 63
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	98 2f       	mov	r25, r24
    40a0:	88 27       	eor	r24, r24
    40a2:	21 81       	ldd	r18, Z+1	; 0x01
    40a4:	82 2b       	or	r24, r18
    40a6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40aa:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40ae:	82 81       	ldd	r24, Z+2	; 0x02
    40b0:	f0 e4       	ldi	r31, 0x40	; 64
    40b2:	8f 9f       	mul	r24, r31
    40b4:	c0 01       	movw	r24, r0
    40b6:	11 24       	eor	r1, r1
    40b8:	fa 01       	movw	r30, r20
    40ba:	23 81       	ldd	r18, Z+3	; 0x03
    40bc:	26 95       	lsr	r18
    40be:	26 95       	lsr	r18
    40c0:	82 2b       	or	r24, r18
    40c2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40c6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <_measuringIsReady>
    40d0:	08 95       	ret
    40d2:	64 30       	cpi	r22, 0x04	; 4
    40d4:	51 f0       	breq	.+20     	; 0x40ea <_hihTwiCallback+0x58>
    40d6:	80 e0       	ldi	r24, 0x00	; 0
    40d8:	90 e4       	ldi	r25, 0x40	; 64
    40da:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40de:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40e2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40e6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40ea:	08 95       	ret

000040ec <hih8120_initialise>:
    40ec:	0f 93       	push	r16
    40ee:	1f 93       	push	r17
    40f0:	09 e4       	ldi	r16, 0x49	; 73
    40f2:	10 e2       	ldi	r17, 0x20	; 32
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	34 e2       	ldi	r19, 0x24	; 36
    40f8:	44 ef       	ldi	r20, 0xF4	; 244
    40fa:	50 e0       	ldi	r21, 0x00	; 0
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	87 e2       	ldi	r24, 0x27	; 39
    4100:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <twiCreate>
    4104:	90 93 3d 17 	sts	0x173D, r25	; 0x80173d <_hih8120Handler+0x1>
    4108:	80 93 3c 17 	sts	0x173C, r24	; 0x80173c <_hih8120Handler>
    410c:	21 e0       	ldi	r18, 0x01	; 1
    410e:	89 2b       	or	r24, r25
    4110:	09 f0       	breq	.+2      	; 0x4114 <hih8120_initialise+0x28>
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	82 2f       	mov	r24, r18
    4116:	1f 91       	pop	r17
    4118:	0f 91       	pop	r16
    411a:	08 95       	ret

0000411c <hih8120_wakeup>:
    411c:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_hih8120Handler>
    4120:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_hih8120Handler+0x1>
    4124:	00 97       	sbiw	r24, 0x00	; 0
    4126:	59 f0       	breq	.+22     	; 0x413e <hih8120_wakeup+0x22>
    4128:	40 e0       	ldi	r20, 0x00	; 0
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	70 e0       	ldi	r23, 0x00	; 0
    412e:	0e 94 af 2b 	call	0x575e	; 0x575e <twiTransmit>
    4132:	84 30       	cpi	r24, 0x04	; 4
    4134:	31 f4       	brne	.+12     	; 0x4142 <hih8120_wakeup+0x26>
    4136:	10 92 3b 17 	sts	0x173B, r1	; 0x80173b <_measuringIsReady>
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	08 95       	ret
    413e:	82 e0       	ldi	r24, 0x02	; 2
    4140:	08 95       	ret
    4142:	83 e0       	ldi	r24, 0x03	; 3
    4144:	08 95       	ret

00004146 <hih8120_measure>:
    4146:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_hih8120Handler>
    414a:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_hih8120Handler+0x1>
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	39 f0       	breq	.+14     	; 0x4160 <hih8120_measure+0x1a>
    4152:	64 e0       	ldi	r22, 0x04	; 4
    4154:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <twiReceive>
    4158:	85 30       	cpi	r24, 0x05	; 5
    415a:	21 f0       	breq	.+8      	; 0x4164 <hih8120_measure+0x1e>
    415c:	83 e0       	ldi	r24, 0x03	; 3
    415e:	08 95       	ret
    4160:	82 e0       	ldi	r24, 0x02	; 2
    4162:	08 95       	ret
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	08 95       	ret

00004168 <hih8120_getHumidity>:
    4168:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    416c:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__floatunsisf>
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	48 ec       	ldi	r20, 0xC8	; 200
    417e:	52 e4       	ldi	r21, 0x42	; 66
    4180:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <__mulsf3>
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	38 ef       	ldi	r19, 0xF8	; 248
    4188:	4f e7       	ldi	r20, 0x7F	; 127
    418a:	56 e4       	ldi	r21, 0x46	; 70
    418c:	0c 94 6c 2d 	jmp	0x5ad8	; 0x5ad8 <__divsf3>
    4190:	08 95       	ret

00004192 <hih8120_getHumidityPercent_x10>:
    4192:	ea df       	rcall	.-44     	; 0x4168 <hih8120_getHumidity>
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	40 e2       	ldi	r20, 0x20	; 32
    419a:	51 e4       	ldi	r21, 0x41	; 65
    419c:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <__mulsf3>
    41a0:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__fixunssfsi>
    41a4:	cb 01       	movw	r24, r22
    41a6:	08 95       	ret

000041a8 <hih8120_getTemperature>:
    41a8:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    41ac:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__floatunsisf>
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	45 e2       	ldi	r20, 0x25	; 37
    41be:	53 e4       	ldi	r21, 0x43	; 67
    41c0:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <__mulsf3>
    41c4:	20 e0       	ldi	r18, 0x00	; 0
    41c6:	38 ef       	ldi	r19, 0xF8	; 248
    41c8:	4f e7       	ldi	r20, 0x7F	; 127
    41ca:	56 e4       	ldi	r21, 0x46	; 70
    41cc:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__divsf3>
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	40 e2       	ldi	r20, 0x20	; 32
    41d6:	52 e4       	ldi	r21, 0x42	; 66
    41d8:	0c 94 07 2d 	jmp	0x5a0e	; 0x5a0e <__subsf3>
    41dc:	08 95       	ret

000041de <hih8120_getTemperature_x10>:
    41de:	e4 df       	rcall	.-56     	; 0x41a8 <hih8120_getTemperature>
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	40 e2       	ldi	r20, 0x20	; 32
    41e6:	51 e4       	ldi	r21, 0x41	; 65
    41e8:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <__mulsf3>
    41ec:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <__fixsfsi>
    41f0:	cb 01       	movw	r24, r22
    41f2:	08 95       	ret

000041f4 <_serialCallBack>:
    41f4:	0f 93       	push	r16
    41f6:	1f 93       	push	r17
    41f8:	cf 93       	push	r28
    41fa:	df 93       	push	r29
    41fc:	1f 92       	push	r1
    41fe:	1f 92       	push	r1
    4200:	cd b7       	in	r28, 0x3d	; 61
    4202:	de b7       	in	r29, 0x3e	; 62
    4204:	8c 01       	movw	r16, r24
    4206:	19 82       	std	Y+1, r1	; 0x01
    4208:	2d c0       	rjmp	.+90     	; 0x4264 <_serialCallBack+0x70>
    420a:	e0 91 a2 17 	lds	r30, 0x17A2	; 0x8017a2 <rec_buf_inp.2878>
    420e:	ec 32       	cpi	r30, 0x2C	; 44
    4210:	50 f4       	brcc	.+20     	; 0x4226 <_serialCallBack+0x32>
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	8e 0f       	add	r24, r30
    4216:	80 93 a2 17 	sts	0x17A2, r24	; 0x8017a2 <rec_buf_inp.2878>
    421a:	f0 e0       	ldi	r31, 0x00	; 0
    421c:	ec 52       	subi	r30, 0x2C	; 44
    421e:	f8 4e       	sbci	r31, 0xE8	; 232
    4220:	8a 81       	ldd	r24, Y+2	; 0x02
    4222:	80 83       	st	Z, r24
    4224:	02 c0       	rjmp	.+4      	; 0x422a <_serialCallBack+0x36>
    4226:	10 92 a2 17 	sts	0x17A2, r1	; 0x8017a2 <rec_buf_inp.2878>
    422a:	8a 81       	ldd	r24, Y+2	; 0x02
    422c:	8a 30       	cpi	r24, 0x0A	; 10
    422e:	d1 f4       	brne	.+52     	; 0x4264 <_serialCallBack+0x70>
    4230:	40 91 a2 17 	lds	r20, 0x17A2	; 0x8017a2 <rec_buf_inp.2878>
    4234:	50 e0       	ldi	r21, 0x00	; 0
    4236:	fa 01       	movw	r30, r20
    4238:	ee 52       	subi	r30, 0x2E	; 46
    423a:	f8 4e       	sbci	r31, 0xE8	; 232
    423c:	10 82       	st	Z, r1
    423e:	41 50       	subi	r20, 0x01	; 1
    4240:	51 09       	sbc	r21, r1
    4242:	9e 01       	movw	r18, r28
    4244:	2f 5f       	subi	r18, 0xFF	; 255
    4246:	3f 4f       	sbci	r19, 0xFF	; 255
    4248:	64 ed       	ldi	r22, 0xD4	; 212
    424a:	77 e1       	ldi	r23, 0x17	; 23
    424c:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <_serialReplyBufferHandle>
    4250:	90 91 a6 17 	lds	r25, 0x17A6	; 0x8017a6 <_serialReplyBufferHandle+0x1>
    4254:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xStreamBufferSendFromISR>
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	81 11       	cpse	r24, r1
    425c:	0e 94 af 05 	call	0xb5e	; 0xb5e <vPortYield>
    4260:	10 92 a2 17 	sts	0x17A2, r1	; 0x8017a2 <rec_buf_inp.2878>
    4264:	be 01       	movw	r22, r28
    4266:	6e 5f       	subi	r22, 0xFE	; 254
    4268:	7f 4f       	sbci	r23, 0xFF	; 255
    426a:	c8 01       	movw	r24, r16
    426c:	37 d6       	rcall	.+3182   	; 0x4edc <serial_getByte>
    426e:	88 23       	and	r24, r24
    4270:	61 f2       	breq	.-104    	; 0x420a <_serialCallBack+0x16>
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	df 91       	pop	r29
    4278:	cf 91       	pop	r28
    427a:	1f 91       	pop	r17
    427c:	0f 91       	pop	r16
    427e:	08 95       	ret

00004280 <_uploadMessage>:
    4280:	0f 93       	push	r16
    4282:	1f 93       	push	r17
    4284:	cf 93       	push	r28
    4286:	df 93       	push	r29
    4288:	8c 01       	movw	r16, r24
    428a:	eb 01       	movw	r28, r22
    428c:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <_serialReplyBufferHandle>
    4290:	90 91 a6 17 	lds	r25, 0x17A6	; 0x8017a6 <_serialReplyBufferHandle+0x1>
    4294:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <xStreamBufferReset>
    4298:	b8 01       	movw	r22, r16
    429a:	8e e3       	ldi	r24, 0x3E	; 62
    429c:	97 e1       	ldi	r25, 0x17	; 23
    429e:	0e 94 9f 30 	call	0x613e	; 0x613e <strcpy>
    42a2:	20 97       	sbiw	r28, 0x00	; 0
    42a4:	79 f0       	breq	.+30     	; 0x42c4 <_uploadMessage+0x44>
    42a6:	ee e3       	ldi	r30, 0x3E	; 62
    42a8:	f7 e1       	ldi	r31, 0x17	; 23
    42aa:	01 90       	ld	r0, Z+
    42ac:	00 20       	and	r0, r0
    42ae:	e9 f7       	brne	.-6      	; 0x42aa <_uploadMessage+0x2a>
    42b0:	31 97       	sbiw	r30, 0x01	; 1
    42b2:	80 e2       	ldi	r24, 0x20	; 32
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	91 83       	std	Z+1, r25	; 0x01
    42b8:	80 83       	st	Z, r24
    42ba:	be 01       	movw	r22, r28
    42bc:	8e e3       	ldi	r24, 0x3E	; 62
    42be:	97 e1       	ldi	r25, 0x17	; 23
    42c0:	0e 94 94 30 	call	0x6128	; 0x6128 <strcat>
    42c4:	ee e3       	ldi	r30, 0x3E	; 62
    42c6:	f7 e1       	ldi	r31, 0x17	; 23
    42c8:	df 01       	movw	r26, r30
    42ca:	0d 90       	ld	r0, X+
    42cc:	00 20       	and	r0, r0
    42ce:	e9 f7       	brne	.-6      	; 0x42ca <_uploadMessage+0x4a>
    42d0:	11 97       	sbiw	r26, 0x01	; 1
    42d2:	8d e0       	ldi	r24, 0x0D	; 13
    42d4:	9a e0       	ldi	r25, 0x0A	; 10
    42d6:	11 96       	adiw	r26, 0x01	; 1
    42d8:	9c 93       	st	X, r25
    42da:	8e 93       	st	-X, r24
    42dc:	12 96       	adiw	r26, 0x02	; 2
    42de:	1c 92       	st	X, r1
    42e0:	01 90       	ld	r0, Z+
    42e2:	00 20       	and	r0, r0
    42e4:	e9 f7       	brne	.-6      	; 0x42e0 <_uploadMessage+0x60>
    42e6:	31 97       	sbiw	r30, 0x01	; 1
    42e8:	ee 53       	subi	r30, 0x3E	; 62
    42ea:	f7 41       	sbci	r31, 0x17	; 23
    42ec:	ae 2f       	mov	r26, r30
    42ee:	8e e3       	ldi	r24, 0x3E	; 62
    42f0:	97 e1       	ldi	r25, 0x17	; 23
    42f2:	ac 01       	movw	r20, r24
    42f4:	6a 2f       	mov	r22, r26
    42f6:	80 91 a7 17 	lds	r24, 0x17A7	; 0x8017a7 <_rn2483_serial>
    42fa:	90 91 a8 17 	lds	r25, 0x17A8	; 0x8017a8 <_rn2483_serial+0x1>
    42fe:	99 d5       	rcall	.+2866   	; 0x4e32 <serial_sendBytes>
    4300:	81 11       	cpse	r24, r1
    4302:	11 c0       	rjmp	.+34     	; 0x4326 <_uploadMessage+0xa6>
    4304:	08 e2       	ldi	r16, 0x28	; 40
    4306:	15 e0       	ldi	r17, 0x05	; 5
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	4d e2       	ldi	r20, 0x2D	; 45
    430e:	50 e0       	ldi	r21, 0x00	; 0
    4310:	6e e2       	ldi	r22, 0x2E	; 46
    4312:	78 e1       	ldi	r23, 0x18	; 24
    4314:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <_serialReplyBufferHandle>
    4318:	90 91 a6 17 	lds	r25, 0x17A6	; 0x8017a6 <_serialReplyBufferHandle+0x1>
    431c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <xStreamBufferReceive>
    4320:	8e e2       	ldi	r24, 0x2E	; 46
    4322:	98 e1       	ldi	r25, 0x18	; 24
    4324:	02 c0       	rjmp	.+4      	; 0x432a <_uploadMessage+0xaa>
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	df 91       	pop	r29
    432c:	cf 91       	pop	r28
    432e:	1f 91       	pop	r17
    4330:	0f 91       	pop	r16
    4332:	08 95       	ret

00004334 <_reply2ReturnCode>:
    4334:	2f 92       	push	r2
    4336:	3f 92       	push	r3
    4338:	4f 92       	push	r4
    433a:	5f 92       	push	r5
    433c:	6f 92       	push	r6
    433e:	7f 92       	push	r7
    4340:	8f 92       	push	r8
    4342:	9f 92       	push	r9
    4344:	af 92       	push	r10
    4346:	bf 92       	push	r11
    4348:	cf 92       	push	r12
    434a:	df 92       	push	r13
    434c:	ef 92       	push	r14
    434e:	ff 92       	push	r15
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	5c 01       	movw	r10, r24
    435a:	fc 01       	movw	r30, r24
    435c:	01 90       	ld	r0, Z+
    435e:	00 20       	and	r0, r0
    4360:	e9 f7       	brne	.-6      	; 0x435c <_reply2ReturnCode+0x28>
    4362:	31 97       	sbiw	r30, 0x01	; 1
    4364:	6f 01       	movw	r12, r30
    4366:	c8 1a       	sub	r12, r24
    4368:	d9 0a       	sbc	r13, r25
    436a:	5c 2c       	mov	r5, r12
    436c:	0f 2e       	mov	r0, r31
    436e:	f1 e3       	ldi	r31, 0x31	; 49
    4370:	8f 2e       	mov	r8, r31
    4372:	f9 e0       	ldi	r31, 0x09	; 9
    4374:	9f 2e       	mov	r9, r31
    4376:	f0 2d       	mov	r31, r0
    4378:	e1 2c       	mov	r14, r1
    437a:	f1 2c       	mov	r15, r1
    437c:	4c 2c       	mov	r4, r12
    437e:	37 01       	movw	r6, r14
    4380:	f4 01       	movw	r30, r8
    4382:	01 81       	ldd	r16, Z+1	; 0x01
    4384:	12 81       	ldd	r17, Z+2	; 0x02
    4386:	e8 01       	movw	r28, r16
    4388:	09 90       	ld	r0, Y+
    438a:	00 20       	and	r0, r0
    438c:	e9 f7       	brne	.-6      	; 0x4388 <_reply2ReturnCode+0x54>
    438e:	21 97       	sbiw	r28, 0x01	; 1
    4390:	c0 1b       	sub	r28, r16
    4392:	d1 0b       	sbc	r29, r17
    4394:	3c 2e       	mov	r3, r28
    4396:	f9 e0       	ldi	r31, 0x09	; 9
    4398:	cf 16       	cp	r12, r31
    439a:	d1 04       	cpc	r13, r1
    439c:	58 f0       	brcs	.+22     	; 0x43b4 <_reply2ReturnCode+0x80>
    439e:	f4 01       	movw	r30, r8
    43a0:	20 80       	ld	r2, Z
    43a2:	fe e0       	ldi	r31, 0x0E	; 14
    43a4:	2f 12       	cpse	r2, r31
    43a6:	06 c0       	rjmp	.+12     	; 0x43b4 <_reply2ReturnCode+0x80>
    43a8:	b8 01       	movw	r22, r16
    43aa:	c5 01       	movw	r24, r10
    43ac:	0e 94 6f 30 	call	0x60de	; 0x60de <strcasestr>
    43b0:	89 2b       	or	r24, r25
    43b2:	09 f5       	brne	.+66     	; 0x43f6 <_reply2ReturnCode+0xc2>
    43b4:	44 2d       	mov	r20, r4
    43b6:	35 14       	cp	r3, r5
    43b8:	08 f4       	brcc	.+2      	; 0x43bc <_reply2ReturnCode+0x88>
    43ba:	4c 2f       	mov	r20, r28
    43bc:	50 e0       	ldi	r21, 0x00	; 0
    43be:	b8 01       	movw	r22, r16
    43c0:	c5 01       	movw	r24, r10
    43c2:	0e 94 a6 30 	call	0x614c	; 0x614c <strncasecmp>
    43c6:	89 2b       	or	r24, r25
    43c8:	49 f4       	brne	.+18     	; 0x43dc <_reply2ReturnCode+0xa8>
    43ca:	f3 01       	movw	r30, r6
    43cc:	ee 0f       	add	r30, r30
    43ce:	ff 1f       	adc	r31, r31
    43d0:	e6 0d       	add	r30, r6
    43d2:	f7 1d       	adc	r31, r7
    43d4:	ef 5c       	subi	r30, 0xCF	; 207
    43d6:	f6 4f       	sbci	r31, 0xF6	; 246
    43d8:	20 80       	ld	r2, Z
    43da:	0d c0       	rjmp	.+26     	; 0x43f6 <_reply2ReturnCode+0xc2>
    43dc:	8f ef       	ldi	r24, 0xFF	; 255
    43de:	e8 1a       	sub	r14, r24
    43e0:	f8 0a       	sbc	r15, r24
    43e2:	e3 e0       	ldi	r30, 0x03	; 3
    43e4:	8e 0e       	add	r8, r30
    43e6:	91 1c       	adc	r9, r1
    43e8:	f1 e1       	ldi	r31, 0x11	; 17
    43ea:	ef 16       	cp	r14, r31
    43ec:	f1 04       	cpc	r15, r1
    43ee:	39 f6       	brne	.-114    	; 0x437e <_reply2ReturnCode+0x4a>
    43f0:	68 94       	set
    43f2:	22 24       	eor	r2, r2
    43f4:	24 f8       	bld	r2, 4
    43f6:	82 2d       	mov	r24, r2
    43f8:	df 91       	pop	r29
    43fa:	cf 91       	pop	r28
    43fc:	1f 91       	pop	r17
    43fe:	0f 91       	pop	r16
    4400:	ff 90       	pop	r15
    4402:	ef 90       	pop	r14
    4404:	df 90       	pop	r13
    4406:	cf 90       	pop	r12
    4408:	bf 90       	pop	r11
    440a:	af 90       	pop	r10
    440c:	9f 90       	pop	r9
    440e:	8f 90       	pop	r8
    4410:	7f 90       	pop	r7
    4412:	6f 90       	pop	r6
    4414:	5f 90       	pop	r5
    4416:	4f 90       	pop	r4
    4418:	3f 90       	pop	r3
    441a:	2f 90       	pop	r2
    441c:	08 95       	ret

0000441e <_uploadMessageRc>:
    441e:	30 df       	rcall	.-416    	; 0x4280 <_uploadMessage>
    4420:	89 cf       	rjmp	.-238    	; 0x4334 <_reply2ReturnCode>
    4422:	08 95       	ret

00004424 <lora_driver_flushBuffers>:
    4424:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <_serialReplyBufferHandle>
    4428:	90 91 a6 17 	lds	r25, 0x17A6	; 0x8017a6 <_serialReplyBufferHandle+0x1>
    442c:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <xStreamBufferReset>
    4430:	08 95       	ret

00004432 <lora_driver_initialise>:
    4432:	8f 92       	push	r8
    4434:	9f 92       	push	r9
    4436:	af 92       	push	r10
    4438:	cf 92       	push	r12
    443a:	ef 92       	push	r14
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
    4440:	cf 93       	push	r28
    4442:	c8 2f       	mov	r28, r24
    4444:	8b 01       	movw	r16, r22
    4446:	41 e0       	ldi	r20, 0x01	; 1
    4448:	60 e0       	ldi	r22, 0x00	; 0
    444a:	70 e0       	ldi	r23, 0x00	; 0
    444c:	88 ec       	ldi	r24, 0xC8	; 200
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	0e 94 36 0b 	call	0x166c	; 0x166c <xStreamBufferGenericCreate>
    4454:	90 93 a6 17 	sts	0x17A6, r25	; 0x8017a6 <_serialReplyBufferHandle+0x1>
    4458:	80 93 a5 17 	sts	0x17A5, r24	; 0x8017a5 <_serialReplyBufferHandle>
    445c:	10 93 a4 17 	sts	0x17A4, r17	; 0x8017a4 <_downlinkMessageBuffer+0x1>
    4460:	00 93 a3 17 	sts	0x17A3, r16	; 0x8017a3 <_downlinkMessageBuffer>
    4464:	0f 2e       	mov	r0, r31
    4466:	fa ef       	ldi	r31, 0xFA	; 250
    4468:	8f 2e       	mov	r8, r31
    446a:	f0 e2       	ldi	r31, 0x20	; 32
    446c:	9f 2e       	mov	r9, r31
    446e:	f0 2d       	mov	r31, r0
    4470:	68 94       	set
    4472:	aa 24       	eor	r10, r10
    4474:	a6 f8       	bld	r10, 6
    4476:	68 94       	set
    4478:	cc 24       	eor	r12, r12
    447a:	c6 f8       	bld	r12, 6
    447c:	e1 2c       	mov	r14, r1
    447e:	00 e0       	ldi	r16, 0x00	; 0
    4480:	23 e0       	ldi	r18, 0x03	; 3
    4482:	40 e0       	ldi	r20, 0x00	; 0
    4484:	51 ee       	ldi	r21, 0xE1	; 225
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	8c 2f       	mov	r24, r28
    448c:	06 d4       	rcall	.+2060   	; 0x4c9a <serial_create>
    448e:	90 93 a8 17 	sts	0x17A8, r25	; 0x8017a8 <_rn2483_serial+0x1>
    4492:	80 93 a7 17 	sts	0x17A7, r24	; 0x8017a7 <_rn2483_serial>
    4496:	e7 e0       	ldi	r30, 0x07	; 7
    4498:	f1 e0       	ldi	r31, 0x01	; 1
    449a:	80 81       	ld	r24, Z
    449c:	80 61       	ori	r24, 0x10	; 16
    449e:	80 83       	st	Z, r24
    44a0:	cf 91       	pop	r28
    44a2:	1f 91       	pop	r17
    44a4:	0f 91       	pop	r16
    44a6:	ef 90       	pop	r14
    44a8:	cf 90       	pop	r12
    44aa:	af 90       	pop	r10
    44ac:	9f 90       	pop	r9
    44ae:	8f 90       	pop	r8
    44b0:	08 95       	ret

000044b2 <lora_driver_resetRn2483>:
    44b2:	88 23       	and	r24, r24
    44b4:	31 f0       	breq	.+12     	; 0x44c2 <lora_driver_resetRn2483+0x10>
    44b6:	e8 e0       	ldi	r30, 0x08	; 8
    44b8:	f1 e0       	ldi	r31, 0x01	; 1
    44ba:	80 81       	ld	r24, Z
    44bc:	8f 7e       	andi	r24, 0xEF	; 239
    44be:	80 83       	st	Z, r24
    44c0:	08 95       	ret
    44c2:	e8 e0       	ldi	r30, 0x08	; 8
    44c4:	f1 e0       	ldi	r31, 0x01	; 1
    44c6:	80 81       	ld	r24, Z
    44c8:	80 61       	ori	r24, 0x10	; 16
    44ca:	80 83       	st	Z, r24
    44cc:	08 95       	ret

000044ce <lora_driver_rn2483FactoryReset>:
    44ce:	60 e0       	ldi	r22, 0x00	; 0
    44d0:	70 e0       	ldi	r23, 0x00	; 0
    44d2:	87 eb       	ldi	r24, 0xB7	; 183
    44d4:	96 e0       	ldi	r25, 0x06	; 6
    44d6:	d4 de       	rcall	.-600    	; 0x4280 <_uploadMessage>
    44d8:	ee e2       	ldi	r30, 0x2E	; 46
    44da:	f8 e1       	ldi	r31, 0x18	; 24
    44dc:	01 90       	ld	r0, Z+
    44de:	00 20       	and	r0, r0
    44e0:	e9 f7       	brne	.-6      	; 0x44dc <lora_driver_rn2483FactoryReset+0xe>
    44e2:	31 97       	sbiw	r30, 0x01	; 1
    44e4:	ee 52       	subi	r30, 0x2E	; 46
    44e6:	f8 41       	sbci	r31, 0x18	; 24
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	75 97       	sbiw	r30, 0x15	; 21
    44ec:	08 f0       	brcs	.+2      	; 0x44f0 <lora_driver_rn2483FactoryReset+0x22>
    44ee:	80 e0       	ldi	r24, 0x00	; 0
    44f0:	08 95       	ret

000044f2 <lora_driver_getRn2483Hweui>:
    44f2:	cf 93       	push	r28
    44f4:	df 93       	push	r29
    44f6:	ec 01       	movw	r28, r24
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	70 e0       	ldi	r23, 0x00	; 0
    44fc:	88 ec       	ldi	r24, 0xC8	; 200
    44fe:	96 e0       	ldi	r25, 0x06	; 6
    4500:	bf de       	rcall	.-642    	; 0x4280 <_uploadMessage>
    4502:	ee e2       	ldi	r30, 0x2E	; 46
    4504:	f8 e1       	ldi	r31, 0x18	; 24
    4506:	01 90       	ld	r0, Z+
    4508:	00 20       	and	r0, r0
    450a:	e9 f7       	brne	.-6      	; 0x4506 <lora_driver_getRn2483Hweui+0x14>
    450c:	ef 53       	subi	r30, 0x3F	; 63
    450e:	f8 41       	sbci	r31, 0x18	; 24
    4510:	39 f4       	brne	.+14     	; 0x4520 <lora_driver_getRn2483Hweui+0x2e>
    4512:	6e e2       	ldi	r22, 0x2E	; 46
    4514:	78 e1       	ldi	r23, 0x18	; 24
    4516:	ce 01       	movw	r24, r28
    4518:	0e 94 9f 30 	call	0x613e	; 0x613e <strcpy>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	02 c0       	rjmp	.+4      	; 0x4524 <lora_driver_getRn2483Hweui+0x32>
    4520:	18 82       	st	Y, r1
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	df 91       	pop	r29
    4526:	cf 91       	pop	r28
    4528:	08 95       	ret

0000452a <lora_driver_setDeviceIdentifier>:
    452a:	fc 01       	movw	r30, r24
    452c:	01 90       	ld	r0, Z+
    452e:	00 20       	and	r0, r0
    4530:	e9 f7       	brne	.-6      	; 0x452c <lora_driver_setDeviceIdentifier+0x2>
    4532:	9f 01       	movw	r18, r30
    4534:	21 51       	subi	r18, 0x11	; 17
    4536:	31 09       	sbc	r19, r1
    4538:	28 17       	cp	r18, r24
    453a:	39 07       	cpc	r19, r25
    453c:	29 f4       	brne	.+10     	; 0x4548 <lora_driver_setDeviceIdentifier+0x1e>
    453e:	bc 01       	movw	r22, r24
    4540:	86 ef       	ldi	r24, 0xF6	; 246
    4542:	96 e0       	ldi	r25, 0x06	; 6
    4544:	6c cf       	rjmp	.-296    	; 0x441e <_uploadMessageRc>
    4546:	08 95       	ret
    4548:	89 e0       	ldi	r24, 0x09	; 9
    454a:	08 95       	ret

0000454c <lora_driver_setApplicationIdentifier>:
    454c:	fc 01       	movw	r30, r24
    454e:	01 90       	ld	r0, Z+
    4550:	00 20       	and	r0, r0
    4552:	e9 f7       	brne	.-6      	; 0x454e <lora_driver_setApplicationIdentifier+0x2>
    4554:	9f 01       	movw	r18, r30
    4556:	21 51       	subi	r18, 0x11	; 17
    4558:	31 09       	sbc	r19, r1
    455a:	28 17       	cp	r18, r24
    455c:	39 07       	cpc	r19, r25
    455e:	29 f4       	brne	.+10     	; 0x456a <lora_driver_setApplicationIdentifier+0x1e>
    4560:	bc 01       	movw	r22, r24
    4562:	85 e0       	ldi	r24, 0x05	; 5
    4564:	97 e0       	ldi	r25, 0x07	; 7
    4566:	5b cf       	rjmp	.-330    	; 0x441e <_uploadMessageRc>
    4568:	08 95       	ret
    456a:	89 e0       	ldi	r24, 0x09	; 9
    456c:	08 95       	ret

0000456e <lora_driver_setApplicationKey>:
    456e:	fc 01       	movw	r30, r24
    4570:	01 90       	ld	r0, Z+
    4572:	00 20       	and	r0, r0
    4574:	e9 f7       	brne	.-6      	; 0x4570 <lora_driver_setApplicationKey+0x2>
    4576:	9f 01       	movw	r18, r30
    4578:	21 52       	subi	r18, 0x21	; 33
    457a:	31 09       	sbc	r19, r1
    457c:	28 17       	cp	r18, r24
    457e:	39 07       	cpc	r19, r25
    4580:	29 f4       	brne	.+10     	; 0x458c <lora_driver_setApplicationKey+0x1e>
    4582:	bc 01       	movw	r22, r24
    4584:	84 e1       	ldi	r24, 0x14	; 20
    4586:	97 e0       	ldi	r25, 0x07	; 7
    4588:	4a cf       	rjmp	.-364    	; 0x441e <_uploadMessageRc>
    458a:	08 95       	ret
    458c:	89 e0       	ldi	r24, 0x09	; 9
    458e:	08 95       	ret

00004590 <lora_driver_saveMac>:
    4590:	60 e0       	ldi	r22, 0x00	; 0
    4592:	70 e0       	ldi	r23, 0x00	; 0
    4594:	83 e5       	ldi	r24, 0x53	; 83
    4596:	97 e0       	ldi	r25, 0x07	; 7
    4598:	42 cf       	rjmp	.-380    	; 0x441e <_uploadMessageRc>
    459a:	08 95       	ret

0000459c <lora_driver_join>:
    459c:	0f 93       	push	r16
    459e:	1f 93       	push	r17
    45a0:	e8 2f       	mov	r30, r24
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	ee 0f       	add	r30, r30
    45a6:	ff 1f       	adc	r31, r31
    45a8:	e3 5d       	subi	r30, 0xD3	; 211
    45aa:	f6 4f       	sbci	r31, 0xF6	; 246
    45ac:	60 81       	ld	r22, Z
    45ae:	71 81       	ldd	r23, Z+1	; 0x01
    45b0:	8c e5       	ldi	r24, 0x5C	; 92
    45b2:	97 e0       	ldi	r25, 0x07	; 7
    45b4:	34 df       	rcall	.-408    	; 0x441e <_uploadMessageRc>
    45b6:	81 11       	cpse	r24, r1
    45b8:	14 c0       	rjmp	.+40     	; 0x45e2 <lora_driver_join+0x46>
    45ba:	08 e2       	ldi	r16, 0x28	; 40
    45bc:	15 e0       	ldi	r17, 0x05	; 5
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	4d e2       	ldi	r20, 0x2D	; 45
    45c4:	50 e0       	ldi	r21, 0x00	; 0
    45c6:	6e e2       	ldi	r22, 0x2E	; 46
    45c8:	78 e1       	ldi	r23, 0x18	; 24
    45ca:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <_serialReplyBufferHandle>
    45ce:	90 91 a6 17 	lds	r25, 0x17A6	; 0x8017a6 <_serialReplyBufferHandle+0x1>
    45d2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <xStreamBufferReceive>
    45d6:	88 23       	and	r24, r24
    45d8:	21 f0       	breq	.+8      	; 0x45e2 <lora_driver_join+0x46>
    45da:	8e e2       	ldi	r24, 0x2E	; 46
    45dc:	98 e1       	ldi	r25, 0x18	; 24
    45de:	aa de       	rcall	.-684    	; 0x4334 <_reply2ReturnCode>
    45e0:	03 c0       	rjmp	.+6      	; 0x45e8 <lora_driver_join+0x4c>
    45e2:	8e e2       	ldi	r24, 0x2E	; 46
    45e4:	98 e1       	ldi	r25, 0x18	; 24
    45e6:	a6 de       	rcall	.-692    	; 0x4334 <_reply2ReturnCode>
    45e8:	1f 91       	pop	r17
    45ea:	0f 91       	pop	r16
    45ec:	08 95       	ret

000045ee <lora_driver_sendUploadMessage>:
    45ee:	0f 93       	push	r16
    45f0:	1f 93       	push	r17
    45f2:	cf 93       	push	r28
    45f4:	df 93       	push	r29
    45f6:	1f 92       	push	r1
    45f8:	cd b7       	in	r28, 0x3d	; 61
    45fa:	de b7       	in	r29, 0x3e	; 62
    45fc:	db 01       	movw	r26, r22
    45fe:	11 96       	adiw	r26, 0x01	; 1
    4600:	9c 91       	ld	r25, X
    4602:	11 97       	sbiw	r26, 0x01	; 1
    4604:	95 31       	cpi	r25, 0x15	; 21
    4606:	08 f0       	brcs	.+2      	; 0x460a <lora_driver_sendUploadMessage+0x1c>
    4608:	b4 c0       	rjmp	.+360    	; 0x4772 <lora_driver_sendUploadMessage+0x184>
    460a:	99 23       	and	r25, r25
    460c:	81 f1       	breq	.+96     	; 0x466e <lora_driver_sendUploadMessage+0x80>
    460e:	60 e0       	ldi	r22, 0x00	; 0
    4610:	70 e0       	ldi	r23, 0x00	; 0
    4612:	27 2f       	mov	r18, r23
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	46 2f       	mov	r20, r22
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	fd 01       	movw	r30, r26
    461c:	e4 0f       	add	r30, r20
    461e:	f5 1f       	adc	r31, r21
    4620:	92 81       	ldd	r25, Z+2	; 0x02
    4622:	92 95       	swap	r25
    4624:	9f 70       	andi	r25, 0x0F	; 15
    4626:	9a 30       	cpi	r25, 0x0A	; 10
    4628:	10 f0       	brcs	.+4      	; 0x462e <lora_driver_sendUploadMessage+0x40>
    462a:	99 5c       	subi	r25, 0xC9	; 201
    462c:	01 c0       	rjmp	.+2      	; 0x4630 <lora_driver_sendUploadMessage+0x42>
    462e:	90 5d       	subi	r25, 0xD0	; 208
    4630:	f9 01       	movw	r30, r18
    4632:	e1 54       	subi	r30, 0x41	; 65
    4634:	f8 4e       	sbci	r31, 0xE8	; 232
    4636:	90 83       	st	Z, r25
    4638:	2f 5f       	subi	r18, 0xFF	; 255
    463a:	3f 4f       	sbci	r19, 0xFF	; 255
    463c:	fd 01       	movw	r30, r26
    463e:	e4 0f       	add	r30, r20
    4640:	f5 1f       	adc	r31, r21
    4642:	92 81       	ldd	r25, Z+2	; 0x02
    4644:	9f 70       	andi	r25, 0x0F	; 15
    4646:	49 2f       	mov	r20, r25
    4648:	50 e0       	ldi	r21, 0x00	; 0
    464a:	4a 30       	cpi	r20, 0x0A	; 10
    464c:	51 05       	cpc	r21, r1
    464e:	14 f0       	brlt	.+4      	; 0x4654 <lora_driver_sendUploadMessage+0x66>
    4650:	99 5c       	subi	r25, 0xC9	; 201
    4652:	01 c0       	rjmp	.+2      	; 0x4656 <lora_driver_sendUploadMessage+0x68>
    4654:	90 5d       	subi	r25, 0xD0	; 208
    4656:	f9 01       	movw	r30, r18
    4658:	e1 54       	subi	r30, 0x41	; 65
    465a:	f8 4e       	sbci	r31, 0xE8	; 232
    465c:	90 83       	st	Z, r25
    465e:	7e 5f       	subi	r23, 0xFE	; 254
    4660:	6f 5f       	subi	r22, 0xFF	; 255
    4662:	11 96       	adiw	r26, 0x01	; 1
    4664:	9c 91       	ld	r25, X
    4666:	11 97       	sbiw	r26, 0x01	; 1
    4668:	69 17       	cp	r22, r25
    466a:	98 f2       	brcs	.-90     	; 0x4612 <lora_driver_sendUploadMessage+0x24>
    466c:	01 c0       	rjmp	.+2      	; 0x4670 <lora_driver_sendUploadMessage+0x82>
    466e:	70 e0       	ldi	r23, 0x00	; 0
    4670:	e7 2f       	mov	r30, r23
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	e1 54       	subi	r30, 0x41	; 65
    4676:	f8 4e       	sbci	r31, 0xE8	; 232
    4678:	10 82       	st	Z, r1
    467a:	4c 91       	ld	r20, X
    467c:	81 11       	cpse	r24, r1
    467e:	03 c0       	rjmp	.+6      	; 0x4686 <lora_driver_sendUploadMessage+0x98>
    4680:	85 e6       	ldi	r24, 0x65	; 101
    4682:	97 e0       	ldi	r25, 0x07	; 7
    4684:	02 c0       	rjmp	.+4      	; 0x468a <lora_driver_sendUploadMessage+0x9c>
    4686:	87 e6       	ldi	r24, 0x67	; 103
    4688:	97 e0       	ldi	r25, 0x07	; 7
    468a:	2f eb       	ldi	r18, 0xBF	; 191
    468c:	37 e1       	ldi	r19, 0x17	; 23
    468e:	3f 93       	push	r19
    4690:	2f 93       	push	r18
    4692:	1f 92       	push	r1
    4694:	4f 93       	push	r20
    4696:	9f 93       	push	r25
    4698:	8f 93       	push	r24
    469a:	8b e6       	ldi	r24, 0x6B	; 107
    469c:	97 e0       	ldi	r25, 0x07	; 7
    469e:	9f 93       	push	r25
    46a0:	8f 93       	push	r24
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	98 e1       	ldi	r25, 0x18	; 24
    46a6:	9f 93       	push	r25
    46a8:	8f 93       	push	r24
    46aa:	0e 94 01 31 	call	0x6202	; 0x6202 <sprintf>
    46ae:	60 e0       	ldi	r22, 0x00	; 0
    46b0:	70 e0       	ldi	r23, 0x00	; 0
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	98 e1       	ldi	r25, 0x18	; 24
    46b6:	b3 de       	rcall	.-666    	; 0x441e <_uploadMessageRc>
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    46c2:	81 11       	cpse	r24, r1
    46c4:	59 c0       	rjmp	.+178    	; 0x4778 <lora_driver_sendUploadMessage+0x18a>
    46c6:	08 e2       	ldi	r16, 0x28	; 40
    46c8:	15 e0       	ldi	r17, 0x05	; 5
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	4d e2       	ldi	r20, 0x2D	; 45
    46d0:	50 e0       	ldi	r21, 0x00	; 0
    46d2:	6e e2       	ldi	r22, 0x2E	; 46
    46d4:	78 e1       	ldi	r23, 0x18	; 24
    46d6:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <_serialReplyBufferHandle>
    46da:	90 91 a6 17 	lds	r25, 0x17A6	; 0x8017a6 <_serialReplyBufferHandle+0x1>
    46de:	0e 94 a1 0c 	call	0x1942	; 0x1942 <xStreamBufferReceive>
    46e2:	88 23       	and	r24, r24
    46e4:	09 f4       	brne	.+2      	; 0x46e8 <lora_driver_sendUploadMessage+0xfa>
    46e6:	47 c0       	rjmp	.+142    	; 0x4776 <lora_driver_sendUploadMessage+0x188>
    46e8:	8e e2       	ldi	r24, 0x2E	; 46
    46ea:	98 e1       	ldi	r25, 0x18	; 24
    46ec:	23 de       	rcall	.-954    	; 0x4334 <_reply2ReturnCode>
    46ee:	8e 30       	cpi	r24, 0x0E	; 14
    46f0:	09 f0       	breq	.+2      	; 0x46f4 <lora_driver_sendUploadMessage+0x106>
    46f2:	42 c0       	rjmp	.+132    	; 0x4778 <lora_driver_sendUploadMessage+0x18a>
    46f4:	87 e0       	ldi	r24, 0x07	; 7
    46f6:	89 83       	std	Y+1, r24	; 0x01
    46f8:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <_downlinkMessageBuffer>
    46fc:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <_downlinkMessageBuffer+0x1>
    4700:	89 2b       	or	r24, r25
    4702:	a9 f1       	breq	.+106    	; 0x476e <lora_driver_sendUploadMessage+0x180>
    4704:	be 01       	movw	r22, r28
    4706:	6f 5f       	subi	r22, 0xFF	; 255
    4708:	7f 4f       	sbci	r23, 0xFF	; 255
    470a:	8e e2       	ldi	r24, 0x2E	; 46
    470c:	98 e1       	ldi	r25, 0x18	; 24
    470e:	68 d1       	rcall	.+720    	; 0x49e0 <decode_port_no>
    4710:	80 93 a9 17 	sts	0x17A9, r24	; 0x8017a9 <_downlinkPayload>
    4714:	e9 81       	ldd	r30, Y+1	; 0x01
    4716:	f0 e0       	ldi	r31, 0x00	; 0
    4718:	e2 5d       	subi	r30, 0xD2	; 210
    471a:	f7 4e       	sbci	r31, 0xE7	; 231
    471c:	df 01       	movw	r26, r30
    471e:	0d 90       	ld	r0, X+
    4720:	00 20       	and	r0, r0
    4722:	e9 f7       	brne	.-6      	; 0x471e <lora_driver_sendUploadMessage+0x130>
    4724:	11 97       	sbiw	r26, 0x01	; 1
    4726:	ae 1b       	sub	r26, r30
    4728:	bf 0b       	sbc	r27, r31
    472a:	aa 23       	and	r26, r26
    472c:	91 f0       	breq	.+36     	; 0x4752 <lora_driver_sendUploadMessage+0x164>
    472e:	bb 27       	eor	r27, r27
    4730:	cd 01       	movw	r24, r26
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	9c 01       	movw	r18, r24
    4736:	12 f4       	brpl	.+4      	; 0x473c <lora_driver_sendUploadMessage+0x14e>
    4738:	2f 5f       	subi	r18, 0xFF	; 255
    473a:	3f 4f       	sbci	r19, 0xFF	; 255
    473c:	35 95       	asr	r19
    473e:	27 95       	ror	r18
    4740:	20 93 aa 17 	sts	0x17AA, r18	; 0x8017aa <_downlinkPayload+0x1>
    4744:	af 01       	movw	r20, r30
    4746:	4f 5f       	subi	r20, 0xFF	; 255
    4748:	5f 4f       	sbci	r21, 0xFF	; 255
    474a:	64 e1       	ldi	r22, 0x14	; 20
    474c:	8b ea       	ldi	r24, 0xAB	; 171
    474e:	97 e1       	ldi	r25, 0x17	; 23
    4750:	73 d1       	rcall	.+742    	; 0x4a38 <decode_hexadecimal_string_bytes>
    4752:	01 e0       	ldi	r16, 0x01	; 1
    4754:	10 e0       	ldi	r17, 0x00	; 0
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	46 e1       	ldi	r20, 0x16	; 22
    475c:	50 e0       	ldi	r21, 0x00	; 0
    475e:	69 ea       	ldi	r22, 0xA9	; 169
    4760:	77 e1       	ldi	r23, 0x17	; 23
    4762:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <_downlinkMessageBuffer>
    4766:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <_downlinkMessageBuffer+0x1>
    476a:	0e 94 98 0b 	call	0x1730	; 0x1730 <xStreamBufferSend>
    476e:	8e e0       	ldi	r24, 0x0E	; 14
    4770:	03 c0       	rjmp	.+6      	; 0x4778 <lora_driver_sendUploadMessage+0x18a>
    4772:	84 e1       	ldi	r24, 0x14	; 20
    4774:	01 c0       	rjmp	.+2      	; 0x4778 <lora_driver_sendUploadMessage+0x18a>
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	0f 90       	pop	r0
    477a:	df 91       	pop	r29
    477c:	cf 91       	pop	r28
    477e:	1f 91       	pop	r17
    4780:	0f 91       	pop	r16
    4782:	08 95       	ret

00004784 <lora_driver_setAdaptiveDataRate>:
    4784:	81 30       	cpi	r24, 0x01	; 1
    4786:	19 f0       	breq	.+6      	; 0x478e <lora_driver_setAdaptiveDataRate+0xa>
    4788:	6b e7       	ldi	r22, 0x7B	; 123
    478a:	77 e0       	ldi	r23, 0x07	; 7
    478c:	02 c0       	rjmp	.+4      	; 0x4792 <lora_driver_setAdaptiveDataRate+0xe>
    478e:	64 e5       	ldi	r22, 0x54	; 84
    4790:	78 e0       	ldi	r23, 0x08	; 8
    4792:	8f e7       	ldi	r24, 0x7F	; 127
    4794:	97 e0       	ldi	r25, 0x07	; 7
    4796:	43 ce       	rjmp	.-890    	; 0x441e <_uploadMessageRc>
    4798:	08 95       	ret

0000479a <lora_driver_setReceiveDelay>:
    479a:	9f 93       	push	r25
    479c:	8f 93       	push	r24
    479e:	80 eb       	ldi	r24, 0xB0	; 176
    47a0:	97 e0       	ldi	r25, 0x07	; 7
    47a2:	9f 93       	push	r25
    47a4:	8f 93       	push	r24
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	98 e1       	ldi	r25, 0x18	; 24
    47aa:	9f 93       	push	r25
    47ac:	8f 93       	push	r24
    47ae:	0e 94 01 31 	call	0x6202	; 0x6202 <sprintf>
    47b2:	60 e0       	ldi	r22, 0x00	; 0
    47b4:	70 e0       	ldi	r23, 0x00	; 0
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	98 e1       	ldi	r25, 0x18	; 24
    47ba:	31 de       	rcall	.-926    	; 0x441e <_uploadMessageRc>
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	0f 90       	pop	r0
    47c6:	0f 90       	pop	r0
    47c8:	08 95       	ret

000047ca <lora_driver_configureToEu868>:
    47ca:	2f 92       	push	r2
    47cc:	3f 92       	push	r3
    47ce:	4f 92       	push	r4
    47d0:	5f 92       	push	r5
    47d2:	6f 92       	push	r6
    47d4:	7f 92       	push	r7
    47d6:	8f 92       	push	r8
    47d8:	9f 92       	push	r9
    47da:	af 92       	push	r10
    47dc:	bf 92       	push	r11
    47de:	cf 92       	push	r12
    47e0:	df 92       	push	r13
    47e2:	ef 92       	push	r14
    47e4:	ff 92       	push	r15
    47e6:	0f 93       	push	r16
    47e8:	1f 93       	push	r17
    47ea:	cf 93       	push	r28
    47ec:	df 93       	push	r29
    47ee:	cd b7       	in	r28, 0x3d	; 61
    47f0:	de b7       	in	r29, 0x3e	; 62
    47f2:	a0 97       	sbiw	r28, 0x20	; 32
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	6d ed       	ldi	r22, 0xDD	; 221
    4800:	77 e0       	ldi	r23, 0x07	; 7
    4802:	89 ee       	ldi	r24, 0xE9	; 233
    4804:	97 e0       	ldi	r25, 0x07	; 7
    4806:	3c dd       	rcall	.-1416   	; 0x4280 <_uploadMessage>
    4808:	95 dd       	rcall	.-1238   	; 0x4334 <_reply2ReturnCode>
    480a:	81 11       	cpse	r24, r1
    480c:	a3 c0       	rjmp	.+326    	; 0x4954 <lora_driver_configureToEu868+0x18a>
    480e:	80 e2       	ldi	r24, 0x20	; 32
    4810:	e2 e2       	ldi	r30, 0x22	; 34
    4812:	f2 e0       	ldi	r31, 0x02	; 2
    4814:	de 01       	movw	r26, r28
    4816:	11 96       	adiw	r26, 0x01	; 1
    4818:	01 90       	ld	r0, Z+
    481a:	0d 92       	st	X+, r0
    481c:	8a 95       	dec	r24
    481e:	e1 f7       	brne	.-8      	; 0x4818 <lora_driver_configureToEu868+0x4e>
    4820:	9e 01       	movw	r18, r28
    4822:	2f 5f       	subi	r18, 0xFF	; 255
    4824:	3f 4f       	sbci	r19, 0xFF	; 255
    4826:	69 01       	movw	r12, r18
    4828:	e1 2c       	mov	r14, r1
    482a:	f1 2c       	mov	r15, r1
    482c:	0f 2e       	mov	r0, r31
    482e:	f5 ef       	ldi	r31, 0xF5	; 245
    4830:	af 2e       	mov	r10, r31
    4832:	f7 e0       	ldi	r31, 0x07	; 7
    4834:	bf 2e       	mov	r11, r31
    4836:	f0 2d       	mov	r31, r0
    4838:	01 e0       	ldi	r16, 0x01	; 1
    483a:	18 e1       	ldi	r17, 0x18	; 24
    483c:	0f 2e       	mov	r0, r31
    483e:	fe e0       	ldi	r31, 0x0E	; 14
    4840:	4f 2e       	mov	r4, r31
    4842:	f8 e0       	ldi	r31, 0x08	; 8
    4844:	5f 2e       	mov	r5, r31
    4846:	f0 2d       	mov	r31, r0
    4848:	0f 2e       	mov	r0, r31
    484a:	f5 e2       	ldi	r31, 0x25	; 37
    484c:	8f 2e       	mov	r8, r31
    484e:	f8 e0       	ldi	r31, 0x08	; 8
    4850:	9f 2e       	mov	r9, r31
    4852:	f0 2d       	mov	r31, r0
    4854:	0f 2e       	mov	r0, r31
    4856:	ff e3       	ldi	r31, 0x3F	; 63
    4858:	6f 2e       	mov	r6, r31
    485a:	f8 e0       	ldi	r31, 0x08	; 8
    485c:	7f 2e       	mov	r7, r31
    485e:	f0 2d       	mov	r31, r0
    4860:	3e 2c       	mov	r3, r14
    4862:	2f 2c       	mov	r2, r15
    4864:	ff 92       	push	r15
    4866:	ef 92       	push	r14
    4868:	bf 92       	push	r11
    486a:	af 92       	push	r10
    486c:	1f 93       	push	r17
    486e:	0f 93       	push	r16
    4870:	0e 94 01 31 	call	0x6202	; 0x6202 <sprintf>
    4874:	60 e0       	ldi	r22, 0x00	; 0
    4876:	70 e0       	ldi	r23, 0x00	; 0
    4878:	c8 01       	movw	r24, r16
    487a:	02 dd       	rcall	.-1532   	; 0x4280 <_uploadMessage>
    487c:	5b dd       	rcall	.-1354   	; 0x4334 <_reply2ReturnCode>
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	81 11       	cpse	r24, r1
    488c:	63 c0       	rjmp	.+198    	; 0x4954 <lora_driver_configureToEu868+0x18a>
    488e:	32 e0       	ldi	r19, 0x02	; 2
    4890:	3e 15       	cp	r19, r14
    4892:	e8 f4       	brcc	.+58     	; 0x48ce <lora_driver_configureToEu868+0x104>
    4894:	f6 01       	movw	r30, r12
    4896:	83 81       	ldd	r24, Z+3	; 0x03
    4898:	8f 93       	push	r24
    489a:	82 81       	ldd	r24, Z+2	; 0x02
    489c:	8f 93       	push	r24
    489e:	81 81       	ldd	r24, Z+1	; 0x01
    48a0:	8f 93       	push	r24
    48a2:	80 81       	ld	r24, Z
    48a4:	8f 93       	push	r24
    48a6:	ff 92       	push	r15
    48a8:	ef 92       	push	r14
    48aa:	5f 92       	push	r5
    48ac:	4f 92       	push	r4
    48ae:	1f 93       	push	r17
    48b0:	0f 93       	push	r16
    48b2:	0e 94 01 31 	call	0x6202	; 0x6202 <sprintf>
    48b6:	60 e0       	ldi	r22, 0x00	; 0
    48b8:	70 e0       	ldi	r23, 0x00	; 0
    48ba:	c8 01       	movw	r24, r16
    48bc:	e1 dc       	rcall	.-1598   	; 0x4280 <_uploadMessage>
    48be:	3a dd       	rcall	.-1420   	; 0x4334 <_reply2ReturnCode>
    48c0:	0f b6       	in	r0, 0x3f	; 63
    48c2:	f8 94       	cli
    48c4:	de bf       	out	0x3e, r29	; 62
    48c6:	0f be       	out	0x3f, r0	; 63
    48c8:	cd bf       	out	0x3d, r28	; 61
    48ca:	81 11       	cpse	r24, r1
    48cc:	43 c0       	rjmp	.+134    	; 0x4954 <lora_driver_configureToEu868+0x18a>
    48ce:	2f 92       	push	r2
    48d0:	3f 92       	push	r3
    48d2:	9f 92       	push	r9
    48d4:	8f 92       	push	r8
    48d6:	1f 93       	push	r17
    48d8:	0f 93       	push	r16
    48da:	0e 94 01 31 	call	0x6202	; 0x6202 <sprintf>
    48de:	60 e0       	ldi	r22, 0x00	; 0
    48e0:	70 e0       	ldi	r23, 0x00	; 0
    48e2:	c8 01       	movw	r24, r16
    48e4:	cd dc       	rcall	.-1638   	; 0x4280 <_uploadMessage>
    48e6:	26 dd       	rcall	.-1460   	; 0x4334 <_reply2ReturnCode>
    48e8:	0f 90       	pop	r0
    48ea:	0f 90       	pop	r0
    48ec:	0f 90       	pop	r0
    48ee:	0f 90       	pop	r0
    48f0:	0f 90       	pop	r0
    48f2:	0f 90       	pop	r0
    48f4:	81 11       	cpse	r24, r1
    48f6:	2e c0       	rjmp	.+92     	; 0x4954 <lora_driver_configureToEu868+0x18a>
    48f8:	2f 92       	push	r2
    48fa:	3f 92       	push	r3
    48fc:	7f 92       	push	r7
    48fe:	6f 92       	push	r6
    4900:	1f 93       	push	r17
    4902:	0f 93       	push	r16
    4904:	0e 94 01 31 	call	0x6202	; 0x6202 <sprintf>
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	70 e0       	ldi	r23, 0x00	; 0
    490c:	c8 01       	movw	r24, r16
    490e:	b8 dc       	rcall	.-1680   	; 0x4280 <_uploadMessage>
    4910:	11 dd       	rcall	.-1502   	; 0x4334 <_reply2ReturnCode>
    4912:	0f 90       	pop	r0
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	81 11       	cpse	r24, r1
    4920:	19 c0       	rjmp	.+50     	; 0x4954 <lora_driver_configureToEu868+0x18a>
    4922:	3f ef       	ldi	r19, 0xFF	; 255
    4924:	e3 1a       	sub	r14, r19
    4926:	f3 0a       	sbc	r15, r19
    4928:	84 e0       	ldi	r24, 0x04	; 4
    492a:	c8 0e       	add	r12, r24
    492c:	d1 1c       	adc	r13, r1
    492e:	98 e0       	ldi	r25, 0x08	; 8
    4930:	e9 16       	cp	r14, r25
    4932:	f1 04       	cpc	r15, r1
    4934:	09 f0       	breq	.+2      	; 0x4938 <lora_driver_configureToEu868+0x16e>
    4936:	94 cf       	rjmp	.-216    	; 0x4860 <lora_driver_configureToEu868+0x96>
    4938:	60 e0       	ldi	r22, 0x00	; 0
    493a:	70 e0       	ldi	r23, 0x00	; 0
    493c:	87 e5       	ldi	r24, 0x57	; 87
    493e:	98 e0       	ldi	r25, 0x08	; 8
    4940:	9f dc       	rcall	.-1730   	; 0x4280 <_uploadMessage>
    4942:	f8 dc       	rcall	.-1552   	; 0x4334 <_reply2ReturnCode>
    4944:	81 11       	cpse	r24, r1
    4946:	06 c0       	rjmp	.+12     	; 0x4954 <lora_driver_configureToEu868+0x18a>
    4948:	60 e0       	ldi	r22, 0x00	; 0
    494a:	70 e0       	ldi	r23, 0x00	; 0
    494c:	88 e6       	ldi	r24, 0x68	; 104
    494e:	98 e0       	ldi	r25, 0x08	; 8
    4950:	97 dc       	rcall	.-1746   	; 0x4280 <_uploadMessage>
    4952:	f0 dc       	rcall	.-1568   	; 0x4334 <_reply2ReturnCode>
    4954:	a0 96       	adiw	r28, 0x20	; 32
    4956:	0f b6       	in	r0, 0x3f	; 63
    4958:	f8 94       	cli
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	cd bf       	out	0x3d, r28	; 61
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	1f 91       	pop	r17
    4966:	0f 91       	pop	r16
    4968:	ff 90       	pop	r15
    496a:	ef 90       	pop	r14
    496c:	df 90       	pop	r13
    496e:	cf 90       	pop	r12
    4970:	bf 90       	pop	r11
    4972:	af 90       	pop	r10
    4974:	9f 90       	pop	r9
    4976:	8f 90       	pop	r8
    4978:	7f 90       	pop	r7
    497a:	6f 90       	pop	r6
    497c:	5f 90       	pop	r5
    497e:	4f 90       	pop	r4
    4980:	3f 90       	pop	r3
    4982:	2f 90       	pop	r2
    4984:	08 95       	ret

00004986 <lora_driver_setOtaaIdentity>:
    4986:	ef 92       	push	r14
    4988:	ff 92       	push	r15
    498a:	0f 93       	push	r16
    498c:	1f 93       	push	r17
    498e:	cf 93       	push	r28
    4990:	df 93       	push	r29
    4992:	ec 01       	movw	r28, r24
    4994:	8b 01       	movw	r16, r22
    4996:	7a 01       	movw	r14, r20
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	f4 de       	rcall	.-536    	; 0x4784 <lora_driver_setAdaptiveDataRate>
    499c:	81 11       	cpse	r24, r1
    499e:	0d c0       	rjmp	.+26     	; 0x49ba <lora_driver_setOtaaIdentity+0x34>
    49a0:	ce 01       	movw	r24, r28
    49a2:	d4 dd       	rcall	.-1112   	; 0x454c <lora_driver_setApplicationIdentifier>
    49a4:	81 11       	cpse	r24, r1
    49a6:	09 c0       	rjmp	.+18     	; 0x49ba <lora_driver_setOtaaIdentity+0x34>
    49a8:	c8 01       	movw	r24, r16
    49aa:	e1 dd       	rcall	.-1086   	; 0x456e <lora_driver_setApplicationKey>
    49ac:	81 11       	cpse	r24, r1
    49ae:	05 c0       	rjmp	.+10     	; 0x49ba <lora_driver_setOtaaIdentity+0x34>
    49b0:	c7 01       	movw	r24, r14
    49b2:	bb dd       	rcall	.-1162   	; 0x452a <lora_driver_setDeviceIdentifier>
    49b4:	81 11       	cpse	r24, r1
    49b6:	01 c0       	rjmp	.+2      	; 0x49ba <lora_driver_setOtaaIdentity+0x34>
    49b8:	eb dd       	rcall	.-1066   	; 0x4590 <lora_driver_saveMac>
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	1f 91       	pop	r17
    49c0:	0f 91       	pop	r16
    49c2:	ff 90       	pop	r15
    49c4:	ef 90       	pop	r14
    49c6:	08 95       	ret

000049c8 <lora_driver_mapReturnCodeToText>:
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	fc 01       	movw	r30, r24
    49cc:	ee 0f       	add	r30, r30
    49ce:	ff 1f       	adc	r31, r31
    49d0:	8e 0f       	add	r24, r30
    49d2:	9f 1f       	adc	r25, r31
    49d4:	fc 01       	movw	r30, r24
    49d6:	ef 5c       	subi	r30, 0xCF	; 207
    49d8:	f6 4f       	sbci	r31, 0xF6	; 246
    49da:	81 81       	ldd	r24, Z+1	; 0x01
    49dc:	92 81       	ldd	r25, Z+2	; 0x02
    49de:	08 95       	ret

000049e0 <decode_port_no>:
    49e0:	dc 01       	movw	r26, r24
    49e2:	00 97       	sbiw	r24, 0x00	; 0
    49e4:	29 f1       	breq	.+74     	; 0x4a30 <decode_port_no+0x50>
    49e6:	fb 01       	movw	r30, r22
    49e8:	20 81       	ld	r18, Z
    49ea:	fc 01       	movw	r30, r24
    49ec:	01 90       	ld	r0, Z+
    49ee:	00 20       	and	r0, r0
    49f0:	e9 f7       	brne	.-6      	; 0x49ec <decode_port_no+0xc>
    49f2:	31 97       	sbiw	r30, 0x01	; 1
    49f4:	e8 1b       	sub	r30, r24
    49f6:	f9 0b       	sbc	r31, r25
    49f8:	82 2f       	mov	r24, r18
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	e8 17       	cp	r30, r24
    49fe:	f9 07       	cpc	r31, r25
    4a00:	c8 f0       	brcs	.+50     	; 0x4a34 <decode_port_no+0x54>
    4a02:	80 e0       	ldi	r24, 0x00	; 0
    4a04:	08 c0       	rjmp	.+16     	; 0x4a16 <decode_port_no+0x36>
    4a06:	88 0f       	add	r24, r24
    4a08:	38 2f       	mov	r19, r24
    4a0a:	33 0f       	add	r19, r19
    4a0c:	33 0f       	add	r19, r19
    4a0e:	83 0f       	add	r24, r19
    4a10:	80 53       	subi	r24, 0x30	; 48
    4a12:	89 0f       	add	r24, r25
    4a14:	2f 5f       	subi	r18, 0xFF	; 255
    4a16:	fd 01       	movw	r30, r26
    4a18:	e2 0f       	add	r30, r18
    4a1a:	f1 1d       	adc	r31, r1
    4a1c:	90 81       	ld	r25, Z
    4a1e:	30 ed       	ldi	r19, 0xD0	; 208
    4a20:	39 0f       	add	r19, r25
    4a22:	3a 30       	cpi	r19, 0x0A	; 10
    4a24:	10 f4       	brcc	.+4      	; 0x4a2a <decode_port_no+0x4a>
    4a26:	91 11       	cpse	r25, r1
    4a28:	ee cf       	rjmp	.-36     	; 0x4a06 <decode_port_no+0x26>
    4a2a:	fb 01       	movw	r30, r22
    4a2c:	20 83       	st	Z, r18
    4a2e:	08 95       	ret
    4a30:	80 e0       	ldi	r24, 0x00	; 0
    4a32:	08 95       	ret
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	08 95       	ret

00004a38 <decode_hexadecimal_string_bytes>:
    4a38:	0f 93       	push	r16
    4a3a:	1f 93       	push	r17
    4a3c:	cf 93       	push	r28
    4a3e:	df 93       	push	r29
    4a40:	dc 01       	movw	r26, r24
    4a42:	ea 01       	movw	r28, r20
    4a44:	20 97       	sbiw	r28, 0x00	; 0
    4a46:	e1 f1       	breq	.+120    	; 0x4ac0 <decode_hexadecimal_string_bytes+0x88>
    4a48:	fa 01       	movw	r30, r20
    4a4a:	01 90       	ld	r0, Z+
    4a4c:	00 20       	and	r0, r0
    4a4e:	e9 f7       	brne	.-6      	; 0x4a4a <decode_hexadecimal_string_bytes+0x12>
    4a50:	31 97       	sbiw	r30, 0x01	; 1
    4a52:	e4 1b       	sub	r30, r20
    4a54:	f5 0b       	sbc	r31, r21
    4a56:	32 97       	sbiw	r30, 0x02	; 2
    4a58:	10 f5       	brcc	.+68     	; 0x4a9e <decode_hexadecimal_string_bytes+0x66>
    4a5a:	32 c0       	rjmp	.+100    	; 0x4ac0 <decode_hexadecimal_string_bytes+0x88>
    4a5c:	8d 01       	movw	r16, r26
    4a5e:	04 0f       	add	r16, r20
    4a60:	15 1f       	adc	r17, r21
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	ae 01       	movw	r20, r28
    4a66:	42 0f       	add	r20, r18
    4a68:	53 1f       	adc	r21, r19
    4a6a:	fa 01       	movw	r30, r20
    4a6c:	90 81       	ld	r25, Z
    4a6e:	91 34       	cpi	r25, 0x41	; 65
    4a70:	28 f0       	brcs	.+10     	; 0x4a7c <decode_hexadecimal_string_bytes+0x44>
    4a72:	97 53       	subi	r25, 0x37	; 55
    4a74:	59 2f       	mov	r21, r25
    4a76:	52 95       	swap	r21
    4a78:	50 7f       	andi	r21, 0xF0	; 240
    4a7a:	03 c0       	rjmp	.+6      	; 0x4a82 <decode_hexadecimal_string_bytes+0x4a>
    4a7c:	59 2f       	mov	r21, r25
    4a7e:	52 95       	swap	r21
    4a80:	50 7f       	andi	r21, 0xF0	; 240
    4a82:	2c 0f       	add	r18, r28
    4a84:	3d 1f       	adc	r19, r29
    4a86:	f9 01       	movw	r30, r18
    4a88:	91 81       	ldd	r25, Z+1	; 0x01
    4a8a:	91 34       	cpi	r25, 0x41	; 65
    4a8c:	10 f0       	brcs	.+4      	; 0x4a92 <decode_hexadecimal_string_bytes+0x5a>
    4a8e:	97 53       	subi	r25, 0x37	; 55
    4a90:	01 c0       	rjmp	.+2      	; 0x4a94 <decode_hexadecimal_string_bytes+0x5c>
    4a92:	90 53       	subi	r25, 0x30	; 48
    4a94:	95 0f       	add	r25, r21
    4a96:	f8 01       	movw	r30, r16
    4a98:	90 83       	st	Z, r25
    4a9a:	8f 5f       	subi	r24, 0xFF	; 255
    4a9c:	01 c0       	rjmp	.+2      	; 0x4aa0 <decode_hexadecimal_string_bytes+0x68>
    4a9e:	80 e0       	ldi	r24, 0x00	; 0
    4aa0:	28 2f       	mov	r18, r24
    4aa2:	22 0f       	add	r18, r18
    4aa4:	48 2f       	mov	r20, r24
    4aa6:	50 e0       	ldi	r21, 0x00	; 0
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	01 90       	ld	r0, Z+
    4aac:	00 20       	and	r0, r0
    4aae:	e9 f7       	brne	.-6      	; 0x4aaa <decode_hexadecimal_string_bytes+0x72>
    4ab0:	31 97       	sbiw	r30, 0x01	; 1
    4ab2:	ec 1b       	sub	r30, r28
    4ab4:	fd 0b       	sbc	r31, r29
    4ab6:	4e 17       	cp	r20, r30
    4ab8:	5f 07       	cpc	r21, r31
    4aba:	10 f4       	brcc	.+4      	; 0x4ac0 <decode_hexadecimal_string_bytes+0x88>
    4abc:	86 13       	cpse	r24, r22
    4abe:	ce cf       	rjmp	.-100    	; 0x4a5c <decode_hexadecimal_string_bytes+0x24>
    4ac0:	df 91       	pop	r29
    4ac2:	cf 91       	pop	r28
    4ac4:	1f 91       	pop	r17
    4ac6:	0f 91       	pop	r16
    4ac8:	08 95       	ret

00004aca <_serialCallBack>:
    4aca:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <crc_sum.1945>
    4ace:	86 0f       	add	r24, r22
    4ad0:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <crc_sum.1945>
    4ad4:	90 91 61 18 	lds	r25, 0x1861	; 0x801861 <_mh_state>
    4ad8:	91 30       	cpi	r25, 0x01	; 1
    4ada:	79 f0       	breq	.+30     	; 0x4afa <_serialCallBack+0x30>
    4adc:	28 f0       	brcs	.+10     	; 0x4ae8 <_serialCallBack+0x1e>
    4ade:	92 30       	cpi	r25, 0x02	; 2
    4ae0:	a9 f0       	breq	.+42     	; 0x4b0c <_serialCallBack+0x42>
    4ae2:	93 30       	cpi	r25, 0x03	; 3
    4ae4:	19 f1       	breq	.+70     	; 0x4b2c <_serialCallBack+0x62>
    4ae6:	08 95       	ret
    4ae8:	6f 3f       	cpi	r22, 0xFF	; 255
    4aea:	09 f0       	breq	.+2      	; 0x4aee <_serialCallBack+0x24>
    4aec:	48 c0       	rjmp	.+144    	; 0x4b7e <_serialCallBack+0xb4>
    4aee:	10 92 5e 18 	sts	0x185E, r1	; 0x80185e <crc_sum.1945>
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <_mh_state>
    4af8:	08 95       	ret
    4afa:	66 38       	cpi	r22, 0x86	; 134
    4afc:	09 f0       	breq	.+2      	; 0x4b00 <_serialCallBack+0x36>
    4afe:	3f c0       	rjmp	.+126    	; 0x4b7e <_serialCallBack+0xb4>
    4b00:	10 92 5d 18 	sts	0x185D, r1	; 0x80185d <inDex.1943>
    4b04:	82 e0       	ldi	r24, 0x02	; 2
    4b06:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <_mh_state>
    4b0a:	08 95       	ret
    4b0c:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <inDex.1943>
    4b10:	81 e0       	ldi	r24, 0x01	; 1
    4b12:	8e 0f       	add	r24, r30
    4b14:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <inDex.1943>
    4b18:	f0 e0       	ldi	r31, 0x00	; 0
    4b1a:	e5 5a       	subi	r30, 0xA5	; 165
    4b1c:	f7 4e       	sbci	r31, 0xE7	; 231
    4b1e:	60 83       	st	Z, r22
    4b20:	82 30       	cpi	r24, 0x02	; 2
    4b22:	69 f5       	brne	.+90     	; 0x4b7e <_serialCallBack+0xb4>
    4b24:	83 e0       	ldi	r24, 0x03	; 3
    4b26:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <_mh_state>
    4b2a:	08 95       	ret
    4b2c:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <inDex.1943>
    4b30:	21 e0       	ldi	r18, 0x01	; 1
    4b32:	29 0f       	add	r18, r25
    4b34:	20 93 5d 18 	sts	0x185D, r18	; 0x80185d <inDex.1943>
    4b38:	96 30       	cpi	r25, 0x06	; 6
    4b3a:	09 f5       	brne	.+66     	; 0x4b7e <_serialCallBack+0xb4>
    4b3c:	81 11       	cpse	r24, r1
    4b3e:	0e c0       	rjmp	.+28     	; 0x4b5c <_serialCallBack+0x92>
    4b40:	eb e5       	ldi	r30, 0x5B	; 91
    4b42:	f8 e1       	ldi	r31, 0x18	; 24
    4b44:	80 81       	ld	r24, Z
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	98 2f       	mov	r25, r24
    4b4a:	88 27       	eor	r24, r24
    4b4c:	21 81       	ldd	r18, Z+1	; 0x01
    4b4e:	82 0f       	add	r24, r18
    4b50:	91 1d       	adc	r25, r1
    4b52:	90 93 63 18 	sts	0x1863, r25	; 0x801863 <_ppm+0x1>
    4b56:	80 93 62 18 	sts	0x1862, r24	; 0x801862 <_ppm>
    4b5a:	04 c0       	rjmp	.+8      	; 0x4b64 <_serialCallBack+0x9a>
    4b5c:	10 92 63 18 	sts	0x1863, r1	; 0x801863 <_ppm+0x1>
    4b60:	10 92 62 18 	sts	0x1862, r1	; 0x801862 <_ppm>
    4b64:	10 92 61 18 	sts	0x1861, r1	; 0x801861 <_mh_state>
    4b68:	e0 91 5f 18 	lds	r30, 0x185F	; 0x80185f <_appCallBack>
    4b6c:	f0 91 60 18 	lds	r31, 0x1860	; 0x801860 <_appCallBack+0x1>
    4b70:	30 97       	sbiw	r30, 0x00	; 0
    4b72:	29 f0       	breq	.+10     	; 0x4b7e <_serialCallBack+0xb4>
    4b74:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <_ppm>
    4b78:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <_ppm+0x1>
    4b7c:	19 95       	eicall
    4b7e:	08 95       	ret

00004b80 <mh_z19_initialise>:
    4b80:	8f 92       	push	r8
    4b82:	9f 92       	push	r9
    4b84:	af 92       	push	r10
    4b86:	cf 92       	push	r12
    4b88:	ef 92       	push	r14
    4b8a:	0f 93       	push	r16
    4b8c:	0f 2e       	mov	r0, r31
    4b8e:	f5 e6       	ldi	r31, 0x65	; 101
    4b90:	8f 2e       	mov	r8, r31
    4b92:	f5 e2       	ldi	r31, 0x25	; 37
    4b94:	9f 2e       	mov	r9, r31
    4b96:	f0 2d       	mov	r31, r0
    4b98:	68 94       	set
    4b9a:	aa 24       	eor	r10, r10
    4b9c:	a4 f8       	bld	r10, 4
    4b9e:	68 94       	set
    4ba0:	cc 24       	eor	r12, r12
    4ba2:	c4 f8       	bld	r12, 4
    4ba4:	e1 2c       	mov	r14, r1
    4ba6:	00 e0       	ldi	r16, 0x00	; 0
    4ba8:	23 e0       	ldi	r18, 0x03	; 3
    4baa:	40 e8       	ldi	r20, 0x80	; 128
    4bac:	55 e2       	ldi	r21, 0x25	; 37
    4bae:	60 e0       	ldi	r22, 0x00	; 0
    4bb0:	70 e0       	ldi	r23, 0x00	; 0
    4bb2:	73 d0       	rcall	.+230    	; 0x4c9a <serial_create>
    4bb4:	90 93 65 18 	sts	0x1865, r25	; 0x801865 <_serial+0x1>
    4bb8:	80 93 64 18 	sts	0x1864, r24	; 0x801864 <_serial>
    4bbc:	0f 91       	pop	r16
    4bbe:	ef 90       	pop	r14
    4bc0:	cf 90       	pop	r12
    4bc2:	af 90       	pop	r10
    4bc4:	9f 90       	pop	r9
    4bc6:	8f 90       	pop	r8
    4bc8:	08 95       	ret

00004bca <mh_z19_injectCallBack>:
    4bca:	90 93 60 18 	sts	0x1860, r25	; 0x801860 <_appCallBack+0x1>
    4bce:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <_appCallBack>
    4bd2:	08 95       	ret

00004bd4 <mh_z19_takeMeassuring>:
    4bd4:	cf 93       	push	r28
    4bd6:	df 93       	push	r29
    4bd8:	cd b7       	in	r28, 0x3d	; 61
    4bda:	de b7       	in	r29, 0x3e	; 62
    4bdc:	29 97       	sbiw	r28, 0x09	; 9
    4bde:	0f b6       	in	r0, 0x3f	; 63
    4be0:	f8 94       	cli
    4be2:	de bf       	out	0x3e, r29	; 62
    4be4:	0f be       	out	0x3f, r0	; 63
    4be6:	cd bf       	out	0x3d, r28	; 61
    4be8:	89 e0       	ldi	r24, 0x09	; 9
    4bea:	e2 e4       	ldi	r30, 0x42	; 66
    4bec:	f2 e0       	ldi	r31, 0x02	; 2
    4bee:	9e 01       	movw	r18, r28
    4bf0:	2f 5f       	subi	r18, 0xFF	; 255
    4bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf4:	d9 01       	movw	r26, r18
    4bf6:	01 90       	ld	r0, Z+
    4bf8:	0d 92       	st	X+, r0
    4bfa:	8a 95       	dec	r24
    4bfc:	e1 f7       	brne	.-8      	; 0x4bf6 <mh_z19_takeMeassuring+0x22>
    4bfe:	10 92 63 18 	sts	0x1863, r1	; 0x801863 <_ppm+0x1>
    4c02:	10 92 62 18 	sts	0x1862, r1	; 0x801862 <_ppm>
    4c06:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <_serial>
    4c0a:	90 91 65 18 	lds	r25, 0x1865	; 0x801865 <_serial+0x1>
    4c0e:	00 97       	sbiw	r24, 0x00	; 0
    4c10:	31 f0       	breq	.+12     	; 0x4c1e <mh_z19_takeMeassuring+0x4a>
    4c12:	42 2f       	mov	r20, r18
    4c14:	53 2f       	mov	r21, r19
    4c16:	69 e0       	ldi	r22, 0x09	; 9
    4c18:	0c d1       	rcall	.+536    	; 0x4e32 <serial_sendBytes>
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	01 c0       	rjmp	.+2      	; 0x4c20 <mh_z19_takeMeassuring+0x4c>
    4c1e:	82 e0       	ldi	r24, 0x02	; 2
    4c20:	29 96       	adiw	r28, 0x09	; 9
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	f8 94       	cli
    4c26:	de bf       	out	0x3e, r29	; 62
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	cd bf       	out	0x3d, r28	; 61
    4c2c:	df 91       	pop	r29
    4c2e:	cf 91       	pop	r28
    4c30:	08 95       	ret

00004c32 <rc_servo_setPosition>:
    4c32:	65 36       	cpi	r22, 0x65	; 101
    4c34:	0c f0       	brlt	.+2      	; 0x4c38 <rc_servo_setPosition+0x6>
    4c36:	64 e6       	ldi	r22, 0x64	; 100
    4c38:	6c 39       	cpi	r22, 0x9C	; 156
    4c3a:	0c f4       	brge	.+2      	; 0x4c3e <rc_servo_setPosition+0xc>
    4c3c:	6c e9       	ldi	r22, 0x9C	; 156
    4c3e:	96 ef       	ldi	r25, 0xF6	; 246
    4c40:	69 02       	muls	r22, r25
    4c42:	b0 01       	movw	r22, r0
    4c44:	11 24       	eor	r1, r1
    4c46:	68 54       	subi	r22, 0x48	; 72
    4c48:	74 4f       	sbci	r23, 0xF4	; 244
    4c4a:	81 11       	cpse	r24, r1
    4c4c:	05 c0       	rjmp	.+10     	; 0x4c58 <rc_servo_setPosition+0x26>
    4c4e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4c52:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4c56:	08 95       	ret
    4c58:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4c5c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4c60:	08 95       	ret

00004c62 <rc_servo_initialise>:
    4c62:	ea e0       	ldi	r30, 0x0A	; 10
    4c64:	f1 e0       	ldi	r31, 0x01	; 1
    4c66:	80 81       	ld	r24, Z
    4c68:	88 61       	ori	r24, 0x18	; 24
    4c6a:	80 83       	st	Z, r24
    4c6c:	8f e3       	ldi	r24, 0x3F	; 63
    4c6e:	9c e9       	ldi	r25, 0x9C	; 156
    4c70:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4c74:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4c78:	60 e0       	ldi	r22, 0x00	; 0
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	da df       	rcall	.-76     	; 0x4c32 <rc_servo_setPosition>
    4c7e:	60 e0       	ldi	r22, 0x00	; 0
    4c80:	81 e0       	ldi	r24, 0x01	; 1
    4c82:	d7 df       	rcall	.-82     	; 0x4c32 <rc_servo_setPosition>
    4c84:	e0 e2       	ldi	r30, 0x20	; 32
    4c86:	f1 e0       	ldi	r31, 0x01	; 1
    4c88:	80 81       	ld	r24, Z
    4c8a:	82 6a       	ori	r24, 0xA2	; 162
    4c8c:	80 83       	st	Z, r24
    4c8e:	e1 e2       	ldi	r30, 0x21	; 33
    4c90:	f1 e0       	ldi	r31, 0x01	; 1
    4c92:	80 81       	ld	r24, Z
    4c94:	8a 61       	ori	r24, 0x1A	; 26
    4c96:	80 83       	st	Z, r24
    4c98:	08 95       	ret

00004c9a <serial_create>:
    4c9a:	2f 92       	push	r2
    4c9c:	3f 92       	push	r3
    4c9e:	4f 92       	push	r4
    4ca0:	5f 92       	push	r5
    4ca2:	6f 92       	push	r6
    4ca4:	7f 92       	push	r7
    4ca6:	8f 92       	push	r8
    4ca8:	9f 92       	push	r9
    4caa:	af 92       	push	r10
    4cac:	cf 92       	push	r12
    4cae:	ef 92       	push	r14
    4cb0:	ff 92       	push	r15
    4cb2:	0f 93       	push	r16
    4cb4:	1f 93       	push	r17
    4cb6:	cf 93       	push	r28
    4cb8:	df 93       	push	r29
    4cba:	cd b7       	in	r28, 0x3d	; 61
    4cbc:	de b7       	in	r29, 0x3e	; 62
    4cbe:	f8 2e       	mov	r15, r24
    4cc0:	2a 01       	movw	r4, r20
    4cc2:	3b 01       	movw	r6, r22
    4cc4:	88 e0       	ldi	r24, 0x08	; 8
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <malloc>
    4ccc:	8c 01       	movw	r16, r24
    4cce:	8f 2d       	mov	r24, r15
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	ee 0f       	add	r30, r30
    4cd6:	ff 1f       	adc	r31, r31
    4cd8:	ea 59       	subi	r30, 0x9A	; 154
    4cda:	f7 4e       	sbci	r31, 0xE7	; 231
    4cdc:	11 83       	std	Z+1, r17	; 0x01
    4cde:	00 83       	st	Z, r16
    4ce0:	01 15       	cp	r16, r1
    4ce2:	11 05       	cpc	r17, r1
    4ce4:	09 f4       	brne	.+2      	; 0x4ce8 <serial_create+0x4e>
    4ce6:	68 c0       	rjmp	.+208    	; 0x4db8 <serial_create+0x11e>
    4ce8:	88 0f       	add	r24, r24
    4cea:	99 1f       	adc	r25, r25
    4cec:	fc 01       	movw	r30, r24
    4cee:	e5 5f       	subi	r30, 0xF5	; 245
    4cf0:	fd 4f       	sbci	r31, 0xFD	; 253
    4cf2:	80 81       	ld	r24, Z
    4cf4:	91 81       	ldd	r25, Z+1	; 0x01
    4cf6:	d8 01       	movw	r26, r16
    4cf8:	8d 93       	st	X+, r24
    4cfa:	9c 93       	st	X, r25
    4cfc:	6c 2d       	mov	r22, r12
    4cfe:	70 e0       	ldi	r23, 0x00	; 0
    4d00:	84 e0       	ldi	r24, 0x04	; 4
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <calloc>
    4d08:	1c 01       	movw	r2, r24
    4d0a:	61 e0       	ldi	r22, 0x01	; 1
    4d0c:	70 e0       	ldi	r23, 0x00	; 0
    4d0e:	86 e0       	ldi	r24, 0x06	; 6
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <calloc>
    4d16:	7c 01       	movw	r14, r24
    4d18:	4c 2d       	mov	r20, r12
    4d1a:	b1 01       	movw	r22, r2
    4d1c:	5c d6       	rcall	.+3256   	; 0x59d6 <fifo_init>
    4d1e:	f8 01       	movw	r30, r16
    4d20:	f5 82       	std	Z+5, r15	; 0x05
    4d22:	e4 82       	std	Z+4, r14	; 0x04
    4d24:	6a 2d       	mov	r22, r10
    4d26:	70 e0       	ldi	r23, 0x00	; 0
    4d28:	84 e0       	ldi	r24, 0x04	; 4
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <calloc>
    4d30:	1c 01       	movw	r2, r24
    4d32:	61 e0       	ldi	r22, 0x01	; 1
    4d34:	70 e0       	ldi	r23, 0x00	; 0
    4d36:	86 e0       	ldi	r24, 0x06	; 6
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <calloc>
    4d3e:	7c 01       	movw	r14, r24
    4d40:	4a 2d       	mov	r20, r10
    4d42:	b1 01       	movw	r22, r2
    4d44:	48 d6       	rcall	.+3216   	; 0x59d6 <fifo_init>
    4d46:	d8 01       	movw	r26, r16
    4d48:	13 96       	adiw	r26, 0x03	; 3
    4d4a:	fc 92       	st	X, r15
    4d4c:	ee 92       	st	-X, r14
    4d4e:	12 97       	sbiw	r26, 0x02	; 2
    4d50:	17 96       	adiw	r26, 0x07	; 7
    4d52:	9c 92       	st	X, r9
    4d54:	8e 92       	st	-X, r8
    4d56:	16 97       	sbiw	r26, 0x06	; 6
    4d58:	ff b6       	in	r15, 0x3f	; 63
    4d5a:	f8 94       	cli
    4d5c:	ed 91       	ld	r30, X+
    4d5e:	fc 91       	ld	r31, X
    4d60:	11 97       	sbiw	r26, 0x01	; 1
    4d62:	36 97       	sbiw	r30, 0x06	; 6
    4d64:	80 81       	ld	r24, Z
    4d66:	82 60       	ori	r24, 0x02	; 2
    4d68:	80 83       	st	Z, r24
    4d6a:	8d 90       	ld	r8, X+
    4d6c:	9c 90       	ld	r9, X
    4d6e:	c3 01       	movw	r24, r6
    4d70:	b2 01       	movw	r22, r4
    4d72:	4b d7       	rcall	.+3734   	; 0x5c0a <__floatunsisf>
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	40 e0       	ldi	r20, 0x00	; 0
    4d7a:	51 e4       	ldi	r21, 0x41	; 65
    4d7c:	d4 d7       	rcall	.+4008   	; 0x5d26 <__mulsf3>
    4d7e:	9b 01       	movw	r18, r22
    4d80:	ac 01       	movw	r20, r24
    4d82:	60 e0       	ldi	r22, 0x00	; 0
    4d84:	74 e2       	ldi	r23, 0x24	; 36
    4d86:	84 e7       	ldi	r24, 0x74	; 116
    4d88:	9b e4       	ldi	r25, 0x4B	; 75
    4d8a:	a6 d6       	rcall	.+3404   	; 0x5ad8 <__divsf3>
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	40 e8       	ldi	r20, 0x80	; 128
    4d92:	5f e3       	ldi	r21, 0x3F	; 63
    4d94:	3c d6       	rcall	.+3192   	; 0x5a0e <__subsf3>
    4d96:	0d d7       	rcall	.+3610   	; 0x5bb2 <__fixunssfsi>
    4d98:	f4 01       	movw	r30, r8
    4d9a:	32 97       	sbiw	r30, 0x02	; 2
    4d9c:	60 83       	st	Z, r22
    4d9e:	d8 01       	movw	r26, r16
    4da0:	ed 91       	ld	r30, X+
    4da2:	fc 91       	ld	r31, X
    4da4:	11 97       	sbiw	r26, 0x01	; 1
    4da6:	35 97       	sbiw	r30, 0x05	; 5
    4da8:	88 e9       	ldi	r24, 0x98	; 152
    4daa:	80 83       	st	Z, r24
    4dac:	ed 91       	ld	r30, X+
    4dae:	fc 91       	ld	r31, X
    4db0:	34 97       	sbiw	r30, 0x04	; 4
    4db2:	86 e0       	ldi	r24, 0x06	; 6
    4db4:	80 83       	st	Z, r24
    4db6:	ff be       	out	0x3f, r15	; 63
    4db8:	c8 01       	movw	r24, r16
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	1f 91       	pop	r17
    4dc0:	0f 91       	pop	r16
    4dc2:	ff 90       	pop	r15
    4dc4:	ef 90       	pop	r14
    4dc6:	cf 90       	pop	r12
    4dc8:	af 90       	pop	r10
    4dca:	9f 90       	pop	r9
    4dcc:	8f 90       	pop	r8
    4dce:	7f 90       	pop	r7
    4dd0:	6f 90       	pop	r6
    4dd2:	5f 90       	pop	r5
    4dd4:	4f 90       	pop	r4
    4dd6:	3f 90       	pop	r3
    4dd8:	2f 90       	pop	r2
    4dda:	08 95       	ret

00004ddc <serial_sendByte>:
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	dc 01       	movw	r26, r24
    4de2:	89 2b       	or	r24, r25
    4de4:	01 f1       	breq	.+64     	; 0x4e26 <serial_sendByte+0x4a>
    4de6:	12 96       	adiw	r26, 0x02	; 2
    4de8:	ed 91       	ld	r30, X+
    4dea:	fc 91       	ld	r31, X
    4dec:	13 97       	sbiw	r26, 0x03	; 3
    4dee:	93 81       	ldd	r25, Z+3	; 0x03
    4df0:	82 81       	ldd	r24, Z+2	; 0x02
    4df2:	25 81       	ldd	r18, Z+5	; 0x05
    4df4:	98 1b       	sub	r25, r24
    4df6:	92 23       	and	r25, r18
    4df8:	84 81       	ldd	r24, Z+4	; 0x04
    4dfa:	98 17       	cp	r25, r24
    4dfc:	b1 f0       	breq	.+44     	; 0x4e2a <serial_sendByte+0x4e>
    4dfe:	83 81       	ldd	r24, Z+3	; 0x03
    4e00:	26 95       	lsr	r18
    4e02:	28 23       	and	r18, r24
    4e04:	c0 81       	ld	r28, Z
    4e06:	d1 81       	ldd	r29, Z+1	; 0x01
    4e08:	c2 0f       	add	r28, r18
    4e0a:	d1 1d       	adc	r29, r1
    4e0c:	68 83       	st	Y, r22
    4e0e:	8f 5f       	subi	r24, 0xFF	; 255
    4e10:	95 81       	ldd	r25, Z+5	; 0x05
    4e12:	89 23       	and	r24, r25
    4e14:	83 83       	std	Z+3, r24	; 0x03
    4e16:	ed 91       	ld	r30, X+
    4e18:	fc 91       	ld	r31, X
    4e1a:	35 97       	sbiw	r30, 0x05	; 5
    4e1c:	80 81       	ld	r24, Z
    4e1e:	80 62       	ori	r24, 0x20	; 32
    4e20:	80 83       	st	Z, r24
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	03 c0       	rjmp	.+6      	; 0x4e2c <serial_sendByte+0x50>
    4e26:	81 e0       	ldi	r24, 0x01	; 1
    4e28:	01 c0       	rjmp	.+2      	; 0x4e2c <serial_sendByte+0x50>
    4e2a:	82 e0       	ldi	r24, 0x02	; 2
    4e2c:	df 91       	pop	r29
    4e2e:	cf 91       	pop	r28
    4e30:	08 95       	ret

00004e32 <serial_sendBytes>:
    4e32:	ef 92       	push	r14
    4e34:	ff 92       	push	r15
    4e36:	0f 93       	push	r16
    4e38:	1f 93       	push	r17
    4e3a:	cf 93       	push	r28
    4e3c:	df 93       	push	r29
    4e3e:	7c 01       	movw	r14, r24
    4e40:	00 97       	sbiw	r24, 0x00	; 0
    4e42:	09 f4       	brne	.+2      	; 0x4e46 <serial_sendBytes+0x14>
    4e44:	41 c0       	rjmp	.+130    	; 0x4ec8 <serial_sendBytes+0x96>
    4e46:	dc 01       	movw	r26, r24
    4e48:	12 96       	adiw	r26, 0x02	; 2
    4e4a:	ed 91       	ld	r30, X+
    4e4c:	fc 91       	ld	r31, X
    4e4e:	13 97       	sbiw	r26, 0x03	; 3
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	82 81       	ldd	r24, Z+2	; 0x02
    4e54:	98 1b       	sub	r25, r24
    4e56:	85 81       	ldd	r24, Z+5	; 0x05
    4e58:	98 23       	and	r25, r24
    4e5a:	84 81       	ldd	r24, Z+4	; 0x04
    4e5c:	89 1b       	sub	r24, r25
    4e5e:	86 17       	cp	r24, r22
    4e60:	a8 f1       	brcs	.+106    	; 0x4ecc <serial_sendBytes+0x9a>
    4e62:	66 23       	and	r22, r22
    4e64:	41 f1       	breq	.+80     	; 0x4eb6 <serial_sendBytes+0x84>
    4e66:	84 2f       	mov	r24, r20
    4e68:	95 2f       	mov	r25, r21
    4e6a:	dc 01       	movw	r26, r24
    4e6c:	61 50       	subi	r22, 0x01	; 1
    4e6e:	46 2f       	mov	r20, r22
    4e70:	50 e0       	ldi	r21, 0x00	; 0
    4e72:	4f 5f       	subi	r20, 0xFF	; 255
    4e74:	5f 4f       	sbci	r21, 0xFF	; 255
    4e76:	48 0f       	add	r20, r24
    4e78:	59 1f       	adc	r21, r25
    4e7a:	e7 01       	movw	r28, r14
    4e7c:	ea 81       	ldd	r30, Y+2	; 0x02
    4e7e:	fb 81       	ldd	r31, Y+3	; 0x03
    4e80:	93 81       	ldd	r25, Z+3	; 0x03
    4e82:	82 81       	ldd	r24, Z+2	; 0x02
    4e84:	25 81       	ldd	r18, Z+5	; 0x05
    4e86:	98 1b       	sub	r25, r24
    4e88:	92 23       	and	r25, r18
    4e8a:	84 81       	ldd	r24, Z+4	; 0x04
    4e8c:	98 17       	cp	r25, r24
    4e8e:	79 f0       	breq	.+30     	; 0x4eae <serial_sendBytes+0x7c>
    4e90:	8c 91       	ld	r24, X
    4e92:	93 81       	ldd	r25, Z+3	; 0x03
    4e94:	26 95       	lsr	r18
    4e96:	29 23       	and	r18, r25
    4e98:	60 81       	ld	r22, Z
    4e9a:	71 81       	ldd	r23, Z+1	; 0x01
    4e9c:	8b 01       	movw	r16, r22
    4e9e:	02 0f       	add	r16, r18
    4ea0:	11 1d       	adc	r17, r1
    4ea2:	e8 01       	movw	r28, r16
    4ea4:	88 83       	st	Y, r24
    4ea6:	9f 5f       	subi	r25, 0xFF	; 255
    4ea8:	85 81       	ldd	r24, Z+5	; 0x05
    4eaa:	98 23       	and	r25, r24
    4eac:	93 83       	std	Z+3, r25	; 0x03
    4eae:	11 96       	adiw	r26, 0x01	; 1
    4eb0:	a4 17       	cp	r26, r20
    4eb2:	b5 07       	cpc	r27, r21
    4eb4:	11 f7       	brne	.-60     	; 0x4e7a <serial_sendBytes+0x48>
    4eb6:	d7 01       	movw	r26, r14
    4eb8:	ed 91       	ld	r30, X+
    4eba:	fc 91       	ld	r31, X
    4ebc:	35 97       	sbiw	r30, 0x05	; 5
    4ebe:	80 81       	ld	r24, Z
    4ec0:	80 62       	ori	r24, 0x20	; 32
    4ec2:	80 83       	st	Z, r24
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	03 c0       	rjmp	.+6      	; 0x4ece <serial_sendBytes+0x9c>
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	01 c0       	rjmp	.+2      	; 0x4ece <serial_sendBytes+0x9c>
    4ecc:	82 e0       	ldi	r24, 0x02	; 2
    4ece:	df 91       	pop	r29
    4ed0:	cf 91       	pop	r28
    4ed2:	1f 91       	pop	r17
    4ed4:	0f 91       	pop	r16
    4ed6:	ff 90       	pop	r15
    4ed8:	ef 90       	pop	r14
    4eda:	08 95       	ret

00004edc <serial_getByte>:
    4edc:	00 97       	sbiw	r24, 0x00	; 0
    4ede:	d1 f0       	breq	.+52     	; 0x4f14 <serial_getByte+0x38>
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	14 96       	adiw	r26, 0x04	; 4
    4ee4:	ed 91       	ld	r30, X+
    4ee6:	fc 91       	ld	r31, X
    4ee8:	15 97       	sbiw	r26, 0x05	; 5
    4eea:	93 81       	ldd	r25, Z+3	; 0x03
    4eec:	82 81       	ldd	r24, Z+2	; 0x02
    4eee:	98 17       	cp	r25, r24
    4ef0:	99 f0       	breq	.+38     	; 0x4f18 <serial_getByte+0x3c>
    4ef2:	92 81       	ldd	r25, Z+2	; 0x02
    4ef4:	85 81       	ldd	r24, Z+5	; 0x05
    4ef6:	86 95       	lsr	r24
    4ef8:	89 23       	and	r24, r25
    4efa:	a0 81       	ld	r26, Z
    4efc:	b1 81       	ldd	r27, Z+1	; 0x01
    4efe:	a8 0f       	add	r26, r24
    4f00:	b1 1d       	adc	r27, r1
    4f02:	8c 91       	ld	r24, X
    4f04:	db 01       	movw	r26, r22
    4f06:	8c 93       	st	X, r24
    4f08:	9f 5f       	subi	r25, 0xFF	; 255
    4f0a:	85 81       	ldd	r24, Z+5	; 0x05
    4f0c:	98 23       	and	r25, r24
    4f0e:	92 83       	std	Z+2, r25	; 0x02
    4f10:	80 e0       	ldi	r24, 0x00	; 0
    4f12:	08 95       	ret
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	08 95       	ret
    4f18:	83 e0       	ldi	r24, 0x03	; 3
    4f1a:	08 95       	ret

00004f1c <__vector_25>:
    4f1c:	1f 92       	push	r1
    4f1e:	0f 92       	push	r0
    4f20:	0f b6       	in	r0, 0x3f	; 63
    4f22:	0f 92       	push	r0
    4f24:	11 24       	eor	r1, r1
    4f26:	0b b6       	in	r0, 0x3b	; 59
    4f28:	0f 92       	push	r0
    4f2a:	2f 93       	push	r18
    4f2c:	3f 93       	push	r19
    4f2e:	4f 93       	push	r20
    4f30:	5f 93       	push	r21
    4f32:	6f 93       	push	r22
    4f34:	7f 93       	push	r23
    4f36:	8f 93       	push	r24
    4f38:	9f 93       	push	r25
    4f3a:	af 93       	push	r26
    4f3c:	bf 93       	push	r27
    4f3e:	cf 93       	push	r28
    4f40:	df 93       	push	r29
    4f42:	ef 93       	push	r30
    4f44:	ff 93       	push	r31
    4f46:	a0 91 66 18 	lds	r26, 0x1866	; 0x801866 <_ser_handle>
    4f4a:	b0 91 67 18 	lds	r27, 0x1867	; 0x801867 <_ser_handle+0x1>
    4f4e:	10 97       	sbiw	r26, 0x00	; 0
    4f50:	11 f1       	breq	.+68     	; 0x4f96 <__vector_25+0x7a>
    4f52:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4f56:	14 96       	adiw	r26, 0x04	; 4
    4f58:	ed 91       	ld	r30, X+
    4f5a:	fc 91       	ld	r31, X
    4f5c:	15 97       	sbiw	r26, 0x05	; 5
    4f5e:	93 81       	ldd	r25, Z+3	; 0x03
    4f60:	82 81       	ldd	r24, Z+2	; 0x02
    4f62:	25 81       	ldd	r18, Z+5	; 0x05
    4f64:	98 1b       	sub	r25, r24
    4f66:	92 23       	and	r25, r18
    4f68:	84 81       	ldd	r24, Z+4	; 0x04
    4f6a:	98 17       	cp	r25, r24
    4f6c:	61 f0       	breq	.+24     	; 0x4f86 <__vector_25+0x6a>
    4f6e:	83 81       	ldd	r24, Z+3	; 0x03
    4f70:	26 95       	lsr	r18
    4f72:	28 23       	and	r18, r24
    4f74:	c0 81       	ld	r28, Z
    4f76:	d1 81       	ldd	r29, Z+1	; 0x01
    4f78:	c2 0f       	add	r28, r18
    4f7a:	d1 1d       	adc	r29, r1
    4f7c:	68 83       	st	Y, r22
    4f7e:	8f 5f       	subi	r24, 0xFF	; 255
    4f80:	95 81       	ldd	r25, Z+5	; 0x05
    4f82:	89 23       	and	r24, r25
    4f84:	83 83       	std	Z+3, r24	; 0x03
    4f86:	16 96       	adiw	r26, 0x06	; 6
    4f88:	ed 91       	ld	r30, X+
    4f8a:	fc 91       	ld	r31, X
    4f8c:	17 97       	sbiw	r26, 0x07	; 7
    4f8e:	30 97       	sbiw	r30, 0x00	; 0
    4f90:	11 f0       	breq	.+4      	; 0x4f96 <__vector_25+0x7a>
    4f92:	cd 01       	movw	r24, r26
    4f94:	19 95       	eicall
    4f96:	ff 91       	pop	r31
    4f98:	ef 91       	pop	r30
    4f9a:	df 91       	pop	r29
    4f9c:	cf 91       	pop	r28
    4f9e:	bf 91       	pop	r27
    4fa0:	af 91       	pop	r26
    4fa2:	9f 91       	pop	r25
    4fa4:	8f 91       	pop	r24
    4fa6:	7f 91       	pop	r23
    4fa8:	6f 91       	pop	r22
    4faa:	5f 91       	pop	r21
    4fac:	4f 91       	pop	r20
    4fae:	3f 91       	pop	r19
    4fb0:	2f 91       	pop	r18
    4fb2:	0f 90       	pop	r0
    4fb4:	0b be       	out	0x3b, r0	; 59
    4fb6:	0f 90       	pop	r0
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	0f 90       	pop	r0
    4fbc:	1f 90       	pop	r1
    4fbe:	18 95       	reti

00004fc0 <__vector_26>:
    4fc0:	1f 92       	push	r1
    4fc2:	0f 92       	push	r0
    4fc4:	0f b6       	in	r0, 0x3f	; 63
    4fc6:	0f 92       	push	r0
    4fc8:	11 24       	eor	r1, r1
    4fca:	0b b6       	in	r0, 0x3b	; 59
    4fcc:	0f 92       	push	r0
    4fce:	2f 93       	push	r18
    4fd0:	8f 93       	push	r24
    4fd2:	9f 93       	push	r25
    4fd4:	af 93       	push	r26
    4fd6:	bf 93       	push	r27
    4fd8:	ef 93       	push	r30
    4fda:	ff 93       	push	r31
    4fdc:	e0 91 66 18 	lds	r30, 0x1866	; 0x801866 <_ser_handle>
    4fe0:	f0 91 67 18 	lds	r31, 0x1867	; 0x801867 <_ser_handle+0x1>
    4fe4:	30 97       	sbiw	r30, 0x00	; 0
    4fe6:	b9 f0       	breq	.+46     	; 0x5016 <__vector_26+0x56>
    4fe8:	02 80       	ldd	r0, Z+2	; 0x02
    4fea:	f3 81       	ldd	r31, Z+3	; 0x03
    4fec:	e0 2d       	mov	r30, r0
    4fee:	93 81       	ldd	r25, Z+3	; 0x03
    4ff0:	82 81       	ldd	r24, Z+2	; 0x02
    4ff2:	98 17       	cp	r25, r24
    4ff4:	b1 f0       	breq	.+44     	; 0x5022 <__vector_26+0x62>
    4ff6:	92 81       	ldd	r25, Z+2	; 0x02
    4ff8:	85 81       	ldd	r24, Z+5	; 0x05
    4ffa:	28 2f       	mov	r18, r24
    4ffc:	26 95       	lsr	r18
    4ffe:	29 23       	and	r18, r25
    5000:	a0 81       	ld	r26, Z
    5002:	b1 81       	ldd	r27, Z+1	; 0x01
    5004:	a2 0f       	add	r26, r18
    5006:	b1 1d       	adc	r27, r1
    5008:	2c 91       	ld	r18, X
    500a:	9f 5f       	subi	r25, 0xFF	; 255
    500c:	89 23       	and	r24, r25
    500e:	82 83       	std	Z+2, r24	; 0x02
    5010:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5014:	0b c0       	rjmp	.+22     	; 0x502c <__vector_26+0x6c>
    5016:	e1 ec       	ldi	r30, 0xC1	; 193
    5018:	f0 e0       	ldi	r31, 0x00	; 0
    501a:	80 81       	ld	r24, Z
    501c:	8f 7d       	andi	r24, 0xDF	; 223
    501e:	80 83       	st	Z, r24
    5020:	05 c0       	rjmp	.+10     	; 0x502c <__vector_26+0x6c>
    5022:	e1 ec       	ldi	r30, 0xC1	; 193
    5024:	f0 e0       	ldi	r31, 0x00	; 0
    5026:	80 81       	ld	r24, Z
    5028:	8f 7d       	andi	r24, 0xDF	; 223
    502a:	80 83       	st	Z, r24
    502c:	ff 91       	pop	r31
    502e:	ef 91       	pop	r30
    5030:	bf 91       	pop	r27
    5032:	af 91       	pop	r26
    5034:	9f 91       	pop	r25
    5036:	8f 91       	pop	r24
    5038:	2f 91       	pop	r18
    503a:	0f 90       	pop	r0
    503c:	0b be       	out	0x3b, r0	; 59
    503e:	0f 90       	pop	r0
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	0f 90       	pop	r0
    5044:	1f 90       	pop	r1
    5046:	18 95       	reti

00005048 <__vector_36>:
    5048:	1f 92       	push	r1
    504a:	0f 92       	push	r0
    504c:	0f b6       	in	r0, 0x3f	; 63
    504e:	0f 92       	push	r0
    5050:	11 24       	eor	r1, r1
    5052:	0b b6       	in	r0, 0x3b	; 59
    5054:	0f 92       	push	r0
    5056:	2f 93       	push	r18
    5058:	3f 93       	push	r19
    505a:	4f 93       	push	r20
    505c:	5f 93       	push	r21
    505e:	6f 93       	push	r22
    5060:	7f 93       	push	r23
    5062:	8f 93       	push	r24
    5064:	9f 93       	push	r25
    5066:	af 93       	push	r26
    5068:	bf 93       	push	r27
    506a:	cf 93       	push	r28
    506c:	df 93       	push	r29
    506e:	ef 93       	push	r30
    5070:	ff 93       	push	r31
    5072:	a0 91 68 18 	lds	r26, 0x1868	; 0x801868 <_ser_handle+0x2>
    5076:	b0 91 69 18 	lds	r27, 0x1869	; 0x801869 <_ser_handle+0x3>
    507a:	10 97       	sbiw	r26, 0x00	; 0
    507c:	11 f1       	breq	.+68     	; 0x50c2 <__vector_36+0x7a>
    507e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5082:	14 96       	adiw	r26, 0x04	; 4
    5084:	ed 91       	ld	r30, X+
    5086:	fc 91       	ld	r31, X
    5088:	15 97       	sbiw	r26, 0x05	; 5
    508a:	93 81       	ldd	r25, Z+3	; 0x03
    508c:	82 81       	ldd	r24, Z+2	; 0x02
    508e:	25 81       	ldd	r18, Z+5	; 0x05
    5090:	98 1b       	sub	r25, r24
    5092:	92 23       	and	r25, r18
    5094:	84 81       	ldd	r24, Z+4	; 0x04
    5096:	98 17       	cp	r25, r24
    5098:	61 f0       	breq	.+24     	; 0x50b2 <__vector_36+0x6a>
    509a:	83 81       	ldd	r24, Z+3	; 0x03
    509c:	26 95       	lsr	r18
    509e:	28 23       	and	r18, r24
    50a0:	c0 81       	ld	r28, Z
    50a2:	d1 81       	ldd	r29, Z+1	; 0x01
    50a4:	c2 0f       	add	r28, r18
    50a6:	d1 1d       	adc	r29, r1
    50a8:	68 83       	st	Y, r22
    50aa:	8f 5f       	subi	r24, 0xFF	; 255
    50ac:	95 81       	ldd	r25, Z+5	; 0x05
    50ae:	89 23       	and	r24, r25
    50b0:	83 83       	std	Z+3, r24	; 0x03
    50b2:	16 96       	adiw	r26, 0x06	; 6
    50b4:	ed 91       	ld	r30, X+
    50b6:	fc 91       	ld	r31, X
    50b8:	17 97       	sbiw	r26, 0x07	; 7
    50ba:	30 97       	sbiw	r30, 0x00	; 0
    50bc:	11 f0       	breq	.+4      	; 0x50c2 <__vector_36+0x7a>
    50be:	cd 01       	movw	r24, r26
    50c0:	19 95       	eicall
    50c2:	ff 91       	pop	r31
    50c4:	ef 91       	pop	r30
    50c6:	df 91       	pop	r29
    50c8:	cf 91       	pop	r28
    50ca:	bf 91       	pop	r27
    50cc:	af 91       	pop	r26
    50ce:	9f 91       	pop	r25
    50d0:	8f 91       	pop	r24
    50d2:	7f 91       	pop	r23
    50d4:	6f 91       	pop	r22
    50d6:	5f 91       	pop	r21
    50d8:	4f 91       	pop	r20
    50da:	3f 91       	pop	r19
    50dc:	2f 91       	pop	r18
    50de:	0f 90       	pop	r0
    50e0:	0b be       	out	0x3b, r0	; 59
    50e2:	0f 90       	pop	r0
    50e4:	0f be       	out	0x3f, r0	; 63
    50e6:	0f 90       	pop	r0
    50e8:	1f 90       	pop	r1
    50ea:	18 95       	reti

000050ec <__vector_37>:
    50ec:	1f 92       	push	r1
    50ee:	0f 92       	push	r0
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	0f 92       	push	r0
    50f4:	11 24       	eor	r1, r1
    50f6:	0b b6       	in	r0, 0x3b	; 59
    50f8:	0f 92       	push	r0
    50fa:	2f 93       	push	r18
    50fc:	8f 93       	push	r24
    50fe:	9f 93       	push	r25
    5100:	af 93       	push	r26
    5102:	bf 93       	push	r27
    5104:	ef 93       	push	r30
    5106:	ff 93       	push	r31
    5108:	e0 91 68 18 	lds	r30, 0x1868	; 0x801868 <_ser_handle+0x2>
    510c:	f0 91 69 18 	lds	r31, 0x1869	; 0x801869 <_ser_handle+0x3>
    5110:	30 97       	sbiw	r30, 0x00	; 0
    5112:	b9 f0       	breq	.+46     	; 0x5142 <__vector_37+0x56>
    5114:	02 80       	ldd	r0, Z+2	; 0x02
    5116:	f3 81       	ldd	r31, Z+3	; 0x03
    5118:	e0 2d       	mov	r30, r0
    511a:	93 81       	ldd	r25, Z+3	; 0x03
    511c:	82 81       	ldd	r24, Z+2	; 0x02
    511e:	98 17       	cp	r25, r24
    5120:	b1 f0       	breq	.+44     	; 0x514e <__vector_37+0x62>
    5122:	92 81       	ldd	r25, Z+2	; 0x02
    5124:	85 81       	ldd	r24, Z+5	; 0x05
    5126:	28 2f       	mov	r18, r24
    5128:	26 95       	lsr	r18
    512a:	29 23       	and	r18, r25
    512c:	a0 81       	ld	r26, Z
    512e:	b1 81       	ldd	r27, Z+1	; 0x01
    5130:	a2 0f       	add	r26, r18
    5132:	b1 1d       	adc	r27, r1
    5134:	2c 91       	ld	r18, X
    5136:	9f 5f       	subi	r25, 0xFF	; 255
    5138:	89 23       	and	r24, r25
    513a:	82 83       	std	Z+2, r24	; 0x02
    513c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5140:	0b c0       	rjmp	.+22     	; 0x5158 <__vector_37+0x6c>
    5142:	e9 ec       	ldi	r30, 0xC9	; 201
    5144:	f0 e0       	ldi	r31, 0x00	; 0
    5146:	80 81       	ld	r24, Z
    5148:	8f 7d       	andi	r24, 0xDF	; 223
    514a:	80 83       	st	Z, r24
    514c:	05 c0       	rjmp	.+10     	; 0x5158 <__vector_37+0x6c>
    514e:	e9 ec       	ldi	r30, 0xC9	; 201
    5150:	f0 e0       	ldi	r31, 0x00	; 0
    5152:	80 81       	ld	r24, Z
    5154:	8f 7d       	andi	r24, 0xDF	; 223
    5156:	80 83       	st	Z, r24
    5158:	ff 91       	pop	r31
    515a:	ef 91       	pop	r30
    515c:	bf 91       	pop	r27
    515e:	af 91       	pop	r26
    5160:	9f 91       	pop	r25
    5162:	8f 91       	pop	r24
    5164:	2f 91       	pop	r18
    5166:	0f 90       	pop	r0
    5168:	0b be       	out	0x3b, r0	; 59
    516a:	0f 90       	pop	r0
    516c:	0f be       	out	0x3f, r0	; 63
    516e:	0f 90       	pop	r0
    5170:	1f 90       	pop	r1
    5172:	18 95       	reti

00005174 <__vector_51>:
    5174:	1f 92       	push	r1
    5176:	0f 92       	push	r0
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	0f 92       	push	r0
    517c:	11 24       	eor	r1, r1
    517e:	0b b6       	in	r0, 0x3b	; 59
    5180:	0f 92       	push	r0
    5182:	2f 93       	push	r18
    5184:	3f 93       	push	r19
    5186:	4f 93       	push	r20
    5188:	5f 93       	push	r21
    518a:	6f 93       	push	r22
    518c:	7f 93       	push	r23
    518e:	8f 93       	push	r24
    5190:	9f 93       	push	r25
    5192:	af 93       	push	r26
    5194:	bf 93       	push	r27
    5196:	cf 93       	push	r28
    5198:	df 93       	push	r29
    519a:	ef 93       	push	r30
    519c:	ff 93       	push	r31
    519e:	a0 91 6a 18 	lds	r26, 0x186A	; 0x80186a <_ser_handle+0x4>
    51a2:	b0 91 6b 18 	lds	r27, 0x186B	; 0x80186b <_ser_handle+0x5>
    51a6:	10 97       	sbiw	r26, 0x00	; 0
    51a8:	11 f1       	breq	.+68     	; 0x51ee <__vector_51+0x7a>
    51aa:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    51ae:	14 96       	adiw	r26, 0x04	; 4
    51b0:	ed 91       	ld	r30, X+
    51b2:	fc 91       	ld	r31, X
    51b4:	15 97       	sbiw	r26, 0x05	; 5
    51b6:	93 81       	ldd	r25, Z+3	; 0x03
    51b8:	82 81       	ldd	r24, Z+2	; 0x02
    51ba:	25 81       	ldd	r18, Z+5	; 0x05
    51bc:	98 1b       	sub	r25, r24
    51be:	92 23       	and	r25, r18
    51c0:	84 81       	ldd	r24, Z+4	; 0x04
    51c2:	98 17       	cp	r25, r24
    51c4:	61 f0       	breq	.+24     	; 0x51de <__vector_51+0x6a>
    51c6:	83 81       	ldd	r24, Z+3	; 0x03
    51c8:	26 95       	lsr	r18
    51ca:	28 23       	and	r18, r24
    51cc:	c0 81       	ld	r28, Z
    51ce:	d1 81       	ldd	r29, Z+1	; 0x01
    51d0:	c2 0f       	add	r28, r18
    51d2:	d1 1d       	adc	r29, r1
    51d4:	68 83       	st	Y, r22
    51d6:	8f 5f       	subi	r24, 0xFF	; 255
    51d8:	95 81       	ldd	r25, Z+5	; 0x05
    51da:	89 23       	and	r24, r25
    51dc:	83 83       	std	Z+3, r24	; 0x03
    51de:	16 96       	adiw	r26, 0x06	; 6
    51e0:	ed 91       	ld	r30, X+
    51e2:	fc 91       	ld	r31, X
    51e4:	17 97       	sbiw	r26, 0x07	; 7
    51e6:	30 97       	sbiw	r30, 0x00	; 0
    51e8:	11 f0       	breq	.+4      	; 0x51ee <__vector_51+0x7a>
    51ea:	cd 01       	movw	r24, r26
    51ec:	19 95       	eicall
    51ee:	ff 91       	pop	r31
    51f0:	ef 91       	pop	r30
    51f2:	df 91       	pop	r29
    51f4:	cf 91       	pop	r28
    51f6:	bf 91       	pop	r27
    51f8:	af 91       	pop	r26
    51fa:	9f 91       	pop	r25
    51fc:	8f 91       	pop	r24
    51fe:	7f 91       	pop	r23
    5200:	6f 91       	pop	r22
    5202:	5f 91       	pop	r21
    5204:	4f 91       	pop	r20
    5206:	3f 91       	pop	r19
    5208:	2f 91       	pop	r18
    520a:	0f 90       	pop	r0
    520c:	0b be       	out	0x3b, r0	; 59
    520e:	0f 90       	pop	r0
    5210:	0f be       	out	0x3f, r0	; 63
    5212:	0f 90       	pop	r0
    5214:	1f 90       	pop	r1
    5216:	18 95       	reti

00005218 <__vector_52>:
    5218:	1f 92       	push	r1
    521a:	0f 92       	push	r0
    521c:	0f b6       	in	r0, 0x3f	; 63
    521e:	0f 92       	push	r0
    5220:	11 24       	eor	r1, r1
    5222:	0b b6       	in	r0, 0x3b	; 59
    5224:	0f 92       	push	r0
    5226:	2f 93       	push	r18
    5228:	8f 93       	push	r24
    522a:	9f 93       	push	r25
    522c:	af 93       	push	r26
    522e:	bf 93       	push	r27
    5230:	ef 93       	push	r30
    5232:	ff 93       	push	r31
    5234:	e0 91 6a 18 	lds	r30, 0x186A	; 0x80186a <_ser_handle+0x4>
    5238:	f0 91 6b 18 	lds	r31, 0x186B	; 0x80186b <_ser_handle+0x5>
    523c:	30 97       	sbiw	r30, 0x00	; 0
    523e:	b9 f0       	breq	.+46     	; 0x526e <__vector_52+0x56>
    5240:	02 80       	ldd	r0, Z+2	; 0x02
    5242:	f3 81       	ldd	r31, Z+3	; 0x03
    5244:	e0 2d       	mov	r30, r0
    5246:	93 81       	ldd	r25, Z+3	; 0x03
    5248:	82 81       	ldd	r24, Z+2	; 0x02
    524a:	98 17       	cp	r25, r24
    524c:	b1 f0       	breq	.+44     	; 0x527a <__vector_52+0x62>
    524e:	92 81       	ldd	r25, Z+2	; 0x02
    5250:	85 81       	ldd	r24, Z+5	; 0x05
    5252:	28 2f       	mov	r18, r24
    5254:	26 95       	lsr	r18
    5256:	29 23       	and	r18, r25
    5258:	a0 81       	ld	r26, Z
    525a:	b1 81       	ldd	r27, Z+1	; 0x01
    525c:	a2 0f       	add	r26, r18
    525e:	b1 1d       	adc	r27, r1
    5260:	2c 91       	ld	r18, X
    5262:	9f 5f       	subi	r25, 0xFF	; 255
    5264:	89 23       	and	r24, r25
    5266:	82 83       	std	Z+2, r24	; 0x02
    5268:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    526c:	0b c0       	rjmp	.+22     	; 0x5284 <__vector_52+0x6c>
    526e:	e1 ed       	ldi	r30, 0xD1	; 209
    5270:	f0 e0       	ldi	r31, 0x00	; 0
    5272:	80 81       	ld	r24, Z
    5274:	8f 7d       	andi	r24, 0xDF	; 223
    5276:	80 83       	st	Z, r24
    5278:	05 c0       	rjmp	.+10     	; 0x5284 <__vector_52+0x6c>
    527a:	e1 ed       	ldi	r30, 0xD1	; 209
    527c:	f0 e0       	ldi	r31, 0x00	; 0
    527e:	80 81       	ld	r24, Z
    5280:	8f 7d       	andi	r24, 0xDF	; 223
    5282:	80 83       	st	Z, r24
    5284:	ff 91       	pop	r31
    5286:	ef 91       	pop	r30
    5288:	bf 91       	pop	r27
    528a:	af 91       	pop	r26
    528c:	9f 91       	pop	r25
    528e:	8f 91       	pop	r24
    5290:	2f 91       	pop	r18
    5292:	0f 90       	pop	r0
    5294:	0b be       	out	0x3b, r0	; 59
    5296:	0f 90       	pop	r0
    5298:	0f be       	out	0x3f, r0	; 63
    529a:	0f 90       	pop	r0
    529c:	1f 90       	pop	r1
    529e:	18 95       	reti

000052a0 <__vector_54>:
    52a0:	1f 92       	push	r1
    52a2:	0f 92       	push	r0
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	0f 92       	push	r0
    52a8:	11 24       	eor	r1, r1
    52aa:	0b b6       	in	r0, 0x3b	; 59
    52ac:	0f 92       	push	r0
    52ae:	2f 93       	push	r18
    52b0:	3f 93       	push	r19
    52b2:	4f 93       	push	r20
    52b4:	5f 93       	push	r21
    52b6:	6f 93       	push	r22
    52b8:	7f 93       	push	r23
    52ba:	8f 93       	push	r24
    52bc:	9f 93       	push	r25
    52be:	af 93       	push	r26
    52c0:	bf 93       	push	r27
    52c2:	cf 93       	push	r28
    52c4:	df 93       	push	r29
    52c6:	ef 93       	push	r30
    52c8:	ff 93       	push	r31
    52ca:	a0 91 6c 18 	lds	r26, 0x186C	; 0x80186c <_ser_handle+0x6>
    52ce:	b0 91 6d 18 	lds	r27, 0x186D	; 0x80186d <_ser_handle+0x7>
    52d2:	10 97       	sbiw	r26, 0x00	; 0
    52d4:	11 f1       	breq	.+68     	; 0x531a <__vector_54+0x7a>
    52d6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    52da:	14 96       	adiw	r26, 0x04	; 4
    52dc:	ed 91       	ld	r30, X+
    52de:	fc 91       	ld	r31, X
    52e0:	15 97       	sbiw	r26, 0x05	; 5
    52e2:	93 81       	ldd	r25, Z+3	; 0x03
    52e4:	82 81       	ldd	r24, Z+2	; 0x02
    52e6:	25 81       	ldd	r18, Z+5	; 0x05
    52e8:	98 1b       	sub	r25, r24
    52ea:	92 23       	and	r25, r18
    52ec:	84 81       	ldd	r24, Z+4	; 0x04
    52ee:	98 17       	cp	r25, r24
    52f0:	61 f0       	breq	.+24     	; 0x530a <__vector_54+0x6a>
    52f2:	83 81       	ldd	r24, Z+3	; 0x03
    52f4:	26 95       	lsr	r18
    52f6:	28 23       	and	r18, r24
    52f8:	c0 81       	ld	r28, Z
    52fa:	d1 81       	ldd	r29, Z+1	; 0x01
    52fc:	c2 0f       	add	r28, r18
    52fe:	d1 1d       	adc	r29, r1
    5300:	68 83       	st	Y, r22
    5302:	8f 5f       	subi	r24, 0xFF	; 255
    5304:	95 81       	ldd	r25, Z+5	; 0x05
    5306:	89 23       	and	r24, r25
    5308:	83 83       	std	Z+3, r24	; 0x03
    530a:	16 96       	adiw	r26, 0x06	; 6
    530c:	ed 91       	ld	r30, X+
    530e:	fc 91       	ld	r31, X
    5310:	17 97       	sbiw	r26, 0x07	; 7
    5312:	30 97       	sbiw	r30, 0x00	; 0
    5314:	11 f0       	breq	.+4      	; 0x531a <__vector_54+0x7a>
    5316:	cd 01       	movw	r24, r26
    5318:	19 95       	eicall
    531a:	ff 91       	pop	r31
    531c:	ef 91       	pop	r30
    531e:	df 91       	pop	r29
    5320:	cf 91       	pop	r28
    5322:	bf 91       	pop	r27
    5324:	af 91       	pop	r26
    5326:	9f 91       	pop	r25
    5328:	8f 91       	pop	r24
    532a:	7f 91       	pop	r23
    532c:	6f 91       	pop	r22
    532e:	5f 91       	pop	r21
    5330:	4f 91       	pop	r20
    5332:	3f 91       	pop	r19
    5334:	2f 91       	pop	r18
    5336:	0f 90       	pop	r0
    5338:	0b be       	out	0x3b, r0	; 59
    533a:	0f 90       	pop	r0
    533c:	0f be       	out	0x3f, r0	; 63
    533e:	0f 90       	pop	r0
    5340:	1f 90       	pop	r1
    5342:	18 95       	reti

00005344 <__vector_55>:
    5344:	1f 92       	push	r1
    5346:	0f 92       	push	r0
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	0f 92       	push	r0
    534c:	11 24       	eor	r1, r1
    534e:	0b b6       	in	r0, 0x3b	; 59
    5350:	0f 92       	push	r0
    5352:	2f 93       	push	r18
    5354:	8f 93       	push	r24
    5356:	9f 93       	push	r25
    5358:	af 93       	push	r26
    535a:	bf 93       	push	r27
    535c:	ef 93       	push	r30
    535e:	ff 93       	push	r31
    5360:	e0 91 6c 18 	lds	r30, 0x186C	; 0x80186c <_ser_handle+0x6>
    5364:	f0 91 6d 18 	lds	r31, 0x186D	; 0x80186d <_ser_handle+0x7>
    5368:	30 97       	sbiw	r30, 0x00	; 0
    536a:	b9 f0       	breq	.+46     	; 0x539a <__vector_55+0x56>
    536c:	02 80       	ldd	r0, Z+2	; 0x02
    536e:	f3 81       	ldd	r31, Z+3	; 0x03
    5370:	e0 2d       	mov	r30, r0
    5372:	93 81       	ldd	r25, Z+3	; 0x03
    5374:	82 81       	ldd	r24, Z+2	; 0x02
    5376:	98 17       	cp	r25, r24
    5378:	b1 f0       	breq	.+44     	; 0x53a6 <__vector_55+0x62>
    537a:	92 81       	ldd	r25, Z+2	; 0x02
    537c:	85 81       	ldd	r24, Z+5	; 0x05
    537e:	28 2f       	mov	r18, r24
    5380:	26 95       	lsr	r18
    5382:	29 23       	and	r18, r25
    5384:	a0 81       	ld	r26, Z
    5386:	b1 81       	ldd	r27, Z+1	; 0x01
    5388:	a2 0f       	add	r26, r18
    538a:	b1 1d       	adc	r27, r1
    538c:	2c 91       	ld	r18, X
    538e:	9f 5f       	subi	r25, 0xFF	; 255
    5390:	89 23       	and	r24, r25
    5392:	82 83       	std	Z+2, r24	; 0x02
    5394:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5398:	0b c0       	rjmp	.+22     	; 0x53b0 <__vector_55+0x6c>
    539a:	e1 e3       	ldi	r30, 0x31	; 49
    539c:	f1 e0       	ldi	r31, 0x01	; 1
    539e:	80 81       	ld	r24, Z
    53a0:	8f 7d       	andi	r24, 0xDF	; 223
    53a2:	80 83       	st	Z, r24
    53a4:	05 c0       	rjmp	.+10     	; 0x53b0 <__vector_55+0x6c>
    53a6:	e1 e3       	ldi	r30, 0x31	; 49
    53a8:	f1 e0       	ldi	r31, 0x01	; 1
    53aa:	80 81       	ld	r24, Z
    53ac:	8f 7d       	andi	r24, 0xDF	; 223
    53ae:	80 83       	st	Z, r24
    53b0:	ff 91       	pop	r31
    53b2:	ef 91       	pop	r30
    53b4:	bf 91       	pop	r27
    53b6:	af 91       	pop	r26
    53b8:	9f 91       	pop	r25
    53ba:	8f 91       	pop	r24
    53bc:	2f 91       	pop	r18
    53be:	0f 90       	pop	r0
    53c0:	0b be       	out	0x3b, r0	; 59
    53c2:	0f 90       	pop	r0
    53c4:	0f be       	out	0x3f, r0	; 63
    53c6:	0f 90       	pop	r0
    53c8:	1f 90       	pop	r1
    53ca:	18 95       	reti

000053cc <usart_getchar>:
    53cc:	cf 93       	push	r28
    53ce:	df 93       	push	r29
    53d0:	1f 92       	push	r1
    53d2:	cd b7       	in	r28, 0x3d	; 61
    53d4:	de b7       	in	r29, 0x3e	; 62
    53d6:	be 01       	movw	r22, r28
    53d8:	6f 5f       	subi	r22, 0xFF	; 255
    53da:	7f 4f       	sbci	r23, 0xFF	; 255
    53dc:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <_com_serial_instance>
    53e0:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <_com_serial_instance+0x1>
    53e4:	7b dd       	rcall	.-1290   	; 0x4edc <serial_getByte>
    53e6:	81 11       	cpse	r24, r1
    53e8:	f6 cf       	rjmp	.-20     	; 0x53d6 <usart_getchar+0xa>
    53ea:	89 81       	ldd	r24, Y+1	; 0x01
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	0f 90       	pop	r0
    53f0:	df 91       	pop	r29
    53f2:	cf 91       	pop	r28
    53f4:	08 95       	ret

000053f6 <usart_putchar>:
    53f6:	68 2f       	mov	r22, r24
    53f8:	80 91 6e 18 	lds	r24, 0x186E	; 0x80186e <_com_serial_instance>
    53fc:	90 91 6f 18 	lds	r25, 0x186F	; 0x80186f <_com_serial_instance+0x1>
    5400:	ed dc       	rcall	.-1574   	; 0x4ddc <serial_sendByte>
    5402:	80 e0       	ldi	r24, 0x00	; 0
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	08 95       	ret

00005408 <stdio_initialise>:
    5408:	8f 92       	push	r8
    540a:	9f 92       	push	r9
    540c:	af 92       	push	r10
    540e:	cf 92       	push	r12
    5410:	ef 92       	push	r14
    5412:	0f 93       	push	r16
    5414:	81 2c       	mov	r8, r1
    5416:	91 2c       	mov	r9, r1
    5418:	68 94       	set
    541a:	aa 24       	eor	r10, r10
    541c:	a7 f8       	bld	r10, 7
    541e:	68 94       	set
    5420:	cc 24       	eor	r12, r12
    5422:	c7 f8       	bld	r12, 7
    5424:	e1 2c       	mov	r14, r1
    5426:	00 e0       	ldi	r16, 0x00	; 0
    5428:	23 e0       	ldi	r18, 0x03	; 3
    542a:	40 e0       	ldi	r20, 0x00	; 0
    542c:	51 ee       	ldi	r21, 0xE1	; 225
    542e:	60 e0       	ldi	r22, 0x00	; 0
    5430:	70 e0       	ldi	r23, 0x00	; 0
    5432:	33 dc       	rcall	.-1946   	; 0x4c9a <serial_create>
    5434:	90 93 6f 18 	sts	0x186F, r25	; 0x80186f <_com_serial_instance+0x1>
    5438:	80 93 6e 18 	sts	0x186E, r24	; 0x80186e <_com_serial_instance>
    543c:	e9 ec       	ldi	r30, 0xC9	; 201
    543e:	f8 e1       	ldi	r31, 0x18	; 24
    5440:	83 e1       	ldi	r24, 0x13	; 19
    5442:	92 e0       	ldi	r25, 0x02	; 2
    5444:	91 83       	std	Z+1, r25	; 0x01
    5446:	80 83       	st	Z, r24
    5448:	93 83       	std	Z+3, r25	; 0x03
    544a:	82 83       	std	Z+2, r24	; 0x02
    544c:	0f 91       	pop	r16
    544e:	ef 90       	pop	r14
    5450:	cf 90       	pop	r12
    5452:	af 90       	pop	r10
    5454:	9f 90       	pop	r9
    5456:	8f 90       	pop	r8
    5458:	08 95       	ret

0000545a <_turn_off>:
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	fc 01       	movw	r30, r24
    545e:	ee 0f       	add	r30, r30
    5460:	ff 1f       	adc	r31, r31
    5462:	e8 0f       	add	r30, r24
    5464:	f9 1f       	adc	r31, r25
    5466:	ee 0f       	add	r30, r30
    5468:	ff 1f       	adc	r31, r31
    546a:	e0 59       	subi	r30, 0x90	; 144
    546c:	f7 4e       	sbci	r31, 0xE7	; 231
    546e:	23 81       	ldd	r18, Z+3	; 0x03
    5470:	21 11       	cpse	r18, r1
    5472:	1f c0       	rjmp	.+62     	; 0x54b2 <_turn_off+0x58>
    5474:	9c 01       	movw	r18, r24
    5476:	22 0f       	add	r18, r18
    5478:	33 1f       	adc	r19, r19
    547a:	f9 01       	movw	r30, r18
    547c:	e8 0f       	add	r30, r24
    547e:	f9 1f       	adc	r31, r25
    5480:	ee 0f       	add	r30, r30
    5482:	ff 1f       	adc	r31, r31
    5484:	e0 59       	subi	r30, 0x90	; 144
    5486:	f7 4e       	sbci	r31, 0xE7	; 231
    5488:	a0 81       	ld	r26, Z
    548a:	b1 81       	ldd	r27, Z+1	; 0x01
    548c:	4c 91       	ld	r20, X
    548e:	f9 01       	movw	r30, r18
    5490:	e8 0f       	add	r30, r24
    5492:	f9 1f       	adc	r31, r25
    5494:	ee 0f       	add	r30, r30
    5496:	ff 1f       	adc	r31, r31
    5498:	e0 59       	subi	r30, 0x90	; 144
    549a:	f7 4e       	sbci	r31, 0xE7	; 231
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	02 80       	ldd	r0, Z+2	; 0x02
    54a2:	02 c0       	rjmp	.+4      	; 0x54a8 <_turn_off+0x4e>
    54a4:	88 0f       	add	r24, r24
    54a6:	99 1f       	adc	r25, r25
    54a8:	0a 94       	dec	r0
    54aa:	e2 f7       	brpl	.-8      	; 0x54a4 <_turn_off+0x4a>
    54ac:	84 2b       	or	r24, r20
    54ae:	8c 93       	st	X, r24
    54b0:	08 95       	ret
    54b2:	fc 01       	movw	r30, r24
    54b4:	ee 0f       	add	r30, r30
    54b6:	ff 1f       	adc	r31, r31
    54b8:	df 01       	movw	r26, r30
    54ba:	a8 0f       	add	r26, r24
    54bc:	b9 1f       	adc	r27, r25
    54be:	aa 0f       	add	r26, r26
    54c0:	bb 1f       	adc	r27, r27
    54c2:	a0 59       	subi	r26, 0x90	; 144
    54c4:	b7 4e       	sbci	r27, 0xE7	; 231
    54c6:	0d 90       	ld	r0, X+
    54c8:	bc 91       	ld	r27, X
    54ca:	a0 2d       	mov	r26, r0
    54cc:	2c 91       	ld	r18, X
    54ce:	e8 0f       	add	r30, r24
    54d0:	f9 1f       	adc	r31, r25
    54d2:	ee 0f       	add	r30, r30
    54d4:	ff 1f       	adc	r31, r31
    54d6:	e0 59       	subi	r30, 0x90	; 144
    54d8:	f7 4e       	sbci	r31, 0xE7	; 231
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	02 80       	ldd	r0, Z+2	; 0x02
    54e0:	02 c0       	rjmp	.+4      	; 0x54e6 <_turn_off+0x8c>
    54e2:	88 0f       	add	r24, r24
    54e4:	99 1f       	adc	r25, r25
    54e6:	0a 94       	dec	r0
    54e8:	e2 f7       	brpl	.-8      	; 0x54e2 <_turn_off+0x88>
    54ea:	80 95       	com	r24
    54ec:	82 23       	and	r24, r18
    54ee:	8c 93       	st	X, r24
    54f0:	08 95       	ret

000054f2 <_turn_on>:
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	fc 01       	movw	r30, r24
    54f6:	ee 0f       	add	r30, r30
    54f8:	ff 1f       	adc	r31, r31
    54fa:	e8 0f       	add	r30, r24
    54fc:	f9 1f       	adc	r31, r25
    54fe:	ee 0f       	add	r30, r30
    5500:	ff 1f       	adc	r31, r31
    5502:	e0 59       	subi	r30, 0x90	; 144
    5504:	f7 4e       	sbci	r31, 0xE7	; 231
    5506:	23 81       	ldd	r18, Z+3	; 0x03
    5508:	21 11       	cpse	r18, r1
    550a:	20 c0       	rjmp	.+64     	; 0x554c <_turn_on+0x5a>
    550c:	9c 01       	movw	r18, r24
    550e:	22 0f       	add	r18, r18
    5510:	33 1f       	adc	r19, r19
    5512:	f9 01       	movw	r30, r18
    5514:	e8 0f       	add	r30, r24
    5516:	f9 1f       	adc	r31, r25
    5518:	ee 0f       	add	r30, r30
    551a:	ff 1f       	adc	r31, r31
    551c:	e0 59       	subi	r30, 0x90	; 144
    551e:	f7 4e       	sbci	r31, 0xE7	; 231
    5520:	a0 81       	ld	r26, Z
    5522:	b1 81       	ldd	r27, Z+1	; 0x01
    5524:	4c 91       	ld	r20, X
    5526:	f9 01       	movw	r30, r18
    5528:	e8 0f       	add	r30, r24
    552a:	f9 1f       	adc	r31, r25
    552c:	ee 0f       	add	r30, r30
    552e:	ff 1f       	adc	r31, r31
    5530:	e0 59       	subi	r30, 0x90	; 144
    5532:	f7 4e       	sbci	r31, 0xE7	; 231
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	02 80       	ldd	r0, Z+2	; 0x02
    553a:	02 c0       	rjmp	.+4      	; 0x5540 <_turn_on+0x4e>
    553c:	88 0f       	add	r24, r24
    553e:	99 1f       	adc	r25, r25
    5540:	0a 94       	dec	r0
    5542:	e2 f7       	brpl	.-8      	; 0x553c <_turn_on+0x4a>
    5544:	80 95       	com	r24
    5546:	84 23       	and	r24, r20
    5548:	8c 93       	st	X, r24
    554a:	08 95       	ret
    554c:	fc 01       	movw	r30, r24
    554e:	ee 0f       	add	r30, r30
    5550:	ff 1f       	adc	r31, r31
    5552:	df 01       	movw	r26, r30
    5554:	a8 0f       	add	r26, r24
    5556:	b9 1f       	adc	r27, r25
    5558:	aa 0f       	add	r26, r26
    555a:	bb 1f       	adc	r27, r27
    555c:	a0 59       	subi	r26, 0x90	; 144
    555e:	b7 4e       	sbci	r27, 0xE7	; 231
    5560:	0d 90       	ld	r0, X+
    5562:	bc 91       	ld	r27, X
    5564:	a0 2d       	mov	r26, r0
    5566:	2c 91       	ld	r18, X
    5568:	e8 0f       	add	r30, r24
    556a:	f9 1f       	adc	r31, r25
    556c:	ee 0f       	add	r30, r30
    556e:	ff 1f       	adc	r31, r31
    5570:	e0 59       	subi	r30, 0x90	; 144
    5572:	f7 4e       	sbci	r31, 0xE7	; 231
    5574:	81 e0       	ldi	r24, 0x01	; 1
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	02 80       	ldd	r0, Z+2	; 0x02
    557a:	02 c0       	rjmp	.+4      	; 0x5580 <_turn_on+0x8e>
    557c:	88 0f       	add	r24, r24
    557e:	99 1f       	adc	r25, r25
    5580:	0a 94       	dec	r0
    5582:	e2 f7       	brpl	.-8      	; 0x557c <_turn_on+0x8a>
    5584:	82 2b       	or	r24, r18
    5586:	8c 93       	st	X, r24
    5588:	08 95       	ret

0000558a <status_leds_slowBlink>:
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	fc 01       	movw	r30, r24
    5592:	ee 0f       	add	r30, r30
    5594:	ff 1f       	adc	r31, r31
    5596:	df 01       	movw	r26, r30
    5598:	a8 0f       	add	r26, r24
    559a:	b9 1f       	adc	r27, r25
    559c:	aa 0f       	add	r26, r26
    559e:	bb 1f       	adc	r27, r27
    55a0:	a0 59       	subi	r26, 0x90	; 144
    55a2:	b7 4e       	sbci	r27, 0xE7	; 231
    55a4:	cd 91       	ld	r28, X+
    55a6:	dc 91       	ld	r29, X
    55a8:	11 97       	sbiw	r26, 0x01	; 1
    55aa:	48 81       	ld	r20, Y
    55ac:	21 e0       	ldi	r18, 0x01	; 1
    55ae:	30 e0       	ldi	r19, 0x00	; 0
    55b0:	12 96       	adiw	r26, 0x02	; 2
    55b2:	0c 90       	ld	r0, X
    55b4:	12 97       	sbiw	r26, 0x02	; 2
    55b6:	02 c0       	rjmp	.+4      	; 0x55bc <status_leds_slowBlink+0x32>
    55b8:	22 0f       	add	r18, r18
    55ba:	33 1f       	adc	r19, r19
    55bc:	0a 94       	dec	r0
    55be:	e2 f7       	brpl	.-8      	; 0x55b8 <status_leds_slowBlink+0x2e>
    55c0:	24 27       	eor	r18, r20
    55c2:	28 83       	st	Y, r18
    55c4:	fd 01       	movw	r30, r26
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	84 83       	std	Z+4, r24	; 0x04
    55ca:	df 91       	pop	r29
    55cc:	cf 91       	pop	r28
    55ce:	08 95       	ret

000055d0 <status_leds_fastBlink>:
    55d0:	cf 93       	push	r28
    55d2:	df 93       	push	r29
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	fc 01       	movw	r30, r24
    55d8:	ee 0f       	add	r30, r30
    55da:	ff 1f       	adc	r31, r31
    55dc:	df 01       	movw	r26, r30
    55de:	a8 0f       	add	r26, r24
    55e0:	b9 1f       	adc	r27, r25
    55e2:	aa 0f       	add	r26, r26
    55e4:	bb 1f       	adc	r27, r27
    55e6:	a0 59       	subi	r26, 0x90	; 144
    55e8:	b7 4e       	sbci	r27, 0xE7	; 231
    55ea:	cd 91       	ld	r28, X+
    55ec:	dc 91       	ld	r29, X
    55ee:	11 97       	sbiw	r26, 0x01	; 1
    55f0:	48 81       	ld	r20, Y
    55f2:	21 e0       	ldi	r18, 0x01	; 1
    55f4:	30 e0       	ldi	r19, 0x00	; 0
    55f6:	12 96       	adiw	r26, 0x02	; 2
    55f8:	0c 90       	ld	r0, X
    55fa:	12 97       	sbiw	r26, 0x02	; 2
    55fc:	02 c0       	rjmp	.+4      	; 0x5602 <status_leds_fastBlink+0x32>
    55fe:	22 0f       	add	r18, r18
    5600:	33 1f       	adc	r19, r19
    5602:	0a 94       	dec	r0
    5604:	e2 f7       	brpl	.-8      	; 0x55fe <status_leds_fastBlink+0x2e>
    5606:	24 27       	eor	r18, r20
    5608:	28 83       	st	Y, r18
    560a:	fd 01       	movw	r30, r26
    560c:	82 e0       	ldi	r24, 0x02	; 2
    560e:	84 83       	std	Z+4, r24	; 0x04
    5610:	df 91       	pop	r29
    5612:	cf 91       	pop	r28
    5614:	08 95       	ret

00005616 <status_leds_ledOn>:
    5616:	28 2f       	mov	r18, r24
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	f9 01       	movw	r30, r18
    561c:	ee 0f       	add	r30, r30
    561e:	ff 1f       	adc	r31, r31
    5620:	e2 0f       	add	r30, r18
    5622:	f3 1f       	adc	r31, r19
    5624:	ee 0f       	add	r30, r30
    5626:	ff 1f       	adc	r31, r31
    5628:	e0 59       	subi	r30, 0x90	; 144
    562a:	f7 4e       	sbci	r31, 0xE7	; 231
    562c:	93 e0       	ldi	r25, 0x03	; 3
    562e:	94 83       	std	Z+4, r25	; 0x04
    5630:	60 cf       	rjmp	.-320    	; 0x54f2 <_turn_on>
    5632:	08 95       	ret

00005634 <status_leds_ledOff>:
    5634:	28 2f       	mov	r18, r24
    5636:	30 e0       	ldi	r19, 0x00	; 0
    5638:	f9 01       	movw	r30, r18
    563a:	ee 0f       	add	r30, r30
    563c:	ff 1f       	adc	r31, r31
    563e:	e2 0f       	add	r30, r18
    5640:	f3 1f       	adc	r31, r19
    5642:	ee 0f       	add	r30, r30
    5644:	ff 1f       	adc	r31, r31
    5646:	e0 59       	subi	r30, 0x90	; 144
    5648:	f7 4e       	sbci	r31, 0xE7	; 231
    564a:	94 e0       	ldi	r25, 0x04	; 4
    564c:	94 83       	std	Z+4, r25	; 0x04
    564e:	05 cf       	rjmp	.-502    	; 0x545a <_turn_off>
    5650:	08 95       	ret

00005652 <status_leds_longPuls>:
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	fc 01       	movw	r30, r24
    5656:	ee 0f       	add	r30, r30
    5658:	ff 1f       	adc	r31, r31
    565a:	df 01       	movw	r26, r30
    565c:	a8 0f       	add	r26, r24
    565e:	b9 1f       	adc	r27, r25
    5660:	aa 0f       	add	r26, r26
    5662:	bb 1f       	adc	r27, r27
    5664:	a0 59       	subi	r26, 0x90	; 144
    5666:	b7 4e       	sbci	r27, 0xE7	; 231
    5668:	24 e0       	ldi	r18, 0x04	; 4
    566a:	15 96       	adiw	r26, 0x05	; 5
    566c:	2c 93       	st	X, r18
    566e:	15 97       	sbiw	r26, 0x05	; 5
    5670:	fd 01       	movw	r30, r26
    5672:	14 82       	std	Z+4, r1	; 0x04
    5674:	08 95       	ret

00005676 <status_leds_shortPuls>:
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	fc 01       	movw	r30, r24
    567a:	ee 0f       	add	r30, r30
    567c:	ff 1f       	adc	r31, r31
    567e:	df 01       	movw	r26, r30
    5680:	a8 0f       	add	r26, r24
    5682:	b9 1f       	adc	r27, r25
    5684:	aa 0f       	add	r26, r26
    5686:	bb 1f       	adc	r27, r27
    5688:	a0 59       	subi	r26, 0x90	; 144
    568a:	b7 4e       	sbci	r27, 0xE7	; 231
    568c:	21 e0       	ldi	r18, 0x01	; 1
    568e:	15 96       	adiw	r26, 0x05	; 5
    5690:	2c 93       	st	X, r18
    5692:	15 97       	sbiw	r26, 0x05	; 5
    5694:	fd 01       	movw	r30, r26
    5696:	14 82       	std	Z+4, r1	; 0x04
    5698:	08 95       	ret

0000569a <_initTwiInterface>:
    569a:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <_twiIsInitiated>
    569e:	81 11       	cpse	r24, r1
    56a0:	0c c0       	rjmp	.+24     	; 0x56ba <_initTwiInterface+0x20>
    56a2:	8c e0       	ldi	r24, 0x0C	; 12
    56a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    56a8:	8f ef       	ldi	r24, 0xFF	; 255
    56aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56ae:	84 e0       	ldi	r24, 0x04	; 4
    56b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56b4:	81 e0       	ldi	r24, 0x01	; 1
    56b6:	80 93 96 18 	sts	0x1896, r24	; 0x801896 <_twiIsInitiated>
    56ba:	08 95       	ret

000056bc <twiCreate>:
    56bc:	af 92       	push	r10
    56be:	bf 92       	push	r11
    56c0:	cf 92       	push	r12
    56c2:	df 92       	push	r13
    56c4:	ef 92       	push	r14
    56c6:	ff 92       	push	r15
    56c8:	0f 93       	push	r16
    56ca:	1f 93       	push	r17
    56cc:	cf 93       	push	r28
    56ce:	df 93       	push	r29
    56d0:	a8 2e       	mov	r10, r24
    56d2:	b6 2e       	mov	r11, r22
    56d4:	69 01       	movw	r12, r18
    56d6:	7a 01       	movw	r14, r20
    56d8:	84 e0       	ldi	r24, 0x04	; 4
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	cb d3       	rcall	.+1942   	; 0x5e74 <malloc>
    56de:	ec 01       	movw	r28, r24
    56e0:	89 2b       	or	r24, r25
    56e2:	61 f1       	breq	.+88     	; 0x573c <twiCreate+0x80>
    56e4:	a8 82       	st	Y, r10
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	b8 12       	cpse	r11, r24
    56ea:	12 c0       	rjmp	.+36     	; 0x5710 <twiCreate+0x54>
    56ec:	c7 01       	movw	r24, r14
    56ee:	b6 01       	movw	r22, r12
    56f0:	20 ea       	ldi	r18, 0xA0	; 160
    56f2:	36 e8       	ldi	r19, 0x86	; 134
    56f4:	41 e0       	ldi	r20, 0x01	; 1
    56f6:	50 e0       	ldi	r21, 0x00	; 0
    56f8:	79 d3       	rcall	.+1778   	; 0x5dec <__udivmodsi4>
    56fa:	da 01       	movw	r26, r20
    56fc:	c9 01       	movw	r24, r18
    56fe:	40 97       	sbiw	r24, 0x10	; 16
    5700:	a1 09       	sbc	r26, r1
    5702:	b1 09       	sbc	r27, r1
    5704:	b6 95       	lsr	r27
    5706:	a7 95       	ror	r26
    5708:	97 95       	ror	r25
    570a:	87 95       	ror	r24
    570c:	89 83       	std	Y+1, r24	; 0x01
    570e:	11 c0       	rjmp	.+34     	; 0x5732 <twiCreate+0x76>
    5710:	c7 01       	movw	r24, r14
    5712:	b6 01       	movw	r22, r12
    5714:	20 e8       	ldi	r18, 0x80	; 128
    5716:	3a e1       	ldi	r19, 0x1A	; 26
    5718:	46 e0       	ldi	r20, 0x06	; 6
    571a:	50 e0       	ldi	r21, 0x00	; 0
    571c:	67 d3       	rcall	.+1742   	; 0x5dec <__udivmodsi4>
    571e:	da 01       	movw	r26, r20
    5720:	c9 01       	movw	r24, r18
    5722:	40 97       	sbiw	r24, 0x10	; 16
    5724:	a1 09       	sbc	r26, r1
    5726:	b1 09       	sbc	r27, r1
    5728:	b6 95       	lsr	r27
    572a:	a7 95       	ror	r26
    572c:	97 95       	ror	r25
    572e:	87 95       	ror	r24
    5730:	89 83       	std	Y+1, r24	; 0x01
    5732:	1b 83       	std	Y+3, r17	; 0x03
    5734:	0a 83       	std	Y+2, r16	; 0x02
    5736:	8c 2f       	mov	r24, r28
    5738:	9d 2f       	mov	r25, r29
    573a:	02 c0       	rjmp	.+4      	; 0x5740 <twiCreate+0x84>
    573c:	80 e0       	ldi	r24, 0x00	; 0
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	df 91       	pop	r29
    5742:	cf 91       	pop	r28
    5744:	1f 91       	pop	r17
    5746:	0f 91       	pop	r16
    5748:	ff 90       	pop	r15
    574a:	ef 90       	pop	r14
    574c:	df 90       	pop	r13
    574e:	cf 90       	pop	r12
    5750:	bf 90       	pop	r11
    5752:	af 90       	pop	r10
    5754:	08 95       	ret

00005756 <twiIsBusy>:
    5756:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    575a:	81 70       	andi	r24, 0x01	; 1
    575c:	08 95       	ret

0000575e <twiTransmit>:
    575e:	ff 92       	push	r15
    5760:	0f 93       	push	r16
    5762:	1f 93       	push	r17
    5764:	cf 93       	push	r28
    5766:	df 93       	push	r29
    5768:	00 97       	sbiw	r24, 0x00	; 0
    576a:	d1 f1       	breq	.+116    	; 0x57e0 <twiTransmit+0x82>
    576c:	4a 30       	cpi	r20, 0x0A	; 10
    576e:	d0 f5       	brcc	.+116    	; 0x57e4 <twiTransmit+0x86>
    5770:	f4 2e       	mov	r15, r20
    5772:	8b 01       	movw	r16, r22
    5774:	ec 01       	movw	r28, r24
    5776:	ef df       	rcall	.-34     	; 0x5756 <twiIsBusy>
    5778:	81 11       	cpse	r24, r1
    577a:	36 c0       	rjmp	.+108    	; 0x57e8 <twiTransmit+0x8a>
    577c:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <_twiCurrentHandler>
    5780:	90 91 8a 18 	lds	r25, 0x188A	; 0x80188a <_twiCurrentHandler+0x1>
    5784:	c8 17       	cp	r28, r24
    5786:	d9 07       	cpc	r29, r25
    5788:	41 f0       	breq	.+16     	; 0x579a <twiTransmit+0x3c>
    578a:	87 df       	rcall	.-242    	; 0x569a <_initTwiInterface>
    578c:	89 81       	ldd	r24, Y+1	; 0x01
    578e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5792:	d0 93 8a 18 	sts	0x188A, r29	; 0x80188a <_twiCurrentHandler+0x1>
    5796:	c0 93 89 18 	sts	0x1889, r28	; 0x801889 <_twiCurrentHandler>
    579a:	81 e0       	ldi	r24, 0x01	; 1
    579c:	8f 0d       	add	r24, r15
    579e:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <_twiMessageLen>
    57a2:	88 81       	ld	r24, Y
    57a4:	88 0f       	add	r24, r24
    57a6:	80 93 8c 18 	sts	0x188C, r24	; 0x80188c <_twiMessageBuffer>
    57aa:	ff 20       	and	r15, r15
    57ac:	89 f0       	breq	.+34     	; 0x57d0 <twiTransmit+0x72>
    57ae:	f8 01       	movw	r30, r16
    57b0:	ad e8       	ldi	r26, 0x8D	; 141
    57b2:	b8 e1       	ldi	r27, 0x18	; 24
    57b4:	4f ef       	ldi	r20, 0xFF	; 255
    57b6:	4f 0d       	add	r20, r15
    57b8:	64 2f       	mov	r22, r20
    57ba:	70 e0       	ldi	r23, 0x00	; 0
    57bc:	cb 01       	movw	r24, r22
    57be:	01 96       	adiw	r24, 0x01	; 1
    57c0:	b8 01       	movw	r22, r16
    57c2:	68 0f       	add	r22, r24
    57c4:	79 1f       	adc	r23, r25
    57c6:	81 91       	ld	r24, Z+
    57c8:	8d 93       	st	X+, r24
    57ca:	e6 17       	cp	r30, r22
    57cc:	f7 07       	cpc	r31, r23
    57ce:	d9 f7       	brne	.-10     	; 0x57c6 <twiTransmit+0x68>
    57d0:	88 ef       	ldi	r24, 0xF8	; 248
    57d2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    57d6:	85 ea       	ldi	r24, 0xA5	; 165
    57d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57dc:	84 e0       	ldi	r24, 0x04	; 4
    57de:	05 c0       	rjmp	.+10     	; 0x57ea <twiTransmit+0x8c>
    57e0:	86 e0       	ldi	r24, 0x06	; 6
    57e2:	03 c0       	rjmp	.+6      	; 0x57ea <twiTransmit+0x8c>
    57e4:	87 e0       	ldi	r24, 0x07	; 7
    57e6:	01 c0       	rjmp	.+2      	; 0x57ea <twiTransmit+0x8c>
    57e8:	82 e0       	ldi	r24, 0x02	; 2
    57ea:	df 91       	pop	r29
    57ec:	cf 91       	pop	r28
    57ee:	1f 91       	pop	r17
    57f0:	0f 91       	pop	r16
    57f2:	ff 90       	pop	r15
    57f4:	08 95       	ret

000057f6 <twiReceive>:
    57f6:	1f 93       	push	r17
    57f8:	cf 93       	push	r28
    57fa:	df 93       	push	r29
    57fc:	00 97       	sbiw	r24, 0x00	; 0
    57fe:	29 f1       	breq	.+74     	; 0x584a <twiReceive+0x54>
    5800:	6b 30       	cpi	r22, 0x0B	; 11
    5802:	28 f5       	brcc	.+74     	; 0x584e <twiReceive+0x58>
    5804:	16 2f       	mov	r17, r22
    5806:	ec 01       	movw	r28, r24
    5808:	a6 df       	rcall	.-180    	; 0x5756 <twiIsBusy>
    580a:	81 11       	cpse	r24, r1
    580c:	22 c0       	rjmp	.+68     	; 0x5852 <twiReceive+0x5c>
    580e:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <_twiCurrentHandler>
    5812:	90 91 8a 18 	lds	r25, 0x188A	; 0x80188a <_twiCurrentHandler+0x1>
    5816:	c8 17       	cp	r28, r24
    5818:	d9 07       	cpc	r29, r25
    581a:	41 f0       	breq	.+16     	; 0x582c <twiReceive+0x36>
    581c:	3e df       	rcall	.-388    	; 0x569a <_initTwiInterface>
    581e:	89 81       	ldd	r24, Y+1	; 0x01
    5820:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5824:	d0 93 8a 18 	sts	0x188A, r29	; 0x80188a <_twiCurrentHandler+0x1>
    5828:	c0 93 89 18 	sts	0x1889, r28	; 0x801889 <_twiCurrentHandler>
    582c:	10 93 8b 18 	sts	0x188B, r17	; 0x80188b <_twiMessageLen>
    5830:	88 81       	ld	r24, Y
    5832:	88 0f       	add	r24, r24
    5834:	81 60       	ori	r24, 0x01	; 1
    5836:	80 93 8c 18 	sts	0x188C, r24	; 0x80188c <_twiMessageBuffer>
    583a:	88 ef       	ldi	r24, 0xF8	; 248
    583c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5840:	85 ea       	ldi	r24, 0xA5	; 165
    5842:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5846:	85 e0       	ldi	r24, 0x05	; 5
    5848:	05 c0       	rjmp	.+10     	; 0x5854 <twiReceive+0x5e>
    584a:	86 e0       	ldi	r24, 0x06	; 6
    584c:	03 c0       	rjmp	.+6      	; 0x5854 <twiReceive+0x5e>
    584e:	87 e0       	ldi	r24, 0x07	; 7
    5850:	01 c0       	rjmp	.+2      	; 0x5854 <twiReceive+0x5e>
    5852:	82 e0       	ldi	r24, 0x02	; 2
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	1f 91       	pop	r17
    585a:	08 95       	ret

0000585c <__vector_39>:
    585c:	1f 92       	push	r1
    585e:	0f 92       	push	r0
    5860:	0f b6       	in	r0, 0x3f	; 63
    5862:	0f 92       	push	r0
    5864:	11 24       	eor	r1, r1
    5866:	0b b6       	in	r0, 0x3b	; 59
    5868:	0f 92       	push	r0
    586a:	2f 93       	push	r18
    586c:	3f 93       	push	r19
    586e:	4f 93       	push	r20
    5870:	5f 93       	push	r21
    5872:	6f 93       	push	r22
    5874:	7f 93       	push	r23
    5876:	8f 93       	push	r24
    5878:	9f 93       	push	r25
    587a:	af 93       	push	r26
    587c:	bf 93       	push	r27
    587e:	ef 93       	push	r30
    5880:	ff 93       	push	r31
    5882:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5886:	8e 2f       	mov	r24, r30
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	fc 01       	movw	r30, r24
    588c:	38 97       	sbiw	r30, 0x08	; 8
    588e:	e1 35       	cpi	r30, 0x51	; 81
    5890:	f1 05       	cpc	r31, r1
    5892:	08 f0       	brcs	.+2      	; 0x5896 <__vector_39+0x3a>
    5894:	75 c0       	rjmp	.+234    	; 0x5980 <__vector_39+0x124>
    5896:	88 27       	eor	r24, r24
    5898:	e4 58       	subi	r30, 0x84	; 132
    589a:	ff 4f       	sbci	r31, 0xFF	; 255
    589c:	8f 4f       	sbci	r24, 0xFF	; 255
    589e:	c8 c2       	rjmp	.+1424   	; 0x5e30 <__tablejump2__>
    58a0:	10 92 88 18 	sts	0x1888, r1	; 0x801888 <_index.1885>
    58a4:	e0 91 88 18 	lds	r30, 0x1888	; 0x801888 <_index.1885>
    58a8:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <_twiMessageLen>
    58ac:	e8 17       	cp	r30, r24
    58ae:	70 f4       	brcc	.+28     	; 0x58cc <__vector_39+0x70>
    58b0:	81 e0       	ldi	r24, 0x01	; 1
    58b2:	8e 0f       	add	r24, r30
    58b4:	80 93 88 18 	sts	0x1888, r24	; 0x801888 <_index.1885>
    58b8:	f0 e0       	ldi	r31, 0x00	; 0
    58ba:	e4 57       	subi	r30, 0x74	; 116
    58bc:	f7 4e       	sbci	r31, 0xE7	; 231
    58be:	80 81       	ld	r24, Z
    58c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    58c4:	85 e8       	ldi	r24, 0x85	; 133
    58c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58ca:	72 c0       	rjmp	.+228    	; 0x59b0 <__vector_39+0x154>
    58cc:	84 e9       	ldi	r24, 0x94	; 148
    58ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58d2:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <_twiCurrentHandler>
    58d6:	90 91 8a 18 	lds	r25, 0x188A	; 0x80188a <_twiCurrentHandler+0x1>
    58da:	dc 01       	movw	r26, r24
    58dc:	12 96       	adiw	r26, 0x02	; 2
    58de:	ed 91       	ld	r30, X+
    58e0:	fc 91       	ld	r31, X
    58e2:	13 97       	sbiw	r26, 0x03	; 3
    58e4:	30 97       	sbiw	r30, 0x00	; 0
    58e6:	09 f4       	brne	.+2      	; 0x58ea <__vector_39+0x8e>
    58e8:	63 c0       	rjmp	.+198    	; 0x59b0 <__vector_39+0x154>
    58ea:	20 e0       	ldi	r18, 0x00	; 0
    58ec:	40 e0       	ldi	r20, 0x00	; 0
    58ee:	50 e0       	ldi	r21, 0x00	; 0
    58f0:	64 e0       	ldi	r22, 0x04	; 4
    58f2:	19 95       	eicall
    58f4:	5d c0       	rjmp	.+186    	; 0x59b0 <__vector_39+0x154>
    58f6:	e0 91 88 18 	lds	r30, 0x1888	; 0x801888 <_index.1885>
    58fa:	81 e0       	ldi	r24, 0x01	; 1
    58fc:	8e 0f       	add	r24, r30
    58fe:	80 93 88 18 	sts	0x1888, r24	; 0x801888 <_index.1885>
    5902:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5906:	f0 e0       	ldi	r31, 0x00	; 0
    5908:	e4 57       	subi	r30, 0x74	; 116
    590a:	f7 4e       	sbci	r31, 0xE7	; 231
    590c:	80 83       	st	Z, r24
    590e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5912:	80 34       	cpi	r24, 0x40	; 64
    5914:	11 f4       	brne	.+4      	; 0x591a <__vector_39+0xbe>
    5916:	10 92 88 18 	sts	0x1888, r1	; 0x801888 <_index.1885>
    591a:	20 91 88 18 	lds	r18, 0x1888	; 0x801888 <_index.1885>
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <_twiMessageLen>
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	01 97       	sbiw	r24, 0x01	; 1
    5928:	28 17       	cp	r18, r24
    592a:	39 07       	cpc	r19, r25
    592c:	24 f4       	brge	.+8      	; 0x5936 <__vector_39+0xda>
    592e:	85 ec       	ldi	r24, 0xC5	; 197
    5930:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5934:	3d c0       	rjmp	.+122    	; 0x59b0 <__vector_39+0x154>
    5936:	85 e8       	ldi	r24, 0x85	; 133
    5938:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    593c:	39 c0       	rjmp	.+114    	; 0x59b0 <__vector_39+0x154>
    593e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5942:	e0 91 88 18 	lds	r30, 0x1888	; 0x801888 <_index.1885>
    5946:	f0 e0       	ldi	r31, 0x00	; 0
    5948:	e4 57       	subi	r30, 0x74	; 116
    594a:	f7 4e       	sbci	r31, 0xE7	; 231
    594c:	80 83       	st	Z, r24
    594e:	84 e9       	ldi	r24, 0x94	; 148
    5950:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5954:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <_twiCurrentHandler>
    5958:	90 91 8a 18 	lds	r25, 0x188A	; 0x80188a <_twiCurrentHandler+0x1>
    595c:	dc 01       	movw	r26, r24
    595e:	12 96       	adiw	r26, 0x02	; 2
    5960:	ed 91       	ld	r30, X+
    5962:	fc 91       	ld	r31, X
    5964:	13 97       	sbiw	r26, 0x03	; 3
    5966:	30 97       	sbiw	r30, 0x00	; 0
    5968:	19 f1       	breq	.+70     	; 0x59b0 <__vector_39+0x154>
    596a:	20 91 8b 18 	lds	r18, 0x188B	; 0x80188b <_twiMessageLen>
    596e:	4c e8       	ldi	r20, 0x8C	; 140
    5970:	58 e1       	ldi	r21, 0x18	; 24
    5972:	65 e0       	ldi	r22, 0x05	; 5
    5974:	19 95       	eicall
    5976:	1c c0       	rjmp	.+56     	; 0x59b0 <__vector_39+0x154>
    5978:	85 ea       	ldi	r24, 0xA5	; 165
    597a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    597e:	18 c0       	rjmp	.+48     	; 0x59b0 <__vector_39+0x154>
    5980:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5984:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5988:	84 e0       	ldi	r24, 0x04	; 4
    598a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    598e:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <_twiCurrentHandler>
    5992:	90 91 8a 18 	lds	r25, 0x188A	; 0x80188a <_twiCurrentHandler+0x1>
    5996:	dc 01       	movw	r26, r24
    5998:	12 96       	adiw	r26, 0x02	; 2
    599a:	ed 91       	ld	r30, X+
    599c:	fc 91       	ld	r31, X
    599e:	13 97       	sbiw	r26, 0x03	; 3
    59a0:	30 97       	sbiw	r30, 0x00	; 0
    59a2:	31 f0       	breq	.+12     	; 0x59b0 <__vector_39+0x154>
    59a4:	20 e0       	ldi	r18, 0x00	; 0
    59a6:	40 e0       	ldi	r20, 0x00	; 0
    59a8:	50 e0       	ldi	r21, 0x00	; 0
    59aa:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    59ae:	19 95       	eicall
    59b0:	ff 91       	pop	r31
    59b2:	ef 91       	pop	r30
    59b4:	bf 91       	pop	r27
    59b6:	af 91       	pop	r26
    59b8:	9f 91       	pop	r25
    59ba:	8f 91       	pop	r24
    59bc:	7f 91       	pop	r23
    59be:	6f 91       	pop	r22
    59c0:	5f 91       	pop	r21
    59c2:	4f 91       	pop	r20
    59c4:	3f 91       	pop	r19
    59c6:	2f 91       	pop	r18
    59c8:	0f 90       	pop	r0
    59ca:	0b be       	out	0x3b, r0	; 59
    59cc:	0f 90       	pop	r0
    59ce:	0f be       	out	0x3f, r0	; 63
    59d0:	0f 90       	pop	r0
    59d2:	1f 90       	pop	r1
    59d4:	18 95       	reti

000059d6 <fifo_init>:
    59d6:	fc 01       	movw	r30, r24
    59d8:	41 11       	cpse	r20, r1
    59da:	01 c0       	rjmp	.+2      	; 0x59de <fifo_init+0x8>
    59dc:	6c d3       	rcall	.+1752   	; 0x60b6 <abort>
    59de:	84 2f       	mov	r24, r20
    59e0:	90 e0       	ldi	r25, 0x00	; 0
    59e2:	9c 01       	movw	r18, r24
    59e4:	21 50       	subi	r18, 0x01	; 1
    59e6:	31 09       	sbc	r19, r1
    59e8:	82 23       	and	r24, r18
    59ea:	93 23       	and	r25, r19
    59ec:	89 2b       	or	r24, r25
    59ee:	09 f0       	breq	.+2      	; 0x59f2 <fifo_init+0x1c>
    59f0:	62 d3       	rcall	.+1732   	; 0x60b6 <abort>
    59f2:	41 38       	cpi	r20, 0x81	; 129
    59f4:	08 f0       	brcs	.+2      	; 0x59f8 <fifo_init+0x22>
    59f6:	5f d3       	rcall	.+1726   	; 0x60b6 <abort>
    59f8:	12 82       	std	Z+2, r1	; 0x02
    59fa:	13 82       	std	Z+3, r1	; 0x03
    59fc:	44 83       	std	Z+4, r20	; 0x04
    59fe:	44 0f       	add	r20, r20
    5a00:	41 50       	subi	r20, 0x01	; 1
    5a02:	45 83       	std	Z+5, r20	; 0x05
    5a04:	71 83       	std	Z+1, r23	; 0x01
    5a06:	60 83       	st	Z, r22
    5a08:	80 e0       	ldi	r24, 0x00	; 0
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	08 95       	ret

00005a0e <__subsf3>:
    5a0e:	50 58       	subi	r21, 0x80	; 128

00005a10 <__addsf3>:
    5a10:	bb 27       	eor	r27, r27
    5a12:	aa 27       	eor	r26, r26
    5a14:	0e d0       	rcall	.+28     	; 0x5a32 <__addsf3x>
    5a16:	4d c1       	rjmp	.+666    	; 0x5cb2 <__fp_round>
    5a18:	3e d1       	rcall	.+636    	; 0x5c96 <__fp_pscA>
    5a1a:	30 f0       	brcs	.+12     	; 0x5a28 <__addsf3+0x18>
    5a1c:	43 d1       	rcall	.+646    	; 0x5ca4 <__fp_pscB>
    5a1e:	20 f0       	brcs	.+8      	; 0x5a28 <__addsf3+0x18>
    5a20:	31 f4       	brne	.+12     	; 0x5a2e <__addsf3+0x1e>
    5a22:	9f 3f       	cpi	r25, 0xFF	; 255
    5a24:	11 f4       	brne	.+4      	; 0x5a2a <__addsf3+0x1a>
    5a26:	1e f4       	brtc	.+6      	; 0x5a2e <__addsf3+0x1e>
    5a28:	33 c1       	rjmp	.+614    	; 0x5c90 <__fp_nan>
    5a2a:	0e f4       	brtc	.+2      	; 0x5a2e <__addsf3+0x1e>
    5a2c:	e0 95       	com	r30
    5a2e:	e7 fb       	bst	r30, 7
    5a30:	29 c1       	rjmp	.+594    	; 0x5c84 <__fp_inf>

00005a32 <__addsf3x>:
    5a32:	e9 2f       	mov	r30, r25
    5a34:	4f d1       	rcall	.+670    	; 0x5cd4 <__fp_split3>
    5a36:	80 f3       	brcs	.-32     	; 0x5a18 <__addsf3+0x8>
    5a38:	ba 17       	cp	r27, r26
    5a3a:	62 07       	cpc	r22, r18
    5a3c:	73 07       	cpc	r23, r19
    5a3e:	84 07       	cpc	r24, r20
    5a40:	95 07       	cpc	r25, r21
    5a42:	18 f0       	brcs	.+6      	; 0x5a4a <__addsf3x+0x18>
    5a44:	71 f4       	brne	.+28     	; 0x5a62 <__addsf3x+0x30>
    5a46:	9e f5       	brtc	.+102    	; 0x5aae <__addsf3x+0x7c>
    5a48:	67 c1       	rjmp	.+718    	; 0x5d18 <__fp_zero>
    5a4a:	0e f4       	brtc	.+2      	; 0x5a4e <__addsf3x+0x1c>
    5a4c:	e0 95       	com	r30
    5a4e:	0b 2e       	mov	r0, r27
    5a50:	ba 2f       	mov	r27, r26
    5a52:	a0 2d       	mov	r26, r0
    5a54:	0b 01       	movw	r0, r22
    5a56:	b9 01       	movw	r22, r18
    5a58:	90 01       	movw	r18, r0
    5a5a:	0c 01       	movw	r0, r24
    5a5c:	ca 01       	movw	r24, r20
    5a5e:	a0 01       	movw	r20, r0
    5a60:	11 24       	eor	r1, r1
    5a62:	ff 27       	eor	r31, r31
    5a64:	59 1b       	sub	r21, r25
    5a66:	99 f0       	breq	.+38     	; 0x5a8e <__addsf3x+0x5c>
    5a68:	59 3f       	cpi	r21, 0xF9	; 249
    5a6a:	50 f4       	brcc	.+20     	; 0x5a80 <__addsf3x+0x4e>
    5a6c:	50 3e       	cpi	r21, 0xE0	; 224
    5a6e:	68 f1       	brcs	.+90     	; 0x5aca <__addsf3x+0x98>
    5a70:	1a 16       	cp	r1, r26
    5a72:	f0 40       	sbci	r31, 0x00	; 0
    5a74:	a2 2f       	mov	r26, r18
    5a76:	23 2f       	mov	r18, r19
    5a78:	34 2f       	mov	r19, r20
    5a7a:	44 27       	eor	r20, r20
    5a7c:	58 5f       	subi	r21, 0xF8	; 248
    5a7e:	f3 cf       	rjmp	.-26     	; 0x5a66 <__addsf3x+0x34>
    5a80:	46 95       	lsr	r20
    5a82:	37 95       	ror	r19
    5a84:	27 95       	ror	r18
    5a86:	a7 95       	ror	r26
    5a88:	f0 40       	sbci	r31, 0x00	; 0
    5a8a:	53 95       	inc	r21
    5a8c:	c9 f7       	brne	.-14     	; 0x5a80 <__addsf3x+0x4e>
    5a8e:	7e f4       	brtc	.+30     	; 0x5aae <__addsf3x+0x7c>
    5a90:	1f 16       	cp	r1, r31
    5a92:	ba 0b       	sbc	r27, r26
    5a94:	62 0b       	sbc	r22, r18
    5a96:	73 0b       	sbc	r23, r19
    5a98:	84 0b       	sbc	r24, r20
    5a9a:	ba f0       	brmi	.+46     	; 0x5aca <__addsf3x+0x98>
    5a9c:	91 50       	subi	r25, 0x01	; 1
    5a9e:	a1 f0       	breq	.+40     	; 0x5ac8 <__addsf3x+0x96>
    5aa0:	ff 0f       	add	r31, r31
    5aa2:	bb 1f       	adc	r27, r27
    5aa4:	66 1f       	adc	r22, r22
    5aa6:	77 1f       	adc	r23, r23
    5aa8:	88 1f       	adc	r24, r24
    5aaa:	c2 f7       	brpl	.-16     	; 0x5a9c <__addsf3x+0x6a>
    5aac:	0e c0       	rjmp	.+28     	; 0x5aca <__addsf3x+0x98>
    5aae:	ba 0f       	add	r27, r26
    5ab0:	62 1f       	adc	r22, r18
    5ab2:	73 1f       	adc	r23, r19
    5ab4:	84 1f       	adc	r24, r20
    5ab6:	48 f4       	brcc	.+18     	; 0x5aca <__addsf3x+0x98>
    5ab8:	87 95       	ror	r24
    5aba:	77 95       	ror	r23
    5abc:	67 95       	ror	r22
    5abe:	b7 95       	ror	r27
    5ac0:	f7 95       	ror	r31
    5ac2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ac4:	08 f0       	brcs	.+2      	; 0x5ac8 <__addsf3x+0x96>
    5ac6:	b3 cf       	rjmp	.-154    	; 0x5a2e <__addsf3+0x1e>
    5ac8:	93 95       	inc	r25
    5aca:	88 0f       	add	r24, r24
    5acc:	08 f0       	brcs	.+2      	; 0x5ad0 <__addsf3x+0x9e>
    5ace:	99 27       	eor	r25, r25
    5ad0:	ee 0f       	add	r30, r30
    5ad2:	97 95       	ror	r25
    5ad4:	87 95       	ror	r24
    5ad6:	08 95       	ret

00005ad8 <__divsf3>:
    5ad8:	0c d0       	rcall	.+24     	; 0x5af2 <__divsf3x>
    5ada:	eb c0       	rjmp	.+470    	; 0x5cb2 <__fp_round>
    5adc:	e3 d0       	rcall	.+454    	; 0x5ca4 <__fp_pscB>
    5ade:	40 f0       	brcs	.+16     	; 0x5af0 <__divsf3+0x18>
    5ae0:	da d0       	rcall	.+436    	; 0x5c96 <__fp_pscA>
    5ae2:	30 f0       	brcs	.+12     	; 0x5af0 <__divsf3+0x18>
    5ae4:	21 f4       	brne	.+8      	; 0x5aee <__divsf3+0x16>
    5ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    5ae8:	19 f0       	breq	.+6      	; 0x5af0 <__divsf3+0x18>
    5aea:	cc c0       	rjmp	.+408    	; 0x5c84 <__fp_inf>
    5aec:	51 11       	cpse	r21, r1
    5aee:	15 c1       	rjmp	.+554    	; 0x5d1a <__fp_szero>
    5af0:	cf c0       	rjmp	.+414    	; 0x5c90 <__fp_nan>

00005af2 <__divsf3x>:
    5af2:	f0 d0       	rcall	.+480    	; 0x5cd4 <__fp_split3>
    5af4:	98 f3       	brcs	.-26     	; 0x5adc <__divsf3+0x4>

00005af6 <__divsf3_pse>:
    5af6:	99 23       	and	r25, r25
    5af8:	c9 f3       	breq	.-14     	; 0x5aec <__divsf3+0x14>
    5afa:	55 23       	and	r21, r21
    5afc:	b1 f3       	breq	.-20     	; 0x5aea <__divsf3+0x12>
    5afe:	95 1b       	sub	r25, r21
    5b00:	55 0b       	sbc	r21, r21
    5b02:	bb 27       	eor	r27, r27
    5b04:	aa 27       	eor	r26, r26
    5b06:	62 17       	cp	r22, r18
    5b08:	73 07       	cpc	r23, r19
    5b0a:	84 07       	cpc	r24, r20
    5b0c:	38 f0       	brcs	.+14     	; 0x5b1c <__divsf3_pse+0x26>
    5b0e:	9f 5f       	subi	r25, 0xFF	; 255
    5b10:	5f 4f       	sbci	r21, 0xFF	; 255
    5b12:	22 0f       	add	r18, r18
    5b14:	33 1f       	adc	r19, r19
    5b16:	44 1f       	adc	r20, r20
    5b18:	aa 1f       	adc	r26, r26
    5b1a:	a9 f3       	breq	.-22     	; 0x5b06 <__divsf3_pse+0x10>
    5b1c:	33 d0       	rcall	.+102    	; 0x5b84 <__divsf3_pse+0x8e>
    5b1e:	0e 2e       	mov	r0, r30
    5b20:	3a f0       	brmi	.+14     	; 0x5b30 <__divsf3_pse+0x3a>
    5b22:	e0 e8       	ldi	r30, 0x80	; 128
    5b24:	30 d0       	rcall	.+96     	; 0x5b86 <__divsf3_pse+0x90>
    5b26:	91 50       	subi	r25, 0x01	; 1
    5b28:	50 40       	sbci	r21, 0x00	; 0
    5b2a:	e6 95       	lsr	r30
    5b2c:	00 1c       	adc	r0, r0
    5b2e:	ca f7       	brpl	.-14     	; 0x5b22 <__divsf3_pse+0x2c>
    5b30:	29 d0       	rcall	.+82     	; 0x5b84 <__divsf3_pse+0x8e>
    5b32:	fe 2f       	mov	r31, r30
    5b34:	27 d0       	rcall	.+78     	; 0x5b84 <__divsf3_pse+0x8e>
    5b36:	66 0f       	add	r22, r22
    5b38:	77 1f       	adc	r23, r23
    5b3a:	88 1f       	adc	r24, r24
    5b3c:	bb 1f       	adc	r27, r27
    5b3e:	26 17       	cp	r18, r22
    5b40:	37 07       	cpc	r19, r23
    5b42:	48 07       	cpc	r20, r24
    5b44:	ab 07       	cpc	r26, r27
    5b46:	b0 e8       	ldi	r27, 0x80	; 128
    5b48:	09 f0       	breq	.+2      	; 0x5b4c <__divsf3_pse+0x56>
    5b4a:	bb 0b       	sbc	r27, r27
    5b4c:	80 2d       	mov	r24, r0
    5b4e:	bf 01       	movw	r22, r30
    5b50:	ff 27       	eor	r31, r31
    5b52:	93 58       	subi	r25, 0x83	; 131
    5b54:	5f 4f       	sbci	r21, 0xFF	; 255
    5b56:	2a f0       	brmi	.+10     	; 0x5b62 <__divsf3_pse+0x6c>
    5b58:	9e 3f       	cpi	r25, 0xFE	; 254
    5b5a:	51 05       	cpc	r21, r1
    5b5c:	68 f0       	brcs	.+26     	; 0x5b78 <__divsf3_pse+0x82>
    5b5e:	92 c0       	rjmp	.+292    	; 0x5c84 <__fp_inf>
    5b60:	dc c0       	rjmp	.+440    	; 0x5d1a <__fp_szero>
    5b62:	5f 3f       	cpi	r21, 0xFF	; 255
    5b64:	ec f3       	brlt	.-6      	; 0x5b60 <__divsf3_pse+0x6a>
    5b66:	98 3e       	cpi	r25, 0xE8	; 232
    5b68:	dc f3       	brlt	.-10     	; 0x5b60 <__divsf3_pse+0x6a>
    5b6a:	86 95       	lsr	r24
    5b6c:	77 95       	ror	r23
    5b6e:	67 95       	ror	r22
    5b70:	b7 95       	ror	r27
    5b72:	f7 95       	ror	r31
    5b74:	9f 5f       	subi	r25, 0xFF	; 255
    5b76:	c9 f7       	brne	.-14     	; 0x5b6a <__divsf3_pse+0x74>
    5b78:	88 0f       	add	r24, r24
    5b7a:	91 1d       	adc	r25, r1
    5b7c:	96 95       	lsr	r25
    5b7e:	87 95       	ror	r24
    5b80:	97 f9       	bld	r25, 7
    5b82:	08 95       	ret
    5b84:	e1 e0       	ldi	r30, 0x01	; 1
    5b86:	66 0f       	add	r22, r22
    5b88:	77 1f       	adc	r23, r23
    5b8a:	88 1f       	adc	r24, r24
    5b8c:	bb 1f       	adc	r27, r27
    5b8e:	62 17       	cp	r22, r18
    5b90:	73 07       	cpc	r23, r19
    5b92:	84 07       	cpc	r24, r20
    5b94:	ba 07       	cpc	r27, r26
    5b96:	20 f0       	brcs	.+8      	; 0x5ba0 <__divsf3_pse+0xaa>
    5b98:	62 1b       	sub	r22, r18
    5b9a:	73 0b       	sbc	r23, r19
    5b9c:	84 0b       	sbc	r24, r20
    5b9e:	ba 0b       	sbc	r27, r26
    5ba0:	ee 1f       	adc	r30, r30
    5ba2:	88 f7       	brcc	.-30     	; 0x5b86 <__divsf3_pse+0x90>
    5ba4:	e0 95       	com	r30
    5ba6:	08 95       	ret

00005ba8 <__fixsfsi>:
    5ba8:	04 d0       	rcall	.+8      	; 0x5bb2 <__fixunssfsi>
    5baa:	68 94       	set
    5bac:	b1 11       	cpse	r27, r1
    5bae:	b5 c0       	rjmp	.+362    	; 0x5d1a <__fp_szero>
    5bb0:	08 95       	ret

00005bb2 <__fixunssfsi>:
    5bb2:	98 d0       	rcall	.+304    	; 0x5ce4 <__fp_splitA>
    5bb4:	88 f0       	brcs	.+34     	; 0x5bd8 <__fixunssfsi+0x26>
    5bb6:	9f 57       	subi	r25, 0x7F	; 127
    5bb8:	90 f0       	brcs	.+36     	; 0x5bde <__fixunssfsi+0x2c>
    5bba:	b9 2f       	mov	r27, r25
    5bbc:	99 27       	eor	r25, r25
    5bbe:	b7 51       	subi	r27, 0x17	; 23
    5bc0:	a0 f0       	brcs	.+40     	; 0x5bea <__fixunssfsi+0x38>
    5bc2:	d1 f0       	breq	.+52     	; 0x5bf8 <__fixunssfsi+0x46>
    5bc4:	66 0f       	add	r22, r22
    5bc6:	77 1f       	adc	r23, r23
    5bc8:	88 1f       	adc	r24, r24
    5bca:	99 1f       	adc	r25, r25
    5bcc:	1a f0       	brmi	.+6      	; 0x5bd4 <__fixunssfsi+0x22>
    5bce:	ba 95       	dec	r27
    5bd0:	c9 f7       	brne	.-14     	; 0x5bc4 <__fixunssfsi+0x12>
    5bd2:	12 c0       	rjmp	.+36     	; 0x5bf8 <__fixunssfsi+0x46>
    5bd4:	b1 30       	cpi	r27, 0x01	; 1
    5bd6:	81 f0       	breq	.+32     	; 0x5bf8 <__fixunssfsi+0x46>
    5bd8:	9f d0       	rcall	.+318    	; 0x5d18 <__fp_zero>
    5bda:	b1 e0       	ldi	r27, 0x01	; 1
    5bdc:	08 95       	ret
    5bde:	9c c0       	rjmp	.+312    	; 0x5d18 <__fp_zero>
    5be0:	67 2f       	mov	r22, r23
    5be2:	78 2f       	mov	r23, r24
    5be4:	88 27       	eor	r24, r24
    5be6:	b8 5f       	subi	r27, 0xF8	; 248
    5be8:	39 f0       	breq	.+14     	; 0x5bf8 <__fixunssfsi+0x46>
    5bea:	b9 3f       	cpi	r27, 0xF9	; 249
    5bec:	cc f3       	brlt	.-14     	; 0x5be0 <__fixunssfsi+0x2e>
    5bee:	86 95       	lsr	r24
    5bf0:	77 95       	ror	r23
    5bf2:	67 95       	ror	r22
    5bf4:	b3 95       	inc	r27
    5bf6:	d9 f7       	brne	.-10     	; 0x5bee <__fixunssfsi+0x3c>
    5bf8:	3e f4       	brtc	.+14     	; 0x5c08 <__fixunssfsi+0x56>
    5bfa:	90 95       	com	r25
    5bfc:	80 95       	com	r24
    5bfe:	70 95       	com	r23
    5c00:	61 95       	neg	r22
    5c02:	7f 4f       	sbci	r23, 0xFF	; 255
    5c04:	8f 4f       	sbci	r24, 0xFF	; 255
    5c06:	9f 4f       	sbci	r25, 0xFF	; 255
    5c08:	08 95       	ret

00005c0a <__floatunsisf>:
    5c0a:	e8 94       	clt
    5c0c:	09 c0       	rjmp	.+18     	; 0x5c20 <__floatsisf+0x12>

00005c0e <__floatsisf>:
    5c0e:	97 fb       	bst	r25, 7
    5c10:	3e f4       	brtc	.+14     	; 0x5c20 <__floatsisf+0x12>
    5c12:	90 95       	com	r25
    5c14:	80 95       	com	r24
    5c16:	70 95       	com	r23
    5c18:	61 95       	neg	r22
    5c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c1c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c20:	99 23       	and	r25, r25
    5c22:	a9 f0       	breq	.+42     	; 0x5c4e <__floatsisf+0x40>
    5c24:	f9 2f       	mov	r31, r25
    5c26:	96 e9       	ldi	r25, 0x96	; 150
    5c28:	bb 27       	eor	r27, r27
    5c2a:	93 95       	inc	r25
    5c2c:	f6 95       	lsr	r31
    5c2e:	87 95       	ror	r24
    5c30:	77 95       	ror	r23
    5c32:	67 95       	ror	r22
    5c34:	b7 95       	ror	r27
    5c36:	f1 11       	cpse	r31, r1
    5c38:	f8 cf       	rjmp	.-16     	; 0x5c2a <__floatsisf+0x1c>
    5c3a:	fa f4       	brpl	.+62     	; 0x5c7a <__floatsisf+0x6c>
    5c3c:	bb 0f       	add	r27, r27
    5c3e:	11 f4       	brne	.+4      	; 0x5c44 <__floatsisf+0x36>
    5c40:	60 ff       	sbrs	r22, 0
    5c42:	1b c0       	rjmp	.+54     	; 0x5c7a <__floatsisf+0x6c>
    5c44:	6f 5f       	subi	r22, 0xFF	; 255
    5c46:	7f 4f       	sbci	r23, 0xFF	; 255
    5c48:	8f 4f       	sbci	r24, 0xFF	; 255
    5c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4c:	16 c0       	rjmp	.+44     	; 0x5c7a <__floatsisf+0x6c>
    5c4e:	88 23       	and	r24, r24
    5c50:	11 f0       	breq	.+4      	; 0x5c56 <__floatsisf+0x48>
    5c52:	96 e9       	ldi	r25, 0x96	; 150
    5c54:	11 c0       	rjmp	.+34     	; 0x5c78 <__floatsisf+0x6a>
    5c56:	77 23       	and	r23, r23
    5c58:	21 f0       	breq	.+8      	; 0x5c62 <__floatsisf+0x54>
    5c5a:	9e e8       	ldi	r25, 0x8E	; 142
    5c5c:	87 2f       	mov	r24, r23
    5c5e:	76 2f       	mov	r23, r22
    5c60:	05 c0       	rjmp	.+10     	; 0x5c6c <__floatsisf+0x5e>
    5c62:	66 23       	and	r22, r22
    5c64:	71 f0       	breq	.+28     	; 0x5c82 <__floatsisf+0x74>
    5c66:	96 e8       	ldi	r25, 0x86	; 134
    5c68:	86 2f       	mov	r24, r22
    5c6a:	70 e0       	ldi	r23, 0x00	; 0
    5c6c:	60 e0       	ldi	r22, 0x00	; 0
    5c6e:	2a f0       	brmi	.+10     	; 0x5c7a <__floatsisf+0x6c>
    5c70:	9a 95       	dec	r25
    5c72:	66 0f       	add	r22, r22
    5c74:	77 1f       	adc	r23, r23
    5c76:	88 1f       	adc	r24, r24
    5c78:	da f7       	brpl	.-10     	; 0x5c70 <__floatsisf+0x62>
    5c7a:	88 0f       	add	r24, r24
    5c7c:	96 95       	lsr	r25
    5c7e:	87 95       	ror	r24
    5c80:	97 f9       	bld	r25, 7
    5c82:	08 95       	ret

00005c84 <__fp_inf>:
    5c84:	97 f9       	bld	r25, 7
    5c86:	9f 67       	ori	r25, 0x7F	; 127
    5c88:	80 e8       	ldi	r24, 0x80	; 128
    5c8a:	70 e0       	ldi	r23, 0x00	; 0
    5c8c:	60 e0       	ldi	r22, 0x00	; 0
    5c8e:	08 95       	ret

00005c90 <__fp_nan>:
    5c90:	9f ef       	ldi	r25, 0xFF	; 255
    5c92:	80 ec       	ldi	r24, 0xC0	; 192
    5c94:	08 95       	ret

00005c96 <__fp_pscA>:
    5c96:	00 24       	eor	r0, r0
    5c98:	0a 94       	dec	r0
    5c9a:	16 16       	cp	r1, r22
    5c9c:	17 06       	cpc	r1, r23
    5c9e:	18 06       	cpc	r1, r24
    5ca0:	09 06       	cpc	r0, r25
    5ca2:	08 95       	ret

00005ca4 <__fp_pscB>:
    5ca4:	00 24       	eor	r0, r0
    5ca6:	0a 94       	dec	r0
    5ca8:	12 16       	cp	r1, r18
    5caa:	13 06       	cpc	r1, r19
    5cac:	14 06       	cpc	r1, r20
    5cae:	05 06       	cpc	r0, r21
    5cb0:	08 95       	ret

00005cb2 <__fp_round>:
    5cb2:	09 2e       	mov	r0, r25
    5cb4:	03 94       	inc	r0
    5cb6:	00 0c       	add	r0, r0
    5cb8:	11 f4       	brne	.+4      	; 0x5cbe <__fp_round+0xc>
    5cba:	88 23       	and	r24, r24
    5cbc:	52 f0       	brmi	.+20     	; 0x5cd2 <__fp_round+0x20>
    5cbe:	bb 0f       	add	r27, r27
    5cc0:	40 f4       	brcc	.+16     	; 0x5cd2 <__fp_round+0x20>
    5cc2:	bf 2b       	or	r27, r31
    5cc4:	11 f4       	brne	.+4      	; 0x5cca <__fp_round+0x18>
    5cc6:	60 ff       	sbrs	r22, 0
    5cc8:	04 c0       	rjmp	.+8      	; 0x5cd2 <__fp_round+0x20>
    5cca:	6f 5f       	subi	r22, 0xFF	; 255
    5ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    5cce:	8f 4f       	sbci	r24, 0xFF	; 255
    5cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd2:	08 95       	ret

00005cd4 <__fp_split3>:
    5cd4:	57 fd       	sbrc	r21, 7
    5cd6:	90 58       	subi	r25, 0x80	; 128
    5cd8:	44 0f       	add	r20, r20
    5cda:	55 1f       	adc	r21, r21
    5cdc:	59 f0       	breq	.+22     	; 0x5cf4 <__fp_splitA+0x10>
    5cde:	5f 3f       	cpi	r21, 0xFF	; 255
    5ce0:	71 f0       	breq	.+28     	; 0x5cfe <__fp_splitA+0x1a>
    5ce2:	47 95       	ror	r20

00005ce4 <__fp_splitA>:
    5ce4:	88 0f       	add	r24, r24
    5ce6:	97 fb       	bst	r25, 7
    5ce8:	99 1f       	adc	r25, r25
    5cea:	61 f0       	breq	.+24     	; 0x5d04 <__fp_splitA+0x20>
    5cec:	9f 3f       	cpi	r25, 0xFF	; 255
    5cee:	79 f0       	breq	.+30     	; 0x5d0e <__fp_splitA+0x2a>
    5cf0:	87 95       	ror	r24
    5cf2:	08 95       	ret
    5cf4:	12 16       	cp	r1, r18
    5cf6:	13 06       	cpc	r1, r19
    5cf8:	14 06       	cpc	r1, r20
    5cfa:	55 1f       	adc	r21, r21
    5cfc:	f2 cf       	rjmp	.-28     	; 0x5ce2 <__fp_split3+0xe>
    5cfe:	46 95       	lsr	r20
    5d00:	f1 df       	rcall	.-30     	; 0x5ce4 <__fp_splitA>
    5d02:	08 c0       	rjmp	.+16     	; 0x5d14 <__fp_splitA+0x30>
    5d04:	16 16       	cp	r1, r22
    5d06:	17 06       	cpc	r1, r23
    5d08:	18 06       	cpc	r1, r24
    5d0a:	99 1f       	adc	r25, r25
    5d0c:	f1 cf       	rjmp	.-30     	; 0x5cf0 <__fp_splitA+0xc>
    5d0e:	86 95       	lsr	r24
    5d10:	71 05       	cpc	r23, r1
    5d12:	61 05       	cpc	r22, r1
    5d14:	08 94       	sec
    5d16:	08 95       	ret

00005d18 <__fp_zero>:
    5d18:	e8 94       	clt

00005d1a <__fp_szero>:
    5d1a:	bb 27       	eor	r27, r27
    5d1c:	66 27       	eor	r22, r22
    5d1e:	77 27       	eor	r23, r23
    5d20:	cb 01       	movw	r24, r22
    5d22:	97 f9       	bld	r25, 7
    5d24:	08 95       	ret

00005d26 <__mulsf3>:
    5d26:	0b d0       	rcall	.+22     	; 0x5d3e <__mulsf3x>
    5d28:	c4 cf       	rjmp	.-120    	; 0x5cb2 <__fp_round>
    5d2a:	b5 df       	rcall	.-150    	; 0x5c96 <__fp_pscA>
    5d2c:	28 f0       	brcs	.+10     	; 0x5d38 <__mulsf3+0x12>
    5d2e:	ba df       	rcall	.-140    	; 0x5ca4 <__fp_pscB>
    5d30:	18 f0       	brcs	.+6      	; 0x5d38 <__mulsf3+0x12>
    5d32:	95 23       	and	r25, r21
    5d34:	09 f0       	breq	.+2      	; 0x5d38 <__mulsf3+0x12>
    5d36:	a6 cf       	rjmp	.-180    	; 0x5c84 <__fp_inf>
    5d38:	ab cf       	rjmp	.-170    	; 0x5c90 <__fp_nan>
    5d3a:	11 24       	eor	r1, r1
    5d3c:	ee cf       	rjmp	.-36     	; 0x5d1a <__fp_szero>

00005d3e <__mulsf3x>:
    5d3e:	ca df       	rcall	.-108    	; 0x5cd4 <__fp_split3>
    5d40:	a0 f3       	brcs	.-24     	; 0x5d2a <__mulsf3+0x4>

00005d42 <__mulsf3_pse>:
    5d42:	95 9f       	mul	r25, r21
    5d44:	d1 f3       	breq	.-12     	; 0x5d3a <__mulsf3+0x14>
    5d46:	95 0f       	add	r25, r21
    5d48:	50 e0       	ldi	r21, 0x00	; 0
    5d4a:	55 1f       	adc	r21, r21
    5d4c:	62 9f       	mul	r22, r18
    5d4e:	f0 01       	movw	r30, r0
    5d50:	72 9f       	mul	r23, r18
    5d52:	bb 27       	eor	r27, r27
    5d54:	f0 0d       	add	r31, r0
    5d56:	b1 1d       	adc	r27, r1
    5d58:	63 9f       	mul	r22, r19
    5d5a:	aa 27       	eor	r26, r26
    5d5c:	f0 0d       	add	r31, r0
    5d5e:	b1 1d       	adc	r27, r1
    5d60:	aa 1f       	adc	r26, r26
    5d62:	64 9f       	mul	r22, r20
    5d64:	66 27       	eor	r22, r22
    5d66:	b0 0d       	add	r27, r0
    5d68:	a1 1d       	adc	r26, r1
    5d6a:	66 1f       	adc	r22, r22
    5d6c:	82 9f       	mul	r24, r18
    5d6e:	22 27       	eor	r18, r18
    5d70:	b0 0d       	add	r27, r0
    5d72:	a1 1d       	adc	r26, r1
    5d74:	62 1f       	adc	r22, r18
    5d76:	73 9f       	mul	r23, r19
    5d78:	b0 0d       	add	r27, r0
    5d7a:	a1 1d       	adc	r26, r1
    5d7c:	62 1f       	adc	r22, r18
    5d7e:	83 9f       	mul	r24, r19
    5d80:	a0 0d       	add	r26, r0
    5d82:	61 1d       	adc	r22, r1
    5d84:	22 1f       	adc	r18, r18
    5d86:	74 9f       	mul	r23, r20
    5d88:	33 27       	eor	r19, r19
    5d8a:	a0 0d       	add	r26, r0
    5d8c:	61 1d       	adc	r22, r1
    5d8e:	23 1f       	adc	r18, r19
    5d90:	84 9f       	mul	r24, r20
    5d92:	60 0d       	add	r22, r0
    5d94:	21 1d       	adc	r18, r1
    5d96:	82 2f       	mov	r24, r18
    5d98:	76 2f       	mov	r23, r22
    5d9a:	6a 2f       	mov	r22, r26
    5d9c:	11 24       	eor	r1, r1
    5d9e:	9f 57       	subi	r25, 0x7F	; 127
    5da0:	50 40       	sbci	r21, 0x00	; 0
    5da2:	8a f0       	brmi	.+34     	; 0x5dc6 <__mulsf3_pse+0x84>
    5da4:	e1 f0       	breq	.+56     	; 0x5dde <__mulsf3_pse+0x9c>
    5da6:	88 23       	and	r24, r24
    5da8:	4a f0       	brmi	.+18     	; 0x5dbc <__mulsf3_pse+0x7a>
    5daa:	ee 0f       	add	r30, r30
    5dac:	ff 1f       	adc	r31, r31
    5dae:	bb 1f       	adc	r27, r27
    5db0:	66 1f       	adc	r22, r22
    5db2:	77 1f       	adc	r23, r23
    5db4:	88 1f       	adc	r24, r24
    5db6:	91 50       	subi	r25, 0x01	; 1
    5db8:	50 40       	sbci	r21, 0x00	; 0
    5dba:	a9 f7       	brne	.-22     	; 0x5da6 <__mulsf3_pse+0x64>
    5dbc:	9e 3f       	cpi	r25, 0xFE	; 254
    5dbe:	51 05       	cpc	r21, r1
    5dc0:	70 f0       	brcs	.+28     	; 0x5dde <__mulsf3_pse+0x9c>
    5dc2:	60 cf       	rjmp	.-320    	; 0x5c84 <__fp_inf>
    5dc4:	aa cf       	rjmp	.-172    	; 0x5d1a <__fp_szero>
    5dc6:	5f 3f       	cpi	r21, 0xFF	; 255
    5dc8:	ec f3       	brlt	.-6      	; 0x5dc4 <__mulsf3_pse+0x82>
    5dca:	98 3e       	cpi	r25, 0xE8	; 232
    5dcc:	dc f3       	brlt	.-10     	; 0x5dc4 <__mulsf3_pse+0x82>
    5dce:	86 95       	lsr	r24
    5dd0:	77 95       	ror	r23
    5dd2:	67 95       	ror	r22
    5dd4:	b7 95       	ror	r27
    5dd6:	f7 95       	ror	r31
    5dd8:	e7 95       	ror	r30
    5dda:	9f 5f       	subi	r25, 0xFF	; 255
    5ddc:	c1 f7       	brne	.-16     	; 0x5dce <__mulsf3_pse+0x8c>
    5dde:	fe 2b       	or	r31, r30
    5de0:	88 0f       	add	r24, r24
    5de2:	91 1d       	adc	r25, r1
    5de4:	96 95       	lsr	r25
    5de6:	87 95       	ror	r24
    5de8:	97 f9       	bld	r25, 7
    5dea:	08 95       	ret

00005dec <__udivmodsi4>:
    5dec:	a1 e2       	ldi	r26, 0x21	; 33
    5dee:	1a 2e       	mov	r1, r26
    5df0:	aa 1b       	sub	r26, r26
    5df2:	bb 1b       	sub	r27, r27
    5df4:	fd 01       	movw	r30, r26
    5df6:	0d c0       	rjmp	.+26     	; 0x5e12 <__udivmodsi4_ep>

00005df8 <__udivmodsi4_loop>:
    5df8:	aa 1f       	adc	r26, r26
    5dfa:	bb 1f       	adc	r27, r27
    5dfc:	ee 1f       	adc	r30, r30
    5dfe:	ff 1f       	adc	r31, r31
    5e00:	a2 17       	cp	r26, r18
    5e02:	b3 07       	cpc	r27, r19
    5e04:	e4 07       	cpc	r30, r20
    5e06:	f5 07       	cpc	r31, r21
    5e08:	20 f0       	brcs	.+8      	; 0x5e12 <__udivmodsi4_ep>
    5e0a:	a2 1b       	sub	r26, r18
    5e0c:	b3 0b       	sbc	r27, r19
    5e0e:	e4 0b       	sbc	r30, r20
    5e10:	f5 0b       	sbc	r31, r21

00005e12 <__udivmodsi4_ep>:
    5e12:	66 1f       	adc	r22, r22
    5e14:	77 1f       	adc	r23, r23
    5e16:	88 1f       	adc	r24, r24
    5e18:	99 1f       	adc	r25, r25
    5e1a:	1a 94       	dec	r1
    5e1c:	69 f7       	brne	.-38     	; 0x5df8 <__udivmodsi4_loop>
    5e1e:	60 95       	com	r22
    5e20:	70 95       	com	r23
    5e22:	80 95       	com	r24
    5e24:	90 95       	com	r25
    5e26:	9b 01       	movw	r18, r22
    5e28:	ac 01       	movw	r20, r24
    5e2a:	bd 01       	movw	r22, r26
    5e2c:	cf 01       	movw	r24, r30
    5e2e:	08 95       	ret

00005e30 <__tablejump2__>:
    5e30:	ee 0f       	add	r30, r30
    5e32:	ff 1f       	adc	r31, r31
    5e34:	88 1f       	adc	r24, r24
    5e36:	8b bf       	out	0x3b, r24	; 59
    5e38:	07 90       	elpm	r0, Z+
    5e3a:	f6 91       	elpm	r31, Z
    5e3c:	e0 2d       	mov	r30, r0
    5e3e:	19 94       	eijmp

00005e40 <calloc>:
    5e40:	0f 93       	push	r16
    5e42:	1f 93       	push	r17
    5e44:	cf 93       	push	r28
    5e46:	df 93       	push	r29
    5e48:	86 9f       	mul	r24, r22
    5e4a:	80 01       	movw	r16, r0
    5e4c:	87 9f       	mul	r24, r23
    5e4e:	10 0d       	add	r17, r0
    5e50:	96 9f       	mul	r25, r22
    5e52:	10 0d       	add	r17, r0
    5e54:	11 24       	eor	r1, r1
    5e56:	c8 01       	movw	r24, r16
    5e58:	0d d0       	rcall	.+26     	; 0x5e74 <malloc>
    5e5a:	ec 01       	movw	r28, r24
    5e5c:	00 97       	sbiw	r24, 0x00	; 0
    5e5e:	21 f0       	breq	.+8      	; 0x5e68 <calloc+0x28>
    5e60:	a8 01       	movw	r20, r16
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	70 e0       	ldi	r23, 0x00	; 0
    5e66:	34 d1       	rcall	.+616    	; 0x60d0 <memset>
    5e68:	ce 01       	movw	r24, r28
    5e6a:	df 91       	pop	r29
    5e6c:	cf 91       	pop	r28
    5e6e:	1f 91       	pop	r17
    5e70:	0f 91       	pop	r16
    5e72:	08 95       	ret

00005e74 <malloc>:
    5e74:	0f 93       	push	r16
    5e76:	1f 93       	push	r17
    5e78:	cf 93       	push	r28
    5e7a:	df 93       	push	r29
    5e7c:	82 30       	cpi	r24, 0x02	; 2
    5e7e:	91 05       	cpc	r25, r1
    5e80:	10 f4       	brcc	.+4      	; 0x5e86 <malloc+0x12>
    5e82:	82 e0       	ldi	r24, 0x02	; 2
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	e0 91 c7 18 	lds	r30, 0x18C7	; 0x8018c7 <__flp>
    5e8a:	f0 91 c8 18 	lds	r31, 0x18C8	; 0x8018c8 <__flp+0x1>
    5e8e:	20 e0       	ldi	r18, 0x00	; 0
    5e90:	30 e0       	ldi	r19, 0x00	; 0
    5e92:	a0 e0       	ldi	r26, 0x00	; 0
    5e94:	b0 e0       	ldi	r27, 0x00	; 0
    5e96:	30 97       	sbiw	r30, 0x00	; 0
    5e98:	19 f1       	breq	.+70     	; 0x5ee0 <malloc+0x6c>
    5e9a:	40 81       	ld	r20, Z
    5e9c:	51 81       	ldd	r21, Z+1	; 0x01
    5e9e:	02 81       	ldd	r16, Z+2	; 0x02
    5ea0:	13 81       	ldd	r17, Z+3	; 0x03
    5ea2:	48 17       	cp	r20, r24
    5ea4:	59 07       	cpc	r21, r25
    5ea6:	c8 f0       	brcs	.+50     	; 0x5eda <malloc+0x66>
    5ea8:	84 17       	cp	r24, r20
    5eaa:	95 07       	cpc	r25, r21
    5eac:	69 f4       	brne	.+26     	; 0x5ec8 <malloc+0x54>
    5eae:	10 97       	sbiw	r26, 0x00	; 0
    5eb0:	31 f0       	breq	.+12     	; 0x5ebe <malloc+0x4a>
    5eb2:	12 96       	adiw	r26, 0x02	; 2
    5eb4:	0c 93       	st	X, r16
    5eb6:	12 97       	sbiw	r26, 0x02	; 2
    5eb8:	13 96       	adiw	r26, 0x03	; 3
    5eba:	1c 93       	st	X, r17
    5ebc:	27 c0       	rjmp	.+78     	; 0x5f0c <malloc+0x98>
    5ebe:	00 93 c7 18 	sts	0x18C7, r16	; 0x8018c7 <__flp>
    5ec2:	10 93 c8 18 	sts	0x18C8, r17	; 0x8018c8 <__flp+0x1>
    5ec6:	22 c0       	rjmp	.+68     	; 0x5f0c <malloc+0x98>
    5ec8:	21 15       	cp	r18, r1
    5eca:	31 05       	cpc	r19, r1
    5ecc:	19 f0       	breq	.+6      	; 0x5ed4 <malloc+0x60>
    5ece:	42 17       	cp	r20, r18
    5ed0:	53 07       	cpc	r21, r19
    5ed2:	18 f4       	brcc	.+6      	; 0x5eda <malloc+0x66>
    5ed4:	9a 01       	movw	r18, r20
    5ed6:	bd 01       	movw	r22, r26
    5ed8:	ef 01       	movw	r28, r30
    5eda:	df 01       	movw	r26, r30
    5edc:	f8 01       	movw	r30, r16
    5ede:	db cf       	rjmp	.-74     	; 0x5e96 <malloc+0x22>
    5ee0:	21 15       	cp	r18, r1
    5ee2:	31 05       	cpc	r19, r1
    5ee4:	f9 f0       	breq	.+62     	; 0x5f24 <malloc+0xb0>
    5ee6:	28 1b       	sub	r18, r24
    5ee8:	39 0b       	sbc	r19, r25
    5eea:	24 30       	cpi	r18, 0x04	; 4
    5eec:	31 05       	cpc	r19, r1
    5eee:	80 f4       	brcc	.+32     	; 0x5f10 <malloc+0x9c>
    5ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ef4:	61 15       	cp	r22, r1
    5ef6:	71 05       	cpc	r23, r1
    5ef8:	21 f0       	breq	.+8      	; 0x5f02 <malloc+0x8e>
    5efa:	fb 01       	movw	r30, r22
    5efc:	93 83       	std	Z+3, r25	; 0x03
    5efe:	82 83       	std	Z+2, r24	; 0x02
    5f00:	04 c0       	rjmp	.+8      	; 0x5f0a <malloc+0x96>
    5f02:	90 93 c8 18 	sts	0x18C8, r25	; 0x8018c8 <__flp+0x1>
    5f06:	80 93 c7 18 	sts	0x18C7, r24	; 0x8018c7 <__flp>
    5f0a:	fe 01       	movw	r30, r28
    5f0c:	32 96       	adiw	r30, 0x02	; 2
    5f0e:	44 c0       	rjmp	.+136    	; 0x5f98 <malloc+0x124>
    5f10:	fe 01       	movw	r30, r28
    5f12:	e2 0f       	add	r30, r18
    5f14:	f3 1f       	adc	r31, r19
    5f16:	81 93       	st	Z+, r24
    5f18:	91 93       	st	Z+, r25
    5f1a:	22 50       	subi	r18, 0x02	; 2
    5f1c:	31 09       	sbc	r19, r1
    5f1e:	39 83       	std	Y+1, r19	; 0x01
    5f20:	28 83       	st	Y, r18
    5f22:	3a c0       	rjmp	.+116    	; 0x5f98 <malloc+0x124>
    5f24:	20 91 c5 18 	lds	r18, 0x18C5	; 0x8018c5 <__brkval>
    5f28:	30 91 c6 18 	lds	r19, 0x18C6	; 0x8018c6 <__brkval+0x1>
    5f2c:	23 2b       	or	r18, r19
    5f2e:	41 f4       	brne	.+16     	; 0x5f40 <malloc+0xcc>
    5f30:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5f34:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5f38:	30 93 c6 18 	sts	0x18C6, r19	; 0x8018c6 <__brkval+0x1>
    5f3c:	20 93 c5 18 	sts	0x18C5, r18	; 0x8018c5 <__brkval>
    5f40:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5f44:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5f48:	21 15       	cp	r18, r1
    5f4a:	31 05       	cpc	r19, r1
    5f4c:	41 f4       	brne	.+16     	; 0x5f5e <malloc+0xea>
    5f4e:	2d b7       	in	r18, 0x3d	; 61
    5f50:	3e b7       	in	r19, 0x3e	; 62
    5f52:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5f56:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5f5a:	24 1b       	sub	r18, r20
    5f5c:	35 0b       	sbc	r19, r21
    5f5e:	e0 91 c5 18 	lds	r30, 0x18C5	; 0x8018c5 <__brkval>
    5f62:	f0 91 c6 18 	lds	r31, 0x18C6	; 0x8018c6 <__brkval+0x1>
    5f66:	e2 17       	cp	r30, r18
    5f68:	f3 07       	cpc	r31, r19
    5f6a:	a0 f4       	brcc	.+40     	; 0x5f94 <malloc+0x120>
    5f6c:	2e 1b       	sub	r18, r30
    5f6e:	3f 0b       	sbc	r19, r31
    5f70:	28 17       	cp	r18, r24
    5f72:	39 07       	cpc	r19, r25
    5f74:	78 f0       	brcs	.+30     	; 0x5f94 <malloc+0x120>
    5f76:	ac 01       	movw	r20, r24
    5f78:	4e 5f       	subi	r20, 0xFE	; 254
    5f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f7c:	24 17       	cp	r18, r20
    5f7e:	35 07       	cpc	r19, r21
    5f80:	48 f0       	brcs	.+18     	; 0x5f94 <malloc+0x120>
    5f82:	4e 0f       	add	r20, r30
    5f84:	5f 1f       	adc	r21, r31
    5f86:	50 93 c6 18 	sts	0x18C6, r21	; 0x8018c6 <__brkval+0x1>
    5f8a:	40 93 c5 18 	sts	0x18C5, r20	; 0x8018c5 <__brkval>
    5f8e:	81 93       	st	Z+, r24
    5f90:	91 93       	st	Z+, r25
    5f92:	02 c0       	rjmp	.+4      	; 0x5f98 <malloc+0x124>
    5f94:	e0 e0       	ldi	r30, 0x00	; 0
    5f96:	f0 e0       	ldi	r31, 0x00	; 0
    5f98:	cf 01       	movw	r24, r30
    5f9a:	df 91       	pop	r29
    5f9c:	cf 91       	pop	r28
    5f9e:	1f 91       	pop	r17
    5fa0:	0f 91       	pop	r16
    5fa2:	08 95       	ret

00005fa4 <free>:
    5fa4:	cf 93       	push	r28
    5fa6:	df 93       	push	r29
    5fa8:	00 97       	sbiw	r24, 0x00	; 0
    5faa:	09 f4       	brne	.+2      	; 0x5fae <free+0xa>
    5fac:	81 c0       	rjmp	.+258    	; 0x60b0 <free+0x10c>
    5fae:	fc 01       	movw	r30, r24
    5fb0:	32 97       	sbiw	r30, 0x02	; 2
    5fb2:	13 82       	std	Z+3, r1	; 0x03
    5fb4:	12 82       	std	Z+2, r1	; 0x02
    5fb6:	a0 91 c7 18 	lds	r26, 0x18C7	; 0x8018c7 <__flp>
    5fba:	b0 91 c8 18 	lds	r27, 0x18C8	; 0x8018c8 <__flp+0x1>
    5fbe:	10 97       	sbiw	r26, 0x00	; 0
    5fc0:	81 f4       	brne	.+32     	; 0x5fe2 <free+0x3e>
    5fc2:	20 81       	ld	r18, Z
    5fc4:	31 81       	ldd	r19, Z+1	; 0x01
    5fc6:	82 0f       	add	r24, r18
    5fc8:	93 1f       	adc	r25, r19
    5fca:	20 91 c5 18 	lds	r18, 0x18C5	; 0x8018c5 <__brkval>
    5fce:	30 91 c6 18 	lds	r19, 0x18C6	; 0x8018c6 <__brkval+0x1>
    5fd2:	28 17       	cp	r18, r24
    5fd4:	39 07       	cpc	r19, r25
    5fd6:	51 f5       	brne	.+84     	; 0x602c <free+0x88>
    5fd8:	f0 93 c6 18 	sts	0x18C6, r31	; 0x8018c6 <__brkval+0x1>
    5fdc:	e0 93 c5 18 	sts	0x18C5, r30	; 0x8018c5 <__brkval>
    5fe0:	67 c0       	rjmp	.+206    	; 0x60b0 <free+0x10c>
    5fe2:	ed 01       	movw	r28, r26
    5fe4:	20 e0       	ldi	r18, 0x00	; 0
    5fe6:	30 e0       	ldi	r19, 0x00	; 0
    5fe8:	ce 17       	cp	r28, r30
    5fea:	df 07       	cpc	r29, r31
    5fec:	40 f4       	brcc	.+16     	; 0x5ffe <free+0x5a>
    5fee:	4a 81       	ldd	r20, Y+2	; 0x02
    5ff0:	5b 81       	ldd	r21, Y+3	; 0x03
    5ff2:	9e 01       	movw	r18, r28
    5ff4:	41 15       	cp	r20, r1
    5ff6:	51 05       	cpc	r21, r1
    5ff8:	f1 f0       	breq	.+60     	; 0x6036 <free+0x92>
    5ffa:	ea 01       	movw	r28, r20
    5ffc:	f5 cf       	rjmp	.-22     	; 0x5fe8 <free+0x44>
    5ffe:	d3 83       	std	Z+3, r29	; 0x03
    6000:	c2 83       	std	Z+2, r28	; 0x02
    6002:	40 81       	ld	r20, Z
    6004:	51 81       	ldd	r21, Z+1	; 0x01
    6006:	84 0f       	add	r24, r20
    6008:	95 1f       	adc	r25, r21
    600a:	c8 17       	cp	r28, r24
    600c:	d9 07       	cpc	r29, r25
    600e:	59 f4       	brne	.+22     	; 0x6026 <free+0x82>
    6010:	88 81       	ld	r24, Y
    6012:	99 81       	ldd	r25, Y+1	; 0x01
    6014:	84 0f       	add	r24, r20
    6016:	95 1f       	adc	r25, r21
    6018:	02 96       	adiw	r24, 0x02	; 2
    601a:	91 83       	std	Z+1, r25	; 0x01
    601c:	80 83       	st	Z, r24
    601e:	8a 81       	ldd	r24, Y+2	; 0x02
    6020:	9b 81       	ldd	r25, Y+3	; 0x03
    6022:	93 83       	std	Z+3, r25	; 0x03
    6024:	82 83       	std	Z+2, r24	; 0x02
    6026:	21 15       	cp	r18, r1
    6028:	31 05       	cpc	r19, r1
    602a:	29 f4       	brne	.+10     	; 0x6036 <free+0x92>
    602c:	f0 93 c8 18 	sts	0x18C8, r31	; 0x8018c8 <__flp+0x1>
    6030:	e0 93 c7 18 	sts	0x18C7, r30	; 0x8018c7 <__flp>
    6034:	3d c0       	rjmp	.+122    	; 0x60b0 <free+0x10c>
    6036:	e9 01       	movw	r28, r18
    6038:	fb 83       	std	Y+3, r31	; 0x03
    603a:	ea 83       	std	Y+2, r30	; 0x02
    603c:	49 91       	ld	r20, Y+
    603e:	59 91       	ld	r21, Y+
    6040:	c4 0f       	add	r28, r20
    6042:	d5 1f       	adc	r29, r21
    6044:	ec 17       	cp	r30, r28
    6046:	fd 07       	cpc	r31, r29
    6048:	61 f4       	brne	.+24     	; 0x6062 <free+0xbe>
    604a:	80 81       	ld	r24, Z
    604c:	91 81       	ldd	r25, Z+1	; 0x01
    604e:	84 0f       	add	r24, r20
    6050:	95 1f       	adc	r25, r21
    6052:	02 96       	adiw	r24, 0x02	; 2
    6054:	e9 01       	movw	r28, r18
    6056:	99 83       	std	Y+1, r25	; 0x01
    6058:	88 83       	st	Y, r24
    605a:	82 81       	ldd	r24, Z+2	; 0x02
    605c:	93 81       	ldd	r25, Z+3	; 0x03
    605e:	9b 83       	std	Y+3, r25	; 0x03
    6060:	8a 83       	std	Y+2, r24	; 0x02
    6062:	e0 e0       	ldi	r30, 0x00	; 0
    6064:	f0 e0       	ldi	r31, 0x00	; 0
    6066:	12 96       	adiw	r26, 0x02	; 2
    6068:	8d 91       	ld	r24, X+
    606a:	9c 91       	ld	r25, X
    606c:	13 97       	sbiw	r26, 0x03	; 3
    606e:	00 97       	sbiw	r24, 0x00	; 0
    6070:	19 f0       	breq	.+6      	; 0x6078 <free+0xd4>
    6072:	fd 01       	movw	r30, r26
    6074:	dc 01       	movw	r26, r24
    6076:	f7 cf       	rjmp	.-18     	; 0x6066 <free+0xc2>
    6078:	8d 91       	ld	r24, X+
    607a:	9c 91       	ld	r25, X
    607c:	11 97       	sbiw	r26, 0x01	; 1
    607e:	9d 01       	movw	r18, r26
    6080:	2e 5f       	subi	r18, 0xFE	; 254
    6082:	3f 4f       	sbci	r19, 0xFF	; 255
    6084:	82 0f       	add	r24, r18
    6086:	93 1f       	adc	r25, r19
    6088:	20 91 c5 18 	lds	r18, 0x18C5	; 0x8018c5 <__brkval>
    608c:	30 91 c6 18 	lds	r19, 0x18C6	; 0x8018c6 <__brkval+0x1>
    6090:	28 17       	cp	r18, r24
    6092:	39 07       	cpc	r19, r25
    6094:	69 f4       	brne	.+26     	; 0x60b0 <free+0x10c>
    6096:	30 97       	sbiw	r30, 0x00	; 0
    6098:	29 f4       	brne	.+10     	; 0x60a4 <free+0x100>
    609a:	10 92 c8 18 	sts	0x18C8, r1	; 0x8018c8 <__flp+0x1>
    609e:	10 92 c7 18 	sts	0x18C7, r1	; 0x8018c7 <__flp>
    60a2:	02 c0       	rjmp	.+4      	; 0x60a8 <free+0x104>
    60a4:	13 82       	std	Z+3, r1	; 0x03
    60a6:	12 82       	std	Z+2, r1	; 0x02
    60a8:	b0 93 c6 18 	sts	0x18C6, r27	; 0x8018c6 <__brkval+0x1>
    60ac:	a0 93 c5 18 	sts	0x18C5, r26	; 0x8018c5 <__brkval>
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	08 95       	ret

000060b6 <abort>:
    60b6:	81 e0       	ldi	r24, 0x01	; 1
    60b8:	90 e0       	ldi	r25, 0x00	; 0
    60ba:	f8 94       	cli
    60bc:	7d c3       	rjmp	.+1786   	; 0x67b8 <_exit>

000060be <memcpy>:
    60be:	fb 01       	movw	r30, r22
    60c0:	dc 01       	movw	r26, r24
    60c2:	02 c0       	rjmp	.+4      	; 0x60c8 <memcpy+0xa>
    60c4:	01 90       	ld	r0, Z+
    60c6:	0d 92       	st	X+, r0
    60c8:	41 50       	subi	r20, 0x01	; 1
    60ca:	50 40       	sbci	r21, 0x00	; 0
    60cc:	d8 f7       	brcc	.-10     	; 0x60c4 <memcpy+0x6>
    60ce:	08 95       	ret

000060d0 <memset>:
    60d0:	dc 01       	movw	r26, r24
    60d2:	01 c0       	rjmp	.+2      	; 0x60d6 <memset+0x6>
    60d4:	6d 93       	st	X+, r22
    60d6:	41 50       	subi	r20, 0x01	; 1
    60d8:	50 40       	sbci	r21, 0x00	; 0
    60da:	e0 f7       	brcc	.-8      	; 0x60d4 <memset+0x4>
    60dc:	08 95       	ret

000060de <strcasestr>:
    60de:	fb 01       	movw	r30, r22
    60e0:	51 91       	ld	r21, Z+
    60e2:	55 23       	and	r21, r21
    60e4:	b1 f0       	breq	.+44     	; 0x6112 <strcasestr+0x34>
    60e6:	bf 01       	movw	r22, r30
    60e8:	dc 01       	movw	r26, r24
    60ea:	05 2e       	mov	r0, r21
    60ec:	4d 91       	ld	r20, X+
    60ee:	44 23       	and	r20, r20
    60f0:	69 f0       	breq	.+26     	; 0x610c <strcasestr+0x2e>
    60f2:	10 d0       	rcall	.+32     	; 0x6114 <strcasestr+0x36>
    60f4:	d9 f7       	brne	.-10     	; 0x60ec <strcasestr+0xe>
    60f6:	cd 01       	movw	r24, r26
    60f8:	01 90       	ld	r0, Z+
    60fa:	00 20       	and	r0, r0
    60fc:	49 f0       	breq	.+18     	; 0x6110 <strcasestr+0x32>
    60fe:	4d 91       	ld	r20, X+
    6100:	41 11       	cpse	r20, r1
    6102:	08 d0       	rcall	.+16     	; 0x6114 <strcasestr+0x36>
    6104:	c9 f3       	breq	.-14     	; 0x60f8 <strcasestr+0x1a>
    6106:	fb 01       	movw	r30, r22
    6108:	41 11       	cpse	r20, r1
    610a:	ee cf       	rjmp	.-36     	; 0x60e8 <strcasestr+0xa>
    610c:	81 e0       	ldi	r24, 0x01	; 1
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	01 97       	sbiw	r24, 0x01	; 1
    6112:	08 95       	ret
    6114:	40 25       	eor	r20, r0
    6116:	39 f0       	breq	.+14     	; 0x6126 <strcasestr+0x48>
    6118:	40 32       	cpi	r20, 0x20	; 32
    611a:	29 f4       	brne	.+10     	; 0x6126 <strcasestr+0x48>
    611c:	40 29       	or	r20, r0
    611e:	4b 57       	subi	r20, 0x7B	; 123
    6120:	46 5e       	subi	r20, 0xE6	; 230
    6122:	08 f0       	brcs	.+2      	; 0x6126 <strcasestr+0x48>
    6124:	18 94       	sez
    6126:	08 95       	ret

00006128 <strcat>:
    6128:	fb 01       	movw	r30, r22
    612a:	dc 01       	movw	r26, r24
    612c:	0d 90       	ld	r0, X+
    612e:	00 20       	and	r0, r0
    6130:	e9 f7       	brne	.-6      	; 0x612c <strcat+0x4>
    6132:	11 97       	sbiw	r26, 0x01	; 1
    6134:	01 90       	ld	r0, Z+
    6136:	0d 92       	st	X+, r0
    6138:	00 20       	and	r0, r0
    613a:	e1 f7       	brne	.-8      	; 0x6134 <strcat+0xc>
    613c:	08 95       	ret

0000613e <strcpy>:
    613e:	fb 01       	movw	r30, r22
    6140:	dc 01       	movw	r26, r24
    6142:	01 90       	ld	r0, Z+
    6144:	0d 92       	st	X+, r0
    6146:	00 20       	and	r0, r0
    6148:	e1 f7       	brne	.-8      	; 0x6142 <strcpy+0x4>
    614a:	08 95       	ret

0000614c <strncasecmp>:
    614c:	fb 01       	movw	r30, r22
    614e:	dc 01       	movw	r26, r24
    6150:	41 50       	subi	r20, 0x01	; 1
    6152:	50 40       	sbci	r21, 0x00	; 0
    6154:	88 f0       	brcs	.+34     	; 0x6178 <strncasecmp+0x2c>
    6156:	8d 91       	ld	r24, X+
    6158:	81 34       	cpi	r24, 0x41	; 65
    615a:	1c f0       	brlt	.+6      	; 0x6162 <strncasecmp+0x16>
    615c:	8b 35       	cpi	r24, 0x5B	; 91
    615e:	0c f4       	brge	.+2      	; 0x6162 <strncasecmp+0x16>
    6160:	80 5e       	subi	r24, 0xE0	; 224
    6162:	61 91       	ld	r22, Z+
    6164:	61 34       	cpi	r22, 0x41	; 65
    6166:	1c f0       	brlt	.+6      	; 0x616e <strncasecmp+0x22>
    6168:	6b 35       	cpi	r22, 0x5B	; 91
    616a:	0c f4       	brge	.+2      	; 0x616e <strncasecmp+0x22>
    616c:	60 5e       	subi	r22, 0xE0	; 224
    616e:	86 1b       	sub	r24, r22
    6170:	61 11       	cpse	r22, r1
    6172:	71 f3       	breq	.-36     	; 0x6150 <strncasecmp+0x4>
    6174:	99 0b       	sbc	r25, r25
    6176:	08 95       	ret
    6178:	88 1b       	sub	r24, r24
    617a:	fc cf       	rjmp	.-8      	; 0x6174 <strncasecmp+0x28>

0000617c <printf>:
    617c:	cf 93       	push	r28
    617e:	df 93       	push	r29
    6180:	cd b7       	in	r28, 0x3d	; 61
    6182:	de b7       	in	r29, 0x3e	; 62
    6184:	ae 01       	movw	r20, r28
    6186:	4a 5f       	subi	r20, 0xFA	; 250
    6188:	5f 4f       	sbci	r21, 0xFF	; 255
    618a:	fa 01       	movw	r30, r20
    618c:	61 91       	ld	r22, Z+
    618e:	71 91       	ld	r23, Z+
    6190:	af 01       	movw	r20, r30
    6192:	80 91 cb 18 	lds	r24, 0x18CB	; 0x8018cb <__iob+0x2>
    6196:	90 91 cc 18 	lds	r25, 0x18CC	; 0x8018cc <__iob+0x3>
    619a:	61 d0       	rcall	.+194    	; 0x625e <vfprintf>
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	08 95       	ret

000061a2 <puts>:
    61a2:	0f 93       	push	r16
    61a4:	1f 93       	push	r17
    61a6:	cf 93       	push	r28
    61a8:	df 93       	push	r29
    61aa:	e0 91 cb 18 	lds	r30, 0x18CB	; 0x8018cb <__iob+0x2>
    61ae:	f0 91 cc 18 	lds	r31, 0x18CC	; 0x8018cc <__iob+0x3>
    61b2:	23 81       	ldd	r18, Z+3	; 0x03
    61b4:	21 ff       	sbrs	r18, 1
    61b6:	1b c0       	rjmp	.+54     	; 0x61ee <puts+0x4c>
    61b8:	8c 01       	movw	r16, r24
    61ba:	d0 e0       	ldi	r29, 0x00	; 0
    61bc:	c0 e0       	ldi	r28, 0x00	; 0
    61be:	f8 01       	movw	r30, r16
    61c0:	81 91       	ld	r24, Z+
    61c2:	8f 01       	movw	r16, r30
    61c4:	60 91 cb 18 	lds	r22, 0x18CB	; 0x8018cb <__iob+0x2>
    61c8:	70 91 cc 18 	lds	r23, 0x18CC	; 0x8018cc <__iob+0x3>
    61cc:	db 01       	movw	r26, r22
    61ce:	18 96       	adiw	r26, 0x08	; 8
    61d0:	ed 91       	ld	r30, X+
    61d2:	fc 91       	ld	r31, X
    61d4:	19 97       	sbiw	r26, 0x09	; 9
    61d6:	88 23       	and	r24, r24
    61d8:	31 f0       	breq	.+12     	; 0x61e6 <puts+0x44>
    61da:	19 95       	eicall
    61dc:	89 2b       	or	r24, r25
    61de:	79 f3       	breq	.-34     	; 0x61be <puts+0x1c>
    61e0:	df ef       	ldi	r29, 0xFF	; 255
    61e2:	cf ef       	ldi	r28, 0xFF	; 255
    61e4:	ec cf       	rjmp	.-40     	; 0x61be <puts+0x1c>
    61e6:	8a e0       	ldi	r24, 0x0A	; 10
    61e8:	19 95       	eicall
    61ea:	89 2b       	or	r24, r25
    61ec:	19 f0       	breq	.+6      	; 0x61f4 <puts+0x52>
    61ee:	8f ef       	ldi	r24, 0xFF	; 255
    61f0:	9f ef       	ldi	r25, 0xFF	; 255
    61f2:	02 c0       	rjmp	.+4      	; 0x61f8 <puts+0x56>
    61f4:	8d 2f       	mov	r24, r29
    61f6:	9c 2f       	mov	r25, r28
    61f8:	df 91       	pop	r29
    61fa:	cf 91       	pop	r28
    61fc:	1f 91       	pop	r17
    61fe:	0f 91       	pop	r16
    6200:	08 95       	ret

00006202 <sprintf>:
    6202:	0f 93       	push	r16
    6204:	1f 93       	push	r17
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
    620a:	cd b7       	in	r28, 0x3d	; 61
    620c:	de b7       	in	r29, 0x3e	; 62
    620e:	2e 97       	sbiw	r28, 0x0e	; 14
    6210:	0f b6       	in	r0, 0x3f	; 63
    6212:	f8 94       	cli
    6214:	de bf       	out	0x3e, r29	; 62
    6216:	0f be       	out	0x3f, r0	; 63
    6218:	cd bf       	out	0x3d, r28	; 61
    621a:	0e 89       	ldd	r16, Y+22	; 0x16
    621c:	1f 89       	ldd	r17, Y+23	; 0x17
    621e:	86 e0       	ldi	r24, 0x06	; 6
    6220:	8c 83       	std	Y+4, r24	; 0x04
    6222:	1a 83       	std	Y+2, r17	; 0x02
    6224:	09 83       	std	Y+1, r16	; 0x01
    6226:	8f ef       	ldi	r24, 0xFF	; 255
    6228:	9f e7       	ldi	r25, 0x7F	; 127
    622a:	9e 83       	std	Y+6, r25	; 0x06
    622c:	8d 83       	std	Y+5, r24	; 0x05
    622e:	ae 01       	movw	r20, r28
    6230:	46 5e       	subi	r20, 0xE6	; 230
    6232:	5f 4f       	sbci	r21, 0xFF	; 255
    6234:	68 8d       	ldd	r22, Y+24	; 0x18
    6236:	79 8d       	ldd	r23, Y+25	; 0x19
    6238:	ce 01       	movw	r24, r28
    623a:	01 96       	adiw	r24, 0x01	; 1
    623c:	10 d0       	rcall	.+32     	; 0x625e <vfprintf>
    623e:	ef 81       	ldd	r30, Y+7	; 0x07
    6240:	f8 85       	ldd	r31, Y+8	; 0x08
    6242:	e0 0f       	add	r30, r16
    6244:	f1 1f       	adc	r31, r17
    6246:	10 82       	st	Z, r1
    6248:	2e 96       	adiw	r28, 0x0e	; 14
    624a:	0f b6       	in	r0, 0x3f	; 63
    624c:	f8 94       	cli
    624e:	de bf       	out	0x3e, r29	; 62
    6250:	0f be       	out	0x3f, r0	; 63
    6252:	cd bf       	out	0x3d, r28	; 61
    6254:	df 91       	pop	r29
    6256:	cf 91       	pop	r28
    6258:	1f 91       	pop	r17
    625a:	0f 91       	pop	r16
    625c:	08 95       	ret

0000625e <vfprintf>:
    625e:	2f 92       	push	r2
    6260:	3f 92       	push	r3
    6262:	4f 92       	push	r4
    6264:	5f 92       	push	r5
    6266:	6f 92       	push	r6
    6268:	7f 92       	push	r7
    626a:	8f 92       	push	r8
    626c:	9f 92       	push	r9
    626e:	af 92       	push	r10
    6270:	bf 92       	push	r11
    6272:	cf 92       	push	r12
    6274:	df 92       	push	r13
    6276:	ef 92       	push	r14
    6278:	ff 92       	push	r15
    627a:	0f 93       	push	r16
    627c:	1f 93       	push	r17
    627e:	cf 93       	push	r28
    6280:	df 93       	push	r29
    6282:	cd b7       	in	r28, 0x3d	; 61
    6284:	de b7       	in	r29, 0x3e	; 62
    6286:	2b 97       	sbiw	r28, 0x0b	; 11
    6288:	0f b6       	in	r0, 0x3f	; 63
    628a:	f8 94       	cli
    628c:	de bf       	out	0x3e, r29	; 62
    628e:	0f be       	out	0x3f, r0	; 63
    6290:	cd bf       	out	0x3d, r28	; 61
    6292:	6c 01       	movw	r12, r24
    6294:	7b 01       	movw	r14, r22
    6296:	8a 01       	movw	r16, r20
    6298:	fc 01       	movw	r30, r24
    629a:	17 82       	std	Z+7, r1	; 0x07
    629c:	16 82       	std	Z+6, r1	; 0x06
    629e:	83 81       	ldd	r24, Z+3	; 0x03
    62a0:	81 ff       	sbrs	r24, 1
    62a2:	bf c1       	rjmp	.+894    	; 0x6622 <vfprintf+0x3c4>
    62a4:	ce 01       	movw	r24, r28
    62a6:	01 96       	adiw	r24, 0x01	; 1
    62a8:	3c 01       	movw	r6, r24
    62aa:	f6 01       	movw	r30, r12
    62ac:	93 81       	ldd	r25, Z+3	; 0x03
    62ae:	f7 01       	movw	r30, r14
    62b0:	93 fd       	sbrc	r25, 3
    62b2:	85 91       	lpm	r24, Z+
    62b4:	93 ff       	sbrs	r25, 3
    62b6:	81 91       	ld	r24, Z+
    62b8:	7f 01       	movw	r14, r30
    62ba:	88 23       	and	r24, r24
    62bc:	09 f4       	brne	.+2      	; 0x62c0 <vfprintf+0x62>
    62be:	ad c1       	rjmp	.+858    	; 0x661a <vfprintf+0x3bc>
    62c0:	85 32       	cpi	r24, 0x25	; 37
    62c2:	39 f4       	brne	.+14     	; 0x62d2 <vfprintf+0x74>
    62c4:	93 fd       	sbrc	r25, 3
    62c6:	85 91       	lpm	r24, Z+
    62c8:	93 ff       	sbrs	r25, 3
    62ca:	81 91       	ld	r24, Z+
    62cc:	7f 01       	movw	r14, r30
    62ce:	85 32       	cpi	r24, 0x25	; 37
    62d0:	21 f4       	brne	.+8      	; 0x62da <vfprintf+0x7c>
    62d2:	b6 01       	movw	r22, r12
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	d6 d1       	rcall	.+940    	; 0x6684 <fputc>
    62d8:	e8 cf       	rjmp	.-48     	; 0x62aa <vfprintf+0x4c>
    62da:	91 2c       	mov	r9, r1
    62dc:	21 2c       	mov	r2, r1
    62de:	31 2c       	mov	r3, r1
    62e0:	ff e1       	ldi	r31, 0x1F	; 31
    62e2:	f3 15       	cp	r31, r3
    62e4:	d8 f0       	brcs	.+54     	; 0x631c <vfprintf+0xbe>
    62e6:	8b 32       	cpi	r24, 0x2B	; 43
    62e8:	79 f0       	breq	.+30     	; 0x6308 <vfprintf+0xaa>
    62ea:	38 f4       	brcc	.+14     	; 0x62fa <vfprintf+0x9c>
    62ec:	80 32       	cpi	r24, 0x20	; 32
    62ee:	79 f0       	breq	.+30     	; 0x630e <vfprintf+0xb0>
    62f0:	83 32       	cpi	r24, 0x23	; 35
    62f2:	a1 f4       	brne	.+40     	; 0x631c <vfprintf+0xbe>
    62f4:	23 2d       	mov	r18, r3
    62f6:	20 61       	ori	r18, 0x10	; 16
    62f8:	1d c0       	rjmp	.+58     	; 0x6334 <vfprintf+0xd6>
    62fa:	8d 32       	cpi	r24, 0x2D	; 45
    62fc:	61 f0       	breq	.+24     	; 0x6316 <vfprintf+0xb8>
    62fe:	80 33       	cpi	r24, 0x30	; 48
    6300:	69 f4       	brne	.+26     	; 0x631c <vfprintf+0xbe>
    6302:	23 2d       	mov	r18, r3
    6304:	21 60       	ori	r18, 0x01	; 1
    6306:	16 c0       	rjmp	.+44     	; 0x6334 <vfprintf+0xd6>
    6308:	83 2d       	mov	r24, r3
    630a:	82 60       	ori	r24, 0x02	; 2
    630c:	38 2e       	mov	r3, r24
    630e:	e3 2d       	mov	r30, r3
    6310:	e4 60       	ori	r30, 0x04	; 4
    6312:	3e 2e       	mov	r3, r30
    6314:	2a c0       	rjmp	.+84     	; 0x636a <vfprintf+0x10c>
    6316:	f3 2d       	mov	r31, r3
    6318:	f8 60       	ori	r31, 0x08	; 8
    631a:	1d c0       	rjmp	.+58     	; 0x6356 <vfprintf+0xf8>
    631c:	37 fc       	sbrc	r3, 7
    631e:	2d c0       	rjmp	.+90     	; 0x637a <vfprintf+0x11c>
    6320:	20 ed       	ldi	r18, 0xD0	; 208
    6322:	28 0f       	add	r18, r24
    6324:	2a 30       	cpi	r18, 0x0A	; 10
    6326:	40 f0       	brcs	.+16     	; 0x6338 <vfprintf+0xda>
    6328:	8e 32       	cpi	r24, 0x2E	; 46
    632a:	b9 f4       	brne	.+46     	; 0x635a <vfprintf+0xfc>
    632c:	36 fc       	sbrc	r3, 6
    632e:	75 c1       	rjmp	.+746    	; 0x661a <vfprintf+0x3bc>
    6330:	23 2d       	mov	r18, r3
    6332:	20 64       	ori	r18, 0x40	; 64
    6334:	32 2e       	mov	r3, r18
    6336:	19 c0       	rjmp	.+50     	; 0x636a <vfprintf+0x10c>
    6338:	36 fe       	sbrs	r3, 6
    633a:	06 c0       	rjmp	.+12     	; 0x6348 <vfprintf+0xea>
    633c:	8a e0       	ldi	r24, 0x0A	; 10
    633e:	98 9e       	mul	r9, r24
    6340:	20 0d       	add	r18, r0
    6342:	11 24       	eor	r1, r1
    6344:	92 2e       	mov	r9, r18
    6346:	11 c0       	rjmp	.+34     	; 0x636a <vfprintf+0x10c>
    6348:	ea e0       	ldi	r30, 0x0A	; 10
    634a:	2e 9e       	mul	r2, r30
    634c:	20 0d       	add	r18, r0
    634e:	11 24       	eor	r1, r1
    6350:	22 2e       	mov	r2, r18
    6352:	f3 2d       	mov	r31, r3
    6354:	f0 62       	ori	r31, 0x20	; 32
    6356:	3f 2e       	mov	r3, r31
    6358:	08 c0       	rjmp	.+16     	; 0x636a <vfprintf+0x10c>
    635a:	8c 36       	cpi	r24, 0x6C	; 108
    635c:	21 f4       	brne	.+8      	; 0x6366 <vfprintf+0x108>
    635e:	83 2d       	mov	r24, r3
    6360:	80 68       	ori	r24, 0x80	; 128
    6362:	38 2e       	mov	r3, r24
    6364:	02 c0       	rjmp	.+4      	; 0x636a <vfprintf+0x10c>
    6366:	88 36       	cpi	r24, 0x68	; 104
    6368:	41 f4       	brne	.+16     	; 0x637a <vfprintf+0x11c>
    636a:	f7 01       	movw	r30, r14
    636c:	93 fd       	sbrc	r25, 3
    636e:	85 91       	lpm	r24, Z+
    6370:	93 ff       	sbrs	r25, 3
    6372:	81 91       	ld	r24, Z+
    6374:	7f 01       	movw	r14, r30
    6376:	81 11       	cpse	r24, r1
    6378:	b3 cf       	rjmp	.-154    	; 0x62e0 <vfprintf+0x82>
    637a:	98 2f       	mov	r25, r24
    637c:	9f 7d       	andi	r25, 0xDF	; 223
    637e:	95 54       	subi	r25, 0x45	; 69
    6380:	93 30       	cpi	r25, 0x03	; 3
    6382:	28 f4       	brcc	.+10     	; 0x638e <vfprintf+0x130>
    6384:	0c 5f       	subi	r16, 0xFC	; 252
    6386:	1f 4f       	sbci	r17, 0xFF	; 255
    6388:	9f e3       	ldi	r25, 0x3F	; 63
    638a:	99 83       	std	Y+1, r25	; 0x01
    638c:	0d c0       	rjmp	.+26     	; 0x63a8 <vfprintf+0x14a>
    638e:	83 36       	cpi	r24, 0x63	; 99
    6390:	31 f0       	breq	.+12     	; 0x639e <vfprintf+0x140>
    6392:	83 37       	cpi	r24, 0x73	; 115
    6394:	71 f0       	breq	.+28     	; 0x63b2 <vfprintf+0x154>
    6396:	83 35       	cpi	r24, 0x53	; 83
    6398:	09 f0       	breq	.+2      	; 0x639c <vfprintf+0x13e>
    639a:	55 c0       	rjmp	.+170    	; 0x6446 <vfprintf+0x1e8>
    639c:	20 c0       	rjmp	.+64     	; 0x63de <vfprintf+0x180>
    639e:	f8 01       	movw	r30, r16
    63a0:	80 81       	ld	r24, Z
    63a2:	89 83       	std	Y+1, r24	; 0x01
    63a4:	0e 5f       	subi	r16, 0xFE	; 254
    63a6:	1f 4f       	sbci	r17, 0xFF	; 255
    63a8:	88 24       	eor	r8, r8
    63aa:	83 94       	inc	r8
    63ac:	91 2c       	mov	r9, r1
    63ae:	53 01       	movw	r10, r6
    63b0:	12 c0       	rjmp	.+36     	; 0x63d6 <vfprintf+0x178>
    63b2:	28 01       	movw	r4, r16
    63b4:	f2 e0       	ldi	r31, 0x02	; 2
    63b6:	4f 0e       	add	r4, r31
    63b8:	51 1c       	adc	r5, r1
    63ba:	f8 01       	movw	r30, r16
    63bc:	a0 80       	ld	r10, Z
    63be:	b1 80       	ldd	r11, Z+1	; 0x01
    63c0:	36 fe       	sbrs	r3, 6
    63c2:	03 c0       	rjmp	.+6      	; 0x63ca <vfprintf+0x16c>
    63c4:	69 2d       	mov	r22, r9
    63c6:	70 e0       	ldi	r23, 0x00	; 0
    63c8:	02 c0       	rjmp	.+4      	; 0x63ce <vfprintf+0x170>
    63ca:	6f ef       	ldi	r22, 0xFF	; 255
    63cc:	7f ef       	ldi	r23, 0xFF	; 255
    63ce:	c5 01       	movw	r24, r10
    63d0:	4e d1       	rcall	.+668    	; 0x666e <strnlen>
    63d2:	4c 01       	movw	r8, r24
    63d4:	82 01       	movw	r16, r4
    63d6:	f3 2d       	mov	r31, r3
    63d8:	ff 77       	andi	r31, 0x7F	; 127
    63da:	3f 2e       	mov	r3, r31
    63dc:	15 c0       	rjmp	.+42     	; 0x6408 <vfprintf+0x1aa>
    63de:	28 01       	movw	r4, r16
    63e0:	22 e0       	ldi	r18, 0x02	; 2
    63e2:	42 0e       	add	r4, r18
    63e4:	51 1c       	adc	r5, r1
    63e6:	f8 01       	movw	r30, r16
    63e8:	a0 80       	ld	r10, Z
    63ea:	b1 80       	ldd	r11, Z+1	; 0x01
    63ec:	36 fe       	sbrs	r3, 6
    63ee:	03 c0       	rjmp	.+6      	; 0x63f6 <vfprintf+0x198>
    63f0:	69 2d       	mov	r22, r9
    63f2:	70 e0       	ldi	r23, 0x00	; 0
    63f4:	02 c0       	rjmp	.+4      	; 0x63fa <vfprintf+0x19c>
    63f6:	6f ef       	ldi	r22, 0xFF	; 255
    63f8:	7f ef       	ldi	r23, 0xFF	; 255
    63fa:	c5 01       	movw	r24, r10
    63fc:	2d d1       	rcall	.+602    	; 0x6658 <strnlen_P>
    63fe:	4c 01       	movw	r8, r24
    6400:	f3 2d       	mov	r31, r3
    6402:	f0 68       	ori	r31, 0x80	; 128
    6404:	3f 2e       	mov	r3, r31
    6406:	82 01       	movw	r16, r4
    6408:	33 fc       	sbrc	r3, 3
    640a:	19 c0       	rjmp	.+50     	; 0x643e <vfprintf+0x1e0>
    640c:	82 2d       	mov	r24, r2
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	88 16       	cp	r8, r24
    6412:	99 06       	cpc	r9, r25
    6414:	a0 f4       	brcc	.+40     	; 0x643e <vfprintf+0x1e0>
    6416:	b6 01       	movw	r22, r12
    6418:	80 e2       	ldi	r24, 0x20	; 32
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	33 d1       	rcall	.+614    	; 0x6684 <fputc>
    641e:	2a 94       	dec	r2
    6420:	f5 cf       	rjmp	.-22     	; 0x640c <vfprintf+0x1ae>
    6422:	f5 01       	movw	r30, r10
    6424:	37 fc       	sbrc	r3, 7
    6426:	85 91       	lpm	r24, Z+
    6428:	37 fe       	sbrs	r3, 7
    642a:	81 91       	ld	r24, Z+
    642c:	5f 01       	movw	r10, r30
    642e:	b6 01       	movw	r22, r12
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	28 d1       	rcall	.+592    	; 0x6684 <fputc>
    6434:	21 10       	cpse	r2, r1
    6436:	2a 94       	dec	r2
    6438:	21 e0       	ldi	r18, 0x01	; 1
    643a:	82 1a       	sub	r8, r18
    643c:	91 08       	sbc	r9, r1
    643e:	81 14       	cp	r8, r1
    6440:	91 04       	cpc	r9, r1
    6442:	79 f7       	brne	.-34     	; 0x6422 <vfprintf+0x1c4>
    6444:	e1 c0       	rjmp	.+450    	; 0x6608 <vfprintf+0x3aa>
    6446:	84 36       	cpi	r24, 0x64	; 100
    6448:	11 f0       	breq	.+4      	; 0x644e <vfprintf+0x1f0>
    644a:	89 36       	cpi	r24, 0x69	; 105
    644c:	39 f5       	brne	.+78     	; 0x649c <vfprintf+0x23e>
    644e:	f8 01       	movw	r30, r16
    6450:	37 fe       	sbrs	r3, 7
    6452:	07 c0       	rjmp	.+14     	; 0x6462 <vfprintf+0x204>
    6454:	60 81       	ld	r22, Z
    6456:	71 81       	ldd	r23, Z+1	; 0x01
    6458:	82 81       	ldd	r24, Z+2	; 0x02
    645a:	93 81       	ldd	r25, Z+3	; 0x03
    645c:	0c 5f       	subi	r16, 0xFC	; 252
    645e:	1f 4f       	sbci	r17, 0xFF	; 255
    6460:	08 c0       	rjmp	.+16     	; 0x6472 <vfprintf+0x214>
    6462:	60 81       	ld	r22, Z
    6464:	71 81       	ldd	r23, Z+1	; 0x01
    6466:	07 2e       	mov	r0, r23
    6468:	00 0c       	add	r0, r0
    646a:	88 0b       	sbc	r24, r24
    646c:	99 0b       	sbc	r25, r25
    646e:	0e 5f       	subi	r16, 0xFE	; 254
    6470:	1f 4f       	sbci	r17, 0xFF	; 255
    6472:	f3 2d       	mov	r31, r3
    6474:	ff 76       	andi	r31, 0x6F	; 111
    6476:	3f 2e       	mov	r3, r31
    6478:	97 ff       	sbrs	r25, 7
    647a:	09 c0       	rjmp	.+18     	; 0x648e <vfprintf+0x230>
    647c:	90 95       	com	r25
    647e:	80 95       	com	r24
    6480:	70 95       	com	r23
    6482:	61 95       	neg	r22
    6484:	7f 4f       	sbci	r23, 0xFF	; 255
    6486:	8f 4f       	sbci	r24, 0xFF	; 255
    6488:	9f 4f       	sbci	r25, 0xFF	; 255
    648a:	f0 68       	ori	r31, 0x80	; 128
    648c:	3f 2e       	mov	r3, r31
    648e:	2a e0       	ldi	r18, 0x0A	; 10
    6490:	30 e0       	ldi	r19, 0x00	; 0
    6492:	a3 01       	movw	r20, r6
    6494:	33 d1       	rcall	.+614    	; 0x66fc <__ultoa_invert>
    6496:	88 2e       	mov	r8, r24
    6498:	86 18       	sub	r8, r6
    649a:	44 c0       	rjmp	.+136    	; 0x6524 <vfprintf+0x2c6>
    649c:	85 37       	cpi	r24, 0x75	; 117
    649e:	31 f4       	brne	.+12     	; 0x64ac <vfprintf+0x24e>
    64a0:	23 2d       	mov	r18, r3
    64a2:	2f 7e       	andi	r18, 0xEF	; 239
    64a4:	b2 2e       	mov	r11, r18
    64a6:	2a e0       	ldi	r18, 0x0A	; 10
    64a8:	30 e0       	ldi	r19, 0x00	; 0
    64aa:	25 c0       	rjmp	.+74     	; 0x64f6 <vfprintf+0x298>
    64ac:	93 2d       	mov	r25, r3
    64ae:	99 7f       	andi	r25, 0xF9	; 249
    64b0:	b9 2e       	mov	r11, r25
    64b2:	8f 36       	cpi	r24, 0x6F	; 111
    64b4:	c1 f0       	breq	.+48     	; 0x64e6 <vfprintf+0x288>
    64b6:	18 f4       	brcc	.+6      	; 0x64be <vfprintf+0x260>
    64b8:	88 35       	cpi	r24, 0x58	; 88
    64ba:	79 f0       	breq	.+30     	; 0x64da <vfprintf+0x27c>
    64bc:	ae c0       	rjmp	.+348    	; 0x661a <vfprintf+0x3bc>
    64be:	80 37       	cpi	r24, 0x70	; 112
    64c0:	19 f0       	breq	.+6      	; 0x64c8 <vfprintf+0x26a>
    64c2:	88 37       	cpi	r24, 0x78	; 120
    64c4:	21 f0       	breq	.+8      	; 0x64ce <vfprintf+0x270>
    64c6:	a9 c0       	rjmp	.+338    	; 0x661a <vfprintf+0x3bc>
    64c8:	e9 2f       	mov	r30, r25
    64ca:	e0 61       	ori	r30, 0x10	; 16
    64cc:	be 2e       	mov	r11, r30
    64ce:	b4 fe       	sbrs	r11, 4
    64d0:	0d c0       	rjmp	.+26     	; 0x64ec <vfprintf+0x28e>
    64d2:	fb 2d       	mov	r31, r11
    64d4:	f4 60       	ori	r31, 0x04	; 4
    64d6:	bf 2e       	mov	r11, r31
    64d8:	09 c0       	rjmp	.+18     	; 0x64ec <vfprintf+0x28e>
    64da:	34 fe       	sbrs	r3, 4
    64dc:	0a c0       	rjmp	.+20     	; 0x64f2 <vfprintf+0x294>
    64de:	29 2f       	mov	r18, r25
    64e0:	26 60       	ori	r18, 0x06	; 6
    64e2:	b2 2e       	mov	r11, r18
    64e4:	06 c0       	rjmp	.+12     	; 0x64f2 <vfprintf+0x294>
    64e6:	28 e0       	ldi	r18, 0x08	; 8
    64e8:	30 e0       	ldi	r19, 0x00	; 0
    64ea:	05 c0       	rjmp	.+10     	; 0x64f6 <vfprintf+0x298>
    64ec:	20 e1       	ldi	r18, 0x10	; 16
    64ee:	30 e0       	ldi	r19, 0x00	; 0
    64f0:	02 c0       	rjmp	.+4      	; 0x64f6 <vfprintf+0x298>
    64f2:	20 e1       	ldi	r18, 0x10	; 16
    64f4:	32 e0       	ldi	r19, 0x02	; 2
    64f6:	f8 01       	movw	r30, r16
    64f8:	b7 fe       	sbrs	r11, 7
    64fa:	07 c0       	rjmp	.+14     	; 0x650a <vfprintf+0x2ac>
    64fc:	60 81       	ld	r22, Z
    64fe:	71 81       	ldd	r23, Z+1	; 0x01
    6500:	82 81       	ldd	r24, Z+2	; 0x02
    6502:	93 81       	ldd	r25, Z+3	; 0x03
    6504:	0c 5f       	subi	r16, 0xFC	; 252
    6506:	1f 4f       	sbci	r17, 0xFF	; 255
    6508:	06 c0       	rjmp	.+12     	; 0x6516 <vfprintf+0x2b8>
    650a:	60 81       	ld	r22, Z
    650c:	71 81       	ldd	r23, Z+1	; 0x01
    650e:	80 e0       	ldi	r24, 0x00	; 0
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	0e 5f       	subi	r16, 0xFE	; 254
    6514:	1f 4f       	sbci	r17, 0xFF	; 255
    6516:	a3 01       	movw	r20, r6
    6518:	f1 d0       	rcall	.+482    	; 0x66fc <__ultoa_invert>
    651a:	88 2e       	mov	r8, r24
    651c:	86 18       	sub	r8, r6
    651e:	fb 2d       	mov	r31, r11
    6520:	ff 77       	andi	r31, 0x7F	; 127
    6522:	3f 2e       	mov	r3, r31
    6524:	36 fe       	sbrs	r3, 6
    6526:	0d c0       	rjmp	.+26     	; 0x6542 <vfprintf+0x2e4>
    6528:	23 2d       	mov	r18, r3
    652a:	2e 7f       	andi	r18, 0xFE	; 254
    652c:	a2 2e       	mov	r10, r18
    652e:	89 14       	cp	r8, r9
    6530:	58 f4       	brcc	.+22     	; 0x6548 <vfprintf+0x2ea>
    6532:	34 fe       	sbrs	r3, 4
    6534:	0b c0       	rjmp	.+22     	; 0x654c <vfprintf+0x2ee>
    6536:	32 fc       	sbrc	r3, 2
    6538:	09 c0       	rjmp	.+18     	; 0x654c <vfprintf+0x2ee>
    653a:	83 2d       	mov	r24, r3
    653c:	8e 7e       	andi	r24, 0xEE	; 238
    653e:	a8 2e       	mov	r10, r24
    6540:	05 c0       	rjmp	.+10     	; 0x654c <vfprintf+0x2ee>
    6542:	b8 2c       	mov	r11, r8
    6544:	a3 2c       	mov	r10, r3
    6546:	03 c0       	rjmp	.+6      	; 0x654e <vfprintf+0x2f0>
    6548:	b8 2c       	mov	r11, r8
    654a:	01 c0       	rjmp	.+2      	; 0x654e <vfprintf+0x2f0>
    654c:	b9 2c       	mov	r11, r9
    654e:	a4 fe       	sbrs	r10, 4
    6550:	0f c0       	rjmp	.+30     	; 0x6570 <vfprintf+0x312>
    6552:	fe 01       	movw	r30, r28
    6554:	e8 0d       	add	r30, r8
    6556:	f1 1d       	adc	r31, r1
    6558:	80 81       	ld	r24, Z
    655a:	80 33       	cpi	r24, 0x30	; 48
    655c:	21 f4       	brne	.+8      	; 0x6566 <vfprintf+0x308>
    655e:	9a 2d       	mov	r25, r10
    6560:	99 7e       	andi	r25, 0xE9	; 233
    6562:	a9 2e       	mov	r10, r25
    6564:	09 c0       	rjmp	.+18     	; 0x6578 <vfprintf+0x31a>
    6566:	a2 fe       	sbrs	r10, 2
    6568:	06 c0       	rjmp	.+12     	; 0x6576 <vfprintf+0x318>
    656a:	b3 94       	inc	r11
    656c:	b3 94       	inc	r11
    656e:	04 c0       	rjmp	.+8      	; 0x6578 <vfprintf+0x31a>
    6570:	8a 2d       	mov	r24, r10
    6572:	86 78       	andi	r24, 0x86	; 134
    6574:	09 f0       	breq	.+2      	; 0x6578 <vfprintf+0x31a>
    6576:	b3 94       	inc	r11
    6578:	a3 fc       	sbrc	r10, 3
    657a:	10 c0       	rjmp	.+32     	; 0x659c <vfprintf+0x33e>
    657c:	a0 fe       	sbrs	r10, 0
    657e:	06 c0       	rjmp	.+12     	; 0x658c <vfprintf+0x32e>
    6580:	b2 14       	cp	r11, r2
    6582:	80 f4       	brcc	.+32     	; 0x65a4 <vfprintf+0x346>
    6584:	28 0c       	add	r2, r8
    6586:	92 2c       	mov	r9, r2
    6588:	9b 18       	sub	r9, r11
    658a:	0d c0       	rjmp	.+26     	; 0x65a6 <vfprintf+0x348>
    658c:	b2 14       	cp	r11, r2
    658e:	58 f4       	brcc	.+22     	; 0x65a6 <vfprintf+0x348>
    6590:	b6 01       	movw	r22, r12
    6592:	80 e2       	ldi	r24, 0x20	; 32
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	76 d0       	rcall	.+236    	; 0x6684 <fputc>
    6598:	b3 94       	inc	r11
    659a:	f8 cf       	rjmp	.-16     	; 0x658c <vfprintf+0x32e>
    659c:	b2 14       	cp	r11, r2
    659e:	18 f4       	brcc	.+6      	; 0x65a6 <vfprintf+0x348>
    65a0:	2b 18       	sub	r2, r11
    65a2:	02 c0       	rjmp	.+4      	; 0x65a8 <vfprintf+0x34a>
    65a4:	98 2c       	mov	r9, r8
    65a6:	21 2c       	mov	r2, r1
    65a8:	a4 fe       	sbrs	r10, 4
    65aa:	0f c0       	rjmp	.+30     	; 0x65ca <vfprintf+0x36c>
    65ac:	b6 01       	movw	r22, r12
    65ae:	80 e3       	ldi	r24, 0x30	; 48
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	68 d0       	rcall	.+208    	; 0x6684 <fputc>
    65b4:	a2 fe       	sbrs	r10, 2
    65b6:	16 c0       	rjmp	.+44     	; 0x65e4 <vfprintf+0x386>
    65b8:	a1 fc       	sbrc	r10, 1
    65ba:	03 c0       	rjmp	.+6      	; 0x65c2 <vfprintf+0x364>
    65bc:	88 e7       	ldi	r24, 0x78	; 120
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	02 c0       	rjmp	.+4      	; 0x65c6 <vfprintf+0x368>
    65c2:	88 e5       	ldi	r24, 0x58	; 88
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	b6 01       	movw	r22, r12
    65c8:	0c c0       	rjmp	.+24     	; 0x65e2 <vfprintf+0x384>
    65ca:	8a 2d       	mov	r24, r10
    65cc:	86 78       	andi	r24, 0x86	; 134
    65ce:	51 f0       	breq	.+20     	; 0x65e4 <vfprintf+0x386>
    65d0:	a1 fe       	sbrs	r10, 1
    65d2:	02 c0       	rjmp	.+4      	; 0x65d8 <vfprintf+0x37a>
    65d4:	8b e2       	ldi	r24, 0x2B	; 43
    65d6:	01 c0       	rjmp	.+2      	; 0x65da <vfprintf+0x37c>
    65d8:	80 e2       	ldi	r24, 0x20	; 32
    65da:	a7 fc       	sbrc	r10, 7
    65dc:	8d e2       	ldi	r24, 0x2D	; 45
    65de:	b6 01       	movw	r22, r12
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	50 d0       	rcall	.+160    	; 0x6684 <fputc>
    65e4:	89 14       	cp	r8, r9
    65e6:	30 f4       	brcc	.+12     	; 0x65f4 <vfprintf+0x396>
    65e8:	b6 01       	movw	r22, r12
    65ea:	80 e3       	ldi	r24, 0x30	; 48
    65ec:	90 e0       	ldi	r25, 0x00	; 0
    65ee:	4a d0       	rcall	.+148    	; 0x6684 <fputc>
    65f0:	9a 94       	dec	r9
    65f2:	f8 cf       	rjmp	.-16     	; 0x65e4 <vfprintf+0x386>
    65f4:	8a 94       	dec	r8
    65f6:	f3 01       	movw	r30, r6
    65f8:	e8 0d       	add	r30, r8
    65fa:	f1 1d       	adc	r31, r1
    65fc:	80 81       	ld	r24, Z
    65fe:	b6 01       	movw	r22, r12
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	40 d0       	rcall	.+128    	; 0x6684 <fputc>
    6604:	81 10       	cpse	r8, r1
    6606:	f6 cf       	rjmp	.-20     	; 0x65f4 <vfprintf+0x396>
    6608:	22 20       	and	r2, r2
    660a:	09 f4       	brne	.+2      	; 0x660e <vfprintf+0x3b0>
    660c:	4e ce       	rjmp	.-868    	; 0x62aa <vfprintf+0x4c>
    660e:	b6 01       	movw	r22, r12
    6610:	80 e2       	ldi	r24, 0x20	; 32
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	37 d0       	rcall	.+110    	; 0x6684 <fputc>
    6616:	2a 94       	dec	r2
    6618:	f7 cf       	rjmp	.-18     	; 0x6608 <vfprintf+0x3aa>
    661a:	f6 01       	movw	r30, r12
    661c:	86 81       	ldd	r24, Z+6	; 0x06
    661e:	97 81       	ldd	r25, Z+7	; 0x07
    6620:	02 c0       	rjmp	.+4      	; 0x6626 <vfprintf+0x3c8>
    6622:	8f ef       	ldi	r24, 0xFF	; 255
    6624:	9f ef       	ldi	r25, 0xFF	; 255
    6626:	2b 96       	adiw	r28, 0x0b	; 11
    6628:	0f b6       	in	r0, 0x3f	; 63
    662a:	f8 94       	cli
    662c:	de bf       	out	0x3e, r29	; 62
    662e:	0f be       	out	0x3f, r0	; 63
    6630:	cd bf       	out	0x3d, r28	; 61
    6632:	df 91       	pop	r29
    6634:	cf 91       	pop	r28
    6636:	1f 91       	pop	r17
    6638:	0f 91       	pop	r16
    663a:	ff 90       	pop	r15
    663c:	ef 90       	pop	r14
    663e:	df 90       	pop	r13
    6640:	cf 90       	pop	r12
    6642:	bf 90       	pop	r11
    6644:	af 90       	pop	r10
    6646:	9f 90       	pop	r9
    6648:	8f 90       	pop	r8
    664a:	7f 90       	pop	r7
    664c:	6f 90       	pop	r6
    664e:	5f 90       	pop	r5
    6650:	4f 90       	pop	r4
    6652:	3f 90       	pop	r3
    6654:	2f 90       	pop	r2
    6656:	08 95       	ret

00006658 <strnlen_P>:
    6658:	fc 01       	movw	r30, r24
    665a:	05 90       	lpm	r0, Z+
    665c:	61 50       	subi	r22, 0x01	; 1
    665e:	70 40       	sbci	r23, 0x00	; 0
    6660:	01 10       	cpse	r0, r1
    6662:	d8 f7       	brcc	.-10     	; 0x665a <strnlen_P+0x2>
    6664:	80 95       	com	r24
    6666:	90 95       	com	r25
    6668:	8e 0f       	add	r24, r30
    666a:	9f 1f       	adc	r25, r31
    666c:	08 95       	ret

0000666e <strnlen>:
    666e:	fc 01       	movw	r30, r24
    6670:	61 50       	subi	r22, 0x01	; 1
    6672:	70 40       	sbci	r23, 0x00	; 0
    6674:	01 90       	ld	r0, Z+
    6676:	01 10       	cpse	r0, r1
    6678:	d8 f7       	brcc	.-10     	; 0x6670 <strnlen+0x2>
    667a:	80 95       	com	r24
    667c:	90 95       	com	r25
    667e:	8e 0f       	add	r24, r30
    6680:	9f 1f       	adc	r25, r31
    6682:	08 95       	ret

00006684 <fputc>:
    6684:	0f 93       	push	r16
    6686:	1f 93       	push	r17
    6688:	cf 93       	push	r28
    668a:	df 93       	push	r29
    668c:	fb 01       	movw	r30, r22
    668e:	23 81       	ldd	r18, Z+3	; 0x03
    6690:	21 fd       	sbrc	r18, 1
    6692:	03 c0       	rjmp	.+6      	; 0x669a <fputc+0x16>
    6694:	8f ef       	ldi	r24, 0xFF	; 255
    6696:	9f ef       	ldi	r25, 0xFF	; 255
    6698:	2c c0       	rjmp	.+88     	; 0x66f2 <fputc+0x6e>
    669a:	22 ff       	sbrs	r18, 2
    669c:	16 c0       	rjmp	.+44     	; 0x66ca <fputc+0x46>
    669e:	46 81       	ldd	r20, Z+6	; 0x06
    66a0:	57 81       	ldd	r21, Z+7	; 0x07
    66a2:	24 81       	ldd	r18, Z+4	; 0x04
    66a4:	35 81       	ldd	r19, Z+5	; 0x05
    66a6:	42 17       	cp	r20, r18
    66a8:	53 07       	cpc	r21, r19
    66aa:	44 f4       	brge	.+16     	; 0x66bc <fputc+0x38>
    66ac:	a0 81       	ld	r26, Z
    66ae:	b1 81       	ldd	r27, Z+1	; 0x01
    66b0:	9d 01       	movw	r18, r26
    66b2:	2f 5f       	subi	r18, 0xFF	; 255
    66b4:	3f 4f       	sbci	r19, 0xFF	; 255
    66b6:	31 83       	std	Z+1, r19	; 0x01
    66b8:	20 83       	st	Z, r18
    66ba:	8c 93       	st	X, r24
    66bc:	26 81       	ldd	r18, Z+6	; 0x06
    66be:	37 81       	ldd	r19, Z+7	; 0x07
    66c0:	2f 5f       	subi	r18, 0xFF	; 255
    66c2:	3f 4f       	sbci	r19, 0xFF	; 255
    66c4:	37 83       	std	Z+7, r19	; 0x07
    66c6:	26 83       	std	Z+6, r18	; 0x06
    66c8:	14 c0       	rjmp	.+40     	; 0x66f2 <fputc+0x6e>
    66ca:	8b 01       	movw	r16, r22
    66cc:	ec 01       	movw	r28, r24
    66ce:	fb 01       	movw	r30, r22
    66d0:	00 84       	ldd	r0, Z+8	; 0x08
    66d2:	f1 85       	ldd	r31, Z+9	; 0x09
    66d4:	e0 2d       	mov	r30, r0
    66d6:	19 95       	eicall
    66d8:	89 2b       	or	r24, r25
    66da:	e1 f6       	brne	.-72     	; 0x6694 <fputc+0x10>
    66dc:	d8 01       	movw	r26, r16
    66de:	16 96       	adiw	r26, 0x06	; 6
    66e0:	8d 91       	ld	r24, X+
    66e2:	9c 91       	ld	r25, X
    66e4:	17 97       	sbiw	r26, 0x07	; 7
    66e6:	01 96       	adiw	r24, 0x01	; 1
    66e8:	17 96       	adiw	r26, 0x07	; 7
    66ea:	9c 93       	st	X, r25
    66ec:	8e 93       	st	-X, r24
    66ee:	16 97       	sbiw	r26, 0x06	; 6
    66f0:	ce 01       	movw	r24, r28
    66f2:	df 91       	pop	r29
    66f4:	cf 91       	pop	r28
    66f6:	1f 91       	pop	r17
    66f8:	0f 91       	pop	r16
    66fa:	08 95       	ret

000066fc <__ultoa_invert>:
    66fc:	fa 01       	movw	r30, r20
    66fe:	aa 27       	eor	r26, r26
    6700:	28 30       	cpi	r18, 0x08	; 8
    6702:	51 f1       	breq	.+84     	; 0x6758 <__ultoa_invert+0x5c>
    6704:	20 31       	cpi	r18, 0x10	; 16
    6706:	81 f1       	breq	.+96     	; 0x6768 <__ultoa_invert+0x6c>
    6708:	e8 94       	clt
    670a:	6f 93       	push	r22
    670c:	6e 7f       	andi	r22, 0xFE	; 254
    670e:	6e 5f       	subi	r22, 0xFE	; 254
    6710:	7f 4f       	sbci	r23, 0xFF	; 255
    6712:	8f 4f       	sbci	r24, 0xFF	; 255
    6714:	9f 4f       	sbci	r25, 0xFF	; 255
    6716:	af 4f       	sbci	r26, 0xFF	; 255
    6718:	b1 e0       	ldi	r27, 0x01	; 1
    671a:	3e d0       	rcall	.+124    	; 0x6798 <__ultoa_invert+0x9c>
    671c:	b4 e0       	ldi	r27, 0x04	; 4
    671e:	3c d0       	rcall	.+120    	; 0x6798 <__ultoa_invert+0x9c>
    6720:	67 0f       	add	r22, r23
    6722:	78 1f       	adc	r23, r24
    6724:	89 1f       	adc	r24, r25
    6726:	9a 1f       	adc	r25, r26
    6728:	a1 1d       	adc	r26, r1
    672a:	68 0f       	add	r22, r24
    672c:	79 1f       	adc	r23, r25
    672e:	8a 1f       	adc	r24, r26
    6730:	91 1d       	adc	r25, r1
    6732:	a1 1d       	adc	r26, r1
    6734:	6a 0f       	add	r22, r26
    6736:	71 1d       	adc	r23, r1
    6738:	81 1d       	adc	r24, r1
    673a:	91 1d       	adc	r25, r1
    673c:	a1 1d       	adc	r26, r1
    673e:	20 d0       	rcall	.+64     	; 0x6780 <__ultoa_invert+0x84>
    6740:	09 f4       	brne	.+2      	; 0x6744 <__ultoa_invert+0x48>
    6742:	68 94       	set
    6744:	3f 91       	pop	r19
    6746:	2a e0       	ldi	r18, 0x0A	; 10
    6748:	26 9f       	mul	r18, r22
    674a:	11 24       	eor	r1, r1
    674c:	30 19       	sub	r19, r0
    674e:	30 5d       	subi	r19, 0xD0	; 208
    6750:	31 93       	st	Z+, r19
    6752:	de f6       	brtc	.-74     	; 0x670a <__ultoa_invert+0xe>
    6754:	cf 01       	movw	r24, r30
    6756:	08 95       	ret
    6758:	46 2f       	mov	r20, r22
    675a:	47 70       	andi	r20, 0x07	; 7
    675c:	40 5d       	subi	r20, 0xD0	; 208
    675e:	41 93       	st	Z+, r20
    6760:	b3 e0       	ldi	r27, 0x03	; 3
    6762:	0f d0       	rcall	.+30     	; 0x6782 <__ultoa_invert+0x86>
    6764:	c9 f7       	brne	.-14     	; 0x6758 <__ultoa_invert+0x5c>
    6766:	f6 cf       	rjmp	.-20     	; 0x6754 <__ultoa_invert+0x58>
    6768:	46 2f       	mov	r20, r22
    676a:	4f 70       	andi	r20, 0x0F	; 15
    676c:	40 5d       	subi	r20, 0xD0	; 208
    676e:	4a 33       	cpi	r20, 0x3A	; 58
    6770:	18 f0       	brcs	.+6      	; 0x6778 <__ultoa_invert+0x7c>
    6772:	49 5d       	subi	r20, 0xD9	; 217
    6774:	31 fd       	sbrc	r19, 1
    6776:	40 52       	subi	r20, 0x20	; 32
    6778:	41 93       	st	Z+, r20
    677a:	02 d0       	rcall	.+4      	; 0x6780 <__ultoa_invert+0x84>
    677c:	a9 f7       	brne	.-22     	; 0x6768 <__ultoa_invert+0x6c>
    677e:	ea cf       	rjmp	.-44     	; 0x6754 <__ultoa_invert+0x58>
    6780:	b4 e0       	ldi	r27, 0x04	; 4
    6782:	a6 95       	lsr	r26
    6784:	97 95       	ror	r25
    6786:	87 95       	ror	r24
    6788:	77 95       	ror	r23
    678a:	67 95       	ror	r22
    678c:	ba 95       	dec	r27
    678e:	c9 f7       	brne	.-14     	; 0x6782 <__ultoa_invert+0x86>
    6790:	00 97       	sbiw	r24, 0x00	; 0
    6792:	61 05       	cpc	r22, r1
    6794:	71 05       	cpc	r23, r1
    6796:	08 95       	ret
    6798:	9b 01       	movw	r18, r22
    679a:	ac 01       	movw	r20, r24
    679c:	0a 2e       	mov	r0, r26
    679e:	06 94       	lsr	r0
    67a0:	57 95       	ror	r21
    67a2:	47 95       	ror	r20
    67a4:	37 95       	ror	r19
    67a6:	27 95       	ror	r18
    67a8:	ba 95       	dec	r27
    67aa:	c9 f7       	brne	.-14     	; 0x679e <__ultoa_invert+0xa2>
    67ac:	62 0f       	add	r22, r18
    67ae:	73 1f       	adc	r23, r19
    67b0:	84 1f       	adc	r24, r20
    67b2:	95 1f       	adc	r25, r21
    67b4:	a0 1d       	adc	r26, r0
    67b6:	08 95       	ret

000067b8 <_exit>:
    67b8:	f8 94       	cli

000067ba <__stop_program>:
    67ba:	ff cf       	rjmp	.-2      	; 0x67ba <__stop_program>
