
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000742  00800200  000067ee  00006882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000067ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f6b  00800942  00800942  00006fc4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006fc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007020  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf0  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e5e1  00000000  00000000  00007c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003aff  00000000  00000000  00016231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007231  00000000  00000000  00019d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002940  00000000  00000000  00020f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044ae  00000000  00000000  000238a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c65f  00000000  00000000  00027d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af0  00000000  00000000  000343b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c6       	rjmp	.+3310   	; 0xd20 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <__vector_25>
      68:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__vector_36>
      94:	0c 94 8f 28 	jmp	0x511e	; 0x511e <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d3 28 	jmp	0x51a6	; 0x51a6 <__vector_51>
      d0:	0c 94 25 29 	jmp	0x524a	; 0x524a <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 69 29 	jmp	0x52d2	; 0x52d2 <__vector_54>
      dc:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	64 1c       	adc	r6, r4
      e6:	64 1c       	adc	r6, r4
      e8:	64 1c       	adc	r6, r4
      ea:	9b 1c       	adc	r9, r11
      ec:	a3 1c       	adc	r10, r3
      ee:	b8 1c       	adc	r11, r8
      f0:	64 1c       	adc	r6, r4
      f2:	64 1c       	adc	r6, r4
      f4:	9b 1c       	adc	r9, r11
      f6:	a3 1c       	adc	r10, r3
      f8:	69 2c       	mov	r6, r9
      fa:	d9 2c       	mov	r13, r9
      fc:	d9 2c       	mov	r13, r9
      fe:	d9 2c       	mov	r13, r9
     100:	d9 2c       	mov	r13, r9
     102:	d9 2c       	mov	r13, r9
     104:	d9 2c       	mov	r13, r9
     106:	d9 2c       	mov	r13, r9
     108:	69 2c       	mov	r6, r9
     10a:	d9 2c       	mov	r13, r9
     10c:	d9 2c       	mov	r13, r9
     10e:	d9 2c       	mov	r13, r9
     110:	d9 2c       	mov	r13, r9
     112:	d9 2c       	mov	r13, r9
     114:	d9 2c       	mov	r13, r9
     116:	d9 2c       	mov	r13, r9
     118:	6b 2c       	mov	r6, r11
     11a:	d9 2c       	mov	r13, r9
     11c:	d9 2c       	mov	r13, r9
     11e:	d9 2c       	mov	r13, r9
     120:	d9 2c       	mov	r13, r9
     122:	d9 2c       	mov	r13, r9
     124:	d9 2c       	mov	r13, r9
     126:	d9 2c       	mov	r13, r9
     128:	d9 2c       	mov	r13, r9
     12a:	d9 2c       	mov	r13, r9
     12c:	d9 2c       	mov	r13, r9
     12e:	d9 2c       	mov	r13, r9
     130:	d9 2c       	mov	r13, r9
     132:	d9 2c       	mov	r13, r9
     134:	d9 2c       	mov	r13, r9
     136:	d9 2c       	mov	r13, r9
     138:	6b 2c       	mov	r6, r11
     13a:	d9 2c       	mov	r13, r9
     13c:	d9 2c       	mov	r13, r9
     13e:	d9 2c       	mov	r13, r9
     140:	d9 2c       	mov	r13, r9
     142:	d9 2c       	mov	r13, r9
     144:	d9 2c       	mov	r13, r9
     146:	d9 2c       	mov	r13, r9
     148:	d9 2c       	mov	r13, r9
     14a:	d9 2c       	mov	r13, r9
     14c:	d9 2c       	mov	r13, r9
     14e:	d9 2c       	mov	r13, r9
     150:	d9 2c       	mov	r13, r9
     152:	d9 2c       	mov	r13, r9
     154:	d9 2c       	mov	r13, r9
     156:	d9 2c       	mov	r13, r9
     158:	d5 2c       	mov	r13, r5
     15a:	d9 2c       	mov	r13, r9
     15c:	d9 2c       	mov	r13, r9
     15e:	d9 2c       	mov	r13, r9
     160:	d9 2c       	mov	r13, r9
     162:	d9 2c       	mov	r13, r9
     164:	d9 2c       	mov	r13, r9
     166:	d9 2c       	mov	r13, r9
     168:	a0 2c       	mov	r10, r0
     16a:	d9 2c       	mov	r13, r9
     16c:	d9 2c       	mov	r13, r9
     16e:	d9 2c       	mov	r13, r9
     170:	d9 2c       	mov	r13, r9
     172:	d9 2c       	mov	r13, r9
     174:	d9 2c       	mov	r13, r9
     176:	d9 2c       	mov	r13, r9
     178:	d9 2c       	mov	r13, r9
     17a:	d9 2c       	mov	r13, r9
     17c:	d9 2c       	mov	r13, r9
     17e:	d9 2c       	mov	r13, r9
     180:	d9 2c       	mov	r13, r9
     182:	d9 2c       	mov	r13, r9
     184:	d9 2c       	mov	r13, r9
     186:	d9 2c       	mov	r13, r9
     188:	94 2c       	mov	r9, r4
     18a:	d9 2c       	mov	r13, r9
     18c:	d9 2c       	mov	r13, r9
     18e:	d9 2c       	mov	r13, r9
     190:	d9 2c       	mov	r13, r9
     192:	d9 2c       	mov	r13, r9
     194:	d9 2c       	mov	r13, r9
     196:	d9 2c       	mov	r13, r9
     198:	b8 2c       	mov	r11, r8

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <prvCheckTasksWaitingTermination>
     19e:	80 91 23 16 	lds	r24, 0x1623	; 0x801623 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	f6 d4       	rcall	.+2540   	; 0xb94 <vPortYield>
     1a8:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <prvProcessTimerOrBlockTask>
     1c6:	0e 94 2d 1c 	call	0x385a	; 0x385a <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	19 e0       	ldi	r17, 0x09	; 9
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee ee       	ldi	r30, 0xEE	; 238
     1e4:	f7 e6       	ldi	r31, 0x67	; 103
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 34       	cpi	r26, 0x42	; 66
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a2 e4       	ldi	r26, 0x42	; 66
     1fa:	b9 e0       	ldi	r27, 0x09	; 9
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ad 3a       	cpi	r26, 0xAD	; 173
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <main>
     20a:	0c 94 f5 33 	jmp	0x67ea	; 0x67ea <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <setPackageHandler>:
#include "application.h"



void setPackageHandler()
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <setPackageHandler+0xa>
     21a:	00 d0       	rcall	.+0      	; 0x21c <setPackageHandler+0xc>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	uint16_t data[3];
	for(int i=0;i<3;i++)
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	13 c0       	rjmp	.+38     	; 0x24c <setPackageHandler+0x3c>
	{
		if(xQueueReceive(sensorDataQueue,&data[i],portMAX_DELAY)==pdPASS)
     226:	b8 01       	movw	r22, r16
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	8c 0f       	add	r24, r28
     232:	9d 1f       	adc	r25, r29
     234:	68 0f       	add	r22, r24
     236:	79 1f       	adc	r23, r25
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	80 91 97 18 	lds	r24, 0x1897	; 0x801897 <sensorDataQueue>
     242:	90 91 98 18 	lds	r25, 0x1898	; 0x801898 <sensorDataQueue+0x1>
     246:	8b d7       	rcall	.+3862   	; 0x115e <xQueueReceive>


void setPackageHandler()
{
	uint16_t data[3];
	for(int i=0;i<3;i++)
     248:	0f 5f       	subi	r16, 0xFF	; 255
     24a:	1f 4f       	sbci	r17, 0xFF	; 255
     24c:	03 30       	cpi	r16, 0x03	; 3
     24e:	11 05       	cpc	r17, r1
     250:	54 f3       	brlt	.-44     	; 0x226 <setPackageHandler+0x16>
			{
				//printf("Parameter[%i] : %d\n", i , data[i]);
			}
	}
	
	sensorDataPackageHandler_setTemp_value(data[0]);
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <sensorDataPackageHandler_setTemp_value>
	sensorDataPackageHandler_setHumidity_value(data[1]);
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04
     25e:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <sensorDataPackageHandler_setHumidity_value>
	sensorDataPackageHandler_setCO2_value(data[2]);
     262:	8d 81       	ldd	r24, Y+5	; 0x05
     264:	9e 81       	ldd	r25, Y+6	; 0x06
     266:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <sensorDataPackageHandler_setCO2_value>
	xQueueReset(sensorDataQueue);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 91 97 18 	lds	r24, 0x1897	; 0x801897 <sensorDataQueue>
     270:	90 91 98 18 	lds	r25, 0x1898	; 0x801898 <sensorDataQueue+0x1>
     274:	2f d6       	rcall	.+3166   	; 0xed4 <xQueueGenericReset>
	
}
     276:	26 96       	adiw	r28, 0x06	; 6
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <ApplicationTask>:
void ApplicationTask(void *pvParameters)
{
	for (;;)
	{
		
		EventBits_t eventBits = xEventGroupWaitBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,portMAX_DELAY);
     28c:	cc 24       	eor	r12, r12
     28e:	ca 94       	dec	r12
     290:	dc 2c       	mov	r13, r12
     292:	76 01       	movw	r14, r12
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	21 e0       	ldi	r18, 0x01	; 1
     298:	43 e0       	ldi	r20, 0x03	; 3
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <dataEventGroup>
     2a4:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <dataEventGroup+0x1>
     2a8:	20 d1       	rcall	.+576    	; 0x4ea <xEventGroupWaitBits>
		
		if((eventBits &(BIT_CO2 | BIT_HUMIDITY_TEMPERATURE))==(BIT_CO2|BIT_HUMIDITY_TEMPERATURE))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	b1 f4       	brne	.+44     	; 0x2ea <ApplicationTask+0x5e>
		{
			printf("ALL DATA COLLECTED\n");
     2be:	8f e6       	ldi	r24, 0x6F	; 111
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
			setPackageHandler();
     2c6:	a4 df       	rcall	.-184    	; 0x210 <setPackageHandler>
			vTaskDelay(pdMS_TO_TICKS(3000));
     2c8:	6a eb       	ldi	r22, 0xBA	; 186
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
			xSemaphoreGive(tempHumSemaphore);
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <tempHumSemaphore>
     2e4:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <tempHumSemaphore+0x1>
     2e8:	6d d6       	rcall	.+3290   	; 0xfc4 <xQueueGenericSend>

		}
		vTaskDelay(pdMS_TO_TICKS(50));
     2ea:	63 e0       	ldi	r22, 0x03	; 3
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
		
	}
     2f6:	ca cf       	rjmp	.-108    	; 0x28c <ApplicationTask>

000002f8 <createApplicationTask>:
}

void createApplicationTask()
{
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
	
	xTaskCreate(
     2fe:	e1 2c       	mov	r14, r1
     300:	f1 2c       	mov	r15, r1
     302:	01 e0       	ldi	r16, 0x01	; 1
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 ec       	ldi	r20, 0xC0	; 192
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	62 e8       	ldi	r22, 0x82	; 130
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	86 e4       	ldi	r24, 0x46	; 70
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <myCo2CallBack>:
		vTaskDelay(30);
			
	}
}
void myCo2CallBack(uint16_t ppm)
{
     320:	0f 93       	push	r16
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	1f 92       	push	r1
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	89 83       	std	Y+1, r24	; 0x01
		//printf("CO2 Value: %d\n",ppm);
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	2f ef       	ldi	r18, 0xFF	; 255
     336:	3f ef       	ldi	r19, 0xFF	; 255
     338:	a9 01       	movw	r20, r18
     33a:	be 01       	movw	r22, r28
     33c:	6f 5f       	subi	r22, 0xFF	; 255
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	80 91 97 18 	lds	r24, 0x1897	; 0x801897 <sensorDataQueue>
     344:	90 91 98 18 	lds	r25, 0x1898	; 0x801898 <sensorDataQueue+0x1>
     348:	3d d6       	rcall	.+3194   	; 0xfc4 <xQueueGenericSend>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     34a:	41 e0       	ldi	r20, 0x01	; 1
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <dataEventGroup>
     356:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <dataEventGroup+0x1>
     35a:	67 d1       	rcall	.+718    	; 0x62a <xEventGroupSetBits>
		//xSemaphoreGive(tempHumSemaphore);
		
		

}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <mh_z19_initialise>
     36e:	08 95       	ret

00000370 <measureCO2>:
	
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     370:	0e 94 03 26 	call	0x4c06	; 0x4c06 <mh_z19_takeMeassuring>
     374:	80 93 75 18 	sts	0x1875, r24	; 0x801875 <rc>
	if (rc != MHZ19_OK)
     378:	88 23       	and	r24, r24
     37a:	21 f0       	breq	.+8      	; 0x384 <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     37c:	8a e8       	ldi	r24, 0x8A	; 138
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <puts>
     384:	08 95       	ret

00000386 <CO2Task>:
void CO2Task()
{
	while(1)
	{
//printf("CO2 Task\n");
EventBits_t dataEventBits = xEventGroupWaitBits
     386:	cc 24       	eor	r12, r12
     388:	ca 94       	dec	r12
     38a:	dc 2c       	mov	r13, r12
     38c:	76 01       	movw	r14, r12
     38e:	01 e0       	ldi	r16, 0x01	; 1
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	42 e0       	ldi	r20, 0x02	; 2
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <dataEventGroup>
     39e:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <dataEventGroup+0x1>
     3a2:	a3 d0       	rcall	.+326    	; 0x4ea <xEventGroupWaitBits>


		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
		{
			//printf("Measured\n");
			measureCO2();
     3a4:	61 fd       	sbrc	r22, 1
     3a6:	e4 df       	rcall	.-56     	; 0x370 <measureCO2>
		
		}
		vTaskDelay(30);
     3a8:	6e e1       	ldi	r22, 0x1E	; 30
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
			
	}
     3b4:	e8 cf       	rjmp	.-48     	; 0x386 <CO2Task>

000003b6 <createCO2Task>:
		
		

}
void createCO2Task()
{
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
			initializeCO2Driver();
     3bc:	d5 df       	rcall	.-86     	; 0x368 <initializeCO2Driver>
			mh_z19_injectCallBack(myCo2CallBack);
     3be:	80 e9       	ldi	r24, 0x90	; 144
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <mh_z19_injectCallBack>
			xTaskCreate(
     3c6:	e1 2c       	mov	r14, r1
     3c8:	f1 2c       	mov	r15, r1
     3ca:	01 e0       	ldi	r16, 0x01	; 1
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	40 ec       	ldi	r20, 0xC0	; 192
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	61 ea       	ldi	r22, 0xA1	; 161
     3d6:	72 e0       	ldi	r23, 0x02	; 2
     3d8:	83 ec       	ldi	r24, 0xC3	; 195
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <initializeConfiguration>:
SemaphoreHandle_t configSemaphore;
uint8_t ventilationLevel;


void initializeConfiguration()
{
     3e8:	0f 93       	push	r16
	ventilationLevel = -100;
     3ea:	8c e9       	ldi	r24, 0x9C	; 156
     3ec:	80 93 78 18 	sts	0x1878, r24	; 0x801878 <ventilationLevel>
	configSemaphore = xSemaphoreCreateBinary();
     3f0:	43 e0       	ldi	r20, 0x03	; 3
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	c3 d5       	rcall	.+2950   	; 0xf7e <xQueueGenericCreate>
     3f8:	90 93 77 18 	sts	0x1877, r25	; 0x801877 <configSemaphore+0x1>
     3fc:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <configSemaphore>
	xSemaphoreGive(configSemaphore);
     400:	00 e0       	ldi	r16, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	a9 01       	movw	r20, r18
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	db d5       	rcall	.+2998   	; 0xfc4 <xQueueGenericSend>
}
     40e:	0f 91       	pop	r16
     410:	08 95       	ret

00000412 <setVentilationLevel>:

void setVentilationLevel(uint8_t level)
{
     412:	0f 93       	push	r16
     414:	cf 93       	push	r28
     416:	c8 2f       	mov	r28, r24
	if(xSemaphoreTake(configSemaphore,portMAX_DELAY)==pdTRUE)
     418:	4f ef       	ldi	r20, 0xFF	; 255
     41a:	5f ef       	ldi	r21, 0xFF	; 255
     41c:	ba 01       	movw	r22, r20
     41e:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <configSemaphore>
     422:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <configSemaphore+0x1>
     426:	2d d7       	rcall	.+3674   	; 0x1282 <xQueueSemaphoreTake>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	69 f4       	brne	.+26     	; 0x446 <setVentilationLevel+0x34>
	{
		ventilationLevel = level;
     42c:	c0 93 78 18 	sts	0x1878, r28	; 0x801878 <ventilationLevel>
		xSemaphoreGive(configSemaphore);
     430:	00 e0       	ldi	r16, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	a9 01       	movw	r20, r18
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <configSemaphore>
     440:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <configSemaphore+0x1>
     444:	bf d5       	rcall	.+2942   	; 0xfc4 <xQueueGenericSend>
	}
}
     446:	cf 91       	pop	r28
     448:	0f 91       	pop	r16
     44a:	08 95       	ret

0000044c <getVentilationLevel>:

uint8_t getVentilationLevel()
{
     44c:	0f 93       	push	r16
	if(xSemaphoreTake(configSemaphore,portMAX_DELAY)==pdTRUE)
     44e:	4f ef       	ldi	r20, 0xFF	; 255
     450:	5f ef       	ldi	r21, 0xFF	; 255
     452:	ba 01       	movw	r22, r20
     454:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <configSemaphore>
     458:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <configSemaphore+0x1>
     45c:	12 d7       	rcall	.+3620   	; 0x1282 <xQueueSemaphoreTake>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	71 f4       	brne	.+28     	; 0x47e <getVentilationLevel+0x32>
	{	
		xSemaphoreGive(configSemaphore);
     462:	00 e0       	ldi	r16, 0x00	; 0
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	a9 01       	movw	r20, r18
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <configSemaphore>
     472:	90 91 77 18 	lds	r25, 0x1877	; 0x801877 <configSemaphore+0x1>
     476:	a6 d5       	rcall	.+2892   	; 0xfc4 <xQueueGenericSend>
		return ventilationLevel;
     478:	80 91 78 18 	lds	r24, 0x1878	; 0x801878 <ventilationLevel>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <getVentilationLevel+0x32>
	}
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     482:	0f 93       	push	r16
     484:	01 11       	cpse	r16, r1
     486:	0c c0       	rjmp	.+24     	; 0x4a0 <prvTestWaitCondition+0x1e>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	82 23       	and	r24, r18
     48e:	93 23       	and	r25, r19
     490:	a4 23       	and	r26, r20
     492:	b5 23       	and	r27, r21
     494:	89 2b       	or	r24, r25
     496:	8a 2b       	or	r24, r26
     498:	8b 2b       	or	r24, r27
     49a:	79 f4       	brne	.+30     	; 0x4ba <prvTestWaitCondition+0x38>
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	10 c0       	rjmp	.+32     	; 0x4c0 <prvTestWaitCondition+0x3e>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	82 23       	and	r24, r18
     4a6:	93 23       	and	r25, r19
     4a8:	a4 23       	and	r26, r20
     4aa:	b5 23       	and	r27, r21
     4ac:	28 17       	cp	r18, r24
     4ae:	39 07       	cpc	r19, r25
     4b0:	4a 07       	cpc	r20, r26
     4b2:	5b 07       	cpc	r21, r27
     4b4:	21 f0       	breq	.+8      	; 0x4be <prvTestWaitCondition+0x3c>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <prvTestWaitCondition+0x3e>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <prvTestWaitCondition+0x3e>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <xEventGroupCreate>:
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	8f e0       	ldi	r24, 0x0F	; 15
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	af d1       	rcall	.+862    	; 0x82c <pvPortMalloc>
     4ce:	ec 01       	movw	r28, r24
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	39 f0       	breq	.+14     	; 0x4e2 <xEventGroupCreate+0x1e>
     4d4:	fc 01       	movw	r30, r24
     4d6:	11 92       	st	Z+, r1
     4d8:	11 92       	st	Z+, r1
     4da:	11 92       	st	Z+, r1
     4dc:	11 92       	st	Z+, r1
     4de:	cf 01       	movw	r24, r30
     4e0:	8b d2       	rcall	.+1302   	; 0x9f8 <vListInitialise>
     4e2:	ce 01       	movw	r24, r28
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <xEventGroupWaitBits>:
     4ea:	2f 92       	push	r2
     4ec:	3f 92       	push	r3
     4ee:	4f 92       	push	r4
     4f0:	5f 92       	push	r5
     4f2:	6f 92       	push	r6
     4f4:	7f 92       	push	r7
     4f6:	8f 92       	push	r8
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
     510:	4a 01       	movw	r8, r20
     512:	5b 01       	movw	r10, r22
     514:	62 2e       	mov	r6, r18
     516:	70 2e       	mov	r7, r16
     518:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <vTaskSuspendAll>
     51c:	28 80       	ld	r2, Y
     51e:	39 80       	ldd	r3, Y+1	; 0x01
     520:	4a 80       	ldd	r4, Y+2	; 0x02
     522:	5b 80       	ldd	r5, Y+3	; 0x03
     524:	a5 01       	movw	r20, r10
     526:	94 01       	movw	r18, r8
     528:	c2 01       	movw	r24, r4
     52a:	b1 01       	movw	r22, r2
     52c:	aa df       	rcall	.-172    	; 0x482 <prvTestWaitCondition>
     52e:	88 23       	and	r24, r24
     530:	a1 f0       	breq	.+40     	; 0x55a <xEventGroupWaitBits+0x70>
     532:	66 20       	and	r6, r6
     534:	89 f1       	breq	.+98     	; 0x598 <xEventGroupWaitBits+0xae>
     536:	d5 01       	movw	r26, r10
     538:	c4 01       	movw	r24, r8
     53a:	80 95       	com	r24
     53c:	90 95       	com	r25
     53e:	a0 95       	com	r26
     540:	b0 95       	com	r27
     542:	82 21       	and	r24, r2
     544:	93 21       	and	r25, r3
     546:	a4 21       	and	r26, r4
     548:	b5 21       	and	r27, r5
     54a:	88 83       	st	Y, r24
     54c:	99 83       	std	Y+1, r25	; 0x01
     54e:	aa 83       	std	Y+2, r26	; 0x02
     550:	bb 83       	std	Y+3, r27	; 0x03
     552:	c1 2c       	mov	r12, r1
     554:	d1 2c       	mov	r13, r1
     556:	76 01       	movw	r14, r12
     558:	22 c0       	rjmp	.+68     	; 0x59e <xEventGroupWaitBits+0xb4>
     55a:	c1 14       	cp	r12, r1
     55c:	d1 04       	cpc	r13, r1
     55e:	e1 04       	cpc	r14, r1
     560:	f1 04       	cpc	r15, r1
     562:	e9 f0       	breq	.+58     	; 0x59e <xEventGroupWaitBits+0xb4>
     564:	61 10       	cpse	r6, r1
     566:	04 c0       	rjmp	.+8      	; 0x570 <xEventGroupWaitBits+0x86>
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	ba 01       	movw	r22, r20
     56e:	04 c0       	rjmp	.+8      	; 0x578 <xEventGroupWaitBits+0x8e>
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	71 e0       	ldi	r23, 0x01	; 1
     578:	71 10       	cpse	r7, r1
     57a:	74 60       	ori	r23, 0x04	; 4
     57c:	48 29       	or	r20, r8
     57e:	59 29       	or	r21, r9
     580:	6a 29       	or	r22, r10
     582:	7b 29       	or	r23, r11
     584:	97 01       	movw	r18, r14
     586:	86 01       	movw	r16, r12
     588:	ce 01       	movw	r24, r28
     58a:	04 96       	adiw	r24, 0x04	; 4
     58c:	0e 94 08 13 	call	0x2610	; 0x2610 <vTaskPlaceOnUnorderedEventList>
     590:	21 2c       	mov	r2, r1
     592:	31 2c       	mov	r3, r1
     594:	21 01       	movw	r4, r2
     596:	03 c0       	rjmp	.+6      	; 0x59e <xEventGroupWaitBits+0xb4>
     598:	c1 2c       	mov	r12, r1
     59a:	d1 2c       	mov	r13, r1
     59c:	76 01       	movw	r14, r12
     59e:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
     5a2:	cd 28       	or	r12, r13
     5a4:	ce 28       	or	r12, r14
     5a6:	cf 28       	or	r12, r15
     5a8:	59 f1       	breq	.+86     	; 0x600 <xEventGroupWaitBits+0x116>
     5aa:	81 11       	cpse	r24, r1
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <xEventGroupWaitBits+0xc6>
     5ae:	f2 d2       	rcall	.+1508   	; 0xb94 <vPortYield>
     5b0:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <uxTaskResetEventItemValue>
     5b4:	6b 01       	movw	r12, r22
     5b6:	7c 01       	movw	r14, r24
     5b8:	91 fd       	sbrc	r25, 1
     5ba:	1f c0       	rjmp	.+62     	; 0x5fa <xEventGroupWaitBits+0x110>
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	0f 92       	push	r0
     5c2:	c8 80       	ld	r12, Y
     5c4:	d9 80       	ldd	r13, Y+1	; 0x01
     5c6:	ea 80       	ldd	r14, Y+2	; 0x02
     5c8:	fb 80       	ldd	r15, Y+3	; 0x03
     5ca:	07 2d       	mov	r16, r7
     5cc:	a5 01       	movw	r20, r10
     5ce:	94 01       	movw	r18, r8
     5d0:	c7 01       	movw	r24, r14
     5d2:	b6 01       	movw	r22, r12
     5d4:	56 df       	rcall	.-340    	; 0x482 <prvTestWaitCondition>
     5d6:	88 23       	and	r24, r24
     5d8:	71 f0       	breq	.+28     	; 0x5f6 <xEventGroupWaitBits+0x10c>
     5da:	66 20       	and	r6, r6
     5dc:	61 f0       	breq	.+24     	; 0x5f6 <xEventGroupWaitBits+0x10c>
     5de:	80 94       	com	r8
     5e0:	90 94       	com	r9
     5e2:	a0 94       	com	r10
     5e4:	b0 94       	com	r11
     5e6:	8c 20       	and	r8, r12
     5e8:	9d 20       	and	r9, r13
     5ea:	ae 20       	and	r10, r14
     5ec:	bf 20       	and	r11, r15
     5ee:	88 82       	st	Y, r8
     5f0:	99 82       	std	Y+1, r9	; 0x01
     5f2:	aa 82       	std	Y+2, r10	; 0x02
     5f4:	bb 82       	std	Y+3, r11	; 0x03
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	16 01       	movw	r2, r12
     5fc:	27 01       	movw	r4, r14
     5fe:	55 24       	eor	r5, r5
     600:	c2 01       	movw	r24, r4
     602:	b1 01       	movw	r22, r2
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	bf 90       	pop	r11
     616:	af 90       	pop	r10
     618:	9f 90       	pop	r9
     61a:	8f 90       	pop	r8
     61c:	7f 90       	pop	r7
     61e:	6f 90       	pop	r6
     620:	5f 90       	pop	r5
     622:	4f 90       	pop	r4
     624:	3f 90       	pop	r3
     626:	2f 90       	pop	r2
     628:	08 95       	ret

0000062a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     62a:	4f 92       	push	r4
     62c:	5f 92       	push	r5
     62e:	6f 92       	push	r6
     630:	7f 92       	push	r7
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
     648:	6a 01       	movw	r12, r20
     64a:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     64c:	8c 01       	movw	r16, r24
     64e:	09 5f       	subi	r16, 0xF9	; 249
     650:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     652:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     656:	eb 85       	ldd	r30, Y+11	; 0x0b
     658:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     65a:	88 81       	ld	r24, Y
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	aa 81       	ldd	r26, Y+2	; 0x02
     660:	bb 81       	ldd	r27, Y+3	; 0x03
     662:	c8 2a       	or	r12, r24
     664:	d9 2a       	or	r13, r25
     666:	ea 2a       	or	r14, r26
     668:	fb 2a       	or	r15, r27
     66a:	c8 82       	st	Y, r12
     66c:	d9 82       	std	Y+1, r13	; 0x01
     66e:	ea 82       	std	Y+2, r14	; 0x02
     670:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     672:	c1 2c       	mov	r12, r1
     674:	d1 2c       	mov	r13, r1
     676:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     678:	3d c0       	rjmp	.+122    	; 0x6f4 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     67a:	a4 80       	ldd	r10, Z+4	; 0x04
     67c:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     67e:	80 81       	ld	r24, Z
     680:	91 81       	ldd	r25, Z+1	; 0x01
     682:	a2 81       	ldd	r26, Z+2	; 0x02
     684:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     686:	ac 01       	movw	r20, r24
     688:	bd 01       	movw	r22, r26
     68a:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     68c:	b2 fd       	sbrc	r27, 2
     68e:	0e c0       	rjmp	.+28     	; 0x6ac <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     690:	48 80       	ld	r4, Y
     692:	59 80       	ldd	r5, Y+1	; 0x01
     694:	6a 80       	ldd	r6, Y+2	; 0x02
     696:	7b 80       	ldd	r7, Y+3	; 0x03
     698:	44 22       	and	r4, r20
     69a:	55 22       	and	r5, r21
     69c:	66 22       	and	r6, r22
     69e:	77 22       	and	r7, r23
     6a0:	45 28       	or	r4, r5
     6a2:	46 28       	or	r4, r6
     6a4:	47 28       	or	r4, r7
     6a6:	89 f4       	brne	.+34     	; 0x6ca <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	12 c0       	rjmp	.+36     	; 0x6d0 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     6ac:	48 80       	ld	r4, Y
     6ae:	59 80       	ldd	r5, Y+1	; 0x01
     6b0:	6a 80       	ldd	r6, Y+2	; 0x02
     6b2:	7b 80       	ldd	r7, Y+3	; 0x03
     6b4:	44 22       	and	r4, r20
     6b6:	55 22       	and	r5, r21
     6b8:	66 22       	and	r6, r22
     6ba:	77 22       	and	r7, r23
     6bc:	44 15       	cp	r20, r4
     6be:	55 05       	cpc	r21, r5
     6c0:	66 05       	cpc	r22, r6
     6c2:	77 05       	cpc	r23, r7
     6c4:	21 f0       	breq	.+8      	; 0x6ce <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     6ce:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     6d0:	22 23       	and	r18, r18
     6d2:	71 f0       	breq	.+28     	; 0x6f0 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     6d4:	b0 ff       	sbrs	r27, 0
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     6d8:	c4 2a       	or	r12, r20
     6da:	d5 2a       	or	r13, r21
     6dc:	e6 2a       	or	r14, r22
     6de:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     6e0:	48 81       	ld	r20, Y
     6e2:	59 81       	ldd	r21, Y+1	; 0x01
     6e4:	6a 81       	ldd	r22, Y+2	; 0x02
     6e6:	7b 81       	ldd	r23, Y+3	; 0x03
     6e8:	72 60       	ori	r23, 0x02	; 2
     6ea:	cf 01       	movw	r24, r30
     6ec:	0e 94 43 14 	call	0x2886	; 0x2886 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6f0:	ea 2d       	mov	r30, r10
     6f2:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6f4:	e0 17       	cp	r30, r16
     6f6:	f1 07       	cpc	r31, r17
     6f8:	09 f0       	breq	.+2      	; 0x6fc <xEventGroupSetBits+0xd2>
     6fa:	bf cf       	rjmp	.-130    	; 0x67a <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     6fc:	c0 94       	com	r12
     6fe:	d0 94       	com	r13
     700:	e0 94       	com	r14
     702:	f0 94       	com	r15
     704:	88 81       	ld	r24, Y
     706:	99 81       	ldd	r25, Y+1	; 0x01
     708:	aa 81       	ldd	r26, Y+2	; 0x02
     70a:	bb 81       	ldd	r27, Y+3	; 0x03
     70c:	c8 22       	and	r12, r24
     70e:	d9 22       	and	r13, r25
     710:	ea 22       	and	r14, r26
     712:	fb 22       	and	r15, r27
     714:	c8 82       	st	Y, r12
     716:	d9 82       	std	Y+1, r13	; 0x01
     718:	ea 82       	std	Y+2, r14	; 0x02
     71a:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     71c:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     720:	68 81       	ld	r22, Y
     722:	79 81       	ldd	r23, Y+1	; 0x01
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	9b 81       	ldd	r25, Y+3	; 0x03
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	bf 90       	pop	r11
     73a:	af 90       	pop	r10
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	5f 90       	pop	r5
     742:	4f 90       	pop	r4
     744:	08 95       	ret

00000746 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     746:	ee e4       	ldi	r30, 0x4E	; 78
     748:	f9 e0       	ldi	r31, 0x09	; 9
     74a:	a2 e5       	ldi	r26, 0x52	; 82
     74c:	b9 e0       	ldi	r27, 0x09	; 9
     74e:	b1 83       	std	Z+1, r27	; 0x01
     750:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     752:	13 82       	std	Z+3, r1	; 0x03
     754:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     756:	ee ec       	ldi	r30, 0xCE	; 206
     758:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     75a:	f0 93 4d 09 	sts	0x094D, r31	; 0x80094d <pxEnd+0x1>
     75e:	e0 93 4c 09 	sts	0x094C, r30	; 0x80094c <pxEnd>
    pxEnd->xBlockSize = 0;
     762:	13 82       	std	Z+3, r1	; 0x03
     764:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     766:	11 82       	std	Z+1, r1	; 0x01
     768:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     76a:	8c e7       	ldi	r24, 0x7C	; 124
     76c:	9c e0       	ldi	r25, 0x0C	; 12
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	9c 93       	st	X, r25
     772:	8e 93       	st	-X, r24
     774:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     776:	ed 93       	st	X+, r30
     778:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     77a:	90 93 49 09 	sts	0x0949, r25	; 0x800949 <xMinimumEverFreeBytesRemaining+0x1>
     77e:	80 93 48 09 	sts	0x0948, r24	; 0x800948 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     782:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <xFreeBytesRemaining+0x1>
     786:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e8       	ldi	r25, 0x80	; 128
     78e:	90 93 43 09 	sts	0x0943, r25	; 0x800943 <__data_end+0x1>
     792:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <__data_end>
     796:	08 95       	ret

00000798 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     79e:	ae e4       	ldi	r26, 0x4E	; 78
     7a0:	b9 e0       	ldi	r27, 0x09	; 9
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <prvInsertBlockIntoFreeList+0xe>
     7a4:	df 01       	movw	r26, r30
     7a6:	ed 91       	ld	r30, X+
     7a8:	fc 91       	ld	r31, X
     7aa:	11 97       	sbiw	r26, 0x01	; 1
     7ac:	ec 17       	cp	r30, r28
     7ae:	fd 07       	cpc	r31, r29
     7b0:	c8 f3       	brcs	.-14     	; 0x7a4 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	8d 91       	ld	r24, X+
     7b6:	9c 91       	ld	r25, X
     7b8:	13 97       	sbiw	r26, 0x03	; 3
     7ba:	9d 01       	movw	r18, r26
     7bc:	28 0f       	add	r18, r24
     7be:	39 1f       	adc	r19, r25
     7c0:	c2 17       	cp	r28, r18
     7c2:	d3 07       	cpc	r29, r19
     7c4:	49 f4       	brne	.+18     	; 0x7d8 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     7c6:	2a 81       	ldd	r18, Y+2	; 0x02
     7c8:	3b 81       	ldd	r19, Y+3	; 0x03
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	13 96       	adiw	r26, 0x03	; 3
     7d0:	9c 93       	st	X, r25
     7d2:	8e 93       	st	-X, r24
     7d4:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     7d6:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	9b 81       	ldd	r25, Y+3	; 0x03
     7dc:	9e 01       	movw	r18, r28
     7de:	28 0f       	add	r18, r24
     7e0:	39 1f       	adc	r19, r25
     7e2:	e2 17       	cp	r30, r18
     7e4:	f3 07       	cpc	r31, r19
     7e6:	c1 f4       	brne	.+48     	; 0x818 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     7e8:	20 91 4c 09 	lds	r18, 0x094C	; 0x80094c <pxEnd>
     7ec:	30 91 4d 09 	lds	r19, 0x094D	; 0x80094d <pxEnd+0x1>
     7f0:	e2 17       	cp	r30, r18
     7f2:	f3 07       	cpc	r31, r19
     7f4:	71 f0       	breq	.+28     	; 0x812 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7f6:	22 81       	ldd	r18, Z+2	; 0x02
     7f8:	33 81       	ldd	r19, Z+3	; 0x03
     7fa:	82 0f       	add	r24, r18
     7fc:	93 1f       	adc	r25, r19
     7fe:	9b 83       	std	Y+3, r25	; 0x03
     800:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     802:	ed 91       	ld	r30, X+
     804:	fc 91       	ld	r31, X
     806:	11 97       	sbiw	r26, 0x01	; 1
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	99 83       	std	Y+1, r25	; 0x01
     80e:	88 83       	st	Y, r24
     810:	05 c0       	rjmp	.+10     	; 0x81c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     812:	39 83       	std	Y+1, r19	; 0x01
     814:	28 83       	st	Y, r18
     816:	02 c0       	rjmp	.+4      	; 0x81c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     818:	f9 83       	std	Y+1, r31	; 0x01
     81a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     81c:	ca 17       	cp	r28, r26
     81e:	db 07       	cpc	r29, r27
     820:	11 f0       	breq	.+4      	; 0x826 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     822:	cd 93       	st	X+, r28
     824:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     83a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     83e:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <pxEnd>
     842:	90 91 4d 09 	lds	r25, 0x094D	; 0x80094d <pxEnd+0x1>
     846:	89 2b       	or	r24, r25
     848:	09 f4       	brne	.+2      	; 0x84c <pvPortMalloc+0x20>
        {
            prvHeapInit();
     84a:	7d df       	rcall	.-262    	; 0x746 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     84c:	80 91 42 09 	lds	r24, 0x0942	; 0x800942 <__data_end>
     850:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__data_end+0x1>
     854:	80 23       	and	r24, r16
     856:	91 23       	and	r25, r17
     858:	89 2b       	or	r24, r25
     85a:	09 f0       	breq	.+2      	; 0x85e <pvPortMalloc+0x32>
     85c:	76 c0       	rjmp	.+236    	; 0x94a <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     85e:	01 15       	cp	r16, r1
     860:	11 05       	cpc	r17, r1
     862:	49 f0       	breq	.+18     	; 0x876 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     864:	c8 01       	movw	r24, r16
     866:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     868:	08 17       	cp	r16, r24
     86a:	19 07       	cpc	r17, r25
     86c:	18 f0       	brcs	.+6      	; 0x874 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     86e:	00 e0       	ldi	r16, 0x00	; 0
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	01 c0       	rjmp	.+2      	; 0x876 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     874:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     876:	01 15       	cp	r16, r1
     878:	11 05       	cpc	r17, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <pvPortMalloc+0x52>
     87c:	69 c0       	rjmp	.+210    	; 0x950 <pvPortMalloc+0x124>
     87e:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <xFreeBytesRemaining>
     882:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <xFreeBytesRemaining+0x1>
     886:	80 17       	cp	r24, r16
     888:	91 07       	cpc	r25, r17
     88a:	08 f4       	brcc	.+2      	; 0x88e <pvPortMalloc+0x62>
     88c:	64 c0       	rjmp	.+200    	; 0x956 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     88e:	c0 91 4e 09 	lds	r28, 0x094E	; 0x80094e <xStart>
     892:	d0 91 4f 09 	lds	r29, 0x094F	; 0x80094f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     896:	ee e4       	ldi	r30, 0x4E	; 78
     898:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     89c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     89e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	9b 81       	ldd	r25, Y+3	; 0x03
     8a4:	80 17       	cp	r24, r16
     8a6:	91 07       	cpc	r25, r17
     8a8:	20 f4       	brcc	.+8      	; 0x8b2 <pvPortMalloc+0x86>
     8aa:	88 81       	ld	r24, Y
     8ac:	99 81       	ldd	r25, Y+1	; 0x01
     8ae:	00 97       	sbiw	r24, 0x00	; 0
     8b0:	a9 f7       	brne	.-22     	; 0x89c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     8b2:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <pxEnd>
     8b6:	90 91 4d 09 	lds	r25, 0x094D	; 0x80094d <pxEnd+0x1>
     8ba:	c8 17       	cp	r28, r24
     8bc:	d9 07       	cpc	r29, r25
     8be:	09 f4       	brne	.+2      	; 0x8c2 <pvPortMalloc+0x96>
     8c0:	4d c0       	rjmp	.+154    	; 0x95c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     8c2:	e0 80       	ld	r14, Z
     8c4:	f1 80       	ldd	r15, Z+1	; 0x01
     8c6:	84 e0       	ldi	r24, 0x04	; 4
     8c8:	e8 0e       	add	r14, r24
     8ca:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     8cc:	88 81       	ld	r24, Y
     8ce:	99 81       	ldd	r25, Y+1	; 0x01
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     8d4:	2a 81       	ldd	r18, Y+2	; 0x02
     8d6:	3b 81       	ldd	r19, Y+3	; 0x03
     8d8:	20 1b       	sub	r18, r16
     8da:	31 0b       	sbc	r19, r17
     8dc:	29 30       	cpi	r18, 0x09	; 9
     8de:	31 05       	cpc	r19, r1
     8e0:	48 f0       	brcs	.+18     	; 0x8f4 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8e2:	ce 01       	movw	r24, r28
     8e4:	80 0f       	add	r24, r16
     8e6:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8e8:	fc 01       	movw	r30, r24
     8ea:	33 83       	std	Z+3, r19	; 0x03
     8ec:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     8ee:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     8f0:	0a 83       	std	Y+2, r16	; 0x02
     8f2:	52 df       	rcall	.-348    	; 0x798 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     8f4:	2a 81       	ldd	r18, Y+2	; 0x02
     8f6:	3b 81       	ldd	r19, Y+3	; 0x03
     8f8:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <xFreeBytesRemaining>
     8fc:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <xFreeBytesRemaining+0x1>
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <xFreeBytesRemaining+0x1>
     908:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     90c:	40 91 48 09 	lds	r20, 0x0948	; 0x800948 <xMinimumEverFreeBytesRemaining>
     910:	50 91 49 09 	lds	r21, 0x0949	; 0x800949 <xMinimumEverFreeBytesRemaining+0x1>
     914:	84 17       	cp	r24, r20
     916:	95 07       	cpc	r25, r21
     918:	20 f4       	brcc	.+8      	; 0x922 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     91a:	90 93 49 09 	sts	0x0949, r25	; 0x800949 <xMinimumEverFreeBytesRemaining+0x1>
     91e:	80 93 48 09 	sts	0x0948, r24	; 0x800948 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     922:	80 91 42 09 	lds	r24, 0x0942	; 0x800942 <__data_end>
     926:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__data_end+0x1>
     92a:	28 2b       	or	r18, r24
     92c:	39 2b       	or	r19, r25
     92e:	3b 83       	std	Y+3, r19	; 0x03
     930:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     932:	19 82       	std	Y+1, r1	; 0x01
     934:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     936:	80 91 46 09 	lds	r24, 0x0946	; 0x800946 <xNumberOfSuccessfulAllocations>
     93a:	90 91 47 09 	lds	r25, 0x0947	; 0x800947 <xNumberOfSuccessfulAllocations+0x1>
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	90 93 47 09 	sts	0x0947, r25	; 0x800947 <xNumberOfSuccessfulAllocations+0x1>
     944:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <xNumberOfSuccessfulAllocations>
     948:	0b c0       	rjmp	.+22     	; 0x960 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     94a:	e1 2c       	mov	r14, r1
     94c:	f1 2c       	mov	r15, r1
     94e:	08 c0       	rjmp	.+16     	; 0x960 <pvPortMalloc+0x134>
     950:	e1 2c       	mov	r14, r1
     952:	f1 2c       	mov	r15, r1
     954:	05 c0       	rjmp	.+10     	; 0x960 <pvPortMalloc+0x134>
     956:	e1 2c       	mov	r14, r1
     958:	f1 2c       	mov	r15, r1
     95a:	02 c0       	rjmp	.+4      	; 0x960 <pvPortMalloc+0x134>
     95c:	e1 2c       	mov	r14, r1
     95e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     960:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     964:	e1 14       	cp	r14, r1
     966:	f1 04       	cpc	r15, r1
     968:	11 f4       	brne	.+4      	; 0x96e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     96a:	0e 94 ed 1c 	call	0x39da	; 0x39da <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     96e:	c7 01       	movw	r24, r14
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	08 95       	ret

0000097e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	91 f1       	breq	.+100    	; 0x9ee <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     98a:	ec 01       	movw	r28, r24
     98c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     98e:	4a 81       	ldd	r20, Y+2	; 0x02
     990:	5b 81       	ldd	r21, Y+3	; 0x03
     992:	20 91 42 09 	lds	r18, 0x0942	; 0x800942 <__data_end>
     996:	30 91 43 09 	lds	r19, 0x0943	; 0x800943 <__data_end+0x1>
     99a:	ba 01       	movw	r22, r20
     99c:	62 23       	and	r22, r18
     99e:	73 23       	and	r23, r19
     9a0:	67 2b       	or	r22, r23
     9a2:	29 f1       	breq	.+74     	; 0x9ee <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     9a4:	68 81       	ld	r22, Y
     9a6:	79 81       	ldd	r23, Y+1	; 0x01
     9a8:	67 2b       	or	r22, r23
     9aa:	09 f5       	brne	.+66     	; 0x9ee <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     9ac:	20 95       	com	r18
     9ae:	30 95       	com	r19
     9b0:	24 23       	and	r18, r20
     9b2:	35 23       	and	r19, r21
     9b4:	3b 83       	std	Y+3, r19	; 0x03
     9b6:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     9b8:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	9b 81       	ldd	r25, Y+3	; 0x03
     9c0:	20 91 4a 09 	lds	r18, 0x094A	; 0x80094a <xFreeBytesRemaining>
     9c4:	30 91 4b 09 	lds	r19, 0x094B	; 0x80094b <xFreeBytesRemaining+0x1>
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <xFreeBytesRemaining+0x1>
     9d0:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     9d4:	ce 01       	movw	r24, r28
     9d6:	e0 de       	rcall	.-576    	; 0x798 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     9d8:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <xNumberOfSuccessfulFrees>
     9dc:	90 91 45 09 	lds	r25, 0x0945	; 0x800945 <xNumberOfSuccessfulFrees+0x1>
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	90 93 45 09 	sts	0x0945, r25	; 0x800945 <xNumberOfSuccessfulFrees+0x1>
     9e6:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     9ea:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9f8:	fc 01       	movw	r30, r24
     9fa:	03 96       	adiw	r24, 0x03	; 3
     9fc:	92 83       	std	Z+2, r25	; 0x02
     9fe:	81 83       	std	Z+1, r24	; 0x01
     a00:	4f ef       	ldi	r20, 0xFF	; 255
     a02:	5f ef       	ldi	r21, 0xFF	; 255
     a04:	ba 01       	movw	r22, r20
     a06:	43 83       	std	Z+3, r20	; 0x03
     a08:	54 83       	std	Z+4, r21	; 0x04
     a0a:	65 83       	std	Z+5, r22	; 0x05
     a0c:	76 83       	std	Z+6, r23	; 0x06
     a0e:	90 87       	std	Z+8, r25	; 0x08
     a10:	87 83       	std	Z+7, r24	; 0x07
     a12:	92 87       	std	Z+10, r25	; 0x0a
     a14:	81 87       	std	Z+9, r24	; 0x09
     a16:	10 82       	st	Z, r1
     a18:	08 95       	ret

00000a1a <vListInitialiseItem>:
     a1a:	fc 01       	movw	r30, r24
     a1c:	13 86       	std	Z+11, r1	; 0x0b
     a1e:	12 86       	std	Z+10, r1	; 0x0a
     a20:	08 95       	ret

00000a22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a2c:	08 81       	ld	r16, Y
     a2e:	19 81       	ldd	r17, Y+1	; 0x01
     a30:	2a 81       	ldd	r18, Y+2	; 0x02
     a32:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a34:	0f 3f       	cpi	r16, 0xFF	; 255
     a36:	4f ef       	ldi	r20, 0xFF	; 255
     a38:	14 07       	cpc	r17, r20
     a3a:	24 07       	cpc	r18, r20
     a3c:	34 07       	cpc	r19, r20
     a3e:	21 f4       	brne	.+8      	; 0xa48 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a40:	fc 01       	movw	r30, r24
     a42:	a1 85       	ldd	r26, Z+9	; 0x09
     a44:	b2 85       	ldd	r27, Z+10	; 0x0a
     a46:	11 c0       	rjmp	.+34     	; 0xa6a <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a48:	dc 01       	movw	r26, r24
     a4a:	13 96       	adiw	r26, 0x03	; 3
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <vListInsert+0x2e>
     a4e:	df 01       	movw	r26, r30
     a50:	14 96       	adiw	r26, 0x04	; 4
     a52:	ed 91       	ld	r30, X+
     a54:	fc 91       	ld	r31, X
     a56:	15 97       	sbiw	r26, 0x05	; 5
     a58:	40 81       	ld	r20, Z
     a5a:	51 81       	ldd	r21, Z+1	; 0x01
     a5c:	62 81       	ldd	r22, Z+2	; 0x02
     a5e:	73 81       	ldd	r23, Z+3	; 0x03
     a60:	04 17       	cp	r16, r20
     a62:	15 07       	cpc	r17, r21
     a64:	26 07       	cpc	r18, r22
     a66:	37 07       	cpc	r19, r23
     a68:	90 f7       	brcc	.-28     	; 0xa4e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a6a:	14 96       	adiw	r26, 0x04	; 4
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	15 97       	sbiw	r26, 0x05	; 5
     a72:	fd 83       	std	Y+5, r31	; 0x05
     a74:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a76:	d7 83       	std	Z+7, r29	; 0x07
     a78:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a7a:	bf 83       	std	Y+7, r27	; 0x07
     a7c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a7e:	15 96       	adiw	r26, 0x05	; 5
     a80:	dc 93       	st	X, r29
     a82:	ce 93       	st	-X, r28
     a84:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a86:	9b 87       	std	Y+11, r25	; 0x0b
     a88:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 81       	ld	r18, Z
     a8e:	2f 5f       	subi	r18, 0xFF	; 255
     a90:	20 83       	st	Z, r18
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     aa2:	a2 85       	ldd	r26, Z+10	; 0x0a
     aa4:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     aa6:	c4 81       	ldd	r28, Z+4	; 0x04
     aa8:	d5 81       	ldd	r29, Z+5	; 0x05
     aaa:	86 81       	ldd	r24, Z+6	; 0x06
     aac:	97 81       	ldd	r25, Z+7	; 0x07
     aae:	9f 83       	std	Y+7, r25	; 0x07
     ab0:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ab2:	c6 81       	ldd	r28, Z+6	; 0x06
     ab4:	d7 81       	ldd	r29, Z+7	; 0x07
     ab6:	84 81       	ldd	r24, Z+4	; 0x04
     ab8:	95 81       	ldd	r25, Z+5	; 0x05
     aba:	9d 83       	std	Y+5, r25	; 0x05
     abc:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     abe:	11 96       	adiw	r26, 0x01	; 1
     ac0:	8d 91       	ld	r24, X+
     ac2:	9c 91       	ld	r25, X
     ac4:	12 97       	sbiw	r26, 0x02	; 2
     ac6:	e8 17       	cp	r30, r24
     ac8:	f9 07       	cpc	r31, r25
     aca:	31 f4       	brne	.+12     	; 0xad8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     acc:	86 81       	ldd	r24, Z+6	; 0x06
     ace:	97 81       	ldd	r25, Z+7	; 0x07
     ad0:	12 96       	adiw	r26, 0x02	; 2
     ad2:	9c 93       	st	X, r25
     ad4:	8e 93       	st	-X, r24
     ad6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ad8:	13 86       	std	Z+11, r1	; 0x0b
     ada:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     adc:	8c 91       	ld	r24, X
     ade:	81 50       	subi	r24, 0x01	; 1
     ae0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ae2:	8c 91       	ld	r24, X
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     aea:	a8 95       	wdr
     aec:	90 ec       	ldi	r25, 0xC0	; 192
     aee:	88 e1       	ldi	r24, 0x18	; 24
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	a8 95       	wdr
     af6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     b00:	08 95       	ret

00000b02 <pxPortInitialiseStack>:
     b02:	fc 01       	movw	r30, r24
     b04:	60 83       	st	Z, r22
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	70 83       	st	Z, r23
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	10 82       	st	Z, r1
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	10 82       	st	Z, r1
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	20 e8       	ldi	r18, 0x80	; 128
     b16:	20 83       	st	Z, r18
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	10 82       	st	Z, r1
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	10 82       	st	Z, r1
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	10 82       	st	Z, r1
     b24:	77 97       	sbiw	r30, 0x17	; 23
     b26:	40 83       	st	Z, r20
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	50 83       	st	Z, r21
     b2c:	86 97       	sbiw	r24, 0x26	; 38
     b2e:	08 95       	ret

00000b30 <xPortStartScheduler>:
     b30:	dc df       	rcall	.-72     	; 0xaea <prvSetupTimerInterrupt>
     b32:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
     b36:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
     b3a:	cd 91       	ld	r28, X+
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	dd 91       	ld	r29, X+
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	bf 90       	pop	r11
     b6c:	af 90       	pop	r10
     b6e:	9f 90       	pop	r9
     b70:	8f 90       	pop	r8
     b72:	7f 90       	pop	r7
     b74:	6f 90       	pop	r6
     b76:	5f 90       	pop	r5
     b78:	4f 90       	pop	r4
     b7a:	3f 90       	pop	r3
     b7c:	2f 90       	pop	r2
     b7e:	1f 90       	pop	r1
     b80:	0f 90       	pop	r0
     b82:	0c be       	out	0x3c, r0	; 60
     b84:	0f 90       	pop	r0
     b86:	0b be       	out	0x3b, r0	; 59
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	08 95       	ret
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	08 95       	ret

00000b94 <vPortYield>:
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	0f 92       	push	r0
     b9c:	0b b6       	in	r0, 0x3b	; 59
     b9e:	0f 92       	push	r0
     ba0:	0c b6       	in	r0, 0x3c	; 60
     ba2:	0f 92       	push	r0
     ba4:	1f 92       	push	r1
     ba6:	11 24       	eor	r1, r1
     ba8:	2f 92       	push	r2
     baa:	3f 92       	push	r3
     bac:	4f 92       	push	r4
     bae:	5f 92       	push	r5
     bb0:	6f 92       	push	r6
     bb2:	7f 92       	push	r7
     bb4:	8f 92       	push	r8
     bb6:	9f 92       	push	r9
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	2f 93       	push	r18
     bca:	3f 93       	push	r19
     bcc:	4f 93       	push	r20
     bce:	5f 93       	push	r21
     bd0:	6f 93       	push	r22
     bd2:	7f 93       	push	r23
     bd4:	8f 93       	push	r24
     bd6:	9f 93       	push	r25
     bd8:	af 93       	push	r26
     bda:	bf 93       	push	r27
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ef 93       	push	r30
     be2:	ff 93       	push	r31
     be4:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
     be8:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
     bec:	0d b6       	in	r0, 0x3d	; 61
     bee:	0d 92       	st	X+, r0
     bf0:	0e b6       	in	r0, 0x3e	; 62
     bf2:	0d 92       	st	X+, r0
     bf4:	0e 94 8c 12 	call	0x2518	; 0x2518 <vTaskSwitchContext>
     bf8:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
     bfc:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
     c00:	cd 91       	ld	r28, X+
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	dd 91       	ld	r29, X+
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	bf 91       	pop	r27
     c12:	af 91       	pop	r26
     c14:	9f 91       	pop	r25
     c16:	8f 91       	pop	r24
     c18:	7f 91       	pop	r23
     c1a:	6f 91       	pop	r22
     c1c:	5f 91       	pop	r21
     c1e:	4f 91       	pop	r20
     c20:	3f 91       	pop	r19
     c22:	2f 91       	pop	r18
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	bf 90       	pop	r11
     c32:	af 90       	pop	r10
     c34:	9f 90       	pop	r9
     c36:	8f 90       	pop	r8
     c38:	7f 90       	pop	r7
     c3a:	6f 90       	pop	r6
     c3c:	5f 90       	pop	r5
     c3e:	4f 90       	pop	r4
     c40:	3f 90       	pop	r3
     c42:	2f 90       	pop	r2
     c44:	1f 90       	pop	r1
     c46:	0f 90       	pop	r0
     c48:	0c be       	out	0x3c, r0	; 60
     c4a:	0f 90       	pop	r0
     c4c:	0b be       	out	0x3b, r0	; 59
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	08 95       	ret

00000c56 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	0f 92       	push	r0
     c5e:	0b b6       	in	r0, 0x3b	; 59
     c60:	0f 92       	push	r0
     c62:	0c b6       	in	r0, 0x3c	; 60
     c64:	0f 92       	push	r0
     c66:	1f 92       	push	r1
     c68:	11 24       	eor	r1, r1
     c6a:	2f 92       	push	r2
     c6c:	3f 92       	push	r3
     c6e:	4f 92       	push	r4
     c70:	5f 92       	push	r5
     c72:	6f 92       	push	r6
     c74:	7f 92       	push	r7
     c76:	8f 92       	push	r8
     c78:	9f 92       	push	r9
     c7a:	af 92       	push	r10
     c7c:	bf 92       	push	r11
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	2f 93       	push	r18
     c8c:	3f 93       	push	r19
     c8e:	4f 93       	push	r20
     c90:	5f 93       	push	r21
     c92:	6f 93       	push	r22
     c94:	7f 93       	push	r23
     c96:	8f 93       	push	r24
     c98:	9f 93       	push	r25
     c9a:	af 93       	push	r26
     c9c:	bf 93       	push	r27
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
     caa:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
     cae:	0d b6       	in	r0, 0x3d	; 61
     cb0:	0d 92       	st	X+, r0
     cb2:	0e b6       	in	r0, 0x3e	; 62
     cb4:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     cb6:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     cb8:	0e 94 04 10 	call	0x2008	; 0x2008 <xTaskIncrementTick>
     cbc:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     cbe:	0e 94 8c 12 	call	0x2518	; 0x2518 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     cc2:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
     cc6:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
     cca:	cd 91       	ld	r28, X+
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	dd 91       	ld	r29, X+
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	7f 90       	pop	r7
     d04:	6f 90       	pop	r6
     d06:	5f 90       	pop	r5
     d08:	4f 90       	pop	r4
     d0a:	3f 90       	pop	r3
     d0c:	2f 90       	pop	r2
     d0e:	1f 90       	pop	r1
     d10:	0f 90       	pop	r0
     d12:	0c be       	out	0x3c, r0	; 60
     d14:	0f 90       	pop	r0
     d16:	0b be       	out	0x3b, r0	; 59
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d1e:	08 95       	ret

00000d20 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d20:	9a df       	rcall	.-204    	; 0xc56 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d22:	18 95       	reti

00000d24 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d24:	dc 01       	movw	r26, r24
     d26:	53 96       	adiw	r26, 0x13	; 19
     d28:	2c 91       	ld	r18, X
     d2a:	53 97       	sbiw	r26, 0x13	; 19
     d2c:	22 23       	and	r18, r18
     d2e:	41 f0       	breq	.+16     	; 0xd40 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     d30:	5a 96       	adiw	r26, 0x1a	; 26
     d32:	ed 91       	ld	r30, X+
     d34:	fc 91       	ld	r31, X
     d36:	5b 97       	sbiw	r26, 0x1b	; 27
     d38:	90 81       	ld	r25, Z
     d3a:	8a e0       	ldi	r24, 0x0A	; 10
     d3c:	89 1b       	sub	r24, r25
     d3e:	08 95       	ret
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	08 95       	ret

00000d44 <prvIsQueueEmpty>:
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	0f 92       	push	r0
     d4a:	fc 01       	movw	r30, r24
     d4c:	86 8d       	ldd	r24, Z+30	; 0x1e
     d4e:	81 11       	cpse	r24, r1
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <prvIsQueueEmpty+0x12>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <prvIsQueueEmpty+0x14>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	08 95       	ret

00000d5e <prvIsQueueFull>:
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	0f 92       	push	r0
     d64:	fc 01       	movw	r30, r24
     d66:	26 8d       	ldd	r18, Z+30	; 0x1e
     d68:	87 8d       	ldd	r24, Z+31	; 0x1f
     d6a:	28 13       	cpse	r18, r24
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <prvIsQueueFull+0x14>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <prvIsQueueFull+0x16>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	08 95       	ret

00000d7a <prvCopyDataToQueue>:
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	ec 01       	movw	r28, r24
     d84:	04 2f       	mov	r16, r20
     d86:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d88:	48 a1       	ldd	r20, Y+32	; 0x20
     d8a:	41 11       	cpse	r20, r1
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <prvCopyDataToQueue+0x2c>
     d8e:	88 81       	ld	r24, Y
     d90:	99 81       	ldd	r25, Y+1	; 0x01
     d92:	89 2b       	or	r24, r25
     d94:	09 f0       	breq	.+2      	; 0xd98 <prvCopyDataToQueue+0x1e>
     d96:	42 c0       	rjmp	.+132    	; 0xe1c <prvCopyDataToQueue+0xa2>
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	9d 81       	ldd	r25, Y+5	; 0x05
     d9c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <xTaskPriorityDisinherit>
     da0:	1d 82       	std	Y+5, r1	; 0x05
     da2:	1c 82       	std	Y+4, r1	; 0x04
     da4:	42 c0       	rjmp	.+132    	; 0xe2a <prvCopyDataToQueue+0xb0>
     da6:	01 11       	cpse	r16, r1
     da8:	17 c0       	rjmp	.+46     	; 0xdd8 <prvCopyDataToQueue+0x5e>
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
     db0:	0e 94 78 30 	call	0x60f0	; 0x60f0 <memcpy>
     db4:	28 a1       	ldd	r18, Y+32	; 0x20
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	82 0f       	add	r24, r18
     dbc:	91 1d       	adc	r25, r1
     dbe:	9b 83       	std	Y+3, r25	; 0x03
     dc0:	8a 83       	std	Y+2, r24	; 0x02
     dc2:	2c 81       	ldd	r18, Y+4	; 0x04
     dc4:	3d 81       	ldd	r19, Y+5	; 0x05
     dc6:	82 17       	cp	r24, r18
     dc8:	93 07       	cpc	r25, r19
     dca:	50 f1       	brcs	.+84     	; 0xe20 <prvCopyDataToQueue+0xa6>
     dcc:	88 81       	ld	r24, Y
     dce:	99 81       	ldd	r25, Y+1	; 0x01
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	29 c0       	rjmp	.+82     	; 0xe2a <prvCopyDataToQueue+0xb0>
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	9f 81       	ldd	r25, Y+7	; 0x07
     dde:	0e 94 78 30 	call	0x60f0	; 0x60f0 <memcpy>
     de2:	88 a1       	ldd	r24, Y+32	; 0x20
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	91 95       	neg	r25
     de8:	81 95       	neg	r24
     dea:	91 09       	sbc	r25, r1
     dec:	2e 81       	ldd	r18, Y+6	; 0x06
     dee:	3f 81       	ldd	r19, Y+7	; 0x07
     df0:	28 0f       	add	r18, r24
     df2:	39 1f       	adc	r19, r25
     df4:	3f 83       	std	Y+7, r19	; 0x07
     df6:	2e 83       	std	Y+6, r18	; 0x06
     df8:	48 81       	ld	r20, Y
     dfa:	59 81       	ldd	r21, Y+1	; 0x01
     dfc:	24 17       	cp	r18, r20
     dfe:	35 07       	cpc	r19, r21
     e00:	30 f4       	brcc	.+12     	; 0xe0e <prvCopyDataToQueue+0x94>
     e02:	2c 81       	ldd	r18, Y+4	; 0x04
     e04:	3d 81       	ldd	r19, Y+5	; 0x05
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	9f 83       	std	Y+7, r25	; 0x07
     e0c:	8e 83       	std	Y+6, r24	; 0x06
     e0e:	02 30       	cpi	r16, 0x02	; 2
     e10:	49 f4       	brne	.+18     	; 0xe24 <prvCopyDataToQueue+0xaa>
     e12:	11 23       	and	r17, r17
     e14:	49 f0       	breq	.+18     	; 0xe28 <prvCopyDataToQueue+0xae>
     e16:	11 50       	subi	r17, 0x01	; 1
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <prvCopyDataToQueue+0xb0>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <prvCopyDataToQueue+0xb0>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <prvCopyDataToQueue+0xb0>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <prvCopyDataToQueue+0xb0>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	1f 5f       	subi	r17, 0xFF	; 255
     e2c:	1e 8f       	std	Y+30, r17	; 0x1e
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <prvCopyDataFromQueue>:
     e38:	fc 01       	movw	r30, r24
     e3a:	40 a1       	ldd	r20, Z+32	; 0x20
     e3c:	44 23       	and	r20, r20
     e3e:	a9 f0       	breq	.+42     	; 0xe6a <prvCopyDataFromQueue+0x32>
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	26 81       	ldd	r18, Z+6	; 0x06
     e44:	37 81       	ldd	r19, Z+7	; 0x07
     e46:	24 0f       	add	r18, r20
     e48:	35 1f       	adc	r19, r21
     e4a:	37 83       	std	Z+7, r19	; 0x07
     e4c:	26 83       	std	Z+6, r18	; 0x06
     e4e:	84 81       	ldd	r24, Z+4	; 0x04
     e50:	95 81       	ldd	r25, Z+5	; 0x05
     e52:	28 17       	cp	r18, r24
     e54:	39 07       	cpc	r19, r25
     e56:	20 f0       	brcs	.+8      	; 0xe60 <prvCopyDataFromQueue+0x28>
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	97 83       	std	Z+7, r25	; 0x07
     e5e:	86 83       	std	Z+6, r24	; 0x06
     e60:	cb 01       	movw	r24, r22
     e62:	66 81       	ldd	r22, Z+6	; 0x06
     e64:	77 81       	ldd	r23, Z+7	; 0x07
     e66:	0c 94 78 30 	jmp	0x60f0	; 0x60f0 <memcpy>
     e6a:	08 95       	ret

00000e6c <prvUnlockQueue>:
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ec 01       	movw	r28, r24
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	0f 92       	push	r0
     e7a:	1a a1       	ldd	r17, Y+34	; 0x22
     e7c:	0b c0       	rjmp	.+22     	; 0xe94 <prvUnlockQueue+0x28>
     e7e:	8b 89       	ldd	r24, Y+19	; 0x13
     e80:	88 23       	and	r24, r24
     e82:	51 f0       	breq	.+20     	; 0xe98 <prvUnlockQueue+0x2c>
     e84:	ce 01       	movw	r24, r28
     e86:	43 96       	adiw	r24, 0x13	; 19
     e88:	0e 94 94 13 	call	0x2728	; 0x2728 <xTaskRemoveFromEventList>
     e8c:	81 11       	cpse	r24, r1
     e8e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <vTaskMissedYield>
     e92:	11 50       	subi	r17, 0x01	; 1
     e94:	11 16       	cp	r1, r17
     e96:	9c f3       	brlt	.-26     	; 0xe7e <prvUnlockQueue+0x12>
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	8a a3       	std	Y+34, r24	; 0x22
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	0f 92       	push	r0
     ea6:	19 a1       	ldd	r17, Y+33	; 0x21
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <prvUnlockQueue+0x54>
     eaa:	88 85       	ldd	r24, Y+8	; 0x08
     eac:	88 23       	and	r24, r24
     eae:	51 f0       	breq	.+20     	; 0xec4 <prvUnlockQueue+0x58>
     eb0:	ce 01       	movw	r24, r28
     eb2:	08 96       	adiw	r24, 0x08	; 8
     eb4:	0e 94 94 13 	call	0x2728	; 0x2728 <xTaskRemoveFromEventList>
     eb8:	81 11       	cpse	r24, r1
     eba:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <vTaskMissedYield>
     ebe:	11 50       	subi	r17, 0x01	; 1
     ec0:	11 16       	cp	r1, r17
     ec2:	9c f3       	brlt	.-26     	; 0xeaa <prvUnlockQueue+0x3e>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	89 a3       	std	Y+33, r24	; 0x21
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	08 95       	ret

00000ed4 <xQueueGenericReset>:
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	ec 01       	movw	r28, r24
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	0f 92       	push	r0
     ee0:	e8 81       	ld	r30, Y
     ee2:	f9 81       	ldd	r31, Y+1	; 0x01
     ee4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ee6:	28 a1       	ldd	r18, Y+32	; 0x20
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	82 9f       	mul	r24, r18
     eee:	a0 01       	movw	r20, r0
     ef0:	83 9f       	mul	r24, r19
     ef2:	50 0d       	add	r21, r0
     ef4:	92 9f       	mul	r25, r18
     ef6:	50 0d       	add	r21, r0
     ef8:	11 24       	eor	r1, r1
     efa:	4e 0f       	add	r20, r30
     efc:	5f 1f       	adc	r21, r31
     efe:	5d 83       	std	Y+5, r21	; 0x05
     f00:	4c 83       	std	Y+4, r20	; 0x04
     f02:	1e 8e       	std	Y+30, r1	; 0x1e
     f04:	fb 83       	std	Y+3, r31	; 0x03
     f06:	ea 83       	std	Y+2, r30	; 0x02
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	28 9f       	mul	r18, r24
     f0c:	a0 01       	movw	r20, r0
     f0e:	29 9f       	mul	r18, r25
     f10:	50 0d       	add	r21, r0
     f12:	38 9f       	mul	r19, r24
     f14:	50 0d       	add	r21, r0
     f16:	11 24       	eor	r1, r1
     f18:	cf 01       	movw	r24, r30
     f1a:	84 0f       	add	r24, r20
     f1c:	95 1f       	adc	r25, r21
     f1e:	9f 83       	std	Y+7, r25	; 0x07
     f20:	8e 83       	std	Y+6, r24	; 0x06
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	89 a3       	std	Y+33, r24	; 0x21
     f26:	8a a3       	std	Y+34, r24	; 0x22
     f28:	61 11       	cpse	r22, r1
     f2a:	0b c0       	rjmp	.+22     	; 0xf42 <xQueueGenericReset+0x6e>
     f2c:	88 85       	ldd	r24, Y+8	; 0x08
     f2e:	88 23       	and	r24, r24
     f30:	71 f0       	breq	.+28     	; 0xf4e <xQueueGenericReset+0x7a>
     f32:	ce 01       	movw	r24, r28
     f34:	08 96       	adiw	r24, 0x08	; 8
     f36:	0e 94 94 13 	call	0x2728	; 0x2728 <xTaskRemoveFromEventList>
     f3a:	88 23       	and	r24, r24
     f3c:	41 f0       	breq	.+16     	; 0xf4e <xQueueGenericReset+0x7a>
     f3e:	2a de       	rcall	.-940    	; 0xb94 <vPortYield>
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <xQueueGenericReset+0x7a>
     f42:	ce 01       	movw	r24, r28
     f44:	08 96       	adiw	r24, 0x08	; 8
     f46:	58 dd       	rcall	.-1360   	; 0x9f8 <vListInitialise>
     f48:	ce 01       	movw	r24, r28
     f4a:	43 96       	adiw	r24, 0x13	; 19
     f4c:	55 dd       	rcall	.-1366   	; 0x9f8 <vListInitialise>
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <prvInitialiseNewQueue>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	f8 01       	movw	r30, r16
     f60:	61 11       	cpse	r22, r1
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <prvInitialiseNewQueue+0x10>
     f64:	11 83       	std	Z+1, r17	; 0x01
     f66:	00 83       	st	Z, r16
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <prvInitialiseNewQueue+0x14>
     f6a:	51 83       	std	Z+1, r21	; 0x01
     f6c:	40 83       	st	Z, r20
     f6e:	87 8f       	std	Z+31, r24	; 0x1f
     f70:	60 a3       	std	Z+32, r22	; 0x20
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	cf 01       	movw	r24, r30
     f76:	ae df       	rcall	.-164    	; 0xed4 <xQueueGenericReset>
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <xQueueGenericCreate>:
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	f8 2e       	mov	r15, r24
     f8e:	e6 2e       	mov	r14, r22
     f90:	d4 2e       	mov	r13, r20
     f92:	86 9f       	mul	r24, r22
     f94:	c0 01       	movw	r24, r0
     f96:	11 24       	eor	r1, r1
     f98:	83 96       	adiw	r24, 0x23	; 35
     f9a:	48 dc       	rcall	.-1904   	; 0x82c <pvPortMalloc>
     f9c:	ec 01       	movw	r28, r24
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	41 f0       	breq	.+16     	; 0xfb2 <xQueueGenericCreate+0x34>
     fa2:	8c 01       	movw	r16, r24
     fa4:	2d 2d       	mov	r18, r13
     fa6:	ac 01       	movw	r20, r24
     fa8:	4d 5d       	subi	r20, 0xDD	; 221
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	6e 2d       	mov	r22, r14
     fae:	8f 2d       	mov	r24, r15
     fb0:	d4 df       	rcall	.-88     	; 0xf5a <prvInitialiseNewQueue>
     fb2:	ce 01       	movw	r24, r28
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	08 95       	ret

00000fc4 <xQueueGenericSend>:
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	29 97       	sbiw	r28, 0x09	; 9
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	7c 01       	movw	r14, r24
     fe6:	6b 01       	movw	r12, r22
     fe8:	2e 83       	std	Y+6, r18	; 0x06
     fea:	3f 83       	std	Y+7, r19	; 0x07
     fec:	48 87       	std	Y+8, r20	; 0x08
     fee:	59 87       	std	Y+9, r21	; 0x09
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	0f 92       	push	r0
     ff8:	f7 01       	movw	r30, r14
     ffa:	96 8d       	ldd	r25, Z+30	; 0x1e
     ffc:	87 8d       	ldd	r24, Z+31	; 0x1f
     ffe:	98 17       	cp	r25, r24
    1000:	10 f0       	brcs	.+4      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1002:	02 30       	cpi	r16, 0x02	; 2
    1004:	b1 f4       	brne	.+44     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1006:	40 2f       	mov	r20, r16
    1008:	b6 01       	movw	r22, r12
    100a:	c7 01       	movw	r24, r14
    100c:	b6 de       	rcall	.-660    	; 0xd7a <prvCopyDataToQueue>
    100e:	f7 01       	movw	r30, r14
    1010:	93 89       	ldd	r25, Z+19	; 0x13
    1012:	99 23       	and	r25, r25
    1014:	41 f0       	breq	.+16     	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    1016:	c7 01       	movw	r24, r14
    1018:	43 96       	adiw	r24, 0x13	; 19
    101a:	0e 94 94 13 	call	0x2728	; 0x2728 <xTaskRemoveFromEventList>
    101e:	88 23       	and	r24, r24
    1020:	21 f0       	breq	.+8      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1022:	b8 dd       	rcall	.-1168   	; 0xb94 <vPortYield>
    1024:	02 c0       	rjmp	.+4      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1026:	81 11       	cpse	r24, r1
    1028:	b5 dd       	rcall	.-1174   	; 0xb94 <vPortYield>
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	4c c0       	rjmp	.+152    	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
    1032:	8e 81       	ldd	r24, Y+6	; 0x06
    1034:	9f 81       	ldd	r25, Y+7	; 0x07
    1036:	a8 85       	ldd	r26, Y+8	; 0x08
    1038:	b9 85       	ldd	r27, Y+9	; 0x09
    103a:	89 2b       	or	r24, r25
    103c:	8a 2b       	or	r24, r26
    103e:	8b 2b       	or	r24, r27
    1040:	21 f4       	brne	.+8      	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	40 c0       	rjmp	.+128    	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
    104a:	11 11       	cpse	r17, r1
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <vTaskInternalSetTimeOutState>
    1056:	11 e0       	ldi	r17, 0x01	; 1
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	c1 d7       	rcall	.+3970   	; 0x1fe0 <vTaskSuspendAll>
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	0f 92       	push	r0
    1064:	f7 01       	movw	r30, r14
    1066:	81 a1       	ldd	r24, Z+33	; 0x21
    1068:	8f 3f       	cpi	r24, 0xFF	; 255
    106a:	09 f4       	brne	.+2      	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
    106c:	11 a2       	std	Z+33, r1	; 0x21
    106e:	f7 01       	movw	r30, r14
    1070:	82 a1       	ldd	r24, Z+34	; 0x22
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	09 f4       	brne	.+2      	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    1076:	12 a2       	std	Z+34, r1	; 0x22
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	be 01       	movw	r22, r28
    107e:	6a 5f       	subi	r22, 0xFA	; 250
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	0e 94 04 15 	call	0x2a08	; 0x2a08 <xTaskCheckForTimeOut>
    108a:	81 11       	cpse	r24, r1
    108c:	19 c0       	rjmp	.+50     	; 0x10c0 <__EEPROM_REGION_LENGTH__+0xc0>
    108e:	c7 01       	movw	r24, r14
    1090:	66 de       	rcall	.-820    	; 0xd5e <prvIsQueueFull>
    1092:	88 23       	and	r24, r24
    1094:	81 f0       	breq	.+32     	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
    1096:	4e 81       	ldd	r20, Y+6	; 0x06
    1098:	5f 81       	ldd	r21, Y+7	; 0x07
    109a:	68 85       	ldd	r22, Y+8	; 0x08
    109c:	79 85       	ldd	r23, Y+9	; 0x09
    109e:	c7 01       	movw	r24, r14
    10a0:	08 96       	adiw	r24, 0x08	; 8
    10a2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskPlaceOnEventList>
    10a6:	c7 01       	movw	r24, r14
    10a8:	e1 de       	rcall	.-574    	; 0xe6c <prvUnlockQueue>
    10aa:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
    10ae:	81 11       	cpse	r24, r1
    10b0:	a0 cf       	rjmp	.-192    	; 0xff2 <xQueueGenericSend+0x2e>
    10b2:	70 dd       	rcall	.-1312   	; 0xb94 <vPortYield>
    10b4:	9e cf       	rjmp	.-196    	; 0xff2 <xQueueGenericSend+0x2e>
    10b6:	c7 01       	movw	r24, r14
    10b8:	d9 de       	rcall	.-590    	; 0xe6c <prvUnlockQueue>
    10ba:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
    10be:	99 cf       	rjmp	.-206    	; 0xff2 <xQueueGenericSend+0x2e>
    10c0:	c7 01       	movw	r24, r14
    10c2:	d4 de       	rcall	.-600    	; 0xe6c <prvUnlockQueue>
    10c4:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	29 96       	adiw	r28, 0x09	; 9
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	08 95       	ret

000010e8 <xQueueGenericSendFromISR>:
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	8a 01       	movw	r16, r20
    10f6:	fc 01       	movw	r30, r24
    10f8:	56 8d       	ldd	r21, Z+30	; 0x1e
    10fa:	37 8d       	ldd	r19, Z+31	; 0x1f
    10fc:	53 17       	cp	r21, r19
    10fe:	10 f0       	brcs	.+4      	; 0x1104 <xQueueGenericSendFromISR+0x1c>
    1100:	22 30       	cpi	r18, 0x02	; 2
    1102:	f9 f4       	brne	.+62     	; 0x1142 <xQueueGenericSendFromISR+0x5a>
    1104:	42 2f       	mov	r20, r18
    1106:	78 01       	movw	r14, r16
    1108:	ec 01       	movw	r28, r24
    110a:	1a a1       	ldd	r17, Y+34	; 0x22
    110c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    110e:	ce 01       	movw	r24, r28
    1110:	34 de       	rcall	.-920    	; 0xd7a <prvCopyDataToQueue>
    1112:	1f 3f       	cpi	r17, 0xFF	; 255
    1114:	81 f4       	brne	.+32     	; 0x1136 <xQueueGenericSendFromISR+0x4e>
    1116:	8b 89       	ldd	r24, Y+19	; 0x13
    1118:	88 23       	and	r24, r24
    111a:	a9 f0       	breq	.+42     	; 0x1146 <xQueueGenericSendFromISR+0x5e>
    111c:	ce 01       	movw	r24, r28
    111e:	43 96       	adiw	r24, 0x13	; 19
    1120:	0e 94 94 13 	call	0x2728	; 0x2728 <xTaskRemoveFromEventList>
    1124:	88 23       	and	r24, r24
    1126:	89 f0       	breq	.+34     	; 0x114a <xQueueGenericSendFromISR+0x62>
    1128:	e1 14       	cp	r14, r1
    112a:	f1 04       	cpc	r15, r1
    112c:	81 f0       	breq	.+32     	; 0x114e <xQueueGenericSendFromISR+0x66>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	f7 01       	movw	r30, r14
    1132:	80 83       	st	Z, r24
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <xQueueGenericSendFromISR+0x68>
    1136:	ff 24       	eor	r15, r15
    1138:	f3 94       	inc	r15
    113a:	f1 0e       	add	r15, r17
    113c:	fa a2       	std	Y+34, r15	; 0x22
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <xQueueGenericSendFromISR+0x68>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	05 c0       	rjmp	.+10     	; 0x1150 <xQueueGenericSendFromISR+0x68>
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <xQueueGenericSendFromISR+0x68>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <xQueueGenericSendFromISR+0x68>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	08 95       	ret

0000115e <xQueueReceive>:
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	29 97       	sbiw	r28, 0x09	; 9
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	8c 01       	movw	r16, r24
    1180:	6b 01       	movw	r12, r22
    1182:	2e 83       	std	Y+6, r18	; 0x06
    1184:	3f 83       	std	Y+7, r19	; 0x07
    1186:	48 87       	std	Y+8, r20	; 0x08
    1188:	59 87       	std	Y+9, r21	; 0x09
    118a:	e1 2c       	mov	r14, r1
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	0f 92       	push	r0
    1192:	f8 01       	movw	r30, r16
    1194:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1196:	ff 20       	and	r15, r15
    1198:	99 f0       	breq	.+38     	; 0x11c0 <xQueueReceive+0x62>
    119a:	b6 01       	movw	r22, r12
    119c:	c8 01       	movw	r24, r16
    119e:	4c de       	rcall	.-872    	; 0xe38 <prvCopyDataFromQueue>
    11a0:	fa 94       	dec	r15
    11a2:	f8 01       	movw	r30, r16
    11a4:	f6 8e       	std	Z+30, r15	; 0x1e
    11a6:	80 85       	ldd	r24, Z+8	; 0x08
    11a8:	88 23       	and	r24, r24
    11aa:	31 f0       	breq	.+12     	; 0x11b8 <xQueueReceive+0x5a>
    11ac:	c8 01       	movw	r24, r16
    11ae:	08 96       	adiw	r24, 0x08	; 8
    11b0:	0e 94 94 13 	call	0x2728	; 0x2728 <xTaskRemoveFromEventList>
    11b4:	81 11       	cpse	r24, r1
    11b6:	ee dc       	rcall	.-1572   	; 0xb94 <vPortYield>
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	52 c0       	rjmp	.+164    	; 0x1264 <xQueueReceive+0x106>
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	a8 85       	ldd	r26, Y+8	; 0x08
    11c6:	b9 85       	ldd	r27, Y+9	; 0x09
    11c8:	89 2b       	or	r24, r25
    11ca:	8a 2b       	or	r24, r26
    11cc:	8b 2b       	or	r24, r27
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <xQueueReceive+0x7a>
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	46 c0       	rjmp	.+140    	; 0x1264 <xQueueReceive+0x106>
    11d8:	e1 10       	cpse	r14, r1
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <xQueueReceive+0x8a>
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <vTaskInternalSetTimeOutState>
    11e4:	ee 24       	eor	r14, r14
    11e6:	e3 94       	inc	r14
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	f9 d6       	rcall	.+3570   	; 0x1fe0 <vTaskSuspendAll>
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	0f 92       	push	r0
    11f4:	f8 01       	movw	r30, r16
    11f6:	81 a1       	ldd	r24, Z+33	; 0x21
    11f8:	8f 3f       	cpi	r24, 0xFF	; 255
    11fa:	09 f4       	brne	.+2      	; 0x11fe <xQueueReceive+0xa0>
    11fc:	11 a2       	std	Z+33, r1	; 0x21
    11fe:	f8 01       	movw	r30, r16
    1200:	82 a1       	ldd	r24, Z+34	; 0x22
    1202:	8f 3f       	cpi	r24, 0xFF	; 255
    1204:	09 f4       	brne	.+2      	; 0x1208 <xQueueReceive+0xaa>
    1206:	12 a2       	std	Z+34, r1	; 0x22
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	be 01       	movw	r22, r28
    120e:	6a 5f       	subi	r22, 0xFA	; 250
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	0e 94 04 15 	call	0x2a08	; 0x2a08 <xTaskCheckForTimeOut>
    121a:	81 11       	cpse	r24, r1
    121c:	19 c0       	rjmp	.+50     	; 0x1250 <xQueueReceive+0xf2>
    121e:	c8 01       	movw	r24, r16
    1220:	91 dd       	rcall	.-1246   	; 0xd44 <prvIsQueueEmpty>
    1222:	88 23       	and	r24, r24
    1224:	81 f0       	breq	.+32     	; 0x1246 <xQueueReceive+0xe8>
    1226:	4e 81       	ldd	r20, Y+6	; 0x06
    1228:	5f 81       	ldd	r21, Y+7	; 0x07
    122a:	68 85       	ldd	r22, Y+8	; 0x08
    122c:	79 85       	ldd	r23, Y+9	; 0x09
    122e:	c8 01       	movw	r24, r16
    1230:	43 96       	adiw	r24, 0x13	; 19
    1232:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskPlaceOnEventList>
    1236:	c8 01       	movw	r24, r16
    1238:	19 de       	rcall	.-974    	; 0xe6c <prvUnlockQueue>
    123a:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
    123e:	81 11       	cpse	r24, r1
    1240:	a5 cf       	rjmp	.-182    	; 0x118c <xQueueReceive+0x2e>
    1242:	a8 dc       	rcall	.-1712   	; 0xb94 <vPortYield>
    1244:	a3 cf       	rjmp	.-186    	; 0x118c <xQueueReceive+0x2e>
    1246:	c8 01       	movw	r24, r16
    1248:	11 de       	rcall	.-990    	; 0xe6c <prvUnlockQueue>
    124a:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
    124e:	9e cf       	rjmp	.-196    	; 0x118c <xQueueReceive+0x2e>
    1250:	c8 01       	movw	r24, r16
    1252:	0c de       	rcall	.-1000   	; 0xe6c <prvUnlockQueue>
    1254:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
    1258:	c8 01       	movw	r24, r16
    125a:	74 dd       	rcall	.-1304   	; 0xd44 <prvIsQueueEmpty>
    125c:	88 23       	and	r24, r24
    125e:	09 f4       	brne	.+2      	; 0x1262 <xQueueReceive+0x104>
    1260:	95 cf       	rjmp	.-214    	; 0x118c <xQueueReceive+0x2e>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	29 96       	adiw	r28, 0x09	; 9
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	08 95       	ret

00001282 <xQueueSemaphoreTake>:
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	29 97       	sbiw	r28, 0x09	; 9
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8c 01       	movw	r16, r24
    12a0:	4e 83       	std	Y+6, r20	; 0x06
    12a2:	5f 83       	std	Y+7, r21	; 0x07
    12a4:	68 87       	std	Y+8, r22	; 0x08
    12a6:	79 87       	std	Y+9, r23	; 0x09
    12a8:	e1 2c       	mov	r14, r1
    12aa:	f1 2c       	mov	r15, r1
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	0f 92       	push	r0
    12b2:	f8 01       	movw	r30, r16
    12b4:	86 8d       	ldd	r24, Z+30	; 0x1e
    12b6:	88 23       	and	r24, r24
    12b8:	c9 f0       	breq	.+50     	; 0x12ec <xQueueSemaphoreTake+0x6a>
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	86 8f       	std	Z+30, r24	; 0x1e
    12be:	80 81       	ld	r24, Z
    12c0:	91 81       	ldd	r25, Z+1	; 0x01
    12c2:	89 2b       	or	r24, r25
    12c4:	29 f4       	brne	.+10     	; 0x12d0 <xQueueSemaphoreTake+0x4e>
    12c6:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <pvTaskIncrementMutexHeldCount>
    12ca:	f8 01       	movw	r30, r16
    12cc:	95 83       	std	Z+5, r25	; 0x05
    12ce:	84 83       	std	Z+4, r24	; 0x04
    12d0:	f8 01       	movw	r30, r16
    12d2:	80 85       	ldd	r24, Z+8	; 0x08
    12d4:	88 23       	and	r24, r24
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <xQueueSemaphoreTake+0x62>
    12d8:	c8 01       	movw	r24, r16
    12da:	08 96       	adiw	r24, 0x08	; 8
    12dc:	0e 94 94 13 	call	0x2728	; 0x2728 <xTaskRemoveFromEventList>
    12e0:	81 11       	cpse	r24, r1
    12e2:	58 dc       	rcall	.-1872   	; 0xb94 <vPortYield>
    12e4:	0f 90       	pop	r0
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	6f c0       	rjmp	.+222    	; 0x13ca <xQueueSemaphoreTake+0x148>
    12ec:	8e 81       	ldd	r24, Y+6	; 0x06
    12ee:	9f 81       	ldd	r25, Y+7	; 0x07
    12f0:	a8 85       	ldd	r26, Y+8	; 0x08
    12f2:	b9 85       	ldd	r27, Y+9	; 0x09
    12f4:	89 2b       	or	r24, r25
    12f6:	8a 2b       	or	r24, r26
    12f8:	8b 2b       	or	r24, r27
    12fa:	21 f4       	brne	.+8      	; 0x1304 <xQueueSemaphoreTake+0x82>
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	63 c0       	rjmp	.+198    	; 0x13ca <xQueueSemaphoreTake+0x148>
    1304:	f1 10       	cpse	r15, r1
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <xQueueSemaphoreTake+0x92>
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <vTaskInternalSetTimeOutState>
    1310:	ff 24       	eor	r15, r15
    1312:	f3 94       	inc	r15
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	63 d6       	rcall	.+3270   	; 0x1fe0 <vTaskSuspendAll>
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	0f 92       	push	r0
    1320:	f8 01       	movw	r30, r16
    1322:	81 a1       	ldd	r24, Z+33	; 0x21
    1324:	8f 3f       	cpi	r24, 0xFF	; 255
    1326:	09 f4       	brne	.+2      	; 0x132a <xQueueSemaphoreTake+0xa8>
    1328:	11 a2       	std	Z+33, r1	; 0x21
    132a:	f8 01       	movw	r30, r16
    132c:	82 a1       	ldd	r24, Z+34	; 0x22
    132e:	8f 3f       	cpi	r24, 0xFF	; 255
    1330:	09 f4       	brne	.+2      	; 0x1334 <xQueueSemaphoreTake+0xb2>
    1332:	12 a2       	std	Z+34, r1	; 0x22
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	be 01       	movw	r22, r28
    133a:	6a 5f       	subi	r22, 0xFA	; 250
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	ce 01       	movw	r24, r28
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	0e 94 04 15 	call	0x2a08	; 0x2a08 <xTaskCheckForTimeOut>
    1346:	81 11       	cpse	r24, r1
    1348:	26 c0       	rjmp	.+76     	; 0x1396 <xQueueSemaphoreTake+0x114>
    134a:	c8 01       	movw	r24, r16
    134c:	fb dc       	rcall	.-1546   	; 0xd44 <prvIsQueueEmpty>
    134e:	88 23       	and	r24, r24
    1350:	f1 f0       	breq	.+60     	; 0x138e <xQueueSemaphoreTake+0x10c>
    1352:	f8 01       	movw	r30, r16
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	89 2b       	or	r24, r25
    135a:	51 f4       	brne	.+20     	; 0x1370 <xQueueSemaphoreTake+0xee>
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	0f 92       	push	r0
    1362:	84 81       	ldd	r24, Z+4	; 0x04
    1364:	95 81       	ldd	r25, Z+5	; 0x05
    1366:	0e 94 81 15 	call	0x2b02	; 0x2b02 <xTaskPriorityInherit>
    136a:	e8 2e       	mov	r14, r24
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	4e 81       	ldd	r20, Y+6	; 0x06
    1372:	5f 81       	ldd	r21, Y+7	; 0x07
    1374:	68 85       	ldd	r22, Y+8	; 0x08
    1376:	79 85       	ldd	r23, Y+9	; 0x09
    1378:	c8 01       	movw	r24, r16
    137a:	43 96       	adiw	r24, 0x13	; 19
    137c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskPlaceOnEventList>
    1380:	c8 01       	movw	r24, r16
    1382:	74 dd       	rcall	.-1304   	; 0xe6c <prvUnlockQueue>
    1384:	6d d7       	rcall	.+3802   	; 0x2260 <xTaskResumeAll>
    1386:	81 11       	cpse	r24, r1
    1388:	91 cf       	rjmp	.-222    	; 0x12ac <xQueueSemaphoreTake+0x2a>
    138a:	04 dc       	rcall	.-2040   	; 0xb94 <vPortYield>
    138c:	8f cf       	rjmp	.-226    	; 0x12ac <xQueueSemaphoreTake+0x2a>
    138e:	c8 01       	movw	r24, r16
    1390:	6d dd       	rcall	.-1318   	; 0xe6c <prvUnlockQueue>
    1392:	66 d7       	rcall	.+3788   	; 0x2260 <xTaskResumeAll>
    1394:	8b cf       	rjmp	.-234    	; 0x12ac <xQueueSemaphoreTake+0x2a>
    1396:	c8 01       	movw	r24, r16
    1398:	69 dd       	rcall	.-1326   	; 0xe6c <prvUnlockQueue>
    139a:	62 d7       	rcall	.+3780   	; 0x2260 <xTaskResumeAll>
    139c:	c8 01       	movw	r24, r16
    139e:	d2 dc       	rcall	.-1628   	; 0xd44 <prvIsQueueEmpty>
    13a0:	88 23       	and	r24, r24
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <xQueueSemaphoreTake+0x124>
    13a4:	83 cf       	rjmp	.-250    	; 0x12ac <xQueueSemaphoreTake+0x2a>
    13a6:	ee 20       	and	r14, r14
    13a8:	79 f0       	breq	.+30     	; 0x13c8 <xQueueSemaphoreTake+0x146>
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	0f 92       	push	r0
    13b0:	c8 01       	movw	r24, r16
    13b2:	b8 dc       	rcall	.-1680   	; 0xd24 <prvGetDisinheritPriorityAfterTimeout>
    13b4:	68 2f       	mov	r22, r24
    13b6:	f8 01       	movw	r30, r16
    13b8:	84 81       	ldd	r24, Z+4	; 0x04
    13ba:	95 81       	ldd	r25, Z+5	; 0x05
    13bc:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <vTaskPriorityDisinheritAfterTimeout>
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <xQueueSemaphoreTake+0x148>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	29 96       	adiw	r28, 0x09	; 9
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	08 95       	ret

000013e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	0f 92       	push	r0
    13f0:	89 a1       	ldd	r24, Y+33	; 0x21
    13f2:	8f 3f       	cpi	r24, 0xFF	; 255
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <vQueueWaitForMessageRestricted+0x14>
    13f6:	19 a2       	std	Y+33, r1	; 0x21
    13f8:	8a a1       	ldd	r24, Y+34	; 0x22
    13fa:	8f 3f       	cpi	r24, 0xFF	; 255
    13fc:	09 f4       	brne	.+2      	; 0x1400 <vQueueWaitForMessageRestricted+0x1c>
    13fe:	1a a2       	std	Y+34, r1	; 0x22
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1404:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1406:	81 11       	cpse	r24, r1
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    140a:	ce 01       	movw	r24, r28
    140c:	43 96       	adiw	r24, 0x13	; 19
    140e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1412:	ce 01       	movw	r24, r28
    1414:	2b dd       	rcall	.-1450   	; 0xe6c <prvUnlockQueue>
    }
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <prvBytesInBuffer>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
}
    141c:	fc 01       	movw	r30, r24
    141e:	44 81       	ldd	r20, Z+4	; 0x04
    1420:	55 81       	ldd	r21, Z+5	; 0x05
    1422:	22 81       	ldd	r18, Z+2	; 0x02
    1424:	33 81       	ldd	r19, Z+3	; 0x03
    1426:	24 0f       	add	r18, r20
    1428:	35 1f       	adc	r19, r21
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	b9 01       	movw	r22, r18
    1430:	68 1b       	sub	r22, r24
    1432:	79 0b       	sbc	r23, r25
    1434:	cb 01       	movw	r24, r22
    1436:	64 17       	cp	r22, r20
    1438:	75 07       	cpc	r23, r21
    143a:	10 f0       	brcs	.+4      	; 0x1440 <prvBytesInBuffer+0x24>
    143c:	84 1b       	sub	r24, r20
    143e:	95 0b       	sbc	r25, r21
    1440:	08 95       	ret

00001442 <prvInitialiseNewStreamBuffer>:
    1442:	0f 93       	push	r16
    1444:	fc 01       	movw	r30, r24
    1446:	8f e0       	ldi	r24, 0x0F	; 15
    1448:	df 01       	movw	r26, r30
    144a:	1d 92       	st	X+, r1
    144c:	8a 95       	dec	r24
    144e:	e9 f7       	brne	.-6      	; 0x144a <prvInitialiseNewStreamBuffer+0x8>
    1450:	75 87       	std	Z+13, r23	; 0x0d
    1452:	64 87       	std	Z+12, r22	; 0x0c
    1454:	55 83       	std	Z+5, r21	; 0x05
    1456:	44 83       	std	Z+4, r20	; 0x04
    1458:	37 83       	std	Z+7, r19	; 0x07
    145a:	26 83       	std	Z+6, r18	; 0x06
    145c:	06 87       	std	Z+14, r16	; 0x0e
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <prvWriteBytesToBuffer>:
    1462:	af 92       	push	r10
    1464:	bf 92       	push	r11
    1466:	cf 92       	push	r12
    1468:	df 92       	push	r13
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	6c 01       	movw	r12, r24
    1478:	5b 01       	movw	r10, r22
    147a:	7a 01       	movw	r14, r20
    147c:	fc 01       	movw	r30, r24
    147e:	c2 81       	ldd	r28, Z+2	; 0x02
    1480:	d3 81       	ldd	r29, Z+3	; 0x03
    1482:	04 81       	ldd	r16, Z+4	; 0x04
    1484:	15 81       	ldd	r17, Z+5	; 0x05
    1486:	0c 1b       	sub	r16, r28
    1488:	1d 0b       	sbc	r17, r29
    148a:	40 17       	cp	r20, r16
    148c:	51 07       	cpc	r21, r17
    148e:	08 f4       	brcc	.+2      	; 0x1492 <prvWriteBytesToBuffer+0x30>
    1490:	8a 01       	movw	r16, r20
    1492:	f6 01       	movw	r30, r12
    1494:	84 85       	ldd	r24, Z+12	; 0x0c
    1496:	95 85       	ldd	r25, Z+13	; 0x0d
    1498:	a8 01       	movw	r20, r16
    149a:	b5 01       	movw	r22, r10
    149c:	8c 0f       	add	r24, r28
    149e:	9d 1f       	adc	r25, r29
    14a0:	0e 94 78 30 	call	0x60f0	; 0x60f0 <memcpy>
    14a4:	0e 15       	cp	r16, r14
    14a6:	1f 05       	cpc	r17, r15
    14a8:	58 f4       	brcc	.+22     	; 0x14c0 <prvWriteBytesToBuffer+0x5e>
    14aa:	a7 01       	movw	r20, r14
    14ac:	40 1b       	sub	r20, r16
    14ae:	51 0b       	sbc	r21, r17
    14b0:	b5 01       	movw	r22, r10
    14b2:	60 0f       	add	r22, r16
    14b4:	71 1f       	adc	r23, r17
    14b6:	f6 01       	movw	r30, r12
    14b8:	84 85       	ldd	r24, Z+12	; 0x0c
    14ba:	95 85       	ldd	r25, Z+13	; 0x0d
    14bc:	0e 94 78 30 	call	0x60f0	; 0x60f0 <memcpy>
    14c0:	ce 01       	movw	r24, r28
    14c2:	8e 0d       	add	r24, r14
    14c4:	9f 1d       	adc	r25, r15
    14c6:	f6 01       	movw	r30, r12
    14c8:	24 81       	ldd	r18, Z+4	; 0x04
    14ca:	35 81       	ldd	r19, Z+5	; 0x05
    14cc:	82 17       	cp	r24, r18
    14ce:	93 07       	cpc	r25, r19
    14d0:	10 f0       	brcs	.+4      	; 0x14d6 <prvWriteBytesToBuffer+0x74>
    14d2:	82 1b       	sub	r24, r18
    14d4:	93 0b       	sbc	r25, r19
    14d6:	f6 01       	movw	r30, r12
    14d8:	93 83       	std	Z+3, r25	; 0x03
    14da:	82 83       	std	Z+2, r24	; 0x02
    14dc:	c7 01       	movw	r24, r14
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	af 90       	pop	r10
    14f2:	08 95       	ret

000014f4 <prvWriteMessageToBuffer>:
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	1f 92       	push	r1
    1506:	1f 92       	push	r1
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	7c 01       	movw	r14, r24
    150e:	6b 01       	movw	r12, r22
    1510:	5a 83       	std	Y+2, r21	; 0x02
    1512:	49 83       	std	Y+1, r20	; 0x01
    1514:	21 15       	cp	r18, r1
    1516:	31 05       	cpc	r19, r1
    1518:	c1 f0       	breq	.+48     	; 0x154a <prvWriteMessageToBuffer+0x56>
    151a:	fc 01       	movw	r30, r24
    151c:	86 85       	ldd	r24, Z+14	; 0x0e
    151e:	80 fd       	sbrc	r24, 0
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <prvWriteMessageToBuffer+0x3e>
    1522:	42 17       	cp	r20, r18
    1524:	53 07       	cpc	r21, r19
    1526:	08 f4       	brcc	.+2      	; 0x152a <prvWriteMessageToBuffer+0x36>
    1528:	9a 01       	movw	r18, r20
    152a:	3a 83       	std	Y+2, r19	; 0x02
    152c:	29 83       	std	Y+1, r18	; 0x01
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <prvWriteMessageToBuffer+0x5c>
    1532:	20 17       	cp	r18, r16
    1534:	31 07       	cpc	r19, r17
    1536:	58 f0       	brcs	.+22     	; 0x154e <prvWriteMessageToBuffer+0x5a>
    1538:	42 e0       	ldi	r20, 0x02	; 2
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	be 01       	movw	r22, r28
    153e:	6f 5f       	subi	r22, 0xFF	; 255
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	c7 01       	movw	r24, r14
    1544:	8e df       	rcall	.-228    	; 0x1462 <prvWriteBytesToBuffer>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	03 c0       	rjmp	.+6      	; 0x1550 <prvWriteMessageToBuffer+0x5c>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <prvWriteMessageToBuffer+0x5c>
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	88 23       	and	r24, r24
    1552:	31 f0       	breq	.+12     	; 0x1560 <prvWriteMessageToBuffer+0x6c>
    1554:	49 81       	ldd	r20, Y+1	; 0x01
    1556:	5a 81       	ldd	r21, Y+2	; 0x02
    1558:	b6 01       	movw	r22, r12
    155a:	c7 01       	movw	r24, r14
    155c:	82 df       	rcall	.-252    	; 0x1462 <prvWriteBytesToBuffer>
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <prvWriteMessageToBuffer+0x70>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	08 95       	ret

0000157a <prvReadBytesFromBuffer>:
    157a:	af 92       	push	r10
    157c:	bf 92       	push	r11
    157e:	cf 92       	push	r12
    1580:	df 92       	push	r13
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	7c 01       	movw	r14, r24
    1590:	5b 01       	movw	r10, r22
    1592:	e9 01       	movw	r28, r18
    1594:	42 17       	cp	r20, r18
    1596:	53 07       	cpc	r21, r19
    1598:	08 f4       	brcc	.+2      	; 0x159c <prvReadBytesFromBuffer+0x22>
    159a:	ea 01       	movw	r28, r20
    159c:	20 97       	sbiw	r28, 0x00	; 0
    159e:	81 f1       	breq	.+96     	; 0x1600 <prvReadBytesFromBuffer+0x86>
    15a0:	f7 01       	movw	r30, r14
    15a2:	00 81       	ld	r16, Z
    15a4:	11 81       	ldd	r17, Z+1	; 0x01
    15a6:	84 81       	ldd	r24, Z+4	; 0x04
    15a8:	95 81       	ldd	r25, Z+5	; 0x05
    15aa:	80 1b       	sub	r24, r16
    15ac:	91 0b       	sbc	r25, r17
    15ae:	6e 01       	movw	r12, r28
    15b0:	8c 17       	cp	r24, r28
    15b2:	9d 07       	cpc	r25, r29
    15b4:	08 f4       	brcc	.+2      	; 0x15b8 <prvReadBytesFromBuffer+0x3e>
    15b6:	6c 01       	movw	r12, r24
    15b8:	f7 01       	movw	r30, r14
    15ba:	64 85       	ldd	r22, Z+12	; 0x0c
    15bc:	75 85       	ldd	r23, Z+13	; 0x0d
    15be:	60 0f       	add	r22, r16
    15c0:	71 1f       	adc	r23, r17
    15c2:	a6 01       	movw	r20, r12
    15c4:	c5 01       	movw	r24, r10
    15c6:	0e 94 78 30 	call	0x60f0	; 0x60f0 <memcpy>
    15ca:	cc 16       	cp	r12, r28
    15cc:	dd 06       	cpc	r13, r29
    15ce:	58 f4       	brcc	.+22     	; 0x15e6 <prvReadBytesFromBuffer+0x6c>
    15d0:	ae 01       	movw	r20, r28
    15d2:	4c 19       	sub	r20, r12
    15d4:	5d 09       	sbc	r21, r13
    15d6:	f7 01       	movw	r30, r14
    15d8:	64 85       	ldd	r22, Z+12	; 0x0c
    15da:	75 85       	ldd	r23, Z+13	; 0x0d
    15dc:	c5 01       	movw	r24, r10
    15de:	8c 0d       	add	r24, r12
    15e0:	9d 1d       	adc	r25, r13
    15e2:	0e 94 78 30 	call	0x60f0	; 0x60f0 <memcpy>
    15e6:	0c 0f       	add	r16, r28
    15e8:	1d 1f       	adc	r17, r29
    15ea:	f7 01       	movw	r30, r14
    15ec:	84 81       	ldd	r24, Z+4	; 0x04
    15ee:	95 81       	ldd	r25, Z+5	; 0x05
    15f0:	08 17       	cp	r16, r24
    15f2:	19 07       	cpc	r17, r25
    15f4:	10 f0       	brcs	.+4      	; 0x15fa <prvReadBytesFromBuffer+0x80>
    15f6:	08 1b       	sub	r16, r24
    15f8:	19 0b       	sbc	r17, r25
    15fa:	f7 01       	movw	r30, r14
    15fc:	11 83       	std	Z+1, r17	; 0x01
    15fe:	00 83       	st	Z, r16
    1600:	ce 01       	movw	r24, r28
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	df 90       	pop	r13
    1610:	cf 90       	pop	r12
    1612:	bf 90       	pop	r11
    1614:	af 90       	pop	r10
    1616:	08 95       	ret

00001618 <prvReadMessageFromBuffer>:
    1618:	6f 92       	push	r6
    161a:	7f 92       	push	r7
    161c:	8f 92       	push	r8
    161e:	9f 92       	push	r9
    1620:	af 92       	push	r10
    1622:	bf 92       	push	r11
    1624:	cf 92       	push	r12
    1626:	df 92       	push	r13
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	1f 92       	push	r1
    1636:	1f 92       	push	r1
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	6c 01       	movw	r12, r24
    163e:	4b 01       	movw	r8, r22
    1640:	5a 01       	movw	r10, r20
    1642:	79 01       	movw	r14, r18
    1644:	01 15       	cp	r16, r1
    1646:	11 05       	cpc	r17, r1
    1648:	b1 f0       	breq	.+44     	; 0x1676 <prvReadMessageFromBuffer+0x5e>
    164a:	fc 01       	movw	r30, r24
    164c:	60 80       	ld	r6, Z
    164e:	71 80       	ldd	r7, Z+1	; 0x01
    1650:	a8 01       	movw	r20, r16
    1652:	be 01       	movw	r22, r28
    1654:	6f 5f       	subi	r22, 0xFF	; 255
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	90 df       	rcall	.-224    	; 0x157a <prvReadBytesFromBuffer>
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	e0 1a       	sub	r14, r16
    1660:	f1 0a       	sbc	r15, r17
    1662:	a8 16       	cp	r10, r24
    1664:	b9 06       	cpc	r11, r25
    1666:	30 f4       	brcc	.+12     	; 0x1674 <prvReadMessageFromBuffer+0x5c>
    1668:	f6 01       	movw	r30, r12
    166a:	71 82       	std	Z+1, r7	; 0x01
    166c:	60 82       	st	Z, r6
    166e:	a1 2c       	mov	r10, r1
    1670:	b1 2c       	mov	r11, r1
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <prvReadMessageFromBuffer+0x5e>
    1674:	5c 01       	movw	r10, r24
    1676:	97 01       	movw	r18, r14
    1678:	a5 01       	movw	r20, r10
    167a:	b4 01       	movw	r22, r8
    167c:	c6 01       	movw	r24, r12
    167e:	7d df       	rcall	.-262    	; 0x157a <prvReadBytesFromBuffer>
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	08 95       	ret

000016a2 <xStreamBufferGenericCreate>:
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	ec 01       	movw	r28, r24
    16b2:	6b 01       	movw	r12, r22
    16b4:	41 30       	cpi	r20, 0x01	; 1
    16b6:	11 f4       	brne	.+4      	; 0x16bc <xStreamBufferGenericCreate+0x1a>
    16b8:	01 e0       	ldi	r16, 0x01	; 1
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <xStreamBufferGenericCreate+0x1c>
    16bc:	00 e0       	ldi	r16, 0x00	; 0
    16be:	c1 14       	cp	r12, r1
    16c0:	d1 04       	cpc	r13, r1
    16c2:	19 f4       	brne	.+6      	; 0x16ca <xStreamBufferGenericCreate+0x28>
    16c4:	cc 24       	eor	r12, r12
    16c6:	c3 94       	inc	r12
    16c8:	d1 2c       	mov	r13, r1
    16ca:	ce 01       	movw	r24, r28
    16cc:	40 96       	adiw	r24, 0x10	; 16
    16ce:	c8 17       	cp	r28, r24
    16d0:	d9 07       	cpc	r29, r25
    16d2:	20 f4       	brcc	.+8      	; 0x16dc <xStreamBufferGenericCreate+0x3a>
    16d4:	21 96       	adiw	r28, 0x01	; 1
    16d6:	aa d8       	rcall	.-3756   	; 0x82c <pvPortMalloc>
    16d8:	7c 01       	movw	r14, r24
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <xStreamBufferGenericCreate+0x3e>
    16dc:	e1 2c       	mov	r14, r1
    16de:	f1 2c       	mov	r15, r1
    16e0:	e1 14       	cp	r14, r1
    16e2:	f1 04       	cpc	r15, r1
    16e4:	39 f0       	breq	.+14     	; 0x16f4 <xStreamBufferGenericCreate+0x52>
    16e6:	96 01       	movw	r18, r12
    16e8:	ae 01       	movw	r20, r28
    16ea:	b7 01       	movw	r22, r14
    16ec:	61 5f       	subi	r22, 0xF1	; 241
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	c7 01       	movw	r24, r14
    16f2:	a7 de       	rcall	.-690    	; 0x1442 <prvInitialiseNewStreamBuffer>
    16f4:	c7 01       	movw	r24, r14
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	08 95       	ret

00001706 <xStreamBufferReset>:
    1706:	0f 93       	push	r16
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	0f 92       	push	r0
    170e:	fc 01       	movw	r30, r24
    1710:	20 85       	ldd	r18, Z+8	; 0x08
    1712:	31 85       	ldd	r19, Z+9	; 0x09
    1714:	23 2b       	or	r18, r19
    1716:	71 f4       	brne	.+28     	; 0x1734 <xStreamBufferReset+0x2e>
    1718:	22 85       	ldd	r18, Z+10	; 0x0a
    171a:	33 85       	ldd	r19, Z+11	; 0x0b
    171c:	23 2b       	or	r18, r19
    171e:	61 f4       	brne	.+24     	; 0x1738 <xStreamBufferReset+0x32>
    1720:	26 81       	ldd	r18, Z+6	; 0x06
    1722:	37 81       	ldd	r19, Z+7	; 0x07
    1724:	44 81       	ldd	r20, Z+4	; 0x04
    1726:	55 81       	ldd	r21, Z+5	; 0x05
    1728:	64 85       	ldd	r22, Z+12	; 0x0c
    172a:	75 85       	ldd	r23, Z+13	; 0x0d
    172c:	06 85       	ldd	r16, Z+14	; 0x0e
    172e:	89 de       	rcall	.-750    	; 0x1442 <prvInitialiseNewStreamBuffer>
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	03 c0       	rjmp	.+6      	; 0x173a <xStreamBufferReset+0x34>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	01 c0       	rjmp	.+2      	; 0x173a <xStreamBufferReset+0x34>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <xStreamBufferSpacesAvailable>:
    1742:	fc 01       	movw	r30, r24
    1744:	24 81       	ldd	r18, Z+4	; 0x04
    1746:	35 81       	ldd	r19, Z+5	; 0x05
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	82 0f       	add	r24, r18
    174e:	93 1f       	adc	r25, r19
    1750:	42 81       	ldd	r20, Z+2	; 0x02
    1752:	53 81       	ldd	r21, Z+3	; 0x03
    1754:	84 1b       	sub	r24, r20
    1756:	95 0b       	sbc	r25, r21
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	82 17       	cp	r24, r18
    175c:	93 07       	cpc	r25, r19
    175e:	10 f0       	brcs	.+4      	; 0x1764 <xStreamBufferSpacesAvailable+0x22>
    1760:	82 1b       	sub	r24, r18
    1762:	93 0b       	sbc	r25, r19
    1764:	08 95       	ret

00001766 <xStreamBufferSend>:
    1766:	2f 92       	push	r2
    1768:	3f 92       	push	r3
    176a:	4f 92       	push	r4
    176c:	5f 92       	push	r5
    176e:	6f 92       	push	r6
    1770:	7f 92       	push	r7
    1772:	8f 92       	push	r8
    1774:	9f 92       	push	r9
    1776:	af 92       	push	r10
    1778:	bf 92       	push	r11
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	2b 97       	sbiw	r28, 0x0b	; 11
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	4c 01       	movw	r8, r24
    179c:	7b 87       	std	Y+11, r23	; 0x0b
    179e:	6a 87       	std	Y+10, r22	; 0x0a
    17a0:	1a 01       	movw	r2, r20
    17a2:	0e 83       	std	Y+6, r16	; 0x06
    17a4:	1f 83       	std	Y+7, r17	; 0x07
    17a6:	28 87       	std	Y+8, r18	; 0x08
    17a8:	39 87       	std	Y+9, r19	; 0x09
    17aa:	fc 01       	movw	r30, r24
    17ac:	84 81       	ldd	r24, Z+4	; 0x04
    17ae:	95 81       	ldd	r25, Z+5	; 0x05
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	26 85       	ldd	r18, Z+14	; 0x0e
    17b4:	20 ff       	sbrs	r18, 0
    17b6:	0c c0       	rjmp	.+24     	; 0x17d0 <xStreamBufferSend+0x6a>
    17b8:	2a 01       	movw	r4, r20
    17ba:	f2 e0       	ldi	r31, 0x02	; 2
    17bc:	4f 0e       	add	r4, r31
    17be:	51 1c       	adc	r5, r1
    17c0:	84 15       	cp	r24, r4
    17c2:	95 05       	cpc	r25, r5
    17c4:	58 f4       	brcc	.+22     	; 0x17dc <xStreamBufferSend+0x76>
    17c6:	1e 82       	std	Y+6, r1	; 0x06
    17c8:	1f 82       	std	Y+7, r1	; 0x07
    17ca:	18 86       	std	Y+8, r1	; 0x08
    17cc:	19 86       	std	Y+9, r1	; 0x09
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <xStreamBufferSend+0x76>
    17d0:	84 17       	cp	r24, r20
    17d2:	95 07       	cpc	r25, r21
    17d4:	10 f0       	brcs	.+4      	; 0x17da <xStreamBufferSend+0x74>
    17d6:	2a 01       	movw	r4, r20
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <xStreamBufferSend+0x76>
    17da:	2c 01       	movw	r4, r24
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	9f 81       	ldd	r25, Y+7	; 0x07
    17e0:	a8 85       	ldd	r26, Y+8	; 0x08
    17e2:	b9 85       	ldd	r27, Y+9	; 0x09
    17e4:	89 2b       	or	r24, r25
    17e6:	8a 2b       	or	r24, r26
    17e8:	8b 2b       	or	r24, r27
    17ea:	09 f4       	brne	.+2      	; 0x17ee <xStreamBufferSend+0x88>
    17ec:	38 c0       	rjmp	.+112    	; 0x185e <xStreamBufferSend+0xf8>
    17ee:	ce 01       	movw	r24, r28
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vTaskSetTimeOutState>
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	0f 92       	push	r0
    17fc:	c4 01       	movw	r24, r8
    17fe:	a1 df       	rcall	.-190    	; 0x1742 <xStreamBufferSpacesAvailable>
    1800:	3c 01       	movw	r6, r24
    1802:	84 15       	cp	r24, r4
    1804:	95 05       	cpc	r25, r5
    1806:	40 f5       	brcc	.+80     	; 0x1858 <xStreamBufferSend+0xf2>
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 c7 19 	call	0x338e	; 0x338e <xTaskGenericNotifyStateClear>
    1812:	0e 94 6e 15 	call	0x2adc	; 0x2adc <xTaskGetCurrentTaskHandle>
    1816:	f4 01       	movw	r30, r8
    1818:	93 87       	std	Z+11, r25	; 0x0b
    181a:	82 87       	std	Z+10, r24	; 0x0a
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	ae 80       	ldd	r10, Y+6	; 0x06
    1822:	bf 80       	ldd	r11, Y+7	; 0x07
    1824:	c8 84       	ldd	r12, Y+8	; 0x08
    1826:	d9 84       	ldd	r13, Y+9	; 0x09
    1828:	e1 2c       	mov	r14, r1
    182a:	f1 2c       	mov	r15, r1
    182c:	00 e0       	ldi	r16, 0x00	; 0
    182e:	10 e0       	ldi	r17, 0x00	; 0
    1830:	98 01       	movw	r18, r16
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	ba 01       	movw	r22, r20
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskGenericNotifyWait>
    183e:	f4 01       	movw	r30, r8
    1840:	13 86       	std	Z+11, r1	; 0x0b
    1842:	12 86       	std	Z+10, r1	; 0x0a
    1844:	be 01       	movw	r22, r28
    1846:	6a 5f       	subi	r22, 0xFA	; 250
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	ce 01       	movw	r24, r28
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <xTaskCheckForTimeOut>
    1852:	88 23       	and	r24, r24
    1854:	81 f2       	breq	.-96     	; 0x17f6 <xStreamBufferSend+0x90>
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <xStreamBufferSend+0xfc>
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <xStreamBufferSend+0xfc>
    185e:	61 2c       	mov	r6, r1
    1860:	71 2c       	mov	r7, r1
    1862:	61 14       	cp	r6, r1
    1864:	71 04       	cpc	r7, r1
    1866:	19 f4       	brne	.+6      	; 0x186e <xStreamBufferSend+0x108>
    1868:	c4 01       	movw	r24, r8
    186a:	6b df       	rcall	.-298    	; 0x1742 <xStreamBufferSpacesAvailable>
    186c:	3c 01       	movw	r6, r24
    186e:	82 01       	movw	r16, r4
    1870:	93 01       	movw	r18, r6
    1872:	a1 01       	movw	r20, r2
    1874:	6a 85       	ldd	r22, Y+10	; 0x0a
    1876:	7b 85       	ldd	r23, Y+11	; 0x0b
    1878:	c4 01       	movw	r24, r8
    187a:	3c de       	rcall	.-904    	; 0x14f4 <prvWriteMessageToBuffer>
    187c:	6c 01       	movw	r12, r24
    187e:	89 2b       	or	r24, r25
    1880:	e9 f0       	breq	.+58     	; 0x18bc <xStreamBufferSend+0x156>
    1882:	c4 01       	movw	r24, r8
    1884:	cb dd       	rcall	.-1130   	; 0x141c <prvBytesInBuffer>
    1886:	f4 01       	movw	r30, r8
    1888:	26 81       	ldd	r18, Z+6	; 0x06
    188a:	37 81       	ldd	r19, Z+7	; 0x07
    188c:	82 17       	cp	r24, r18
    188e:	93 07       	cpc	r25, r19
    1890:	a8 f0       	brcs	.+42     	; 0x18bc <xStreamBufferSend+0x156>
    1892:	a6 d3       	rcall	.+1868   	; 0x1fe0 <vTaskSuspendAll>
    1894:	f4 01       	movw	r30, r8
    1896:	80 85       	ldd	r24, Z+8	; 0x08
    1898:	91 85       	ldd	r25, Z+9	; 0x09
    189a:	89 2b       	or	r24, r25
    189c:	71 f0       	breq	.+28     	; 0x18ba <xStreamBufferSend+0x154>
    189e:	80 85       	ldd	r24, Z+8	; 0x08
    18a0:	91 85       	ldd	r25, Z+9	; 0x09
    18a2:	e1 2c       	mov	r14, r1
    18a4:	f1 2c       	mov	r15, r1
    18a6:	00 e0       	ldi	r16, 0x00	; 0
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	a9 01       	movw	r20, r18
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <xTaskGenericNotify>
    18b4:	f4 01       	movw	r30, r8
    18b6:	11 86       	std	Z+9, r1	; 0x09
    18b8:	10 86       	std	Z+8, r1	; 0x08
    18ba:	d2 d4       	rcall	.+2468   	; 0x2260 <xTaskResumeAll>
    18bc:	c6 01       	movw	r24, r12
    18be:	2b 96       	adiw	r28, 0x0b	; 11
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	7f 90       	pop	r7
    18e4:	6f 90       	pop	r6
    18e6:	5f 90       	pop	r5
    18e8:	4f 90       	pop	r4
    18ea:	3f 90       	pop	r3
    18ec:	2f 90       	pop	r2
    18ee:	08 95       	ret

000018f0 <xStreamBufferSendFromISR>:
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24
    1906:	7b 01       	movw	r14, r22
    1908:	5a 01       	movw	r10, r20
    190a:	69 01       	movw	r12, r18
    190c:	8e 85       	ldd	r24, Y+14	; 0x0e
    190e:	80 ff       	sbrs	r24, 0
    1910:	04 c0       	rjmp	.+8      	; 0x191a <xStreamBufferSendFromISR+0x2a>
    1912:	8a 01       	movw	r16, r20
    1914:	0e 5f       	subi	r16, 0xFE	; 254
    1916:	1f 4f       	sbci	r17, 0xFF	; 255
    1918:	01 c0       	rjmp	.+2      	; 0x191c <xStreamBufferSendFromISR+0x2c>
    191a:	8a 01       	movw	r16, r20
    191c:	ce 01       	movw	r24, r28
    191e:	11 df       	rcall	.-478    	; 0x1742 <xStreamBufferSpacesAvailable>
    1920:	9c 01       	movw	r18, r24
    1922:	a5 01       	movw	r20, r10
    1924:	b7 01       	movw	r22, r14
    1926:	ce 01       	movw	r24, r28
    1928:	e5 dd       	rcall	.-1078   	; 0x14f4 <prvWriteMessageToBuffer>
    192a:	5c 01       	movw	r10, r24
    192c:	89 2b       	or	r24, r25
    192e:	c1 f0       	breq	.+48     	; 0x1960 <xStreamBufferSendFromISR+0x70>
    1930:	ce 01       	movw	r24, r28
    1932:	74 dd       	rcall	.-1304   	; 0x141c <prvBytesInBuffer>
    1934:	2e 81       	ldd	r18, Y+6	; 0x06
    1936:	3f 81       	ldd	r19, Y+7	; 0x07
    1938:	82 17       	cp	r24, r18
    193a:	93 07       	cpc	r25, r19
    193c:	88 f0       	brcs	.+34     	; 0x1960 <xStreamBufferSendFromISR+0x70>
    193e:	88 85       	ldd	r24, Y+8	; 0x08
    1940:	99 85       	ldd	r25, Y+9	; 0x09
    1942:	89 2b       	or	r24, r25
    1944:	69 f0       	breq	.+26     	; 0x1960 <xStreamBufferSendFromISR+0x70>
    1946:	88 85       	ldd	r24, Y+8	; 0x08
    1948:	99 85       	ldd	r25, Y+9	; 0x09
    194a:	e1 2c       	mov	r14, r1
    194c:	f1 2c       	mov	r15, r1
    194e:	00 e0       	ldi	r16, 0x00	; 0
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	a9 01       	movw	r20, r18
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	0e 94 a5 18 	call	0x314a	; 0x314a <xTaskGenericNotifyFromISR>
    195c:	19 86       	std	Y+9, r1	; 0x09
    195e:	18 86       	std	Y+8, r1	; 0x08
    1960:	c5 01       	movw	r24, r10
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	bf 90       	pop	r11
    1974:	af 90       	pop	r10
    1976:	08 95       	ret

00001978 <xStreamBufferReceive>:
    1978:	4f 92       	push	r4
    197a:	5f 92       	push	r5
    197c:	6f 92       	push	r6
    197e:	7f 92       	push	r7
    1980:	8f 92       	push	r8
    1982:	9f 92       	push	r9
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	ec 01       	movw	r28, r24
    199a:	2b 01       	movw	r4, r22
    199c:	3a 01       	movw	r6, r20
    199e:	58 01       	movw	r10, r16
    19a0:	69 01       	movw	r12, r18
    19a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    19a4:	80 ff       	sbrs	r24, 0
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <xStreamBufferReceive+0x3a>
    19a8:	68 94       	set
    19aa:	88 24       	eor	r8, r8
    19ac:	81 f8       	bld	r8, 1
    19ae:	91 2c       	mov	r9, r1
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <xStreamBufferReceive+0x3e>
    19b2:	81 2c       	mov	r8, r1
    19b4:	91 2c       	mov	r9, r1
    19b6:	a1 14       	cp	r10, r1
    19b8:	b1 04       	cpc	r11, r1
    19ba:	c1 04       	cpc	r12, r1
    19bc:	d1 04       	cpc	r13, r1
    19be:	41 f1       	breq	.+80     	; 0x1a10 <xStreamBufferReceive+0x98>
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	0f 92       	push	r0
    19c6:	ce 01       	movw	r24, r28
    19c8:	29 dd       	rcall	.-1454   	; 0x141c <prvBytesInBuffer>
    19ca:	7c 01       	movw	r14, r24
    19cc:	88 16       	cp	r8, r24
    19ce:	99 06       	cpc	r9, r25
    19d0:	48 f0       	brcs	.+18     	; 0x19e4 <xStreamBufferReceive+0x6c>
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 c7 19 	call	0x338e	; 0x338e <xTaskGenericNotifyStateClear>
    19dc:	0e 94 6e 15 	call	0x2adc	; 0x2adc <xTaskGetCurrentTaskHandle>
    19e0:	99 87       	std	Y+9, r25	; 0x09
    19e2:	88 87       	std	Y+8, r24	; 0x08
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	8e 14       	cp	r8, r14
    19ea:	9f 04       	cpc	r9, r15
    19ec:	a0 f0       	brcs	.+40     	; 0x1a16 <xStreamBufferReceive+0x9e>
    19ee:	e1 2c       	mov	r14, r1
    19f0:	f1 2c       	mov	r15, r1
    19f2:	00 e0       	ldi	r16, 0x00	; 0
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	98 01       	movw	r18, r16
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	ba 01       	movw	r22, r20
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskGenericNotifyWait>
    1a04:	19 86       	std	Y+9, r1	; 0x09
    1a06:	18 86       	std	Y+8, r1	; 0x08
    1a08:	ce 01       	movw	r24, r28
    1a0a:	08 dd       	rcall	.-1520   	; 0x141c <prvBytesInBuffer>
    1a0c:	7c 01       	movw	r14, r24
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <xStreamBufferReceive+0x9e>
    1a10:	ce 01       	movw	r24, r28
    1a12:	04 dd       	rcall	.-1528   	; 0x141c <prvBytesInBuffer>
    1a14:	7c 01       	movw	r14, r24
    1a16:	8e 14       	cp	r8, r14
    1a18:	9f 04       	cpc	r9, r15
    1a1a:	e8 f4       	brcc	.+58     	; 0x1a56 <xStreamBufferReceive+0xde>
    1a1c:	84 01       	movw	r16, r8
    1a1e:	97 01       	movw	r18, r14
    1a20:	a3 01       	movw	r20, r6
    1a22:	b2 01       	movw	r22, r4
    1a24:	ce 01       	movw	r24, r28
    1a26:	f8 dd       	rcall	.-1040   	; 0x1618 <prvReadMessageFromBuffer>
    1a28:	6c 01       	movw	r12, r24
    1a2a:	89 2b       	or	r24, r25
    1a2c:	b1 f0       	breq	.+44     	; 0x1a5a <xStreamBufferReceive+0xe2>
    1a2e:	d8 d2       	rcall	.+1456   	; 0x1fe0 <vTaskSuspendAll>
    1a30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a34:	89 2b       	or	r24, r25
    1a36:	69 f0       	breq	.+26     	; 0x1a52 <xStreamBufferReceive+0xda>
    1a38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a3c:	e1 2c       	mov	r14, r1
    1a3e:	f1 2c       	mov	r15, r1
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	a9 01       	movw	r20, r18
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <xTaskGenericNotify>
    1a4e:	1b 86       	std	Y+11, r1	; 0x0b
    1a50:	1a 86       	std	Y+10, r1	; 0x0a
    1a52:	06 d4       	rcall	.+2060   	; 0x2260 <xTaskResumeAll>
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <xStreamBufferReceive+0xe2>
    1a56:	c1 2c       	mov	r12, r1
    1a58:	d1 2c       	mov	r13, r1
    1a5a:	c6 01       	movw	r24, r12
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	df 90       	pop	r13
    1a6a:	cf 90       	pop	r12
    1a6c:	bf 90       	pop	r11
    1a6e:	af 90       	pop	r10
    1a70:	9f 90       	pop	r9
    1a72:	8f 90       	pop	r8
    1a74:	7f 90       	pop	r7
    1a76:	6f 90       	pop	r6
    1a78:	5f 90       	pop	r5
    1a7a:	4f 90       	pop	r4
    1a7c:	08 95       	ret

00001a7e <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a82:	fc 01       	movw	r30, r24
    1a84:	26 85       	ldd	r18, Z+14	; 0x0e
    1a86:	20 ff       	sbrs	r18, 0
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <xStreamBufferIsFull+0x12>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a8a:	c2 e0       	ldi	r28, 0x02	; 2
    1a8c:	d0 e0       	ldi	r29, 0x00	; 0
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <xStreamBufferIsFull+0x16>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1a90:	c0 e0       	ldi	r28, 0x00	; 0
    1a92:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    1a94:	56 de       	rcall	.-852    	; 0x1742 <xStreamBufferSpacesAvailable>
    1a96:	c8 17       	cp	r28, r24
    1a98:	d9 07       	cpc	r29, r25
    1a9a:	10 f0       	brcs	.+4      	; 0x1aa0 <xStreamBufferIsFull+0x22>
    {
        xReturn = pdTRUE;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <xStreamBufferIsFull+0x24>
    }
    else
    {
        xReturn = pdFALSE;
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    }

    return xReturn;
}
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <prvResetNextTaskUnblockTime>:
    1aa8:	e0 91 0b 16 	lds	r30, 0x160B	; 0x80160b <pxDelayedTaskList>
    1aac:	f0 91 0c 16 	lds	r31, 0x160C	; 0x80160c <pxDelayedTaskList+0x1>
    1ab0:	80 81       	ld	r24, Z
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	0c c0       	rjmp	.+24     	; 0x1ace <prvResetNextTaskUnblockTime+0x26>
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	dc 01       	movw	r26, r24
    1abc:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <xNextTaskUnblockTime>
    1ac0:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <xNextTaskUnblockTime+0x1>
    1ac4:	a0 93 d7 15 	sts	0x15D7, r26	; 0x8015d7 <xNextTaskUnblockTime+0x2>
    1ac8:	b0 93 d8 15 	sts	0x15D8, r27	; 0x8015d8 <xNextTaskUnblockTime+0x3>
    1acc:	08 95       	ret
    1ace:	e0 91 0b 16 	lds	r30, 0x160B	; 0x80160b <pxDelayedTaskList>
    1ad2:	f0 91 0c 16 	lds	r31, 0x160C	; 0x80160c <pxDelayedTaskList+0x1>
    1ad6:	07 80       	ldd	r0, Z+7	; 0x07
    1ad8:	f0 85       	ldd	r31, Z+8	; 0x08
    1ada:	e0 2d       	mov	r30, r0
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ae2:	b3 81       	ldd	r27, Z+3	; 0x03
    1ae4:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <xNextTaskUnblockTime>
    1ae8:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <xNextTaskUnblockTime+0x1>
    1aec:	a0 93 d7 15 	sts	0x15D7, r26	; 0x8015d7 <xNextTaskUnblockTime+0x2>
    1af0:	b0 93 d8 15 	sts	0x15D8, r27	; 0x8015d8 <xNextTaskUnblockTime+0x3>
    1af4:	08 95       	ret

00001af6 <prvDeleteTCB>:
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	ec 01       	movw	r28, r24
    1afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b00:	0e 94 bf 04 	call	0x97e	; 0x97e <vPortFree>
    1b04:	ce 01       	movw	r24, r28
    1b06:	0e 94 bf 04 	call	0x97e	; 0x97e <vPortFree>
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	08 95       	ret

00001b10 <prvInitialiseNewTask>:
    1b10:	4f 92       	push	r4
    1b12:	5f 92       	push	r5
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	2c 01       	movw	r4, r24
    1b30:	5b 01       	movw	r10, r22
    1b32:	4a 01       	movw	r8, r20
    1b34:	39 01       	movw	r6, r18
    1b36:	e6 01       	movw	r28, r12
    1b38:	65 ea       	ldi	r22, 0xA5	; 165
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b40:	0e 94 81 30 	call	0x6102	; 0x6102 <memset>
    1b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b48:	21 e0       	ldi	r18, 0x01	; 1
    1b4a:	82 1a       	sub	r8, r18
    1b4c:	91 08       	sbc	r9, r1
    1b4e:	88 0e       	add	r8, r24
    1b50:	99 1e       	adc	r9, r25
    1b52:	a1 14       	cp	r10, r1
    1b54:	b1 04       	cpc	r11, r1
    1b56:	89 f4       	brne	.+34     	; 0x1b7a <prvInitialiseNewTask+0x6a>
    1b58:	15 c0       	rjmp	.+42     	; 0x1b84 <prvInitialiseNewTask+0x74>
    1b5a:	82 2f       	mov	r24, r18
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	f5 01       	movw	r30, r10
    1b60:	e8 0f       	add	r30, r24
    1b62:	f9 1f       	adc	r31, r25
    1b64:	30 81       	ld	r19, Z
    1b66:	de 01       	movw	r26, r28
    1b68:	a8 0f       	add	r26, r24
    1b6a:	b9 1f       	adc	r27, r25
    1b6c:	5d 96       	adiw	r26, 0x1d	; 29
    1b6e:	3c 93       	st	X, r19
    1b70:	80 81       	ld	r24, Z
    1b72:	88 23       	and	r24, r24
    1b74:	29 f0       	breq	.+10     	; 0x1b80 <prvInitialiseNewTask+0x70>
    1b76:	2f 5f       	subi	r18, 0xFF	; 255
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <prvInitialiseNewTask+0x6c>
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	20 31       	cpi	r18, 0x10	; 16
    1b7e:	68 f3       	brcs	.-38     	; 0x1b5a <prvInitialiseNewTask+0x4a>
    1b80:	1c a6       	std	Y+44, r1	; 0x2c
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <prvInitialiseNewTask+0x76>
    1b84:	1d 8e       	std	Y+29, r1	; 0x1d
    1b86:	0a 30       	cpi	r16, 0x0A	; 10
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <prvInitialiseNewTask+0x7c>
    1b8a:	09 e0       	ldi	r16, 0x09	; 9
    1b8c:	0a 8f       	std	Y+26, r16	; 0x1a
    1b8e:	0d a7       	std	Y+45, r16	; 0x2d
    1b90:	1e a6       	std	Y+46, r1	; 0x2e
    1b92:	ce 01       	movw	r24, r28
    1b94:	02 96       	adiw	r24, 0x02	; 2
    1b96:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vListInitialiseItem>
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0e 96       	adiw	r24, 0x0e	; 14
    1b9e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vListInitialiseItem>
    1ba2:	db 87       	std	Y+11, r29	; 0x0b
    1ba4:	ca 87       	std	Y+10, r28	; 0x0a
    1ba6:	8a e0       	ldi	r24, 0x0A	; 10
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e0       	ldi	r26, 0x00	; 0
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	80 1b       	sub	r24, r16
    1bb0:	91 09       	sbc	r25, r1
    1bb2:	a1 09       	sbc	r26, r1
    1bb4:	b1 09       	sbc	r27, r1
    1bb6:	8e 87       	std	Y+14, r24	; 0x0e
    1bb8:	9f 87       	std	Y+15, r25	; 0x0f
    1bba:	a8 8b       	std	Y+16, r26	; 0x10
    1bbc:	b9 8b       	std	Y+17, r27	; 0x11
    1bbe:	df 8b       	std	Y+23, r29	; 0x17
    1bc0:	ce 8b       	std	Y+22, r28	; 0x16
    1bc2:	84 e0       	ldi	r24, 0x04	; 4
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	bf 96       	adiw	r30, 0x2f	; 47
    1bc8:	df 01       	movw	r26, r30
    1bca:	1d 92       	st	X+, r1
    1bcc:	8a 95       	dec	r24
    1bce:	e9 f7       	brne	.-6      	; 0x1bca <prvInitialiseNewTask+0xba>
    1bd0:	1b aa       	std	Y+51, r1	; 0x33
    1bd2:	a3 01       	movw	r20, r6
    1bd4:	b2 01       	movw	r22, r4
    1bd6:	c4 01       	movw	r24, r8
    1bd8:	0e 94 81 05 	call	0xb02	; 0xb02 <pxPortInitialiseStack>
    1bdc:	99 83       	std	Y+1, r25	; 0x01
    1bde:	88 83       	st	Y, r24
    1be0:	e1 14       	cp	r14, r1
    1be2:	f1 04       	cpc	r15, r1
    1be4:	19 f0       	breq	.+6      	; 0x1bec <prvInitialiseNewTask+0xdc>
    1be6:	f7 01       	movw	r30, r14
    1be8:	d1 83       	std	Z+1, r29	; 0x01
    1bea:	c0 83       	st	Z, r28
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	cf 90       	pop	r12
    1bfa:	bf 90       	pop	r11
    1bfc:	af 90       	pop	r10
    1bfe:	9f 90       	pop	r9
    1c00:	8f 90       	pop	r8
    1c02:	7f 90       	pop	r7
    1c04:	6f 90       	pop	r6
    1c06:	5f 90       	pop	r5
    1c08:	4f 90       	pop	r4
    1c0a:	08 95       	ret

00001c0c <prvInitialiseTaskLists>:
    1c0c:	cf 93       	push	r28
    1c0e:	c0 e0       	ldi	r28, 0x00	; 0
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <prvInitialiseTaskLists+0x18>
    1c12:	2b e0       	ldi	r18, 0x0B	; 11
    1c14:	c2 9f       	mul	r28, r18
    1c16:	c0 01       	movw	r24, r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	8d 5d       	subi	r24, 0xDD	; 221
    1c1c:	99 4e       	sbci	r25, 0xE9	; 233
    1c1e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c22:	cf 5f       	subi	r28, 0xFF	; 255
    1c24:	ca 30       	cpi	r28, 0x0A	; 10
    1c26:	a8 f3       	brcs	.-22     	; 0x1c12 <prvInitialiseTaskLists+0x6>
    1c28:	88 e1       	ldi	r24, 0x18	; 24
    1c2a:	96 e1       	ldi	r25, 0x16	; 22
    1c2c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c30:	8d e0       	ldi	r24, 0x0D	; 13
    1c32:	96 e1       	ldi	r25, 0x16	; 22
    1c34:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c38:	8e ef       	ldi	r24, 0xFE	; 254
    1c3a:	95 e1       	ldi	r25, 0x15	; 21
    1c3c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c40:	83 ef       	ldi	r24, 0xF3	; 243
    1c42:	95 e1       	ldi	r25, 0x15	; 21
    1c44:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c48:	87 ee       	ldi	r24, 0xE7	; 231
    1c4a:	95 e1       	ldi	r25, 0x15	; 21
    1c4c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c50:	88 e1       	ldi	r24, 0x18	; 24
    1c52:	96 e1       	ldi	r25, 0x16	; 22
    1c54:	90 93 0c 16 	sts	0x160C, r25	; 0x80160c <pxDelayedTaskList+0x1>
    1c58:	80 93 0b 16 	sts	0x160B, r24	; 0x80160b <pxDelayedTaskList>
    1c5c:	8d e0       	ldi	r24, 0x0D	; 13
    1c5e:	96 e1       	ldi	r25, 0x16	; 22
    1c60:	90 93 0a 16 	sts	0x160A, r25	; 0x80160a <pxOverflowDelayedTaskList+0x1>
    1c64:	80 93 09 16 	sts	0x1609, r24	; 0x801609 <pxOverflowDelayedTaskList>
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret

00001c6c <prvAddNewTaskToReadyList>:
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	ec 01       	movw	r28, r24
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	0f 92       	push	r0
    1c78:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <uxCurrentNumberOfTasks>
    1c7c:	8f 5f       	subi	r24, 0xFF	; 255
    1c7e:	80 93 e6 15 	sts	0x15E6, r24	; 0x8015e6 <uxCurrentNumberOfTasks>
    1c82:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    1c86:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1c8a:	89 2b       	or	r24, r25
    1c8c:	51 f4       	brne	.+20     	; 0x1ca2 <prvAddNewTaskToReadyList+0x36>
    1c8e:	d0 93 92 16 	sts	0x1692, r29	; 0x801692 <pxCurrentTCB+0x1>
    1c92:	c0 93 91 16 	sts	0x1691, r28	; 0x801691 <pxCurrentTCB>
    1c96:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <uxCurrentNumberOfTasks>
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	91 f4       	brne	.+36     	; 0x1cc2 <prvAddNewTaskToReadyList+0x56>
    1c9e:	b6 df       	rcall	.-148    	; 0x1c0c <prvInitialiseTaskLists>
    1ca0:	10 c0       	rjmp	.+32     	; 0x1cc2 <prvAddNewTaskToReadyList+0x56>
    1ca2:	80 91 e0 15 	lds	r24, 0x15E0	; 0x8015e0 <xSchedulerRunning>
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	0c c0       	rjmp	.+24     	; 0x1cc2 <prvAddNewTaskToReadyList+0x56>
    1caa:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    1cae:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1cb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cb6:	89 17       	cp	r24, r25
    1cb8:	20 f0       	brcs	.+8      	; 0x1cc2 <prvAddNewTaskToReadyList+0x56>
    1cba:	d0 93 92 16 	sts	0x1692, r29	; 0x801692 <pxCurrentTCB+0x1>
    1cbe:	c0 93 91 16 	sts	0x1691, r28	; 0x801691 <pxCurrentTCB>
    1cc2:	80 91 d9 15 	lds	r24, 0x15D9	; 0x8015d9 <uxTaskNumber>
    1cc6:	8f 5f       	subi	r24, 0xFF	; 255
    1cc8:	80 93 d9 15 	sts	0x15D9, r24	; 0x8015d9 <uxTaskNumber>
    1ccc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1cce:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    1cd2:	8e 17       	cp	r24, r30
    1cd4:	10 f4       	brcc	.+4      	; 0x1cda <prvAddNewTaskToReadyList+0x6e>
    1cd6:	e0 93 e1 15 	sts	0x15E1, r30	; 0x8015e1 <uxTopReadyPriority>
    1cda:	8b e0       	ldi	r24, 0x0B	; 11
    1cdc:	8e 9f       	mul	r24, r30
    1cde:	f0 01       	movw	r30, r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	ed 5d       	subi	r30, 0xDD	; 221
    1ce4:	f9 4e       	sbci	r31, 0xE9	; 233
    1ce6:	01 80       	ldd	r0, Z+1	; 0x01
    1ce8:	f2 81       	ldd	r31, Z+2	; 0x02
    1cea:	e0 2d       	mov	r30, r0
    1cec:	ff 83       	std	Y+7, r31	; 0x07
    1cee:	ee 83       	std	Y+6, r30	; 0x06
    1cf0:	26 81       	ldd	r18, Z+6	; 0x06
    1cf2:	37 81       	ldd	r19, Z+7	; 0x07
    1cf4:	39 87       	std	Y+9, r19	; 0x09
    1cf6:	28 87       	std	Y+8, r18	; 0x08
    1cf8:	a6 81       	ldd	r26, Z+6	; 0x06
    1cfa:	b7 81       	ldd	r27, Z+7	; 0x07
    1cfc:	9e 01       	movw	r18, r28
    1cfe:	2e 5f       	subi	r18, 0xFE	; 254
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	15 96       	adiw	r26, 0x05	; 5
    1d04:	3c 93       	st	X, r19
    1d06:	2e 93       	st	-X, r18
    1d08:	14 97       	sbiw	r26, 0x04	; 4
    1d0a:	37 83       	std	Z+7, r19	; 0x07
    1d0c:	26 83       	std	Z+6, r18	; 0x06
    1d0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1d10:	8e 9f       	mul	r24, r30
    1d12:	f0 01       	movw	r30, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	ed 5d       	subi	r30, 0xDD	; 221
    1d18:	f9 4e       	sbci	r31, 0xE9	; 233
    1d1a:	fd 87       	std	Y+13, r31	; 0x0d
    1d1c:	ec 87       	std	Y+12, r30	; 0x0c
    1d1e:	80 81       	ld	r24, Z
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	80 83       	st	Z, r24
    1d24:	0f 90       	pop	r0
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	80 91 e0 15 	lds	r24, 0x15E0	; 0x8015e0 <xSchedulerRunning>
    1d2c:	88 23       	and	r24, r24
    1d2e:	51 f0       	breq	.+20     	; 0x1d44 <prvAddNewTaskToReadyList+0xd8>
    1d30:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    1d34:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1d38:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d3c:	98 17       	cp	r25, r24
    1d3e:	10 f4       	brcc	.+4      	; 0x1d44 <prvAddNewTaskToReadyList+0xd8>
    1d40:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	08 95       	ret

00001d4a <prvCheckTasksWaitingTermination>:
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	1b c0       	rjmp	.+54     	; 0x1d86 <prvCheckTasksWaitingTermination+0x3c>
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	0f 92       	push	r0
    1d56:	e0 91 fa 15 	lds	r30, 0x15FA	; 0x8015fa <xTasksWaitingTermination+0x7>
    1d5a:	f0 91 fb 15 	lds	r31, 0x15FB	; 0x8015fb <xTasksWaitingTermination+0x8>
    1d5e:	c0 85       	ldd	r28, Z+8	; 0x08
    1d60:	d1 85       	ldd	r29, Z+9	; 0x09
    1d62:	ce 01       	movw	r24, r28
    1d64:	02 96       	adiw	r24, 0x02	; 2
    1d66:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    1d6a:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <uxCurrentNumberOfTasks>
    1d6e:	81 50       	subi	r24, 0x01	; 1
    1d70:	80 93 e6 15 	sts	0x15E6, r24	; 0x8015e6 <uxCurrentNumberOfTasks>
    1d74:	80 91 f2 15 	lds	r24, 0x15F2	; 0x8015f2 <uxDeletedTasksWaitingCleanUp>
    1d78:	81 50       	subi	r24, 0x01	; 1
    1d7a:	80 93 f2 15 	sts	0x15F2, r24	; 0x8015f2 <uxDeletedTasksWaitingCleanUp>
    1d7e:	0f 90       	pop	r0
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	ce 01       	movw	r24, r28
    1d84:	b8 de       	rcall	.-656    	; 0x1af6 <prvDeleteTCB>
    1d86:	80 91 f2 15 	lds	r24, 0x15F2	; 0x8015f2 <uxDeletedTasksWaitingCleanUp>
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	e1 cf       	rjmp	.-62     	; 0x1d50 <prvCheckTasksWaitingTermination+0x6>
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	08 95       	ret

00001d94 <prvAddCurrentTaskToDelayedList>:
    1d94:	8f 92       	push	r8
    1d96:	9f 92       	push	r9
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	6b 01       	movw	r12, r22
    1daa:	7c 01       	movw	r14, r24
    1dac:	c4 2f       	mov	r28, r20
    1dae:	80 90 e2 15 	lds	r8, 0x15E2	; 0x8015e2 <xTickCount>
    1db2:	90 90 e3 15 	lds	r9, 0x15E3	; 0x8015e3 <xTickCount+0x1>
    1db6:	a0 90 e4 15 	lds	r10, 0x15E4	; 0x8015e4 <xTickCount+0x2>
    1dba:	b0 90 e5 15 	lds	r11, 0x15E5	; 0x8015e5 <xTickCount+0x3>
    1dbe:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    1dc2:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1dc6:	02 96       	adiw	r24, 0x02	; 2
    1dc8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	c8 16       	cp	r12, r24
    1dd0:	d8 06       	cpc	r13, r24
    1dd2:	e8 06       	cpc	r14, r24
    1dd4:	f8 06       	cpc	r15, r24
    1dd6:	b1 f5       	brne	.+108    	; 0x1e44 <prvAddCurrentTaskToDelayedList+0xb0>
    1dd8:	cc 23       	and	r28, r28
    1dda:	a1 f1       	breq	.+104    	; 0x1e44 <prvAddCurrentTaskToDelayedList+0xb0>
    1ddc:	e7 ee       	ldi	r30, 0xE7	; 231
    1dde:	f5 e1       	ldi	r31, 0x15	; 21
    1de0:	a1 81       	ldd	r26, Z+1	; 0x01
    1de2:	b2 81       	ldd	r27, Z+2	; 0x02
    1de4:	c0 91 91 16 	lds	r28, 0x1691	; 0x801691 <pxCurrentTCB>
    1de8:	d0 91 92 16 	lds	r29, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1dec:	bf 83       	std	Y+7, r27	; 0x07
    1dee:	ae 83       	std	Y+6, r26	; 0x06
    1df0:	c0 91 91 16 	lds	r28, 0x1691	; 0x801691 <pxCurrentTCB>
    1df4:	d0 91 92 16 	lds	r29, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1df8:	16 96       	adiw	r26, 0x06	; 6
    1dfa:	8d 91       	ld	r24, X+
    1dfc:	9c 91       	ld	r25, X
    1dfe:	17 97       	sbiw	r26, 0x07	; 7
    1e00:	99 87       	std	Y+9, r25	; 0x09
    1e02:	88 87       	std	Y+8, r24	; 0x08
    1e04:	16 96       	adiw	r26, 0x06	; 6
    1e06:	cd 91       	ld	r28, X+
    1e08:	dc 91       	ld	r29, X
    1e0a:	17 97       	sbiw	r26, 0x07	; 7
    1e0c:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    1e10:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1e14:	02 96       	adiw	r24, 0x02	; 2
    1e16:	9d 83       	std	Y+5, r25	; 0x05
    1e18:	8c 83       	std	Y+4, r24	; 0x04
    1e1a:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    1e1e:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1e22:	02 96       	adiw	r24, 0x02	; 2
    1e24:	17 96       	adiw	r26, 0x07	; 7
    1e26:	9c 93       	st	X, r25
    1e28:	8e 93       	st	-X, r24
    1e2a:	16 97       	sbiw	r26, 0x06	; 6
    1e2c:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    1e30:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1e34:	1d 96       	adiw	r26, 0x0d	; 13
    1e36:	fc 93       	st	X, r31
    1e38:	ee 93       	st	-X, r30
    1e3a:	1c 97       	sbiw	r26, 0x0c	; 12
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	80 83       	st	Z, r24
    1e42:	3f c0       	rjmp	.+126    	; 0x1ec2 <prvAddCurrentTaskToDelayedList+0x12e>
    1e44:	c8 0c       	add	r12, r8
    1e46:	d9 1c       	adc	r13, r9
    1e48:	ea 1c       	adc	r14, r10
    1e4a:	fb 1c       	adc	r15, r11
    1e4c:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    1e50:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1e54:	c2 82       	std	Z+2, r12	; 0x02
    1e56:	d3 82       	std	Z+3, r13	; 0x03
    1e58:	e4 82       	std	Z+4, r14	; 0x04
    1e5a:	f5 82       	std	Z+5, r15	; 0x05
    1e5c:	c8 14       	cp	r12, r8
    1e5e:	d9 04       	cpc	r13, r9
    1e60:	ea 04       	cpc	r14, r10
    1e62:	fb 04       	cpc	r15, r11
    1e64:	68 f4       	brcc	.+26     	; 0x1e80 <prvAddCurrentTaskToDelayedList+0xec>
    1e66:	60 91 91 16 	lds	r22, 0x1691	; 0x801691 <pxCurrentTCB>
    1e6a:	70 91 92 16 	lds	r23, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1e6e:	80 91 09 16 	lds	r24, 0x1609	; 0x801609 <pxOverflowDelayedTaskList>
    1e72:	90 91 0a 16 	lds	r25, 0x160A	; 0x80160a <pxOverflowDelayedTaskList+0x1>
    1e76:	6e 5f       	subi	r22, 0xFE	; 254
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    1e7e:	21 c0       	rjmp	.+66     	; 0x1ec2 <prvAddCurrentTaskToDelayedList+0x12e>
    1e80:	60 91 91 16 	lds	r22, 0x1691	; 0x801691 <pxCurrentTCB>
    1e84:	70 91 92 16 	lds	r23, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    1e88:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <pxDelayedTaskList>
    1e8c:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <pxDelayedTaskList+0x1>
    1e90:	6e 5f       	subi	r22, 0xFE	; 254
    1e92:	7f 4f       	sbci	r23, 0xFF	; 255
    1e94:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    1e98:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <xNextTaskUnblockTime>
    1e9c:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <xNextTaskUnblockTime+0x1>
    1ea0:	a0 91 d7 15 	lds	r26, 0x15D7	; 0x8015d7 <xNextTaskUnblockTime+0x2>
    1ea4:	b0 91 d8 15 	lds	r27, 0x15D8	; 0x8015d8 <xNextTaskUnblockTime+0x3>
    1ea8:	c8 16       	cp	r12, r24
    1eaa:	d9 06       	cpc	r13, r25
    1eac:	ea 06       	cpc	r14, r26
    1eae:	fb 06       	cpc	r15, r27
    1eb0:	40 f4       	brcc	.+16     	; 0x1ec2 <prvAddCurrentTaskToDelayedList+0x12e>
    1eb2:	c0 92 d5 15 	sts	0x15D5, r12	; 0x8015d5 <xNextTaskUnblockTime>
    1eb6:	d0 92 d6 15 	sts	0x15D6, r13	; 0x8015d6 <xNextTaskUnblockTime+0x1>
    1eba:	e0 92 d7 15 	sts	0x15D7, r14	; 0x8015d7 <xNextTaskUnblockTime+0x2>
    1ebe:	f0 92 d8 15 	sts	0x15D8, r15	; 0x8015d8 <xNextTaskUnblockTime+0x3>
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
    1ece:	bf 90       	pop	r11
    1ed0:	af 90       	pop	r10
    1ed2:	9f 90       	pop	r9
    1ed4:	8f 90       	pop	r8
    1ed6:	08 95       	ret

00001ed8 <xTaskCreate>:
    1ed8:	2f 92       	push	r2
    1eda:	3f 92       	push	r3
    1edc:	4f 92       	push	r4
    1ede:	5f 92       	push	r5
    1ee0:	6f 92       	push	r6
    1ee2:	7f 92       	push	r7
    1ee4:	8f 92       	push	r8
    1ee6:	9f 92       	push	r9
    1ee8:	af 92       	push	r10
    1eea:	bf 92       	push	r11
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	3c 01       	movw	r6, r24
    1efc:	1b 01       	movw	r2, r22
    1efe:	4a 01       	movw	r8, r20
    1f00:	29 01       	movw	r4, r18
    1f02:	ca 01       	movw	r24, r20
    1f04:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
    1f08:	6c 01       	movw	r12, r24
    1f0a:	89 2b       	or	r24, r25
    1f0c:	71 f0       	breq	.+28     	; 0x1f2a <xTaskCreate+0x52>
    1f0e:	84 e3       	ldi	r24, 0x34	; 52
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
    1f16:	ec 01       	movw	r28, r24
    1f18:	89 2b       	or	r24, r25
    1f1a:	19 f0       	breq	.+6      	; 0x1f22 <xTaskCreate+0x4a>
    1f1c:	dc 8e       	std	Y+28, r13	; 0x1c
    1f1e:	cb 8e       	std	Y+27, r12	; 0x1b
    1f20:	06 c0       	rjmp	.+12     	; 0x1f2e <xTaskCreate+0x56>
    1f22:	c6 01       	movw	r24, r12
    1f24:	0e 94 bf 04 	call	0x97e	; 0x97e <vPortFree>
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <xTaskCreate+0x56>
    1f2a:	c0 e0       	ldi	r28, 0x00	; 0
    1f2c:	d0 e0       	ldi	r29, 0x00	; 0
    1f2e:	20 97       	sbiw	r28, 0x00	; 0
    1f30:	61 f0       	breq	.+24     	; 0x1f4a <xTaskCreate+0x72>
    1f32:	a1 2c       	mov	r10, r1
    1f34:	b1 2c       	mov	r11, r1
    1f36:	6e 01       	movw	r12, r28
    1f38:	92 01       	movw	r18, r4
    1f3a:	a4 01       	movw	r20, r8
    1f3c:	b1 01       	movw	r22, r2
    1f3e:	c3 01       	movw	r24, r6
    1f40:	e7 dd       	rcall	.-1074   	; 0x1b10 <prvInitialiseNewTask>
    1f42:	ce 01       	movw	r24, r28
    1f44:	93 de       	rcall	.-730    	; 0x1c6c <prvAddNewTaskToReadyList>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <xTaskCreate+0x74>
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	0f 91       	pop	r16
    1f52:	ff 90       	pop	r15
    1f54:	ef 90       	pop	r14
    1f56:	df 90       	pop	r13
    1f58:	cf 90       	pop	r12
    1f5a:	bf 90       	pop	r11
    1f5c:	af 90       	pop	r10
    1f5e:	9f 90       	pop	r9
    1f60:	8f 90       	pop	r8
    1f62:	7f 90       	pop	r7
    1f64:	6f 90       	pop	r6
    1f66:	5f 90       	pop	r5
    1f68:	4f 90       	pop	r4
    1f6a:	3f 90       	pop	r3
    1f6c:	2f 90       	pop	r2
    1f6e:	08 95       	ret

00001f70 <vTaskStartScheduler>:
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	0f 2e       	mov	r0, r31
    1f78:	f3 ed       	ldi	r31, 0xD3	; 211
    1f7a:	ef 2e       	mov	r14, r31
    1f7c:	f5 e1       	ldi	r31, 0x15	; 21
    1f7e:	ff 2e       	mov	r15, r31
    1f80:	f0 2d       	mov	r31, r0
    1f82:	00 e0       	ldi	r16, 0x00	; 0
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 ec       	ldi	r20, 0xC0	; 192
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	69 ea       	ldi	r22, 0xA9	; 169
    1f8e:	72 e0       	ldi	r23, 0x02	; 2
    1f90:	8d ec       	ldi	r24, 0xCD	; 205
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	a1 df       	rcall	.-190    	; 0x1ed8 <xTaskCreate>
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	11 f4       	brne	.+4      	; 0x1f9e <vTaskStartScheduler+0x2e>
    1f9a:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <xTimerCreateTimerTask>
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	c9 f4       	brne	.+50     	; 0x1fd4 <vTaskStartScheduler+0x64>
    1fa2:	f8 94       	cli
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	9f ef       	ldi	r25, 0xFF	; 255
    1fa8:	dc 01       	movw	r26, r24
    1faa:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <xNextTaskUnblockTime>
    1fae:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <xNextTaskUnblockTime+0x1>
    1fb2:	a0 93 d7 15 	sts	0x15D7, r26	; 0x8015d7 <xNextTaskUnblockTime+0x2>
    1fb6:	b0 93 d8 15 	sts	0x15D8, r27	; 0x8015d8 <xNextTaskUnblockTime+0x3>
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	80 93 e0 15 	sts	0x15E0, r24	; 0x8015e0 <xSchedulerRunning>
    1fc0:	10 92 e2 15 	sts	0x15E2, r1	; 0x8015e2 <xTickCount>
    1fc4:	10 92 e3 15 	sts	0x15E3, r1	; 0x8015e3 <xTickCount+0x1>
    1fc8:	10 92 e4 15 	sts	0x15E4, r1	; 0x8015e4 <xTickCount+0x2>
    1fcc:	10 92 e5 15 	sts	0x15E5, r1	; 0x8015e5 <xTickCount+0x3>
    1fd0:	0e 94 98 05 	call	0xb30	; 0xb30 <xPortStartScheduler>
    1fd4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1fd8:	0f 91       	pop	r16
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	08 95       	ret

00001fe0 <vTaskSuspendAll>:
    1fe0:	80 91 d2 15 	lds	r24, 0x15D2	; 0x8015d2 <uxSchedulerSuspended>
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	80 93 d2 15 	sts	0x15D2, r24	; 0x8015d2 <uxSchedulerSuspended>
    1fea:	08 95       	ret

00001fec <xTaskGetTickCount>:
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	0f 92       	push	r0
    1ff2:	60 91 e2 15 	lds	r22, 0x15E2	; 0x8015e2 <xTickCount>
    1ff6:	70 91 e3 15 	lds	r23, 0x15E3	; 0x8015e3 <xTickCount+0x1>
    1ffa:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <xTickCount+0x2>
    1ffe:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <xTickCount+0x3>
    2002:	0f 90       	pop	r0
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	08 95       	ret

00002008 <xTaskIncrementTick>:
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	80 91 d2 15 	lds	r24, 0x15D2	; 0x8015d2 <uxSchedulerSuspended>
    2018:	81 11       	cpse	r24, r1
    201a:	05 c1       	rjmp	.+522    	; 0x2226 <__stack+0x27>
    201c:	c0 90 e2 15 	lds	r12, 0x15E2	; 0x8015e2 <xTickCount>
    2020:	d0 90 e3 15 	lds	r13, 0x15E3	; 0x8015e3 <xTickCount+0x1>
    2024:	e0 90 e4 15 	lds	r14, 0x15E4	; 0x8015e4 <xTickCount+0x2>
    2028:	f0 90 e5 15 	lds	r15, 0x15E5	; 0x8015e5 <xTickCount+0x3>
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	c8 1a       	sub	r12, r24
    2030:	d8 0a       	sbc	r13, r24
    2032:	e8 0a       	sbc	r14, r24
    2034:	f8 0a       	sbc	r15, r24
    2036:	c0 92 e2 15 	sts	0x15E2, r12	; 0x8015e2 <xTickCount>
    203a:	d0 92 e3 15 	sts	0x15E3, r13	; 0x8015e3 <xTickCount+0x1>
    203e:	e0 92 e4 15 	sts	0x15E4, r14	; 0x8015e4 <xTickCount+0x2>
    2042:	f0 92 e5 15 	sts	0x15E5, r15	; 0x8015e5 <xTickCount+0x3>
    2046:	c1 14       	cp	r12, r1
    2048:	d1 04       	cpc	r13, r1
    204a:	e1 04       	cpc	r14, r1
    204c:	f1 04       	cpc	r15, r1
    204e:	b1 f4       	brne	.+44     	; 0x207c <xTaskIncrementTick+0x74>
    2050:	80 91 0b 16 	lds	r24, 0x160B	; 0x80160b <pxDelayedTaskList>
    2054:	90 91 0c 16 	lds	r25, 0x160C	; 0x80160c <pxDelayedTaskList+0x1>
    2058:	20 91 09 16 	lds	r18, 0x1609	; 0x801609 <pxOverflowDelayedTaskList>
    205c:	30 91 0a 16 	lds	r19, 0x160A	; 0x80160a <pxOverflowDelayedTaskList+0x1>
    2060:	30 93 0c 16 	sts	0x160C, r19	; 0x80160c <pxDelayedTaskList+0x1>
    2064:	20 93 0b 16 	sts	0x160B, r18	; 0x80160b <pxDelayedTaskList>
    2068:	90 93 0a 16 	sts	0x160A, r25	; 0x80160a <pxOverflowDelayedTaskList+0x1>
    206c:	80 93 09 16 	sts	0x1609, r24	; 0x801609 <pxOverflowDelayedTaskList>
    2070:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <xNumOfOverflows>
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	80 93 da 15 	sts	0x15DA, r24	; 0x8015da <xNumOfOverflows>
    207a:	16 dd       	rcall	.-1492   	; 0x1aa8 <prvResetNextTaskUnblockTime>
    207c:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <xNextTaskUnblockTime>
    2080:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <xNextTaskUnblockTime+0x1>
    2084:	a0 91 d7 15 	lds	r26, 0x15D7	; 0x8015d7 <xNextTaskUnblockTime+0x2>
    2088:	b0 91 d8 15 	lds	r27, 0x15D8	; 0x8015d8 <xNextTaskUnblockTime+0x3>
    208c:	c8 16       	cp	r12, r24
    208e:	d9 06       	cpc	r13, r25
    2090:	ea 06       	cpc	r14, r26
    2092:	fb 06       	cpc	r15, r27
    2094:	20 f4       	brcc	.+8      	; 0x209e <xTaskIncrementTick+0x96>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	b2 c0       	rjmp	.+356    	; 0x21fe <xTaskIncrementTick+0x1f6>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <xTaskIncrementTick+0x98>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	e0 91 0b 16 	lds	r30, 0x160B	; 0x80160b <pxDelayedTaskList>
    20a4:	f0 91 0c 16 	lds	r31, 0x160C	; 0x80160c <pxDelayedTaskList+0x1>
    20a8:	90 81       	ld	r25, Z
    20aa:	91 11       	cpse	r25, r1
    20ac:	0c c0       	rjmp	.+24     	; 0x20c6 <xTaskIncrementTick+0xbe>
    20ae:	4f ef       	ldi	r20, 0xFF	; 255
    20b0:	5f ef       	ldi	r21, 0xFF	; 255
    20b2:	ba 01       	movw	r22, r20
    20b4:	40 93 d5 15 	sts	0x15D5, r20	; 0x8015d5 <xNextTaskUnblockTime>
    20b8:	50 93 d6 15 	sts	0x15D6, r21	; 0x8015d6 <xNextTaskUnblockTime+0x1>
    20bc:	60 93 d7 15 	sts	0x15D7, r22	; 0x8015d7 <xNextTaskUnblockTime+0x2>
    20c0:	70 93 d8 15 	sts	0x15D8, r23	; 0x8015d8 <xNextTaskUnblockTime+0x3>
    20c4:	9c c0       	rjmp	.+312    	; 0x21fe <xTaskIncrementTick+0x1f6>
    20c6:	e0 91 0b 16 	lds	r30, 0x160B	; 0x80160b <pxDelayedTaskList>
    20ca:	f0 91 0c 16 	lds	r31, 0x160C	; 0x80160c <pxDelayedTaskList+0x1>
    20ce:	07 80       	ldd	r0, Z+7	; 0x07
    20d0:	f0 85       	ldd	r31, Z+8	; 0x08
    20d2:	e0 2d       	mov	r30, r0
    20d4:	00 84       	ldd	r0, Z+8	; 0x08
    20d6:	f1 85       	ldd	r31, Z+9	; 0x09
    20d8:	e0 2d       	mov	r30, r0
    20da:	42 81       	ldd	r20, Z+2	; 0x02
    20dc:	53 81       	ldd	r21, Z+3	; 0x03
    20de:	64 81       	ldd	r22, Z+4	; 0x04
    20e0:	75 81       	ldd	r23, Z+5	; 0x05
    20e2:	c4 16       	cp	r12, r20
    20e4:	d5 06       	cpc	r13, r21
    20e6:	e6 06       	cpc	r14, r22
    20e8:	f7 06       	cpc	r15, r23
    20ea:	48 f4       	brcc	.+18     	; 0x20fe <xTaskIncrementTick+0xf6>
    20ec:	40 93 d5 15 	sts	0x15D5, r20	; 0x8015d5 <xNextTaskUnblockTime>
    20f0:	50 93 d6 15 	sts	0x15D6, r21	; 0x8015d6 <xNextTaskUnblockTime+0x1>
    20f4:	60 93 d7 15 	sts	0x15D7, r22	; 0x8015d7 <xNextTaskUnblockTime+0x2>
    20f8:	70 93 d8 15 	sts	0x15D8, r23	; 0x8015d8 <xNextTaskUnblockTime+0x3>
    20fc:	80 c0       	rjmp	.+256    	; 0x21fe <xTaskIncrementTick+0x1f6>
    20fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2100:	b5 85       	ldd	r27, Z+13	; 0x0d
    2102:	c6 81       	ldd	r28, Z+6	; 0x06
    2104:	d7 81       	ldd	r29, Z+7	; 0x07
    2106:	20 85       	ldd	r18, Z+8	; 0x08
    2108:	31 85       	ldd	r19, Z+9	; 0x09
    210a:	3f 83       	std	Y+7, r19	; 0x07
    210c:	2e 83       	std	Y+6, r18	; 0x06
    210e:	c0 85       	ldd	r28, Z+8	; 0x08
    2110:	d1 85       	ldd	r29, Z+9	; 0x09
    2112:	26 81       	ldd	r18, Z+6	; 0x06
    2114:	37 81       	ldd	r19, Z+7	; 0x07
    2116:	3d 83       	std	Y+5, r19	; 0x05
    2118:	2c 83       	std	Y+4, r18	; 0x04
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	4d 91       	ld	r20, X+
    211e:	5c 91       	ld	r21, X
    2120:	12 97       	sbiw	r26, 0x02	; 2
    2122:	9f 01       	movw	r18, r30
    2124:	2e 5f       	subi	r18, 0xFE	; 254
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	42 17       	cp	r20, r18
    212a:	53 07       	cpc	r21, r19
    212c:	31 f4       	brne	.+12     	; 0x213a <xTaskIncrementTick+0x132>
    212e:	40 85       	ldd	r20, Z+8	; 0x08
    2130:	51 85       	ldd	r21, Z+9	; 0x09
    2132:	12 96       	adiw	r26, 0x02	; 2
    2134:	5c 93       	st	X, r21
    2136:	4e 93       	st	-X, r20
    2138:	11 97       	sbiw	r26, 0x01	; 1
    213a:	15 86       	std	Z+13, r1	; 0x0d
    213c:	14 86       	std	Z+12, r1	; 0x0c
    213e:	9c 91       	ld	r25, X
    2140:	91 50       	subi	r25, 0x01	; 1
    2142:	9c 93       	st	X, r25
    2144:	a0 8d       	ldd	r26, Z+24	; 0x18
    2146:	b1 8d       	ldd	r27, Z+25	; 0x19
    2148:	10 97       	sbiw	r26, 0x00	; 0
    214a:	09 f1       	breq	.+66     	; 0x218e <xTaskIncrementTick+0x186>
    214c:	c2 89       	ldd	r28, Z+18	; 0x12
    214e:	d3 89       	ldd	r29, Z+19	; 0x13
    2150:	44 89       	ldd	r20, Z+20	; 0x14
    2152:	55 89       	ldd	r21, Z+21	; 0x15
    2154:	5f 83       	std	Y+7, r21	; 0x07
    2156:	4e 83       	std	Y+6, r20	; 0x06
    2158:	c4 89       	ldd	r28, Z+20	; 0x14
    215a:	d5 89       	ldd	r29, Z+21	; 0x15
    215c:	42 89       	ldd	r20, Z+18	; 0x12
    215e:	53 89       	ldd	r21, Z+19	; 0x13
    2160:	5d 83       	std	Y+5, r21	; 0x05
    2162:	4c 83       	std	Y+4, r20	; 0x04
    2164:	11 96       	adiw	r26, 0x01	; 1
    2166:	6d 91       	ld	r22, X+
    2168:	7c 91       	ld	r23, X
    216a:	12 97       	sbiw	r26, 0x02	; 2
    216c:	af 01       	movw	r20, r30
    216e:	42 5f       	subi	r20, 0xF2	; 242
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
    2172:	64 17       	cp	r22, r20
    2174:	75 07       	cpc	r23, r21
    2176:	31 f4       	brne	.+12     	; 0x2184 <xTaskIncrementTick+0x17c>
    2178:	44 89       	ldd	r20, Z+20	; 0x14
    217a:	55 89       	ldd	r21, Z+21	; 0x15
    217c:	12 96       	adiw	r26, 0x02	; 2
    217e:	5c 93       	st	X, r21
    2180:	4e 93       	st	-X, r20
    2182:	11 97       	sbiw	r26, 0x01	; 1
    2184:	11 8e       	std	Z+25, r1	; 0x19
    2186:	10 8e       	std	Z+24, r1	; 0x18
    2188:	9c 91       	ld	r25, X
    218a:	91 50       	subi	r25, 0x01	; 1
    218c:	9c 93       	st	X, r25
    218e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2190:	90 91 e1 15 	lds	r25, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    2194:	9a 17       	cp	r25, r26
    2196:	10 f4       	brcc	.+4      	; 0x219c <xTaskIncrementTick+0x194>
    2198:	a0 93 e1 15 	sts	0x15E1, r26	; 0x8015e1 <uxTopReadyPriority>
    219c:	9b e0       	ldi	r25, 0x0B	; 11
    219e:	9a 9f       	mul	r25, r26
    21a0:	d0 01       	movw	r26, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	ad 5d       	subi	r26, 0xDD	; 221
    21a6:	b9 4e       	sbci	r27, 0xE9	; 233
    21a8:	11 96       	adiw	r26, 0x01	; 1
    21aa:	0d 90       	ld	r0, X+
    21ac:	bc 91       	ld	r27, X
    21ae:	a0 2d       	mov	r26, r0
    21b0:	b7 83       	std	Z+7, r27	; 0x07
    21b2:	a6 83       	std	Z+6, r26	; 0x06
    21b4:	16 96       	adiw	r26, 0x06	; 6
    21b6:	4d 91       	ld	r20, X+
    21b8:	5c 91       	ld	r21, X
    21ba:	17 97       	sbiw	r26, 0x07	; 7
    21bc:	51 87       	std	Z+9, r21	; 0x09
    21be:	40 87       	std	Z+8, r20	; 0x08
    21c0:	16 96       	adiw	r26, 0x06	; 6
    21c2:	cd 91       	ld	r28, X+
    21c4:	dc 91       	ld	r29, X
    21c6:	17 97       	sbiw	r26, 0x07	; 7
    21c8:	3d 83       	std	Y+5, r19	; 0x05
    21ca:	2c 83       	std	Y+4, r18	; 0x04
    21cc:	17 96       	adiw	r26, 0x07	; 7
    21ce:	3c 93       	st	X, r19
    21d0:	2e 93       	st	-X, r18
    21d2:	16 97       	sbiw	r26, 0x06	; 6
    21d4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21d6:	9a 9f       	mul	r25, r26
    21d8:	d0 01       	movw	r26, r0
    21da:	11 24       	eor	r1, r1
    21dc:	ad 5d       	subi	r26, 0xDD	; 221
    21de:	b9 4e       	sbci	r27, 0xE9	; 233
    21e0:	b5 87       	std	Z+13, r27	; 0x0d
    21e2:	a4 87       	std	Z+12, r26	; 0x0c
    21e4:	9c 91       	ld	r25, X
    21e6:	9f 5f       	subi	r25, 0xFF	; 255
    21e8:	9c 93       	st	X, r25
    21ea:	22 8d       	ldd	r18, Z+26	; 0x1a
    21ec:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    21f0:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    21f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    21f6:	29 17       	cp	r18, r25
    21f8:	08 f0       	brcs	.+2      	; 0x21fc <xTaskIncrementTick+0x1f4>
    21fa:	4f cf       	rjmp	.-354    	; 0x209a <xTaskIncrementTick+0x92>
    21fc:	51 cf       	rjmp	.-350    	; 0x20a0 <xTaskIncrementTick+0x98>
    21fe:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2202:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2206:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2208:	9b e0       	ldi	r25, 0x0B	; 11
    220a:	e9 9f       	mul	r30, r25
    220c:	f0 01       	movw	r30, r0
    220e:	11 24       	eor	r1, r1
    2210:	ed 5d       	subi	r30, 0xDD	; 221
    2212:	f9 4e       	sbci	r31, 0xE9	; 233
    2214:	90 81       	ld	r25, Z
    2216:	92 30       	cpi	r25, 0x02	; 2
    2218:	08 f0       	brcs	.+2      	; 0x221c <__stack+0x1d>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 91 db 15 	lds	r25, 0x15DB	; 0x8015db <xYieldPending>
    2220:	91 11       	cpse	r25, r1
    2222:	16 c0       	rjmp	.+44     	; 0x2250 <__stack+0x51>
    2224:	16 c0       	rjmp	.+44     	; 0x2252 <__stack+0x53>
    2226:	80 91 dc 15 	lds	r24, 0x15DC	; 0x8015dc <xPendedTicks>
    222a:	90 91 dd 15 	lds	r25, 0x15DD	; 0x8015dd <xPendedTicks+0x1>
    222e:	a0 91 de 15 	lds	r26, 0x15DE	; 0x8015de <xPendedTicks+0x2>
    2232:	b0 91 df 15 	lds	r27, 0x15DF	; 0x8015df <xPendedTicks+0x3>
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	a1 1d       	adc	r26, r1
    223a:	b1 1d       	adc	r27, r1
    223c:	80 93 dc 15 	sts	0x15DC, r24	; 0x8015dc <xPendedTicks>
    2240:	90 93 dd 15 	sts	0x15DD, r25	; 0x8015dd <xPendedTicks+0x1>
    2244:	a0 93 de 15 	sts	0x15DE, r26	; 0x8015de <xPendedTicks+0x2>
    2248:	b0 93 df 15 	sts	0x15DF, r27	; 0x8015df <xPendedTicks+0x3>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <__stack+0x53>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	ff 90       	pop	r15
    2258:	ef 90       	pop	r14
    225a:	df 90       	pop	r13
    225c:	cf 90       	pop	r12
    225e:	08 95       	ret

00002260 <xTaskResumeAll>:
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	0f 92       	push	r0
    2272:	80 91 d2 15 	lds	r24, 0x15D2	; 0x8015d2 <uxSchedulerSuspended>
    2276:	81 50       	subi	r24, 0x01	; 1
    2278:	80 93 d2 15 	sts	0x15D2, r24	; 0x8015d2 <uxSchedulerSuspended>
    227c:	80 91 d2 15 	lds	r24, 0x15D2	; 0x8015d2 <uxSchedulerSuspended>
    2280:	81 11       	cpse	r24, r1
    2282:	be c0       	rjmp	.+380    	; 0x2400 <xTaskResumeAll+0x1a0>
    2284:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <uxCurrentNumberOfTasks>
    2288:	81 11       	cpse	r24, r1
    228a:	88 c0       	rjmp	.+272    	; 0x239c <xTaskResumeAll+0x13c>
    228c:	bc c0       	rjmp	.+376    	; 0x2406 <xTaskResumeAll+0x1a6>
    228e:	e0 91 05 16 	lds	r30, 0x1605	; 0x801605 <xPendingReadyList+0x7>
    2292:	f0 91 06 16 	lds	r31, 0x1606	; 0x801606 <xPendingReadyList+0x8>
    2296:	00 84       	ldd	r0, Z+8	; 0x08
    2298:	f1 85       	ldd	r31, Z+9	; 0x09
    229a:	e0 2d       	mov	r30, r0
    229c:	a0 8d       	ldd	r26, Z+24	; 0x18
    229e:	b1 8d       	ldd	r27, Z+25	; 0x19
    22a0:	c2 89       	ldd	r28, Z+18	; 0x12
    22a2:	d3 89       	ldd	r29, Z+19	; 0x13
    22a4:	84 89       	ldd	r24, Z+20	; 0x14
    22a6:	95 89       	ldd	r25, Z+21	; 0x15
    22a8:	9f 83       	std	Y+7, r25	; 0x07
    22aa:	8e 83       	std	Y+6, r24	; 0x06
    22ac:	c4 89       	ldd	r28, Z+20	; 0x14
    22ae:	d5 89       	ldd	r29, Z+21	; 0x15
    22b0:	82 89       	ldd	r24, Z+18	; 0x12
    22b2:	93 89       	ldd	r25, Z+19	; 0x13
    22b4:	9d 83       	std	Y+5, r25	; 0x05
    22b6:	8c 83       	std	Y+4, r24	; 0x04
    22b8:	11 96       	adiw	r26, 0x01	; 1
    22ba:	2d 91       	ld	r18, X+
    22bc:	3c 91       	ld	r19, X
    22be:	12 97       	sbiw	r26, 0x02	; 2
    22c0:	cf 01       	movw	r24, r30
    22c2:	0e 96       	adiw	r24, 0x0e	; 14
    22c4:	28 17       	cp	r18, r24
    22c6:	39 07       	cpc	r19, r25
    22c8:	31 f4       	brne	.+12     	; 0x22d6 <xTaskResumeAll+0x76>
    22ca:	84 89       	ldd	r24, Z+20	; 0x14
    22cc:	95 89       	ldd	r25, Z+21	; 0x15
    22ce:	12 96       	adiw	r26, 0x02	; 2
    22d0:	9c 93       	st	X, r25
    22d2:	8e 93       	st	-X, r24
    22d4:	11 97       	sbiw	r26, 0x01	; 1
    22d6:	11 8e       	std	Z+25, r1	; 0x19
    22d8:	10 8e       	std	Z+24, r1	; 0x18
    22da:	8c 91       	ld	r24, X
    22dc:	81 50       	subi	r24, 0x01	; 1
    22de:	8c 93       	st	X, r24
    22e0:	a4 85       	ldd	r26, Z+12	; 0x0c
    22e2:	b5 85       	ldd	r27, Z+13	; 0x0d
    22e4:	c6 81       	ldd	r28, Z+6	; 0x06
    22e6:	d7 81       	ldd	r29, Z+7	; 0x07
    22e8:	80 85       	ldd	r24, Z+8	; 0x08
    22ea:	91 85       	ldd	r25, Z+9	; 0x09
    22ec:	9f 83       	std	Y+7, r25	; 0x07
    22ee:	8e 83       	std	Y+6, r24	; 0x06
    22f0:	c0 85       	ldd	r28, Z+8	; 0x08
    22f2:	d1 85       	ldd	r29, Z+9	; 0x09
    22f4:	86 81       	ldd	r24, Z+6	; 0x06
    22f6:	97 81       	ldd	r25, Z+7	; 0x07
    22f8:	9d 83       	std	Y+5, r25	; 0x05
    22fa:	8c 83       	std	Y+4, r24	; 0x04
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	8d 91       	ld	r24, X+
    2300:	9c 91       	ld	r25, X
    2302:	12 97       	sbiw	r26, 0x02	; 2
    2304:	9f 01       	movw	r18, r30
    2306:	2e 5f       	subi	r18, 0xFE	; 254
    2308:	3f 4f       	sbci	r19, 0xFF	; 255
    230a:	82 17       	cp	r24, r18
    230c:	93 07       	cpc	r25, r19
    230e:	31 f4       	brne	.+12     	; 0x231c <xTaskResumeAll+0xbc>
    2310:	80 85       	ldd	r24, Z+8	; 0x08
    2312:	91 85       	ldd	r25, Z+9	; 0x09
    2314:	12 96       	adiw	r26, 0x02	; 2
    2316:	9c 93       	st	X, r25
    2318:	8e 93       	st	-X, r24
    231a:	11 97       	sbiw	r26, 0x01	; 1
    231c:	15 86       	std	Z+13, r1	; 0x0d
    231e:	14 86       	std	Z+12, r1	; 0x0c
    2320:	8c 91       	ld	r24, X
    2322:	81 50       	subi	r24, 0x01	; 1
    2324:	8c 93       	st	X, r24
    2326:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2328:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    232c:	8a 17       	cp	r24, r26
    232e:	10 f4       	brcc	.+4      	; 0x2334 <xTaskResumeAll+0xd4>
    2330:	a0 93 e1 15 	sts	0x15E1, r26	; 0x8015e1 <uxTopReadyPriority>
    2334:	8b e0       	ldi	r24, 0x0B	; 11
    2336:	8a 9f       	mul	r24, r26
    2338:	d0 01       	movw	r26, r0
    233a:	11 24       	eor	r1, r1
    233c:	ad 5d       	subi	r26, 0xDD	; 221
    233e:	b9 4e       	sbci	r27, 0xE9	; 233
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	0d 90       	ld	r0, X+
    2344:	bc 91       	ld	r27, X
    2346:	a0 2d       	mov	r26, r0
    2348:	b7 83       	std	Z+7, r27	; 0x07
    234a:	a6 83       	std	Z+6, r26	; 0x06
    234c:	16 96       	adiw	r26, 0x06	; 6
    234e:	4d 91       	ld	r20, X+
    2350:	5c 91       	ld	r21, X
    2352:	17 97       	sbiw	r26, 0x07	; 7
    2354:	51 87       	std	Z+9, r21	; 0x09
    2356:	40 87       	std	Z+8, r20	; 0x08
    2358:	16 96       	adiw	r26, 0x06	; 6
    235a:	cd 91       	ld	r28, X+
    235c:	dc 91       	ld	r29, X
    235e:	17 97       	sbiw	r26, 0x07	; 7
    2360:	3d 83       	std	Y+5, r19	; 0x05
    2362:	2c 83       	std	Y+4, r18	; 0x04
    2364:	17 96       	adiw	r26, 0x07	; 7
    2366:	3c 93       	st	X, r19
    2368:	2e 93       	st	-X, r18
    236a:	16 97       	sbiw	r26, 0x06	; 6
    236c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    236e:	8a 9f       	mul	r24, r26
    2370:	d0 01       	movw	r26, r0
    2372:	11 24       	eor	r1, r1
    2374:	ad 5d       	subi	r26, 0xDD	; 221
    2376:	b9 4e       	sbci	r27, 0xE9	; 233
    2378:	b5 87       	std	Z+13, r27	; 0x0d
    237a:	a4 87       	std	Z+12, r26	; 0x0c
    237c:	8c 91       	ld	r24, X
    237e:	8f 5f       	subi	r24, 0xFF	; 255
    2380:	8c 93       	st	X, r24
    2382:	92 8d       	ldd	r25, Z+26	; 0x1a
    2384:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    2388:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    238c:	5a 96       	adiw	r26, 0x1a	; 26
    238e:	8c 91       	ld	r24, X
    2390:	98 17       	cp	r25, r24
    2392:	30 f0       	brcs	.+12     	; 0x23a0 <xTaskResumeAll+0x140>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <xYieldPending>
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <xTaskResumeAll+0x140>
    239c:	e0 e0       	ldi	r30, 0x00	; 0
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xPendingReadyList>
    23a4:	81 11       	cpse	r24, r1
    23a6:	73 cf       	rjmp	.-282    	; 0x228e <xTaskResumeAll+0x2e>
    23a8:	ef 2b       	or	r30, r31
    23aa:	09 f0       	breq	.+2      	; 0x23ae <xTaskResumeAll+0x14e>
    23ac:	7d db       	rcall	.-2310   	; 0x1aa8 <prvResetNextTaskUnblockTime>
    23ae:	c0 90 dc 15 	lds	r12, 0x15DC	; 0x8015dc <xPendedTicks>
    23b2:	d0 90 dd 15 	lds	r13, 0x15DD	; 0x8015dd <xPendedTicks+0x1>
    23b6:	e0 90 de 15 	lds	r14, 0x15DE	; 0x8015de <xPendedTicks+0x2>
    23ba:	f0 90 df 15 	lds	r15, 0x15DF	; 0x8015df <xPendedTicks+0x3>
    23be:	c1 14       	cp	r12, r1
    23c0:	d1 04       	cpc	r13, r1
    23c2:	e1 04       	cpc	r14, r1
    23c4:	f1 04       	cpc	r15, r1
    23c6:	a1 f0       	breq	.+40     	; 0x23f0 <xTaskResumeAll+0x190>
    23c8:	1f de       	rcall	.-962    	; 0x2008 <xTaskIncrementTick>
    23ca:	88 23       	and	r24, r24
    23cc:	19 f0       	breq	.+6      	; 0x23d4 <xTaskResumeAll+0x174>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <xYieldPending>
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	c8 1a       	sub	r12, r24
    23d8:	d1 08       	sbc	r13, r1
    23da:	e1 08       	sbc	r14, r1
    23dc:	f1 08       	sbc	r15, r1
    23de:	a1 f7       	brne	.-24     	; 0x23c8 <xTaskResumeAll+0x168>
    23e0:	10 92 dc 15 	sts	0x15DC, r1	; 0x8015dc <xPendedTicks>
    23e4:	10 92 dd 15 	sts	0x15DD, r1	; 0x8015dd <xPendedTicks+0x1>
    23e8:	10 92 de 15 	sts	0x15DE, r1	; 0x8015de <xPendedTicks+0x2>
    23ec:	10 92 df 15 	sts	0x15DF, r1	; 0x8015df <xPendedTicks+0x3>
    23f0:	80 91 db 15 	lds	r24, 0x15DB	; 0x8015db <xYieldPending>
    23f4:	88 23       	and	r24, r24
    23f6:	31 f0       	breq	.+12     	; 0x2404 <xTaskResumeAll+0x1a4>
    23f8:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	03 c0       	rjmp	.+6      	; 0x2406 <xTaskResumeAll+0x1a6>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <xTaskResumeAll+0x1a6>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	ff 90       	pop	r15
    2410:	ef 90       	pop	r14
    2412:	df 90       	pop	r13
    2414:	cf 90       	pop	r12
    2416:	08 95       	ret

00002418 <xTaskDelayUntil>:
    2418:	8f 92       	push	r8
    241a:	9f 92       	push	r9
    241c:	af 92       	push	r10
    241e:	bf 92       	push	r11
    2420:	cf 92       	push	r12
    2422:	df 92       	push	r13
    2424:	ef 92       	push	r14
    2426:	ff 92       	push	r15
    2428:	1f 93       	push	r17
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	ec 01       	movw	r28, r24
    2430:	6a 01       	movw	r12, r20
    2432:	7b 01       	movw	r14, r22
    2434:	d5 dd       	rcall	.-1110   	; 0x1fe0 <vTaskSuspendAll>
    2436:	80 90 e2 15 	lds	r8, 0x15E2	; 0x8015e2 <xTickCount>
    243a:	90 90 e3 15 	lds	r9, 0x15E3	; 0x8015e3 <xTickCount+0x1>
    243e:	a0 90 e4 15 	lds	r10, 0x15E4	; 0x8015e4 <xTickCount+0x2>
    2442:	b0 90 e5 15 	lds	r11, 0x15E5	; 0x8015e5 <xTickCount+0x3>
    2446:	88 81       	ld	r24, Y
    2448:	99 81       	ldd	r25, Y+1	; 0x01
    244a:	aa 81       	ldd	r26, Y+2	; 0x02
    244c:	bb 81       	ldd	r27, Y+3	; 0x03
    244e:	ac 01       	movw	r20, r24
    2450:	bd 01       	movw	r22, r26
    2452:	4c 0d       	add	r20, r12
    2454:	5d 1d       	adc	r21, r13
    2456:	6e 1d       	adc	r22, r14
    2458:	7f 1d       	adc	r23, r15
    245a:	88 16       	cp	r8, r24
    245c:	99 06       	cpc	r9, r25
    245e:	aa 06       	cpc	r10, r26
    2460:	bb 06       	cpc	r11, r27
    2462:	60 f4       	brcc	.+24     	; 0x247c <xTaskDelayUntil+0x64>
    2464:	48 17       	cp	r20, r24
    2466:	59 07       	cpc	r21, r25
    2468:	6a 07       	cpc	r22, r26
    246a:	7b 07       	cpc	r23, r27
    246c:	98 f4       	brcc	.+38     	; 0x2494 <xTaskDelayUntil+0x7c>
    246e:	84 16       	cp	r8, r20
    2470:	95 06       	cpc	r9, r21
    2472:	a6 06       	cpc	r10, r22
    2474:	b7 06       	cpc	r11, r23
    2476:	80 f0       	brcs	.+32     	; 0x2498 <xTaskDelayUntil+0x80>
    2478:	10 e0       	ldi	r17, 0x00	; 0
    247a:	13 c0       	rjmp	.+38     	; 0x24a2 <xTaskDelayUntil+0x8a>
    247c:	48 17       	cp	r20, r24
    247e:	59 07       	cpc	r21, r25
    2480:	6a 07       	cpc	r22, r26
    2482:	7b 07       	cpc	r23, r27
    2484:	58 f0       	brcs	.+22     	; 0x249c <xTaskDelayUntil+0x84>
    2486:	84 16       	cp	r8, r20
    2488:	95 06       	cpc	r9, r21
    248a:	a6 06       	cpc	r10, r22
    248c:	b7 06       	cpc	r11, r23
    248e:	40 f0       	brcs	.+16     	; 0x24a0 <xTaskDelayUntil+0x88>
    2490:	10 e0       	ldi	r17, 0x00	; 0
    2492:	07 c0       	rjmp	.+14     	; 0x24a2 <xTaskDelayUntil+0x8a>
    2494:	10 e0       	ldi	r17, 0x00	; 0
    2496:	05 c0       	rjmp	.+10     	; 0x24a2 <xTaskDelayUntil+0x8a>
    2498:	11 e0       	ldi	r17, 0x01	; 1
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <xTaskDelayUntil+0x8a>
    249c:	11 e0       	ldi	r17, 0x01	; 1
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <xTaskDelayUntil+0x8a>
    24a0:	11 e0       	ldi	r17, 0x01	; 1
    24a2:	48 83       	st	Y, r20
    24a4:	59 83       	std	Y+1, r21	; 0x01
    24a6:	6a 83       	std	Y+2, r22	; 0x02
    24a8:	7b 83       	std	Y+3, r23	; 0x03
    24aa:	11 23       	and	r17, r17
    24ac:	41 f0       	breq	.+16     	; 0x24be <xTaskDelayUntil+0xa6>
    24ae:	cb 01       	movw	r24, r22
    24b0:	ba 01       	movw	r22, r20
    24b2:	68 19       	sub	r22, r8
    24b4:	79 09       	sbc	r23, r9
    24b6:	8a 09       	sbc	r24, r10
    24b8:	9b 09       	sbc	r25, r11
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	6b dc       	rcall	.-1834   	; 0x1d94 <prvAddCurrentTaskToDelayedList>
    24be:	d0 de       	rcall	.-608    	; 0x2260 <xTaskResumeAll>
    24c0:	81 11       	cpse	r24, r1
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <xTaskDelayUntil+0xb0>
    24c4:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    24c8:	81 2f       	mov	r24, r17
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	cf 90       	pop	r12
    24d8:	bf 90       	pop	r11
    24da:	af 90       	pop	r10
    24dc:	9f 90       	pop	r9
    24de:	8f 90       	pop	r8
    24e0:	08 95       	ret

000024e2 <vTaskDelay>:
    24e2:	cf 92       	push	r12
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	6b 01       	movw	r12, r22
    24ec:	7c 01       	movw	r14, r24
    24ee:	67 2b       	or	r22, r23
    24f0:	68 2b       	or	r22, r24
    24f2:	69 2b       	or	r22, r25
    24f4:	39 f0       	breq	.+14     	; 0x2504 <vTaskDelay+0x22>
    24f6:	74 dd       	rcall	.-1304   	; 0x1fe0 <vTaskSuspendAll>
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	c7 01       	movw	r24, r14
    24fc:	b6 01       	movw	r22, r12
    24fe:	4a dc       	rcall	.-1900   	; 0x1d94 <prvAddCurrentTaskToDelayedList>
    2500:	af de       	rcall	.-674    	; 0x2260 <xTaskResumeAll>
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <vTaskDelay+0x24>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	81 11       	cpse	r24, r1
    2508:	02 c0       	rjmp	.+4      	; 0x250e <vTaskDelay+0x2c>
    250a:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    250e:	ff 90       	pop	r15
    2510:	ef 90       	pop	r14
    2512:	df 90       	pop	r13
    2514:	cf 90       	pop	r12
    2516:	08 95       	ret

00002518 <vTaskSwitchContext>:
    2518:	80 91 d2 15 	lds	r24, 0x15D2	; 0x8015d2 <uxSchedulerSuspended>
    251c:	88 23       	and	r24, r24
    251e:	21 f0       	breq	.+8      	; 0x2528 <vTaskSwitchContext+0x10>
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <xYieldPending>
    2526:	08 95       	ret
    2528:	10 92 db 15 	sts	0x15DB, r1	; 0x8015db <xYieldPending>
    252c:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2530:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2534:	20 81       	ld	r18, Z
    2536:	31 81       	ldd	r19, Z+1	; 0x01
    2538:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    253c:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2540:	83 8d       	ldd	r24, Z+27	; 0x1b
    2542:	94 8d       	ldd	r25, Z+28	; 0x1c
    2544:	82 17       	cp	r24, r18
    2546:	93 07       	cpc	r25, r19
    2548:	60 f0       	brcs	.+24     	; 0x2562 <vTaskSwitchContext+0x4a>
    254a:	60 91 91 16 	lds	r22, 0x1691	; 0x801691 <pxCurrentTCB>
    254e:	70 91 92 16 	lds	r23, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2552:	63 5e       	subi	r22, 0xE3	; 227
    2554:	7f 4f       	sbci	r23, 0xFF	; 255
    2556:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    255a:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    255e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <vApplicationStackOverflowHook>
    2562:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    2566:	01 c0       	rjmp	.+2      	; 0x256a <vTaskSwitchContext+0x52>
    2568:	81 50       	subi	r24, 0x01	; 1
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	9b e0       	ldi	r25, 0x0B	; 11
    2570:	92 9f       	mul	r25, r18
    2572:	f0 01       	movw	r30, r0
    2574:	93 9f       	mul	r25, r19
    2576:	f0 0d       	add	r31, r0
    2578:	11 24       	eor	r1, r1
    257a:	ed 5d       	subi	r30, 0xDD	; 221
    257c:	f9 4e       	sbci	r31, 0xE9	; 233
    257e:	90 81       	ld	r25, Z
    2580:	99 23       	and	r25, r25
    2582:	91 f3       	breq	.-28     	; 0x2568 <vTaskSwitchContext+0x50>
    2584:	9b e0       	ldi	r25, 0x0B	; 11
    2586:	92 9f       	mul	r25, r18
    2588:	a0 01       	movw	r20, r0
    258a:	93 9f       	mul	r25, r19
    258c:	50 0d       	add	r21, r0
    258e:	11 24       	eor	r1, r1
    2590:	df 01       	movw	r26, r30
    2592:	01 80       	ldd	r0, Z+1	; 0x01
    2594:	f2 81       	ldd	r31, Z+2	; 0x02
    2596:	e0 2d       	mov	r30, r0
    2598:	04 80       	ldd	r0, Z+4	; 0x04
    259a:	f5 81       	ldd	r31, Z+5	; 0x05
    259c:	e0 2d       	mov	r30, r0
    259e:	12 96       	adiw	r26, 0x02	; 2
    25a0:	fc 93       	st	X, r31
    25a2:	ee 93       	st	-X, r30
    25a4:	11 97       	sbiw	r26, 0x01	; 1
    25a6:	4a 5d       	subi	r20, 0xDA	; 218
    25a8:	59 4e       	sbci	r21, 0xE9	; 233
    25aa:	e4 17       	cp	r30, r20
    25ac:	f5 07       	cpc	r31, r21
    25ae:	29 f4       	brne	.+10     	; 0x25ba <vTaskSwitchContext+0xa2>
    25b0:	44 81       	ldd	r20, Z+4	; 0x04
    25b2:	55 81       	ldd	r21, Z+5	; 0x05
    25b4:	fd 01       	movw	r30, r26
    25b6:	52 83       	std	Z+2, r21	; 0x02
    25b8:	41 83       	std	Z+1, r20	; 0x01
    25ba:	9b e0       	ldi	r25, 0x0B	; 11
    25bc:	92 9f       	mul	r25, r18
    25be:	f0 01       	movw	r30, r0
    25c0:	93 9f       	mul	r25, r19
    25c2:	f0 0d       	add	r31, r0
    25c4:	11 24       	eor	r1, r1
    25c6:	ed 5d       	subi	r30, 0xDD	; 221
    25c8:	f9 4e       	sbci	r31, 0xE9	; 233
    25ca:	01 80       	ldd	r0, Z+1	; 0x01
    25cc:	f2 81       	ldd	r31, Z+2	; 0x02
    25ce:	e0 2d       	mov	r30, r0
    25d0:	20 85       	ldd	r18, Z+8	; 0x08
    25d2:	31 85       	ldd	r19, Z+9	; 0x09
    25d4:	30 93 92 16 	sts	0x1692, r19	; 0x801692 <pxCurrentTCB+0x1>
    25d8:	20 93 91 16 	sts	0x1691, r18	; 0x801691 <pxCurrentTCB>
    25dc:	80 93 e1 15 	sts	0x15E1, r24	; 0x8015e1 <uxTopReadyPriority>
    25e0:	08 95       	ret

000025e2 <vTaskPlaceOnEventList>:
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	6a 01       	movw	r12, r20
    25ec:	7b 01       	movw	r14, r22
    25ee:	60 91 91 16 	lds	r22, 0x1691	; 0x801691 <pxCurrentTCB>
    25f2:	70 91 92 16 	lds	r23, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    25f6:	62 5f       	subi	r22, 0xF2	; 242
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	c7 01       	movw	r24, r14
    2602:	b6 01       	movw	r22, r12
    2604:	c7 db       	rcall	.-2162   	; 0x1d94 <prvAddCurrentTaskToDelayedList>
    2606:	ff 90       	pop	r15
    2608:	ef 90       	pop	r14
    260a:	df 90       	pop	r13
    260c:	cf 90       	pop	r12
    260e:	08 95       	ret

00002610 <vTaskPlaceOnUnorderedEventList>:
    2610:	0f 93       	push	r16
    2612:	1f 93       	push	r17
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	fc 01       	movw	r30, r24
    261a:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    261e:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2622:	70 68       	ori	r23, 0x80	; 128
    2624:	1e 96       	adiw	r26, 0x0e	; 14
    2626:	4d 93       	st	X+, r20
    2628:	5d 93       	st	X+, r21
    262a:	6d 93       	st	X+, r22
    262c:	7c 93       	st	X, r23
    262e:	51 97       	sbiw	r26, 0x11	; 17
    2630:	a1 81       	ldd	r26, Z+1	; 0x01
    2632:	b2 81       	ldd	r27, Z+2	; 0x02
    2634:	c0 91 91 16 	lds	r28, 0x1691	; 0x801691 <pxCurrentTCB>
    2638:	d0 91 92 16 	lds	r29, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    263c:	bb 8b       	std	Y+19, r27	; 0x13
    263e:	aa 8b       	std	Y+18, r26	; 0x12
    2640:	c0 91 91 16 	lds	r28, 0x1691	; 0x801691 <pxCurrentTCB>
    2644:	d0 91 92 16 	lds	r29, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2648:	16 96       	adiw	r26, 0x06	; 6
    264a:	8d 91       	ld	r24, X+
    264c:	9c 91       	ld	r25, X
    264e:	17 97       	sbiw	r26, 0x07	; 7
    2650:	9d 8b       	std	Y+21, r25	; 0x15
    2652:	8c 8b       	std	Y+20, r24	; 0x14
    2654:	16 96       	adiw	r26, 0x06	; 6
    2656:	cd 91       	ld	r28, X+
    2658:	dc 91       	ld	r29, X
    265a:	17 97       	sbiw	r26, 0x07	; 7
    265c:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    2660:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2664:	0e 96       	adiw	r24, 0x0e	; 14
    2666:	9d 83       	std	Y+5, r25	; 0x05
    2668:	8c 83       	std	Y+4, r24	; 0x04
    266a:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    266e:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2672:	0e 96       	adiw	r24, 0x0e	; 14
    2674:	17 96       	adiw	r26, 0x07	; 7
    2676:	9c 93       	st	X, r25
    2678:	8e 93       	st	-X, r24
    267a:	16 97       	sbiw	r26, 0x06	; 6
    267c:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    2680:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2684:	59 96       	adiw	r26, 0x19	; 25
    2686:	fc 93       	st	X, r31
    2688:	ee 93       	st	-X, r30
    268a:	58 97       	sbiw	r26, 0x18	; 24
    268c:	80 81       	ld	r24, Z
    268e:	8f 5f       	subi	r24, 0xFF	; 255
    2690:	80 83       	st	Z, r24
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	c9 01       	movw	r24, r18
    2696:	b8 01       	movw	r22, r16
    2698:	7d db       	rcall	.-2310   	; 0x1d94 <prvAddCurrentTaskToDelayedList>
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	08 95       	ret

000026a4 <vTaskPlaceOnEventListRestricted>:
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	fc 01       	movw	r30, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	ba 01       	movw	r22, r20
    26ae:	a1 81       	ldd	r26, Z+1	; 0x01
    26b0:	b2 81       	ldd	r27, Z+2	; 0x02
    26b2:	c0 91 91 16 	lds	r28, 0x1691	; 0x801691 <pxCurrentTCB>
    26b6:	d0 91 92 16 	lds	r29, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    26ba:	bb 8b       	std	Y+19, r27	; 0x13
    26bc:	aa 8b       	std	Y+18, r26	; 0x12
    26be:	c0 91 91 16 	lds	r28, 0x1691	; 0x801691 <pxCurrentTCB>
    26c2:	d0 91 92 16 	lds	r29, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    26c6:	16 96       	adiw	r26, 0x06	; 6
    26c8:	4d 91       	ld	r20, X+
    26ca:	5c 91       	ld	r21, X
    26cc:	17 97       	sbiw	r26, 0x07	; 7
    26ce:	5d 8b       	std	Y+21, r21	; 0x15
    26d0:	4c 8b       	std	Y+20, r20	; 0x14
    26d2:	16 96       	adiw	r26, 0x06	; 6
    26d4:	cd 91       	ld	r28, X+
    26d6:	dc 91       	ld	r29, X
    26d8:	17 97       	sbiw	r26, 0x07	; 7
    26da:	40 91 91 16 	lds	r20, 0x1691	; 0x801691 <pxCurrentTCB>
    26de:	50 91 92 16 	lds	r21, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    26e2:	42 5f       	subi	r20, 0xF2	; 242
    26e4:	5f 4f       	sbci	r21, 0xFF	; 255
    26e6:	5d 83       	std	Y+5, r21	; 0x05
    26e8:	4c 83       	std	Y+4, r20	; 0x04
    26ea:	40 91 91 16 	lds	r20, 0x1691	; 0x801691 <pxCurrentTCB>
    26ee:	50 91 92 16 	lds	r21, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    26f2:	42 5f       	subi	r20, 0xF2	; 242
    26f4:	5f 4f       	sbci	r21, 0xFF	; 255
    26f6:	17 96       	adiw	r26, 0x07	; 7
    26f8:	5c 93       	st	X, r21
    26fa:	4e 93       	st	-X, r20
    26fc:	16 97       	sbiw	r26, 0x06	; 6
    26fe:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    2702:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2706:	59 96       	adiw	r26, 0x19	; 25
    2708:	fc 93       	st	X, r31
    270a:	ee 93       	st	-X, r30
    270c:	58 97       	sbiw	r26, 0x18	; 24
    270e:	30 81       	ld	r19, Z
    2710:	3f 5f       	subi	r19, 0xFF	; 255
    2712:	30 83       	st	Z, r19
    2714:	22 23       	and	r18, r18
    2716:	19 f0       	breq	.+6      	; 0x271e <vTaskPlaceOnEventListRestricted+0x7a>
    2718:	6f ef       	ldi	r22, 0xFF	; 255
    271a:	7f ef       	ldi	r23, 0xFF	; 255
    271c:	cb 01       	movw	r24, r22
    271e:	42 2f       	mov	r20, r18
    2720:	39 db       	rcall	.-2446   	; 0x1d94 <prvAddCurrentTaskToDelayedList>
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <xTaskRemoveFromEventList>:
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	dc 01       	movw	r26, r24
    272e:	17 96       	adiw	r26, 0x07	; 7
    2730:	ed 91       	ld	r30, X+
    2732:	fc 91       	ld	r31, X
    2734:	18 97       	sbiw	r26, 0x08	; 8
    2736:	00 84       	ldd	r0, Z+8	; 0x08
    2738:	f1 85       	ldd	r31, Z+9	; 0x09
    273a:	e0 2d       	mov	r30, r0
    273c:	a0 8d       	ldd	r26, Z+24	; 0x18
    273e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2740:	c2 89       	ldd	r28, Z+18	; 0x12
    2742:	d3 89       	ldd	r29, Z+19	; 0x13
    2744:	84 89       	ldd	r24, Z+20	; 0x14
    2746:	95 89       	ldd	r25, Z+21	; 0x15
    2748:	9f 83       	std	Y+7, r25	; 0x07
    274a:	8e 83       	std	Y+6, r24	; 0x06
    274c:	c4 89       	ldd	r28, Z+20	; 0x14
    274e:	d5 89       	ldd	r29, Z+21	; 0x15
    2750:	82 89       	ldd	r24, Z+18	; 0x12
    2752:	93 89       	ldd	r25, Z+19	; 0x13
    2754:	9d 83       	std	Y+5, r25	; 0x05
    2756:	8c 83       	std	Y+4, r24	; 0x04
    2758:	11 96       	adiw	r26, 0x01	; 1
    275a:	8d 91       	ld	r24, X+
    275c:	9c 91       	ld	r25, X
    275e:	12 97       	sbiw	r26, 0x02	; 2
    2760:	9f 01       	movw	r18, r30
    2762:	22 5f       	subi	r18, 0xF2	; 242
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	82 17       	cp	r24, r18
    2768:	93 07       	cpc	r25, r19
    276a:	31 f4       	brne	.+12     	; 0x2778 <xTaskRemoveFromEventList+0x50>
    276c:	84 89       	ldd	r24, Z+20	; 0x14
    276e:	95 89       	ldd	r25, Z+21	; 0x15
    2770:	12 96       	adiw	r26, 0x02	; 2
    2772:	9c 93       	st	X, r25
    2774:	8e 93       	st	-X, r24
    2776:	11 97       	sbiw	r26, 0x01	; 1
    2778:	11 8e       	std	Z+25, r1	; 0x19
    277a:	10 8e       	std	Z+24, r1	; 0x18
    277c:	8c 91       	ld	r24, X
    277e:	81 50       	subi	r24, 0x01	; 1
    2780:	8c 93       	st	X, r24
    2782:	80 91 d2 15 	lds	r24, 0x15D2	; 0x8015d2 <uxSchedulerSuspended>
    2786:	81 11       	cpse	r24, r1
    2788:	52 c0       	rjmp	.+164    	; 0x282e <xTaskRemoveFromEventList+0x106>
    278a:	a4 85       	ldd	r26, Z+12	; 0x0c
    278c:	b5 85       	ldd	r27, Z+13	; 0x0d
    278e:	c6 81       	ldd	r28, Z+6	; 0x06
    2790:	d7 81       	ldd	r29, Z+7	; 0x07
    2792:	80 85       	ldd	r24, Z+8	; 0x08
    2794:	91 85       	ldd	r25, Z+9	; 0x09
    2796:	9f 83       	std	Y+7, r25	; 0x07
    2798:	8e 83       	std	Y+6, r24	; 0x06
    279a:	c0 85       	ldd	r28, Z+8	; 0x08
    279c:	d1 85       	ldd	r29, Z+9	; 0x09
    279e:	86 81       	ldd	r24, Z+6	; 0x06
    27a0:	97 81       	ldd	r25, Z+7	; 0x07
    27a2:	9d 83       	std	Y+5, r25	; 0x05
    27a4:	8c 83       	std	Y+4, r24	; 0x04
    27a6:	11 96       	adiw	r26, 0x01	; 1
    27a8:	8d 91       	ld	r24, X+
    27aa:	9c 91       	ld	r25, X
    27ac:	12 97       	sbiw	r26, 0x02	; 2
    27ae:	9f 01       	movw	r18, r30
    27b0:	2e 5f       	subi	r18, 0xFE	; 254
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	82 17       	cp	r24, r18
    27b6:	93 07       	cpc	r25, r19
    27b8:	31 f4       	brne	.+12     	; 0x27c6 <xTaskRemoveFromEventList+0x9e>
    27ba:	80 85       	ldd	r24, Z+8	; 0x08
    27bc:	91 85       	ldd	r25, Z+9	; 0x09
    27be:	12 96       	adiw	r26, 0x02	; 2
    27c0:	9c 93       	st	X, r25
    27c2:	8e 93       	st	-X, r24
    27c4:	11 97       	sbiw	r26, 0x01	; 1
    27c6:	15 86       	std	Z+13, r1	; 0x0d
    27c8:	14 86       	std	Z+12, r1	; 0x0c
    27ca:	8c 91       	ld	r24, X
    27cc:	81 50       	subi	r24, 0x01	; 1
    27ce:	8c 93       	st	X, r24
    27d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27d2:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    27d6:	8a 17       	cp	r24, r26
    27d8:	10 f4       	brcc	.+4      	; 0x27de <xTaskRemoveFromEventList+0xb6>
    27da:	a0 93 e1 15 	sts	0x15E1, r26	; 0x8015e1 <uxTopReadyPriority>
    27de:	8b e0       	ldi	r24, 0x0B	; 11
    27e0:	8a 9f       	mul	r24, r26
    27e2:	d0 01       	movw	r26, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	ad 5d       	subi	r26, 0xDD	; 221
    27e8:	b9 4e       	sbci	r27, 0xE9	; 233
    27ea:	11 96       	adiw	r26, 0x01	; 1
    27ec:	0d 90       	ld	r0, X+
    27ee:	bc 91       	ld	r27, X
    27f0:	a0 2d       	mov	r26, r0
    27f2:	b7 83       	std	Z+7, r27	; 0x07
    27f4:	a6 83       	std	Z+6, r26	; 0x06
    27f6:	16 96       	adiw	r26, 0x06	; 6
    27f8:	4d 91       	ld	r20, X+
    27fa:	5c 91       	ld	r21, X
    27fc:	17 97       	sbiw	r26, 0x07	; 7
    27fe:	51 87       	std	Z+9, r21	; 0x09
    2800:	40 87       	std	Z+8, r20	; 0x08
    2802:	16 96       	adiw	r26, 0x06	; 6
    2804:	cd 91       	ld	r28, X+
    2806:	dc 91       	ld	r29, X
    2808:	17 97       	sbiw	r26, 0x07	; 7
    280a:	3d 83       	std	Y+5, r19	; 0x05
    280c:	2c 83       	std	Y+4, r18	; 0x04
    280e:	17 96       	adiw	r26, 0x07	; 7
    2810:	3c 93       	st	X, r19
    2812:	2e 93       	st	-X, r18
    2814:	16 97       	sbiw	r26, 0x06	; 6
    2816:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2818:	8a 9f       	mul	r24, r26
    281a:	d0 01       	movw	r26, r0
    281c:	11 24       	eor	r1, r1
    281e:	ad 5d       	subi	r26, 0xDD	; 221
    2820:	b9 4e       	sbci	r27, 0xE9	; 233
    2822:	b5 87       	std	Z+13, r27	; 0x0d
    2824:	a4 87       	std	Z+12, r26	; 0x0c
    2826:	8c 91       	ld	r24, X
    2828:	8f 5f       	subi	r24, 0xFF	; 255
    282a:	8c 93       	st	X, r24
    282c:	1c c0       	rjmp	.+56     	; 0x2866 <xTaskRemoveFromEventList+0x13e>
    282e:	4e ef       	ldi	r20, 0xFE	; 254
    2830:	55 e1       	ldi	r21, 0x15	; 21
    2832:	da 01       	movw	r26, r20
    2834:	11 96       	adiw	r26, 0x01	; 1
    2836:	cd 91       	ld	r28, X+
    2838:	dc 91       	ld	r29, X
    283a:	12 97       	sbiw	r26, 0x02	; 2
    283c:	d3 8b       	std	Z+19, r29	; 0x13
    283e:	c2 8b       	std	Z+18, r28	; 0x12
    2840:	8e 81       	ldd	r24, Y+6	; 0x06
    2842:	9f 81       	ldd	r25, Y+7	; 0x07
    2844:	95 8b       	std	Z+21, r25	; 0x15
    2846:	84 8b       	std	Z+20, r24	; 0x14
    2848:	8e 81       	ldd	r24, Y+6	; 0x06
    284a:	9f 81       	ldd	r25, Y+7	; 0x07
    284c:	dc 01       	movw	r26, r24
    284e:	15 96       	adiw	r26, 0x05	; 5
    2850:	3c 93       	st	X, r19
    2852:	2e 93       	st	-X, r18
    2854:	14 97       	sbiw	r26, 0x04	; 4
    2856:	3f 83       	std	Y+7, r19	; 0x07
    2858:	2e 83       	std	Y+6, r18	; 0x06
    285a:	51 8f       	std	Z+25, r21	; 0x19
    285c:	40 8f       	std	Z+24, r20	; 0x18
    285e:	da 01       	movw	r26, r20
    2860:	8c 91       	ld	r24, X
    2862:	8f 5f       	subi	r24, 0xFF	; 255
    2864:	8c 93       	st	X, r24
    2866:	92 8d       	ldd	r25, Z+26	; 0x1a
    2868:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    286c:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2870:	82 8d       	ldd	r24, Z+26	; 0x1a
    2872:	89 17       	cp	r24, r25
    2874:	20 f4       	brcc	.+8      	; 0x287e <xTaskRemoveFromEventList+0x156>
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <xYieldPending>
    287c:	01 c0       	rjmp	.+2      	; 0x2880 <xTaskRemoveFromEventList+0x158>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	08 95       	ret

00002886 <vTaskRemoveFromUnorderedEventList>:
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	dc 01       	movw	r26, r24
    288c:	70 68       	ori	r23, 0x80	; 128
    288e:	4d 93       	st	X+, r20
    2890:	5d 93       	st	X+, r21
    2892:	6d 93       	st	X+, r22
    2894:	7c 93       	st	X, r23
    2896:	13 97       	sbiw	r26, 0x03	; 3
    2898:	18 96       	adiw	r26, 0x08	; 8
    289a:	ed 91       	ld	r30, X+
    289c:	fc 91       	ld	r31, X
    289e:	19 97       	sbiw	r26, 0x09	; 9
    28a0:	1a 96       	adiw	r26, 0x0a	; 10
    28a2:	4d 91       	ld	r20, X+
    28a4:	5c 91       	ld	r21, X
    28a6:	1b 97       	sbiw	r26, 0x0b	; 11
    28a8:	14 96       	adiw	r26, 0x04	; 4
    28aa:	8d 91       	ld	r24, X+
    28ac:	9c 91       	ld	r25, X
    28ae:	15 97       	sbiw	r26, 0x05	; 5
    28b0:	16 96       	adiw	r26, 0x06	; 6
    28b2:	2d 91       	ld	r18, X+
    28b4:	3c 91       	ld	r19, X
    28b6:	17 97       	sbiw	r26, 0x07	; 7
    28b8:	ec 01       	movw	r28, r24
    28ba:	3f 83       	std	Y+7, r19	; 0x07
    28bc:	2e 83       	std	Y+6, r18	; 0x06
    28be:	16 96       	adiw	r26, 0x06	; 6
    28c0:	8d 91       	ld	r24, X+
    28c2:	9c 91       	ld	r25, X
    28c4:	17 97       	sbiw	r26, 0x07	; 7
    28c6:	14 96       	adiw	r26, 0x04	; 4
    28c8:	2d 91       	ld	r18, X+
    28ca:	3c 91       	ld	r19, X
    28cc:	15 97       	sbiw	r26, 0x05	; 5
    28ce:	ec 01       	movw	r28, r24
    28d0:	3d 83       	std	Y+5, r19	; 0x05
    28d2:	2c 83       	std	Y+4, r18	; 0x04
    28d4:	ea 01       	movw	r28, r20
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	a8 17       	cp	r26, r24
    28dc:	b9 07       	cpc	r27, r25
    28de:	31 f4       	brne	.+12     	; 0x28ec <vTaskRemoveFromUnorderedEventList+0x66>
    28e0:	16 96       	adiw	r26, 0x06	; 6
    28e2:	8d 91       	ld	r24, X+
    28e4:	9c 91       	ld	r25, X
    28e6:	17 97       	sbiw	r26, 0x07	; 7
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	1b 96       	adiw	r26, 0x0b	; 11
    28ee:	1c 92       	st	X, r1
    28f0:	1e 92       	st	-X, r1
    28f2:	1a 97       	sbiw	r26, 0x0a	; 10
    28f4:	da 01       	movw	r26, r20
    28f6:	8c 91       	ld	r24, X
    28f8:	81 50       	subi	r24, 0x01	; 1
    28fa:	8c 93       	st	X, r24
    28fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    28fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    2900:	c6 81       	ldd	r28, Z+6	; 0x06
    2902:	d7 81       	ldd	r29, Z+7	; 0x07
    2904:	80 85       	ldd	r24, Z+8	; 0x08
    2906:	91 85       	ldd	r25, Z+9	; 0x09
    2908:	9f 83       	std	Y+7, r25	; 0x07
    290a:	8e 83       	std	Y+6, r24	; 0x06
    290c:	c0 85       	ldd	r28, Z+8	; 0x08
    290e:	d1 85       	ldd	r29, Z+9	; 0x09
    2910:	86 81       	ldd	r24, Z+6	; 0x06
    2912:	97 81       	ldd	r25, Z+7	; 0x07
    2914:	9d 83       	std	Y+5, r25	; 0x05
    2916:	8c 83       	std	Y+4, r24	; 0x04
    2918:	11 96       	adiw	r26, 0x01	; 1
    291a:	8d 91       	ld	r24, X+
    291c:	9c 91       	ld	r25, X
    291e:	12 97       	sbiw	r26, 0x02	; 2
    2920:	9f 01       	movw	r18, r30
    2922:	2e 5f       	subi	r18, 0xFE	; 254
    2924:	3f 4f       	sbci	r19, 0xFF	; 255
    2926:	82 17       	cp	r24, r18
    2928:	93 07       	cpc	r25, r19
    292a:	31 f4       	brne	.+12     	; 0x2938 <vTaskRemoveFromUnorderedEventList+0xb2>
    292c:	80 85       	ldd	r24, Z+8	; 0x08
    292e:	91 85       	ldd	r25, Z+9	; 0x09
    2930:	12 96       	adiw	r26, 0x02	; 2
    2932:	9c 93       	st	X, r25
    2934:	8e 93       	st	-X, r24
    2936:	11 97       	sbiw	r26, 0x01	; 1
    2938:	15 86       	std	Z+13, r1	; 0x0d
    293a:	14 86       	std	Z+12, r1	; 0x0c
    293c:	8c 91       	ld	r24, X
    293e:	81 50       	subi	r24, 0x01	; 1
    2940:	8c 93       	st	X, r24
    2942:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2944:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    2948:	8a 17       	cp	r24, r26
    294a:	10 f4       	brcc	.+4      	; 0x2950 <vTaskRemoveFromUnorderedEventList+0xca>
    294c:	a0 93 e1 15 	sts	0x15E1, r26	; 0x8015e1 <uxTopReadyPriority>
    2950:	8b e0       	ldi	r24, 0x0B	; 11
    2952:	8a 9f       	mul	r24, r26
    2954:	d0 01       	movw	r26, r0
    2956:	11 24       	eor	r1, r1
    2958:	ad 5d       	subi	r26, 0xDD	; 221
    295a:	b9 4e       	sbci	r27, 0xE9	; 233
    295c:	11 96       	adiw	r26, 0x01	; 1
    295e:	0d 90       	ld	r0, X+
    2960:	bc 91       	ld	r27, X
    2962:	a0 2d       	mov	r26, r0
    2964:	b7 83       	std	Z+7, r27	; 0x07
    2966:	a6 83       	std	Z+6, r26	; 0x06
    2968:	16 96       	adiw	r26, 0x06	; 6
    296a:	4d 91       	ld	r20, X+
    296c:	5c 91       	ld	r21, X
    296e:	17 97       	sbiw	r26, 0x07	; 7
    2970:	51 87       	std	Z+9, r21	; 0x09
    2972:	40 87       	std	Z+8, r20	; 0x08
    2974:	16 96       	adiw	r26, 0x06	; 6
    2976:	cd 91       	ld	r28, X+
    2978:	dc 91       	ld	r29, X
    297a:	17 97       	sbiw	r26, 0x07	; 7
    297c:	3d 83       	std	Y+5, r19	; 0x05
    297e:	2c 83       	std	Y+4, r18	; 0x04
    2980:	17 96       	adiw	r26, 0x07	; 7
    2982:	3c 93       	st	X, r19
    2984:	2e 93       	st	-X, r18
    2986:	16 97       	sbiw	r26, 0x06	; 6
    2988:	a2 8d       	ldd	r26, Z+26	; 0x1a
    298a:	8a 9f       	mul	r24, r26
    298c:	d0 01       	movw	r26, r0
    298e:	11 24       	eor	r1, r1
    2990:	ad 5d       	subi	r26, 0xDD	; 221
    2992:	b9 4e       	sbci	r27, 0xE9	; 233
    2994:	b5 87       	std	Z+13, r27	; 0x0d
    2996:	a4 87       	std	Z+12, r26	; 0x0c
    2998:	8c 91       	ld	r24, X
    299a:	8f 5f       	subi	r24, 0xFF	; 255
    299c:	8c 93       	st	X, r24
    299e:	92 8d       	ldd	r25, Z+26	; 0x1a
    29a0:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    29a4:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    29a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    29aa:	89 17       	cp	r24, r25
    29ac:	18 f4       	brcc	.+6      	; 0x29b4 <vTaskRemoveFromUnorderedEventList+0x12e>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <xYieldPending>
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret

000029ba <vTaskSetTimeOutState>:
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	0f 92       	push	r0
    29c0:	20 91 da 15 	lds	r18, 0x15DA	; 0x8015da <xNumOfOverflows>
    29c4:	fc 01       	movw	r30, r24
    29c6:	20 83       	st	Z, r18
    29c8:	40 91 e2 15 	lds	r20, 0x15E2	; 0x8015e2 <xTickCount>
    29cc:	50 91 e3 15 	lds	r21, 0x15E3	; 0x8015e3 <xTickCount+0x1>
    29d0:	60 91 e4 15 	lds	r22, 0x15E4	; 0x8015e4 <xTickCount+0x2>
    29d4:	70 91 e5 15 	lds	r23, 0x15E5	; 0x8015e5 <xTickCount+0x3>
    29d8:	41 83       	std	Z+1, r20	; 0x01
    29da:	52 83       	std	Z+2, r21	; 0x02
    29dc:	63 83       	std	Z+3, r22	; 0x03
    29de:	74 83       	std	Z+4, r23	; 0x04
    29e0:	0f 90       	pop	r0
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	08 95       	ret

000029e6 <vTaskInternalSetTimeOutState>:
    29e6:	20 91 da 15 	lds	r18, 0x15DA	; 0x8015da <xNumOfOverflows>
    29ea:	fc 01       	movw	r30, r24
    29ec:	20 83       	st	Z, r18
    29ee:	40 91 e2 15 	lds	r20, 0x15E2	; 0x8015e2 <xTickCount>
    29f2:	50 91 e3 15 	lds	r21, 0x15E3	; 0x8015e3 <xTickCount+0x1>
    29f6:	60 91 e4 15 	lds	r22, 0x15E4	; 0x8015e4 <xTickCount+0x2>
    29fa:	70 91 e5 15 	lds	r23, 0x15E5	; 0x8015e5 <xTickCount+0x3>
    29fe:	41 83       	std	Z+1, r20	; 0x01
    2a00:	52 83       	std	Z+2, r21	; 0x02
    2a02:	63 83       	std	Z+3, r22	; 0x03
    2a04:	74 83       	std	Z+4, r23	; 0x04
    2a06:	08 95       	ret

00002a08 <xTaskCheckForTimeOut>:
    2a08:	8f 92       	push	r8
    2a0a:	9f 92       	push	r9
    2a0c:	af 92       	push	r10
    2a0e:	bf 92       	push	r11
    2a10:	cf 92       	push	r12
    2a12:	df 92       	push	r13
    2a14:	ef 92       	push	r14
    2a16:	ff 92       	push	r15
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	fb 01       	movw	r30, r22
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	0f 92       	push	r0
    2a28:	c0 90 e2 15 	lds	r12, 0x15E2	; 0x8015e2 <xTickCount>
    2a2c:	d0 90 e3 15 	lds	r13, 0x15E3	; 0x8015e3 <xTickCount+0x1>
    2a30:	e0 90 e4 15 	lds	r14, 0x15E4	; 0x8015e4 <xTickCount+0x2>
    2a34:	f0 90 e5 15 	lds	r15, 0x15E5	; 0x8015e5 <xTickCount+0x3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	11 96       	adiw	r26, 0x01	; 1
    2a3c:	0d 91       	ld	r16, X+
    2a3e:	1d 91       	ld	r17, X+
    2a40:	2d 91       	ld	r18, X+
    2a42:	3c 91       	ld	r19, X
    2a44:	14 97       	sbiw	r26, 0x04	; 4
    2a46:	46 01       	movw	r8, r12
    2a48:	57 01       	movw	r10, r14
    2a4a:	80 1a       	sub	r8, r16
    2a4c:	91 0a       	sbc	r9, r17
    2a4e:	a2 0a       	sbc	r10, r18
    2a50:	b3 0a       	sbc	r11, r19
    2a52:	40 81       	ld	r20, Z
    2a54:	51 81       	ldd	r21, Z+1	; 0x01
    2a56:	62 81       	ldd	r22, Z+2	; 0x02
    2a58:	73 81       	ldd	r23, Z+3	; 0x03
    2a5a:	4f 3f       	cpi	r20, 0xFF	; 255
    2a5c:	bf ef       	ldi	r27, 0xFF	; 255
    2a5e:	5b 07       	cpc	r21, r27
    2a60:	6b 07       	cpc	r22, r27
    2a62:	7b 07       	cpc	r23, r27
    2a64:	39 f1       	breq	.+78     	; 0x2ab4 <xTaskCheckForTimeOut+0xac>
    2a66:	ec 01       	movw	r28, r24
    2a68:	b8 81       	ld	r27, Y
    2a6a:	a0 91 da 15 	lds	r26, 0x15DA	; 0x8015da <xNumOfOverflows>
    2a6e:	ba 17       	cp	r27, r26
    2a70:	59 f0       	breq	.+22     	; 0x2a88 <xTaskCheckForTimeOut+0x80>
    2a72:	c0 16       	cp	r12, r16
    2a74:	d1 06       	cpc	r13, r17
    2a76:	e2 06       	cpc	r14, r18
    2a78:	f3 06       	cpc	r15, r19
    2a7a:	30 f0       	brcs	.+12     	; 0x2a88 <xTaskCheckForTimeOut+0x80>
    2a7c:	10 82       	st	Z, r1
    2a7e:	11 82       	std	Z+1, r1	; 0x01
    2a80:	12 82       	std	Z+2, r1	; 0x02
    2a82:	13 82       	std	Z+3, r1	; 0x03
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	17 c0       	rjmp	.+46     	; 0x2ab6 <xTaskCheckForTimeOut+0xae>
    2a88:	84 16       	cp	r8, r20
    2a8a:	95 06       	cpc	r9, r21
    2a8c:	a6 06       	cpc	r10, r22
    2a8e:	b7 06       	cpc	r11, r23
    2a90:	58 f4       	brcc	.+22     	; 0x2aa8 <xTaskCheckForTimeOut+0xa0>
    2a92:	48 19       	sub	r20, r8
    2a94:	59 09       	sbc	r21, r9
    2a96:	6a 09       	sbc	r22, r10
    2a98:	7b 09       	sbc	r23, r11
    2a9a:	40 83       	st	Z, r20
    2a9c:	51 83       	std	Z+1, r21	; 0x01
    2a9e:	62 83       	std	Z+2, r22	; 0x02
    2aa0:	73 83       	std	Z+3, r23	; 0x03
    2aa2:	a1 df       	rcall	.-190    	; 0x29e6 <vTaskInternalSetTimeOutState>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	07 c0       	rjmp	.+14     	; 0x2ab6 <xTaskCheckForTimeOut+0xae>
    2aa8:	10 82       	st	Z, r1
    2aaa:	11 82       	std	Z+1, r1	; 0x01
    2aac:	12 82       	std	Z+2, r1	; 0x02
    2aae:	13 82       	std	Z+3, r1	; 0x03
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <xTaskCheckForTimeOut+0xae>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	1f 91       	pop	r17
    2ac0:	0f 91       	pop	r16
    2ac2:	ff 90       	pop	r15
    2ac4:	ef 90       	pop	r14
    2ac6:	df 90       	pop	r13
    2ac8:	cf 90       	pop	r12
    2aca:	bf 90       	pop	r11
    2acc:	af 90       	pop	r10
    2ace:	9f 90       	pop	r9
    2ad0:	8f 90       	pop	r8
    2ad2:	08 95       	ret

00002ad4 <vTaskMissedYield>:
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <xYieldPending>
    2ada:	08 95       	ret

00002adc <xTaskGetCurrentTaskHandle>:
    2adc:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    2ae0:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2ae4:	08 95       	ret

00002ae6 <xTaskGetSchedulerState>:
    2ae6:	80 91 e0 15 	lds	r24, 0x15E0	; 0x8015e0 <xSchedulerRunning>
    2aea:	88 23       	and	r24, r24
    2aec:	31 f0       	breq	.+12     	; 0x2afa <xTaskGetSchedulerState+0x14>
    2aee:	80 91 d2 15 	lds	r24, 0x15D2	; 0x8015d2 <uxSchedulerSuspended>
    2af2:	81 11       	cpse	r24, r1
    2af4:	04 c0       	rjmp	.+8      	; 0x2afe <xTaskGetSchedulerState+0x18>
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	08 95       	ret
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	08 95       	ret
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	08 95       	ret

00002b02 <xTaskPriorityInherit>:
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	89 2b       	or	r24, r25
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <xTaskPriorityInherit+0x10>
    2b10:	77 c0       	rjmp	.+238    	; 0x2c00 <xTaskPriorityInherit+0xfe>
    2b12:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b14:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    2b18:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2b1c:	5a 96       	adiw	r26, 0x1a	; 26
    2b1e:	9c 91       	ld	r25, X
    2b20:	89 17       	cp	r24, r25
    2b22:	08 f0       	brcs	.+2      	; 0x2b26 <xTaskPriorityInherit+0x24>
    2b24:	63 c0       	rjmp	.+198    	; 0x2bec <xTaskPriorityInherit+0xea>
    2b26:	46 85       	ldd	r20, Z+14	; 0x0e
    2b28:	57 85       	ldd	r21, Z+15	; 0x0f
    2b2a:	60 89       	ldd	r22, Z+16	; 0x10
    2b2c:	71 89       	ldd	r23, Z+17	; 0x11
    2b2e:	77 23       	and	r23, r23
    2b30:	94 f0       	brlt	.+36     	; 0x2b56 <xTaskPriorityInherit+0x54>
    2b32:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    2b36:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2b3a:	5a 96       	adiw	r26, 0x1a	; 26
    2b3c:	9c 91       	ld	r25, X
    2b3e:	4a e0       	ldi	r20, 0x0A	; 10
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	49 1b       	sub	r20, r25
    2b48:	51 09       	sbc	r21, r1
    2b4a:	61 09       	sbc	r22, r1
    2b4c:	71 09       	sbc	r23, r1
    2b4e:	46 87       	std	Z+14, r20	; 0x0e
    2b50:	57 87       	std	Z+15, r21	; 0x0f
    2b52:	60 8b       	std	Z+16, r22	; 0x10
    2b54:	71 8b       	std	Z+17, r23	; 0x11
    2b56:	24 85       	ldd	r18, Z+12	; 0x0c
    2b58:	35 85       	ldd	r19, Z+13	; 0x0d
    2b5a:	4b e0       	ldi	r20, 0x0B	; 11
    2b5c:	84 9f       	mul	r24, r20
    2b5e:	c0 01       	movw	r24, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	8d 5d       	subi	r24, 0xDD	; 221
    2b64:	99 4e       	sbci	r25, 0xE9	; 233
    2b66:	28 17       	cp	r18, r24
    2b68:	39 07       	cpc	r19, r25
    2b6a:	b9 f5       	brne	.+110    	; 0x2bda <xTaskPriorityInherit+0xd8>
    2b6c:	ef 01       	movw	r28, r30
    2b6e:	8f 01       	movw	r16, r30
    2b70:	0e 5f       	subi	r16, 0xFE	; 254
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	c8 01       	movw	r24, r16
    2b76:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    2b7a:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2b7e:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2b82:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2b84:	ea 8f       	std	Y+26, r30	; 0x1a
    2b86:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    2b8a:	8e 17       	cp	r24, r30
    2b8c:	10 f4       	brcc	.+4      	; 0x2b92 <xTaskPriorityInherit+0x90>
    2b8e:	e0 93 e1 15 	sts	0x15E1, r30	; 0x8015e1 <uxTopReadyPriority>
    2b92:	8b e0       	ldi	r24, 0x0B	; 11
    2b94:	8e 9f       	mul	r24, r30
    2b96:	f0 01       	movw	r30, r0
    2b98:	11 24       	eor	r1, r1
    2b9a:	ed 5d       	subi	r30, 0xDD	; 221
    2b9c:	f9 4e       	sbci	r31, 0xE9	; 233
    2b9e:	01 80       	ldd	r0, Z+1	; 0x01
    2ba0:	f2 81       	ldd	r31, Z+2	; 0x02
    2ba2:	e0 2d       	mov	r30, r0
    2ba4:	ff 83       	std	Y+7, r31	; 0x07
    2ba6:	ee 83       	std	Y+6, r30	; 0x06
    2ba8:	26 81       	ldd	r18, Z+6	; 0x06
    2baa:	37 81       	ldd	r19, Z+7	; 0x07
    2bac:	39 87       	std	Y+9, r19	; 0x09
    2bae:	28 87       	std	Y+8, r18	; 0x08
    2bb0:	a6 81       	ldd	r26, Z+6	; 0x06
    2bb2:	b7 81       	ldd	r27, Z+7	; 0x07
    2bb4:	15 96       	adiw	r26, 0x05	; 5
    2bb6:	1c 93       	st	X, r17
    2bb8:	0e 93       	st	-X, r16
    2bba:	14 97       	sbiw	r26, 0x04	; 4
    2bbc:	17 83       	std	Z+7, r17	; 0x07
    2bbe:	06 83       	std	Z+6, r16	; 0x06
    2bc0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2bc2:	8e 9f       	mul	r24, r30
    2bc4:	f0 01       	movw	r30, r0
    2bc6:	11 24       	eor	r1, r1
    2bc8:	ed 5d       	subi	r30, 0xDD	; 221
    2bca:	f9 4e       	sbci	r31, 0xE9	; 233
    2bcc:	fd 87       	std	Y+13, r31	; 0x0d
    2bce:	ec 87       	std	Y+12, r30	; 0x0c
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8f 5f       	subi	r24, 0xFF	; 255
    2bd4:	80 83       	st	Z, r24
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	16 c0       	rjmp	.+44     	; 0x2c06 <xTaskPriorityInherit+0x104>
    2bda:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    2bde:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2be2:	5a 96       	adiw	r26, 0x1a	; 26
    2be4:	8c 91       	ld	r24, X
    2be6:	82 8f       	std	Z+26, r24	; 0x1a
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	0d c0       	rjmp	.+26     	; 0x2c06 <xTaskPriorityInherit+0x104>
    2bec:	95 a5       	ldd	r25, Z+45	; 0x2d
    2bee:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2bf2:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2bf6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bf8:	98 17       	cp	r25, r24
    2bfa:	20 f0       	brcs	.+8      	; 0x2c04 <xTaskPriorityInherit+0x102>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <xTaskPriorityInherit+0x104>
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	01 c0       	rjmp	.+2      	; 0x2c06 <xTaskPriorityInherit+0x104>
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	08 95       	ret

00002c10 <xTaskPriorityDisinherit>:
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	fc 01       	movw	r30, r24
    2c1a:	89 2b       	or	r24, r25
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <xTaskPriorityDisinherit+0x10>
    2c1e:	49 c0       	rjmp	.+146    	; 0x2cb2 <xTaskPriorityDisinherit+0xa2>
    2c20:	86 a5       	ldd	r24, Z+46	; 0x2e
    2c22:	81 50       	subi	r24, 0x01	; 1
    2c24:	86 a7       	std	Z+46, r24	; 0x2e
    2c26:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c28:	95 a5       	ldd	r25, Z+45	; 0x2d
    2c2a:	29 17       	cp	r18, r25
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <xTaskPriorityDisinherit+0x20>
    2c2e:	43 c0       	rjmp	.+134    	; 0x2cb6 <xTaskPriorityDisinherit+0xa6>
    2c30:	81 11       	cpse	r24, r1
    2c32:	43 c0       	rjmp	.+134    	; 0x2cba <xTaskPriorityDisinherit+0xaa>
    2c34:	ef 01       	movw	r28, r30
    2c36:	8f 01       	movw	r16, r30
    2c38:	0e 5f       	subi	r16, 0xFE	; 254
    2c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3c:	c8 01       	movw	r24, r16
    2c3e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    2c42:	ed a5       	ldd	r30, Y+45	; 0x2d
    2c44:	ea 8f       	std	Y+26, r30	; 0x1a
    2c46:	8a e0       	ldi	r24, 0x0A	; 10
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	a0 e0       	ldi	r26, 0x00	; 0
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	8e 1b       	sub	r24, r30
    2c50:	91 09       	sbc	r25, r1
    2c52:	a1 09       	sbc	r26, r1
    2c54:	b1 09       	sbc	r27, r1
    2c56:	8e 87       	std	Y+14, r24	; 0x0e
    2c58:	9f 87       	std	Y+15, r25	; 0x0f
    2c5a:	a8 8b       	std	Y+16, r26	; 0x10
    2c5c:	b9 8b       	std	Y+17, r27	; 0x11
    2c5e:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    2c62:	8e 17       	cp	r24, r30
    2c64:	10 f4       	brcc	.+4      	; 0x2c6a <xTaskPriorityDisinherit+0x5a>
    2c66:	e0 93 e1 15 	sts	0x15E1, r30	; 0x8015e1 <uxTopReadyPriority>
    2c6a:	8b e0       	ldi	r24, 0x0B	; 11
    2c6c:	8e 9f       	mul	r24, r30
    2c6e:	f0 01       	movw	r30, r0
    2c70:	11 24       	eor	r1, r1
    2c72:	ed 5d       	subi	r30, 0xDD	; 221
    2c74:	f9 4e       	sbci	r31, 0xE9	; 233
    2c76:	01 80       	ldd	r0, Z+1	; 0x01
    2c78:	f2 81       	ldd	r31, Z+2	; 0x02
    2c7a:	e0 2d       	mov	r30, r0
    2c7c:	ff 83       	std	Y+7, r31	; 0x07
    2c7e:	ee 83       	std	Y+6, r30	; 0x06
    2c80:	26 81       	ldd	r18, Z+6	; 0x06
    2c82:	37 81       	ldd	r19, Z+7	; 0x07
    2c84:	39 87       	std	Y+9, r19	; 0x09
    2c86:	28 87       	std	Y+8, r18	; 0x08
    2c88:	a6 81       	ldd	r26, Z+6	; 0x06
    2c8a:	b7 81       	ldd	r27, Z+7	; 0x07
    2c8c:	15 96       	adiw	r26, 0x05	; 5
    2c8e:	1c 93       	st	X, r17
    2c90:	0e 93       	st	-X, r16
    2c92:	14 97       	sbiw	r26, 0x04	; 4
    2c94:	17 83       	std	Z+7, r17	; 0x07
    2c96:	06 83       	std	Z+6, r16	; 0x06
    2c98:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c9a:	8e 9f       	mul	r24, r30
    2c9c:	f0 01       	movw	r30, r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	ed 5d       	subi	r30, 0xDD	; 221
    2ca2:	f9 4e       	sbci	r31, 0xE9	; 233
    2ca4:	fd 87       	std	Y+13, r31	; 0x0d
    2ca6:	ec 87       	std	Y+12, r30	; 0x0c
    2ca8:	80 81       	ld	r24, Z
    2caa:	8f 5f       	subi	r24, 0xFF	; 255
    2cac:	80 83       	st	Z, r24
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	05 c0       	rjmp	.+10     	; 0x2cbc <xTaskPriorityDisinherit+0xac>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <xTaskPriorityDisinherit+0xac>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	01 c0       	rjmp	.+2      	; 0x2cbc <xTaskPriorityDisinherit+0xac>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	08 95       	ret

00002cc6 <vTaskPriorityDisinheritAfterTimeout>:
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	fc 01       	movw	r30, r24
    2cd0:	89 2b       	or	r24, r25
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2cd4:	5a c0       	rjmp	.+180    	; 0x2d8a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cd6:	85 a5       	ldd	r24, Z+45	; 0x2d
    2cd8:	86 17       	cp	r24, r22
    2cda:	08 f4       	brcc	.+2      	; 0x2cde <vTaskPriorityDisinheritAfterTimeout+0x18>
    2cdc:	86 2f       	mov	r24, r22
    2cde:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ce0:	89 17       	cp	r24, r25
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2ce4:	52 c0       	rjmp	.+164    	; 0x2d8a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ce6:	26 a5       	ldd	r18, Z+46	; 0x2e
    2ce8:	21 30       	cpi	r18, 0x01	; 1
    2cea:	09 f0       	breq	.+2      	; 0x2cee <vTaskPriorityDisinheritAfterTimeout+0x28>
    2cec:	4e c0       	rjmp	.+156    	; 0x2d8a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cee:	82 8f       	std	Z+26, r24	; 0x1a
    2cf0:	46 85       	ldd	r20, Z+14	; 0x0e
    2cf2:	57 85       	ldd	r21, Z+15	; 0x0f
    2cf4:	60 89       	ldd	r22, Z+16	; 0x10
    2cf6:	71 89       	ldd	r23, Z+17	; 0x11
    2cf8:	77 23       	and	r23, r23
    2cfa:	64 f0       	brlt	.+24     	; 0x2d14 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2cfc:	4a e0       	ldi	r20, 0x0A	; 10
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	60 e0       	ldi	r22, 0x00	; 0
    2d02:	70 e0       	ldi	r23, 0x00	; 0
    2d04:	48 1b       	sub	r20, r24
    2d06:	51 09       	sbc	r21, r1
    2d08:	61 09       	sbc	r22, r1
    2d0a:	71 09       	sbc	r23, r1
    2d0c:	46 87       	std	Z+14, r20	; 0x0e
    2d0e:	57 87       	std	Z+15, r21	; 0x0f
    2d10:	60 8b       	std	Z+16, r22	; 0x10
    2d12:	71 8b       	std	Z+17, r23	; 0x11
    2d14:	24 85       	ldd	r18, Z+12	; 0x0c
    2d16:	35 85       	ldd	r19, Z+13	; 0x0d
    2d18:	4b e0       	ldi	r20, 0x0B	; 11
    2d1a:	94 9f       	mul	r25, r20
    2d1c:	c0 01       	movw	r24, r0
    2d1e:	11 24       	eor	r1, r1
    2d20:	8d 5d       	subi	r24, 0xDD	; 221
    2d22:	99 4e       	sbci	r25, 0xE9	; 233
    2d24:	28 17       	cp	r18, r24
    2d26:	39 07       	cpc	r19, r25
    2d28:	81 f5       	brne	.+96     	; 0x2d8a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2d2a:	ef 01       	movw	r28, r30
    2d2c:	8f 01       	movw	r16, r30
    2d2e:	0e 5f       	subi	r16, 0xFE	; 254
    2d30:	1f 4f       	sbci	r17, 0xFF	; 255
    2d32:	c8 01       	movw	r24, r16
    2d34:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    2d38:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d3a:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    2d3e:	8e 17       	cp	r24, r30
    2d40:	10 f4       	brcc	.+4      	; 0x2d46 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2d42:	e0 93 e1 15 	sts	0x15E1, r30	; 0x8015e1 <uxTopReadyPriority>
    2d46:	8b e0       	ldi	r24, 0x0B	; 11
    2d48:	8e 9f       	mul	r24, r30
    2d4a:	f0 01       	movw	r30, r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	ed 5d       	subi	r30, 0xDD	; 221
    2d50:	f9 4e       	sbci	r31, 0xE9	; 233
    2d52:	01 80       	ldd	r0, Z+1	; 0x01
    2d54:	f2 81       	ldd	r31, Z+2	; 0x02
    2d56:	e0 2d       	mov	r30, r0
    2d58:	ff 83       	std	Y+7, r31	; 0x07
    2d5a:	ee 83       	std	Y+6, r30	; 0x06
    2d5c:	26 81       	ldd	r18, Z+6	; 0x06
    2d5e:	37 81       	ldd	r19, Z+7	; 0x07
    2d60:	39 87       	std	Y+9, r19	; 0x09
    2d62:	28 87       	std	Y+8, r18	; 0x08
    2d64:	a6 81       	ldd	r26, Z+6	; 0x06
    2d66:	b7 81       	ldd	r27, Z+7	; 0x07
    2d68:	15 96       	adiw	r26, 0x05	; 5
    2d6a:	1c 93       	st	X, r17
    2d6c:	0e 93       	st	-X, r16
    2d6e:	14 97       	sbiw	r26, 0x04	; 4
    2d70:	17 83       	std	Z+7, r17	; 0x07
    2d72:	06 83       	std	Z+6, r16	; 0x06
    2d74:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d76:	8e 9f       	mul	r24, r30
    2d78:	f0 01       	movw	r30, r0
    2d7a:	11 24       	eor	r1, r1
    2d7c:	ed 5d       	subi	r30, 0xDD	; 221
    2d7e:	f9 4e       	sbci	r31, 0xE9	; 233
    2d80:	fd 87       	std	Y+13, r31	; 0x0d
    2d82:	ec 87       	std	Y+12, r30	; 0x0c
    2d84:	80 81       	ld	r24, Z
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	80 83       	st	Z, r24
    2d8a:	df 91       	pop	r29
    2d8c:	cf 91       	pop	r28
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	08 95       	ret

00002d94 <uxTaskResetEventItemValue>:
    2d94:	cf 92       	push	r12
    2d96:	df 92       	push	r13
    2d98:	ef 92       	push	r14
    2d9a:	ff 92       	push	r15
    2d9c:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2da0:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2da4:	66 85       	ldd	r22, Z+14	; 0x0e
    2da6:	77 85       	ldd	r23, Z+15	; 0x0f
    2da8:	80 89       	ldd	r24, Z+16	; 0x10
    2daa:	91 89       	ldd	r25, Z+17	; 0x11
    2dac:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2db0:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2db4:	a0 91 91 16 	lds	r26, 0x1691	; 0x801691 <pxCurrentTCB>
    2db8:	b0 91 92 16 	lds	r27, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2dbc:	5a 96       	adiw	r26, 0x1a	; 26
    2dbe:	2c 91       	ld	r18, X
    2dc0:	0f 2e       	mov	r0, r31
    2dc2:	fa e0       	ldi	r31, 0x0A	; 10
    2dc4:	cf 2e       	mov	r12, r31
    2dc6:	d1 2c       	mov	r13, r1
    2dc8:	e1 2c       	mov	r14, r1
    2dca:	f1 2c       	mov	r15, r1
    2dcc:	f0 2d       	mov	r31, r0
    2dce:	c2 1a       	sub	r12, r18
    2dd0:	d1 08       	sbc	r13, r1
    2dd2:	e1 08       	sbc	r14, r1
    2dd4:	f1 08       	sbc	r15, r1
    2dd6:	c6 86       	std	Z+14, r12	; 0x0e
    2dd8:	d7 86       	std	Z+15, r13	; 0x0f
    2dda:	e0 8a       	std	Z+16, r14	; 0x10
    2ddc:	f1 8a       	std	Z+17, r15	; 0x11
    2dde:	ff 90       	pop	r15
    2de0:	ef 90       	pop	r14
    2de2:	df 90       	pop	r13
    2de4:	cf 90       	pop	r12
    2de6:	08 95       	ret

00002de8 <pvTaskIncrementMutexHeldCount>:
    2de8:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    2dec:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2df0:	89 2b       	or	r24, r25
    2df2:	39 f0       	breq	.+14     	; 0x2e02 <pvTaskIncrementMutexHeldCount+0x1a>
    2df4:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2df8:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2dfc:	86 a5       	ldd	r24, Z+46	; 0x2e
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	86 a7       	std	Z+46, r24	; 0x2e
    2e02:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    2e06:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2e0a:	08 95       	ret

00002e0c <xTaskGenericNotifyWait>:
    2e0c:	4f 92       	push	r4
    2e0e:	5f 92       	push	r5
    2e10:	6f 92       	push	r6
    2e12:	7f 92       	push	r7
    2e14:	af 92       	push	r10
    2e16:	bf 92       	push	r11
    2e18:	cf 92       	push	r12
    2e1a:	df 92       	push	r13
    2e1c:	ef 92       	push	r14
    2e1e:	ff 92       	push	r15
    2e20:	0f 93       	push	r16
    2e22:	1f 93       	push	r17
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	28 01       	movw	r4, r16
    2e2a:	39 01       	movw	r6, r18
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	0f 92       	push	r0
    2e32:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2e36:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2e3a:	c8 2f       	mov	r28, r24
    2e3c:	d0 e0       	ldi	r29, 0x00	; 0
    2e3e:	ec 0f       	add	r30, r28
    2e40:	fd 1f       	adc	r31, r29
    2e42:	83 a9       	ldd	r24, Z+51	; 0x33
    2e44:	82 30       	cpi	r24, 0x02	; 2
    2e46:	79 f1       	breq	.+94     	; 0x2ea6 <xTaskGenericNotifyWait+0x9a>
    2e48:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2e4c:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2e50:	ce 01       	movw	r24, r28
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	e8 0f       	add	r30, r24
    2e5c:	f9 1f       	adc	r31, r25
    2e5e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e60:	90 a9       	ldd	r25, Z+48	; 0x30
    2e62:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e64:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e66:	40 95       	com	r20
    2e68:	50 95       	com	r21
    2e6a:	60 95       	com	r22
    2e6c:	70 95       	com	r23
    2e6e:	48 23       	and	r20, r24
    2e70:	59 23       	and	r21, r25
    2e72:	6a 23       	and	r22, r26
    2e74:	7b 23       	and	r23, r27
    2e76:	47 a7       	std	Z+47, r20	; 0x2f
    2e78:	50 ab       	std	Z+48, r21	; 0x30
    2e7a:	61 ab       	std	Z+49, r22	; 0x31
    2e7c:	72 ab       	std	Z+50, r23	; 0x32
    2e7e:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2e82:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2e86:	ec 0f       	add	r30, r28
    2e88:	fd 1f       	adc	r31, r29
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	83 ab       	std	Z+51, r24	; 0x33
    2e8e:	a1 14       	cp	r10, r1
    2e90:	b1 04       	cpc	r11, r1
    2e92:	c1 04       	cpc	r12, r1
    2e94:	d1 04       	cpc	r13, r1
    2e96:	39 f0       	breq	.+14     	; 0x2ea6 <xTaskGenericNotifyWait+0x9a>
    2e98:	41 e0       	ldi	r20, 0x01	; 1
    2e9a:	c6 01       	movw	r24, r12
    2e9c:	b5 01       	movw	r22, r10
    2e9e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <prvAddCurrentTaskToDelayedList>
    2ea2:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    2ea6:	0f 90       	pop	r0
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	0f 92       	push	r0
    2eb0:	e1 14       	cp	r14, r1
    2eb2:	f1 04       	cpc	r15, r1
    2eb4:	a1 f0       	breq	.+40     	; 0x2ede <xTaskGenericNotifyWait+0xd2>
    2eb6:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2eba:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2ebe:	ce 01       	movw	r24, r28
    2ec0:	88 0f       	add	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	e8 0f       	add	r30, r24
    2eca:	f9 1f       	adc	r31, r25
    2ecc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ece:	90 a9       	ldd	r25, Z+48	; 0x30
    2ed0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2ed2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2ed4:	f7 01       	movw	r30, r14
    2ed6:	80 83       	st	Z, r24
    2ed8:	91 83       	std	Z+1, r25	; 0x01
    2eda:	a2 83       	std	Z+2, r26	; 0x02
    2edc:	b3 83       	std	Z+3, r27	; 0x03
    2ede:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2ee2:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2ee6:	ec 0f       	add	r30, r28
    2ee8:	fd 1f       	adc	r31, r29
    2eea:	83 a9       	ldd	r24, Z+51	; 0x33
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	e9 f4       	brne	.+58     	; 0x2f2a <xTaskGenericNotifyWait+0x11e>
    2ef0:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    2ef4:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2ef8:	ce 01       	movw	r24, r28
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	e8 0f       	add	r30, r24
    2f04:	f9 1f       	adc	r31, r25
    2f06:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f08:	90 a9       	ldd	r25, Z+48	; 0x30
    2f0a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2f0c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2f0e:	40 94       	com	r4
    2f10:	50 94       	com	r5
    2f12:	60 94       	com	r6
    2f14:	70 94       	com	r7
    2f16:	48 22       	and	r4, r24
    2f18:	59 22       	and	r5, r25
    2f1a:	6a 22       	and	r6, r26
    2f1c:	7b 22       	and	r7, r27
    2f1e:	47 a6       	std	Z+47, r4	; 0x2f
    2f20:	50 aa       	std	Z+48, r5	; 0x30
    2f22:	61 aa       	std	Z+49, r6	; 0x31
    2f24:	72 aa       	std	Z+50, r7	; 0x32
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	01 c0       	rjmp	.+2      	; 0x2f2c <xTaskGenericNotifyWait+0x120>
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	20 91 91 16 	lds	r18, 0x1691	; 0x801691 <pxCurrentTCB>
    2f30:	30 91 92 16 	lds	r19, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    2f34:	c2 0f       	add	r28, r18
    2f36:	d3 1f       	adc	r29, r19
    2f38:	1b aa       	std	Y+51, r1	; 0x33
    2f3a:	0f 90       	pop	r0
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	1f 91       	pop	r17
    2f44:	0f 91       	pop	r16
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
    2f4a:	df 90       	pop	r13
    2f4c:	cf 90       	pop	r12
    2f4e:	bf 90       	pop	r11
    2f50:	af 90       	pop	r10
    2f52:	7f 90       	pop	r7
    2f54:	6f 90       	pop	r6
    2f56:	5f 90       	pop	r5
    2f58:	4f 90       	pop	r4
    2f5a:	08 95       	ret

00002f5c <xTaskGenericNotify>:
    2f5c:	8f 92       	push	r8
    2f5e:	9f 92       	push	r9
    2f60:	af 92       	push	r10
    2f62:	bf 92       	push	r11
    2f64:	ef 92       	push	r14
    2f66:	ff 92       	push	r15
    2f68:	0f 93       	push	r16
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	dc 01       	movw	r26, r24
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	0f 92       	push	r0
    2f76:	e1 14       	cp	r14, r1
    2f78:	f1 04       	cpc	r15, r1
    2f7a:	89 f0       	breq	.+34     	; 0x2f9e <xTaskGenericNotify+0x42>
    2f7c:	e6 2f       	mov	r30, r22
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	ee 0f       	add	r30, r30
    2f82:	ff 1f       	adc	r31, r31
    2f84:	ee 0f       	add	r30, r30
    2f86:	ff 1f       	adc	r31, r31
    2f88:	e8 0f       	add	r30, r24
    2f8a:	f9 1f       	adc	r31, r25
    2f8c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f8e:	90 a8       	ldd	r9, Z+48	; 0x30
    2f90:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f92:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f94:	f7 01       	movw	r30, r14
    2f96:	80 82       	st	Z, r8
    2f98:	91 82       	std	Z+1, r9	; 0x01
    2f9a:	a2 82       	std	Z+2, r10	; 0x02
    2f9c:	b3 82       	std	Z+3, r11	; 0x03
    2f9e:	70 e0       	ldi	r23, 0x00	; 0
    2fa0:	fd 01       	movw	r30, r26
    2fa2:	e6 0f       	add	r30, r22
    2fa4:	f7 1f       	adc	r31, r23
    2fa6:	83 a9       	ldd	r24, Z+51	; 0x33
    2fa8:	92 e0       	ldi	r25, 0x02	; 2
    2faa:	93 ab       	std	Z+51, r25	; 0x33
    2fac:	02 30       	cpi	r16, 0x02	; 2
    2fae:	01 f1       	breq	.+64     	; 0x2ff0 <xTaskGenericNotify+0x94>
    2fb0:	18 f4       	brcc	.+6      	; 0x2fb8 <xTaskGenericNotify+0x5c>
    2fb2:	01 30       	cpi	r16, 0x01	; 1
    2fb4:	31 f0       	breq	.+12     	; 0x2fc2 <xTaskGenericNotify+0x66>
    2fb6:	4d c0       	rjmp	.+154    	; 0x3052 <xTaskGenericNotify+0xf6>
    2fb8:	03 30       	cpi	r16, 0x03	; 3
    2fba:	79 f1       	breq	.+94     	; 0x301a <xTaskGenericNotify+0xbe>
    2fbc:	04 30       	cpi	r16, 0x04	; 4
    2fbe:	d1 f1       	breq	.+116    	; 0x3034 <xTaskGenericNotify+0xd8>
    2fc0:	48 c0       	rjmp	.+144    	; 0x3052 <xTaskGenericNotify+0xf6>
    2fc2:	66 0f       	add	r22, r22
    2fc4:	77 1f       	adc	r23, r23
    2fc6:	66 0f       	add	r22, r22
    2fc8:	77 1f       	adc	r23, r23
    2fca:	fd 01       	movw	r30, r26
    2fcc:	e6 0f       	add	r30, r22
    2fce:	f7 1f       	adc	r31, r23
    2fd0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2fd2:	90 a8       	ldd	r9, Z+48	; 0x30
    2fd4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2fd6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2fd8:	ba 01       	movw	r22, r20
    2fda:	a9 01       	movw	r20, r18
    2fdc:	48 29       	or	r20, r8
    2fde:	59 29       	or	r21, r9
    2fe0:	6a 29       	or	r22, r10
    2fe2:	7b 29       	or	r23, r11
    2fe4:	47 a7       	std	Z+47, r20	; 0x2f
    2fe6:	50 ab       	std	Z+48, r21	; 0x30
    2fe8:	61 ab       	std	Z+49, r22	; 0x31
    2fea:	72 ab       	std	Z+50, r23	; 0x32
    2fec:	01 e0       	ldi	r16, 0x01	; 1
    2fee:	34 c0       	rjmp	.+104    	; 0x3058 <xTaskGenericNotify+0xfc>
    2ff0:	66 0f       	add	r22, r22
    2ff2:	77 1f       	adc	r23, r23
    2ff4:	66 0f       	add	r22, r22
    2ff6:	77 1f       	adc	r23, r23
    2ff8:	fd 01       	movw	r30, r26
    2ffa:	e6 0f       	add	r30, r22
    2ffc:	f7 1f       	adc	r31, r23
    2ffe:	47 a5       	ldd	r20, Z+47	; 0x2f
    3000:	50 a9       	ldd	r21, Z+48	; 0x30
    3002:	61 a9       	ldd	r22, Z+49	; 0x31
    3004:	72 a9       	ldd	r23, Z+50	; 0x32
    3006:	4f 5f       	subi	r20, 0xFF	; 255
    3008:	5f 4f       	sbci	r21, 0xFF	; 255
    300a:	6f 4f       	sbci	r22, 0xFF	; 255
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	47 a7       	std	Z+47, r20	; 0x2f
    3010:	50 ab       	std	Z+48, r21	; 0x30
    3012:	61 ab       	std	Z+49, r22	; 0x31
    3014:	72 ab       	std	Z+50, r23	; 0x32
    3016:	01 e0       	ldi	r16, 0x01	; 1
    3018:	1f c0       	rjmp	.+62     	; 0x3058 <xTaskGenericNotify+0xfc>
    301a:	66 0f       	add	r22, r22
    301c:	77 1f       	adc	r23, r23
    301e:	66 0f       	add	r22, r22
    3020:	77 1f       	adc	r23, r23
    3022:	fd 01       	movw	r30, r26
    3024:	e6 0f       	add	r30, r22
    3026:	f7 1f       	adc	r31, r23
    3028:	27 a7       	std	Z+47, r18	; 0x2f
    302a:	30 ab       	std	Z+48, r19	; 0x30
    302c:	41 ab       	std	Z+49, r20	; 0x31
    302e:	52 ab       	std	Z+50, r21	; 0x32
    3030:	01 e0       	ldi	r16, 0x01	; 1
    3032:	12 c0       	rjmp	.+36     	; 0x3058 <xTaskGenericNotify+0xfc>
    3034:	82 30       	cpi	r24, 0x02	; 2
    3036:	79 f0       	breq	.+30     	; 0x3056 <xTaskGenericNotify+0xfa>
    3038:	66 0f       	add	r22, r22
    303a:	77 1f       	adc	r23, r23
    303c:	66 0f       	add	r22, r22
    303e:	77 1f       	adc	r23, r23
    3040:	fd 01       	movw	r30, r26
    3042:	e6 0f       	add	r30, r22
    3044:	f7 1f       	adc	r31, r23
    3046:	27 a7       	std	Z+47, r18	; 0x2f
    3048:	30 ab       	std	Z+48, r19	; 0x30
    304a:	41 ab       	std	Z+49, r20	; 0x31
    304c:	52 ab       	std	Z+50, r21	; 0x32
    304e:	01 e0       	ldi	r16, 0x01	; 1
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <xTaskGenericNotify+0xfc>
    3052:	01 e0       	ldi	r16, 0x01	; 1
    3054:	01 c0       	rjmp	.+2      	; 0x3058 <xTaskGenericNotify+0xfc>
    3056:	00 e0       	ldi	r16, 0x00	; 0
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	09 f0       	breq	.+2      	; 0x305e <xTaskGenericNotify+0x102>
    305c:	69 c0       	rjmp	.+210    	; 0x3130 <xTaskGenericNotify+0x1d4>
    305e:	1c 96       	adiw	r26, 0x0c	; 12
    3060:	ed 91       	ld	r30, X+
    3062:	fc 91       	ld	r31, X
    3064:	1d 97       	sbiw	r26, 0x0d	; 13
    3066:	16 96       	adiw	r26, 0x06	; 6
    3068:	cd 91       	ld	r28, X+
    306a:	dc 91       	ld	r29, X
    306c:	17 97       	sbiw	r26, 0x07	; 7
    306e:	18 96       	adiw	r26, 0x08	; 8
    3070:	8d 91       	ld	r24, X+
    3072:	9c 91       	ld	r25, X
    3074:	19 97       	sbiw	r26, 0x09	; 9
    3076:	9f 83       	std	Y+7, r25	; 0x07
    3078:	8e 83       	std	Y+6, r24	; 0x06
    307a:	18 96       	adiw	r26, 0x08	; 8
    307c:	cd 91       	ld	r28, X+
    307e:	dc 91       	ld	r29, X
    3080:	19 97       	sbiw	r26, 0x09	; 9
    3082:	16 96       	adiw	r26, 0x06	; 6
    3084:	8d 91       	ld	r24, X+
    3086:	9c 91       	ld	r25, X
    3088:	17 97       	sbiw	r26, 0x07	; 7
    308a:	9d 83       	std	Y+5, r25	; 0x05
    308c:	8c 83       	std	Y+4, r24	; 0x04
    308e:	81 81       	ldd	r24, Z+1	; 0x01
    3090:	92 81       	ldd	r25, Z+2	; 0x02
    3092:	9d 01       	movw	r18, r26
    3094:	2e 5f       	subi	r18, 0xFE	; 254
    3096:	3f 4f       	sbci	r19, 0xFF	; 255
    3098:	82 17       	cp	r24, r18
    309a:	93 07       	cpc	r25, r19
    309c:	31 f4       	brne	.+12     	; 0x30aa <xTaskGenericNotify+0x14e>
    309e:	18 96       	adiw	r26, 0x08	; 8
    30a0:	8d 91       	ld	r24, X+
    30a2:	9c 91       	ld	r25, X
    30a4:	19 97       	sbiw	r26, 0x09	; 9
    30a6:	92 83       	std	Z+2, r25	; 0x02
    30a8:	81 83       	std	Z+1, r24	; 0x01
    30aa:	1d 96       	adiw	r26, 0x0d	; 13
    30ac:	1c 92       	st	X, r1
    30ae:	1e 92       	st	-X, r1
    30b0:	1c 97       	sbiw	r26, 0x0c	; 12
    30b2:	80 81       	ld	r24, Z
    30b4:	81 50       	subi	r24, 0x01	; 1
    30b6:	80 83       	st	Z, r24
    30b8:	5a 96       	adiw	r26, 0x1a	; 26
    30ba:	ec 91       	ld	r30, X
    30bc:	5a 97       	sbiw	r26, 0x1a	; 26
    30be:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    30c2:	8e 17       	cp	r24, r30
    30c4:	10 f4       	brcc	.+4      	; 0x30ca <xTaskGenericNotify+0x16e>
    30c6:	e0 93 e1 15 	sts	0x15E1, r30	; 0x8015e1 <uxTopReadyPriority>
    30ca:	8b e0       	ldi	r24, 0x0B	; 11
    30cc:	8e 9f       	mul	r24, r30
    30ce:	f0 01       	movw	r30, r0
    30d0:	11 24       	eor	r1, r1
    30d2:	ed 5d       	subi	r30, 0xDD	; 221
    30d4:	f9 4e       	sbci	r31, 0xE9	; 233
    30d6:	01 80       	ldd	r0, Z+1	; 0x01
    30d8:	f2 81       	ldd	r31, Z+2	; 0x02
    30da:	e0 2d       	mov	r30, r0
    30dc:	17 96       	adiw	r26, 0x07	; 7
    30de:	fc 93       	st	X, r31
    30e0:	ee 93       	st	-X, r30
    30e2:	16 97       	sbiw	r26, 0x06	; 6
    30e4:	46 81       	ldd	r20, Z+6	; 0x06
    30e6:	57 81       	ldd	r21, Z+7	; 0x07
    30e8:	19 96       	adiw	r26, 0x09	; 9
    30ea:	5c 93       	st	X, r21
    30ec:	4e 93       	st	-X, r20
    30ee:	18 97       	sbiw	r26, 0x08	; 8
    30f0:	c6 81       	ldd	r28, Z+6	; 0x06
    30f2:	d7 81       	ldd	r29, Z+7	; 0x07
    30f4:	3d 83       	std	Y+5, r19	; 0x05
    30f6:	2c 83       	std	Y+4, r18	; 0x04
    30f8:	37 83       	std	Z+7, r19	; 0x07
    30fa:	26 83       	std	Z+6, r18	; 0x06
    30fc:	5a 96       	adiw	r26, 0x1a	; 26
    30fe:	ec 91       	ld	r30, X
    3100:	5a 97       	sbiw	r26, 0x1a	; 26
    3102:	8e 9f       	mul	r24, r30
    3104:	f0 01       	movw	r30, r0
    3106:	11 24       	eor	r1, r1
    3108:	ed 5d       	subi	r30, 0xDD	; 221
    310a:	f9 4e       	sbci	r31, 0xE9	; 233
    310c:	1d 96       	adiw	r26, 0x0d	; 13
    310e:	fc 93       	st	X, r31
    3110:	ee 93       	st	-X, r30
    3112:	1c 97       	sbiw	r26, 0x0c	; 12
    3114:	80 81       	ld	r24, Z
    3116:	8f 5f       	subi	r24, 0xFF	; 255
    3118:	80 83       	st	Z, r24
    311a:	5a 96       	adiw	r26, 0x1a	; 26
    311c:	9c 91       	ld	r25, X
    311e:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    3122:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    3126:	82 8d       	ldd	r24, Z+26	; 0x1a
    3128:	89 17       	cp	r24, r25
    312a:	10 f4       	brcc	.+4      	; 0x3130 <xTaskGenericNotify+0x1d4>
    312c:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    3130:	0f 90       	pop	r0
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	80 2f       	mov	r24, r16
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	0f 91       	pop	r16
    313c:	ff 90       	pop	r15
    313e:	ef 90       	pop	r14
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	08 95       	ret

0000314a <xTaskGenericNotifyFromISR>:
    314a:	8f 92       	push	r8
    314c:	9f 92       	push	r9
    314e:	af 92       	push	r10
    3150:	bf 92       	push	r11
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	dc 01       	movw	r26, r24
    3162:	e1 14       	cp	r14, r1
    3164:	f1 04       	cpc	r15, r1
    3166:	89 f0       	breq	.+34     	; 0x318a <xTaskGenericNotifyFromISR+0x40>
    3168:	e6 2f       	mov	r30, r22
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	ee 0f       	add	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	ee 0f       	add	r30, r30
    3172:	ff 1f       	adc	r31, r31
    3174:	e8 0f       	add	r30, r24
    3176:	f9 1f       	adc	r31, r25
    3178:	87 a4       	ldd	r8, Z+47	; 0x2f
    317a:	90 a8       	ldd	r9, Z+48	; 0x30
    317c:	a1 a8       	ldd	r10, Z+49	; 0x31
    317e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3180:	f7 01       	movw	r30, r14
    3182:	80 82       	st	Z, r8
    3184:	91 82       	std	Z+1, r9	; 0x01
    3186:	a2 82       	std	Z+2, r10	; 0x02
    3188:	b3 82       	std	Z+3, r11	; 0x03
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	fd 01       	movw	r30, r26
    318e:	e6 0f       	add	r30, r22
    3190:	f7 1f       	adc	r31, r23
    3192:	93 a9       	ldd	r25, Z+51	; 0x33
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	83 ab       	std	Z+51, r24	; 0x33
    3198:	02 30       	cpi	r16, 0x02	; 2
    319a:	01 f1       	breq	.+64     	; 0x31dc <xTaskGenericNotifyFromISR+0x92>
    319c:	18 f4       	brcc	.+6      	; 0x31a4 <xTaskGenericNotifyFromISR+0x5a>
    319e:	01 30       	cpi	r16, 0x01	; 1
    31a0:	31 f0       	breq	.+12     	; 0x31ae <xTaskGenericNotifyFromISR+0x64>
    31a2:	4d c0       	rjmp	.+154    	; 0x323e <xTaskGenericNotifyFromISR+0xf4>
    31a4:	03 30       	cpi	r16, 0x03	; 3
    31a6:	79 f1       	breq	.+94     	; 0x3206 <xTaskGenericNotifyFromISR+0xbc>
    31a8:	04 30       	cpi	r16, 0x04	; 4
    31aa:	d1 f1       	breq	.+116    	; 0x3220 <xTaskGenericNotifyFromISR+0xd6>
    31ac:	48 c0       	rjmp	.+144    	; 0x323e <xTaskGenericNotifyFromISR+0xf4>
    31ae:	66 0f       	add	r22, r22
    31b0:	77 1f       	adc	r23, r23
    31b2:	66 0f       	add	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	fd 01       	movw	r30, r26
    31b8:	e6 0f       	add	r30, r22
    31ba:	f7 1f       	adc	r31, r23
    31bc:	87 a4       	ldd	r8, Z+47	; 0x2f
    31be:	90 a8       	ldd	r9, Z+48	; 0x30
    31c0:	a1 a8       	ldd	r10, Z+49	; 0x31
    31c2:	b2 a8       	ldd	r11, Z+50	; 0x32
    31c4:	ba 01       	movw	r22, r20
    31c6:	a9 01       	movw	r20, r18
    31c8:	48 29       	or	r20, r8
    31ca:	59 29       	or	r21, r9
    31cc:	6a 29       	or	r22, r10
    31ce:	7b 29       	or	r23, r11
    31d0:	47 a7       	std	Z+47, r20	; 0x2f
    31d2:	50 ab       	std	Z+48, r21	; 0x30
    31d4:	61 ab       	std	Z+49, r22	; 0x31
    31d6:	72 ab       	std	Z+50, r23	; 0x32
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	34 c0       	rjmp	.+104    	; 0x3244 <xTaskGenericNotifyFromISR+0xfa>
    31dc:	66 0f       	add	r22, r22
    31de:	77 1f       	adc	r23, r23
    31e0:	66 0f       	add	r22, r22
    31e2:	77 1f       	adc	r23, r23
    31e4:	fd 01       	movw	r30, r26
    31e6:	e6 0f       	add	r30, r22
    31e8:	f7 1f       	adc	r31, r23
    31ea:	47 a5       	ldd	r20, Z+47	; 0x2f
    31ec:	50 a9       	ldd	r21, Z+48	; 0x30
    31ee:	61 a9       	ldd	r22, Z+49	; 0x31
    31f0:	72 a9       	ldd	r23, Z+50	; 0x32
    31f2:	4f 5f       	subi	r20, 0xFF	; 255
    31f4:	5f 4f       	sbci	r21, 0xFF	; 255
    31f6:	6f 4f       	sbci	r22, 0xFF	; 255
    31f8:	7f 4f       	sbci	r23, 0xFF	; 255
    31fa:	47 a7       	std	Z+47, r20	; 0x2f
    31fc:	50 ab       	std	Z+48, r21	; 0x30
    31fe:	61 ab       	std	Z+49, r22	; 0x31
    3200:	72 ab       	std	Z+50, r23	; 0x32
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	1f c0       	rjmp	.+62     	; 0x3244 <xTaskGenericNotifyFromISR+0xfa>
    3206:	66 0f       	add	r22, r22
    3208:	77 1f       	adc	r23, r23
    320a:	66 0f       	add	r22, r22
    320c:	77 1f       	adc	r23, r23
    320e:	fd 01       	movw	r30, r26
    3210:	e6 0f       	add	r30, r22
    3212:	f7 1f       	adc	r31, r23
    3214:	27 a7       	std	Z+47, r18	; 0x2f
    3216:	30 ab       	std	Z+48, r19	; 0x30
    3218:	41 ab       	std	Z+49, r20	; 0x31
    321a:	52 ab       	std	Z+50, r21	; 0x32
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	12 c0       	rjmp	.+36     	; 0x3244 <xTaskGenericNotifyFromISR+0xfa>
    3220:	92 30       	cpi	r25, 0x02	; 2
    3222:	79 f0       	breq	.+30     	; 0x3242 <xTaskGenericNotifyFromISR+0xf8>
    3224:	66 0f       	add	r22, r22
    3226:	77 1f       	adc	r23, r23
    3228:	66 0f       	add	r22, r22
    322a:	77 1f       	adc	r23, r23
    322c:	fd 01       	movw	r30, r26
    322e:	e6 0f       	add	r30, r22
    3230:	f7 1f       	adc	r31, r23
    3232:	27 a7       	std	Z+47, r18	; 0x2f
    3234:	30 ab       	std	Z+48, r19	; 0x30
    3236:	41 ab       	std	Z+49, r20	; 0x31
    3238:	52 ab       	std	Z+50, r21	; 0x32
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	03 c0       	rjmp	.+6      	; 0x3244 <xTaskGenericNotifyFromISR+0xfa>
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	01 c0       	rjmp	.+2      	; 0x3244 <xTaskGenericNotifyFromISR+0xfa>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	91 30       	cpi	r25, 0x01	; 1
    3246:	09 f0       	breq	.+2      	; 0x324a <xTaskGenericNotifyFromISR+0x100>
    3248:	96 c0       	rjmp	.+300    	; 0x3376 <xTaskGenericNotifyFromISR+0x22c>
    324a:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <uxSchedulerSuspended>
    324e:	91 11       	cpse	r25, r1
    3250:	5f c0       	rjmp	.+190    	; 0x3310 <xTaskGenericNotifyFromISR+0x1c6>
    3252:	1c 96       	adiw	r26, 0x0c	; 12
    3254:	ed 91       	ld	r30, X+
    3256:	fc 91       	ld	r31, X
    3258:	1d 97       	sbiw	r26, 0x0d	; 13
    325a:	16 96       	adiw	r26, 0x06	; 6
    325c:	cd 91       	ld	r28, X+
    325e:	dc 91       	ld	r29, X
    3260:	17 97       	sbiw	r26, 0x07	; 7
    3262:	18 96       	adiw	r26, 0x08	; 8
    3264:	2d 91       	ld	r18, X+
    3266:	3c 91       	ld	r19, X
    3268:	19 97       	sbiw	r26, 0x09	; 9
    326a:	3f 83       	std	Y+7, r19	; 0x07
    326c:	2e 83       	std	Y+6, r18	; 0x06
    326e:	18 96       	adiw	r26, 0x08	; 8
    3270:	cd 91       	ld	r28, X+
    3272:	dc 91       	ld	r29, X
    3274:	19 97       	sbiw	r26, 0x09	; 9
    3276:	16 96       	adiw	r26, 0x06	; 6
    3278:	2d 91       	ld	r18, X+
    327a:	3c 91       	ld	r19, X
    327c:	17 97       	sbiw	r26, 0x07	; 7
    327e:	3d 83       	std	Y+5, r19	; 0x05
    3280:	2c 83       	std	Y+4, r18	; 0x04
    3282:	41 81       	ldd	r20, Z+1	; 0x01
    3284:	52 81       	ldd	r21, Z+2	; 0x02
    3286:	9d 01       	movw	r18, r26
    3288:	2e 5f       	subi	r18, 0xFE	; 254
    328a:	3f 4f       	sbci	r19, 0xFF	; 255
    328c:	42 17       	cp	r20, r18
    328e:	53 07       	cpc	r21, r19
    3290:	31 f4       	brne	.+12     	; 0x329e <xTaskGenericNotifyFromISR+0x154>
    3292:	18 96       	adiw	r26, 0x08	; 8
    3294:	4d 91       	ld	r20, X+
    3296:	5c 91       	ld	r21, X
    3298:	19 97       	sbiw	r26, 0x09	; 9
    329a:	52 83       	std	Z+2, r21	; 0x02
    329c:	41 83       	std	Z+1, r20	; 0x01
    329e:	1d 96       	adiw	r26, 0x0d	; 13
    32a0:	1c 92       	st	X, r1
    32a2:	1e 92       	st	-X, r1
    32a4:	1c 97       	sbiw	r26, 0x0c	; 12
    32a6:	90 81       	ld	r25, Z
    32a8:	91 50       	subi	r25, 0x01	; 1
    32aa:	90 83       	st	Z, r25
    32ac:	5a 96       	adiw	r26, 0x1a	; 26
    32ae:	ec 91       	ld	r30, X
    32b0:	5a 97       	sbiw	r26, 0x1a	; 26
    32b2:	90 91 e1 15 	lds	r25, 0x15E1	; 0x8015e1 <uxTopReadyPriority>
    32b6:	9e 17       	cp	r25, r30
    32b8:	10 f4       	brcc	.+4      	; 0x32be <xTaskGenericNotifyFromISR+0x174>
    32ba:	e0 93 e1 15 	sts	0x15E1, r30	; 0x8015e1 <uxTopReadyPriority>
    32be:	9b e0       	ldi	r25, 0x0B	; 11
    32c0:	9e 9f       	mul	r25, r30
    32c2:	f0 01       	movw	r30, r0
    32c4:	11 24       	eor	r1, r1
    32c6:	ed 5d       	subi	r30, 0xDD	; 221
    32c8:	f9 4e       	sbci	r31, 0xE9	; 233
    32ca:	01 80       	ldd	r0, Z+1	; 0x01
    32cc:	f2 81       	ldd	r31, Z+2	; 0x02
    32ce:	e0 2d       	mov	r30, r0
    32d0:	17 96       	adiw	r26, 0x07	; 7
    32d2:	fc 93       	st	X, r31
    32d4:	ee 93       	st	-X, r30
    32d6:	16 97       	sbiw	r26, 0x06	; 6
    32d8:	46 81       	ldd	r20, Z+6	; 0x06
    32da:	57 81       	ldd	r21, Z+7	; 0x07
    32dc:	19 96       	adiw	r26, 0x09	; 9
    32de:	5c 93       	st	X, r21
    32e0:	4e 93       	st	-X, r20
    32e2:	18 97       	sbiw	r26, 0x08	; 8
    32e4:	c6 81       	ldd	r28, Z+6	; 0x06
    32e6:	d7 81       	ldd	r29, Z+7	; 0x07
    32e8:	3d 83       	std	Y+5, r19	; 0x05
    32ea:	2c 83       	std	Y+4, r18	; 0x04
    32ec:	37 83       	std	Z+7, r19	; 0x07
    32ee:	26 83       	std	Z+6, r18	; 0x06
    32f0:	5a 96       	adiw	r26, 0x1a	; 26
    32f2:	ec 91       	ld	r30, X
    32f4:	5a 97       	sbiw	r26, 0x1a	; 26
    32f6:	9e 9f       	mul	r25, r30
    32f8:	f0 01       	movw	r30, r0
    32fa:	11 24       	eor	r1, r1
    32fc:	ed 5d       	subi	r30, 0xDD	; 221
    32fe:	f9 4e       	sbci	r31, 0xE9	; 233
    3300:	1d 96       	adiw	r26, 0x0d	; 13
    3302:	fc 93       	st	X, r31
    3304:	ee 93       	st	-X, r30
    3306:	1c 97       	sbiw	r26, 0x0c	; 12
    3308:	90 81       	ld	r25, Z
    330a:	9f 5f       	subi	r25, 0xFF	; 255
    330c:	90 83       	st	Z, r25
    330e:	21 c0       	rjmp	.+66     	; 0x3352 <xTaskGenericNotifyFromISR+0x208>
    3310:	6e ef       	ldi	r22, 0xFE	; 254
    3312:	75 e1       	ldi	r23, 0x15	; 21
    3314:	fb 01       	movw	r30, r22
    3316:	c1 81       	ldd	r28, Z+1	; 0x01
    3318:	d2 81       	ldd	r29, Z+2	; 0x02
    331a:	53 96       	adiw	r26, 0x13	; 19
    331c:	dc 93       	st	X, r29
    331e:	ce 93       	st	-X, r28
    3320:	52 97       	sbiw	r26, 0x12	; 18
    3322:	2e 81       	ldd	r18, Y+6	; 0x06
    3324:	3f 81       	ldd	r19, Y+7	; 0x07
    3326:	55 96       	adiw	r26, 0x15	; 21
    3328:	3c 93       	st	X, r19
    332a:	2e 93       	st	-X, r18
    332c:	54 97       	sbiw	r26, 0x14	; 20
    332e:	4e 81       	ldd	r20, Y+6	; 0x06
    3330:	5f 81       	ldd	r21, Y+7	; 0x07
    3332:	9d 01       	movw	r18, r26
    3334:	22 5f       	subi	r18, 0xF2	; 242
    3336:	3f 4f       	sbci	r19, 0xFF	; 255
    3338:	fa 01       	movw	r30, r20
    333a:	35 83       	std	Z+5, r19	; 0x05
    333c:	24 83       	std	Z+4, r18	; 0x04
    333e:	3f 83       	std	Y+7, r19	; 0x07
    3340:	2e 83       	std	Y+6, r18	; 0x06
    3342:	59 96       	adiw	r26, 0x19	; 25
    3344:	7c 93       	st	X, r23
    3346:	6e 93       	st	-X, r22
    3348:	58 97       	sbiw	r26, 0x18	; 24
    334a:	fb 01       	movw	r30, r22
    334c:	90 81       	ld	r25, Z
    334e:	9f 5f       	subi	r25, 0xFF	; 255
    3350:	90 83       	st	Z, r25
    3352:	5a 96       	adiw	r26, 0x1a	; 26
    3354:	2c 91       	ld	r18, X
    3356:	e0 91 91 16 	lds	r30, 0x1691	; 0x801691 <pxCurrentTCB>
    335a:	f0 91 92 16 	lds	r31, 0x1692	; 0x801692 <pxCurrentTCB+0x1>
    335e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3360:	92 17       	cp	r25, r18
    3362:	48 f4       	brcc	.+18     	; 0x3376 <xTaskGenericNotifyFromISR+0x22c>
    3364:	c1 14       	cp	r12, r1
    3366:	d1 04       	cpc	r13, r1
    3368:	19 f0       	breq	.+6      	; 0x3370 <xTaskGenericNotifyFromISR+0x226>
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	f6 01       	movw	r30, r12
    336e:	90 83       	st	Z, r25
    3370:	91 e0       	ldi	r25, 0x01	; 1
    3372:	90 93 db 15 	sts	0x15DB, r25	; 0x8015db <xYieldPending>
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	0f 91       	pop	r16
    337c:	ff 90       	pop	r15
    337e:	ef 90       	pop	r14
    3380:	df 90       	pop	r13
    3382:	cf 90       	pop	r12
    3384:	bf 90       	pop	r11
    3386:	af 90       	pop	r10
    3388:	9f 90       	pop	r9
    338a:	8f 90       	pop	r8
    338c:	08 95       	ret

0000338e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	21 f4       	brne	.+8      	; 0x339a <xTaskGenericNotifyStateClear+0xc>
    3392:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <pxCurrentTCB>
    3396:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	fc 01       	movw	r30, r24
    33a4:	e6 0f       	add	r30, r22
    33a6:	f7 1f       	adc	r31, r23
    33a8:	23 a9       	ldd	r18, Z+51	; 0x33
    33aa:	22 30       	cpi	r18, 0x02	; 2
    33ac:	31 f4       	brne	.+12     	; 0x33ba <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    33ae:	fc 01       	movw	r30, r24
    33b0:	e6 0f       	add	r30, r22
    33b2:	f7 1f       	adc	r31, r23
    33b4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	01 c0       	rjmp	.+2      	; 0x33bc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    33ba:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    33bc:	0f 90       	pop	r0
    33be:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    33c0:	08 95       	ret

000033c2 <prvGetNextExpireTime>:
    33c2:	dc 01       	movw	r26, r24
    33c4:	e0 91 9d 16 	lds	r30, 0x169D	; 0x80169d <pxCurrentTimerList>
    33c8:	f0 91 9e 16 	lds	r31, 0x169E	; 0x80169e <pxCurrentTimerList+0x1>
    33cc:	80 81       	ld	r24, Z
    33ce:	91 e0       	ldi	r25, 0x01	; 1
    33d0:	81 11       	cpse	r24, r1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	9c 93       	st	X, r25
    33d6:	91 11       	cpse	r25, r1
    33d8:	08 c0       	rjmp	.+16     	; 0x33ea <prvGetNextExpireTime+0x28>
    33da:	07 80       	ldd	r0, Z+7	; 0x07
    33dc:	f0 85       	ldd	r31, Z+8	; 0x08
    33de:	e0 2d       	mov	r30, r0
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	08 95       	ret
    33ea:	60 e0       	ldi	r22, 0x00	; 0
    33ec:	70 e0       	ldi	r23, 0x00	; 0
    33ee:	cb 01       	movw	r24, r22
    33f0:	08 95       	ret

000033f2 <prvInsertTimerInActiveList>:
    33f2:	cf 92       	push	r12
    33f4:	df 92       	push	r13
    33f6:	ef 92       	push	r14
    33f8:	ff 92       	push	r15
    33fa:	0f 93       	push	r16
    33fc:	1f 93       	push	r17
    33fe:	fc 01       	movw	r30, r24
    3400:	42 83       	std	Z+2, r20	; 0x02
    3402:	53 83       	std	Z+3, r21	; 0x03
    3404:	64 83       	std	Z+4, r22	; 0x04
    3406:	75 83       	std	Z+5, r23	; 0x05
    3408:	93 87       	std	Z+11, r25	; 0x0b
    340a:	82 87       	std	Z+10, r24	; 0x0a
    340c:	04 17       	cp	r16, r20
    340e:	15 07       	cpc	r17, r21
    3410:	26 07       	cpc	r18, r22
    3412:	37 07       	cpc	r19, r23
    3414:	c0 f0       	brcs	.+48     	; 0x3446 <prvInsertTimerInActiveList+0x54>
    3416:	0c 19       	sub	r16, r12
    3418:	1d 09       	sbc	r17, r13
    341a:	2e 09       	sbc	r18, r14
    341c:	3f 09       	sbc	r19, r15
    341e:	86 85       	ldd	r24, Z+14	; 0x0e
    3420:	97 85       	ldd	r25, Z+15	; 0x0f
    3422:	a0 89       	ldd	r26, Z+16	; 0x10
    3424:	b1 89       	ldd	r27, Z+17	; 0x11
    3426:	08 17       	cp	r16, r24
    3428:	19 07       	cpc	r17, r25
    342a:	2a 07       	cpc	r18, r26
    342c:	3b 07       	cpc	r19, r27
    342e:	00 f5       	brcc	.+64     	; 0x3470 <prvInsertTimerInActiveList+0x7e>
    3430:	bf 01       	movw	r22, r30
    3432:	6e 5f       	subi	r22, 0xFE	; 254
    3434:	7f 4f       	sbci	r23, 0xFF	; 255
    3436:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <pxOverflowTimerList>
    343a:	90 91 9c 16 	lds	r25, 0x169C	; 0x80169c <pxOverflowTimerList+0x1>
    343e:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	18 c0       	rjmp	.+48     	; 0x3476 <prvInsertTimerInActiveList+0x84>
    3446:	0c 15       	cp	r16, r12
    3448:	1d 05       	cpc	r17, r13
    344a:	2e 05       	cpc	r18, r14
    344c:	3f 05       	cpc	r19, r15
    344e:	28 f4       	brcc	.+10     	; 0x345a <prvInsertTimerInActiveList+0x68>
    3450:	4c 15       	cp	r20, r12
    3452:	5d 05       	cpc	r21, r13
    3454:	6e 05       	cpc	r22, r14
    3456:	7f 05       	cpc	r23, r15
    3458:	68 f4       	brcc	.+26     	; 0x3474 <prvInsertTimerInActiveList+0x82>
    345a:	bf 01       	movw	r22, r30
    345c:	6e 5f       	subi	r22, 0xFE	; 254
    345e:	7f 4f       	sbci	r23, 0xFF	; 255
    3460:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <pxCurrentTimerList>
    3464:	90 91 9e 16 	lds	r25, 0x169E	; 0x80169e <pxCurrentTimerList+0x1>
    3468:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	03 c0       	rjmp	.+6      	; 0x3476 <prvInsertTimerInActiveList+0x84>
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	01 c0       	rjmp	.+2      	; 0x3476 <prvInsertTimerInActiveList+0x84>
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	ff 90       	pop	r15
    347c:	ef 90       	pop	r14
    347e:	df 90       	pop	r13
    3480:	cf 90       	pop	r12
    3482:	08 95       	ret

00003484 <prvCheckForValidListAndQueue>:
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	0f 92       	push	r0
    348a:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <xTimerQueue>
    348e:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <xTimerQueue+0x1>
    3492:	89 2b       	or	r24, r25
    3494:	e9 f4       	brne	.+58     	; 0x34d0 <prvCheckForValidListAndQueue+0x4c>
    3496:	8a ea       	ldi	r24, 0xAA	; 170
    3498:	96 e1       	ldi	r25, 0x16	; 22
    349a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    349e:	8f e9       	ldi	r24, 0x9F	; 159
    34a0:	96 e1       	ldi	r25, 0x16	; 22
    34a2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    34a6:	8a ea       	ldi	r24, 0xAA	; 170
    34a8:	96 e1       	ldi	r25, 0x16	; 22
    34aa:	90 93 9e 16 	sts	0x169E, r25	; 0x80169e <pxCurrentTimerList+0x1>
    34ae:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <pxCurrentTimerList>
    34b2:	8f e9       	ldi	r24, 0x9F	; 159
    34b4:	96 e1       	ldi	r25, 0x16	; 22
    34b6:	90 93 9c 16 	sts	0x169C, r25	; 0x80169c <pxOverflowTimerList+0x1>
    34ba:	80 93 9b 16 	sts	0x169B, r24	; 0x80169b <pxOverflowTimerList>
    34be:	40 e0       	ldi	r20, 0x00	; 0
    34c0:	67 e0       	ldi	r22, 0x07	; 7
    34c2:	8a e0       	ldi	r24, 0x0A	; 10
    34c4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericCreate>
    34c8:	90 93 9a 16 	sts	0x169A, r25	; 0x80169a <xTimerQueue+0x1>
    34cc:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <xTimerQueue>
    34d0:	0f 90       	pop	r0
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	08 95       	ret

000034d6 <xTimerCreateTimerTask>:
    34d6:	ef 92       	push	r14
    34d8:	ff 92       	push	r15
    34da:	0f 93       	push	r16
    34dc:	d3 df       	rcall	.-90     	; 0x3484 <prvCheckForValidListAndQueue>
    34de:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <xTimerQueue>
    34e2:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <xTimerQueue+0x1>
    34e6:	89 2b       	or	r24, r25
    34e8:	91 f0       	breq	.+36     	; 0x350e <xTimerCreateTimerTask+0x38>
    34ea:	0f 2e       	mov	r0, r31
    34ec:	f7 e9       	ldi	r31, 0x97	; 151
    34ee:	ef 2e       	mov	r14, r31
    34f0:	f6 e1       	ldi	r31, 0x16	; 22
    34f2:	ff 2e       	mov	r15, r31
    34f4:	f0 2d       	mov	r31, r0
    34f6:	03 e0       	ldi	r16, 0x03	; 3
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	40 ec       	ldi	r20, 0xC0	; 192
    34fe:	50 e0       	ldi	r21, 0x00	; 0
    3500:	6e ea       	ldi	r22, 0xAE	; 174
    3502:	72 e0       	ldi	r23, 0x02	; 2
    3504:	87 ed       	ldi	r24, 0xD7	; 215
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <xTaskCreate>
    350c:	01 c0       	rjmp	.+2      	; 0x3510 <xTimerCreateTimerTask+0x3a>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	0f 91       	pop	r16
    3512:	ff 90       	pop	r15
    3514:	ef 90       	pop	r14
    3516:	08 95       	ret

00003518 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3518:	8f 92       	push	r8
    351a:	9f 92       	push	r9
    351c:	af 92       	push	r10
    351e:	bf 92       	push	r11
    3520:	cf 92       	push	r12
    3522:	df 92       	push	r13
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	27 97       	sbiw	r28, 0x07	; 7
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3540:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <xTimerQueue>
    3544:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <xTimerQueue+0x1>
    3548:	30 97       	sbiw	r30, 0x00	; 0
    354a:	81 f1       	breq	.+96     	; 0x35ac <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    354c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    354e:	2a 83       	std	Y+2, r18	; 0x02
    3550:	3b 83       	std	Y+3, r19	; 0x03
    3552:	4c 83       	std	Y+4, r20	; 0x04
    3554:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3556:	9f 83       	std	Y+7, r25	; 0x07
    3558:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    355a:	66 30       	cpi	r22, 0x06	; 6
    355c:	f4 f4       	brge	.+60     	; 0x359a <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    355e:	c3 da       	rcall	.-2682   	; 0x2ae6 <xTaskGetSchedulerState>
    3560:	82 30       	cpi	r24, 0x02	; 2
    3562:	69 f4       	brne	.+26     	; 0x357e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3564:	00 e0       	ldi	r16, 0x00	; 0
    3566:	a7 01       	movw	r20, r14
    3568:	96 01       	movw	r18, r12
    356a:	be 01       	movw	r22, r28
    356c:	6f 5f       	subi	r22, 0xFF	; 255
    356e:	7f 4f       	sbci	r23, 0xFF	; 255
    3570:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <xTimerQueue>
    3574:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <xTimerQueue+0x1>
    3578:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    357c:	18 c0       	rjmp	.+48     	; 0x35ae <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    357e:	00 e0       	ldi	r16, 0x00	; 0
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	a9 01       	movw	r20, r18
    3586:	be 01       	movw	r22, r28
    3588:	6f 5f       	subi	r22, 0xFF	; 255
    358a:	7f 4f       	sbci	r23, 0xFF	; 255
    358c:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <xTimerQueue>
    3590:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <xTimerQueue+0x1>
    3594:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    3598:	0a c0       	rjmp	.+20     	; 0x35ae <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	a8 01       	movw	r20, r16
    359e:	be 01       	movw	r22, r28
    35a0:	6f 5f       	subi	r22, 0xFF	; 255
    35a2:	7f 4f       	sbci	r23, 0xFF	; 255
    35a4:	cf 01       	movw	r24, r30
    35a6:	0e 94 74 08 	call	0x10e8	; 0x10e8 <xQueueGenericSendFromISR>
    35aa:	01 c0       	rjmp	.+2      	; 0x35ae <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    35ac:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    35ae:	27 96       	adiw	r28, 0x07	; 7
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	df 90       	pop	r13
    35c8:	cf 90       	pop	r12
    35ca:	bf 90       	pop	r11
    35cc:	af 90       	pop	r10
    35ce:	9f 90       	pop	r9
    35d0:	8f 90       	pop	r8
    35d2:	08 95       	ret

000035d4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    35d4:	8f 92       	push	r8
    35d6:	9f 92       	push	r9
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    35ec:	3b c0       	rjmp	.+118    	; 0x3664 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    35ee:	07 80       	ldd	r0, Z+7	; 0x07
    35f0:	f0 85       	ldd	r31, Z+8	; 0x08
    35f2:	e0 2d       	mov	r30, r0
    35f4:	80 80       	ld	r8, Z
    35f6:	91 80       	ldd	r9, Z+1	; 0x01
    35f8:	a2 80       	ldd	r10, Z+2	; 0x02
    35fa:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    35fc:	c0 85       	ldd	r28, Z+8	; 0x08
    35fe:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3600:	8e 01       	movw	r16, r28
    3602:	0e 5f       	subi	r16, 0xFE	; 254
    3604:	1f 4f       	sbci	r17, 0xFF	; 255
    3606:	c8 01       	movw	r24, r16
    3608:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    360c:	ec 89       	ldd	r30, Y+20	; 0x14
    360e:	fd 89       	ldd	r31, Y+21	; 0x15
    3610:	ce 01       	movw	r24, r28
    3612:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3614:	8e 89       	ldd	r24, Y+22	; 0x16
    3616:	82 ff       	sbrs	r24, 2
    3618:	25 c0       	rjmp	.+74     	; 0x3664 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    361a:	8e 85       	ldd	r24, Y+14	; 0x0e
    361c:	9f 85       	ldd	r25, Y+15	; 0x0f
    361e:	a8 89       	ldd	r26, Y+16	; 0x10
    3620:	b9 89       	ldd	r27, Y+17	; 0x11
    3622:	88 0d       	add	r24, r8
    3624:	99 1d       	adc	r25, r9
    3626:	aa 1d       	adc	r26, r10
    3628:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    362a:	88 16       	cp	r8, r24
    362c:	99 06       	cpc	r9, r25
    362e:	aa 06       	cpc	r10, r26
    3630:	bb 06       	cpc	r11, r27
    3632:	70 f4       	brcc	.+28     	; 0x3650 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3634:	8a 83       	std	Y+2, r24	; 0x02
    3636:	9b 83       	std	Y+3, r25	; 0x03
    3638:	ac 83       	std	Y+4, r26	; 0x04
    363a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    363c:	db 87       	std	Y+11, r29	; 0x0b
    363e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3640:	b8 01       	movw	r22, r16
    3642:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <pxCurrentTimerList>
    3646:	90 91 9e 16 	lds	r25, 0x169E	; 0x80169e <pxCurrentTimerList+0x1>
    364a:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    364e:	0a c0       	rjmp	.+20     	; 0x3664 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3650:	c1 2c       	mov	r12, r1
    3652:	d1 2c       	mov	r13, r1
    3654:	76 01       	movw	r14, r12
    3656:	00 e0       	ldi	r16, 0x00	; 0
    3658:	10 e0       	ldi	r17, 0x00	; 0
    365a:	a5 01       	movw	r20, r10
    365c:	94 01       	movw	r18, r8
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	ce 01       	movw	r24, r28
    3662:	5a df       	rcall	.-332    	; 0x3518 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3664:	e0 91 9d 16 	lds	r30, 0x169D	; 0x80169d <pxCurrentTimerList>
    3668:	f0 91 9e 16 	lds	r31, 0x169E	; 0x80169e <pxCurrentTimerList+0x1>
    366c:	80 81       	ld	r24, Z
    366e:	81 11       	cpse	r24, r1
    3670:	be cf       	rjmp	.-132    	; 0x35ee <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3672:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <pxOverflowTimerList>
    3676:	90 91 9c 16 	lds	r25, 0x169C	; 0x80169c <pxOverflowTimerList+0x1>
    367a:	90 93 9e 16 	sts	0x169E, r25	; 0x80169e <pxCurrentTimerList+0x1>
    367e:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3682:	f0 93 9c 16 	sts	0x169C, r31	; 0x80169c <pxOverflowTimerList+0x1>
    3686:	e0 93 9b 16 	sts	0x169B, r30	; 0x80169b <pxOverflowTimerList>
    }
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	ff 90       	pop	r15
    3694:	ef 90       	pop	r14
    3696:	df 90       	pop	r13
    3698:	cf 90       	pop	r12
    369a:	bf 90       	pop	r11
    369c:	af 90       	pop	r10
    369e:	9f 90       	pop	r9
    36a0:	8f 90       	pop	r8
    36a2:	08 95       	ret

000036a4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    36a4:	cf 92       	push	r12
    36a6:	df 92       	push	r13
    36a8:	ef 92       	push	r14
    36aa:	ff 92       	push	r15
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    36b2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskGetTickCount>
    36b6:	6b 01       	movw	r12, r22
    36b8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    36ba:	80 91 93 16 	lds	r24, 0x1693	; 0x801693 <xLastTime.2436>
    36be:	90 91 94 16 	lds	r25, 0x1694	; 0x801694 <xLastTime.2436+0x1>
    36c2:	a0 91 95 16 	lds	r26, 0x1695	; 0x801695 <xLastTime.2436+0x2>
    36c6:	b0 91 96 16 	lds	r27, 0x1696	; 0x801696 <xLastTime.2436+0x3>
    36ca:	c8 16       	cp	r12, r24
    36cc:	d9 06       	cpc	r13, r25
    36ce:	ea 06       	cpc	r14, r26
    36d0:	fb 06       	cpc	r15, r27
    36d2:	20 f4       	brcc	.+8      	; 0x36dc <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    36d4:	7f df       	rcall	.-258    	; 0x35d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	88 83       	st	Y, r24
    36da:	01 c0       	rjmp	.+2      	; 0x36de <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    36dc:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    36de:	c0 92 93 16 	sts	0x1693, r12	; 0x801693 <xLastTime.2436>
    36e2:	d0 92 94 16 	sts	0x1694, r13	; 0x801694 <xLastTime.2436+0x1>
    36e6:	e0 92 95 16 	sts	0x1695, r14	; 0x801695 <xLastTime.2436+0x2>
    36ea:	f0 92 96 16 	sts	0x1696, r15	; 0x801696 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    36ee:	c7 01       	movw	r24, r14
    36f0:	b6 01       	movw	r22, r12
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	ff 90       	pop	r15
    36f8:	ef 90       	pop	r14
    36fa:	df 90       	pop	r13
    36fc:	cf 90       	pop	r12
    36fe:	08 95       	ret

00003700 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3700:	4f 92       	push	r4
    3702:	5f 92       	push	r5
    3704:	6f 92       	push	r6
    3706:	7f 92       	push	r7
    3708:	8f 92       	push	r8
    370a:	9f 92       	push	r9
    370c:	af 92       	push	r10
    370e:	bf 92       	push	r11
    3710:	cf 92       	push	r12
    3712:	df 92       	push	r13
    3714:	ef 92       	push	r14
    3716:	ff 92       	push	r15
    3718:	0f 93       	push	r16
    371a:	1f 93       	push	r17
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	4b 01       	movw	r8, r22
    3722:	5c 01       	movw	r10, r24
    3724:	29 01       	movw	r4, r18
    3726:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3728:	e0 91 9d 16 	lds	r30, 0x169D	; 0x80169d <pxCurrentTimerList>
    372c:	f0 91 9e 16 	lds	r31, 0x169E	; 0x80169e <pxCurrentTimerList+0x1>
    3730:	07 80       	ldd	r0, Z+7	; 0x07
    3732:	f0 85       	ldd	r31, Z+8	; 0x08
    3734:	e0 2d       	mov	r30, r0
    3736:	c0 85       	ldd	r28, Z+8	; 0x08
    3738:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    373a:	ce 01       	movw	r24, r28
    373c:	02 96       	adiw	r24, 0x02	; 2
    373e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3742:	8e 89       	ldd	r24, Y+22	; 0x16
    3744:	82 ff       	sbrs	r24, 2
    3746:	1b c0       	rjmp	.+54     	; 0x377e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3748:	4e 85       	ldd	r20, Y+14	; 0x0e
    374a:	5f 85       	ldd	r21, Y+15	; 0x0f
    374c:	68 89       	ldd	r22, Y+16	; 0x10
    374e:	79 89       	ldd	r23, Y+17	; 0x11
    3750:	48 0d       	add	r20, r8
    3752:	59 1d       	adc	r21, r9
    3754:	6a 1d       	adc	r22, r10
    3756:	7b 1d       	adc	r23, r11
    3758:	75 01       	movw	r14, r10
    375a:	64 01       	movw	r12, r8
    375c:	93 01       	movw	r18, r6
    375e:	82 01       	movw	r16, r4
    3760:	ce 01       	movw	r24, r28
    3762:	47 de       	rcall	.-882    	; 0x33f2 <prvInsertTimerInActiveList>
    3764:	88 23       	and	r24, r24
    3766:	69 f0       	breq	.+26     	; 0x3782 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3768:	c1 2c       	mov	r12, r1
    376a:	d1 2c       	mov	r13, r1
    376c:	76 01       	movw	r14, r12
    376e:	00 e0       	ldi	r16, 0x00	; 0
    3770:	10 e0       	ldi	r17, 0x00	; 0
    3772:	a5 01       	movw	r20, r10
    3774:	94 01       	movw	r18, r8
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	ce 01       	movw	r24, r28
    377a:	ce de       	rcall	.-612    	; 0x3518 <xTimerGenericCommand>
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    377e:	8e 7f       	andi	r24, 0xFE	; 254
    3780:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3782:	ec 89       	ldd	r30, Y+20	; 0x14
    3784:	fd 89       	ldd	r31, Y+21	; 0x15
    3786:	ce 01       	movw	r24, r28
    3788:	19 95       	eicall
    }
    378a:	df 91       	pop	r29
    378c:	cf 91       	pop	r28
    378e:	1f 91       	pop	r17
    3790:	0f 91       	pop	r16
    3792:	ff 90       	pop	r15
    3794:	ef 90       	pop	r14
    3796:	df 90       	pop	r13
    3798:	cf 90       	pop	r12
    379a:	bf 90       	pop	r11
    379c:	af 90       	pop	r10
    379e:	9f 90       	pop	r9
    37a0:	8f 90       	pop	r8
    37a2:	7f 90       	pop	r7
    37a4:	6f 90       	pop	r6
    37a6:	5f 90       	pop	r5
    37a8:	4f 90       	pop	r4
    37aa:	08 95       	ret

000037ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    37ac:	8f 92       	push	r8
    37ae:	9f 92       	push	r9
    37b0:	af 92       	push	r10
    37b2:	bf 92       	push	r11
    37b4:	cf 92       	push	r12
    37b6:	df 92       	push	r13
    37b8:	ef 92       	push	r14
    37ba:	ff 92       	push	r15
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	1f 92       	push	r1
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
    37c8:	6b 01       	movw	r12, r22
    37ca:	7c 01       	movw	r14, r24
    37cc:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    37ce:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    37d2:	ce 01       	movw	r24, r28
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	66 df       	rcall	.-308    	; 0x36a4 <prvSampleTimeNow>
    37d8:	4b 01       	movw	r8, r22
    37da:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	81 11       	cpse	r24, r1
    37e0:	2d c0       	rjmp	.+90     	; 0x383c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    37e2:	11 11       	cpse	r17, r1
    37e4:	0d c0       	rjmp	.+26     	; 0x3800 <prvProcessTimerOrBlockTask+0x54>
    37e6:	8c 14       	cp	r8, r12
    37e8:	9d 04       	cpc	r9, r13
    37ea:	ae 04       	cpc	r10, r14
    37ec:	bf 04       	cpc	r11, r15
    37ee:	40 f0       	brcs	.+16     	; 0x3800 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    37f0:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    37f4:	a5 01       	movw	r20, r10
    37f6:	94 01       	movw	r18, r8
    37f8:	c7 01       	movw	r24, r14
    37fa:	b6 01       	movw	r22, r12
    37fc:	81 df       	rcall	.-254    	; 0x3700 <prvProcessExpiredTimer>
    37fe:	20 c0       	rjmp	.+64     	; 0x3840 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3800:	11 23       	and	r17, r17
    3802:	41 f0       	breq	.+16     	; 0x3814 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3804:	e0 91 9b 16 	lds	r30, 0x169B	; 0x80169b <pxOverflowTimerList>
    3808:	f0 91 9c 16 	lds	r31, 0x169C	; 0x80169c <pxOverflowTimerList+0x1>
    380c:	80 81       	ld	r24, Z
    380e:	11 e0       	ldi	r17, 0x01	; 1
    3810:	81 11       	cpse	r24, r1
    3812:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3814:	b7 01       	movw	r22, r14
    3816:	a6 01       	movw	r20, r12
    3818:	48 19       	sub	r20, r8
    381a:	59 09       	sbc	r21, r9
    381c:	6a 09       	sbc	r22, r10
    381e:	7b 09       	sbc	r23, r11
    3820:	21 2f       	mov	r18, r17
    3822:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <xTimerQueue>
    3826:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <xTimerQueue+0x1>
    382a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    382e:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
    3832:	81 11       	cpse	r24, r1
    3834:	05 c0       	rjmp	.+10     	; 0x3840 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3836:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    383a:	02 c0       	rjmp	.+4      	; 0x3840 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    383c:	0e 94 30 11 	call	0x2260	; 0x2260 <xTaskResumeAll>
            }
        }
    }
    3840:	0f 90       	pop	r0
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	df 90       	pop	r13
    384e:	cf 90       	pop	r12
    3850:	bf 90       	pop	r11
    3852:	af 90       	pop	r10
    3854:	9f 90       	pop	r9
    3856:	8f 90       	pop	r8
    3858:	08 95       	ret

0000385a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    385a:	af 92       	push	r10
    385c:	bf 92       	push	r11
    385e:	cf 92       	push	r12
    3860:	df 92       	push	r13
    3862:	ef 92       	push	r14
    3864:	ff 92       	push	r15
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	28 97       	sbiw	r28, 0x08	; 8
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	de bf       	out	0x3e, r29	; 62
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    387e:	82 c0       	rjmp	.+260    	; 0x3984 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	88 23       	and	r24, r24
    3884:	0c f4       	brge	.+2      	; 0x3888 <prvProcessReceivedCommands+0x2e>
    3886:	7e c0       	rjmp	.+252    	; 0x3984 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3888:	ae 80       	ldd	r10, Y+6	; 0x06
    388a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    388c:	d5 01       	movw	r26, r10
    388e:	1c 96       	adiw	r26, 0x0c	; 12
    3890:	8d 91       	ld	r24, X+
    3892:	9c 91       	ld	r25, X
    3894:	1d 97       	sbiw	r26, 0x0d	; 13
    3896:	89 2b       	or	r24, r25
    3898:	21 f0       	breq	.+8      	; 0x38a2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    389a:	c5 01       	movw	r24, r10
    389c:	02 96       	adiw	r24, 0x02	; 2
    389e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    38a2:	ce 01       	movw	r24, r28
    38a4:	08 96       	adiw	r24, 0x08	; 8
    38a6:	fe de       	rcall	.-516    	; 0x36a4 <prvSampleTimeNow>
    38a8:	8b 01       	movw	r16, r22
    38aa:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    38ac:	e9 81       	ldd	r30, Y+1	; 0x01
    38ae:	0e 2e       	mov	r0, r30
    38b0:	00 0c       	add	r0, r0
    38b2:	ff 0b       	sbc	r31, r31
    38b4:	ea 30       	cpi	r30, 0x0A	; 10
    38b6:	f1 05       	cpc	r31, r1
    38b8:	08 f0       	brcs	.+2      	; 0x38bc <prvProcessReceivedCommands+0x62>
    38ba:	64 c0       	rjmp	.+200    	; 0x3984 <prvProcessReceivedCommands+0x12a>
    38bc:	88 27       	eor	r24, r24
    38be:	ee 58       	subi	r30, 0x8E	; 142
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	8f 4f       	sbci	r24, 0xFF	; 255
    38c4:	0c 94 31 2f 	jmp	0x5e62	; 0x5e62 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    38c8:	f5 01       	movw	r30, r10
    38ca:	86 89       	ldd	r24, Z+22	; 0x16
    38cc:	81 60       	ori	r24, 0x01	; 1
    38ce:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    38d0:	ca 80       	ldd	r12, Y+2	; 0x02
    38d2:	db 80       	ldd	r13, Y+3	; 0x03
    38d4:	ec 80       	ldd	r14, Y+4	; 0x04
    38d6:	fd 80       	ldd	r15, Y+5	; 0x05
    38d8:	46 85       	ldd	r20, Z+14	; 0x0e
    38da:	57 85       	ldd	r21, Z+15	; 0x0f
    38dc:	60 89       	ldd	r22, Z+16	; 0x10
    38de:	71 89       	ldd	r23, Z+17	; 0x11
    38e0:	4c 0d       	add	r20, r12
    38e2:	5d 1d       	adc	r21, r13
    38e4:	6e 1d       	adc	r22, r14
    38e6:	7f 1d       	adc	r23, r15
    38e8:	c5 01       	movw	r24, r10
    38ea:	83 dd       	rcall	.-1274   	; 0x33f2 <prvInsertTimerInActiveList>
    38ec:	88 23       	and	r24, r24
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <prvProcessReceivedCommands+0x98>
    38f0:	49 c0       	rjmp	.+146    	; 0x3984 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    38f2:	d5 01       	movw	r26, r10
    38f4:	54 96       	adiw	r26, 0x14	; 20
    38f6:	ed 91       	ld	r30, X+
    38f8:	fc 91       	ld	r31, X
    38fa:	55 97       	sbiw	r26, 0x15	; 21
    38fc:	c5 01       	movw	r24, r10
    38fe:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3900:	f5 01       	movw	r30, r10
    3902:	86 89       	ldd	r24, Z+22	; 0x16
    3904:	82 ff       	sbrs	r24, 2
    3906:	3e c0       	rjmp	.+124    	; 0x3984 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3908:	4a 81       	ldd	r20, Y+2	; 0x02
    390a:	5b 81       	ldd	r21, Y+3	; 0x03
    390c:	6c 81       	ldd	r22, Y+4	; 0x04
    390e:	7d 81       	ldd	r23, Y+5	; 0x05
    3910:	86 85       	ldd	r24, Z+14	; 0x0e
    3912:	97 85       	ldd	r25, Z+15	; 0x0f
    3914:	a0 89       	ldd	r26, Z+16	; 0x10
    3916:	b1 89       	ldd	r27, Z+17	; 0x11
    3918:	9a 01       	movw	r18, r20
    391a:	ab 01       	movw	r20, r22
    391c:	28 0f       	add	r18, r24
    391e:	39 1f       	adc	r19, r25
    3920:	4a 1f       	adc	r20, r26
    3922:	5b 1f       	adc	r21, r27
    3924:	c1 2c       	mov	r12, r1
    3926:	d1 2c       	mov	r13, r1
    3928:	76 01       	movw	r14, r12
    392a:	00 e0       	ldi	r16, 0x00	; 0
    392c:	10 e0       	ldi	r17, 0x00	; 0
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	c5 01       	movw	r24, r10
    3932:	f2 dd       	rcall	.-1052   	; 0x3518 <xTimerGenericCommand>
    3934:	27 c0       	rjmp	.+78     	; 0x3984 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3936:	d5 01       	movw	r26, r10
    3938:	56 96       	adiw	r26, 0x16	; 22
    393a:	8c 91       	ld	r24, X
    393c:	56 97       	sbiw	r26, 0x16	; 22
    393e:	8e 7f       	andi	r24, 0xFE	; 254
    3940:	56 96       	adiw	r26, 0x16	; 22
    3942:	8c 93       	st	X, r24
                        break;
    3944:	1f c0       	rjmp	.+62     	; 0x3984 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3946:	f5 01       	movw	r30, r10
    3948:	86 89       	ldd	r24, Z+22	; 0x16
    394a:	81 60       	ori	r24, 0x01	; 1
    394c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    394e:	4a 81       	ldd	r20, Y+2	; 0x02
    3950:	5b 81       	ldd	r21, Y+3	; 0x03
    3952:	6c 81       	ldd	r22, Y+4	; 0x04
    3954:	7d 81       	ldd	r23, Y+5	; 0x05
    3956:	46 87       	std	Z+14, r20	; 0x0e
    3958:	57 87       	std	Z+15, r21	; 0x0f
    395a:	60 8b       	std	Z+16, r22	; 0x10
    395c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    395e:	40 0f       	add	r20, r16
    3960:	51 1f       	adc	r21, r17
    3962:	62 1f       	adc	r22, r18
    3964:	73 1f       	adc	r23, r19
    3966:	68 01       	movw	r12, r16
    3968:	79 01       	movw	r14, r18
    396a:	c5 01       	movw	r24, r10
    396c:	42 dd       	rcall	.-1404   	; 0x33f2 <prvInsertTimerInActiveList>
                        break;
    396e:	0a c0       	rjmp	.+20     	; 0x3984 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3970:	f5 01       	movw	r30, r10
    3972:	86 89       	ldd	r24, Z+22	; 0x16
    3974:	81 fd       	sbrc	r24, 1
    3976:	04 c0       	rjmp	.+8      	; 0x3980 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3978:	c5 01       	movw	r24, r10
    397a:	0e 94 bf 04 	call	0x97e	; 0x97e <vPortFree>
    397e:	02 c0       	rjmp	.+4      	; 0x3984 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3980:	8e 7f       	andi	r24, 0xFE	; 254
    3982:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	a9 01       	movw	r20, r18
    398a:	be 01       	movw	r22, r28
    398c:	6f 5f       	subi	r22, 0xFF	; 255
    398e:	7f 4f       	sbci	r23, 0xFF	; 255
    3990:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <xTimerQueue>
    3994:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <xTimerQueue+0x1>
    3998:	0e 94 af 08 	call	0x115e	; 0x115e <xQueueReceive>
    399c:	81 11       	cpse	r24, r1
    399e:	70 cf       	rjmp	.-288    	; 0x3880 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    39a0:	28 96       	adiw	r28, 0x08	; 8
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	cf 90       	pop	r12
    39bc:	bf 90       	pop	r11
    39be:	af 90       	pop	r10
    39c0:	08 95       	ret

000039c2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    39c2:	08 95       	ret

000039c4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    39c4:	84 b1       	in	r24, 0x04	; 4
    39c6:	80 68       	ori	r24, 0x80	; 128
    39c8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    39ca:	85 b1       	in	r24, 0x05	; 5
    39cc:	80 68       	ori	r24, 0x80	; 128
    39ce:	85 b9       	out	0x05, r24	; 5
    39d0:	08 95       	ret

000039d2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    39d2:	83 b1       	in	r24, 0x03	; 3
    39d4:	80 68       	ori	r24, 0x80	; 128
    39d6:	83 b9       	out	0x03, r24	; 3
    39d8:	08 95       	ret

000039da <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    39da:	f4 df       	rcall	.-24     	; 0x39c4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    39dc:	2f ef       	ldi	r18, 0xFF	; 255
    39de:	80 e7       	ldi	r24, 0x70	; 112
    39e0:	92 e0       	ldi	r25, 0x02	; 2
    39e2:	21 50       	subi	r18, 0x01	; 1
    39e4:	80 40       	sbci	r24, 0x00	; 0
    39e6:	90 40       	sbci	r25, 0x00	; 0
    39e8:	e1 f7       	brne	.-8      	; 0x39e2 <vApplicationMallocFailedHook+0x8>
    39ea:	00 c0       	rjmp	.+0      	; 0x39ec <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    39ec:	00 00       	nop
    39ee:	f1 df       	rcall	.-30     	; 0x39d2 <prvBlinkMainLed>
    39f0:	f5 cf       	rjmp	.-22     	; 0x39dc <vApplicationMallocFailedHook+0x2>

000039f2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    39f2:	e8 df       	rcall	.-48     	; 0x39c4 <prvSetMainLedOn>
    39f4:	2f ef       	ldi	r18, 0xFF	; 255
    39f6:	87 ea       	ldi	r24, 0xA7	; 167
    39f8:	91 e6       	ldi	r25, 0x61	; 97
    39fa:	21 50       	subi	r18, 0x01	; 1
    39fc:	80 40       	sbci	r24, 0x00	; 0
    39fe:	90 40       	sbci	r25, 0x00	; 0
    3a00:	e1 f7       	brne	.-8      	; 0x39fa <vApplicationStackOverflowHook+0x8>
    3a02:	00 c0       	rjmp	.+0      	; 0x3a04 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3a04:	00 00       	nop
    3a06:	e5 df       	rcall	.-54     	; 0x39d2 <prvBlinkMainLed>
    3a08:	f5 cf       	rjmp	.-22     	; 0x39f4 <vApplicationStackOverflowHook+0x2>

00003a0a <lora_downLink_task>:

void lora_downLink_task()
{
	for(;;)
	{
		printf("Before message buffer downlink\n");
    3a0a:	86 eb       	ldi	r24, 0xB6	; 182
    3a0c:	92 e0       	ldi	r25, 0x02	; 2
    3a0e:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
		xMessageBufferReceive(downlinkMessageBuffer, &lora_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    3a12:	0f ef       	ldi	r16, 0xFF	; 255
    3a14:	1f ef       	ldi	r17, 0xFF	; 255
    3a16:	98 01       	movw	r18, r16
    3a18:	46 e1       	ldi	r20, 0x16	; 22
    3a1a:	50 e0       	ldi	r21, 0x00	; 0
    3a1c:	69 e7       	ldi	r22, 0x79	; 121
    3a1e:	78 e1       	ldi	r23, 0x18	; 24
    3a20:	80 91 9d 18 	lds	r24, 0x189D	; 0x80189d <downlinkMessageBuffer>
    3a24:	90 91 9e 18 	lds	r25, 0x189E	; 0x80189e <downlinkMessageBuffer+0x1>
    3a28:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xStreamBufferReceive>
		printf("DOWN LINK<<<<<: from port: %d with %d bytes received!",lora_downlink_payload.portNo, lora_downlink_payload.len); // Just for Debug
    3a2c:	c9 e7       	ldi	r28, 0x79	; 121
    3a2e:	d8 e1       	ldi	r29, 0x18	; 24
    3a30:	99 81       	ldd	r25, Y+1	; 0x01
    3a32:	88 81       	ld	r24, Y
    3a34:	1f 92       	push	r1
    3a36:	9f 93       	push	r25
    3a38:	1f 92       	push	r1
    3a3a:	8f 93       	push	r24
    3a3c:	85 ed       	ldi	r24, 0xD5	; 213
    3a3e:	92 e0       	ldi	r25, 0x02	; 2
    3a40:	9f 93       	push	r25
    3a42:	8f 93       	push	r24
    3a44:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
		if (1 == lora_downlink_payload.len) // Check that we have got the expected 4 bytes
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	81 30       	cpi	r24, 0x01	; 1
    3a58:	99 f5       	brne	.+102    	; 0x3ac0 <lora_downLink_task+0xb6>
		{
			 uint8_t level =  (lora_downlink_payload.bytes[0]);
    3a5a:	c0 91 7b 18 	lds	r28, 0x187B	; 0x80187b <lora_downlink_payload+0x2>
			 printf("%d dddd\n", lora_downlink_payload.bytes[0]);
    3a5e:	1f 92       	push	r1
    3a60:	cf 93       	push	r28
    3a62:	8b e0       	ldi	r24, 0x0B	; 11
    3a64:	93 e0       	ldi	r25, 0x03	; 3
    3a66:	9f 93       	push	r25
    3a68:	8f 93       	push	r24
    3a6a:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
			 printf("%d\n",xMessageBufferIsFull(downlinkMessageBuffer) == pdFALSE);
    3a6e:	80 91 9d 18 	lds	r24, 0x189D	; 0x80189d <downlinkMessageBuffer>
    3a72:	90 91 9e 18 	lds	r25, 0x189E	; 0x80189e <downlinkMessageBuffer+0x1>
    3a76:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <xStreamBufferIsFull>
    3a7a:	91 e0       	ldi	r25, 0x01	; 1
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	81 11       	cpse	r24, r1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	2f 93       	push	r18
    3a84:	9f 93       	push	r25
    3a86:	84 e1       	ldi	r24, 0x14	; 20
    3a88:	93 e0       	ldi	r25, 0x03	; 3
    3a8a:	9f 93       	push	r25
    3a8c:	8f 93       	push	r24
    3a8e:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
			 setVentilationLevel(level);
    3a92:	8c 2f       	mov	r24, r28
    3a94:	0e 94 09 02 	call	0x412	; 0x412 <setVentilationLevel>
			 xSemaphoreGive(ventilationSemaphore);
    3a98:	00 e0       	ldi	r16, 0x00	; 0
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	a9 01       	movw	r20, r18
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	70 e0       	ldi	r23, 0x00	; 0
    3aa4:	80 91 99 18 	lds	r24, 0x1899	; 0x801899 <ventilationSemaphore>
    3aa8:	90 91 9a 18 	lds	r25, 0x189A	; 0x80189a <ventilationSemaphore+0x1>
    3aac:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    3ab0:	8d b7       	in	r24, 0x3d	; 61
    3ab2:	9e b7       	in	r25, 0x3e	; 62
    3ab4:	08 96       	adiw	r24, 0x08	; 8
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	9e bf       	out	0x3e, r25	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	8d bf       	out	0x3d, r24	; 61
		}

		vTaskDelay(100);
    3ac0:	64 e6       	ldi	r22, 0x64	; 100
    3ac2:	70 e0       	ldi	r23, 0x00	; 0
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
	}
    3acc:	9e cf       	rjmp	.-196    	; 0x3a0a <lora_downLink_task>

00003ace <lora_downlink_handler_create>:

}


 void lora_downlink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3ace:	ef 92       	push	r14
    3ad0:	ff 92       	push	r15
    3ad2:	0f 93       	push	r16

 xTaskCreate(
    3ad4:	e1 2c       	mov	r14, r1
    3ad6:	f1 2c       	mov	r15, r1
    3ad8:	08 2f       	mov	r16, r24
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 ec       	ldi	r20, 0xC0	; 192
    3ae0:	50 e0       	ldi	r21, 0x00	; 0
    3ae2:	68 e1       	ldi	r22, 0x18	; 24
    3ae4:	73 e0       	ldi	r23, 0x03	; 3
    3ae6:	85 e0       	ldi	r24, 0x05	; 5
    3ae8:	9d e1       	ldi	r25, 0x1D	; 29
    3aea:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <xTaskCreate>
 , NULL
 ,	tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
 , NULL );
	 
	 
 }
    3aee:	0f 91       	pop	r16
    3af0:	ff 90       	pop	r15
    3af2:	ef 90       	pop	r14
    3af4:	08 95       	ret

00003af6 <_lora_setup>:
 #define LORA_appKEY "266F209D5D1F15A2AF87F013DC002926"

 static char _out_buf[100];

 static void _lora_setup(void)
 {
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	0e 94 de 2a 	call	0x55bc	; 0x55bc <status_leds_slowBlink>

	 // Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3b00:	ff d4       	rcall	.+2558   	; 0x4500 <lora_driver_rn2483FactoryReset>
    3b02:	7b d7       	rcall	.+3830   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3b04:	9f 93       	push	r25
    3b06:	8f 93       	push	r24
    3b08:	86 e2       	ldi	r24, 0x26	; 38
    3b0a:	93 e0       	ldi	r25, 0x03	; 3
    3b0c:	9f 93       	push	r25
    3b0e:	8f 93       	push	r24
    3b10:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3b14:	73 d6       	rcall	.+3302   	; 0x47fc <lora_driver_configureToEu868>
    3b16:	71 d7       	rcall	.+3810   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3b18:	9f 93       	push	r25
    3b1a:	8f 93       	push	r24
    3b1c:	89 e3       	ldi	r24, 0x39	; 57
    3b1e:	93 e0       	ldi	r25, 0x03	; 3
    3b20:	9f 93       	push	r25
    3b22:	8f 93       	push	r24
    3b24:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3b28:	85 eb       	ldi	r24, 0xB5	; 181

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
    3b2a:	96 e1       	ldi	r25, 0x16	; 22
    3b2c:	fb d4       	rcall	.+2550   	; 0x4524 <lora_driver_getRn2483Hweui>
    3b2e:	65 d7       	rcall	.+3786   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3b30:	c5 eb       	ldi	r28, 0xB5	; 181
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3b32:	d6 e1       	ldi	r29, 0x16	; 22
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	9f 93       	push	r25
    3b3a:	8f 93       	push	r24
    3b3c:	82 e5       	ldi	r24, 0x52	; 82
    3b3e:	93 e0       	ldi	r25, 0x03	; 3
    3b40:	9f 93       	push	r25
    3b42:	8f 93       	push	r24
    3b44:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3b48:	ce 01       	movw	r24, r28

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3b4a:	08 d5       	rcall	.+2576   	; 0x455c <lora_driver_setDeviceIdentifier>
    3b4c:	56 d7       	rcall	.+3756   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3b4e:	9f 93       	push	r25
    3b50:	8f 93       	push	r24
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	86 e6       	ldi	r24, 0x66	; 102
    3b58:	93 e0       	ldi	r25, 0x03	; 3
    3b5a:	9f 93       	push	r25
    3b5c:	8f 93       	push	r24
    3b5e:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3b62:	ae 01       	movw	r20, r28

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3b64:	6b e7       	ldi	r22, 0x7B	; 123
    3b66:	73 e0       	ldi	r23, 0x03	; 3
    3b68:	8c e9       	ldi	r24, 0x9C	; 156
    3b6a:	93 e0       	ldi	r25, 0x03	; 3
    3b6c:	25 d7       	rcall	.+3658   	; 0x49b8 <lora_driver_setOtaaIdentity>
    3b6e:	45 d7       	rcall	.+3722   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3b70:	9f 93       	push	r25
    3b72:	8f 93       	push	r24
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	8b e7       	ldi	r24, 0x7B	; 123
    3b7a:	93 e0       	ldi	r25, 0x03	; 3
    3b7c:	9f 93       	push	r25
    3b7e:	8f 93       	push	r24
    3b80:	8c e9       	ldi	r24, 0x9C	; 156
    3b82:	93 e0       	ldi	r25, 0x03	; 3
    3b84:	9f 93       	push	r25
    3b86:	8f 93       	push	r24
    3b88:	8d ea       	ldi	r24, 0xAD	; 173
    3b8a:	93 e0       	ldi	r25, 0x03	; 3
    3b8c:	9f 93       	push	r25
    3b8e:	8f 93       	push	r24
    3b90:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3b94:	16 d5       	rcall	.+2604   	; 0x45c2 <lora_driver_saveMac>

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b96:	31 d7       	rcall	.+3682   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3b98:	9f 93       	push	r25
    3b9a:	8f 93       	push	r24
    3b9c:	83 ee       	ldi	r24, 0xE3	; 227
    3b9e:	93 e0       	ldi	r25, 0x03	; 3
    3ba0:	9f 93       	push	r25
    3ba2:	8f 93       	push	r24
    3ba4:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3ba8:	8d b7       	in	r24, 0x3d	; 61

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3baa:	9e b7       	in	r25, 0x3e	; 62
    3bac:	82 96       	adiw	r24, 0x22	; 34
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	9e bf       	out	0x3e, r25	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	8d bf       	out	0x3d, r24	; 61
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	fd d5       	rcall	.+3066   	; 0x47b6 <lora_driver_setAdaptiveDataRate>
    3bbc:	1e d7       	rcall	.+3644   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3bbe:	9f 93       	push	r25
    3bc0:	8f 93       	push	r24
    3bc2:	82 ef       	ldi	r24, 0xF2	; 242
    3bc4:	93 e0       	ldi	r25, 0x03	; 3
    3bc6:	9f 93       	push	r25
    3bc8:	8f 93       	push	r24
    3bca:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3bce:	84 ef       	ldi	r24, 0xF4	; 244

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3bd0:	91 e0       	ldi	r25, 0x01	; 1
    3bd2:	fc d5       	rcall	.+3064   	; 0x47cc <lora_driver_setReceiveDelay>
    3bd4:	12 d7       	rcall	.+3620   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3bd6:	9f 93       	push	r25
    3bd8:	8f 93       	push	r24
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	8f 93       	push	r24
    3bde:	84 ef       	ldi	r24, 0xF4	; 244
    3be0:	8f 93       	push	r24
    3be2:	83 e1       	ldi	r24, 0x13	; 19
    3be4:	94 e0       	ldi	r25, 0x04	; 4
    3be6:	9f 93       	push	r25
    3be8:	8f 93       	push	r24
    3bea:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3bee:	8d b7       	in	r24, 0x3d	; 61
    3bf0:	9e b7       	in	r25, 0x3e	; 62
    3bf2:	0a 96       	adiw	r24, 0x0a	; 10
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	9e bf       	out	0x3e, r25	; 62
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	8d bf       	out	0x3d, r24	; 61
    3bfe:	ca e0       	ldi	r28, 0x0A	; 10

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
    3c00:	80 e0       	ldi	r24, 0x00	; 0
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
    3c02:	e5 d4       	rcall	.+2506   	; 0x45ce <lora_driver_join>
    3c04:	d8 2f       	mov	r29, r24
    3c06:	f9 d6       	rcall	.+3570   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3c08:	9f 93       	push	r25
		 
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3c0a:	8f 93       	push	r24
    3c0c:	1f 92       	push	r1
    3c0e:	cf 93       	push	r28
    3c10:	83 e3       	ldi	r24, 0x33	; 51
    3c12:	94 e0       	ldi	r25, 0x04	; 4
    3c14:	9f 93       	push	r25
    3c16:	8f 93       	push	r24
    3c18:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3c1c:	0f 90       	pop	r0
    3c1e:	0f 90       	pop	r0
    3c20:	0f 90       	pop	r0

		 if ( rc != LORA_ACCEPTED)
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	d8 30       	cpi	r29, 0x08	; 8
    3c2a:	59 f0       	breq	.+22     	; 0x3c42 <_lora_setup+0x14c>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	0e 94 42 2b 	call	0x5684	; 0x5684 <status_leds_longPuls>
		 {
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
    3c32:	66 e3       	ldi	r22, 0x36	; 54
    3c34:	71 e0       	ldi	r23, 0x01	; 1
    3c36:	80 e0       	ldi	r24, 0x00	; 0
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
    3c3e:	c1 50       	subi	r28, 0x01	; 1
    3c40:	f9 f6       	brne	.-66     	; 0x3c00 <_lora_setup+0x10a>
    3c42:	d8 30       	cpi	r29, 0x08	; 8
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
    3c44:	21 f4       	brne	.+8      	; 0x3c4e <_lora_setup+0x158>
    3c46:	81 e0       	ldi	r24, 0x01	; 1

	 if (rc == LORA_ACCEPTED)
    3c48:	0e 94 24 2b 	call	0x5648	; 0x5648 <status_leds_ledOn>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
    3c4c:	09 c0       	rjmp	.+18     	; 0x3c60 <_lora_setup+0x16a>
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	0e 94 33 2b 	call	0x5666	; 0x5666 <status_leds_ledOff>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	0e 94 01 2b 	call	0x5602	; 0x5602 <status_leds_fastBlink>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
    3c5a:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    3c5e:	fd cf       	rjmp	.-6      	; 0x3c5a <_lora_setup+0x164>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
    3c60:	df 91       	pop	r29
    3c62:	cf 91       	pop	r28
    3c64:	08 95       	ret

00003c66 <lora_uplink_handler_task>:
		 }
	 }
 }
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	cd b7       	in	r28, 0x3d	; 61

 void lora_uplink_handler_task( void *pvParameters )
 {
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	6a 97       	sbiw	r28, 0x1a	; 26
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	33 d4       	rcall	.+2150   	; 0x44e4 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3c7e:	62 e0       	ldi	r22, 0x02	; 2
    3c80:	70 e0       	ldi	r23, 0x00	; 0
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3c8a:	80 e0       	ldi	r24, 0x00	; 0
    3c8c:	2b d4       	rcall	.+2134   	; 0x44e4 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3c8e:	66 e9       	ldi	r22, 0x96	; 150
    3c90:	70 e0       	ldi	r23, 0x00	; 0
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c9a:	dd d3       	rcall	.+1978   	; 0x4456 <lora_driver_flushBuffers>

	_lora_setup();
    3c9c:	2c df       	rcall	.-424    	; 0x3af6 <_lora_setup>
    3c9e:	83 e5       	ldi	r24, 0x53	; 83
	
	printf("a facut setup\n");	
    3ca0:	94 e0       	ldi	r25, 0x04	; 4
    3ca2:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
    3ca6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(60000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3caa:	69 83       	std	Y+1, r22	; 0x01
    3cac:	7a 83       	std	Y+2, r23	; 0x02
    3cae:	8b 83       	std	Y+3, r24	; 0x03
    3cb0:	9c 83       	std	Y+4, r25	; 0x04

	//size_t bytesReceivedApplication;

	sensorDataPackageHandler_setPackage_lenght(6);
    3cb2:	86 e0       	ldi	r24, 0x06	; 6
    3cb4:	88 d0       	rcall	.+272    	; 0x3dc6 <sensorDataPackageHandler_setPackage_lenght>
	
	for(;;)
	{
		lora_driver_payload_t _uplink_payload = sensorDataPackageHandler_getLoRaPayload(2);
    3cb6:	62 e0       	ldi	r22, 0x02	; 2
    3cb8:	ce 01       	movw	r24, r28
    3cba:	05 96       	adiw	r24, 0x05	; 5
    3cbc:	96 d0       	rcall	.+300    	; 0x3dea <sensorDataPackageHandler_getLoRaPayload>
    3cbe:	81 e6       	ldi	r24, 0x61	; 97
		printf("took data from package handler \n");
    3cc0:	94 e0       	ldi	r25, 0x04	; 4
    3cc2:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
    3cc6:	81 e8       	ldi	r24, 0x81	; 129

		printf("before delay\n");
    3cc8:	94 e0       	ldi	r25, 0x04	; 4
    3cca:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
    3cce:	48 e8       	ldi	r20, 0x88	; 136
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3cd0:	5e e0       	ldi	r21, 0x0E	; 14
    3cd2:	60 e0       	ldi	r22, 0x00	; 0
    3cd4:	70 e0       	ldi	r23, 0x00	; 0
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	01 96       	adiw	r24, 0x01	; 1
    3cda:	0e 94 0c 12 	call	0x2418	; 0x2418 <xTaskDelayUntil>
    3cde:	8e e8       	ldi	r24, 0x8E	; 142
		printf("after delay, but before sending \n");
    3ce0:	94 e0       	ldi	r25, 0x04	; 4
    3ce2:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
    3ce6:	8e 81       	ldd	r24, Y+6	; 0x06
		printf("%d payload\n",_uplink_payload.len);
    3ce8:	1f 92       	push	r1
    3cea:	8f 93       	push	r24
    3cec:	8f ea       	ldi	r24, 0xAF	; 175
    3cee:	94 e0       	ldi	r25, 0x04	; 4
    3cf0:	9f 93       	push	r25
    3cf2:	8f 93       	push	r24
    3cf4:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3cf8:	83 e0       	ldi	r24, 0x03	; 3

		if( _uplink_payload.bytes > 0 )
		{
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3cfa:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <status_leds_shortPuls>
    3cfe:	8f 81       	ldd	r24, Y+7	; 0x07
			printf("0 -> %x\n", _uplink_payload.bytes[0]);
    3d00:	1f 92       	push	r1
    3d02:	8f 93       	push	r24
    3d04:	8b eb       	ldi	r24, 0xBB	; 187
    3d06:	94 e0       	ldi	r25, 0x04	; 4
    3d08:	9f 93       	push	r25
    3d0a:	8f 93       	push	r24
    3d0c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3d10:	88 85       	ldd	r24, Y+8	; 0x08
			printf("1 -> %x\n", _uplink_payload.bytes[1]);
    3d12:	1f 92       	push	r1
    3d14:	8f 93       	push	r24
    3d16:	84 ec       	ldi	r24, 0xC4	; 196
    3d18:	94 e0       	ldi	r25, 0x04	; 4
    3d1a:	9f 93       	push	r25
    3d1c:	8f 93       	push	r24
    3d1e:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3d22:	89 85       	ldd	r24, Y+9	; 0x09
			printf("2 -> %x\n", _uplink_payload.bytes[2]);
    3d24:	1f 92       	push	r1
    3d26:	8f 93       	push	r24
    3d28:	8d ec       	ldi	r24, 0xCD	; 205
    3d2a:	94 e0       	ldi	r25, 0x04	; 4
    3d2c:	9f 93       	push	r25
    3d2e:	8f 93       	push	r24
    3d30:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3d34:	8a 85       	ldd	r24, Y+10	; 0x0a
			printf("3 -> %x\n", _uplink_payload.bytes[3]);
    3d36:	1f 92       	push	r1
    3d38:	8f 93       	push	r24
    3d3a:	86 ed       	ldi	r24, 0xD6	; 214
    3d3c:	94 e0       	ldi	r25, 0x04	; 4
    3d3e:	9f 93       	push	r25
    3d40:	8f 93       	push	r24
    3d42:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3d46:	8b 85       	ldd	r24, Y+11	; 0x0b
			printf("4 -> %x\n", _uplink_payload.bytes[4]);
    3d48:	1f 92       	push	r1
    3d4a:	8f 93       	push	r24
    3d4c:	8f ed       	ldi	r24, 0xDF	; 223
    3d4e:	94 e0       	ldi	r25, 0x04	; 4
    3d50:	9f 93       	push	r25
    3d52:	8f 93       	push	r24
    3d54:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3d58:	8c 85       	ldd	r24, Y+12	; 0x0c
			printf("5 -> %x\n", _uplink_payload.bytes[5]);
    3d5a:	1f 92       	push	r1
    3d5c:	8f 93       	push	r24
    3d5e:	88 ee       	ldi	r24, 0xE8	; 232
    3d60:	94 e0       	ldi	r25, 0x04	; 4
    3d62:	9f 93       	push	r25
    3d64:	8f 93       	push	r24
    3d66:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
			printf("Uploaded Message ------------------>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3d6a:	be 01       	movw	r22, r28
    3d6c:	6b 5f       	subi	r22, 0xFB	; 251
    3d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	56 d4       	rcall	.+2220   	; 0x4620 <lora_driver_sendUploadMessage>
    3d74:	42 d6       	rcall	.+3204   	; 0x49fa <lora_driver_mapReturnCodeToText>
    3d76:	9f 93       	push	r25
    3d78:	8f 93       	push	r24
    3d7a:	81 ef       	ldi	r24, 0xF1	; 241
    3d7c:	94 e0       	ldi	r25, 0x04	; 4
    3d7e:	9f 93       	push	r25
    3d80:	8f 93       	push	r24
    3d82:	0e 94 d7 30 	call	0x61ae	; 0x61ae <printf>
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	f8 94       	cli
		}
		vTaskDelay(100);
    3d8a:	de bf       	out	0x3e, r29	; 62
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	64 e6       	ldi	r22, 0x64	; 100
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
    3d9c:	8c cf       	rjmp	.-232    	; 0x3cb6 <lora_uplink_handler_task+0x50>

00003d9e <lora_uplink_handler_create>:
    3d9e:	ef 92       	push	r14
    3da0:	ff 92       	push	r15
	}
 }

 void lora_uplink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3da2:	0f 93       	push	r16
	 xTaskCreate(
    3da4:	e1 2c       	mov	r14, r1
    3da6:	f1 2c       	mov	r15, r1
    3da8:	08 2f       	mov	r16, r24
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	40 ec       	ldi	r20, 0xC0	; 192
    3db0:	50 e0       	ldi	r21, 0x00	; 0
    3db2:	6a e1       	ldi	r22, 0x1A	; 26
    3db4:	75 e0       	ldi	r23, 0x05	; 5
    3db6:	83 e3       	ldi	r24, 0x33	; 51
    3db8:	9e e1       	ldi	r25, 0x1E	; 30
    3dba:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <xTaskCreate>
	, tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );


	
 }
    3dbe:	0f 91       	pop	r16
    3dc0:	ff 90       	pop	r15
    3dc2:	ef 90       	pop	r14
    3dc4:	08 95       	ret

00003dc6 <sensorDataPackageHandler_setPackage_lenght>:
	hum_value=value;
}

void sensorDataPackageHandler_setVentilator_servo(uint8_t ventilator_state_servo)
{
	ventilator_servo=ventilator_state_servo;
    3dc6:	80 93 96 18 	sts	0x1896, r24	; 0x801896 <package_lenght>
    3dca:	08 95       	ret

00003dcc <sensorDataPackageHandler_setCO2_value>:
    3dcc:	90 93 95 18 	sts	0x1895, r25	; 0x801895 <co2_value+0x1>
    3dd0:	80 93 94 18 	sts	0x1894, r24	; 0x801894 <co2_value>
    3dd4:	08 95       	ret

00003dd6 <sensorDataPackageHandler_setTemp_value>:
    3dd6:	90 93 90 18 	sts	0x1890, r25	; 0x801890 <temp_value+0x1>
    3dda:	80 93 8f 18 	sts	0x188F, r24	; 0x80188f <temp_value>
    3dde:	08 95       	ret

00003de0 <sensorDataPackageHandler_setHumidity_value>:
    3de0:	90 93 93 18 	sts	0x1893, r25	; 0x801893 <hum_value+0x1>
    3de4:	80 93 92 18 	sts	0x1892, r24	; 0x801892 <hum_value>
    3de8:	08 95       	ret

00003dea <sensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t sensorDataPackageHandler_getLoRaPayload(uint8_t port_No)
{
    3dea:	1f 93       	push	r17
    3dec:	cf 93       	push	r28
    3dee:	df 93       	push	r29
    3df0:	ec 01       	movw	r28, r24
    3df2:	16 2f       	mov	r17, r22
	lora_driver_payload_t *uplink_payload;
	
	uplink_payload=pvPortMalloc(sizeof(lora_driver_payload_t));
    3df4:	86 e1       	ldi	r24, 0x16	; 22
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
    3dfc:	fc 01       	movw	r30, r24
	
	if(uplink_payload != NULL){
    3dfe:	89 2b       	or	r24, r25
    3e00:	b1 f0       	breq	.+44     	; 0x3e2e <sensorDataPackageHandler_getLoRaPayload+0x44>
		uplink_payload->portNo=port_No;
    3e02:	10 83       	st	Z, r17
		uplink_payload->len=package_lenght;
    3e04:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <package_lenght>
    3e08:	81 83       	std	Z+1, r24	; 0x01
		uplink_payload->bytes[0]=co2_value >> 8;
    3e0a:	80 91 94 18 	lds	r24, 0x1894	; 0x801894 <co2_value>
    3e0e:	90 91 95 18 	lds	r25, 0x1895	; 0x801895 <co2_value+0x1>
    3e12:	92 83       	std	Z+2, r25	; 0x02
		uplink_payload->bytes[1]=co2_value & 0xFF;
    3e14:	83 83       	std	Z+3, r24	; 0x03
		uplink_payload->bytes[2]=hum_value >> 8;
    3e16:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <hum_value>
    3e1a:	90 91 93 18 	lds	r25, 0x1893	; 0x801893 <hum_value+0x1>
    3e1e:	94 83       	std	Z+4, r25	; 0x04
		uplink_payload->bytes[3]=hum_value & 0xFF;
    3e20:	85 83       	std	Z+5, r24	; 0x05
		uplink_payload->bytes[4]=temp_value >> 8;
    3e22:	80 91 8f 18 	lds	r24, 0x188F	; 0x80188f <temp_value>
    3e26:	90 91 90 18 	lds	r25, 0x1890	; 0x801890 <temp_value+0x1>
    3e2a:	96 83       	std	Z+6, r25	; 0x06
		uplink_payload->bytes[5]=temp_value & 0xFF;
    3e2c:	87 83       	std	Z+7, r24	; 0x07
	}
	
	return *uplink_payload;
    3e2e:	86 e1       	ldi	r24, 0x16	; 22
    3e30:	de 01       	movw	r26, r28
    3e32:	01 90       	ld	r0, Z+
    3e34:	0d 92       	st	X+, r0
    3e36:	8a 95       	dec	r24
    3e38:	e1 f7       	brne	.-8      	; 0x3e32 <sensorDataPackageHandler_getLoRaPayload+0x48>
}
    3e3a:	ce 01       	movw	r24, r28
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	1f 91       	pop	r17
    3e42:	08 95       	ret

00003e44 <initializeTempAndHumiditySemaphore>:
  EventGroupHandle_t dataEventGroup;
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
    3e44:	0f 93       	push	r16
	tempHumSemaphore = xSemaphoreCreateBinary();
    3e46:	43 e0       	ldi	r20, 0x03	; 3
    3e48:	60 e0       	ldi	r22, 0x00	; 0
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericCreate>
    3e50:	90 93 9c 18 	sts	0x189C, r25	; 0x80189c <tempHumSemaphore+0x1>
    3e54:	80 93 9b 18 	sts	0x189B, r24	; 0x80189b <tempHumSemaphore>
	xSemaphoreGive(tempHumSemaphore);
    3e58:	00 e0       	ldi	r16, 0x00	; 0
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	a9 01       	movw	r20, r18
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
}
    3e68:	0f 91       	pop	r16
    3e6a:	08 95       	ret

00003e6c <initializeVentilationSemaphore>:

void initializeVentilationSemaphore()
{
    3e6c:	0f 93       	push	r16
	ventilationSemaphore = xSemaphoreCreateBinary();
    3e6e:	43 e0       	ldi	r20, 0x03	; 3
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericCreate>
    3e78:	90 93 9a 18 	sts	0x189A, r25	; 0x80189a <ventilationSemaphore+0x1>
    3e7c:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <ventilationSemaphore>
	xSemaphoreGive(ventilationSemaphore);
    3e80:	00 e0       	ldi	r16, 0x00	; 0
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	a9 01       	movw	r20, r18
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
}
    3e90:	0f 91       	pop	r16
    3e92:	08 95       	ret

00003e94 <initializeQueue>:

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	62 e0       	ldi	r22, 0x02	; 2
    3e98:	83 e0       	ldi	r24, 0x03	; 3
    3e9a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericCreate>
    3e9e:	90 93 98 18 	sts	0x1898, r25	; 0x801898 <sensorDataQueue+0x1>
    3ea2:	80 93 97 18 	sts	0x1897, r24	; 0x801897 <sensorDataQueue>
    3ea6:	08 95       	ret

00003ea8 <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    3ea8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <xEventGroupCreate>
    3eac:	90 93 a0 18 	sts	0x18A0, r25	; 0x8018a0 <dataEventGroup+0x1>
    3eb0:	80 93 9f 18 	sts	0x189F, r24	; 0x80189f <dataEventGroup>
    3eb4:	08 95       	ret

00003eb6 <initializeUplinkMessageBuffer>:
}

void initializeUplinkMessageBuffer()
{
	uplinkMessageBuffer = xMessageBufferCreate(100);
    3eb6:	41 e0       	ldi	r20, 0x01	; 1
    3eb8:	60 e0       	ldi	r22, 0x00	; 0
    3eba:	70 e0       	ldi	r23, 0x00	; 0
    3ebc:	84 e6       	ldi	r24, 0x64	; 100
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <xStreamBufferGenericCreate>
    3ec4:	90 93 a2 18 	sts	0x18A2, r25	; 0x8018a2 <uplinkMessageBuffer+0x1>
    3ec8:	80 93 a1 18 	sts	0x18A1, r24	; 0x8018a1 <uplinkMessageBuffer>
    3ecc:	08 95       	ret

00003ece <initializeDownlinkMessageBuffer>:
}

void initializeDownlinkMessageBuffer()
{
	downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2);
    3ece:	41 e0       	ldi	r20, 0x01	; 1
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	70 e0       	ldi	r23, 0x00	; 0
    3ed4:	8c e2       	ldi	r24, 0x2C	; 44
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <xStreamBufferGenericCreate>
    3edc:	90 93 9e 18 	sts	0x189E, r25	; 0x80189e <downlinkMessageBuffer+0x1>
    3ee0:	80 93 9d 18 	sts	0x189D, r24	; 0x80189d <downlinkMessageBuffer>
    3ee4:	08 95       	ret

00003ee6 <initializeTempAndHumDriver>:
#include "TempAndHum.h"
#include "Setup.h"

void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    3ee6:	1b d1       	rcall	.+566    	; 0x411e <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    3ee8:	81 11       	cpse	r24, r1
    3eea:	05 c0       	rjmp	.+10     	; 0x3ef6 <initializeTempAndHumDriver+0x10>
	{
		printf("Temp and Hum Driver Initialized ok\n");
    3eec:	87 e2       	ldi	r24, 0x27	; 39
    3eee:	95 e0       	ldi	r25, 0x05	; 5
    3ef0:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <puts>
    3ef4:	08 95       	ret
	}
	
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    3ef6:	8a e4       	ldi	r24, 0x4A	; 74
    3ef8:	95 e0       	ldi	r25, 0x05	; 5
    3efa:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <puts>
    3efe:	08 95       	ret

00003f00 <measureTempAndHum>:
	}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    3f00:	26 d1       	rcall	.+588    	; 0x414e <hih8120_wakeup>
    3f02:	88 23       	and	r24, r24
    3f04:	21 f0       	breq	.+8      	; 0x3f0e <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    3f06:	84 e6       	ldi	r24, 0x64	; 100
    3f08:	95 e0       	ldi	r25, 0x05	; 5
    3f0a:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    3f0e:	63 e0       	ldi	r22, 0x03	; 3
    3f10:	70 e0       	ldi	r23, 0x00	; 0
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
	
	if ( HIH8120_OK !=  hih8120_measure() )
    3f1a:	2e d1       	rcall	.+604    	; 0x4178 <hih8120_measure>
    3f1c:	88 23       	and	r24, r24
    3f1e:	21 f0       	breq	.+8      	; 0x3f28 <measureTempAndHum+0x28>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    3f20:	84 e8       	ldi	r24, 0x84	; 132
    3f22:	95 e0       	ldi	r25, 0x05	; 5
    3f24:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    3f28:	61 e0       	ldi	r22, 0x01	; 1
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <vTaskDelay>
    3f34:	08 95       	ret

00003f36 <TempAndHumTask>:
	
}

void TempAndHumTask(void* pvpParameter)
{
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <TempAndHumTask+0x6>
    3f3c:	1f 92       	push	r1
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
	
	while(1)
	{
		uint16_t Temp = 0;
    3f42:	1c 82       	std	Y+4, r1	; 0x04
    3f44:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t Humidity = 0;
    3f46:	1a 82       	std	Y+2, r1	; 0x02
    3f48:	19 82       	std	Y+1, r1	; 0x01
		//printf("TEMP TASK \n");
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    3f4a:	4f ef       	ldi	r20, 0xFF	; 255
    3f4c:	5f ef       	ldi	r21, 0xFF	; 255
    3f4e:	ba 01       	movw	r22, r20
    3f50:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <tempHumSemaphore>
    3f54:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <tempHumSemaphore+0x1>
    3f58:	0e 94 41 09 	call	0x1282	; 0x1282 <xQueueSemaphoreTake>
    3f5c:	81 30       	cpi	r24, 0x01	; 1
    3f5e:	51 f5       	brne	.+84     	; 0x3fb4 <TempAndHumTask+0x7e>
		{
			measureTempAndHum();
    3f60:	cf df       	rcall	.-98     	; 0x3f00 <measureTempAndHum>
			Temp = hih8120_getTemperature_x10();
    3f62:	56 d1       	rcall	.+684    	; 0x4210 <hih8120_getTemperature_x10>
    3f64:	9c 83       	std	Y+4, r25	; 0x04
    3f66:	8b 83       	std	Y+3, r24	; 0x03
			Humidity = hih8120_getHumidityPercent_x10();
    3f68:	2d d1       	rcall	.+602    	; 0x41c4 <hih8120_getHumidityPercent_x10>
    3f6a:	9a 83       	std	Y+2, r25	; 0x02
    3f6c:	89 83       	std	Y+1, r24	; 0x01
    3f6e:	00 e0       	ldi	r16, 0x00	; 0
			//printf("Temperature: %d\n",Temp);
			//printf("Humidity: %d\n",Humidity);
			xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
    3f70:	2f ef       	ldi	r18, 0xFF	; 255
    3f72:	3f ef       	ldi	r19, 0xFF	; 255
    3f74:	a9 01       	movw	r20, r18
    3f76:	be 01       	movw	r22, r28
    3f78:	6d 5f       	subi	r22, 0xFD	; 253
    3f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7c:	80 91 97 18 	lds	r24, 0x1897	; 0x801897 <sensorDataQueue>
    3f80:	90 91 98 18 	lds	r25, 0x1898	; 0x801898 <sensorDataQueue+0x1>
    3f84:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    3f88:	2f ef       	ldi	r18, 0xFF	; 255
			xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
    3f8a:	3f ef       	ldi	r19, 0xFF	; 255
    3f8c:	a9 01       	movw	r20, r18
    3f8e:	be 01       	movw	r22, r28
    3f90:	6f 5f       	subi	r22, 0xFF	; 255
    3f92:	7f 4f       	sbci	r23, 0xFF	; 255
    3f94:	80 91 97 18 	lds	r24, 0x1897	; 0x801897 <sensorDataQueue>
    3f98:	90 91 98 18 	lds	r25, 0x1898	; 0x801898 <sensorDataQueue+0x1>
    3f9c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    3fa0:	42 e0       	ldi	r20, 0x02	; 2

			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    3fa2:	50 e0       	ldi	r21, 0x00	; 0
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	70 e0       	ldi	r23, 0x00	; 0
    3fa8:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <dataEventGroup>
    3fac:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <dataEventGroup+0x1>
    3fb0:	0e 94 15 03 	call	0x62a	; 0x62a <xEventGroupSetBits>
    3fb4:	6a e0       	ldi	r22, 0x0A	; 10

		}
		vTaskDelay(10);
    3fb6:	70 e0       	ldi	r23, 0x00	; 0
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
    3fc0:	c0 cf       	rjmp	.-128    	; 0x3f42 <TempAndHumTask+0xc>

00003fc2 <createTempAndHumTask>:
		
	}
    3fc2:	ef 92       	push	r14
}

void createTempAndHumTask()
{
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
	initializeTempAndHumDriver();
    3fc8:	8e df       	rcall	.-228    	; 0x3ee6 <initializeTempAndHumDriver>
		xTaskCreate(
    3fca:	e1 2c       	mov	r14, r1
    3fcc:	f1 2c       	mov	r15, r1
    3fce:	01 e0       	ldi	r16, 0x01	; 1
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 ec       	ldi	r20, 0xC0	; 192
    3fd6:	50 e0       	ldi	r21, 0x00	; 0
    3fd8:	69 ea       	ldi	r22, 0xA9	; 169
    3fda:	75 e0       	ldi	r23, 0x05	; 5
    3fdc:	8b e9       	ldi	r24, 0x9B	; 155
    3fde:	9f e1       	ldi	r25, 0x1F	; 31
    3fe0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <xTaskCreate>
		,  "TempAndHumTask"  // A name just for humans
		,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}
    3fe4:	0f 91       	pop	r16
    3fe6:	ff 90       	pop	r15
    3fe8:	ef 90       	pop	r14
    3fea:	08 95       	ret

00003fec <ventilationTask>:
#include "ventilation.h"


void ventilationTask(void* pvpParameter)
{
	printf("in ventilaion----------------\n");
    3fec:	88 eb       	ldi	r24, 0xB8	; 184
    3fee:	95 e0       	ldi	r25, 0x05	; 5
    3ff0:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
	for(;;)
	{
		printf("inSIDEE ventilaion----------------\n");
    3ff4:	86 ed       	ldi	r24, 0xD6	; 214
    3ff6:	95 e0       	ldi	r25, 0x05	; 5
    3ff8:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
	
		if(xSemaphoreTake(ventilationSemaphore,portMAX_DELAY)==pdTRUE)
    3ffc:	4f ef       	ldi	r20, 0xFF	; 255
    3ffe:	5f ef       	ldi	r21, 0xFF	; 255
    4000:	ba 01       	movw	r22, r20
    4002:	80 91 99 18 	lds	r24, 0x1899	; 0x801899 <ventilationSemaphore>
    4006:	90 91 9a 18 	lds	r25, 0x189A	; 0x80189a <ventilationSemaphore+0x1>
    400a:	0e 94 41 09 	call	0x1282	; 0x1282 <xQueueSemaphoreTake>
    400e:	81 30       	cpi	r24, 0x01	; 1
    4010:	29 f4       	brne	.+10     	; 0x401c <ventilationTask+0x30>
		{
			rc_servo_setPosition(1, getVentilationLevel());
    4012:	0e 94 26 02 	call	0x44c	; 0x44c <getVentilationLevel>
    4016:	68 2f       	mov	r22, r24
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	24 d6       	rcall	.+3144   	; 0x4c64 <rc_servo_setPosition>
		}
		vTaskDelay(pdMS_TO_TICKS(100));
    401c:	66 e0       	ldi	r22, 0x06	; 6
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 71 12 	call	0x24e2	; 0x24e2 <vTaskDelay>
	}
    4028:	e5 cf       	rjmp	.-54     	; 0x3ff4 <ventilationTask+0x8>

0000402a <createVentilationTask>:
}

void createVentilationTask()
{
    402a:	ef 92       	push	r14
    402c:	ff 92       	push	r15
    402e:	0f 93       	push	r16
	rc_servo_initialise();
    4030:	31 d6       	rcall	.+3170   	; 0x4c94 <rc_servo_initialise>
	printf("SHTO ZA HUINNNEAAAAAAAAAAAAA\n");
    4032:	89 ef       	ldi	r24, 0xF9	; 249
    4034:	95 e0       	ldi	r25, 0x05	; 5
    4036:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
		
	xTaskCreate(
    403a:	e1 2c       	mov	r14, r1
    403c:	f1 2c       	mov	r15, r1
    403e:	03 e0       	ldi	r16, 0x03	; 3
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	40 ec       	ldi	r20, 0xC0	; 192
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	66 e1       	ldi	r22, 0x16	; 22
    404a:	76 e0       	ldi	r23, 0x06	; 6
    404c:	86 ef       	ldi	r24, 0xF6	; 246
    404e:	9f e1       	ldi	r25, 0x1F	; 31
    4050:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
		
}
    4054:	0f 91       	pop	r16
    4056:	ff 90       	pop	r15
    4058:	ef 90       	pop	r14
    405a:	08 95       	ret

0000405c <initializeUsedData>:
#include <status_leds.h>


void initializeUsedData()
{
	initializeEventGroup();
    405c:	25 df       	rcall	.-438    	; 0x3ea8 <initializeEventGroup>
	initializeQueue();
    405e:	1a df       	rcall	.-460    	; 0x3e94 <initializeQueue>
	initializeTempAndHumiditySemaphore();
    4060:	f1 de       	rcall	.-542    	; 0x3e44 <initializeTempAndHumiditySemaphore>
    4062:	04 df       	rcall	.-504    	; 0x3e6c <initializeVentilationSemaphore>
	initializeVentilationSemaphore();
    4064:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <initializeConfiguration>
	initializeConfiguration();
    4068:	26 df       	rcall	.-436    	; 0x3eb6 <initializeUplinkMessageBuffer>
	initializeUplinkMessageBuffer();
    406a:	31 cf       	rjmp	.-414    	; 0x3ece <initializeDownlinkMessageBuffer>
    406c:	08 95       	ret

0000406e <create_tasks>:
	initializeDownlinkMessageBuffer();
    406e:	a9 df       	rcall	.-174    	; 0x3fc2 <createTempAndHumTask>
    4070:	0e 94 db 01 	call	0x3b6	; 0x3b6 <createCO2Task>
/*-----------------------------------------------------------*/
void create_tasks(void)
{		
		createTempAndHumTask();
		createCO2Task();
		createApplicationTask();	
    4074:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <createApplicationTask>
    4078:	08 95       	ret

0000407a <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	0e 94 1d 2a 	call	0x543a	; 0x543a <stdio_initialise>
	initializeUsedData();
    4080:	ed df       	rcall	.-38     	; 0x405c <initializeUsedData>
	create_tasks();
    4082:	f5 df       	rcall	.-22     	; 0x406e <create_tasks>
    4084:	60 91 9d 18 	lds	r22, 0x189D	; 0x80189d <downlinkMessageBuffer>

	lora_driver_initialise(ser_USART1, downlinkMessageBuffer);
    4088:	70 91 9e 18 	lds	r23, 0x189E	; 0x80189e <downlinkMessageBuffer+0x1>
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	ea d1       	rcall	.+980    	; 0x4464 <lora_driver_initialise>
	lora_uplink_handler_create(4);
    4090:	84 e0       	ldi	r24, 0x04	; 4
    4092:	85 de       	rcall	.-758    	; 0x3d9e <lora_uplink_handler_create>
    4094:	82 e2       	ldi	r24, 0x22	; 34
	printf("Before craete downlink\n");
    4096:	96 e0       	ldi	r25, 0x06	; 6
    4098:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
	lora_downlink_handler_create(3);
    409c:	83 e0       	ldi	r24, 0x03	; 3
    409e:	17 dd       	rcall	.-1490   	; 0x3ace <lora_downlink_handler_create>
	printf("Before venitolation\n");
    40a0:	89 e3       	ldi	r24, 0x39	; 57
    40a2:	96 e0       	ldi	r25, 0x06	; 6
    40a4:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
	createVentilationTask();
    40a8:	c0 df       	rcall	.-128    	; 0x402a <createVentilationTask>
    40aa:	8d e4       	ldi	r24, 0x4D	; 77
	printf("After ventilation\n");
    40ac:	96 e0       	ldi	r25, 0x06	; 6
    40ae:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <puts>
    40b2:	08 95       	ret

000040b4 <main>:
    40b4:	e2 df       	rcall	.-60     	; 0x407a <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Stttttarted!!\n");
    40b6:	8f e5       	ldi	r24, 0x5F	; 95
    40b8:	96 e0       	ldi	r25, 0x06	; 6
    40ba:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    40be:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <vTaskStartScheduler>
    40c2:	ff cf       	rjmp	.-2      	; 0x40c2 <main+0xe>

000040c4 <_hihTwiCallback>:
    40c4:	65 30       	cpi	r22, 0x05	; 5
    40c6:	f1 f4       	brne	.+60     	; 0x4104 <_hihTwiCallback+0x40>
    40c8:	fa 01       	movw	r30, r20
    40ca:	80 81       	ld	r24, Z
    40cc:	8f 73       	andi	r24, 0x3F	; 63
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	98 2f       	mov	r25, r24
    40d2:	88 27       	eor	r24, r24
    40d4:	21 81       	ldd	r18, Z+1	; 0x01
    40d6:	82 2b       	or	r24, r18
    40d8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40dc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40e0:	82 81       	ldd	r24, Z+2	; 0x02
    40e2:	f0 e4       	ldi	r31, 0x40	; 64
    40e4:	8f 9f       	mul	r24, r31
    40e6:	c0 01       	movw	r24, r0
    40e8:	11 24       	eor	r1, r1
    40ea:	fa 01       	movw	r30, r20
    40ec:	23 81       	ldd	r18, Z+3	; 0x03
    40ee:	26 95       	lsr	r18
    40f0:	26 95       	lsr	r18
    40f2:	82 2b       	or	r24, r18
    40f4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40f8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <_measuringIsReady>
    4102:	08 95       	ret
    4104:	64 30       	cpi	r22, 0x04	; 4
    4106:	51 f0       	breq	.+20     	; 0x411c <_hihTwiCallback+0x58>
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e4       	ldi	r25, 0x40	; 64
    410c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4110:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4114:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4118:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    411c:	08 95       	ret

0000411e <hih8120_initialise>:
    411e:	0f 93       	push	r16
    4120:	1f 93       	push	r17
    4122:	02 e6       	ldi	r16, 0x62	; 98
    4124:	10 e2       	ldi	r17, 0x20	; 32
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	34 e2       	ldi	r19, 0x24	; 36
    412a:	44 ef       	ldi	r20, 0xF4	; 244
    412c:	50 e0       	ldi	r21, 0x00	; 0
    412e:	60 e0       	ldi	r22, 0x00	; 0
    4130:	87 e2       	ldi	r24, 0x27	; 39
    4132:	0e 94 77 2b 	call	0x56ee	; 0x56ee <twiCreate>
    4136:	90 93 1b 17 	sts	0x171B, r25	; 0x80171b <_hih8120Handler+0x1>
    413a:	80 93 1a 17 	sts	0x171A, r24	; 0x80171a <_hih8120Handler>
    413e:	21 e0       	ldi	r18, 0x01	; 1
    4140:	89 2b       	or	r24, r25
    4142:	09 f0       	breq	.+2      	; 0x4146 <hih8120_initialise+0x28>
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	82 2f       	mov	r24, r18
    4148:	1f 91       	pop	r17
    414a:	0f 91       	pop	r16
    414c:	08 95       	ret

0000414e <hih8120_wakeup>:
    414e:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <_hih8120Handler>
    4152:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <_hih8120Handler+0x1>
    4156:	00 97       	sbiw	r24, 0x00	; 0
    4158:	59 f0       	breq	.+22     	; 0x4170 <hih8120_wakeup+0x22>
    415a:	40 e0       	ldi	r20, 0x00	; 0
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	70 e0       	ldi	r23, 0x00	; 0
    4160:	0e 94 c8 2b 	call	0x5790	; 0x5790 <twiTransmit>
    4164:	84 30       	cpi	r24, 0x04	; 4
    4166:	31 f4       	brne	.+12     	; 0x4174 <hih8120_wakeup+0x26>
    4168:	10 92 19 17 	sts	0x1719, r1	; 0x801719 <_measuringIsReady>
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	08 95       	ret
    4170:	82 e0       	ldi	r24, 0x02	; 2
    4172:	08 95       	ret
    4174:	83 e0       	ldi	r24, 0x03	; 3
    4176:	08 95       	ret

00004178 <hih8120_measure>:
    4178:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <_hih8120Handler>
    417c:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <_hih8120Handler+0x1>
    4180:	00 97       	sbiw	r24, 0x00	; 0
    4182:	39 f0       	breq	.+14     	; 0x4192 <hih8120_measure+0x1a>
    4184:	64 e0       	ldi	r22, 0x04	; 4
    4186:	0e 94 14 2c 	call	0x5828	; 0x5828 <twiReceive>
    418a:	85 30       	cpi	r24, 0x05	; 5
    418c:	21 f0       	breq	.+8      	; 0x4196 <hih8120_measure+0x1e>
    418e:	83 e0       	ldi	r24, 0x03	; 3
    4190:	08 95       	ret
    4192:	82 e0       	ldi	r24, 0x02	; 2
    4194:	08 95       	ret
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	08 95       	ret

0000419a <hih8120_getHumidity>:
    419a:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    419e:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <__floatunsisf>
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	48 ec       	ldi	r20, 0xC8	; 200
    41b0:	52 e4       	ldi	r21, 0x42	; 66
    41b2:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__mulsf3>
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	38 ef       	ldi	r19, 0xF8	; 248
    41ba:	4f e7       	ldi	r20, 0x7F	; 127
    41bc:	56 e4       	ldi	r21, 0x46	; 70
    41be:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__divsf3>
    41c2:	08 95       	ret

000041c4 <hih8120_getHumidityPercent_x10>:
    41c4:	ea df       	rcall	.-44     	; 0x419a <hih8120_getHumidity>
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e2       	ldi	r20, 0x20	; 32
    41cc:	51 e4       	ldi	r21, 0x41	; 65
    41ce:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__mulsf3>
    41d2:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <__fixunssfsi>
    41d6:	cb 01       	movw	r24, r22
    41d8:	08 95       	ret

000041da <hih8120_getTemperature>:
    41da:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    41de:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <__floatunsisf>
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	45 e2       	ldi	r20, 0x25	; 37
    41f0:	53 e4       	ldi	r21, 0x43	; 67
    41f2:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__mulsf3>
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	38 ef       	ldi	r19, 0xF8	; 248
    41fa:	4f e7       	ldi	r20, 0x7F	; 127
    41fc:	56 e4       	ldi	r21, 0x46	; 70
    41fe:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__divsf3>
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e2       	ldi	r20, 0x20	; 32
    4208:	52 e4       	ldi	r21, 0x42	; 66
    420a:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__subsf3>
    420e:	08 95       	ret

00004210 <hih8120_getTemperature_x10>:
    4210:	e4 df       	rcall	.-56     	; 0x41da <hih8120_getTemperature>
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e2       	ldi	r20, 0x20	; 32
    4218:	51 e4       	ldi	r21, 0x41	; 65
    421a:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__mulsf3>
    421e:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <__fixsfsi>
    4222:	cb 01       	movw	r24, r22
    4224:	08 95       	ret

00004226 <_serialCallBack>:
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	1f 92       	push	r1
    4230:	1f 92       	push	r1
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    4236:	8c 01       	movw	r16, r24
    4238:	19 82       	std	Y+1, r1	; 0x01
    423a:	2d c0       	rjmp	.+90     	; 0x4296 <_serialCallBack+0x70>
    423c:	e0 91 80 17 	lds	r30, 0x1780	; 0x801780 <rec_buf_inp.2878>
    4240:	ec 32       	cpi	r30, 0x2C	; 44
    4242:	50 f4       	brcc	.+20     	; 0x4258 <_serialCallBack+0x32>
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	8e 0f       	add	r24, r30
    4248:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <rec_buf_inp.2878>
    424c:	f0 e0       	ldi	r31, 0x00	; 0
    424e:	ee 54       	subi	r30, 0x4E	; 78
    4250:	f8 4e       	sbci	r31, 0xE8	; 232
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	80 83       	st	Z, r24
    4256:	02 c0       	rjmp	.+4      	; 0x425c <_serialCallBack+0x36>
    4258:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <rec_buf_inp.2878>
    425c:	8a 81       	ldd	r24, Y+2	; 0x02
    425e:	8a 30       	cpi	r24, 0x0A	; 10
    4260:	d1 f4       	brne	.+52     	; 0x4296 <_serialCallBack+0x70>
    4262:	40 91 80 17 	lds	r20, 0x1780	; 0x801780 <rec_buf_inp.2878>
    4266:	50 e0       	ldi	r21, 0x00	; 0
    4268:	fa 01       	movw	r30, r20
    426a:	e0 55       	subi	r30, 0x50	; 80
    426c:	f8 4e       	sbci	r31, 0xE8	; 232
    426e:	10 82       	st	Z, r1
    4270:	41 50       	subi	r20, 0x01	; 1
    4272:	51 09       	sbc	r21, r1
    4274:	9e 01       	movw	r18, r28
    4276:	2f 5f       	subi	r18, 0xFF	; 255
    4278:	3f 4f       	sbci	r19, 0xFF	; 255
    427a:	62 eb       	ldi	r22, 0xB2	; 178
    427c:	77 e1       	ldi	r23, 0x17	; 23
    427e:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <_serialReplyBufferHandle>
    4282:	90 91 84 17 	lds	r25, 0x1784	; 0x801784 <_serialReplyBufferHandle+0x1>
    4286:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <xStreamBufferSendFromISR>
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	81 11       	cpse	r24, r1
    428e:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    4292:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <rec_buf_inp.2878>
    4296:	be 01       	movw	r22, r28
    4298:	6e 5f       	subi	r22, 0xFE	; 254
    429a:	7f 4f       	sbci	r23, 0xFF	; 255
    429c:	c8 01       	movw	r24, r16
    429e:	37 d6       	rcall	.+3182   	; 0x4f0e <serial_getByte>
    42a0:	88 23       	and	r24, r24
    42a2:	61 f2       	breq	.-104    	; 0x423c <_serialCallBack+0x16>
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
    42a8:	df 91       	pop	r29
    42aa:	cf 91       	pop	r28
    42ac:	1f 91       	pop	r17
    42ae:	0f 91       	pop	r16
    42b0:	08 95       	ret

000042b2 <_uploadMessage>:
    42b2:	0f 93       	push	r16
    42b4:	1f 93       	push	r17
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	8c 01       	movw	r16, r24
    42bc:	eb 01       	movw	r28, r22
    42be:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <_serialReplyBufferHandle>
    42c2:	90 91 84 17 	lds	r25, 0x1784	; 0x801784 <_serialReplyBufferHandle+0x1>
    42c6:	0e 94 83 0b 	call	0x1706	; 0x1706 <xStreamBufferReset>
    42ca:	b8 01       	movw	r22, r16
    42cc:	8c e1       	ldi	r24, 0x1C	; 28
    42ce:	97 e1       	ldi	r25, 0x17	; 23
    42d0:	0e 94 b8 30 	call	0x6170	; 0x6170 <strcpy>
    42d4:	20 97       	sbiw	r28, 0x00	; 0
    42d6:	79 f0       	breq	.+30     	; 0x42f6 <_uploadMessage+0x44>
    42d8:	ec e1       	ldi	r30, 0x1C	; 28
    42da:	f7 e1       	ldi	r31, 0x17	; 23
    42dc:	01 90       	ld	r0, Z+
    42de:	00 20       	and	r0, r0
    42e0:	e9 f7       	brne	.-6      	; 0x42dc <_uploadMessage+0x2a>
    42e2:	31 97       	sbiw	r30, 0x01	; 1
    42e4:	80 e2       	ldi	r24, 0x20	; 32
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	91 83       	std	Z+1, r25	; 0x01
    42ea:	80 83       	st	Z, r24
    42ec:	be 01       	movw	r22, r28
    42ee:	8c e1       	ldi	r24, 0x1C	; 28
    42f0:	97 e1       	ldi	r25, 0x17	; 23
    42f2:	0e 94 ad 30 	call	0x615a	; 0x615a <strcat>
    42f6:	ec e1       	ldi	r30, 0x1C	; 28
    42f8:	f7 e1       	ldi	r31, 0x17	; 23
    42fa:	df 01       	movw	r26, r30
    42fc:	0d 90       	ld	r0, X+
    42fe:	00 20       	and	r0, r0
    4300:	e9 f7       	brne	.-6      	; 0x42fc <_uploadMessage+0x4a>
    4302:	11 97       	sbiw	r26, 0x01	; 1
    4304:	8d e0       	ldi	r24, 0x0D	; 13
    4306:	9a e0       	ldi	r25, 0x0A	; 10
    4308:	11 96       	adiw	r26, 0x01	; 1
    430a:	9c 93       	st	X, r25
    430c:	8e 93       	st	-X, r24
    430e:	12 96       	adiw	r26, 0x02	; 2
    4310:	1c 92       	st	X, r1
    4312:	01 90       	ld	r0, Z+
    4314:	00 20       	and	r0, r0
    4316:	e9 f7       	brne	.-6      	; 0x4312 <_uploadMessage+0x60>
    4318:	31 97       	sbiw	r30, 0x01	; 1
    431a:	ec 51       	subi	r30, 0x1C	; 28
    431c:	f7 41       	sbci	r31, 0x17	; 23
    431e:	ae 2f       	mov	r26, r30
    4320:	8c e1       	ldi	r24, 0x1C	; 28
    4322:	97 e1       	ldi	r25, 0x17	; 23
    4324:	ac 01       	movw	r20, r24
    4326:	6a 2f       	mov	r22, r26
    4328:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <_rn2483_serial>
    432c:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <_rn2483_serial+0x1>
    4330:	99 d5       	rcall	.+2866   	; 0x4e64 <serial_sendBytes>
    4332:	81 11       	cpse	r24, r1
    4334:	11 c0       	rjmp	.+34     	; 0x4358 <_uploadMessage+0xa6>
    4336:	08 e2       	ldi	r16, 0x28	; 40
    4338:	15 e0       	ldi	r17, 0x05	; 5
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	4d e2       	ldi	r20, 0x2D	; 45
    4340:	50 e0       	ldi	r21, 0x00	; 0
    4342:	6c e0       	ldi	r22, 0x0C	; 12
    4344:	78 e1       	ldi	r23, 0x18	; 24
    4346:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <_serialReplyBufferHandle>
    434a:	90 91 84 17 	lds	r25, 0x1784	; 0x801784 <_serialReplyBufferHandle+0x1>
    434e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xStreamBufferReceive>
    4352:	8c e0       	ldi	r24, 0x0C	; 12
    4354:	98 e1       	ldi	r25, 0x18	; 24
    4356:	02 c0       	rjmp	.+4      	; 0x435c <_uploadMessage+0xaa>
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	1f 91       	pop	r17
    4362:	0f 91       	pop	r16
    4364:	08 95       	ret

00004366 <_reply2ReturnCode>:
    4366:	2f 92       	push	r2
    4368:	3f 92       	push	r3
    436a:	4f 92       	push	r4
    436c:	5f 92       	push	r5
    436e:	6f 92       	push	r6
    4370:	7f 92       	push	r7
    4372:	8f 92       	push	r8
    4374:	9f 92       	push	r9
    4376:	af 92       	push	r10
    4378:	bf 92       	push	r11
    437a:	cf 92       	push	r12
    437c:	df 92       	push	r13
    437e:	ef 92       	push	r14
    4380:	ff 92       	push	r15
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	5c 01       	movw	r10, r24
    438c:	fc 01       	movw	r30, r24
    438e:	01 90       	ld	r0, Z+
    4390:	00 20       	and	r0, r0
    4392:	e9 f7       	brne	.-6      	; 0x438e <_reply2ReturnCode+0x28>
    4394:	31 97       	sbiw	r30, 0x01	; 1
    4396:	6f 01       	movw	r12, r30
    4398:	c8 1a       	sub	r12, r24
    439a:	d9 0a       	sbc	r13, r25
    439c:	5c 2c       	mov	r5, r12
    439e:	0f 2e       	mov	r0, r31
    43a0:	fe e0       	ldi	r31, 0x0E	; 14
    43a2:	8f 2e       	mov	r8, r31
    43a4:	f9 e0       	ldi	r31, 0x09	; 9
    43a6:	9f 2e       	mov	r9, r31
    43a8:	f0 2d       	mov	r31, r0
    43aa:	e1 2c       	mov	r14, r1
    43ac:	f1 2c       	mov	r15, r1
    43ae:	4c 2c       	mov	r4, r12
    43b0:	37 01       	movw	r6, r14
    43b2:	f4 01       	movw	r30, r8
    43b4:	01 81       	ldd	r16, Z+1	; 0x01
    43b6:	12 81       	ldd	r17, Z+2	; 0x02
    43b8:	e8 01       	movw	r28, r16
    43ba:	09 90       	ld	r0, Y+
    43bc:	00 20       	and	r0, r0
    43be:	e9 f7       	brne	.-6      	; 0x43ba <_reply2ReturnCode+0x54>
    43c0:	21 97       	sbiw	r28, 0x01	; 1
    43c2:	c0 1b       	sub	r28, r16
    43c4:	d1 0b       	sbc	r29, r17
    43c6:	3c 2e       	mov	r3, r28
    43c8:	f9 e0       	ldi	r31, 0x09	; 9
    43ca:	cf 16       	cp	r12, r31
    43cc:	d1 04       	cpc	r13, r1
    43ce:	58 f0       	brcs	.+22     	; 0x43e6 <_reply2ReturnCode+0x80>
    43d0:	f4 01       	movw	r30, r8
    43d2:	20 80       	ld	r2, Z
    43d4:	fe e0       	ldi	r31, 0x0E	; 14
    43d6:	2f 12       	cpse	r2, r31
    43d8:	06 c0       	rjmp	.+12     	; 0x43e6 <_reply2ReturnCode+0x80>
    43da:	b8 01       	movw	r22, r16
    43dc:	c5 01       	movw	r24, r10
    43de:	0e 94 88 30 	call	0x6110	; 0x6110 <strcasestr>
    43e2:	89 2b       	or	r24, r25
    43e4:	09 f5       	brne	.+66     	; 0x4428 <_reply2ReturnCode+0xc2>
    43e6:	44 2d       	mov	r20, r4
    43e8:	35 14       	cp	r3, r5
    43ea:	08 f4       	brcc	.+2      	; 0x43ee <_reply2ReturnCode+0x88>
    43ec:	4c 2f       	mov	r20, r28
    43ee:	50 e0       	ldi	r21, 0x00	; 0
    43f0:	b8 01       	movw	r22, r16
    43f2:	c5 01       	movw	r24, r10
    43f4:	0e 94 bf 30 	call	0x617e	; 0x617e <strncasecmp>
    43f8:	89 2b       	or	r24, r25
    43fa:	49 f4       	brne	.+18     	; 0x440e <_reply2ReturnCode+0xa8>
    43fc:	f3 01       	movw	r30, r6
    43fe:	ee 0f       	add	r30, r30
    4400:	ff 1f       	adc	r31, r31
    4402:	e6 0d       	add	r30, r6
    4404:	f7 1d       	adc	r31, r7
    4406:	e2 5f       	subi	r30, 0xF2	; 242
    4408:	f6 4f       	sbci	r31, 0xF6	; 246
    440a:	20 80       	ld	r2, Z
    440c:	0d c0       	rjmp	.+26     	; 0x4428 <_reply2ReturnCode+0xc2>
    440e:	8f ef       	ldi	r24, 0xFF	; 255
    4410:	e8 1a       	sub	r14, r24
    4412:	f8 0a       	sbc	r15, r24
    4414:	e3 e0       	ldi	r30, 0x03	; 3
    4416:	8e 0e       	add	r8, r30
    4418:	91 1c       	adc	r9, r1
    441a:	f1 e1       	ldi	r31, 0x11	; 17
    441c:	ef 16       	cp	r14, r31
    441e:	f1 04       	cpc	r15, r1
    4420:	39 f6       	brne	.-114    	; 0x43b0 <_reply2ReturnCode+0x4a>
    4422:	68 94       	set
    4424:	22 24       	eor	r2, r2
    4426:	24 f8       	bld	r2, 4
    4428:	82 2d       	mov	r24, r2
    442a:	df 91       	pop	r29
    442c:	cf 91       	pop	r28
    442e:	1f 91       	pop	r17
    4430:	0f 91       	pop	r16
    4432:	ff 90       	pop	r15
    4434:	ef 90       	pop	r14
    4436:	df 90       	pop	r13
    4438:	cf 90       	pop	r12
    443a:	bf 90       	pop	r11
    443c:	af 90       	pop	r10
    443e:	9f 90       	pop	r9
    4440:	8f 90       	pop	r8
    4442:	7f 90       	pop	r7
    4444:	6f 90       	pop	r6
    4446:	5f 90       	pop	r5
    4448:	4f 90       	pop	r4
    444a:	3f 90       	pop	r3
    444c:	2f 90       	pop	r2
    444e:	08 95       	ret

00004450 <_uploadMessageRc>:
    4450:	30 df       	rcall	.-416    	; 0x42b2 <_uploadMessage>
    4452:	89 cf       	rjmp	.-238    	; 0x4366 <_reply2ReturnCode>
    4454:	08 95       	ret

00004456 <lora_driver_flushBuffers>:
    4456:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <_serialReplyBufferHandle>
    445a:	90 91 84 17 	lds	r25, 0x1784	; 0x801784 <_serialReplyBufferHandle+0x1>
    445e:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <xStreamBufferReset>
    4462:	08 95       	ret

00004464 <lora_driver_initialise>:
    4464:	8f 92       	push	r8
    4466:	9f 92       	push	r9
    4468:	af 92       	push	r10
    446a:	cf 92       	push	r12
    446c:	ef 92       	push	r14
    446e:	0f 93       	push	r16
    4470:	1f 93       	push	r17
    4472:	cf 93       	push	r28
    4474:	c8 2f       	mov	r28, r24
    4476:	8b 01       	movw	r16, r22
    4478:	41 e0       	ldi	r20, 0x01	; 1
    447a:	60 e0       	ldi	r22, 0x00	; 0
    447c:	70 e0       	ldi	r23, 0x00	; 0
    447e:	88 ec       	ldi	r24, 0xC8	; 200
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <xStreamBufferGenericCreate>
    4486:	90 93 84 17 	sts	0x1784, r25	; 0x801784 <_serialReplyBufferHandle+0x1>
    448a:	80 93 83 17 	sts	0x1783, r24	; 0x801783 <_serialReplyBufferHandle>
    448e:	10 93 82 17 	sts	0x1782, r17	; 0x801782 <_downlinkMessageBuffer+0x1>
    4492:	00 93 81 17 	sts	0x1781, r16	; 0x801781 <_downlinkMessageBuffer>
    4496:	0f 2e       	mov	r0, r31
    4498:	f3 e1       	ldi	r31, 0x13	; 19
    449a:	8f 2e       	mov	r8, r31
    449c:	f1 e2       	ldi	r31, 0x21	; 33
    449e:	9f 2e       	mov	r9, r31
    44a0:	f0 2d       	mov	r31, r0
    44a2:	68 94       	set
    44a4:	aa 24       	eor	r10, r10
    44a6:	a6 f8       	bld	r10, 6
    44a8:	68 94       	set
    44aa:	cc 24       	eor	r12, r12
    44ac:	c6 f8       	bld	r12, 6
    44ae:	e1 2c       	mov	r14, r1
    44b0:	00 e0       	ldi	r16, 0x00	; 0
    44b2:	23 e0       	ldi	r18, 0x03	; 3
    44b4:	40 e0       	ldi	r20, 0x00	; 0
    44b6:	51 ee       	ldi	r21, 0xE1	; 225
    44b8:	60 e0       	ldi	r22, 0x00	; 0
    44ba:	70 e0       	ldi	r23, 0x00	; 0
    44bc:	8c 2f       	mov	r24, r28
    44be:	06 d4       	rcall	.+2060   	; 0x4ccc <serial_create>
    44c0:	90 93 86 17 	sts	0x1786, r25	; 0x801786 <_rn2483_serial+0x1>
    44c4:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <_rn2483_serial>
    44c8:	e7 e0       	ldi	r30, 0x07	; 7
    44ca:	f1 e0       	ldi	r31, 0x01	; 1
    44cc:	80 81       	ld	r24, Z
    44ce:	80 61       	ori	r24, 0x10	; 16
    44d0:	80 83       	st	Z, r24
    44d2:	cf 91       	pop	r28
    44d4:	1f 91       	pop	r17
    44d6:	0f 91       	pop	r16
    44d8:	ef 90       	pop	r14
    44da:	cf 90       	pop	r12
    44dc:	af 90       	pop	r10
    44de:	9f 90       	pop	r9
    44e0:	8f 90       	pop	r8
    44e2:	08 95       	ret

000044e4 <lora_driver_resetRn2483>:
    44e4:	88 23       	and	r24, r24
    44e6:	31 f0       	breq	.+12     	; 0x44f4 <lora_driver_resetRn2483+0x10>
    44e8:	e8 e0       	ldi	r30, 0x08	; 8
    44ea:	f1 e0       	ldi	r31, 0x01	; 1
    44ec:	80 81       	ld	r24, Z
    44ee:	8f 7e       	andi	r24, 0xEF	; 239
    44f0:	80 83       	st	Z, r24
    44f2:	08 95       	ret
    44f4:	e8 e0       	ldi	r30, 0x08	; 8
    44f6:	f1 e0       	ldi	r31, 0x01	; 1
    44f8:	80 81       	ld	r24, Z
    44fa:	80 61       	ori	r24, 0x10	; 16
    44fc:	80 83       	st	Z, r24
    44fe:	08 95       	ret

00004500 <lora_driver_rn2483FactoryReset>:
    4500:	60 e0       	ldi	r22, 0x00	; 0
    4502:	70 e0       	ldi	r23, 0x00	; 0
    4504:	84 e9       	ldi	r24, 0x94	; 148
    4506:	96 e0       	ldi	r25, 0x06	; 6
    4508:	d4 de       	rcall	.-600    	; 0x42b2 <_uploadMessage>
    450a:	ec e0       	ldi	r30, 0x0C	; 12
    450c:	f8 e1       	ldi	r31, 0x18	; 24
    450e:	01 90       	ld	r0, Z+
    4510:	00 20       	and	r0, r0
    4512:	e9 f7       	brne	.-6      	; 0x450e <lora_driver_rn2483FactoryReset+0xe>
    4514:	31 97       	sbiw	r30, 0x01	; 1
    4516:	ec 50       	subi	r30, 0x0C	; 12
    4518:	f8 41       	sbci	r31, 0x18	; 24
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	75 97       	sbiw	r30, 0x15	; 21
    451e:	08 f0       	brcs	.+2      	; 0x4522 <lora_driver_rn2483FactoryReset+0x22>
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	08 95       	ret

00004524 <lora_driver_getRn2483Hweui>:
    4524:	cf 93       	push	r28
    4526:	df 93       	push	r29
    4528:	ec 01       	movw	r28, r24
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	70 e0       	ldi	r23, 0x00	; 0
    452e:	85 ea       	ldi	r24, 0xA5	; 165
    4530:	96 e0       	ldi	r25, 0x06	; 6
    4532:	bf de       	rcall	.-642    	; 0x42b2 <_uploadMessage>
    4534:	ec e0       	ldi	r30, 0x0C	; 12
    4536:	f8 e1       	ldi	r31, 0x18	; 24
    4538:	01 90       	ld	r0, Z+
    453a:	00 20       	and	r0, r0
    453c:	e9 f7       	brne	.-6      	; 0x4538 <lora_driver_getRn2483Hweui+0x14>
    453e:	ed 51       	subi	r30, 0x1D	; 29
    4540:	f8 41       	sbci	r31, 0x18	; 24
    4542:	39 f4       	brne	.+14     	; 0x4552 <lora_driver_getRn2483Hweui+0x2e>
    4544:	6c e0       	ldi	r22, 0x0C	; 12
    4546:	78 e1       	ldi	r23, 0x18	; 24
    4548:	ce 01       	movw	r24, r28
    454a:	0e 94 b8 30 	call	0x6170	; 0x6170 <strcpy>
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	02 c0       	rjmp	.+4      	; 0x4556 <lora_driver_getRn2483Hweui+0x32>
    4552:	18 82       	st	Y, r1
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	df 91       	pop	r29
    4558:	cf 91       	pop	r28
    455a:	08 95       	ret

0000455c <lora_driver_setDeviceIdentifier>:
    455c:	fc 01       	movw	r30, r24
    455e:	01 90       	ld	r0, Z+
    4560:	00 20       	and	r0, r0
    4562:	e9 f7       	brne	.-6      	; 0x455e <lora_driver_setDeviceIdentifier+0x2>
    4564:	9f 01       	movw	r18, r30
    4566:	21 51       	subi	r18, 0x11	; 17
    4568:	31 09       	sbc	r19, r1
    456a:	28 17       	cp	r18, r24
    456c:	39 07       	cpc	r19, r25
    456e:	29 f4       	brne	.+10     	; 0x457a <lora_driver_setDeviceIdentifier+0x1e>
    4570:	bc 01       	movw	r22, r24
    4572:	83 ed       	ldi	r24, 0xD3	; 211
    4574:	96 e0       	ldi	r25, 0x06	; 6
    4576:	6c cf       	rjmp	.-296    	; 0x4450 <_uploadMessageRc>
    4578:	08 95       	ret
    457a:	89 e0       	ldi	r24, 0x09	; 9
    457c:	08 95       	ret

0000457e <lora_driver_setApplicationIdentifier>:
    457e:	fc 01       	movw	r30, r24
    4580:	01 90       	ld	r0, Z+
    4582:	00 20       	and	r0, r0
    4584:	e9 f7       	brne	.-6      	; 0x4580 <lora_driver_setApplicationIdentifier+0x2>
    4586:	9f 01       	movw	r18, r30
    4588:	21 51       	subi	r18, 0x11	; 17
    458a:	31 09       	sbc	r19, r1
    458c:	28 17       	cp	r18, r24
    458e:	39 07       	cpc	r19, r25
    4590:	29 f4       	brne	.+10     	; 0x459c <lora_driver_setApplicationIdentifier+0x1e>
    4592:	bc 01       	movw	r22, r24
    4594:	82 ee       	ldi	r24, 0xE2	; 226
    4596:	96 e0       	ldi	r25, 0x06	; 6
    4598:	5b cf       	rjmp	.-330    	; 0x4450 <_uploadMessageRc>
    459a:	08 95       	ret
    459c:	89 e0       	ldi	r24, 0x09	; 9
    459e:	08 95       	ret

000045a0 <lora_driver_setApplicationKey>:
    45a0:	fc 01       	movw	r30, r24
    45a2:	01 90       	ld	r0, Z+
    45a4:	00 20       	and	r0, r0
    45a6:	e9 f7       	brne	.-6      	; 0x45a2 <lora_driver_setApplicationKey+0x2>
    45a8:	9f 01       	movw	r18, r30
    45aa:	21 52       	subi	r18, 0x21	; 33
    45ac:	31 09       	sbc	r19, r1
    45ae:	28 17       	cp	r18, r24
    45b0:	39 07       	cpc	r19, r25
    45b2:	29 f4       	brne	.+10     	; 0x45be <lora_driver_setApplicationKey+0x1e>
    45b4:	bc 01       	movw	r22, r24
    45b6:	81 ef       	ldi	r24, 0xF1	; 241
    45b8:	96 e0       	ldi	r25, 0x06	; 6
    45ba:	4a cf       	rjmp	.-364    	; 0x4450 <_uploadMessageRc>
    45bc:	08 95       	ret
    45be:	89 e0       	ldi	r24, 0x09	; 9
    45c0:	08 95       	ret

000045c2 <lora_driver_saveMac>:
    45c2:	60 e0       	ldi	r22, 0x00	; 0
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	80 e3       	ldi	r24, 0x30	; 48
    45c8:	97 e0       	ldi	r25, 0x07	; 7
    45ca:	42 cf       	rjmp	.-380    	; 0x4450 <_uploadMessageRc>
    45cc:	08 95       	ret

000045ce <lora_driver_join>:
    45ce:	0f 93       	push	r16
    45d0:	1f 93       	push	r17
    45d2:	e8 2f       	mov	r30, r24
    45d4:	f0 e0       	ldi	r31, 0x00	; 0
    45d6:	ee 0f       	add	r30, r30
    45d8:	ff 1f       	adc	r31, r31
    45da:	e6 5f       	subi	r30, 0xF6	; 246
    45dc:	f6 4f       	sbci	r31, 0xF6	; 246
    45de:	60 81       	ld	r22, Z
    45e0:	71 81       	ldd	r23, Z+1	; 0x01
    45e2:	89 e3       	ldi	r24, 0x39	; 57
    45e4:	97 e0       	ldi	r25, 0x07	; 7
    45e6:	34 df       	rcall	.-408    	; 0x4450 <_uploadMessageRc>
    45e8:	81 11       	cpse	r24, r1
    45ea:	14 c0       	rjmp	.+40     	; 0x4614 <lora_driver_join+0x46>
    45ec:	08 e2       	ldi	r16, 0x28	; 40
    45ee:	15 e0       	ldi	r17, 0x05	; 5
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	4d e2       	ldi	r20, 0x2D	; 45
    45f6:	50 e0       	ldi	r21, 0x00	; 0
    45f8:	6c e0       	ldi	r22, 0x0C	; 12
    45fa:	78 e1       	ldi	r23, 0x18	; 24
    45fc:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <_serialReplyBufferHandle>
    4600:	90 91 84 17 	lds	r25, 0x1784	; 0x801784 <_serialReplyBufferHandle+0x1>
    4604:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xStreamBufferReceive>
    4608:	88 23       	and	r24, r24
    460a:	21 f0       	breq	.+8      	; 0x4614 <lora_driver_join+0x46>
    460c:	8c e0       	ldi	r24, 0x0C	; 12
    460e:	98 e1       	ldi	r25, 0x18	; 24
    4610:	aa de       	rcall	.-684    	; 0x4366 <_reply2ReturnCode>
    4612:	03 c0       	rjmp	.+6      	; 0x461a <lora_driver_join+0x4c>
    4614:	8c e0       	ldi	r24, 0x0C	; 12
    4616:	98 e1       	ldi	r25, 0x18	; 24
    4618:	a6 de       	rcall	.-692    	; 0x4366 <_reply2ReturnCode>
    461a:	1f 91       	pop	r17
    461c:	0f 91       	pop	r16
    461e:	08 95       	ret

00004620 <lora_driver_sendUploadMessage>:
    4620:	0f 93       	push	r16
    4622:	1f 93       	push	r17
    4624:	cf 93       	push	r28
    4626:	df 93       	push	r29
    4628:	1f 92       	push	r1
    462a:	cd b7       	in	r28, 0x3d	; 61
    462c:	de b7       	in	r29, 0x3e	; 62
    462e:	db 01       	movw	r26, r22
    4630:	11 96       	adiw	r26, 0x01	; 1
    4632:	9c 91       	ld	r25, X
    4634:	11 97       	sbiw	r26, 0x01	; 1
    4636:	95 31       	cpi	r25, 0x15	; 21
    4638:	08 f0       	brcs	.+2      	; 0x463c <lora_driver_sendUploadMessage+0x1c>
    463a:	b4 c0       	rjmp	.+360    	; 0x47a4 <lora_driver_sendUploadMessage+0x184>
    463c:	99 23       	and	r25, r25
    463e:	81 f1       	breq	.+96     	; 0x46a0 <lora_driver_sendUploadMessage+0x80>
    4640:	60 e0       	ldi	r22, 0x00	; 0
    4642:	70 e0       	ldi	r23, 0x00	; 0
    4644:	27 2f       	mov	r18, r23
    4646:	30 e0       	ldi	r19, 0x00	; 0
    4648:	46 2f       	mov	r20, r22
    464a:	50 e0       	ldi	r21, 0x00	; 0
    464c:	fd 01       	movw	r30, r26
    464e:	e4 0f       	add	r30, r20
    4650:	f5 1f       	adc	r31, r21
    4652:	92 81       	ldd	r25, Z+2	; 0x02
    4654:	92 95       	swap	r25
    4656:	9f 70       	andi	r25, 0x0F	; 15
    4658:	9a 30       	cpi	r25, 0x0A	; 10
    465a:	10 f0       	brcs	.+4      	; 0x4660 <lora_driver_sendUploadMessage+0x40>
    465c:	99 5c       	subi	r25, 0xC9	; 201
    465e:	01 c0       	rjmp	.+2      	; 0x4662 <lora_driver_sendUploadMessage+0x42>
    4660:	90 5d       	subi	r25, 0xD0	; 208
    4662:	f9 01       	movw	r30, r18
    4664:	e3 56       	subi	r30, 0x63	; 99
    4666:	f8 4e       	sbci	r31, 0xE8	; 232
    4668:	90 83       	st	Z, r25
    466a:	2f 5f       	subi	r18, 0xFF	; 255
    466c:	3f 4f       	sbci	r19, 0xFF	; 255
    466e:	fd 01       	movw	r30, r26
    4670:	e4 0f       	add	r30, r20
    4672:	f5 1f       	adc	r31, r21
    4674:	92 81       	ldd	r25, Z+2	; 0x02
    4676:	9f 70       	andi	r25, 0x0F	; 15
    4678:	49 2f       	mov	r20, r25
    467a:	50 e0       	ldi	r21, 0x00	; 0
    467c:	4a 30       	cpi	r20, 0x0A	; 10
    467e:	51 05       	cpc	r21, r1
    4680:	14 f0       	brlt	.+4      	; 0x4686 <lora_driver_sendUploadMessage+0x66>
    4682:	99 5c       	subi	r25, 0xC9	; 201
    4684:	01 c0       	rjmp	.+2      	; 0x4688 <lora_driver_sendUploadMessage+0x68>
    4686:	90 5d       	subi	r25, 0xD0	; 208
    4688:	f9 01       	movw	r30, r18
    468a:	e3 56       	subi	r30, 0x63	; 99
    468c:	f8 4e       	sbci	r31, 0xE8	; 232
    468e:	90 83       	st	Z, r25
    4690:	7e 5f       	subi	r23, 0xFE	; 254
    4692:	6f 5f       	subi	r22, 0xFF	; 255
    4694:	11 96       	adiw	r26, 0x01	; 1
    4696:	9c 91       	ld	r25, X
    4698:	11 97       	sbiw	r26, 0x01	; 1
    469a:	69 17       	cp	r22, r25
    469c:	98 f2       	brcs	.-90     	; 0x4644 <lora_driver_sendUploadMessage+0x24>
    469e:	01 c0       	rjmp	.+2      	; 0x46a2 <lora_driver_sendUploadMessage+0x82>
    46a0:	70 e0       	ldi	r23, 0x00	; 0
    46a2:	e7 2f       	mov	r30, r23
    46a4:	f0 e0       	ldi	r31, 0x00	; 0
    46a6:	e3 56       	subi	r30, 0x63	; 99
    46a8:	f8 4e       	sbci	r31, 0xE8	; 232
    46aa:	10 82       	st	Z, r1
    46ac:	4c 91       	ld	r20, X
    46ae:	81 11       	cpse	r24, r1
    46b0:	03 c0       	rjmp	.+6      	; 0x46b8 <lora_driver_sendUploadMessage+0x98>
    46b2:	82 e4       	ldi	r24, 0x42	; 66
    46b4:	97 e0       	ldi	r25, 0x07	; 7
    46b6:	02 c0       	rjmp	.+4      	; 0x46bc <lora_driver_sendUploadMessage+0x9c>
    46b8:	84 e4       	ldi	r24, 0x44	; 68
    46ba:	97 e0       	ldi	r25, 0x07	; 7
    46bc:	2d e9       	ldi	r18, 0x9D	; 157
    46be:	37 e1       	ldi	r19, 0x17	; 23
    46c0:	3f 93       	push	r19
    46c2:	2f 93       	push	r18
    46c4:	1f 92       	push	r1
    46c6:	4f 93       	push	r20
    46c8:	9f 93       	push	r25
    46ca:	8f 93       	push	r24
    46cc:	88 e4       	ldi	r24, 0x48	; 72
    46ce:	97 e0       	ldi	r25, 0x07	; 7
    46d0:	9f 93       	push	r25
    46d2:	8f 93       	push	r24
    46d4:	8f ed       	ldi	r24, 0xDF	; 223
    46d6:	97 e1       	ldi	r25, 0x17	; 23
    46d8:	9f 93       	push	r25
    46da:	8f 93       	push	r24
    46dc:	0e 94 1a 31 	call	0x6234	; 0x6234 <sprintf>
    46e0:	60 e0       	ldi	r22, 0x00	; 0
    46e2:	70 e0       	ldi	r23, 0x00	; 0
    46e4:	8f ed       	ldi	r24, 0xDF	; 223
    46e6:	97 e1       	ldi	r25, 0x17	; 23
    46e8:	b3 de       	rcall	.-666    	; 0x4450 <_uploadMessageRc>
    46ea:	0f b6       	in	r0, 0x3f	; 63
    46ec:	f8 94       	cli
    46ee:	de bf       	out	0x3e, r29	; 62
    46f0:	0f be       	out	0x3f, r0	; 63
    46f2:	cd bf       	out	0x3d, r28	; 61
    46f4:	81 11       	cpse	r24, r1
    46f6:	59 c0       	rjmp	.+178    	; 0x47aa <lora_driver_sendUploadMessage+0x18a>
    46f8:	08 e2       	ldi	r16, 0x28	; 40
    46fa:	15 e0       	ldi	r17, 0x05	; 5
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	4d e2       	ldi	r20, 0x2D	; 45
    4702:	50 e0       	ldi	r21, 0x00	; 0
    4704:	6c e0       	ldi	r22, 0x0C	; 12
    4706:	78 e1       	ldi	r23, 0x18	; 24
    4708:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <_serialReplyBufferHandle>
    470c:	90 91 84 17 	lds	r25, 0x1784	; 0x801784 <_serialReplyBufferHandle+0x1>
    4710:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xStreamBufferReceive>
    4714:	88 23       	and	r24, r24
    4716:	09 f4       	brne	.+2      	; 0x471a <lora_driver_sendUploadMessage+0xfa>
    4718:	47 c0       	rjmp	.+142    	; 0x47a8 <lora_driver_sendUploadMessage+0x188>
    471a:	8c e0       	ldi	r24, 0x0C	; 12
    471c:	98 e1       	ldi	r25, 0x18	; 24
    471e:	23 de       	rcall	.-954    	; 0x4366 <_reply2ReturnCode>
    4720:	8e 30       	cpi	r24, 0x0E	; 14
    4722:	09 f0       	breq	.+2      	; 0x4726 <lora_driver_sendUploadMessage+0x106>
    4724:	42 c0       	rjmp	.+132    	; 0x47aa <lora_driver_sendUploadMessage+0x18a>
    4726:	87 e0       	ldi	r24, 0x07	; 7
    4728:	89 83       	std	Y+1, r24	; 0x01
    472a:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <_downlinkMessageBuffer>
    472e:	90 91 82 17 	lds	r25, 0x1782	; 0x801782 <_downlinkMessageBuffer+0x1>
    4732:	89 2b       	or	r24, r25
    4734:	a9 f1       	breq	.+106    	; 0x47a0 <lora_driver_sendUploadMessage+0x180>
    4736:	be 01       	movw	r22, r28
    4738:	6f 5f       	subi	r22, 0xFF	; 255
    473a:	7f 4f       	sbci	r23, 0xFF	; 255
    473c:	8c e0       	ldi	r24, 0x0C	; 12
    473e:	98 e1       	ldi	r25, 0x18	; 24
    4740:	68 d1       	rcall	.+720    	; 0x4a12 <decode_port_no>
    4742:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <_downlinkPayload>
    4746:	e9 81       	ldd	r30, Y+1	; 0x01
    4748:	f0 e0       	ldi	r31, 0x00	; 0
    474a:	e4 5f       	subi	r30, 0xF4	; 244
    474c:	f7 4e       	sbci	r31, 0xE7	; 231
    474e:	df 01       	movw	r26, r30
    4750:	0d 90       	ld	r0, X+
    4752:	00 20       	and	r0, r0
    4754:	e9 f7       	brne	.-6      	; 0x4750 <lora_driver_sendUploadMessage+0x130>
    4756:	11 97       	sbiw	r26, 0x01	; 1
    4758:	ae 1b       	sub	r26, r30
    475a:	bf 0b       	sbc	r27, r31
    475c:	aa 23       	and	r26, r26
    475e:	91 f0       	breq	.+36     	; 0x4784 <lora_driver_sendUploadMessage+0x164>
    4760:	bb 27       	eor	r27, r27
    4762:	cd 01       	movw	r24, r26
    4764:	01 97       	sbiw	r24, 0x01	; 1
    4766:	9c 01       	movw	r18, r24
    4768:	12 f4       	brpl	.+4      	; 0x476e <lora_driver_sendUploadMessage+0x14e>
    476a:	2f 5f       	subi	r18, 0xFF	; 255
    476c:	3f 4f       	sbci	r19, 0xFF	; 255
    476e:	35 95       	asr	r19
    4770:	27 95       	ror	r18
    4772:	20 93 88 17 	sts	0x1788, r18	; 0x801788 <_downlinkPayload+0x1>
    4776:	af 01       	movw	r20, r30
    4778:	4f 5f       	subi	r20, 0xFF	; 255
    477a:	5f 4f       	sbci	r21, 0xFF	; 255
    477c:	64 e1       	ldi	r22, 0x14	; 20
    477e:	89 e8       	ldi	r24, 0x89	; 137
    4780:	97 e1       	ldi	r25, 0x17	; 23
    4782:	73 d1       	rcall	.+742    	; 0x4a6a <decode_hexadecimal_string_bytes>
    4784:	01 e0       	ldi	r16, 0x01	; 1
    4786:	10 e0       	ldi	r17, 0x00	; 0
    4788:	20 e0       	ldi	r18, 0x00	; 0
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	46 e1       	ldi	r20, 0x16	; 22
    478e:	50 e0       	ldi	r21, 0x00	; 0
    4790:	67 e8       	ldi	r22, 0x87	; 135
    4792:	77 e1       	ldi	r23, 0x17	; 23
    4794:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <_downlinkMessageBuffer>
    4798:	90 91 82 17 	lds	r25, 0x1782	; 0x801782 <_downlinkMessageBuffer+0x1>
    479c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <xStreamBufferSend>
    47a0:	8e e0       	ldi	r24, 0x0E	; 14
    47a2:	03 c0       	rjmp	.+6      	; 0x47aa <lora_driver_sendUploadMessage+0x18a>
    47a4:	84 e1       	ldi	r24, 0x14	; 20
    47a6:	01 c0       	rjmp	.+2      	; 0x47aa <lora_driver_sendUploadMessage+0x18a>
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	0f 90       	pop	r0
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	1f 91       	pop	r17
    47b2:	0f 91       	pop	r16
    47b4:	08 95       	ret

000047b6 <lora_driver_setAdaptiveDataRate>:
    47b6:	81 30       	cpi	r24, 0x01	; 1
    47b8:	19 f0       	breq	.+6      	; 0x47c0 <lora_driver_setAdaptiveDataRate+0xa>
    47ba:	68 e5       	ldi	r22, 0x58	; 88
    47bc:	77 e0       	ldi	r23, 0x07	; 7
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <lora_driver_setAdaptiveDataRate+0xe>
    47c0:	61 e3       	ldi	r22, 0x31	; 49
    47c2:	78 e0       	ldi	r23, 0x08	; 8
    47c4:	8c e5       	ldi	r24, 0x5C	; 92
    47c6:	97 e0       	ldi	r25, 0x07	; 7
    47c8:	43 ce       	rjmp	.-890    	; 0x4450 <_uploadMessageRc>
    47ca:	08 95       	ret

000047cc <lora_driver_setReceiveDelay>:
    47cc:	9f 93       	push	r25
    47ce:	8f 93       	push	r24
    47d0:	8d e8       	ldi	r24, 0x8D	; 141
    47d2:	97 e0       	ldi	r25, 0x07	; 7
    47d4:	9f 93       	push	r25
    47d6:	8f 93       	push	r24
    47d8:	8f ed       	ldi	r24, 0xDF	; 223
    47da:	97 e1       	ldi	r25, 0x17	; 23
    47dc:	9f 93       	push	r25
    47de:	8f 93       	push	r24
    47e0:	0e 94 1a 31 	call	0x6234	; 0x6234 <sprintf>
    47e4:	60 e0       	ldi	r22, 0x00	; 0
    47e6:	70 e0       	ldi	r23, 0x00	; 0
    47e8:	8f ed       	ldi	r24, 0xDF	; 223
    47ea:	97 e1       	ldi	r25, 0x17	; 23
    47ec:	31 de       	rcall	.-926    	; 0x4450 <_uploadMessageRc>
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	0f 90       	pop	r0
    47f4:	0f 90       	pop	r0
    47f6:	0f 90       	pop	r0
    47f8:	0f 90       	pop	r0
    47fa:	08 95       	ret

000047fc <lora_driver_configureToEu868>:
    47fc:	2f 92       	push	r2
    47fe:	3f 92       	push	r3
    4800:	4f 92       	push	r4
    4802:	5f 92       	push	r5
    4804:	6f 92       	push	r6
    4806:	7f 92       	push	r7
    4808:	8f 92       	push	r8
    480a:	9f 92       	push	r9
    480c:	af 92       	push	r10
    480e:	bf 92       	push	r11
    4810:	cf 92       	push	r12
    4812:	df 92       	push	r13
    4814:	ef 92       	push	r14
    4816:	ff 92       	push	r15
    4818:	0f 93       	push	r16
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	cd b7       	in	r28, 0x3d	; 61
    4822:	de b7       	in	r29, 0x3e	; 62
    4824:	a0 97       	sbiw	r28, 0x20	; 32
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	f8 94       	cli
    482a:	de bf       	out	0x3e, r29	; 62
    482c:	0f be       	out	0x3f, r0	; 63
    482e:	cd bf       	out	0x3d, r28	; 61
    4830:	6a eb       	ldi	r22, 0xBA	; 186
    4832:	77 e0       	ldi	r23, 0x07	; 7
    4834:	86 ec       	ldi	r24, 0xC6	; 198
    4836:	97 e0       	ldi	r25, 0x07	; 7
    4838:	3c dd       	rcall	.-1416   	; 0x42b2 <_uploadMessage>
    483a:	95 dd       	rcall	.-1238   	; 0x4366 <_reply2ReturnCode>
    483c:	81 11       	cpse	r24, r1
    483e:	a3 c0       	rjmp	.+326    	; 0x4986 <lora_driver_configureToEu868+0x18a>
    4840:	80 e2       	ldi	r24, 0x20	; 32
    4842:	e2 e2       	ldi	r30, 0x22	; 34
    4844:	f2 e0       	ldi	r31, 0x02	; 2
    4846:	de 01       	movw	r26, r28
    4848:	11 96       	adiw	r26, 0x01	; 1
    484a:	01 90       	ld	r0, Z+
    484c:	0d 92       	st	X+, r0
    484e:	8a 95       	dec	r24
    4850:	e1 f7       	brne	.-8      	; 0x484a <lora_driver_configureToEu868+0x4e>
    4852:	9e 01       	movw	r18, r28
    4854:	2f 5f       	subi	r18, 0xFF	; 255
    4856:	3f 4f       	sbci	r19, 0xFF	; 255
    4858:	69 01       	movw	r12, r18
    485a:	e1 2c       	mov	r14, r1
    485c:	f1 2c       	mov	r15, r1
    485e:	0f 2e       	mov	r0, r31
    4860:	f2 ed       	ldi	r31, 0xD2	; 210
    4862:	af 2e       	mov	r10, r31
    4864:	f7 e0       	ldi	r31, 0x07	; 7
    4866:	bf 2e       	mov	r11, r31
    4868:	f0 2d       	mov	r31, r0
    486a:	0f ed       	ldi	r16, 0xDF	; 223
    486c:	17 e1       	ldi	r17, 0x17	; 23
    486e:	0f 2e       	mov	r0, r31
    4870:	fb ee       	ldi	r31, 0xEB	; 235
    4872:	4f 2e       	mov	r4, r31
    4874:	f7 e0       	ldi	r31, 0x07	; 7
    4876:	5f 2e       	mov	r5, r31
    4878:	f0 2d       	mov	r31, r0
    487a:	0f 2e       	mov	r0, r31
    487c:	f2 e0       	ldi	r31, 0x02	; 2
    487e:	8f 2e       	mov	r8, r31
    4880:	f8 e0       	ldi	r31, 0x08	; 8
    4882:	9f 2e       	mov	r9, r31
    4884:	f0 2d       	mov	r31, r0
    4886:	0f 2e       	mov	r0, r31
    4888:	fc e1       	ldi	r31, 0x1C	; 28
    488a:	6f 2e       	mov	r6, r31
    488c:	f8 e0       	ldi	r31, 0x08	; 8
    488e:	7f 2e       	mov	r7, r31
    4890:	f0 2d       	mov	r31, r0
    4892:	3e 2c       	mov	r3, r14
    4894:	2f 2c       	mov	r2, r15
    4896:	ff 92       	push	r15
    4898:	ef 92       	push	r14
    489a:	bf 92       	push	r11
    489c:	af 92       	push	r10
    489e:	1f 93       	push	r17
    48a0:	0f 93       	push	r16
    48a2:	0e 94 1a 31 	call	0x6234	; 0x6234 <sprintf>
    48a6:	60 e0       	ldi	r22, 0x00	; 0
    48a8:	70 e0       	ldi	r23, 0x00	; 0
    48aa:	c8 01       	movw	r24, r16
    48ac:	02 dd       	rcall	.-1532   	; 0x42b2 <_uploadMessage>
    48ae:	5b dd       	rcall	.-1354   	; 0x4366 <_reply2ReturnCode>
    48b0:	0f 90       	pop	r0
    48b2:	0f 90       	pop	r0
    48b4:	0f 90       	pop	r0
    48b6:	0f 90       	pop	r0
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	81 11       	cpse	r24, r1
    48be:	63 c0       	rjmp	.+198    	; 0x4986 <lora_driver_configureToEu868+0x18a>
    48c0:	32 e0       	ldi	r19, 0x02	; 2
    48c2:	3e 15       	cp	r19, r14
    48c4:	e8 f4       	brcc	.+58     	; 0x4900 <lora_driver_configureToEu868+0x104>
    48c6:	f6 01       	movw	r30, r12
    48c8:	83 81       	ldd	r24, Z+3	; 0x03
    48ca:	8f 93       	push	r24
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	8f 93       	push	r24
    48d0:	81 81       	ldd	r24, Z+1	; 0x01
    48d2:	8f 93       	push	r24
    48d4:	80 81       	ld	r24, Z
    48d6:	8f 93       	push	r24
    48d8:	ff 92       	push	r15
    48da:	ef 92       	push	r14
    48dc:	5f 92       	push	r5
    48de:	4f 92       	push	r4
    48e0:	1f 93       	push	r17
    48e2:	0f 93       	push	r16
    48e4:	0e 94 1a 31 	call	0x6234	; 0x6234 <sprintf>
    48e8:	60 e0       	ldi	r22, 0x00	; 0
    48ea:	70 e0       	ldi	r23, 0x00	; 0
    48ec:	c8 01       	movw	r24, r16
    48ee:	e1 dc       	rcall	.-1598   	; 0x42b2 <_uploadMessage>
    48f0:	3a dd       	rcall	.-1420   	; 0x4366 <_reply2ReturnCode>
    48f2:	0f b6       	in	r0, 0x3f	; 63
    48f4:	f8 94       	cli
    48f6:	de bf       	out	0x3e, r29	; 62
    48f8:	0f be       	out	0x3f, r0	; 63
    48fa:	cd bf       	out	0x3d, r28	; 61
    48fc:	81 11       	cpse	r24, r1
    48fe:	43 c0       	rjmp	.+134    	; 0x4986 <lora_driver_configureToEu868+0x18a>
    4900:	2f 92       	push	r2
    4902:	3f 92       	push	r3
    4904:	9f 92       	push	r9
    4906:	8f 92       	push	r8
    4908:	1f 93       	push	r17
    490a:	0f 93       	push	r16
    490c:	0e 94 1a 31 	call	0x6234	; 0x6234 <sprintf>
    4910:	60 e0       	ldi	r22, 0x00	; 0
    4912:	70 e0       	ldi	r23, 0x00	; 0
    4914:	c8 01       	movw	r24, r16
    4916:	cd dc       	rcall	.-1638   	; 0x42b2 <_uploadMessage>
    4918:	26 dd       	rcall	.-1460   	; 0x4366 <_reply2ReturnCode>
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	0f 90       	pop	r0
    4922:	0f 90       	pop	r0
    4924:	0f 90       	pop	r0
    4926:	81 11       	cpse	r24, r1
    4928:	2e c0       	rjmp	.+92     	; 0x4986 <lora_driver_configureToEu868+0x18a>
    492a:	2f 92       	push	r2
    492c:	3f 92       	push	r3
    492e:	7f 92       	push	r7
    4930:	6f 92       	push	r6
    4932:	1f 93       	push	r17
    4934:	0f 93       	push	r16
    4936:	0e 94 1a 31 	call	0x6234	; 0x6234 <sprintf>
    493a:	60 e0       	ldi	r22, 0x00	; 0
    493c:	70 e0       	ldi	r23, 0x00	; 0
    493e:	c8 01       	movw	r24, r16
    4940:	b8 dc       	rcall	.-1680   	; 0x42b2 <_uploadMessage>
    4942:	11 dd       	rcall	.-1502   	; 0x4366 <_reply2ReturnCode>
    4944:	0f 90       	pop	r0
    4946:	0f 90       	pop	r0
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	0f 90       	pop	r0
    494e:	0f 90       	pop	r0
    4950:	81 11       	cpse	r24, r1
    4952:	19 c0       	rjmp	.+50     	; 0x4986 <lora_driver_configureToEu868+0x18a>
    4954:	3f ef       	ldi	r19, 0xFF	; 255
    4956:	e3 1a       	sub	r14, r19
    4958:	f3 0a       	sbc	r15, r19
    495a:	84 e0       	ldi	r24, 0x04	; 4
    495c:	c8 0e       	add	r12, r24
    495e:	d1 1c       	adc	r13, r1
    4960:	98 e0       	ldi	r25, 0x08	; 8
    4962:	e9 16       	cp	r14, r25
    4964:	f1 04       	cpc	r15, r1
    4966:	09 f0       	breq	.+2      	; 0x496a <lora_driver_configureToEu868+0x16e>
    4968:	94 cf       	rjmp	.-216    	; 0x4892 <lora_driver_configureToEu868+0x96>
    496a:	60 e0       	ldi	r22, 0x00	; 0
    496c:	70 e0       	ldi	r23, 0x00	; 0
    496e:	84 e3       	ldi	r24, 0x34	; 52
    4970:	98 e0       	ldi	r25, 0x08	; 8
    4972:	9f dc       	rcall	.-1730   	; 0x42b2 <_uploadMessage>
    4974:	f8 dc       	rcall	.-1552   	; 0x4366 <_reply2ReturnCode>
    4976:	81 11       	cpse	r24, r1
    4978:	06 c0       	rjmp	.+12     	; 0x4986 <lora_driver_configureToEu868+0x18a>
    497a:	60 e0       	ldi	r22, 0x00	; 0
    497c:	70 e0       	ldi	r23, 0x00	; 0
    497e:	85 e4       	ldi	r24, 0x45	; 69
    4980:	98 e0       	ldi	r25, 0x08	; 8
    4982:	97 dc       	rcall	.-1746   	; 0x42b2 <_uploadMessage>
    4984:	f0 dc       	rcall	.-1568   	; 0x4366 <_reply2ReturnCode>
    4986:	a0 96       	adiw	r28, 0x20	; 32
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	1f 91       	pop	r17
    4998:	0f 91       	pop	r16
    499a:	ff 90       	pop	r15
    499c:	ef 90       	pop	r14
    499e:	df 90       	pop	r13
    49a0:	cf 90       	pop	r12
    49a2:	bf 90       	pop	r11
    49a4:	af 90       	pop	r10
    49a6:	9f 90       	pop	r9
    49a8:	8f 90       	pop	r8
    49aa:	7f 90       	pop	r7
    49ac:	6f 90       	pop	r6
    49ae:	5f 90       	pop	r5
    49b0:	4f 90       	pop	r4
    49b2:	3f 90       	pop	r3
    49b4:	2f 90       	pop	r2
    49b6:	08 95       	ret

000049b8 <lora_driver_setOtaaIdentity>:
    49b8:	ef 92       	push	r14
    49ba:	ff 92       	push	r15
    49bc:	0f 93       	push	r16
    49be:	1f 93       	push	r17
    49c0:	cf 93       	push	r28
    49c2:	df 93       	push	r29
    49c4:	ec 01       	movw	r28, r24
    49c6:	8b 01       	movw	r16, r22
    49c8:	7a 01       	movw	r14, r20
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	f4 de       	rcall	.-536    	; 0x47b6 <lora_driver_setAdaptiveDataRate>
    49ce:	81 11       	cpse	r24, r1
    49d0:	0d c0       	rjmp	.+26     	; 0x49ec <lora_driver_setOtaaIdentity+0x34>
    49d2:	ce 01       	movw	r24, r28
    49d4:	d4 dd       	rcall	.-1112   	; 0x457e <lora_driver_setApplicationIdentifier>
    49d6:	81 11       	cpse	r24, r1
    49d8:	09 c0       	rjmp	.+18     	; 0x49ec <lora_driver_setOtaaIdentity+0x34>
    49da:	c8 01       	movw	r24, r16
    49dc:	e1 dd       	rcall	.-1086   	; 0x45a0 <lora_driver_setApplicationKey>
    49de:	81 11       	cpse	r24, r1
    49e0:	05 c0       	rjmp	.+10     	; 0x49ec <lora_driver_setOtaaIdentity+0x34>
    49e2:	c7 01       	movw	r24, r14
    49e4:	bb dd       	rcall	.-1162   	; 0x455c <lora_driver_setDeviceIdentifier>
    49e6:	81 11       	cpse	r24, r1
    49e8:	01 c0       	rjmp	.+2      	; 0x49ec <lora_driver_setOtaaIdentity+0x34>
    49ea:	eb dd       	rcall	.-1066   	; 0x45c2 <lora_driver_saveMac>
    49ec:	df 91       	pop	r29
    49ee:	cf 91       	pop	r28
    49f0:	1f 91       	pop	r17
    49f2:	0f 91       	pop	r16
    49f4:	ff 90       	pop	r15
    49f6:	ef 90       	pop	r14
    49f8:	08 95       	ret

000049fa <lora_driver_mapReturnCodeToText>:
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	fc 01       	movw	r30, r24
    49fe:	ee 0f       	add	r30, r30
    4a00:	ff 1f       	adc	r31, r31
    4a02:	8e 0f       	add	r24, r30
    4a04:	9f 1f       	adc	r25, r31
    4a06:	fc 01       	movw	r30, r24
    4a08:	e2 5f       	subi	r30, 0xF2	; 242
    4a0a:	f6 4f       	sbci	r31, 0xF6	; 246
    4a0c:	81 81       	ldd	r24, Z+1	; 0x01
    4a0e:	92 81       	ldd	r25, Z+2	; 0x02
    4a10:	08 95       	ret

00004a12 <decode_port_no>:
    4a12:	dc 01       	movw	r26, r24
    4a14:	00 97       	sbiw	r24, 0x00	; 0
    4a16:	29 f1       	breq	.+74     	; 0x4a62 <decode_port_no+0x50>
    4a18:	fb 01       	movw	r30, r22
    4a1a:	20 81       	ld	r18, Z
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	01 90       	ld	r0, Z+
    4a20:	00 20       	and	r0, r0
    4a22:	e9 f7       	brne	.-6      	; 0x4a1e <decode_port_no+0xc>
    4a24:	31 97       	sbiw	r30, 0x01	; 1
    4a26:	e8 1b       	sub	r30, r24
    4a28:	f9 0b       	sbc	r31, r25
    4a2a:	82 2f       	mov	r24, r18
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	e8 17       	cp	r30, r24
    4a30:	f9 07       	cpc	r31, r25
    4a32:	c8 f0       	brcs	.+50     	; 0x4a66 <decode_port_no+0x54>
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	08 c0       	rjmp	.+16     	; 0x4a48 <decode_port_no+0x36>
    4a38:	88 0f       	add	r24, r24
    4a3a:	38 2f       	mov	r19, r24
    4a3c:	33 0f       	add	r19, r19
    4a3e:	33 0f       	add	r19, r19
    4a40:	83 0f       	add	r24, r19
    4a42:	80 53       	subi	r24, 0x30	; 48
    4a44:	89 0f       	add	r24, r25
    4a46:	2f 5f       	subi	r18, 0xFF	; 255
    4a48:	fd 01       	movw	r30, r26
    4a4a:	e2 0f       	add	r30, r18
    4a4c:	f1 1d       	adc	r31, r1
    4a4e:	90 81       	ld	r25, Z
    4a50:	30 ed       	ldi	r19, 0xD0	; 208
    4a52:	39 0f       	add	r19, r25
    4a54:	3a 30       	cpi	r19, 0x0A	; 10
    4a56:	10 f4       	brcc	.+4      	; 0x4a5c <decode_port_no+0x4a>
    4a58:	91 11       	cpse	r25, r1
    4a5a:	ee cf       	rjmp	.-36     	; 0x4a38 <decode_port_no+0x26>
    4a5c:	fb 01       	movw	r30, r22
    4a5e:	20 83       	st	Z, r18
    4a60:	08 95       	ret
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	08 95       	ret
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	08 95       	ret

00004a6a <decode_hexadecimal_string_bytes>:
    4a6a:	0f 93       	push	r16
    4a6c:	1f 93       	push	r17
    4a6e:	cf 93       	push	r28
    4a70:	df 93       	push	r29
    4a72:	dc 01       	movw	r26, r24
    4a74:	ea 01       	movw	r28, r20
    4a76:	20 97       	sbiw	r28, 0x00	; 0
    4a78:	e1 f1       	breq	.+120    	; 0x4af2 <decode_hexadecimal_string_bytes+0x88>
    4a7a:	fa 01       	movw	r30, r20
    4a7c:	01 90       	ld	r0, Z+
    4a7e:	00 20       	and	r0, r0
    4a80:	e9 f7       	brne	.-6      	; 0x4a7c <decode_hexadecimal_string_bytes+0x12>
    4a82:	31 97       	sbiw	r30, 0x01	; 1
    4a84:	e4 1b       	sub	r30, r20
    4a86:	f5 0b       	sbc	r31, r21
    4a88:	32 97       	sbiw	r30, 0x02	; 2
    4a8a:	10 f5       	brcc	.+68     	; 0x4ad0 <decode_hexadecimal_string_bytes+0x66>
    4a8c:	32 c0       	rjmp	.+100    	; 0x4af2 <decode_hexadecimal_string_bytes+0x88>
    4a8e:	8d 01       	movw	r16, r26
    4a90:	04 0f       	add	r16, r20
    4a92:	15 1f       	adc	r17, r21
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	ae 01       	movw	r20, r28
    4a98:	42 0f       	add	r20, r18
    4a9a:	53 1f       	adc	r21, r19
    4a9c:	fa 01       	movw	r30, r20
    4a9e:	90 81       	ld	r25, Z
    4aa0:	91 34       	cpi	r25, 0x41	; 65
    4aa2:	28 f0       	brcs	.+10     	; 0x4aae <decode_hexadecimal_string_bytes+0x44>
    4aa4:	97 53       	subi	r25, 0x37	; 55
    4aa6:	59 2f       	mov	r21, r25
    4aa8:	52 95       	swap	r21
    4aaa:	50 7f       	andi	r21, 0xF0	; 240
    4aac:	03 c0       	rjmp	.+6      	; 0x4ab4 <decode_hexadecimal_string_bytes+0x4a>
    4aae:	59 2f       	mov	r21, r25
    4ab0:	52 95       	swap	r21
    4ab2:	50 7f       	andi	r21, 0xF0	; 240
    4ab4:	2c 0f       	add	r18, r28
    4ab6:	3d 1f       	adc	r19, r29
    4ab8:	f9 01       	movw	r30, r18
    4aba:	91 81       	ldd	r25, Z+1	; 0x01
    4abc:	91 34       	cpi	r25, 0x41	; 65
    4abe:	10 f0       	brcs	.+4      	; 0x4ac4 <decode_hexadecimal_string_bytes+0x5a>
    4ac0:	97 53       	subi	r25, 0x37	; 55
    4ac2:	01 c0       	rjmp	.+2      	; 0x4ac6 <decode_hexadecimal_string_bytes+0x5c>
    4ac4:	90 53       	subi	r25, 0x30	; 48
    4ac6:	95 0f       	add	r25, r21
    4ac8:	f8 01       	movw	r30, r16
    4aca:	90 83       	st	Z, r25
    4acc:	8f 5f       	subi	r24, 0xFF	; 255
    4ace:	01 c0       	rjmp	.+2      	; 0x4ad2 <decode_hexadecimal_string_bytes+0x68>
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	28 2f       	mov	r18, r24
    4ad4:	22 0f       	add	r18, r18
    4ad6:	48 2f       	mov	r20, r24
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	fe 01       	movw	r30, r28
    4adc:	01 90       	ld	r0, Z+
    4ade:	00 20       	and	r0, r0
    4ae0:	e9 f7       	brne	.-6      	; 0x4adc <decode_hexadecimal_string_bytes+0x72>
    4ae2:	31 97       	sbiw	r30, 0x01	; 1
    4ae4:	ec 1b       	sub	r30, r28
    4ae6:	fd 0b       	sbc	r31, r29
    4ae8:	4e 17       	cp	r20, r30
    4aea:	5f 07       	cpc	r21, r31
    4aec:	10 f4       	brcc	.+4      	; 0x4af2 <decode_hexadecimal_string_bytes+0x88>
    4aee:	86 13       	cpse	r24, r22
    4af0:	ce cf       	rjmp	.-100    	; 0x4a8e <decode_hexadecimal_string_bytes+0x24>
    4af2:	df 91       	pop	r29
    4af4:	cf 91       	pop	r28
    4af6:	1f 91       	pop	r17
    4af8:	0f 91       	pop	r16
    4afa:	08 95       	ret

00004afc <_serialCallBack>:
    4afc:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <crc_sum.1945>
    4b00:	86 0f       	add	r24, r22
    4b02:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <crc_sum.1945>
    4b06:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <_mh_state>
    4b0a:	91 30       	cpi	r25, 0x01	; 1
    4b0c:	79 f0       	breq	.+30     	; 0x4b2c <_serialCallBack+0x30>
    4b0e:	28 f0       	brcs	.+10     	; 0x4b1a <_serialCallBack+0x1e>
    4b10:	92 30       	cpi	r25, 0x02	; 2
    4b12:	a9 f0       	breq	.+42     	; 0x4b3e <_serialCallBack+0x42>
    4b14:	93 30       	cpi	r25, 0x03	; 3
    4b16:	19 f1       	breq	.+70     	; 0x4b5e <_serialCallBack+0x62>
    4b18:	08 95       	ret
    4b1a:	6f 3f       	cpi	r22, 0xFF	; 255
    4b1c:	09 f0       	breq	.+2      	; 0x4b20 <_serialCallBack+0x24>
    4b1e:	48 c0       	rjmp	.+144    	; 0x4bb0 <_serialCallBack+0xb4>
    4b20:	10 92 3c 18 	sts	0x183C, r1	; 0x80183c <crc_sum.1945>
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <_mh_state>
    4b2a:	08 95       	ret
    4b2c:	66 38       	cpi	r22, 0x86	; 134
    4b2e:	09 f0       	breq	.+2      	; 0x4b32 <_serialCallBack+0x36>
    4b30:	3f c0       	rjmp	.+126    	; 0x4bb0 <_serialCallBack+0xb4>
    4b32:	10 92 3b 18 	sts	0x183B, r1	; 0x80183b <inDex.1943>
    4b36:	82 e0       	ldi	r24, 0x02	; 2
    4b38:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <_mh_state>
    4b3c:	08 95       	ret
    4b3e:	e0 91 3b 18 	lds	r30, 0x183B	; 0x80183b <inDex.1943>
    4b42:	81 e0       	ldi	r24, 0x01	; 1
    4b44:	8e 0f       	add	r24, r30
    4b46:	80 93 3b 18 	sts	0x183B, r24	; 0x80183b <inDex.1943>
    4b4a:	f0 e0       	ldi	r31, 0x00	; 0
    4b4c:	e7 5c       	subi	r30, 0xC7	; 199
    4b4e:	f7 4e       	sbci	r31, 0xE7	; 231
    4b50:	60 83       	st	Z, r22
    4b52:	82 30       	cpi	r24, 0x02	; 2
    4b54:	69 f5       	brne	.+90     	; 0x4bb0 <_serialCallBack+0xb4>
    4b56:	83 e0       	ldi	r24, 0x03	; 3
    4b58:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <_mh_state>
    4b5c:	08 95       	ret
    4b5e:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <inDex.1943>
    4b62:	21 e0       	ldi	r18, 0x01	; 1
    4b64:	29 0f       	add	r18, r25
    4b66:	20 93 3b 18 	sts	0x183B, r18	; 0x80183b <inDex.1943>
    4b6a:	96 30       	cpi	r25, 0x06	; 6
    4b6c:	09 f5       	brne	.+66     	; 0x4bb0 <_serialCallBack+0xb4>
    4b6e:	81 11       	cpse	r24, r1
    4b70:	0e c0       	rjmp	.+28     	; 0x4b8e <_serialCallBack+0x92>
    4b72:	e9 e3       	ldi	r30, 0x39	; 57
    4b74:	f8 e1       	ldi	r31, 0x18	; 24
    4b76:	80 81       	ld	r24, Z
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	98 2f       	mov	r25, r24
    4b7c:	88 27       	eor	r24, r24
    4b7e:	21 81       	ldd	r18, Z+1	; 0x01
    4b80:	82 0f       	add	r24, r18
    4b82:	91 1d       	adc	r25, r1
    4b84:	90 93 41 18 	sts	0x1841, r25	; 0x801841 <_ppm+0x1>
    4b88:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <_ppm>
    4b8c:	04 c0       	rjmp	.+8      	; 0x4b96 <_serialCallBack+0x9a>
    4b8e:	10 92 41 18 	sts	0x1841, r1	; 0x801841 <_ppm+0x1>
    4b92:	10 92 40 18 	sts	0x1840, r1	; 0x801840 <_ppm>
    4b96:	10 92 3f 18 	sts	0x183F, r1	; 0x80183f <_mh_state>
    4b9a:	e0 91 3d 18 	lds	r30, 0x183D	; 0x80183d <_appCallBack>
    4b9e:	f0 91 3e 18 	lds	r31, 0x183E	; 0x80183e <_appCallBack+0x1>
    4ba2:	30 97       	sbiw	r30, 0x00	; 0
    4ba4:	29 f0       	breq	.+10     	; 0x4bb0 <_serialCallBack+0xb4>
    4ba6:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <_ppm>
    4baa:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <_ppm+0x1>
    4bae:	19 95       	eicall
    4bb0:	08 95       	ret

00004bb2 <mh_z19_initialise>:
    4bb2:	8f 92       	push	r8
    4bb4:	9f 92       	push	r9
    4bb6:	af 92       	push	r10
    4bb8:	cf 92       	push	r12
    4bba:	ef 92       	push	r14
    4bbc:	0f 93       	push	r16
    4bbe:	0f 2e       	mov	r0, r31
    4bc0:	fe e7       	ldi	r31, 0x7E	; 126
    4bc2:	8f 2e       	mov	r8, r31
    4bc4:	f5 e2       	ldi	r31, 0x25	; 37
    4bc6:	9f 2e       	mov	r9, r31
    4bc8:	f0 2d       	mov	r31, r0
    4bca:	68 94       	set
    4bcc:	aa 24       	eor	r10, r10
    4bce:	a4 f8       	bld	r10, 4
    4bd0:	68 94       	set
    4bd2:	cc 24       	eor	r12, r12
    4bd4:	c4 f8       	bld	r12, 4
    4bd6:	e1 2c       	mov	r14, r1
    4bd8:	00 e0       	ldi	r16, 0x00	; 0
    4bda:	23 e0       	ldi	r18, 0x03	; 3
    4bdc:	40 e8       	ldi	r20, 0x80	; 128
    4bde:	55 e2       	ldi	r21, 0x25	; 37
    4be0:	60 e0       	ldi	r22, 0x00	; 0
    4be2:	70 e0       	ldi	r23, 0x00	; 0
    4be4:	73 d0       	rcall	.+230    	; 0x4ccc <serial_create>
    4be6:	90 93 43 18 	sts	0x1843, r25	; 0x801843 <_serial+0x1>
    4bea:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <_serial>
    4bee:	0f 91       	pop	r16
    4bf0:	ef 90       	pop	r14
    4bf2:	cf 90       	pop	r12
    4bf4:	af 90       	pop	r10
    4bf6:	9f 90       	pop	r9
    4bf8:	8f 90       	pop	r8
    4bfa:	08 95       	ret

00004bfc <mh_z19_injectCallBack>:
    4bfc:	90 93 3e 18 	sts	0x183E, r25	; 0x80183e <_appCallBack+0x1>
    4c00:	80 93 3d 18 	sts	0x183D, r24	; 0x80183d <_appCallBack>
    4c04:	08 95       	ret

00004c06 <mh_z19_takeMeassuring>:
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	cd b7       	in	r28, 0x3d	; 61
    4c0c:	de b7       	in	r29, 0x3e	; 62
    4c0e:	29 97       	sbiw	r28, 0x09	; 9
    4c10:	0f b6       	in	r0, 0x3f	; 63
    4c12:	f8 94       	cli
    4c14:	de bf       	out	0x3e, r29	; 62
    4c16:	0f be       	out	0x3f, r0	; 63
    4c18:	cd bf       	out	0x3d, r28	; 61
    4c1a:	89 e0       	ldi	r24, 0x09	; 9
    4c1c:	e2 e4       	ldi	r30, 0x42	; 66
    4c1e:	f2 e0       	ldi	r31, 0x02	; 2
    4c20:	9e 01       	movw	r18, r28
    4c22:	2f 5f       	subi	r18, 0xFF	; 255
    4c24:	3f 4f       	sbci	r19, 0xFF	; 255
    4c26:	d9 01       	movw	r26, r18
    4c28:	01 90       	ld	r0, Z+
    4c2a:	0d 92       	st	X+, r0
    4c2c:	8a 95       	dec	r24
    4c2e:	e1 f7       	brne	.-8      	; 0x4c28 <mh_z19_takeMeassuring+0x22>
    4c30:	10 92 41 18 	sts	0x1841, r1	; 0x801841 <_ppm+0x1>
    4c34:	10 92 40 18 	sts	0x1840, r1	; 0x801840 <_ppm>
    4c38:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <_serial>
    4c3c:	90 91 43 18 	lds	r25, 0x1843	; 0x801843 <_serial+0x1>
    4c40:	00 97       	sbiw	r24, 0x00	; 0
    4c42:	31 f0       	breq	.+12     	; 0x4c50 <mh_z19_takeMeassuring+0x4a>
    4c44:	42 2f       	mov	r20, r18
    4c46:	53 2f       	mov	r21, r19
    4c48:	69 e0       	ldi	r22, 0x09	; 9
    4c4a:	0c d1       	rcall	.+536    	; 0x4e64 <serial_sendBytes>
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <mh_z19_takeMeassuring+0x4c>
    4c50:	82 e0       	ldi	r24, 0x02	; 2
    4c52:	29 96       	adiw	r28, 0x09	; 9
    4c54:	0f b6       	in	r0, 0x3f	; 63
    4c56:	f8 94       	cli
    4c58:	de bf       	out	0x3e, r29	; 62
    4c5a:	0f be       	out	0x3f, r0	; 63
    4c5c:	cd bf       	out	0x3d, r28	; 61
    4c5e:	df 91       	pop	r29
    4c60:	cf 91       	pop	r28
    4c62:	08 95       	ret

00004c64 <rc_servo_setPosition>:
    4c64:	65 36       	cpi	r22, 0x65	; 101
    4c66:	0c f0       	brlt	.+2      	; 0x4c6a <rc_servo_setPosition+0x6>
    4c68:	64 e6       	ldi	r22, 0x64	; 100
    4c6a:	6c 39       	cpi	r22, 0x9C	; 156
    4c6c:	0c f4       	brge	.+2      	; 0x4c70 <rc_servo_setPosition+0xc>
    4c6e:	6c e9       	ldi	r22, 0x9C	; 156
    4c70:	96 ef       	ldi	r25, 0xF6	; 246
    4c72:	69 02       	muls	r22, r25
    4c74:	b0 01       	movw	r22, r0
    4c76:	11 24       	eor	r1, r1
    4c78:	68 54       	subi	r22, 0x48	; 72
    4c7a:	74 4f       	sbci	r23, 0xF4	; 244
    4c7c:	81 11       	cpse	r24, r1
    4c7e:	05 c0       	rjmp	.+10     	; 0x4c8a <rc_servo_setPosition+0x26>
    4c80:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4c84:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4c88:	08 95       	ret
    4c8a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4c8e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4c92:	08 95       	ret

00004c94 <rc_servo_initialise>:
    4c94:	ea e0       	ldi	r30, 0x0A	; 10
    4c96:	f1 e0       	ldi	r31, 0x01	; 1
    4c98:	80 81       	ld	r24, Z
    4c9a:	88 61       	ori	r24, 0x18	; 24
    4c9c:	80 83       	st	Z, r24
    4c9e:	8f e3       	ldi	r24, 0x3F	; 63
    4ca0:	9c e9       	ldi	r25, 0x9C	; 156
    4ca2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4ca6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4caa:	60 e0       	ldi	r22, 0x00	; 0
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	da df       	rcall	.-76     	; 0x4c64 <rc_servo_setPosition>
    4cb0:	60 e0       	ldi	r22, 0x00	; 0
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	d7 df       	rcall	.-82     	; 0x4c64 <rc_servo_setPosition>
    4cb6:	e0 e2       	ldi	r30, 0x20	; 32
    4cb8:	f1 e0       	ldi	r31, 0x01	; 1
    4cba:	80 81       	ld	r24, Z
    4cbc:	82 6a       	ori	r24, 0xA2	; 162
    4cbe:	80 83       	st	Z, r24
    4cc0:	e1 e2       	ldi	r30, 0x21	; 33
    4cc2:	f1 e0       	ldi	r31, 0x01	; 1
    4cc4:	80 81       	ld	r24, Z
    4cc6:	8a 61       	ori	r24, 0x1A	; 26
    4cc8:	80 83       	st	Z, r24
    4cca:	08 95       	ret

00004ccc <serial_create>:
    4ccc:	2f 92       	push	r2
    4cce:	3f 92       	push	r3
    4cd0:	4f 92       	push	r4
    4cd2:	5f 92       	push	r5
    4cd4:	6f 92       	push	r6
    4cd6:	7f 92       	push	r7
    4cd8:	8f 92       	push	r8
    4cda:	9f 92       	push	r9
    4cdc:	af 92       	push	r10
    4cde:	cf 92       	push	r12
    4ce0:	ef 92       	push	r14
    4ce2:	ff 92       	push	r15
    4ce4:	0f 93       	push	r16
    4ce6:	1f 93       	push	r17
    4ce8:	cf 93       	push	r28
    4cea:	df 93       	push	r29
    4cec:	cd b7       	in	r28, 0x3d	; 61
    4cee:	de b7       	in	r29, 0x3e	; 62
    4cf0:	f8 2e       	mov	r15, r24
    4cf2:	2a 01       	movw	r4, r20
    4cf4:	3b 01       	movw	r6, r22
    4cf6:	88 e0       	ldi	r24, 0x08	; 8
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <malloc>
    4cfe:	8c 01       	movw	r16, r24
    4d00:	8f 2d       	mov	r24, r15
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	fc 01       	movw	r30, r24
    4d06:	ee 0f       	add	r30, r30
    4d08:	ff 1f       	adc	r31, r31
    4d0a:	ec 5b       	subi	r30, 0xBC	; 188
    4d0c:	f7 4e       	sbci	r31, 0xE7	; 231
    4d0e:	11 83       	std	Z+1, r17	; 0x01
    4d10:	00 83       	st	Z, r16
    4d12:	01 15       	cp	r16, r1
    4d14:	11 05       	cpc	r17, r1
    4d16:	09 f4       	brne	.+2      	; 0x4d1a <serial_create+0x4e>
    4d18:	68 c0       	rjmp	.+208    	; 0x4dea <serial_create+0x11e>
    4d1a:	88 0f       	add	r24, r24
    4d1c:	99 1f       	adc	r25, r25
    4d1e:	fc 01       	movw	r30, r24
    4d20:	e5 5f       	subi	r30, 0xF5	; 245
    4d22:	fd 4f       	sbci	r31, 0xFD	; 253
    4d24:	80 81       	ld	r24, Z
    4d26:	91 81       	ldd	r25, Z+1	; 0x01
    4d28:	d8 01       	movw	r26, r16
    4d2a:	8d 93       	st	X+, r24
    4d2c:	9c 93       	st	X, r25
    4d2e:	6c 2d       	mov	r22, r12
    4d30:	70 e0       	ldi	r23, 0x00	; 0
    4d32:	84 e0       	ldi	r24, 0x04	; 4
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <calloc>
    4d3a:	1c 01       	movw	r2, r24
    4d3c:	61 e0       	ldi	r22, 0x01	; 1
    4d3e:	70 e0       	ldi	r23, 0x00	; 0
    4d40:	86 e0       	ldi	r24, 0x06	; 6
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <calloc>
    4d48:	7c 01       	movw	r14, r24
    4d4a:	4c 2d       	mov	r20, r12
    4d4c:	b1 01       	movw	r22, r2
    4d4e:	5c d6       	rcall	.+3256   	; 0x5a08 <fifo_init>
    4d50:	f8 01       	movw	r30, r16
    4d52:	f5 82       	std	Z+5, r15	; 0x05
    4d54:	e4 82       	std	Z+4, r14	; 0x04
    4d56:	6a 2d       	mov	r22, r10
    4d58:	70 e0       	ldi	r23, 0x00	; 0
    4d5a:	84 e0       	ldi	r24, 0x04	; 4
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <calloc>
    4d62:	1c 01       	movw	r2, r24
    4d64:	61 e0       	ldi	r22, 0x01	; 1
    4d66:	70 e0       	ldi	r23, 0x00	; 0
    4d68:	86 e0       	ldi	r24, 0x06	; 6
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <calloc>
    4d70:	7c 01       	movw	r14, r24
    4d72:	4a 2d       	mov	r20, r10
    4d74:	b1 01       	movw	r22, r2
    4d76:	48 d6       	rcall	.+3216   	; 0x5a08 <fifo_init>
    4d78:	d8 01       	movw	r26, r16
    4d7a:	13 96       	adiw	r26, 0x03	; 3
    4d7c:	fc 92       	st	X, r15
    4d7e:	ee 92       	st	-X, r14
    4d80:	12 97       	sbiw	r26, 0x02	; 2
    4d82:	17 96       	adiw	r26, 0x07	; 7
    4d84:	9c 92       	st	X, r9
    4d86:	8e 92       	st	-X, r8
    4d88:	16 97       	sbiw	r26, 0x06	; 6
    4d8a:	ff b6       	in	r15, 0x3f	; 63
    4d8c:	f8 94       	cli
    4d8e:	ed 91       	ld	r30, X+
    4d90:	fc 91       	ld	r31, X
    4d92:	11 97       	sbiw	r26, 0x01	; 1
    4d94:	36 97       	sbiw	r30, 0x06	; 6
    4d96:	80 81       	ld	r24, Z
    4d98:	82 60       	ori	r24, 0x02	; 2
    4d9a:	80 83       	st	Z, r24
    4d9c:	8d 90       	ld	r8, X+
    4d9e:	9c 90       	ld	r9, X
    4da0:	c3 01       	movw	r24, r6
    4da2:	b2 01       	movw	r22, r4
    4da4:	4b d7       	rcall	.+3734   	; 0x5c3c <__floatunsisf>
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	40 e0       	ldi	r20, 0x00	; 0
    4dac:	51 e4       	ldi	r21, 0x41	; 65
    4dae:	d4 d7       	rcall	.+4008   	; 0x5d58 <__mulsf3>
    4db0:	9b 01       	movw	r18, r22
    4db2:	ac 01       	movw	r20, r24
    4db4:	60 e0       	ldi	r22, 0x00	; 0
    4db6:	74 e2       	ldi	r23, 0x24	; 36
    4db8:	84 e7       	ldi	r24, 0x74	; 116
    4dba:	9b e4       	ldi	r25, 0x4B	; 75
    4dbc:	a6 d6       	rcall	.+3404   	; 0x5b0a <__divsf3>
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	40 e8       	ldi	r20, 0x80	; 128
    4dc4:	5f e3       	ldi	r21, 0x3F	; 63
    4dc6:	3c d6       	rcall	.+3192   	; 0x5a40 <__subsf3>
    4dc8:	0d d7       	rcall	.+3610   	; 0x5be4 <__fixunssfsi>
    4dca:	f4 01       	movw	r30, r8
    4dcc:	32 97       	sbiw	r30, 0x02	; 2
    4dce:	60 83       	st	Z, r22
    4dd0:	d8 01       	movw	r26, r16
    4dd2:	ed 91       	ld	r30, X+
    4dd4:	fc 91       	ld	r31, X
    4dd6:	11 97       	sbiw	r26, 0x01	; 1
    4dd8:	35 97       	sbiw	r30, 0x05	; 5
    4dda:	88 e9       	ldi	r24, 0x98	; 152
    4ddc:	80 83       	st	Z, r24
    4dde:	ed 91       	ld	r30, X+
    4de0:	fc 91       	ld	r31, X
    4de2:	34 97       	sbiw	r30, 0x04	; 4
    4de4:	86 e0       	ldi	r24, 0x06	; 6
    4de6:	80 83       	st	Z, r24
    4de8:	ff be       	out	0x3f, r15	; 63
    4dea:	c8 01       	movw	r24, r16
    4dec:	df 91       	pop	r29
    4dee:	cf 91       	pop	r28
    4df0:	1f 91       	pop	r17
    4df2:	0f 91       	pop	r16
    4df4:	ff 90       	pop	r15
    4df6:	ef 90       	pop	r14
    4df8:	cf 90       	pop	r12
    4dfa:	af 90       	pop	r10
    4dfc:	9f 90       	pop	r9
    4dfe:	8f 90       	pop	r8
    4e00:	7f 90       	pop	r7
    4e02:	6f 90       	pop	r6
    4e04:	5f 90       	pop	r5
    4e06:	4f 90       	pop	r4
    4e08:	3f 90       	pop	r3
    4e0a:	2f 90       	pop	r2
    4e0c:	08 95       	ret

00004e0e <serial_sendByte>:
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	dc 01       	movw	r26, r24
    4e14:	89 2b       	or	r24, r25
    4e16:	01 f1       	breq	.+64     	; 0x4e58 <serial_sendByte+0x4a>
    4e18:	12 96       	adiw	r26, 0x02	; 2
    4e1a:	ed 91       	ld	r30, X+
    4e1c:	fc 91       	ld	r31, X
    4e1e:	13 97       	sbiw	r26, 0x03	; 3
    4e20:	93 81       	ldd	r25, Z+3	; 0x03
    4e22:	82 81       	ldd	r24, Z+2	; 0x02
    4e24:	25 81       	ldd	r18, Z+5	; 0x05
    4e26:	98 1b       	sub	r25, r24
    4e28:	92 23       	and	r25, r18
    4e2a:	84 81       	ldd	r24, Z+4	; 0x04
    4e2c:	98 17       	cp	r25, r24
    4e2e:	b1 f0       	breq	.+44     	; 0x4e5c <serial_sendByte+0x4e>
    4e30:	83 81       	ldd	r24, Z+3	; 0x03
    4e32:	26 95       	lsr	r18
    4e34:	28 23       	and	r18, r24
    4e36:	c0 81       	ld	r28, Z
    4e38:	d1 81       	ldd	r29, Z+1	; 0x01
    4e3a:	c2 0f       	add	r28, r18
    4e3c:	d1 1d       	adc	r29, r1
    4e3e:	68 83       	st	Y, r22
    4e40:	8f 5f       	subi	r24, 0xFF	; 255
    4e42:	95 81       	ldd	r25, Z+5	; 0x05
    4e44:	89 23       	and	r24, r25
    4e46:	83 83       	std	Z+3, r24	; 0x03
    4e48:	ed 91       	ld	r30, X+
    4e4a:	fc 91       	ld	r31, X
    4e4c:	35 97       	sbiw	r30, 0x05	; 5
    4e4e:	80 81       	ld	r24, Z
    4e50:	80 62       	ori	r24, 0x20	; 32
    4e52:	80 83       	st	Z, r24
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	03 c0       	rjmp	.+6      	; 0x4e5e <serial_sendByte+0x50>
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	01 c0       	rjmp	.+2      	; 0x4e5e <serial_sendByte+0x50>
    4e5c:	82 e0       	ldi	r24, 0x02	; 2
    4e5e:	df 91       	pop	r29
    4e60:	cf 91       	pop	r28
    4e62:	08 95       	ret

00004e64 <serial_sendBytes>:
    4e64:	ef 92       	push	r14
    4e66:	ff 92       	push	r15
    4e68:	0f 93       	push	r16
    4e6a:	1f 93       	push	r17
    4e6c:	cf 93       	push	r28
    4e6e:	df 93       	push	r29
    4e70:	7c 01       	movw	r14, r24
    4e72:	00 97       	sbiw	r24, 0x00	; 0
    4e74:	09 f4       	brne	.+2      	; 0x4e78 <serial_sendBytes+0x14>
    4e76:	41 c0       	rjmp	.+130    	; 0x4efa <serial_sendBytes+0x96>
    4e78:	dc 01       	movw	r26, r24
    4e7a:	12 96       	adiw	r26, 0x02	; 2
    4e7c:	ed 91       	ld	r30, X+
    4e7e:	fc 91       	ld	r31, X
    4e80:	13 97       	sbiw	r26, 0x03	; 3
    4e82:	93 81       	ldd	r25, Z+3	; 0x03
    4e84:	82 81       	ldd	r24, Z+2	; 0x02
    4e86:	98 1b       	sub	r25, r24
    4e88:	85 81       	ldd	r24, Z+5	; 0x05
    4e8a:	98 23       	and	r25, r24
    4e8c:	84 81       	ldd	r24, Z+4	; 0x04
    4e8e:	89 1b       	sub	r24, r25
    4e90:	86 17       	cp	r24, r22
    4e92:	a8 f1       	brcs	.+106    	; 0x4efe <serial_sendBytes+0x9a>
    4e94:	66 23       	and	r22, r22
    4e96:	41 f1       	breq	.+80     	; 0x4ee8 <serial_sendBytes+0x84>
    4e98:	84 2f       	mov	r24, r20
    4e9a:	95 2f       	mov	r25, r21
    4e9c:	dc 01       	movw	r26, r24
    4e9e:	61 50       	subi	r22, 0x01	; 1
    4ea0:	46 2f       	mov	r20, r22
    4ea2:	50 e0       	ldi	r21, 0x00	; 0
    4ea4:	4f 5f       	subi	r20, 0xFF	; 255
    4ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea8:	48 0f       	add	r20, r24
    4eaa:	59 1f       	adc	r21, r25
    4eac:	e7 01       	movw	r28, r14
    4eae:	ea 81       	ldd	r30, Y+2	; 0x02
    4eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	82 81       	ldd	r24, Z+2	; 0x02
    4eb6:	25 81       	ldd	r18, Z+5	; 0x05
    4eb8:	98 1b       	sub	r25, r24
    4eba:	92 23       	and	r25, r18
    4ebc:	84 81       	ldd	r24, Z+4	; 0x04
    4ebe:	98 17       	cp	r25, r24
    4ec0:	79 f0       	breq	.+30     	; 0x4ee0 <serial_sendBytes+0x7c>
    4ec2:	8c 91       	ld	r24, X
    4ec4:	93 81       	ldd	r25, Z+3	; 0x03
    4ec6:	26 95       	lsr	r18
    4ec8:	29 23       	and	r18, r25
    4eca:	60 81       	ld	r22, Z
    4ecc:	71 81       	ldd	r23, Z+1	; 0x01
    4ece:	8b 01       	movw	r16, r22
    4ed0:	02 0f       	add	r16, r18
    4ed2:	11 1d       	adc	r17, r1
    4ed4:	e8 01       	movw	r28, r16
    4ed6:	88 83       	st	Y, r24
    4ed8:	9f 5f       	subi	r25, 0xFF	; 255
    4eda:	85 81       	ldd	r24, Z+5	; 0x05
    4edc:	98 23       	and	r25, r24
    4ede:	93 83       	std	Z+3, r25	; 0x03
    4ee0:	11 96       	adiw	r26, 0x01	; 1
    4ee2:	a4 17       	cp	r26, r20
    4ee4:	b5 07       	cpc	r27, r21
    4ee6:	11 f7       	brne	.-60     	; 0x4eac <serial_sendBytes+0x48>
    4ee8:	d7 01       	movw	r26, r14
    4eea:	ed 91       	ld	r30, X+
    4eec:	fc 91       	ld	r31, X
    4eee:	35 97       	sbiw	r30, 0x05	; 5
    4ef0:	80 81       	ld	r24, Z
    4ef2:	80 62       	ori	r24, 0x20	; 32
    4ef4:	80 83       	st	Z, r24
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	03 c0       	rjmp	.+6      	; 0x4f00 <serial_sendBytes+0x9c>
    4efa:	81 e0       	ldi	r24, 0x01	; 1
    4efc:	01 c0       	rjmp	.+2      	; 0x4f00 <serial_sendBytes+0x9c>
    4efe:	82 e0       	ldi	r24, 0x02	; 2
    4f00:	df 91       	pop	r29
    4f02:	cf 91       	pop	r28
    4f04:	1f 91       	pop	r17
    4f06:	0f 91       	pop	r16
    4f08:	ff 90       	pop	r15
    4f0a:	ef 90       	pop	r14
    4f0c:	08 95       	ret

00004f0e <serial_getByte>:
    4f0e:	00 97       	sbiw	r24, 0x00	; 0
    4f10:	d1 f0       	breq	.+52     	; 0x4f46 <serial_getByte+0x38>
    4f12:	dc 01       	movw	r26, r24
    4f14:	14 96       	adiw	r26, 0x04	; 4
    4f16:	ed 91       	ld	r30, X+
    4f18:	fc 91       	ld	r31, X
    4f1a:	15 97       	sbiw	r26, 0x05	; 5
    4f1c:	93 81       	ldd	r25, Z+3	; 0x03
    4f1e:	82 81       	ldd	r24, Z+2	; 0x02
    4f20:	98 17       	cp	r25, r24
    4f22:	99 f0       	breq	.+38     	; 0x4f4a <serial_getByte+0x3c>
    4f24:	92 81       	ldd	r25, Z+2	; 0x02
    4f26:	85 81       	ldd	r24, Z+5	; 0x05
    4f28:	86 95       	lsr	r24
    4f2a:	89 23       	and	r24, r25
    4f2c:	a0 81       	ld	r26, Z
    4f2e:	b1 81       	ldd	r27, Z+1	; 0x01
    4f30:	a8 0f       	add	r26, r24
    4f32:	b1 1d       	adc	r27, r1
    4f34:	8c 91       	ld	r24, X
    4f36:	db 01       	movw	r26, r22
    4f38:	8c 93       	st	X, r24
    4f3a:	9f 5f       	subi	r25, 0xFF	; 255
    4f3c:	85 81       	ldd	r24, Z+5	; 0x05
    4f3e:	98 23       	and	r25, r24
    4f40:	92 83       	std	Z+2, r25	; 0x02
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	08 95       	ret
    4f46:	81 e0       	ldi	r24, 0x01	; 1
    4f48:	08 95       	ret
    4f4a:	83 e0       	ldi	r24, 0x03	; 3
    4f4c:	08 95       	ret

00004f4e <__vector_25>:
    4f4e:	1f 92       	push	r1
    4f50:	0f 92       	push	r0
    4f52:	0f b6       	in	r0, 0x3f	; 63
    4f54:	0f 92       	push	r0
    4f56:	11 24       	eor	r1, r1
    4f58:	0b b6       	in	r0, 0x3b	; 59
    4f5a:	0f 92       	push	r0
    4f5c:	2f 93       	push	r18
    4f5e:	3f 93       	push	r19
    4f60:	4f 93       	push	r20
    4f62:	5f 93       	push	r21
    4f64:	6f 93       	push	r22
    4f66:	7f 93       	push	r23
    4f68:	8f 93       	push	r24
    4f6a:	9f 93       	push	r25
    4f6c:	af 93       	push	r26
    4f6e:	bf 93       	push	r27
    4f70:	cf 93       	push	r28
    4f72:	df 93       	push	r29
    4f74:	ef 93       	push	r30
    4f76:	ff 93       	push	r31
    4f78:	a0 91 44 18 	lds	r26, 0x1844	; 0x801844 <_ser_handle>
    4f7c:	b0 91 45 18 	lds	r27, 0x1845	; 0x801845 <_ser_handle+0x1>
    4f80:	10 97       	sbiw	r26, 0x00	; 0
    4f82:	11 f1       	breq	.+68     	; 0x4fc8 <__vector_25+0x7a>
    4f84:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4f88:	14 96       	adiw	r26, 0x04	; 4
    4f8a:	ed 91       	ld	r30, X+
    4f8c:	fc 91       	ld	r31, X
    4f8e:	15 97       	sbiw	r26, 0x05	; 5
    4f90:	93 81       	ldd	r25, Z+3	; 0x03
    4f92:	82 81       	ldd	r24, Z+2	; 0x02
    4f94:	25 81       	ldd	r18, Z+5	; 0x05
    4f96:	98 1b       	sub	r25, r24
    4f98:	92 23       	and	r25, r18
    4f9a:	84 81       	ldd	r24, Z+4	; 0x04
    4f9c:	98 17       	cp	r25, r24
    4f9e:	61 f0       	breq	.+24     	; 0x4fb8 <__vector_25+0x6a>
    4fa0:	83 81       	ldd	r24, Z+3	; 0x03
    4fa2:	26 95       	lsr	r18
    4fa4:	28 23       	and	r18, r24
    4fa6:	c0 81       	ld	r28, Z
    4fa8:	d1 81       	ldd	r29, Z+1	; 0x01
    4faa:	c2 0f       	add	r28, r18
    4fac:	d1 1d       	adc	r29, r1
    4fae:	68 83       	st	Y, r22
    4fb0:	8f 5f       	subi	r24, 0xFF	; 255
    4fb2:	95 81       	ldd	r25, Z+5	; 0x05
    4fb4:	89 23       	and	r24, r25
    4fb6:	83 83       	std	Z+3, r24	; 0x03
    4fb8:	16 96       	adiw	r26, 0x06	; 6
    4fba:	ed 91       	ld	r30, X+
    4fbc:	fc 91       	ld	r31, X
    4fbe:	17 97       	sbiw	r26, 0x07	; 7
    4fc0:	30 97       	sbiw	r30, 0x00	; 0
    4fc2:	11 f0       	breq	.+4      	; 0x4fc8 <__vector_25+0x7a>
    4fc4:	cd 01       	movw	r24, r26
    4fc6:	19 95       	eicall
    4fc8:	ff 91       	pop	r31
    4fca:	ef 91       	pop	r30
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	bf 91       	pop	r27
    4fd2:	af 91       	pop	r26
    4fd4:	9f 91       	pop	r25
    4fd6:	8f 91       	pop	r24
    4fd8:	7f 91       	pop	r23
    4fda:	6f 91       	pop	r22
    4fdc:	5f 91       	pop	r21
    4fde:	4f 91       	pop	r20
    4fe0:	3f 91       	pop	r19
    4fe2:	2f 91       	pop	r18
    4fe4:	0f 90       	pop	r0
    4fe6:	0b be       	out	0x3b, r0	; 59
    4fe8:	0f 90       	pop	r0
    4fea:	0f be       	out	0x3f, r0	; 63
    4fec:	0f 90       	pop	r0
    4fee:	1f 90       	pop	r1
    4ff0:	18 95       	reti

00004ff2 <__vector_26>:
    4ff2:	1f 92       	push	r1
    4ff4:	0f 92       	push	r0
    4ff6:	0f b6       	in	r0, 0x3f	; 63
    4ff8:	0f 92       	push	r0
    4ffa:	11 24       	eor	r1, r1
    4ffc:	0b b6       	in	r0, 0x3b	; 59
    4ffe:	0f 92       	push	r0
    5000:	2f 93       	push	r18
    5002:	8f 93       	push	r24
    5004:	9f 93       	push	r25
    5006:	af 93       	push	r26
    5008:	bf 93       	push	r27
    500a:	ef 93       	push	r30
    500c:	ff 93       	push	r31
    500e:	e0 91 44 18 	lds	r30, 0x1844	; 0x801844 <_ser_handle>
    5012:	f0 91 45 18 	lds	r31, 0x1845	; 0x801845 <_ser_handle+0x1>
    5016:	30 97       	sbiw	r30, 0x00	; 0
    5018:	b9 f0       	breq	.+46     	; 0x5048 <__vector_26+0x56>
    501a:	02 80       	ldd	r0, Z+2	; 0x02
    501c:	f3 81       	ldd	r31, Z+3	; 0x03
    501e:	e0 2d       	mov	r30, r0
    5020:	93 81       	ldd	r25, Z+3	; 0x03
    5022:	82 81       	ldd	r24, Z+2	; 0x02
    5024:	98 17       	cp	r25, r24
    5026:	b1 f0       	breq	.+44     	; 0x5054 <__vector_26+0x62>
    5028:	92 81       	ldd	r25, Z+2	; 0x02
    502a:	85 81       	ldd	r24, Z+5	; 0x05
    502c:	28 2f       	mov	r18, r24
    502e:	26 95       	lsr	r18
    5030:	29 23       	and	r18, r25
    5032:	a0 81       	ld	r26, Z
    5034:	b1 81       	ldd	r27, Z+1	; 0x01
    5036:	a2 0f       	add	r26, r18
    5038:	b1 1d       	adc	r27, r1
    503a:	2c 91       	ld	r18, X
    503c:	9f 5f       	subi	r25, 0xFF	; 255
    503e:	89 23       	and	r24, r25
    5040:	82 83       	std	Z+2, r24	; 0x02
    5042:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5046:	0b c0       	rjmp	.+22     	; 0x505e <__vector_26+0x6c>
    5048:	e1 ec       	ldi	r30, 0xC1	; 193
    504a:	f0 e0       	ldi	r31, 0x00	; 0
    504c:	80 81       	ld	r24, Z
    504e:	8f 7d       	andi	r24, 0xDF	; 223
    5050:	80 83       	st	Z, r24
    5052:	05 c0       	rjmp	.+10     	; 0x505e <__vector_26+0x6c>
    5054:	e1 ec       	ldi	r30, 0xC1	; 193
    5056:	f0 e0       	ldi	r31, 0x00	; 0
    5058:	80 81       	ld	r24, Z
    505a:	8f 7d       	andi	r24, 0xDF	; 223
    505c:	80 83       	st	Z, r24
    505e:	ff 91       	pop	r31
    5060:	ef 91       	pop	r30
    5062:	bf 91       	pop	r27
    5064:	af 91       	pop	r26
    5066:	9f 91       	pop	r25
    5068:	8f 91       	pop	r24
    506a:	2f 91       	pop	r18
    506c:	0f 90       	pop	r0
    506e:	0b be       	out	0x3b, r0	; 59
    5070:	0f 90       	pop	r0
    5072:	0f be       	out	0x3f, r0	; 63
    5074:	0f 90       	pop	r0
    5076:	1f 90       	pop	r1
    5078:	18 95       	reti

0000507a <__vector_36>:
    507a:	1f 92       	push	r1
    507c:	0f 92       	push	r0
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	0f 92       	push	r0
    5082:	11 24       	eor	r1, r1
    5084:	0b b6       	in	r0, 0x3b	; 59
    5086:	0f 92       	push	r0
    5088:	2f 93       	push	r18
    508a:	3f 93       	push	r19
    508c:	4f 93       	push	r20
    508e:	5f 93       	push	r21
    5090:	6f 93       	push	r22
    5092:	7f 93       	push	r23
    5094:	8f 93       	push	r24
    5096:	9f 93       	push	r25
    5098:	af 93       	push	r26
    509a:	bf 93       	push	r27
    509c:	cf 93       	push	r28
    509e:	df 93       	push	r29
    50a0:	ef 93       	push	r30
    50a2:	ff 93       	push	r31
    50a4:	a0 91 46 18 	lds	r26, 0x1846	; 0x801846 <_ser_handle+0x2>
    50a8:	b0 91 47 18 	lds	r27, 0x1847	; 0x801847 <_ser_handle+0x3>
    50ac:	10 97       	sbiw	r26, 0x00	; 0
    50ae:	11 f1       	breq	.+68     	; 0x50f4 <__vector_36+0x7a>
    50b0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    50b4:	14 96       	adiw	r26, 0x04	; 4
    50b6:	ed 91       	ld	r30, X+
    50b8:	fc 91       	ld	r31, X
    50ba:	15 97       	sbiw	r26, 0x05	; 5
    50bc:	93 81       	ldd	r25, Z+3	; 0x03
    50be:	82 81       	ldd	r24, Z+2	; 0x02
    50c0:	25 81       	ldd	r18, Z+5	; 0x05
    50c2:	98 1b       	sub	r25, r24
    50c4:	92 23       	and	r25, r18
    50c6:	84 81       	ldd	r24, Z+4	; 0x04
    50c8:	98 17       	cp	r25, r24
    50ca:	61 f0       	breq	.+24     	; 0x50e4 <__vector_36+0x6a>
    50cc:	83 81       	ldd	r24, Z+3	; 0x03
    50ce:	26 95       	lsr	r18
    50d0:	28 23       	and	r18, r24
    50d2:	c0 81       	ld	r28, Z
    50d4:	d1 81       	ldd	r29, Z+1	; 0x01
    50d6:	c2 0f       	add	r28, r18
    50d8:	d1 1d       	adc	r29, r1
    50da:	68 83       	st	Y, r22
    50dc:	8f 5f       	subi	r24, 0xFF	; 255
    50de:	95 81       	ldd	r25, Z+5	; 0x05
    50e0:	89 23       	and	r24, r25
    50e2:	83 83       	std	Z+3, r24	; 0x03
    50e4:	16 96       	adiw	r26, 0x06	; 6
    50e6:	ed 91       	ld	r30, X+
    50e8:	fc 91       	ld	r31, X
    50ea:	17 97       	sbiw	r26, 0x07	; 7
    50ec:	30 97       	sbiw	r30, 0x00	; 0
    50ee:	11 f0       	breq	.+4      	; 0x50f4 <__vector_36+0x7a>
    50f0:	cd 01       	movw	r24, r26
    50f2:	19 95       	eicall
    50f4:	ff 91       	pop	r31
    50f6:	ef 91       	pop	r30
    50f8:	df 91       	pop	r29
    50fa:	cf 91       	pop	r28
    50fc:	bf 91       	pop	r27
    50fe:	af 91       	pop	r26
    5100:	9f 91       	pop	r25
    5102:	8f 91       	pop	r24
    5104:	7f 91       	pop	r23
    5106:	6f 91       	pop	r22
    5108:	5f 91       	pop	r21
    510a:	4f 91       	pop	r20
    510c:	3f 91       	pop	r19
    510e:	2f 91       	pop	r18
    5110:	0f 90       	pop	r0
    5112:	0b be       	out	0x3b, r0	; 59
    5114:	0f 90       	pop	r0
    5116:	0f be       	out	0x3f, r0	; 63
    5118:	0f 90       	pop	r0
    511a:	1f 90       	pop	r1
    511c:	18 95       	reti

0000511e <__vector_37>:
    511e:	1f 92       	push	r1
    5120:	0f 92       	push	r0
    5122:	0f b6       	in	r0, 0x3f	; 63
    5124:	0f 92       	push	r0
    5126:	11 24       	eor	r1, r1
    5128:	0b b6       	in	r0, 0x3b	; 59
    512a:	0f 92       	push	r0
    512c:	2f 93       	push	r18
    512e:	8f 93       	push	r24
    5130:	9f 93       	push	r25
    5132:	af 93       	push	r26
    5134:	bf 93       	push	r27
    5136:	ef 93       	push	r30
    5138:	ff 93       	push	r31
    513a:	e0 91 46 18 	lds	r30, 0x1846	; 0x801846 <_ser_handle+0x2>
    513e:	f0 91 47 18 	lds	r31, 0x1847	; 0x801847 <_ser_handle+0x3>
    5142:	30 97       	sbiw	r30, 0x00	; 0
    5144:	b9 f0       	breq	.+46     	; 0x5174 <__vector_37+0x56>
    5146:	02 80       	ldd	r0, Z+2	; 0x02
    5148:	f3 81       	ldd	r31, Z+3	; 0x03
    514a:	e0 2d       	mov	r30, r0
    514c:	93 81       	ldd	r25, Z+3	; 0x03
    514e:	82 81       	ldd	r24, Z+2	; 0x02
    5150:	98 17       	cp	r25, r24
    5152:	b1 f0       	breq	.+44     	; 0x5180 <__vector_37+0x62>
    5154:	92 81       	ldd	r25, Z+2	; 0x02
    5156:	85 81       	ldd	r24, Z+5	; 0x05
    5158:	28 2f       	mov	r18, r24
    515a:	26 95       	lsr	r18
    515c:	29 23       	and	r18, r25
    515e:	a0 81       	ld	r26, Z
    5160:	b1 81       	ldd	r27, Z+1	; 0x01
    5162:	a2 0f       	add	r26, r18
    5164:	b1 1d       	adc	r27, r1
    5166:	2c 91       	ld	r18, X
    5168:	9f 5f       	subi	r25, 0xFF	; 255
    516a:	89 23       	and	r24, r25
    516c:	82 83       	std	Z+2, r24	; 0x02
    516e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5172:	0b c0       	rjmp	.+22     	; 0x518a <__vector_37+0x6c>
    5174:	e9 ec       	ldi	r30, 0xC9	; 201
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	80 81       	ld	r24, Z
    517a:	8f 7d       	andi	r24, 0xDF	; 223
    517c:	80 83       	st	Z, r24
    517e:	05 c0       	rjmp	.+10     	; 0x518a <__vector_37+0x6c>
    5180:	e9 ec       	ldi	r30, 0xC9	; 201
    5182:	f0 e0       	ldi	r31, 0x00	; 0
    5184:	80 81       	ld	r24, Z
    5186:	8f 7d       	andi	r24, 0xDF	; 223
    5188:	80 83       	st	Z, r24
    518a:	ff 91       	pop	r31
    518c:	ef 91       	pop	r30
    518e:	bf 91       	pop	r27
    5190:	af 91       	pop	r26
    5192:	9f 91       	pop	r25
    5194:	8f 91       	pop	r24
    5196:	2f 91       	pop	r18
    5198:	0f 90       	pop	r0
    519a:	0b be       	out	0x3b, r0	; 59
    519c:	0f 90       	pop	r0
    519e:	0f be       	out	0x3f, r0	; 63
    51a0:	0f 90       	pop	r0
    51a2:	1f 90       	pop	r1
    51a4:	18 95       	reti

000051a6 <__vector_51>:
    51a6:	1f 92       	push	r1
    51a8:	0f 92       	push	r0
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	0f 92       	push	r0
    51ae:	11 24       	eor	r1, r1
    51b0:	0b b6       	in	r0, 0x3b	; 59
    51b2:	0f 92       	push	r0
    51b4:	2f 93       	push	r18
    51b6:	3f 93       	push	r19
    51b8:	4f 93       	push	r20
    51ba:	5f 93       	push	r21
    51bc:	6f 93       	push	r22
    51be:	7f 93       	push	r23
    51c0:	8f 93       	push	r24
    51c2:	9f 93       	push	r25
    51c4:	af 93       	push	r26
    51c6:	bf 93       	push	r27
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	ef 93       	push	r30
    51ce:	ff 93       	push	r31
    51d0:	a0 91 48 18 	lds	r26, 0x1848	; 0x801848 <_ser_handle+0x4>
    51d4:	b0 91 49 18 	lds	r27, 0x1849	; 0x801849 <_ser_handle+0x5>
    51d8:	10 97       	sbiw	r26, 0x00	; 0
    51da:	11 f1       	breq	.+68     	; 0x5220 <__vector_51+0x7a>
    51dc:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    51e0:	14 96       	adiw	r26, 0x04	; 4
    51e2:	ed 91       	ld	r30, X+
    51e4:	fc 91       	ld	r31, X
    51e6:	15 97       	sbiw	r26, 0x05	; 5
    51e8:	93 81       	ldd	r25, Z+3	; 0x03
    51ea:	82 81       	ldd	r24, Z+2	; 0x02
    51ec:	25 81       	ldd	r18, Z+5	; 0x05
    51ee:	98 1b       	sub	r25, r24
    51f0:	92 23       	and	r25, r18
    51f2:	84 81       	ldd	r24, Z+4	; 0x04
    51f4:	98 17       	cp	r25, r24
    51f6:	61 f0       	breq	.+24     	; 0x5210 <__vector_51+0x6a>
    51f8:	83 81       	ldd	r24, Z+3	; 0x03
    51fa:	26 95       	lsr	r18
    51fc:	28 23       	and	r18, r24
    51fe:	c0 81       	ld	r28, Z
    5200:	d1 81       	ldd	r29, Z+1	; 0x01
    5202:	c2 0f       	add	r28, r18
    5204:	d1 1d       	adc	r29, r1
    5206:	68 83       	st	Y, r22
    5208:	8f 5f       	subi	r24, 0xFF	; 255
    520a:	95 81       	ldd	r25, Z+5	; 0x05
    520c:	89 23       	and	r24, r25
    520e:	83 83       	std	Z+3, r24	; 0x03
    5210:	16 96       	adiw	r26, 0x06	; 6
    5212:	ed 91       	ld	r30, X+
    5214:	fc 91       	ld	r31, X
    5216:	17 97       	sbiw	r26, 0x07	; 7
    5218:	30 97       	sbiw	r30, 0x00	; 0
    521a:	11 f0       	breq	.+4      	; 0x5220 <__vector_51+0x7a>
    521c:	cd 01       	movw	r24, r26
    521e:	19 95       	eicall
    5220:	ff 91       	pop	r31
    5222:	ef 91       	pop	r30
    5224:	df 91       	pop	r29
    5226:	cf 91       	pop	r28
    5228:	bf 91       	pop	r27
    522a:	af 91       	pop	r26
    522c:	9f 91       	pop	r25
    522e:	8f 91       	pop	r24
    5230:	7f 91       	pop	r23
    5232:	6f 91       	pop	r22
    5234:	5f 91       	pop	r21
    5236:	4f 91       	pop	r20
    5238:	3f 91       	pop	r19
    523a:	2f 91       	pop	r18
    523c:	0f 90       	pop	r0
    523e:	0b be       	out	0x3b, r0	; 59
    5240:	0f 90       	pop	r0
    5242:	0f be       	out	0x3f, r0	; 63
    5244:	0f 90       	pop	r0
    5246:	1f 90       	pop	r1
    5248:	18 95       	reti

0000524a <__vector_52>:
    524a:	1f 92       	push	r1
    524c:	0f 92       	push	r0
    524e:	0f b6       	in	r0, 0x3f	; 63
    5250:	0f 92       	push	r0
    5252:	11 24       	eor	r1, r1
    5254:	0b b6       	in	r0, 0x3b	; 59
    5256:	0f 92       	push	r0
    5258:	2f 93       	push	r18
    525a:	8f 93       	push	r24
    525c:	9f 93       	push	r25
    525e:	af 93       	push	r26
    5260:	bf 93       	push	r27
    5262:	ef 93       	push	r30
    5264:	ff 93       	push	r31
    5266:	e0 91 48 18 	lds	r30, 0x1848	; 0x801848 <_ser_handle+0x4>
    526a:	f0 91 49 18 	lds	r31, 0x1849	; 0x801849 <_ser_handle+0x5>
    526e:	30 97       	sbiw	r30, 0x00	; 0
    5270:	b9 f0       	breq	.+46     	; 0x52a0 <__vector_52+0x56>
    5272:	02 80       	ldd	r0, Z+2	; 0x02
    5274:	f3 81       	ldd	r31, Z+3	; 0x03
    5276:	e0 2d       	mov	r30, r0
    5278:	93 81       	ldd	r25, Z+3	; 0x03
    527a:	82 81       	ldd	r24, Z+2	; 0x02
    527c:	98 17       	cp	r25, r24
    527e:	b1 f0       	breq	.+44     	; 0x52ac <__vector_52+0x62>
    5280:	92 81       	ldd	r25, Z+2	; 0x02
    5282:	85 81       	ldd	r24, Z+5	; 0x05
    5284:	28 2f       	mov	r18, r24
    5286:	26 95       	lsr	r18
    5288:	29 23       	and	r18, r25
    528a:	a0 81       	ld	r26, Z
    528c:	b1 81       	ldd	r27, Z+1	; 0x01
    528e:	a2 0f       	add	r26, r18
    5290:	b1 1d       	adc	r27, r1
    5292:	2c 91       	ld	r18, X
    5294:	9f 5f       	subi	r25, 0xFF	; 255
    5296:	89 23       	and	r24, r25
    5298:	82 83       	std	Z+2, r24	; 0x02
    529a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    529e:	0b c0       	rjmp	.+22     	; 0x52b6 <__vector_52+0x6c>
    52a0:	e1 ed       	ldi	r30, 0xD1	; 209
    52a2:	f0 e0       	ldi	r31, 0x00	; 0
    52a4:	80 81       	ld	r24, Z
    52a6:	8f 7d       	andi	r24, 0xDF	; 223
    52a8:	80 83       	st	Z, r24
    52aa:	05 c0       	rjmp	.+10     	; 0x52b6 <__vector_52+0x6c>
    52ac:	e1 ed       	ldi	r30, 0xD1	; 209
    52ae:	f0 e0       	ldi	r31, 0x00	; 0
    52b0:	80 81       	ld	r24, Z
    52b2:	8f 7d       	andi	r24, 0xDF	; 223
    52b4:	80 83       	st	Z, r24
    52b6:	ff 91       	pop	r31
    52b8:	ef 91       	pop	r30
    52ba:	bf 91       	pop	r27
    52bc:	af 91       	pop	r26
    52be:	9f 91       	pop	r25
    52c0:	8f 91       	pop	r24
    52c2:	2f 91       	pop	r18
    52c4:	0f 90       	pop	r0
    52c6:	0b be       	out	0x3b, r0	; 59
    52c8:	0f 90       	pop	r0
    52ca:	0f be       	out	0x3f, r0	; 63
    52cc:	0f 90       	pop	r0
    52ce:	1f 90       	pop	r1
    52d0:	18 95       	reti

000052d2 <__vector_54>:
    52d2:	1f 92       	push	r1
    52d4:	0f 92       	push	r0
    52d6:	0f b6       	in	r0, 0x3f	; 63
    52d8:	0f 92       	push	r0
    52da:	11 24       	eor	r1, r1
    52dc:	0b b6       	in	r0, 0x3b	; 59
    52de:	0f 92       	push	r0
    52e0:	2f 93       	push	r18
    52e2:	3f 93       	push	r19
    52e4:	4f 93       	push	r20
    52e6:	5f 93       	push	r21
    52e8:	6f 93       	push	r22
    52ea:	7f 93       	push	r23
    52ec:	8f 93       	push	r24
    52ee:	9f 93       	push	r25
    52f0:	af 93       	push	r26
    52f2:	bf 93       	push	r27
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	ef 93       	push	r30
    52fa:	ff 93       	push	r31
    52fc:	a0 91 4a 18 	lds	r26, 0x184A	; 0x80184a <_ser_handle+0x6>
    5300:	b0 91 4b 18 	lds	r27, 0x184B	; 0x80184b <_ser_handle+0x7>
    5304:	10 97       	sbiw	r26, 0x00	; 0
    5306:	11 f1       	breq	.+68     	; 0x534c <__vector_54+0x7a>
    5308:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    530c:	14 96       	adiw	r26, 0x04	; 4
    530e:	ed 91       	ld	r30, X+
    5310:	fc 91       	ld	r31, X
    5312:	15 97       	sbiw	r26, 0x05	; 5
    5314:	93 81       	ldd	r25, Z+3	; 0x03
    5316:	82 81       	ldd	r24, Z+2	; 0x02
    5318:	25 81       	ldd	r18, Z+5	; 0x05
    531a:	98 1b       	sub	r25, r24
    531c:	92 23       	and	r25, r18
    531e:	84 81       	ldd	r24, Z+4	; 0x04
    5320:	98 17       	cp	r25, r24
    5322:	61 f0       	breq	.+24     	; 0x533c <__vector_54+0x6a>
    5324:	83 81       	ldd	r24, Z+3	; 0x03
    5326:	26 95       	lsr	r18
    5328:	28 23       	and	r18, r24
    532a:	c0 81       	ld	r28, Z
    532c:	d1 81       	ldd	r29, Z+1	; 0x01
    532e:	c2 0f       	add	r28, r18
    5330:	d1 1d       	adc	r29, r1
    5332:	68 83       	st	Y, r22
    5334:	8f 5f       	subi	r24, 0xFF	; 255
    5336:	95 81       	ldd	r25, Z+5	; 0x05
    5338:	89 23       	and	r24, r25
    533a:	83 83       	std	Z+3, r24	; 0x03
    533c:	16 96       	adiw	r26, 0x06	; 6
    533e:	ed 91       	ld	r30, X+
    5340:	fc 91       	ld	r31, X
    5342:	17 97       	sbiw	r26, 0x07	; 7
    5344:	30 97       	sbiw	r30, 0x00	; 0
    5346:	11 f0       	breq	.+4      	; 0x534c <__vector_54+0x7a>
    5348:	cd 01       	movw	r24, r26
    534a:	19 95       	eicall
    534c:	ff 91       	pop	r31
    534e:	ef 91       	pop	r30
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	bf 91       	pop	r27
    5356:	af 91       	pop	r26
    5358:	9f 91       	pop	r25
    535a:	8f 91       	pop	r24
    535c:	7f 91       	pop	r23
    535e:	6f 91       	pop	r22
    5360:	5f 91       	pop	r21
    5362:	4f 91       	pop	r20
    5364:	3f 91       	pop	r19
    5366:	2f 91       	pop	r18
    5368:	0f 90       	pop	r0
    536a:	0b be       	out	0x3b, r0	; 59
    536c:	0f 90       	pop	r0
    536e:	0f be       	out	0x3f, r0	; 63
    5370:	0f 90       	pop	r0
    5372:	1f 90       	pop	r1
    5374:	18 95       	reti

00005376 <__vector_55>:
    5376:	1f 92       	push	r1
    5378:	0f 92       	push	r0
    537a:	0f b6       	in	r0, 0x3f	; 63
    537c:	0f 92       	push	r0
    537e:	11 24       	eor	r1, r1
    5380:	0b b6       	in	r0, 0x3b	; 59
    5382:	0f 92       	push	r0
    5384:	2f 93       	push	r18
    5386:	8f 93       	push	r24
    5388:	9f 93       	push	r25
    538a:	af 93       	push	r26
    538c:	bf 93       	push	r27
    538e:	ef 93       	push	r30
    5390:	ff 93       	push	r31
    5392:	e0 91 4a 18 	lds	r30, 0x184A	; 0x80184a <_ser_handle+0x6>
    5396:	f0 91 4b 18 	lds	r31, 0x184B	; 0x80184b <_ser_handle+0x7>
    539a:	30 97       	sbiw	r30, 0x00	; 0
    539c:	b9 f0       	breq	.+46     	; 0x53cc <__vector_55+0x56>
    539e:	02 80       	ldd	r0, Z+2	; 0x02
    53a0:	f3 81       	ldd	r31, Z+3	; 0x03
    53a2:	e0 2d       	mov	r30, r0
    53a4:	93 81       	ldd	r25, Z+3	; 0x03
    53a6:	82 81       	ldd	r24, Z+2	; 0x02
    53a8:	98 17       	cp	r25, r24
    53aa:	b1 f0       	breq	.+44     	; 0x53d8 <__vector_55+0x62>
    53ac:	92 81       	ldd	r25, Z+2	; 0x02
    53ae:	85 81       	ldd	r24, Z+5	; 0x05
    53b0:	28 2f       	mov	r18, r24
    53b2:	26 95       	lsr	r18
    53b4:	29 23       	and	r18, r25
    53b6:	a0 81       	ld	r26, Z
    53b8:	b1 81       	ldd	r27, Z+1	; 0x01
    53ba:	a2 0f       	add	r26, r18
    53bc:	b1 1d       	adc	r27, r1
    53be:	2c 91       	ld	r18, X
    53c0:	9f 5f       	subi	r25, 0xFF	; 255
    53c2:	89 23       	and	r24, r25
    53c4:	82 83       	std	Z+2, r24	; 0x02
    53c6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    53ca:	0b c0       	rjmp	.+22     	; 0x53e2 <__vector_55+0x6c>
    53cc:	e1 e3       	ldi	r30, 0x31	; 49
    53ce:	f1 e0       	ldi	r31, 0x01	; 1
    53d0:	80 81       	ld	r24, Z
    53d2:	8f 7d       	andi	r24, 0xDF	; 223
    53d4:	80 83       	st	Z, r24
    53d6:	05 c0       	rjmp	.+10     	; 0x53e2 <__vector_55+0x6c>
    53d8:	e1 e3       	ldi	r30, 0x31	; 49
    53da:	f1 e0       	ldi	r31, 0x01	; 1
    53dc:	80 81       	ld	r24, Z
    53de:	8f 7d       	andi	r24, 0xDF	; 223
    53e0:	80 83       	st	Z, r24
    53e2:	ff 91       	pop	r31
    53e4:	ef 91       	pop	r30
    53e6:	bf 91       	pop	r27
    53e8:	af 91       	pop	r26
    53ea:	9f 91       	pop	r25
    53ec:	8f 91       	pop	r24
    53ee:	2f 91       	pop	r18
    53f0:	0f 90       	pop	r0
    53f2:	0b be       	out	0x3b, r0	; 59
    53f4:	0f 90       	pop	r0
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	0f 90       	pop	r0
    53fa:	1f 90       	pop	r1
    53fc:	18 95       	reti

000053fe <usart_getchar>:
    53fe:	cf 93       	push	r28
    5400:	df 93       	push	r29
    5402:	1f 92       	push	r1
    5404:	cd b7       	in	r28, 0x3d	; 61
    5406:	de b7       	in	r29, 0x3e	; 62
    5408:	be 01       	movw	r22, r28
    540a:	6f 5f       	subi	r22, 0xFF	; 255
    540c:	7f 4f       	sbci	r23, 0xFF	; 255
    540e:	80 91 4c 18 	lds	r24, 0x184C	; 0x80184c <_com_serial_instance>
    5412:	90 91 4d 18 	lds	r25, 0x184D	; 0x80184d <_com_serial_instance+0x1>
    5416:	7b dd       	rcall	.-1290   	; 0x4f0e <serial_getByte>
    5418:	81 11       	cpse	r24, r1
    541a:	f6 cf       	rjmp	.-20     	; 0x5408 <usart_getchar+0xa>
    541c:	89 81       	ldd	r24, Y+1	; 0x01
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	0f 90       	pop	r0
    5422:	df 91       	pop	r29
    5424:	cf 91       	pop	r28
    5426:	08 95       	ret

00005428 <usart_putchar>:
    5428:	68 2f       	mov	r22, r24
    542a:	80 91 4c 18 	lds	r24, 0x184C	; 0x80184c <_com_serial_instance>
    542e:	90 91 4d 18 	lds	r25, 0x184D	; 0x80184d <_com_serial_instance+0x1>
    5432:	ed dc       	rcall	.-1574   	; 0x4e0e <serial_sendByte>
    5434:	80 e0       	ldi	r24, 0x00	; 0
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	08 95       	ret

0000543a <stdio_initialise>:
    543a:	8f 92       	push	r8
    543c:	9f 92       	push	r9
    543e:	af 92       	push	r10
    5440:	cf 92       	push	r12
    5442:	ef 92       	push	r14
    5444:	0f 93       	push	r16
    5446:	81 2c       	mov	r8, r1
    5448:	91 2c       	mov	r9, r1
    544a:	68 94       	set
    544c:	aa 24       	eor	r10, r10
    544e:	a7 f8       	bld	r10, 7
    5450:	68 94       	set
    5452:	cc 24       	eor	r12, r12
    5454:	c7 f8       	bld	r12, 7
    5456:	e1 2c       	mov	r14, r1
    5458:	00 e0       	ldi	r16, 0x00	; 0
    545a:	23 e0       	ldi	r18, 0x03	; 3
    545c:	40 e0       	ldi	r20, 0x00	; 0
    545e:	51 ee       	ldi	r21, 0xE1	; 225
    5460:	60 e0       	ldi	r22, 0x00	; 0
    5462:	70 e0       	ldi	r23, 0x00	; 0
    5464:	33 dc       	rcall	.-1946   	; 0x4ccc <serial_create>
    5466:	90 93 4d 18 	sts	0x184D, r25	; 0x80184d <_com_serial_instance+0x1>
    546a:	80 93 4c 18 	sts	0x184C, r24	; 0x80184c <_com_serial_instance>
    546e:	e7 ea       	ldi	r30, 0xA7	; 167
    5470:	f8 e1       	ldi	r31, 0x18	; 24
    5472:	83 e1       	ldi	r24, 0x13	; 19
    5474:	92 e0       	ldi	r25, 0x02	; 2
    5476:	91 83       	std	Z+1, r25	; 0x01
    5478:	80 83       	st	Z, r24
    547a:	93 83       	std	Z+3, r25	; 0x03
    547c:	82 83       	std	Z+2, r24	; 0x02
    547e:	0f 91       	pop	r16
    5480:	ef 90       	pop	r14
    5482:	cf 90       	pop	r12
    5484:	af 90       	pop	r10
    5486:	9f 90       	pop	r9
    5488:	8f 90       	pop	r8
    548a:	08 95       	ret

0000548c <_turn_off>:
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	fc 01       	movw	r30, r24
    5490:	ee 0f       	add	r30, r30
    5492:	ff 1f       	adc	r31, r31
    5494:	e8 0f       	add	r30, r24
    5496:	f9 1f       	adc	r31, r25
    5498:	ee 0f       	add	r30, r30
    549a:	ff 1f       	adc	r31, r31
    549c:	e2 5b       	subi	r30, 0xB2	; 178
    549e:	f7 4e       	sbci	r31, 0xE7	; 231
    54a0:	23 81       	ldd	r18, Z+3	; 0x03
    54a2:	21 11       	cpse	r18, r1
    54a4:	1f c0       	rjmp	.+62     	; 0x54e4 <_turn_off+0x58>
    54a6:	9c 01       	movw	r18, r24
    54a8:	22 0f       	add	r18, r18
    54aa:	33 1f       	adc	r19, r19
    54ac:	f9 01       	movw	r30, r18
    54ae:	e8 0f       	add	r30, r24
    54b0:	f9 1f       	adc	r31, r25
    54b2:	ee 0f       	add	r30, r30
    54b4:	ff 1f       	adc	r31, r31
    54b6:	e2 5b       	subi	r30, 0xB2	; 178
    54b8:	f7 4e       	sbci	r31, 0xE7	; 231
    54ba:	a0 81       	ld	r26, Z
    54bc:	b1 81       	ldd	r27, Z+1	; 0x01
    54be:	4c 91       	ld	r20, X
    54c0:	f9 01       	movw	r30, r18
    54c2:	e8 0f       	add	r30, r24
    54c4:	f9 1f       	adc	r31, r25
    54c6:	ee 0f       	add	r30, r30
    54c8:	ff 1f       	adc	r31, r31
    54ca:	e2 5b       	subi	r30, 0xB2	; 178
    54cc:	f7 4e       	sbci	r31, 0xE7	; 231
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	02 80       	ldd	r0, Z+2	; 0x02
    54d4:	02 c0       	rjmp	.+4      	; 0x54da <_turn_off+0x4e>
    54d6:	88 0f       	add	r24, r24
    54d8:	99 1f       	adc	r25, r25
    54da:	0a 94       	dec	r0
    54dc:	e2 f7       	brpl	.-8      	; 0x54d6 <_turn_off+0x4a>
    54de:	84 2b       	or	r24, r20
    54e0:	8c 93       	st	X, r24
    54e2:	08 95       	ret
    54e4:	fc 01       	movw	r30, r24
    54e6:	ee 0f       	add	r30, r30
    54e8:	ff 1f       	adc	r31, r31
    54ea:	df 01       	movw	r26, r30
    54ec:	a8 0f       	add	r26, r24
    54ee:	b9 1f       	adc	r27, r25
    54f0:	aa 0f       	add	r26, r26
    54f2:	bb 1f       	adc	r27, r27
    54f4:	a2 5b       	subi	r26, 0xB2	; 178
    54f6:	b7 4e       	sbci	r27, 0xE7	; 231
    54f8:	0d 90       	ld	r0, X+
    54fa:	bc 91       	ld	r27, X
    54fc:	a0 2d       	mov	r26, r0
    54fe:	2c 91       	ld	r18, X
    5500:	e8 0f       	add	r30, r24
    5502:	f9 1f       	adc	r31, r25
    5504:	ee 0f       	add	r30, r30
    5506:	ff 1f       	adc	r31, r31
    5508:	e2 5b       	subi	r30, 0xB2	; 178
    550a:	f7 4e       	sbci	r31, 0xE7	; 231
    550c:	81 e0       	ldi	r24, 0x01	; 1
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	02 80       	ldd	r0, Z+2	; 0x02
    5512:	02 c0       	rjmp	.+4      	; 0x5518 <_turn_off+0x8c>
    5514:	88 0f       	add	r24, r24
    5516:	99 1f       	adc	r25, r25
    5518:	0a 94       	dec	r0
    551a:	e2 f7       	brpl	.-8      	; 0x5514 <_turn_off+0x88>
    551c:	80 95       	com	r24
    551e:	82 23       	and	r24, r18
    5520:	8c 93       	st	X, r24
    5522:	08 95       	ret

00005524 <_turn_on>:
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	fc 01       	movw	r30, r24
    5528:	ee 0f       	add	r30, r30
    552a:	ff 1f       	adc	r31, r31
    552c:	e8 0f       	add	r30, r24
    552e:	f9 1f       	adc	r31, r25
    5530:	ee 0f       	add	r30, r30
    5532:	ff 1f       	adc	r31, r31
    5534:	e2 5b       	subi	r30, 0xB2	; 178
    5536:	f7 4e       	sbci	r31, 0xE7	; 231
    5538:	23 81       	ldd	r18, Z+3	; 0x03
    553a:	21 11       	cpse	r18, r1
    553c:	20 c0       	rjmp	.+64     	; 0x557e <_turn_on+0x5a>
    553e:	9c 01       	movw	r18, r24
    5540:	22 0f       	add	r18, r18
    5542:	33 1f       	adc	r19, r19
    5544:	f9 01       	movw	r30, r18
    5546:	e8 0f       	add	r30, r24
    5548:	f9 1f       	adc	r31, r25
    554a:	ee 0f       	add	r30, r30
    554c:	ff 1f       	adc	r31, r31
    554e:	e2 5b       	subi	r30, 0xB2	; 178
    5550:	f7 4e       	sbci	r31, 0xE7	; 231
    5552:	a0 81       	ld	r26, Z
    5554:	b1 81       	ldd	r27, Z+1	; 0x01
    5556:	4c 91       	ld	r20, X
    5558:	f9 01       	movw	r30, r18
    555a:	e8 0f       	add	r30, r24
    555c:	f9 1f       	adc	r31, r25
    555e:	ee 0f       	add	r30, r30
    5560:	ff 1f       	adc	r31, r31
    5562:	e2 5b       	subi	r30, 0xB2	; 178
    5564:	f7 4e       	sbci	r31, 0xE7	; 231
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	02 80       	ldd	r0, Z+2	; 0x02
    556c:	02 c0       	rjmp	.+4      	; 0x5572 <_turn_on+0x4e>
    556e:	88 0f       	add	r24, r24
    5570:	99 1f       	adc	r25, r25
    5572:	0a 94       	dec	r0
    5574:	e2 f7       	brpl	.-8      	; 0x556e <_turn_on+0x4a>
    5576:	80 95       	com	r24
    5578:	84 23       	and	r24, r20
    557a:	8c 93       	st	X, r24
    557c:	08 95       	ret
    557e:	fc 01       	movw	r30, r24
    5580:	ee 0f       	add	r30, r30
    5582:	ff 1f       	adc	r31, r31
    5584:	df 01       	movw	r26, r30
    5586:	a8 0f       	add	r26, r24
    5588:	b9 1f       	adc	r27, r25
    558a:	aa 0f       	add	r26, r26
    558c:	bb 1f       	adc	r27, r27
    558e:	a2 5b       	subi	r26, 0xB2	; 178
    5590:	b7 4e       	sbci	r27, 0xE7	; 231
    5592:	0d 90       	ld	r0, X+
    5594:	bc 91       	ld	r27, X
    5596:	a0 2d       	mov	r26, r0
    5598:	2c 91       	ld	r18, X
    559a:	e8 0f       	add	r30, r24
    559c:	f9 1f       	adc	r31, r25
    559e:	ee 0f       	add	r30, r30
    55a0:	ff 1f       	adc	r31, r31
    55a2:	e2 5b       	subi	r30, 0xB2	; 178
    55a4:	f7 4e       	sbci	r31, 0xE7	; 231
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	02 80       	ldd	r0, Z+2	; 0x02
    55ac:	02 c0       	rjmp	.+4      	; 0x55b2 <_turn_on+0x8e>
    55ae:	88 0f       	add	r24, r24
    55b0:	99 1f       	adc	r25, r25
    55b2:	0a 94       	dec	r0
    55b4:	e2 f7       	brpl	.-8      	; 0x55ae <_turn_on+0x8a>
    55b6:	82 2b       	or	r24, r18
    55b8:	8c 93       	st	X, r24
    55ba:	08 95       	ret

000055bc <status_leds_slowBlink>:
    55bc:	cf 93       	push	r28
    55be:	df 93       	push	r29
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	fc 01       	movw	r30, r24
    55c4:	ee 0f       	add	r30, r30
    55c6:	ff 1f       	adc	r31, r31
    55c8:	df 01       	movw	r26, r30
    55ca:	a8 0f       	add	r26, r24
    55cc:	b9 1f       	adc	r27, r25
    55ce:	aa 0f       	add	r26, r26
    55d0:	bb 1f       	adc	r27, r27
    55d2:	a2 5b       	subi	r26, 0xB2	; 178
    55d4:	b7 4e       	sbci	r27, 0xE7	; 231
    55d6:	cd 91       	ld	r28, X+
    55d8:	dc 91       	ld	r29, X
    55da:	11 97       	sbiw	r26, 0x01	; 1
    55dc:	48 81       	ld	r20, Y
    55de:	21 e0       	ldi	r18, 0x01	; 1
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	12 96       	adiw	r26, 0x02	; 2
    55e4:	0c 90       	ld	r0, X
    55e6:	12 97       	sbiw	r26, 0x02	; 2
    55e8:	02 c0       	rjmp	.+4      	; 0x55ee <status_leds_slowBlink+0x32>
    55ea:	22 0f       	add	r18, r18
    55ec:	33 1f       	adc	r19, r19
    55ee:	0a 94       	dec	r0
    55f0:	e2 f7       	brpl	.-8      	; 0x55ea <status_leds_slowBlink+0x2e>
    55f2:	24 27       	eor	r18, r20
    55f4:	28 83       	st	Y, r18
    55f6:	fd 01       	movw	r30, r26
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	84 83       	std	Z+4, r24	; 0x04
    55fc:	df 91       	pop	r29
    55fe:	cf 91       	pop	r28
    5600:	08 95       	ret

00005602 <status_leds_fastBlink>:
    5602:	cf 93       	push	r28
    5604:	df 93       	push	r29
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	fc 01       	movw	r30, r24
    560a:	ee 0f       	add	r30, r30
    560c:	ff 1f       	adc	r31, r31
    560e:	df 01       	movw	r26, r30
    5610:	a8 0f       	add	r26, r24
    5612:	b9 1f       	adc	r27, r25
    5614:	aa 0f       	add	r26, r26
    5616:	bb 1f       	adc	r27, r27
    5618:	a2 5b       	subi	r26, 0xB2	; 178
    561a:	b7 4e       	sbci	r27, 0xE7	; 231
    561c:	cd 91       	ld	r28, X+
    561e:	dc 91       	ld	r29, X
    5620:	11 97       	sbiw	r26, 0x01	; 1
    5622:	48 81       	ld	r20, Y
    5624:	21 e0       	ldi	r18, 0x01	; 1
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	12 96       	adiw	r26, 0x02	; 2
    562a:	0c 90       	ld	r0, X
    562c:	12 97       	sbiw	r26, 0x02	; 2
    562e:	02 c0       	rjmp	.+4      	; 0x5634 <status_leds_fastBlink+0x32>
    5630:	22 0f       	add	r18, r18
    5632:	33 1f       	adc	r19, r19
    5634:	0a 94       	dec	r0
    5636:	e2 f7       	brpl	.-8      	; 0x5630 <status_leds_fastBlink+0x2e>
    5638:	24 27       	eor	r18, r20
    563a:	28 83       	st	Y, r18
    563c:	fd 01       	movw	r30, r26
    563e:	82 e0       	ldi	r24, 0x02	; 2
    5640:	84 83       	std	Z+4, r24	; 0x04
    5642:	df 91       	pop	r29
    5644:	cf 91       	pop	r28
    5646:	08 95       	ret

00005648 <status_leds_ledOn>:
    5648:	28 2f       	mov	r18, r24
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	f9 01       	movw	r30, r18
    564e:	ee 0f       	add	r30, r30
    5650:	ff 1f       	adc	r31, r31
    5652:	e2 0f       	add	r30, r18
    5654:	f3 1f       	adc	r31, r19
    5656:	ee 0f       	add	r30, r30
    5658:	ff 1f       	adc	r31, r31
    565a:	e2 5b       	subi	r30, 0xB2	; 178
    565c:	f7 4e       	sbci	r31, 0xE7	; 231
    565e:	93 e0       	ldi	r25, 0x03	; 3
    5660:	94 83       	std	Z+4, r25	; 0x04
    5662:	60 cf       	rjmp	.-320    	; 0x5524 <_turn_on>
    5664:	08 95       	ret

00005666 <status_leds_ledOff>:
    5666:	28 2f       	mov	r18, r24
    5668:	30 e0       	ldi	r19, 0x00	; 0
    566a:	f9 01       	movw	r30, r18
    566c:	ee 0f       	add	r30, r30
    566e:	ff 1f       	adc	r31, r31
    5670:	e2 0f       	add	r30, r18
    5672:	f3 1f       	adc	r31, r19
    5674:	ee 0f       	add	r30, r30
    5676:	ff 1f       	adc	r31, r31
    5678:	e2 5b       	subi	r30, 0xB2	; 178
    567a:	f7 4e       	sbci	r31, 0xE7	; 231
    567c:	94 e0       	ldi	r25, 0x04	; 4
    567e:	94 83       	std	Z+4, r25	; 0x04
    5680:	05 cf       	rjmp	.-502    	; 0x548c <_turn_off>
    5682:	08 95       	ret

00005684 <status_leds_longPuls>:
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	fc 01       	movw	r30, r24
    5688:	ee 0f       	add	r30, r30
    568a:	ff 1f       	adc	r31, r31
    568c:	df 01       	movw	r26, r30
    568e:	a8 0f       	add	r26, r24
    5690:	b9 1f       	adc	r27, r25
    5692:	aa 0f       	add	r26, r26
    5694:	bb 1f       	adc	r27, r27
    5696:	a2 5b       	subi	r26, 0xB2	; 178
    5698:	b7 4e       	sbci	r27, 0xE7	; 231
    569a:	24 e0       	ldi	r18, 0x04	; 4
    569c:	15 96       	adiw	r26, 0x05	; 5
    569e:	2c 93       	st	X, r18
    56a0:	15 97       	sbiw	r26, 0x05	; 5
    56a2:	fd 01       	movw	r30, r26
    56a4:	14 82       	std	Z+4, r1	; 0x04
    56a6:	08 95       	ret

000056a8 <status_leds_shortPuls>:
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	fc 01       	movw	r30, r24
    56ac:	ee 0f       	add	r30, r30
    56ae:	ff 1f       	adc	r31, r31
    56b0:	df 01       	movw	r26, r30
    56b2:	a8 0f       	add	r26, r24
    56b4:	b9 1f       	adc	r27, r25
    56b6:	aa 0f       	add	r26, r26
    56b8:	bb 1f       	adc	r27, r27
    56ba:	a2 5b       	subi	r26, 0xB2	; 178
    56bc:	b7 4e       	sbci	r27, 0xE7	; 231
    56be:	21 e0       	ldi	r18, 0x01	; 1
    56c0:	15 96       	adiw	r26, 0x05	; 5
    56c2:	2c 93       	st	X, r18
    56c4:	15 97       	sbiw	r26, 0x05	; 5
    56c6:	fd 01       	movw	r30, r26
    56c8:	14 82       	std	Z+4, r1	; 0x04
    56ca:	08 95       	ret

000056cc <_initTwiInterface>:
    56cc:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <_twiIsInitiated>
    56d0:	81 11       	cpse	r24, r1
    56d2:	0c c0       	rjmp	.+24     	; 0x56ec <_initTwiInterface+0x20>
    56d4:	8c e0       	ldi	r24, 0x0C	; 12
    56d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    56da:	8f ef       	ldi	r24, 0xFF	; 255
    56dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56e0:	84 e0       	ldi	r24, 0x04	; 4
    56e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	80 93 74 18 	sts	0x1874, r24	; 0x801874 <_twiIsInitiated>
    56ec:	08 95       	ret

000056ee <twiCreate>:
    56ee:	af 92       	push	r10
    56f0:	bf 92       	push	r11
    56f2:	cf 92       	push	r12
    56f4:	df 92       	push	r13
    56f6:	ef 92       	push	r14
    56f8:	ff 92       	push	r15
    56fa:	0f 93       	push	r16
    56fc:	1f 93       	push	r17
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	a8 2e       	mov	r10, r24
    5704:	b6 2e       	mov	r11, r22
    5706:	69 01       	movw	r12, r18
    5708:	7a 01       	movw	r14, r20
    570a:	84 e0       	ldi	r24, 0x04	; 4
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	cb d3       	rcall	.+1942   	; 0x5ea6 <malloc>
    5710:	ec 01       	movw	r28, r24
    5712:	89 2b       	or	r24, r25
    5714:	61 f1       	breq	.+88     	; 0x576e <twiCreate+0x80>
    5716:	a8 82       	st	Y, r10
    5718:	81 e0       	ldi	r24, 0x01	; 1
    571a:	b8 12       	cpse	r11, r24
    571c:	12 c0       	rjmp	.+36     	; 0x5742 <twiCreate+0x54>
    571e:	c7 01       	movw	r24, r14
    5720:	b6 01       	movw	r22, r12
    5722:	20 ea       	ldi	r18, 0xA0	; 160
    5724:	36 e8       	ldi	r19, 0x86	; 134
    5726:	41 e0       	ldi	r20, 0x01	; 1
    5728:	50 e0       	ldi	r21, 0x00	; 0
    572a:	79 d3       	rcall	.+1778   	; 0x5e1e <__udivmodsi4>
    572c:	da 01       	movw	r26, r20
    572e:	c9 01       	movw	r24, r18
    5730:	40 97       	sbiw	r24, 0x10	; 16
    5732:	a1 09       	sbc	r26, r1
    5734:	b1 09       	sbc	r27, r1
    5736:	b6 95       	lsr	r27
    5738:	a7 95       	ror	r26
    573a:	97 95       	ror	r25
    573c:	87 95       	ror	r24
    573e:	89 83       	std	Y+1, r24	; 0x01
    5740:	11 c0       	rjmp	.+34     	; 0x5764 <twiCreate+0x76>
    5742:	c7 01       	movw	r24, r14
    5744:	b6 01       	movw	r22, r12
    5746:	20 e8       	ldi	r18, 0x80	; 128
    5748:	3a e1       	ldi	r19, 0x1A	; 26
    574a:	46 e0       	ldi	r20, 0x06	; 6
    574c:	50 e0       	ldi	r21, 0x00	; 0
    574e:	67 d3       	rcall	.+1742   	; 0x5e1e <__udivmodsi4>
    5750:	da 01       	movw	r26, r20
    5752:	c9 01       	movw	r24, r18
    5754:	40 97       	sbiw	r24, 0x10	; 16
    5756:	a1 09       	sbc	r26, r1
    5758:	b1 09       	sbc	r27, r1
    575a:	b6 95       	lsr	r27
    575c:	a7 95       	ror	r26
    575e:	97 95       	ror	r25
    5760:	87 95       	ror	r24
    5762:	89 83       	std	Y+1, r24	; 0x01
    5764:	1b 83       	std	Y+3, r17	; 0x03
    5766:	0a 83       	std	Y+2, r16	; 0x02
    5768:	8c 2f       	mov	r24, r28
    576a:	9d 2f       	mov	r25, r29
    576c:	02 c0       	rjmp	.+4      	; 0x5772 <twiCreate+0x84>
    576e:	80 e0       	ldi	r24, 0x00	; 0
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	df 91       	pop	r29
    5774:	cf 91       	pop	r28
    5776:	1f 91       	pop	r17
    5778:	0f 91       	pop	r16
    577a:	ff 90       	pop	r15
    577c:	ef 90       	pop	r14
    577e:	df 90       	pop	r13
    5780:	cf 90       	pop	r12
    5782:	bf 90       	pop	r11
    5784:	af 90       	pop	r10
    5786:	08 95       	ret

00005788 <twiIsBusy>:
    5788:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    578c:	81 70       	andi	r24, 0x01	; 1
    578e:	08 95       	ret

00005790 <twiTransmit>:
    5790:	ff 92       	push	r15
    5792:	0f 93       	push	r16
    5794:	1f 93       	push	r17
    5796:	cf 93       	push	r28
    5798:	df 93       	push	r29
    579a:	00 97       	sbiw	r24, 0x00	; 0
    579c:	d1 f1       	breq	.+116    	; 0x5812 <twiTransmit+0x82>
    579e:	4a 30       	cpi	r20, 0x0A	; 10
    57a0:	d0 f5       	brcc	.+116    	; 0x5816 <twiTransmit+0x86>
    57a2:	f4 2e       	mov	r15, r20
    57a4:	8b 01       	movw	r16, r22
    57a6:	ec 01       	movw	r28, r24
    57a8:	ef df       	rcall	.-34     	; 0x5788 <twiIsBusy>
    57aa:	81 11       	cpse	r24, r1
    57ac:	36 c0       	rjmp	.+108    	; 0x581a <twiTransmit+0x8a>
    57ae:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <_twiCurrentHandler>
    57b2:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <_twiCurrentHandler+0x1>
    57b6:	c8 17       	cp	r28, r24
    57b8:	d9 07       	cpc	r29, r25
    57ba:	41 f0       	breq	.+16     	; 0x57cc <twiTransmit+0x3c>
    57bc:	87 df       	rcall	.-242    	; 0x56cc <_initTwiInterface>
    57be:	89 81       	ldd	r24, Y+1	; 0x01
    57c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    57c4:	d0 93 68 18 	sts	0x1868, r29	; 0x801868 <_twiCurrentHandler+0x1>
    57c8:	c0 93 67 18 	sts	0x1867, r28	; 0x801867 <_twiCurrentHandler>
    57cc:	81 e0       	ldi	r24, 0x01	; 1
    57ce:	8f 0d       	add	r24, r15
    57d0:	80 93 69 18 	sts	0x1869, r24	; 0x801869 <_twiMessageLen>
    57d4:	88 81       	ld	r24, Y
    57d6:	88 0f       	add	r24, r24
    57d8:	80 93 6a 18 	sts	0x186A, r24	; 0x80186a <_twiMessageBuffer>
    57dc:	ff 20       	and	r15, r15
    57de:	89 f0       	breq	.+34     	; 0x5802 <twiTransmit+0x72>
    57e0:	f8 01       	movw	r30, r16
    57e2:	ab e6       	ldi	r26, 0x6B	; 107
    57e4:	b8 e1       	ldi	r27, 0x18	; 24
    57e6:	4f ef       	ldi	r20, 0xFF	; 255
    57e8:	4f 0d       	add	r20, r15
    57ea:	64 2f       	mov	r22, r20
    57ec:	70 e0       	ldi	r23, 0x00	; 0
    57ee:	cb 01       	movw	r24, r22
    57f0:	01 96       	adiw	r24, 0x01	; 1
    57f2:	b8 01       	movw	r22, r16
    57f4:	68 0f       	add	r22, r24
    57f6:	79 1f       	adc	r23, r25
    57f8:	81 91       	ld	r24, Z+
    57fa:	8d 93       	st	X+, r24
    57fc:	e6 17       	cp	r30, r22
    57fe:	f7 07       	cpc	r31, r23
    5800:	d9 f7       	brne	.-10     	; 0x57f8 <twiTransmit+0x68>
    5802:	88 ef       	ldi	r24, 0xF8	; 248
    5804:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5808:	85 ea       	ldi	r24, 0xA5	; 165
    580a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    580e:	84 e0       	ldi	r24, 0x04	; 4
    5810:	05 c0       	rjmp	.+10     	; 0x581c <twiTransmit+0x8c>
    5812:	86 e0       	ldi	r24, 0x06	; 6
    5814:	03 c0       	rjmp	.+6      	; 0x581c <twiTransmit+0x8c>
    5816:	87 e0       	ldi	r24, 0x07	; 7
    5818:	01 c0       	rjmp	.+2      	; 0x581c <twiTransmit+0x8c>
    581a:	82 e0       	ldi	r24, 0x02	; 2
    581c:	df 91       	pop	r29
    581e:	cf 91       	pop	r28
    5820:	1f 91       	pop	r17
    5822:	0f 91       	pop	r16
    5824:	ff 90       	pop	r15
    5826:	08 95       	ret

00005828 <twiReceive>:
    5828:	1f 93       	push	r17
    582a:	cf 93       	push	r28
    582c:	df 93       	push	r29
    582e:	00 97       	sbiw	r24, 0x00	; 0
    5830:	29 f1       	breq	.+74     	; 0x587c <twiReceive+0x54>
    5832:	6b 30       	cpi	r22, 0x0B	; 11
    5834:	28 f5       	brcc	.+74     	; 0x5880 <twiReceive+0x58>
    5836:	16 2f       	mov	r17, r22
    5838:	ec 01       	movw	r28, r24
    583a:	a6 df       	rcall	.-180    	; 0x5788 <twiIsBusy>
    583c:	81 11       	cpse	r24, r1
    583e:	22 c0       	rjmp	.+68     	; 0x5884 <twiReceive+0x5c>
    5840:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <_twiCurrentHandler>
    5844:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <_twiCurrentHandler+0x1>
    5848:	c8 17       	cp	r28, r24
    584a:	d9 07       	cpc	r29, r25
    584c:	41 f0       	breq	.+16     	; 0x585e <twiReceive+0x36>
    584e:	3e df       	rcall	.-388    	; 0x56cc <_initTwiInterface>
    5850:	89 81       	ldd	r24, Y+1	; 0x01
    5852:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5856:	d0 93 68 18 	sts	0x1868, r29	; 0x801868 <_twiCurrentHandler+0x1>
    585a:	c0 93 67 18 	sts	0x1867, r28	; 0x801867 <_twiCurrentHandler>
    585e:	10 93 69 18 	sts	0x1869, r17	; 0x801869 <_twiMessageLen>
    5862:	88 81       	ld	r24, Y
    5864:	88 0f       	add	r24, r24
    5866:	81 60       	ori	r24, 0x01	; 1
    5868:	80 93 6a 18 	sts	0x186A, r24	; 0x80186a <_twiMessageBuffer>
    586c:	88 ef       	ldi	r24, 0xF8	; 248
    586e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5872:	85 ea       	ldi	r24, 0xA5	; 165
    5874:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5878:	85 e0       	ldi	r24, 0x05	; 5
    587a:	05 c0       	rjmp	.+10     	; 0x5886 <twiReceive+0x5e>
    587c:	86 e0       	ldi	r24, 0x06	; 6
    587e:	03 c0       	rjmp	.+6      	; 0x5886 <twiReceive+0x5e>
    5880:	87 e0       	ldi	r24, 0x07	; 7
    5882:	01 c0       	rjmp	.+2      	; 0x5886 <twiReceive+0x5e>
    5884:	82 e0       	ldi	r24, 0x02	; 2
    5886:	df 91       	pop	r29
    5888:	cf 91       	pop	r28
    588a:	1f 91       	pop	r17
    588c:	08 95       	ret

0000588e <__vector_39>:
    588e:	1f 92       	push	r1
    5890:	0f 92       	push	r0
    5892:	0f b6       	in	r0, 0x3f	; 63
    5894:	0f 92       	push	r0
    5896:	11 24       	eor	r1, r1
    5898:	0b b6       	in	r0, 0x3b	; 59
    589a:	0f 92       	push	r0
    589c:	2f 93       	push	r18
    589e:	3f 93       	push	r19
    58a0:	4f 93       	push	r20
    58a2:	5f 93       	push	r21
    58a4:	6f 93       	push	r22
    58a6:	7f 93       	push	r23
    58a8:	8f 93       	push	r24
    58aa:	9f 93       	push	r25
    58ac:	af 93       	push	r26
    58ae:	bf 93       	push	r27
    58b0:	ef 93       	push	r30
    58b2:	ff 93       	push	r31
    58b4:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    58b8:	8e 2f       	mov	r24, r30
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	fc 01       	movw	r30, r24
    58be:	38 97       	sbiw	r30, 0x08	; 8
    58c0:	e1 35       	cpi	r30, 0x51	; 81
    58c2:	f1 05       	cpc	r31, r1
    58c4:	08 f0       	brcs	.+2      	; 0x58c8 <__vector_39+0x3a>
    58c6:	75 c0       	rjmp	.+234    	; 0x59b2 <__vector_39+0x124>
    58c8:	88 27       	eor	r24, r24
    58ca:	e4 58       	subi	r30, 0x84	; 132
    58cc:	ff 4f       	sbci	r31, 0xFF	; 255
    58ce:	8f 4f       	sbci	r24, 0xFF	; 255
    58d0:	c8 c2       	rjmp	.+1424   	; 0x5e62 <__tablejump2__>
    58d2:	10 92 66 18 	sts	0x1866, r1	; 0x801866 <_index.1885>
    58d6:	e0 91 66 18 	lds	r30, 0x1866	; 0x801866 <_index.1885>
    58da:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <_twiMessageLen>
    58de:	e8 17       	cp	r30, r24
    58e0:	70 f4       	brcc	.+28     	; 0x58fe <__vector_39+0x70>
    58e2:	81 e0       	ldi	r24, 0x01	; 1
    58e4:	8e 0f       	add	r24, r30
    58e6:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <_index.1885>
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	e6 59       	subi	r30, 0x96	; 150
    58ee:	f7 4e       	sbci	r31, 0xE7	; 231
    58f0:	80 81       	ld	r24, Z
    58f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    58f6:	85 e8       	ldi	r24, 0x85	; 133
    58f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58fc:	72 c0       	rjmp	.+228    	; 0x59e2 <__vector_39+0x154>
    58fe:	84 e9       	ldi	r24, 0x94	; 148
    5900:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5904:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <_twiCurrentHandler>
    5908:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <_twiCurrentHandler+0x1>
    590c:	dc 01       	movw	r26, r24
    590e:	12 96       	adiw	r26, 0x02	; 2
    5910:	ed 91       	ld	r30, X+
    5912:	fc 91       	ld	r31, X
    5914:	13 97       	sbiw	r26, 0x03	; 3
    5916:	30 97       	sbiw	r30, 0x00	; 0
    5918:	09 f4       	brne	.+2      	; 0x591c <__vector_39+0x8e>
    591a:	63 c0       	rjmp	.+198    	; 0x59e2 <__vector_39+0x154>
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	40 e0       	ldi	r20, 0x00	; 0
    5920:	50 e0       	ldi	r21, 0x00	; 0
    5922:	64 e0       	ldi	r22, 0x04	; 4
    5924:	19 95       	eicall
    5926:	5d c0       	rjmp	.+186    	; 0x59e2 <__vector_39+0x154>
    5928:	e0 91 66 18 	lds	r30, 0x1866	; 0x801866 <_index.1885>
    592c:	81 e0       	ldi	r24, 0x01	; 1
    592e:	8e 0f       	add	r24, r30
    5930:	80 93 66 18 	sts	0x1866, r24	; 0x801866 <_index.1885>
    5934:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5938:	f0 e0       	ldi	r31, 0x00	; 0
    593a:	e6 59       	subi	r30, 0x96	; 150
    593c:	f7 4e       	sbci	r31, 0xE7	; 231
    593e:	80 83       	st	Z, r24
    5940:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5944:	80 34       	cpi	r24, 0x40	; 64
    5946:	11 f4       	brne	.+4      	; 0x594c <__vector_39+0xbe>
    5948:	10 92 66 18 	sts	0x1866, r1	; 0x801866 <_index.1885>
    594c:	20 91 66 18 	lds	r18, 0x1866	; 0x801866 <_index.1885>
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <_twiMessageLen>
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	01 97       	sbiw	r24, 0x01	; 1
    595a:	28 17       	cp	r18, r24
    595c:	39 07       	cpc	r19, r25
    595e:	24 f4       	brge	.+8      	; 0x5968 <__vector_39+0xda>
    5960:	85 ec       	ldi	r24, 0xC5	; 197
    5962:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5966:	3d c0       	rjmp	.+122    	; 0x59e2 <__vector_39+0x154>
    5968:	85 e8       	ldi	r24, 0x85	; 133
    596a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    596e:	39 c0       	rjmp	.+114    	; 0x59e2 <__vector_39+0x154>
    5970:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5974:	e0 91 66 18 	lds	r30, 0x1866	; 0x801866 <_index.1885>
    5978:	f0 e0       	ldi	r31, 0x00	; 0
    597a:	e6 59       	subi	r30, 0x96	; 150
    597c:	f7 4e       	sbci	r31, 0xE7	; 231
    597e:	80 83       	st	Z, r24
    5980:	84 e9       	ldi	r24, 0x94	; 148
    5982:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5986:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <_twiCurrentHandler>
    598a:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <_twiCurrentHandler+0x1>
    598e:	dc 01       	movw	r26, r24
    5990:	12 96       	adiw	r26, 0x02	; 2
    5992:	ed 91       	ld	r30, X+
    5994:	fc 91       	ld	r31, X
    5996:	13 97       	sbiw	r26, 0x03	; 3
    5998:	30 97       	sbiw	r30, 0x00	; 0
    599a:	19 f1       	breq	.+70     	; 0x59e2 <__vector_39+0x154>
    599c:	20 91 69 18 	lds	r18, 0x1869	; 0x801869 <_twiMessageLen>
    59a0:	4a e6       	ldi	r20, 0x6A	; 106
    59a2:	58 e1       	ldi	r21, 0x18	; 24
    59a4:	65 e0       	ldi	r22, 0x05	; 5
    59a6:	19 95       	eicall
    59a8:	1c c0       	rjmp	.+56     	; 0x59e2 <__vector_39+0x154>
    59aa:	85 ea       	ldi	r24, 0xA5	; 165
    59ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59b0:	18 c0       	rjmp	.+48     	; 0x59e2 <__vector_39+0x154>
    59b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    59b6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    59ba:	84 e0       	ldi	r24, 0x04	; 4
    59bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59c0:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <_twiCurrentHandler>
    59c4:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <_twiCurrentHandler+0x1>
    59c8:	dc 01       	movw	r26, r24
    59ca:	12 96       	adiw	r26, 0x02	; 2
    59cc:	ed 91       	ld	r30, X+
    59ce:	fc 91       	ld	r31, X
    59d0:	13 97       	sbiw	r26, 0x03	; 3
    59d2:	30 97       	sbiw	r30, 0x00	; 0
    59d4:	31 f0       	breq	.+12     	; 0x59e2 <__vector_39+0x154>
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	40 e0       	ldi	r20, 0x00	; 0
    59da:	50 e0       	ldi	r21, 0x00	; 0
    59dc:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    59e0:	19 95       	eicall
    59e2:	ff 91       	pop	r31
    59e4:	ef 91       	pop	r30
    59e6:	bf 91       	pop	r27
    59e8:	af 91       	pop	r26
    59ea:	9f 91       	pop	r25
    59ec:	8f 91       	pop	r24
    59ee:	7f 91       	pop	r23
    59f0:	6f 91       	pop	r22
    59f2:	5f 91       	pop	r21
    59f4:	4f 91       	pop	r20
    59f6:	3f 91       	pop	r19
    59f8:	2f 91       	pop	r18
    59fa:	0f 90       	pop	r0
    59fc:	0b be       	out	0x3b, r0	; 59
    59fe:	0f 90       	pop	r0
    5a00:	0f be       	out	0x3f, r0	; 63
    5a02:	0f 90       	pop	r0
    5a04:	1f 90       	pop	r1
    5a06:	18 95       	reti

00005a08 <fifo_init>:
    5a08:	fc 01       	movw	r30, r24
    5a0a:	41 11       	cpse	r20, r1
    5a0c:	01 c0       	rjmp	.+2      	; 0x5a10 <fifo_init+0x8>
    5a0e:	6c d3       	rcall	.+1752   	; 0x60e8 <abort>
    5a10:	84 2f       	mov	r24, r20
    5a12:	90 e0       	ldi	r25, 0x00	; 0
    5a14:	9c 01       	movw	r18, r24
    5a16:	21 50       	subi	r18, 0x01	; 1
    5a18:	31 09       	sbc	r19, r1
    5a1a:	82 23       	and	r24, r18
    5a1c:	93 23       	and	r25, r19
    5a1e:	89 2b       	or	r24, r25
    5a20:	09 f0       	breq	.+2      	; 0x5a24 <fifo_init+0x1c>
    5a22:	62 d3       	rcall	.+1732   	; 0x60e8 <abort>
    5a24:	41 38       	cpi	r20, 0x81	; 129
    5a26:	08 f0       	brcs	.+2      	; 0x5a2a <fifo_init+0x22>
    5a28:	5f d3       	rcall	.+1726   	; 0x60e8 <abort>
    5a2a:	12 82       	std	Z+2, r1	; 0x02
    5a2c:	13 82       	std	Z+3, r1	; 0x03
    5a2e:	44 83       	std	Z+4, r20	; 0x04
    5a30:	44 0f       	add	r20, r20
    5a32:	41 50       	subi	r20, 0x01	; 1
    5a34:	45 83       	std	Z+5, r20	; 0x05
    5a36:	71 83       	std	Z+1, r23	; 0x01
    5a38:	60 83       	st	Z, r22
    5a3a:	80 e0       	ldi	r24, 0x00	; 0
    5a3c:	90 e0       	ldi	r25, 0x00	; 0
    5a3e:	08 95       	ret

00005a40 <__subsf3>:
    5a40:	50 58       	subi	r21, 0x80	; 128

00005a42 <__addsf3>:
    5a42:	bb 27       	eor	r27, r27
    5a44:	aa 27       	eor	r26, r26
    5a46:	0e d0       	rcall	.+28     	; 0x5a64 <__addsf3x>
    5a48:	4d c1       	rjmp	.+666    	; 0x5ce4 <__fp_round>
    5a4a:	3e d1       	rcall	.+636    	; 0x5cc8 <__fp_pscA>
    5a4c:	30 f0       	brcs	.+12     	; 0x5a5a <__addsf3+0x18>
    5a4e:	43 d1       	rcall	.+646    	; 0x5cd6 <__fp_pscB>
    5a50:	20 f0       	brcs	.+8      	; 0x5a5a <__addsf3+0x18>
    5a52:	31 f4       	brne	.+12     	; 0x5a60 <__addsf3+0x1e>
    5a54:	9f 3f       	cpi	r25, 0xFF	; 255
    5a56:	11 f4       	brne	.+4      	; 0x5a5c <__addsf3+0x1a>
    5a58:	1e f4       	brtc	.+6      	; 0x5a60 <__addsf3+0x1e>
    5a5a:	33 c1       	rjmp	.+614    	; 0x5cc2 <__fp_nan>
    5a5c:	0e f4       	brtc	.+2      	; 0x5a60 <__addsf3+0x1e>
    5a5e:	e0 95       	com	r30
    5a60:	e7 fb       	bst	r30, 7
    5a62:	29 c1       	rjmp	.+594    	; 0x5cb6 <__fp_inf>

00005a64 <__addsf3x>:
    5a64:	e9 2f       	mov	r30, r25
    5a66:	4f d1       	rcall	.+670    	; 0x5d06 <__fp_split3>
    5a68:	80 f3       	brcs	.-32     	; 0x5a4a <__addsf3+0x8>
    5a6a:	ba 17       	cp	r27, r26
    5a6c:	62 07       	cpc	r22, r18
    5a6e:	73 07       	cpc	r23, r19
    5a70:	84 07       	cpc	r24, r20
    5a72:	95 07       	cpc	r25, r21
    5a74:	18 f0       	brcs	.+6      	; 0x5a7c <__addsf3x+0x18>
    5a76:	71 f4       	brne	.+28     	; 0x5a94 <__addsf3x+0x30>
    5a78:	9e f5       	brtc	.+102    	; 0x5ae0 <__addsf3x+0x7c>
    5a7a:	67 c1       	rjmp	.+718    	; 0x5d4a <__fp_zero>
    5a7c:	0e f4       	brtc	.+2      	; 0x5a80 <__addsf3x+0x1c>
    5a7e:	e0 95       	com	r30
    5a80:	0b 2e       	mov	r0, r27
    5a82:	ba 2f       	mov	r27, r26
    5a84:	a0 2d       	mov	r26, r0
    5a86:	0b 01       	movw	r0, r22
    5a88:	b9 01       	movw	r22, r18
    5a8a:	90 01       	movw	r18, r0
    5a8c:	0c 01       	movw	r0, r24
    5a8e:	ca 01       	movw	r24, r20
    5a90:	a0 01       	movw	r20, r0
    5a92:	11 24       	eor	r1, r1
    5a94:	ff 27       	eor	r31, r31
    5a96:	59 1b       	sub	r21, r25
    5a98:	99 f0       	breq	.+38     	; 0x5ac0 <__addsf3x+0x5c>
    5a9a:	59 3f       	cpi	r21, 0xF9	; 249
    5a9c:	50 f4       	brcc	.+20     	; 0x5ab2 <__addsf3x+0x4e>
    5a9e:	50 3e       	cpi	r21, 0xE0	; 224
    5aa0:	68 f1       	brcs	.+90     	; 0x5afc <__addsf3x+0x98>
    5aa2:	1a 16       	cp	r1, r26
    5aa4:	f0 40       	sbci	r31, 0x00	; 0
    5aa6:	a2 2f       	mov	r26, r18
    5aa8:	23 2f       	mov	r18, r19
    5aaa:	34 2f       	mov	r19, r20
    5aac:	44 27       	eor	r20, r20
    5aae:	58 5f       	subi	r21, 0xF8	; 248
    5ab0:	f3 cf       	rjmp	.-26     	; 0x5a98 <__addsf3x+0x34>
    5ab2:	46 95       	lsr	r20
    5ab4:	37 95       	ror	r19
    5ab6:	27 95       	ror	r18
    5ab8:	a7 95       	ror	r26
    5aba:	f0 40       	sbci	r31, 0x00	; 0
    5abc:	53 95       	inc	r21
    5abe:	c9 f7       	brne	.-14     	; 0x5ab2 <__addsf3x+0x4e>
    5ac0:	7e f4       	brtc	.+30     	; 0x5ae0 <__addsf3x+0x7c>
    5ac2:	1f 16       	cp	r1, r31
    5ac4:	ba 0b       	sbc	r27, r26
    5ac6:	62 0b       	sbc	r22, r18
    5ac8:	73 0b       	sbc	r23, r19
    5aca:	84 0b       	sbc	r24, r20
    5acc:	ba f0       	brmi	.+46     	; 0x5afc <__addsf3x+0x98>
    5ace:	91 50       	subi	r25, 0x01	; 1
    5ad0:	a1 f0       	breq	.+40     	; 0x5afa <__addsf3x+0x96>
    5ad2:	ff 0f       	add	r31, r31
    5ad4:	bb 1f       	adc	r27, r27
    5ad6:	66 1f       	adc	r22, r22
    5ad8:	77 1f       	adc	r23, r23
    5ada:	88 1f       	adc	r24, r24
    5adc:	c2 f7       	brpl	.-16     	; 0x5ace <__addsf3x+0x6a>
    5ade:	0e c0       	rjmp	.+28     	; 0x5afc <__addsf3x+0x98>
    5ae0:	ba 0f       	add	r27, r26
    5ae2:	62 1f       	adc	r22, r18
    5ae4:	73 1f       	adc	r23, r19
    5ae6:	84 1f       	adc	r24, r20
    5ae8:	48 f4       	brcc	.+18     	; 0x5afc <__addsf3x+0x98>
    5aea:	87 95       	ror	r24
    5aec:	77 95       	ror	r23
    5aee:	67 95       	ror	r22
    5af0:	b7 95       	ror	r27
    5af2:	f7 95       	ror	r31
    5af4:	9e 3f       	cpi	r25, 0xFE	; 254
    5af6:	08 f0       	brcs	.+2      	; 0x5afa <__addsf3x+0x96>
    5af8:	b3 cf       	rjmp	.-154    	; 0x5a60 <__addsf3+0x1e>
    5afa:	93 95       	inc	r25
    5afc:	88 0f       	add	r24, r24
    5afe:	08 f0       	brcs	.+2      	; 0x5b02 <__addsf3x+0x9e>
    5b00:	99 27       	eor	r25, r25
    5b02:	ee 0f       	add	r30, r30
    5b04:	97 95       	ror	r25
    5b06:	87 95       	ror	r24
    5b08:	08 95       	ret

00005b0a <__divsf3>:
    5b0a:	0c d0       	rcall	.+24     	; 0x5b24 <__divsf3x>
    5b0c:	eb c0       	rjmp	.+470    	; 0x5ce4 <__fp_round>
    5b0e:	e3 d0       	rcall	.+454    	; 0x5cd6 <__fp_pscB>
    5b10:	40 f0       	brcs	.+16     	; 0x5b22 <__divsf3+0x18>
    5b12:	da d0       	rcall	.+436    	; 0x5cc8 <__fp_pscA>
    5b14:	30 f0       	brcs	.+12     	; 0x5b22 <__divsf3+0x18>
    5b16:	21 f4       	brne	.+8      	; 0x5b20 <__divsf3+0x16>
    5b18:	5f 3f       	cpi	r21, 0xFF	; 255
    5b1a:	19 f0       	breq	.+6      	; 0x5b22 <__divsf3+0x18>
    5b1c:	cc c0       	rjmp	.+408    	; 0x5cb6 <__fp_inf>
    5b1e:	51 11       	cpse	r21, r1
    5b20:	15 c1       	rjmp	.+554    	; 0x5d4c <__fp_szero>
    5b22:	cf c0       	rjmp	.+414    	; 0x5cc2 <__fp_nan>

00005b24 <__divsf3x>:
    5b24:	f0 d0       	rcall	.+480    	; 0x5d06 <__fp_split3>
    5b26:	98 f3       	brcs	.-26     	; 0x5b0e <__divsf3+0x4>

00005b28 <__divsf3_pse>:
    5b28:	99 23       	and	r25, r25
    5b2a:	c9 f3       	breq	.-14     	; 0x5b1e <__divsf3+0x14>
    5b2c:	55 23       	and	r21, r21
    5b2e:	b1 f3       	breq	.-20     	; 0x5b1c <__divsf3+0x12>
    5b30:	95 1b       	sub	r25, r21
    5b32:	55 0b       	sbc	r21, r21
    5b34:	bb 27       	eor	r27, r27
    5b36:	aa 27       	eor	r26, r26
    5b38:	62 17       	cp	r22, r18
    5b3a:	73 07       	cpc	r23, r19
    5b3c:	84 07       	cpc	r24, r20
    5b3e:	38 f0       	brcs	.+14     	; 0x5b4e <__divsf3_pse+0x26>
    5b40:	9f 5f       	subi	r25, 0xFF	; 255
    5b42:	5f 4f       	sbci	r21, 0xFF	; 255
    5b44:	22 0f       	add	r18, r18
    5b46:	33 1f       	adc	r19, r19
    5b48:	44 1f       	adc	r20, r20
    5b4a:	aa 1f       	adc	r26, r26
    5b4c:	a9 f3       	breq	.-22     	; 0x5b38 <__divsf3_pse+0x10>
    5b4e:	33 d0       	rcall	.+102    	; 0x5bb6 <__divsf3_pse+0x8e>
    5b50:	0e 2e       	mov	r0, r30
    5b52:	3a f0       	brmi	.+14     	; 0x5b62 <__divsf3_pse+0x3a>
    5b54:	e0 e8       	ldi	r30, 0x80	; 128
    5b56:	30 d0       	rcall	.+96     	; 0x5bb8 <__divsf3_pse+0x90>
    5b58:	91 50       	subi	r25, 0x01	; 1
    5b5a:	50 40       	sbci	r21, 0x00	; 0
    5b5c:	e6 95       	lsr	r30
    5b5e:	00 1c       	adc	r0, r0
    5b60:	ca f7       	brpl	.-14     	; 0x5b54 <__divsf3_pse+0x2c>
    5b62:	29 d0       	rcall	.+82     	; 0x5bb6 <__divsf3_pse+0x8e>
    5b64:	fe 2f       	mov	r31, r30
    5b66:	27 d0       	rcall	.+78     	; 0x5bb6 <__divsf3_pse+0x8e>
    5b68:	66 0f       	add	r22, r22
    5b6a:	77 1f       	adc	r23, r23
    5b6c:	88 1f       	adc	r24, r24
    5b6e:	bb 1f       	adc	r27, r27
    5b70:	26 17       	cp	r18, r22
    5b72:	37 07       	cpc	r19, r23
    5b74:	48 07       	cpc	r20, r24
    5b76:	ab 07       	cpc	r26, r27
    5b78:	b0 e8       	ldi	r27, 0x80	; 128
    5b7a:	09 f0       	breq	.+2      	; 0x5b7e <__divsf3_pse+0x56>
    5b7c:	bb 0b       	sbc	r27, r27
    5b7e:	80 2d       	mov	r24, r0
    5b80:	bf 01       	movw	r22, r30
    5b82:	ff 27       	eor	r31, r31
    5b84:	93 58       	subi	r25, 0x83	; 131
    5b86:	5f 4f       	sbci	r21, 0xFF	; 255
    5b88:	2a f0       	brmi	.+10     	; 0x5b94 <__divsf3_pse+0x6c>
    5b8a:	9e 3f       	cpi	r25, 0xFE	; 254
    5b8c:	51 05       	cpc	r21, r1
    5b8e:	68 f0       	brcs	.+26     	; 0x5baa <__divsf3_pse+0x82>
    5b90:	92 c0       	rjmp	.+292    	; 0x5cb6 <__fp_inf>
    5b92:	dc c0       	rjmp	.+440    	; 0x5d4c <__fp_szero>
    5b94:	5f 3f       	cpi	r21, 0xFF	; 255
    5b96:	ec f3       	brlt	.-6      	; 0x5b92 <__divsf3_pse+0x6a>
    5b98:	98 3e       	cpi	r25, 0xE8	; 232
    5b9a:	dc f3       	brlt	.-10     	; 0x5b92 <__divsf3_pse+0x6a>
    5b9c:	86 95       	lsr	r24
    5b9e:	77 95       	ror	r23
    5ba0:	67 95       	ror	r22
    5ba2:	b7 95       	ror	r27
    5ba4:	f7 95       	ror	r31
    5ba6:	9f 5f       	subi	r25, 0xFF	; 255
    5ba8:	c9 f7       	brne	.-14     	; 0x5b9c <__divsf3_pse+0x74>
    5baa:	88 0f       	add	r24, r24
    5bac:	91 1d       	adc	r25, r1
    5bae:	96 95       	lsr	r25
    5bb0:	87 95       	ror	r24
    5bb2:	97 f9       	bld	r25, 7
    5bb4:	08 95       	ret
    5bb6:	e1 e0       	ldi	r30, 0x01	; 1
    5bb8:	66 0f       	add	r22, r22
    5bba:	77 1f       	adc	r23, r23
    5bbc:	88 1f       	adc	r24, r24
    5bbe:	bb 1f       	adc	r27, r27
    5bc0:	62 17       	cp	r22, r18
    5bc2:	73 07       	cpc	r23, r19
    5bc4:	84 07       	cpc	r24, r20
    5bc6:	ba 07       	cpc	r27, r26
    5bc8:	20 f0       	brcs	.+8      	; 0x5bd2 <__divsf3_pse+0xaa>
    5bca:	62 1b       	sub	r22, r18
    5bcc:	73 0b       	sbc	r23, r19
    5bce:	84 0b       	sbc	r24, r20
    5bd0:	ba 0b       	sbc	r27, r26
    5bd2:	ee 1f       	adc	r30, r30
    5bd4:	88 f7       	brcc	.-30     	; 0x5bb8 <__divsf3_pse+0x90>
    5bd6:	e0 95       	com	r30
    5bd8:	08 95       	ret

00005bda <__fixsfsi>:
    5bda:	04 d0       	rcall	.+8      	; 0x5be4 <__fixunssfsi>
    5bdc:	68 94       	set
    5bde:	b1 11       	cpse	r27, r1
    5be0:	b5 c0       	rjmp	.+362    	; 0x5d4c <__fp_szero>
    5be2:	08 95       	ret

00005be4 <__fixunssfsi>:
    5be4:	98 d0       	rcall	.+304    	; 0x5d16 <__fp_splitA>
    5be6:	88 f0       	brcs	.+34     	; 0x5c0a <__fixunssfsi+0x26>
    5be8:	9f 57       	subi	r25, 0x7F	; 127
    5bea:	90 f0       	brcs	.+36     	; 0x5c10 <__fixunssfsi+0x2c>
    5bec:	b9 2f       	mov	r27, r25
    5bee:	99 27       	eor	r25, r25
    5bf0:	b7 51       	subi	r27, 0x17	; 23
    5bf2:	a0 f0       	brcs	.+40     	; 0x5c1c <__fixunssfsi+0x38>
    5bf4:	d1 f0       	breq	.+52     	; 0x5c2a <__fixunssfsi+0x46>
    5bf6:	66 0f       	add	r22, r22
    5bf8:	77 1f       	adc	r23, r23
    5bfa:	88 1f       	adc	r24, r24
    5bfc:	99 1f       	adc	r25, r25
    5bfe:	1a f0       	brmi	.+6      	; 0x5c06 <__fixunssfsi+0x22>
    5c00:	ba 95       	dec	r27
    5c02:	c9 f7       	brne	.-14     	; 0x5bf6 <__fixunssfsi+0x12>
    5c04:	12 c0       	rjmp	.+36     	; 0x5c2a <__fixunssfsi+0x46>
    5c06:	b1 30       	cpi	r27, 0x01	; 1
    5c08:	81 f0       	breq	.+32     	; 0x5c2a <__fixunssfsi+0x46>
    5c0a:	9f d0       	rcall	.+318    	; 0x5d4a <__fp_zero>
    5c0c:	b1 e0       	ldi	r27, 0x01	; 1
    5c0e:	08 95       	ret
    5c10:	9c c0       	rjmp	.+312    	; 0x5d4a <__fp_zero>
    5c12:	67 2f       	mov	r22, r23
    5c14:	78 2f       	mov	r23, r24
    5c16:	88 27       	eor	r24, r24
    5c18:	b8 5f       	subi	r27, 0xF8	; 248
    5c1a:	39 f0       	breq	.+14     	; 0x5c2a <__fixunssfsi+0x46>
    5c1c:	b9 3f       	cpi	r27, 0xF9	; 249
    5c1e:	cc f3       	brlt	.-14     	; 0x5c12 <__fixunssfsi+0x2e>
    5c20:	86 95       	lsr	r24
    5c22:	77 95       	ror	r23
    5c24:	67 95       	ror	r22
    5c26:	b3 95       	inc	r27
    5c28:	d9 f7       	brne	.-10     	; 0x5c20 <__fixunssfsi+0x3c>
    5c2a:	3e f4       	brtc	.+14     	; 0x5c3a <__fixunssfsi+0x56>
    5c2c:	90 95       	com	r25
    5c2e:	80 95       	com	r24
    5c30:	70 95       	com	r23
    5c32:	61 95       	neg	r22
    5c34:	7f 4f       	sbci	r23, 0xFF	; 255
    5c36:	8f 4f       	sbci	r24, 0xFF	; 255
    5c38:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3a:	08 95       	ret

00005c3c <__floatunsisf>:
    5c3c:	e8 94       	clt
    5c3e:	09 c0       	rjmp	.+18     	; 0x5c52 <__floatsisf+0x12>

00005c40 <__floatsisf>:
    5c40:	97 fb       	bst	r25, 7
    5c42:	3e f4       	brtc	.+14     	; 0x5c52 <__floatsisf+0x12>
    5c44:	90 95       	com	r25
    5c46:	80 95       	com	r24
    5c48:	70 95       	com	r23
    5c4a:	61 95       	neg	r22
    5c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c50:	9f 4f       	sbci	r25, 0xFF	; 255
    5c52:	99 23       	and	r25, r25
    5c54:	a9 f0       	breq	.+42     	; 0x5c80 <__floatsisf+0x40>
    5c56:	f9 2f       	mov	r31, r25
    5c58:	96 e9       	ldi	r25, 0x96	; 150
    5c5a:	bb 27       	eor	r27, r27
    5c5c:	93 95       	inc	r25
    5c5e:	f6 95       	lsr	r31
    5c60:	87 95       	ror	r24
    5c62:	77 95       	ror	r23
    5c64:	67 95       	ror	r22
    5c66:	b7 95       	ror	r27
    5c68:	f1 11       	cpse	r31, r1
    5c6a:	f8 cf       	rjmp	.-16     	; 0x5c5c <__floatsisf+0x1c>
    5c6c:	fa f4       	brpl	.+62     	; 0x5cac <__floatsisf+0x6c>
    5c6e:	bb 0f       	add	r27, r27
    5c70:	11 f4       	brne	.+4      	; 0x5c76 <__floatsisf+0x36>
    5c72:	60 ff       	sbrs	r22, 0
    5c74:	1b c0       	rjmp	.+54     	; 0x5cac <__floatsisf+0x6c>
    5c76:	6f 5f       	subi	r22, 0xFF	; 255
    5c78:	7f 4f       	sbci	r23, 0xFF	; 255
    5c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    5c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7e:	16 c0       	rjmp	.+44     	; 0x5cac <__floatsisf+0x6c>
    5c80:	88 23       	and	r24, r24
    5c82:	11 f0       	breq	.+4      	; 0x5c88 <__floatsisf+0x48>
    5c84:	96 e9       	ldi	r25, 0x96	; 150
    5c86:	11 c0       	rjmp	.+34     	; 0x5caa <__floatsisf+0x6a>
    5c88:	77 23       	and	r23, r23
    5c8a:	21 f0       	breq	.+8      	; 0x5c94 <__floatsisf+0x54>
    5c8c:	9e e8       	ldi	r25, 0x8E	; 142
    5c8e:	87 2f       	mov	r24, r23
    5c90:	76 2f       	mov	r23, r22
    5c92:	05 c0       	rjmp	.+10     	; 0x5c9e <__floatsisf+0x5e>
    5c94:	66 23       	and	r22, r22
    5c96:	71 f0       	breq	.+28     	; 0x5cb4 <__floatsisf+0x74>
    5c98:	96 e8       	ldi	r25, 0x86	; 134
    5c9a:	86 2f       	mov	r24, r22
    5c9c:	70 e0       	ldi	r23, 0x00	; 0
    5c9e:	60 e0       	ldi	r22, 0x00	; 0
    5ca0:	2a f0       	brmi	.+10     	; 0x5cac <__floatsisf+0x6c>
    5ca2:	9a 95       	dec	r25
    5ca4:	66 0f       	add	r22, r22
    5ca6:	77 1f       	adc	r23, r23
    5ca8:	88 1f       	adc	r24, r24
    5caa:	da f7       	brpl	.-10     	; 0x5ca2 <__floatsisf+0x62>
    5cac:	88 0f       	add	r24, r24
    5cae:	96 95       	lsr	r25
    5cb0:	87 95       	ror	r24
    5cb2:	97 f9       	bld	r25, 7
    5cb4:	08 95       	ret

00005cb6 <__fp_inf>:
    5cb6:	97 f9       	bld	r25, 7
    5cb8:	9f 67       	ori	r25, 0x7F	; 127
    5cba:	80 e8       	ldi	r24, 0x80	; 128
    5cbc:	70 e0       	ldi	r23, 0x00	; 0
    5cbe:	60 e0       	ldi	r22, 0x00	; 0
    5cc0:	08 95       	ret

00005cc2 <__fp_nan>:
    5cc2:	9f ef       	ldi	r25, 0xFF	; 255
    5cc4:	80 ec       	ldi	r24, 0xC0	; 192
    5cc6:	08 95       	ret

00005cc8 <__fp_pscA>:
    5cc8:	00 24       	eor	r0, r0
    5cca:	0a 94       	dec	r0
    5ccc:	16 16       	cp	r1, r22
    5cce:	17 06       	cpc	r1, r23
    5cd0:	18 06       	cpc	r1, r24
    5cd2:	09 06       	cpc	r0, r25
    5cd4:	08 95       	ret

00005cd6 <__fp_pscB>:
    5cd6:	00 24       	eor	r0, r0
    5cd8:	0a 94       	dec	r0
    5cda:	12 16       	cp	r1, r18
    5cdc:	13 06       	cpc	r1, r19
    5cde:	14 06       	cpc	r1, r20
    5ce0:	05 06       	cpc	r0, r21
    5ce2:	08 95       	ret

00005ce4 <__fp_round>:
    5ce4:	09 2e       	mov	r0, r25
    5ce6:	03 94       	inc	r0
    5ce8:	00 0c       	add	r0, r0
    5cea:	11 f4       	brne	.+4      	; 0x5cf0 <__fp_round+0xc>
    5cec:	88 23       	and	r24, r24
    5cee:	52 f0       	brmi	.+20     	; 0x5d04 <__fp_round+0x20>
    5cf0:	bb 0f       	add	r27, r27
    5cf2:	40 f4       	brcc	.+16     	; 0x5d04 <__fp_round+0x20>
    5cf4:	bf 2b       	or	r27, r31
    5cf6:	11 f4       	brne	.+4      	; 0x5cfc <__fp_round+0x18>
    5cf8:	60 ff       	sbrs	r22, 0
    5cfa:	04 c0       	rjmp	.+8      	; 0x5d04 <__fp_round+0x20>
    5cfc:	6f 5f       	subi	r22, 0xFF	; 255
    5cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    5d00:	8f 4f       	sbci	r24, 0xFF	; 255
    5d02:	9f 4f       	sbci	r25, 0xFF	; 255
    5d04:	08 95       	ret

00005d06 <__fp_split3>:
    5d06:	57 fd       	sbrc	r21, 7
    5d08:	90 58       	subi	r25, 0x80	; 128
    5d0a:	44 0f       	add	r20, r20
    5d0c:	55 1f       	adc	r21, r21
    5d0e:	59 f0       	breq	.+22     	; 0x5d26 <__fp_splitA+0x10>
    5d10:	5f 3f       	cpi	r21, 0xFF	; 255
    5d12:	71 f0       	breq	.+28     	; 0x5d30 <__fp_splitA+0x1a>
    5d14:	47 95       	ror	r20

00005d16 <__fp_splitA>:
    5d16:	88 0f       	add	r24, r24
    5d18:	97 fb       	bst	r25, 7
    5d1a:	99 1f       	adc	r25, r25
    5d1c:	61 f0       	breq	.+24     	; 0x5d36 <__fp_splitA+0x20>
    5d1e:	9f 3f       	cpi	r25, 0xFF	; 255
    5d20:	79 f0       	breq	.+30     	; 0x5d40 <__fp_splitA+0x2a>
    5d22:	87 95       	ror	r24
    5d24:	08 95       	ret
    5d26:	12 16       	cp	r1, r18
    5d28:	13 06       	cpc	r1, r19
    5d2a:	14 06       	cpc	r1, r20
    5d2c:	55 1f       	adc	r21, r21
    5d2e:	f2 cf       	rjmp	.-28     	; 0x5d14 <__fp_split3+0xe>
    5d30:	46 95       	lsr	r20
    5d32:	f1 df       	rcall	.-30     	; 0x5d16 <__fp_splitA>
    5d34:	08 c0       	rjmp	.+16     	; 0x5d46 <__fp_splitA+0x30>
    5d36:	16 16       	cp	r1, r22
    5d38:	17 06       	cpc	r1, r23
    5d3a:	18 06       	cpc	r1, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	f1 cf       	rjmp	.-30     	; 0x5d22 <__fp_splitA+0xc>
    5d40:	86 95       	lsr	r24
    5d42:	71 05       	cpc	r23, r1
    5d44:	61 05       	cpc	r22, r1
    5d46:	08 94       	sec
    5d48:	08 95       	ret

00005d4a <__fp_zero>:
    5d4a:	e8 94       	clt

00005d4c <__fp_szero>:
    5d4c:	bb 27       	eor	r27, r27
    5d4e:	66 27       	eor	r22, r22
    5d50:	77 27       	eor	r23, r23
    5d52:	cb 01       	movw	r24, r22
    5d54:	97 f9       	bld	r25, 7
    5d56:	08 95       	ret

00005d58 <__mulsf3>:
    5d58:	0b d0       	rcall	.+22     	; 0x5d70 <__mulsf3x>
    5d5a:	c4 cf       	rjmp	.-120    	; 0x5ce4 <__fp_round>
    5d5c:	b5 df       	rcall	.-150    	; 0x5cc8 <__fp_pscA>
    5d5e:	28 f0       	brcs	.+10     	; 0x5d6a <__mulsf3+0x12>
    5d60:	ba df       	rcall	.-140    	; 0x5cd6 <__fp_pscB>
    5d62:	18 f0       	brcs	.+6      	; 0x5d6a <__mulsf3+0x12>
    5d64:	95 23       	and	r25, r21
    5d66:	09 f0       	breq	.+2      	; 0x5d6a <__mulsf3+0x12>
    5d68:	a6 cf       	rjmp	.-180    	; 0x5cb6 <__fp_inf>
    5d6a:	ab cf       	rjmp	.-170    	; 0x5cc2 <__fp_nan>
    5d6c:	11 24       	eor	r1, r1
    5d6e:	ee cf       	rjmp	.-36     	; 0x5d4c <__fp_szero>

00005d70 <__mulsf3x>:
    5d70:	ca df       	rcall	.-108    	; 0x5d06 <__fp_split3>
    5d72:	a0 f3       	brcs	.-24     	; 0x5d5c <__mulsf3+0x4>

00005d74 <__mulsf3_pse>:
    5d74:	95 9f       	mul	r25, r21
    5d76:	d1 f3       	breq	.-12     	; 0x5d6c <__mulsf3+0x14>
    5d78:	95 0f       	add	r25, r21
    5d7a:	50 e0       	ldi	r21, 0x00	; 0
    5d7c:	55 1f       	adc	r21, r21
    5d7e:	62 9f       	mul	r22, r18
    5d80:	f0 01       	movw	r30, r0
    5d82:	72 9f       	mul	r23, r18
    5d84:	bb 27       	eor	r27, r27
    5d86:	f0 0d       	add	r31, r0
    5d88:	b1 1d       	adc	r27, r1
    5d8a:	63 9f       	mul	r22, r19
    5d8c:	aa 27       	eor	r26, r26
    5d8e:	f0 0d       	add	r31, r0
    5d90:	b1 1d       	adc	r27, r1
    5d92:	aa 1f       	adc	r26, r26
    5d94:	64 9f       	mul	r22, r20
    5d96:	66 27       	eor	r22, r22
    5d98:	b0 0d       	add	r27, r0
    5d9a:	a1 1d       	adc	r26, r1
    5d9c:	66 1f       	adc	r22, r22
    5d9e:	82 9f       	mul	r24, r18
    5da0:	22 27       	eor	r18, r18
    5da2:	b0 0d       	add	r27, r0
    5da4:	a1 1d       	adc	r26, r1
    5da6:	62 1f       	adc	r22, r18
    5da8:	73 9f       	mul	r23, r19
    5daa:	b0 0d       	add	r27, r0
    5dac:	a1 1d       	adc	r26, r1
    5dae:	62 1f       	adc	r22, r18
    5db0:	83 9f       	mul	r24, r19
    5db2:	a0 0d       	add	r26, r0
    5db4:	61 1d       	adc	r22, r1
    5db6:	22 1f       	adc	r18, r18
    5db8:	74 9f       	mul	r23, r20
    5dba:	33 27       	eor	r19, r19
    5dbc:	a0 0d       	add	r26, r0
    5dbe:	61 1d       	adc	r22, r1
    5dc0:	23 1f       	adc	r18, r19
    5dc2:	84 9f       	mul	r24, r20
    5dc4:	60 0d       	add	r22, r0
    5dc6:	21 1d       	adc	r18, r1
    5dc8:	82 2f       	mov	r24, r18
    5dca:	76 2f       	mov	r23, r22
    5dcc:	6a 2f       	mov	r22, r26
    5dce:	11 24       	eor	r1, r1
    5dd0:	9f 57       	subi	r25, 0x7F	; 127
    5dd2:	50 40       	sbci	r21, 0x00	; 0
    5dd4:	8a f0       	brmi	.+34     	; 0x5df8 <__mulsf3_pse+0x84>
    5dd6:	e1 f0       	breq	.+56     	; 0x5e10 <__mulsf3_pse+0x9c>
    5dd8:	88 23       	and	r24, r24
    5dda:	4a f0       	brmi	.+18     	; 0x5dee <__mulsf3_pse+0x7a>
    5ddc:	ee 0f       	add	r30, r30
    5dde:	ff 1f       	adc	r31, r31
    5de0:	bb 1f       	adc	r27, r27
    5de2:	66 1f       	adc	r22, r22
    5de4:	77 1f       	adc	r23, r23
    5de6:	88 1f       	adc	r24, r24
    5de8:	91 50       	subi	r25, 0x01	; 1
    5dea:	50 40       	sbci	r21, 0x00	; 0
    5dec:	a9 f7       	brne	.-22     	; 0x5dd8 <__mulsf3_pse+0x64>
    5dee:	9e 3f       	cpi	r25, 0xFE	; 254
    5df0:	51 05       	cpc	r21, r1
    5df2:	70 f0       	brcs	.+28     	; 0x5e10 <__mulsf3_pse+0x9c>
    5df4:	60 cf       	rjmp	.-320    	; 0x5cb6 <__fp_inf>
    5df6:	aa cf       	rjmp	.-172    	; 0x5d4c <__fp_szero>
    5df8:	5f 3f       	cpi	r21, 0xFF	; 255
    5dfa:	ec f3       	brlt	.-6      	; 0x5df6 <__mulsf3_pse+0x82>
    5dfc:	98 3e       	cpi	r25, 0xE8	; 232
    5dfe:	dc f3       	brlt	.-10     	; 0x5df6 <__mulsf3_pse+0x82>
    5e00:	86 95       	lsr	r24
    5e02:	77 95       	ror	r23
    5e04:	67 95       	ror	r22
    5e06:	b7 95       	ror	r27
    5e08:	f7 95       	ror	r31
    5e0a:	e7 95       	ror	r30
    5e0c:	9f 5f       	subi	r25, 0xFF	; 255
    5e0e:	c1 f7       	brne	.-16     	; 0x5e00 <__mulsf3_pse+0x8c>
    5e10:	fe 2b       	or	r31, r30
    5e12:	88 0f       	add	r24, r24
    5e14:	91 1d       	adc	r25, r1
    5e16:	96 95       	lsr	r25
    5e18:	87 95       	ror	r24
    5e1a:	97 f9       	bld	r25, 7
    5e1c:	08 95       	ret

00005e1e <__udivmodsi4>:
    5e1e:	a1 e2       	ldi	r26, 0x21	; 33
    5e20:	1a 2e       	mov	r1, r26
    5e22:	aa 1b       	sub	r26, r26
    5e24:	bb 1b       	sub	r27, r27
    5e26:	fd 01       	movw	r30, r26
    5e28:	0d c0       	rjmp	.+26     	; 0x5e44 <__udivmodsi4_ep>

00005e2a <__udivmodsi4_loop>:
    5e2a:	aa 1f       	adc	r26, r26
    5e2c:	bb 1f       	adc	r27, r27
    5e2e:	ee 1f       	adc	r30, r30
    5e30:	ff 1f       	adc	r31, r31
    5e32:	a2 17       	cp	r26, r18
    5e34:	b3 07       	cpc	r27, r19
    5e36:	e4 07       	cpc	r30, r20
    5e38:	f5 07       	cpc	r31, r21
    5e3a:	20 f0       	brcs	.+8      	; 0x5e44 <__udivmodsi4_ep>
    5e3c:	a2 1b       	sub	r26, r18
    5e3e:	b3 0b       	sbc	r27, r19
    5e40:	e4 0b       	sbc	r30, r20
    5e42:	f5 0b       	sbc	r31, r21

00005e44 <__udivmodsi4_ep>:
    5e44:	66 1f       	adc	r22, r22
    5e46:	77 1f       	adc	r23, r23
    5e48:	88 1f       	adc	r24, r24
    5e4a:	99 1f       	adc	r25, r25
    5e4c:	1a 94       	dec	r1
    5e4e:	69 f7       	brne	.-38     	; 0x5e2a <__udivmodsi4_loop>
    5e50:	60 95       	com	r22
    5e52:	70 95       	com	r23
    5e54:	80 95       	com	r24
    5e56:	90 95       	com	r25
    5e58:	9b 01       	movw	r18, r22
    5e5a:	ac 01       	movw	r20, r24
    5e5c:	bd 01       	movw	r22, r26
    5e5e:	cf 01       	movw	r24, r30
    5e60:	08 95       	ret

00005e62 <__tablejump2__>:
    5e62:	ee 0f       	add	r30, r30
    5e64:	ff 1f       	adc	r31, r31
    5e66:	88 1f       	adc	r24, r24
    5e68:	8b bf       	out	0x3b, r24	; 59
    5e6a:	07 90       	elpm	r0, Z+
    5e6c:	f6 91       	elpm	r31, Z
    5e6e:	e0 2d       	mov	r30, r0
    5e70:	19 94       	eijmp

00005e72 <calloc>:
    5e72:	0f 93       	push	r16
    5e74:	1f 93       	push	r17
    5e76:	cf 93       	push	r28
    5e78:	df 93       	push	r29
    5e7a:	86 9f       	mul	r24, r22
    5e7c:	80 01       	movw	r16, r0
    5e7e:	87 9f       	mul	r24, r23
    5e80:	10 0d       	add	r17, r0
    5e82:	96 9f       	mul	r25, r22
    5e84:	10 0d       	add	r17, r0
    5e86:	11 24       	eor	r1, r1
    5e88:	c8 01       	movw	r24, r16
    5e8a:	0d d0       	rcall	.+26     	; 0x5ea6 <malloc>
    5e8c:	ec 01       	movw	r28, r24
    5e8e:	00 97       	sbiw	r24, 0x00	; 0
    5e90:	21 f0       	breq	.+8      	; 0x5e9a <calloc+0x28>
    5e92:	a8 01       	movw	r20, r16
    5e94:	60 e0       	ldi	r22, 0x00	; 0
    5e96:	70 e0       	ldi	r23, 0x00	; 0
    5e98:	34 d1       	rcall	.+616    	; 0x6102 <memset>
    5e9a:	ce 01       	movw	r24, r28
    5e9c:	df 91       	pop	r29
    5e9e:	cf 91       	pop	r28
    5ea0:	1f 91       	pop	r17
    5ea2:	0f 91       	pop	r16
    5ea4:	08 95       	ret

00005ea6 <malloc>:
    5ea6:	0f 93       	push	r16
    5ea8:	1f 93       	push	r17
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
    5eae:	82 30       	cpi	r24, 0x02	; 2
    5eb0:	91 05       	cpc	r25, r1
    5eb2:	10 f4       	brcc	.+4      	; 0x5eb8 <malloc+0x12>
    5eb4:	82 e0       	ldi	r24, 0x02	; 2
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <__flp>
    5ebc:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <__flp+0x1>
    5ec0:	20 e0       	ldi	r18, 0x00	; 0
    5ec2:	30 e0       	ldi	r19, 0x00	; 0
    5ec4:	a0 e0       	ldi	r26, 0x00	; 0
    5ec6:	b0 e0       	ldi	r27, 0x00	; 0
    5ec8:	30 97       	sbiw	r30, 0x00	; 0
    5eca:	19 f1       	breq	.+70     	; 0x5f12 <malloc+0x6c>
    5ecc:	40 81       	ld	r20, Z
    5ece:	51 81       	ldd	r21, Z+1	; 0x01
    5ed0:	02 81       	ldd	r16, Z+2	; 0x02
    5ed2:	13 81       	ldd	r17, Z+3	; 0x03
    5ed4:	48 17       	cp	r20, r24
    5ed6:	59 07       	cpc	r21, r25
    5ed8:	c8 f0       	brcs	.+50     	; 0x5f0c <malloc+0x66>
    5eda:	84 17       	cp	r24, r20
    5edc:	95 07       	cpc	r25, r21
    5ede:	69 f4       	brne	.+26     	; 0x5efa <malloc+0x54>
    5ee0:	10 97       	sbiw	r26, 0x00	; 0
    5ee2:	31 f0       	breq	.+12     	; 0x5ef0 <malloc+0x4a>
    5ee4:	12 96       	adiw	r26, 0x02	; 2
    5ee6:	0c 93       	st	X, r16
    5ee8:	12 97       	sbiw	r26, 0x02	; 2
    5eea:	13 96       	adiw	r26, 0x03	; 3
    5eec:	1c 93       	st	X, r17
    5eee:	27 c0       	rjmp	.+78     	; 0x5f3e <malloc+0x98>
    5ef0:	00 93 a5 18 	sts	0x18A5, r16	; 0x8018a5 <__flp>
    5ef4:	10 93 a6 18 	sts	0x18A6, r17	; 0x8018a6 <__flp+0x1>
    5ef8:	22 c0       	rjmp	.+68     	; 0x5f3e <malloc+0x98>
    5efa:	21 15       	cp	r18, r1
    5efc:	31 05       	cpc	r19, r1
    5efe:	19 f0       	breq	.+6      	; 0x5f06 <malloc+0x60>
    5f00:	42 17       	cp	r20, r18
    5f02:	53 07       	cpc	r21, r19
    5f04:	18 f4       	brcc	.+6      	; 0x5f0c <malloc+0x66>
    5f06:	9a 01       	movw	r18, r20
    5f08:	bd 01       	movw	r22, r26
    5f0a:	ef 01       	movw	r28, r30
    5f0c:	df 01       	movw	r26, r30
    5f0e:	f8 01       	movw	r30, r16
    5f10:	db cf       	rjmp	.-74     	; 0x5ec8 <malloc+0x22>
    5f12:	21 15       	cp	r18, r1
    5f14:	31 05       	cpc	r19, r1
    5f16:	f9 f0       	breq	.+62     	; 0x5f56 <malloc+0xb0>
    5f18:	28 1b       	sub	r18, r24
    5f1a:	39 0b       	sbc	r19, r25
    5f1c:	24 30       	cpi	r18, 0x04	; 4
    5f1e:	31 05       	cpc	r19, r1
    5f20:	80 f4       	brcc	.+32     	; 0x5f42 <malloc+0x9c>
    5f22:	8a 81       	ldd	r24, Y+2	; 0x02
    5f24:	9b 81       	ldd	r25, Y+3	; 0x03
    5f26:	61 15       	cp	r22, r1
    5f28:	71 05       	cpc	r23, r1
    5f2a:	21 f0       	breq	.+8      	; 0x5f34 <malloc+0x8e>
    5f2c:	fb 01       	movw	r30, r22
    5f2e:	93 83       	std	Z+3, r25	; 0x03
    5f30:	82 83       	std	Z+2, r24	; 0x02
    5f32:	04 c0       	rjmp	.+8      	; 0x5f3c <malloc+0x96>
    5f34:	90 93 a6 18 	sts	0x18A6, r25	; 0x8018a6 <__flp+0x1>
    5f38:	80 93 a5 18 	sts	0x18A5, r24	; 0x8018a5 <__flp>
    5f3c:	fe 01       	movw	r30, r28
    5f3e:	32 96       	adiw	r30, 0x02	; 2
    5f40:	44 c0       	rjmp	.+136    	; 0x5fca <malloc+0x124>
    5f42:	fe 01       	movw	r30, r28
    5f44:	e2 0f       	add	r30, r18
    5f46:	f3 1f       	adc	r31, r19
    5f48:	81 93       	st	Z+, r24
    5f4a:	91 93       	st	Z+, r25
    5f4c:	22 50       	subi	r18, 0x02	; 2
    5f4e:	31 09       	sbc	r19, r1
    5f50:	39 83       	std	Y+1, r19	; 0x01
    5f52:	28 83       	st	Y, r18
    5f54:	3a c0       	rjmp	.+116    	; 0x5fca <malloc+0x124>
    5f56:	20 91 a3 18 	lds	r18, 0x18A3	; 0x8018a3 <__brkval>
    5f5a:	30 91 a4 18 	lds	r19, 0x18A4	; 0x8018a4 <__brkval+0x1>
    5f5e:	23 2b       	or	r18, r19
    5f60:	41 f4       	brne	.+16     	; 0x5f72 <malloc+0xcc>
    5f62:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5f66:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5f6a:	30 93 a4 18 	sts	0x18A4, r19	; 0x8018a4 <__brkval+0x1>
    5f6e:	20 93 a3 18 	sts	0x18A3, r18	; 0x8018a3 <__brkval>
    5f72:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5f76:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5f7a:	21 15       	cp	r18, r1
    5f7c:	31 05       	cpc	r19, r1
    5f7e:	41 f4       	brne	.+16     	; 0x5f90 <malloc+0xea>
    5f80:	2d b7       	in	r18, 0x3d	; 61
    5f82:	3e b7       	in	r19, 0x3e	; 62
    5f84:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5f88:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5f8c:	24 1b       	sub	r18, r20
    5f8e:	35 0b       	sbc	r19, r21
    5f90:	e0 91 a3 18 	lds	r30, 0x18A3	; 0x8018a3 <__brkval>
    5f94:	f0 91 a4 18 	lds	r31, 0x18A4	; 0x8018a4 <__brkval+0x1>
    5f98:	e2 17       	cp	r30, r18
    5f9a:	f3 07       	cpc	r31, r19
    5f9c:	a0 f4       	brcc	.+40     	; 0x5fc6 <malloc+0x120>
    5f9e:	2e 1b       	sub	r18, r30
    5fa0:	3f 0b       	sbc	r19, r31
    5fa2:	28 17       	cp	r18, r24
    5fa4:	39 07       	cpc	r19, r25
    5fa6:	78 f0       	brcs	.+30     	; 0x5fc6 <malloc+0x120>
    5fa8:	ac 01       	movw	r20, r24
    5faa:	4e 5f       	subi	r20, 0xFE	; 254
    5fac:	5f 4f       	sbci	r21, 0xFF	; 255
    5fae:	24 17       	cp	r18, r20
    5fb0:	35 07       	cpc	r19, r21
    5fb2:	48 f0       	brcs	.+18     	; 0x5fc6 <malloc+0x120>
    5fb4:	4e 0f       	add	r20, r30
    5fb6:	5f 1f       	adc	r21, r31
    5fb8:	50 93 a4 18 	sts	0x18A4, r21	; 0x8018a4 <__brkval+0x1>
    5fbc:	40 93 a3 18 	sts	0x18A3, r20	; 0x8018a3 <__brkval>
    5fc0:	81 93       	st	Z+, r24
    5fc2:	91 93       	st	Z+, r25
    5fc4:	02 c0       	rjmp	.+4      	; 0x5fca <malloc+0x124>
    5fc6:	e0 e0       	ldi	r30, 0x00	; 0
    5fc8:	f0 e0       	ldi	r31, 0x00	; 0
    5fca:	cf 01       	movw	r24, r30
    5fcc:	df 91       	pop	r29
    5fce:	cf 91       	pop	r28
    5fd0:	1f 91       	pop	r17
    5fd2:	0f 91       	pop	r16
    5fd4:	08 95       	ret

00005fd6 <free>:
    5fd6:	cf 93       	push	r28
    5fd8:	df 93       	push	r29
    5fda:	00 97       	sbiw	r24, 0x00	; 0
    5fdc:	09 f4       	brne	.+2      	; 0x5fe0 <free+0xa>
    5fde:	81 c0       	rjmp	.+258    	; 0x60e2 <free+0x10c>
    5fe0:	fc 01       	movw	r30, r24
    5fe2:	32 97       	sbiw	r30, 0x02	; 2
    5fe4:	13 82       	std	Z+3, r1	; 0x03
    5fe6:	12 82       	std	Z+2, r1	; 0x02
    5fe8:	a0 91 a5 18 	lds	r26, 0x18A5	; 0x8018a5 <__flp>
    5fec:	b0 91 a6 18 	lds	r27, 0x18A6	; 0x8018a6 <__flp+0x1>
    5ff0:	10 97       	sbiw	r26, 0x00	; 0
    5ff2:	81 f4       	brne	.+32     	; 0x6014 <free+0x3e>
    5ff4:	20 81       	ld	r18, Z
    5ff6:	31 81       	ldd	r19, Z+1	; 0x01
    5ff8:	82 0f       	add	r24, r18
    5ffa:	93 1f       	adc	r25, r19
    5ffc:	20 91 a3 18 	lds	r18, 0x18A3	; 0x8018a3 <__brkval>
    6000:	30 91 a4 18 	lds	r19, 0x18A4	; 0x8018a4 <__brkval+0x1>
    6004:	28 17       	cp	r18, r24
    6006:	39 07       	cpc	r19, r25
    6008:	51 f5       	brne	.+84     	; 0x605e <free+0x88>
    600a:	f0 93 a4 18 	sts	0x18A4, r31	; 0x8018a4 <__brkval+0x1>
    600e:	e0 93 a3 18 	sts	0x18A3, r30	; 0x8018a3 <__brkval>
    6012:	67 c0       	rjmp	.+206    	; 0x60e2 <free+0x10c>
    6014:	ed 01       	movw	r28, r26
    6016:	20 e0       	ldi	r18, 0x00	; 0
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	ce 17       	cp	r28, r30
    601c:	df 07       	cpc	r29, r31
    601e:	40 f4       	brcc	.+16     	; 0x6030 <free+0x5a>
    6020:	4a 81       	ldd	r20, Y+2	; 0x02
    6022:	5b 81       	ldd	r21, Y+3	; 0x03
    6024:	9e 01       	movw	r18, r28
    6026:	41 15       	cp	r20, r1
    6028:	51 05       	cpc	r21, r1
    602a:	f1 f0       	breq	.+60     	; 0x6068 <free+0x92>
    602c:	ea 01       	movw	r28, r20
    602e:	f5 cf       	rjmp	.-22     	; 0x601a <free+0x44>
    6030:	d3 83       	std	Z+3, r29	; 0x03
    6032:	c2 83       	std	Z+2, r28	; 0x02
    6034:	40 81       	ld	r20, Z
    6036:	51 81       	ldd	r21, Z+1	; 0x01
    6038:	84 0f       	add	r24, r20
    603a:	95 1f       	adc	r25, r21
    603c:	c8 17       	cp	r28, r24
    603e:	d9 07       	cpc	r29, r25
    6040:	59 f4       	brne	.+22     	; 0x6058 <free+0x82>
    6042:	88 81       	ld	r24, Y
    6044:	99 81       	ldd	r25, Y+1	; 0x01
    6046:	84 0f       	add	r24, r20
    6048:	95 1f       	adc	r25, r21
    604a:	02 96       	adiw	r24, 0x02	; 2
    604c:	91 83       	std	Z+1, r25	; 0x01
    604e:	80 83       	st	Z, r24
    6050:	8a 81       	ldd	r24, Y+2	; 0x02
    6052:	9b 81       	ldd	r25, Y+3	; 0x03
    6054:	93 83       	std	Z+3, r25	; 0x03
    6056:	82 83       	std	Z+2, r24	; 0x02
    6058:	21 15       	cp	r18, r1
    605a:	31 05       	cpc	r19, r1
    605c:	29 f4       	brne	.+10     	; 0x6068 <free+0x92>
    605e:	f0 93 a6 18 	sts	0x18A6, r31	; 0x8018a6 <__flp+0x1>
    6062:	e0 93 a5 18 	sts	0x18A5, r30	; 0x8018a5 <__flp>
    6066:	3d c0       	rjmp	.+122    	; 0x60e2 <free+0x10c>
    6068:	e9 01       	movw	r28, r18
    606a:	fb 83       	std	Y+3, r31	; 0x03
    606c:	ea 83       	std	Y+2, r30	; 0x02
    606e:	49 91       	ld	r20, Y+
    6070:	59 91       	ld	r21, Y+
    6072:	c4 0f       	add	r28, r20
    6074:	d5 1f       	adc	r29, r21
    6076:	ec 17       	cp	r30, r28
    6078:	fd 07       	cpc	r31, r29
    607a:	61 f4       	brne	.+24     	; 0x6094 <free+0xbe>
    607c:	80 81       	ld	r24, Z
    607e:	91 81       	ldd	r25, Z+1	; 0x01
    6080:	84 0f       	add	r24, r20
    6082:	95 1f       	adc	r25, r21
    6084:	02 96       	adiw	r24, 0x02	; 2
    6086:	e9 01       	movw	r28, r18
    6088:	99 83       	std	Y+1, r25	; 0x01
    608a:	88 83       	st	Y, r24
    608c:	82 81       	ldd	r24, Z+2	; 0x02
    608e:	93 81       	ldd	r25, Z+3	; 0x03
    6090:	9b 83       	std	Y+3, r25	; 0x03
    6092:	8a 83       	std	Y+2, r24	; 0x02
    6094:	e0 e0       	ldi	r30, 0x00	; 0
    6096:	f0 e0       	ldi	r31, 0x00	; 0
    6098:	12 96       	adiw	r26, 0x02	; 2
    609a:	8d 91       	ld	r24, X+
    609c:	9c 91       	ld	r25, X
    609e:	13 97       	sbiw	r26, 0x03	; 3
    60a0:	00 97       	sbiw	r24, 0x00	; 0
    60a2:	19 f0       	breq	.+6      	; 0x60aa <free+0xd4>
    60a4:	fd 01       	movw	r30, r26
    60a6:	dc 01       	movw	r26, r24
    60a8:	f7 cf       	rjmp	.-18     	; 0x6098 <free+0xc2>
    60aa:	8d 91       	ld	r24, X+
    60ac:	9c 91       	ld	r25, X
    60ae:	11 97       	sbiw	r26, 0x01	; 1
    60b0:	9d 01       	movw	r18, r26
    60b2:	2e 5f       	subi	r18, 0xFE	; 254
    60b4:	3f 4f       	sbci	r19, 0xFF	; 255
    60b6:	82 0f       	add	r24, r18
    60b8:	93 1f       	adc	r25, r19
    60ba:	20 91 a3 18 	lds	r18, 0x18A3	; 0x8018a3 <__brkval>
    60be:	30 91 a4 18 	lds	r19, 0x18A4	; 0x8018a4 <__brkval+0x1>
    60c2:	28 17       	cp	r18, r24
    60c4:	39 07       	cpc	r19, r25
    60c6:	69 f4       	brne	.+26     	; 0x60e2 <free+0x10c>
    60c8:	30 97       	sbiw	r30, 0x00	; 0
    60ca:	29 f4       	brne	.+10     	; 0x60d6 <free+0x100>
    60cc:	10 92 a6 18 	sts	0x18A6, r1	; 0x8018a6 <__flp+0x1>
    60d0:	10 92 a5 18 	sts	0x18A5, r1	; 0x8018a5 <__flp>
    60d4:	02 c0       	rjmp	.+4      	; 0x60da <free+0x104>
    60d6:	13 82       	std	Z+3, r1	; 0x03
    60d8:	12 82       	std	Z+2, r1	; 0x02
    60da:	b0 93 a4 18 	sts	0x18A4, r27	; 0x8018a4 <__brkval+0x1>
    60de:	a0 93 a3 18 	sts	0x18A3, r26	; 0x8018a3 <__brkval>
    60e2:	df 91       	pop	r29
    60e4:	cf 91       	pop	r28
    60e6:	08 95       	ret

000060e8 <abort>:
    60e8:	81 e0       	ldi	r24, 0x01	; 1
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	f8 94       	cli
    60ee:	7d c3       	rjmp	.+1786   	; 0x67ea <_exit>

000060f0 <memcpy>:
    60f0:	fb 01       	movw	r30, r22
    60f2:	dc 01       	movw	r26, r24
    60f4:	02 c0       	rjmp	.+4      	; 0x60fa <memcpy+0xa>
    60f6:	01 90       	ld	r0, Z+
    60f8:	0d 92       	st	X+, r0
    60fa:	41 50       	subi	r20, 0x01	; 1
    60fc:	50 40       	sbci	r21, 0x00	; 0
    60fe:	d8 f7       	brcc	.-10     	; 0x60f6 <memcpy+0x6>
    6100:	08 95       	ret

00006102 <memset>:
    6102:	dc 01       	movw	r26, r24
    6104:	01 c0       	rjmp	.+2      	; 0x6108 <memset+0x6>
    6106:	6d 93       	st	X+, r22
    6108:	41 50       	subi	r20, 0x01	; 1
    610a:	50 40       	sbci	r21, 0x00	; 0
    610c:	e0 f7       	brcc	.-8      	; 0x6106 <memset+0x4>
    610e:	08 95       	ret

00006110 <strcasestr>:
    6110:	fb 01       	movw	r30, r22
    6112:	51 91       	ld	r21, Z+
    6114:	55 23       	and	r21, r21
    6116:	b1 f0       	breq	.+44     	; 0x6144 <strcasestr+0x34>
    6118:	bf 01       	movw	r22, r30
    611a:	dc 01       	movw	r26, r24
    611c:	05 2e       	mov	r0, r21
    611e:	4d 91       	ld	r20, X+
    6120:	44 23       	and	r20, r20
    6122:	69 f0       	breq	.+26     	; 0x613e <strcasestr+0x2e>
    6124:	10 d0       	rcall	.+32     	; 0x6146 <strcasestr+0x36>
    6126:	d9 f7       	brne	.-10     	; 0x611e <strcasestr+0xe>
    6128:	cd 01       	movw	r24, r26
    612a:	01 90       	ld	r0, Z+
    612c:	00 20       	and	r0, r0
    612e:	49 f0       	breq	.+18     	; 0x6142 <strcasestr+0x32>
    6130:	4d 91       	ld	r20, X+
    6132:	41 11       	cpse	r20, r1
    6134:	08 d0       	rcall	.+16     	; 0x6146 <strcasestr+0x36>
    6136:	c9 f3       	breq	.-14     	; 0x612a <strcasestr+0x1a>
    6138:	fb 01       	movw	r30, r22
    613a:	41 11       	cpse	r20, r1
    613c:	ee cf       	rjmp	.-36     	; 0x611a <strcasestr+0xa>
    613e:	81 e0       	ldi	r24, 0x01	; 1
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	01 97       	sbiw	r24, 0x01	; 1
    6144:	08 95       	ret
    6146:	40 25       	eor	r20, r0
    6148:	39 f0       	breq	.+14     	; 0x6158 <strcasestr+0x48>
    614a:	40 32       	cpi	r20, 0x20	; 32
    614c:	29 f4       	brne	.+10     	; 0x6158 <strcasestr+0x48>
    614e:	40 29       	or	r20, r0
    6150:	4b 57       	subi	r20, 0x7B	; 123
    6152:	46 5e       	subi	r20, 0xE6	; 230
    6154:	08 f0       	brcs	.+2      	; 0x6158 <strcasestr+0x48>
    6156:	18 94       	sez
    6158:	08 95       	ret

0000615a <strcat>:
    615a:	fb 01       	movw	r30, r22
    615c:	dc 01       	movw	r26, r24
    615e:	0d 90       	ld	r0, X+
    6160:	00 20       	and	r0, r0
    6162:	e9 f7       	brne	.-6      	; 0x615e <strcat+0x4>
    6164:	11 97       	sbiw	r26, 0x01	; 1
    6166:	01 90       	ld	r0, Z+
    6168:	0d 92       	st	X+, r0
    616a:	00 20       	and	r0, r0
    616c:	e1 f7       	brne	.-8      	; 0x6166 <strcat+0xc>
    616e:	08 95       	ret

00006170 <strcpy>:
    6170:	fb 01       	movw	r30, r22
    6172:	dc 01       	movw	r26, r24
    6174:	01 90       	ld	r0, Z+
    6176:	0d 92       	st	X+, r0
    6178:	00 20       	and	r0, r0
    617a:	e1 f7       	brne	.-8      	; 0x6174 <strcpy+0x4>
    617c:	08 95       	ret

0000617e <strncasecmp>:
    617e:	fb 01       	movw	r30, r22
    6180:	dc 01       	movw	r26, r24
    6182:	41 50       	subi	r20, 0x01	; 1
    6184:	50 40       	sbci	r21, 0x00	; 0
    6186:	88 f0       	brcs	.+34     	; 0x61aa <strncasecmp+0x2c>
    6188:	8d 91       	ld	r24, X+
    618a:	81 34       	cpi	r24, 0x41	; 65
    618c:	1c f0       	brlt	.+6      	; 0x6194 <strncasecmp+0x16>
    618e:	8b 35       	cpi	r24, 0x5B	; 91
    6190:	0c f4       	brge	.+2      	; 0x6194 <strncasecmp+0x16>
    6192:	80 5e       	subi	r24, 0xE0	; 224
    6194:	61 91       	ld	r22, Z+
    6196:	61 34       	cpi	r22, 0x41	; 65
    6198:	1c f0       	brlt	.+6      	; 0x61a0 <strncasecmp+0x22>
    619a:	6b 35       	cpi	r22, 0x5B	; 91
    619c:	0c f4       	brge	.+2      	; 0x61a0 <strncasecmp+0x22>
    619e:	60 5e       	subi	r22, 0xE0	; 224
    61a0:	86 1b       	sub	r24, r22
    61a2:	61 11       	cpse	r22, r1
    61a4:	71 f3       	breq	.-36     	; 0x6182 <strncasecmp+0x4>
    61a6:	99 0b       	sbc	r25, r25
    61a8:	08 95       	ret
    61aa:	88 1b       	sub	r24, r24
    61ac:	fc cf       	rjmp	.-8      	; 0x61a6 <strncasecmp+0x28>

000061ae <printf>:
    61ae:	cf 93       	push	r28
    61b0:	df 93       	push	r29
    61b2:	cd b7       	in	r28, 0x3d	; 61
    61b4:	de b7       	in	r29, 0x3e	; 62
    61b6:	ae 01       	movw	r20, r28
    61b8:	4a 5f       	subi	r20, 0xFA	; 250
    61ba:	5f 4f       	sbci	r21, 0xFF	; 255
    61bc:	fa 01       	movw	r30, r20
    61be:	61 91       	ld	r22, Z+
    61c0:	71 91       	ld	r23, Z+
    61c2:	af 01       	movw	r20, r30
    61c4:	80 91 a9 18 	lds	r24, 0x18A9	; 0x8018a9 <__iob+0x2>
    61c8:	90 91 aa 18 	lds	r25, 0x18AA	; 0x8018aa <__iob+0x3>
    61cc:	61 d0       	rcall	.+194    	; 0x6290 <vfprintf>
    61ce:	df 91       	pop	r29
    61d0:	cf 91       	pop	r28
    61d2:	08 95       	ret

000061d4 <puts>:
    61d4:	0f 93       	push	r16
    61d6:	1f 93       	push	r17
    61d8:	cf 93       	push	r28
    61da:	df 93       	push	r29
    61dc:	e0 91 a9 18 	lds	r30, 0x18A9	; 0x8018a9 <__iob+0x2>
    61e0:	f0 91 aa 18 	lds	r31, 0x18AA	; 0x8018aa <__iob+0x3>
    61e4:	23 81       	ldd	r18, Z+3	; 0x03
    61e6:	21 ff       	sbrs	r18, 1
    61e8:	1b c0       	rjmp	.+54     	; 0x6220 <puts+0x4c>
    61ea:	8c 01       	movw	r16, r24
    61ec:	d0 e0       	ldi	r29, 0x00	; 0
    61ee:	c0 e0       	ldi	r28, 0x00	; 0
    61f0:	f8 01       	movw	r30, r16
    61f2:	81 91       	ld	r24, Z+
    61f4:	8f 01       	movw	r16, r30
    61f6:	60 91 a9 18 	lds	r22, 0x18A9	; 0x8018a9 <__iob+0x2>
    61fa:	70 91 aa 18 	lds	r23, 0x18AA	; 0x8018aa <__iob+0x3>
    61fe:	db 01       	movw	r26, r22
    6200:	18 96       	adiw	r26, 0x08	; 8
    6202:	ed 91       	ld	r30, X+
    6204:	fc 91       	ld	r31, X
    6206:	19 97       	sbiw	r26, 0x09	; 9
    6208:	88 23       	and	r24, r24
    620a:	31 f0       	breq	.+12     	; 0x6218 <puts+0x44>
    620c:	19 95       	eicall
    620e:	89 2b       	or	r24, r25
    6210:	79 f3       	breq	.-34     	; 0x61f0 <puts+0x1c>
    6212:	df ef       	ldi	r29, 0xFF	; 255
    6214:	cf ef       	ldi	r28, 0xFF	; 255
    6216:	ec cf       	rjmp	.-40     	; 0x61f0 <puts+0x1c>
    6218:	8a e0       	ldi	r24, 0x0A	; 10
    621a:	19 95       	eicall
    621c:	89 2b       	or	r24, r25
    621e:	19 f0       	breq	.+6      	; 0x6226 <puts+0x52>
    6220:	8f ef       	ldi	r24, 0xFF	; 255
    6222:	9f ef       	ldi	r25, 0xFF	; 255
    6224:	02 c0       	rjmp	.+4      	; 0x622a <puts+0x56>
    6226:	8d 2f       	mov	r24, r29
    6228:	9c 2f       	mov	r25, r28
    622a:	df 91       	pop	r29
    622c:	cf 91       	pop	r28
    622e:	1f 91       	pop	r17
    6230:	0f 91       	pop	r16
    6232:	08 95       	ret

00006234 <sprintf>:
    6234:	0f 93       	push	r16
    6236:	1f 93       	push	r17
    6238:	cf 93       	push	r28
    623a:	df 93       	push	r29
    623c:	cd b7       	in	r28, 0x3d	; 61
    623e:	de b7       	in	r29, 0x3e	; 62
    6240:	2e 97       	sbiw	r28, 0x0e	; 14
    6242:	0f b6       	in	r0, 0x3f	; 63
    6244:	f8 94       	cli
    6246:	de bf       	out	0x3e, r29	; 62
    6248:	0f be       	out	0x3f, r0	; 63
    624a:	cd bf       	out	0x3d, r28	; 61
    624c:	0e 89       	ldd	r16, Y+22	; 0x16
    624e:	1f 89       	ldd	r17, Y+23	; 0x17
    6250:	86 e0       	ldi	r24, 0x06	; 6
    6252:	8c 83       	std	Y+4, r24	; 0x04
    6254:	1a 83       	std	Y+2, r17	; 0x02
    6256:	09 83       	std	Y+1, r16	; 0x01
    6258:	8f ef       	ldi	r24, 0xFF	; 255
    625a:	9f e7       	ldi	r25, 0x7F	; 127
    625c:	9e 83       	std	Y+6, r25	; 0x06
    625e:	8d 83       	std	Y+5, r24	; 0x05
    6260:	ae 01       	movw	r20, r28
    6262:	46 5e       	subi	r20, 0xE6	; 230
    6264:	5f 4f       	sbci	r21, 0xFF	; 255
    6266:	68 8d       	ldd	r22, Y+24	; 0x18
    6268:	79 8d       	ldd	r23, Y+25	; 0x19
    626a:	ce 01       	movw	r24, r28
    626c:	01 96       	adiw	r24, 0x01	; 1
    626e:	10 d0       	rcall	.+32     	; 0x6290 <vfprintf>
    6270:	ef 81       	ldd	r30, Y+7	; 0x07
    6272:	f8 85       	ldd	r31, Y+8	; 0x08
    6274:	e0 0f       	add	r30, r16
    6276:	f1 1f       	adc	r31, r17
    6278:	10 82       	st	Z, r1
    627a:	2e 96       	adiw	r28, 0x0e	; 14
    627c:	0f b6       	in	r0, 0x3f	; 63
    627e:	f8 94       	cli
    6280:	de bf       	out	0x3e, r29	; 62
    6282:	0f be       	out	0x3f, r0	; 63
    6284:	cd bf       	out	0x3d, r28	; 61
    6286:	df 91       	pop	r29
    6288:	cf 91       	pop	r28
    628a:	1f 91       	pop	r17
    628c:	0f 91       	pop	r16
    628e:	08 95       	ret

00006290 <vfprintf>:
    6290:	2f 92       	push	r2
    6292:	3f 92       	push	r3
    6294:	4f 92       	push	r4
    6296:	5f 92       	push	r5
    6298:	6f 92       	push	r6
    629a:	7f 92       	push	r7
    629c:	8f 92       	push	r8
    629e:	9f 92       	push	r9
    62a0:	af 92       	push	r10
    62a2:	bf 92       	push	r11
    62a4:	cf 92       	push	r12
    62a6:	df 92       	push	r13
    62a8:	ef 92       	push	r14
    62aa:	ff 92       	push	r15
    62ac:	0f 93       	push	r16
    62ae:	1f 93       	push	r17
    62b0:	cf 93       	push	r28
    62b2:	df 93       	push	r29
    62b4:	cd b7       	in	r28, 0x3d	; 61
    62b6:	de b7       	in	r29, 0x3e	; 62
    62b8:	2b 97       	sbiw	r28, 0x0b	; 11
    62ba:	0f b6       	in	r0, 0x3f	; 63
    62bc:	f8 94       	cli
    62be:	de bf       	out	0x3e, r29	; 62
    62c0:	0f be       	out	0x3f, r0	; 63
    62c2:	cd bf       	out	0x3d, r28	; 61
    62c4:	6c 01       	movw	r12, r24
    62c6:	7b 01       	movw	r14, r22
    62c8:	8a 01       	movw	r16, r20
    62ca:	fc 01       	movw	r30, r24
    62cc:	17 82       	std	Z+7, r1	; 0x07
    62ce:	16 82       	std	Z+6, r1	; 0x06
    62d0:	83 81       	ldd	r24, Z+3	; 0x03
    62d2:	81 ff       	sbrs	r24, 1
    62d4:	bf c1       	rjmp	.+894    	; 0x6654 <vfprintf+0x3c4>
    62d6:	ce 01       	movw	r24, r28
    62d8:	01 96       	adiw	r24, 0x01	; 1
    62da:	3c 01       	movw	r6, r24
    62dc:	f6 01       	movw	r30, r12
    62de:	93 81       	ldd	r25, Z+3	; 0x03
    62e0:	f7 01       	movw	r30, r14
    62e2:	93 fd       	sbrc	r25, 3
    62e4:	85 91       	lpm	r24, Z+
    62e6:	93 ff       	sbrs	r25, 3
    62e8:	81 91       	ld	r24, Z+
    62ea:	7f 01       	movw	r14, r30
    62ec:	88 23       	and	r24, r24
    62ee:	09 f4       	brne	.+2      	; 0x62f2 <vfprintf+0x62>
    62f0:	ad c1       	rjmp	.+858    	; 0x664c <vfprintf+0x3bc>
    62f2:	85 32       	cpi	r24, 0x25	; 37
    62f4:	39 f4       	brne	.+14     	; 0x6304 <vfprintf+0x74>
    62f6:	93 fd       	sbrc	r25, 3
    62f8:	85 91       	lpm	r24, Z+
    62fa:	93 ff       	sbrs	r25, 3
    62fc:	81 91       	ld	r24, Z+
    62fe:	7f 01       	movw	r14, r30
    6300:	85 32       	cpi	r24, 0x25	; 37
    6302:	21 f4       	brne	.+8      	; 0x630c <vfprintf+0x7c>
    6304:	b6 01       	movw	r22, r12
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	d6 d1       	rcall	.+940    	; 0x66b6 <fputc>
    630a:	e8 cf       	rjmp	.-48     	; 0x62dc <vfprintf+0x4c>
    630c:	91 2c       	mov	r9, r1
    630e:	21 2c       	mov	r2, r1
    6310:	31 2c       	mov	r3, r1
    6312:	ff e1       	ldi	r31, 0x1F	; 31
    6314:	f3 15       	cp	r31, r3
    6316:	d8 f0       	brcs	.+54     	; 0x634e <vfprintf+0xbe>
    6318:	8b 32       	cpi	r24, 0x2B	; 43
    631a:	79 f0       	breq	.+30     	; 0x633a <vfprintf+0xaa>
    631c:	38 f4       	brcc	.+14     	; 0x632c <vfprintf+0x9c>
    631e:	80 32       	cpi	r24, 0x20	; 32
    6320:	79 f0       	breq	.+30     	; 0x6340 <vfprintf+0xb0>
    6322:	83 32       	cpi	r24, 0x23	; 35
    6324:	a1 f4       	brne	.+40     	; 0x634e <vfprintf+0xbe>
    6326:	23 2d       	mov	r18, r3
    6328:	20 61       	ori	r18, 0x10	; 16
    632a:	1d c0       	rjmp	.+58     	; 0x6366 <vfprintf+0xd6>
    632c:	8d 32       	cpi	r24, 0x2D	; 45
    632e:	61 f0       	breq	.+24     	; 0x6348 <vfprintf+0xb8>
    6330:	80 33       	cpi	r24, 0x30	; 48
    6332:	69 f4       	brne	.+26     	; 0x634e <vfprintf+0xbe>
    6334:	23 2d       	mov	r18, r3
    6336:	21 60       	ori	r18, 0x01	; 1
    6338:	16 c0       	rjmp	.+44     	; 0x6366 <vfprintf+0xd6>
    633a:	83 2d       	mov	r24, r3
    633c:	82 60       	ori	r24, 0x02	; 2
    633e:	38 2e       	mov	r3, r24
    6340:	e3 2d       	mov	r30, r3
    6342:	e4 60       	ori	r30, 0x04	; 4
    6344:	3e 2e       	mov	r3, r30
    6346:	2a c0       	rjmp	.+84     	; 0x639c <vfprintf+0x10c>
    6348:	f3 2d       	mov	r31, r3
    634a:	f8 60       	ori	r31, 0x08	; 8
    634c:	1d c0       	rjmp	.+58     	; 0x6388 <vfprintf+0xf8>
    634e:	37 fc       	sbrc	r3, 7
    6350:	2d c0       	rjmp	.+90     	; 0x63ac <vfprintf+0x11c>
    6352:	20 ed       	ldi	r18, 0xD0	; 208
    6354:	28 0f       	add	r18, r24
    6356:	2a 30       	cpi	r18, 0x0A	; 10
    6358:	40 f0       	brcs	.+16     	; 0x636a <vfprintf+0xda>
    635a:	8e 32       	cpi	r24, 0x2E	; 46
    635c:	b9 f4       	brne	.+46     	; 0x638c <vfprintf+0xfc>
    635e:	36 fc       	sbrc	r3, 6
    6360:	75 c1       	rjmp	.+746    	; 0x664c <vfprintf+0x3bc>
    6362:	23 2d       	mov	r18, r3
    6364:	20 64       	ori	r18, 0x40	; 64
    6366:	32 2e       	mov	r3, r18
    6368:	19 c0       	rjmp	.+50     	; 0x639c <vfprintf+0x10c>
    636a:	36 fe       	sbrs	r3, 6
    636c:	06 c0       	rjmp	.+12     	; 0x637a <vfprintf+0xea>
    636e:	8a e0       	ldi	r24, 0x0A	; 10
    6370:	98 9e       	mul	r9, r24
    6372:	20 0d       	add	r18, r0
    6374:	11 24       	eor	r1, r1
    6376:	92 2e       	mov	r9, r18
    6378:	11 c0       	rjmp	.+34     	; 0x639c <vfprintf+0x10c>
    637a:	ea e0       	ldi	r30, 0x0A	; 10
    637c:	2e 9e       	mul	r2, r30
    637e:	20 0d       	add	r18, r0
    6380:	11 24       	eor	r1, r1
    6382:	22 2e       	mov	r2, r18
    6384:	f3 2d       	mov	r31, r3
    6386:	f0 62       	ori	r31, 0x20	; 32
    6388:	3f 2e       	mov	r3, r31
    638a:	08 c0       	rjmp	.+16     	; 0x639c <vfprintf+0x10c>
    638c:	8c 36       	cpi	r24, 0x6C	; 108
    638e:	21 f4       	brne	.+8      	; 0x6398 <vfprintf+0x108>
    6390:	83 2d       	mov	r24, r3
    6392:	80 68       	ori	r24, 0x80	; 128
    6394:	38 2e       	mov	r3, r24
    6396:	02 c0       	rjmp	.+4      	; 0x639c <vfprintf+0x10c>
    6398:	88 36       	cpi	r24, 0x68	; 104
    639a:	41 f4       	brne	.+16     	; 0x63ac <vfprintf+0x11c>
    639c:	f7 01       	movw	r30, r14
    639e:	93 fd       	sbrc	r25, 3
    63a0:	85 91       	lpm	r24, Z+
    63a2:	93 ff       	sbrs	r25, 3
    63a4:	81 91       	ld	r24, Z+
    63a6:	7f 01       	movw	r14, r30
    63a8:	81 11       	cpse	r24, r1
    63aa:	b3 cf       	rjmp	.-154    	; 0x6312 <vfprintf+0x82>
    63ac:	98 2f       	mov	r25, r24
    63ae:	9f 7d       	andi	r25, 0xDF	; 223
    63b0:	95 54       	subi	r25, 0x45	; 69
    63b2:	93 30       	cpi	r25, 0x03	; 3
    63b4:	28 f4       	brcc	.+10     	; 0x63c0 <vfprintf+0x130>
    63b6:	0c 5f       	subi	r16, 0xFC	; 252
    63b8:	1f 4f       	sbci	r17, 0xFF	; 255
    63ba:	9f e3       	ldi	r25, 0x3F	; 63
    63bc:	99 83       	std	Y+1, r25	; 0x01
    63be:	0d c0       	rjmp	.+26     	; 0x63da <vfprintf+0x14a>
    63c0:	83 36       	cpi	r24, 0x63	; 99
    63c2:	31 f0       	breq	.+12     	; 0x63d0 <vfprintf+0x140>
    63c4:	83 37       	cpi	r24, 0x73	; 115
    63c6:	71 f0       	breq	.+28     	; 0x63e4 <vfprintf+0x154>
    63c8:	83 35       	cpi	r24, 0x53	; 83
    63ca:	09 f0       	breq	.+2      	; 0x63ce <vfprintf+0x13e>
    63cc:	55 c0       	rjmp	.+170    	; 0x6478 <vfprintf+0x1e8>
    63ce:	20 c0       	rjmp	.+64     	; 0x6410 <vfprintf+0x180>
    63d0:	f8 01       	movw	r30, r16
    63d2:	80 81       	ld	r24, Z
    63d4:	89 83       	std	Y+1, r24	; 0x01
    63d6:	0e 5f       	subi	r16, 0xFE	; 254
    63d8:	1f 4f       	sbci	r17, 0xFF	; 255
    63da:	88 24       	eor	r8, r8
    63dc:	83 94       	inc	r8
    63de:	91 2c       	mov	r9, r1
    63e0:	53 01       	movw	r10, r6
    63e2:	12 c0       	rjmp	.+36     	; 0x6408 <vfprintf+0x178>
    63e4:	28 01       	movw	r4, r16
    63e6:	f2 e0       	ldi	r31, 0x02	; 2
    63e8:	4f 0e       	add	r4, r31
    63ea:	51 1c       	adc	r5, r1
    63ec:	f8 01       	movw	r30, r16
    63ee:	a0 80       	ld	r10, Z
    63f0:	b1 80       	ldd	r11, Z+1	; 0x01
    63f2:	36 fe       	sbrs	r3, 6
    63f4:	03 c0       	rjmp	.+6      	; 0x63fc <vfprintf+0x16c>
    63f6:	69 2d       	mov	r22, r9
    63f8:	70 e0       	ldi	r23, 0x00	; 0
    63fa:	02 c0       	rjmp	.+4      	; 0x6400 <vfprintf+0x170>
    63fc:	6f ef       	ldi	r22, 0xFF	; 255
    63fe:	7f ef       	ldi	r23, 0xFF	; 255
    6400:	c5 01       	movw	r24, r10
    6402:	4e d1       	rcall	.+668    	; 0x66a0 <strnlen>
    6404:	4c 01       	movw	r8, r24
    6406:	82 01       	movw	r16, r4
    6408:	f3 2d       	mov	r31, r3
    640a:	ff 77       	andi	r31, 0x7F	; 127
    640c:	3f 2e       	mov	r3, r31
    640e:	15 c0       	rjmp	.+42     	; 0x643a <vfprintf+0x1aa>
    6410:	28 01       	movw	r4, r16
    6412:	22 e0       	ldi	r18, 0x02	; 2
    6414:	42 0e       	add	r4, r18
    6416:	51 1c       	adc	r5, r1
    6418:	f8 01       	movw	r30, r16
    641a:	a0 80       	ld	r10, Z
    641c:	b1 80       	ldd	r11, Z+1	; 0x01
    641e:	36 fe       	sbrs	r3, 6
    6420:	03 c0       	rjmp	.+6      	; 0x6428 <vfprintf+0x198>
    6422:	69 2d       	mov	r22, r9
    6424:	70 e0       	ldi	r23, 0x00	; 0
    6426:	02 c0       	rjmp	.+4      	; 0x642c <vfprintf+0x19c>
    6428:	6f ef       	ldi	r22, 0xFF	; 255
    642a:	7f ef       	ldi	r23, 0xFF	; 255
    642c:	c5 01       	movw	r24, r10
    642e:	2d d1       	rcall	.+602    	; 0x668a <strnlen_P>
    6430:	4c 01       	movw	r8, r24
    6432:	f3 2d       	mov	r31, r3
    6434:	f0 68       	ori	r31, 0x80	; 128
    6436:	3f 2e       	mov	r3, r31
    6438:	82 01       	movw	r16, r4
    643a:	33 fc       	sbrc	r3, 3
    643c:	19 c0       	rjmp	.+50     	; 0x6470 <vfprintf+0x1e0>
    643e:	82 2d       	mov	r24, r2
    6440:	90 e0       	ldi	r25, 0x00	; 0
    6442:	88 16       	cp	r8, r24
    6444:	99 06       	cpc	r9, r25
    6446:	a0 f4       	brcc	.+40     	; 0x6470 <vfprintf+0x1e0>
    6448:	b6 01       	movw	r22, r12
    644a:	80 e2       	ldi	r24, 0x20	; 32
    644c:	90 e0       	ldi	r25, 0x00	; 0
    644e:	33 d1       	rcall	.+614    	; 0x66b6 <fputc>
    6450:	2a 94       	dec	r2
    6452:	f5 cf       	rjmp	.-22     	; 0x643e <vfprintf+0x1ae>
    6454:	f5 01       	movw	r30, r10
    6456:	37 fc       	sbrc	r3, 7
    6458:	85 91       	lpm	r24, Z+
    645a:	37 fe       	sbrs	r3, 7
    645c:	81 91       	ld	r24, Z+
    645e:	5f 01       	movw	r10, r30
    6460:	b6 01       	movw	r22, r12
    6462:	90 e0       	ldi	r25, 0x00	; 0
    6464:	28 d1       	rcall	.+592    	; 0x66b6 <fputc>
    6466:	21 10       	cpse	r2, r1
    6468:	2a 94       	dec	r2
    646a:	21 e0       	ldi	r18, 0x01	; 1
    646c:	82 1a       	sub	r8, r18
    646e:	91 08       	sbc	r9, r1
    6470:	81 14       	cp	r8, r1
    6472:	91 04       	cpc	r9, r1
    6474:	79 f7       	brne	.-34     	; 0x6454 <vfprintf+0x1c4>
    6476:	e1 c0       	rjmp	.+450    	; 0x663a <vfprintf+0x3aa>
    6478:	84 36       	cpi	r24, 0x64	; 100
    647a:	11 f0       	breq	.+4      	; 0x6480 <vfprintf+0x1f0>
    647c:	89 36       	cpi	r24, 0x69	; 105
    647e:	39 f5       	brne	.+78     	; 0x64ce <vfprintf+0x23e>
    6480:	f8 01       	movw	r30, r16
    6482:	37 fe       	sbrs	r3, 7
    6484:	07 c0       	rjmp	.+14     	; 0x6494 <vfprintf+0x204>
    6486:	60 81       	ld	r22, Z
    6488:	71 81       	ldd	r23, Z+1	; 0x01
    648a:	82 81       	ldd	r24, Z+2	; 0x02
    648c:	93 81       	ldd	r25, Z+3	; 0x03
    648e:	0c 5f       	subi	r16, 0xFC	; 252
    6490:	1f 4f       	sbci	r17, 0xFF	; 255
    6492:	08 c0       	rjmp	.+16     	; 0x64a4 <vfprintf+0x214>
    6494:	60 81       	ld	r22, Z
    6496:	71 81       	ldd	r23, Z+1	; 0x01
    6498:	07 2e       	mov	r0, r23
    649a:	00 0c       	add	r0, r0
    649c:	88 0b       	sbc	r24, r24
    649e:	99 0b       	sbc	r25, r25
    64a0:	0e 5f       	subi	r16, 0xFE	; 254
    64a2:	1f 4f       	sbci	r17, 0xFF	; 255
    64a4:	f3 2d       	mov	r31, r3
    64a6:	ff 76       	andi	r31, 0x6F	; 111
    64a8:	3f 2e       	mov	r3, r31
    64aa:	97 ff       	sbrs	r25, 7
    64ac:	09 c0       	rjmp	.+18     	; 0x64c0 <vfprintf+0x230>
    64ae:	90 95       	com	r25
    64b0:	80 95       	com	r24
    64b2:	70 95       	com	r23
    64b4:	61 95       	neg	r22
    64b6:	7f 4f       	sbci	r23, 0xFF	; 255
    64b8:	8f 4f       	sbci	r24, 0xFF	; 255
    64ba:	9f 4f       	sbci	r25, 0xFF	; 255
    64bc:	f0 68       	ori	r31, 0x80	; 128
    64be:	3f 2e       	mov	r3, r31
    64c0:	2a e0       	ldi	r18, 0x0A	; 10
    64c2:	30 e0       	ldi	r19, 0x00	; 0
    64c4:	a3 01       	movw	r20, r6
    64c6:	33 d1       	rcall	.+614    	; 0x672e <__ultoa_invert>
    64c8:	88 2e       	mov	r8, r24
    64ca:	86 18       	sub	r8, r6
    64cc:	44 c0       	rjmp	.+136    	; 0x6556 <vfprintf+0x2c6>
    64ce:	85 37       	cpi	r24, 0x75	; 117
    64d0:	31 f4       	brne	.+12     	; 0x64de <vfprintf+0x24e>
    64d2:	23 2d       	mov	r18, r3
    64d4:	2f 7e       	andi	r18, 0xEF	; 239
    64d6:	b2 2e       	mov	r11, r18
    64d8:	2a e0       	ldi	r18, 0x0A	; 10
    64da:	30 e0       	ldi	r19, 0x00	; 0
    64dc:	25 c0       	rjmp	.+74     	; 0x6528 <vfprintf+0x298>
    64de:	93 2d       	mov	r25, r3
    64e0:	99 7f       	andi	r25, 0xF9	; 249
    64e2:	b9 2e       	mov	r11, r25
    64e4:	8f 36       	cpi	r24, 0x6F	; 111
    64e6:	c1 f0       	breq	.+48     	; 0x6518 <vfprintf+0x288>
    64e8:	18 f4       	brcc	.+6      	; 0x64f0 <vfprintf+0x260>
    64ea:	88 35       	cpi	r24, 0x58	; 88
    64ec:	79 f0       	breq	.+30     	; 0x650c <vfprintf+0x27c>
    64ee:	ae c0       	rjmp	.+348    	; 0x664c <vfprintf+0x3bc>
    64f0:	80 37       	cpi	r24, 0x70	; 112
    64f2:	19 f0       	breq	.+6      	; 0x64fa <vfprintf+0x26a>
    64f4:	88 37       	cpi	r24, 0x78	; 120
    64f6:	21 f0       	breq	.+8      	; 0x6500 <vfprintf+0x270>
    64f8:	a9 c0       	rjmp	.+338    	; 0x664c <vfprintf+0x3bc>
    64fa:	e9 2f       	mov	r30, r25
    64fc:	e0 61       	ori	r30, 0x10	; 16
    64fe:	be 2e       	mov	r11, r30
    6500:	b4 fe       	sbrs	r11, 4
    6502:	0d c0       	rjmp	.+26     	; 0x651e <vfprintf+0x28e>
    6504:	fb 2d       	mov	r31, r11
    6506:	f4 60       	ori	r31, 0x04	; 4
    6508:	bf 2e       	mov	r11, r31
    650a:	09 c0       	rjmp	.+18     	; 0x651e <vfprintf+0x28e>
    650c:	34 fe       	sbrs	r3, 4
    650e:	0a c0       	rjmp	.+20     	; 0x6524 <vfprintf+0x294>
    6510:	29 2f       	mov	r18, r25
    6512:	26 60       	ori	r18, 0x06	; 6
    6514:	b2 2e       	mov	r11, r18
    6516:	06 c0       	rjmp	.+12     	; 0x6524 <vfprintf+0x294>
    6518:	28 e0       	ldi	r18, 0x08	; 8
    651a:	30 e0       	ldi	r19, 0x00	; 0
    651c:	05 c0       	rjmp	.+10     	; 0x6528 <vfprintf+0x298>
    651e:	20 e1       	ldi	r18, 0x10	; 16
    6520:	30 e0       	ldi	r19, 0x00	; 0
    6522:	02 c0       	rjmp	.+4      	; 0x6528 <vfprintf+0x298>
    6524:	20 e1       	ldi	r18, 0x10	; 16
    6526:	32 e0       	ldi	r19, 0x02	; 2
    6528:	f8 01       	movw	r30, r16
    652a:	b7 fe       	sbrs	r11, 7
    652c:	07 c0       	rjmp	.+14     	; 0x653c <vfprintf+0x2ac>
    652e:	60 81       	ld	r22, Z
    6530:	71 81       	ldd	r23, Z+1	; 0x01
    6532:	82 81       	ldd	r24, Z+2	; 0x02
    6534:	93 81       	ldd	r25, Z+3	; 0x03
    6536:	0c 5f       	subi	r16, 0xFC	; 252
    6538:	1f 4f       	sbci	r17, 0xFF	; 255
    653a:	06 c0       	rjmp	.+12     	; 0x6548 <vfprintf+0x2b8>
    653c:	60 81       	ld	r22, Z
    653e:	71 81       	ldd	r23, Z+1	; 0x01
    6540:	80 e0       	ldi	r24, 0x00	; 0
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	0e 5f       	subi	r16, 0xFE	; 254
    6546:	1f 4f       	sbci	r17, 0xFF	; 255
    6548:	a3 01       	movw	r20, r6
    654a:	f1 d0       	rcall	.+482    	; 0x672e <__ultoa_invert>
    654c:	88 2e       	mov	r8, r24
    654e:	86 18       	sub	r8, r6
    6550:	fb 2d       	mov	r31, r11
    6552:	ff 77       	andi	r31, 0x7F	; 127
    6554:	3f 2e       	mov	r3, r31
    6556:	36 fe       	sbrs	r3, 6
    6558:	0d c0       	rjmp	.+26     	; 0x6574 <vfprintf+0x2e4>
    655a:	23 2d       	mov	r18, r3
    655c:	2e 7f       	andi	r18, 0xFE	; 254
    655e:	a2 2e       	mov	r10, r18
    6560:	89 14       	cp	r8, r9
    6562:	58 f4       	brcc	.+22     	; 0x657a <vfprintf+0x2ea>
    6564:	34 fe       	sbrs	r3, 4
    6566:	0b c0       	rjmp	.+22     	; 0x657e <vfprintf+0x2ee>
    6568:	32 fc       	sbrc	r3, 2
    656a:	09 c0       	rjmp	.+18     	; 0x657e <vfprintf+0x2ee>
    656c:	83 2d       	mov	r24, r3
    656e:	8e 7e       	andi	r24, 0xEE	; 238
    6570:	a8 2e       	mov	r10, r24
    6572:	05 c0       	rjmp	.+10     	; 0x657e <vfprintf+0x2ee>
    6574:	b8 2c       	mov	r11, r8
    6576:	a3 2c       	mov	r10, r3
    6578:	03 c0       	rjmp	.+6      	; 0x6580 <vfprintf+0x2f0>
    657a:	b8 2c       	mov	r11, r8
    657c:	01 c0       	rjmp	.+2      	; 0x6580 <vfprintf+0x2f0>
    657e:	b9 2c       	mov	r11, r9
    6580:	a4 fe       	sbrs	r10, 4
    6582:	0f c0       	rjmp	.+30     	; 0x65a2 <vfprintf+0x312>
    6584:	fe 01       	movw	r30, r28
    6586:	e8 0d       	add	r30, r8
    6588:	f1 1d       	adc	r31, r1
    658a:	80 81       	ld	r24, Z
    658c:	80 33       	cpi	r24, 0x30	; 48
    658e:	21 f4       	brne	.+8      	; 0x6598 <vfprintf+0x308>
    6590:	9a 2d       	mov	r25, r10
    6592:	99 7e       	andi	r25, 0xE9	; 233
    6594:	a9 2e       	mov	r10, r25
    6596:	09 c0       	rjmp	.+18     	; 0x65aa <vfprintf+0x31a>
    6598:	a2 fe       	sbrs	r10, 2
    659a:	06 c0       	rjmp	.+12     	; 0x65a8 <vfprintf+0x318>
    659c:	b3 94       	inc	r11
    659e:	b3 94       	inc	r11
    65a0:	04 c0       	rjmp	.+8      	; 0x65aa <vfprintf+0x31a>
    65a2:	8a 2d       	mov	r24, r10
    65a4:	86 78       	andi	r24, 0x86	; 134
    65a6:	09 f0       	breq	.+2      	; 0x65aa <vfprintf+0x31a>
    65a8:	b3 94       	inc	r11
    65aa:	a3 fc       	sbrc	r10, 3
    65ac:	10 c0       	rjmp	.+32     	; 0x65ce <vfprintf+0x33e>
    65ae:	a0 fe       	sbrs	r10, 0
    65b0:	06 c0       	rjmp	.+12     	; 0x65be <vfprintf+0x32e>
    65b2:	b2 14       	cp	r11, r2
    65b4:	80 f4       	brcc	.+32     	; 0x65d6 <vfprintf+0x346>
    65b6:	28 0c       	add	r2, r8
    65b8:	92 2c       	mov	r9, r2
    65ba:	9b 18       	sub	r9, r11
    65bc:	0d c0       	rjmp	.+26     	; 0x65d8 <vfprintf+0x348>
    65be:	b2 14       	cp	r11, r2
    65c0:	58 f4       	brcc	.+22     	; 0x65d8 <vfprintf+0x348>
    65c2:	b6 01       	movw	r22, r12
    65c4:	80 e2       	ldi	r24, 0x20	; 32
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	76 d0       	rcall	.+236    	; 0x66b6 <fputc>
    65ca:	b3 94       	inc	r11
    65cc:	f8 cf       	rjmp	.-16     	; 0x65be <vfprintf+0x32e>
    65ce:	b2 14       	cp	r11, r2
    65d0:	18 f4       	brcc	.+6      	; 0x65d8 <vfprintf+0x348>
    65d2:	2b 18       	sub	r2, r11
    65d4:	02 c0       	rjmp	.+4      	; 0x65da <vfprintf+0x34a>
    65d6:	98 2c       	mov	r9, r8
    65d8:	21 2c       	mov	r2, r1
    65da:	a4 fe       	sbrs	r10, 4
    65dc:	0f c0       	rjmp	.+30     	; 0x65fc <vfprintf+0x36c>
    65de:	b6 01       	movw	r22, r12
    65e0:	80 e3       	ldi	r24, 0x30	; 48
    65e2:	90 e0       	ldi	r25, 0x00	; 0
    65e4:	68 d0       	rcall	.+208    	; 0x66b6 <fputc>
    65e6:	a2 fe       	sbrs	r10, 2
    65e8:	16 c0       	rjmp	.+44     	; 0x6616 <vfprintf+0x386>
    65ea:	a1 fc       	sbrc	r10, 1
    65ec:	03 c0       	rjmp	.+6      	; 0x65f4 <vfprintf+0x364>
    65ee:	88 e7       	ldi	r24, 0x78	; 120
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	02 c0       	rjmp	.+4      	; 0x65f8 <vfprintf+0x368>
    65f4:	88 e5       	ldi	r24, 0x58	; 88
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	b6 01       	movw	r22, r12
    65fa:	0c c0       	rjmp	.+24     	; 0x6614 <vfprintf+0x384>
    65fc:	8a 2d       	mov	r24, r10
    65fe:	86 78       	andi	r24, 0x86	; 134
    6600:	51 f0       	breq	.+20     	; 0x6616 <vfprintf+0x386>
    6602:	a1 fe       	sbrs	r10, 1
    6604:	02 c0       	rjmp	.+4      	; 0x660a <vfprintf+0x37a>
    6606:	8b e2       	ldi	r24, 0x2B	; 43
    6608:	01 c0       	rjmp	.+2      	; 0x660c <vfprintf+0x37c>
    660a:	80 e2       	ldi	r24, 0x20	; 32
    660c:	a7 fc       	sbrc	r10, 7
    660e:	8d e2       	ldi	r24, 0x2D	; 45
    6610:	b6 01       	movw	r22, r12
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	50 d0       	rcall	.+160    	; 0x66b6 <fputc>
    6616:	89 14       	cp	r8, r9
    6618:	30 f4       	brcc	.+12     	; 0x6626 <vfprintf+0x396>
    661a:	b6 01       	movw	r22, r12
    661c:	80 e3       	ldi	r24, 0x30	; 48
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	4a d0       	rcall	.+148    	; 0x66b6 <fputc>
    6622:	9a 94       	dec	r9
    6624:	f8 cf       	rjmp	.-16     	; 0x6616 <vfprintf+0x386>
    6626:	8a 94       	dec	r8
    6628:	f3 01       	movw	r30, r6
    662a:	e8 0d       	add	r30, r8
    662c:	f1 1d       	adc	r31, r1
    662e:	80 81       	ld	r24, Z
    6630:	b6 01       	movw	r22, r12
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	40 d0       	rcall	.+128    	; 0x66b6 <fputc>
    6636:	81 10       	cpse	r8, r1
    6638:	f6 cf       	rjmp	.-20     	; 0x6626 <vfprintf+0x396>
    663a:	22 20       	and	r2, r2
    663c:	09 f4       	brne	.+2      	; 0x6640 <vfprintf+0x3b0>
    663e:	4e ce       	rjmp	.-868    	; 0x62dc <vfprintf+0x4c>
    6640:	b6 01       	movw	r22, r12
    6642:	80 e2       	ldi	r24, 0x20	; 32
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	37 d0       	rcall	.+110    	; 0x66b6 <fputc>
    6648:	2a 94       	dec	r2
    664a:	f7 cf       	rjmp	.-18     	; 0x663a <vfprintf+0x3aa>
    664c:	f6 01       	movw	r30, r12
    664e:	86 81       	ldd	r24, Z+6	; 0x06
    6650:	97 81       	ldd	r25, Z+7	; 0x07
    6652:	02 c0       	rjmp	.+4      	; 0x6658 <vfprintf+0x3c8>
    6654:	8f ef       	ldi	r24, 0xFF	; 255
    6656:	9f ef       	ldi	r25, 0xFF	; 255
    6658:	2b 96       	adiw	r28, 0x0b	; 11
    665a:	0f b6       	in	r0, 0x3f	; 63
    665c:	f8 94       	cli
    665e:	de bf       	out	0x3e, r29	; 62
    6660:	0f be       	out	0x3f, r0	; 63
    6662:	cd bf       	out	0x3d, r28	; 61
    6664:	df 91       	pop	r29
    6666:	cf 91       	pop	r28
    6668:	1f 91       	pop	r17
    666a:	0f 91       	pop	r16
    666c:	ff 90       	pop	r15
    666e:	ef 90       	pop	r14
    6670:	df 90       	pop	r13
    6672:	cf 90       	pop	r12
    6674:	bf 90       	pop	r11
    6676:	af 90       	pop	r10
    6678:	9f 90       	pop	r9
    667a:	8f 90       	pop	r8
    667c:	7f 90       	pop	r7
    667e:	6f 90       	pop	r6
    6680:	5f 90       	pop	r5
    6682:	4f 90       	pop	r4
    6684:	3f 90       	pop	r3
    6686:	2f 90       	pop	r2
    6688:	08 95       	ret

0000668a <strnlen_P>:
    668a:	fc 01       	movw	r30, r24
    668c:	05 90       	lpm	r0, Z+
    668e:	61 50       	subi	r22, 0x01	; 1
    6690:	70 40       	sbci	r23, 0x00	; 0
    6692:	01 10       	cpse	r0, r1
    6694:	d8 f7       	brcc	.-10     	; 0x668c <strnlen_P+0x2>
    6696:	80 95       	com	r24
    6698:	90 95       	com	r25
    669a:	8e 0f       	add	r24, r30
    669c:	9f 1f       	adc	r25, r31
    669e:	08 95       	ret

000066a0 <strnlen>:
    66a0:	fc 01       	movw	r30, r24
    66a2:	61 50       	subi	r22, 0x01	; 1
    66a4:	70 40       	sbci	r23, 0x00	; 0
    66a6:	01 90       	ld	r0, Z+
    66a8:	01 10       	cpse	r0, r1
    66aa:	d8 f7       	brcc	.-10     	; 0x66a2 <strnlen+0x2>
    66ac:	80 95       	com	r24
    66ae:	90 95       	com	r25
    66b0:	8e 0f       	add	r24, r30
    66b2:	9f 1f       	adc	r25, r31
    66b4:	08 95       	ret

000066b6 <fputc>:
    66b6:	0f 93       	push	r16
    66b8:	1f 93       	push	r17
    66ba:	cf 93       	push	r28
    66bc:	df 93       	push	r29
    66be:	fb 01       	movw	r30, r22
    66c0:	23 81       	ldd	r18, Z+3	; 0x03
    66c2:	21 fd       	sbrc	r18, 1
    66c4:	03 c0       	rjmp	.+6      	; 0x66cc <fputc+0x16>
    66c6:	8f ef       	ldi	r24, 0xFF	; 255
    66c8:	9f ef       	ldi	r25, 0xFF	; 255
    66ca:	2c c0       	rjmp	.+88     	; 0x6724 <fputc+0x6e>
    66cc:	22 ff       	sbrs	r18, 2
    66ce:	16 c0       	rjmp	.+44     	; 0x66fc <fputc+0x46>
    66d0:	46 81       	ldd	r20, Z+6	; 0x06
    66d2:	57 81       	ldd	r21, Z+7	; 0x07
    66d4:	24 81       	ldd	r18, Z+4	; 0x04
    66d6:	35 81       	ldd	r19, Z+5	; 0x05
    66d8:	42 17       	cp	r20, r18
    66da:	53 07       	cpc	r21, r19
    66dc:	44 f4       	brge	.+16     	; 0x66ee <fputc+0x38>
    66de:	a0 81       	ld	r26, Z
    66e0:	b1 81       	ldd	r27, Z+1	; 0x01
    66e2:	9d 01       	movw	r18, r26
    66e4:	2f 5f       	subi	r18, 0xFF	; 255
    66e6:	3f 4f       	sbci	r19, 0xFF	; 255
    66e8:	31 83       	std	Z+1, r19	; 0x01
    66ea:	20 83       	st	Z, r18
    66ec:	8c 93       	st	X, r24
    66ee:	26 81       	ldd	r18, Z+6	; 0x06
    66f0:	37 81       	ldd	r19, Z+7	; 0x07
    66f2:	2f 5f       	subi	r18, 0xFF	; 255
    66f4:	3f 4f       	sbci	r19, 0xFF	; 255
    66f6:	37 83       	std	Z+7, r19	; 0x07
    66f8:	26 83       	std	Z+6, r18	; 0x06
    66fa:	14 c0       	rjmp	.+40     	; 0x6724 <fputc+0x6e>
    66fc:	8b 01       	movw	r16, r22
    66fe:	ec 01       	movw	r28, r24
    6700:	fb 01       	movw	r30, r22
    6702:	00 84       	ldd	r0, Z+8	; 0x08
    6704:	f1 85       	ldd	r31, Z+9	; 0x09
    6706:	e0 2d       	mov	r30, r0
    6708:	19 95       	eicall
    670a:	89 2b       	or	r24, r25
    670c:	e1 f6       	brne	.-72     	; 0x66c6 <fputc+0x10>
    670e:	d8 01       	movw	r26, r16
    6710:	16 96       	adiw	r26, 0x06	; 6
    6712:	8d 91       	ld	r24, X+
    6714:	9c 91       	ld	r25, X
    6716:	17 97       	sbiw	r26, 0x07	; 7
    6718:	01 96       	adiw	r24, 0x01	; 1
    671a:	17 96       	adiw	r26, 0x07	; 7
    671c:	9c 93       	st	X, r25
    671e:	8e 93       	st	-X, r24
    6720:	16 97       	sbiw	r26, 0x06	; 6
    6722:	ce 01       	movw	r24, r28
    6724:	df 91       	pop	r29
    6726:	cf 91       	pop	r28
    6728:	1f 91       	pop	r17
    672a:	0f 91       	pop	r16
    672c:	08 95       	ret

0000672e <__ultoa_invert>:
    672e:	fa 01       	movw	r30, r20
    6730:	aa 27       	eor	r26, r26
    6732:	28 30       	cpi	r18, 0x08	; 8
    6734:	51 f1       	breq	.+84     	; 0x678a <__ultoa_invert+0x5c>
    6736:	20 31       	cpi	r18, 0x10	; 16
    6738:	81 f1       	breq	.+96     	; 0x679a <__ultoa_invert+0x6c>
    673a:	e8 94       	clt
    673c:	6f 93       	push	r22
    673e:	6e 7f       	andi	r22, 0xFE	; 254
    6740:	6e 5f       	subi	r22, 0xFE	; 254
    6742:	7f 4f       	sbci	r23, 0xFF	; 255
    6744:	8f 4f       	sbci	r24, 0xFF	; 255
    6746:	9f 4f       	sbci	r25, 0xFF	; 255
    6748:	af 4f       	sbci	r26, 0xFF	; 255
    674a:	b1 e0       	ldi	r27, 0x01	; 1
    674c:	3e d0       	rcall	.+124    	; 0x67ca <__ultoa_invert+0x9c>
    674e:	b4 e0       	ldi	r27, 0x04	; 4
    6750:	3c d0       	rcall	.+120    	; 0x67ca <__ultoa_invert+0x9c>
    6752:	67 0f       	add	r22, r23
    6754:	78 1f       	adc	r23, r24
    6756:	89 1f       	adc	r24, r25
    6758:	9a 1f       	adc	r25, r26
    675a:	a1 1d       	adc	r26, r1
    675c:	68 0f       	add	r22, r24
    675e:	79 1f       	adc	r23, r25
    6760:	8a 1f       	adc	r24, r26
    6762:	91 1d       	adc	r25, r1
    6764:	a1 1d       	adc	r26, r1
    6766:	6a 0f       	add	r22, r26
    6768:	71 1d       	adc	r23, r1
    676a:	81 1d       	adc	r24, r1
    676c:	91 1d       	adc	r25, r1
    676e:	a1 1d       	adc	r26, r1
    6770:	20 d0       	rcall	.+64     	; 0x67b2 <__ultoa_invert+0x84>
    6772:	09 f4       	brne	.+2      	; 0x6776 <__ultoa_invert+0x48>
    6774:	68 94       	set
    6776:	3f 91       	pop	r19
    6778:	2a e0       	ldi	r18, 0x0A	; 10
    677a:	26 9f       	mul	r18, r22
    677c:	11 24       	eor	r1, r1
    677e:	30 19       	sub	r19, r0
    6780:	30 5d       	subi	r19, 0xD0	; 208
    6782:	31 93       	st	Z+, r19
    6784:	de f6       	brtc	.-74     	; 0x673c <__ultoa_invert+0xe>
    6786:	cf 01       	movw	r24, r30
    6788:	08 95       	ret
    678a:	46 2f       	mov	r20, r22
    678c:	47 70       	andi	r20, 0x07	; 7
    678e:	40 5d       	subi	r20, 0xD0	; 208
    6790:	41 93       	st	Z+, r20
    6792:	b3 e0       	ldi	r27, 0x03	; 3
    6794:	0f d0       	rcall	.+30     	; 0x67b4 <__ultoa_invert+0x86>
    6796:	c9 f7       	brne	.-14     	; 0x678a <__ultoa_invert+0x5c>
    6798:	f6 cf       	rjmp	.-20     	; 0x6786 <__ultoa_invert+0x58>
    679a:	46 2f       	mov	r20, r22
    679c:	4f 70       	andi	r20, 0x0F	; 15
    679e:	40 5d       	subi	r20, 0xD0	; 208
    67a0:	4a 33       	cpi	r20, 0x3A	; 58
    67a2:	18 f0       	brcs	.+6      	; 0x67aa <__ultoa_invert+0x7c>
    67a4:	49 5d       	subi	r20, 0xD9	; 217
    67a6:	31 fd       	sbrc	r19, 1
    67a8:	40 52       	subi	r20, 0x20	; 32
    67aa:	41 93       	st	Z+, r20
    67ac:	02 d0       	rcall	.+4      	; 0x67b2 <__ultoa_invert+0x84>
    67ae:	a9 f7       	brne	.-22     	; 0x679a <__ultoa_invert+0x6c>
    67b0:	ea cf       	rjmp	.-44     	; 0x6786 <__ultoa_invert+0x58>
    67b2:	b4 e0       	ldi	r27, 0x04	; 4
    67b4:	a6 95       	lsr	r26
    67b6:	97 95       	ror	r25
    67b8:	87 95       	ror	r24
    67ba:	77 95       	ror	r23
    67bc:	67 95       	ror	r22
    67be:	ba 95       	dec	r27
    67c0:	c9 f7       	brne	.-14     	; 0x67b4 <__ultoa_invert+0x86>
    67c2:	00 97       	sbiw	r24, 0x00	; 0
    67c4:	61 05       	cpc	r22, r1
    67c6:	71 05       	cpc	r23, r1
    67c8:	08 95       	ret
    67ca:	9b 01       	movw	r18, r22
    67cc:	ac 01       	movw	r20, r24
    67ce:	0a 2e       	mov	r0, r26
    67d0:	06 94       	lsr	r0
    67d2:	57 95       	ror	r21
    67d4:	47 95       	ror	r20
    67d6:	37 95       	ror	r19
    67d8:	27 95       	ror	r18
    67da:	ba 95       	dec	r27
    67dc:	c9 f7       	brne	.-14     	; 0x67d0 <__ultoa_invert+0xa2>
    67de:	62 0f       	add	r22, r18
    67e0:	73 1f       	adc	r23, r19
    67e2:	84 1f       	adc	r24, r20
    67e4:	95 1f       	adc	r25, r21
    67e6:	a0 1d       	adc	r26, r0
    67e8:	08 95       	ret

000067ea <_exit>:
    67ea:	f8 94       	cli

000067ec <__stop_program>:
    67ec:	ff cf       	rjmp	.-2      	; 0x67ec <__stop_program>
