
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800200  00003b80  00003c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000add  008002a4  008002a4  00003cb8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003cb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  00003d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008472  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002337  00000000  00000000  0000c86e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004454  00000000  00000000  0000eba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001848  00000000  00000000  00012ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c88  00000000  00000000  00014844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000798e  00000000  00000000  000174cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000678  00000000  00000000  0001ee5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e4 c0       	rjmp	.+456    	; 0x1ca <__ctors_end>
       2:	00 00       	nop
       4:	03 c1       	rjmp	.+518    	; 0x20c <__bad_interrupt>
       6:	00 00       	nop
       8:	01 c1       	rjmp	.+514    	; 0x20c <__bad_interrupt>
       a:	00 00       	nop
       c:	ff c0       	rjmp	.+510    	; 0x20c <__bad_interrupt>
       e:	00 00       	nop
      10:	fd c0       	rjmp	.+506    	; 0x20c <__bad_interrupt>
      12:	00 00       	nop
      14:	fb c0       	rjmp	.+502    	; 0x20c <__bad_interrupt>
      16:	00 00       	nop
      18:	f9 c0       	rjmp	.+498    	; 0x20c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f7 c0       	rjmp	.+494    	; 0x20c <__bad_interrupt>
      1e:	00 00       	nop
      20:	f5 c0       	rjmp	.+490    	; 0x20c <__bad_interrupt>
      22:	00 00       	nop
      24:	f3 c0       	rjmp	.+486    	; 0x20c <__bad_interrupt>
      26:	00 00       	nop
      28:	f1 c0       	rjmp	.+482    	; 0x20c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ef c0       	rjmp	.+478    	; 0x20c <__bad_interrupt>
      2e:	00 00       	nop
      30:	d7 c3       	rjmp	.+1966   	; 0x7e0 <__vector_12>
      32:	00 00       	nop
      34:	eb c0       	rjmp	.+470    	; 0x20c <__bad_interrupt>
      36:	00 00       	nop
      38:	e9 c0       	rjmp	.+466    	; 0x20c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e7 c0       	rjmp	.+462    	; 0x20c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e5 c0       	rjmp	.+458    	; 0x20c <__bad_interrupt>
      42:	00 00       	nop
      44:	e3 c0       	rjmp	.+454    	; 0x20c <__bad_interrupt>
      46:	00 00       	nop
      48:	e1 c0       	rjmp	.+450    	; 0x20c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	df c0       	rjmp	.+446    	; 0x20c <__bad_interrupt>
      4e:	00 00       	nop
      50:	dd c0       	rjmp	.+442    	; 0x20c <__bad_interrupt>
      52:	00 00       	nop
      54:	db c0       	rjmp	.+438    	; 0x20c <__bad_interrupt>
      56:	00 00       	nop
      58:	d9 c0       	rjmp	.+434    	; 0x20c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d7 c0       	rjmp	.+430    	; 0x20c <__bad_interrupt>
      5e:	00 00       	nop
      60:	d5 c0       	rjmp	.+426    	; 0x20c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__vector_25>
      68:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__vector_26>
      6c:	cf c0       	rjmp	.+414    	; 0x20c <__bad_interrupt>
      6e:	00 00       	nop
      70:	cd c0       	rjmp	.+410    	; 0x20c <__bad_interrupt>
      72:	00 00       	nop
      74:	cb c0       	rjmp	.+406    	; 0x20c <__bad_interrupt>
      76:	00 00       	nop
      78:	c9 c0       	rjmp	.+402    	; 0x20c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c7 c0       	rjmp	.+398    	; 0x20c <__bad_interrupt>
      7e:	00 00       	nop
      80:	c5 c0       	rjmp	.+394    	; 0x20c <__bad_interrupt>
      82:	00 00       	nop
      84:	c3 c0       	rjmp	.+390    	; 0x20c <__bad_interrupt>
      86:	00 00       	nop
      88:	c1 c0       	rjmp	.+386    	; 0x20c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bf c0       	rjmp	.+382    	; 0x20c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__vector_36>
      94:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__vector_37>
      98:	b9 c0       	rjmp	.+370    	; 0x20c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__vector_39>
      a0:	b5 c0       	rjmp	.+362    	; 0x20c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b3 c0       	rjmp	.+358    	; 0x20c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b1 c0       	rjmp	.+354    	; 0x20c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	af c0       	rjmp	.+350    	; 0x20c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ad c0       	rjmp	.+346    	; 0x20c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ab c0       	rjmp	.+342    	; 0x20c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a9 c0       	rjmp	.+338    	; 0x20c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a7 c0       	rjmp	.+334    	; 0x20c <__bad_interrupt>
      be:	00 00       	nop
      c0:	a5 c0       	rjmp	.+330    	; 0x20c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a3 c0       	rjmp	.+326    	; 0x20c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a1 c0       	rjmp	.+322    	; 0x20c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__vector_51>
      d0:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__vector_52>
      d4:	9b c0       	rjmp	.+310    	; 0x20c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__vector_54>
      dc:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__vector_55>
      e0:	95 c0       	rjmp	.+298    	; 0x20c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8a 10       	cpse	r8, r10
      e6:	8a 10       	cpse	r8, r10
      e8:	8a 10       	cpse	r8, r10
      ea:	c1 10       	cpse	r12, r1
      ec:	c9 10       	cpse	r12, r9
      ee:	de 10       	cpse	r13, r14
      f0:	8a 10       	cpse	r8, r10
      f2:	8a 10       	cpse	r8, r10
      f4:	c1 10       	cpse	r12, r1
      f6:	c9 10       	cpse	r12, r9
      f8:	af 16       	cp	r10, r31
      fa:	1f 17       	cp	r17, r31
      fc:	1f 17       	cp	r17, r31
      fe:	1f 17       	cp	r17, r31
     100:	1f 17       	cp	r17, r31
     102:	1f 17       	cp	r17, r31
     104:	1f 17       	cp	r17, r31
     106:	1f 17       	cp	r17, r31
     108:	af 16       	cp	r10, r31
     10a:	1f 17       	cp	r17, r31
     10c:	1f 17       	cp	r17, r31
     10e:	1f 17       	cp	r17, r31
     110:	1f 17       	cp	r17, r31
     112:	1f 17       	cp	r17, r31
     114:	1f 17       	cp	r17, r31
     116:	1f 17       	cp	r17, r31
     118:	b1 16       	cp	r11, r17
     11a:	1f 17       	cp	r17, r31
     11c:	1f 17       	cp	r17, r31
     11e:	1f 17       	cp	r17, r31
     120:	1f 17       	cp	r17, r31
     122:	1f 17       	cp	r17, r31
     124:	1f 17       	cp	r17, r31
     126:	1f 17       	cp	r17, r31
     128:	1f 17       	cp	r17, r31
     12a:	1f 17       	cp	r17, r31
     12c:	1f 17       	cp	r17, r31
     12e:	1f 17       	cp	r17, r31
     130:	1f 17       	cp	r17, r31
     132:	1f 17       	cp	r17, r31
     134:	1f 17       	cp	r17, r31
     136:	1f 17       	cp	r17, r31
     138:	b1 16       	cp	r11, r17
     13a:	1f 17       	cp	r17, r31
     13c:	1f 17       	cp	r17, r31
     13e:	1f 17       	cp	r17, r31
     140:	1f 17       	cp	r17, r31
     142:	1f 17       	cp	r17, r31
     144:	1f 17       	cp	r17, r31
     146:	1f 17       	cp	r17, r31
     148:	1f 17       	cp	r17, r31
     14a:	1f 17       	cp	r17, r31
     14c:	1f 17       	cp	r17, r31
     14e:	1f 17       	cp	r17, r31
     150:	1f 17       	cp	r17, r31
     152:	1f 17       	cp	r17, r31
     154:	1f 17       	cp	r17, r31
     156:	1f 17       	cp	r17, r31
     158:	1b 17       	cp	r17, r27
     15a:	1f 17       	cp	r17, r31
     15c:	1f 17       	cp	r17, r31
     15e:	1f 17       	cp	r17, r31
     160:	1f 17       	cp	r17, r31
     162:	1f 17       	cp	r17, r31
     164:	1f 17       	cp	r17, r31
     166:	1f 17       	cp	r17, r31
     168:	e6 16       	cp	r14, r22
     16a:	1f 17       	cp	r17, r31
     16c:	1f 17       	cp	r17, r31
     16e:	1f 17       	cp	r17, r31
     170:	1f 17       	cp	r17, r31
     172:	1f 17       	cp	r17, r31
     174:	1f 17       	cp	r17, r31
     176:	1f 17       	cp	r17, r31
     178:	1f 17       	cp	r17, r31
     17a:	1f 17       	cp	r17, r31
     17c:	1f 17       	cp	r17, r31
     17e:	1f 17       	cp	r17, r31
     180:	1f 17       	cp	r17, r31
     182:	1f 17       	cp	r17, r31
     184:	1f 17       	cp	r17, r31
     186:	1f 17       	cp	r17, r31
     188:	da 16       	cp	r13, r26
     18a:	1f 17       	cp	r17, r31
     18c:	1f 17       	cp	r17, r31
     18e:	1f 17       	cp	r17, r31
     190:	1f 17       	cp	r17, r31
     192:	1f 17       	cp	r17, r31
     194:	1f 17       	cp	r17, r31
     196:	1f 17       	cp	r17, r31
     198:	fe 16       	cp	r15, r30

0000019a <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     19a:	11 d7       	rcall	.+3618   	; 0xfbe <prvCheckTasksWaitingTermination>
     19c:	80 91 c9 0c 	lds	r24, 0x0CC9	; 0x800cc9 <pxReadyTasksLists>
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	08 f0       	brcs	.+2      	; 0x1a6 <prvIdleTask+0xc>
     1a4:	59 d2       	rcall	.+1202   	; 0x658 <vPortYield>
     1a6:	0e 94 07 11 	call	0x220e	; 0x220e <vApplicationIdleHook>
     1aa:	f7 cf       	rjmp	.-18     	; 0x19a <prvIdleTask>

000001ac <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	ce 01       	movw	r24, r28
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <prvGetNextExpireTime>
     1be:	49 81       	ldd	r20, Y+1	; 0x01
     1c0:	0e 94 00 10 	call	0x2000	; 0x2000 <prvProcessTimerOrBlockTask>
     1c4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <prvProcessReceivedCommands>
     1c8:	f6 cf       	rjmp	.-20     	; 0x1b6 <prvTimerTask+0xa>

000001ca <__ctors_end>:
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d1 e2       	ldi	r29, 0x21	; 33
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61
     1d6:	00 e0       	ldi	r16, 0x00	; 0
     1d8:	0c bf       	out	0x3c, r16	; 60

000001da <__do_copy_data>:
     1da:	12 e0       	ldi	r17, 0x02	; 2
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b2 e0       	ldi	r27, 0x02	; 2
     1e0:	e0 e8       	ldi	r30, 0x80	; 128
     1e2:	fb e3       	ldi	r31, 0x3B	; 59
     1e4:	00 e0       	ldi	r16, 0x00	; 0
     1e6:	0b bf       	out	0x3b, r16	; 59
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x14>
     1ea:	07 90       	elpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a4 3a       	cpi	r26, 0xA4	; 164
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0x10>

000001f4 <__do_clear_bss>:
     1f4:	2d e0       	ldi	r18, 0x0D	; 13
     1f6:	a4 ea       	ldi	r26, 0xA4	; 164
     1f8:	b2 e0       	ldi	r27, 0x02	; 2
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	a1 38       	cpi	r26, 0x81	; 129
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>
     204:	0e 94 9a 11 	call	0x2334	; 0x2334 <main>
     208:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <_exit>

0000020c <__bad_interrupt>:
     20c:	f9 ce       	rjmp	.-526    	; 0x0 <__vectors>

0000020e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     20e:	e0 eb       	ldi	r30, 0xB0	; 176
     210:	f2 e0       	ldi	r31, 0x02	; 2
     212:	a4 eb       	ldi	r26, 0xB4	; 180
     214:	b2 e0       	ldi	r27, 0x02	; 2
     216:	b1 83       	std	Z+1, r27	; 0x01
     218:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     21a:	13 82       	std	Z+3, r1	; 0x03
     21c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     21e:	e4 e7       	ldi	r30, 0x74	; 116
     220:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     222:	f0 93 af 02 	sts	0x02AF, r31	; 0x8002af <pxEnd+0x1>
     226:	e0 93 ae 02 	sts	0x02AE, r30	; 0x8002ae <pxEnd>
    pxEnd->xBlockSize = 0;
     22a:	13 82       	std	Z+3, r1	; 0x03
     22c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     22e:	11 82       	std	Z+1, r1	; 0x01
     230:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     232:	80 ec       	ldi	r24, 0xC0	; 192
     234:	99 e0       	ldi	r25, 0x09	; 9
     236:	13 96       	adiw	r26, 0x03	; 3
     238:	9c 93       	st	X, r25
     23a:	8e 93       	st	-X, r24
     23c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     23e:	ed 93       	st	X+, r30
     240:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     242:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <xMinimumEverFreeBytesRemaining+0x1>
     246:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     24a:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <xFreeBytesRemaining+0x1>
     24e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e8       	ldi	r25, 0x80	; 128
     256:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__data_end+0x1>
     25a:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end>
     25e:	08 95       	ret

00000260 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     266:	a0 eb       	ldi	r26, 0xB0	; 176
     268:	b2 e0       	ldi	r27, 0x02	; 2
     26a:	01 c0       	rjmp	.+2      	; 0x26e <prvInsertBlockIntoFreeList+0xe>
     26c:	df 01       	movw	r26, r30
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	11 97       	sbiw	r26, 0x01	; 1
     274:	ec 17       	cp	r30, r28
     276:	fd 07       	cpc	r31, r29
     278:	c8 f3       	brcs	.-14     	; 0x26c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     27a:	12 96       	adiw	r26, 0x02	; 2
     27c:	8d 91       	ld	r24, X+
     27e:	9c 91       	ld	r25, X
     280:	13 97       	sbiw	r26, 0x03	; 3
     282:	9d 01       	movw	r18, r26
     284:	28 0f       	add	r18, r24
     286:	39 1f       	adc	r19, r25
     288:	c2 17       	cp	r28, r18
     28a:	d3 07       	cpc	r29, r19
     28c:	49 f4       	brne	.+18     	; 0x2a0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     28e:	2a 81       	ldd	r18, Y+2	; 0x02
     290:	3b 81       	ldd	r19, Y+3	; 0x03
     292:	82 0f       	add	r24, r18
     294:	93 1f       	adc	r25, r19
     296:	13 96       	adiw	r26, 0x03	; 3
     298:	9c 93       	st	X, r25
     29a:	8e 93       	st	-X, r24
     29c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     29e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	9b 81       	ldd	r25, Y+3	; 0x03
     2a4:	9e 01       	movw	r18, r28
     2a6:	28 0f       	add	r18, r24
     2a8:	39 1f       	adc	r19, r25
     2aa:	e2 17       	cp	r30, r18
     2ac:	f3 07       	cpc	r31, r19
     2ae:	c1 f4       	brne	.+48     	; 0x2e0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2b0:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <pxEnd>
     2b4:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <pxEnd+0x1>
     2b8:	e2 17       	cp	r30, r18
     2ba:	f3 07       	cpc	r31, r19
     2bc:	71 f0       	breq	.+28     	; 0x2da <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2be:	22 81       	ldd	r18, Z+2	; 0x02
     2c0:	33 81       	ldd	r19, Z+3	; 0x03
     2c2:	82 0f       	add	r24, r18
     2c4:	93 1f       	adc	r25, r19
     2c6:	9b 83       	std	Y+3, r25	; 0x03
     2c8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2ca:	ed 91       	ld	r30, X+
     2cc:	fc 91       	ld	r31, X
     2ce:	11 97       	sbiw	r26, 0x01	; 1
     2d0:	80 81       	ld	r24, Z
     2d2:	91 81       	ldd	r25, Z+1	; 0x01
     2d4:	99 83       	std	Y+1, r25	; 0x01
     2d6:	88 83       	st	Y, r24
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2da:	39 83       	std	Y+1, r19	; 0x01
     2dc:	28 83       	st	Y, r18
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2e0:	f9 83       	std	Y+1, r31	; 0x01
     2e2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e4:	ca 17       	cp	r28, r26
     2e6:	db 07       	cpc	r29, r27
     2e8:	11 f0       	breq	.+4      	; 0x2ee <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2ea:	cd 93       	st	X+, r28
     2ec:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     302:	9f d7       	rcall	.+3902   	; 0x1242 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     304:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <pxEnd>
     308:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <pxEnd+0x1>
     30c:	89 2b       	or	r24, r25
        {
            prvHeapInit();
     30e:	09 f4       	brne	.+2      	; 0x312 <pvPortMalloc+0x1e>
     310:	7e df       	rcall	.-260    	; 0x20e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     312:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     316:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <__data_end+0x1>
     31a:	80 23       	and	r24, r16
     31c:	91 23       	and	r25, r17
     31e:	89 2b       	or	r24, r25
     320:	09 f0       	breq	.+2      	; 0x324 <pvPortMalloc+0x30>
     322:	76 c0       	rjmp	.+236    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     324:	01 15       	cp	r16, r1
     326:	11 05       	cpc	r17, r1
     328:	49 f0       	breq	.+18     	; 0x33c <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     32a:	c8 01       	movw	r24, r16
     32c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     32e:	08 17       	cp	r16, r24
     330:	19 07       	cpc	r17, r25
     332:	18 f0       	brcs	.+6      	; 0x33a <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     334:	00 e0       	ldi	r16, 0x00	; 0
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	01 c0       	rjmp	.+2      	; 0x33c <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     33a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     33c:	01 15       	cp	r16, r1
     33e:	11 05       	cpc	r17, r1
     340:	09 f4       	brne	.+2      	; 0x344 <pvPortMalloc+0x50>
     342:	69 c0       	rjmp	.+210    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     344:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <xFreeBytesRemaining>
     348:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <xFreeBytesRemaining+0x1>
     34c:	80 17       	cp	r24, r16
     34e:	91 07       	cpc	r25, r17
     350:	08 f4       	brcc	.+2      	; 0x354 <pvPortMalloc+0x60>
     352:	64 c0       	rjmp	.+200    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     354:	c0 91 b0 02 	lds	r28, 0x02B0	; 0x8002b0 <xStart>
     358:	d0 91 b1 02 	lds	r29, 0x02B1	; 0x8002b1 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     35c:	e0 eb       	ldi	r30, 0xB0	; 176
     35e:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     360:	02 c0       	rjmp	.+4      	; 0x366 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     362:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     364:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     366:	8a 81       	ldd	r24, Y+2	; 0x02
     368:	9b 81       	ldd	r25, Y+3	; 0x03
     36a:	80 17       	cp	r24, r16
     36c:	91 07       	cpc	r25, r17
     36e:	20 f4       	brcc	.+8      	; 0x378 <pvPortMalloc+0x84>
     370:	88 81       	ld	r24, Y
     372:	99 81       	ldd	r25, Y+1	; 0x01
     374:	00 97       	sbiw	r24, 0x00	; 0
     376:	a9 f7       	brne	.-22     	; 0x362 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     378:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <pxEnd>
     37c:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <pxEnd+0x1>
     380:	c8 17       	cp	r28, r24
     382:	d9 07       	cpc	r29, r25
     384:	09 f4       	brne	.+2      	; 0x388 <pvPortMalloc+0x94>
     386:	4d c0       	rjmp	.+154    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     388:	e0 80       	ld	r14, Z
     38a:	f1 80       	ldd	r15, Z+1	; 0x01
     38c:	84 e0       	ldi	r24, 0x04	; 4
     38e:	e8 0e       	add	r14, r24
     390:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     392:	88 81       	ld	r24, Y
     394:	99 81       	ldd	r25, Y+1	; 0x01
     396:	91 83       	std	Z+1, r25	; 0x01
     398:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     39a:	2a 81       	ldd	r18, Y+2	; 0x02
     39c:	3b 81       	ldd	r19, Y+3	; 0x03
     39e:	20 1b       	sub	r18, r16
     3a0:	31 0b       	sbc	r19, r17
     3a2:	29 30       	cpi	r18, 0x09	; 9
     3a4:	31 05       	cpc	r19, r1
     3a6:	48 f0       	brcs	.+18     	; 0x3ba <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3a8:	ce 01       	movw	r24, r28
     3aa:	80 0f       	add	r24, r16
     3ac:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3ae:	fc 01       	movw	r30, r24
     3b0:	33 83       	std	Z+3, r19	; 0x03
     3b2:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3b4:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3b6:	0a 83       	std	Y+2, r16	; 0x02
     3b8:	53 df       	rcall	.-346    	; 0x260 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3ba:	2a 81       	ldd	r18, Y+2	; 0x02
     3bc:	3b 81       	ldd	r19, Y+3	; 0x03
     3be:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <xFreeBytesRemaining>
     3c2:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <xFreeBytesRemaining+0x1>
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <xFreeBytesRemaining+0x1>
     3ce:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d2:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <xMinimumEverFreeBytesRemaining>
     3d6:	50 91 ab 02 	lds	r21, 0x02AB	; 0x8002ab <xMinimumEverFreeBytesRemaining+0x1>
     3da:	84 17       	cp	r24, r20
     3dc:	95 07       	cpc	r25, r21
     3de:	20 f4       	brcc	.+8      	; 0x3e8 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3e0:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <xMinimumEverFreeBytesRemaining+0x1>
     3e4:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3e8:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     3ec:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <__data_end+0x1>
     3f0:	28 2b       	or	r18, r24
     3f2:	39 2b       	or	r19, r25
     3f4:	3b 83       	std	Y+3, r19	; 0x03
     3f6:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3f8:	19 82       	std	Y+1, r1	; 0x01
     3fa:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     3fc:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <xNumberOfSuccessfulAllocations>
     400:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <xNumberOfSuccessfulAllocations+0x1>
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <xNumberOfSuccessfulAllocations+0x1>
     40a:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <xNumberOfSuccessfulAllocations>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     410:	e1 2c       	mov	r14, r1
     412:	f1 2c       	mov	r15, r1
     414:	08 c0       	rjmp	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     416:	e1 2c       	mov	r14, r1
     418:	f1 2c       	mov	r15, r1
     41a:	05 c0       	rjmp	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     41c:	e1 2c       	mov	r14, r1
     41e:	f1 2c       	mov	r15, r1
     420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     426:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     42a:	e1 14       	cp	r14, r1
     42c:	f1 04       	cpc	r15, r1
     42e:	11 f4       	brne	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     430:	0e 94 13 11 	call	0x2226	; 0x2226 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     434:	c7 01       	movw	r24, r14
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	89 f1       	breq	.+98     	; 0x4b2 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     450:	ec 01       	movw	r28, r24
     452:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     454:	4a 81       	ldd	r20, Y+2	; 0x02
     456:	5b 81       	ldd	r21, Y+3	; 0x03
     458:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__data_end>
     45c:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__data_end+0x1>
     460:	ba 01       	movw	r22, r20
     462:	62 23       	and	r22, r18
     464:	73 23       	and	r23, r19
     466:	67 2b       	or	r22, r23
     468:	21 f1       	breq	.+72     	; 0x4b2 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     46a:	68 81       	ld	r22, Y
     46c:	79 81       	ldd	r23, Y+1	; 0x01
     46e:	67 2b       	or	r22, r23
     470:	01 f5       	brne	.+64     	; 0x4b2 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     472:	20 95       	com	r18
     474:	30 95       	com	r19
     476:	24 23       	and	r18, r20
     478:	35 23       	and	r19, r21
     47a:	3b 83       	std	Y+3, r19	; 0x03
     47c:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     47e:	e1 d6       	rcall	.+3522   	; 0x1242 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	9b 81       	ldd	r25, Y+3	; 0x03
     484:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <xFreeBytesRemaining>
     488:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <xFreeBytesRemaining+0x1>
     48c:	82 0f       	add	r24, r18
     48e:	93 1f       	adc	r25, r19
     490:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <xFreeBytesRemaining+0x1>
     494:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     498:	ce 01       	movw	r24, r28
     49a:	e2 de       	rcall	.-572    	; 0x260 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     49c:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <xNumberOfSuccessfulFrees>
     4a0:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <xNumberOfSuccessfulFrees+0x1>
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <xNumberOfSuccessfulFrees+0x1>
     4aa:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4ae:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4bc:	fc 01       	movw	r30, r24
     4be:	03 96       	adiw	r24, 0x03	; 3
     4c0:	92 83       	std	Z+2, r25	; 0x02
     4c2:	81 83       	std	Z+1, r24	; 0x01
     4c4:	4f ef       	ldi	r20, 0xFF	; 255
     4c6:	5f ef       	ldi	r21, 0xFF	; 255
     4c8:	ba 01       	movw	r22, r20
     4ca:	43 83       	std	Z+3, r20	; 0x03
     4cc:	54 83       	std	Z+4, r21	; 0x04
     4ce:	65 83       	std	Z+5, r22	; 0x05
     4d0:	76 83       	std	Z+6, r23	; 0x06
     4d2:	90 87       	std	Z+8, r25	; 0x08
     4d4:	87 83       	std	Z+7, r24	; 0x07
     4d6:	92 87       	std	Z+10, r25	; 0x0a
     4d8:	81 87       	std	Z+9, r24	; 0x09
     4da:	10 82       	st	Z, r1
     4dc:	08 95       	ret

000004de <vListInitialiseItem>:
     4de:	fc 01       	movw	r30, r24
     4e0:	13 86       	std	Z+11, r1	; 0x0b
     4e2:	12 86       	std	Z+10, r1	; 0x0a
     4e4:	08 95       	ret

000004e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f0:	08 81       	ld	r16, Y
     4f2:	19 81       	ldd	r17, Y+1	; 0x01
     4f4:	2a 81       	ldd	r18, Y+2	; 0x02
     4f6:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4f8:	0f 3f       	cpi	r16, 0xFF	; 255
     4fa:	4f ef       	ldi	r20, 0xFF	; 255
     4fc:	14 07       	cpc	r17, r20
     4fe:	24 07       	cpc	r18, r20
     500:	34 07       	cpc	r19, r20
     502:	21 f4       	brne	.+8      	; 0x50c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     504:	fc 01       	movw	r30, r24
     506:	a1 85       	ldd	r26, Z+9	; 0x09
     508:	b2 85       	ldd	r27, Z+10	; 0x0a
     50a:	11 c0       	rjmp	.+34     	; 0x52e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     50c:	dc 01       	movw	r26, r24
     50e:	13 96       	adiw	r26, 0x03	; 3
     510:	01 c0       	rjmp	.+2      	; 0x514 <vListInsert+0x2e>
     512:	df 01       	movw	r26, r30
     514:	14 96       	adiw	r26, 0x04	; 4
     516:	ed 91       	ld	r30, X+
     518:	fc 91       	ld	r31, X
     51a:	15 97       	sbiw	r26, 0x05	; 5
     51c:	40 81       	ld	r20, Z
     51e:	51 81       	ldd	r21, Z+1	; 0x01
     520:	62 81       	ldd	r22, Z+2	; 0x02
     522:	73 81       	ldd	r23, Z+3	; 0x03
     524:	04 17       	cp	r16, r20
     526:	15 07       	cpc	r17, r21
     528:	26 07       	cpc	r18, r22
     52a:	37 07       	cpc	r19, r23
     52c:	90 f7       	brcc	.-28     	; 0x512 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     52e:	14 96       	adiw	r26, 0x04	; 4
     530:	ed 91       	ld	r30, X+
     532:	fc 91       	ld	r31, X
     534:	15 97       	sbiw	r26, 0x05	; 5
     536:	fd 83       	std	Y+5, r31	; 0x05
     538:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     53a:	d7 83       	std	Z+7, r29	; 0x07
     53c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     53e:	bf 83       	std	Y+7, r27	; 0x07
     540:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     542:	15 96       	adiw	r26, 0x05	; 5
     544:	dc 93       	st	X, r29
     546:	ce 93       	st	-X, r28
     548:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     54a:	9b 87       	std	Y+11, r25	; 0x0b
     54c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     54e:	fc 01       	movw	r30, r24
     550:	20 81       	ld	r18, Z
     552:	2f 5f       	subi	r18, 0xFF	; 255
     554:	20 83       	st	Z, r18
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     566:	a2 85       	ldd	r26, Z+10	; 0x0a
     568:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     56a:	c4 81       	ldd	r28, Z+4	; 0x04
     56c:	d5 81       	ldd	r29, Z+5	; 0x05
     56e:	86 81       	ldd	r24, Z+6	; 0x06
     570:	97 81       	ldd	r25, Z+7	; 0x07
     572:	9f 83       	std	Y+7, r25	; 0x07
     574:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     576:	c6 81       	ldd	r28, Z+6	; 0x06
     578:	d7 81       	ldd	r29, Z+7	; 0x07
     57a:	84 81       	ldd	r24, Z+4	; 0x04
     57c:	95 81       	ldd	r25, Z+5	; 0x05
     57e:	9d 83       	std	Y+5, r25	; 0x05
     580:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     582:	11 96       	adiw	r26, 0x01	; 1
     584:	8d 91       	ld	r24, X+
     586:	9c 91       	ld	r25, X
     588:	12 97       	sbiw	r26, 0x02	; 2
     58a:	e8 17       	cp	r30, r24
     58c:	f9 07       	cpc	r31, r25
     58e:	31 f4       	brne	.+12     	; 0x59c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     590:	86 81       	ldd	r24, Z+6	; 0x06
     592:	97 81       	ldd	r25, Z+7	; 0x07
     594:	12 96       	adiw	r26, 0x02	; 2
     596:	9c 93       	st	X, r25
     598:	8e 93       	st	-X, r24
     59a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     59c:	13 86       	std	Z+11, r1	; 0x0b
     59e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5a0:	8c 91       	ld	r24, X
     5a2:	81 50       	subi	r24, 0x01	; 1
     5a4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5a6:	8c 91       	ld	r24, X
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5ae:	a8 95       	wdr
     5b0:	90 ec       	ldi	r25, 0xC0	; 192
     5b2:	88 e1       	ldi	r24, 0x18	; 24
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	a8 95       	wdr
     5ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c4:	08 95       	ret

000005c6 <pxPortInitialiseStack>:
     5c6:	fc 01       	movw	r30, r24
     5c8:	60 83       	st	Z, r22
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	70 83       	st	Z, r23
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	10 82       	st	Z, r1
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	10 82       	st	Z, r1
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	20 e8       	ldi	r18, 0x80	; 128
     5da:	20 83       	st	Z, r18
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	10 82       	st	Z, r1
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	10 82       	st	Z, r1
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	10 82       	st	Z, r1
     5e8:	77 97       	sbiw	r30, 0x17	; 23
     5ea:	40 83       	st	Z, r20
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	50 83       	st	Z, r21
     5f0:	86 97       	sbiw	r24, 0x26	; 38
     5f2:	08 95       	ret

000005f4 <xPortStartScheduler>:
     5f4:	dc df       	rcall	.-72     	; 0x5ae <prvSetupTimerInterrupt>
     5f6:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <pxCurrentTCB>
     5fa:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
     5fe:	cd 91       	ld	r28, X+
     600:	cd bf       	out	0x3d, r28	; 61
     602:	dd 91       	ld	r29, X+
     604:	de bf       	out	0x3e, r29	; 62
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	bf 91       	pop	r27
     610:	af 91       	pop	r26
     612:	9f 91       	pop	r25
     614:	8f 91       	pop	r24
     616:	7f 91       	pop	r23
     618:	6f 91       	pop	r22
     61a:	5f 91       	pop	r21
     61c:	4f 91       	pop	r20
     61e:	3f 91       	pop	r19
     620:	2f 91       	pop	r18
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	bf 90       	pop	r11
     630:	af 90       	pop	r10
     632:	9f 90       	pop	r9
     634:	8f 90       	pop	r8
     636:	7f 90       	pop	r7
     638:	6f 90       	pop	r6
     63a:	5f 90       	pop	r5
     63c:	4f 90       	pop	r4
     63e:	3f 90       	pop	r3
     640:	2f 90       	pop	r2
     642:	1f 90       	pop	r1
     644:	0f 90       	pop	r0
     646:	0c be       	out	0x3c, r0	; 60
     648:	0f 90       	pop	r0
     64a:	0b be       	out	0x3b, r0	; 59
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	08 95       	ret
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	08 95       	ret

00000658 <vPortYield>:
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	0f 92       	push	r0
     660:	0b b6       	in	r0, 0x3b	; 59
     662:	0f 92       	push	r0
     664:	0c b6       	in	r0, 0x3c	; 60
     666:	0f 92       	push	r0
     668:	1f 92       	push	r1
     66a:	11 24       	eor	r1, r1
     66c:	2f 92       	push	r2
     66e:	3f 92       	push	r3
     670:	4f 92       	push	r4
     672:	5f 92       	push	r5
     674:	6f 92       	push	r6
     676:	7f 92       	push	r7
     678:	8f 92       	push	r8
     67a:	9f 92       	push	r9
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	2f 93       	push	r18
     68e:	3f 93       	push	r19
     690:	4f 93       	push	r20
     692:	5f 93       	push	r21
     694:	6f 93       	push	r22
     696:	7f 93       	push	r23
     698:	8f 93       	push	r24
     69a:	9f 93       	push	r25
     69c:	af 93       	push	r26
     69e:	bf 93       	push	r27
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
     6a8:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <pxCurrentTCB>
     6ac:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
     6b0:	0d b6       	in	r0, 0x3d	; 61
     6b2:	0d 92       	st	X+, r0
     6b4:	0e b6       	in	r0, 0x3e	; 62
     6b6:	0d 92       	st	X+, r0
     6b8:	0e 94 bd 0b 	call	0x177a	; 0x177a <vTaskSwitchContext>
     6bc:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <pxCurrentTCB>
     6c0:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
     6c4:	cd 91       	ld	r28, X+
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	dd 91       	ld	r29, X+
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	ff 91       	pop	r31
     6ce:	ef 91       	pop	r30
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	bf 90       	pop	r11
     6f6:	af 90       	pop	r10
     6f8:	9f 90       	pop	r9
     6fa:	8f 90       	pop	r8
     6fc:	7f 90       	pop	r7
     6fe:	6f 90       	pop	r6
     700:	5f 90       	pop	r5
     702:	4f 90       	pop	r4
     704:	3f 90       	pop	r3
     706:	2f 90       	pop	r2
     708:	1f 90       	pop	r1
     70a:	0f 90       	pop	r0
     70c:	0c be       	out	0x3c, r0	; 60
     70e:	0f 90       	pop	r0
     710:	0b be       	out	0x3b, r0	; 59
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	08 95       	ret

0000071a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	0f 92       	push	r0
     722:	0b b6       	in	r0, 0x3b	; 59
     724:	0f 92       	push	r0
     726:	0c b6       	in	r0, 0x3c	; 60
     728:	0f 92       	push	r0
     72a:	1f 92       	push	r1
     72c:	11 24       	eor	r1, r1
     72e:	2f 92       	push	r2
     730:	3f 92       	push	r3
     732:	4f 92       	push	r4
     734:	5f 92       	push	r5
     736:	6f 92       	push	r6
     738:	7f 92       	push	r7
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	2f 93       	push	r18
     750:	3f 93       	push	r19
     752:	4f 93       	push	r20
     754:	5f 93       	push	r21
     756:	6f 93       	push	r22
     758:	7f 93       	push	r23
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	ef 93       	push	r30
     768:	ff 93       	push	r31
     76a:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <pxCurrentTCB>
     76e:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
     772:	0d b6       	in	r0, 0x3d	; 61
     774:	0d 92       	st	X+, r0
     776:	0e b6       	in	r0, 0x3e	; 62
     778:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     77a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     77c:	76 d5       	rcall	.+2796   	; 0x126a <xTaskIncrementTick>
     77e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     780:	fc d7       	rcall	.+4088   	; 0x177a <vTaskSwitchContext>
     782:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     786:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
     78a:	cd 91       	ld	r28, X+
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	dd 91       	ld	r29, X+
     790:	de bf       	out	0x3e, r29	; 62
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	bf 91       	pop	r27
     79c:	af 91       	pop	r26
     79e:	9f 91       	pop	r25
     7a0:	8f 91       	pop	r24
     7a2:	7f 91       	pop	r23
     7a4:	6f 91       	pop	r22
     7a6:	5f 91       	pop	r21
     7a8:	4f 91       	pop	r20
     7aa:	3f 91       	pop	r19
     7ac:	2f 91       	pop	r18
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	af 90       	pop	r10
     7be:	9f 90       	pop	r9
     7c0:	8f 90       	pop	r8
     7c2:	7f 90       	pop	r7
     7c4:	6f 90       	pop	r6
     7c6:	5f 90       	pop	r5
     7c8:	4f 90       	pop	r4
     7ca:	3f 90       	pop	r3
     7cc:	2f 90       	pop	r2
     7ce:	1f 90       	pop	r1
     7d0:	0f 90       	pop	r0
     7d2:	0c be       	out	0x3c, r0	; 60
     7d4:	0f 90       	pop	r0
     7d6:	0b be       	out	0x3b, r0	; 59
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	08 95       	ret

000007e0 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     7e0:	9c df       	rcall	.-200    	; 0x71a <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     7e2:	18 95       	reti

000007e4 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	0f 92       	push	r0
     7ea:	fc 01       	movw	r30, r24
     7ec:	86 8d       	ldd	r24, Z+30	; 0x1e
     7ee:	81 11       	cpse	r24, r1
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <prvIsQueueEmpty+0x12>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <prvIsQueueEmpty+0x14>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	08 95       	ret

000007fe <prvIsQueueFull>:
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	0f 92       	push	r0
     804:	fc 01       	movw	r30, r24
     806:	26 8d       	ldd	r18, Z+30	; 0x1e
     808:	87 8d       	ldd	r24, Z+31	; 0x1f
     80a:	28 13       	cpse	r18, r24
     80c:	02 c0       	rjmp	.+4      	; 0x812 <prvIsQueueFull+0x14>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	01 c0       	rjmp	.+2      	; 0x814 <prvIsQueueFull+0x16>
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	08 95       	ret

0000081a <prvCopyDataToQueue>:
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
     824:	04 2f       	mov	r16, r20
     826:	1e 8d       	ldd	r17, Y+30	; 0x1e
     828:	48 a1       	ldd	r20, Y+32	; 0x20
     82a:	41 11       	cpse	r20, r1
     82c:	0c c0       	rjmp	.+24     	; 0x846 <prvCopyDataToQueue+0x2c>
     82e:	88 81       	ld	r24, Y
     830:	99 81       	ldd	r25, Y+1	; 0x01
     832:	89 2b       	or	r24, r25
     834:	09 f0       	breq	.+2      	; 0x838 <prvCopyDataToQueue+0x1e>
     836:	42 c0       	rjmp	.+132    	; 0x8bc <prvCopyDataToQueue+0xa2>
     838:	8c 81       	ldd	r24, Y+4	; 0x04
     83a:	9d 81       	ldd	r25, Y+5	; 0x05
     83c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <xTaskPriorityDisinherit>
     840:	1d 82       	std	Y+5, r1	; 0x05
     842:	1c 82       	std	Y+4, r1	; 0x04
     844:	42 c0       	rjmp	.+132    	; 0x8ca <prvCopyDataToQueue+0xb0>
     846:	01 11       	cpse	r16, r1
     848:	17 c0       	rjmp	.+46     	; 0x878 <prvCopyDataToQueue+0x5e>
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	9b 81       	ldd	r25, Y+3	; 0x03
     850:	0e 94 be 1a 	call	0x357c	; 0x357c <memcpy>
     854:	28 a1       	ldd	r18, Y+32	; 0x20
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	9b 81       	ldd	r25, Y+3	; 0x03
     85a:	82 0f       	add	r24, r18
     85c:	91 1d       	adc	r25, r1
     85e:	9b 83       	std	Y+3, r25	; 0x03
     860:	8a 83       	std	Y+2, r24	; 0x02
     862:	2c 81       	ldd	r18, Y+4	; 0x04
     864:	3d 81       	ldd	r19, Y+5	; 0x05
     866:	82 17       	cp	r24, r18
     868:	93 07       	cpc	r25, r19
     86a:	50 f1       	brcs	.+84     	; 0x8c0 <prvCopyDataToQueue+0xa6>
     86c:	88 81       	ld	r24, Y
     86e:	99 81       	ldd	r25, Y+1	; 0x01
     870:	9b 83       	std	Y+3, r25	; 0x03
     872:	8a 83       	std	Y+2, r24	; 0x02
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	29 c0       	rjmp	.+82     	; 0x8ca <prvCopyDataToQueue+0xb0>
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	9f 81       	ldd	r25, Y+7	; 0x07
     87e:	0e 94 be 1a 	call	0x357c	; 0x357c <memcpy>
     882:	88 a1       	ldd	r24, Y+32	; 0x20
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	91 95       	neg	r25
     888:	81 95       	neg	r24
     88a:	91 09       	sbc	r25, r1
     88c:	2e 81       	ldd	r18, Y+6	; 0x06
     88e:	3f 81       	ldd	r19, Y+7	; 0x07
     890:	28 0f       	add	r18, r24
     892:	39 1f       	adc	r19, r25
     894:	3f 83       	std	Y+7, r19	; 0x07
     896:	2e 83       	std	Y+6, r18	; 0x06
     898:	48 81       	ld	r20, Y
     89a:	59 81       	ldd	r21, Y+1	; 0x01
     89c:	24 17       	cp	r18, r20
     89e:	35 07       	cpc	r19, r21
     8a0:	30 f4       	brcc	.+12     	; 0x8ae <prvCopyDataToQueue+0x94>
     8a2:	2c 81       	ldd	r18, Y+4	; 0x04
     8a4:	3d 81       	ldd	r19, Y+5	; 0x05
     8a6:	82 0f       	add	r24, r18
     8a8:	93 1f       	adc	r25, r19
     8aa:	9f 83       	std	Y+7, r25	; 0x07
     8ac:	8e 83       	std	Y+6, r24	; 0x06
     8ae:	02 30       	cpi	r16, 0x02	; 2
     8b0:	49 f4       	brne	.+18     	; 0x8c4 <prvCopyDataToQueue+0xaa>
     8b2:	11 23       	and	r17, r17
     8b4:	49 f0       	breq	.+18     	; 0x8c8 <prvCopyDataToQueue+0xae>
     8b6:	11 50       	subi	r17, 0x01	; 1
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	07 c0       	rjmp	.+14     	; 0x8ca <prvCopyDataToQueue+0xb0>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <prvCopyDataToQueue+0xb0>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <prvCopyDataToQueue+0xb0>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <prvCopyDataToQueue+0xb0>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	1f 5f       	subi	r17, 0xFF	; 255
     8cc:	1e 8f       	std	Y+30, r17	; 0x1e
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <prvCopyDataFromQueue>:
     8d8:	fc 01       	movw	r30, r24
     8da:	40 a1       	ldd	r20, Z+32	; 0x20
     8dc:	44 23       	and	r20, r20
     8de:	a9 f0       	breq	.+42     	; 0x90a <prvCopyDataFromQueue+0x32>
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	26 81       	ldd	r18, Z+6	; 0x06
     8e4:	37 81       	ldd	r19, Z+7	; 0x07
     8e6:	24 0f       	add	r18, r20
     8e8:	35 1f       	adc	r19, r21
     8ea:	37 83       	std	Z+7, r19	; 0x07
     8ec:	26 83       	std	Z+6, r18	; 0x06
     8ee:	84 81       	ldd	r24, Z+4	; 0x04
     8f0:	95 81       	ldd	r25, Z+5	; 0x05
     8f2:	28 17       	cp	r18, r24
     8f4:	39 07       	cpc	r19, r25
     8f6:	20 f0       	brcs	.+8      	; 0x900 <prvCopyDataFromQueue+0x28>
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	97 83       	std	Z+7, r25	; 0x07
     8fe:	86 83       	std	Z+6, r24	; 0x06
     900:	cb 01       	movw	r24, r22
     902:	66 81       	ldd	r22, Z+6	; 0x06
     904:	77 81       	ldd	r23, Z+7	; 0x07
     906:	0c 94 be 1a 	jmp	0x357c	; 0x357c <memcpy>
     90a:	08 95       	ret

0000090c <prvUnlockQueue>:
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	0f 92       	push	r0
     91a:	1a a1       	ldd	r17, Y+34	; 0x22
     91c:	0a c0       	rjmp	.+20     	; 0x932 <prvUnlockQueue+0x26>
     91e:	8b 89       	ldd	r24, Y+19	; 0x13
     920:	88 23       	and	r24, r24
     922:	49 f0       	breq	.+18     	; 0x936 <prvUnlockQueue+0x2a>
     924:	ce 01       	movw	r24, r28
     926:	43 96       	adiw	r24, 0x13	; 19
     928:	e5 d7       	rcall	.+4042   	; 0x18f4 <xTaskRemoveFromEventList>
     92a:	81 11       	cpse	r24, r1
     92c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <vTaskMissedYield>
     930:	11 50       	subi	r17, 0x01	; 1
     932:	11 16       	cp	r1, r17
     934:	a4 f3       	brlt	.-24     	; 0x91e <prvUnlockQueue+0x12>
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	8a a3       	std	Y+34, r24	; 0x22
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	0f 92       	push	r0
     944:	19 a1       	ldd	r17, Y+33	; 0x21
     946:	0a c0       	rjmp	.+20     	; 0x95c <prvUnlockQueue+0x50>
     948:	88 85       	ldd	r24, Y+8	; 0x08
     94a:	88 23       	and	r24, r24
     94c:	49 f0       	breq	.+18     	; 0x960 <prvUnlockQueue+0x54>
     94e:	ce 01       	movw	r24, r28
     950:	08 96       	adiw	r24, 0x08	; 8
     952:	d0 d7       	rcall	.+4000   	; 0x18f4 <xTaskRemoveFromEventList>
     954:	81 11       	cpse	r24, r1
     956:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <vTaskMissedYield>
     95a:	11 50       	subi	r17, 0x01	; 1
     95c:	11 16       	cp	r1, r17
     95e:	a4 f3       	brlt	.-24     	; 0x948 <prvUnlockQueue+0x3c>
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	89 a3       	std	Y+33, r24	; 0x21
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	08 95       	ret

00000970 <xQueueGenericReset>:
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ec 01       	movw	r28, r24
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	0f 92       	push	r0
     97c:	e8 81       	ld	r30, Y
     97e:	f9 81       	ldd	r31, Y+1	; 0x01
     980:	8f 8d       	ldd	r24, Y+31	; 0x1f
     982:	28 a1       	ldd	r18, Y+32	; 0x20
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	82 9f       	mul	r24, r18
     98a:	a0 01       	movw	r20, r0
     98c:	83 9f       	mul	r24, r19
     98e:	50 0d       	add	r21, r0
     990:	92 9f       	mul	r25, r18
     992:	50 0d       	add	r21, r0
     994:	11 24       	eor	r1, r1
     996:	4e 0f       	add	r20, r30
     998:	5f 1f       	adc	r21, r31
     99a:	5d 83       	std	Y+5, r21	; 0x05
     99c:	4c 83       	std	Y+4, r20	; 0x04
     99e:	1e 8e       	std	Y+30, r1	; 0x1e
     9a0:	fb 83       	std	Y+3, r31	; 0x03
     9a2:	ea 83       	std	Y+2, r30	; 0x02
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	28 9f       	mul	r18, r24
     9a8:	a0 01       	movw	r20, r0
     9aa:	29 9f       	mul	r18, r25
     9ac:	50 0d       	add	r21, r0
     9ae:	38 9f       	mul	r19, r24
     9b0:	50 0d       	add	r21, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	cf 01       	movw	r24, r30
     9b6:	84 0f       	add	r24, r20
     9b8:	95 1f       	adc	r25, r21
     9ba:	9f 83       	std	Y+7, r25	; 0x07
     9bc:	8e 83       	std	Y+6, r24	; 0x06
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	89 a3       	std	Y+33, r24	; 0x21
     9c2:	8a a3       	std	Y+34, r24	; 0x22
     9c4:	61 11       	cpse	r22, r1
     9c6:	0a c0       	rjmp	.+20     	; 0x9dc <xQueueGenericReset+0x6c>
     9c8:	88 85       	ldd	r24, Y+8	; 0x08
     9ca:	88 23       	and	r24, r24
     9cc:	69 f0       	breq	.+26     	; 0x9e8 <xQueueGenericReset+0x78>
     9ce:	ce 01       	movw	r24, r28
     9d0:	08 96       	adiw	r24, 0x08	; 8
     9d2:	90 d7       	rcall	.+3872   	; 0x18f4 <xTaskRemoveFromEventList>
     9d4:	88 23       	and	r24, r24
     9d6:	41 f0       	breq	.+16     	; 0x9e8 <xQueueGenericReset+0x78>
     9d8:	3f de       	rcall	.-898    	; 0x658 <vPortYield>
     9da:	06 c0       	rjmp	.+12     	; 0x9e8 <xQueueGenericReset+0x78>
     9dc:	ce 01       	movw	r24, r28
     9de:	08 96       	adiw	r24, 0x08	; 8
     9e0:	6d dd       	rcall	.-1318   	; 0x4bc <vListInitialise>
     9e2:	ce 01       	movw	r24, r28
     9e4:	43 96       	adiw	r24, 0x13	; 19
     9e6:	6a dd       	rcall	.-1324   	; 0x4bc <vListInitialise>
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <prvInitialiseNewQueue>:
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	f8 01       	movw	r30, r16
     9fa:	61 11       	cpse	r22, r1
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <prvInitialiseNewQueue+0x10>
     9fe:	11 83       	std	Z+1, r17	; 0x01
     a00:	00 83       	st	Z, r16
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <prvInitialiseNewQueue+0x14>
     a04:	51 83       	std	Z+1, r21	; 0x01
     a06:	40 83       	st	Z, r20
     a08:	87 8f       	std	Z+31, r24	; 0x1f
     a0a:	60 a3       	std	Z+32, r22	; 0x20
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	cf 01       	movw	r24, r30
     a10:	af df       	rcall	.-162    	; 0x970 <xQueueGenericReset>
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <xQueueGenericCreate>:
     a18:	df 92       	push	r13
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	f8 2e       	mov	r15, r24
     a28:	e6 2e       	mov	r14, r22
     a2a:	d4 2e       	mov	r13, r20
     a2c:	86 9f       	mul	r24, r22
     a2e:	c0 01       	movw	r24, r0
     a30:	11 24       	eor	r1, r1
     a32:	83 96       	adiw	r24, 0x23	; 35
     a34:	5f dc       	rcall	.-1858   	; 0x2f4 <pvPortMalloc>
     a36:	ec 01       	movw	r28, r24
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	41 f0       	breq	.+16     	; 0xa4c <xQueueGenericCreate+0x34>
     a3c:	8c 01       	movw	r16, r24
     a3e:	2d 2d       	mov	r18, r13
     a40:	ac 01       	movw	r20, r24
     a42:	4d 5d       	subi	r20, 0xDD	; 221
     a44:	5f 4f       	sbci	r21, 0xFF	; 255
     a46:	6e 2d       	mov	r22, r14
     a48:	8f 2d       	mov	r24, r15
     a4a:	d4 df       	rcall	.-88     	; 0x9f4 <prvInitialiseNewQueue>
     a4c:	ce 01       	movw	r24, r28
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	08 95       	ret

00000a5e <xQueueGenericSend>:
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	29 97       	sbiw	r28, 0x09	; 9
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	7c 01       	movw	r14, r24
     a80:	6b 01       	movw	r12, r22
     a82:	2e 83       	std	Y+6, r18	; 0x06
     a84:	3f 83       	std	Y+7, r19	; 0x07
     a86:	48 87       	std	Y+8, r20	; 0x08
     a88:	59 87       	std	Y+9, r21	; 0x09
     a8a:	10 e0       	ldi	r17, 0x00	; 0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	0f 92       	push	r0
     a92:	f7 01       	movw	r30, r14
     a94:	96 8d       	ldd	r25, Z+30	; 0x1e
     a96:	87 8d       	ldd	r24, Z+31	; 0x1f
     a98:	98 17       	cp	r25, r24
     a9a:	10 f0       	brcs	.+4      	; 0xaa0 <xQueueGenericSend+0x42>
     a9c:	02 30       	cpi	r16, 0x02	; 2
     a9e:	a9 f4       	brne	.+42     	; 0xaca <xQueueGenericSend+0x6c>
     aa0:	40 2f       	mov	r20, r16
     aa2:	b6 01       	movw	r22, r12
     aa4:	c7 01       	movw	r24, r14
     aa6:	b9 de       	rcall	.-654    	; 0x81a <prvCopyDataToQueue>
     aa8:	f7 01       	movw	r30, r14
     aaa:	93 89       	ldd	r25, Z+19	; 0x13
     aac:	99 23       	and	r25, r25
     aae:	39 f0       	breq	.+14     	; 0xabe <xQueueGenericSend+0x60>
     ab0:	c7 01       	movw	r24, r14
     ab2:	43 96       	adiw	r24, 0x13	; 19
     ab4:	1f d7       	rcall	.+3646   	; 0x18f4 <xTaskRemoveFromEventList>
     ab6:	88 23       	and	r24, r24
     ab8:	21 f0       	breq	.+8      	; 0xac2 <xQueueGenericSend+0x64>
     aba:	ce dd       	rcall	.-1124   	; 0x658 <vPortYield>
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <xQueueGenericSend+0x64>
     abe:	81 11       	cpse	r24, r1
     ac0:	cb dd       	rcall	.-1130   	; 0x658 <vPortYield>
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	46 c0       	rjmp	.+140    	; 0xb56 <xQueueGenericSend+0xf8>
     aca:	8e 81       	ldd	r24, Y+6	; 0x06
     acc:	9f 81       	ldd	r25, Y+7	; 0x07
     ace:	a8 85       	ldd	r26, Y+8	; 0x08
     ad0:	b9 85       	ldd	r27, Y+9	; 0x09
     ad2:	89 2b       	or	r24, r25
     ad4:	8a 2b       	or	r24, r26
     ad6:	8b 2b       	or	r24, r27
     ad8:	21 f4       	brne	.+8      	; 0xae2 <xQueueGenericSend+0x84>
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	3a c0       	rjmp	.+116    	; 0xb56 <xQueueGenericSend+0xf8>
     ae2:	11 11       	cpse	r17, r1
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <xQueueGenericSend+0x90>
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	b3 d7       	rcall	.+3942   	; 0x1a52 <vTaskInternalSetTimeOutState>
     aec:	11 e0       	ldi	r17, 0x01	; 1
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	a7 d3       	rcall	.+1870   	; 0x1242 <vTaskSuspendAll>
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	0f 92       	push	r0
     afa:	f7 01       	movw	r30, r14
     afc:	81 a1       	ldd	r24, Z+33	; 0x21
     afe:	8f 3f       	cpi	r24, 0xFF	; 255
     b00:	09 f4       	brne	.+2      	; 0xb04 <xQueueGenericSend+0xa6>
     b02:	11 a2       	std	Z+33, r1	; 0x21
     b04:	f7 01       	movw	r30, r14
     b06:	82 a1       	ldd	r24, Z+34	; 0x22
     b08:	8f 3f       	cpi	r24, 0xFF	; 255
     b0a:	09 f4       	brne	.+2      	; 0xb0e <xQueueGenericSend+0xb0>
     b0c:	12 a2       	std	Z+34, r1	; 0x22
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	be 01       	movw	r22, r28
     b14:	6a 5f       	subi	r22, 0xFA	; 250
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	ab d7       	rcall	.+3926   	; 0x1a74 <xTaskCheckForTimeOut>
     b1e:	81 11       	cpse	r24, r1
     b20:	16 c0       	rjmp	.+44     	; 0xb4e <xQueueGenericSend+0xf0>
     b22:	c7 01       	movw	r24, r14
     b24:	6c de       	rcall	.-808    	; 0x7fe <prvIsQueueFull>
     b26:	88 23       	and	r24, r24
     b28:	71 f0       	breq	.+28     	; 0xb46 <xQueueGenericSend+0xe8>
     b2a:	4e 81       	ldd	r20, Y+6	; 0x06
     b2c:	5f 81       	ldd	r21, Y+7	; 0x07
     b2e:	68 85       	ldd	r22, Y+8	; 0x08
     b30:	79 85       	ldd	r23, Y+9	; 0x09
     b32:	c7 01       	movw	r24, r14
     b34:	08 96       	adiw	r24, 0x08	; 8
     b36:	85 d6       	rcall	.+3338   	; 0x1842 <vTaskPlaceOnEventList>
     b38:	c7 01       	movw	r24, r14
     b3a:	e8 de       	rcall	.-560    	; 0x90c <prvUnlockQueue>
     b3c:	c2 d4       	rcall	.+2436   	; 0x14c2 <xTaskResumeAll>
     b3e:	81 11       	cpse	r24, r1
     b40:	a5 cf       	rjmp	.-182    	; 0xa8c <xQueueGenericSend+0x2e>
     b42:	8a dd       	rcall	.-1260   	; 0x658 <vPortYield>
     b44:	a3 cf       	rjmp	.-186    	; 0xa8c <xQueueGenericSend+0x2e>
     b46:	c7 01       	movw	r24, r14
     b48:	e1 de       	rcall	.-574    	; 0x90c <prvUnlockQueue>
     b4a:	bb d4       	rcall	.+2422   	; 0x14c2 <xTaskResumeAll>
     b4c:	9f cf       	rjmp	.-194    	; 0xa8c <xQueueGenericSend+0x2e>
     b4e:	c7 01       	movw	r24, r14
     b50:	dd de       	rcall	.-582    	; 0x90c <prvUnlockQueue>
     b52:	b7 d4       	rcall	.+2414   	; 0x14c2 <xTaskResumeAll>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	29 96       	adiw	r28, 0x09	; 9
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	08 95       	ret

00000b74 <xQueueGenericSendFromISR>:
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	8a 01       	movw	r16, r20
     b82:	fc 01       	movw	r30, r24
     b84:	56 8d       	ldd	r21, Z+30	; 0x1e
     b86:	37 8d       	ldd	r19, Z+31	; 0x1f
     b88:	53 17       	cp	r21, r19
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <xQueueGenericSendFromISR+0x1c>
     b8c:	22 30       	cpi	r18, 0x02	; 2
     b8e:	f1 f4       	brne	.+60     	; 0xbcc <xQueueGenericSendFromISR+0x58>
     b90:	42 2f       	mov	r20, r18
     b92:	78 01       	movw	r14, r16
     b94:	ec 01       	movw	r28, r24
     b96:	1a a1       	ldd	r17, Y+34	; 0x22
     b98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b9a:	ce 01       	movw	r24, r28
     b9c:	3e de       	rcall	.-900    	; 0x81a <prvCopyDataToQueue>
     b9e:	1f 3f       	cpi	r17, 0xFF	; 255
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <xQueueGenericSendFromISR+0x4c>
     ba2:	8b 89       	ldd	r24, Y+19	; 0x13
     ba4:	88 23       	and	r24, r24
     ba6:	a1 f0       	breq	.+40     	; 0xbd0 <xQueueGenericSendFromISR+0x5c>
     ba8:	ce 01       	movw	r24, r28
     baa:	43 96       	adiw	r24, 0x13	; 19
     bac:	a3 d6       	rcall	.+3398   	; 0x18f4 <xTaskRemoveFromEventList>
     bae:	88 23       	and	r24, r24
     bb0:	89 f0       	breq	.+34     	; 0xbd4 <xQueueGenericSendFromISR+0x60>
     bb2:	e1 14       	cp	r14, r1
     bb4:	f1 04       	cpc	r15, r1
     bb6:	81 f0       	breq	.+32     	; 0xbd8 <xQueueGenericSendFromISR+0x64>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	f7 01       	movw	r30, r14
     bbc:	80 83       	st	Z, r24
     bbe:	0d c0       	rjmp	.+26     	; 0xbda <xQueueGenericSendFromISR+0x66>
     bc0:	ff 24       	eor	r15, r15
     bc2:	f3 94       	inc	r15
     bc4:	f1 0e       	add	r15, r17
     bc6:	fa a2       	std	Y+34, r15	; 0x22
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	07 c0       	rjmp	.+14     	; 0xbda <xQueueGenericSendFromISR+0x66>
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	05 c0       	rjmp	.+10     	; 0xbda <xQueueGenericSendFromISR+0x66>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	03 c0       	rjmp	.+6      	; 0xbda <xQueueGenericSendFromISR+0x66>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <xQueueGenericSendFromISR+0x66>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	08 95       	ret

00000be8 <xQueueReceive>:
     be8:	cf 92       	push	r12
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	29 97       	sbiw	r28, 0x09	; 9
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	8c 01       	movw	r16, r24
     c0a:	6b 01       	movw	r12, r22
     c0c:	2e 83       	std	Y+6, r18	; 0x06
     c0e:	3f 83       	std	Y+7, r19	; 0x07
     c10:	48 87       	std	Y+8, r20	; 0x08
     c12:	59 87       	std	Y+9, r21	; 0x09
     c14:	e1 2c       	mov	r14, r1
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	0f 92       	push	r0
     c1c:	f8 01       	movw	r30, r16
     c1e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c20:	ff 20       	and	r15, r15
     c22:	91 f0       	breq	.+36     	; 0xc48 <xQueueReceive+0x60>
     c24:	b6 01       	movw	r22, r12
     c26:	c8 01       	movw	r24, r16
     c28:	57 de       	rcall	.-850    	; 0x8d8 <prvCopyDataFromQueue>
     c2a:	fa 94       	dec	r15
     c2c:	f8 01       	movw	r30, r16
     c2e:	f6 8e       	std	Z+30, r15	; 0x1e
     c30:	80 85       	ldd	r24, Z+8	; 0x08
     c32:	88 23       	and	r24, r24
     c34:	29 f0       	breq	.+10     	; 0xc40 <xQueueReceive+0x58>
     c36:	c8 01       	movw	r24, r16
     c38:	08 96       	adiw	r24, 0x08	; 8
     c3a:	5c d6       	rcall	.+3256   	; 0x18f4 <xTaskRemoveFromEventList>
     c3c:	81 11       	cpse	r24, r1
     c3e:	0c dd       	rcall	.-1512   	; 0x658 <vPortYield>
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	4c c0       	rjmp	.+152    	; 0xce0 <xQueueReceive+0xf8>
     c48:	8e 81       	ldd	r24, Y+6	; 0x06
     c4a:	9f 81       	ldd	r25, Y+7	; 0x07
     c4c:	a8 85       	ldd	r26, Y+8	; 0x08
     c4e:	b9 85       	ldd	r27, Y+9	; 0x09
     c50:	89 2b       	or	r24, r25
     c52:	8a 2b       	or	r24, r26
     c54:	8b 2b       	or	r24, r27
     c56:	21 f4       	brne	.+8      	; 0xc60 <xQueueReceive+0x78>
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	40 c0       	rjmp	.+128    	; 0xce0 <xQueueReceive+0xf8>
     c60:	e1 10       	cpse	r14, r1
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <xQueueReceive+0x86>
     c64:	ce 01       	movw	r24, r28
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	f4 d6       	rcall	.+3560   	; 0x1a52 <vTaskInternalSetTimeOutState>
     c6a:	ee 24       	eor	r14, r14
     c6c:	e3 94       	inc	r14
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	e7 d2       	rcall	.+1486   	; 0x1242 <vTaskSuspendAll>
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	0f 92       	push	r0
     c7a:	f8 01       	movw	r30, r16
     c7c:	81 a1       	ldd	r24, Z+33	; 0x21
     c7e:	8f 3f       	cpi	r24, 0xFF	; 255
     c80:	09 f4       	brne	.+2      	; 0xc84 <xQueueReceive+0x9c>
     c82:	11 a2       	std	Z+33, r1	; 0x21
     c84:	f8 01       	movw	r30, r16
     c86:	82 a1       	ldd	r24, Z+34	; 0x22
     c88:	8f 3f       	cpi	r24, 0xFF	; 255
     c8a:	09 f4       	brne	.+2      	; 0xc8e <xQueueReceive+0xa6>
     c8c:	12 a2       	std	Z+34, r1	; 0x22
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	be 01       	movw	r22, r28
     c94:	6a 5f       	subi	r22, 0xFA	; 250
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	eb d6       	rcall	.+3542   	; 0x1a74 <xTaskCheckForTimeOut>
     c9e:	81 11       	cpse	r24, r1
     ca0:	16 c0       	rjmp	.+44     	; 0xcce <xQueueReceive+0xe6>
     ca2:	c8 01       	movw	r24, r16
     ca4:	9f dd       	rcall	.-1218   	; 0x7e4 <prvIsQueueEmpty>
     ca6:	88 23       	and	r24, r24
     ca8:	71 f0       	breq	.+28     	; 0xcc6 <xQueueReceive+0xde>
     caa:	4e 81       	ldd	r20, Y+6	; 0x06
     cac:	5f 81       	ldd	r21, Y+7	; 0x07
     cae:	68 85       	ldd	r22, Y+8	; 0x08
     cb0:	79 85       	ldd	r23, Y+9	; 0x09
     cb2:	c8 01       	movw	r24, r16
     cb4:	43 96       	adiw	r24, 0x13	; 19
     cb6:	c5 d5       	rcall	.+2954   	; 0x1842 <vTaskPlaceOnEventList>
     cb8:	c8 01       	movw	r24, r16
     cba:	28 de       	rcall	.-944    	; 0x90c <prvUnlockQueue>
     cbc:	02 d4       	rcall	.+2052   	; 0x14c2 <xTaskResumeAll>
     cbe:	81 11       	cpse	r24, r1
     cc0:	aa cf       	rjmp	.-172    	; 0xc16 <xQueueReceive+0x2e>
     cc2:	ca dc       	rcall	.-1644   	; 0x658 <vPortYield>
     cc4:	a8 cf       	rjmp	.-176    	; 0xc16 <xQueueReceive+0x2e>
     cc6:	c8 01       	movw	r24, r16
     cc8:	21 de       	rcall	.-958    	; 0x90c <prvUnlockQueue>
     cca:	fb d3       	rcall	.+2038   	; 0x14c2 <xTaskResumeAll>
     ccc:	a4 cf       	rjmp	.-184    	; 0xc16 <xQueueReceive+0x2e>
     cce:	c8 01       	movw	r24, r16
     cd0:	1d de       	rcall	.-966    	; 0x90c <prvUnlockQueue>
     cd2:	f7 d3       	rcall	.+2030   	; 0x14c2 <xTaskResumeAll>
     cd4:	c8 01       	movw	r24, r16
     cd6:	86 dd       	rcall	.-1268   	; 0x7e4 <prvIsQueueEmpty>
     cd8:	88 23       	and	r24, r24
     cda:	09 f4       	brne	.+2      	; 0xcde <xQueueReceive+0xf6>
     cdc:	9c cf       	rjmp	.-200    	; 0xc16 <xQueueReceive+0x2e>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	29 96       	adiw	r28, 0x09	; 9
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	08 95       	ret

00000cfe <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	0f 92       	push	r0
     d0a:	89 a1       	ldd	r24, Y+33	; 0x21
     d0c:	8f 3f       	cpi	r24, 0xFF	; 255
     d0e:	09 f4       	brne	.+2      	; 0xd12 <vQueueWaitForMessageRestricted+0x14>
     d10:	19 a2       	std	Y+33, r1	; 0x21
     d12:	8a a1       	ldd	r24, Y+34	; 0x22
     d14:	8f 3f       	cpi	r24, 0xFF	; 255
     d16:	09 f4       	brne	.+2      	; 0xd1a <vQueueWaitForMessageRestricted+0x1c>
     d18:	1a a2       	std	Y+34, r1	; 0x22
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d20:	81 11       	cpse	r24, r1
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d24:	ce 01       	movw	r24, r28
     d26:	43 96       	adiw	r24, 0x13	; 19
     d28:	a3 d5       	rcall	.+2886   	; 0x1870 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d2a:	ce 01       	movw	r24, r28
     d2c:	ef dd       	rcall	.-1058   	; 0x90c <prvUnlockQueue>
    }
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <prvResetNextTaskUnblockTime>:
     d34:	e0 91 b1 0c 	lds	r30, 0x0CB1	; 0x800cb1 <pxDelayedTaskList>
     d38:	f0 91 b2 0c 	lds	r31, 0x0CB2	; 0x800cb2 <pxDelayedTaskList+0x1>
     d3c:	80 81       	ld	r24, Z
     d3e:	81 11       	cpse	r24, r1
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <prvResetNextTaskUnblockTime+0x26>
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	9f ef       	ldi	r25, 0xFF	; 255
     d46:	dc 01       	movw	r26, r24
     d48:	80 93 7b 0c 	sts	0x0C7B, r24	; 0x800c7b <xNextTaskUnblockTime>
     d4c:	90 93 7c 0c 	sts	0x0C7C, r25	; 0x800c7c <xNextTaskUnblockTime+0x1>
     d50:	a0 93 7d 0c 	sts	0x0C7D, r26	; 0x800c7d <xNextTaskUnblockTime+0x2>
     d54:	b0 93 7e 0c 	sts	0x0C7E, r27	; 0x800c7e <xNextTaskUnblockTime+0x3>
     d58:	08 95       	ret
     d5a:	e0 91 b1 0c 	lds	r30, 0x0CB1	; 0x800cb1 <pxDelayedTaskList>
     d5e:	f0 91 b2 0c 	lds	r31, 0x0CB2	; 0x800cb2 <pxDelayedTaskList+0x1>
     d62:	07 80       	ldd	r0, Z+7	; 0x07
     d64:	f0 85       	ldd	r31, Z+8	; 0x08
     d66:	e0 2d       	mov	r30, r0
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	a2 81       	ldd	r26, Z+2	; 0x02
     d6e:	b3 81       	ldd	r27, Z+3	; 0x03
     d70:	80 93 7b 0c 	sts	0x0C7B, r24	; 0x800c7b <xNextTaskUnblockTime>
     d74:	90 93 7c 0c 	sts	0x0C7C, r25	; 0x800c7c <xNextTaskUnblockTime+0x1>
     d78:	a0 93 7d 0c 	sts	0x0C7D, r26	; 0x800c7d <xNextTaskUnblockTime+0x2>
     d7c:	b0 93 7e 0c 	sts	0x0C7E, r27	; 0x800c7e <xNextTaskUnblockTime+0x3>
     d80:	08 95       	ret

00000d82 <prvDeleteTCB>:
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ec 01       	movw	r28, r24
     d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8c:	5b db       	rcall	.-2378   	; 0x444 <vPortFree>
     d8e:	ce 01       	movw	r24, r28
     d90:	59 db       	rcall	.-2382   	; 0x444 <vPortFree>
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <prvInitialiseNewTask>:
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	2c 01       	movw	r4, r24
     db8:	5b 01       	movw	r10, r22
     dba:	4a 01       	movw	r8, r20
     dbc:	39 01       	movw	r6, r18
     dbe:	e6 01       	movw	r28, r12
     dc0:	65 ea       	ldi	r22, 0xA5	; 165
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc8:	0e 94 c7 1a 	call	0x358e	; 0x358e <memset>
     dcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd0:	21 e0       	ldi	r18, 0x01	; 1
     dd2:	82 1a       	sub	r8, r18
     dd4:	91 08       	sbc	r9, r1
     dd6:	88 0e       	add	r8, r24
     dd8:	99 1e       	adc	r9, r25
     dda:	a1 14       	cp	r10, r1
     ddc:	b1 04       	cpc	r11, r1
     dde:	89 f4       	brne	.+34     	; 0xe02 <prvInitialiseNewTask+0x6a>
     de0:	15 c0       	rjmp	.+42     	; 0xe0c <prvInitialiseNewTask+0x74>
     de2:	82 2f       	mov	r24, r18
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	f5 01       	movw	r30, r10
     de8:	e8 0f       	add	r30, r24
     dea:	f9 1f       	adc	r31, r25
     dec:	30 81       	ld	r19, Z
     dee:	de 01       	movw	r26, r28
     df0:	a8 0f       	add	r26, r24
     df2:	b9 1f       	adc	r27, r25
     df4:	5d 96       	adiw	r26, 0x1d	; 29
     df6:	3c 93       	st	X, r19
     df8:	80 81       	ld	r24, Z
     dfa:	88 23       	and	r24, r24
     dfc:	29 f0       	breq	.+10     	; 0xe08 <prvInitialiseNewTask+0x70>
     dfe:	2f 5f       	subi	r18, 0xFF	; 255
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <prvInitialiseNewTask+0x6c>
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	20 31       	cpi	r18, 0x10	; 16
     e06:	68 f3       	brcs	.-38     	; 0xde2 <prvInitialiseNewTask+0x4a>
     e08:	1c a6       	std	Y+44, r1	; 0x2c
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <prvInitialiseNewTask+0x76>
     e0c:	1d 8e       	std	Y+29, r1	; 0x1d
     e0e:	0a 30       	cpi	r16, 0x0A	; 10
     e10:	08 f0       	brcs	.+2      	; 0xe14 <prvInitialiseNewTask+0x7c>
     e12:	09 e0       	ldi	r16, 0x09	; 9
     e14:	0a 8f       	std	Y+26, r16	; 0x1a
     e16:	0d a7       	std	Y+45, r16	; 0x2d
     e18:	1e a6       	std	Y+46, r1	; 0x2e
     e1a:	ce 01       	movw	r24, r28
     e1c:	02 96       	adiw	r24, 0x02	; 2
     e1e:	5f db       	rcall	.-2370   	; 0x4de <vListInitialiseItem>
     e20:	ce 01       	movw	r24, r28
     e22:	0e 96       	adiw	r24, 0x0e	; 14
     e24:	5c db       	rcall	.-2376   	; 0x4de <vListInitialiseItem>
     e26:	db 87       	std	Y+11, r29	; 0x0b
     e28:	ca 87       	std	Y+10, r28	; 0x0a
     e2a:	8a e0       	ldi	r24, 0x0A	; 10
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	80 1b       	sub	r24, r16
     e34:	91 09       	sbc	r25, r1
     e36:	a1 09       	sbc	r26, r1
     e38:	b1 09       	sbc	r27, r1
     e3a:	8e 87       	std	Y+14, r24	; 0x0e
     e3c:	9f 87       	std	Y+15, r25	; 0x0f
     e3e:	a8 8b       	std	Y+16, r26	; 0x10
     e40:	b9 8b       	std	Y+17, r27	; 0x11
     e42:	df 8b       	std	Y+23, r29	; 0x17
     e44:	ce 8b       	std	Y+22, r28	; 0x16
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	fe 01       	movw	r30, r28
     e4a:	bf 96       	adiw	r30, 0x2f	; 47
     e4c:	df 01       	movw	r26, r30
     e4e:	1d 92       	st	X+, r1
     e50:	8a 95       	dec	r24
     e52:	e9 f7       	brne	.-6      	; 0xe4e <prvInitialiseNewTask+0xb6>
     e54:	1b aa       	std	Y+51, r1	; 0x33
     e56:	a3 01       	movw	r20, r6
     e58:	b2 01       	movw	r22, r4
     e5a:	c4 01       	movw	r24, r8
     e5c:	b4 db       	rcall	.-2200   	; 0x5c6 <pxPortInitialiseStack>
     e5e:	99 83       	std	Y+1, r25	; 0x01
     e60:	88 83       	st	Y, r24
     e62:	e1 14       	cp	r14, r1
     e64:	f1 04       	cpc	r15, r1
     e66:	19 f0       	breq	.+6      	; 0xe6e <prvInitialiseNewTask+0xd6>
     e68:	f7 01       	movw	r30, r14
     e6a:	d1 83       	std	Z+1, r29	; 0x01
     e6c:	c0 83       	st	Z, r28
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	9f 90       	pop	r9
     e82:	8f 90       	pop	r8
     e84:	7f 90       	pop	r7
     e86:	6f 90       	pop	r6
     e88:	5f 90       	pop	r5
     e8a:	4f 90       	pop	r4
     e8c:	08 95       	ret

00000e8e <prvInitialiseTaskLists>:
     e8e:	cf 93       	push	r28
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	08 c0       	rjmp	.+16     	; 0xea4 <prvInitialiseTaskLists+0x16>
     e94:	2b e0       	ldi	r18, 0x0B	; 11
     e96:	c2 9f       	mul	r28, r18
     e98:	c0 01       	movw	r24, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	87 53       	subi	r24, 0x37	; 55
     e9e:	93 4f       	sbci	r25, 0xF3	; 243
     ea0:	0d db       	rcall	.-2534   	; 0x4bc <vListInitialise>
     ea2:	cf 5f       	subi	r28, 0xFF	; 255
     ea4:	ca 30       	cpi	r28, 0x0A	; 10
     ea6:	b0 f3       	brcs	.-20     	; 0xe94 <prvInitialiseTaskLists+0x6>
     ea8:	8e eb       	ldi	r24, 0xBE	; 190
     eaa:	9c e0       	ldi	r25, 0x0C	; 12
     eac:	07 db       	rcall	.-2546   	; 0x4bc <vListInitialise>
     eae:	83 eb       	ldi	r24, 0xB3	; 179
     eb0:	9c e0       	ldi	r25, 0x0C	; 12
     eb2:	04 db       	rcall	.-2552   	; 0x4bc <vListInitialise>
     eb4:	84 ea       	ldi	r24, 0xA4	; 164
     eb6:	9c e0       	ldi	r25, 0x0C	; 12
     eb8:	01 db       	rcall	.-2558   	; 0x4bc <vListInitialise>
     eba:	89 e9       	ldi	r24, 0x99	; 153
     ebc:	9c e0       	ldi	r25, 0x0C	; 12
     ebe:	fe da       	rcall	.-2564   	; 0x4bc <vListInitialise>
     ec0:	8d e8       	ldi	r24, 0x8D	; 141
     ec2:	9c e0       	ldi	r25, 0x0C	; 12
     ec4:	fb da       	rcall	.-2570   	; 0x4bc <vListInitialise>
     ec6:	8e eb       	ldi	r24, 0xBE	; 190
     ec8:	9c e0       	ldi	r25, 0x0C	; 12
     eca:	90 93 b2 0c 	sts	0x0CB2, r25	; 0x800cb2 <pxDelayedTaskList+0x1>
     ece:	80 93 b1 0c 	sts	0x0CB1, r24	; 0x800cb1 <pxDelayedTaskList>
     ed2:	83 eb       	ldi	r24, 0xB3	; 179
     ed4:	9c e0       	ldi	r25, 0x0C	; 12
     ed6:	90 93 b0 0c 	sts	0x0CB0, r25	; 0x800cb0 <pxOverflowDelayedTaskList+0x1>
     eda:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <pxOverflowDelayedTaskList>
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <prvAddNewTaskToReadyList>:
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ec 01       	movw	r28, r24
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	0f 92       	push	r0
     eee:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <uxCurrentNumberOfTasks>
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <uxCurrentNumberOfTasks>
     ef8:	80 91 37 0d 	lds	r24, 0x0D37	; 0x800d37 <pxCurrentTCB>
     efc:	90 91 38 0d 	lds	r25, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
     f00:	89 2b       	or	r24, r25
     f02:	51 f4       	brne	.+20     	; 0xf18 <prvAddNewTaskToReadyList+0x36>
     f04:	d0 93 38 0d 	sts	0x0D38, r29	; 0x800d38 <pxCurrentTCB+0x1>
     f08:	c0 93 37 0d 	sts	0x0D37, r28	; 0x800d37 <pxCurrentTCB>
     f0c:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <uxCurrentNumberOfTasks>
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	91 f4       	brne	.+36     	; 0xf38 <prvAddNewTaskToReadyList+0x56>
     f14:	bc df       	rcall	.-136    	; 0xe8e <prvInitialiseTaskLists>
     f16:	10 c0       	rjmp	.+32     	; 0xf38 <prvAddNewTaskToReadyList+0x56>
     f18:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <xSchedulerRunning>
     f1c:	81 11       	cpse	r24, r1
     f1e:	0c c0       	rjmp	.+24     	; 0xf38 <prvAddNewTaskToReadyList+0x56>
     f20:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <pxCurrentTCB>
     f24:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
     f28:	92 8d       	ldd	r25, Z+26	; 0x1a
     f2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f2c:	89 17       	cp	r24, r25
     f2e:	20 f0       	brcs	.+8      	; 0xf38 <prvAddNewTaskToReadyList+0x56>
     f30:	d0 93 38 0d 	sts	0x0D38, r29	; 0x800d38 <pxCurrentTCB+0x1>
     f34:	c0 93 37 0d 	sts	0x0D37, r28	; 0x800d37 <pxCurrentTCB>
     f38:	80 91 7f 0c 	lds	r24, 0x0C7F	; 0x800c7f <uxTaskNumber>
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <uxTaskNumber>
     f42:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f44:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <uxTopReadyPriority>
     f48:	8e 17       	cp	r24, r30
     f4a:	10 f4       	brcc	.+4      	; 0xf50 <prvAddNewTaskToReadyList+0x6e>
     f4c:	e0 93 87 0c 	sts	0x0C87, r30	; 0x800c87 <uxTopReadyPriority>
     f50:	8b e0       	ldi	r24, 0x0B	; 11
     f52:	8e 9f       	mul	r24, r30
     f54:	f0 01       	movw	r30, r0
     f56:	11 24       	eor	r1, r1
     f58:	e7 53       	subi	r30, 0x37	; 55
     f5a:	f3 4f       	sbci	r31, 0xF3	; 243
     f5c:	01 80       	ldd	r0, Z+1	; 0x01
     f5e:	f2 81       	ldd	r31, Z+2	; 0x02
     f60:	e0 2d       	mov	r30, r0
     f62:	ff 83       	std	Y+7, r31	; 0x07
     f64:	ee 83       	std	Y+6, r30	; 0x06
     f66:	26 81       	ldd	r18, Z+6	; 0x06
     f68:	37 81       	ldd	r19, Z+7	; 0x07
     f6a:	39 87       	std	Y+9, r19	; 0x09
     f6c:	28 87       	std	Y+8, r18	; 0x08
     f6e:	a6 81       	ldd	r26, Z+6	; 0x06
     f70:	b7 81       	ldd	r27, Z+7	; 0x07
     f72:	9e 01       	movw	r18, r28
     f74:	2e 5f       	subi	r18, 0xFE	; 254
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	15 96       	adiw	r26, 0x05	; 5
     f7a:	3c 93       	st	X, r19
     f7c:	2e 93       	st	-X, r18
     f7e:	14 97       	sbiw	r26, 0x04	; 4
     f80:	37 83       	std	Z+7, r19	; 0x07
     f82:	26 83       	std	Z+6, r18	; 0x06
     f84:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f86:	8e 9f       	mul	r24, r30
     f88:	f0 01       	movw	r30, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	e7 53       	subi	r30, 0x37	; 55
     f8e:	f3 4f       	sbci	r31, 0xF3	; 243
     f90:	fd 87       	std	Y+13, r31	; 0x0d
     f92:	ec 87       	std	Y+12, r30	; 0x0c
     f94:	80 81       	ld	r24, Z
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 83       	st	Z, r24
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <xSchedulerRunning>
     fa2:	88 23       	and	r24, r24
     fa4:	49 f0       	breq	.+18     	; 0xfb8 <prvAddNewTaskToReadyList+0xd6>
     fa6:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <pxCurrentTCB>
     faa:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
     fae:	92 8d       	ldd	r25, Z+26	; 0x1a
     fb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb2:	98 17       	cp	r25, r24
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <prvAddNewTaskToReadyList+0xd6>
     fb6:	50 db       	rcall	.-2400   	; 0x658 <vPortYield>
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <prvCheckTasksWaitingTermination>:
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	1a c0       	rjmp	.+52     	; 0xff8 <prvCheckTasksWaitingTermination+0x3a>
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	0f 92       	push	r0
     fca:	e0 91 a0 0c 	lds	r30, 0x0CA0	; 0x800ca0 <xTasksWaitingTermination+0x7>
     fce:	f0 91 a1 0c 	lds	r31, 0x0CA1	; 0x800ca1 <xTasksWaitingTermination+0x8>
     fd2:	c0 85       	ldd	r28, Z+8	; 0x08
     fd4:	d1 85       	ldd	r29, Z+9	; 0x09
     fd6:	ce 01       	movw	r24, r28
     fd8:	02 96       	adiw	r24, 0x02	; 2
     fda:	c2 da       	rcall	.-2684   	; 0x560 <uxListRemove>
     fdc:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <uxCurrentNumberOfTasks>
     fe0:	81 50       	subi	r24, 0x01	; 1
     fe2:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <uxCurrentNumberOfTasks>
     fe6:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uxDeletedTasksWaitingCleanUp>
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	80 93 98 0c 	sts	0x0C98, r24	; 0x800c98 <uxDeletedTasksWaitingCleanUp>
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	ce 01       	movw	r24, r28
     ff6:	c5 de       	rcall	.-630    	; 0xd82 <prvDeleteTCB>
     ff8:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uxDeletedTasksWaitingCleanUp>
     ffc:	81 11       	cpse	r24, r1
     ffe:	e2 cf       	rjmp	.-60     	; 0xfc4 <prvCheckTasksWaitingTermination+0x6>
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <prvAddCurrentTaskToDelayedList>:
    1006:	8f 92       	push	r8
    1008:	9f 92       	push	r9
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	6b 01       	movw	r12, r22
    101c:	7c 01       	movw	r14, r24
    101e:	c4 2f       	mov	r28, r20
    1020:	80 90 88 0c 	lds	r8, 0x0C88	; 0x800c88 <xTickCount>
    1024:	90 90 89 0c 	lds	r9, 0x0C89	; 0x800c89 <xTickCount+0x1>
    1028:	a0 90 8a 0c 	lds	r10, 0x0C8A	; 0x800c8a <xTickCount+0x2>
    102c:	b0 90 8b 0c 	lds	r11, 0x0C8B	; 0x800c8b <xTickCount+0x3>
    1030:	80 91 37 0d 	lds	r24, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1034:	90 91 38 0d 	lds	r25, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1038:	02 96       	adiw	r24, 0x02	; 2
    103a:	92 da       	rcall	.-2780   	; 0x560 <uxListRemove>
    103c:	8f ef       	ldi	r24, 0xFF	; 255
    103e:	c8 16       	cp	r12, r24
    1040:	d8 06       	cpc	r13, r24
    1042:	e8 06       	cpc	r14, r24
    1044:	f8 06       	cpc	r15, r24
    1046:	b1 f5       	brne	.+108    	; 0x10b4 <prvAddCurrentTaskToDelayedList+0xae>
    1048:	cc 23       	and	r28, r28
    104a:	a1 f1       	breq	.+104    	; 0x10b4 <prvAddCurrentTaskToDelayedList+0xae>
    104c:	ed e8       	ldi	r30, 0x8D	; 141
    104e:	fc e0       	ldi	r31, 0x0C	; 12
    1050:	a1 81       	ldd	r26, Z+1	; 0x01
    1052:	b2 81       	ldd	r27, Z+2	; 0x02
    1054:	c0 91 37 0d 	lds	r28, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1058:	d0 91 38 0d 	lds	r29, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    105c:	bf 83       	std	Y+7, r27	; 0x07
    105e:	ae 83       	std	Y+6, r26	; 0x06
    1060:	c0 91 37 0d 	lds	r28, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1064:	d0 91 38 0d 	lds	r29, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1068:	16 96       	adiw	r26, 0x06	; 6
    106a:	8d 91       	ld	r24, X+
    106c:	9c 91       	ld	r25, X
    106e:	17 97       	sbiw	r26, 0x07	; 7
    1070:	99 87       	std	Y+9, r25	; 0x09
    1072:	88 87       	std	Y+8, r24	; 0x08
    1074:	16 96       	adiw	r26, 0x06	; 6
    1076:	cd 91       	ld	r28, X+
    1078:	dc 91       	ld	r29, X
    107a:	17 97       	sbiw	r26, 0x07	; 7
    107c:	80 91 37 0d 	lds	r24, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1080:	90 91 38 0d 	lds	r25, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1084:	02 96       	adiw	r24, 0x02	; 2
    1086:	9d 83       	std	Y+5, r25	; 0x05
    1088:	8c 83       	std	Y+4, r24	; 0x04
    108a:	80 91 37 0d 	lds	r24, 0x0D37	; 0x800d37 <pxCurrentTCB>
    108e:	90 91 38 0d 	lds	r25, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1092:	02 96       	adiw	r24, 0x02	; 2
    1094:	17 96       	adiw	r26, 0x07	; 7
    1096:	9c 93       	st	X, r25
    1098:	8e 93       	st	-X, r24
    109a:	16 97       	sbiw	r26, 0x06	; 6
    109c:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <pxCurrentTCB>
    10a0:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    10a4:	1d 96       	adiw	r26, 0x0d	; 13
    10a6:	fc 93       	st	X, r31
    10a8:	ee 93       	st	-X, r30
    10aa:	1c 97       	sbiw	r26, 0x0c	; 12
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	80 83       	st	Z, r24
    10b2:	3d c0       	rjmp	.+122    	; 0x112e <prvAddCurrentTaskToDelayedList+0x128>
    10b4:	c8 0c       	add	r12, r8
    10b6:	d9 1c       	adc	r13, r9
    10b8:	ea 1c       	adc	r14, r10
    10ba:	fb 1c       	adc	r15, r11
    10bc:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <pxCurrentTCB>
    10c0:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    10c4:	c2 82       	std	Z+2, r12	; 0x02
    10c6:	d3 82       	std	Z+3, r13	; 0x03
    10c8:	e4 82       	std	Z+4, r14	; 0x04
    10ca:	f5 82       	std	Z+5, r15	; 0x05
    10cc:	c8 14       	cp	r12, r8
    10ce:	d9 04       	cpc	r13, r9
    10d0:	ea 04       	cpc	r14, r10
    10d2:	fb 04       	cpc	r15, r11
    10d4:	60 f4       	brcc	.+24     	; 0x10ee <prvAddCurrentTaskToDelayedList+0xe8>
    10d6:	60 91 37 0d 	lds	r22, 0x0D37	; 0x800d37 <pxCurrentTCB>
    10da:	70 91 38 0d 	lds	r23, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    10de:	80 91 af 0c 	lds	r24, 0x0CAF	; 0x800caf <pxOverflowDelayedTaskList>
    10e2:	90 91 b0 0c 	lds	r25, 0x0CB0	; 0x800cb0 <pxOverflowDelayedTaskList+0x1>
    10e6:	6e 5f       	subi	r22, 0xFE	; 254
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	fd d9       	rcall	.-3078   	; 0x4e6 <vListInsert>
    10ec:	20 c0       	rjmp	.+64     	; 0x112e <prvAddCurrentTaskToDelayedList+0x128>
    10ee:	60 91 37 0d 	lds	r22, 0x0D37	; 0x800d37 <pxCurrentTCB>
    10f2:	70 91 38 0d 	lds	r23, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    10f6:	80 91 b1 0c 	lds	r24, 0x0CB1	; 0x800cb1 <pxDelayedTaskList>
    10fa:	90 91 b2 0c 	lds	r25, 0x0CB2	; 0x800cb2 <pxDelayedTaskList+0x1>
    10fe:	6e 5f       	subi	r22, 0xFE	; 254
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	f1 d9       	rcall	.-3102   	; 0x4e6 <vListInsert>
    1104:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <xNextTaskUnblockTime>
    1108:	90 91 7c 0c 	lds	r25, 0x0C7C	; 0x800c7c <xNextTaskUnblockTime+0x1>
    110c:	a0 91 7d 0c 	lds	r26, 0x0C7D	; 0x800c7d <xNextTaskUnblockTime+0x2>
    1110:	b0 91 7e 0c 	lds	r27, 0x0C7E	; 0x800c7e <xNextTaskUnblockTime+0x3>
    1114:	c8 16       	cp	r12, r24
    1116:	d9 06       	cpc	r13, r25
    1118:	ea 06       	cpc	r14, r26
    111a:	fb 06       	cpc	r15, r27
    111c:	40 f4       	brcc	.+16     	; 0x112e <prvAddCurrentTaskToDelayedList+0x128>
    111e:	c0 92 7b 0c 	sts	0x0C7B, r12	; 0x800c7b <xNextTaskUnblockTime>
    1122:	d0 92 7c 0c 	sts	0x0C7C, r13	; 0x800c7c <xNextTaskUnblockTime+0x1>
    1126:	e0 92 7d 0c 	sts	0x0C7D, r14	; 0x800c7d <xNextTaskUnblockTime+0x2>
    112a:	f0 92 7e 0c 	sts	0x0C7E, r15	; 0x800c7e <xNextTaskUnblockTime+0x3>
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	9f 90       	pop	r9
    1140:	8f 90       	pop	r8
    1142:	08 95       	ret

00001144 <xTaskCreate>:
    1144:	2f 92       	push	r2
    1146:	3f 92       	push	r3
    1148:	4f 92       	push	r4
    114a:	5f 92       	push	r5
    114c:	6f 92       	push	r6
    114e:	7f 92       	push	r7
    1150:	8f 92       	push	r8
    1152:	9f 92       	push	r9
    1154:	af 92       	push	r10
    1156:	bf 92       	push	r11
    1158:	cf 92       	push	r12
    115a:	df 92       	push	r13
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	3c 01       	movw	r6, r24
    1168:	1b 01       	movw	r2, r22
    116a:	4a 01       	movw	r8, r20
    116c:	29 01       	movw	r4, r18
    116e:	ca 01       	movw	r24, r20
    1170:	c1 d8       	rcall	.-3710   	; 0x2f4 <pvPortMalloc>
    1172:	6c 01       	movw	r12, r24
    1174:	89 2b       	or	r24, r25
    1176:	61 f0       	breq	.+24     	; 0x1190 <xTaskCreate+0x4c>
    1178:	84 e3       	ldi	r24, 0x34	; 52
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	bb d8       	rcall	.-3722   	; 0x2f4 <pvPortMalloc>
    117e:	ec 01       	movw	r28, r24
    1180:	89 2b       	or	r24, r25
    1182:	19 f0       	breq	.+6      	; 0x118a <xTaskCreate+0x46>
    1184:	dc 8e       	std	Y+28, r13	; 0x1c
    1186:	cb 8e       	std	Y+27, r12	; 0x1b
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <xTaskCreate+0x50>
    118a:	c6 01       	movw	r24, r12
    118c:	5b d9       	rcall	.-3402   	; 0x444 <vPortFree>
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <xTaskCreate+0x50>
    1190:	c0 e0       	ldi	r28, 0x00	; 0
    1192:	d0 e0       	ldi	r29, 0x00	; 0
    1194:	20 97       	sbiw	r28, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <xTaskCreate+0x6c>
    1198:	a1 2c       	mov	r10, r1
    119a:	b1 2c       	mov	r11, r1
    119c:	6e 01       	movw	r12, r28
    119e:	92 01       	movw	r18, r4
    11a0:	a4 01       	movw	r20, r8
    11a2:	b1 01       	movw	r22, r2
    11a4:	c3 01       	movw	r24, r6
    11a6:	f8 dd       	rcall	.-1040   	; 0xd98 <prvInitialiseNewTask>
    11a8:	ce 01       	movw	r24, r28
    11aa:	9b de       	rcall	.-714    	; 0xee2 <prvAddNewTaskToReadyList>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <xTaskCreate+0x6e>
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	bf 90       	pop	r11
    11c2:	af 90       	pop	r10
    11c4:	9f 90       	pop	r9
    11c6:	8f 90       	pop	r8
    11c8:	7f 90       	pop	r7
    11ca:	6f 90       	pop	r6
    11cc:	5f 90       	pop	r5
    11ce:	4f 90       	pop	r4
    11d0:	3f 90       	pop	r3
    11d2:	2f 90       	pop	r2
    11d4:	08 95       	ret

000011d6 <vTaskStartScheduler>:
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	0f 2e       	mov	r0, r31
    11de:	f9 e7       	ldi	r31, 0x79	; 121
    11e0:	ef 2e       	mov	r14, r31
    11e2:	fc e0       	ldi	r31, 0x0C	; 12
    11e4:	ff 2e       	mov	r15, r31
    11e6:	f0 2d       	mov	r31, r0
    11e8:	00 e0       	ldi	r16, 0x00	; 0
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 ec       	ldi	r20, 0xC0	; 192
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	62 e2       	ldi	r22, 0x22	; 34
    11f4:	72 e0       	ldi	r23, 0x02	; 2
    11f6:	8d ec       	ldi	r24, 0xCD	; 205
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a4 df       	rcall	.-184    	; 0x1144 <xTaskCreate>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <vTaskStartScheduler+0x2c>
    1200:	96 d5       	rcall	.+2860   	; 0x1d2e <xTimerCreateTimerTask>
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	c1 f4       	brne	.+48     	; 0x1236 <vTaskStartScheduler+0x60>
    1206:	f8 94       	cli
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	dc 01       	movw	r26, r24
    120e:	80 93 7b 0c 	sts	0x0C7B, r24	; 0x800c7b <xNextTaskUnblockTime>
    1212:	90 93 7c 0c 	sts	0x0C7C, r25	; 0x800c7c <xNextTaskUnblockTime+0x1>
    1216:	a0 93 7d 0c 	sts	0x0C7D, r26	; 0x800c7d <xNextTaskUnblockTime+0x2>
    121a:	b0 93 7e 0c 	sts	0x0C7E, r27	; 0x800c7e <xNextTaskUnblockTime+0x3>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	80 93 86 0c 	sts	0x0C86, r24	; 0x800c86 <xSchedulerRunning>
    1224:	10 92 88 0c 	sts	0x0C88, r1	; 0x800c88 <xTickCount>
    1228:	10 92 89 0c 	sts	0x0C89, r1	; 0x800c89 <xTickCount+0x1>
    122c:	10 92 8a 0c 	sts	0x0C8A, r1	; 0x800c8a <xTickCount+0x2>
    1230:	10 92 8b 0c 	sts	0x0C8B, r1	; 0x800c8b <xTickCount+0x3>
    1234:	df d9       	rcall	.-3138   	; 0x5f4 <xPortStartScheduler>
    1236:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	08 95       	ret

00001242 <vTaskSuspendAll>:
    1242:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxSchedulerSuspended>
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	80 93 78 0c 	sts	0x0C78, r24	; 0x800c78 <uxSchedulerSuspended>
    124c:	08 95       	ret

0000124e <xTaskGetTickCount>:
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	0f 92       	push	r0
    1254:	60 91 88 0c 	lds	r22, 0x0C88	; 0x800c88 <xTickCount>
    1258:	70 91 89 0c 	lds	r23, 0x0C89	; 0x800c89 <xTickCount+0x1>
    125c:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <xTickCount+0x2>
    1260:	90 91 8b 0c 	lds	r25, 0x0C8B	; 0x800c8b <xTickCount+0x3>
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	08 95       	ret

0000126a <xTaskIncrementTick>:
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxSchedulerSuspended>
    127a:	81 11       	cpse	r24, r1
    127c:	05 c1       	rjmp	.+522    	; 0x1488 <xTaskIncrementTick+0x21e>
    127e:	c0 90 88 0c 	lds	r12, 0x0C88	; 0x800c88 <xTickCount>
    1282:	d0 90 89 0c 	lds	r13, 0x0C89	; 0x800c89 <xTickCount+0x1>
    1286:	e0 90 8a 0c 	lds	r14, 0x0C8A	; 0x800c8a <xTickCount+0x2>
    128a:	f0 90 8b 0c 	lds	r15, 0x0C8B	; 0x800c8b <xTickCount+0x3>
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	c8 1a       	sub	r12, r24
    1292:	d8 0a       	sbc	r13, r24
    1294:	e8 0a       	sbc	r14, r24
    1296:	f8 0a       	sbc	r15, r24
    1298:	c0 92 88 0c 	sts	0x0C88, r12	; 0x800c88 <xTickCount>
    129c:	d0 92 89 0c 	sts	0x0C89, r13	; 0x800c89 <xTickCount+0x1>
    12a0:	e0 92 8a 0c 	sts	0x0C8A, r14	; 0x800c8a <xTickCount+0x2>
    12a4:	f0 92 8b 0c 	sts	0x0C8B, r15	; 0x800c8b <xTickCount+0x3>
    12a8:	c1 14       	cp	r12, r1
    12aa:	d1 04       	cpc	r13, r1
    12ac:	e1 04       	cpc	r14, r1
    12ae:	f1 04       	cpc	r15, r1
    12b0:	b1 f4       	brne	.+44     	; 0x12de <xTaskIncrementTick+0x74>
    12b2:	80 91 b1 0c 	lds	r24, 0x0CB1	; 0x800cb1 <pxDelayedTaskList>
    12b6:	90 91 b2 0c 	lds	r25, 0x0CB2	; 0x800cb2 <pxDelayedTaskList+0x1>
    12ba:	20 91 af 0c 	lds	r18, 0x0CAF	; 0x800caf <pxOverflowDelayedTaskList>
    12be:	30 91 b0 0c 	lds	r19, 0x0CB0	; 0x800cb0 <pxOverflowDelayedTaskList+0x1>
    12c2:	30 93 b2 0c 	sts	0x0CB2, r19	; 0x800cb2 <pxDelayedTaskList+0x1>
    12c6:	20 93 b1 0c 	sts	0x0CB1, r18	; 0x800cb1 <pxDelayedTaskList>
    12ca:	90 93 b0 0c 	sts	0x0CB0, r25	; 0x800cb0 <pxOverflowDelayedTaskList+0x1>
    12ce:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <pxOverflowDelayedTaskList>
    12d2:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <xNumOfOverflows>
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <xNumOfOverflows>
    12dc:	2b dd       	rcall	.-1450   	; 0xd34 <prvResetNextTaskUnblockTime>
    12de:	80 91 7b 0c 	lds	r24, 0x0C7B	; 0x800c7b <xNextTaskUnblockTime>
    12e2:	90 91 7c 0c 	lds	r25, 0x0C7C	; 0x800c7c <xNextTaskUnblockTime+0x1>
    12e6:	a0 91 7d 0c 	lds	r26, 0x0C7D	; 0x800c7d <xNextTaskUnblockTime+0x2>
    12ea:	b0 91 7e 0c 	lds	r27, 0x0C7E	; 0x800c7e <xNextTaskUnblockTime+0x3>
    12ee:	c8 16       	cp	r12, r24
    12f0:	d9 06       	cpc	r13, r25
    12f2:	ea 06       	cpc	r14, r26
    12f4:	fb 06       	cpc	r15, r27
    12f6:	20 f4       	brcc	.+8      	; 0x1300 <xTaskIncrementTick+0x96>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	b2 c0       	rjmp	.+356    	; 0x1460 <xTaskIncrementTick+0x1f6>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <xTaskIncrementTick+0x98>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	e0 91 b1 0c 	lds	r30, 0x0CB1	; 0x800cb1 <pxDelayedTaskList>
    1306:	f0 91 b2 0c 	lds	r31, 0x0CB2	; 0x800cb2 <pxDelayedTaskList+0x1>
    130a:	90 81       	ld	r25, Z
    130c:	91 11       	cpse	r25, r1
    130e:	0c c0       	rjmp	.+24     	; 0x1328 <xTaskIncrementTick+0xbe>
    1310:	4f ef       	ldi	r20, 0xFF	; 255
    1312:	5f ef       	ldi	r21, 0xFF	; 255
    1314:	ba 01       	movw	r22, r20
    1316:	40 93 7b 0c 	sts	0x0C7B, r20	; 0x800c7b <xNextTaskUnblockTime>
    131a:	50 93 7c 0c 	sts	0x0C7C, r21	; 0x800c7c <xNextTaskUnblockTime+0x1>
    131e:	60 93 7d 0c 	sts	0x0C7D, r22	; 0x800c7d <xNextTaskUnblockTime+0x2>
    1322:	70 93 7e 0c 	sts	0x0C7E, r23	; 0x800c7e <xNextTaskUnblockTime+0x3>
    1326:	9c c0       	rjmp	.+312    	; 0x1460 <xTaskIncrementTick+0x1f6>
    1328:	e0 91 b1 0c 	lds	r30, 0x0CB1	; 0x800cb1 <pxDelayedTaskList>
    132c:	f0 91 b2 0c 	lds	r31, 0x0CB2	; 0x800cb2 <pxDelayedTaskList+0x1>
    1330:	07 80       	ldd	r0, Z+7	; 0x07
    1332:	f0 85       	ldd	r31, Z+8	; 0x08
    1334:	e0 2d       	mov	r30, r0
    1336:	00 84       	ldd	r0, Z+8	; 0x08
    1338:	f1 85       	ldd	r31, Z+9	; 0x09
    133a:	e0 2d       	mov	r30, r0
    133c:	42 81       	ldd	r20, Z+2	; 0x02
    133e:	53 81       	ldd	r21, Z+3	; 0x03
    1340:	64 81       	ldd	r22, Z+4	; 0x04
    1342:	75 81       	ldd	r23, Z+5	; 0x05
    1344:	c4 16       	cp	r12, r20
    1346:	d5 06       	cpc	r13, r21
    1348:	e6 06       	cpc	r14, r22
    134a:	f7 06       	cpc	r15, r23
    134c:	48 f4       	brcc	.+18     	; 0x1360 <xTaskIncrementTick+0xf6>
    134e:	40 93 7b 0c 	sts	0x0C7B, r20	; 0x800c7b <xNextTaskUnblockTime>
    1352:	50 93 7c 0c 	sts	0x0C7C, r21	; 0x800c7c <xNextTaskUnblockTime+0x1>
    1356:	60 93 7d 0c 	sts	0x0C7D, r22	; 0x800c7d <xNextTaskUnblockTime+0x2>
    135a:	70 93 7e 0c 	sts	0x0C7E, r23	; 0x800c7e <xNextTaskUnblockTime+0x3>
    135e:	80 c0       	rjmp	.+256    	; 0x1460 <xTaskIncrementTick+0x1f6>
    1360:	a4 85       	ldd	r26, Z+12	; 0x0c
    1362:	b5 85       	ldd	r27, Z+13	; 0x0d
    1364:	c6 81       	ldd	r28, Z+6	; 0x06
    1366:	d7 81       	ldd	r29, Z+7	; 0x07
    1368:	20 85       	ldd	r18, Z+8	; 0x08
    136a:	31 85       	ldd	r19, Z+9	; 0x09
    136c:	3f 83       	std	Y+7, r19	; 0x07
    136e:	2e 83       	std	Y+6, r18	; 0x06
    1370:	c0 85       	ldd	r28, Z+8	; 0x08
    1372:	d1 85       	ldd	r29, Z+9	; 0x09
    1374:	26 81       	ldd	r18, Z+6	; 0x06
    1376:	37 81       	ldd	r19, Z+7	; 0x07
    1378:	3d 83       	std	Y+5, r19	; 0x05
    137a:	2c 83       	std	Y+4, r18	; 0x04
    137c:	11 96       	adiw	r26, 0x01	; 1
    137e:	4d 91       	ld	r20, X+
    1380:	5c 91       	ld	r21, X
    1382:	12 97       	sbiw	r26, 0x02	; 2
    1384:	9f 01       	movw	r18, r30
    1386:	2e 5f       	subi	r18, 0xFE	; 254
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	42 17       	cp	r20, r18
    138c:	53 07       	cpc	r21, r19
    138e:	31 f4       	brne	.+12     	; 0x139c <xTaskIncrementTick+0x132>
    1390:	40 85       	ldd	r20, Z+8	; 0x08
    1392:	51 85       	ldd	r21, Z+9	; 0x09
    1394:	12 96       	adiw	r26, 0x02	; 2
    1396:	5c 93       	st	X, r21
    1398:	4e 93       	st	-X, r20
    139a:	11 97       	sbiw	r26, 0x01	; 1
    139c:	15 86       	std	Z+13, r1	; 0x0d
    139e:	14 86       	std	Z+12, r1	; 0x0c
    13a0:	9c 91       	ld	r25, X
    13a2:	91 50       	subi	r25, 0x01	; 1
    13a4:	9c 93       	st	X, r25
    13a6:	a0 8d       	ldd	r26, Z+24	; 0x18
    13a8:	b1 8d       	ldd	r27, Z+25	; 0x19
    13aa:	10 97       	sbiw	r26, 0x00	; 0
    13ac:	09 f1       	breq	.+66     	; 0x13f0 <xTaskIncrementTick+0x186>
    13ae:	c2 89       	ldd	r28, Z+18	; 0x12
    13b0:	d3 89       	ldd	r29, Z+19	; 0x13
    13b2:	44 89       	ldd	r20, Z+20	; 0x14
    13b4:	55 89       	ldd	r21, Z+21	; 0x15
    13b6:	5f 83       	std	Y+7, r21	; 0x07
    13b8:	4e 83       	std	Y+6, r20	; 0x06
    13ba:	c4 89       	ldd	r28, Z+20	; 0x14
    13bc:	d5 89       	ldd	r29, Z+21	; 0x15
    13be:	42 89       	ldd	r20, Z+18	; 0x12
    13c0:	53 89       	ldd	r21, Z+19	; 0x13
    13c2:	5d 83       	std	Y+5, r21	; 0x05
    13c4:	4c 83       	std	Y+4, r20	; 0x04
    13c6:	11 96       	adiw	r26, 0x01	; 1
    13c8:	6d 91       	ld	r22, X+
    13ca:	7c 91       	ld	r23, X
    13cc:	12 97       	sbiw	r26, 0x02	; 2
    13ce:	af 01       	movw	r20, r30
    13d0:	42 5f       	subi	r20, 0xF2	; 242
    13d2:	5f 4f       	sbci	r21, 0xFF	; 255
    13d4:	64 17       	cp	r22, r20
    13d6:	75 07       	cpc	r23, r21
    13d8:	31 f4       	brne	.+12     	; 0x13e6 <xTaskIncrementTick+0x17c>
    13da:	44 89       	ldd	r20, Z+20	; 0x14
    13dc:	55 89       	ldd	r21, Z+21	; 0x15
    13de:	12 96       	adiw	r26, 0x02	; 2
    13e0:	5c 93       	st	X, r21
    13e2:	4e 93       	st	-X, r20
    13e4:	11 97       	sbiw	r26, 0x01	; 1
    13e6:	11 8e       	std	Z+25, r1	; 0x19
    13e8:	10 8e       	std	Z+24, r1	; 0x18
    13ea:	9c 91       	ld	r25, X
    13ec:	91 50       	subi	r25, 0x01	; 1
    13ee:	9c 93       	st	X, r25
    13f0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13f2:	90 91 87 0c 	lds	r25, 0x0C87	; 0x800c87 <uxTopReadyPriority>
    13f6:	9a 17       	cp	r25, r26
    13f8:	10 f4       	brcc	.+4      	; 0x13fe <xTaskIncrementTick+0x194>
    13fa:	a0 93 87 0c 	sts	0x0C87, r26	; 0x800c87 <uxTopReadyPriority>
    13fe:	9b e0       	ldi	r25, 0x0B	; 11
    1400:	9a 9f       	mul	r25, r26
    1402:	d0 01       	movw	r26, r0
    1404:	11 24       	eor	r1, r1
    1406:	a7 53       	subi	r26, 0x37	; 55
    1408:	b3 4f       	sbci	r27, 0xF3	; 243
    140a:	11 96       	adiw	r26, 0x01	; 1
    140c:	0d 90       	ld	r0, X+
    140e:	bc 91       	ld	r27, X
    1410:	a0 2d       	mov	r26, r0
    1412:	b7 83       	std	Z+7, r27	; 0x07
    1414:	a6 83       	std	Z+6, r26	; 0x06
    1416:	16 96       	adiw	r26, 0x06	; 6
    1418:	4d 91       	ld	r20, X+
    141a:	5c 91       	ld	r21, X
    141c:	17 97       	sbiw	r26, 0x07	; 7
    141e:	51 87       	std	Z+9, r21	; 0x09
    1420:	40 87       	std	Z+8, r20	; 0x08
    1422:	16 96       	adiw	r26, 0x06	; 6
    1424:	cd 91       	ld	r28, X+
    1426:	dc 91       	ld	r29, X
    1428:	17 97       	sbiw	r26, 0x07	; 7
    142a:	3d 83       	std	Y+5, r19	; 0x05
    142c:	2c 83       	std	Y+4, r18	; 0x04
    142e:	17 96       	adiw	r26, 0x07	; 7
    1430:	3c 93       	st	X, r19
    1432:	2e 93       	st	-X, r18
    1434:	16 97       	sbiw	r26, 0x06	; 6
    1436:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1438:	9a 9f       	mul	r25, r26
    143a:	d0 01       	movw	r26, r0
    143c:	11 24       	eor	r1, r1
    143e:	a7 53       	subi	r26, 0x37	; 55
    1440:	b3 4f       	sbci	r27, 0xF3	; 243
    1442:	b5 87       	std	Z+13, r27	; 0x0d
    1444:	a4 87       	std	Z+12, r26	; 0x0c
    1446:	9c 91       	ld	r25, X
    1448:	9f 5f       	subi	r25, 0xFF	; 255
    144a:	9c 93       	st	X, r25
    144c:	22 8d       	ldd	r18, Z+26	; 0x1a
    144e:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1452:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1456:	92 8d       	ldd	r25, Z+26	; 0x1a
    1458:	29 17       	cp	r18, r25
    145a:	08 f0       	brcs	.+2      	; 0x145e <xTaskIncrementTick+0x1f4>
    145c:	4f cf       	rjmp	.-354    	; 0x12fc <xTaskIncrementTick+0x92>
    145e:	51 cf       	rjmp	.-350    	; 0x1302 <xTaskIncrementTick+0x98>
    1460:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1464:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1468:	e2 8d       	ldd	r30, Z+26	; 0x1a
    146a:	9b e0       	ldi	r25, 0x0B	; 11
    146c:	e9 9f       	mul	r30, r25
    146e:	f0 01       	movw	r30, r0
    1470:	11 24       	eor	r1, r1
    1472:	e7 53       	subi	r30, 0x37	; 55
    1474:	f3 4f       	sbci	r31, 0xF3	; 243
    1476:	90 81       	ld	r25, Z
    1478:	92 30       	cpi	r25, 0x02	; 2
    147a:	08 f0       	brcs	.+2      	; 0x147e <xTaskIncrementTick+0x214>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <xYieldPending>
    1482:	91 11       	cpse	r25, r1
    1484:	16 c0       	rjmp	.+44     	; 0x14b2 <xTaskIncrementTick+0x248>
    1486:	16 c0       	rjmp	.+44     	; 0x14b4 <xTaskIncrementTick+0x24a>
    1488:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <xPendedTicks>
    148c:	90 91 83 0c 	lds	r25, 0x0C83	; 0x800c83 <xPendedTicks+0x1>
    1490:	a0 91 84 0c 	lds	r26, 0x0C84	; 0x800c84 <xPendedTicks+0x2>
    1494:	b0 91 85 0c 	lds	r27, 0x0C85	; 0x800c85 <xPendedTicks+0x3>
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	a1 1d       	adc	r26, r1
    149c:	b1 1d       	adc	r27, r1
    149e:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <xPendedTicks>
    14a2:	90 93 83 0c 	sts	0x0C83, r25	; 0x800c83 <xPendedTicks+0x1>
    14a6:	a0 93 84 0c 	sts	0x0C84, r26	; 0x800c84 <xPendedTicks+0x2>
    14aa:	b0 93 85 0c 	sts	0x0C85, r27	; 0x800c85 <xPendedTicks+0x3>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <xTaskIncrementTick+0x24a>
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	cf 90       	pop	r12
    14c0:	08 95       	ret

000014c2 <xTaskResumeAll>:
    14c2:	cf 92       	push	r12
    14c4:	df 92       	push	r13
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	0f 92       	push	r0
    14d4:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxSchedulerSuspended>
    14d8:	81 50       	subi	r24, 0x01	; 1
    14da:	80 93 78 0c 	sts	0x0C78, r24	; 0x800c78 <uxSchedulerSuspended>
    14de:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxSchedulerSuspended>
    14e2:	81 11       	cpse	r24, r1
    14e4:	be c0       	rjmp	.+380    	; 0x1662 <xTaskResumeAll+0x1a0>
    14e6:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <uxCurrentNumberOfTasks>
    14ea:	81 11       	cpse	r24, r1
    14ec:	88 c0       	rjmp	.+272    	; 0x15fe <xTaskResumeAll+0x13c>
    14ee:	bc c0       	rjmp	.+376    	; 0x1668 <xTaskResumeAll+0x1a6>
    14f0:	e0 91 ab 0c 	lds	r30, 0x0CAB	; 0x800cab <xPendingReadyList+0x7>
    14f4:	f0 91 ac 0c 	lds	r31, 0x0CAC	; 0x800cac <xPendingReadyList+0x8>
    14f8:	00 84       	ldd	r0, Z+8	; 0x08
    14fa:	f1 85       	ldd	r31, Z+9	; 0x09
    14fc:	e0 2d       	mov	r30, r0
    14fe:	a0 8d       	ldd	r26, Z+24	; 0x18
    1500:	b1 8d       	ldd	r27, Z+25	; 0x19
    1502:	c2 89       	ldd	r28, Z+18	; 0x12
    1504:	d3 89       	ldd	r29, Z+19	; 0x13
    1506:	84 89       	ldd	r24, Z+20	; 0x14
    1508:	95 89       	ldd	r25, Z+21	; 0x15
    150a:	9f 83       	std	Y+7, r25	; 0x07
    150c:	8e 83       	std	Y+6, r24	; 0x06
    150e:	c4 89       	ldd	r28, Z+20	; 0x14
    1510:	d5 89       	ldd	r29, Z+21	; 0x15
    1512:	82 89       	ldd	r24, Z+18	; 0x12
    1514:	93 89       	ldd	r25, Z+19	; 0x13
    1516:	9d 83       	std	Y+5, r25	; 0x05
    1518:	8c 83       	std	Y+4, r24	; 0x04
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	2d 91       	ld	r18, X+
    151e:	3c 91       	ld	r19, X
    1520:	12 97       	sbiw	r26, 0x02	; 2
    1522:	cf 01       	movw	r24, r30
    1524:	0e 96       	adiw	r24, 0x0e	; 14
    1526:	28 17       	cp	r18, r24
    1528:	39 07       	cpc	r19, r25
    152a:	31 f4       	brne	.+12     	; 0x1538 <xTaskResumeAll+0x76>
    152c:	84 89       	ldd	r24, Z+20	; 0x14
    152e:	95 89       	ldd	r25, Z+21	; 0x15
    1530:	12 96       	adiw	r26, 0x02	; 2
    1532:	9c 93       	st	X, r25
    1534:	8e 93       	st	-X, r24
    1536:	11 97       	sbiw	r26, 0x01	; 1
    1538:	11 8e       	std	Z+25, r1	; 0x19
    153a:	10 8e       	std	Z+24, r1	; 0x18
    153c:	8c 91       	ld	r24, X
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	8c 93       	st	X, r24
    1542:	a4 85       	ldd	r26, Z+12	; 0x0c
    1544:	b5 85       	ldd	r27, Z+13	; 0x0d
    1546:	c6 81       	ldd	r28, Z+6	; 0x06
    1548:	d7 81       	ldd	r29, Z+7	; 0x07
    154a:	80 85       	ldd	r24, Z+8	; 0x08
    154c:	91 85       	ldd	r25, Z+9	; 0x09
    154e:	9f 83       	std	Y+7, r25	; 0x07
    1550:	8e 83       	std	Y+6, r24	; 0x06
    1552:	c0 85       	ldd	r28, Z+8	; 0x08
    1554:	d1 85       	ldd	r29, Z+9	; 0x09
    1556:	86 81       	ldd	r24, Z+6	; 0x06
    1558:	97 81       	ldd	r25, Z+7	; 0x07
    155a:	9d 83       	std	Y+5, r25	; 0x05
    155c:	8c 83       	std	Y+4, r24	; 0x04
    155e:	11 96       	adiw	r26, 0x01	; 1
    1560:	8d 91       	ld	r24, X+
    1562:	9c 91       	ld	r25, X
    1564:	12 97       	sbiw	r26, 0x02	; 2
    1566:	9f 01       	movw	r18, r30
    1568:	2e 5f       	subi	r18, 0xFE	; 254
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	82 17       	cp	r24, r18
    156e:	93 07       	cpc	r25, r19
    1570:	31 f4       	brne	.+12     	; 0x157e <xTaskResumeAll+0xbc>
    1572:	80 85       	ldd	r24, Z+8	; 0x08
    1574:	91 85       	ldd	r25, Z+9	; 0x09
    1576:	12 96       	adiw	r26, 0x02	; 2
    1578:	9c 93       	st	X, r25
    157a:	8e 93       	st	-X, r24
    157c:	11 97       	sbiw	r26, 0x01	; 1
    157e:	15 86       	std	Z+13, r1	; 0x0d
    1580:	14 86       	std	Z+12, r1	; 0x0c
    1582:	8c 91       	ld	r24, X
    1584:	81 50       	subi	r24, 0x01	; 1
    1586:	8c 93       	st	X, r24
    1588:	a2 8d       	ldd	r26, Z+26	; 0x1a
    158a:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <uxTopReadyPriority>
    158e:	8a 17       	cp	r24, r26
    1590:	10 f4       	brcc	.+4      	; 0x1596 <xTaskResumeAll+0xd4>
    1592:	a0 93 87 0c 	sts	0x0C87, r26	; 0x800c87 <uxTopReadyPriority>
    1596:	8b e0       	ldi	r24, 0x0B	; 11
    1598:	8a 9f       	mul	r24, r26
    159a:	d0 01       	movw	r26, r0
    159c:	11 24       	eor	r1, r1
    159e:	a7 53       	subi	r26, 0x37	; 55
    15a0:	b3 4f       	sbci	r27, 0xF3	; 243
    15a2:	11 96       	adiw	r26, 0x01	; 1
    15a4:	0d 90       	ld	r0, X+
    15a6:	bc 91       	ld	r27, X
    15a8:	a0 2d       	mov	r26, r0
    15aa:	b7 83       	std	Z+7, r27	; 0x07
    15ac:	a6 83       	std	Z+6, r26	; 0x06
    15ae:	16 96       	adiw	r26, 0x06	; 6
    15b0:	4d 91       	ld	r20, X+
    15b2:	5c 91       	ld	r21, X
    15b4:	17 97       	sbiw	r26, 0x07	; 7
    15b6:	51 87       	std	Z+9, r21	; 0x09
    15b8:	40 87       	std	Z+8, r20	; 0x08
    15ba:	16 96       	adiw	r26, 0x06	; 6
    15bc:	cd 91       	ld	r28, X+
    15be:	dc 91       	ld	r29, X
    15c0:	17 97       	sbiw	r26, 0x07	; 7
    15c2:	3d 83       	std	Y+5, r19	; 0x05
    15c4:	2c 83       	std	Y+4, r18	; 0x04
    15c6:	17 96       	adiw	r26, 0x07	; 7
    15c8:	3c 93       	st	X, r19
    15ca:	2e 93       	st	-X, r18
    15cc:	16 97       	sbiw	r26, 0x06	; 6
    15ce:	a2 8d       	ldd	r26, Z+26	; 0x1a
    15d0:	8a 9f       	mul	r24, r26
    15d2:	d0 01       	movw	r26, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	a7 53       	subi	r26, 0x37	; 55
    15d8:	b3 4f       	sbci	r27, 0xF3	; 243
    15da:	b5 87       	std	Z+13, r27	; 0x0d
    15dc:	a4 87       	std	Z+12, r26	; 0x0c
    15de:	8c 91       	ld	r24, X
    15e0:	8f 5f       	subi	r24, 0xFF	; 255
    15e2:	8c 93       	st	X, r24
    15e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    15e6:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <pxCurrentTCB>
    15ea:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    15ee:	5a 96       	adiw	r26, 0x1a	; 26
    15f0:	8c 91       	ld	r24, X
    15f2:	98 17       	cp	r25, r24
    15f4:	30 f0       	brcs	.+12     	; 0x1602 <xTaskResumeAll+0x140>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <xYieldPending>
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <xTaskResumeAll+0x140>
    15fe:	e0 e0       	ldi	r30, 0x00	; 0
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <xPendingReadyList>
    1606:	81 11       	cpse	r24, r1
    1608:	73 cf       	rjmp	.-282    	; 0x14f0 <xTaskResumeAll+0x2e>
    160a:	ef 2b       	or	r30, r31
    160c:	09 f0       	breq	.+2      	; 0x1610 <xTaskResumeAll+0x14e>
    160e:	92 db       	rcall	.-2268   	; 0xd34 <prvResetNextTaskUnblockTime>
    1610:	c0 90 82 0c 	lds	r12, 0x0C82	; 0x800c82 <xPendedTicks>
    1614:	d0 90 83 0c 	lds	r13, 0x0C83	; 0x800c83 <xPendedTicks+0x1>
    1618:	e0 90 84 0c 	lds	r14, 0x0C84	; 0x800c84 <xPendedTicks+0x2>
    161c:	f0 90 85 0c 	lds	r15, 0x0C85	; 0x800c85 <xPendedTicks+0x3>
    1620:	c1 14       	cp	r12, r1
    1622:	d1 04       	cpc	r13, r1
    1624:	e1 04       	cpc	r14, r1
    1626:	f1 04       	cpc	r15, r1
    1628:	a1 f0       	breq	.+40     	; 0x1652 <xTaskResumeAll+0x190>
    162a:	1f de       	rcall	.-962    	; 0x126a <xTaskIncrementTick>
    162c:	88 23       	and	r24, r24
    162e:	19 f0       	breq	.+6      	; 0x1636 <xTaskResumeAll+0x174>
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <xYieldPending>
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	c8 1a       	sub	r12, r24
    163a:	d1 08       	sbc	r13, r1
    163c:	e1 08       	sbc	r14, r1
    163e:	f1 08       	sbc	r15, r1
    1640:	a1 f7       	brne	.-24     	; 0x162a <xTaskResumeAll+0x168>
    1642:	10 92 82 0c 	sts	0x0C82, r1	; 0x800c82 <xPendedTicks>
    1646:	10 92 83 0c 	sts	0x0C83, r1	; 0x800c83 <xPendedTicks+0x1>
    164a:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <xPendedTicks+0x2>
    164e:	10 92 85 0c 	sts	0x0C85, r1	; 0x800c85 <xPendedTicks+0x3>
    1652:	80 91 81 0c 	lds	r24, 0x0C81	; 0x800c81 <xYieldPending>
    1656:	88 23       	and	r24, r24
    1658:	31 f0       	breq	.+12     	; 0x1666 <xTaskResumeAll+0x1a4>
    165a:	0e 94 2c 03 	call	0x658	; 0x658 <vPortYield>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <xTaskResumeAll+0x1a6>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <xTaskResumeAll+0x1a6>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	08 95       	ret

0000167a <xTaskDelayUntil>:
    167a:	8f 92       	push	r8
    167c:	9f 92       	push	r9
    167e:	af 92       	push	r10
    1680:	bf 92       	push	r11
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	ec 01       	movw	r28, r24
    1692:	6a 01       	movw	r12, r20
    1694:	7b 01       	movw	r14, r22
    1696:	d5 dd       	rcall	.-1110   	; 0x1242 <vTaskSuspendAll>
    1698:	80 90 88 0c 	lds	r8, 0x0C88	; 0x800c88 <xTickCount>
    169c:	90 90 89 0c 	lds	r9, 0x0C89	; 0x800c89 <xTickCount+0x1>
    16a0:	a0 90 8a 0c 	lds	r10, 0x0C8A	; 0x800c8a <xTickCount+0x2>
    16a4:	b0 90 8b 0c 	lds	r11, 0x0C8B	; 0x800c8b <xTickCount+0x3>
    16a8:	88 81       	ld	r24, Y
    16aa:	99 81       	ldd	r25, Y+1	; 0x01
    16ac:	aa 81       	ldd	r26, Y+2	; 0x02
    16ae:	bb 81       	ldd	r27, Y+3	; 0x03
    16b0:	ac 01       	movw	r20, r24
    16b2:	bd 01       	movw	r22, r26
    16b4:	4c 0d       	add	r20, r12
    16b6:	5d 1d       	adc	r21, r13
    16b8:	6e 1d       	adc	r22, r14
    16ba:	7f 1d       	adc	r23, r15
    16bc:	88 16       	cp	r8, r24
    16be:	99 06       	cpc	r9, r25
    16c0:	aa 06       	cpc	r10, r26
    16c2:	bb 06       	cpc	r11, r27
    16c4:	60 f4       	brcc	.+24     	; 0x16de <xTaskDelayUntil+0x64>
    16c6:	48 17       	cp	r20, r24
    16c8:	59 07       	cpc	r21, r25
    16ca:	6a 07       	cpc	r22, r26
    16cc:	7b 07       	cpc	r23, r27
    16ce:	98 f4       	brcc	.+38     	; 0x16f6 <xTaskDelayUntil+0x7c>
    16d0:	84 16       	cp	r8, r20
    16d2:	95 06       	cpc	r9, r21
    16d4:	a6 06       	cpc	r10, r22
    16d6:	b7 06       	cpc	r11, r23
    16d8:	80 f0       	brcs	.+32     	; 0x16fa <xTaskDelayUntil+0x80>
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <xTaskDelayUntil+0x8a>
    16de:	48 17       	cp	r20, r24
    16e0:	59 07       	cpc	r21, r25
    16e2:	6a 07       	cpc	r22, r26
    16e4:	7b 07       	cpc	r23, r27
    16e6:	58 f0       	brcs	.+22     	; 0x16fe <xTaskDelayUntil+0x84>
    16e8:	84 16       	cp	r8, r20
    16ea:	95 06       	cpc	r9, r21
    16ec:	a6 06       	cpc	r10, r22
    16ee:	b7 06       	cpc	r11, r23
    16f0:	40 f0       	brcs	.+16     	; 0x1702 <xTaskDelayUntil+0x88>
    16f2:	10 e0       	ldi	r17, 0x00	; 0
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <xTaskDelayUntil+0x8a>
    16f6:	10 e0       	ldi	r17, 0x00	; 0
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <xTaskDelayUntil+0x8a>
    16fa:	11 e0       	ldi	r17, 0x01	; 1
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <xTaskDelayUntil+0x8a>
    16fe:	11 e0       	ldi	r17, 0x01	; 1
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <xTaskDelayUntil+0x8a>
    1702:	11 e0       	ldi	r17, 0x01	; 1
    1704:	48 83       	st	Y, r20
    1706:	59 83       	std	Y+1, r21	; 0x01
    1708:	6a 83       	std	Y+2, r22	; 0x02
    170a:	7b 83       	std	Y+3, r23	; 0x03
    170c:	11 23       	and	r17, r17
    170e:	41 f0       	breq	.+16     	; 0x1720 <xTaskDelayUntil+0xa6>
    1710:	cb 01       	movw	r24, r22
    1712:	ba 01       	movw	r22, r20
    1714:	68 19       	sub	r22, r8
    1716:	79 09       	sbc	r23, r9
    1718:	8a 09       	sbc	r24, r10
    171a:	9b 09       	sbc	r25, r11
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	73 dc       	rcall	.-1818   	; 0x1006 <prvAddCurrentTaskToDelayedList>
    1720:	d0 de       	rcall	.-608    	; 0x14c2 <xTaskResumeAll>
    1722:	81 11       	cpse	r24, r1
    1724:	02 c0       	rjmp	.+4      	; 0x172a <xTaskDelayUntil+0xb0>
    1726:	0e 94 2c 03 	call	0x658	; 0x658 <vPortYield>
    172a:	81 2f       	mov	r24, r17
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	9f 90       	pop	r9
    1740:	8f 90       	pop	r8
    1742:	08 95       	ret

00001744 <vTaskDelay>:
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	6b 01       	movw	r12, r22
    174e:	7c 01       	movw	r14, r24
    1750:	67 2b       	or	r22, r23
    1752:	68 2b       	or	r22, r24
    1754:	69 2b       	or	r22, r25
    1756:	39 f0       	breq	.+14     	; 0x1766 <vTaskDelay+0x22>
    1758:	74 dd       	rcall	.-1304   	; 0x1242 <vTaskSuspendAll>
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	c7 01       	movw	r24, r14
    175e:	b6 01       	movw	r22, r12
    1760:	52 dc       	rcall	.-1884   	; 0x1006 <prvAddCurrentTaskToDelayedList>
    1762:	af de       	rcall	.-674    	; 0x14c2 <xTaskResumeAll>
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <vTaskDelay+0x24>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	81 11       	cpse	r24, r1
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <vTaskDelay+0x2c>
    176c:	0e 94 2c 03 	call	0x658	; 0x658 <vPortYield>
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	08 95       	ret

0000177a <vTaskSwitchContext>:
    177a:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxSchedulerSuspended>
    177e:	88 23       	and	r24, r24
    1780:	21 f0       	breq	.+8      	; 0x178a <vTaskSwitchContext+0x10>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <xYieldPending>
    1788:	08 95       	ret
    178a:	10 92 81 0c 	sts	0x0C81, r1	; 0x800c81 <xYieldPending>
    178e:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1792:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1796:	20 81       	ld	r18, Z
    1798:	31 81       	ldd	r19, Z+1	; 0x01
    179a:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <pxCurrentTCB>
    179e:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    17a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    17a4:	94 8d       	ldd	r25, Z+28	; 0x1c
    17a6:	82 17       	cp	r24, r18
    17a8:	93 07       	cpc	r25, r19
    17aa:	58 f0       	brcs	.+22     	; 0x17c2 <vTaskSwitchContext+0x48>
    17ac:	60 91 37 0d 	lds	r22, 0x0D37	; 0x800d37 <pxCurrentTCB>
    17b0:	70 91 38 0d 	lds	r23, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    17b4:	63 5e       	subi	r22, 0xE3	; 227
    17b6:	7f 4f       	sbci	r23, 0xFF	; 255
    17b8:	80 91 37 0d 	lds	r24, 0x0D37	; 0x800d37 <pxCurrentTCB>
    17bc:	90 91 38 0d 	lds	r25, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    17c0:	3e d5       	rcall	.+2684   	; 0x223e <vApplicationStackOverflowHook>
    17c2:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <uxTopReadyPriority>
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <vTaskSwitchContext+0x50>
    17c8:	81 50       	subi	r24, 0x01	; 1
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	9b e0       	ldi	r25, 0x0B	; 11
    17d0:	92 9f       	mul	r25, r18
    17d2:	f0 01       	movw	r30, r0
    17d4:	93 9f       	mul	r25, r19
    17d6:	f0 0d       	add	r31, r0
    17d8:	11 24       	eor	r1, r1
    17da:	e7 53       	subi	r30, 0x37	; 55
    17dc:	f3 4f       	sbci	r31, 0xF3	; 243
    17de:	90 81       	ld	r25, Z
    17e0:	99 23       	and	r25, r25
    17e2:	91 f3       	breq	.-28     	; 0x17c8 <vTaskSwitchContext+0x4e>
    17e4:	9b e0       	ldi	r25, 0x0B	; 11
    17e6:	92 9f       	mul	r25, r18
    17e8:	a0 01       	movw	r20, r0
    17ea:	93 9f       	mul	r25, r19
    17ec:	50 0d       	add	r21, r0
    17ee:	11 24       	eor	r1, r1
    17f0:	df 01       	movw	r26, r30
    17f2:	01 80       	ldd	r0, Z+1	; 0x01
    17f4:	f2 81       	ldd	r31, Z+2	; 0x02
    17f6:	e0 2d       	mov	r30, r0
    17f8:	04 80       	ldd	r0, Z+4	; 0x04
    17fa:	f5 81       	ldd	r31, Z+5	; 0x05
    17fc:	e0 2d       	mov	r30, r0
    17fe:	12 96       	adiw	r26, 0x02	; 2
    1800:	fc 93       	st	X, r31
    1802:	ee 93       	st	-X, r30
    1804:	11 97       	sbiw	r26, 0x01	; 1
    1806:	44 53       	subi	r20, 0x34	; 52
    1808:	53 4f       	sbci	r21, 0xF3	; 243
    180a:	e4 17       	cp	r30, r20
    180c:	f5 07       	cpc	r31, r21
    180e:	29 f4       	brne	.+10     	; 0x181a <vTaskSwitchContext+0xa0>
    1810:	44 81       	ldd	r20, Z+4	; 0x04
    1812:	55 81       	ldd	r21, Z+5	; 0x05
    1814:	fd 01       	movw	r30, r26
    1816:	52 83       	std	Z+2, r21	; 0x02
    1818:	41 83       	std	Z+1, r20	; 0x01
    181a:	9b e0       	ldi	r25, 0x0B	; 11
    181c:	92 9f       	mul	r25, r18
    181e:	f0 01       	movw	r30, r0
    1820:	93 9f       	mul	r25, r19
    1822:	f0 0d       	add	r31, r0
    1824:	11 24       	eor	r1, r1
    1826:	e7 53       	subi	r30, 0x37	; 55
    1828:	f3 4f       	sbci	r31, 0xF3	; 243
    182a:	01 80       	ldd	r0, Z+1	; 0x01
    182c:	f2 81       	ldd	r31, Z+2	; 0x02
    182e:	e0 2d       	mov	r30, r0
    1830:	20 85       	ldd	r18, Z+8	; 0x08
    1832:	31 85       	ldd	r19, Z+9	; 0x09
    1834:	30 93 38 0d 	sts	0x0D38, r19	; 0x800d38 <pxCurrentTCB+0x1>
    1838:	20 93 37 0d 	sts	0x0D37, r18	; 0x800d37 <pxCurrentTCB>
    183c:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <uxTopReadyPriority>
    1840:	08 95       	ret

00001842 <vTaskPlaceOnEventList>:
    1842:	cf 92       	push	r12
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	6a 01       	movw	r12, r20
    184c:	7b 01       	movw	r14, r22
    184e:	60 91 37 0d 	lds	r22, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1852:	70 91 38 0d 	lds	r23, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1856:	62 5f       	subi	r22, 0xF2	; 242
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInsert>
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	c7 01       	movw	r24, r14
    1862:	b6 01       	movw	r22, r12
    1864:	d0 db       	rcall	.-2144   	; 0x1006 <prvAddCurrentTaskToDelayedList>
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	df 90       	pop	r13
    186c:	cf 90       	pop	r12
    186e:	08 95       	ret

00001870 <vTaskPlaceOnEventListRestricted>:
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	fc 01       	movw	r30, r24
    1876:	cb 01       	movw	r24, r22
    1878:	ba 01       	movw	r22, r20
    187a:	a1 81       	ldd	r26, Z+1	; 0x01
    187c:	b2 81       	ldd	r27, Z+2	; 0x02
    187e:	c0 91 37 0d 	lds	r28, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1882:	d0 91 38 0d 	lds	r29, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1886:	bb 8b       	std	Y+19, r27	; 0x13
    1888:	aa 8b       	std	Y+18, r26	; 0x12
    188a:	c0 91 37 0d 	lds	r28, 0x0D37	; 0x800d37 <pxCurrentTCB>
    188e:	d0 91 38 0d 	lds	r29, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1892:	16 96       	adiw	r26, 0x06	; 6
    1894:	4d 91       	ld	r20, X+
    1896:	5c 91       	ld	r21, X
    1898:	17 97       	sbiw	r26, 0x07	; 7
    189a:	5d 8b       	std	Y+21, r21	; 0x15
    189c:	4c 8b       	std	Y+20, r20	; 0x14
    189e:	16 96       	adiw	r26, 0x06	; 6
    18a0:	cd 91       	ld	r28, X+
    18a2:	dc 91       	ld	r29, X
    18a4:	17 97       	sbiw	r26, 0x07	; 7
    18a6:	40 91 37 0d 	lds	r20, 0x0D37	; 0x800d37 <pxCurrentTCB>
    18aa:	50 91 38 0d 	lds	r21, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    18ae:	42 5f       	subi	r20, 0xF2	; 242
    18b0:	5f 4f       	sbci	r21, 0xFF	; 255
    18b2:	5d 83       	std	Y+5, r21	; 0x05
    18b4:	4c 83       	std	Y+4, r20	; 0x04
    18b6:	40 91 37 0d 	lds	r20, 0x0D37	; 0x800d37 <pxCurrentTCB>
    18ba:	50 91 38 0d 	lds	r21, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    18be:	42 5f       	subi	r20, 0xF2	; 242
    18c0:	5f 4f       	sbci	r21, 0xFF	; 255
    18c2:	17 96       	adiw	r26, 0x07	; 7
    18c4:	5c 93       	st	X, r21
    18c6:	4e 93       	st	-X, r20
    18c8:	16 97       	sbiw	r26, 0x06	; 6
    18ca:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <pxCurrentTCB>
    18ce:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    18d2:	59 96       	adiw	r26, 0x19	; 25
    18d4:	fc 93       	st	X, r31
    18d6:	ee 93       	st	-X, r30
    18d8:	58 97       	sbiw	r26, 0x18	; 24
    18da:	30 81       	ld	r19, Z
    18dc:	3f 5f       	subi	r19, 0xFF	; 255
    18de:	30 83       	st	Z, r19
    18e0:	22 23       	and	r18, r18
    18e2:	19 f0       	breq	.+6      	; 0x18ea <vTaskPlaceOnEventListRestricted+0x7a>
    18e4:	6f ef       	ldi	r22, 0xFF	; 255
    18e6:	7f ef       	ldi	r23, 0xFF	; 255
    18e8:	cb 01       	movw	r24, r22
    18ea:	42 2f       	mov	r20, r18
    18ec:	8c db       	rcall	.-2280   	; 0x1006 <prvAddCurrentTaskToDelayedList>
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <xTaskRemoveFromEventList>:
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	dc 01       	movw	r26, r24
    18fa:	17 96       	adiw	r26, 0x07	; 7
    18fc:	ed 91       	ld	r30, X+
    18fe:	fc 91       	ld	r31, X
    1900:	18 97       	sbiw	r26, 0x08	; 8
    1902:	00 84       	ldd	r0, Z+8	; 0x08
    1904:	f1 85       	ldd	r31, Z+9	; 0x09
    1906:	e0 2d       	mov	r30, r0
    1908:	a0 8d       	ldd	r26, Z+24	; 0x18
    190a:	b1 8d       	ldd	r27, Z+25	; 0x19
    190c:	c2 89       	ldd	r28, Z+18	; 0x12
    190e:	d3 89       	ldd	r29, Z+19	; 0x13
    1910:	84 89       	ldd	r24, Z+20	; 0x14
    1912:	95 89       	ldd	r25, Z+21	; 0x15
    1914:	9f 83       	std	Y+7, r25	; 0x07
    1916:	8e 83       	std	Y+6, r24	; 0x06
    1918:	c4 89       	ldd	r28, Z+20	; 0x14
    191a:	d5 89       	ldd	r29, Z+21	; 0x15
    191c:	82 89       	ldd	r24, Z+18	; 0x12
    191e:	93 89       	ldd	r25, Z+19	; 0x13
    1920:	9d 83       	std	Y+5, r25	; 0x05
    1922:	8c 83       	std	Y+4, r24	; 0x04
    1924:	11 96       	adiw	r26, 0x01	; 1
    1926:	8d 91       	ld	r24, X+
    1928:	9c 91       	ld	r25, X
    192a:	12 97       	sbiw	r26, 0x02	; 2
    192c:	9f 01       	movw	r18, r30
    192e:	22 5f       	subi	r18, 0xF2	; 242
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	82 17       	cp	r24, r18
    1934:	93 07       	cpc	r25, r19
    1936:	31 f4       	brne	.+12     	; 0x1944 <xTaskRemoveFromEventList+0x50>
    1938:	84 89       	ldd	r24, Z+20	; 0x14
    193a:	95 89       	ldd	r25, Z+21	; 0x15
    193c:	12 96       	adiw	r26, 0x02	; 2
    193e:	9c 93       	st	X, r25
    1940:	8e 93       	st	-X, r24
    1942:	11 97       	sbiw	r26, 0x01	; 1
    1944:	11 8e       	std	Z+25, r1	; 0x19
    1946:	10 8e       	std	Z+24, r1	; 0x18
    1948:	8c 91       	ld	r24, X
    194a:	81 50       	subi	r24, 0x01	; 1
    194c:	8c 93       	st	X, r24
    194e:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxSchedulerSuspended>
    1952:	81 11       	cpse	r24, r1
    1954:	52 c0       	rjmp	.+164    	; 0x19fa <xTaskRemoveFromEventList+0x106>
    1956:	a4 85       	ldd	r26, Z+12	; 0x0c
    1958:	b5 85       	ldd	r27, Z+13	; 0x0d
    195a:	c6 81       	ldd	r28, Z+6	; 0x06
    195c:	d7 81       	ldd	r29, Z+7	; 0x07
    195e:	80 85       	ldd	r24, Z+8	; 0x08
    1960:	91 85       	ldd	r25, Z+9	; 0x09
    1962:	9f 83       	std	Y+7, r25	; 0x07
    1964:	8e 83       	std	Y+6, r24	; 0x06
    1966:	c0 85       	ldd	r28, Z+8	; 0x08
    1968:	d1 85       	ldd	r29, Z+9	; 0x09
    196a:	86 81       	ldd	r24, Z+6	; 0x06
    196c:	97 81       	ldd	r25, Z+7	; 0x07
    196e:	9d 83       	std	Y+5, r25	; 0x05
    1970:	8c 83       	std	Y+4, r24	; 0x04
    1972:	11 96       	adiw	r26, 0x01	; 1
    1974:	8d 91       	ld	r24, X+
    1976:	9c 91       	ld	r25, X
    1978:	12 97       	sbiw	r26, 0x02	; 2
    197a:	9f 01       	movw	r18, r30
    197c:	2e 5f       	subi	r18, 0xFE	; 254
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	82 17       	cp	r24, r18
    1982:	93 07       	cpc	r25, r19
    1984:	31 f4       	brne	.+12     	; 0x1992 <xTaskRemoveFromEventList+0x9e>
    1986:	80 85       	ldd	r24, Z+8	; 0x08
    1988:	91 85       	ldd	r25, Z+9	; 0x09
    198a:	12 96       	adiw	r26, 0x02	; 2
    198c:	9c 93       	st	X, r25
    198e:	8e 93       	st	-X, r24
    1990:	11 97       	sbiw	r26, 0x01	; 1
    1992:	15 86       	std	Z+13, r1	; 0x0d
    1994:	14 86       	std	Z+12, r1	; 0x0c
    1996:	8c 91       	ld	r24, X
    1998:	81 50       	subi	r24, 0x01	; 1
    199a:	8c 93       	st	X, r24
    199c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    199e:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <uxTopReadyPriority>
    19a2:	8a 17       	cp	r24, r26
    19a4:	10 f4       	brcc	.+4      	; 0x19aa <xTaskRemoveFromEventList+0xb6>
    19a6:	a0 93 87 0c 	sts	0x0C87, r26	; 0x800c87 <uxTopReadyPriority>
    19aa:	8b e0       	ldi	r24, 0x0B	; 11
    19ac:	8a 9f       	mul	r24, r26
    19ae:	d0 01       	movw	r26, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	a7 53       	subi	r26, 0x37	; 55
    19b4:	b3 4f       	sbci	r27, 0xF3	; 243
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	0d 90       	ld	r0, X+
    19ba:	bc 91       	ld	r27, X
    19bc:	a0 2d       	mov	r26, r0
    19be:	b7 83       	std	Z+7, r27	; 0x07
    19c0:	a6 83       	std	Z+6, r26	; 0x06
    19c2:	16 96       	adiw	r26, 0x06	; 6
    19c4:	4d 91       	ld	r20, X+
    19c6:	5c 91       	ld	r21, X
    19c8:	17 97       	sbiw	r26, 0x07	; 7
    19ca:	51 87       	std	Z+9, r21	; 0x09
    19cc:	40 87       	std	Z+8, r20	; 0x08
    19ce:	16 96       	adiw	r26, 0x06	; 6
    19d0:	cd 91       	ld	r28, X+
    19d2:	dc 91       	ld	r29, X
    19d4:	17 97       	sbiw	r26, 0x07	; 7
    19d6:	3d 83       	std	Y+5, r19	; 0x05
    19d8:	2c 83       	std	Y+4, r18	; 0x04
    19da:	17 96       	adiw	r26, 0x07	; 7
    19dc:	3c 93       	st	X, r19
    19de:	2e 93       	st	-X, r18
    19e0:	16 97       	sbiw	r26, 0x06	; 6
    19e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    19e4:	8a 9f       	mul	r24, r26
    19e6:	d0 01       	movw	r26, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	a7 53       	subi	r26, 0x37	; 55
    19ec:	b3 4f       	sbci	r27, 0xF3	; 243
    19ee:	b5 87       	std	Z+13, r27	; 0x0d
    19f0:	a4 87       	std	Z+12, r26	; 0x0c
    19f2:	8c 91       	ld	r24, X
    19f4:	8f 5f       	subi	r24, 0xFF	; 255
    19f6:	8c 93       	st	X, r24
    19f8:	1c c0       	rjmp	.+56     	; 0x1a32 <xTaskRemoveFromEventList+0x13e>
    19fa:	44 ea       	ldi	r20, 0xA4	; 164
    19fc:	5c e0       	ldi	r21, 0x0C	; 12
    19fe:	da 01       	movw	r26, r20
    1a00:	11 96       	adiw	r26, 0x01	; 1
    1a02:	cd 91       	ld	r28, X+
    1a04:	dc 91       	ld	r29, X
    1a06:	12 97       	sbiw	r26, 0x02	; 2
    1a08:	d3 8b       	std	Z+19, r29	; 0x13
    1a0a:	c2 8b       	std	Z+18, r28	; 0x12
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a10:	95 8b       	std	Z+21, r25	; 0x15
    1a12:	84 8b       	std	Z+20, r24	; 0x14
    1a14:	8e 81       	ldd	r24, Y+6	; 0x06
    1a16:	9f 81       	ldd	r25, Y+7	; 0x07
    1a18:	dc 01       	movw	r26, r24
    1a1a:	15 96       	adiw	r26, 0x05	; 5
    1a1c:	3c 93       	st	X, r19
    1a1e:	2e 93       	st	-X, r18
    1a20:	14 97       	sbiw	r26, 0x04	; 4
    1a22:	3f 83       	std	Y+7, r19	; 0x07
    1a24:	2e 83       	std	Y+6, r18	; 0x06
    1a26:	51 8f       	std	Z+25, r21	; 0x19
    1a28:	40 8f       	std	Z+24, r20	; 0x18
    1a2a:	da 01       	movw	r26, r20
    1a2c:	8c 91       	ld	r24, X
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
    1a30:	8c 93       	st	X, r24
    1a32:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a34:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <pxCurrentTCB>
    1a38:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <pxCurrentTCB+0x1>
    1a3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a3e:	89 17       	cp	r24, r25
    1a40:	20 f4       	brcc	.+8      	; 0x1a4a <xTaskRemoveFromEventList+0x156>
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <xYieldPending>
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <xTaskRemoveFromEventList+0x158>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <vTaskInternalSetTimeOutState>:
    1a52:	20 91 80 0c 	lds	r18, 0x0C80	; 0x800c80 <xNumOfOverflows>
    1a56:	fc 01       	movw	r30, r24
    1a58:	20 83       	st	Z, r18
    1a5a:	40 91 88 0c 	lds	r20, 0x0C88	; 0x800c88 <xTickCount>
    1a5e:	50 91 89 0c 	lds	r21, 0x0C89	; 0x800c89 <xTickCount+0x1>
    1a62:	60 91 8a 0c 	lds	r22, 0x0C8A	; 0x800c8a <xTickCount+0x2>
    1a66:	70 91 8b 0c 	lds	r23, 0x0C8B	; 0x800c8b <xTickCount+0x3>
    1a6a:	41 83       	std	Z+1, r20	; 0x01
    1a6c:	52 83       	std	Z+2, r21	; 0x02
    1a6e:	63 83       	std	Z+3, r22	; 0x03
    1a70:	74 83       	std	Z+4, r23	; 0x04
    1a72:	08 95       	ret

00001a74 <xTaskCheckForTimeOut>:
    1a74:	8f 92       	push	r8
    1a76:	9f 92       	push	r9
    1a78:	af 92       	push	r10
    1a7a:	bf 92       	push	r11
    1a7c:	cf 92       	push	r12
    1a7e:	df 92       	push	r13
    1a80:	ef 92       	push	r14
    1a82:	ff 92       	push	r15
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	fb 01       	movw	r30, r22
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	0f 92       	push	r0
    1a94:	c0 90 88 0c 	lds	r12, 0x0C88	; 0x800c88 <xTickCount>
    1a98:	d0 90 89 0c 	lds	r13, 0x0C89	; 0x800c89 <xTickCount+0x1>
    1a9c:	e0 90 8a 0c 	lds	r14, 0x0C8A	; 0x800c8a <xTickCount+0x2>
    1aa0:	f0 90 8b 0c 	lds	r15, 0x0C8B	; 0x800c8b <xTickCount+0x3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	11 96       	adiw	r26, 0x01	; 1
    1aa8:	0d 91       	ld	r16, X+
    1aaa:	1d 91       	ld	r17, X+
    1aac:	2d 91       	ld	r18, X+
    1aae:	3c 91       	ld	r19, X
    1ab0:	14 97       	sbiw	r26, 0x04	; 4
    1ab2:	46 01       	movw	r8, r12
    1ab4:	57 01       	movw	r10, r14
    1ab6:	80 1a       	sub	r8, r16
    1ab8:	91 0a       	sbc	r9, r17
    1aba:	a2 0a       	sbc	r10, r18
    1abc:	b3 0a       	sbc	r11, r19
    1abe:	40 81       	ld	r20, Z
    1ac0:	51 81       	ldd	r21, Z+1	; 0x01
    1ac2:	62 81       	ldd	r22, Z+2	; 0x02
    1ac4:	73 81       	ldd	r23, Z+3	; 0x03
    1ac6:	4f 3f       	cpi	r20, 0xFF	; 255
    1ac8:	bf ef       	ldi	r27, 0xFF	; 255
    1aca:	5b 07       	cpc	r21, r27
    1acc:	6b 07       	cpc	r22, r27
    1ace:	7b 07       	cpc	r23, r27
    1ad0:	39 f1       	breq	.+78     	; 0x1b20 <xTaskCheckForTimeOut+0xac>
    1ad2:	ec 01       	movw	r28, r24
    1ad4:	b8 81       	ld	r27, Y
    1ad6:	a0 91 80 0c 	lds	r26, 0x0C80	; 0x800c80 <xNumOfOverflows>
    1ada:	ba 17       	cp	r27, r26
    1adc:	59 f0       	breq	.+22     	; 0x1af4 <xTaskCheckForTimeOut+0x80>
    1ade:	c0 16       	cp	r12, r16
    1ae0:	d1 06       	cpc	r13, r17
    1ae2:	e2 06       	cpc	r14, r18
    1ae4:	f3 06       	cpc	r15, r19
    1ae6:	30 f0       	brcs	.+12     	; 0x1af4 <xTaskCheckForTimeOut+0x80>
    1ae8:	10 82       	st	Z, r1
    1aea:	11 82       	std	Z+1, r1	; 0x01
    1aec:	12 82       	std	Z+2, r1	; 0x02
    1aee:	13 82       	std	Z+3, r1	; 0x03
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	17 c0       	rjmp	.+46     	; 0x1b22 <xTaskCheckForTimeOut+0xae>
    1af4:	84 16       	cp	r8, r20
    1af6:	95 06       	cpc	r9, r21
    1af8:	a6 06       	cpc	r10, r22
    1afa:	b7 06       	cpc	r11, r23
    1afc:	58 f4       	brcc	.+22     	; 0x1b14 <xTaskCheckForTimeOut+0xa0>
    1afe:	48 19       	sub	r20, r8
    1b00:	59 09       	sbc	r21, r9
    1b02:	6a 09       	sbc	r22, r10
    1b04:	7b 09       	sbc	r23, r11
    1b06:	40 83       	st	Z, r20
    1b08:	51 83       	std	Z+1, r21	; 0x01
    1b0a:	62 83       	std	Z+2, r22	; 0x02
    1b0c:	73 83       	std	Z+3, r23	; 0x03
    1b0e:	a1 df       	rcall	.-190    	; 0x1a52 <vTaskInternalSetTimeOutState>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	07 c0       	rjmp	.+14     	; 0x1b22 <xTaskCheckForTimeOut+0xae>
    1b14:	10 82       	st	Z, r1
    1b16:	11 82       	std	Z+1, r1	; 0x01
    1b18:	12 82       	std	Z+2, r1	; 0x02
    1b1a:	13 82       	std	Z+3, r1	; 0x03
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <xTaskCheckForTimeOut+0xae>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	0f 90       	pop	r0
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	bf 90       	pop	r11
    1b38:	af 90       	pop	r10
    1b3a:	9f 90       	pop	r9
    1b3c:	8f 90       	pop	r8
    1b3e:	08 95       	ret

00001b40 <vTaskMissedYield>:
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <xYieldPending>
    1b46:	08 95       	ret

00001b48 <xTaskGetSchedulerState>:
    1b48:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <xSchedulerRunning>
    1b4c:	88 23       	and	r24, r24
    1b4e:	31 f0       	breq	.+12     	; 0x1b5c <xTaskGetSchedulerState+0x14>
    1b50:	80 91 78 0c 	lds	r24, 0x0C78	; 0x800c78 <uxSchedulerSuspended>
    1b54:	81 11       	cpse	r24, r1
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <xTaskGetSchedulerState+0x18>
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	08 95       	ret
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	08 95       	ret
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	08 95       	ret

00001b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1b6e:	89 2b       	or	r24, r25
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <xTaskPriorityDisinherit+0x10>
    1b72:	49 c0       	rjmp	.+146    	; 0x1c06 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1b74:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b76:	81 50       	subi	r24, 0x01	; 1
    1b78:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1b7a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b7c:	95 a5       	ldd	r25, Z+45	; 0x2d
    1b7e:	29 17       	cp	r18, r25
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <xTaskPriorityDisinherit+0x20>
    1b82:	43 c0       	rjmp	.+134    	; 0x1c0a <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1b84:	81 11       	cpse	r24, r1
    1b86:	43 c0       	rjmp	.+134    	; 0x1c0e <xTaskPriorityDisinherit+0xaa>
    1b88:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1b8a:	8f 01       	movw	r16, r30
    1b8c:	0e 5f       	subi	r16, 0xFE	; 254
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	c8 01       	movw	r24, r16
    1b92:	0e 94 b0 02 	call	0x560	; 0x560 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1b96:	ed a5       	ldd	r30, Y+45	; 0x2d
    1b98:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b9a:	8a e0       	ldi	r24, 0x0A	; 10
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	8e 1b       	sub	r24, r30
    1ba4:	91 09       	sbc	r25, r1
    1ba6:	a1 09       	sbc	r26, r1
    1ba8:	b1 09       	sbc	r27, r1
    1baa:	8e 87       	std	Y+14, r24	; 0x0e
    1bac:	9f 87       	std	Y+15, r25	; 0x0f
    1bae:	a8 8b       	std	Y+16, r26	; 0x10
    1bb0:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1bb2:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <uxTopReadyPriority>
    1bb6:	8e 17       	cp	r24, r30
    1bb8:	10 f4       	brcc	.+4      	; 0x1bbe <xTaskPriorityDisinherit+0x5a>
    1bba:	e0 93 87 0c 	sts	0x0C87, r30	; 0x800c87 <uxTopReadyPriority>
    1bbe:	8b e0       	ldi	r24, 0x0B	; 11
    1bc0:	8e 9f       	mul	r24, r30
    1bc2:	f0 01       	movw	r30, r0
    1bc4:	11 24       	eor	r1, r1
    1bc6:	e7 53       	subi	r30, 0x37	; 55
    1bc8:	f3 4f       	sbci	r31, 0xF3	; 243
    1bca:	01 80       	ldd	r0, Z+1	; 0x01
    1bcc:	f2 81       	ldd	r31, Z+2	; 0x02
    1bce:	e0 2d       	mov	r30, r0
    1bd0:	ff 83       	std	Y+7, r31	; 0x07
    1bd2:	ee 83       	std	Y+6, r30	; 0x06
    1bd4:	26 81       	ldd	r18, Z+6	; 0x06
    1bd6:	37 81       	ldd	r19, Z+7	; 0x07
    1bd8:	39 87       	std	Y+9, r19	; 0x09
    1bda:	28 87       	std	Y+8, r18	; 0x08
    1bdc:	a6 81       	ldd	r26, Z+6	; 0x06
    1bde:	b7 81       	ldd	r27, Z+7	; 0x07
    1be0:	15 96       	adiw	r26, 0x05	; 5
    1be2:	1c 93       	st	X, r17
    1be4:	0e 93       	st	-X, r16
    1be6:	14 97       	sbiw	r26, 0x04	; 4
    1be8:	17 83       	std	Z+7, r17	; 0x07
    1bea:	06 83       	std	Z+6, r16	; 0x06
    1bec:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bee:	8e 9f       	mul	r24, r30
    1bf0:	f0 01       	movw	r30, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	e7 53       	subi	r30, 0x37	; 55
    1bf6:	f3 4f       	sbci	r31, 0xF3	; 243
    1bf8:	fd 87       	std	Y+13, r31	; 0x0d
    1bfa:	ec 87       	std	Y+12, r30	; 0x0c
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <xTaskPriorityDisinherit+0xac>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <xTaskPriorityDisinherit+0xac>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	08 95       	ret

00001c1a <prvGetNextExpireTime>:
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <pxCurrentTimerList>
    1c20:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <pxCurrentTimerList+0x1>
    1c24:	80 81       	ld	r24, Z
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	81 11       	cpse	r24, r1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9c 93       	st	X, r25
    1c2e:	91 11       	cpse	r25, r1
    1c30:	08 c0       	rjmp	.+16     	; 0x1c42 <prvGetNextExpireTime+0x28>
    1c32:	07 80       	ldd	r0, Z+7	; 0x07
    1c34:	f0 85       	ldd	r31, Z+8	; 0x08
    1c36:	e0 2d       	mov	r30, r0
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	08 95       	ret
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	cb 01       	movw	r24, r22
    1c48:	08 95       	ret

00001c4a <prvInsertTimerInActiveList>:
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	fc 01       	movw	r30, r24
    1c58:	42 83       	std	Z+2, r20	; 0x02
    1c5a:	53 83       	std	Z+3, r21	; 0x03
    1c5c:	64 83       	std	Z+4, r22	; 0x04
    1c5e:	75 83       	std	Z+5, r23	; 0x05
    1c60:	93 87       	std	Z+11, r25	; 0x0b
    1c62:	82 87       	std	Z+10, r24	; 0x0a
    1c64:	04 17       	cp	r16, r20
    1c66:	15 07       	cpc	r17, r21
    1c68:	26 07       	cpc	r18, r22
    1c6a:	37 07       	cpc	r19, r23
    1c6c:	c0 f0       	brcs	.+48     	; 0x1c9e <prvInsertTimerInActiveList+0x54>
    1c6e:	0c 19       	sub	r16, r12
    1c70:	1d 09       	sbc	r17, r13
    1c72:	2e 09       	sbc	r18, r14
    1c74:	3f 09       	sbc	r19, r15
    1c76:	86 85       	ldd	r24, Z+14	; 0x0e
    1c78:	97 85       	ldd	r25, Z+15	; 0x0f
    1c7a:	a0 89       	ldd	r26, Z+16	; 0x10
    1c7c:	b1 89       	ldd	r27, Z+17	; 0x11
    1c7e:	08 17       	cp	r16, r24
    1c80:	19 07       	cpc	r17, r25
    1c82:	2a 07       	cpc	r18, r26
    1c84:	3b 07       	cpc	r19, r27
    1c86:	00 f5       	brcc	.+64     	; 0x1cc8 <prvInsertTimerInActiveList+0x7e>
    1c88:	bf 01       	movw	r22, r30
    1c8a:	6e 5f       	subi	r22, 0xFE	; 254
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <pxOverflowTimerList>
    1c92:	90 91 42 0d 	lds	r25, 0x0D42	; 0x800d42 <pxOverflowTimerList+0x1>
    1c96:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInsert>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	18 c0       	rjmp	.+48     	; 0x1cce <prvInsertTimerInActiveList+0x84>
    1c9e:	0c 15       	cp	r16, r12
    1ca0:	1d 05       	cpc	r17, r13
    1ca2:	2e 05       	cpc	r18, r14
    1ca4:	3f 05       	cpc	r19, r15
    1ca6:	28 f4       	brcc	.+10     	; 0x1cb2 <prvInsertTimerInActiveList+0x68>
    1ca8:	4c 15       	cp	r20, r12
    1caa:	5d 05       	cpc	r21, r13
    1cac:	6e 05       	cpc	r22, r14
    1cae:	7f 05       	cpc	r23, r15
    1cb0:	68 f4       	brcc	.+26     	; 0x1ccc <prvInsertTimerInActiveList+0x82>
    1cb2:	bf 01       	movw	r22, r30
    1cb4:	6e 5f       	subi	r22, 0xFE	; 254
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <pxCurrentTimerList>
    1cbc:	90 91 44 0d 	lds	r25, 0x0D44	; 0x800d44 <pxCurrentTimerList+0x1>
    1cc0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInsert>
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	03 c0       	rjmp	.+6      	; 0x1cce <prvInsertTimerInActiveList+0x84>
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <prvInsertTimerInActiveList+0x84>
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	08 95       	ret

00001cdc <prvCheckForValidListAndQueue>:
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	0f 92       	push	r0
    1ce2:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <xTimerQueue>
    1ce6:	90 91 40 0d 	lds	r25, 0x0D40	; 0x800d40 <xTimerQueue+0x1>
    1cea:	89 2b       	or	r24, r25
    1cec:	e9 f4       	brne	.+58     	; 0x1d28 <prvCheckForValidListAndQueue+0x4c>
    1cee:	80 e5       	ldi	r24, 0x50	; 80
    1cf0:	9d e0       	ldi	r25, 0x0D	; 13
    1cf2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <vListInitialise>
    1cf6:	85 e4       	ldi	r24, 0x45	; 69
    1cf8:	9d e0       	ldi	r25, 0x0D	; 13
    1cfa:	0e 94 5e 02 	call	0x4bc	; 0x4bc <vListInitialise>
    1cfe:	80 e5       	ldi	r24, 0x50	; 80
    1d00:	9d e0       	ldi	r25, 0x0D	; 13
    1d02:	90 93 44 0d 	sts	0x0D44, r25	; 0x800d44 <pxCurrentTimerList+0x1>
    1d06:	80 93 43 0d 	sts	0x0D43, r24	; 0x800d43 <pxCurrentTimerList>
    1d0a:	85 e4       	ldi	r24, 0x45	; 69
    1d0c:	9d e0       	ldi	r25, 0x0D	; 13
    1d0e:	90 93 42 0d 	sts	0x0D42, r25	; 0x800d42 <pxOverflowTimerList+0x1>
    1d12:	80 93 41 0d 	sts	0x0D41, r24	; 0x800d41 <pxOverflowTimerList>
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	67 e0       	ldi	r22, 0x07	; 7
    1d1a:	8a e0       	ldi	r24, 0x0A	; 10
    1d1c:	0e 94 0c 05 	call	0xa18	; 0xa18 <xQueueGenericCreate>
    1d20:	90 93 40 0d 	sts	0x0D40, r25	; 0x800d40 <xTimerQueue+0x1>
    1d24:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <xTimerQueue>
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	08 95       	ret

00001d2e <xTimerCreateTimerTask>:
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	d3 df       	rcall	.-90     	; 0x1cdc <prvCheckForValidListAndQueue>
    1d36:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <xTimerQueue>
    1d3a:	90 91 40 0d 	lds	r25, 0x0D40	; 0x800d40 <xTimerQueue+0x1>
    1d3e:	89 2b       	or	r24, r25
    1d40:	89 f0       	breq	.+34     	; 0x1d64 <xTimerCreateTimerTask+0x36>
    1d42:	0f 2e       	mov	r0, r31
    1d44:	fd e3       	ldi	r31, 0x3D	; 61
    1d46:	ef 2e       	mov	r14, r31
    1d48:	fd e0       	ldi	r31, 0x0D	; 13
    1d4a:	ff 2e       	mov	r15, r31
    1d4c:	f0 2d       	mov	r31, r0
    1d4e:	03 e0       	ldi	r16, 0x03	; 3
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 ec       	ldi	r20, 0xC0	; 192
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	67 e2       	ldi	r22, 0x27	; 39
    1d5a:	72 e0       	ldi	r23, 0x02	; 2
    1d5c:	86 ed       	ldi	r24, 0xD6	; 214
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	f1 d9       	rcall	.-3102   	; 0x1144 <xTaskCreate>
    1d62:	01 c0       	rjmp	.+2      	; 0x1d66 <xTimerCreateTimerTask+0x38>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	08 95       	ret

00001d6e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1d6e:	8f 92       	push	r8
    1d70:	9f 92       	push	r9
    1d72:	af 92       	push	r10
    1d74:	bf 92       	push	r11
    1d76:	cf 92       	push	r12
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	27 97       	sbiw	r28, 0x07	; 7
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1d96:	e0 91 3f 0d 	lds	r30, 0x0D3F	; 0x800d3f <xTimerQueue>
    1d9a:	f0 91 40 0d 	lds	r31, 0x0D40	; 0x800d40 <xTimerQueue+0x1>
    1d9e:	30 97       	sbiw	r30, 0x00	; 0
    1da0:	81 f1       	breq	.+96     	; 0x1e02 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1da2:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1da4:	2a 83       	std	Y+2, r18	; 0x02
    1da6:	3b 83       	std	Y+3, r19	; 0x03
    1da8:	4c 83       	std	Y+4, r20	; 0x04
    1daa:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1dac:	9f 83       	std	Y+7, r25	; 0x07
    1dae:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1db0:	66 30       	cpi	r22, 0x06	; 6
    1db2:	f4 f4       	brge	.+60     	; 0x1df0 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1db4:	c9 de       	rcall	.-622    	; 0x1b48 <xTaskGetSchedulerState>
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	69 f4       	brne	.+26     	; 0x1dd4 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1dba:	00 e0       	ldi	r16, 0x00	; 0
    1dbc:	a7 01       	movw	r20, r14
    1dbe:	96 01       	movw	r18, r12
    1dc0:	be 01       	movw	r22, r28
    1dc2:	6f 5f       	subi	r22, 0xFF	; 255
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <xTimerQueue>
    1dca:	90 91 40 0d 	lds	r25, 0x0D40	; 0x800d40 <xTimerQueue+0x1>
    1dce:	0e 94 2f 05 	call	0xa5e	; 0xa5e <xQueueGenericSend>
    1dd2:	18 c0       	rjmp	.+48     	; 0x1e04 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1dd4:	00 e0       	ldi	r16, 0x00	; 0
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	a9 01       	movw	r20, r18
    1ddc:	be 01       	movw	r22, r28
    1dde:	6f 5f       	subi	r22, 0xFF	; 255
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255
    1de2:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <xTimerQueue>
    1de6:	90 91 40 0d 	lds	r25, 0x0D40	; 0x800d40 <xTimerQueue+0x1>
    1dea:	0e 94 2f 05 	call	0xa5e	; 0xa5e <xQueueGenericSend>
    1dee:	0a c0       	rjmp	.+20     	; 0x1e04 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	a8 01       	movw	r20, r16
    1df4:	be 01       	movw	r22, r28
    1df6:	6f 5f       	subi	r22, 0xFF	; 255
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	cf 01       	movw	r24, r30
    1dfc:	0e 94 ba 05 	call	0xb74	; 0xb74 <xQueueGenericSendFromISR>
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1e02:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1e04:	27 96       	adiw	r28, 0x07	; 7
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	9f 90       	pop	r9
    1e26:	8f 90       	pop	r8
    1e28:	08 95       	ret

00001e2a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    1e2a:	8f 92       	push	r8
    1e2c:	9f 92       	push	r9
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1e42:	3b c0       	rjmp	.+118    	; 0x1eba <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1e44:	07 80       	ldd	r0, Z+7	; 0x07
    1e46:	f0 85       	ldd	r31, Z+8	; 0x08
    1e48:	e0 2d       	mov	r30, r0
    1e4a:	80 80       	ld	r8, Z
    1e4c:	91 80       	ldd	r9, Z+1	; 0x01
    1e4e:	a2 80       	ldd	r10, Z+2	; 0x02
    1e50:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1e52:	c0 85       	ldd	r28, Z+8	; 0x08
    1e54:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1e56:	8e 01       	movw	r16, r28
    1e58:	0e 5f       	subi	r16, 0xFE	; 254
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	0e 94 b0 02 	call	0x560	; 0x560 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1e62:	ec 89       	ldd	r30, Y+20	; 0x14
    1e64:	fd 89       	ldd	r31, Y+21	; 0x15
    1e66:	ce 01       	movw	r24, r28
    1e68:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1e6a:	8e 89       	ldd	r24, Y+22	; 0x16
    1e6c:	82 ff       	sbrs	r24, 2
    1e6e:	25 c0       	rjmp	.+74     	; 0x1eba <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1e70:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e72:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e74:	a8 89       	ldd	r26, Y+16	; 0x10
    1e76:	b9 89       	ldd	r27, Y+17	; 0x11
    1e78:	88 0d       	add	r24, r8
    1e7a:	99 1d       	adc	r25, r9
    1e7c:	aa 1d       	adc	r26, r10
    1e7e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    1e80:	88 16       	cp	r8, r24
    1e82:	99 06       	cpc	r9, r25
    1e84:	aa 06       	cpc	r10, r26
    1e86:	bb 06       	cpc	r11, r27
    1e88:	70 f4       	brcc	.+28     	; 0x1ea6 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
    1e8c:	9b 83       	std	Y+3, r25	; 0x03
    1e8e:	ac 83       	std	Y+4, r26	; 0x04
    1e90:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1e92:	db 87       	std	Y+11, r29	; 0x0b
    1e94:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1e96:	b8 01       	movw	r22, r16
    1e98:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <pxCurrentTimerList>
    1e9c:	90 91 44 0d 	lds	r25, 0x0D44	; 0x800d44 <pxCurrentTimerList+0x1>
    1ea0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInsert>
    1ea4:	0a c0       	rjmp	.+20     	; 0x1eba <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1ea6:	c1 2c       	mov	r12, r1
    1ea8:	d1 2c       	mov	r13, r1
    1eaa:	76 01       	movw	r14, r12
    1eac:	00 e0       	ldi	r16, 0x00	; 0
    1eae:	10 e0       	ldi	r17, 0x00	; 0
    1eb0:	a5 01       	movw	r20, r10
    1eb2:	94 01       	movw	r18, r8
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	5a df       	rcall	.-332    	; 0x1d6e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1eba:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <pxCurrentTimerList>
    1ebe:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <pxCurrentTimerList+0x1>
    1ec2:	80 81       	ld	r24, Z
    1ec4:	81 11       	cpse	r24, r1
    1ec6:	be cf       	rjmp	.-132    	; 0x1e44 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1ec8:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <pxOverflowTimerList>
    1ecc:	90 91 42 0d 	lds	r25, 0x0D42	; 0x800d42 <pxOverflowTimerList+0x1>
    1ed0:	90 93 44 0d 	sts	0x0D44, r25	; 0x800d44 <pxCurrentTimerList+0x1>
    1ed4:	80 93 43 0d 	sts	0x0D43, r24	; 0x800d43 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1ed8:	f0 93 42 0d 	sts	0x0D42, r31	; 0x800d42 <pxOverflowTimerList+0x1>
    1edc:	e0 93 41 0d 	sts	0x0D41, r30	; 0x800d41 <pxOverflowTimerList>
    }
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	df 90       	pop	r13
    1eee:	cf 90       	pop	r12
    1ef0:	bf 90       	pop	r11
    1ef2:	af 90       	pop	r10
    1ef4:	9f 90       	pop	r9
    1ef6:	8f 90       	pop	r8
    1ef8:	08 95       	ret

00001efa <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1f08:	a2 d9       	rcall	.-3260   	; 0x124e <xTaskGetTickCount>
    1f0a:	6b 01       	movw	r12, r22
    1f0c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    1f0e:	80 91 39 0d 	lds	r24, 0x0D39	; 0x800d39 <xLastTime.2436>
    1f12:	90 91 3a 0d 	lds	r25, 0x0D3A	; 0x800d3a <xLastTime.2436+0x1>
    1f16:	a0 91 3b 0d 	lds	r26, 0x0D3B	; 0x800d3b <xLastTime.2436+0x2>
    1f1a:	b0 91 3c 0d 	lds	r27, 0x0D3C	; 0x800d3c <xLastTime.2436+0x3>
    1f1e:	c8 16       	cp	r12, r24
    1f20:	d9 06       	cpc	r13, r25
    1f22:	ea 06       	cpc	r14, r26
    1f24:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    1f26:	20 f4       	brcc	.+8      	; 0x1f30 <prvSampleTimeNow+0x36>
    1f28:	80 df       	rcall	.-256    	; 0x1e2a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	88 83       	st	Y, r24
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1f30:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    1f32:	c0 92 39 0d 	sts	0x0D39, r12	; 0x800d39 <xLastTime.2436>
    1f36:	d0 92 3a 0d 	sts	0x0D3A, r13	; 0x800d3a <xLastTime.2436+0x1>
    1f3a:	e0 92 3b 0d 	sts	0x0D3B, r14	; 0x800d3b <xLastTime.2436+0x2>
    1f3e:	f0 92 3c 0d 	sts	0x0D3C, r15	; 0x800d3c <xLastTime.2436+0x3>

        return xTimeNow;
    }
    1f42:	c7 01       	movw	r24, r14
    1f44:	b6 01       	movw	r22, r12
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	08 95       	ret

00001f54 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1f54:	4f 92       	push	r4
    1f56:	5f 92       	push	r5
    1f58:	6f 92       	push	r6
    1f5a:	7f 92       	push	r7
    1f5c:	8f 92       	push	r8
    1f5e:	9f 92       	push	r9
    1f60:	af 92       	push	r10
    1f62:	bf 92       	push	r11
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	4b 01       	movw	r8, r22
    1f76:	5c 01       	movw	r10, r24
    1f78:	29 01       	movw	r4, r18
    1f7a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1f7c:	e0 91 43 0d 	lds	r30, 0x0D43	; 0x800d43 <pxCurrentTimerList>
    1f80:	f0 91 44 0d 	lds	r31, 0x0D44	; 0x800d44 <pxCurrentTimerList+0x1>
    1f84:	07 80       	ldd	r0, Z+7	; 0x07
    1f86:	f0 85       	ldd	r31, Z+8	; 0x08
    1f88:	e0 2d       	mov	r30, r0
    1f8a:	c0 85       	ldd	r28, Z+8	; 0x08
    1f8c:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1f8e:	ce 01       	movw	r24, r28
    1f90:	02 96       	adiw	r24, 0x02	; 2
    1f92:	0e 94 b0 02 	call	0x560	; 0x560 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1f96:	8e 89       	ldd	r24, Y+22	; 0x16
    1f98:	82 ff       	sbrs	r24, 2
    1f9a:	1b c0       	rjmp	.+54     	; 0x1fd2 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1f9c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f9e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fa0:	68 89       	ldd	r22, Y+16	; 0x10
    1fa2:	79 89       	ldd	r23, Y+17	; 0x11
    1fa4:	48 0d       	add	r20, r8
    1fa6:	59 1d       	adc	r21, r9
    1fa8:	6a 1d       	adc	r22, r10
    1faa:	7b 1d       	adc	r23, r11
    1fac:	75 01       	movw	r14, r10
    1fae:	64 01       	movw	r12, r8
    1fb0:	93 01       	movw	r18, r6
    1fb2:	82 01       	movw	r16, r4
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	49 de       	rcall	.-878    	; 0x1c4a <prvInsertTimerInActiveList>
    1fb8:	88 23       	and	r24, r24
    1fba:	69 f0       	breq	.+26     	; 0x1fd6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1fbc:	c1 2c       	mov	r12, r1
    1fbe:	d1 2c       	mov	r13, r1
    1fc0:	76 01       	movw	r14, r12
    1fc2:	00 e0       	ldi	r16, 0x00	; 0
    1fc4:	10 e0       	ldi	r17, 0x00	; 0
    1fc6:	a5 01       	movw	r20, r10
    1fc8:	94 01       	movw	r18, r8
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	ce 01       	movw	r24, r28
    1fce:	cf de       	rcall	.-610    	; 0x1d6e <xTimerGenericCommand>
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1fd2:	8e 7f       	andi	r24, 0xFE	; 254
    1fd4:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1fd6:	ec 89       	ldd	r30, Y+20	; 0x14
    1fd8:	fd 89       	ldd	r31, Y+21	; 0x15
    1fda:	ce 01       	movw	r24, r28
    1fdc:	19 95       	eicall
    }
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	cf 90       	pop	r12
    1fee:	bf 90       	pop	r11
    1ff0:	af 90       	pop	r10
    1ff2:	9f 90       	pop	r9
    1ff4:	8f 90       	pop	r8
    1ff6:	7f 90       	pop	r7
    1ff8:	6f 90       	pop	r6
    1ffa:	5f 90       	pop	r5
    1ffc:	4f 90       	pop	r4
    1ffe:	08 95       	ret

00002000 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	1f 92       	push	r1
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	6b 01       	movw	r12, r22
    201e:	7c 01       	movw	r14, r24
    2020:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2022:	0f d9       	rcall	.-3554   	; 0x1242 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2024:	ce 01       	movw	r24, r28
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	68 df       	rcall	.-304    	; 0x1efa <prvSampleTimeNow>
    202a:	4b 01       	movw	r8, r22
    202c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	81 11       	cpse	r24, r1
    2032:	2b c0       	rjmp	.+86     	; 0x208a <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2034:	11 11       	cpse	r17, r1
    2036:	0c c0       	rjmp	.+24     	; 0x2050 <prvProcessTimerOrBlockTask+0x50>
    2038:	8c 14       	cp	r8, r12
    203a:	9d 04       	cpc	r9, r13
    203c:	ae 04       	cpc	r10, r14
    203e:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2040:	38 f0       	brcs	.+14     	; 0x2050 <prvProcessTimerOrBlockTask+0x50>
    2042:	3f da       	rcall	.-2946   	; 0x14c2 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2044:	a5 01       	movw	r20, r10
    2046:	94 01       	movw	r18, r8
    2048:	c7 01       	movw	r24, r14
    204a:	b6 01       	movw	r22, r12
    204c:	83 df       	rcall	.-250    	; 0x1f54 <prvProcessExpiredTimer>
    204e:	1e c0       	rjmp	.+60     	; 0x208c <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2050:	11 23       	and	r17, r17
    2052:	41 f0       	breq	.+16     	; 0x2064 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2054:	e0 91 41 0d 	lds	r30, 0x0D41	; 0x800d41 <pxOverflowTimerList>
    2058:	f0 91 42 0d 	lds	r31, 0x0D42	; 0x800d42 <pxOverflowTimerList+0x1>
    205c:	80 81       	ld	r24, Z
    205e:	11 e0       	ldi	r17, 0x01	; 1
    2060:	81 11       	cpse	r24, r1
    2062:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2064:	b7 01       	movw	r22, r14
    2066:	a6 01       	movw	r20, r12
    2068:	48 19       	sub	r20, r8
    206a:	59 09       	sbc	r21, r9
    206c:	6a 09       	sbc	r22, r10
    206e:	7b 09       	sbc	r23, r11
    2070:	21 2f       	mov	r18, r17
    2072:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <xTimerQueue>
    2076:	90 91 40 0d 	lds	r25, 0x0D40	; 0x800d40 <xTimerQueue+0x1>
    207a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    207e:	21 da       	rcall	.-3006   	; 0x14c2 <xTaskResumeAll>
    2080:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2082:	04 c0       	rjmp	.+8      	; 0x208c <prvProcessTimerOrBlockTask+0x8c>
    2084:	0e 94 2c 03 	call	0x658	; 0x658 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2088:	01 c0       	rjmp	.+2      	; 0x208c <prvProcessTimerOrBlockTask+0x8c>
    208a:	1b da       	rcall	.-3018   	; 0x14c2 <xTaskResumeAll>
            }
        }
    }
    208c:	0f 90       	pop	r0
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	cf 90       	pop	r12
    209c:	bf 90       	pop	r11
    209e:	af 90       	pop	r10
    20a0:	9f 90       	pop	r9
    20a2:	8f 90       	pop	r8
    20a4:	08 95       	ret

000020a6 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    20a6:	af 92       	push	r10
    20a8:	bf 92       	push	r11
    20aa:	cf 92       	push	r12
    20ac:	df 92       	push	r13
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	28 97       	sbiw	r28, 0x08	; 8
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    20ca:	82 c0       	rjmp	.+260    	; 0x21d0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	88 23       	and	r24, r24
    20d0:	0c f4       	brge	.+2      	; 0x20d4 <prvProcessReceivedCommands+0x2e>
    20d2:	7e c0       	rjmp	.+252    	; 0x21d0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    20d4:	ae 80       	ldd	r10, Y+6	; 0x06
    20d6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    20d8:	d5 01       	movw	r26, r10
    20da:	1c 96       	adiw	r26, 0x0c	; 12
    20dc:	8d 91       	ld	r24, X+
    20de:	9c 91       	ld	r25, X
    20e0:	1d 97       	sbiw	r26, 0x0d	; 13
    20e2:	89 2b       	or	r24, r25
    20e4:	21 f0       	breq	.+8      	; 0x20ee <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    20e6:	c5 01       	movw	r24, r10
    20e8:	02 96       	adiw	r24, 0x02	; 2
    20ea:	0e 94 b0 02 	call	0x560	; 0x560 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    20ee:	ce 01       	movw	r24, r28
    20f0:	08 96       	adiw	r24, 0x08	; 8
    20f2:	03 df       	rcall	.-506    	; 0x1efa <prvSampleTimeNow>
    20f4:	8b 01       	movw	r16, r22
    20f6:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    20f8:	e9 81       	ldd	r30, Y+1	; 0x01
    20fa:	0e 2e       	mov	r0, r30
    20fc:	00 0c       	add	r0, r0
    20fe:	ff 0b       	sbc	r31, r31
    2100:	ea 30       	cpi	r30, 0x0A	; 10
    2102:	f1 05       	cpc	r31, r1
    2104:	08 f0       	brcs	.+2      	; 0x2108 <prvProcessReceivedCommands+0x62>
    2106:	64 c0       	rjmp	.+200    	; 0x21d0 <prvProcessReceivedCommands+0x12a>
    2108:	88 27       	eor	r24, r24
    210a:	ee 58       	subi	r30, 0x8E	; 142
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	8f 4f       	sbci	r24, 0xFF	; 255
    2110:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2114:	f5 01       	movw	r30, r10
    2116:	86 89       	ldd	r24, Z+22	; 0x16
    2118:	81 60       	ori	r24, 0x01	; 1
    211a:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    211c:	ca 80       	ldd	r12, Y+2	; 0x02
    211e:	db 80       	ldd	r13, Y+3	; 0x03
    2120:	ec 80       	ldd	r14, Y+4	; 0x04
    2122:	fd 80       	ldd	r15, Y+5	; 0x05
    2124:	46 85       	ldd	r20, Z+14	; 0x0e
    2126:	57 85       	ldd	r21, Z+15	; 0x0f
    2128:	60 89       	ldd	r22, Z+16	; 0x10
    212a:	71 89       	ldd	r23, Z+17	; 0x11
    212c:	4c 0d       	add	r20, r12
    212e:	5d 1d       	adc	r21, r13
    2130:	6e 1d       	adc	r22, r14
    2132:	7f 1d       	adc	r23, r15
    2134:	c5 01       	movw	r24, r10
    2136:	89 dd       	rcall	.-1262   	; 0x1c4a <prvInsertTimerInActiveList>
    2138:	88 23       	and	r24, r24
    213a:	09 f4       	brne	.+2      	; 0x213e <prvProcessReceivedCommands+0x98>
    213c:	49 c0       	rjmp	.+146    	; 0x21d0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    213e:	d5 01       	movw	r26, r10
    2140:	54 96       	adiw	r26, 0x14	; 20
    2142:	ed 91       	ld	r30, X+
    2144:	fc 91       	ld	r31, X
    2146:	55 97       	sbiw	r26, 0x15	; 21
    2148:	c5 01       	movw	r24, r10
    214a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    214c:	f5 01       	movw	r30, r10
    214e:	86 89       	ldd	r24, Z+22	; 0x16
    2150:	82 ff       	sbrs	r24, 2
    2152:	3e c0       	rjmp	.+124    	; 0x21d0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2154:	4a 81       	ldd	r20, Y+2	; 0x02
    2156:	5b 81       	ldd	r21, Y+3	; 0x03
    2158:	6c 81       	ldd	r22, Y+4	; 0x04
    215a:	7d 81       	ldd	r23, Y+5	; 0x05
    215c:	86 85       	ldd	r24, Z+14	; 0x0e
    215e:	97 85       	ldd	r25, Z+15	; 0x0f
    2160:	a0 89       	ldd	r26, Z+16	; 0x10
    2162:	b1 89       	ldd	r27, Z+17	; 0x11
    2164:	9a 01       	movw	r18, r20
    2166:	ab 01       	movw	r20, r22
    2168:	28 0f       	add	r18, r24
    216a:	39 1f       	adc	r19, r25
    216c:	4a 1f       	adc	r20, r26
    216e:	5b 1f       	adc	r21, r27
    2170:	c1 2c       	mov	r12, r1
    2172:	d1 2c       	mov	r13, r1
    2174:	76 01       	movw	r14, r12
    2176:	00 e0       	ldi	r16, 0x00	; 0
    2178:	10 e0       	ldi	r17, 0x00	; 0
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	c5 01       	movw	r24, r10
    217e:	f7 dd       	rcall	.-1042   	; 0x1d6e <xTimerGenericCommand>
    2180:	27 c0       	rjmp	.+78     	; 0x21d0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2182:	d5 01       	movw	r26, r10
    2184:	56 96       	adiw	r26, 0x16	; 22
    2186:	8c 91       	ld	r24, X
    2188:	56 97       	sbiw	r26, 0x16	; 22
    218a:	8e 7f       	andi	r24, 0xFE	; 254
    218c:	56 96       	adiw	r26, 0x16	; 22
    218e:	8c 93       	st	X, r24
                        break;
    2190:	1f c0       	rjmp	.+62     	; 0x21d0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2192:	f5 01       	movw	r30, r10
    2194:	86 89       	ldd	r24, Z+22	; 0x16
    2196:	81 60       	ori	r24, 0x01	; 1
    2198:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    219a:	4a 81       	ldd	r20, Y+2	; 0x02
    219c:	5b 81       	ldd	r21, Y+3	; 0x03
    219e:	6c 81       	ldd	r22, Y+4	; 0x04
    21a0:	7d 81       	ldd	r23, Y+5	; 0x05
    21a2:	46 87       	std	Z+14, r20	; 0x0e
    21a4:	57 87       	std	Z+15, r21	; 0x0f
    21a6:	60 8b       	std	Z+16, r22	; 0x10
    21a8:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    21aa:	40 0f       	add	r20, r16
    21ac:	51 1f       	adc	r21, r17
    21ae:	62 1f       	adc	r22, r18
    21b0:	73 1f       	adc	r23, r19
    21b2:	68 01       	movw	r12, r16
    21b4:	79 01       	movw	r14, r18
    21b6:	c5 01       	movw	r24, r10
    21b8:	48 dd       	rcall	.-1392   	; 0x1c4a <prvInsertTimerInActiveList>
                        break;
    21ba:	0a c0       	rjmp	.+20     	; 0x21d0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    21bc:	f5 01       	movw	r30, r10
    21be:	86 89       	ldd	r24, Z+22	; 0x16
    21c0:	81 fd       	sbrc	r24, 1
    21c2:	04 c0       	rjmp	.+8      	; 0x21cc <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    21c4:	c5 01       	movw	r24, r10
    21c6:	0e 94 22 02 	call	0x444	; 0x444 <vPortFree>
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    21cc:	8e 7f       	andi	r24, 0xFE	; 254
    21ce:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	a9 01       	movw	r20, r18
    21d6:	be 01       	movw	r22, r28
    21d8:	6f 5f       	subi	r22, 0xFF	; 255
    21da:	7f 4f       	sbci	r23, 0xFF	; 255
    21dc:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <xTimerQueue>
    21e0:	90 91 40 0d 	lds	r25, 0x0D40	; 0x800d40 <xTimerQueue+0x1>
    21e4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <xQueueReceive>
    21e8:	81 11       	cpse	r24, r1
    21ea:	70 cf       	rjmp	.-288    	; 0x20cc <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    21ec:	28 96       	adiw	r28, 0x08	; 8
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	1f 91       	pop	r17
    21fe:	0f 91       	pop	r16
    2200:	ff 90       	pop	r15
    2202:	ef 90       	pop	r14
    2204:	df 90       	pop	r13
    2206:	cf 90       	pop	r12
    2208:	bf 90       	pop	r11
    220a:	af 90       	pop	r10
    220c:	08 95       	ret

0000220e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    220e:	08 95       	ret

00002210 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2210:	84 b1       	in	r24, 0x04	; 4
    2212:	80 68       	ori	r24, 0x80	; 128
    2214:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2216:	85 b1       	in	r24, 0x05	; 5
    2218:	80 68       	ori	r24, 0x80	; 128
    221a:	85 b9       	out	0x05, r24	; 5
    221c:	08 95       	ret

0000221e <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    221e:	83 b1       	in	r24, 0x03	; 3
    2220:	80 68       	ori	r24, 0x80	; 128
    2222:	83 b9       	out	0x03, r24	; 3
    2224:	08 95       	ret

00002226 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2226:	f4 df       	rcall	.-24     	; 0x2210 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2228:	2f ef       	ldi	r18, 0xFF	; 255
    222a:	80 e7       	ldi	r24, 0x70	; 112
    222c:	92 e0       	ldi	r25, 0x02	; 2
    222e:	21 50       	subi	r18, 0x01	; 1
    2230:	80 40       	sbci	r24, 0x00	; 0
    2232:	90 40       	sbci	r25, 0x00	; 0
    2234:	e1 f7       	brne	.-8      	; 0x222e <vApplicationMallocFailedHook+0x8>
    2236:	00 c0       	rjmp	.+0      	; 0x2238 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2238:	00 00       	nop
    223a:	f1 df       	rcall	.-30     	; 0x221e <prvBlinkMainLed>
    223c:	f5 cf       	rjmp	.-22     	; 0x2228 <vApplicationMallocFailedHook+0x2>

0000223e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    223e:	e8 df       	rcall	.-48     	; 0x2210 <prvSetMainLedOn>
    2240:	2f ef       	ldi	r18, 0xFF	; 255
    2242:	87 ea       	ldi	r24, 0xA7	; 167
    2244:	91 e6       	ldi	r25, 0x61	; 97
    2246:	21 50       	subi	r18, 0x01	; 1
    2248:	80 40       	sbci	r24, 0x00	; 0
    224a:	90 40       	sbci	r25, 0x00	; 0
    224c:	e1 f7       	brne	.-8      	; 0x2246 <vApplicationStackOverflowHook+0x8>
    224e:	00 c0       	rjmp	.+0      	; 0x2250 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2250:	00 00       	nop
    2252:	e5 df       	rcall	.-54     	; 0x221e <prvBlinkMainLed>
    2254:	f5 cf       	rjmp	.-22     	; 0x2240 <vApplicationStackOverflowHook+0x2>

00002256 <task1>:
	for(;;)
	{
		
		//temperature = hih8120_getTemperature();
		//printf("ARRIVE HERE");
		if ( HIH8120_OK != hih8120_wakeup() )
    2256:	b6 d0       	rcall	.+364    	; 0x23c4 <hih8120_wakeup>
		{
			// Something went wrong
			// Investigate the return code further
		}
		
		vTaskDelay(pdMS_TO_TICKS(50));
    2258:	63 e0       	ldi	r22, 0x03	; 3
    225a:	70 e0       	ldi	r23, 0x00	; 0
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
		
		if ( HIH8120_OK !=  hih8120_measure() )
    2260:	71 da       	rcall	.-2846   	; 0x1744 <vTaskDelay>
    2262:	c4 d0       	rcall	.+392    	; 0x23ec <hih8120_measure>
		{
			// Something went wrong
			// Investigate the return code further
		}
		vTaskDelay(pdMS_TO_TICKS(1));
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	cb 01       	movw	r24, r22
		
		//get measurements
		//
		temperature=hih8120_getTemperature_x10();
    226a:	6c da       	rcall	.-2856   	; 0x1744 <vTaskDelay>
    226c:	e6 d0       	rcall	.+460    	; 0x243a <hih8120_getTemperature_x10>
		//humidity=hih8120_getHumidity();
		//xSemaphoreTake(xPrintfSemaphore,portMAX_DELAY);
		printf("temperature : %d\n", temperature);
    226e:	9f 93       	push	r25
    2270:	8f 93       	push	r24
    2272:	8f e2       	ldi	r24, 0x2F	; 47
    2274:	92 e0       	ldi	r25, 0x02	; 2
    2276:	9f 93       	push	r25
    2278:	8f 93       	push	r24
    227a:	0e 94 ce 1a 	call	0x359c	; 0x359c <printf>
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	e7 cf       	rjmp	.-50     	; 0x2256 <task1>

00002288 <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	00 d0       	rcall	.+0      	; 0x228e <task2+0x6>
    228e:	1f 92       	push	r1
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2294:	0e 94 27 09 	call	0x124e	; 0x124e <xTaskGetTickCount>
    2298:	69 83       	std	Y+1, r22	; 0x01
    229a:	7a 83       	std	Y+2, r23	; 0x02
    229c:	8b 83       	std	Y+3, r24	; 0x03
    229e:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    22a0:	4e e3       	ldi	r20, 0x3E	; 62
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	ce 01       	movw	r24, r28
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	e6 d9       	rcall	.-3124   	; 0x167a <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    22ae:	81 e4       	ldi	r24, 0x41	; 65
    22b0:	92 e0       	ldi	r25, 0x02	; 2
    22b2:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <puts>
    22b6:	f4 cf       	rjmp	.-24     	; 0x22a0 <task2+0x18>

000022b8 <initializeDriver>:
void initializeDriver()
{	
	//hih8120_destroy();
	hih8120_driverReturnCode_t code;
	
	code = hih8120_initialise();
    22b8:	6e d0       	rcall	.+220    	; 0x2396 <hih8120_initialise>
	
	
	if ( HIH8120_OK == code )
    22ba:	81 11       	cpse	r24, r1
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <initializeDriver+0x10>
	{
		printf("Temp and Humidity Driver initialized OK \n");
    22be:	87 e4       	ldi	r24, 0x47	; 71
    22c0:	92 e0       	ldi	r25, 0x02	; 2
    22c2:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <puts>
    22c6:	06 c0       	rjmp	.+12     	; 0x22d4 <initializeDriver+0x1c>
	}
	
	else if (code==HIH8120_OUT_OF_HEAP) {
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	21 f4       	brne	.+8      	; 0x22d4 <initializeDriver+0x1c>
		printf("Out Of Heap\n");
    22cc:	80 e7       	ldi	r24, 0x70	; 112
    22ce:	92 e0       	ldi	r25, 0x02	; 2
    22d0:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <puts>
	}

	
	
	//vTaskDelay(1);
	printf("Driver Created \n");
    22d4:	8c e7       	ldi	r24, 0x7C	; 124
    22d6:	92 e0       	ldi	r25, 0x02	; 2
    22d8:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <puts>
    22dc:	08 95       	ret

000022de <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
//void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	printf("Task Initialized");
    22e4:	8c e8       	ldi	r24, 0x8C	; 140
    22e6:	92 e0       	ldi	r25, 0x02	; 2
    22e8:	9f 93       	push	r25
    22ea:	8f 93       	push	r24
    22ec:	0e 94 ce 1a 	call	0x359c	; 0x359c <printf>
	initializeDriver();	
    22f0:	e3 df       	rcall	.-58     	; 0x22b8 <initializeDriver>
	xTaskCreate(
    22f2:	e1 2c       	mov	r14, r1
    22f4:	f1 2c       	mov	r15, r1
    22f6:	02 e0       	ldi	r16, 0x02	; 2
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 ec       	ldi	r20, 0xC0	; 192
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	6d e9       	ldi	r22, 0x9D	; 157
    2302:	72 e0       	ldi	r23, 0x02	; 2
    2304:	8b e2       	ldi	r24, 0x2B	; 43
    2306:	91 e1       	ldi	r25, 0x11	; 17
    2308:	0e 94 a2 08 	call	0x1144	; 0x1144 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 ec       	ldi	r20, 0xC0	; 192
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	61 e4       	ldi	r22, 0x41	; 65
    2316:	72 e0       	ldi	r23, 0x02	; 2
    2318:	84 e4       	ldi	r24, 0x44	; 68
    231a:	91 e1       	ldi	r25, 0x11	; 17
    231c:	0e 94 a2 08 	call	0x1144	; 0x1144 <xTaskCreate>
	,  "Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	08 95       	ret

0000232c <initialiseSystem>:
{
	// Set output ports for leds used in the example
	//DDRA |= _BV(DDA0) | _BV(DDA7);

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	eb d3       	rcall	.+2006   	; 0x2b06 <stdio_initialise>
	// Let's create some tasks
//	initializeDriver();
	create_tasks_and_semaphores();
    2330:	d6 cf       	rjmp	.-84     	; 0x22de <create_tasks_and_semaphores>
    2332:	08 95       	ret

00002334 <main>:
    2334:	fb df       	rcall	.-10     	; 0x232c <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	//printf("Program Stttttarted!!\n");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2336:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <vTaskStartScheduler>
    233a:	ff cf       	rjmp	.-2      	; 0x233a <main+0x6>

0000233c <_hihTwiCallback>:
    233c:	65 30       	cpi	r22, 0x05	; 5
    233e:	f1 f4       	brne	.+60     	; 0x237c <_hihTwiCallback+0x40>
    2340:	fa 01       	movw	r30, r20
    2342:	80 81       	ld	r24, Z
    2344:	8f 73       	andi	r24, 0x3F	; 63
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	98 2f       	mov	r25, r24
    234a:	88 27       	eor	r24, r24
    234c:	21 81       	ldd	r18, Z+1	; 0x01
    234e:	82 2b       	or	r24, r18
    2350:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2354:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	f0 e4       	ldi	r31, 0x40	; 64
    235c:	8f 9f       	mul	r24, r31
    235e:	c0 01       	movw	r24, r0
    2360:	11 24       	eor	r1, r1
    2362:	fa 01       	movw	r30, r20
    2364:	23 81       	ldd	r18, Z+3	; 0x03
    2366:	26 95       	lsr	r18
    2368:	26 95       	lsr	r18
    236a:	82 2b       	or	r24, r18
    236c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2370:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	80 93 5b 0d 	sts	0x0D5B, r24	; 0x800d5b <_measuringIsReady>
    237a:	08 95       	ret
    237c:	64 30       	cpi	r22, 0x04	; 4
    237e:	51 f0       	breq	.+20     	; 0x2394 <_hihTwiCallback+0x58>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e4       	ldi	r25, 0x40	; 64
    2384:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2388:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    238c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2390:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2394:	08 95       	ret

00002396 <hih8120_initialise>:
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	0e e9       	ldi	r16, 0x9E	; 158
    239c:	11 e1       	ldi	r17, 0x11	; 17
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	34 e2       	ldi	r19, 0x24	; 36
    23a2:	44 ef       	ldi	r20, 0xF4	; 244
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	87 e2       	ldi	r24, 0x27	; 39
    23aa:	e7 d3       	rcall	.+1998   	; 0x2b7a <twiCreate>
    23ac:	90 93 5d 0d 	sts	0x0D5D, r25	; 0x800d5d <_hih8120Handler+0x1>
    23b0:	80 93 5c 0d 	sts	0x0D5C, r24	; 0x800d5c <_hih8120Handler>
    23b4:	21 e0       	ldi	r18, 0x01	; 1
    23b6:	89 2b       	or	r24, r25
    23b8:	09 f0       	breq	.+2      	; 0x23bc <hih8120_initialise+0x26>
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	82 2f       	mov	r24, r18
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	08 95       	ret

000023c4 <hih8120_wakeup>:
    23c4:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <_hih8120Handler>
    23c8:	90 91 5d 0d 	lds	r25, 0x0D5D	; 0x800d5d <_hih8120Handler+0x1>
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	51 f0       	breq	.+20     	; 0x23e4 <hih8120_wakeup+0x20>
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	22 d4       	rcall	.+2116   	; 0x2c1c <twiTransmit>
    23d8:	84 30       	cpi	r24, 0x04	; 4
    23da:	31 f4       	brne	.+12     	; 0x23e8 <hih8120_wakeup+0x24>
    23dc:	10 92 5b 0d 	sts	0x0D5B, r1	; 0x800d5b <_measuringIsReady>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	08 95       	ret
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	08 95       	ret
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	08 95       	ret

000023ec <hih8120_measure>:
    23ec:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <_hih8120Handler>
    23f0:	90 91 5d 0d 	lds	r25, 0x0D5D	; 0x800d5d <_hih8120Handler+0x1>
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	31 f0       	breq	.+12     	; 0x2404 <hih8120_measure+0x18>
    23f8:	64 e0       	ldi	r22, 0x04	; 4
    23fa:	5c d4       	rcall	.+2232   	; 0x2cb4 <twiReceive>
    23fc:	85 30       	cpi	r24, 0x05	; 5
    23fe:	21 f0       	breq	.+8      	; 0x2408 <hih8120_measure+0x1c>
    2400:	83 e0       	ldi	r24, 0x03	; 3
    2402:	08 95       	ret
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	08 95       	ret
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	08 95       	ret

0000240c <hih8120_getTemperature>:
    240c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    2410:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	57 d6       	rcall	.+3246   	; 0x30c8 <__floatunsisf>
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	45 e2       	ldi	r20, 0x25	; 37
    2420:	53 e4       	ldi	r21, 0x43	; 67
    2422:	e0 d6       	rcall	.+3520   	; 0x31e4 <__mulsf3>
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	38 ef       	ldi	r19, 0xF8	; 248
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	56 e4       	ldi	r21, 0x46	; 70
    242c:	b4 d5       	rcall	.+2920   	; 0x2f96 <__divsf3>
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	52 e4       	ldi	r21, 0x42	; 66
    2436:	4a c5       	rjmp	.+2708   	; 0x2ecc <__subsf3>
    2438:	08 95       	ret

0000243a <hih8120_getTemperature_x10>:
    243a:	e8 df       	rcall	.-48     	; 0x240c <hih8120_getTemperature>
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	cf d6       	rcall	.+3486   	; 0x31e4 <__mulsf3>
    2446:	0f d6       	rcall	.+3102   	; 0x3066 <__fixsfsi>
    2448:	cb 01       	movw	r24, r22
    244a:	08 95       	ret

0000244c <serial_create>:
    244c:	2f 92       	push	r2
    244e:	3f 92       	push	r3
    2450:	4f 92       	push	r4
    2452:	5f 92       	push	r5
    2454:	6f 92       	push	r6
    2456:	7f 92       	push	r7
    2458:	8f 92       	push	r8
    245a:	9f 92       	push	r9
    245c:	af 92       	push	r10
    245e:	cf 92       	push	r12
    2460:	ef 92       	push	r14
    2462:	ff 92       	push	r15
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	f8 2e       	mov	r15, r24
    2472:	2a 01       	movw	r4, r20
    2474:	3b 01       	movw	r6, r22
    2476:	88 e0       	ldi	r24, 0x08	; 8
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	5b d7       	rcall	.+3766   	; 0x3332 <malloc>
    247c:	8c 01       	movw	r16, r24
    247e:	8f 2d       	mov	r24, r15
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	fc 01       	movw	r30, r24
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	e2 5a       	subi	r30, 0xA2	; 162
    248a:	f2 4f       	sbci	r31, 0xF2	; 242
    248c:	11 83       	std	Z+1, r17	; 0x01
    248e:	00 83       	st	Z, r16
    2490:	01 15       	cp	r16, r1
    2492:	11 05       	cpc	r17, r1
    2494:	09 f4       	brne	.+2      	; 0x2498 <serial_create+0x4c>
    2496:	64 c0       	rjmp	.+200    	; 0x2560 <serial_create+0x114>
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	fc 01       	movw	r30, r24
    249e:	e5 5f       	subi	r30, 0xF5	; 245
    24a0:	fd 4f       	sbci	r31, 0xFD	; 253
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	d8 01       	movw	r26, r16
    24a8:	8d 93       	st	X+, r24
    24aa:	9c 93       	st	X, r25
    24ac:	6c 2d       	mov	r22, r12
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	84 e0       	ldi	r24, 0x04	; 4
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	24 d7       	rcall	.+3656   	; 0x32fe <calloc>
    24b6:	1c 01       	movw	r2, r24
    24b8:	61 e0       	ldi	r22, 0x01	; 1
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	86 e0       	ldi	r24, 0x06	; 6
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	1e d7       	rcall	.+3644   	; 0x32fe <calloc>
    24c2:	7c 01       	movw	r14, r24
    24c4:	4c 2d       	mov	r20, r12
    24c6:	b1 01       	movw	r22, r2
    24c8:	e5 d4       	rcall	.+2506   	; 0x2e94 <fifo_init>
    24ca:	f8 01       	movw	r30, r16
    24cc:	f5 82       	std	Z+5, r15	; 0x05
    24ce:	e4 82       	std	Z+4, r14	; 0x04
    24d0:	6a 2d       	mov	r22, r10
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	84 e0       	ldi	r24, 0x04	; 4
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	12 d7       	rcall	.+3620   	; 0x32fe <calloc>
    24da:	1c 01       	movw	r2, r24
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	86 e0       	ldi	r24, 0x06	; 6
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0c d7       	rcall	.+3608   	; 0x32fe <calloc>
    24e6:	7c 01       	movw	r14, r24
    24e8:	4a 2d       	mov	r20, r10
    24ea:	b1 01       	movw	r22, r2
    24ec:	d3 d4       	rcall	.+2470   	; 0x2e94 <fifo_init>
    24ee:	d8 01       	movw	r26, r16
    24f0:	13 96       	adiw	r26, 0x03	; 3
    24f2:	fc 92       	st	X, r15
    24f4:	ee 92       	st	-X, r14
    24f6:	12 97       	sbiw	r26, 0x02	; 2
    24f8:	17 96       	adiw	r26, 0x07	; 7
    24fa:	9c 92       	st	X, r9
    24fc:	8e 92       	st	-X, r8
    24fe:	16 97       	sbiw	r26, 0x06	; 6
    2500:	ff b6       	in	r15, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	ed 91       	ld	r30, X+
    2506:	fc 91       	ld	r31, X
    2508:	11 97       	sbiw	r26, 0x01	; 1
    250a:	36 97       	sbiw	r30, 0x06	; 6
    250c:	80 81       	ld	r24, Z
    250e:	82 60       	ori	r24, 0x02	; 2
    2510:	80 83       	st	Z, r24
    2512:	8d 90       	ld	r8, X+
    2514:	9c 90       	ld	r9, X
    2516:	c3 01       	movw	r24, r6
    2518:	b2 01       	movw	r22, r4
    251a:	d6 d5       	rcall	.+2988   	; 0x30c8 <__floatunsisf>
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	5f d6       	rcall	.+3262   	; 0x31e4 <__mulsf3>
    2526:	9b 01       	movw	r18, r22
    2528:	ac 01       	movw	r20, r24
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	74 e2       	ldi	r23, 0x24	; 36
    252e:	84 e7       	ldi	r24, 0x74	; 116
    2530:	9b e4       	ldi	r25, 0x4B	; 75
    2532:	31 d5       	rcall	.+2658   	; 0x2f96 <__divsf3>
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e8       	ldi	r20, 0x80	; 128
    253a:	5f e3       	ldi	r21, 0x3F	; 63
    253c:	c7 d4       	rcall	.+2446   	; 0x2ecc <__subsf3>
    253e:	98 d5       	rcall	.+2864   	; 0x3070 <__fixunssfsi>
    2540:	f4 01       	movw	r30, r8
    2542:	32 97       	sbiw	r30, 0x02	; 2
    2544:	60 83       	st	Z, r22
    2546:	d8 01       	movw	r26, r16
    2548:	ed 91       	ld	r30, X+
    254a:	fc 91       	ld	r31, X
    254c:	11 97       	sbiw	r26, 0x01	; 1
    254e:	35 97       	sbiw	r30, 0x05	; 5
    2550:	88 e9       	ldi	r24, 0x98	; 152
    2552:	80 83       	st	Z, r24
    2554:	ed 91       	ld	r30, X+
    2556:	fc 91       	ld	r31, X
    2558:	34 97       	sbiw	r30, 0x04	; 4
    255a:	86 e0       	ldi	r24, 0x06	; 6
    255c:	80 83       	st	Z, r24
    255e:	ff be       	out	0x3f, r15	; 63
    2560:	c8 01       	movw	r24, r16
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	ff 90       	pop	r15
    256c:	ef 90       	pop	r14
    256e:	cf 90       	pop	r12
    2570:	af 90       	pop	r10
    2572:	9f 90       	pop	r9
    2574:	8f 90       	pop	r8
    2576:	7f 90       	pop	r7
    2578:	6f 90       	pop	r6
    257a:	5f 90       	pop	r5
    257c:	4f 90       	pop	r4
    257e:	3f 90       	pop	r3
    2580:	2f 90       	pop	r2
    2582:	08 95       	ret

00002584 <serial_sendByte>:
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	dc 01       	movw	r26, r24
    258a:	89 2b       	or	r24, r25
    258c:	01 f1       	breq	.+64     	; 0x25ce <serial_sendByte+0x4a>
    258e:	12 96       	adiw	r26, 0x02	; 2
    2590:	ed 91       	ld	r30, X+
    2592:	fc 91       	ld	r31, X
    2594:	13 97       	sbiw	r26, 0x03	; 3
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	25 81       	ldd	r18, Z+5	; 0x05
    259c:	98 1b       	sub	r25, r24
    259e:	92 23       	and	r25, r18
    25a0:	84 81       	ldd	r24, Z+4	; 0x04
    25a2:	98 17       	cp	r25, r24
    25a4:	b1 f0       	breq	.+44     	; 0x25d2 <serial_sendByte+0x4e>
    25a6:	83 81       	ldd	r24, Z+3	; 0x03
    25a8:	26 95       	lsr	r18
    25aa:	28 23       	and	r18, r24
    25ac:	c0 81       	ld	r28, Z
    25ae:	d1 81       	ldd	r29, Z+1	; 0x01
    25b0:	c2 0f       	add	r28, r18
    25b2:	d1 1d       	adc	r29, r1
    25b4:	68 83       	st	Y, r22
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	95 81       	ldd	r25, Z+5	; 0x05
    25ba:	89 23       	and	r24, r25
    25bc:	83 83       	std	Z+3, r24	; 0x03
    25be:	ed 91       	ld	r30, X+
    25c0:	fc 91       	ld	r31, X
    25c2:	35 97       	sbiw	r30, 0x05	; 5
    25c4:	80 81       	ld	r24, Z
    25c6:	80 62       	ori	r24, 0x20	; 32
    25c8:	80 83       	st	Z, r24
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	03 c0       	rjmp	.+6      	; 0x25d4 <serial_sendByte+0x50>
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <serial_sendByte+0x50>
    25d2:	82 e0       	ldi	r24, 0x02	; 2
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	08 95       	ret

000025da <serial_getByte>:
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	d1 f0       	breq	.+52     	; 0x2612 <serial_getByte+0x38>
    25de:	dc 01       	movw	r26, r24
    25e0:	14 96       	adiw	r26, 0x04	; 4
    25e2:	ed 91       	ld	r30, X+
    25e4:	fc 91       	ld	r31, X
    25e6:	15 97       	sbiw	r26, 0x05	; 5
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	98 17       	cp	r25, r24
    25ee:	99 f0       	breq	.+38     	; 0x2616 <serial_getByte+0x3c>
    25f0:	92 81       	ldd	r25, Z+2	; 0x02
    25f2:	85 81       	ldd	r24, Z+5	; 0x05
    25f4:	86 95       	lsr	r24
    25f6:	89 23       	and	r24, r25
    25f8:	a0 81       	ld	r26, Z
    25fa:	b1 81       	ldd	r27, Z+1	; 0x01
    25fc:	a8 0f       	add	r26, r24
    25fe:	b1 1d       	adc	r27, r1
    2600:	8c 91       	ld	r24, X
    2602:	db 01       	movw	r26, r22
    2604:	8c 93       	st	X, r24
    2606:	9f 5f       	subi	r25, 0xFF	; 255
    2608:	85 81       	ldd	r24, Z+5	; 0x05
    260a:	98 23       	and	r25, r24
    260c:	92 83       	std	Z+2, r25	; 0x02
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	08 95       	ret
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	08 95       	ret
    2616:	83 e0       	ldi	r24, 0x03	; 3
    2618:	08 95       	ret

0000261a <__vector_25>:
    261a:	1f 92       	push	r1
    261c:	0f 92       	push	r0
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	0f 92       	push	r0
    2622:	11 24       	eor	r1, r1
    2624:	0b b6       	in	r0, 0x3b	; 59
    2626:	0f 92       	push	r0
    2628:	2f 93       	push	r18
    262a:	3f 93       	push	r19
    262c:	4f 93       	push	r20
    262e:	5f 93       	push	r21
    2630:	6f 93       	push	r22
    2632:	7f 93       	push	r23
    2634:	8f 93       	push	r24
    2636:	9f 93       	push	r25
    2638:	af 93       	push	r26
    263a:	bf 93       	push	r27
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	ef 93       	push	r30
    2642:	ff 93       	push	r31
    2644:	a0 91 5e 0d 	lds	r26, 0x0D5E	; 0x800d5e <_ser_handle>
    2648:	b0 91 5f 0d 	lds	r27, 0x0D5F	; 0x800d5f <_ser_handle+0x1>
    264c:	10 97       	sbiw	r26, 0x00	; 0
    264e:	11 f1       	breq	.+68     	; 0x2694 <__vector_25+0x7a>
    2650:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2654:	14 96       	adiw	r26, 0x04	; 4
    2656:	ed 91       	ld	r30, X+
    2658:	fc 91       	ld	r31, X
    265a:	15 97       	sbiw	r26, 0x05	; 5
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	25 81       	ldd	r18, Z+5	; 0x05
    2662:	98 1b       	sub	r25, r24
    2664:	92 23       	and	r25, r18
    2666:	84 81       	ldd	r24, Z+4	; 0x04
    2668:	98 17       	cp	r25, r24
    266a:	61 f0       	breq	.+24     	; 0x2684 <__vector_25+0x6a>
    266c:	83 81       	ldd	r24, Z+3	; 0x03
    266e:	26 95       	lsr	r18
    2670:	28 23       	and	r18, r24
    2672:	c0 81       	ld	r28, Z
    2674:	d1 81       	ldd	r29, Z+1	; 0x01
    2676:	c2 0f       	add	r28, r18
    2678:	d1 1d       	adc	r29, r1
    267a:	68 83       	st	Y, r22
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	95 81       	ldd	r25, Z+5	; 0x05
    2680:	89 23       	and	r24, r25
    2682:	83 83       	std	Z+3, r24	; 0x03
    2684:	16 96       	adiw	r26, 0x06	; 6
    2686:	ed 91       	ld	r30, X+
    2688:	fc 91       	ld	r31, X
    268a:	17 97       	sbiw	r26, 0x07	; 7
    268c:	30 97       	sbiw	r30, 0x00	; 0
    268e:	11 f0       	breq	.+4      	; 0x2694 <__vector_25+0x7a>
    2690:	cd 01       	movw	r24, r26
    2692:	19 95       	eicall
    2694:	ff 91       	pop	r31
    2696:	ef 91       	pop	r30
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	bf 91       	pop	r27
    269e:	af 91       	pop	r26
    26a0:	9f 91       	pop	r25
    26a2:	8f 91       	pop	r24
    26a4:	7f 91       	pop	r23
    26a6:	6f 91       	pop	r22
    26a8:	5f 91       	pop	r21
    26aa:	4f 91       	pop	r20
    26ac:	3f 91       	pop	r19
    26ae:	2f 91       	pop	r18
    26b0:	0f 90       	pop	r0
    26b2:	0b be       	out	0x3b, r0	; 59
    26b4:	0f 90       	pop	r0
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	0f 90       	pop	r0
    26ba:	1f 90       	pop	r1
    26bc:	18 95       	reti

000026be <__vector_26>:
    26be:	1f 92       	push	r1
    26c0:	0f 92       	push	r0
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	0f 92       	push	r0
    26c6:	11 24       	eor	r1, r1
    26c8:	0b b6       	in	r0, 0x3b	; 59
    26ca:	0f 92       	push	r0
    26cc:	2f 93       	push	r18
    26ce:	8f 93       	push	r24
    26d0:	9f 93       	push	r25
    26d2:	af 93       	push	r26
    26d4:	bf 93       	push	r27
    26d6:	ef 93       	push	r30
    26d8:	ff 93       	push	r31
    26da:	e0 91 5e 0d 	lds	r30, 0x0D5E	; 0x800d5e <_ser_handle>
    26de:	f0 91 5f 0d 	lds	r31, 0x0D5F	; 0x800d5f <_ser_handle+0x1>
    26e2:	30 97       	sbiw	r30, 0x00	; 0
    26e4:	b9 f0       	breq	.+46     	; 0x2714 <__vector_26+0x56>
    26e6:	02 80       	ldd	r0, Z+2	; 0x02
    26e8:	f3 81       	ldd	r31, Z+3	; 0x03
    26ea:	e0 2d       	mov	r30, r0
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	98 17       	cp	r25, r24
    26f2:	b1 f0       	breq	.+44     	; 0x2720 <__vector_26+0x62>
    26f4:	92 81       	ldd	r25, Z+2	; 0x02
    26f6:	85 81       	ldd	r24, Z+5	; 0x05
    26f8:	28 2f       	mov	r18, r24
    26fa:	26 95       	lsr	r18
    26fc:	29 23       	and	r18, r25
    26fe:	a0 81       	ld	r26, Z
    2700:	b1 81       	ldd	r27, Z+1	; 0x01
    2702:	a2 0f       	add	r26, r18
    2704:	b1 1d       	adc	r27, r1
    2706:	2c 91       	ld	r18, X
    2708:	9f 5f       	subi	r25, 0xFF	; 255
    270a:	89 23       	and	r24, r25
    270c:	82 83       	std	Z+2, r24	; 0x02
    270e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2712:	0b c0       	rjmp	.+22     	; 0x272a <__vector_26+0x6c>
    2714:	e1 ec       	ldi	r30, 0xC1	; 193
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8f 7d       	andi	r24, 0xDF	; 223
    271c:	80 83       	st	Z, r24
    271e:	05 c0       	rjmp	.+10     	; 0x272a <__vector_26+0x6c>
    2720:	e1 ec       	ldi	r30, 0xC1	; 193
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	8f 7d       	andi	r24, 0xDF	; 223
    2728:	80 83       	st	Z, r24
    272a:	ff 91       	pop	r31
    272c:	ef 91       	pop	r30
    272e:	bf 91       	pop	r27
    2730:	af 91       	pop	r26
    2732:	9f 91       	pop	r25
    2734:	8f 91       	pop	r24
    2736:	2f 91       	pop	r18
    2738:	0f 90       	pop	r0
    273a:	0b be       	out	0x3b, r0	; 59
    273c:	0f 90       	pop	r0
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	0f 90       	pop	r0
    2742:	1f 90       	pop	r1
    2744:	18 95       	reti

00002746 <__vector_36>:
    2746:	1f 92       	push	r1
    2748:	0f 92       	push	r0
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	0f 92       	push	r0
    274e:	11 24       	eor	r1, r1
    2750:	0b b6       	in	r0, 0x3b	; 59
    2752:	0f 92       	push	r0
    2754:	2f 93       	push	r18
    2756:	3f 93       	push	r19
    2758:	4f 93       	push	r20
    275a:	5f 93       	push	r21
    275c:	6f 93       	push	r22
    275e:	7f 93       	push	r23
    2760:	8f 93       	push	r24
    2762:	9f 93       	push	r25
    2764:	af 93       	push	r26
    2766:	bf 93       	push	r27
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	ef 93       	push	r30
    276e:	ff 93       	push	r31
    2770:	a0 91 60 0d 	lds	r26, 0x0D60	; 0x800d60 <_ser_handle+0x2>
    2774:	b0 91 61 0d 	lds	r27, 0x0D61	; 0x800d61 <_ser_handle+0x3>
    2778:	10 97       	sbiw	r26, 0x00	; 0
    277a:	11 f1       	breq	.+68     	; 0x27c0 <__vector_36+0x7a>
    277c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2780:	14 96       	adiw	r26, 0x04	; 4
    2782:	ed 91       	ld	r30, X+
    2784:	fc 91       	ld	r31, X
    2786:	15 97       	sbiw	r26, 0x05	; 5
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	25 81       	ldd	r18, Z+5	; 0x05
    278e:	98 1b       	sub	r25, r24
    2790:	92 23       	and	r25, r18
    2792:	84 81       	ldd	r24, Z+4	; 0x04
    2794:	98 17       	cp	r25, r24
    2796:	61 f0       	breq	.+24     	; 0x27b0 <__vector_36+0x6a>
    2798:	83 81       	ldd	r24, Z+3	; 0x03
    279a:	26 95       	lsr	r18
    279c:	28 23       	and	r18, r24
    279e:	c0 81       	ld	r28, Z
    27a0:	d1 81       	ldd	r29, Z+1	; 0x01
    27a2:	c2 0f       	add	r28, r18
    27a4:	d1 1d       	adc	r29, r1
    27a6:	68 83       	st	Y, r22
    27a8:	8f 5f       	subi	r24, 0xFF	; 255
    27aa:	95 81       	ldd	r25, Z+5	; 0x05
    27ac:	89 23       	and	r24, r25
    27ae:	83 83       	std	Z+3, r24	; 0x03
    27b0:	16 96       	adiw	r26, 0x06	; 6
    27b2:	ed 91       	ld	r30, X+
    27b4:	fc 91       	ld	r31, X
    27b6:	17 97       	sbiw	r26, 0x07	; 7
    27b8:	30 97       	sbiw	r30, 0x00	; 0
    27ba:	11 f0       	breq	.+4      	; 0x27c0 <__vector_36+0x7a>
    27bc:	cd 01       	movw	r24, r26
    27be:	19 95       	eicall
    27c0:	ff 91       	pop	r31
    27c2:	ef 91       	pop	r30
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	bf 91       	pop	r27
    27ca:	af 91       	pop	r26
    27cc:	9f 91       	pop	r25
    27ce:	8f 91       	pop	r24
    27d0:	7f 91       	pop	r23
    27d2:	6f 91       	pop	r22
    27d4:	5f 91       	pop	r21
    27d6:	4f 91       	pop	r20
    27d8:	3f 91       	pop	r19
    27da:	2f 91       	pop	r18
    27dc:	0f 90       	pop	r0
    27de:	0b be       	out	0x3b, r0	; 59
    27e0:	0f 90       	pop	r0
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	0f 90       	pop	r0
    27e6:	1f 90       	pop	r1
    27e8:	18 95       	reti

000027ea <__vector_37>:
    27ea:	1f 92       	push	r1
    27ec:	0f 92       	push	r0
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	0f 92       	push	r0
    27f2:	11 24       	eor	r1, r1
    27f4:	0b b6       	in	r0, 0x3b	; 59
    27f6:	0f 92       	push	r0
    27f8:	2f 93       	push	r18
    27fa:	8f 93       	push	r24
    27fc:	9f 93       	push	r25
    27fe:	af 93       	push	r26
    2800:	bf 93       	push	r27
    2802:	ef 93       	push	r30
    2804:	ff 93       	push	r31
    2806:	e0 91 60 0d 	lds	r30, 0x0D60	; 0x800d60 <_ser_handle+0x2>
    280a:	f0 91 61 0d 	lds	r31, 0x0D61	; 0x800d61 <_ser_handle+0x3>
    280e:	30 97       	sbiw	r30, 0x00	; 0
    2810:	b9 f0       	breq	.+46     	; 0x2840 <__vector_37+0x56>
    2812:	02 80       	ldd	r0, Z+2	; 0x02
    2814:	f3 81       	ldd	r31, Z+3	; 0x03
    2816:	e0 2d       	mov	r30, r0
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	98 17       	cp	r25, r24
    281e:	b1 f0       	breq	.+44     	; 0x284c <__vector_37+0x62>
    2820:	92 81       	ldd	r25, Z+2	; 0x02
    2822:	85 81       	ldd	r24, Z+5	; 0x05
    2824:	28 2f       	mov	r18, r24
    2826:	26 95       	lsr	r18
    2828:	29 23       	and	r18, r25
    282a:	a0 81       	ld	r26, Z
    282c:	b1 81       	ldd	r27, Z+1	; 0x01
    282e:	a2 0f       	add	r26, r18
    2830:	b1 1d       	adc	r27, r1
    2832:	2c 91       	ld	r18, X
    2834:	9f 5f       	subi	r25, 0xFF	; 255
    2836:	89 23       	and	r24, r25
    2838:	82 83       	std	Z+2, r24	; 0x02
    283a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    283e:	0b c0       	rjmp	.+22     	; 0x2856 <__vector_37+0x6c>
    2840:	e9 ec       	ldi	r30, 0xC9	; 201
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	8f 7d       	andi	r24, 0xDF	; 223
    2848:	80 83       	st	Z, r24
    284a:	05 c0       	rjmp	.+10     	; 0x2856 <__vector_37+0x6c>
    284c:	e9 ec       	ldi	r30, 0xC9	; 201
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	8f 7d       	andi	r24, 0xDF	; 223
    2854:	80 83       	st	Z, r24
    2856:	ff 91       	pop	r31
    2858:	ef 91       	pop	r30
    285a:	bf 91       	pop	r27
    285c:	af 91       	pop	r26
    285e:	9f 91       	pop	r25
    2860:	8f 91       	pop	r24
    2862:	2f 91       	pop	r18
    2864:	0f 90       	pop	r0
    2866:	0b be       	out	0x3b, r0	; 59
    2868:	0f 90       	pop	r0
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	0f 90       	pop	r0
    286e:	1f 90       	pop	r1
    2870:	18 95       	reti

00002872 <__vector_51>:
    2872:	1f 92       	push	r1
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	0f 92       	push	r0
    287a:	11 24       	eor	r1, r1
    287c:	0b b6       	in	r0, 0x3b	; 59
    287e:	0f 92       	push	r0
    2880:	2f 93       	push	r18
    2882:	3f 93       	push	r19
    2884:	4f 93       	push	r20
    2886:	5f 93       	push	r21
    2888:	6f 93       	push	r22
    288a:	7f 93       	push	r23
    288c:	8f 93       	push	r24
    288e:	9f 93       	push	r25
    2890:	af 93       	push	r26
    2892:	bf 93       	push	r27
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	ef 93       	push	r30
    289a:	ff 93       	push	r31
    289c:	a0 91 62 0d 	lds	r26, 0x0D62	; 0x800d62 <_ser_handle+0x4>
    28a0:	b0 91 63 0d 	lds	r27, 0x0D63	; 0x800d63 <_ser_handle+0x5>
    28a4:	10 97       	sbiw	r26, 0x00	; 0
    28a6:	11 f1       	breq	.+68     	; 0x28ec <__vector_51+0x7a>
    28a8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    28ac:	14 96       	adiw	r26, 0x04	; 4
    28ae:	ed 91       	ld	r30, X+
    28b0:	fc 91       	ld	r31, X
    28b2:	15 97       	sbiw	r26, 0x05	; 5
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	25 81       	ldd	r18, Z+5	; 0x05
    28ba:	98 1b       	sub	r25, r24
    28bc:	92 23       	and	r25, r18
    28be:	84 81       	ldd	r24, Z+4	; 0x04
    28c0:	98 17       	cp	r25, r24
    28c2:	61 f0       	breq	.+24     	; 0x28dc <__vector_51+0x6a>
    28c4:	83 81       	ldd	r24, Z+3	; 0x03
    28c6:	26 95       	lsr	r18
    28c8:	28 23       	and	r18, r24
    28ca:	c0 81       	ld	r28, Z
    28cc:	d1 81       	ldd	r29, Z+1	; 0x01
    28ce:	c2 0f       	add	r28, r18
    28d0:	d1 1d       	adc	r29, r1
    28d2:	68 83       	st	Y, r22
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	95 81       	ldd	r25, Z+5	; 0x05
    28d8:	89 23       	and	r24, r25
    28da:	83 83       	std	Z+3, r24	; 0x03
    28dc:	16 96       	adiw	r26, 0x06	; 6
    28de:	ed 91       	ld	r30, X+
    28e0:	fc 91       	ld	r31, X
    28e2:	17 97       	sbiw	r26, 0x07	; 7
    28e4:	30 97       	sbiw	r30, 0x00	; 0
    28e6:	11 f0       	breq	.+4      	; 0x28ec <__vector_51+0x7a>
    28e8:	cd 01       	movw	r24, r26
    28ea:	19 95       	eicall
    28ec:	ff 91       	pop	r31
    28ee:	ef 91       	pop	r30
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	bf 91       	pop	r27
    28f6:	af 91       	pop	r26
    28f8:	9f 91       	pop	r25
    28fa:	8f 91       	pop	r24
    28fc:	7f 91       	pop	r23
    28fe:	6f 91       	pop	r22
    2900:	5f 91       	pop	r21
    2902:	4f 91       	pop	r20
    2904:	3f 91       	pop	r19
    2906:	2f 91       	pop	r18
    2908:	0f 90       	pop	r0
    290a:	0b be       	out	0x3b, r0	; 59
    290c:	0f 90       	pop	r0
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	0f 90       	pop	r0
    2912:	1f 90       	pop	r1
    2914:	18 95       	reti

00002916 <__vector_52>:
    2916:	1f 92       	push	r1
    2918:	0f 92       	push	r0
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	0f 92       	push	r0
    291e:	11 24       	eor	r1, r1
    2920:	0b b6       	in	r0, 0x3b	; 59
    2922:	0f 92       	push	r0
    2924:	2f 93       	push	r18
    2926:	8f 93       	push	r24
    2928:	9f 93       	push	r25
    292a:	af 93       	push	r26
    292c:	bf 93       	push	r27
    292e:	ef 93       	push	r30
    2930:	ff 93       	push	r31
    2932:	e0 91 62 0d 	lds	r30, 0x0D62	; 0x800d62 <_ser_handle+0x4>
    2936:	f0 91 63 0d 	lds	r31, 0x0D63	; 0x800d63 <_ser_handle+0x5>
    293a:	30 97       	sbiw	r30, 0x00	; 0
    293c:	b9 f0       	breq	.+46     	; 0x296c <__vector_52+0x56>
    293e:	02 80       	ldd	r0, Z+2	; 0x02
    2940:	f3 81       	ldd	r31, Z+3	; 0x03
    2942:	e0 2d       	mov	r30, r0
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	98 17       	cp	r25, r24
    294a:	b1 f0       	breq	.+44     	; 0x2978 <__vector_52+0x62>
    294c:	92 81       	ldd	r25, Z+2	; 0x02
    294e:	85 81       	ldd	r24, Z+5	; 0x05
    2950:	28 2f       	mov	r18, r24
    2952:	26 95       	lsr	r18
    2954:	29 23       	and	r18, r25
    2956:	a0 81       	ld	r26, Z
    2958:	b1 81       	ldd	r27, Z+1	; 0x01
    295a:	a2 0f       	add	r26, r18
    295c:	b1 1d       	adc	r27, r1
    295e:	2c 91       	ld	r18, X
    2960:	9f 5f       	subi	r25, 0xFF	; 255
    2962:	89 23       	and	r24, r25
    2964:	82 83       	std	Z+2, r24	; 0x02
    2966:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    296a:	0b c0       	rjmp	.+22     	; 0x2982 <__vector_52+0x6c>
    296c:	e1 ed       	ldi	r30, 0xD1	; 209
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	8f 7d       	andi	r24, 0xDF	; 223
    2974:	80 83       	st	Z, r24
    2976:	05 c0       	rjmp	.+10     	; 0x2982 <__vector_52+0x6c>
    2978:	e1 ed       	ldi	r30, 0xD1	; 209
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	8f 7d       	andi	r24, 0xDF	; 223
    2980:	80 83       	st	Z, r24
    2982:	ff 91       	pop	r31
    2984:	ef 91       	pop	r30
    2986:	bf 91       	pop	r27
    2988:	af 91       	pop	r26
    298a:	9f 91       	pop	r25
    298c:	8f 91       	pop	r24
    298e:	2f 91       	pop	r18
    2990:	0f 90       	pop	r0
    2992:	0b be       	out	0x3b, r0	; 59
    2994:	0f 90       	pop	r0
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	0f 90       	pop	r0
    299a:	1f 90       	pop	r1
    299c:	18 95       	reti

0000299e <__vector_54>:
    299e:	1f 92       	push	r1
    29a0:	0f 92       	push	r0
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	0f 92       	push	r0
    29a6:	11 24       	eor	r1, r1
    29a8:	0b b6       	in	r0, 0x3b	; 59
    29aa:	0f 92       	push	r0
    29ac:	2f 93       	push	r18
    29ae:	3f 93       	push	r19
    29b0:	4f 93       	push	r20
    29b2:	5f 93       	push	r21
    29b4:	6f 93       	push	r22
    29b6:	7f 93       	push	r23
    29b8:	8f 93       	push	r24
    29ba:	9f 93       	push	r25
    29bc:	af 93       	push	r26
    29be:	bf 93       	push	r27
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	ef 93       	push	r30
    29c6:	ff 93       	push	r31
    29c8:	a0 91 64 0d 	lds	r26, 0x0D64	; 0x800d64 <_ser_handle+0x6>
    29cc:	b0 91 65 0d 	lds	r27, 0x0D65	; 0x800d65 <_ser_handle+0x7>
    29d0:	10 97       	sbiw	r26, 0x00	; 0
    29d2:	11 f1       	breq	.+68     	; 0x2a18 <__vector_54+0x7a>
    29d4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    29d8:	14 96       	adiw	r26, 0x04	; 4
    29da:	ed 91       	ld	r30, X+
    29dc:	fc 91       	ld	r31, X
    29de:	15 97       	sbiw	r26, 0x05	; 5
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	25 81       	ldd	r18, Z+5	; 0x05
    29e6:	98 1b       	sub	r25, r24
    29e8:	92 23       	and	r25, r18
    29ea:	84 81       	ldd	r24, Z+4	; 0x04
    29ec:	98 17       	cp	r25, r24
    29ee:	61 f0       	breq	.+24     	; 0x2a08 <__vector_54+0x6a>
    29f0:	83 81       	ldd	r24, Z+3	; 0x03
    29f2:	26 95       	lsr	r18
    29f4:	28 23       	and	r18, r24
    29f6:	c0 81       	ld	r28, Z
    29f8:	d1 81       	ldd	r29, Z+1	; 0x01
    29fa:	c2 0f       	add	r28, r18
    29fc:	d1 1d       	adc	r29, r1
    29fe:	68 83       	st	Y, r22
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	95 81       	ldd	r25, Z+5	; 0x05
    2a04:	89 23       	and	r24, r25
    2a06:	83 83       	std	Z+3, r24	; 0x03
    2a08:	16 96       	adiw	r26, 0x06	; 6
    2a0a:	ed 91       	ld	r30, X+
    2a0c:	fc 91       	ld	r31, X
    2a0e:	17 97       	sbiw	r26, 0x07	; 7
    2a10:	30 97       	sbiw	r30, 0x00	; 0
    2a12:	11 f0       	breq	.+4      	; 0x2a18 <__vector_54+0x7a>
    2a14:	cd 01       	movw	r24, r26
    2a16:	19 95       	eicall
    2a18:	ff 91       	pop	r31
    2a1a:	ef 91       	pop	r30
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	bf 91       	pop	r27
    2a22:	af 91       	pop	r26
    2a24:	9f 91       	pop	r25
    2a26:	8f 91       	pop	r24
    2a28:	7f 91       	pop	r23
    2a2a:	6f 91       	pop	r22
    2a2c:	5f 91       	pop	r21
    2a2e:	4f 91       	pop	r20
    2a30:	3f 91       	pop	r19
    2a32:	2f 91       	pop	r18
    2a34:	0f 90       	pop	r0
    2a36:	0b be       	out	0x3b, r0	; 59
    2a38:	0f 90       	pop	r0
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	0f 90       	pop	r0
    2a3e:	1f 90       	pop	r1
    2a40:	18 95       	reti

00002a42 <__vector_55>:
    2a42:	1f 92       	push	r1
    2a44:	0f 92       	push	r0
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	0f 92       	push	r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	0b b6       	in	r0, 0x3b	; 59
    2a4e:	0f 92       	push	r0
    2a50:	2f 93       	push	r18
    2a52:	8f 93       	push	r24
    2a54:	9f 93       	push	r25
    2a56:	af 93       	push	r26
    2a58:	bf 93       	push	r27
    2a5a:	ef 93       	push	r30
    2a5c:	ff 93       	push	r31
    2a5e:	e0 91 64 0d 	lds	r30, 0x0D64	; 0x800d64 <_ser_handle+0x6>
    2a62:	f0 91 65 0d 	lds	r31, 0x0D65	; 0x800d65 <_ser_handle+0x7>
    2a66:	30 97       	sbiw	r30, 0x00	; 0
    2a68:	b9 f0       	breq	.+46     	; 0x2a98 <__vector_55+0x56>
    2a6a:	02 80       	ldd	r0, Z+2	; 0x02
    2a6c:	f3 81       	ldd	r31, Z+3	; 0x03
    2a6e:	e0 2d       	mov	r30, r0
    2a70:	93 81       	ldd	r25, Z+3	; 0x03
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	98 17       	cp	r25, r24
    2a76:	b1 f0       	breq	.+44     	; 0x2aa4 <__vector_55+0x62>
    2a78:	92 81       	ldd	r25, Z+2	; 0x02
    2a7a:	85 81       	ldd	r24, Z+5	; 0x05
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	26 95       	lsr	r18
    2a80:	29 23       	and	r18, r25
    2a82:	a0 81       	ld	r26, Z
    2a84:	b1 81       	ldd	r27, Z+1	; 0x01
    2a86:	a2 0f       	add	r26, r18
    2a88:	b1 1d       	adc	r27, r1
    2a8a:	2c 91       	ld	r18, X
    2a8c:	9f 5f       	subi	r25, 0xFF	; 255
    2a8e:	89 23       	and	r24, r25
    2a90:	82 83       	std	Z+2, r24	; 0x02
    2a92:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2a96:	0b c0       	rjmp	.+22     	; 0x2aae <__vector_55+0x6c>
    2a98:	e1 e3       	ldi	r30, 0x31	; 49
    2a9a:	f1 e0       	ldi	r31, 0x01	; 1
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8f 7d       	andi	r24, 0xDF	; 223
    2aa0:	80 83       	st	Z, r24
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <__vector_55+0x6c>
    2aa4:	e1 e3       	ldi	r30, 0x31	; 49
    2aa6:	f1 e0       	ldi	r31, 0x01	; 1
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8f 7d       	andi	r24, 0xDF	; 223
    2aac:	80 83       	st	Z, r24
    2aae:	ff 91       	pop	r31
    2ab0:	ef 91       	pop	r30
    2ab2:	bf 91       	pop	r27
    2ab4:	af 91       	pop	r26
    2ab6:	9f 91       	pop	r25
    2ab8:	8f 91       	pop	r24
    2aba:	2f 91       	pop	r18
    2abc:	0f 90       	pop	r0
    2abe:	0b be       	out	0x3b, r0	; 59
    2ac0:	0f 90       	pop	r0
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	0f 90       	pop	r0
    2ac6:	1f 90       	pop	r1
    2ac8:	18 95       	reti

00002aca <usart_getchar>:
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	1f 92       	push	r1
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	be 01       	movw	r22, r28
    2ad6:	6f 5f       	subi	r22, 0xFF	; 255
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	80 91 66 0d 	lds	r24, 0x0D66	; 0x800d66 <_com_serial_instance>
    2ade:	90 91 67 0d 	lds	r25, 0x0D67	; 0x800d67 <_com_serial_instance+0x1>
    2ae2:	7b dd       	rcall	.-1290   	; 0x25da <serial_getByte>
    2ae4:	81 11       	cpse	r24, r1
    2ae6:	f6 cf       	rjmp	.-20     	; 0x2ad4 <usart_getchar+0xa>
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0f 90       	pop	r0
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret

00002af4 <usart_putchar>:
    2af4:	68 2f       	mov	r22, r24
    2af6:	80 91 66 0d 	lds	r24, 0x0D66	; 0x800d66 <_com_serial_instance>
    2afa:	90 91 67 0d 	lds	r25, 0x0D67	; 0x800d67 <_com_serial_instance+0x1>
    2afe:	42 dd       	rcall	.-1404   	; 0x2584 <serial_sendByte>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	08 95       	ret

00002b06 <stdio_initialise>:
    2b06:	8f 92       	push	r8
    2b08:	9f 92       	push	r9
    2b0a:	af 92       	push	r10
    2b0c:	cf 92       	push	r12
    2b0e:	ef 92       	push	r14
    2b10:	0f 93       	push	r16
    2b12:	81 2c       	mov	r8, r1
    2b14:	91 2c       	mov	r9, r1
    2b16:	68 94       	set
    2b18:	aa 24       	eor	r10, r10
    2b1a:	a7 f8       	bld	r10, 7
    2b1c:	68 94       	set
    2b1e:	cc 24       	eor	r12, r12
    2b20:	c7 f8       	bld	r12, 7
    2b22:	e1 2c       	mov	r14, r1
    2b24:	00 e0       	ldi	r16, 0x00	; 0
    2b26:	23 e0       	ldi	r18, 0x03	; 3
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	51 ee       	ldi	r21, 0xE1	; 225
    2b2c:	60 e0       	ldi	r22, 0x00	; 0
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	8d dc       	rcall	.-1766   	; 0x244c <serial_create>
    2b32:	90 93 67 0d 	sts	0x0D67, r25	; 0x800d67 <_com_serial_instance+0x1>
    2b36:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <_com_serial_instance>
    2b3a:	eb e7       	ldi	r30, 0x7B	; 123
    2b3c:	fd e0       	ldi	r31, 0x0D	; 13
    2b3e:	83 e1       	ldi	r24, 0x13	; 19
    2b40:	92 e0       	ldi	r25, 0x02	; 2
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
    2b46:	93 83       	std	Z+3, r25	; 0x03
    2b48:	82 83       	std	Z+2, r24	; 0x02
    2b4a:	0f 91       	pop	r16
    2b4c:	ef 90       	pop	r14
    2b4e:	cf 90       	pop	r12
    2b50:	af 90       	pop	r10
    2b52:	9f 90       	pop	r9
    2b54:	8f 90       	pop	r8
    2b56:	08 95       	ret

00002b58 <_initTwiInterface>:
    2b58:	80 91 76 0d 	lds	r24, 0x0D76	; 0x800d76 <_twiIsInitiated>
    2b5c:	81 11       	cpse	r24, r1
    2b5e:	0c c0       	rjmp	.+24     	; 0x2b78 <_initTwiInterface+0x20>
    2b60:	8c e0       	ldi	r24, 0x0C	; 12
    2b62:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2b66:	8f ef       	ldi	r24, 0xFF	; 255
    2b68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2b6c:	84 e0       	ldi	r24, 0x04	; 4
    2b6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	80 93 76 0d 	sts	0x0D76, r24	; 0x800d76 <_twiIsInitiated>
    2b78:	08 95       	ret

00002b7a <twiCreate>:
    2b7a:	af 92       	push	r10
    2b7c:	bf 92       	push	r11
    2b7e:	cf 92       	push	r12
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	a8 2e       	mov	r10, r24
    2b90:	b6 2e       	mov	r11, r22
    2b92:	69 01       	movw	r12, r18
    2b94:	7a 01       	movw	r14, r20
    2b96:	84 e0       	ldi	r24, 0x04	; 4
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	cb d3       	rcall	.+1942   	; 0x3332 <malloc>
    2b9c:	ec 01       	movw	r28, r24
    2b9e:	89 2b       	or	r24, r25
    2ba0:	61 f1       	breq	.+88     	; 0x2bfa <twiCreate+0x80>
    2ba2:	a8 82       	st	Y, r10
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	b8 12       	cpse	r11, r24
    2ba8:	12 c0       	rjmp	.+36     	; 0x2bce <twiCreate+0x54>
    2baa:	c7 01       	movw	r24, r14
    2bac:	b6 01       	movw	r22, r12
    2bae:	20 ea       	ldi	r18, 0xA0	; 160
    2bb0:	36 e8       	ldi	r19, 0x86	; 134
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	50 e0       	ldi	r21, 0x00	; 0
    2bb6:	79 d3       	rcall	.+1778   	; 0x32aa <__udivmodsi4>
    2bb8:	da 01       	movw	r26, r20
    2bba:	c9 01       	movw	r24, r18
    2bbc:	40 97       	sbiw	r24, 0x10	; 16
    2bbe:	a1 09       	sbc	r26, r1
    2bc0:	b1 09       	sbc	r27, r1
    2bc2:	b6 95       	lsr	r27
    2bc4:	a7 95       	ror	r26
    2bc6:	97 95       	ror	r25
    2bc8:	87 95       	ror	r24
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	11 c0       	rjmp	.+34     	; 0x2bf0 <twiCreate+0x76>
    2bce:	c7 01       	movw	r24, r14
    2bd0:	b6 01       	movw	r22, r12
    2bd2:	20 e8       	ldi	r18, 0x80	; 128
    2bd4:	3a e1       	ldi	r19, 0x1A	; 26
    2bd6:	46 e0       	ldi	r20, 0x06	; 6
    2bd8:	50 e0       	ldi	r21, 0x00	; 0
    2bda:	67 d3       	rcall	.+1742   	; 0x32aa <__udivmodsi4>
    2bdc:	da 01       	movw	r26, r20
    2bde:	c9 01       	movw	r24, r18
    2be0:	40 97       	sbiw	r24, 0x10	; 16
    2be2:	a1 09       	sbc	r26, r1
    2be4:	b1 09       	sbc	r27, r1
    2be6:	b6 95       	lsr	r27
    2be8:	a7 95       	ror	r26
    2bea:	97 95       	ror	r25
    2bec:	87 95       	ror	r24
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	1b 83       	std	Y+3, r17	; 0x03
    2bf2:	0a 83       	std	Y+2, r16	; 0x02
    2bf4:	8c 2f       	mov	r24, r28
    2bf6:	9d 2f       	mov	r25, r29
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <twiCreate+0x84>
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	ff 90       	pop	r15
    2c08:	ef 90       	pop	r14
    2c0a:	df 90       	pop	r13
    2c0c:	cf 90       	pop	r12
    2c0e:	bf 90       	pop	r11
    2c10:	af 90       	pop	r10
    2c12:	08 95       	ret

00002c14 <twiIsBusy>:
    2c14:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2c18:	81 70       	andi	r24, 0x01	; 1
    2c1a:	08 95       	ret

00002c1c <twiTransmit>:
    2c1c:	ff 92       	push	r15
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	d1 f1       	breq	.+116    	; 0x2c9e <twiTransmit+0x82>
    2c2a:	4a 30       	cpi	r20, 0x0A	; 10
    2c2c:	d0 f5       	brcc	.+116    	; 0x2ca2 <twiTransmit+0x86>
    2c2e:	f4 2e       	mov	r15, r20
    2c30:	8b 01       	movw	r16, r22
    2c32:	ec 01       	movw	r28, r24
    2c34:	ef df       	rcall	.-34     	; 0x2c14 <twiIsBusy>
    2c36:	81 11       	cpse	r24, r1
    2c38:	36 c0       	rjmp	.+108    	; 0x2ca6 <twiTransmit+0x8a>
    2c3a:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <_twiCurrentHandler>
    2c3e:	90 91 6a 0d 	lds	r25, 0x0D6A	; 0x800d6a <_twiCurrentHandler+0x1>
    2c42:	c8 17       	cp	r28, r24
    2c44:	d9 07       	cpc	r29, r25
    2c46:	41 f0       	breq	.+16     	; 0x2c58 <twiTransmit+0x3c>
    2c48:	87 df       	rcall	.-242    	; 0x2b58 <_initTwiInterface>
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2c50:	d0 93 6a 0d 	sts	0x0D6A, r29	; 0x800d6a <_twiCurrentHandler+0x1>
    2c54:	c0 93 69 0d 	sts	0x0D69, r28	; 0x800d69 <_twiCurrentHandler>
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	8f 0d       	add	r24, r15
    2c5c:	80 93 6b 0d 	sts	0x0D6B, r24	; 0x800d6b <_twiMessageLen>
    2c60:	88 81       	ld	r24, Y
    2c62:	88 0f       	add	r24, r24
    2c64:	80 93 6c 0d 	sts	0x0D6C, r24	; 0x800d6c <_twiMessageBuffer>
    2c68:	ff 20       	and	r15, r15
    2c6a:	89 f0       	breq	.+34     	; 0x2c8e <twiTransmit+0x72>
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	ad e6       	ldi	r26, 0x6D	; 109
    2c70:	bd e0       	ldi	r27, 0x0D	; 13
    2c72:	4f ef       	ldi	r20, 0xFF	; 255
    2c74:	4f 0d       	add	r20, r15
    2c76:	64 2f       	mov	r22, r20
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	01 96       	adiw	r24, 0x01	; 1
    2c7e:	b8 01       	movw	r22, r16
    2c80:	68 0f       	add	r22, r24
    2c82:	79 1f       	adc	r23, r25
    2c84:	81 91       	ld	r24, Z+
    2c86:	8d 93       	st	X+, r24
    2c88:	e6 17       	cp	r30, r22
    2c8a:	f7 07       	cpc	r31, r23
    2c8c:	d9 f7       	brne	.-10     	; 0x2c84 <twiTransmit+0x68>
    2c8e:	88 ef       	ldi	r24, 0xF8	; 248
    2c90:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2c94:	85 ea       	ldi	r24, 0xA5	; 165
    2c96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2c9a:	84 e0       	ldi	r24, 0x04	; 4
    2c9c:	05 c0       	rjmp	.+10     	; 0x2ca8 <twiTransmit+0x8c>
    2c9e:	86 e0       	ldi	r24, 0x06	; 6
    2ca0:	03 c0       	rjmp	.+6      	; 0x2ca8 <twiTransmit+0x8c>
    2ca2:	87 e0       	ldi	r24, 0x07	; 7
    2ca4:	01 c0       	rjmp	.+2      	; 0x2ca8 <twiTransmit+0x8c>
    2ca6:	82 e0       	ldi	r24, 0x02	; 2
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	ff 90       	pop	r15
    2cb2:	08 95       	ret

00002cb4 <twiReceive>:
    2cb4:	1f 93       	push	r17
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	29 f1       	breq	.+74     	; 0x2d08 <twiReceive+0x54>
    2cbe:	6b 30       	cpi	r22, 0x0B	; 11
    2cc0:	28 f5       	brcc	.+74     	; 0x2d0c <twiReceive+0x58>
    2cc2:	16 2f       	mov	r17, r22
    2cc4:	ec 01       	movw	r28, r24
    2cc6:	a6 df       	rcall	.-180    	; 0x2c14 <twiIsBusy>
    2cc8:	81 11       	cpse	r24, r1
    2cca:	22 c0       	rjmp	.+68     	; 0x2d10 <twiReceive+0x5c>
    2ccc:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <_twiCurrentHandler>
    2cd0:	90 91 6a 0d 	lds	r25, 0x0D6A	; 0x800d6a <_twiCurrentHandler+0x1>
    2cd4:	c8 17       	cp	r28, r24
    2cd6:	d9 07       	cpc	r29, r25
    2cd8:	41 f0       	breq	.+16     	; 0x2cea <twiReceive+0x36>
    2cda:	3e df       	rcall	.-388    	; 0x2b58 <_initTwiInterface>
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2ce2:	d0 93 6a 0d 	sts	0x0D6A, r29	; 0x800d6a <_twiCurrentHandler+0x1>
    2ce6:	c0 93 69 0d 	sts	0x0D69, r28	; 0x800d69 <_twiCurrentHandler>
    2cea:	10 93 6b 0d 	sts	0x0D6B, r17	; 0x800d6b <_twiMessageLen>
    2cee:	88 81       	ld	r24, Y
    2cf0:	88 0f       	add	r24, r24
    2cf2:	81 60       	ori	r24, 0x01	; 1
    2cf4:	80 93 6c 0d 	sts	0x0D6C, r24	; 0x800d6c <_twiMessageBuffer>
    2cf8:	88 ef       	ldi	r24, 0xF8	; 248
    2cfa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2cfe:	85 ea       	ldi	r24, 0xA5	; 165
    2d00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d04:	85 e0       	ldi	r24, 0x05	; 5
    2d06:	05 c0       	rjmp	.+10     	; 0x2d12 <twiReceive+0x5e>
    2d08:	86 e0       	ldi	r24, 0x06	; 6
    2d0a:	03 c0       	rjmp	.+6      	; 0x2d12 <twiReceive+0x5e>
    2d0c:	87 e0       	ldi	r24, 0x07	; 7
    2d0e:	01 c0       	rjmp	.+2      	; 0x2d12 <twiReceive+0x5e>
    2d10:	82 e0       	ldi	r24, 0x02	; 2
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	08 95       	ret

00002d1a <__vector_39>:
    2d1a:	1f 92       	push	r1
    2d1c:	0f 92       	push	r0
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	0f 92       	push	r0
    2d22:	11 24       	eor	r1, r1
    2d24:	0b b6       	in	r0, 0x3b	; 59
    2d26:	0f 92       	push	r0
    2d28:	2f 93       	push	r18
    2d2a:	3f 93       	push	r19
    2d2c:	4f 93       	push	r20
    2d2e:	5f 93       	push	r21
    2d30:	6f 93       	push	r22
    2d32:	7f 93       	push	r23
    2d34:	8f 93       	push	r24
    2d36:	9f 93       	push	r25
    2d38:	af 93       	push	r26
    2d3a:	bf 93       	push	r27
    2d3c:	ef 93       	push	r30
    2d3e:	ff 93       	push	r31
    2d40:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2d44:	8e 2f       	mov	r24, r30
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	fc 01       	movw	r30, r24
    2d4a:	38 97       	sbiw	r30, 0x08	; 8
    2d4c:	e1 35       	cpi	r30, 0x51	; 81
    2d4e:	f1 05       	cpc	r31, r1
    2d50:	08 f0       	brcs	.+2      	; 0x2d54 <__vector_39+0x3a>
    2d52:	75 c0       	rjmp	.+234    	; 0x2e3e <__vector_39+0x124>
    2d54:	88 27       	eor	r24, r24
    2d56:	e4 58       	subi	r30, 0x84	; 132
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5c:	c8 c2       	rjmp	.+1424   	; 0x32ee <__tablejump2__>
    2d5e:	10 92 68 0d 	sts	0x0D68, r1	; 0x800d68 <_index.1885>
    2d62:	e0 91 68 0d 	lds	r30, 0x0D68	; 0x800d68 <_index.1885>
    2d66:	80 91 6b 0d 	lds	r24, 0x0D6B	; 0x800d6b <_twiMessageLen>
    2d6a:	e8 17       	cp	r30, r24
    2d6c:	70 f4       	brcc	.+28     	; 0x2d8a <__vector_39+0x70>
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	8e 0f       	add	r24, r30
    2d72:	80 93 68 0d 	sts	0x0D68, r24	; 0x800d68 <_index.1885>
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	e4 59       	subi	r30, 0x94	; 148
    2d7a:	f2 4f       	sbci	r31, 0xF2	; 242
    2d7c:	80 81       	ld	r24, Z
    2d7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2d82:	85 e8       	ldi	r24, 0x85	; 133
    2d84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d88:	72 c0       	rjmp	.+228    	; 0x2e6e <__vector_39+0x154>
    2d8a:	84 e9       	ldi	r24, 0x94	; 148
    2d8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d90:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <_twiCurrentHandler>
    2d94:	90 91 6a 0d 	lds	r25, 0x0D6A	; 0x800d6a <_twiCurrentHandler+0x1>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	12 96       	adiw	r26, 0x02	; 2
    2d9c:	ed 91       	ld	r30, X+
    2d9e:	fc 91       	ld	r31, X
    2da0:	13 97       	sbiw	r26, 0x03	; 3
    2da2:	30 97       	sbiw	r30, 0x00	; 0
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <__vector_39+0x8e>
    2da6:	63 c0       	rjmp	.+198    	; 0x2e6e <__vector_39+0x154>
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	64 e0       	ldi	r22, 0x04	; 4
    2db0:	19 95       	eicall
    2db2:	5d c0       	rjmp	.+186    	; 0x2e6e <__vector_39+0x154>
    2db4:	e0 91 68 0d 	lds	r30, 0x0D68	; 0x800d68 <_index.1885>
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	8e 0f       	add	r24, r30
    2dbc:	80 93 68 0d 	sts	0x0D68, r24	; 0x800d68 <_index.1885>
    2dc0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	e4 59       	subi	r30, 0x94	; 148
    2dc8:	f2 4f       	sbci	r31, 0xF2	; 242
    2dca:	80 83       	st	Z, r24
    2dcc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2dd0:	80 34       	cpi	r24, 0x40	; 64
    2dd2:	11 f4       	brne	.+4      	; 0x2dd8 <__vector_39+0xbe>
    2dd4:	10 92 68 0d 	sts	0x0D68, r1	; 0x800d68 <_index.1885>
    2dd8:	20 91 68 0d 	lds	r18, 0x0D68	; 0x800d68 <_index.1885>
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	80 91 6b 0d 	lds	r24, 0x0D6B	; 0x800d6b <_twiMessageLen>
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	28 17       	cp	r18, r24
    2de8:	39 07       	cpc	r19, r25
    2dea:	24 f4       	brge	.+8      	; 0x2df4 <__vector_39+0xda>
    2dec:	85 ec       	ldi	r24, 0xC5	; 197
    2dee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2df2:	3d c0       	rjmp	.+122    	; 0x2e6e <__vector_39+0x154>
    2df4:	85 e8       	ldi	r24, 0x85	; 133
    2df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2dfa:	39 c0       	rjmp	.+114    	; 0x2e6e <__vector_39+0x154>
    2dfc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2e00:	e0 91 68 0d 	lds	r30, 0x0D68	; 0x800d68 <_index.1885>
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	e4 59       	subi	r30, 0x94	; 148
    2e08:	f2 4f       	sbci	r31, 0xF2	; 242
    2e0a:	80 83       	st	Z, r24
    2e0c:	84 e9       	ldi	r24, 0x94	; 148
    2e0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2e12:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <_twiCurrentHandler>
    2e16:	90 91 6a 0d 	lds	r25, 0x0D6A	; 0x800d6a <_twiCurrentHandler+0x1>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	12 96       	adiw	r26, 0x02	; 2
    2e1e:	ed 91       	ld	r30, X+
    2e20:	fc 91       	ld	r31, X
    2e22:	13 97       	sbiw	r26, 0x03	; 3
    2e24:	30 97       	sbiw	r30, 0x00	; 0
    2e26:	19 f1       	breq	.+70     	; 0x2e6e <__vector_39+0x154>
    2e28:	20 91 6b 0d 	lds	r18, 0x0D6B	; 0x800d6b <_twiMessageLen>
    2e2c:	4c e6       	ldi	r20, 0x6C	; 108
    2e2e:	5d e0       	ldi	r21, 0x0D	; 13
    2e30:	65 e0       	ldi	r22, 0x05	; 5
    2e32:	19 95       	eicall
    2e34:	1c c0       	rjmp	.+56     	; 0x2e6e <__vector_39+0x154>
    2e36:	85 ea       	ldi	r24, 0xA5	; 165
    2e38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2e3c:	18 c0       	rjmp	.+48     	; 0x2e6e <__vector_39+0x154>
    2e3e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2e42:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    2e46:	84 e0       	ldi	r24, 0x04	; 4
    2e48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2e4c:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <_twiCurrentHandler>
    2e50:	90 91 6a 0d 	lds	r25, 0x0D6A	; 0x800d6a <_twiCurrentHandler+0x1>
    2e54:	dc 01       	movw	r26, r24
    2e56:	12 96       	adiw	r26, 0x02	; 2
    2e58:	ed 91       	ld	r30, X+
    2e5a:	fc 91       	ld	r31, X
    2e5c:	13 97       	sbiw	r26, 0x03	; 3
    2e5e:	30 97       	sbiw	r30, 0x00	; 0
    2e60:	31 f0       	breq	.+12     	; 0x2e6e <__vector_39+0x154>
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	50 e0       	ldi	r21, 0x00	; 0
    2e68:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    2e6c:	19 95       	eicall
    2e6e:	ff 91       	pop	r31
    2e70:	ef 91       	pop	r30
    2e72:	bf 91       	pop	r27
    2e74:	af 91       	pop	r26
    2e76:	9f 91       	pop	r25
    2e78:	8f 91       	pop	r24
    2e7a:	7f 91       	pop	r23
    2e7c:	6f 91       	pop	r22
    2e7e:	5f 91       	pop	r21
    2e80:	4f 91       	pop	r20
    2e82:	3f 91       	pop	r19
    2e84:	2f 91       	pop	r18
    2e86:	0f 90       	pop	r0
    2e88:	0b be       	out	0x3b, r0	; 59
    2e8a:	0f 90       	pop	r0
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	0f 90       	pop	r0
    2e90:	1f 90       	pop	r1
    2e92:	18 95       	reti

00002e94 <fifo_init>:
    2e94:	fc 01       	movw	r30, r24
    2e96:	41 11       	cpse	r20, r1
    2e98:	01 c0       	rjmp	.+2      	; 0x2e9c <fifo_init+0x8>
    2e9a:	6c d3       	rcall	.+1752   	; 0x3574 <abort>
    2e9c:	84 2f       	mov	r24, r20
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9c 01       	movw	r18, r24
    2ea2:	21 50       	subi	r18, 0x01	; 1
    2ea4:	31 09       	sbc	r19, r1
    2ea6:	82 23       	and	r24, r18
    2ea8:	93 23       	and	r25, r19
    2eaa:	89 2b       	or	r24, r25
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <fifo_init+0x1c>
    2eae:	62 d3       	rcall	.+1732   	; 0x3574 <abort>
    2eb0:	41 38       	cpi	r20, 0x81	; 129
    2eb2:	08 f0       	brcs	.+2      	; 0x2eb6 <fifo_init+0x22>
    2eb4:	5f d3       	rcall	.+1726   	; 0x3574 <abort>
    2eb6:	12 82       	std	Z+2, r1	; 0x02
    2eb8:	13 82       	std	Z+3, r1	; 0x03
    2eba:	44 83       	std	Z+4, r20	; 0x04
    2ebc:	44 0f       	add	r20, r20
    2ebe:	41 50       	subi	r20, 0x01	; 1
    2ec0:	45 83       	std	Z+5, r20	; 0x05
    2ec2:	71 83       	std	Z+1, r23	; 0x01
    2ec4:	60 83       	st	Z, r22
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	08 95       	ret

00002ecc <__subsf3>:
    2ecc:	50 58       	subi	r21, 0x80	; 128

00002ece <__addsf3>:
    2ece:	bb 27       	eor	r27, r27
    2ed0:	aa 27       	eor	r26, r26
    2ed2:	0e d0       	rcall	.+28     	; 0x2ef0 <__addsf3x>
    2ed4:	4d c1       	rjmp	.+666    	; 0x3170 <__fp_round>
    2ed6:	3e d1       	rcall	.+636    	; 0x3154 <__fp_pscA>
    2ed8:	30 f0       	brcs	.+12     	; 0x2ee6 <__addsf3+0x18>
    2eda:	43 d1       	rcall	.+646    	; 0x3162 <__fp_pscB>
    2edc:	20 f0       	brcs	.+8      	; 0x2ee6 <__addsf3+0x18>
    2ede:	31 f4       	brne	.+12     	; 0x2eec <__addsf3+0x1e>
    2ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ee2:	11 f4       	brne	.+4      	; 0x2ee8 <__addsf3+0x1a>
    2ee4:	1e f4       	brtc	.+6      	; 0x2eec <__addsf3+0x1e>
    2ee6:	33 c1       	rjmp	.+614    	; 0x314e <__fp_nan>
    2ee8:	0e f4       	brtc	.+2      	; 0x2eec <__addsf3+0x1e>
    2eea:	e0 95       	com	r30
    2eec:	e7 fb       	bst	r30, 7
    2eee:	29 c1       	rjmp	.+594    	; 0x3142 <__fp_inf>

00002ef0 <__addsf3x>:
    2ef0:	e9 2f       	mov	r30, r25
    2ef2:	4f d1       	rcall	.+670    	; 0x3192 <__fp_split3>
    2ef4:	80 f3       	brcs	.-32     	; 0x2ed6 <__addsf3+0x8>
    2ef6:	ba 17       	cp	r27, r26
    2ef8:	62 07       	cpc	r22, r18
    2efa:	73 07       	cpc	r23, r19
    2efc:	84 07       	cpc	r24, r20
    2efe:	95 07       	cpc	r25, r21
    2f00:	18 f0       	brcs	.+6      	; 0x2f08 <__addsf3x+0x18>
    2f02:	71 f4       	brne	.+28     	; 0x2f20 <__addsf3x+0x30>
    2f04:	9e f5       	brtc	.+102    	; 0x2f6c <__addsf3x+0x7c>
    2f06:	67 c1       	rjmp	.+718    	; 0x31d6 <__fp_zero>
    2f08:	0e f4       	brtc	.+2      	; 0x2f0c <__addsf3x+0x1c>
    2f0a:	e0 95       	com	r30
    2f0c:	0b 2e       	mov	r0, r27
    2f0e:	ba 2f       	mov	r27, r26
    2f10:	a0 2d       	mov	r26, r0
    2f12:	0b 01       	movw	r0, r22
    2f14:	b9 01       	movw	r22, r18
    2f16:	90 01       	movw	r18, r0
    2f18:	0c 01       	movw	r0, r24
    2f1a:	ca 01       	movw	r24, r20
    2f1c:	a0 01       	movw	r20, r0
    2f1e:	11 24       	eor	r1, r1
    2f20:	ff 27       	eor	r31, r31
    2f22:	59 1b       	sub	r21, r25
    2f24:	99 f0       	breq	.+38     	; 0x2f4c <__addsf3x+0x5c>
    2f26:	59 3f       	cpi	r21, 0xF9	; 249
    2f28:	50 f4       	brcc	.+20     	; 0x2f3e <__addsf3x+0x4e>
    2f2a:	50 3e       	cpi	r21, 0xE0	; 224
    2f2c:	68 f1       	brcs	.+90     	; 0x2f88 <__addsf3x+0x98>
    2f2e:	1a 16       	cp	r1, r26
    2f30:	f0 40       	sbci	r31, 0x00	; 0
    2f32:	a2 2f       	mov	r26, r18
    2f34:	23 2f       	mov	r18, r19
    2f36:	34 2f       	mov	r19, r20
    2f38:	44 27       	eor	r20, r20
    2f3a:	58 5f       	subi	r21, 0xF8	; 248
    2f3c:	f3 cf       	rjmp	.-26     	; 0x2f24 <__addsf3x+0x34>
    2f3e:	46 95       	lsr	r20
    2f40:	37 95       	ror	r19
    2f42:	27 95       	ror	r18
    2f44:	a7 95       	ror	r26
    2f46:	f0 40       	sbci	r31, 0x00	; 0
    2f48:	53 95       	inc	r21
    2f4a:	c9 f7       	brne	.-14     	; 0x2f3e <__addsf3x+0x4e>
    2f4c:	7e f4       	brtc	.+30     	; 0x2f6c <__addsf3x+0x7c>
    2f4e:	1f 16       	cp	r1, r31
    2f50:	ba 0b       	sbc	r27, r26
    2f52:	62 0b       	sbc	r22, r18
    2f54:	73 0b       	sbc	r23, r19
    2f56:	84 0b       	sbc	r24, r20
    2f58:	ba f0       	brmi	.+46     	; 0x2f88 <__addsf3x+0x98>
    2f5a:	91 50       	subi	r25, 0x01	; 1
    2f5c:	a1 f0       	breq	.+40     	; 0x2f86 <__addsf3x+0x96>
    2f5e:	ff 0f       	add	r31, r31
    2f60:	bb 1f       	adc	r27, r27
    2f62:	66 1f       	adc	r22, r22
    2f64:	77 1f       	adc	r23, r23
    2f66:	88 1f       	adc	r24, r24
    2f68:	c2 f7       	brpl	.-16     	; 0x2f5a <__addsf3x+0x6a>
    2f6a:	0e c0       	rjmp	.+28     	; 0x2f88 <__addsf3x+0x98>
    2f6c:	ba 0f       	add	r27, r26
    2f6e:	62 1f       	adc	r22, r18
    2f70:	73 1f       	adc	r23, r19
    2f72:	84 1f       	adc	r24, r20
    2f74:	48 f4       	brcc	.+18     	; 0x2f88 <__addsf3x+0x98>
    2f76:	87 95       	ror	r24
    2f78:	77 95       	ror	r23
    2f7a:	67 95       	ror	r22
    2f7c:	b7 95       	ror	r27
    2f7e:	f7 95       	ror	r31
    2f80:	9e 3f       	cpi	r25, 0xFE	; 254
    2f82:	08 f0       	brcs	.+2      	; 0x2f86 <__addsf3x+0x96>
    2f84:	b3 cf       	rjmp	.-154    	; 0x2eec <__addsf3+0x1e>
    2f86:	93 95       	inc	r25
    2f88:	88 0f       	add	r24, r24
    2f8a:	08 f0       	brcs	.+2      	; 0x2f8e <__addsf3x+0x9e>
    2f8c:	99 27       	eor	r25, r25
    2f8e:	ee 0f       	add	r30, r30
    2f90:	97 95       	ror	r25
    2f92:	87 95       	ror	r24
    2f94:	08 95       	ret

00002f96 <__divsf3>:
    2f96:	0c d0       	rcall	.+24     	; 0x2fb0 <__divsf3x>
    2f98:	eb c0       	rjmp	.+470    	; 0x3170 <__fp_round>
    2f9a:	e3 d0       	rcall	.+454    	; 0x3162 <__fp_pscB>
    2f9c:	40 f0       	brcs	.+16     	; 0x2fae <__divsf3+0x18>
    2f9e:	da d0       	rcall	.+436    	; 0x3154 <__fp_pscA>
    2fa0:	30 f0       	brcs	.+12     	; 0x2fae <__divsf3+0x18>
    2fa2:	21 f4       	brne	.+8      	; 0x2fac <__divsf3+0x16>
    2fa4:	5f 3f       	cpi	r21, 0xFF	; 255
    2fa6:	19 f0       	breq	.+6      	; 0x2fae <__divsf3+0x18>
    2fa8:	cc c0       	rjmp	.+408    	; 0x3142 <__fp_inf>
    2faa:	51 11       	cpse	r21, r1
    2fac:	15 c1       	rjmp	.+554    	; 0x31d8 <__fp_szero>
    2fae:	cf c0       	rjmp	.+414    	; 0x314e <__fp_nan>

00002fb0 <__divsf3x>:
    2fb0:	f0 d0       	rcall	.+480    	; 0x3192 <__fp_split3>
    2fb2:	98 f3       	brcs	.-26     	; 0x2f9a <__divsf3+0x4>

00002fb4 <__divsf3_pse>:
    2fb4:	99 23       	and	r25, r25
    2fb6:	c9 f3       	breq	.-14     	; 0x2faa <__divsf3+0x14>
    2fb8:	55 23       	and	r21, r21
    2fba:	b1 f3       	breq	.-20     	; 0x2fa8 <__divsf3+0x12>
    2fbc:	95 1b       	sub	r25, r21
    2fbe:	55 0b       	sbc	r21, r21
    2fc0:	bb 27       	eor	r27, r27
    2fc2:	aa 27       	eor	r26, r26
    2fc4:	62 17       	cp	r22, r18
    2fc6:	73 07       	cpc	r23, r19
    2fc8:	84 07       	cpc	r24, r20
    2fca:	38 f0       	brcs	.+14     	; 0x2fda <__divsf3_pse+0x26>
    2fcc:	9f 5f       	subi	r25, 0xFF	; 255
    2fce:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd0:	22 0f       	add	r18, r18
    2fd2:	33 1f       	adc	r19, r19
    2fd4:	44 1f       	adc	r20, r20
    2fd6:	aa 1f       	adc	r26, r26
    2fd8:	a9 f3       	breq	.-22     	; 0x2fc4 <__divsf3_pse+0x10>
    2fda:	33 d0       	rcall	.+102    	; 0x3042 <__divsf3_pse+0x8e>
    2fdc:	0e 2e       	mov	r0, r30
    2fde:	3a f0       	brmi	.+14     	; 0x2fee <__divsf3_pse+0x3a>
    2fe0:	e0 e8       	ldi	r30, 0x80	; 128
    2fe2:	30 d0       	rcall	.+96     	; 0x3044 <__divsf3_pse+0x90>
    2fe4:	91 50       	subi	r25, 0x01	; 1
    2fe6:	50 40       	sbci	r21, 0x00	; 0
    2fe8:	e6 95       	lsr	r30
    2fea:	00 1c       	adc	r0, r0
    2fec:	ca f7       	brpl	.-14     	; 0x2fe0 <__divsf3_pse+0x2c>
    2fee:	29 d0       	rcall	.+82     	; 0x3042 <__divsf3_pse+0x8e>
    2ff0:	fe 2f       	mov	r31, r30
    2ff2:	27 d0       	rcall	.+78     	; 0x3042 <__divsf3_pse+0x8e>
    2ff4:	66 0f       	add	r22, r22
    2ff6:	77 1f       	adc	r23, r23
    2ff8:	88 1f       	adc	r24, r24
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	26 17       	cp	r18, r22
    2ffe:	37 07       	cpc	r19, r23
    3000:	48 07       	cpc	r20, r24
    3002:	ab 07       	cpc	r26, r27
    3004:	b0 e8       	ldi	r27, 0x80	; 128
    3006:	09 f0       	breq	.+2      	; 0x300a <__divsf3_pse+0x56>
    3008:	bb 0b       	sbc	r27, r27
    300a:	80 2d       	mov	r24, r0
    300c:	bf 01       	movw	r22, r30
    300e:	ff 27       	eor	r31, r31
    3010:	93 58       	subi	r25, 0x83	; 131
    3012:	5f 4f       	sbci	r21, 0xFF	; 255
    3014:	2a f0       	brmi	.+10     	; 0x3020 <__divsf3_pse+0x6c>
    3016:	9e 3f       	cpi	r25, 0xFE	; 254
    3018:	51 05       	cpc	r21, r1
    301a:	68 f0       	brcs	.+26     	; 0x3036 <__divsf3_pse+0x82>
    301c:	92 c0       	rjmp	.+292    	; 0x3142 <__fp_inf>
    301e:	dc c0       	rjmp	.+440    	; 0x31d8 <__fp_szero>
    3020:	5f 3f       	cpi	r21, 0xFF	; 255
    3022:	ec f3       	brlt	.-6      	; 0x301e <__divsf3_pse+0x6a>
    3024:	98 3e       	cpi	r25, 0xE8	; 232
    3026:	dc f3       	brlt	.-10     	; 0x301e <__divsf3_pse+0x6a>
    3028:	86 95       	lsr	r24
    302a:	77 95       	ror	r23
    302c:	67 95       	ror	r22
    302e:	b7 95       	ror	r27
    3030:	f7 95       	ror	r31
    3032:	9f 5f       	subi	r25, 0xFF	; 255
    3034:	c9 f7       	brne	.-14     	; 0x3028 <__divsf3_pse+0x74>
    3036:	88 0f       	add	r24, r24
    3038:	91 1d       	adc	r25, r1
    303a:	96 95       	lsr	r25
    303c:	87 95       	ror	r24
    303e:	97 f9       	bld	r25, 7
    3040:	08 95       	ret
    3042:	e1 e0       	ldi	r30, 0x01	; 1
    3044:	66 0f       	add	r22, r22
    3046:	77 1f       	adc	r23, r23
    3048:	88 1f       	adc	r24, r24
    304a:	bb 1f       	adc	r27, r27
    304c:	62 17       	cp	r22, r18
    304e:	73 07       	cpc	r23, r19
    3050:	84 07       	cpc	r24, r20
    3052:	ba 07       	cpc	r27, r26
    3054:	20 f0       	brcs	.+8      	; 0x305e <__divsf3_pse+0xaa>
    3056:	62 1b       	sub	r22, r18
    3058:	73 0b       	sbc	r23, r19
    305a:	84 0b       	sbc	r24, r20
    305c:	ba 0b       	sbc	r27, r26
    305e:	ee 1f       	adc	r30, r30
    3060:	88 f7       	brcc	.-30     	; 0x3044 <__divsf3_pse+0x90>
    3062:	e0 95       	com	r30
    3064:	08 95       	ret

00003066 <__fixsfsi>:
    3066:	04 d0       	rcall	.+8      	; 0x3070 <__fixunssfsi>
    3068:	68 94       	set
    306a:	b1 11       	cpse	r27, r1
    306c:	b5 c0       	rjmp	.+362    	; 0x31d8 <__fp_szero>
    306e:	08 95       	ret

00003070 <__fixunssfsi>:
    3070:	98 d0       	rcall	.+304    	; 0x31a2 <__fp_splitA>
    3072:	88 f0       	brcs	.+34     	; 0x3096 <__fixunssfsi+0x26>
    3074:	9f 57       	subi	r25, 0x7F	; 127
    3076:	90 f0       	brcs	.+36     	; 0x309c <__fixunssfsi+0x2c>
    3078:	b9 2f       	mov	r27, r25
    307a:	99 27       	eor	r25, r25
    307c:	b7 51       	subi	r27, 0x17	; 23
    307e:	a0 f0       	brcs	.+40     	; 0x30a8 <__fixunssfsi+0x38>
    3080:	d1 f0       	breq	.+52     	; 0x30b6 <__fixunssfsi+0x46>
    3082:	66 0f       	add	r22, r22
    3084:	77 1f       	adc	r23, r23
    3086:	88 1f       	adc	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	1a f0       	brmi	.+6      	; 0x3092 <__fixunssfsi+0x22>
    308c:	ba 95       	dec	r27
    308e:	c9 f7       	brne	.-14     	; 0x3082 <__fixunssfsi+0x12>
    3090:	12 c0       	rjmp	.+36     	; 0x30b6 <__fixunssfsi+0x46>
    3092:	b1 30       	cpi	r27, 0x01	; 1
    3094:	81 f0       	breq	.+32     	; 0x30b6 <__fixunssfsi+0x46>
    3096:	9f d0       	rcall	.+318    	; 0x31d6 <__fp_zero>
    3098:	b1 e0       	ldi	r27, 0x01	; 1
    309a:	08 95       	ret
    309c:	9c c0       	rjmp	.+312    	; 0x31d6 <__fp_zero>
    309e:	67 2f       	mov	r22, r23
    30a0:	78 2f       	mov	r23, r24
    30a2:	88 27       	eor	r24, r24
    30a4:	b8 5f       	subi	r27, 0xF8	; 248
    30a6:	39 f0       	breq	.+14     	; 0x30b6 <__fixunssfsi+0x46>
    30a8:	b9 3f       	cpi	r27, 0xF9	; 249
    30aa:	cc f3       	brlt	.-14     	; 0x309e <__fixunssfsi+0x2e>
    30ac:	86 95       	lsr	r24
    30ae:	77 95       	ror	r23
    30b0:	67 95       	ror	r22
    30b2:	b3 95       	inc	r27
    30b4:	d9 f7       	brne	.-10     	; 0x30ac <__fixunssfsi+0x3c>
    30b6:	3e f4       	brtc	.+14     	; 0x30c6 <__fixunssfsi+0x56>
    30b8:	90 95       	com	r25
    30ba:	80 95       	com	r24
    30bc:	70 95       	com	r23
    30be:	61 95       	neg	r22
    30c0:	7f 4f       	sbci	r23, 0xFF	; 255
    30c2:	8f 4f       	sbci	r24, 0xFF	; 255
    30c4:	9f 4f       	sbci	r25, 0xFF	; 255
    30c6:	08 95       	ret

000030c8 <__floatunsisf>:
    30c8:	e8 94       	clt
    30ca:	09 c0       	rjmp	.+18     	; 0x30de <__floatsisf+0x12>

000030cc <__floatsisf>:
    30cc:	97 fb       	bst	r25, 7
    30ce:	3e f4       	brtc	.+14     	; 0x30de <__floatsisf+0x12>
    30d0:	90 95       	com	r25
    30d2:	80 95       	com	r24
    30d4:	70 95       	com	r23
    30d6:	61 95       	neg	r22
    30d8:	7f 4f       	sbci	r23, 0xFF	; 255
    30da:	8f 4f       	sbci	r24, 0xFF	; 255
    30dc:	9f 4f       	sbci	r25, 0xFF	; 255
    30de:	99 23       	and	r25, r25
    30e0:	a9 f0       	breq	.+42     	; 0x310c <__floatsisf+0x40>
    30e2:	f9 2f       	mov	r31, r25
    30e4:	96 e9       	ldi	r25, 0x96	; 150
    30e6:	bb 27       	eor	r27, r27
    30e8:	93 95       	inc	r25
    30ea:	f6 95       	lsr	r31
    30ec:	87 95       	ror	r24
    30ee:	77 95       	ror	r23
    30f0:	67 95       	ror	r22
    30f2:	b7 95       	ror	r27
    30f4:	f1 11       	cpse	r31, r1
    30f6:	f8 cf       	rjmp	.-16     	; 0x30e8 <__floatsisf+0x1c>
    30f8:	fa f4       	brpl	.+62     	; 0x3138 <__floatsisf+0x6c>
    30fa:	bb 0f       	add	r27, r27
    30fc:	11 f4       	brne	.+4      	; 0x3102 <__floatsisf+0x36>
    30fe:	60 ff       	sbrs	r22, 0
    3100:	1b c0       	rjmp	.+54     	; 0x3138 <__floatsisf+0x6c>
    3102:	6f 5f       	subi	r22, 0xFF	; 255
    3104:	7f 4f       	sbci	r23, 0xFF	; 255
    3106:	8f 4f       	sbci	r24, 0xFF	; 255
    3108:	9f 4f       	sbci	r25, 0xFF	; 255
    310a:	16 c0       	rjmp	.+44     	; 0x3138 <__floatsisf+0x6c>
    310c:	88 23       	and	r24, r24
    310e:	11 f0       	breq	.+4      	; 0x3114 <__floatsisf+0x48>
    3110:	96 e9       	ldi	r25, 0x96	; 150
    3112:	11 c0       	rjmp	.+34     	; 0x3136 <__floatsisf+0x6a>
    3114:	77 23       	and	r23, r23
    3116:	21 f0       	breq	.+8      	; 0x3120 <__floatsisf+0x54>
    3118:	9e e8       	ldi	r25, 0x8E	; 142
    311a:	87 2f       	mov	r24, r23
    311c:	76 2f       	mov	r23, r22
    311e:	05 c0       	rjmp	.+10     	; 0x312a <__floatsisf+0x5e>
    3120:	66 23       	and	r22, r22
    3122:	71 f0       	breq	.+28     	; 0x3140 <__floatsisf+0x74>
    3124:	96 e8       	ldi	r25, 0x86	; 134
    3126:	86 2f       	mov	r24, r22
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	2a f0       	brmi	.+10     	; 0x3138 <__floatsisf+0x6c>
    312e:	9a 95       	dec	r25
    3130:	66 0f       	add	r22, r22
    3132:	77 1f       	adc	r23, r23
    3134:	88 1f       	adc	r24, r24
    3136:	da f7       	brpl	.-10     	; 0x312e <__floatsisf+0x62>
    3138:	88 0f       	add	r24, r24
    313a:	96 95       	lsr	r25
    313c:	87 95       	ror	r24
    313e:	97 f9       	bld	r25, 7
    3140:	08 95       	ret

00003142 <__fp_inf>:
    3142:	97 f9       	bld	r25, 7
    3144:	9f 67       	ori	r25, 0x7F	; 127
    3146:	80 e8       	ldi	r24, 0x80	; 128
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	08 95       	ret

0000314e <__fp_nan>:
    314e:	9f ef       	ldi	r25, 0xFF	; 255
    3150:	80 ec       	ldi	r24, 0xC0	; 192
    3152:	08 95       	ret

00003154 <__fp_pscA>:
    3154:	00 24       	eor	r0, r0
    3156:	0a 94       	dec	r0
    3158:	16 16       	cp	r1, r22
    315a:	17 06       	cpc	r1, r23
    315c:	18 06       	cpc	r1, r24
    315e:	09 06       	cpc	r0, r25
    3160:	08 95       	ret

00003162 <__fp_pscB>:
    3162:	00 24       	eor	r0, r0
    3164:	0a 94       	dec	r0
    3166:	12 16       	cp	r1, r18
    3168:	13 06       	cpc	r1, r19
    316a:	14 06       	cpc	r1, r20
    316c:	05 06       	cpc	r0, r21
    316e:	08 95       	ret

00003170 <__fp_round>:
    3170:	09 2e       	mov	r0, r25
    3172:	03 94       	inc	r0
    3174:	00 0c       	add	r0, r0
    3176:	11 f4       	brne	.+4      	; 0x317c <__fp_round+0xc>
    3178:	88 23       	and	r24, r24
    317a:	52 f0       	brmi	.+20     	; 0x3190 <__fp_round+0x20>
    317c:	bb 0f       	add	r27, r27
    317e:	40 f4       	brcc	.+16     	; 0x3190 <__fp_round+0x20>
    3180:	bf 2b       	or	r27, r31
    3182:	11 f4       	brne	.+4      	; 0x3188 <__fp_round+0x18>
    3184:	60 ff       	sbrs	r22, 0
    3186:	04 c0       	rjmp	.+8      	; 0x3190 <__fp_round+0x20>
    3188:	6f 5f       	subi	r22, 0xFF	; 255
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	8f 4f       	sbci	r24, 0xFF	; 255
    318e:	9f 4f       	sbci	r25, 0xFF	; 255
    3190:	08 95       	ret

00003192 <__fp_split3>:
    3192:	57 fd       	sbrc	r21, 7
    3194:	90 58       	subi	r25, 0x80	; 128
    3196:	44 0f       	add	r20, r20
    3198:	55 1f       	adc	r21, r21
    319a:	59 f0       	breq	.+22     	; 0x31b2 <__fp_splitA+0x10>
    319c:	5f 3f       	cpi	r21, 0xFF	; 255
    319e:	71 f0       	breq	.+28     	; 0x31bc <__fp_splitA+0x1a>
    31a0:	47 95       	ror	r20

000031a2 <__fp_splitA>:
    31a2:	88 0f       	add	r24, r24
    31a4:	97 fb       	bst	r25, 7
    31a6:	99 1f       	adc	r25, r25
    31a8:	61 f0       	breq	.+24     	; 0x31c2 <__fp_splitA+0x20>
    31aa:	9f 3f       	cpi	r25, 0xFF	; 255
    31ac:	79 f0       	breq	.+30     	; 0x31cc <__fp_splitA+0x2a>
    31ae:	87 95       	ror	r24
    31b0:	08 95       	ret
    31b2:	12 16       	cp	r1, r18
    31b4:	13 06       	cpc	r1, r19
    31b6:	14 06       	cpc	r1, r20
    31b8:	55 1f       	adc	r21, r21
    31ba:	f2 cf       	rjmp	.-28     	; 0x31a0 <__fp_split3+0xe>
    31bc:	46 95       	lsr	r20
    31be:	f1 df       	rcall	.-30     	; 0x31a2 <__fp_splitA>
    31c0:	08 c0       	rjmp	.+16     	; 0x31d2 <__fp_splitA+0x30>
    31c2:	16 16       	cp	r1, r22
    31c4:	17 06       	cpc	r1, r23
    31c6:	18 06       	cpc	r1, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	f1 cf       	rjmp	.-30     	; 0x31ae <__fp_splitA+0xc>
    31cc:	86 95       	lsr	r24
    31ce:	71 05       	cpc	r23, r1
    31d0:	61 05       	cpc	r22, r1
    31d2:	08 94       	sec
    31d4:	08 95       	ret

000031d6 <__fp_zero>:
    31d6:	e8 94       	clt

000031d8 <__fp_szero>:
    31d8:	bb 27       	eor	r27, r27
    31da:	66 27       	eor	r22, r22
    31dc:	77 27       	eor	r23, r23
    31de:	cb 01       	movw	r24, r22
    31e0:	97 f9       	bld	r25, 7
    31e2:	08 95       	ret

000031e4 <__mulsf3>:
    31e4:	0b d0       	rcall	.+22     	; 0x31fc <__mulsf3x>
    31e6:	c4 cf       	rjmp	.-120    	; 0x3170 <__fp_round>
    31e8:	b5 df       	rcall	.-150    	; 0x3154 <__fp_pscA>
    31ea:	28 f0       	brcs	.+10     	; 0x31f6 <__mulsf3+0x12>
    31ec:	ba df       	rcall	.-140    	; 0x3162 <__fp_pscB>
    31ee:	18 f0       	brcs	.+6      	; 0x31f6 <__mulsf3+0x12>
    31f0:	95 23       	and	r25, r21
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <__mulsf3+0x12>
    31f4:	a6 cf       	rjmp	.-180    	; 0x3142 <__fp_inf>
    31f6:	ab cf       	rjmp	.-170    	; 0x314e <__fp_nan>
    31f8:	11 24       	eor	r1, r1
    31fa:	ee cf       	rjmp	.-36     	; 0x31d8 <__fp_szero>

000031fc <__mulsf3x>:
    31fc:	ca df       	rcall	.-108    	; 0x3192 <__fp_split3>
    31fe:	a0 f3       	brcs	.-24     	; 0x31e8 <__mulsf3+0x4>

00003200 <__mulsf3_pse>:
    3200:	95 9f       	mul	r25, r21
    3202:	d1 f3       	breq	.-12     	; 0x31f8 <__mulsf3+0x14>
    3204:	95 0f       	add	r25, r21
    3206:	50 e0       	ldi	r21, 0x00	; 0
    3208:	55 1f       	adc	r21, r21
    320a:	62 9f       	mul	r22, r18
    320c:	f0 01       	movw	r30, r0
    320e:	72 9f       	mul	r23, r18
    3210:	bb 27       	eor	r27, r27
    3212:	f0 0d       	add	r31, r0
    3214:	b1 1d       	adc	r27, r1
    3216:	63 9f       	mul	r22, r19
    3218:	aa 27       	eor	r26, r26
    321a:	f0 0d       	add	r31, r0
    321c:	b1 1d       	adc	r27, r1
    321e:	aa 1f       	adc	r26, r26
    3220:	64 9f       	mul	r22, r20
    3222:	66 27       	eor	r22, r22
    3224:	b0 0d       	add	r27, r0
    3226:	a1 1d       	adc	r26, r1
    3228:	66 1f       	adc	r22, r22
    322a:	82 9f       	mul	r24, r18
    322c:	22 27       	eor	r18, r18
    322e:	b0 0d       	add	r27, r0
    3230:	a1 1d       	adc	r26, r1
    3232:	62 1f       	adc	r22, r18
    3234:	73 9f       	mul	r23, r19
    3236:	b0 0d       	add	r27, r0
    3238:	a1 1d       	adc	r26, r1
    323a:	62 1f       	adc	r22, r18
    323c:	83 9f       	mul	r24, r19
    323e:	a0 0d       	add	r26, r0
    3240:	61 1d       	adc	r22, r1
    3242:	22 1f       	adc	r18, r18
    3244:	74 9f       	mul	r23, r20
    3246:	33 27       	eor	r19, r19
    3248:	a0 0d       	add	r26, r0
    324a:	61 1d       	adc	r22, r1
    324c:	23 1f       	adc	r18, r19
    324e:	84 9f       	mul	r24, r20
    3250:	60 0d       	add	r22, r0
    3252:	21 1d       	adc	r18, r1
    3254:	82 2f       	mov	r24, r18
    3256:	76 2f       	mov	r23, r22
    3258:	6a 2f       	mov	r22, r26
    325a:	11 24       	eor	r1, r1
    325c:	9f 57       	subi	r25, 0x7F	; 127
    325e:	50 40       	sbci	r21, 0x00	; 0
    3260:	8a f0       	brmi	.+34     	; 0x3284 <__mulsf3_pse+0x84>
    3262:	e1 f0       	breq	.+56     	; 0x329c <__mulsf3_pse+0x9c>
    3264:	88 23       	and	r24, r24
    3266:	4a f0       	brmi	.+18     	; 0x327a <__mulsf3_pse+0x7a>
    3268:	ee 0f       	add	r30, r30
    326a:	ff 1f       	adc	r31, r31
    326c:	bb 1f       	adc	r27, r27
    326e:	66 1f       	adc	r22, r22
    3270:	77 1f       	adc	r23, r23
    3272:	88 1f       	adc	r24, r24
    3274:	91 50       	subi	r25, 0x01	; 1
    3276:	50 40       	sbci	r21, 0x00	; 0
    3278:	a9 f7       	brne	.-22     	; 0x3264 <__mulsf3_pse+0x64>
    327a:	9e 3f       	cpi	r25, 0xFE	; 254
    327c:	51 05       	cpc	r21, r1
    327e:	70 f0       	brcs	.+28     	; 0x329c <__mulsf3_pse+0x9c>
    3280:	60 cf       	rjmp	.-320    	; 0x3142 <__fp_inf>
    3282:	aa cf       	rjmp	.-172    	; 0x31d8 <__fp_szero>
    3284:	5f 3f       	cpi	r21, 0xFF	; 255
    3286:	ec f3       	brlt	.-6      	; 0x3282 <__mulsf3_pse+0x82>
    3288:	98 3e       	cpi	r25, 0xE8	; 232
    328a:	dc f3       	brlt	.-10     	; 0x3282 <__mulsf3_pse+0x82>
    328c:	86 95       	lsr	r24
    328e:	77 95       	ror	r23
    3290:	67 95       	ror	r22
    3292:	b7 95       	ror	r27
    3294:	f7 95       	ror	r31
    3296:	e7 95       	ror	r30
    3298:	9f 5f       	subi	r25, 0xFF	; 255
    329a:	c1 f7       	brne	.-16     	; 0x328c <__mulsf3_pse+0x8c>
    329c:	fe 2b       	or	r31, r30
    329e:	88 0f       	add	r24, r24
    32a0:	91 1d       	adc	r25, r1
    32a2:	96 95       	lsr	r25
    32a4:	87 95       	ror	r24
    32a6:	97 f9       	bld	r25, 7
    32a8:	08 95       	ret

000032aa <__udivmodsi4>:
    32aa:	a1 e2       	ldi	r26, 0x21	; 33
    32ac:	1a 2e       	mov	r1, r26
    32ae:	aa 1b       	sub	r26, r26
    32b0:	bb 1b       	sub	r27, r27
    32b2:	fd 01       	movw	r30, r26
    32b4:	0d c0       	rjmp	.+26     	; 0x32d0 <__udivmodsi4_ep>

000032b6 <__udivmodsi4_loop>:
    32b6:	aa 1f       	adc	r26, r26
    32b8:	bb 1f       	adc	r27, r27
    32ba:	ee 1f       	adc	r30, r30
    32bc:	ff 1f       	adc	r31, r31
    32be:	a2 17       	cp	r26, r18
    32c0:	b3 07       	cpc	r27, r19
    32c2:	e4 07       	cpc	r30, r20
    32c4:	f5 07       	cpc	r31, r21
    32c6:	20 f0       	brcs	.+8      	; 0x32d0 <__udivmodsi4_ep>
    32c8:	a2 1b       	sub	r26, r18
    32ca:	b3 0b       	sbc	r27, r19
    32cc:	e4 0b       	sbc	r30, r20
    32ce:	f5 0b       	sbc	r31, r21

000032d0 <__udivmodsi4_ep>:
    32d0:	66 1f       	adc	r22, r22
    32d2:	77 1f       	adc	r23, r23
    32d4:	88 1f       	adc	r24, r24
    32d6:	99 1f       	adc	r25, r25
    32d8:	1a 94       	dec	r1
    32da:	69 f7       	brne	.-38     	; 0x32b6 <__udivmodsi4_loop>
    32dc:	60 95       	com	r22
    32de:	70 95       	com	r23
    32e0:	80 95       	com	r24
    32e2:	90 95       	com	r25
    32e4:	9b 01       	movw	r18, r22
    32e6:	ac 01       	movw	r20, r24
    32e8:	bd 01       	movw	r22, r26
    32ea:	cf 01       	movw	r24, r30
    32ec:	08 95       	ret

000032ee <__tablejump2__>:
    32ee:	ee 0f       	add	r30, r30
    32f0:	ff 1f       	adc	r31, r31
    32f2:	88 1f       	adc	r24, r24
    32f4:	8b bf       	out	0x3b, r24	; 59
    32f6:	07 90       	elpm	r0, Z+
    32f8:	f6 91       	elpm	r31, Z
    32fa:	e0 2d       	mov	r30, r0
    32fc:	19 94       	eijmp

000032fe <calloc>:
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	86 9f       	mul	r24, r22
    3308:	80 01       	movw	r16, r0
    330a:	87 9f       	mul	r24, r23
    330c:	10 0d       	add	r17, r0
    330e:	96 9f       	mul	r25, r22
    3310:	10 0d       	add	r17, r0
    3312:	11 24       	eor	r1, r1
    3314:	c8 01       	movw	r24, r16
    3316:	0d d0       	rcall	.+26     	; 0x3332 <malloc>
    3318:	ec 01       	movw	r28, r24
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	21 f0       	breq	.+8      	; 0x3326 <calloc+0x28>
    331e:	a8 01       	movw	r20, r16
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	70 e0       	ldi	r23, 0x00	; 0
    3324:	34 d1       	rcall	.+616    	; 0x358e <memset>
    3326:	ce 01       	movw	r24, r28
    3328:	df 91       	pop	r29
    332a:	cf 91       	pop	r28
    332c:	1f 91       	pop	r17
    332e:	0f 91       	pop	r16
    3330:	08 95       	ret

00003332 <malloc>:
    3332:	0f 93       	push	r16
    3334:	1f 93       	push	r17
    3336:	cf 93       	push	r28
    3338:	df 93       	push	r29
    333a:	82 30       	cpi	r24, 0x02	; 2
    333c:	91 05       	cpc	r25, r1
    333e:	10 f4       	brcc	.+4      	; 0x3344 <malloc+0x12>
    3340:	82 e0       	ldi	r24, 0x02	; 2
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	e0 91 79 0d 	lds	r30, 0x0D79	; 0x800d79 <__flp>
    3348:	f0 91 7a 0d 	lds	r31, 0x0D7A	; 0x800d7a <__flp+0x1>
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	30 97       	sbiw	r30, 0x00	; 0
    3356:	19 f1       	breq	.+70     	; 0x339e <malloc+0x6c>
    3358:	40 81       	ld	r20, Z
    335a:	51 81       	ldd	r21, Z+1	; 0x01
    335c:	02 81       	ldd	r16, Z+2	; 0x02
    335e:	13 81       	ldd	r17, Z+3	; 0x03
    3360:	48 17       	cp	r20, r24
    3362:	59 07       	cpc	r21, r25
    3364:	c8 f0       	brcs	.+50     	; 0x3398 <malloc+0x66>
    3366:	84 17       	cp	r24, r20
    3368:	95 07       	cpc	r25, r21
    336a:	69 f4       	brne	.+26     	; 0x3386 <malloc+0x54>
    336c:	10 97       	sbiw	r26, 0x00	; 0
    336e:	31 f0       	breq	.+12     	; 0x337c <malloc+0x4a>
    3370:	12 96       	adiw	r26, 0x02	; 2
    3372:	0c 93       	st	X, r16
    3374:	12 97       	sbiw	r26, 0x02	; 2
    3376:	13 96       	adiw	r26, 0x03	; 3
    3378:	1c 93       	st	X, r17
    337a:	27 c0       	rjmp	.+78     	; 0x33ca <malloc+0x98>
    337c:	00 93 79 0d 	sts	0x0D79, r16	; 0x800d79 <__flp>
    3380:	10 93 7a 0d 	sts	0x0D7A, r17	; 0x800d7a <__flp+0x1>
    3384:	22 c0       	rjmp	.+68     	; 0x33ca <malloc+0x98>
    3386:	21 15       	cp	r18, r1
    3388:	31 05       	cpc	r19, r1
    338a:	19 f0       	breq	.+6      	; 0x3392 <malloc+0x60>
    338c:	42 17       	cp	r20, r18
    338e:	53 07       	cpc	r21, r19
    3390:	18 f4       	brcc	.+6      	; 0x3398 <malloc+0x66>
    3392:	9a 01       	movw	r18, r20
    3394:	bd 01       	movw	r22, r26
    3396:	ef 01       	movw	r28, r30
    3398:	df 01       	movw	r26, r30
    339a:	f8 01       	movw	r30, r16
    339c:	db cf       	rjmp	.-74     	; 0x3354 <malloc+0x22>
    339e:	21 15       	cp	r18, r1
    33a0:	31 05       	cpc	r19, r1
    33a2:	f9 f0       	breq	.+62     	; 0x33e2 <malloc+0xb0>
    33a4:	28 1b       	sub	r18, r24
    33a6:	39 0b       	sbc	r19, r25
    33a8:	24 30       	cpi	r18, 0x04	; 4
    33aa:	31 05       	cpc	r19, r1
    33ac:	80 f4       	brcc	.+32     	; 0x33ce <malloc+0x9c>
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	9b 81       	ldd	r25, Y+3	; 0x03
    33b2:	61 15       	cp	r22, r1
    33b4:	71 05       	cpc	r23, r1
    33b6:	21 f0       	breq	.+8      	; 0x33c0 <malloc+0x8e>
    33b8:	fb 01       	movw	r30, r22
    33ba:	93 83       	std	Z+3, r25	; 0x03
    33bc:	82 83       	std	Z+2, r24	; 0x02
    33be:	04 c0       	rjmp	.+8      	; 0x33c8 <malloc+0x96>
    33c0:	90 93 7a 0d 	sts	0x0D7A, r25	; 0x800d7a <__flp+0x1>
    33c4:	80 93 79 0d 	sts	0x0D79, r24	; 0x800d79 <__flp>
    33c8:	fe 01       	movw	r30, r28
    33ca:	32 96       	adiw	r30, 0x02	; 2
    33cc:	44 c0       	rjmp	.+136    	; 0x3456 <malloc+0x124>
    33ce:	fe 01       	movw	r30, r28
    33d0:	e2 0f       	add	r30, r18
    33d2:	f3 1f       	adc	r31, r19
    33d4:	81 93       	st	Z+, r24
    33d6:	91 93       	st	Z+, r25
    33d8:	22 50       	subi	r18, 0x02	; 2
    33da:	31 09       	sbc	r19, r1
    33dc:	39 83       	std	Y+1, r19	; 0x01
    33de:	28 83       	st	Y, r18
    33e0:	3a c0       	rjmp	.+116    	; 0x3456 <malloc+0x124>
    33e2:	20 91 77 0d 	lds	r18, 0x0D77	; 0x800d77 <__brkval>
    33e6:	30 91 78 0d 	lds	r19, 0x0D78	; 0x800d78 <__brkval+0x1>
    33ea:	23 2b       	or	r18, r19
    33ec:	41 f4       	brne	.+16     	; 0x33fe <malloc+0xcc>
    33ee:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    33f2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    33f6:	30 93 78 0d 	sts	0x0D78, r19	; 0x800d78 <__brkval+0x1>
    33fa:	20 93 77 0d 	sts	0x0D77, r18	; 0x800d77 <__brkval>
    33fe:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3402:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3406:	21 15       	cp	r18, r1
    3408:	31 05       	cpc	r19, r1
    340a:	41 f4       	brne	.+16     	; 0x341c <malloc+0xea>
    340c:	2d b7       	in	r18, 0x3d	; 61
    340e:	3e b7       	in	r19, 0x3e	; 62
    3410:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3414:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3418:	24 1b       	sub	r18, r20
    341a:	35 0b       	sbc	r19, r21
    341c:	e0 91 77 0d 	lds	r30, 0x0D77	; 0x800d77 <__brkval>
    3420:	f0 91 78 0d 	lds	r31, 0x0D78	; 0x800d78 <__brkval+0x1>
    3424:	e2 17       	cp	r30, r18
    3426:	f3 07       	cpc	r31, r19
    3428:	a0 f4       	brcc	.+40     	; 0x3452 <malloc+0x120>
    342a:	2e 1b       	sub	r18, r30
    342c:	3f 0b       	sbc	r19, r31
    342e:	28 17       	cp	r18, r24
    3430:	39 07       	cpc	r19, r25
    3432:	78 f0       	brcs	.+30     	; 0x3452 <malloc+0x120>
    3434:	ac 01       	movw	r20, r24
    3436:	4e 5f       	subi	r20, 0xFE	; 254
    3438:	5f 4f       	sbci	r21, 0xFF	; 255
    343a:	24 17       	cp	r18, r20
    343c:	35 07       	cpc	r19, r21
    343e:	48 f0       	brcs	.+18     	; 0x3452 <malloc+0x120>
    3440:	4e 0f       	add	r20, r30
    3442:	5f 1f       	adc	r21, r31
    3444:	50 93 78 0d 	sts	0x0D78, r21	; 0x800d78 <__brkval+0x1>
    3448:	40 93 77 0d 	sts	0x0D77, r20	; 0x800d77 <__brkval>
    344c:	81 93       	st	Z+, r24
    344e:	91 93       	st	Z+, r25
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <malloc+0x124>
    3452:	e0 e0       	ldi	r30, 0x00	; 0
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	cf 01       	movw	r24, r30
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	08 95       	ret

00003462 <free>:
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	09 f4       	brne	.+2      	; 0x346c <free+0xa>
    346a:	81 c0       	rjmp	.+258    	; 0x356e <free+0x10c>
    346c:	fc 01       	movw	r30, r24
    346e:	32 97       	sbiw	r30, 0x02	; 2
    3470:	13 82       	std	Z+3, r1	; 0x03
    3472:	12 82       	std	Z+2, r1	; 0x02
    3474:	a0 91 79 0d 	lds	r26, 0x0D79	; 0x800d79 <__flp>
    3478:	b0 91 7a 0d 	lds	r27, 0x0D7A	; 0x800d7a <__flp+0x1>
    347c:	10 97       	sbiw	r26, 0x00	; 0
    347e:	81 f4       	brne	.+32     	; 0x34a0 <free+0x3e>
    3480:	20 81       	ld	r18, Z
    3482:	31 81       	ldd	r19, Z+1	; 0x01
    3484:	82 0f       	add	r24, r18
    3486:	93 1f       	adc	r25, r19
    3488:	20 91 77 0d 	lds	r18, 0x0D77	; 0x800d77 <__brkval>
    348c:	30 91 78 0d 	lds	r19, 0x0D78	; 0x800d78 <__brkval+0x1>
    3490:	28 17       	cp	r18, r24
    3492:	39 07       	cpc	r19, r25
    3494:	51 f5       	brne	.+84     	; 0x34ea <free+0x88>
    3496:	f0 93 78 0d 	sts	0x0D78, r31	; 0x800d78 <__brkval+0x1>
    349a:	e0 93 77 0d 	sts	0x0D77, r30	; 0x800d77 <__brkval>
    349e:	67 c0       	rjmp	.+206    	; 0x356e <free+0x10c>
    34a0:	ed 01       	movw	r28, r26
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	ce 17       	cp	r28, r30
    34a8:	df 07       	cpc	r29, r31
    34aa:	40 f4       	brcc	.+16     	; 0x34bc <free+0x5a>
    34ac:	4a 81       	ldd	r20, Y+2	; 0x02
    34ae:	5b 81       	ldd	r21, Y+3	; 0x03
    34b0:	9e 01       	movw	r18, r28
    34b2:	41 15       	cp	r20, r1
    34b4:	51 05       	cpc	r21, r1
    34b6:	f1 f0       	breq	.+60     	; 0x34f4 <free+0x92>
    34b8:	ea 01       	movw	r28, r20
    34ba:	f5 cf       	rjmp	.-22     	; 0x34a6 <free+0x44>
    34bc:	d3 83       	std	Z+3, r29	; 0x03
    34be:	c2 83       	std	Z+2, r28	; 0x02
    34c0:	40 81       	ld	r20, Z
    34c2:	51 81       	ldd	r21, Z+1	; 0x01
    34c4:	84 0f       	add	r24, r20
    34c6:	95 1f       	adc	r25, r21
    34c8:	c8 17       	cp	r28, r24
    34ca:	d9 07       	cpc	r29, r25
    34cc:	59 f4       	brne	.+22     	; 0x34e4 <free+0x82>
    34ce:	88 81       	ld	r24, Y
    34d0:	99 81       	ldd	r25, Y+1	; 0x01
    34d2:	84 0f       	add	r24, r20
    34d4:	95 1f       	adc	r25, r21
    34d6:	02 96       	adiw	r24, 0x02	; 2
    34d8:	91 83       	std	Z+1, r25	; 0x01
    34da:	80 83       	st	Z, r24
    34dc:	8a 81       	ldd	r24, Y+2	; 0x02
    34de:	9b 81       	ldd	r25, Y+3	; 0x03
    34e0:	93 83       	std	Z+3, r25	; 0x03
    34e2:	82 83       	std	Z+2, r24	; 0x02
    34e4:	21 15       	cp	r18, r1
    34e6:	31 05       	cpc	r19, r1
    34e8:	29 f4       	brne	.+10     	; 0x34f4 <free+0x92>
    34ea:	f0 93 7a 0d 	sts	0x0D7A, r31	; 0x800d7a <__flp+0x1>
    34ee:	e0 93 79 0d 	sts	0x0D79, r30	; 0x800d79 <__flp>
    34f2:	3d c0       	rjmp	.+122    	; 0x356e <free+0x10c>
    34f4:	e9 01       	movw	r28, r18
    34f6:	fb 83       	std	Y+3, r31	; 0x03
    34f8:	ea 83       	std	Y+2, r30	; 0x02
    34fa:	49 91       	ld	r20, Y+
    34fc:	59 91       	ld	r21, Y+
    34fe:	c4 0f       	add	r28, r20
    3500:	d5 1f       	adc	r29, r21
    3502:	ec 17       	cp	r30, r28
    3504:	fd 07       	cpc	r31, r29
    3506:	61 f4       	brne	.+24     	; 0x3520 <free+0xbe>
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	84 0f       	add	r24, r20
    350e:	95 1f       	adc	r25, r21
    3510:	02 96       	adiw	r24, 0x02	; 2
    3512:	e9 01       	movw	r28, r18
    3514:	99 83       	std	Y+1, r25	; 0x01
    3516:	88 83       	st	Y, r24
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	93 81       	ldd	r25, Z+3	; 0x03
    351c:	9b 83       	std	Y+3, r25	; 0x03
    351e:	8a 83       	std	Y+2, r24	; 0x02
    3520:	e0 e0       	ldi	r30, 0x00	; 0
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	12 96       	adiw	r26, 0x02	; 2
    3526:	8d 91       	ld	r24, X+
    3528:	9c 91       	ld	r25, X
    352a:	13 97       	sbiw	r26, 0x03	; 3
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	19 f0       	breq	.+6      	; 0x3536 <free+0xd4>
    3530:	fd 01       	movw	r30, r26
    3532:	dc 01       	movw	r26, r24
    3534:	f7 cf       	rjmp	.-18     	; 0x3524 <free+0xc2>
    3536:	8d 91       	ld	r24, X+
    3538:	9c 91       	ld	r25, X
    353a:	11 97       	sbiw	r26, 0x01	; 1
    353c:	9d 01       	movw	r18, r26
    353e:	2e 5f       	subi	r18, 0xFE	; 254
    3540:	3f 4f       	sbci	r19, 0xFF	; 255
    3542:	82 0f       	add	r24, r18
    3544:	93 1f       	adc	r25, r19
    3546:	20 91 77 0d 	lds	r18, 0x0D77	; 0x800d77 <__brkval>
    354a:	30 91 78 0d 	lds	r19, 0x0D78	; 0x800d78 <__brkval+0x1>
    354e:	28 17       	cp	r18, r24
    3550:	39 07       	cpc	r19, r25
    3552:	69 f4       	brne	.+26     	; 0x356e <free+0x10c>
    3554:	30 97       	sbiw	r30, 0x00	; 0
    3556:	29 f4       	brne	.+10     	; 0x3562 <free+0x100>
    3558:	10 92 7a 0d 	sts	0x0D7A, r1	; 0x800d7a <__flp+0x1>
    355c:	10 92 79 0d 	sts	0x0D79, r1	; 0x800d79 <__flp>
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <free+0x104>
    3562:	13 82       	std	Z+3, r1	; 0x03
    3564:	12 82       	std	Z+2, r1	; 0x02
    3566:	b0 93 78 0d 	sts	0x0D78, r27	; 0x800d78 <__brkval+0x1>
    356a:	a0 93 77 0d 	sts	0x0D77, r26	; 0x800d77 <__brkval>
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	08 95       	ret

00003574 <abort>:
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	f8 94       	cli
    357a:	00 c3       	rjmp	.+1536   	; 0x3b7c <_exit>

0000357c <memcpy>:
    357c:	fb 01       	movw	r30, r22
    357e:	dc 01       	movw	r26, r24
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <memcpy+0xa>
    3582:	01 90       	ld	r0, Z+
    3584:	0d 92       	st	X+, r0
    3586:	41 50       	subi	r20, 0x01	; 1
    3588:	50 40       	sbci	r21, 0x00	; 0
    358a:	d8 f7       	brcc	.-10     	; 0x3582 <memcpy+0x6>
    358c:	08 95       	ret

0000358e <memset>:
    358e:	dc 01       	movw	r26, r24
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <memset+0x6>
    3592:	6d 93       	st	X+, r22
    3594:	41 50       	subi	r20, 0x01	; 1
    3596:	50 40       	sbci	r21, 0x00	; 0
    3598:	e0 f7       	brcc	.-8      	; 0x3592 <memset+0x4>
    359a:	08 95       	ret

0000359c <printf>:
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	ae 01       	movw	r20, r28
    35a6:	4a 5f       	subi	r20, 0xFA	; 250
    35a8:	5f 4f       	sbci	r21, 0xFF	; 255
    35aa:	fa 01       	movw	r30, r20
    35ac:	61 91       	ld	r22, Z+
    35ae:	71 91       	ld	r23, Z+
    35b0:	af 01       	movw	r20, r30
    35b2:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <__iob+0x2>
    35b6:	90 91 7e 0d 	lds	r25, 0x0D7E	; 0x800d7e <__iob+0x3>
    35ba:	33 d0       	rcall	.+102    	; 0x3622 <vfprintf>
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	08 95       	ret

000035c2 <puts>:
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	e0 91 7d 0d 	lds	r30, 0x0D7D	; 0x800d7d <__iob+0x2>
    35ce:	f0 91 7e 0d 	lds	r31, 0x0D7E	; 0x800d7e <__iob+0x3>
    35d2:	23 81       	ldd	r18, Z+3	; 0x03
    35d4:	21 ff       	sbrs	r18, 1
    35d6:	1b c0       	rjmp	.+54     	; 0x360e <puts+0x4c>
    35d8:	8c 01       	movw	r16, r24
    35da:	d0 e0       	ldi	r29, 0x00	; 0
    35dc:	c0 e0       	ldi	r28, 0x00	; 0
    35de:	f8 01       	movw	r30, r16
    35e0:	81 91       	ld	r24, Z+
    35e2:	8f 01       	movw	r16, r30
    35e4:	60 91 7d 0d 	lds	r22, 0x0D7D	; 0x800d7d <__iob+0x2>
    35e8:	70 91 7e 0d 	lds	r23, 0x0D7E	; 0x800d7e <__iob+0x3>
    35ec:	db 01       	movw	r26, r22
    35ee:	18 96       	adiw	r26, 0x08	; 8
    35f0:	ed 91       	ld	r30, X+
    35f2:	fc 91       	ld	r31, X
    35f4:	19 97       	sbiw	r26, 0x09	; 9
    35f6:	88 23       	and	r24, r24
    35f8:	31 f0       	breq	.+12     	; 0x3606 <puts+0x44>
    35fa:	19 95       	eicall
    35fc:	89 2b       	or	r24, r25
    35fe:	79 f3       	breq	.-34     	; 0x35de <puts+0x1c>
    3600:	df ef       	ldi	r29, 0xFF	; 255
    3602:	cf ef       	ldi	r28, 0xFF	; 255
    3604:	ec cf       	rjmp	.-40     	; 0x35de <puts+0x1c>
    3606:	8a e0       	ldi	r24, 0x0A	; 10
    3608:	19 95       	eicall
    360a:	89 2b       	or	r24, r25
    360c:	19 f0       	breq	.+6      	; 0x3614 <puts+0x52>
    360e:	8f ef       	ldi	r24, 0xFF	; 255
    3610:	9f ef       	ldi	r25, 0xFF	; 255
    3612:	02 c0       	rjmp	.+4      	; 0x3618 <puts+0x56>
    3614:	8d 2f       	mov	r24, r29
    3616:	9c 2f       	mov	r25, r28
    3618:	df 91       	pop	r29
    361a:	cf 91       	pop	r28
    361c:	1f 91       	pop	r17
    361e:	0f 91       	pop	r16
    3620:	08 95       	ret

00003622 <vfprintf>:
    3622:	2f 92       	push	r2
    3624:	3f 92       	push	r3
    3626:	4f 92       	push	r4
    3628:	5f 92       	push	r5
    362a:	6f 92       	push	r6
    362c:	7f 92       	push	r7
    362e:	8f 92       	push	r8
    3630:	9f 92       	push	r9
    3632:	af 92       	push	r10
    3634:	bf 92       	push	r11
    3636:	cf 92       	push	r12
    3638:	df 92       	push	r13
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	2b 97       	sbiw	r28, 0x0b	; 11
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	6c 01       	movw	r12, r24
    3658:	7b 01       	movw	r14, r22
    365a:	8a 01       	movw	r16, r20
    365c:	fc 01       	movw	r30, r24
    365e:	17 82       	std	Z+7, r1	; 0x07
    3660:	16 82       	std	Z+6, r1	; 0x06
    3662:	83 81       	ldd	r24, Z+3	; 0x03
    3664:	81 ff       	sbrs	r24, 1
    3666:	bf c1       	rjmp	.+894    	; 0x39e6 <vfprintf+0x3c4>
    3668:	ce 01       	movw	r24, r28
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	3c 01       	movw	r6, r24
    366e:	f6 01       	movw	r30, r12
    3670:	93 81       	ldd	r25, Z+3	; 0x03
    3672:	f7 01       	movw	r30, r14
    3674:	93 fd       	sbrc	r25, 3
    3676:	85 91       	lpm	r24, Z+
    3678:	93 ff       	sbrs	r25, 3
    367a:	81 91       	ld	r24, Z+
    367c:	7f 01       	movw	r14, r30
    367e:	88 23       	and	r24, r24
    3680:	09 f4       	brne	.+2      	; 0x3684 <vfprintf+0x62>
    3682:	ad c1       	rjmp	.+858    	; 0x39de <vfprintf+0x3bc>
    3684:	85 32       	cpi	r24, 0x25	; 37
    3686:	39 f4       	brne	.+14     	; 0x3696 <vfprintf+0x74>
    3688:	93 fd       	sbrc	r25, 3
    368a:	85 91       	lpm	r24, Z+
    368c:	93 ff       	sbrs	r25, 3
    368e:	81 91       	ld	r24, Z+
    3690:	7f 01       	movw	r14, r30
    3692:	85 32       	cpi	r24, 0x25	; 37
    3694:	21 f4       	brne	.+8      	; 0x369e <vfprintf+0x7c>
    3696:	b6 01       	movw	r22, r12
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	d6 d1       	rcall	.+940    	; 0x3a48 <fputc>
    369c:	e8 cf       	rjmp	.-48     	; 0x366e <vfprintf+0x4c>
    369e:	91 2c       	mov	r9, r1
    36a0:	21 2c       	mov	r2, r1
    36a2:	31 2c       	mov	r3, r1
    36a4:	ff e1       	ldi	r31, 0x1F	; 31
    36a6:	f3 15       	cp	r31, r3
    36a8:	d8 f0       	brcs	.+54     	; 0x36e0 <vfprintf+0xbe>
    36aa:	8b 32       	cpi	r24, 0x2B	; 43
    36ac:	79 f0       	breq	.+30     	; 0x36cc <vfprintf+0xaa>
    36ae:	38 f4       	brcc	.+14     	; 0x36be <vfprintf+0x9c>
    36b0:	80 32       	cpi	r24, 0x20	; 32
    36b2:	79 f0       	breq	.+30     	; 0x36d2 <vfprintf+0xb0>
    36b4:	83 32       	cpi	r24, 0x23	; 35
    36b6:	a1 f4       	brne	.+40     	; 0x36e0 <vfprintf+0xbe>
    36b8:	23 2d       	mov	r18, r3
    36ba:	20 61       	ori	r18, 0x10	; 16
    36bc:	1d c0       	rjmp	.+58     	; 0x36f8 <vfprintf+0xd6>
    36be:	8d 32       	cpi	r24, 0x2D	; 45
    36c0:	61 f0       	breq	.+24     	; 0x36da <vfprintf+0xb8>
    36c2:	80 33       	cpi	r24, 0x30	; 48
    36c4:	69 f4       	brne	.+26     	; 0x36e0 <vfprintf+0xbe>
    36c6:	23 2d       	mov	r18, r3
    36c8:	21 60       	ori	r18, 0x01	; 1
    36ca:	16 c0       	rjmp	.+44     	; 0x36f8 <vfprintf+0xd6>
    36cc:	83 2d       	mov	r24, r3
    36ce:	82 60       	ori	r24, 0x02	; 2
    36d0:	38 2e       	mov	r3, r24
    36d2:	e3 2d       	mov	r30, r3
    36d4:	e4 60       	ori	r30, 0x04	; 4
    36d6:	3e 2e       	mov	r3, r30
    36d8:	2a c0       	rjmp	.+84     	; 0x372e <vfprintf+0x10c>
    36da:	f3 2d       	mov	r31, r3
    36dc:	f8 60       	ori	r31, 0x08	; 8
    36de:	1d c0       	rjmp	.+58     	; 0x371a <vfprintf+0xf8>
    36e0:	37 fc       	sbrc	r3, 7
    36e2:	2d c0       	rjmp	.+90     	; 0x373e <vfprintf+0x11c>
    36e4:	20 ed       	ldi	r18, 0xD0	; 208
    36e6:	28 0f       	add	r18, r24
    36e8:	2a 30       	cpi	r18, 0x0A	; 10
    36ea:	40 f0       	brcs	.+16     	; 0x36fc <vfprintf+0xda>
    36ec:	8e 32       	cpi	r24, 0x2E	; 46
    36ee:	b9 f4       	brne	.+46     	; 0x371e <vfprintf+0xfc>
    36f0:	36 fc       	sbrc	r3, 6
    36f2:	75 c1       	rjmp	.+746    	; 0x39de <vfprintf+0x3bc>
    36f4:	23 2d       	mov	r18, r3
    36f6:	20 64       	ori	r18, 0x40	; 64
    36f8:	32 2e       	mov	r3, r18
    36fa:	19 c0       	rjmp	.+50     	; 0x372e <vfprintf+0x10c>
    36fc:	36 fe       	sbrs	r3, 6
    36fe:	06 c0       	rjmp	.+12     	; 0x370c <vfprintf+0xea>
    3700:	8a e0       	ldi	r24, 0x0A	; 10
    3702:	98 9e       	mul	r9, r24
    3704:	20 0d       	add	r18, r0
    3706:	11 24       	eor	r1, r1
    3708:	92 2e       	mov	r9, r18
    370a:	11 c0       	rjmp	.+34     	; 0x372e <vfprintf+0x10c>
    370c:	ea e0       	ldi	r30, 0x0A	; 10
    370e:	2e 9e       	mul	r2, r30
    3710:	20 0d       	add	r18, r0
    3712:	11 24       	eor	r1, r1
    3714:	22 2e       	mov	r2, r18
    3716:	f3 2d       	mov	r31, r3
    3718:	f0 62       	ori	r31, 0x20	; 32
    371a:	3f 2e       	mov	r3, r31
    371c:	08 c0       	rjmp	.+16     	; 0x372e <vfprintf+0x10c>
    371e:	8c 36       	cpi	r24, 0x6C	; 108
    3720:	21 f4       	brne	.+8      	; 0x372a <vfprintf+0x108>
    3722:	83 2d       	mov	r24, r3
    3724:	80 68       	ori	r24, 0x80	; 128
    3726:	38 2e       	mov	r3, r24
    3728:	02 c0       	rjmp	.+4      	; 0x372e <vfprintf+0x10c>
    372a:	88 36       	cpi	r24, 0x68	; 104
    372c:	41 f4       	brne	.+16     	; 0x373e <vfprintf+0x11c>
    372e:	f7 01       	movw	r30, r14
    3730:	93 fd       	sbrc	r25, 3
    3732:	85 91       	lpm	r24, Z+
    3734:	93 ff       	sbrs	r25, 3
    3736:	81 91       	ld	r24, Z+
    3738:	7f 01       	movw	r14, r30
    373a:	81 11       	cpse	r24, r1
    373c:	b3 cf       	rjmp	.-154    	; 0x36a4 <vfprintf+0x82>
    373e:	98 2f       	mov	r25, r24
    3740:	9f 7d       	andi	r25, 0xDF	; 223
    3742:	95 54       	subi	r25, 0x45	; 69
    3744:	93 30       	cpi	r25, 0x03	; 3
    3746:	28 f4       	brcc	.+10     	; 0x3752 <vfprintf+0x130>
    3748:	0c 5f       	subi	r16, 0xFC	; 252
    374a:	1f 4f       	sbci	r17, 0xFF	; 255
    374c:	9f e3       	ldi	r25, 0x3F	; 63
    374e:	99 83       	std	Y+1, r25	; 0x01
    3750:	0d c0       	rjmp	.+26     	; 0x376c <vfprintf+0x14a>
    3752:	83 36       	cpi	r24, 0x63	; 99
    3754:	31 f0       	breq	.+12     	; 0x3762 <vfprintf+0x140>
    3756:	83 37       	cpi	r24, 0x73	; 115
    3758:	71 f0       	breq	.+28     	; 0x3776 <vfprintf+0x154>
    375a:	83 35       	cpi	r24, 0x53	; 83
    375c:	09 f0       	breq	.+2      	; 0x3760 <vfprintf+0x13e>
    375e:	55 c0       	rjmp	.+170    	; 0x380a <vfprintf+0x1e8>
    3760:	20 c0       	rjmp	.+64     	; 0x37a2 <vfprintf+0x180>
    3762:	f8 01       	movw	r30, r16
    3764:	80 81       	ld	r24, Z
    3766:	89 83       	std	Y+1, r24	; 0x01
    3768:	0e 5f       	subi	r16, 0xFE	; 254
    376a:	1f 4f       	sbci	r17, 0xFF	; 255
    376c:	88 24       	eor	r8, r8
    376e:	83 94       	inc	r8
    3770:	91 2c       	mov	r9, r1
    3772:	53 01       	movw	r10, r6
    3774:	12 c0       	rjmp	.+36     	; 0x379a <vfprintf+0x178>
    3776:	28 01       	movw	r4, r16
    3778:	f2 e0       	ldi	r31, 0x02	; 2
    377a:	4f 0e       	add	r4, r31
    377c:	51 1c       	adc	r5, r1
    377e:	f8 01       	movw	r30, r16
    3780:	a0 80       	ld	r10, Z
    3782:	b1 80       	ldd	r11, Z+1	; 0x01
    3784:	36 fe       	sbrs	r3, 6
    3786:	03 c0       	rjmp	.+6      	; 0x378e <vfprintf+0x16c>
    3788:	69 2d       	mov	r22, r9
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	02 c0       	rjmp	.+4      	; 0x3792 <vfprintf+0x170>
    378e:	6f ef       	ldi	r22, 0xFF	; 255
    3790:	7f ef       	ldi	r23, 0xFF	; 255
    3792:	c5 01       	movw	r24, r10
    3794:	4e d1       	rcall	.+668    	; 0x3a32 <strnlen>
    3796:	4c 01       	movw	r8, r24
    3798:	82 01       	movw	r16, r4
    379a:	f3 2d       	mov	r31, r3
    379c:	ff 77       	andi	r31, 0x7F	; 127
    379e:	3f 2e       	mov	r3, r31
    37a0:	15 c0       	rjmp	.+42     	; 0x37cc <vfprintf+0x1aa>
    37a2:	28 01       	movw	r4, r16
    37a4:	22 e0       	ldi	r18, 0x02	; 2
    37a6:	42 0e       	add	r4, r18
    37a8:	51 1c       	adc	r5, r1
    37aa:	f8 01       	movw	r30, r16
    37ac:	a0 80       	ld	r10, Z
    37ae:	b1 80       	ldd	r11, Z+1	; 0x01
    37b0:	36 fe       	sbrs	r3, 6
    37b2:	03 c0       	rjmp	.+6      	; 0x37ba <vfprintf+0x198>
    37b4:	69 2d       	mov	r22, r9
    37b6:	70 e0       	ldi	r23, 0x00	; 0
    37b8:	02 c0       	rjmp	.+4      	; 0x37be <vfprintf+0x19c>
    37ba:	6f ef       	ldi	r22, 0xFF	; 255
    37bc:	7f ef       	ldi	r23, 0xFF	; 255
    37be:	c5 01       	movw	r24, r10
    37c0:	2d d1       	rcall	.+602    	; 0x3a1c <strnlen_P>
    37c2:	4c 01       	movw	r8, r24
    37c4:	f3 2d       	mov	r31, r3
    37c6:	f0 68       	ori	r31, 0x80	; 128
    37c8:	3f 2e       	mov	r3, r31
    37ca:	82 01       	movw	r16, r4
    37cc:	33 fc       	sbrc	r3, 3
    37ce:	19 c0       	rjmp	.+50     	; 0x3802 <vfprintf+0x1e0>
    37d0:	82 2d       	mov	r24, r2
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	88 16       	cp	r8, r24
    37d6:	99 06       	cpc	r9, r25
    37d8:	a0 f4       	brcc	.+40     	; 0x3802 <vfprintf+0x1e0>
    37da:	b6 01       	movw	r22, r12
    37dc:	80 e2       	ldi	r24, 0x20	; 32
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	33 d1       	rcall	.+614    	; 0x3a48 <fputc>
    37e2:	2a 94       	dec	r2
    37e4:	f5 cf       	rjmp	.-22     	; 0x37d0 <vfprintf+0x1ae>
    37e6:	f5 01       	movw	r30, r10
    37e8:	37 fc       	sbrc	r3, 7
    37ea:	85 91       	lpm	r24, Z+
    37ec:	37 fe       	sbrs	r3, 7
    37ee:	81 91       	ld	r24, Z+
    37f0:	5f 01       	movw	r10, r30
    37f2:	b6 01       	movw	r22, r12
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	28 d1       	rcall	.+592    	; 0x3a48 <fputc>
    37f8:	21 10       	cpse	r2, r1
    37fa:	2a 94       	dec	r2
    37fc:	21 e0       	ldi	r18, 0x01	; 1
    37fe:	82 1a       	sub	r8, r18
    3800:	91 08       	sbc	r9, r1
    3802:	81 14       	cp	r8, r1
    3804:	91 04       	cpc	r9, r1
    3806:	79 f7       	brne	.-34     	; 0x37e6 <vfprintf+0x1c4>
    3808:	e1 c0       	rjmp	.+450    	; 0x39cc <vfprintf+0x3aa>
    380a:	84 36       	cpi	r24, 0x64	; 100
    380c:	11 f0       	breq	.+4      	; 0x3812 <vfprintf+0x1f0>
    380e:	89 36       	cpi	r24, 0x69	; 105
    3810:	39 f5       	brne	.+78     	; 0x3860 <vfprintf+0x23e>
    3812:	f8 01       	movw	r30, r16
    3814:	37 fe       	sbrs	r3, 7
    3816:	07 c0       	rjmp	.+14     	; 0x3826 <vfprintf+0x204>
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	0c 5f       	subi	r16, 0xFC	; 252
    3822:	1f 4f       	sbci	r17, 0xFF	; 255
    3824:	08 c0       	rjmp	.+16     	; 0x3836 <vfprintf+0x214>
    3826:	60 81       	ld	r22, Z
    3828:	71 81       	ldd	r23, Z+1	; 0x01
    382a:	07 2e       	mov	r0, r23
    382c:	00 0c       	add	r0, r0
    382e:	88 0b       	sbc	r24, r24
    3830:	99 0b       	sbc	r25, r25
    3832:	0e 5f       	subi	r16, 0xFE	; 254
    3834:	1f 4f       	sbci	r17, 0xFF	; 255
    3836:	f3 2d       	mov	r31, r3
    3838:	ff 76       	andi	r31, 0x6F	; 111
    383a:	3f 2e       	mov	r3, r31
    383c:	97 ff       	sbrs	r25, 7
    383e:	09 c0       	rjmp	.+18     	; 0x3852 <vfprintf+0x230>
    3840:	90 95       	com	r25
    3842:	80 95       	com	r24
    3844:	70 95       	com	r23
    3846:	61 95       	neg	r22
    3848:	7f 4f       	sbci	r23, 0xFF	; 255
    384a:	8f 4f       	sbci	r24, 0xFF	; 255
    384c:	9f 4f       	sbci	r25, 0xFF	; 255
    384e:	f0 68       	ori	r31, 0x80	; 128
    3850:	3f 2e       	mov	r3, r31
    3852:	2a e0       	ldi	r18, 0x0A	; 10
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	a3 01       	movw	r20, r6
    3858:	33 d1       	rcall	.+614    	; 0x3ac0 <__ultoa_invert>
    385a:	88 2e       	mov	r8, r24
    385c:	86 18       	sub	r8, r6
    385e:	44 c0       	rjmp	.+136    	; 0x38e8 <vfprintf+0x2c6>
    3860:	85 37       	cpi	r24, 0x75	; 117
    3862:	31 f4       	brne	.+12     	; 0x3870 <vfprintf+0x24e>
    3864:	23 2d       	mov	r18, r3
    3866:	2f 7e       	andi	r18, 0xEF	; 239
    3868:	b2 2e       	mov	r11, r18
    386a:	2a e0       	ldi	r18, 0x0A	; 10
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	25 c0       	rjmp	.+74     	; 0x38ba <vfprintf+0x298>
    3870:	93 2d       	mov	r25, r3
    3872:	99 7f       	andi	r25, 0xF9	; 249
    3874:	b9 2e       	mov	r11, r25
    3876:	8f 36       	cpi	r24, 0x6F	; 111
    3878:	c1 f0       	breq	.+48     	; 0x38aa <vfprintf+0x288>
    387a:	18 f4       	brcc	.+6      	; 0x3882 <vfprintf+0x260>
    387c:	88 35       	cpi	r24, 0x58	; 88
    387e:	79 f0       	breq	.+30     	; 0x389e <vfprintf+0x27c>
    3880:	ae c0       	rjmp	.+348    	; 0x39de <vfprintf+0x3bc>
    3882:	80 37       	cpi	r24, 0x70	; 112
    3884:	19 f0       	breq	.+6      	; 0x388c <vfprintf+0x26a>
    3886:	88 37       	cpi	r24, 0x78	; 120
    3888:	21 f0       	breq	.+8      	; 0x3892 <vfprintf+0x270>
    388a:	a9 c0       	rjmp	.+338    	; 0x39de <vfprintf+0x3bc>
    388c:	e9 2f       	mov	r30, r25
    388e:	e0 61       	ori	r30, 0x10	; 16
    3890:	be 2e       	mov	r11, r30
    3892:	b4 fe       	sbrs	r11, 4
    3894:	0d c0       	rjmp	.+26     	; 0x38b0 <vfprintf+0x28e>
    3896:	fb 2d       	mov	r31, r11
    3898:	f4 60       	ori	r31, 0x04	; 4
    389a:	bf 2e       	mov	r11, r31
    389c:	09 c0       	rjmp	.+18     	; 0x38b0 <vfprintf+0x28e>
    389e:	34 fe       	sbrs	r3, 4
    38a0:	0a c0       	rjmp	.+20     	; 0x38b6 <vfprintf+0x294>
    38a2:	29 2f       	mov	r18, r25
    38a4:	26 60       	ori	r18, 0x06	; 6
    38a6:	b2 2e       	mov	r11, r18
    38a8:	06 c0       	rjmp	.+12     	; 0x38b6 <vfprintf+0x294>
    38aa:	28 e0       	ldi	r18, 0x08	; 8
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	05 c0       	rjmp	.+10     	; 0x38ba <vfprintf+0x298>
    38b0:	20 e1       	ldi	r18, 0x10	; 16
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <vfprintf+0x298>
    38b6:	20 e1       	ldi	r18, 0x10	; 16
    38b8:	32 e0       	ldi	r19, 0x02	; 2
    38ba:	f8 01       	movw	r30, r16
    38bc:	b7 fe       	sbrs	r11, 7
    38be:	07 c0       	rjmp	.+14     	; 0x38ce <vfprintf+0x2ac>
    38c0:	60 81       	ld	r22, Z
    38c2:	71 81       	ldd	r23, Z+1	; 0x01
    38c4:	82 81       	ldd	r24, Z+2	; 0x02
    38c6:	93 81       	ldd	r25, Z+3	; 0x03
    38c8:	0c 5f       	subi	r16, 0xFC	; 252
    38ca:	1f 4f       	sbci	r17, 0xFF	; 255
    38cc:	06 c0       	rjmp	.+12     	; 0x38da <vfprintf+0x2b8>
    38ce:	60 81       	ld	r22, Z
    38d0:	71 81       	ldd	r23, Z+1	; 0x01
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	0e 5f       	subi	r16, 0xFE	; 254
    38d8:	1f 4f       	sbci	r17, 0xFF	; 255
    38da:	a3 01       	movw	r20, r6
    38dc:	f1 d0       	rcall	.+482    	; 0x3ac0 <__ultoa_invert>
    38de:	88 2e       	mov	r8, r24
    38e0:	86 18       	sub	r8, r6
    38e2:	fb 2d       	mov	r31, r11
    38e4:	ff 77       	andi	r31, 0x7F	; 127
    38e6:	3f 2e       	mov	r3, r31
    38e8:	36 fe       	sbrs	r3, 6
    38ea:	0d c0       	rjmp	.+26     	; 0x3906 <vfprintf+0x2e4>
    38ec:	23 2d       	mov	r18, r3
    38ee:	2e 7f       	andi	r18, 0xFE	; 254
    38f0:	a2 2e       	mov	r10, r18
    38f2:	89 14       	cp	r8, r9
    38f4:	58 f4       	brcc	.+22     	; 0x390c <vfprintf+0x2ea>
    38f6:	34 fe       	sbrs	r3, 4
    38f8:	0b c0       	rjmp	.+22     	; 0x3910 <vfprintf+0x2ee>
    38fa:	32 fc       	sbrc	r3, 2
    38fc:	09 c0       	rjmp	.+18     	; 0x3910 <vfprintf+0x2ee>
    38fe:	83 2d       	mov	r24, r3
    3900:	8e 7e       	andi	r24, 0xEE	; 238
    3902:	a8 2e       	mov	r10, r24
    3904:	05 c0       	rjmp	.+10     	; 0x3910 <vfprintf+0x2ee>
    3906:	b8 2c       	mov	r11, r8
    3908:	a3 2c       	mov	r10, r3
    390a:	03 c0       	rjmp	.+6      	; 0x3912 <vfprintf+0x2f0>
    390c:	b8 2c       	mov	r11, r8
    390e:	01 c0       	rjmp	.+2      	; 0x3912 <vfprintf+0x2f0>
    3910:	b9 2c       	mov	r11, r9
    3912:	a4 fe       	sbrs	r10, 4
    3914:	0f c0       	rjmp	.+30     	; 0x3934 <vfprintf+0x312>
    3916:	fe 01       	movw	r30, r28
    3918:	e8 0d       	add	r30, r8
    391a:	f1 1d       	adc	r31, r1
    391c:	80 81       	ld	r24, Z
    391e:	80 33       	cpi	r24, 0x30	; 48
    3920:	21 f4       	brne	.+8      	; 0x392a <vfprintf+0x308>
    3922:	9a 2d       	mov	r25, r10
    3924:	99 7e       	andi	r25, 0xE9	; 233
    3926:	a9 2e       	mov	r10, r25
    3928:	09 c0       	rjmp	.+18     	; 0x393c <vfprintf+0x31a>
    392a:	a2 fe       	sbrs	r10, 2
    392c:	06 c0       	rjmp	.+12     	; 0x393a <vfprintf+0x318>
    392e:	b3 94       	inc	r11
    3930:	b3 94       	inc	r11
    3932:	04 c0       	rjmp	.+8      	; 0x393c <vfprintf+0x31a>
    3934:	8a 2d       	mov	r24, r10
    3936:	86 78       	andi	r24, 0x86	; 134
    3938:	09 f0       	breq	.+2      	; 0x393c <vfprintf+0x31a>
    393a:	b3 94       	inc	r11
    393c:	a3 fc       	sbrc	r10, 3
    393e:	10 c0       	rjmp	.+32     	; 0x3960 <vfprintf+0x33e>
    3940:	a0 fe       	sbrs	r10, 0
    3942:	06 c0       	rjmp	.+12     	; 0x3950 <vfprintf+0x32e>
    3944:	b2 14       	cp	r11, r2
    3946:	80 f4       	brcc	.+32     	; 0x3968 <vfprintf+0x346>
    3948:	28 0c       	add	r2, r8
    394a:	92 2c       	mov	r9, r2
    394c:	9b 18       	sub	r9, r11
    394e:	0d c0       	rjmp	.+26     	; 0x396a <vfprintf+0x348>
    3950:	b2 14       	cp	r11, r2
    3952:	58 f4       	brcc	.+22     	; 0x396a <vfprintf+0x348>
    3954:	b6 01       	movw	r22, r12
    3956:	80 e2       	ldi	r24, 0x20	; 32
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	76 d0       	rcall	.+236    	; 0x3a48 <fputc>
    395c:	b3 94       	inc	r11
    395e:	f8 cf       	rjmp	.-16     	; 0x3950 <vfprintf+0x32e>
    3960:	b2 14       	cp	r11, r2
    3962:	18 f4       	brcc	.+6      	; 0x396a <vfprintf+0x348>
    3964:	2b 18       	sub	r2, r11
    3966:	02 c0       	rjmp	.+4      	; 0x396c <vfprintf+0x34a>
    3968:	98 2c       	mov	r9, r8
    396a:	21 2c       	mov	r2, r1
    396c:	a4 fe       	sbrs	r10, 4
    396e:	0f c0       	rjmp	.+30     	; 0x398e <vfprintf+0x36c>
    3970:	b6 01       	movw	r22, r12
    3972:	80 e3       	ldi	r24, 0x30	; 48
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	68 d0       	rcall	.+208    	; 0x3a48 <fputc>
    3978:	a2 fe       	sbrs	r10, 2
    397a:	16 c0       	rjmp	.+44     	; 0x39a8 <vfprintf+0x386>
    397c:	a1 fc       	sbrc	r10, 1
    397e:	03 c0       	rjmp	.+6      	; 0x3986 <vfprintf+0x364>
    3980:	88 e7       	ldi	r24, 0x78	; 120
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	02 c0       	rjmp	.+4      	; 0x398a <vfprintf+0x368>
    3986:	88 e5       	ldi	r24, 0x58	; 88
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	b6 01       	movw	r22, r12
    398c:	0c c0       	rjmp	.+24     	; 0x39a6 <vfprintf+0x384>
    398e:	8a 2d       	mov	r24, r10
    3990:	86 78       	andi	r24, 0x86	; 134
    3992:	51 f0       	breq	.+20     	; 0x39a8 <vfprintf+0x386>
    3994:	a1 fe       	sbrs	r10, 1
    3996:	02 c0       	rjmp	.+4      	; 0x399c <vfprintf+0x37a>
    3998:	8b e2       	ldi	r24, 0x2B	; 43
    399a:	01 c0       	rjmp	.+2      	; 0x399e <vfprintf+0x37c>
    399c:	80 e2       	ldi	r24, 0x20	; 32
    399e:	a7 fc       	sbrc	r10, 7
    39a0:	8d e2       	ldi	r24, 0x2D	; 45
    39a2:	b6 01       	movw	r22, r12
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	50 d0       	rcall	.+160    	; 0x3a48 <fputc>
    39a8:	89 14       	cp	r8, r9
    39aa:	30 f4       	brcc	.+12     	; 0x39b8 <vfprintf+0x396>
    39ac:	b6 01       	movw	r22, r12
    39ae:	80 e3       	ldi	r24, 0x30	; 48
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	4a d0       	rcall	.+148    	; 0x3a48 <fputc>
    39b4:	9a 94       	dec	r9
    39b6:	f8 cf       	rjmp	.-16     	; 0x39a8 <vfprintf+0x386>
    39b8:	8a 94       	dec	r8
    39ba:	f3 01       	movw	r30, r6
    39bc:	e8 0d       	add	r30, r8
    39be:	f1 1d       	adc	r31, r1
    39c0:	80 81       	ld	r24, Z
    39c2:	b6 01       	movw	r22, r12
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	40 d0       	rcall	.+128    	; 0x3a48 <fputc>
    39c8:	81 10       	cpse	r8, r1
    39ca:	f6 cf       	rjmp	.-20     	; 0x39b8 <vfprintf+0x396>
    39cc:	22 20       	and	r2, r2
    39ce:	09 f4       	brne	.+2      	; 0x39d2 <vfprintf+0x3b0>
    39d0:	4e ce       	rjmp	.-868    	; 0x366e <vfprintf+0x4c>
    39d2:	b6 01       	movw	r22, r12
    39d4:	80 e2       	ldi	r24, 0x20	; 32
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	37 d0       	rcall	.+110    	; 0x3a48 <fputc>
    39da:	2a 94       	dec	r2
    39dc:	f7 cf       	rjmp	.-18     	; 0x39cc <vfprintf+0x3aa>
    39de:	f6 01       	movw	r30, r12
    39e0:	86 81       	ldd	r24, Z+6	; 0x06
    39e2:	97 81       	ldd	r25, Z+7	; 0x07
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <vfprintf+0x3c8>
    39e6:	8f ef       	ldi	r24, 0xFF	; 255
    39e8:	9f ef       	ldi	r25, 0xFF	; 255
    39ea:	2b 96       	adiw	r28, 0x0b	; 11
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	df 91       	pop	r29
    39f8:	cf 91       	pop	r28
    39fa:	1f 91       	pop	r17
    39fc:	0f 91       	pop	r16
    39fe:	ff 90       	pop	r15
    3a00:	ef 90       	pop	r14
    3a02:	df 90       	pop	r13
    3a04:	cf 90       	pop	r12
    3a06:	bf 90       	pop	r11
    3a08:	af 90       	pop	r10
    3a0a:	9f 90       	pop	r9
    3a0c:	8f 90       	pop	r8
    3a0e:	7f 90       	pop	r7
    3a10:	6f 90       	pop	r6
    3a12:	5f 90       	pop	r5
    3a14:	4f 90       	pop	r4
    3a16:	3f 90       	pop	r3
    3a18:	2f 90       	pop	r2
    3a1a:	08 95       	ret

00003a1c <strnlen_P>:
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	05 90       	lpm	r0, Z+
    3a20:	61 50       	subi	r22, 0x01	; 1
    3a22:	70 40       	sbci	r23, 0x00	; 0
    3a24:	01 10       	cpse	r0, r1
    3a26:	d8 f7       	brcc	.-10     	; 0x3a1e <strnlen_P+0x2>
    3a28:	80 95       	com	r24
    3a2a:	90 95       	com	r25
    3a2c:	8e 0f       	add	r24, r30
    3a2e:	9f 1f       	adc	r25, r31
    3a30:	08 95       	ret

00003a32 <strnlen>:
    3a32:	fc 01       	movw	r30, r24
    3a34:	61 50       	subi	r22, 0x01	; 1
    3a36:	70 40       	sbci	r23, 0x00	; 0
    3a38:	01 90       	ld	r0, Z+
    3a3a:	01 10       	cpse	r0, r1
    3a3c:	d8 f7       	brcc	.-10     	; 0x3a34 <strnlen+0x2>
    3a3e:	80 95       	com	r24
    3a40:	90 95       	com	r25
    3a42:	8e 0f       	add	r24, r30
    3a44:	9f 1f       	adc	r25, r31
    3a46:	08 95       	ret

00003a48 <fputc>:
    3a48:	0f 93       	push	r16
    3a4a:	1f 93       	push	r17
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	fb 01       	movw	r30, r22
    3a52:	23 81       	ldd	r18, Z+3	; 0x03
    3a54:	21 fd       	sbrc	r18, 1
    3a56:	03 c0       	rjmp	.+6      	; 0x3a5e <fputc+0x16>
    3a58:	8f ef       	ldi	r24, 0xFF	; 255
    3a5a:	9f ef       	ldi	r25, 0xFF	; 255
    3a5c:	2c c0       	rjmp	.+88     	; 0x3ab6 <fputc+0x6e>
    3a5e:	22 ff       	sbrs	r18, 2
    3a60:	16 c0       	rjmp	.+44     	; 0x3a8e <fputc+0x46>
    3a62:	46 81       	ldd	r20, Z+6	; 0x06
    3a64:	57 81       	ldd	r21, Z+7	; 0x07
    3a66:	24 81       	ldd	r18, Z+4	; 0x04
    3a68:	35 81       	ldd	r19, Z+5	; 0x05
    3a6a:	42 17       	cp	r20, r18
    3a6c:	53 07       	cpc	r21, r19
    3a6e:	44 f4       	brge	.+16     	; 0x3a80 <fputc+0x38>
    3a70:	a0 81       	ld	r26, Z
    3a72:	b1 81       	ldd	r27, Z+1	; 0x01
    3a74:	9d 01       	movw	r18, r26
    3a76:	2f 5f       	subi	r18, 0xFF	; 255
    3a78:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7a:	31 83       	std	Z+1, r19	; 0x01
    3a7c:	20 83       	st	Z, r18
    3a7e:	8c 93       	st	X, r24
    3a80:	26 81       	ldd	r18, Z+6	; 0x06
    3a82:	37 81       	ldd	r19, Z+7	; 0x07
    3a84:	2f 5f       	subi	r18, 0xFF	; 255
    3a86:	3f 4f       	sbci	r19, 0xFF	; 255
    3a88:	37 83       	std	Z+7, r19	; 0x07
    3a8a:	26 83       	std	Z+6, r18	; 0x06
    3a8c:	14 c0       	rjmp	.+40     	; 0x3ab6 <fputc+0x6e>
    3a8e:	8b 01       	movw	r16, r22
    3a90:	ec 01       	movw	r28, r24
    3a92:	fb 01       	movw	r30, r22
    3a94:	00 84       	ldd	r0, Z+8	; 0x08
    3a96:	f1 85       	ldd	r31, Z+9	; 0x09
    3a98:	e0 2d       	mov	r30, r0
    3a9a:	19 95       	eicall
    3a9c:	89 2b       	or	r24, r25
    3a9e:	e1 f6       	brne	.-72     	; 0x3a58 <fputc+0x10>
    3aa0:	d8 01       	movw	r26, r16
    3aa2:	16 96       	adiw	r26, 0x06	; 6
    3aa4:	8d 91       	ld	r24, X+
    3aa6:	9c 91       	ld	r25, X
    3aa8:	17 97       	sbiw	r26, 0x07	; 7
    3aaa:	01 96       	adiw	r24, 0x01	; 1
    3aac:	17 96       	adiw	r26, 0x07	; 7
    3aae:	9c 93       	st	X, r25
    3ab0:	8e 93       	st	-X, r24
    3ab2:	16 97       	sbiw	r26, 0x06	; 6
    3ab4:	ce 01       	movw	r24, r28
    3ab6:	df 91       	pop	r29
    3ab8:	cf 91       	pop	r28
    3aba:	1f 91       	pop	r17
    3abc:	0f 91       	pop	r16
    3abe:	08 95       	ret

00003ac0 <__ultoa_invert>:
    3ac0:	fa 01       	movw	r30, r20
    3ac2:	aa 27       	eor	r26, r26
    3ac4:	28 30       	cpi	r18, 0x08	; 8
    3ac6:	51 f1       	breq	.+84     	; 0x3b1c <__ultoa_invert+0x5c>
    3ac8:	20 31       	cpi	r18, 0x10	; 16
    3aca:	81 f1       	breq	.+96     	; 0x3b2c <__ultoa_invert+0x6c>
    3acc:	e8 94       	clt
    3ace:	6f 93       	push	r22
    3ad0:	6e 7f       	andi	r22, 0xFE	; 254
    3ad2:	6e 5f       	subi	r22, 0xFE	; 254
    3ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    3ada:	af 4f       	sbci	r26, 0xFF	; 255
    3adc:	b1 e0       	ldi	r27, 0x01	; 1
    3ade:	3e d0       	rcall	.+124    	; 0x3b5c <__ultoa_invert+0x9c>
    3ae0:	b4 e0       	ldi	r27, 0x04	; 4
    3ae2:	3c d0       	rcall	.+120    	; 0x3b5c <__ultoa_invert+0x9c>
    3ae4:	67 0f       	add	r22, r23
    3ae6:	78 1f       	adc	r23, r24
    3ae8:	89 1f       	adc	r24, r25
    3aea:	9a 1f       	adc	r25, r26
    3aec:	a1 1d       	adc	r26, r1
    3aee:	68 0f       	add	r22, r24
    3af0:	79 1f       	adc	r23, r25
    3af2:	8a 1f       	adc	r24, r26
    3af4:	91 1d       	adc	r25, r1
    3af6:	a1 1d       	adc	r26, r1
    3af8:	6a 0f       	add	r22, r26
    3afa:	71 1d       	adc	r23, r1
    3afc:	81 1d       	adc	r24, r1
    3afe:	91 1d       	adc	r25, r1
    3b00:	a1 1d       	adc	r26, r1
    3b02:	20 d0       	rcall	.+64     	; 0x3b44 <__ultoa_invert+0x84>
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <__ultoa_invert+0x48>
    3b06:	68 94       	set
    3b08:	3f 91       	pop	r19
    3b0a:	2a e0       	ldi	r18, 0x0A	; 10
    3b0c:	26 9f       	mul	r18, r22
    3b0e:	11 24       	eor	r1, r1
    3b10:	30 19       	sub	r19, r0
    3b12:	30 5d       	subi	r19, 0xD0	; 208
    3b14:	31 93       	st	Z+, r19
    3b16:	de f6       	brtc	.-74     	; 0x3ace <__ultoa_invert+0xe>
    3b18:	cf 01       	movw	r24, r30
    3b1a:	08 95       	ret
    3b1c:	46 2f       	mov	r20, r22
    3b1e:	47 70       	andi	r20, 0x07	; 7
    3b20:	40 5d       	subi	r20, 0xD0	; 208
    3b22:	41 93       	st	Z+, r20
    3b24:	b3 e0       	ldi	r27, 0x03	; 3
    3b26:	0f d0       	rcall	.+30     	; 0x3b46 <__ultoa_invert+0x86>
    3b28:	c9 f7       	brne	.-14     	; 0x3b1c <__ultoa_invert+0x5c>
    3b2a:	f6 cf       	rjmp	.-20     	; 0x3b18 <__ultoa_invert+0x58>
    3b2c:	46 2f       	mov	r20, r22
    3b2e:	4f 70       	andi	r20, 0x0F	; 15
    3b30:	40 5d       	subi	r20, 0xD0	; 208
    3b32:	4a 33       	cpi	r20, 0x3A	; 58
    3b34:	18 f0       	brcs	.+6      	; 0x3b3c <__ultoa_invert+0x7c>
    3b36:	49 5d       	subi	r20, 0xD9	; 217
    3b38:	31 fd       	sbrc	r19, 1
    3b3a:	40 52       	subi	r20, 0x20	; 32
    3b3c:	41 93       	st	Z+, r20
    3b3e:	02 d0       	rcall	.+4      	; 0x3b44 <__ultoa_invert+0x84>
    3b40:	a9 f7       	brne	.-22     	; 0x3b2c <__ultoa_invert+0x6c>
    3b42:	ea cf       	rjmp	.-44     	; 0x3b18 <__ultoa_invert+0x58>
    3b44:	b4 e0       	ldi	r27, 0x04	; 4
    3b46:	a6 95       	lsr	r26
    3b48:	97 95       	ror	r25
    3b4a:	87 95       	ror	r24
    3b4c:	77 95       	ror	r23
    3b4e:	67 95       	ror	r22
    3b50:	ba 95       	dec	r27
    3b52:	c9 f7       	brne	.-14     	; 0x3b46 <__ultoa_invert+0x86>
    3b54:	00 97       	sbiw	r24, 0x00	; 0
    3b56:	61 05       	cpc	r22, r1
    3b58:	71 05       	cpc	r23, r1
    3b5a:	08 95       	ret
    3b5c:	9b 01       	movw	r18, r22
    3b5e:	ac 01       	movw	r20, r24
    3b60:	0a 2e       	mov	r0, r26
    3b62:	06 94       	lsr	r0
    3b64:	57 95       	ror	r21
    3b66:	47 95       	ror	r20
    3b68:	37 95       	ror	r19
    3b6a:	27 95       	ror	r18
    3b6c:	ba 95       	dec	r27
    3b6e:	c9 f7       	brne	.-14     	; 0x3b62 <__ultoa_invert+0xa2>
    3b70:	62 0f       	add	r22, r18
    3b72:	73 1f       	adc	r23, r19
    3b74:	84 1f       	adc	r24, r20
    3b76:	95 1f       	adc	r25, r21
    3b78:	a0 1d       	adc	r26, r0
    3b7a:	08 95       	ret

00003b7c <_exit>:
    3b7c:	f8 94       	cli

00003b7e <__stop_program>:
    3b7e:	ff cf       	rjmp	.-2      	; 0x3b7e <__stop_program>
