
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000486  00800200  00005364  000053f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c7c  00800686  00800686  0000587e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000587e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000058dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a0  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b469  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000295e  00000000  00000000  00011625  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005776  00000000  00000000  00013f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020f4  00000000  00000000  000196fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000362d  00000000  00000000  0001b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ab39  00000000  00000000  0001ee1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000858  00000000  00000000  00029956  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c3       	rjmp	.+1814   	; 0x748 <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__vector_25>
      68:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__vector_36>
      94:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__vector_51>
      d0:	0c 94 11 20 	jmp	0x4022	; 0x4022 <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <__vector_54>
      dc:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 16       	cp	r10, r24
      e6:	a8 16       	cp	r10, r24
      e8:	a8 16       	cp	r10, r24
      ea:	df 16       	cp	r13, r31
      ec:	e7 16       	cp	r14, r23
      ee:	fc 16       	cp	r15, r28
      f0:	a8 16       	cp	r10, r24
      f2:	a8 16       	cp	r10, r24
      f4:	df 16       	cp	r13, r31
      f6:	e7 16       	cp	r14, r23

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <prvCheckTasksWaitingTermination>
      fc:	80 91 ab 10 	lds	r24, 0x10AB	; 0x8010ab <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	5b d2       	rcall	.+1206   	; 0x5bc <vPortYield>
     106:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 25 14 	call	0x284a	; 0x284a <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <prvProcessTimerOrBlockTask>
     124:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	16 e0       	ldi	r17, 0x06	; 6
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e4 e6       	ldi	r30, 0x64	; 100
     142:	f3 e5       	ldi	r31, 0x53	; 83
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a6 38       	cpi	r26, 0x86	; 134
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e1       	ldi	r18, 0x13	; 19
     156:	a6 e8       	ldi	r26, 0x86	; 134
     158:	b6 e0       	ldi	r27, 0x06	; 6
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a2 30       	cpi	r26, 0x02	; 2
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <main>
     168:	0c 94 b0 29 	jmp	0x5360	; 0x5360 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     16e:	e2 e9       	ldi	r30, 0x92	; 146
     170:	f6 e0       	ldi	r31, 0x06	; 6
     172:	a6 e9       	ldi	r26, 0x96	; 150
     174:	b6 e0       	ldi	r27, 0x06	; 6
     176:	b1 83       	std	Z+1, r27	; 0x01
     178:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     17a:	13 82       	std	Z+3, r1	; 0x03
     17c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     17e:	e6 e5       	ldi	r30, 0x56	; 86
     180:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     182:	f0 93 91 06 	sts	0x0691, r31	; 0x800691 <pxEnd+0x1>
     186:	e0 93 90 06 	sts	0x0690, r30	; 0x800690 <pxEnd>
    pxEnd->xBlockSize = 0;
     18a:	13 82       	std	Z+3, r1	; 0x03
     18c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     18e:	11 82       	std	Z+1, r1	; 0x01
     190:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     192:	80 ec       	ldi	r24, 0xC0	; 192
     194:	99 e0       	ldi	r25, 0x09	; 9
     196:	13 96       	adiw	r26, 0x03	; 3
     198:	9c 93       	st	X, r25
     19a:	8e 93       	st	-X, r24
     19c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     19e:	ed 93       	st	X+, r30
     1a0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1a2:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     1a6:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1aa:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xFreeBytesRemaining+0x1>
     1ae:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e8       	ldi	r25, 0x80	; 128
     1b6:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <__data_end+0x1>
     1ba:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__data_end>
     1be:	08 95       	ret

000001c0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1c6:	a2 e9       	ldi	r26, 0x92	; 146
     1c8:	b6 e0       	ldi	r27, 0x06	; 6
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <prvInsertBlockIntoFreeList+0xe>
     1cc:	df 01       	movw	r26, r30
     1ce:	ed 91       	ld	r30, X+
     1d0:	fc 91       	ld	r31, X
     1d2:	11 97       	sbiw	r26, 0x01	; 1
     1d4:	ec 17       	cp	r30, r28
     1d6:	fd 07       	cpc	r31, r29
     1d8:	c8 f3       	brcs	.-14     	; 0x1cc <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     1da:	12 96       	adiw	r26, 0x02	; 2
     1dc:	8d 91       	ld	r24, X+
     1de:	9c 91       	ld	r25, X
     1e0:	13 97       	sbiw	r26, 0x03	; 3
     1e2:	9d 01       	movw	r18, r26
     1e4:	28 0f       	add	r18, r24
     1e6:	39 1f       	adc	r19, r25
     1e8:	c2 17       	cp	r28, r18
     1ea:	d3 07       	cpc	r29, r19
     1ec:	49 f4       	brne	.+18     	; 0x200 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     1ee:	2a 81       	ldd	r18, Y+2	; 0x02
     1f0:	3b 81       	ldd	r19, Y+3	; 0x03
     1f2:	82 0f       	add	r24, r18
     1f4:	93 1f       	adc	r25, r19
     1f6:	13 96       	adiw	r26, 0x03	; 3
     1f8:	9c 93       	st	X, r25
     1fa:	8e 93       	st	-X, r24
     1fc:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     1fe:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     200:	8a 81       	ldd	r24, Y+2	; 0x02
     202:	9b 81       	ldd	r25, Y+3	; 0x03
     204:	9e 01       	movw	r18, r28
     206:	28 0f       	add	r18, r24
     208:	39 1f       	adc	r19, r25
     20a:	e2 17       	cp	r30, r18
     20c:	f3 07       	cpc	r31, r19
     20e:	c1 f4       	brne	.+48     	; 0x240 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     210:	20 91 90 06 	lds	r18, 0x0690	; 0x800690 <pxEnd>
     214:	30 91 91 06 	lds	r19, 0x0691	; 0x800691 <pxEnd+0x1>
     218:	e2 17       	cp	r30, r18
     21a:	f3 07       	cpc	r31, r19
     21c:	71 f0       	breq	.+28     	; 0x23a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     21e:	22 81       	ldd	r18, Z+2	; 0x02
     220:	33 81       	ldd	r19, Z+3	; 0x03
     222:	82 0f       	add	r24, r18
     224:	93 1f       	adc	r25, r19
     226:	9b 83       	std	Y+3, r25	; 0x03
     228:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     22a:	ed 91       	ld	r30, X+
     22c:	fc 91       	ld	r31, X
     22e:	11 97       	sbiw	r26, 0x01	; 1
     230:	80 81       	ld	r24, Z
     232:	91 81       	ldd	r25, Z+1	; 0x01
     234:	99 83       	std	Y+1, r25	; 0x01
     236:	88 83       	st	Y, r24
     238:	05 c0       	rjmp	.+10     	; 0x244 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     23a:	39 83       	std	Y+1, r19	; 0x01
     23c:	28 83       	st	Y, r18
     23e:	02 c0       	rjmp	.+4      	; 0x244 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     240:	f9 83       	std	Y+1, r31	; 0x01
     242:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     244:	ca 17       	cp	r28, r26
     246:	db 07       	cpc	r29, r27
     248:	11 f0       	breq	.+4      	; 0x24e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     24a:	cd 93       	st	X+, r28
     24c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     262:	0e 94 43 0c 	call	0x1886	; 0x1886 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     266:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <pxEnd>
     26a:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pxEnd+0x1>
     26e:	89 2b       	or	r24, r25
     270:	09 f4       	brne	.+2      	; 0x274 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     272:	7d df       	rcall	.-262    	; 0x16e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     274:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <__data_end>
     278:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <__data_end+0x1>
     27c:	80 23       	and	r24, r16
     27e:	91 23       	and	r25, r17
     280:	89 2b       	or	r24, r25
     282:	09 f0       	breq	.+2      	; 0x286 <pvPortMalloc+0x32>
     284:	76 c0       	rjmp	.+236    	; 0x372 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     286:	01 15       	cp	r16, r1
     288:	11 05       	cpc	r17, r1
     28a:	49 f0       	breq	.+18     	; 0x29e <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     28c:	c8 01       	movw	r24, r16
     28e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     290:	08 17       	cp	r16, r24
     292:	19 07       	cpc	r17, r25
     294:	18 f0       	brcs	.+6      	; 0x29c <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	01 c0       	rjmp	.+2      	; 0x29e <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     29c:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     29e:	01 15       	cp	r16, r1
     2a0:	11 05       	cpc	r17, r1
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <pvPortMalloc+0x52>
     2a4:	69 c0       	rjmp	.+210    	; 0x378 <pvPortMalloc+0x124>
     2a6:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xFreeBytesRemaining>
     2aa:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <xFreeBytesRemaining+0x1>
     2ae:	80 17       	cp	r24, r16
     2b0:	91 07       	cpc	r25, r17
     2b2:	08 f4       	brcc	.+2      	; 0x2b6 <pvPortMalloc+0x62>
     2b4:	64 c0       	rjmp	.+200    	; 0x37e <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2b6:	c0 91 92 06 	lds	r28, 0x0692	; 0x800692 <xStart>
     2ba:	d0 91 93 06 	lds	r29, 0x0693	; 0x800693 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2be:	e2 e9       	ldi	r30, 0x92	; 146
     2c0:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     2c4:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2c6:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	9b 81       	ldd	r25, Y+3	; 0x03
     2cc:	80 17       	cp	r24, r16
     2ce:	91 07       	cpc	r25, r17
     2d0:	20 f4       	brcc	.+8      	; 0x2da <pvPortMalloc+0x86>
     2d2:	88 81       	ld	r24, Y
     2d4:	99 81       	ldd	r25, Y+1	; 0x01
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	a9 f7       	brne	.-22     	; 0x2c4 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     2da:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <pxEnd>
     2de:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pxEnd+0x1>
     2e2:	c8 17       	cp	r28, r24
     2e4:	d9 07       	cpc	r29, r25
     2e6:	09 f4       	brne	.+2      	; 0x2ea <pvPortMalloc+0x96>
     2e8:	4d c0       	rjmp	.+154    	; 0x384 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     2ea:	e0 80       	ld	r14, Z
     2ec:	f1 80       	ldd	r15, Z+1	; 0x01
     2ee:	84 e0       	ldi	r24, 0x04	; 4
     2f0:	e8 0e       	add	r14, r24
     2f2:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     2f4:	88 81       	ld	r24, Y
     2f6:	99 81       	ldd	r25, Y+1	; 0x01
     2f8:	91 83       	std	Z+1, r25	; 0x01
     2fa:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	20 1b       	sub	r18, r16
     302:	31 0b       	sbc	r19, r17
     304:	29 30       	cpi	r18, 0x09	; 9
     306:	31 05       	cpc	r19, r1
     308:	48 f0       	brcs	.+18     	; 0x31c <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     30a:	ce 01       	movw	r24, r28
     30c:	80 0f       	add	r24, r16
     30e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     310:	fc 01       	movw	r30, r24
     312:	33 83       	std	Z+3, r19	; 0x03
     314:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     316:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     318:	0a 83       	std	Y+2, r16	; 0x02
     31a:	52 df       	rcall	.-348    	; 0x1c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     31c:	2a 81       	ldd	r18, Y+2	; 0x02
     31e:	3b 81       	ldd	r19, Y+3	; 0x03
     320:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xFreeBytesRemaining>
     324:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <xFreeBytesRemaining+0x1>
     328:	82 1b       	sub	r24, r18
     32a:	93 0b       	sbc	r25, r19
     32c:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xFreeBytesRemaining+0x1>
     330:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     334:	40 91 8c 06 	lds	r20, 0x068C	; 0x80068c <xMinimumEverFreeBytesRemaining>
     338:	50 91 8d 06 	lds	r21, 0x068D	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     33c:	84 17       	cp	r24, r20
     33e:	95 07       	cpc	r25, r21
     340:	20 f4       	brcc	.+8      	; 0x34a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     342:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     346:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     34a:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <__data_end>
     34e:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <__data_end+0x1>
     352:	28 2b       	or	r18, r24
     354:	39 2b       	or	r19, r25
     356:	3b 83       	std	Y+3, r19	; 0x03
     358:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     35a:	19 82       	std	Y+1, r1	; 0x01
     35c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     35e:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <xNumberOfSuccessfulAllocations>
     362:	90 91 8b 06 	lds	r25, 0x068B	; 0x80068b <xNumberOfSuccessfulAllocations+0x1>
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	90 93 8b 06 	sts	0x068B, r25	; 0x80068b <xNumberOfSuccessfulAllocations+0x1>
     36c:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xNumberOfSuccessfulAllocations>
     370:	0b c0       	rjmp	.+22     	; 0x388 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     372:	e1 2c       	mov	r14, r1
     374:	f1 2c       	mov	r15, r1
     376:	08 c0       	rjmp	.+16     	; 0x388 <pvPortMalloc+0x134>
     378:	e1 2c       	mov	r14, r1
     37a:	f1 2c       	mov	r15, r1
     37c:	05 c0       	rjmp	.+10     	; 0x388 <pvPortMalloc+0x134>
     37e:	e1 2c       	mov	r14, r1
     380:	f1 2c       	mov	r15, r1
     382:	02 c0       	rjmp	.+4      	; 0x388 <pvPortMalloc+0x134>
     384:	e1 2c       	mov	r14, r1
     386:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     388:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     38c:	e1 14       	cp	r14, r1
     38e:	f1 04       	cpc	r15, r1
     390:	11 f4       	brne	.+4      	; 0x396 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     392:	0e 94 31 17 	call	0x2e62	; 0x2e62 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     396:	c7 01       	movw	r24, r14
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	08 95       	ret

000003a6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3ae:	00 97       	sbiw	r24, 0x00	; 0
     3b0:	91 f1       	breq	.+100    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3b2:	ec 01       	movw	r28, r24
     3b4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3b6:	4a 81       	ldd	r20, Y+2	; 0x02
     3b8:	5b 81       	ldd	r21, Y+3	; 0x03
     3ba:	20 91 86 06 	lds	r18, 0x0686	; 0x800686 <__data_end>
     3be:	30 91 87 06 	lds	r19, 0x0687	; 0x800687 <__data_end+0x1>
     3c2:	ba 01       	movw	r22, r20
     3c4:	62 23       	and	r22, r18
     3c6:	73 23       	and	r23, r19
     3c8:	67 2b       	or	r22, r23
     3ca:	29 f1       	breq	.+74     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3cc:	68 81       	ld	r22, Y
     3ce:	79 81       	ldd	r23, Y+1	; 0x01
     3d0:	67 2b       	or	r22, r23
     3d2:	09 f5       	brne	.+66     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     3d4:	20 95       	com	r18
     3d6:	30 95       	com	r19
     3d8:	24 23       	and	r18, r20
     3da:	35 23       	and	r19, r21
     3dc:	3b 83       	std	Y+3, r19	; 0x03
     3de:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     3e0:	0e 94 43 0c 	call	0x1886	; 0x1886 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	9b 81       	ldd	r25, Y+3	; 0x03
     3e8:	20 91 8e 06 	lds	r18, 0x068E	; 0x80068e <xFreeBytesRemaining>
     3ec:	30 91 8f 06 	lds	r19, 0x068F	; 0x80068f <xFreeBytesRemaining+0x1>
     3f0:	82 0f       	add	r24, r18
     3f2:	93 1f       	adc	r25, r19
     3f4:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xFreeBytesRemaining+0x1>
     3f8:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     3fc:	ce 01       	movw	r24, r28
     3fe:	e0 de       	rcall	.-576    	; 0x1c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     400:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <xNumberOfSuccessfulFrees>
     404:	90 91 89 06 	lds	r25, 0x0689	; 0x800689 <xNumberOfSuccessfulFrees+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <xNumberOfSuccessfulFrees+0x1>
     40e:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     412:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     420:	fc 01       	movw	r30, r24
     422:	03 96       	adiw	r24, 0x03	; 3
     424:	92 83       	std	Z+2, r25	; 0x02
     426:	81 83       	std	Z+1, r24	; 0x01
     428:	4f ef       	ldi	r20, 0xFF	; 255
     42a:	5f ef       	ldi	r21, 0xFF	; 255
     42c:	ba 01       	movw	r22, r20
     42e:	43 83       	std	Z+3, r20	; 0x03
     430:	54 83       	std	Z+4, r21	; 0x04
     432:	65 83       	std	Z+5, r22	; 0x05
     434:	76 83       	std	Z+6, r23	; 0x06
     436:	90 87       	std	Z+8, r25	; 0x08
     438:	87 83       	std	Z+7, r24	; 0x07
     43a:	92 87       	std	Z+10, r25	; 0x0a
     43c:	81 87       	std	Z+9, r24	; 0x09
     43e:	10 82       	st	Z, r1
     440:	08 95       	ret

00000442 <vListInitialiseItem>:
     442:	fc 01       	movw	r30, r24
     444:	13 86       	std	Z+11, r1	; 0x0b
     446:	12 86       	std	Z+10, r1	; 0x0a
     448:	08 95       	ret

0000044a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     454:	08 81       	ld	r16, Y
     456:	19 81       	ldd	r17, Y+1	; 0x01
     458:	2a 81       	ldd	r18, Y+2	; 0x02
     45a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     45c:	0f 3f       	cpi	r16, 0xFF	; 255
     45e:	4f ef       	ldi	r20, 0xFF	; 255
     460:	14 07       	cpc	r17, r20
     462:	24 07       	cpc	r18, r20
     464:	34 07       	cpc	r19, r20
     466:	21 f4       	brne	.+8      	; 0x470 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     468:	fc 01       	movw	r30, r24
     46a:	a1 85       	ldd	r26, Z+9	; 0x09
     46c:	b2 85       	ldd	r27, Z+10	; 0x0a
     46e:	11 c0       	rjmp	.+34     	; 0x492 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     470:	dc 01       	movw	r26, r24
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	01 c0       	rjmp	.+2      	; 0x478 <vListInsert+0x2e>
     476:	df 01       	movw	r26, r30
     478:	14 96       	adiw	r26, 0x04	; 4
     47a:	ed 91       	ld	r30, X+
     47c:	fc 91       	ld	r31, X
     47e:	15 97       	sbiw	r26, 0x05	; 5
     480:	40 81       	ld	r20, Z
     482:	51 81       	ldd	r21, Z+1	; 0x01
     484:	62 81       	ldd	r22, Z+2	; 0x02
     486:	73 81       	ldd	r23, Z+3	; 0x03
     488:	04 17       	cp	r16, r20
     48a:	15 07       	cpc	r17, r21
     48c:	26 07       	cpc	r18, r22
     48e:	37 07       	cpc	r19, r23
     490:	90 f7       	brcc	.-28     	; 0x476 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     492:	14 96       	adiw	r26, 0x04	; 4
     494:	ed 91       	ld	r30, X+
     496:	fc 91       	ld	r31, X
     498:	15 97       	sbiw	r26, 0x05	; 5
     49a:	fd 83       	std	Y+5, r31	; 0x05
     49c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     49e:	d7 83       	std	Z+7, r29	; 0x07
     4a0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     4a2:	bf 83       	std	Y+7, r27	; 0x07
     4a4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4a6:	15 96       	adiw	r26, 0x05	; 5
     4a8:	dc 93       	st	X, r29
     4aa:	ce 93       	st	-X, r28
     4ac:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4ae:	9b 87       	std	Y+11, r25	; 0x0b
     4b0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 81       	ld	r18, Z
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	20 83       	st	Z, r18
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4ca:	a2 85       	ldd	r26, Z+10	; 0x0a
     4cc:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4ce:	c4 81       	ldd	r28, Z+4	; 0x04
     4d0:	d5 81       	ldd	r29, Z+5	; 0x05
     4d2:	86 81       	ldd	r24, Z+6	; 0x06
     4d4:	97 81       	ldd	r25, Z+7	; 0x07
     4d6:	9f 83       	std	Y+7, r25	; 0x07
     4d8:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4da:	c6 81       	ldd	r28, Z+6	; 0x06
     4dc:	d7 81       	ldd	r29, Z+7	; 0x07
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	95 81       	ldd	r25, Z+5	; 0x05
     4e2:	9d 83       	std	Y+5, r25	; 0x05
     4e4:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	8d 91       	ld	r24, X+
     4ea:	9c 91       	ld	r25, X
     4ec:	12 97       	sbiw	r26, 0x02	; 2
     4ee:	e8 17       	cp	r30, r24
     4f0:	f9 07       	cpc	r31, r25
     4f2:	31 f4       	brne	.+12     	; 0x500 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     4f4:	86 81       	ldd	r24, Z+6	; 0x06
     4f6:	97 81       	ldd	r25, Z+7	; 0x07
     4f8:	12 96       	adiw	r26, 0x02	; 2
     4fa:	9c 93       	st	X, r25
     4fc:	8e 93       	st	-X, r24
     4fe:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     500:	13 86       	std	Z+11, r1	; 0x0b
     502:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     504:	8c 91       	ld	r24, X
     506:	81 50       	subi	r24, 0x01	; 1
     508:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     50a:	8c 91       	ld	r24, X
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     512:	a8 95       	wdr
     514:	90 ec       	ldi	r25, 0xC0	; 192
     516:	88 e1       	ldi	r24, 0x18	; 24
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	a8 95       	wdr
     51e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     522:	0f be       	out	0x3f, r0	; 63
     524:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     528:	08 95       	ret

0000052a <pxPortInitialiseStack>:
     52a:	fc 01       	movw	r30, r24
     52c:	60 83       	st	Z, r22
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	70 83       	st	Z, r23
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	10 82       	st	Z, r1
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	10 82       	st	Z, r1
     53a:	31 97       	sbiw	r30, 0x01	; 1
     53c:	20 e8       	ldi	r18, 0x80	; 128
     53e:	20 83       	st	Z, r18
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	10 82       	st	Z, r1
     544:	31 97       	sbiw	r30, 0x01	; 1
     546:	10 82       	st	Z, r1
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	10 82       	st	Z, r1
     54c:	77 97       	sbiw	r30, 0x17	; 23
     54e:	40 83       	st	Z, r20
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	50 83       	st	Z, r21
     554:	86 97       	sbiw	r24, 0x26	; 38
     556:	08 95       	ret

00000558 <xPortStartScheduler>:
     558:	dc df       	rcall	.-72     	; 0x512 <prvSetupTimerInterrupt>
     55a:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     55e:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     562:	cd 91       	ld	r28, X+
     564:	cd bf       	out	0x3d, r28	; 61
     566:	dd 91       	ld	r29, X+
     568:	de bf       	out	0x3e, r29	; 62
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	bf 91       	pop	r27
     574:	af 91       	pop	r26
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	7f 91       	pop	r23
     57c:	6f 91       	pop	r22
     57e:	5f 91       	pop	r21
     580:	4f 91       	pop	r20
     582:	3f 91       	pop	r19
     584:	2f 91       	pop	r18
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	9f 90       	pop	r9
     598:	8f 90       	pop	r8
     59a:	7f 90       	pop	r7
     59c:	6f 90       	pop	r6
     59e:	5f 90       	pop	r5
     5a0:	4f 90       	pop	r4
     5a2:	3f 90       	pop	r3
     5a4:	2f 90       	pop	r2
     5a6:	1f 90       	pop	r1
     5a8:	0f 90       	pop	r0
     5aa:	0c be       	out	0x3c, r0	; 60
     5ac:	0f 90       	pop	r0
     5ae:	0b be       	out	0x3b, r0	; 59
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	08 95       	ret
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	08 95       	ret

000005bc <vPortYield>:
     5bc:	0f 92       	push	r0
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	0f 92       	push	r0
     5c4:	0b b6       	in	r0, 0x3b	; 59
     5c6:	0f 92       	push	r0
     5c8:	0c b6       	in	r0, 0x3c	; 60
     5ca:	0f 92       	push	r0
     5cc:	1f 92       	push	r1
     5ce:	11 24       	eor	r1, r1
     5d0:	2f 92       	push	r2
     5d2:	3f 92       	push	r3
     5d4:	4f 92       	push	r4
     5d6:	5f 92       	push	r5
     5d8:	6f 92       	push	r6
     5da:	7f 92       	push	r7
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	2f 93       	push	r18
     5f2:	3f 93       	push	r19
     5f4:	4f 93       	push	r20
     5f6:	5f 93       	push	r21
     5f8:	6f 93       	push	r22
     5fa:	7f 93       	push	r23
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	af 93       	push	r26
     602:	bf 93       	push	r27
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31
     60c:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     610:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     614:	0d b6       	in	r0, 0x3d	; 61
     616:	0d 92       	st	X+, r0
     618:	0e b6       	in	r0, 0x3e	; 62
     61a:	0d 92       	st	X+, r0
     61c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <vTaskSwitchContext>
     620:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     624:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     628:	cd 91       	ld	r28, X+
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	dd 91       	ld	r29, X+
     62e:	de bf       	out	0x3e, r29	; 62
     630:	ff 91       	pop	r31
     632:	ef 91       	pop	r30
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	bf 91       	pop	r27
     63a:	af 91       	pop	r26
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	7f 91       	pop	r23
     642:	6f 91       	pop	r22
     644:	5f 91       	pop	r21
     646:	4f 91       	pop	r20
     648:	3f 91       	pop	r19
     64a:	2f 91       	pop	r18
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	bf 90       	pop	r11
     65a:	af 90       	pop	r10
     65c:	9f 90       	pop	r9
     65e:	8f 90       	pop	r8
     660:	7f 90       	pop	r7
     662:	6f 90       	pop	r6
     664:	5f 90       	pop	r5
     666:	4f 90       	pop	r4
     668:	3f 90       	pop	r3
     66a:	2f 90       	pop	r2
     66c:	1f 90       	pop	r1
     66e:	0f 90       	pop	r0
     670:	0c be       	out	0x3c, r0	; 60
     672:	0f 90       	pop	r0
     674:	0b be       	out	0x3b, r0	; 59
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	08 95       	ret

0000067e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	0f 92       	push	r0
     686:	0b b6       	in	r0, 0x3b	; 59
     688:	0f 92       	push	r0
     68a:	0c b6       	in	r0, 0x3c	; 60
     68c:	0f 92       	push	r0
     68e:	1f 92       	push	r1
     690:	11 24       	eor	r1, r1
     692:	2f 92       	push	r2
     694:	3f 92       	push	r3
     696:	4f 92       	push	r4
     698:	5f 92       	push	r5
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
     6ce:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     6d2:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     6d6:	0d b6       	in	r0, 0x3d	; 61
     6d8:	0d 92       	st	X+, r0
     6da:	0e b6       	in	r0, 0x3e	; 62
     6dc:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     6de:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     6e0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <xTaskIncrementTick>
     6e4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     6e6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     6ea:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     6ee:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     6f2:	cd 91       	ld	r28, X+
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	dd 91       	ld	r29, X+
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	ff 91       	pop	r31
     6fc:	ef 91       	pop	r30
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	7f 91       	pop	r23
     70c:	6f 91       	pop	r22
     70e:	5f 91       	pop	r21
     710:	4f 91       	pop	r20
     712:	3f 91       	pop	r19
     714:	2f 91       	pop	r18
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	cf 90       	pop	r12
     722:	bf 90       	pop	r11
     724:	af 90       	pop	r10
     726:	9f 90       	pop	r9
     728:	8f 90       	pop	r8
     72a:	7f 90       	pop	r7
     72c:	6f 90       	pop	r6
     72e:	5f 90       	pop	r5
     730:	4f 90       	pop	r4
     732:	3f 90       	pop	r3
     734:	2f 90       	pop	r2
     736:	1f 90       	pop	r1
     738:	0f 90       	pop	r0
     73a:	0c be       	out	0x3c, r0	; 60
     73c:	0f 90       	pop	r0
     73e:	0b be       	out	0x3b, r0	; 59
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     746:	08 95       	ret

00000748 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     748:	9a df       	rcall	.-204    	; 0x67e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     74a:	18 95       	reti

0000074c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	0f 92       	push	r0
     752:	fc 01       	movw	r30, r24
     754:	86 8d       	ldd	r24, Z+30	; 0x1e
     756:	81 11       	cpse	r24, r1
     758:	02 c0       	rjmp	.+4      	; 0x75e <prvIsQueueEmpty+0x12>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	01 c0       	rjmp	.+2      	; 0x760 <prvIsQueueEmpty+0x14>
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	08 95       	ret

00000766 <prvIsQueueFull>:
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	0f 92       	push	r0
     76c:	fc 01       	movw	r30, r24
     76e:	26 8d       	ldd	r18, Z+30	; 0x1e
     770:	87 8d       	ldd	r24, Z+31	; 0x1f
     772:	28 13       	cpse	r18, r24
     774:	02 c0       	rjmp	.+4      	; 0x77a <prvIsQueueFull+0x14>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	01 c0       	rjmp	.+2      	; 0x77c <prvIsQueueFull+0x16>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	08 95       	ret

00000782 <prvCopyDataToQueue>:
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
     78c:	04 2f       	mov	r16, r20
     78e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     790:	48 a1       	ldd	r20, Y+32	; 0x20
     792:	41 11       	cpse	r20, r1
     794:	0c c0       	rjmp	.+24     	; 0x7ae <prvCopyDataToQueue+0x2c>
     796:	88 81       	ld	r24, Y
     798:	99 81       	ldd	r25, Y+1	; 0x01
     79a:	89 2b       	or	r24, r25
     79c:	09 f0       	breq	.+2      	; 0x7a0 <prvCopyDataToQueue+0x1e>
     79e:	42 c0       	rjmp	.+132    	; 0x824 <prvCopyDataToQueue+0xa2>
     7a0:	8c 81       	ldd	r24, Y+4	; 0x04
     7a2:	9d 81       	ldd	r25, Y+5	; 0x05
     7a4:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <xTaskPriorityDisinherit>
     7a8:	1d 82       	std	Y+5, r1	; 0x05
     7aa:	1c 82       	std	Y+4, r1	; 0x04
     7ac:	42 c0       	rjmp	.+132    	; 0x832 <prvCopyDataToQueue+0xb0>
     7ae:	01 11       	cpse	r16, r1
     7b0:	17 c0       	rjmp	.+46     	; 0x7e0 <prvCopyDataToQueue+0x5e>
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	8a 81       	ldd	r24, Y+2	; 0x02
     7b6:	9b 81       	ldd	r25, Y+3	; 0x03
     7b8:	0e 94 33 26 	call	0x4c66	; 0x4c66 <memcpy>
     7bc:	28 a1       	ldd	r18, Y+32	; 0x20
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	9b 81       	ldd	r25, Y+3	; 0x03
     7c2:	82 0f       	add	r24, r18
     7c4:	91 1d       	adc	r25, r1
     7c6:	9b 83       	std	Y+3, r25	; 0x03
     7c8:	8a 83       	std	Y+2, r24	; 0x02
     7ca:	2c 81       	ldd	r18, Y+4	; 0x04
     7cc:	3d 81       	ldd	r19, Y+5	; 0x05
     7ce:	82 17       	cp	r24, r18
     7d0:	93 07       	cpc	r25, r19
     7d2:	50 f1       	brcs	.+84     	; 0x828 <prvCopyDataToQueue+0xa6>
     7d4:	88 81       	ld	r24, Y
     7d6:	99 81       	ldd	r25, Y+1	; 0x01
     7d8:	9b 83       	std	Y+3, r25	; 0x03
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	29 c0       	rjmp	.+82     	; 0x832 <prvCopyDataToQueue+0xb0>
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	9f 81       	ldd	r25, Y+7	; 0x07
     7e6:	0e 94 33 26 	call	0x4c66	; 0x4c66 <memcpy>
     7ea:	88 a1       	ldd	r24, Y+32	; 0x20
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	91 95       	neg	r25
     7f0:	81 95       	neg	r24
     7f2:	91 09       	sbc	r25, r1
     7f4:	2e 81       	ldd	r18, Y+6	; 0x06
     7f6:	3f 81       	ldd	r19, Y+7	; 0x07
     7f8:	28 0f       	add	r18, r24
     7fa:	39 1f       	adc	r19, r25
     7fc:	3f 83       	std	Y+7, r19	; 0x07
     7fe:	2e 83       	std	Y+6, r18	; 0x06
     800:	48 81       	ld	r20, Y
     802:	59 81       	ldd	r21, Y+1	; 0x01
     804:	24 17       	cp	r18, r20
     806:	35 07       	cpc	r19, r21
     808:	30 f4       	brcc	.+12     	; 0x816 <prvCopyDataToQueue+0x94>
     80a:	2c 81       	ldd	r18, Y+4	; 0x04
     80c:	3d 81       	ldd	r19, Y+5	; 0x05
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	9f 83       	std	Y+7, r25	; 0x07
     814:	8e 83       	std	Y+6, r24	; 0x06
     816:	02 30       	cpi	r16, 0x02	; 2
     818:	49 f4       	brne	.+18     	; 0x82c <prvCopyDataToQueue+0xaa>
     81a:	11 23       	and	r17, r17
     81c:	49 f0       	breq	.+18     	; 0x830 <prvCopyDataToQueue+0xae>
     81e:	11 50       	subi	r17, 0x01	; 1
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	07 c0       	rjmp	.+14     	; 0x832 <prvCopyDataToQueue+0xb0>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	05 c0       	rjmp	.+10     	; 0x832 <prvCopyDataToQueue+0xb0>
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	03 c0       	rjmp	.+6      	; 0x832 <prvCopyDataToQueue+0xb0>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	01 c0       	rjmp	.+2      	; 0x832 <prvCopyDataToQueue+0xb0>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	1f 5f       	subi	r17, 0xFF	; 255
     834:	1e 8f       	std	Y+30, r17	; 0x1e
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <prvCopyDataFromQueue>:
     840:	fc 01       	movw	r30, r24
     842:	40 a1       	ldd	r20, Z+32	; 0x20
     844:	44 23       	and	r20, r20
     846:	a9 f0       	breq	.+42     	; 0x872 <prvCopyDataFromQueue+0x32>
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	26 81       	ldd	r18, Z+6	; 0x06
     84c:	37 81       	ldd	r19, Z+7	; 0x07
     84e:	24 0f       	add	r18, r20
     850:	35 1f       	adc	r19, r21
     852:	37 83       	std	Z+7, r19	; 0x07
     854:	26 83       	std	Z+6, r18	; 0x06
     856:	84 81       	ldd	r24, Z+4	; 0x04
     858:	95 81       	ldd	r25, Z+5	; 0x05
     85a:	28 17       	cp	r18, r24
     85c:	39 07       	cpc	r19, r25
     85e:	20 f0       	brcs	.+8      	; 0x868 <prvCopyDataFromQueue+0x28>
     860:	80 81       	ld	r24, Z
     862:	91 81       	ldd	r25, Z+1	; 0x01
     864:	97 83       	std	Z+7, r25	; 0x07
     866:	86 83       	std	Z+6, r24	; 0x06
     868:	cb 01       	movw	r24, r22
     86a:	66 81       	ldd	r22, Z+6	; 0x06
     86c:	77 81       	ldd	r23, Z+7	; 0x07
     86e:	0c 94 33 26 	jmp	0x4c66	; 0x4c66 <memcpy>
     872:	08 95       	ret

00000874 <prvUnlockQueue>:
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	0f 92       	push	r0
     882:	1a a1       	ldd	r17, Y+34	; 0x22
     884:	0b c0       	rjmp	.+22     	; 0x89c <prvUnlockQueue+0x28>
     886:	8b 89       	ldd	r24, Y+19	; 0x13
     888:	88 23       	and	r24, r24
     88a:	51 f0       	breq	.+20     	; 0x8a0 <prvUnlockQueue+0x2c>
     88c:	ce 01       	movw	r24, r28
     88e:	43 96       	adiw	r24, 0x13	; 19
     890:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xTaskRemoveFromEventList>
     894:	81 11       	cpse	r24, r1
     896:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <vTaskMissedYield>
     89a:	11 50       	subi	r17, 0x01	; 1
     89c:	11 16       	cp	r1, r17
     89e:	9c f3       	brlt	.-26     	; 0x886 <prvUnlockQueue+0x12>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	8a a3       	std	Y+34, r24	; 0x22
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	0f 92       	push	r0
     8ae:	19 a1       	ldd	r17, Y+33	; 0x21
     8b0:	0b c0       	rjmp	.+22     	; 0x8c8 <prvUnlockQueue+0x54>
     8b2:	88 85       	ldd	r24, Y+8	; 0x08
     8b4:	88 23       	and	r24, r24
     8b6:	51 f0       	breq	.+20     	; 0x8cc <prvUnlockQueue+0x58>
     8b8:	ce 01       	movw	r24, r28
     8ba:	08 96       	adiw	r24, 0x08	; 8
     8bc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xTaskRemoveFromEventList>
     8c0:	81 11       	cpse	r24, r1
     8c2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <vTaskMissedYield>
     8c6:	11 50       	subi	r17, 0x01	; 1
     8c8:	11 16       	cp	r1, r17
     8ca:	9c f3       	brlt	.-26     	; 0x8b2 <prvUnlockQueue+0x3e>
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	89 a3       	std	Y+33, r24	; 0x21
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	08 95       	ret

000008dc <xQueueGenericReset>:
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	ec 01       	movw	r28, r24
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	0f 92       	push	r0
     8e8:	e8 81       	ld	r30, Y
     8ea:	f9 81       	ldd	r31, Y+1	; 0x01
     8ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ee:	28 a1       	ldd	r18, Y+32	; 0x20
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	82 9f       	mul	r24, r18
     8f6:	a0 01       	movw	r20, r0
     8f8:	83 9f       	mul	r24, r19
     8fa:	50 0d       	add	r21, r0
     8fc:	92 9f       	mul	r25, r18
     8fe:	50 0d       	add	r21, r0
     900:	11 24       	eor	r1, r1
     902:	4e 0f       	add	r20, r30
     904:	5f 1f       	adc	r21, r31
     906:	5d 83       	std	Y+5, r21	; 0x05
     908:	4c 83       	std	Y+4, r20	; 0x04
     90a:	1e 8e       	std	Y+30, r1	; 0x1e
     90c:	fb 83       	std	Y+3, r31	; 0x03
     90e:	ea 83       	std	Y+2, r30	; 0x02
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	28 9f       	mul	r18, r24
     914:	a0 01       	movw	r20, r0
     916:	29 9f       	mul	r18, r25
     918:	50 0d       	add	r21, r0
     91a:	38 9f       	mul	r19, r24
     91c:	50 0d       	add	r21, r0
     91e:	11 24       	eor	r1, r1
     920:	cf 01       	movw	r24, r30
     922:	84 0f       	add	r24, r20
     924:	95 1f       	adc	r25, r21
     926:	9f 83       	std	Y+7, r25	; 0x07
     928:	8e 83       	std	Y+6, r24	; 0x06
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	89 a3       	std	Y+33, r24	; 0x21
     92e:	8a a3       	std	Y+34, r24	; 0x22
     930:	61 11       	cpse	r22, r1
     932:	0b c0       	rjmp	.+22     	; 0x94a <xQueueGenericReset+0x6e>
     934:	88 85       	ldd	r24, Y+8	; 0x08
     936:	88 23       	and	r24, r24
     938:	71 f0       	breq	.+28     	; 0x956 <xQueueGenericReset+0x7a>
     93a:	ce 01       	movw	r24, r28
     93c:	08 96       	adiw	r24, 0x08	; 8
     93e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xTaskRemoveFromEventList>
     942:	88 23       	and	r24, r24
     944:	41 f0       	breq	.+16     	; 0x956 <xQueueGenericReset+0x7a>
     946:	3a de       	rcall	.-908    	; 0x5bc <vPortYield>
     948:	06 c0       	rjmp	.+12     	; 0x956 <xQueueGenericReset+0x7a>
     94a:	ce 01       	movw	r24, r28
     94c:	08 96       	adiw	r24, 0x08	; 8
     94e:	68 dd       	rcall	.-1328   	; 0x420 <vListInitialise>
     950:	ce 01       	movw	r24, r28
     952:	43 96       	adiw	r24, 0x13	; 19
     954:	65 dd       	rcall	.-1334   	; 0x420 <vListInitialise>
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <prvInitialiseNewQueue>:
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	f8 01       	movw	r30, r16
     968:	61 11       	cpse	r22, r1
     96a:	03 c0       	rjmp	.+6      	; 0x972 <prvInitialiseNewQueue+0x10>
     96c:	11 83       	std	Z+1, r17	; 0x01
     96e:	00 83       	st	Z, r16
     970:	02 c0       	rjmp	.+4      	; 0x976 <prvInitialiseNewQueue+0x14>
     972:	51 83       	std	Z+1, r21	; 0x01
     974:	40 83       	st	Z, r20
     976:	87 8f       	std	Z+31, r24	; 0x1f
     978:	60 a3       	std	Z+32, r22	; 0x20
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	cf 01       	movw	r24, r30
     97e:	ae df       	rcall	.-164    	; 0x8dc <xQueueGenericReset>
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <xQueueGenericCreate>:
     986:	df 92       	push	r13
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	f8 2e       	mov	r15, r24
     996:	e6 2e       	mov	r14, r22
     998:	d4 2e       	mov	r13, r20
     99a:	86 9f       	mul	r24, r22
     99c:	c0 01       	movw	r24, r0
     99e:	11 24       	eor	r1, r1
     9a0:	83 96       	adiw	r24, 0x23	; 35
     9a2:	58 dc       	rcall	.-1872   	; 0x254 <pvPortMalloc>
     9a4:	ec 01       	movw	r28, r24
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	41 f0       	breq	.+16     	; 0x9ba <xQueueGenericCreate+0x34>
     9aa:	8c 01       	movw	r16, r24
     9ac:	2d 2d       	mov	r18, r13
     9ae:	ac 01       	movw	r20, r24
     9b0:	4d 5d       	subi	r20, 0xDD	; 221
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	6e 2d       	mov	r22, r14
     9b6:	8f 2d       	mov	r24, r15
     9b8:	d4 df       	rcall	.-88     	; 0x962 <prvInitialiseNewQueue>
     9ba:	ce 01       	movw	r24, r28
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	08 95       	ret

000009cc <xQueueGenericSend>:
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	29 97       	sbiw	r28, 0x09	; 9
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	7c 01       	movw	r14, r24
     9ee:	6b 01       	movw	r12, r22
     9f0:	2e 83       	std	Y+6, r18	; 0x06
     9f2:	3f 83       	std	Y+7, r19	; 0x07
     9f4:	48 87       	std	Y+8, r20	; 0x08
     9f6:	59 87       	std	Y+9, r21	; 0x09
     9f8:	10 e0       	ldi	r17, 0x00	; 0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	0f 92       	push	r0
     a00:	f7 01       	movw	r30, r14
     a02:	96 8d       	ldd	r25, Z+30	; 0x1e
     a04:	87 8d       	ldd	r24, Z+31	; 0x1f
     a06:	98 17       	cp	r25, r24
     a08:	10 f0       	brcs	.+4      	; 0xa0e <xQueueGenericSend+0x42>
     a0a:	02 30       	cpi	r16, 0x02	; 2
     a0c:	b1 f4       	brne	.+44     	; 0xa3a <xQueueGenericSend+0x6e>
     a0e:	40 2f       	mov	r20, r16
     a10:	b6 01       	movw	r22, r12
     a12:	c7 01       	movw	r24, r14
     a14:	b6 de       	rcall	.-660    	; 0x782 <prvCopyDataToQueue>
     a16:	f7 01       	movw	r30, r14
     a18:	93 89       	ldd	r25, Z+19	; 0x13
     a1a:	99 23       	and	r25, r25
     a1c:	41 f0       	breq	.+16     	; 0xa2e <xQueueGenericSend+0x62>
     a1e:	c7 01       	movw	r24, r14
     a20:	43 96       	adiw	r24, 0x13	; 19
     a22:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xTaskRemoveFromEventList>
     a26:	88 23       	and	r24, r24
     a28:	21 f0       	breq	.+8      	; 0xa32 <xQueueGenericSend+0x66>
     a2a:	c8 dd       	rcall	.-1136   	; 0x5bc <vPortYield>
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <xQueueGenericSend+0x66>
     a2e:	81 11       	cpse	r24, r1
     a30:	c5 dd       	rcall	.-1142   	; 0x5bc <vPortYield>
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	4c c0       	rjmp	.+152    	; 0xad2 <xQueueGenericSend+0x106>
     a3a:	8e 81       	ldd	r24, Y+6	; 0x06
     a3c:	9f 81       	ldd	r25, Y+7	; 0x07
     a3e:	a8 85       	ldd	r26, Y+8	; 0x08
     a40:	b9 85       	ldd	r27, Y+9	; 0x09
     a42:	89 2b       	or	r24, r25
     a44:	8a 2b       	or	r24, r26
     a46:	8b 2b       	or	r24, r27
     a48:	21 f4       	brne	.+8      	; 0xa52 <xQueueGenericSend+0x86>
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	40 c0       	rjmp	.+128    	; 0xad2 <xQueueGenericSend+0x106>
     a52:	11 11       	cpse	r17, r1
     a54:	05 c0       	rjmp	.+10     	; 0xa60 <xQueueGenericSend+0x94>
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <vTaskInternalSetTimeOutState>
     a5e:	11 e0       	ldi	r17, 0x01	; 1
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	10 d7       	rcall	.+3616   	; 0x1886 <vTaskSuspendAll>
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	0f 92       	push	r0
     a6c:	f7 01       	movw	r30, r14
     a6e:	81 a1       	ldd	r24, Z+33	; 0x21
     a70:	8f 3f       	cpi	r24, 0xFF	; 255
     a72:	09 f4       	brne	.+2      	; 0xa76 <xQueueGenericSend+0xaa>
     a74:	11 a2       	std	Z+33, r1	; 0x21
     a76:	f7 01       	movw	r30, r14
     a78:	82 a1       	ldd	r24, Z+34	; 0x22
     a7a:	8f 3f       	cpi	r24, 0xFF	; 255
     a7c:	09 f4       	brne	.+2      	; 0xa80 <xQueueGenericSend+0xb4>
     a7e:	12 a2       	std	Z+34, r1	; 0x22
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	be 01       	movw	r22, r28
     a86:	6a 5f       	subi	r22, 0xFA	; 250
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	ce 01       	movw	r24, r28
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xTaskCheckForTimeOut>
     a92:	81 11       	cpse	r24, r1
     a94:	19 c0       	rjmp	.+50     	; 0xac8 <xQueueGenericSend+0xfc>
     a96:	c7 01       	movw	r24, r14
     a98:	66 de       	rcall	.-820    	; 0x766 <prvIsQueueFull>
     a9a:	88 23       	and	r24, r24
     a9c:	81 f0       	breq	.+32     	; 0xabe <xQueueGenericSend+0xf2>
     a9e:	4e 81       	ldd	r20, Y+6	; 0x06
     aa0:	5f 81       	ldd	r21, Y+7	; 0x07
     aa2:	68 85       	ldd	r22, Y+8	; 0x08
     aa4:	79 85       	ldd	r23, Y+9	; 0x09
     aa6:	c7 01       	movw	r24, r14
     aa8:	08 96       	adiw	r24, 0x08	; 8
     aaa:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <vTaskPlaceOnEventList>
     aae:	c7 01       	movw	r24, r14
     ab0:	e1 de       	rcall	.-574    	; 0x874 <prvUnlockQueue>
     ab2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xTaskResumeAll>
     ab6:	81 11       	cpse	r24, r1
     ab8:	a0 cf       	rjmp	.-192    	; 0x9fa <xQueueGenericSend+0x2e>
     aba:	80 dd       	rcall	.-1280   	; 0x5bc <vPortYield>
     abc:	9e cf       	rjmp	.-196    	; 0x9fa <xQueueGenericSend+0x2e>
     abe:	c7 01       	movw	r24, r14
     ac0:	d9 de       	rcall	.-590    	; 0x874 <prvUnlockQueue>
     ac2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xTaskResumeAll>
     ac6:	99 cf       	rjmp	.-206    	; 0x9fa <xQueueGenericSend+0x2e>
     ac8:	c7 01       	movw	r24, r14
     aca:	d4 de       	rcall	.-600    	; 0x874 <prvUnlockQueue>
     acc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xTaskResumeAll>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	29 96       	adiw	r28, 0x09	; 9
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	08 95       	ret

00000af0 <prvInitialiseMutex>:
     af0:	0f 93       	push	r16
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	69 f0       	breq	.+26     	; 0xb10 <prvInitialiseMutex+0x20>
     af6:	fc 01       	movw	r30, r24
     af8:	15 82       	std	Z+5, r1	; 0x05
     afa:	14 82       	std	Z+4, r1	; 0x04
     afc:	11 82       	std	Z+1, r1	; 0x01
     afe:	10 82       	st	Z, r1
     b00:	16 82       	std	Z+6, r1	; 0x06
     b02:	00 e0       	ldi	r16, 0x00	; 0
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	a9 01       	movw	r20, r18
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	5e df       	rcall	.-324    	; 0x9cc <xQueueGenericSend>
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <xQueueCreateMutex>:
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	48 2f       	mov	r20, r24
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	33 df       	rcall	.-410    	; 0x986 <xQueueGenericCreate>
     b20:	ec 01       	movw	r28, r24
     b22:	e6 df       	rcall	.-52     	; 0xaf0 <prvInitialiseMutex>
     b24:	ce 01       	movw	r24, r28
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <xQueueGenericSendFromISR>:
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	8a 01       	movw	r16, r20
     b3a:	fc 01       	movw	r30, r24
     b3c:	56 8d       	ldd	r21, Z+30	; 0x1e
     b3e:	37 8d       	ldd	r19, Z+31	; 0x1f
     b40:	53 17       	cp	r21, r19
     b42:	10 f0       	brcs	.+4      	; 0xb48 <xQueueGenericSendFromISR+0x1c>
     b44:	22 30       	cpi	r18, 0x02	; 2
     b46:	f9 f4       	brne	.+62     	; 0xb86 <xQueueGenericSendFromISR+0x5a>
     b48:	42 2f       	mov	r20, r18
     b4a:	78 01       	movw	r14, r16
     b4c:	ec 01       	movw	r28, r24
     b4e:	1a a1       	ldd	r17, Y+34	; 0x22
     b50:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b52:	ce 01       	movw	r24, r28
     b54:	16 de       	rcall	.-980    	; 0x782 <prvCopyDataToQueue>
     b56:	1f 3f       	cpi	r17, 0xFF	; 255
     b58:	81 f4       	brne	.+32     	; 0xb7a <xQueueGenericSendFromISR+0x4e>
     b5a:	8b 89       	ldd	r24, Y+19	; 0x13
     b5c:	88 23       	and	r24, r24
     b5e:	a9 f0       	breq	.+42     	; 0xb8a <xQueueGenericSendFromISR+0x5e>
     b60:	ce 01       	movw	r24, r28
     b62:	43 96       	adiw	r24, 0x13	; 19
     b64:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xTaskRemoveFromEventList>
     b68:	88 23       	and	r24, r24
     b6a:	89 f0       	breq	.+34     	; 0xb8e <xQueueGenericSendFromISR+0x62>
     b6c:	e1 14       	cp	r14, r1
     b6e:	f1 04       	cpc	r15, r1
     b70:	81 f0       	breq	.+32     	; 0xb92 <xQueueGenericSendFromISR+0x66>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	f7 01       	movw	r30, r14
     b76:	80 83       	st	Z, r24
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <xQueueGenericSendFromISR+0x68>
     b7a:	ff 24       	eor	r15, r15
     b7c:	f3 94       	inc	r15
     b7e:	f1 0e       	add	r15, r17
     b80:	fa a2       	std	Y+34, r15	; 0x22
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	07 c0       	rjmp	.+14     	; 0xb94 <xQueueGenericSendFromISR+0x68>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <xQueueGenericSendFromISR+0x68>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	03 c0       	rjmp	.+6      	; 0xb94 <xQueueGenericSendFromISR+0x68>
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <xQueueGenericSendFromISR+0x68>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <xQueueReceive>:
     ba2:	cf 92       	push	r12
     ba4:	df 92       	push	r13
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	29 97       	sbiw	r28, 0x09	; 9
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	8c 01       	movw	r16, r24
     bc4:	6b 01       	movw	r12, r22
     bc6:	2e 83       	std	Y+6, r18	; 0x06
     bc8:	3f 83       	std	Y+7, r19	; 0x07
     bca:	48 87       	std	Y+8, r20	; 0x08
     bcc:	59 87       	std	Y+9, r21	; 0x09
     bce:	e1 2c       	mov	r14, r1
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	0f 92       	push	r0
     bd6:	f8 01       	movw	r30, r16
     bd8:	f6 8c       	ldd	r15, Z+30	; 0x1e
     bda:	ff 20       	and	r15, r15
     bdc:	99 f0       	breq	.+38     	; 0xc04 <xQueueReceive+0x62>
     bde:	b6 01       	movw	r22, r12
     be0:	c8 01       	movw	r24, r16
     be2:	2e de       	rcall	.-932    	; 0x840 <prvCopyDataFromQueue>
     be4:	fa 94       	dec	r15
     be6:	f8 01       	movw	r30, r16
     be8:	f6 8e       	std	Z+30, r15	; 0x1e
     bea:	80 85       	ldd	r24, Z+8	; 0x08
     bec:	88 23       	and	r24, r24
     bee:	31 f0       	breq	.+12     	; 0xbfc <xQueueReceive+0x5a>
     bf0:	c8 01       	movw	r24, r16
     bf2:	08 96       	adiw	r24, 0x08	; 8
     bf4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xTaskRemoveFromEventList>
     bf8:	81 11       	cpse	r24, r1
     bfa:	e0 dc       	rcall	.-1600   	; 0x5bc <vPortYield>
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	4f c0       	rjmp	.+158    	; 0xca2 <xQueueReceive+0x100>
     c04:	8e 81       	ldd	r24, Y+6	; 0x06
     c06:	9f 81       	ldd	r25, Y+7	; 0x07
     c08:	a8 85       	ldd	r26, Y+8	; 0x08
     c0a:	b9 85       	ldd	r27, Y+9	; 0x09
     c0c:	89 2b       	or	r24, r25
     c0e:	8a 2b       	or	r24, r26
     c10:	8b 2b       	or	r24, r27
     c12:	21 f4       	brne	.+8      	; 0xc1c <xQueueReceive+0x7a>
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	43 c0       	rjmp	.+134    	; 0xca2 <xQueueReceive+0x100>
     c1c:	e1 10       	cpse	r14, r1
     c1e:	06 c0       	rjmp	.+12     	; 0xc2c <xQueueReceive+0x8a>
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	0e 94 62 10 	call	0x20c4	; 0x20c4 <vTaskInternalSetTimeOutState>
     c28:	ee 24       	eor	r14, r14
     c2a:	e3 94       	inc	r14
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	2a d6       	rcall	.+3156   	; 0x1886 <vTaskSuspendAll>
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	0f 92       	push	r0
     c38:	f8 01       	movw	r30, r16
     c3a:	81 a1       	ldd	r24, Z+33	; 0x21
     c3c:	8f 3f       	cpi	r24, 0xFF	; 255
     c3e:	09 f4       	brne	.+2      	; 0xc42 <xQueueReceive+0xa0>
     c40:	11 a2       	std	Z+33, r1	; 0x21
     c42:	f8 01       	movw	r30, r16
     c44:	82 a1       	ldd	r24, Z+34	; 0x22
     c46:	8f 3f       	cpi	r24, 0xFF	; 255
     c48:	09 f4       	brne	.+2      	; 0xc4c <xQueueReceive+0xaa>
     c4a:	12 a2       	std	Z+34, r1	; 0x22
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	be 01       	movw	r22, r28
     c52:	6a 5f       	subi	r22, 0xFA	; 250
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	ce 01       	movw	r24, r28
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xTaskCheckForTimeOut>
     c5e:	81 11       	cpse	r24, r1
     c60:	17 c0       	rjmp	.+46     	; 0xc90 <xQueueReceive+0xee>
     c62:	c8 01       	movw	r24, r16
     c64:	73 dd       	rcall	.-1306   	; 0x74c <prvIsQueueEmpty>
     c66:	88 23       	and	r24, r24
     c68:	79 f0       	breq	.+30     	; 0xc88 <xQueueReceive+0xe6>
     c6a:	4e 81       	ldd	r20, Y+6	; 0x06
     c6c:	5f 81       	ldd	r21, Y+7	; 0x07
     c6e:	68 85       	ldd	r22, Y+8	; 0x08
     c70:	79 85       	ldd	r23, Y+9	; 0x09
     c72:	c8 01       	movw	r24, r16
     c74:	43 96       	adiw	r24, 0x13	; 19
     c76:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <vTaskPlaceOnEventList>
     c7a:	c8 01       	movw	r24, r16
     c7c:	fb dd       	rcall	.-1034   	; 0x874 <prvUnlockQueue>
     c7e:	43 d7       	rcall	.+3718   	; 0x1b06 <xTaskResumeAll>
     c80:	81 11       	cpse	r24, r1
     c82:	a6 cf       	rjmp	.-180    	; 0xbd0 <xQueueReceive+0x2e>
     c84:	9b dc       	rcall	.-1738   	; 0x5bc <vPortYield>
     c86:	a4 cf       	rjmp	.-184    	; 0xbd0 <xQueueReceive+0x2e>
     c88:	c8 01       	movw	r24, r16
     c8a:	f4 dd       	rcall	.-1048   	; 0x874 <prvUnlockQueue>
     c8c:	3c d7       	rcall	.+3704   	; 0x1b06 <xTaskResumeAll>
     c8e:	a0 cf       	rjmp	.-192    	; 0xbd0 <xQueueReceive+0x2e>
     c90:	c8 01       	movw	r24, r16
     c92:	f0 dd       	rcall	.-1056   	; 0x874 <prvUnlockQueue>
     c94:	38 d7       	rcall	.+3696   	; 0x1b06 <xTaskResumeAll>
     c96:	c8 01       	movw	r24, r16
     c98:	59 dd       	rcall	.-1358   	; 0x74c <prvIsQueueEmpty>
     c9a:	88 23       	and	r24, r24
     c9c:	09 f4       	brne	.+2      	; 0xca0 <xQueueReceive+0xfe>
     c9e:	98 cf       	rjmp	.-208    	; 0xbd0 <xQueueReceive+0x2e>
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	29 96       	adiw	r28, 0x09	; 9
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	08 95       	ret

00000cc0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	0f 92       	push	r0
     ccc:	89 a1       	ldd	r24, Y+33	; 0x21
     cce:	8f 3f       	cpi	r24, 0xFF	; 255
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <vQueueWaitForMessageRestricted+0x14>
     cd2:	19 a2       	std	Y+33, r1	; 0x21
     cd4:	8a a1       	ldd	r24, Y+34	; 0x22
     cd6:	8f 3f       	cpi	r24, 0xFF	; 255
     cd8:	09 f4       	brne	.+2      	; 0xcdc <vQueueWaitForMessageRestricted+0x1c>
     cda:	1a a2       	std	Y+34, r1	; 0x22
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     ce0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ce2:	81 11       	cpse	r24, r1
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     ce6:	ce 01       	movw	r24, r28
     ce8:	43 96       	adiw	r24, 0x13	; 19
     cea:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     cee:	ce 01       	movw	r24, r28
     cf0:	c1 dd       	rcall	.-1150   	; 0x874 <prvUnlockQueue>
    }
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     cf8:	fc 01       	movw	r30, r24
     cfa:	44 81       	ldd	r20, Z+4	; 0x04
     cfc:	55 81       	ldd	r21, Z+5	; 0x05
     cfe:	22 81       	ldd	r18, Z+2	; 0x02
     d00:	33 81       	ldd	r19, Z+3	; 0x03
     d02:	24 0f       	add	r18, r20
     d04:	35 1f       	adc	r19, r21
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	b9 01       	movw	r22, r18
     d0c:	68 1b       	sub	r22, r24
     d0e:	79 0b       	sbc	r23, r25
     d10:	cb 01       	movw	r24, r22
     d12:	64 17       	cp	r22, r20
     d14:	75 07       	cpc	r23, r21
     d16:	10 f0       	brcs	.+4      	; 0xd1c <prvBytesInBuffer+0x24>
     d18:	84 1b       	sub	r24, r20
     d1a:	95 0b       	sbc	r25, r21
     d1c:	08 95       	ret

00000d1e <prvInitialiseNewStreamBuffer>:
     d1e:	0f 93       	push	r16
     d20:	fc 01       	movw	r30, r24
     d22:	8f e0       	ldi	r24, 0x0F	; 15
     d24:	df 01       	movw	r26, r30
     d26:	1d 92       	st	X+, r1
     d28:	8a 95       	dec	r24
     d2a:	e9 f7       	brne	.-6      	; 0xd26 <prvInitialiseNewStreamBuffer+0x8>
     d2c:	75 87       	std	Z+13, r23	; 0x0d
     d2e:	64 87       	std	Z+12, r22	; 0x0c
     d30:	55 83       	std	Z+5, r21	; 0x05
     d32:	44 83       	std	Z+4, r20	; 0x04
     d34:	37 83       	std	Z+7, r19	; 0x07
     d36:	26 83       	std	Z+6, r18	; 0x06
     d38:	06 87       	std	Z+14, r16	; 0x0e
     d3a:	0f 91       	pop	r16
     d3c:	08 95       	ret

00000d3e <prvWriteBytesToBuffer>:
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	6c 01       	movw	r12, r24
     d54:	5b 01       	movw	r10, r22
     d56:	7a 01       	movw	r14, r20
     d58:	fc 01       	movw	r30, r24
     d5a:	c2 81       	ldd	r28, Z+2	; 0x02
     d5c:	d3 81       	ldd	r29, Z+3	; 0x03
     d5e:	04 81       	ldd	r16, Z+4	; 0x04
     d60:	15 81       	ldd	r17, Z+5	; 0x05
     d62:	0c 1b       	sub	r16, r28
     d64:	1d 0b       	sbc	r17, r29
     d66:	40 17       	cp	r20, r16
     d68:	51 07       	cpc	r21, r17
     d6a:	08 f4       	brcc	.+2      	; 0xd6e <prvWriteBytesToBuffer+0x30>
     d6c:	8a 01       	movw	r16, r20
     d6e:	f6 01       	movw	r30, r12
     d70:	84 85       	ldd	r24, Z+12	; 0x0c
     d72:	95 85       	ldd	r25, Z+13	; 0x0d
     d74:	a8 01       	movw	r20, r16
     d76:	b5 01       	movw	r22, r10
     d78:	8c 0f       	add	r24, r28
     d7a:	9d 1f       	adc	r25, r29
     d7c:	0e 94 33 26 	call	0x4c66	; 0x4c66 <memcpy>
     d80:	0e 15       	cp	r16, r14
     d82:	1f 05       	cpc	r17, r15
     d84:	58 f4       	brcc	.+22     	; 0xd9c <prvWriteBytesToBuffer+0x5e>
     d86:	a7 01       	movw	r20, r14
     d88:	40 1b       	sub	r20, r16
     d8a:	51 0b       	sbc	r21, r17
     d8c:	b5 01       	movw	r22, r10
     d8e:	60 0f       	add	r22, r16
     d90:	71 1f       	adc	r23, r17
     d92:	f6 01       	movw	r30, r12
     d94:	84 85       	ldd	r24, Z+12	; 0x0c
     d96:	95 85       	ldd	r25, Z+13	; 0x0d
     d98:	0e 94 33 26 	call	0x4c66	; 0x4c66 <memcpy>
     d9c:	ce 01       	movw	r24, r28
     d9e:	8e 0d       	add	r24, r14
     da0:	9f 1d       	adc	r25, r15
     da2:	f6 01       	movw	r30, r12
     da4:	24 81       	ldd	r18, Z+4	; 0x04
     da6:	35 81       	ldd	r19, Z+5	; 0x05
     da8:	82 17       	cp	r24, r18
     daa:	93 07       	cpc	r25, r19
     dac:	10 f0       	brcs	.+4      	; 0xdb2 <prvWriteBytesToBuffer+0x74>
     dae:	82 1b       	sub	r24, r18
     db0:	93 0b       	sbc	r25, r19
     db2:	f6 01       	movw	r30, r12
     db4:	93 83       	std	Z+3, r25	; 0x03
     db6:	82 83       	std	Z+2, r24	; 0x02
     db8:	c7 01       	movw	r24, r14
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	bf 90       	pop	r11
     dcc:	af 90       	pop	r10
     dce:	08 95       	ret

00000dd0 <prvWriteMessageToBuffer>:
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	1f 92       	push	r1
     de2:	1f 92       	push	r1
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	7c 01       	movw	r14, r24
     dea:	6b 01       	movw	r12, r22
     dec:	5a 83       	std	Y+2, r21	; 0x02
     dee:	49 83       	std	Y+1, r20	; 0x01
     df0:	21 15       	cp	r18, r1
     df2:	31 05       	cpc	r19, r1
     df4:	c1 f0       	breq	.+48     	; 0xe26 <prvWriteMessageToBuffer+0x56>
     df6:	fc 01       	movw	r30, r24
     df8:	86 85       	ldd	r24, Z+14	; 0x0e
     dfa:	80 fd       	sbrc	r24, 0
     dfc:	08 c0       	rjmp	.+16     	; 0xe0e <prvWriteMessageToBuffer+0x3e>
     dfe:	42 17       	cp	r20, r18
     e00:	53 07       	cpc	r21, r19
     e02:	08 f4       	brcc	.+2      	; 0xe06 <prvWriteMessageToBuffer+0x36>
     e04:	9a 01       	movw	r18, r20
     e06:	3a 83       	std	Y+2, r19	; 0x02
     e08:	29 83       	std	Y+1, r18	; 0x01
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	0f c0       	rjmp	.+30     	; 0xe2c <prvWriteMessageToBuffer+0x5c>
     e0e:	20 17       	cp	r18, r16
     e10:	31 07       	cpc	r19, r17
     e12:	58 f0       	brcs	.+22     	; 0xe2a <prvWriteMessageToBuffer+0x5a>
     e14:	42 e0       	ldi	r20, 0x02	; 2
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	be 01       	movw	r22, r28
     e1a:	6f 5f       	subi	r22, 0xFF	; 255
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	c7 01       	movw	r24, r14
     e20:	8e df       	rcall	.-228    	; 0xd3e <prvWriteBytesToBuffer>
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <prvWriteMessageToBuffer+0x5c>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <prvWriteMessageToBuffer+0x5c>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	88 23       	and	r24, r24
     e2e:	31 f0       	breq	.+12     	; 0xe3c <prvWriteMessageToBuffer+0x6c>
     e30:	49 81       	ldd	r20, Y+1	; 0x01
     e32:	5a 81       	ldd	r21, Y+2	; 0x02
     e34:	b6 01       	movw	r22, r12
     e36:	c7 01       	movw	r24, r14
     e38:	82 df       	rcall	.-252    	; 0xd3e <prvWriteBytesToBuffer>
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <prvWriteMessageToBuffer+0x70>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	08 95       	ret

00000e56 <prvReadBytesFromBuffer>:
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	7c 01       	movw	r14, r24
     e6c:	5b 01       	movw	r10, r22
     e6e:	e9 01       	movw	r28, r18
     e70:	42 17       	cp	r20, r18
     e72:	53 07       	cpc	r21, r19
     e74:	08 f4       	brcc	.+2      	; 0xe78 <prvReadBytesFromBuffer+0x22>
     e76:	ea 01       	movw	r28, r20
     e78:	20 97       	sbiw	r28, 0x00	; 0
     e7a:	81 f1       	breq	.+96     	; 0xedc <prvReadBytesFromBuffer+0x86>
     e7c:	f7 01       	movw	r30, r14
     e7e:	00 81       	ld	r16, Z
     e80:	11 81       	ldd	r17, Z+1	; 0x01
     e82:	84 81       	ldd	r24, Z+4	; 0x04
     e84:	95 81       	ldd	r25, Z+5	; 0x05
     e86:	80 1b       	sub	r24, r16
     e88:	91 0b       	sbc	r25, r17
     e8a:	6e 01       	movw	r12, r28
     e8c:	8c 17       	cp	r24, r28
     e8e:	9d 07       	cpc	r25, r29
     e90:	08 f4       	brcc	.+2      	; 0xe94 <prvReadBytesFromBuffer+0x3e>
     e92:	6c 01       	movw	r12, r24
     e94:	f7 01       	movw	r30, r14
     e96:	64 85       	ldd	r22, Z+12	; 0x0c
     e98:	75 85       	ldd	r23, Z+13	; 0x0d
     e9a:	60 0f       	add	r22, r16
     e9c:	71 1f       	adc	r23, r17
     e9e:	a6 01       	movw	r20, r12
     ea0:	c5 01       	movw	r24, r10
     ea2:	0e 94 33 26 	call	0x4c66	; 0x4c66 <memcpy>
     ea6:	cc 16       	cp	r12, r28
     ea8:	dd 06       	cpc	r13, r29
     eaa:	58 f4       	brcc	.+22     	; 0xec2 <prvReadBytesFromBuffer+0x6c>
     eac:	ae 01       	movw	r20, r28
     eae:	4c 19       	sub	r20, r12
     eb0:	5d 09       	sbc	r21, r13
     eb2:	f7 01       	movw	r30, r14
     eb4:	64 85       	ldd	r22, Z+12	; 0x0c
     eb6:	75 85       	ldd	r23, Z+13	; 0x0d
     eb8:	c5 01       	movw	r24, r10
     eba:	8c 0d       	add	r24, r12
     ebc:	9d 1d       	adc	r25, r13
     ebe:	0e 94 33 26 	call	0x4c66	; 0x4c66 <memcpy>
     ec2:	0c 0f       	add	r16, r28
     ec4:	1d 1f       	adc	r17, r29
     ec6:	f7 01       	movw	r30, r14
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	95 81       	ldd	r25, Z+5	; 0x05
     ecc:	08 17       	cp	r16, r24
     ece:	19 07       	cpc	r17, r25
     ed0:	10 f0       	brcs	.+4      	; 0xed6 <prvReadBytesFromBuffer+0x80>
     ed2:	08 1b       	sub	r16, r24
     ed4:	19 0b       	sbc	r17, r25
     ed6:	f7 01       	movw	r30, r14
     ed8:	11 83       	std	Z+1, r17	; 0x01
     eda:	00 83       	st	Z, r16
     edc:	ce 01       	movw	r24, r28
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	08 95       	ret

00000ef4 <prvReadMessageFromBuffer>:
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	1f 92       	push	r1
     f12:	1f 92       	push	r1
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	6c 01       	movw	r12, r24
     f1a:	4b 01       	movw	r8, r22
     f1c:	5a 01       	movw	r10, r20
     f1e:	79 01       	movw	r14, r18
     f20:	01 15       	cp	r16, r1
     f22:	11 05       	cpc	r17, r1
     f24:	b1 f0       	breq	.+44     	; 0xf52 <prvReadMessageFromBuffer+0x5e>
     f26:	fc 01       	movw	r30, r24
     f28:	60 80       	ld	r6, Z
     f2a:	71 80       	ldd	r7, Z+1	; 0x01
     f2c:	a8 01       	movw	r20, r16
     f2e:	be 01       	movw	r22, r28
     f30:	6f 5f       	subi	r22, 0xFF	; 255
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	90 df       	rcall	.-224    	; 0xe56 <prvReadBytesFromBuffer>
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	e0 1a       	sub	r14, r16
     f3c:	f1 0a       	sbc	r15, r17
     f3e:	a8 16       	cp	r10, r24
     f40:	b9 06       	cpc	r11, r25
     f42:	30 f4       	brcc	.+12     	; 0xf50 <prvReadMessageFromBuffer+0x5c>
     f44:	f6 01       	movw	r30, r12
     f46:	71 82       	std	Z+1, r7	; 0x01
     f48:	60 82       	st	Z, r6
     f4a:	a1 2c       	mov	r10, r1
     f4c:	b1 2c       	mov	r11, r1
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <prvReadMessageFromBuffer+0x5e>
     f50:	5c 01       	movw	r10, r24
     f52:	97 01       	movw	r18, r14
     f54:	a5 01       	movw	r20, r10
     f56:	b4 01       	movw	r22, r8
     f58:	c6 01       	movw	r24, r12
     f5a:	7d df       	rcall	.-262    	; 0xe56 <prvReadBytesFromBuffer>
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	bf 90       	pop	r11
     f72:	af 90       	pop	r10
     f74:	9f 90       	pop	r9
     f76:	8f 90       	pop	r8
     f78:	7f 90       	pop	r7
     f7a:	6f 90       	pop	r6
     f7c:	08 95       	ret

00000f7e <xStreamBufferGenericCreate>:
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ec 01       	movw	r28, r24
     f8e:	6b 01       	movw	r12, r22
     f90:	41 30       	cpi	r20, 0x01	; 1
     f92:	11 f4       	brne	.+4      	; 0xf98 <xStreamBufferGenericCreate+0x1a>
     f94:	01 e0       	ldi	r16, 0x01	; 1
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <xStreamBufferGenericCreate+0x1c>
     f98:	00 e0       	ldi	r16, 0x00	; 0
     f9a:	c1 14       	cp	r12, r1
     f9c:	d1 04       	cpc	r13, r1
     f9e:	19 f4       	brne	.+6      	; 0xfa6 <xStreamBufferGenericCreate+0x28>
     fa0:	cc 24       	eor	r12, r12
     fa2:	c3 94       	inc	r12
     fa4:	d1 2c       	mov	r13, r1
     fa6:	ce 01       	movw	r24, r28
     fa8:	40 96       	adiw	r24, 0x10	; 16
     faa:	c8 17       	cp	r28, r24
     fac:	d9 07       	cpc	r29, r25
     fae:	20 f4       	brcc	.+8      	; 0xfb8 <xStreamBufferGenericCreate+0x3a>
     fb0:	21 96       	adiw	r28, 0x01	; 1
     fb2:	50 d9       	rcall	.-3424   	; 0x254 <pvPortMalloc>
     fb4:	7c 01       	movw	r14, r24
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <xStreamBufferGenericCreate+0x3e>
     fb8:	e1 2c       	mov	r14, r1
     fba:	f1 2c       	mov	r15, r1
     fbc:	e1 14       	cp	r14, r1
     fbe:	f1 04       	cpc	r15, r1
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <xStreamBufferGenericCreate+0x52>
     fc2:	96 01       	movw	r18, r12
     fc4:	ae 01       	movw	r20, r28
     fc6:	b7 01       	movw	r22, r14
     fc8:	61 5f       	subi	r22, 0xF1	; 241
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	c7 01       	movw	r24, r14
     fce:	a7 de       	rcall	.-690    	; 0xd1e <prvInitialiseNewStreamBuffer>
     fd0:	c7 01       	movw	r24, r14
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	df 90       	pop	r13
     fde:	cf 90       	pop	r12
     fe0:	08 95       	ret

00000fe2 <xStreamBufferReset>:
     fe2:	0f 93       	push	r16
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	0f 92       	push	r0
     fea:	fc 01       	movw	r30, r24
     fec:	20 85       	ldd	r18, Z+8	; 0x08
     fee:	31 85       	ldd	r19, Z+9	; 0x09
     ff0:	23 2b       	or	r18, r19
     ff2:	71 f4       	brne	.+28     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     ff4:	22 85       	ldd	r18, Z+10	; 0x0a
     ff6:	33 85       	ldd	r19, Z+11	; 0x0b
     ff8:	23 2b       	or	r18, r19
     ffa:	61 f4       	brne	.+24     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     ffc:	26 81       	ldd	r18, Z+6	; 0x06
     ffe:	37 81       	ldd	r19, Z+7	; 0x07
    1000:	44 81       	ldd	r20, Z+4	; 0x04
    1002:	55 81       	ldd	r21, Z+5	; 0x05
    1004:	64 85       	ldd	r22, Z+12	; 0x0c
    1006:	75 85       	ldd	r23, Z+13	; 0x0d
    1008:	06 85       	ldd	r16, Z+14	; 0x0e
    100a:	89 de       	rcall	.-750    	; 0xd1e <prvInitialiseNewStreamBuffer>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 91       	pop	r16
    101c:	08 95       	ret

0000101e <xStreamBufferSpacesAvailable>:
    101e:	fc 01       	movw	r30, r24
    1020:	24 81       	ldd	r18, Z+4	; 0x04
    1022:	35 81       	ldd	r19, Z+5	; 0x05
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	42 81       	ldd	r20, Z+2	; 0x02
    102e:	53 81       	ldd	r21, Z+3	; 0x03
    1030:	84 1b       	sub	r24, r20
    1032:	95 0b       	sbc	r25, r21
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	82 17       	cp	r24, r18
    1038:	93 07       	cpc	r25, r19
    103a:	10 f0       	brcs	.+4      	; 0x1040 <xStreamBufferSpacesAvailable+0x22>
    103c:	82 1b       	sub	r24, r18
    103e:	93 0b       	sbc	r25, r19
    1040:	08 95       	ret

00001042 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1042:	2f 92       	push	r2
    1044:	3f 92       	push	r3
    1046:	4f 92       	push	r4
    1048:	5f 92       	push	r5
    104a:	6f 92       	push	r6
    104c:	7f 92       	push	r7
    104e:	8f 92       	push	r8
    1050:	9f 92       	push	r9
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	2b 97       	sbiw	r28, 0x0b	; 11
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	4c 01       	movw	r8, r24
    1078:	7b 87       	std	Y+11, r23	; 0x0b
    107a:	6a 87       	std	Y+10, r22	; 0x0a
    107c:	1a 01       	movw	r2, r20
    107e:	0e 83       	std	Y+6, r16	; 0x06
    1080:	1f 83       	std	Y+7, r17	; 0x07
    1082:	28 87       	std	Y+8, r18	; 0x08
    1084:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1086:	fc 01       	movw	r30, r24
    1088:	84 81       	ldd	r24, Z+4	; 0x04
    108a:	95 81       	ldd	r25, Z+5	; 0x05
    108c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    108e:	26 85       	ldd	r18, Z+14	; 0x0e
    1090:	20 ff       	sbrs	r18, 0
    1092:	0c c0       	rjmp	.+24     	; 0x10ac <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1094:	2a 01       	movw	r4, r20
    1096:	f2 e0       	ldi	r31, 0x02	; 2
    1098:	4f 0e       	add	r4, r31
    109a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    109c:	84 15       	cp	r24, r4
    109e:	95 05       	cpc	r25, r5
    10a0:	58 f4       	brcc	.+22     	; 0x10b8 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    10a2:	1e 82       	std	Y+6, r1	; 0x06
    10a4:	1f 82       	std	Y+7, r1	; 0x07
    10a6:	18 86       	std	Y+8, r1	; 0x08
    10a8:	19 86       	std	Y+9, r1	; 0x09
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    10ac:	84 17       	cp	r24, r20
    10ae:	95 07       	cpc	r25, r21
    10b0:	10 f0       	brcs	.+4      	; 0x10b6 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    10b2:	2a 01       	movw	r4, r20
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    10b6:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    10b8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ba:	9f 81       	ldd	r25, Y+7	; 0x07
    10bc:	a8 85       	ldd	r26, Y+8	; 0x08
    10be:	b9 85       	ldd	r27, Y+9	; 0x09
    10c0:	89 2b       	or	r24, r25
    10c2:	8a 2b       	or	r24, r26
    10c4:	8b 2b       	or	r24, r27
    10c6:	09 f4       	brne	.+2      	; 0x10ca <xStreamBufferSend+0x88>
    10c8:	36 c0       	rjmp	.+108    	; 0x1136 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	e4 d7       	rcall	.+4040   	; 0x2098 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    10d6:	c4 01       	movw	r24, r8
    10d8:	a2 df       	rcall	.-188    	; 0x101e <xStreamBufferSpacesAvailable>
    10da:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    10dc:	84 15       	cp	r24, r4
    10de:	95 05       	cpc	r25, r5
    10e0:	38 f5       	brcc	.+78     	; 0x1130 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 0b 14 	call	0x2816	; 0x2816 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    10ec:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskGetCurrentTaskHandle>
    10f0:	f4 01       	movw	r30, r8
    10f2:	93 87       	std	Z+11, r25	; 0x0b
    10f4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    10fa:	ae 80       	ldd	r10, Y+6	; 0x06
    10fc:	bf 80       	ldd	r11, Y+7	; 0x07
    10fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1100:	d9 84       	ldd	r13, Y+9	; 0x09
    1102:	e1 2c       	mov	r14, r1
    1104:	f1 2c       	mov	r15, r1
    1106:	00 e0       	ldi	r16, 0x00	; 0
    1108:	10 e0       	ldi	r17, 0x00	; 0
    110a:	98 01       	movw	r18, r16
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	ba 01       	movw	r22, r20
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1118:	f4 01       	movw	r30, r8
    111a:	13 86       	std	Z+11, r1	; 0x0b
    111c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    111e:	be 01       	movw	r22, r28
    1120:	6a 5f       	subi	r22, 0xFA	; 250
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	ce 01       	movw	r24, r28
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	de d7       	rcall	.+4028   	; 0x20e6 <xTaskCheckForTimeOut>
    112a:	88 23       	and	r24, r24
    112c:	89 f2       	breq	.-94     	; 0x10d0 <xStreamBufferSend+0x8e>
    112e:	05 c0       	rjmp	.+10     	; 0x113a <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
                    break;
    1134:	02 c0       	rjmp	.+4      	; 0x113a <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1136:	61 2c       	mov	r6, r1
    1138:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    113a:	61 14       	cp	r6, r1
    113c:	71 04       	cpc	r7, r1
    113e:	19 f4       	brne	.+6      	; 0x1146 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1140:	c4 01       	movw	r24, r8
    1142:	6d df       	rcall	.-294    	; 0x101e <xStreamBufferSpacesAvailable>
    1144:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1146:	82 01       	movw	r16, r4
    1148:	93 01       	movw	r18, r6
    114a:	a1 01       	movw	r20, r2
    114c:	6a 85       	ldd	r22, Y+10	; 0x0a
    114e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1150:	c4 01       	movw	r24, r8
    1152:	3e de       	rcall	.-900    	; 0xdd0 <prvWriteMessageToBuffer>
    1154:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1156:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1158:	e9 f0       	breq	.+58     	; 0x1194 <xStreamBufferSend+0x152>
    115a:	c4 01       	movw	r24, r8
    115c:	cd dd       	rcall	.-1126   	; 0xcf8 <prvBytesInBuffer>
    115e:	f4 01       	movw	r30, r8
    1160:	26 81       	ldd	r18, Z+6	; 0x06
    1162:	37 81       	ldd	r19, Z+7	; 0x07
    1164:	82 17       	cp	r24, r18
    1166:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1168:	a8 f0       	brcs	.+42     	; 0x1194 <xStreamBufferSend+0x152>
    116a:	8d d3       	rcall	.+1818   	; 0x1886 <vTaskSuspendAll>
    116c:	f4 01       	movw	r30, r8
    116e:	80 85       	ldd	r24, Z+8	; 0x08
    1170:	91 85       	ldd	r25, Z+9	; 0x09
    1172:	89 2b       	or	r24, r25
    1174:	71 f0       	breq	.+28     	; 0x1192 <xStreamBufferSend+0x150>
    1176:	80 85       	ldd	r24, Z+8	; 0x08
    1178:	91 85       	ldd	r25, Z+9	; 0x09
    117a:	e1 2c       	mov	r14, r1
    117c:	f1 2c       	mov	r15, r1
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	a9 01       	movw	r20, r18
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <xTaskGenericNotify>
    118c:	f4 01       	movw	r30, r8
    118e:	11 86       	std	Z+9, r1	; 0x09
    1190:	10 86       	std	Z+8, r1	; 0x08
    1192:	b9 d4       	rcall	.+2418   	; 0x1b06 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1194:	c6 01       	movw	r24, r12
    1196:	2b 96       	adiw	r28, 0x0b	; 11
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	7f 90       	pop	r7
    11bc:	6f 90       	pop	r6
    11be:	5f 90       	pop	r5
    11c0:	4f 90       	pop	r4
    11c2:	3f 90       	pop	r3
    11c4:	2f 90       	pop	r2
    11c6:	08 95       	ret

000011c8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
    11de:	7b 01       	movw	r14, r22
    11e0:	5a 01       	movw	r10, r20
    11e2:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    11e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    11e6:	80 ff       	sbrs	r24, 0
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    11ea:	8a 01       	movw	r16, r20
    11ec:	0e 5f       	subi	r16, 0xFE	; 254
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    11f2:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11f4:	ce 01       	movw	r24, r28
    11f6:	13 df       	rcall	.-474    	; 0x101e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    11f8:	9c 01       	movw	r18, r24
    11fa:	a5 01       	movw	r20, r10
    11fc:	b7 01       	movw	r22, r14
    11fe:	ce 01       	movw	r24, r28
    1200:	e7 dd       	rcall	.-1074   	; 0xdd0 <prvWriteMessageToBuffer>
    1202:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1204:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1206:	c1 f0       	breq	.+48     	; 0x1238 <xStreamBufferSendFromISR+0x70>
    1208:	ce 01       	movw	r24, r28
    120a:	76 dd       	rcall	.-1300   	; 0xcf8 <prvBytesInBuffer>
    120c:	2e 81       	ldd	r18, Y+6	; 0x06
    120e:	3f 81       	ldd	r19, Y+7	; 0x07
    1210:	82 17       	cp	r24, r18
    1212:	93 07       	cpc	r25, r19
    1214:	88 f0       	brcs	.+34     	; 0x1238 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1216:	88 85       	ldd	r24, Y+8	; 0x08
    1218:	99 85       	ldd	r25, Y+9	; 0x09
    121a:	89 2b       	or	r24, r25
    121c:	69 f0       	breq	.+26     	; 0x1238 <xStreamBufferSendFromISR+0x70>
    121e:	88 85       	ldd	r24, Y+8	; 0x08
    1220:	99 85       	ldd	r25, Y+9	; 0x09
    1222:	e1 2c       	mov	r14, r1
    1224:	f1 2c       	mov	r15, r1
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	a9 01       	movw	r20, r18
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <xTaskGenericNotifyFromISR>
    1234:	19 86       	std	Y+9, r1	; 0x09
    1236:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1238:	c5 01       	movw	r24, r10
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	bf 90       	pop	r11
    124c:	af 90       	pop	r10
    124e:	08 95       	ret

00001250 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1250:	4f 92       	push	r4
    1252:	5f 92       	push	r5
    1254:	6f 92       	push	r6
    1256:	7f 92       	push	r7
    1258:	8f 92       	push	r8
    125a:	9f 92       	push	r9
    125c:	af 92       	push	r10
    125e:	bf 92       	push	r11
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	ec 01       	movw	r28, r24
    1272:	2b 01       	movw	r4, r22
    1274:	3a 01       	movw	r6, r20
    1276:	58 01       	movw	r10, r16
    1278:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    127a:	8e 85       	ldd	r24, Y+14	; 0x0e
    127c:	80 ff       	sbrs	r24, 0
    127e:	05 c0       	rjmp	.+10     	; 0x128a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1280:	68 94       	set
    1282:	88 24       	eor	r8, r8
    1284:	81 f8       	bld	r8, 1
    1286:	91 2c       	mov	r9, r1
    1288:	02 c0       	rjmp	.+4      	; 0x128e <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    128a:	81 2c       	mov	r8, r1
    128c:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    128e:	a1 14       	cp	r10, r1
    1290:	b1 04       	cpc	r11, r1
    1292:	c1 04       	cpc	r12, r1
    1294:	d1 04       	cpc	r13, r1
    1296:	31 f1       	breq	.+76     	; 0x12e4 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    129e:	ce 01       	movw	r24, r28
    12a0:	2b dd       	rcall	.-1450   	; 0xcf8 <prvBytesInBuffer>
    12a2:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    12a4:	88 16       	cp	r8, r24
    12a6:	99 06       	cpc	r9, r25
    12a8:	40 f0       	brcs	.+16     	; 0x12ba <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 0b 14 	call	0x2816	; 0x2816 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    12b4:	82 d7       	rcall	.+3844   	; 0x21ba <xTaskGetCurrentTaskHandle>
    12b6:	99 87       	std	Y+9, r25	; 0x09
    12b8:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    12be:	8e 14       	cp	r8, r14
    12c0:	9f 04       	cpc	r9, r15
    12c2:	98 f0       	brcs	.+38     	; 0x12ea <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    12c4:	e1 2c       	mov	r14, r1
    12c6:	f1 2c       	mov	r15, r1
    12c8:	00 e0       	ldi	r16, 0x00	; 0
    12ca:	10 e0       	ldi	r17, 0x00	; 0
    12cc:	98 01       	movw	r18, r16
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	ba 01       	movw	r22, r20
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	df d7       	rcall	.+4030   	; 0x2296 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    12d8:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    12da:	18 86       	std	Y+8, r1	; 0x08
    12dc:	ce 01       	movw	r24, r28
    12de:	0c dd       	rcall	.-1512   	; 0xcf8 <prvBytesInBuffer>
    12e0:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <xStreamBufferReceive+0x9a>
    12e4:	ce 01       	movw	r24, r28
    12e6:	08 dd       	rcall	.-1520   	; 0xcf8 <prvBytesInBuffer>
    12e8:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    12ea:	8e 14       	cp	r8, r14
    12ec:	9f 04       	cpc	r9, r15
    12ee:	e8 f4       	brcc	.+58     	; 0x132a <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    12f0:	84 01       	movw	r16, r8
    12f2:	97 01       	movw	r18, r14
    12f4:	a3 01       	movw	r20, r6
    12f6:	b2 01       	movw	r22, r4
    12f8:	ce 01       	movw	r24, r28
    12fa:	fc dd       	rcall	.-1032   	; 0xef4 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    12fc:	6c 01       	movw	r12, r24
    12fe:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1300:	b1 f0       	breq	.+44     	; 0x132e <xStreamBufferReceive+0xde>
    1302:	c1 d2       	rcall	.+1410   	; 0x1886 <vTaskSuspendAll>
    1304:	8a 85       	ldd	r24, Y+10	; 0x0a
    1306:	9b 85       	ldd	r25, Y+11	; 0x0b
    1308:	89 2b       	or	r24, r25
    130a:	69 f0       	breq	.+26     	; 0x1326 <xStreamBufferReceive+0xd6>
    130c:	8a 85       	ldd	r24, Y+10	; 0x0a
    130e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1310:	e1 2c       	mov	r14, r1
    1312:	f1 2c       	mov	r15, r1
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <xTaskGenericNotify>
    1322:	1b 86       	std	Y+11, r1	; 0x0b
    1324:	1a 86       	std	Y+10, r1	; 0x0a
    1326:	ef d3       	rcall	.+2014   	; 0x1b06 <xTaskResumeAll>
    1328:	02 c0       	rjmp	.+4      	; 0x132e <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    132a:	c1 2c       	mov	r12, r1
    132c:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    132e:	c6 01       	movw	r24, r12
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	9f 90       	pop	r9
    1346:	8f 90       	pop	r8
    1348:	7f 90       	pop	r7
    134a:	6f 90       	pop	r6
    134c:	5f 90       	pop	r5
    134e:	4f 90       	pop	r4
    1350:	08 95       	ret

00001352 <prvResetNextTaskUnblockTime>:
    1352:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    1356:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    135a:	80 81       	ld	r24, Z
    135c:	81 11       	cpse	r24, r1
    135e:	0c c0       	rjmp	.+24     	; 0x1378 <prvResetNextTaskUnblockTime+0x26>
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	dc 01       	movw	r26, r24
    1366:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    136a:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    136e:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    1372:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    1376:	08 95       	ret
    1378:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    137c:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1380:	07 80       	ldd	r0, Z+7	; 0x07
    1382:	f0 85       	ldd	r31, Z+8	; 0x08
    1384:	e0 2d       	mov	r30, r0
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	a2 81       	ldd	r26, Z+2	; 0x02
    138c:	b3 81       	ldd	r27, Z+3	; 0x03
    138e:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    1392:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    1396:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    139a:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    139e:	08 95       	ret

000013a0 <prvDeleteTCB>:
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	ec 01       	movw	r28, r24
    13a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13aa:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <vPortFree>
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <vPortFree>
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <prvInitialiseNewTask>:
    13ba:	4f 92       	push	r4
    13bc:	5f 92       	push	r5
    13be:	6f 92       	push	r6
    13c0:	7f 92       	push	r7
    13c2:	8f 92       	push	r8
    13c4:	9f 92       	push	r9
    13c6:	af 92       	push	r10
    13c8:	bf 92       	push	r11
    13ca:	cf 92       	push	r12
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	2c 01       	movw	r4, r24
    13da:	5b 01       	movw	r10, r22
    13dc:	4a 01       	movw	r8, r20
    13de:	39 01       	movw	r6, r18
    13e0:	e6 01       	movw	r28, r12
    13e2:	65 ea       	ldi	r22, 0xA5	; 165
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ea:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <memset>
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	82 1a       	sub	r8, r18
    13f6:	91 08       	sbc	r9, r1
    13f8:	88 0e       	add	r8, r24
    13fa:	99 1e       	adc	r9, r25
    13fc:	a1 14       	cp	r10, r1
    13fe:	b1 04       	cpc	r11, r1
    1400:	89 f4       	brne	.+34     	; 0x1424 <prvInitialiseNewTask+0x6a>
    1402:	15 c0       	rjmp	.+42     	; 0x142e <prvInitialiseNewTask+0x74>
    1404:	82 2f       	mov	r24, r18
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	f5 01       	movw	r30, r10
    140a:	e8 0f       	add	r30, r24
    140c:	f9 1f       	adc	r31, r25
    140e:	30 81       	ld	r19, Z
    1410:	de 01       	movw	r26, r28
    1412:	a8 0f       	add	r26, r24
    1414:	b9 1f       	adc	r27, r25
    1416:	5d 96       	adiw	r26, 0x1d	; 29
    1418:	3c 93       	st	X, r19
    141a:	80 81       	ld	r24, Z
    141c:	88 23       	and	r24, r24
    141e:	29 f0       	breq	.+10     	; 0x142a <prvInitialiseNewTask+0x70>
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <prvInitialiseNewTask+0x6c>
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	20 31       	cpi	r18, 0x10	; 16
    1428:	68 f3       	brcs	.-38     	; 0x1404 <prvInitialiseNewTask+0x4a>
    142a:	1c a6       	std	Y+44, r1	; 0x2c
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <prvInitialiseNewTask+0x76>
    142e:	1d 8e       	std	Y+29, r1	; 0x1d
    1430:	0a 30       	cpi	r16, 0x0A	; 10
    1432:	08 f0       	brcs	.+2      	; 0x1436 <prvInitialiseNewTask+0x7c>
    1434:	09 e0       	ldi	r16, 0x09	; 9
    1436:	0a 8f       	std	Y+26, r16	; 0x1a
    1438:	0d a7       	std	Y+45, r16	; 0x2d
    143a:	1e a6       	std	Y+46, r1	; 0x2e
    143c:	ce 01       	movw	r24, r28
    143e:	02 96       	adiw	r24, 0x02	; 2
    1440:	00 d8       	rcall	.-4096   	; 0x442 <vListInitialiseItem>
    1442:	ce 01       	movw	r24, r28
    1444:	0e 96       	adiw	r24, 0x0e	; 14
    1446:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialiseItem>
    144a:	db 87       	std	Y+11, r29	; 0x0b
    144c:	ca 87       	std	Y+10, r28	; 0x0a
    144e:	8a e0       	ldi	r24, 0x0A	; 10
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	80 1b       	sub	r24, r16
    1458:	91 09       	sbc	r25, r1
    145a:	a1 09       	sbc	r26, r1
    145c:	b1 09       	sbc	r27, r1
    145e:	8e 87       	std	Y+14, r24	; 0x0e
    1460:	9f 87       	std	Y+15, r25	; 0x0f
    1462:	a8 8b       	std	Y+16, r26	; 0x10
    1464:	b9 8b       	std	Y+17, r27	; 0x11
    1466:	df 8b       	std	Y+23, r29	; 0x17
    1468:	ce 8b       	std	Y+22, r28	; 0x16
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	fe 01       	movw	r30, r28
    146e:	bf 96       	adiw	r30, 0x2f	; 47
    1470:	df 01       	movw	r26, r30
    1472:	1d 92       	st	X+, r1
    1474:	8a 95       	dec	r24
    1476:	e9 f7       	brne	.-6      	; 0x1472 <prvInitialiseNewTask+0xb8>
    1478:	1b aa       	std	Y+51, r1	; 0x33
    147a:	a3 01       	movw	r20, r6
    147c:	b2 01       	movw	r22, r4
    147e:	c4 01       	movw	r24, r8
    1480:	54 d8       	rcall	.-3928   	; 0x52a <pxPortInitialiseStack>
    1482:	99 83       	std	Y+1, r25	; 0x01
    1484:	88 83       	st	Y, r24
    1486:	e1 14       	cp	r14, r1
    1488:	f1 04       	cpc	r15, r1
    148a:	19 f0       	breq	.+6      	; 0x1492 <prvInitialiseNewTask+0xd8>
    148c:	f7 01       	movw	r30, r14
    148e:	d1 83       	std	Z+1, r29	; 0x01
    1490:	c0 83       	st	Z, r28
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	bf 90       	pop	r11
    14a2:	af 90       	pop	r10
    14a4:	9f 90       	pop	r9
    14a6:	8f 90       	pop	r8
    14a8:	7f 90       	pop	r7
    14aa:	6f 90       	pop	r6
    14ac:	5f 90       	pop	r5
    14ae:	4f 90       	pop	r4
    14b0:	08 95       	ret

000014b2 <prvInitialiseTaskLists>:
    14b2:	cf 93       	push	r28
    14b4:	c0 e0       	ldi	r28, 0x00	; 0
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <prvInitialiseTaskLists+0x18>
    14b8:	2b e0       	ldi	r18, 0x0B	; 11
    14ba:	c2 9f       	mul	r28, r18
    14bc:	c0 01       	movw	r24, r0
    14be:	11 24       	eor	r1, r1
    14c0:	85 55       	subi	r24, 0x55	; 85
    14c2:	9f 4e       	sbci	r25, 0xEF	; 239
    14c4:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14c8:	cf 5f       	subi	r28, 0xFF	; 255
    14ca:	ca 30       	cpi	r28, 0x0A	; 10
    14cc:	a8 f3       	brcs	.-22     	; 0x14b8 <prvInitialiseTaskLists+0x6>
    14ce:	80 ea       	ldi	r24, 0xA0	; 160
    14d0:	90 e1       	ldi	r25, 0x10	; 16
    14d2:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14d6:	85 e9       	ldi	r24, 0x95	; 149
    14d8:	90 e1       	ldi	r25, 0x10	; 16
    14da:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14de:	86 e8       	ldi	r24, 0x86	; 134
    14e0:	90 e1       	ldi	r25, 0x10	; 16
    14e2:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14e6:	8b e7       	ldi	r24, 0x7B	; 123
    14e8:	90 e1       	ldi	r25, 0x10	; 16
    14ea:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14ee:	8f e6       	ldi	r24, 0x6F	; 111
    14f0:	90 e1       	ldi	r25, 0x10	; 16
    14f2:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14f6:	80 ea       	ldi	r24, 0xA0	; 160
    14f8:	90 e1       	ldi	r25, 0x10	; 16
    14fa:	90 93 94 10 	sts	0x1094, r25	; 0x801094 <pxDelayedTaskList+0x1>
    14fe:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <pxDelayedTaskList>
    1502:	85 e9       	ldi	r24, 0x95	; 149
    1504:	90 e1       	ldi	r25, 0x10	; 16
    1506:	90 93 92 10 	sts	0x1092, r25	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    150a:	80 93 91 10 	sts	0x1091, r24	; 0x801091 <pxOverflowDelayedTaskList>
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <prvAddNewTaskToReadyList>:
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	0f 92       	push	r0
    151e:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	80 93 6e 10 	sts	0x106E, r24	; 0x80106e <uxCurrentNumberOfTasks>
    1528:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    152c:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1530:	89 2b       	or	r24, r25
    1532:	51 f4       	brne	.+20     	; 0x1548 <prvAddNewTaskToReadyList+0x36>
    1534:	d0 93 1a 11 	sts	0x111A, r29	; 0x80111a <pxCurrentTCB+0x1>
    1538:	c0 93 19 11 	sts	0x1119, r28	; 0x801119 <pxCurrentTCB>
    153c:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 f4       	brne	.+36     	; 0x1568 <prvAddNewTaskToReadyList+0x56>
    1544:	b6 df       	rcall	.-148    	; 0x14b2 <prvInitialiseTaskLists>
    1546:	10 c0       	rjmp	.+32     	; 0x1568 <prvAddNewTaskToReadyList+0x56>
    1548:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    154c:	81 11       	cpse	r24, r1
    154e:	0c c0       	rjmp	.+24     	; 0x1568 <prvAddNewTaskToReadyList+0x56>
    1550:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1554:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1558:	92 8d       	ldd	r25, Z+26	; 0x1a
    155a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    155c:	89 17       	cp	r24, r25
    155e:	20 f0       	brcs	.+8      	; 0x1568 <prvAddNewTaskToReadyList+0x56>
    1560:	d0 93 1a 11 	sts	0x111A, r29	; 0x80111a <pxCurrentTCB+0x1>
    1564:	c0 93 19 11 	sts	0x1119, r28	; 0x801119 <pxCurrentTCB>
    1568:	80 91 61 10 	lds	r24, 0x1061	; 0x801061 <uxTaskNumber>
    156c:	8f 5f       	subi	r24, 0xFF	; 255
    156e:	80 93 61 10 	sts	0x1061, r24	; 0x801061 <uxTaskNumber>
    1572:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1574:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    1578:	8e 17       	cp	r24, r30
    157a:	10 f4       	brcc	.+4      	; 0x1580 <prvAddNewTaskToReadyList+0x6e>
    157c:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    1580:	8b e0       	ldi	r24, 0x0B	; 11
    1582:	8e 9f       	mul	r24, r30
    1584:	f0 01       	movw	r30, r0
    1586:	11 24       	eor	r1, r1
    1588:	e5 55       	subi	r30, 0x55	; 85
    158a:	ff 4e       	sbci	r31, 0xEF	; 239
    158c:	01 80       	ldd	r0, Z+1	; 0x01
    158e:	f2 81       	ldd	r31, Z+2	; 0x02
    1590:	e0 2d       	mov	r30, r0
    1592:	ff 83       	std	Y+7, r31	; 0x07
    1594:	ee 83       	std	Y+6, r30	; 0x06
    1596:	26 81       	ldd	r18, Z+6	; 0x06
    1598:	37 81       	ldd	r19, Z+7	; 0x07
    159a:	39 87       	std	Y+9, r19	; 0x09
    159c:	28 87       	std	Y+8, r18	; 0x08
    159e:	a6 81       	ldd	r26, Z+6	; 0x06
    15a0:	b7 81       	ldd	r27, Z+7	; 0x07
    15a2:	9e 01       	movw	r18, r28
    15a4:	2e 5f       	subi	r18, 0xFE	; 254
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	15 96       	adiw	r26, 0x05	; 5
    15aa:	3c 93       	st	X, r19
    15ac:	2e 93       	st	-X, r18
    15ae:	14 97       	sbiw	r26, 0x04	; 4
    15b0:	37 83       	std	Z+7, r19	; 0x07
    15b2:	26 83       	std	Z+6, r18	; 0x06
    15b4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15b6:	8e 9f       	mul	r24, r30
    15b8:	f0 01       	movw	r30, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	e5 55       	subi	r30, 0x55	; 85
    15be:	ff 4e       	sbci	r31, 0xEF	; 239
    15c0:	fd 87       	std	Y+13, r31	; 0x0d
    15c2:	ec 87       	std	Y+12, r30	; 0x0c
    15c4:	80 81       	ld	r24, Z
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	80 83       	st	Z, r24
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    15d2:	88 23       	and	r24, r24
    15d4:	51 f0       	breq	.+20     	; 0x15ea <prvAddNewTaskToReadyList+0xd8>
    15d6:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    15da:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    15de:	92 8d       	ldd	r25, Z+26	; 0x1a
    15e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15e2:	98 17       	cp	r25, r24
    15e4:	10 f4       	brcc	.+4      	; 0x15ea <prvAddNewTaskToReadyList+0xd8>
    15e6:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <prvCheckTasksWaitingTermination>:
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	1b c0       	rjmp	.+54     	; 0x162c <prvCheckTasksWaitingTermination+0x3c>
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	0f 92       	push	r0
    15fc:	e0 91 82 10 	lds	r30, 0x1082	; 0x801082 <xTasksWaitingTermination+0x7>
    1600:	f0 91 83 10 	lds	r31, 0x1083	; 0x801083 <xTasksWaitingTermination+0x8>
    1604:	c0 85       	ldd	r28, Z+8	; 0x08
    1606:	d1 85       	ldd	r29, Z+9	; 0x09
    1608:	ce 01       	movw	r24, r28
    160a:	02 96       	adiw	r24, 0x02	; 2
    160c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
    1610:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    1614:	81 50       	subi	r24, 0x01	; 1
    1616:	80 93 6e 10 	sts	0x106E, r24	; 0x80106e <uxCurrentNumberOfTasks>
    161a:	80 91 7a 10 	lds	r24, 0x107A	; 0x80107a <uxDeletedTasksWaitingCleanUp>
    161e:	81 50       	subi	r24, 0x01	; 1
    1620:	80 93 7a 10 	sts	0x107A, r24	; 0x80107a <uxDeletedTasksWaitingCleanUp>
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	ce 01       	movw	r24, r28
    162a:	ba de       	rcall	.-652    	; 0x13a0 <prvDeleteTCB>
    162c:	80 91 7a 10 	lds	r24, 0x107A	; 0x80107a <uxDeletedTasksWaitingCleanUp>
    1630:	81 11       	cpse	r24, r1
    1632:	e1 cf       	rjmp	.-62     	; 0x15f6 <prvCheckTasksWaitingTermination+0x6>
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	08 95       	ret

0000163a <prvAddCurrentTaskToDelayedList>:
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	6b 01       	movw	r12, r22
    1650:	7c 01       	movw	r14, r24
    1652:	c4 2f       	mov	r28, r20
    1654:	80 90 6a 10 	lds	r8, 0x106A	; 0x80106a <xTickCount>
    1658:	90 90 6b 10 	lds	r9, 0x106B	; 0x80106b <xTickCount+0x1>
    165c:	a0 90 6c 10 	lds	r10, 0x106C	; 0x80106c <xTickCount+0x2>
    1660:	b0 90 6d 10 	lds	r11, 0x106D	; 0x80106d <xTickCount+0x3>
    1664:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    1668:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    166c:	02 96       	adiw	r24, 0x02	; 2
    166e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	c8 16       	cp	r12, r24
    1676:	d8 06       	cpc	r13, r24
    1678:	e8 06       	cpc	r14, r24
    167a:	f8 06       	cpc	r15, r24
    167c:	b1 f5       	brne	.+108    	; 0x16ea <prvAddCurrentTaskToDelayedList+0xb0>
    167e:	cc 23       	and	r28, r28
    1680:	a1 f1       	breq	.+104    	; 0x16ea <prvAddCurrentTaskToDelayedList+0xb0>
    1682:	ef e6       	ldi	r30, 0x6F	; 111
    1684:	f0 e1       	ldi	r31, 0x10	; 16
    1686:	a1 81       	ldd	r26, Z+1	; 0x01
    1688:	b2 81       	ldd	r27, Z+2	; 0x02
    168a:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    168e:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1692:	bf 83       	std	Y+7, r27	; 0x07
    1694:	ae 83       	std	Y+6, r26	; 0x06
    1696:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    169a:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    169e:	16 96       	adiw	r26, 0x06	; 6
    16a0:	8d 91       	ld	r24, X+
    16a2:	9c 91       	ld	r25, X
    16a4:	17 97       	sbiw	r26, 0x07	; 7
    16a6:	99 87       	std	Y+9, r25	; 0x09
    16a8:	88 87       	std	Y+8, r24	; 0x08
    16aa:	16 96       	adiw	r26, 0x06	; 6
    16ac:	cd 91       	ld	r28, X+
    16ae:	dc 91       	ld	r29, X
    16b0:	17 97       	sbiw	r26, 0x07	; 7
    16b2:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    16b6:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    16ba:	02 96       	adiw	r24, 0x02	; 2
    16bc:	9d 83       	std	Y+5, r25	; 0x05
    16be:	8c 83       	std	Y+4, r24	; 0x04
    16c0:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    16c4:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    16c8:	02 96       	adiw	r24, 0x02	; 2
    16ca:	17 96       	adiw	r26, 0x07	; 7
    16cc:	9c 93       	st	X, r25
    16ce:	8e 93       	st	-X, r24
    16d0:	16 97       	sbiw	r26, 0x06	; 6
    16d2:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    16d6:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    16da:	1d 96       	adiw	r26, 0x0d	; 13
    16dc:	fc 93       	st	X, r31
    16de:	ee 93       	st	-X, r30
    16e0:	1c 97       	sbiw	r26, 0x0c	; 12
    16e2:	80 81       	ld	r24, Z
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	80 83       	st	Z, r24
    16e8:	3f c0       	rjmp	.+126    	; 0x1768 <prvAddCurrentTaskToDelayedList+0x12e>
    16ea:	c8 0c       	add	r12, r8
    16ec:	d9 1c       	adc	r13, r9
    16ee:	ea 1c       	adc	r14, r10
    16f0:	fb 1c       	adc	r15, r11
    16f2:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    16f6:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    16fa:	c2 82       	std	Z+2, r12	; 0x02
    16fc:	d3 82       	std	Z+3, r13	; 0x03
    16fe:	e4 82       	std	Z+4, r14	; 0x04
    1700:	f5 82       	std	Z+5, r15	; 0x05
    1702:	c8 14       	cp	r12, r8
    1704:	d9 04       	cpc	r13, r9
    1706:	ea 04       	cpc	r14, r10
    1708:	fb 04       	cpc	r15, r11
    170a:	68 f4       	brcc	.+26     	; 0x1726 <prvAddCurrentTaskToDelayedList+0xec>
    170c:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    1710:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1714:	80 91 91 10 	lds	r24, 0x1091	; 0x801091 <pxOverflowDelayedTaskList>
    1718:	90 91 92 10 	lds	r25, 0x1092	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    171c:	6e 5f       	subi	r22, 0xFE	; 254
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    1724:	21 c0       	rjmp	.+66     	; 0x1768 <prvAddCurrentTaskToDelayedList+0x12e>
    1726:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    172a:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    172e:	80 91 93 10 	lds	r24, 0x1093	; 0x801093 <pxDelayedTaskList>
    1732:	90 91 94 10 	lds	r25, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1736:	6e 5f       	subi	r22, 0xFE	; 254
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    173e:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <xNextTaskUnblockTime>
    1742:	90 91 5e 10 	lds	r25, 0x105E	; 0x80105e <xNextTaskUnblockTime+0x1>
    1746:	a0 91 5f 10 	lds	r26, 0x105F	; 0x80105f <xNextTaskUnblockTime+0x2>
    174a:	b0 91 60 10 	lds	r27, 0x1060	; 0x801060 <xNextTaskUnblockTime+0x3>
    174e:	c8 16       	cp	r12, r24
    1750:	d9 06       	cpc	r13, r25
    1752:	ea 06       	cpc	r14, r26
    1754:	fb 06       	cpc	r15, r27
    1756:	40 f4       	brcc	.+16     	; 0x1768 <prvAddCurrentTaskToDelayedList+0x12e>
    1758:	c0 92 5d 10 	sts	0x105D, r12	; 0x80105d <xNextTaskUnblockTime>
    175c:	d0 92 5e 10 	sts	0x105E, r13	; 0x80105e <xNextTaskUnblockTime+0x1>
    1760:	e0 92 5f 10 	sts	0x105F, r14	; 0x80105f <xNextTaskUnblockTime+0x2>
    1764:	f0 92 60 10 	sts	0x1060, r15	; 0x801060 <xNextTaskUnblockTime+0x3>
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	df 90       	pop	r13
    1772:	cf 90       	pop	r12
    1774:	bf 90       	pop	r11
    1776:	af 90       	pop	r10
    1778:	9f 90       	pop	r9
    177a:	8f 90       	pop	r8
    177c:	08 95       	ret

0000177e <xTaskCreate>:
    177e:	2f 92       	push	r2
    1780:	3f 92       	push	r3
    1782:	4f 92       	push	r4
    1784:	5f 92       	push	r5
    1786:	6f 92       	push	r6
    1788:	7f 92       	push	r7
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	3c 01       	movw	r6, r24
    17a2:	1b 01       	movw	r2, r22
    17a4:	4a 01       	movw	r8, r20
    17a6:	29 01       	movw	r4, r18
    17a8:	ca 01       	movw	r24, r20
    17aa:	0e 94 2a 01 	call	0x254	; 0x254 <pvPortMalloc>
    17ae:	6c 01       	movw	r12, r24
    17b0:	89 2b       	or	r24, r25
    17b2:	71 f0       	breq	.+28     	; 0x17d0 <xTaskCreate+0x52>
    17b4:	84 e3       	ldi	r24, 0x34	; 52
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 2a 01 	call	0x254	; 0x254 <pvPortMalloc>
    17bc:	ec 01       	movw	r28, r24
    17be:	89 2b       	or	r24, r25
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <xTaskCreate+0x4a>
    17c2:	dc 8e       	std	Y+28, r13	; 0x1c
    17c4:	cb 8e       	std	Y+27, r12	; 0x1b
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <xTaskCreate+0x56>
    17c8:	c6 01       	movw	r24, r12
    17ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <vPortFree>
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <xTaskCreate+0x56>
    17d0:	c0 e0       	ldi	r28, 0x00	; 0
    17d2:	d0 e0       	ldi	r29, 0x00	; 0
    17d4:	20 97       	sbiw	r28, 0x00	; 0
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <xTaskCreate+0x72>
    17d8:	a1 2c       	mov	r10, r1
    17da:	b1 2c       	mov	r11, r1
    17dc:	6e 01       	movw	r12, r28
    17de:	92 01       	movw	r18, r4
    17e0:	a4 01       	movw	r20, r8
    17e2:	b1 01       	movw	r22, r2
    17e4:	c3 01       	movw	r24, r6
    17e6:	e9 dd       	rcall	.-1070   	; 0x13ba <prvInitialiseNewTask>
    17e8:	ce 01       	movw	r24, r28
    17ea:	93 de       	rcall	.-730    	; 0x1512 <prvAddNewTaskToReadyList>
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <xTaskCreate+0x74>
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	9f 90       	pop	r9
    1806:	8f 90       	pop	r8
    1808:	7f 90       	pop	r7
    180a:	6f 90       	pop	r6
    180c:	5f 90       	pop	r5
    180e:	4f 90       	pop	r4
    1810:	3f 90       	pop	r3
    1812:	2f 90       	pop	r2
    1814:	08 95       	ret

00001816 <vTaskStartScheduler>:
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	0f 2e       	mov	r0, r31
    181e:	fb e5       	ldi	r31, 0x5B	; 91
    1820:	ef 2e       	mov	r14, r31
    1822:	f0 e1       	ldi	r31, 0x10	; 16
    1824:	ff 2e       	mov	r15, r31
    1826:	f0 2d       	mov	r31, r0
    1828:	00 e0       	ldi	r16, 0x00	; 0
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 ec       	ldi	r20, 0xC0	; 192
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	6d e3       	ldi	r22, 0x3D	; 61
    1834:	72 e0       	ldi	r23, 0x02	; 2
    1836:	8c e7       	ldi	r24, 0x7C	; 124
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a1 df       	rcall	.-190    	; 0x177e <xTaskCreate>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	11 f4       	brne	.+4      	; 0x1844 <vTaskStartScheduler+0x2e>
    1840:	0e 94 af 14 	call	0x295e	; 0x295e <xTimerCreateTimerTask>
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	c9 f4       	brne	.+50     	; 0x187a <vTaskStartScheduler+0x64>
    1848:	f8 94       	cli
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	9f ef       	ldi	r25, 0xFF	; 255
    184e:	dc 01       	movw	r26, r24
    1850:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    1854:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    1858:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    185c:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	80 93 68 10 	sts	0x1068, r24	; 0x801068 <xSchedulerRunning>
    1866:	10 92 6a 10 	sts	0x106A, r1	; 0x80106a <xTickCount>
    186a:	10 92 6b 10 	sts	0x106B, r1	; 0x80106b <xTickCount+0x1>
    186e:	10 92 6c 10 	sts	0x106C, r1	; 0x80106c <xTickCount+0x2>
    1872:	10 92 6d 10 	sts	0x106D, r1	; 0x80106d <xTickCount+0x3>
    1876:	0e 94 ac 02 	call	0x558	; 0x558 <xPortStartScheduler>
    187a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    187e:	0f 91       	pop	r16
    1880:	ff 90       	pop	r15
    1882:	ef 90       	pop	r14
    1884:	08 95       	ret

00001886 <vTaskSuspendAll>:
    1886:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <uxSchedulerSuspended>
    1890:	08 95       	ret

00001892 <xTaskGetTickCount>:
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	0f 92       	push	r0
    1898:	60 91 6a 10 	lds	r22, 0x106A	; 0x80106a <xTickCount>
    189c:	70 91 6b 10 	lds	r23, 0x106B	; 0x80106b <xTickCount+0x1>
    18a0:	80 91 6c 10 	lds	r24, 0x106C	; 0x80106c <xTickCount+0x2>
    18a4:	90 91 6d 10 	lds	r25, 0x106D	; 0x80106d <xTickCount+0x3>
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	08 95       	ret

000018ae <xTaskIncrementTick>:
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    18be:	81 11       	cpse	r24, r1
    18c0:	05 c1       	rjmp	.+522    	; 0x1acc <xTaskIncrementTick+0x21e>
    18c2:	c0 90 6a 10 	lds	r12, 0x106A	; 0x80106a <xTickCount>
    18c6:	d0 90 6b 10 	lds	r13, 0x106B	; 0x80106b <xTickCount+0x1>
    18ca:	e0 90 6c 10 	lds	r14, 0x106C	; 0x80106c <xTickCount+0x2>
    18ce:	f0 90 6d 10 	lds	r15, 0x106D	; 0x80106d <xTickCount+0x3>
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	c8 1a       	sub	r12, r24
    18d6:	d8 0a       	sbc	r13, r24
    18d8:	e8 0a       	sbc	r14, r24
    18da:	f8 0a       	sbc	r15, r24
    18dc:	c0 92 6a 10 	sts	0x106A, r12	; 0x80106a <xTickCount>
    18e0:	d0 92 6b 10 	sts	0x106B, r13	; 0x80106b <xTickCount+0x1>
    18e4:	e0 92 6c 10 	sts	0x106C, r14	; 0x80106c <xTickCount+0x2>
    18e8:	f0 92 6d 10 	sts	0x106D, r15	; 0x80106d <xTickCount+0x3>
    18ec:	c1 14       	cp	r12, r1
    18ee:	d1 04       	cpc	r13, r1
    18f0:	e1 04       	cpc	r14, r1
    18f2:	f1 04       	cpc	r15, r1
    18f4:	b1 f4       	brne	.+44     	; 0x1922 <xTaskIncrementTick+0x74>
    18f6:	80 91 93 10 	lds	r24, 0x1093	; 0x801093 <pxDelayedTaskList>
    18fa:	90 91 94 10 	lds	r25, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    18fe:	20 91 91 10 	lds	r18, 0x1091	; 0x801091 <pxOverflowDelayedTaskList>
    1902:	30 91 92 10 	lds	r19, 0x1092	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    1906:	30 93 94 10 	sts	0x1094, r19	; 0x801094 <pxDelayedTaskList+0x1>
    190a:	20 93 93 10 	sts	0x1093, r18	; 0x801093 <pxDelayedTaskList>
    190e:	90 93 92 10 	sts	0x1092, r25	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    1912:	80 93 91 10 	sts	0x1091, r24	; 0x801091 <pxOverflowDelayedTaskList>
    1916:	80 91 62 10 	lds	r24, 0x1062	; 0x801062 <xNumOfOverflows>
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	80 93 62 10 	sts	0x1062, r24	; 0x801062 <xNumOfOverflows>
    1920:	18 dd       	rcall	.-1488   	; 0x1352 <prvResetNextTaskUnblockTime>
    1922:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <xNextTaskUnblockTime>
    1926:	90 91 5e 10 	lds	r25, 0x105E	; 0x80105e <xNextTaskUnblockTime+0x1>
    192a:	a0 91 5f 10 	lds	r26, 0x105F	; 0x80105f <xNextTaskUnblockTime+0x2>
    192e:	b0 91 60 10 	lds	r27, 0x1060	; 0x801060 <xNextTaskUnblockTime+0x3>
    1932:	c8 16       	cp	r12, r24
    1934:	d9 06       	cpc	r13, r25
    1936:	ea 06       	cpc	r14, r26
    1938:	fb 06       	cpc	r15, r27
    193a:	20 f4       	brcc	.+8      	; 0x1944 <xTaskIncrementTick+0x96>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	b2 c0       	rjmp	.+356    	; 0x1aa4 <xTaskIncrementTick+0x1f6>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <xTaskIncrementTick+0x98>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    194a:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    194e:	90 81       	ld	r25, Z
    1950:	91 11       	cpse	r25, r1
    1952:	0c c0       	rjmp	.+24     	; 0x196c <xTaskIncrementTick+0xbe>
    1954:	4f ef       	ldi	r20, 0xFF	; 255
    1956:	5f ef       	ldi	r21, 0xFF	; 255
    1958:	ba 01       	movw	r22, r20
    195a:	40 93 5d 10 	sts	0x105D, r20	; 0x80105d <xNextTaskUnblockTime>
    195e:	50 93 5e 10 	sts	0x105E, r21	; 0x80105e <xNextTaskUnblockTime+0x1>
    1962:	60 93 5f 10 	sts	0x105F, r22	; 0x80105f <xNextTaskUnblockTime+0x2>
    1966:	70 93 60 10 	sts	0x1060, r23	; 0x801060 <xNextTaskUnblockTime+0x3>
    196a:	9c c0       	rjmp	.+312    	; 0x1aa4 <xTaskIncrementTick+0x1f6>
    196c:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    1970:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1974:	07 80       	ldd	r0, Z+7	; 0x07
    1976:	f0 85       	ldd	r31, Z+8	; 0x08
    1978:	e0 2d       	mov	r30, r0
    197a:	00 84       	ldd	r0, Z+8	; 0x08
    197c:	f1 85       	ldd	r31, Z+9	; 0x09
    197e:	e0 2d       	mov	r30, r0
    1980:	42 81       	ldd	r20, Z+2	; 0x02
    1982:	53 81       	ldd	r21, Z+3	; 0x03
    1984:	64 81       	ldd	r22, Z+4	; 0x04
    1986:	75 81       	ldd	r23, Z+5	; 0x05
    1988:	c4 16       	cp	r12, r20
    198a:	d5 06       	cpc	r13, r21
    198c:	e6 06       	cpc	r14, r22
    198e:	f7 06       	cpc	r15, r23
    1990:	48 f4       	brcc	.+18     	; 0x19a4 <xTaskIncrementTick+0xf6>
    1992:	40 93 5d 10 	sts	0x105D, r20	; 0x80105d <xNextTaskUnblockTime>
    1996:	50 93 5e 10 	sts	0x105E, r21	; 0x80105e <xNextTaskUnblockTime+0x1>
    199a:	60 93 5f 10 	sts	0x105F, r22	; 0x80105f <xNextTaskUnblockTime+0x2>
    199e:	70 93 60 10 	sts	0x1060, r23	; 0x801060 <xNextTaskUnblockTime+0x3>
    19a2:	80 c0       	rjmp	.+256    	; 0x1aa4 <xTaskIncrementTick+0x1f6>
    19a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    19a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    19a8:	c6 81       	ldd	r28, Z+6	; 0x06
    19aa:	d7 81       	ldd	r29, Z+7	; 0x07
    19ac:	20 85       	ldd	r18, Z+8	; 0x08
    19ae:	31 85       	ldd	r19, Z+9	; 0x09
    19b0:	3f 83       	std	Y+7, r19	; 0x07
    19b2:	2e 83       	std	Y+6, r18	; 0x06
    19b4:	c0 85       	ldd	r28, Z+8	; 0x08
    19b6:	d1 85       	ldd	r29, Z+9	; 0x09
    19b8:	26 81       	ldd	r18, Z+6	; 0x06
    19ba:	37 81       	ldd	r19, Z+7	; 0x07
    19bc:	3d 83       	std	Y+5, r19	; 0x05
    19be:	2c 83       	std	Y+4, r18	; 0x04
    19c0:	11 96       	adiw	r26, 0x01	; 1
    19c2:	4d 91       	ld	r20, X+
    19c4:	5c 91       	ld	r21, X
    19c6:	12 97       	sbiw	r26, 0x02	; 2
    19c8:	9f 01       	movw	r18, r30
    19ca:	2e 5f       	subi	r18, 0xFE	; 254
    19cc:	3f 4f       	sbci	r19, 0xFF	; 255
    19ce:	42 17       	cp	r20, r18
    19d0:	53 07       	cpc	r21, r19
    19d2:	31 f4       	brne	.+12     	; 0x19e0 <xTaskIncrementTick+0x132>
    19d4:	40 85       	ldd	r20, Z+8	; 0x08
    19d6:	51 85       	ldd	r21, Z+9	; 0x09
    19d8:	12 96       	adiw	r26, 0x02	; 2
    19da:	5c 93       	st	X, r21
    19dc:	4e 93       	st	-X, r20
    19de:	11 97       	sbiw	r26, 0x01	; 1
    19e0:	15 86       	std	Z+13, r1	; 0x0d
    19e2:	14 86       	std	Z+12, r1	; 0x0c
    19e4:	9c 91       	ld	r25, X
    19e6:	91 50       	subi	r25, 0x01	; 1
    19e8:	9c 93       	st	X, r25
    19ea:	a0 8d       	ldd	r26, Z+24	; 0x18
    19ec:	b1 8d       	ldd	r27, Z+25	; 0x19
    19ee:	10 97       	sbiw	r26, 0x00	; 0
    19f0:	09 f1       	breq	.+66     	; 0x1a34 <xTaskIncrementTick+0x186>
    19f2:	c2 89       	ldd	r28, Z+18	; 0x12
    19f4:	d3 89       	ldd	r29, Z+19	; 0x13
    19f6:	44 89       	ldd	r20, Z+20	; 0x14
    19f8:	55 89       	ldd	r21, Z+21	; 0x15
    19fa:	5f 83       	std	Y+7, r21	; 0x07
    19fc:	4e 83       	std	Y+6, r20	; 0x06
    19fe:	c4 89       	ldd	r28, Z+20	; 0x14
    1a00:	d5 89       	ldd	r29, Z+21	; 0x15
    1a02:	42 89       	ldd	r20, Z+18	; 0x12
    1a04:	53 89       	ldd	r21, Z+19	; 0x13
    1a06:	5d 83       	std	Y+5, r21	; 0x05
    1a08:	4c 83       	std	Y+4, r20	; 0x04
    1a0a:	11 96       	adiw	r26, 0x01	; 1
    1a0c:	6d 91       	ld	r22, X+
    1a0e:	7c 91       	ld	r23, X
    1a10:	12 97       	sbiw	r26, 0x02	; 2
    1a12:	af 01       	movw	r20, r30
    1a14:	42 5f       	subi	r20, 0xF2	; 242
    1a16:	5f 4f       	sbci	r21, 0xFF	; 255
    1a18:	64 17       	cp	r22, r20
    1a1a:	75 07       	cpc	r23, r21
    1a1c:	31 f4       	brne	.+12     	; 0x1a2a <xTaskIncrementTick+0x17c>
    1a1e:	44 89       	ldd	r20, Z+20	; 0x14
    1a20:	55 89       	ldd	r21, Z+21	; 0x15
    1a22:	12 96       	adiw	r26, 0x02	; 2
    1a24:	5c 93       	st	X, r21
    1a26:	4e 93       	st	-X, r20
    1a28:	11 97       	sbiw	r26, 0x01	; 1
    1a2a:	11 8e       	std	Z+25, r1	; 0x19
    1a2c:	10 8e       	std	Z+24, r1	; 0x18
    1a2e:	9c 91       	ld	r25, X
    1a30:	91 50       	subi	r25, 0x01	; 1
    1a32:	9c 93       	st	X, r25
    1a34:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a36:	90 91 69 10 	lds	r25, 0x1069	; 0x801069 <uxTopReadyPriority>
    1a3a:	9a 17       	cp	r25, r26
    1a3c:	10 f4       	brcc	.+4      	; 0x1a42 <xTaskIncrementTick+0x194>
    1a3e:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    1a42:	9b e0       	ldi	r25, 0x0B	; 11
    1a44:	9a 9f       	mul	r25, r26
    1a46:	d0 01       	movw	r26, r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	a5 55       	subi	r26, 0x55	; 85
    1a4c:	bf 4e       	sbci	r27, 0xEF	; 239
    1a4e:	11 96       	adiw	r26, 0x01	; 1
    1a50:	0d 90       	ld	r0, X+
    1a52:	bc 91       	ld	r27, X
    1a54:	a0 2d       	mov	r26, r0
    1a56:	b7 83       	std	Z+7, r27	; 0x07
    1a58:	a6 83       	std	Z+6, r26	; 0x06
    1a5a:	16 96       	adiw	r26, 0x06	; 6
    1a5c:	4d 91       	ld	r20, X+
    1a5e:	5c 91       	ld	r21, X
    1a60:	17 97       	sbiw	r26, 0x07	; 7
    1a62:	51 87       	std	Z+9, r21	; 0x09
    1a64:	40 87       	std	Z+8, r20	; 0x08
    1a66:	16 96       	adiw	r26, 0x06	; 6
    1a68:	cd 91       	ld	r28, X+
    1a6a:	dc 91       	ld	r29, X
    1a6c:	17 97       	sbiw	r26, 0x07	; 7
    1a6e:	3d 83       	std	Y+5, r19	; 0x05
    1a70:	2c 83       	std	Y+4, r18	; 0x04
    1a72:	17 96       	adiw	r26, 0x07	; 7
    1a74:	3c 93       	st	X, r19
    1a76:	2e 93       	st	-X, r18
    1a78:	16 97       	sbiw	r26, 0x06	; 6
    1a7a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a7c:	9a 9f       	mul	r25, r26
    1a7e:	d0 01       	movw	r26, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	a5 55       	subi	r26, 0x55	; 85
    1a84:	bf 4e       	sbci	r27, 0xEF	; 239
    1a86:	b5 87       	std	Z+13, r27	; 0x0d
    1a88:	a4 87       	std	Z+12, r26	; 0x0c
    1a8a:	9c 91       	ld	r25, X
    1a8c:	9f 5f       	subi	r25, 0xFF	; 255
    1a8e:	9c 93       	st	X, r25
    1a90:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a92:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1a96:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1a9a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a9c:	29 17       	cp	r18, r25
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <xTaskIncrementTick+0x1f4>
    1aa0:	4f cf       	rjmp	.-354    	; 0x1940 <xTaskIncrementTick+0x92>
    1aa2:	51 cf       	rjmp	.-350    	; 0x1946 <xTaskIncrementTick+0x98>
    1aa4:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1aa8:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1aac:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1aae:	9b e0       	ldi	r25, 0x0B	; 11
    1ab0:	e9 9f       	mul	r30, r25
    1ab2:	f0 01       	movw	r30, r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	e5 55       	subi	r30, 0x55	; 85
    1ab8:	ff 4e       	sbci	r31, 0xEF	; 239
    1aba:	90 81       	ld	r25, Z
    1abc:	92 30       	cpi	r25, 0x02	; 2
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <xTaskIncrementTick+0x214>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 91 63 10 	lds	r25, 0x1063	; 0x801063 <xYieldPending>
    1ac6:	91 11       	cpse	r25, r1
    1ac8:	16 c0       	rjmp	.+44     	; 0x1af6 <xTaskIncrementTick+0x248>
    1aca:	16 c0       	rjmp	.+44     	; 0x1af8 <xTaskIncrementTick+0x24a>
    1acc:	80 91 64 10 	lds	r24, 0x1064	; 0x801064 <xPendedTicks>
    1ad0:	90 91 65 10 	lds	r25, 0x1065	; 0x801065 <xPendedTicks+0x1>
    1ad4:	a0 91 66 10 	lds	r26, 0x1066	; 0x801066 <xPendedTicks+0x2>
    1ad8:	b0 91 67 10 	lds	r27, 0x1067	; 0x801067 <xPendedTicks+0x3>
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	a1 1d       	adc	r26, r1
    1ae0:	b1 1d       	adc	r27, r1
    1ae2:	80 93 64 10 	sts	0x1064, r24	; 0x801064 <xPendedTicks>
    1ae6:	90 93 65 10 	sts	0x1065, r25	; 0x801065 <xPendedTicks+0x1>
    1aea:	a0 93 66 10 	sts	0x1066, r26	; 0x801066 <xPendedTicks+0x2>
    1aee:	b0 93 67 10 	sts	0x1067, r27	; 0x801067 <xPendedTicks+0x3>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <xTaskIncrementTick+0x24a>
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	08 95       	ret

00001b06 <xTaskResumeAll>:
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	0f 92       	push	r0
    1b18:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1b1c:	81 50       	subi	r24, 0x01	; 1
    1b1e:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <uxSchedulerSuspended>
    1b22:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1b26:	81 11       	cpse	r24, r1
    1b28:	be c0       	rjmp	.+380    	; 0x1ca6 <xTaskResumeAll+0x1a0>
    1b2a:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    1b2e:	81 11       	cpse	r24, r1
    1b30:	88 c0       	rjmp	.+272    	; 0x1c42 <xTaskResumeAll+0x13c>
    1b32:	bc c0       	rjmp	.+376    	; 0x1cac <xTaskResumeAll+0x1a6>
    1b34:	e0 91 8d 10 	lds	r30, 0x108D	; 0x80108d <xPendingReadyList+0x7>
    1b38:	f0 91 8e 10 	lds	r31, 0x108E	; 0x80108e <xPendingReadyList+0x8>
    1b3c:	00 84       	ldd	r0, Z+8	; 0x08
    1b3e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b40:	e0 2d       	mov	r30, r0
    1b42:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b44:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b46:	c2 89       	ldd	r28, Z+18	; 0x12
    1b48:	d3 89       	ldd	r29, Z+19	; 0x13
    1b4a:	84 89       	ldd	r24, Z+20	; 0x14
    1b4c:	95 89       	ldd	r25, Z+21	; 0x15
    1b4e:	9f 83       	std	Y+7, r25	; 0x07
    1b50:	8e 83       	std	Y+6, r24	; 0x06
    1b52:	c4 89       	ldd	r28, Z+20	; 0x14
    1b54:	d5 89       	ldd	r29, Z+21	; 0x15
    1b56:	82 89       	ldd	r24, Z+18	; 0x12
    1b58:	93 89       	ldd	r25, Z+19	; 0x13
    1b5a:	9d 83       	std	Y+5, r25	; 0x05
    1b5c:	8c 83       	std	Y+4, r24	; 0x04
    1b5e:	11 96       	adiw	r26, 0x01	; 1
    1b60:	2d 91       	ld	r18, X+
    1b62:	3c 91       	ld	r19, X
    1b64:	12 97       	sbiw	r26, 0x02	; 2
    1b66:	cf 01       	movw	r24, r30
    1b68:	0e 96       	adiw	r24, 0x0e	; 14
    1b6a:	28 17       	cp	r18, r24
    1b6c:	39 07       	cpc	r19, r25
    1b6e:	31 f4       	brne	.+12     	; 0x1b7c <xTaskResumeAll+0x76>
    1b70:	84 89       	ldd	r24, Z+20	; 0x14
    1b72:	95 89       	ldd	r25, Z+21	; 0x15
    1b74:	12 96       	adiw	r26, 0x02	; 2
    1b76:	9c 93       	st	X, r25
    1b78:	8e 93       	st	-X, r24
    1b7a:	11 97       	sbiw	r26, 0x01	; 1
    1b7c:	11 8e       	std	Z+25, r1	; 0x19
    1b7e:	10 8e       	std	Z+24, r1	; 0x18
    1b80:	8c 91       	ld	r24, X
    1b82:	81 50       	subi	r24, 0x01	; 1
    1b84:	8c 93       	st	X, r24
    1b86:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b88:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b8a:	c6 81       	ldd	r28, Z+6	; 0x06
    1b8c:	d7 81       	ldd	r29, Z+7	; 0x07
    1b8e:	80 85       	ldd	r24, Z+8	; 0x08
    1b90:	91 85       	ldd	r25, Z+9	; 0x09
    1b92:	9f 83       	std	Y+7, r25	; 0x07
    1b94:	8e 83       	std	Y+6, r24	; 0x06
    1b96:	c0 85       	ldd	r28, Z+8	; 0x08
    1b98:	d1 85       	ldd	r29, Z+9	; 0x09
    1b9a:	86 81       	ldd	r24, Z+6	; 0x06
    1b9c:	97 81       	ldd	r25, Z+7	; 0x07
    1b9e:	9d 83       	std	Y+5, r25	; 0x05
    1ba0:	8c 83       	std	Y+4, r24	; 0x04
    1ba2:	11 96       	adiw	r26, 0x01	; 1
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	12 97       	sbiw	r26, 0x02	; 2
    1baa:	9f 01       	movw	r18, r30
    1bac:	2e 5f       	subi	r18, 0xFE	; 254
    1bae:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb0:	82 17       	cp	r24, r18
    1bb2:	93 07       	cpc	r25, r19
    1bb4:	31 f4       	brne	.+12     	; 0x1bc2 <xTaskResumeAll+0xbc>
    1bb6:	80 85       	ldd	r24, Z+8	; 0x08
    1bb8:	91 85       	ldd	r25, Z+9	; 0x09
    1bba:	12 96       	adiw	r26, 0x02	; 2
    1bbc:	9c 93       	st	X, r25
    1bbe:	8e 93       	st	-X, r24
    1bc0:	11 97       	sbiw	r26, 0x01	; 1
    1bc2:	15 86       	std	Z+13, r1	; 0x0d
    1bc4:	14 86       	std	Z+12, r1	; 0x0c
    1bc6:	8c 91       	ld	r24, X
    1bc8:	81 50       	subi	r24, 0x01	; 1
    1bca:	8c 93       	st	X, r24
    1bcc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bce:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    1bd2:	8a 17       	cp	r24, r26
    1bd4:	10 f4       	brcc	.+4      	; 0x1bda <xTaskResumeAll+0xd4>
    1bd6:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    1bda:	8b e0       	ldi	r24, 0x0B	; 11
    1bdc:	8a 9f       	mul	r24, r26
    1bde:	d0 01       	movw	r26, r0
    1be0:	11 24       	eor	r1, r1
    1be2:	a5 55       	subi	r26, 0x55	; 85
    1be4:	bf 4e       	sbci	r27, 0xEF	; 239
    1be6:	11 96       	adiw	r26, 0x01	; 1
    1be8:	0d 90       	ld	r0, X+
    1bea:	bc 91       	ld	r27, X
    1bec:	a0 2d       	mov	r26, r0
    1bee:	b7 83       	std	Z+7, r27	; 0x07
    1bf0:	a6 83       	std	Z+6, r26	; 0x06
    1bf2:	16 96       	adiw	r26, 0x06	; 6
    1bf4:	4d 91       	ld	r20, X+
    1bf6:	5c 91       	ld	r21, X
    1bf8:	17 97       	sbiw	r26, 0x07	; 7
    1bfa:	51 87       	std	Z+9, r21	; 0x09
    1bfc:	40 87       	std	Z+8, r20	; 0x08
    1bfe:	16 96       	adiw	r26, 0x06	; 6
    1c00:	cd 91       	ld	r28, X+
    1c02:	dc 91       	ld	r29, X
    1c04:	17 97       	sbiw	r26, 0x07	; 7
    1c06:	3d 83       	std	Y+5, r19	; 0x05
    1c08:	2c 83       	std	Y+4, r18	; 0x04
    1c0a:	17 96       	adiw	r26, 0x07	; 7
    1c0c:	3c 93       	st	X, r19
    1c0e:	2e 93       	st	-X, r18
    1c10:	16 97       	sbiw	r26, 0x06	; 6
    1c12:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c14:	8a 9f       	mul	r24, r26
    1c16:	d0 01       	movw	r26, r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	a5 55       	subi	r26, 0x55	; 85
    1c1c:	bf 4e       	sbci	r27, 0xEF	; 239
    1c1e:	b5 87       	std	Z+13, r27	; 0x0d
    1c20:	a4 87       	std	Z+12, r26	; 0x0c
    1c22:	8c 91       	ld	r24, X
    1c24:	8f 5f       	subi	r24, 0xFF	; 255
    1c26:	8c 93       	st	X, r24
    1c28:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c2a:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    1c2e:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1c32:	5a 96       	adiw	r26, 0x1a	; 26
    1c34:	8c 91       	ld	r24, X
    1c36:	98 17       	cp	r25, r24
    1c38:	30 f0       	brcs	.+12     	; 0x1c46 <xTaskResumeAll+0x140>
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <xTaskResumeAll+0x140>
    1c42:	e0 e0       	ldi	r30, 0x00	; 0
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 91 86 10 	lds	r24, 0x1086	; 0x801086 <xPendingReadyList>
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	73 cf       	rjmp	.-282    	; 0x1b34 <xTaskResumeAll+0x2e>
    1c4e:	ef 2b       	or	r30, r31
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <xTaskResumeAll+0x14e>
    1c52:	7f db       	rcall	.-2306   	; 0x1352 <prvResetNextTaskUnblockTime>
    1c54:	c0 90 64 10 	lds	r12, 0x1064	; 0x801064 <xPendedTicks>
    1c58:	d0 90 65 10 	lds	r13, 0x1065	; 0x801065 <xPendedTicks+0x1>
    1c5c:	e0 90 66 10 	lds	r14, 0x1066	; 0x801066 <xPendedTicks+0x2>
    1c60:	f0 90 67 10 	lds	r15, 0x1067	; 0x801067 <xPendedTicks+0x3>
    1c64:	c1 14       	cp	r12, r1
    1c66:	d1 04       	cpc	r13, r1
    1c68:	e1 04       	cpc	r14, r1
    1c6a:	f1 04       	cpc	r15, r1
    1c6c:	a1 f0       	breq	.+40     	; 0x1c96 <xTaskResumeAll+0x190>
    1c6e:	1f de       	rcall	.-962    	; 0x18ae <xTaskIncrementTick>
    1c70:	88 23       	and	r24, r24
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <xTaskResumeAll+0x174>
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	c8 1a       	sub	r12, r24
    1c7e:	d1 08       	sbc	r13, r1
    1c80:	e1 08       	sbc	r14, r1
    1c82:	f1 08       	sbc	r15, r1
    1c84:	a1 f7       	brne	.-24     	; 0x1c6e <xTaskResumeAll+0x168>
    1c86:	10 92 64 10 	sts	0x1064, r1	; 0x801064 <xPendedTicks>
    1c8a:	10 92 65 10 	sts	0x1065, r1	; 0x801065 <xPendedTicks+0x1>
    1c8e:	10 92 66 10 	sts	0x1066, r1	; 0x801066 <xPendedTicks+0x2>
    1c92:	10 92 67 10 	sts	0x1067, r1	; 0x801067 <xPendedTicks+0x3>
    1c96:	80 91 63 10 	lds	r24, 0x1063	; 0x801063 <xYieldPending>
    1c9a:	88 23       	and	r24, r24
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <xTaskResumeAll+0x1a4>
    1c9e:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	03 c0       	rjmp	.+6      	; 0x1cac <xTaskResumeAll+0x1a6>
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <xTaskResumeAll+0x1a6>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	cf 90       	pop	r12
    1cbc:	08 95       	ret

00001cbe <xTaskDelayUntil>:
    1cbe:	8f 92       	push	r8
    1cc0:	9f 92       	push	r9
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	ec 01       	movw	r28, r24
    1cd6:	6a 01       	movw	r12, r20
    1cd8:	7b 01       	movw	r14, r22
    1cda:	d5 dd       	rcall	.-1110   	; 0x1886 <vTaskSuspendAll>
    1cdc:	80 90 6a 10 	lds	r8, 0x106A	; 0x80106a <xTickCount>
    1ce0:	90 90 6b 10 	lds	r9, 0x106B	; 0x80106b <xTickCount+0x1>
    1ce4:	a0 90 6c 10 	lds	r10, 0x106C	; 0x80106c <xTickCount+0x2>
    1ce8:	b0 90 6d 10 	lds	r11, 0x106D	; 0x80106d <xTickCount+0x3>
    1cec:	88 81       	ld	r24, Y
    1cee:	99 81       	ldd	r25, Y+1	; 0x01
    1cf0:	aa 81       	ldd	r26, Y+2	; 0x02
    1cf2:	bb 81       	ldd	r27, Y+3	; 0x03
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	bd 01       	movw	r22, r26
    1cf8:	4c 0d       	add	r20, r12
    1cfa:	5d 1d       	adc	r21, r13
    1cfc:	6e 1d       	adc	r22, r14
    1cfe:	7f 1d       	adc	r23, r15
    1d00:	88 16       	cp	r8, r24
    1d02:	99 06       	cpc	r9, r25
    1d04:	aa 06       	cpc	r10, r26
    1d06:	bb 06       	cpc	r11, r27
    1d08:	60 f4       	brcc	.+24     	; 0x1d22 <xTaskDelayUntil+0x64>
    1d0a:	48 17       	cp	r20, r24
    1d0c:	59 07       	cpc	r21, r25
    1d0e:	6a 07       	cpc	r22, r26
    1d10:	7b 07       	cpc	r23, r27
    1d12:	98 f4       	brcc	.+38     	; 0x1d3a <xTaskDelayUntil+0x7c>
    1d14:	84 16       	cp	r8, r20
    1d16:	95 06       	cpc	r9, r21
    1d18:	a6 06       	cpc	r10, r22
    1d1a:	b7 06       	cpc	r11, r23
    1d1c:	80 f0       	brcs	.+32     	; 0x1d3e <xTaskDelayUntil+0x80>
    1d1e:	10 e0       	ldi	r17, 0x00	; 0
    1d20:	13 c0       	rjmp	.+38     	; 0x1d48 <xTaskDelayUntil+0x8a>
    1d22:	48 17       	cp	r20, r24
    1d24:	59 07       	cpc	r21, r25
    1d26:	6a 07       	cpc	r22, r26
    1d28:	7b 07       	cpc	r23, r27
    1d2a:	58 f0       	brcs	.+22     	; 0x1d42 <xTaskDelayUntil+0x84>
    1d2c:	84 16       	cp	r8, r20
    1d2e:	95 06       	cpc	r9, r21
    1d30:	a6 06       	cpc	r10, r22
    1d32:	b7 06       	cpc	r11, r23
    1d34:	40 f0       	brcs	.+16     	; 0x1d46 <xTaskDelayUntil+0x88>
    1d36:	10 e0       	ldi	r17, 0x00	; 0
    1d38:	07 c0       	rjmp	.+14     	; 0x1d48 <xTaskDelayUntil+0x8a>
    1d3a:	10 e0       	ldi	r17, 0x00	; 0
    1d3c:	05 c0       	rjmp	.+10     	; 0x1d48 <xTaskDelayUntil+0x8a>
    1d3e:	11 e0       	ldi	r17, 0x01	; 1
    1d40:	03 c0       	rjmp	.+6      	; 0x1d48 <xTaskDelayUntil+0x8a>
    1d42:	11 e0       	ldi	r17, 0x01	; 1
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <xTaskDelayUntil+0x8a>
    1d46:	11 e0       	ldi	r17, 0x01	; 1
    1d48:	48 83       	st	Y, r20
    1d4a:	59 83       	std	Y+1, r21	; 0x01
    1d4c:	6a 83       	std	Y+2, r22	; 0x02
    1d4e:	7b 83       	std	Y+3, r23	; 0x03
    1d50:	11 23       	and	r17, r17
    1d52:	41 f0       	breq	.+16     	; 0x1d64 <xTaskDelayUntil+0xa6>
    1d54:	cb 01       	movw	r24, r22
    1d56:	ba 01       	movw	r22, r20
    1d58:	68 19       	sub	r22, r8
    1d5a:	79 09       	sbc	r23, r9
    1d5c:	8a 09       	sbc	r24, r10
    1d5e:	9b 09       	sbc	r25, r11
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	6b dc       	rcall	.-1834   	; 0x163a <prvAddCurrentTaskToDelayedList>
    1d64:	d0 de       	rcall	.-608    	; 0x1b06 <xTaskResumeAll>
    1d66:	81 11       	cpse	r24, r1
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <xTaskDelayUntil+0xb0>
    1d6a:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    1d6e:	81 2f       	mov	r24, r17
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	ff 90       	pop	r15
    1d78:	ef 90       	pop	r14
    1d7a:	df 90       	pop	r13
    1d7c:	cf 90       	pop	r12
    1d7e:	bf 90       	pop	r11
    1d80:	af 90       	pop	r10
    1d82:	9f 90       	pop	r9
    1d84:	8f 90       	pop	r8
    1d86:	08 95       	ret

00001d88 <vTaskDelay>:
    1d88:	cf 92       	push	r12
    1d8a:	df 92       	push	r13
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	6b 01       	movw	r12, r22
    1d92:	7c 01       	movw	r14, r24
    1d94:	67 2b       	or	r22, r23
    1d96:	68 2b       	or	r22, r24
    1d98:	69 2b       	or	r22, r25
    1d9a:	39 f0       	breq	.+14     	; 0x1daa <vTaskDelay+0x22>
    1d9c:	74 dd       	rcall	.-1304   	; 0x1886 <vTaskSuspendAll>
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	c7 01       	movw	r24, r14
    1da2:	b6 01       	movw	r22, r12
    1da4:	4a dc       	rcall	.-1900   	; 0x163a <prvAddCurrentTaskToDelayedList>
    1da6:	af de       	rcall	.-674    	; 0x1b06 <xTaskResumeAll>
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <vTaskDelay+0x24>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	81 11       	cpse	r24, r1
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <vTaskDelay+0x2c>
    1db0:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	df 90       	pop	r13
    1dba:	cf 90       	pop	r12
    1dbc:	08 95       	ret

00001dbe <vTaskSwitchContext>:
    1dbe:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1dc2:	88 23       	and	r24, r24
    1dc4:	21 f0       	breq	.+8      	; 0x1dce <vTaskSwitchContext+0x10>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    1dcc:	08 95       	ret
    1dce:	10 92 63 10 	sts	0x1063, r1	; 0x801063 <xYieldPending>
    1dd2:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1dd6:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1dda:	20 81       	ld	r18, Z
    1ddc:	31 81       	ldd	r19, Z+1	; 0x01
    1dde:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1de2:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1de6:	83 8d       	ldd	r24, Z+27	; 0x1b
    1de8:	94 8d       	ldd	r25, Z+28	; 0x1c
    1dea:	82 17       	cp	r24, r18
    1dec:	93 07       	cpc	r25, r19
    1dee:	60 f0       	brcs	.+24     	; 0x1e08 <vTaskSwitchContext+0x4a>
    1df0:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    1df4:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1df8:	63 5e       	subi	r22, 0xE3	; 227
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    1e00:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1e04:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vApplicationStackOverflowHook>
    1e08:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <vTaskSwitchContext+0x52>
    1e0e:	81 50       	subi	r24, 0x01	; 1
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	9b e0       	ldi	r25, 0x0B	; 11
    1e16:	92 9f       	mul	r25, r18
    1e18:	f0 01       	movw	r30, r0
    1e1a:	93 9f       	mul	r25, r19
    1e1c:	f0 0d       	add	r31, r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	e5 55       	subi	r30, 0x55	; 85
    1e22:	ff 4e       	sbci	r31, 0xEF	; 239
    1e24:	90 81       	ld	r25, Z
    1e26:	99 23       	and	r25, r25
    1e28:	91 f3       	breq	.-28     	; 0x1e0e <vTaskSwitchContext+0x50>
    1e2a:	9b e0       	ldi	r25, 0x0B	; 11
    1e2c:	92 9f       	mul	r25, r18
    1e2e:	a0 01       	movw	r20, r0
    1e30:	93 9f       	mul	r25, r19
    1e32:	50 0d       	add	r21, r0
    1e34:	11 24       	eor	r1, r1
    1e36:	df 01       	movw	r26, r30
    1e38:	01 80       	ldd	r0, Z+1	; 0x01
    1e3a:	f2 81       	ldd	r31, Z+2	; 0x02
    1e3c:	e0 2d       	mov	r30, r0
    1e3e:	04 80       	ldd	r0, Z+4	; 0x04
    1e40:	f5 81       	ldd	r31, Z+5	; 0x05
    1e42:	e0 2d       	mov	r30, r0
    1e44:	12 96       	adiw	r26, 0x02	; 2
    1e46:	fc 93       	st	X, r31
    1e48:	ee 93       	st	-X, r30
    1e4a:	11 97       	sbiw	r26, 0x01	; 1
    1e4c:	42 55       	subi	r20, 0x52	; 82
    1e4e:	5f 4e       	sbci	r21, 0xEF	; 239
    1e50:	e4 17       	cp	r30, r20
    1e52:	f5 07       	cpc	r31, r21
    1e54:	29 f4       	brne	.+10     	; 0x1e60 <vTaskSwitchContext+0xa2>
    1e56:	44 81       	ldd	r20, Z+4	; 0x04
    1e58:	55 81       	ldd	r21, Z+5	; 0x05
    1e5a:	fd 01       	movw	r30, r26
    1e5c:	52 83       	std	Z+2, r21	; 0x02
    1e5e:	41 83       	std	Z+1, r20	; 0x01
    1e60:	9b e0       	ldi	r25, 0x0B	; 11
    1e62:	92 9f       	mul	r25, r18
    1e64:	f0 01       	movw	r30, r0
    1e66:	93 9f       	mul	r25, r19
    1e68:	f0 0d       	add	r31, r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	e5 55       	subi	r30, 0x55	; 85
    1e6e:	ff 4e       	sbci	r31, 0xEF	; 239
    1e70:	01 80       	ldd	r0, Z+1	; 0x01
    1e72:	f2 81       	ldd	r31, Z+2	; 0x02
    1e74:	e0 2d       	mov	r30, r0
    1e76:	20 85       	ldd	r18, Z+8	; 0x08
    1e78:	31 85       	ldd	r19, Z+9	; 0x09
    1e7a:	30 93 1a 11 	sts	0x111A, r19	; 0x80111a <pxCurrentTCB+0x1>
    1e7e:	20 93 19 11 	sts	0x1119, r18	; 0x801119 <pxCurrentTCB>
    1e82:	80 93 69 10 	sts	0x1069, r24	; 0x801069 <uxTopReadyPriority>
    1e86:	08 95       	ret

00001e88 <vTaskPlaceOnEventList>:
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	6a 01       	movw	r12, r20
    1e92:	7b 01       	movw	r14, r22
    1e94:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    1e98:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1e9c:	62 5f       	subi	r22, 0xF2	; 242
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	c7 01       	movw	r24, r14
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	c7 db       	rcall	.-2162   	; 0x163a <prvAddCurrentTaskToDelayedList>
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	df 90       	pop	r13
    1eb2:	cf 90       	pop	r12
    1eb4:	08 95       	ret

00001eb6 <vTaskPlaceOnEventListRestricted>:
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	fc 01       	movw	r30, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	ba 01       	movw	r22, r20
    1ec0:	a1 81       	ldd	r26, Z+1	; 0x01
    1ec2:	b2 81       	ldd	r27, Z+2	; 0x02
    1ec4:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    1ec8:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1ecc:	bb 8b       	std	Y+19, r27	; 0x13
    1ece:	aa 8b       	std	Y+18, r26	; 0x12
    1ed0:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    1ed4:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1ed8:	16 96       	adiw	r26, 0x06	; 6
    1eda:	4d 91       	ld	r20, X+
    1edc:	5c 91       	ld	r21, X
    1ede:	17 97       	sbiw	r26, 0x07	; 7
    1ee0:	5d 8b       	std	Y+21, r21	; 0x15
    1ee2:	4c 8b       	std	Y+20, r20	; 0x14
    1ee4:	16 96       	adiw	r26, 0x06	; 6
    1ee6:	cd 91       	ld	r28, X+
    1ee8:	dc 91       	ld	r29, X
    1eea:	17 97       	sbiw	r26, 0x07	; 7
    1eec:	40 91 19 11 	lds	r20, 0x1119	; 0x801119 <pxCurrentTCB>
    1ef0:	50 91 1a 11 	lds	r21, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1ef4:	42 5f       	subi	r20, 0xF2	; 242
    1ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef8:	5d 83       	std	Y+5, r21	; 0x05
    1efa:	4c 83       	std	Y+4, r20	; 0x04
    1efc:	40 91 19 11 	lds	r20, 0x1119	; 0x801119 <pxCurrentTCB>
    1f00:	50 91 1a 11 	lds	r21, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1f04:	42 5f       	subi	r20, 0xF2	; 242
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255
    1f08:	17 96       	adiw	r26, 0x07	; 7
    1f0a:	5c 93       	st	X, r21
    1f0c:	4e 93       	st	-X, r20
    1f0e:	16 97       	sbiw	r26, 0x06	; 6
    1f10:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    1f14:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1f18:	59 96       	adiw	r26, 0x19	; 25
    1f1a:	fc 93       	st	X, r31
    1f1c:	ee 93       	st	-X, r30
    1f1e:	58 97       	sbiw	r26, 0x18	; 24
    1f20:	30 81       	ld	r19, Z
    1f22:	3f 5f       	subi	r19, 0xFF	; 255
    1f24:	30 83       	st	Z, r19
    1f26:	22 23       	and	r18, r18
    1f28:	19 f0       	breq	.+6      	; 0x1f30 <vTaskPlaceOnEventListRestricted+0x7a>
    1f2a:	6f ef       	ldi	r22, 0xFF	; 255
    1f2c:	7f ef       	ldi	r23, 0xFF	; 255
    1f2e:	cb 01       	movw	r24, r22
    1f30:	42 2f       	mov	r20, r18
    1f32:	83 db       	rcall	.-2298   	; 0x163a <prvAddCurrentTaskToDelayedList>
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	08 95       	ret

00001f3a <xTaskRemoveFromEventList>:
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	dc 01       	movw	r26, r24
    1f40:	17 96       	adiw	r26, 0x07	; 7
    1f42:	ed 91       	ld	r30, X+
    1f44:	fc 91       	ld	r31, X
    1f46:	18 97       	sbiw	r26, 0x08	; 8
    1f48:	00 84       	ldd	r0, Z+8	; 0x08
    1f4a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f4c:	e0 2d       	mov	r30, r0
    1f4e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f50:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f52:	c2 89       	ldd	r28, Z+18	; 0x12
    1f54:	d3 89       	ldd	r29, Z+19	; 0x13
    1f56:	84 89       	ldd	r24, Z+20	; 0x14
    1f58:	95 89       	ldd	r25, Z+21	; 0x15
    1f5a:	9f 83       	std	Y+7, r25	; 0x07
    1f5c:	8e 83       	std	Y+6, r24	; 0x06
    1f5e:	c4 89       	ldd	r28, Z+20	; 0x14
    1f60:	d5 89       	ldd	r29, Z+21	; 0x15
    1f62:	82 89       	ldd	r24, Z+18	; 0x12
    1f64:	93 89       	ldd	r25, Z+19	; 0x13
    1f66:	9d 83       	std	Y+5, r25	; 0x05
    1f68:	8c 83       	std	Y+4, r24	; 0x04
    1f6a:	11 96       	adiw	r26, 0x01	; 1
    1f6c:	8d 91       	ld	r24, X+
    1f6e:	9c 91       	ld	r25, X
    1f70:	12 97       	sbiw	r26, 0x02	; 2
    1f72:	9f 01       	movw	r18, r30
    1f74:	22 5f       	subi	r18, 0xF2	; 242
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	82 17       	cp	r24, r18
    1f7a:	93 07       	cpc	r25, r19
    1f7c:	31 f4       	brne	.+12     	; 0x1f8a <xTaskRemoveFromEventList+0x50>
    1f7e:	84 89       	ldd	r24, Z+20	; 0x14
    1f80:	95 89       	ldd	r25, Z+21	; 0x15
    1f82:	12 96       	adiw	r26, 0x02	; 2
    1f84:	9c 93       	st	X, r25
    1f86:	8e 93       	st	-X, r24
    1f88:	11 97       	sbiw	r26, 0x01	; 1
    1f8a:	11 8e       	std	Z+25, r1	; 0x19
    1f8c:	10 8e       	std	Z+24, r1	; 0x18
    1f8e:	8c 91       	ld	r24, X
    1f90:	81 50       	subi	r24, 0x01	; 1
    1f92:	8c 93       	st	X, r24
    1f94:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1f98:	81 11       	cpse	r24, r1
    1f9a:	52 c0       	rjmp	.+164    	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    1f9c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f9e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1fa0:	c6 81       	ldd	r28, Z+6	; 0x06
    1fa2:	d7 81       	ldd	r29, Z+7	; 0x07
    1fa4:	80 85       	ldd	r24, Z+8	; 0x08
    1fa6:	91 85       	ldd	r25, Z+9	; 0x09
    1fa8:	9f 83       	std	Y+7, r25	; 0x07
    1faa:	8e 83       	std	Y+6, r24	; 0x06
    1fac:	c0 85       	ldd	r28, Z+8	; 0x08
    1fae:	d1 85       	ldd	r29, Z+9	; 0x09
    1fb0:	86 81       	ldd	r24, Z+6	; 0x06
    1fb2:	97 81       	ldd	r25, Z+7	; 0x07
    1fb4:	9d 83       	std	Y+5, r25	; 0x05
    1fb6:	8c 83       	std	Y+4, r24	; 0x04
    1fb8:	11 96       	adiw	r26, 0x01	; 1
    1fba:	8d 91       	ld	r24, X+
    1fbc:	9c 91       	ld	r25, X
    1fbe:	12 97       	sbiw	r26, 0x02	; 2
    1fc0:	9f 01       	movw	r18, r30
    1fc2:	2e 5f       	subi	r18, 0xFE	; 254
    1fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc6:	82 17       	cp	r24, r18
    1fc8:	93 07       	cpc	r25, r19
    1fca:	31 f4       	brne	.+12     	; 0x1fd8 <xTaskRemoveFromEventList+0x9e>
    1fcc:	80 85       	ldd	r24, Z+8	; 0x08
    1fce:	91 85       	ldd	r25, Z+9	; 0x09
    1fd0:	12 96       	adiw	r26, 0x02	; 2
    1fd2:	9c 93       	st	X, r25
    1fd4:	8e 93       	st	-X, r24
    1fd6:	11 97       	sbiw	r26, 0x01	; 1
    1fd8:	15 86       	std	Z+13, r1	; 0x0d
    1fda:	14 86       	std	Z+12, r1	; 0x0c
    1fdc:	8c 91       	ld	r24, X
    1fde:	81 50       	subi	r24, 0x01	; 1
    1fe0:	8c 93       	st	X, r24
    1fe2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fe4:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    1fe8:	8a 17       	cp	r24, r26
    1fea:	10 f4       	brcc	.+4      	; 0x1ff0 <xTaskRemoveFromEventList+0xb6>
    1fec:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    1ff0:	8b e0       	ldi	r24, 0x0B	; 11
    1ff2:	8a 9f       	mul	r24, r26
    1ff4:	d0 01       	movw	r26, r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	a5 55       	subi	r26, 0x55	; 85
    1ffa:	bf 4e       	sbci	r27, 0xEF	; 239
    1ffc:	11 96       	adiw	r26, 0x01	; 1
    1ffe:	0d 90       	ld	r0, X+
    2000:	bc 91       	ld	r27, X
    2002:	a0 2d       	mov	r26, r0
    2004:	b7 83       	std	Z+7, r27	; 0x07
    2006:	a6 83       	std	Z+6, r26	; 0x06
    2008:	16 96       	adiw	r26, 0x06	; 6
    200a:	4d 91       	ld	r20, X+
    200c:	5c 91       	ld	r21, X
    200e:	17 97       	sbiw	r26, 0x07	; 7
    2010:	51 87       	std	Z+9, r21	; 0x09
    2012:	40 87       	std	Z+8, r20	; 0x08
    2014:	16 96       	adiw	r26, 0x06	; 6
    2016:	cd 91       	ld	r28, X+
    2018:	dc 91       	ld	r29, X
    201a:	17 97       	sbiw	r26, 0x07	; 7
    201c:	3d 83       	std	Y+5, r19	; 0x05
    201e:	2c 83       	std	Y+4, r18	; 0x04
    2020:	17 96       	adiw	r26, 0x07	; 7
    2022:	3c 93       	st	X, r19
    2024:	2e 93       	st	-X, r18
    2026:	16 97       	sbiw	r26, 0x06	; 6
    2028:	a2 8d       	ldd	r26, Z+26	; 0x1a
    202a:	8a 9f       	mul	r24, r26
    202c:	d0 01       	movw	r26, r0
    202e:	11 24       	eor	r1, r1
    2030:	a5 55       	subi	r26, 0x55	; 85
    2032:	bf 4e       	sbci	r27, 0xEF	; 239
    2034:	b5 87       	std	Z+13, r27	; 0x0d
    2036:	a4 87       	std	Z+12, r26	; 0x0c
    2038:	8c 91       	ld	r24, X
    203a:	8f 5f       	subi	r24, 0xFF	; 255
    203c:	8c 93       	st	X, r24
    203e:	1c c0       	rjmp	.+56     	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2040:	46 e8       	ldi	r20, 0x86	; 134
    2042:	50 e1       	ldi	r21, 0x10	; 16
    2044:	da 01       	movw	r26, r20
    2046:	11 96       	adiw	r26, 0x01	; 1
    2048:	cd 91       	ld	r28, X+
    204a:	dc 91       	ld	r29, X
    204c:	12 97       	sbiw	r26, 0x02	; 2
    204e:	d3 8b       	std	Z+19, r29	; 0x13
    2050:	c2 8b       	std	Z+18, r28	; 0x12
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	9f 81       	ldd	r25, Y+7	; 0x07
    2056:	95 8b       	std	Z+21, r25	; 0x15
    2058:	84 8b       	std	Z+20, r24	; 0x14
    205a:	8e 81       	ldd	r24, Y+6	; 0x06
    205c:	9f 81       	ldd	r25, Y+7	; 0x07
    205e:	dc 01       	movw	r26, r24
    2060:	15 96       	adiw	r26, 0x05	; 5
    2062:	3c 93       	st	X, r19
    2064:	2e 93       	st	-X, r18
    2066:	14 97       	sbiw	r26, 0x04	; 4
    2068:	3f 83       	std	Y+7, r19	; 0x07
    206a:	2e 83       	std	Y+6, r18	; 0x06
    206c:	51 8f       	std	Z+25, r21	; 0x19
    206e:	40 8f       	std	Z+24, r20	; 0x18
    2070:	da 01       	movw	r26, r20
    2072:	8c 91       	ld	r24, X
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	8c 93       	st	X, r24
    2078:	92 8d       	ldd	r25, Z+26	; 0x1a
    207a:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    207e:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2082:	82 8d       	ldd	r24, Z+26	; 0x1a
    2084:	89 17       	cp	r24, r25
    2086:	20 f4       	brcc	.+8      	; 0x2090 <__DATA_REGION_LENGTH__+0x90>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <vTaskSetTimeOutState>:
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	0f 92       	push	r0
    209e:	20 91 62 10 	lds	r18, 0x1062	; 0x801062 <xNumOfOverflows>
    20a2:	fc 01       	movw	r30, r24
    20a4:	20 83       	st	Z, r18
    20a6:	40 91 6a 10 	lds	r20, 0x106A	; 0x80106a <xTickCount>
    20aa:	50 91 6b 10 	lds	r21, 0x106B	; 0x80106b <xTickCount+0x1>
    20ae:	60 91 6c 10 	lds	r22, 0x106C	; 0x80106c <xTickCount+0x2>
    20b2:	70 91 6d 10 	lds	r23, 0x106D	; 0x80106d <xTickCount+0x3>
    20b6:	41 83       	std	Z+1, r20	; 0x01
    20b8:	52 83       	std	Z+2, r21	; 0x02
    20ba:	63 83       	std	Z+3, r22	; 0x03
    20bc:	74 83       	std	Z+4, r23	; 0x04
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	08 95       	ret

000020c4 <vTaskInternalSetTimeOutState>:
    20c4:	20 91 62 10 	lds	r18, 0x1062	; 0x801062 <xNumOfOverflows>
    20c8:	fc 01       	movw	r30, r24
    20ca:	20 83       	st	Z, r18
    20cc:	40 91 6a 10 	lds	r20, 0x106A	; 0x80106a <xTickCount>
    20d0:	50 91 6b 10 	lds	r21, 0x106B	; 0x80106b <xTickCount+0x1>
    20d4:	60 91 6c 10 	lds	r22, 0x106C	; 0x80106c <xTickCount+0x2>
    20d8:	70 91 6d 10 	lds	r23, 0x106D	; 0x80106d <xTickCount+0x3>
    20dc:	41 83       	std	Z+1, r20	; 0x01
    20de:	52 83       	std	Z+2, r21	; 0x02
    20e0:	63 83       	std	Z+3, r22	; 0x03
    20e2:	74 83       	std	Z+4, r23	; 0x04
    20e4:	08 95       	ret

000020e6 <xTaskCheckForTimeOut>:
    20e6:	8f 92       	push	r8
    20e8:	9f 92       	push	r9
    20ea:	af 92       	push	r10
    20ec:	bf 92       	push	r11
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	fb 01       	movw	r30, r22
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	0f 92       	push	r0
    2106:	c0 90 6a 10 	lds	r12, 0x106A	; 0x80106a <xTickCount>
    210a:	d0 90 6b 10 	lds	r13, 0x106B	; 0x80106b <xTickCount+0x1>
    210e:	e0 90 6c 10 	lds	r14, 0x106C	; 0x80106c <xTickCount+0x2>
    2112:	f0 90 6d 10 	lds	r15, 0x106D	; 0x80106d <xTickCount+0x3>
    2116:	dc 01       	movw	r26, r24
    2118:	11 96       	adiw	r26, 0x01	; 1
    211a:	0d 91       	ld	r16, X+
    211c:	1d 91       	ld	r17, X+
    211e:	2d 91       	ld	r18, X+
    2120:	3c 91       	ld	r19, X
    2122:	14 97       	sbiw	r26, 0x04	; 4
    2124:	46 01       	movw	r8, r12
    2126:	57 01       	movw	r10, r14
    2128:	80 1a       	sub	r8, r16
    212a:	91 0a       	sbc	r9, r17
    212c:	a2 0a       	sbc	r10, r18
    212e:	b3 0a       	sbc	r11, r19
    2130:	40 81       	ld	r20, Z
    2132:	51 81       	ldd	r21, Z+1	; 0x01
    2134:	62 81       	ldd	r22, Z+2	; 0x02
    2136:	73 81       	ldd	r23, Z+3	; 0x03
    2138:	4f 3f       	cpi	r20, 0xFF	; 255
    213a:	bf ef       	ldi	r27, 0xFF	; 255
    213c:	5b 07       	cpc	r21, r27
    213e:	6b 07       	cpc	r22, r27
    2140:	7b 07       	cpc	r23, r27
    2142:	39 f1       	breq	.+78     	; 0x2192 <xTaskCheckForTimeOut+0xac>
    2144:	ec 01       	movw	r28, r24
    2146:	b8 81       	ld	r27, Y
    2148:	a0 91 62 10 	lds	r26, 0x1062	; 0x801062 <xNumOfOverflows>
    214c:	ba 17       	cp	r27, r26
    214e:	59 f0       	breq	.+22     	; 0x2166 <xTaskCheckForTimeOut+0x80>
    2150:	c0 16       	cp	r12, r16
    2152:	d1 06       	cpc	r13, r17
    2154:	e2 06       	cpc	r14, r18
    2156:	f3 06       	cpc	r15, r19
    2158:	30 f0       	brcs	.+12     	; 0x2166 <xTaskCheckForTimeOut+0x80>
    215a:	10 82       	st	Z, r1
    215c:	11 82       	std	Z+1, r1	; 0x01
    215e:	12 82       	std	Z+2, r1	; 0x02
    2160:	13 82       	std	Z+3, r1	; 0x03
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	17 c0       	rjmp	.+46     	; 0x2194 <xTaskCheckForTimeOut+0xae>
    2166:	84 16       	cp	r8, r20
    2168:	95 06       	cpc	r9, r21
    216a:	a6 06       	cpc	r10, r22
    216c:	b7 06       	cpc	r11, r23
    216e:	58 f4       	brcc	.+22     	; 0x2186 <xTaskCheckForTimeOut+0xa0>
    2170:	48 19       	sub	r20, r8
    2172:	59 09       	sbc	r21, r9
    2174:	6a 09       	sbc	r22, r10
    2176:	7b 09       	sbc	r23, r11
    2178:	40 83       	st	Z, r20
    217a:	51 83       	std	Z+1, r21	; 0x01
    217c:	62 83       	std	Z+2, r22	; 0x02
    217e:	73 83       	std	Z+3, r23	; 0x03
    2180:	a1 df       	rcall	.-190    	; 0x20c4 <vTaskInternalSetTimeOutState>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	07 c0       	rjmp	.+14     	; 0x2194 <xTaskCheckForTimeOut+0xae>
    2186:	10 82       	st	Z, r1
    2188:	11 82       	std	Z+1, r1	; 0x01
    218a:	12 82       	std	Z+2, r1	; 0x02
    218c:	13 82       	std	Z+3, r1	; 0x03
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <xTaskCheckForTimeOut+0xae>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	df 90       	pop	r13
    21a6:	cf 90       	pop	r12
    21a8:	bf 90       	pop	r11
    21aa:	af 90       	pop	r10
    21ac:	9f 90       	pop	r9
    21ae:	8f 90       	pop	r8
    21b0:	08 95       	ret

000021b2 <vTaskMissedYield>:
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    21b8:	08 95       	ret

000021ba <xTaskGetCurrentTaskHandle>:
    21ba:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    21be:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    21c2:	08 95       	ret

000021c4 <xTaskGetSchedulerState>:
    21c4:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    21c8:	88 23       	and	r24, r24
    21ca:	31 f0       	breq	.+12     	; 0x21d8 <xTaskGetSchedulerState+0x14>
    21cc:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    21d0:	81 11       	cpse	r24, r1
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <xTaskGetSchedulerState+0x18>
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	08 95       	ret
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	08 95       	ret
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	08 95       	ret

000021e0 <xTaskPriorityDisinherit>:
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	fc 01       	movw	r30, r24
    21ea:	89 2b       	or	r24, r25
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <xTaskPriorityDisinherit+0x10>
    21ee:	49 c0       	rjmp	.+146    	; 0x2282 <__stack+0x83>
    21f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    21f2:	81 50       	subi	r24, 0x01	; 1
    21f4:	86 a7       	std	Z+46, r24	; 0x2e
    21f6:	22 8d       	ldd	r18, Z+26	; 0x1a
    21f8:	95 a5       	ldd	r25, Z+45	; 0x2d
    21fa:	29 17       	cp	r18, r25
    21fc:	09 f4       	brne	.+2      	; 0x2200 <__stack+0x1>
    21fe:	43 c0       	rjmp	.+134    	; 0x2286 <__stack+0x87>
    2200:	81 11       	cpse	r24, r1
    2202:	43 c0       	rjmp	.+134    	; 0x228a <__stack+0x8b>
    2204:	ef 01       	movw	r28, r30
    2206:	8f 01       	movw	r16, r30
    2208:	0e 5f       	subi	r16, 0xFE	; 254
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	c8 01       	movw	r24, r16
    220e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
    2212:	ed a5       	ldd	r30, Y+45	; 0x2d
    2214:	ea 8f       	std	Y+26, r30	; 0x1a
    2216:	8a e0       	ldi	r24, 0x0A	; 10
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e0       	ldi	r26, 0x00	; 0
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	8e 1b       	sub	r24, r30
    2220:	91 09       	sbc	r25, r1
    2222:	a1 09       	sbc	r26, r1
    2224:	b1 09       	sbc	r27, r1
    2226:	8e 87       	std	Y+14, r24	; 0x0e
    2228:	9f 87       	std	Y+15, r25	; 0x0f
    222a:	a8 8b       	std	Y+16, r26	; 0x10
    222c:	b9 8b       	std	Y+17, r27	; 0x11
    222e:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    2232:	8e 17       	cp	r24, r30
    2234:	10 f4       	brcc	.+4      	; 0x223a <__stack+0x3b>
    2236:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    223a:	8b e0       	ldi	r24, 0x0B	; 11
    223c:	8e 9f       	mul	r24, r30
    223e:	f0 01       	movw	r30, r0
    2240:	11 24       	eor	r1, r1
    2242:	e5 55       	subi	r30, 0x55	; 85
    2244:	ff 4e       	sbci	r31, 0xEF	; 239
    2246:	01 80       	ldd	r0, Z+1	; 0x01
    2248:	f2 81       	ldd	r31, Z+2	; 0x02
    224a:	e0 2d       	mov	r30, r0
    224c:	ff 83       	std	Y+7, r31	; 0x07
    224e:	ee 83       	std	Y+6, r30	; 0x06
    2250:	26 81       	ldd	r18, Z+6	; 0x06
    2252:	37 81       	ldd	r19, Z+7	; 0x07
    2254:	39 87       	std	Y+9, r19	; 0x09
    2256:	28 87       	std	Y+8, r18	; 0x08
    2258:	a6 81       	ldd	r26, Z+6	; 0x06
    225a:	b7 81       	ldd	r27, Z+7	; 0x07
    225c:	15 96       	adiw	r26, 0x05	; 5
    225e:	1c 93       	st	X, r17
    2260:	0e 93       	st	-X, r16
    2262:	14 97       	sbiw	r26, 0x04	; 4
    2264:	17 83       	std	Z+7, r17	; 0x07
    2266:	06 83       	std	Z+6, r16	; 0x06
    2268:	ea 8d       	ldd	r30, Y+26	; 0x1a
    226a:	8e 9f       	mul	r24, r30
    226c:	f0 01       	movw	r30, r0
    226e:	11 24       	eor	r1, r1
    2270:	e5 55       	subi	r30, 0x55	; 85
    2272:	ff 4e       	sbci	r31, 0xEF	; 239
    2274:	fd 87       	std	Y+13, r31	; 0x0d
    2276:	ec 87       	std	Y+12, r30	; 0x0c
    2278:	80 81       	ld	r24, Z
    227a:	8f 5f       	subi	r24, 0xFF	; 255
    227c:	80 83       	st	Z, r24
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	05 c0       	rjmp	.+10     	; 0x228c <__stack+0x8d>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	03 c0       	rjmp	.+6      	; 0x228c <__stack+0x8d>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	01 c0       	rjmp	.+2      	; 0x228c <__stack+0x8d>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <xTaskGenericNotifyWait>:
    2296:	4f 92       	push	r4
    2298:	5f 92       	push	r5
    229a:	6f 92       	push	r6
    229c:	7f 92       	push	r7
    229e:	af 92       	push	r10
    22a0:	bf 92       	push	r11
    22a2:	cf 92       	push	r12
    22a4:	df 92       	push	r13
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	28 01       	movw	r4, r16
    22b4:	39 01       	movw	r6, r18
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	0f 92       	push	r0
    22bc:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    22c0:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    22c4:	c8 2f       	mov	r28, r24
    22c6:	d0 e0       	ldi	r29, 0x00	; 0
    22c8:	ec 0f       	add	r30, r28
    22ca:	fd 1f       	adc	r31, r29
    22cc:	83 a9       	ldd	r24, Z+51	; 0x33
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	71 f1       	breq	.+92     	; 0x232e <xTaskGenericNotifyWait+0x98>
    22d2:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    22d6:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    22da:	ce 01       	movw	r24, r28
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	e8 0f       	add	r30, r24
    22e6:	f9 1f       	adc	r31, r25
    22e8:	87 a5       	ldd	r24, Z+47	; 0x2f
    22ea:	90 a9       	ldd	r25, Z+48	; 0x30
    22ec:	a1 a9       	ldd	r26, Z+49	; 0x31
    22ee:	b2 a9       	ldd	r27, Z+50	; 0x32
    22f0:	40 95       	com	r20
    22f2:	50 95       	com	r21
    22f4:	60 95       	com	r22
    22f6:	70 95       	com	r23
    22f8:	48 23       	and	r20, r24
    22fa:	59 23       	and	r21, r25
    22fc:	6a 23       	and	r22, r26
    22fe:	7b 23       	and	r23, r27
    2300:	47 a7       	std	Z+47, r20	; 0x2f
    2302:	50 ab       	std	Z+48, r21	; 0x30
    2304:	61 ab       	std	Z+49, r22	; 0x31
    2306:	72 ab       	std	Z+50, r23	; 0x32
    2308:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    230c:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2310:	ec 0f       	add	r30, r28
    2312:	fd 1f       	adc	r31, r29
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	83 ab       	std	Z+51, r24	; 0x33
    2318:	a1 14       	cp	r10, r1
    231a:	b1 04       	cpc	r11, r1
    231c:	c1 04       	cpc	r12, r1
    231e:	d1 04       	cpc	r13, r1
    2320:	31 f0       	breq	.+12     	; 0x232e <xTaskGenericNotifyWait+0x98>
    2322:	41 e0       	ldi	r20, 0x01	; 1
    2324:	c6 01       	movw	r24, r12
    2326:	b5 01       	movw	r22, r10
    2328:	88 d9       	rcall	.-3312   	; 0x163a <prvAddCurrentTaskToDelayedList>
    232a:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    232e:	0f 90       	pop	r0
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	0f 92       	push	r0
    2338:	e1 14       	cp	r14, r1
    233a:	f1 04       	cpc	r15, r1
    233c:	a1 f0       	breq	.+40     	; 0x2366 <xTaskGenericNotifyWait+0xd0>
    233e:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2342:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2346:	ce 01       	movw	r24, r28
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	e8 0f       	add	r30, r24
    2352:	f9 1f       	adc	r31, r25
    2354:	87 a5       	ldd	r24, Z+47	; 0x2f
    2356:	90 a9       	ldd	r25, Z+48	; 0x30
    2358:	a1 a9       	ldd	r26, Z+49	; 0x31
    235a:	b2 a9       	ldd	r27, Z+50	; 0x32
    235c:	f7 01       	movw	r30, r14
    235e:	80 83       	st	Z, r24
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	a2 83       	std	Z+2, r26	; 0x02
    2364:	b3 83       	std	Z+3, r27	; 0x03
    2366:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    236a:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    236e:	ec 0f       	add	r30, r28
    2370:	fd 1f       	adc	r31, r29
    2372:	83 a9       	ldd	r24, Z+51	; 0x33
    2374:	82 30       	cpi	r24, 0x02	; 2
    2376:	e9 f4       	brne	.+58     	; 0x23b2 <xTaskGenericNotifyWait+0x11c>
    2378:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    237c:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2380:	ce 01       	movw	r24, r28
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	e8 0f       	add	r30, r24
    238c:	f9 1f       	adc	r31, r25
    238e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2390:	90 a9       	ldd	r25, Z+48	; 0x30
    2392:	a1 a9       	ldd	r26, Z+49	; 0x31
    2394:	b2 a9       	ldd	r27, Z+50	; 0x32
    2396:	40 94       	com	r4
    2398:	50 94       	com	r5
    239a:	60 94       	com	r6
    239c:	70 94       	com	r7
    239e:	48 22       	and	r4, r24
    23a0:	59 22       	and	r5, r25
    23a2:	6a 22       	and	r6, r26
    23a4:	7b 22       	and	r7, r27
    23a6:	47 a6       	std	Z+47, r4	; 0x2f
    23a8:	50 aa       	std	Z+48, r5	; 0x30
    23aa:	61 aa       	std	Z+49, r6	; 0x31
    23ac:	72 aa       	std	Z+50, r7	; 0x32
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <xTaskGenericNotifyWait+0x11e>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	20 91 19 11 	lds	r18, 0x1119	; 0x801119 <pxCurrentTCB>
    23b8:	30 91 1a 11 	lds	r19, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    23bc:	c2 0f       	add	r28, r18
    23be:	d3 1f       	adc	r29, r19
    23c0:	1b aa       	std	Y+51, r1	; 0x33
    23c2:	0f 90       	pop	r0
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	df 90       	pop	r13
    23d4:	cf 90       	pop	r12
    23d6:	bf 90       	pop	r11
    23d8:	af 90       	pop	r10
    23da:	7f 90       	pop	r7
    23dc:	6f 90       	pop	r6
    23de:	5f 90       	pop	r5
    23e0:	4f 90       	pop	r4
    23e2:	08 95       	ret

000023e4 <xTaskGenericNotify>:
    23e4:	8f 92       	push	r8
    23e6:	9f 92       	push	r9
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	dc 01       	movw	r26, r24
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	0f 92       	push	r0
    23fe:	e1 14       	cp	r14, r1
    2400:	f1 04       	cpc	r15, r1
    2402:	89 f0       	breq	.+34     	; 0x2426 <xTaskGenericNotify+0x42>
    2404:	e6 2f       	mov	r30, r22
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	ee 0f       	add	r30, r30
    240e:	ff 1f       	adc	r31, r31
    2410:	e8 0f       	add	r30, r24
    2412:	f9 1f       	adc	r31, r25
    2414:	87 a4       	ldd	r8, Z+47	; 0x2f
    2416:	90 a8       	ldd	r9, Z+48	; 0x30
    2418:	a1 a8       	ldd	r10, Z+49	; 0x31
    241a:	b2 a8       	ldd	r11, Z+50	; 0x32
    241c:	f7 01       	movw	r30, r14
    241e:	80 82       	st	Z, r8
    2420:	91 82       	std	Z+1, r9	; 0x01
    2422:	a2 82       	std	Z+2, r10	; 0x02
    2424:	b3 82       	std	Z+3, r11	; 0x03
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	fd 01       	movw	r30, r26
    242a:	e6 0f       	add	r30, r22
    242c:	f7 1f       	adc	r31, r23
    242e:	83 a9       	ldd	r24, Z+51	; 0x33
    2430:	92 e0       	ldi	r25, 0x02	; 2
    2432:	93 ab       	std	Z+51, r25	; 0x33
    2434:	02 30       	cpi	r16, 0x02	; 2
    2436:	01 f1       	breq	.+64     	; 0x2478 <xTaskGenericNotify+0x94>
    2438:	18 f4       	brcc	.+6      	; 0x2440 <xTaskGenericNotify+0x5c>
    243a:	01 30       	cpi	r16, 0x01	; 1
    243c:	31 f0       	breq	.+12     	; 0x244a <xTaskGenericNotify+0x66>
    243e:	4d c0       	rjmp	.+154    	; 0x24da <xTaskGenericNotify+0xf6>
    2440:	03 30       	cpi	r16, 0x03	; 3
    2442:	79 f1       	breq	.+94     	; 0x24a2 <xTaskGenericNotify+0xbe>
    2444:	04 30       	cpi	r16, 0x04	; 4
    2446:	d1 f1       	breq	.+116    	; 0x24bc <xTaskGenericNotify+0xd8>
    2448:	48 c0       	rjmp	.+144    	; 0x24da <xTaskGenericNotify+0xf6>
    244a:	66 0f       	add	r22, r22
    244c:	77 1f       	adc	r23, r23
    244e:	66 0f       	add	r22, r22
    2450:	77 1f       	adc	r23, r23
    2452:	fd 01       	movw	r30, r26
    2454:	e6 0f       	add	r30, r22
    2456:	f7 1f       	adc	r31, r23
    2458:	87 a4       	ldd	r8, Z+47	; 0x2f
    245a:	90 a8       	ldd	r9, Z+48	; 0x30
    245c:	a1 a8       	ldd	r10, Z+49	; 0x31
    245e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2460:	ba 01       	movw	r22, r20
    2462:	a9 01       	movw	r20, r18
    2464:	48 29       	or	r20, r8
    2466:	59 29       	or	r21, r9
    2468:	6a 29       	or	r22, r10
    246a:	7b 29       	or	r23, r11
    246c:	47 a7       	std	Z+47, r20	; 0x2f
    246e:	50 ab       	std	Z+48, r21	; 0x30
    2470:	61 ab       	std	Z+49, r22	; 0x31
    2472:	72 ab       	std	Z+50, r23	; 0x32
    2474:	01 e0       	ldi	r16, 0x01	; 1
    2476:	34 c0       	rjmp	.+104    	; 0x24e0 <xTaskGenericNotify+0xfc>
    2478:	66 0f       	add	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	66 0f       	add	r22, r22
    247e:	77 1f       	adc	r23, r23
    2480:	fd 01       	movw	r30, r26
    2482:	e6 0f       	add	r30, r22
    2484:	f7 1f       	adc	r31, r23
    2486:	47 a5       	ldd	r20, Z+47	; 0x2f
    2488:	50 a9       	ldd	r21, Z+48	; 0x30
    248a:	61 a9       	ldd	r22, Z+49	; 0x31
    248c:	72 a9       	ldd	r23, Z+50	; 0x32
    248e:	4f 5f       	subi	r20, 0xFF	; 255
    2490:	5f 4f       	sbci	r21, 0xFF	; 255
    2492:	6f 4f       	sbci	r22, 0xFF	; 255
    2494:	7f 4f       	sbci	r23, 0xFF	; 255
    2496:	47 a7       	std	Z+47, r20	; 0x2f
    2498:	50 ab       	std	Z+48, r21	; 0x30
    249a:	61 ab       	std	Z+49, r22	; 0x31
    249c:	72 ab       	std	Z+50, r23	; 0x32
    249e:	01 e0       	ldi	r16, 0x01	; 1
    24a0:	1f c0       	rjmp	.+62     	; 0x24e0 <xTaskGenericNotify+0xfc>
    24a2:	66 0f       	add	r22, r22
    24a4:	77 1f       	adc	r23, r23
    24a6:	66 0f       	add	r22, r22
    24a8:	77 1f       	adc	r23, r23
    24aa:	fd 01       	movw	r30, r26
    24ac:	e6 0f       	add	r30, r22
    24ae:	f7 1f       	adc	r31, r23
    24b0:	27 a7       	std	Z+47, r18	; 0x2f
    24b2:	30 ab       	std	Z+48, r19	; 0x30
    24b4:	41 ab       	std	Z+49, r20	; 0x31
    24b6:	52 ab       	std	Z+50, r21	; 0x32
    24b8:	01 e0       	ldi	r16, 0x01	; 1
    24ba:	12 c0       	rjmp	.+36     	; 0x24e0 <xTaskGenericNotify+0xfc>
    24bc:	82 30       	cpi	r24, 0x02	; 2
    24be:	79 f0       	breq	.+30     	; 0x24de <xTaskGenericNotify+0xfa>
    24c0:	66 0f       	add	r22, r22
    24c2:	77 1f       	adc	r23, r23
    24c4:	66 0f       	add	r22, r22
    24c6:	77 1f       	adc	r23, r23
    24c8:	fd 01       	movw	r30, r26
    24ca:	e6 0f       	add	r30, r22
    24cc:	f7 1f       	adc	r31, r23
    24ce:	27 a7       	std	Z+47, r18	; 0x2f
    24d0:	30 ab       	std	Z+48, r19	; 0x30
    24d2:	41 ab       	std	Z+49, r20	; 0x31
    24d4:	52 ab       	std	Z+50, r21	; 0x32
    24d6:	01 e0       	ldi	r16, 0x01	; 1
    24d8:	03 c0       	rjmp	.+6      	; 0x24e0 <xTaskGenericNotify+0xfc>
    24da:	01 e0       	ldi	r16, 0x01	; 1
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <xTaskGenericNotify+0xfc>
    24de:	00 e0       	ldi	r16, 0x00	; 0
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <xTaskGenericNotify+0x102>
    24e4:	69 c0       	rjmp	.+210    	; 0x25b8 <xTaskGenericNotify+0x1d4>
    24e6:	1c 96       	adiw	r26, 0x0c	; 12
    24e8:	ed 91       	ld	r30, X+
    24ea:	fc 91       	ld	r31, X
    24ec:	1d 97       	sbiw	r26, 0x0d	; 13
    24ee:	16 96       	adiw	r26, 0x06	; 6
    24f0:	cd 91       	ld	r28, X+
    24f2:	dc 91       	ld	r29, X
    24f4:	17 97       	sbiw	r26, 0x07	; 7
    24f6:	18 96       	adiw	r26, 0x08	; 8
    24f8:	8d 91       	ld	r24, X+
    24fa:	9c 91       	ld	r25, X
    24fc:	19 97       	sbiw	r26, 0x09	; 9
    24fe:	9f 83       	std	Y+7, r25	; 0x07
    2500:	8e 83       	std	Y+6, r24	; 0x06
    2502:	18 96       	adiw	r26, 0x08	; 8
    2504:	cd 91       	ld	r28, X+
    2506:	dc 91       	ld	r29, X
    2508:	19 97       	sbiw	r26, 0x09	; 9
    250a:	16 96       	adiw	r26, 0x06	; 6
    250c:	8d 91       	ld	r24, X+
    250e:	9c 91       	ld	r25, X
    2510:	17 97       	sbiw	r26, 0x07	; 7
    2512:	9d 83       	std	Y+5, r25	; 0x05
    2514:	8c 83       	std	Y+4, r24	; 0x04
    2516:	81 81       	ldd	r24, Z+1	; 0x01
    2518:	92 81       	ldd	r25, Z+2	; 0x02
    251a:	9d 01       	movw	r18, r26
    251c:	2e 5f       	subi	r18, 0xFE	; 254
    251e:	3f 4f       	sbci	r19, 0xFF	; 255
    2520:	82 17       	cp	r24, r18
    2522:	93 07       	cpc	r25, r19
    2524:	31 f4       	brne	.+12     	; 0x2532 <xTaskGenericNotify+0x14e>
    2526:	18 96       	adiw	r26, 0x08	; 8
    2528:	8d 91       	ld	r24, X+
    252a:	9c 91       	ld	r25, X
    252c:	19 97       	sbiw	r26, 0x09	; 9
    252e:	92 83       	std	Z+2, r25	; 0x02
    2530:	81 83       	std	Z+1, r24	; 0x01
    2532:	1d 96       	adiw	r26, 0x0d	; 13
    2534:	1c 92       	st	X, r1
    2536:	1e 92       	st	-X, r1
    2538:	1c 97       	sbiw	r26, 0x0c	; 12
    253a:	80 81       	ld	r24, Z
    253c:	81 50       	subi	r24, 0x01	; 1
    253e:	80 83       	st	Z, r24
    2540:	5a 96       	adiw	r26, 0x1a	; 26
    2542:	ec 91       	ld	r30, X
    2544:	5a 97       	sbiw	r26, 0x1a	; 26
    2546:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    254a:	8e 17       	cp	r24, r30
    254c:	10 f4       	brcc	.+4      	; 0x2552 <xTaskGenericNotify+0x16e>
    254e:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    2552:	8b e0       	ldi	r24, 0x0B	; 11
    2554:	8e 9f       	mul	r24, r30
    2556:	f0 01       	movw	r30, r0
    2558:	11 24       	eor	r1, r1
    255a:	e5 55       	subi	r30, 0x55	; 85
    255c:	ff 4e       	sbci	r31, 0xEF	; 239
    255e:	01 80       	ldd	r0, Z+1	; 0x01
    2560:	f2 81       	ldd	r31, Z+2	; 0x02
    2562:	e0 2d       	mov	r30, r0
    2564:	17 96       	adiw	r26, 0x07	; 7
    2566:	fc 93       	st	X, r31
    2568:	ee 93       	st	-X, r30
    256a:	16 97       	sbiw	r26, 0x06	; 6
    256c:	46 81       	ldd	r20, Z+6	; 0x06
    256e:	57 81       	ldd	r21, Z+7	; 0x07
    2570:	19 96       	adiw	r26, 0x09	; 9
    2572:	5c 93       	st	X, r21
    2574:	4e 93       	st	-X, r20
    2576:	18 97       	sbiw	r26, 0x08	; 8
    2578:	c6 81       	ldd	r28, Z+6	; 0x06
    257a:	d7 81       	ldd	r29, Z+7	; 0x07
    257c:	3d 83       	std	Y+5, r19	; 0x05
    257e:	2c 83       	std	Y+4, r18	; 0x04
    2580:	37 83       	std	Z+7, r19	; 0x07
    2582:	26 83       	std	Z+6, r18	; 0x06
    2584:	5a 96       	adiw	r26, 0x1a	; 26
    2586:	ec 91       	ld	r30, X
    2588:	5a 97       	sbiw	r26, 0x1a	; 26
    258a:	8e 9f       	mul	r24, r30
    258c:	f0 01       	movw	r30, r0
    258e:	11 24       	eor	r1, r1
    2590:	e5 55       	subi	r30, 0x55	; 85
    2592:	ff 4e       	sbci	r31, 0xEF	; 239
    2594:	1d 96       	adiw	r26, 0x0d	; 13
    2596:	fc 93       	st	X, r31
    2598:	ee 93       	st	-X, r30
    259a:	1c 97       	sbiw	r26, 0x0c	; 12
    259c:	80 81       	ld	r24, Z
    259e:	8f 5f       	subi	r24, 0xFF	; 255
    25a0:	80 83       	st	Z, r24
    25a2:	5a 96       	adiw	r26, 0x1a	; 26
    25a4:	9c 91       	ld	r25, X
    25a6:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    25aa:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    25ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    25b0:	89 17       	cp	r24, r25
    25b2:	10 f4       	brcc	.+4      	; 0x25b8 <xTaskGenericNotify+0x1d4>
    25b4:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    25b8:	0f 90       	pop	r0
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	80 2f       	mov	r24, r16
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	0f 91       	pop	r16
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	bf 90       	pop	r11
    25ca:	af 90       	pop	r10
    25cc:	9f 90       	pop	r9
    25ce:	8f 90       	pop	r8
    25d0:	08 95       	ret

000025d2 <xTaskGenericNotifyFromISR>:
    25d2:	8f 92       	push	r8
    25d4:	9f 92       	push	r9
    25d6:	af 92       	push	r10
    25d8:	bf 92       	push	r11
    25da:	cf 92       	push	r12
    25dc:	df 92       	push	r13
    25de:	ef 92       	push	r14
    25e0:	ff 92       	push	r15
    25e2:	0f 93       	push	r16
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	dc 01       	movw	r26, r24
    25ea:	e1 14       	cp	r14, r1
    25ec:	f1 04       	cpc	r15, r1
    25ee:	89 f0       	breq	.+34     	; 0x2612 <xTaskGenericNotifyFromISR+0x40>
    25f0:	e6 2f       	mov	r30, r22
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	ee 0f       	add	r30, r30
    25fa:	ff 1f       	adc	r31, r31
    25fc:	e8 0f       	add	r30, r24
    25fe:	f9 1f       	adc	r31, r25
    2600:	87 a4       	ldd	r8, Z+47	; 0x2f
    2602:	90 a8       	ldd	r9, Z+48	; 0x30
    2604:	a1 a8       	ldd	r10, Z+49	; 0x31
    2606:	b2 a8       	ldd	r11, Z+50	; 0x32
    2608:	f7 01       	movw	r30, r14
    260a:	80 82       	st	Z, r8
    260c:	91 82       	std	Z+1, r9	; 0x01
    260e:	a2 82       	std	Z+2, r10	; 0x02
    2610:	b3 82       	std	Z+3, r11	; 0x03
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	fd 01       	movw	r30, r26
    2616:	e6 0f       	add	r30, r22
    2618:	f7 1f       	adc	r31, r23
    261a:	93 a9       	ldd	r25, Z+51	; 0x33
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	83 ab       	std	Z+51, r24	; 0x33
    2620:	02 30       	cpi	r16, 0x02	; 2
    2622:	01 f1       	breq	.+64     	; 0x2664 <xTaskGenericNotifyFromISR+0x92>
    2624:	18 f4       	brcc	.+6      	; 0x262c <xTaskGenericNotifyFromISR+0x5a>
    2626:	01 30       	cpi	r16, 0x01	; 1
    2628:	31 f0       	breq	.+12     	; 0x2636 <xTaskGenericNotifyFromISR+0x64>
    262a:	4d c0       	rjmp	.+154    	; 0x26c6 <xTaskGenericNotifyFromISR+0xf4>
    262c:	03 30       	cpi	r16, 0x03	; 3
    262e:	79 f1       	breq	.+94     	; 0x268e <xTaskGenericNotifyFromISR+0xbc>
    2630:	04 30       	cpi	r16, 0x04	; 4
    2632:	d1 f1       	breq	.+116    	; 0x26a8 <xTaskGenericNotifyFromISR+0xd6>
    2634:	48 c0       	rjmp	.+144    	; 0x26c6 <xTaskGenericNotifyFromISR+0xf4>
    2636:	66 0f       	add	r22, r22
    2638:	77 1f       	adc	r23, r23
    263a:	66 0f       	add	r22, r22
    263c:	77 1f       	adc	r23, r23
    263e:	fd 01       	movw	r30, r26
    2640:	e6 0f       	add	r30, r22
    2642:	f7 1f       	adc	r31, r23
    2644:	87 a4       	ldd	r8, Z+47	; 0x2f
    2646:	90 a8       	ldd	r9, Z+48	; 0x30
    2648:	a1 a8       	ldd	r10, Z+49	; 0x31
    264a:	b2 a8       	ldd	r11, Z+50	; 0x32
    264c:	ba 01       	movw	r22, r20
    264e:	a9 01       	movw	r20, r18
    2650:	48 29       	or	r20, r8
    2652:	59 29       	or	r21, r9
    2654:	6a 29       	or	r22, r10
    2656:	7b 29       	or	r23, r11
    2658:	47 a7       	std	Z+47, r20	; 0x2f
    265a:	50 ab       	std	Z+48, r21	; 0x30
    265c:	61 ab       	std	Z+49, r22	; 0x31
    265e:	72 ab       	std	Z+50, r23	; 0x32
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	34 c0       	rjmp	.+104    	; 0x26cc <xTaskGenericNotifyFromISR+0xfa>
    2664:	66 0f       	add	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	66 0f       	add	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	fd 01       	movw	r30, r26
    266e:	e6 0f       	add	r30, r22
    2670:	f7 1f       	adc	r31, r23
    2672:	47 a5       	ldd	r20, Z+47	; 0x2f
    2674:	50 a9       	ldd	r21, Z+48	; 0x30
    2676:	61 a9       	ldd	r22, Z+49	; 0x31
    2678:	72 a9       	ldd	r23, Z+50	; 0x32
    267a:	4f 5f       	subi	r20, 0xFF	; 255
    267c:	5f 4f       	sbci	r21, 0xFF	; 255
    267e:	6f 4f       	sbci	r22, 0xFF	; 255
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	47 a7       	std	Z+47, r20	; 0x2f
    2684:	50 ab       	std	Z+48, r21	; 0x30
    2686:	61 ab       	std	Z+49, r22	; 0x31
    2688:	72 ab       	std	Z+50, r23	; 0x32
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	1f c0       	rjmp	.+62     	; 0x26cc <xTaskGenericNotifyFromISR+0xfa>
    268e:	66 0f       	add	r22, r22
    2690:	77 1f       	adc	r23, r23
    2692:	66 0f       	add	r22, r22
    2694:	77 1f       	adc	r23, r23
    2696:	fd 01       	movw	r30, r26
    2698:	e6 0f       	add	r30, r22
    269a:	f7 1f       	adc	r31, r23
    269c:	27 a7       	std	Z+47, r18	; 0x2f
    269e:	30 ab       	std	Z+48, r19	; 0x30
    26a0:	41 ab       	std	Z+49, r20	; 0x31
    26a2:	52 ab       	std	Z+50, r21	; 0x32
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	12 c0       	rjmp	.+36     	; 0x26cc <xTaskGenericNotifyFromISR+0xfa>
    26a8:	92 30       	cpi	r25, 0x02	; 2
    26aa:	79 f0       	breq	.+30     	; 0x26ca <xTaskGenericNotifyFromISR+0xf8>
    26ac:	66 0f       	add	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	66 0f       	add	r22, r22
    26b2:	77 1f       	adc	r23, r23
    26b4:	fd 01       	movw	r30, r26
    26b6:	e6 0f       	add	r30, r22
    26b8:	f7 1f       	adc	r31, r23
    26ba:	27 a7       	std	Z+47, r18	; 0x2f
    26bc:	30 ab       	std	Z+48, r19	; 0x30
    26be:	41 ab       	std	Z+49, r20	; 0x31
    26c0:	52 ab       	std	Z+50, r21	; 0x32
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <xTaskGenericNotifyFromISR+0xfa>
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <xTaskGenericNotifyFromISR+0xfa>
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	91 30       	cpi	r25, 0x01	; 1
    26ce:	09 f0       	breq	.+2      	; 0x26d2 <xTaskGenericNotifyFromISR+0x100>
    26d0:	96 c0       	rjmp	.+300    	; 0x27fe <xTaskGenericNotifyFromISR+0x22c>
    26d2:	90 91 5a 10 	lds	r25, 0x105A	; 0x80105a <uxSchedulerSuspended>
    26d6:	91 11       	cpse	r25, r1
    26d8:	5f c0       	rjmp	.+190    	; 0x2798 <xTaskGenericNotifyFromISR+0x1c6>
    26da:	1c 96       	adiw	r26, 0x0c	; 12
    26dc:	ed 91       	ld	r30, X+
    26de:	fc 91       	ld	r31, X
    26e0:	1d 97       	sbiw	r26, 0x0d	; 13
    26e2:	16 96       	adiw	r26, 0x06	; 6
    26e4:	cd 91       	ld	r28, X+
    26e6:	dc 91       	ld	r29, X
    26e8:	17 97       	sbiw	r26, 0x07	; 7
    26ea:	18 96       	adiw	r26, 0x08	; 8
    26ec:	2d 91       	ld	r18, X+
    26ee:	3c 91       	ld	r19, X
    26f0:	19 97       	sbiw	r26, 0x09	; 9
    26f2:	3f 83       	std	Y+7, r19	; 0x07
    26f4:	2e 83       	std	Y+6, r18	; 0x06
    26f6:	18 96       	adiw	r26, 0x08	; 8
    26f8:	cd 91       	ld	r28, X+
    26fa:	dc 91       	ld	r29, X
    26fc:	19 97       	sbiw	r26, 0x09	; 9
    26fe:	16 96       	adiw	r26, 0x06	; 6
    2700:	2d 91       	ld	r18, X+
    2702:	3c 91       	ld	r19, X
    2704:	17 97       	sbiw	r26, 0x07	; 7
    2706:	3d 83       	std	Y+5, r19	; 0x05
    2708:	2c 83       	std	Y+4, r18	; 0x04
    270a:	41 81       	ldd	r20, Z+1	; 0x01
    270c:	52 81       	ldd	r21, Z+2	; 0x02
    270e:	9d 01       	movw	r18, r26
    2710:	2e 5f       	subi	r18, 0xFE	; 254
    2712:	3f 4f       	sbci	r19, 0xFF	; 255
    2714:	42 17       	cp	r20, r18
    2716:	53 07       	cpc	r21, r19
    2718:	31 f4       	brne	.+12     	; 0x2726 <xTaskGenericNotifyFromISR+0x154>
    271a:	18 96       	adiw	r26, 0x08	; 8
    271c:	4d 91       	ld	r20, X+
    271e:	5c 91       	ld	r21, X
    2720:	19 97       	sbiw	r26, 0x09	; 9
    2722:	52 83       	std	Z+2, r21	; 0x02
    2724:	41 83       	std	Z+1, r20	; 0x01
    2726:	1d 96       	adiw	r26, 0x0d	; 13
    2728:	1c 92       	st	X, r1
    272a:	1e 92       	st	-X, r1
    272c:	1c 97       	sbiw	r26, 0x0c	; 12
    272e:	90 81       	ld	r25, Z
    2730:	91 50       	subi	r25, 0x01	; 1
    2732:	90 83       	st	Z, r25
    2734:	5a 96       	adiw	r26, 0x1a	; 26
    2736:	ec 91       	ld	r30, X
    2738:	5a 97       	sbiw	r26, 0x1a	; 26
    273a:	90 91 69 10 	lds	r25, 0x1069	; 0x801069 <uxTopReadyPriority>
    273e:	9e 17       	cp	r25, r30
    2740:	10 f4       	brcc	.+4      	; 0x2746 <xTaskGenericNotifyFromISR+0x174>
    2742:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    2746:	9b e0       	ldi	r25, 0x0B	; 11
    2748:	9e 9f       	mul	r25, r30
    274a:	f0 01       	movw	r30, r0
    274c:	11 24       	eor	r1, r1
    274e:	e5 55       	subi	r30, 0x55	; 85
    2750:	ff 4e       	sbci	r31, 0xEF	; 239
    2752:	01 80       	ldd	r0, Z+1	; 0x01
    2754:	f2 81       	ldd	r31, Z+2	; 0x02
    2756:	e0 2d       	mov	r30, r0
    2758:	17 96       	adiw	r26, 0x07	; 7
    275a:	fc 93       	st	X, r31
    275c:	ee 93       	st	-X, r30
    275e:	16 97       	sbiw	r26, 0x06	; 6
    2760:	46 81       	ldd	r20, Z+6	; 0x06
    2762:	57 81       	ldd	r21, Z+7	; 0x07
    2764:	19 96       	adiw	r26, 0x09	; 9
    2766:	5c 93       	st	X, r21
    2768:	4e 93       	st	-X, r20
    276a:	18 97       	sbiw	r26, 0x08	; 8
    276c:	c6 81       	ldd	r28, Z+6	; 0x06
    276e:	d7 81       	ldd	r29, Z+7	; 0x07
    2770:	3d 83       	std	Y+5, r19	; 0x05
    2772:	2c 83       	std	Y+4, r18	; 0x04
    2774:	37 83       	std	Z+7, r19	; 0x07
    2776:	26 83       	std	Z+6, r18	; 0x06
    2778:	5a 96       	adiw	r26, 0x1a	; 26
    277a:	ec 91       	ld	r30, X
    277c:	5a 97       	sbiw	r26, 0x1a	; 26
    277e:	9e 9f       	mul	r25, r30
    2780:	f0 01       	movw	r30, r0
    2782:	11 24       	eor	r1, r1
    2784:	e5 55       	subi	r30, 0x55	; 85
    2786:	ff 4e       	sbci	r31, 0xEF	; 239
    2788:	1d 96       	adiw	r26, 0x0d	; 13
    278a:	fc 93       	st	X, r31
    278c:	ee 93       	st	-X, r30
    278e:	1c 97       	sbiw	r26, 0x0c	; 12
    2790:	90 81       	ld	r25, Z
    2792:	9f 5f       	subi	r25, 0xFF	; 255
    2794:	90 83       	st	Z, r25
    2796:	21 c0       	rjmp	.+66     	; 0x27da <xTaskGenericNotifyFromISR+0x208>
    2798:	66 e8       	ldi	r22, 0x86	; 134
    279a:	70 e1       	ldi	r23, 0x10	; 16
    279c:	fb 01       	movw	r30, r22
    279e:	c1 81       	ldd	r28, Z+1	; 0x01
    27a0:	d2 81       	ldd	r29, Z+2	; 0x02
    27a2:	53 96       	adiw	r26, 0x13	; 19
    27a4:	dc 93       	st	X, r29
    27a6:	ce 93       	st	-X, r28
    27a8:	52 97       	sbiw	r26, 0x12	; 18
    27aa:	2e 81       	ldd	r18, Y+6	; 0x06
    27ac:	3f 81       	ldd	r19, Y+7	; 0x07
    27ae:	55 96       	adiw	r26, 0x15	; 21
    27b0:	3c 93       	st	X, r19
    27b2:	2e 93       	st	-X, r18
    27b4:	54 97       	sbiw	r26, 0x14	; 20
    27b6:	4e 81       	ldd	r20, Y+6	; 0x06
    27b8:	5f 81       	ldd	r21, Y+7	; 0x07
    27ba:	9d 01       	movw	r18, r26
    27bc:	22 5f       	subi	r18, 0xF2	; 242
    27be:	3f 4f       	sbci	r19, 0xFF	; 255
    27c0:	fa 01       	movw	r30, r20
    27c2:	35 83       	std	Z+5, r19	; 0x05
    27c4:	24 83       	std	Z+4, r18	; 0x04
    27c6:	3f 83       	std	Y+7, r19	; 0x07
    27c8:	2e 83       	std	Y+6, r18	; 0x06
    27ca:	59 96       	adiw	r26, 0x19	; 25
    27cc:	7c 93       	st	X, r23
    27ce:	6e 93       	st	-X, r22
    27d0:	58 97       	sbiw	r26, 0x18	; 24
    27d2:	fb 01       	movw	r30, r22
    27d4:	90 81       	ld	r25, Z
    27d6:	9f 5f       	subi	r25, 0xFF	; 255
    27d8:	90 83       	st	Z, r25
    27da:	5a 96       	adiw	r26, 0x1a	; 26
    27dc:	2c 91       	ld	r18, X
    27de:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    27e2:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    27e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    27e8:	92 17       	cp	r25, r18
    27ea:	48 f4       	brcc	.+18     	; 0x27fe <xTaskGenericNotifyFromISR+0x22c>
    27ec:	c1 14       	cp	r12, r1
    27ee:	d1 04       	cpc	r13, r1
    27f0:	19 f0       	breq	.+6      	; 0x27f8 <xTaskGenericNotifyFromISR+0x226>
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	f6 01       	movw	r30, r12
    27f6:	90 83       	st	Z, r25
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	90 93 63 10 	sts	0x1063, r25	; 0x801063 <xYieldPending>
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	0f 91       	pop	r16
    2804:	ff 90       	pop	r15
    2806:	ef 90       	pop	r14
    2808:	df 90       	pop	r13
    280a:	cf 90       	pop	r12
    280c:	bf 90       	pop	r11
    280e:	af 90       	pop	r10
    2810:	9f 90       	pop	r9
    2812:	8f 90       	pop	r8
    2814:	08 95       	ret

00002816 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	21 f4       	brne	.+8      	; 0x2822 <xTaskGenericNotifyStateClear+0xc>
    281a:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    281e:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	fc 01       	movw	r30, r24
    282c:	e6 0f       	add	r30, r22
    282e:	f7 1f       	adc	r31, r23
    2830:	23 a9       	ldd	r18, Z+51	; 0x33
    2832:	22 30       	cpi	r18, 0x02	; 2
    2834:	31 f4       	brne	.+12     	; 0x2842 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2836:	fc 01       	movw	r30, r24
    2838:	e6 0f       	add	r30, r22
    283a:	f7 1f       	adc	r31, r23
    283c:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	01 c0       	rjmp	.+2      	; 0x2844 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2842:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2844:	0f 90       	pop	r0
    2846:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2848:	08 95       	ret

0000284a <prvGetNextExpireTime>:
    284a:	dc 01       	movw	r26, r24
    284c:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
    2850:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2854:	80 81       	ld	r24, Z
    2856:	91 e0       	ldi	r25, 0x01	; 1
    2858:	81 11       	cpse	r24, r1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9c 93       	st	X, r25
    285e:	91 11       	cpse	r25, r1
    2860:	08 c0       	rjmp	.+16     	; 0x2872 <prvGetNextExpireTime+0x28>
    2862:	07 80       	ldd	r0, Z+7	; 0x07
    2864:	f0 85       	ldd	r31, Z+8	; 0x08
    2866:	e0 2d       	mov	r30, r0
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	08 95       	ret
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	cb 01       	movw	r24, r22
    2878:	08 95       	ret

0000287a <prvInsertTimerInActiveList>:
    287a:	cf 92       	push	r12
    287c:	df 92       	push	r13
    287e:	ef 92       	push	r14
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	fc 01       	movw	r30, r24
    2888:	42 83       	std	Z+2, r20	; 0x02
    288a:	53 83       	std	Z+3, r21	; 0x03
    288c:	64 83       	std	Z+4, r22	; 0x04
    288e:	75 83       	std	Z+5, r23	; 0x05
    2890:	93 87       	std	Z+11, r25	; 0x0b
    2892:	82 87       	std	Z+10, r24	; 0x0a
    2894:	04 17       	cp	r16, r20
    2896:	15 07       	cpc	r17, r21
    2898:	26 07       	cpc	r18, r22
    289a:	37 07       	cpc	r19, r23
    289c:	c0 f0       	brcs	.+48     	; 0x28ce <prvInsertTimerInActiveList+0x54>
    289e:	0c 19       	sub	r16, r12
    28a0:	1d 09       	sbc	r17, r13
    28a2:	2e 09       	sbc	r18, r14
    28a4:	3f 09       	sbc	r19, r15
    28a6:	86 85       	ldd	r24, Z+14	; 0x0e
    28a8:	97 85       	ldd	r25, Z+15	; 0x0f
    28aa:	a0 89       	ldd	r26, Z+16	; 0x10
    28ac:	b1 89       	ldd	r27, Z+17	; 0x11
    28ae:	08 17       	cp	r16, r24
    28b0:	19 07       	cpc	r17, r25
    28b2:	2a 07       	cpc	r18, r26
    28b4:	3b 07       	cpc	r19, r27
    28b6:	00 f5       	brcc	.+64     	; 0x28f8 <prvInsertTimerInActiveList+0x7e>
    28b8:	bf 01       	movw	r22, r30
    28ba:	6e 5f       	subi	r22, 0xFE	; 254
    28bc:	7f 4f       	sbci	r23, 0xFF	; 255
    28be:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <pxOverflowTimerList>
    28c2:	90 91 24 11 	lds	r25, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
    28c6:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	18 c0       	rjmp	.+48     	; 0x28fe <prvInsertTimerInActiveList+0x84>
    28ce:	0c 15       	cp	r16, r12
    28d0:	1d 05       	cpc	r17, r13
    28d2:	2e 05       	cpc	r18, r14
    28d4:	3f 05       	cpc	r19, r15
    28d6:	28 f4       	brcc	.+10     	; 0x28e2 <prvInsertTimerInActiveList+0x68>
    28d8:	4c 15       	cp	r20, r12
    28da:	5d 05       	cpc	r21, r13
    28dc:	6e 05       	cpc	r22, r14
    28de:	7f 05       	cpc	r23, r15
    28e0:	68 f4       	brcc	.+26     	; 0x28fc <prvInsertTimerInActiveList+0x82>
    28e2:	bf 01       	movw	r22, r30
    28e4:	6e 5f       	subi	r22, 0xFE	; 254
    28e6:	7f 4f       	sbci	r23, 0xFF	; 255
    28e8:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <pxCurrentTimerList>
    28ec:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    28f0:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	03 c0       	rjmp	.+6      	; 0x28fe <prvInsertTimerInActiveList+0x84>
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	01 c0       	rjmp	.+2      	; 0x28fe <prvInsertTimerInActiveList+0x84>
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	1f 91       	pop	r17
    2900:	0f 91       	pop	r16
    2902:	ff 90       	pop	r15
    2904:	ef 90       	pop	r14
    2906:	df 90       	pop	r13
    2908:	cf 90       	pop	r12
    290a:	08 95       	ret

0000290c <prvCheckForValidListAndQueue>:
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	0f 92       	push	r0
    2912:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2916:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    291a:	89 2b       	or	r24, r25
    291c:	e9 f4       	brne	.+58     	; 0x2958 <prvCheckForValidListAndQueue+0x4c>
    291e:	82 e3       	ldi	r24, 0x32	; 50
    2920:	91 e1       	ldi	r25, 0x11	; 17
    2922:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    2926:	87 e2       	ldi	r24, 0x27	; 39
    2928:	91 e1       	ldi	r25, 0x11	; 17
    292a:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    292e:	82 e3       	ldi	r24, 0x32	; 50
    2930:	91 e1       	ldi	r25, 0x11	; 17
    2932:	90 93 26 11 	sts	0x1126, r25	; 0x801126 <pxCurrentTimerList+0x1>
    2936:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <pxCurrentTimerList>
    293a:	87 e2       	ldi	r24, 0x27	; 39
    293c:	91 e1       	ldi	r25, 0x11	; 17
    293e:	90 93 24 11 	sts	0x1124, r25	; 0x801124 <pxOverflowTimerList+0x1>
    2942:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <pxOverflowTimerList>
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	67 e0       	ldi	r22, 0x07	; 7
    294a:	8a e0       	ldi	r24, 0x0A	; 10
    294c:	0e 94 c3 04 	call	0x986	; 0x986 <xQueueGenericCreate>
    2950:	90 93 22 11 	sts	0x1122, r25	; 0x801122 <xTimerQueue+0x1>
    2954:	80 93 21 11 	sts	0x1121, r24	; 0x801121 <xTimerQueue>
    2958:	0f 90       	pop	r0
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	08 95       	ret

0000295e <xTimerCreateTimerTask>:
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	d3 df       	rcall	.-90     	; 0x290c <prvCheckForValidListAndQueue>
    2966:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    296a:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    296e:	89 2b       	or	r24, r25
    2970:	91 f0       	breq	.+36     	; 0x2996 <xTimerCreateTimerTask+0x38>
    2972:	0f 2e       	mov	r0, r31
    2974:	ff e1       	ldi	r31, 0x1F	; 31
    2976:	ef 2e       	mov	r14, r31
    2978:	f1 e1       	ldi	r31, 0x11	; 17
    297a:	ff 2e       	mov	r15, r31
    297c:	f0 2d       	mov	r31, r0
    297e:	03 e0       	ldi	r16, 0x03	; 3
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 ec       	ldi	r20, 0xC0	; 192
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	62 e4       	ldi	r22, 0x42	; 66
    298a:	72 e0       	ldi	r23, 0x02	; 2
    298c:	86 e8       	ldi	r24, 0x86	; 134
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 bf 0b 	call	0x177e	; 0x177e <xTaskCreate>
    2994:	01 c0       	rjmp	.+2      	; 0x2998 <xTimerCreateTimerTask+0x3a>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	08 95       	ret

000029a0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    29a0:	8f 92       	push	r8
    29a2:	9f 92       	push	r9
    29a4:	af 92       	push	r10
    29a6:	bf 92       	push	r11
    29a8:	cf 92       	push	r12
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	27 97       	sbiw	r28, 0x07	; 7
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    29c8:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <xTimerQueue>
    29cc:	f0 91 22 11 	lds	r31, 0x1122	; 0x801122 <xTimerQueue+0x1>
    29d0:	30 97       	sbiw	r30, 0x00	; 0
    29d2:	81 f1       	breq	.+96     	; 0x2a34 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    29d4:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    29d6:	2a 83       	std	Y+2, r18	; 0x02
    29d8:	3b 83       	std	Y+3, r19	; 0x03
    29da:	4c 83       	std	Y+4, r20	; 0x04
    29dc:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    29de:	9f 83       	std	Y+7, r25	; 0x07
    29e0:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    29e2:	66 30       	cpi	r22, 0x06	; 6
    29e4:	f4 f4       	brge	.+60     	; 0x2a22 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    29e6:	ee db       	rcall	.-2084   	; 0x21c4 <xTaskGetSchedulerState>
    29e8:	82 30       	cpi	r24, 0x02	; 2
    29ea:	69 f4       	brne	.+26     	; 0x2a06 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    29ec:	00 e0       	ldi	r16, 0x00	; 0
    29ee:	a7 01       	movw	r20, r14
    29f0:	96 01       	movw	r18, r12
    29f2:	be 01       	movw	r22, r28
    29f4:	6f 5f       	subi	r22, 0xFF	; 255
    29f6:	7f 4f       	sbci	r23, 0xFF	; 255
    29f8:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    29fc:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2a00:	0e 94 e6 04 	call	0x9cc	; 0x9cc <xQueueGenericSend>
    2a04:	18 c0       	rjmp	.+48     	; 0x2a36 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2a06:	00 e0       	ldi	r16, 0x00	; 0
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	a9 01       	movw	r20, r18
    2a0e:	be 01       	movw	r22, r28
    2a10:	6f 5f       	subi	r22, 0xFF	; 255
    2a12:	7f 4f       	sbci	r23, 0xFF	; 255
    2a14:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2a18:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2a1c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <xQueueGenericSend>
    2a20:	0a c0       	rjmp	.+20     	; 0x2a36 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	a8 01       	movw	r20, r16
    2a26:	be 01       	movw	r22, r28
    2a28:	6f 5f       	subi	r22, 0xFF	; 255
    2a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2c:	cf 01       	movw	r24, r30
    2a2e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xQueueGenericSendFromISR>
    2a32:	01 c0       	rjmp	.+2      	; 0x2a36 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2a34:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2a36:	27 96       	adiw	r28, 0x07	; 7
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	ff 90       	pop	r15
    2a4c:	ef 90       	pop	r14
    2a4e:	df 90       	pop	r13
    2a50:	cf 90       	pop	r12
    2a52:	bf 90       	pop	r11
    2a54:	af 90       	pop	r10
    2a56:	9f 90       	pop	r9
    2a58:	8f 90       	pop	r8
    2a5a:	08 95       	ret

00002a5c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a74:	3b c0       	rjmp	.+118    	; 0x2aec <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a76:	07 80       	ldd	r0, Z+7	; 0x07
    2a78:	f0 85       	ldd	r31, Z+8	; 0x08
    2a7a:	e0 2d       	mov	r30, r0
    2a7c:	80 80       	ld	r8, Z
    2a7e:	91 80       	ldd	r9, Z+1	; 0x01
    2a80:	a2 80       	ldd	r10, Z+2	; 0x02
    2a82:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2a84:	c0 85       	ldd	r28, Z+8	; 0x08
    2a86:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a88:	8e 01       	movw	r16, r28
    2a8a:	0e 5f       	subi	r16, 0xFE	; 254
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	c8 01       	movw	r24, r16
    2a90:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a94:	ec 89       	ldd	r30, Y+20	; 0x14
    2a96:	fd 89       	ldd	r31, Y+21	; 0x15
    2a98:	ce 01       	movw	r24, r28
    2a9a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a9c:	8e 89       	ldd	r24, Y+22	; 0x16
    2a9e:	82 ff       	sbrs	r24, 2
    2aa0:	25 c0       	rjmp	.+74     	; 0x2aec <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2aa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2aa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2aa6:	a8 89       	ldd	r26, Y+16	; 0x10
    2aa8:	b9 89       	ldd	r27, Y+17	; 0x11
    2aaa:	88 0d       	add	r24, r8
    2aac:	99 1d       	adc	r25, r9
    2aae:	aa 1d       	adc	r26, r10
    2ab0:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2ab2:	88 16       	cp	r8, r24
    2ab4:	99 06       	cpc	r9, r25
    2ab6:	aa 06       	cpc	r10, r26
    2ab8:	bb 06       	cpc	r11, r27
    2aba:	70 f4       	brcc	.+28     	; 0x2ad8 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2abc:	8a 83       	std	Y+2, r24	; 0x02
    2abe:	9b 83       	std	Y+3, r25	; 0x03
    2ac0:	ac 83       	std	Y+4, r26	; 0x04
    2ac2:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2ac4:	db 87       	std	Y+11, r29	; 0x0b
    2ac6:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2ac8:	b8 01       	movw	r22, r16
    2aca:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <pxCurrentTimerList>
    2ace:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2ad2:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    2ad6:	0a c0       	rjmp	.+20     	; 0x2aec <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ad8:	c1 2c       	mov	r12, r1
    2ada:	d1 2c       	mov	r13, r1
    2adc:	76 01       	movw	r14, r12
    2ade:	00 e0       	ldi	r16, 0x00	; 0
    2ae0:	10 e0       	ldi	r17, 0x00	; 0
    2ae2:	a5 01       	movw	r20, r10
    2ae4:	94 01       	movw	r18, r8
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	ce 01       	movw	r24, r28
    2aea:	5a df       	rcall	.-332    	; 0x29a0 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2aec:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
    2af0:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2af4:	80 81       	ld	r24, Z
    2af6:	81 11       	cpse	r24, r1
    2af8:	be cf       	rjmp	.-132    	; 0x2a76 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2afa:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <pxOverflowTimerList>
    2afe:	90 91 24 11 	lds	r25, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
    2b02:	90 93 26 11 	sts	0x1126, r25	; 0x801126 <pxCurrentTimerList+0x1>
    2b06:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2b0a:	f0 93 24 11 	sts	0x1124, r31	; 0x801124 <pxOverflowTimerList+0x1>
    2b0e:	e0 93 23 11 	sts	0x1123, r30	; 0x801123 <pxOverflowTimerList>
    }
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	df 90       	pop	r13
    2b20:	cf 90       	pop	r12
    2b22:	bf 90       	pop	r11
    2b24:	af 90       	pop	r10
    2b26:	9f 90       	pop	r9
    2b28:	8f 90       	pop	r8
    2b2a:	08 95       	ret

00002b2c <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2b2c:	cf 92       	push	r12
    2b2e:	df 92       	push	r13
    2b30:	ef 92       	push	r14
    2b32:	ff 92       	push	r15
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2b3a:	0e 94 49 0c 	call	0x1892	; 0x1892 <xTaskGetTickCount>
    2b3e:	6b 01       	movw	r12, r22
    2b40:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2b42:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <xLastTime.2436>
    2b46:	90 91 1c 11 	lds	r25, 0x111C	; 0x80111c <xLastTime.2436+0x1>
    2b4a:	a0 91 1d 11 	lds	r26, 0x111D	; 0x80111d <xLastTime.2436+0x2>
    2b4e:	b0 91 1e 11 	lds	r27, 0x111E	; 0x80111e <xLastTime.2436+0x3>
    2b52:	c8 16       	cp	r12, r24
    2b54:	d9 06       	cpc	r13, r25
    2b56:	ea 06       	cpc	r14, r26
    2b58:	fb 06       	cpc	r15, r27
    2b5a:	20 f4       	brcc	.+8      	; 0x2b64 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2b5c:	7f df       	rcall	.-258    	; 0x2a5c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	88 83       	st	Y, r24
    2b62:	01 c0       	rjmp	.+2      	; 0x2b66 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2b64:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2b66:	c0 92 1b 11 	sts	0x111B, r12	; 0x80111b <xLastTime.2436>
    2b6a:	d0 92 1c 11 	sts	0x111C, r13	; 0x80111c <xLastTime.2436+0x1>
    2b6e:	e0 92 1d 11 	sts	0x111D, r14	; 0x80111d <xLastTime.2436+0x2>
    2b72:	f0 92 1e 11 	sts	0x111E, r15	; 0x80111e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2b76:	c7 01       	movw	r24, r14
    2b78:	b6 01       	movw	r22, r12
    2b7a:	df 91       	pop	r29
    2b7c:	cf 91       	pop	r28
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	df 90       	pop	r13
    2b84:	cf 90       	pop	r12
    2b86:	08 95       	ret

00002b88 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2b88:	4f 92       	push	r4
    2b8a:	5f 92       	push	r5
    2b8c:	6f 92       	push	r6
    2b8e:	7f 92       	push	r7
    2b90:	8f 92       	push	r8
    2b92:	9f 92       	push	r9
    2b94:	af 92       	push	r10
    2b96:	bf 92       	push	r11
    2b98:	cf 92       	push	r12
    2b9a:	df 92       	push	r13
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	4b 01       	movw	r8, r22
    2baa:	5c 01       	movw	r10, r24
    2bac:	29 01       	movw	r4, r18
    2bae:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2bb0:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
    2bb4:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2bb8:	07 80       	ldd	r0, Z+7	; 0x07
    2bba:	f0 85       	ldd	r31, Z+8	; 0x08
    2bbc:	e0 2d       	mov	r30, r0
    2bbe:	c0 85       	ldd	r28, Z+8	; 0x08
    2bc0:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	02 96       	adiw	r24, 0x02	; 2
    2bc6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2bca:	8e 89       	ldd	r24, Y+22	; 0x16
    2bcc:	82 ff       	sbrs	r24, 2
    2bce:	1b c0       	rjmp	.+54     	; 0x2c06 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2bd0:	4e 85       	ldd	r20, Y+14	; 0x0e
    2bd2:	5f 85       	ldd	r21, Y+15	; 0x0f
    2bd4:	68 89       	ldd	r22, Y+16	; 0x10
    2bd6:	79 89       	ldd	r23, Y+17	; 0x11
    2bd8:	48 0d       	add	r20, r8
    2bda:	59 1d       	adc	r21, r9
    2bdc:	6a 1d       	adc	r22, r10
    2bde:	7b 1d       	adc	r23, r11
    2be0:	75 01       	movw	r14, r10
    2be2:	64 01       	movw	r12, r8
    2be4:	93 01       	movw	r18, r6
    2be6:	82 01       	movw	r16, r4
    2be8:	ce 01       	movw	r24, r28
    2bea:	47 de       	rcall	.-882    	; 0x287a <prvInsertTimerInActiveList>
    2bec:	88 23       	and	r24, r24
    2bee:	69 f0       	breq	.+26     	; 0x2c0a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2bf0:	c1 2c       	mov	r12, r1
    2bf2:	d1 2c       	mov	r13, r1
    2bf4:	76 01       	movw	r14, r12
    2bf6:	00 e0       	ldi	r16, 0x00	; 0
    2bf8:	10 e0       	ldi	r17, 0x00	; 0
    2bfa:	a5 01       	movw	r20, r10
    2bfc:	94 01       	movw	r18, r8
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	ce 01       	movw	r24, r28
    2c02:	ce de       	rcall	.-612    	; 0x29a0 <xTimerGenericCommand>
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2c06:	8e 7f       	andi	r24, 0xFE	; 254
    2c08:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c0a:	ec 89       	ldd	r30, Y+20	; 0x14
    2c0c:	fd 89       	ldd	r31, Y+21	; 0x15
    2c0e:	ce 01       	movw	r24, r28
    2c10:	19 95       	eicall
    }
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	1f 91       	pop	r17
    2c18:	0f 91       	pop	r16
    2c1a:	ff 90       	pop	r15
    2c1c:	ef 90       	pop	r14
    2c1e:	df 90       	pop	r13
    2c20:	cf 90       	pop	r12
    2c22:	bf 90       	pop	r11
    2c24:	af 90       	pop	r10
    2c26:	9f 90       	pop	r9
    2c28:	8f 90       	pop	r8
    2c2a:	7f 90       	pop	r7
    2c2c:	6f 90       	pop	r6
    2c2e:	5f 90       	pop	r5
    2c30:	4f 90       	pop	r4
    2c32:	08 95       	ret

00002c34 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2c34:	8f 92       	push	r8
    2c36:	9f 92       	push	r9
    2c38:	af 92       	push	r10
    2c3a:	bf 92       	push	r11
    2c3c:	cf 92       	push	r12
    2c3e:	df 92       	push	r13
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	1f 93       	push	r17
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	1f 92       	push	r1
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	6b 01       	movw	r12, r22
    2c52:	7c 01       	movw	r14, r24
    2c54:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2c56:	0e 94 43 0c 	call	0x1886	; 0x1886 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	66 df       	rcall	.-308    	; 0x2b2c <prvSampleTimeNow>
    2c60:	4b 01       	movw	r8, r22
    2c62:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	81 11       	cpse	r24, r1
    2c68:	2d c0       	rjmp	.+90     	; 0x2cc4 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2c6a:	11 11       	cpse	r17, r1
    2c6c:	0d c0       	rjmp	.+26     	; 0x2c88 <prvProcessTimerOrBlockTask+0x54>
    2c6e:	8c 14       	cp	r8, r12
    2c70:	9d 04       	cpc	r9, r13
    2c72:	ae 04       	cpc	r10, r14
    2c74:	bf 04       	cpc	r11, r15
    2c76:	40 f0       	brcs	.+16     	; 0x2c88 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2c78:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2c7c:	a5 01       	movw	r20, r10
    2c7e:	94 01       	movw	r18, r8
    2c80:	c7 01       	movw	r24, r14
    2c82:	b6 01       	movw	r22, r12
    2c84:	81 df       	rcall	.-254    	; 0x2b88 <prvProcessExpiredTimer>
    2c86:	20 c0       	rjmp	.+64     	; 0x2cc8 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2c88:	11 23       	and	r17, r17
    2c8a:	41 f0       	breq	.+16     	; 0x2c9c <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2c8c:	e0 91 23 11 	lds	r30, 0x1123	; 0x801123 <pxOverflowTimerList>
    2c90:	f0 91 24 11 	lds	r31, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
    2c94:	80 81       	ld	r24, Z
    2c96:	11 e0       	ldi	r17, 0x01	; 1
    2c98:	81 11       	cpse	r24, r1
    2c9a:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2c9c:	b7 01       	movw	r22, r14
    2c9e:	a6 01       	movw	r20, r12
    2ca0:	48 19       	sub	r20, r8
    2ca2:	59 09       	sbc	r21, r9
    2ca4:	6a 09       	sbc	r22, r10
    2ca6:	7b 09       	sbc	r23, r11
    2ca8:	21 2f       	mov	r18, r17
    2caa:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2cae:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2cb2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2cb6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xTaskResumeAll>
    2cba:	81 11       	cpse	r24, r1
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2cbe:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2cc4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <xTaskResumeAll>
            }
        }
    }
    2cc8:	0f 90       	pop	r0
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
    2cd8:	bf 90       	pop	r11
    2cda:	af 90       	pop	r10
    2cdc:	9f 90       	pop	r9
    2cde:	8f 90       	pop	r8
    2ce0:	08 95       	ret

00002ce2 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2ce2:	af 92       	push	r10
    2ce4:	bf 92       	push	r11
    2ce6:	cf 92       	push	r12
    2ce8:	df 92       	push	r13
    2cea:	ef 92       	push	r14
    2cec:	ff 92       	push	r15
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	28 97       	sbiw	r28, 0x08	; 8
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2d06:	82 c0       	rjmp	.+260    	; 0x2e0c <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	88 23       	and	r24, r24
    2d0c:	0c f4       	brge	.+2      	; 0x2d10 <prvProcessReceivedCommands+0x2e>
    2d0e:	7e c0       	rjmp	.+252    	; 0x2e0c <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2d10:	ae 80       	ldd	r10, Y+6	; 0x06
    2d12:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2d14:	d5 01       	movw	r26, r10
    2d16:	1c 96       	adiw	r26, 0x0c	; 12
    2d18:	8d 91       	ld	r24, X+
    2d1a:	9c 91       	ld	r25, X
    2d1c:	1d 97       	sbiw	r26, 0x0d	; 13
    2d1e:	89 2b       	or	r24, r25
    2d20:	21 f0       	breq	.+8      	; 0x2d2a <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d22:	c5 01       	movw	r24, r10
    2d24:	02 96       	adiw	r24, 0x02	; 2
    2d26:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	08 96       	adiw	r24, 0x08	; 8
    2d2e:	fe de       	rcall	.-516    	; 0x2b2c <prvSampleTimeNow>
    2d30:	8b 01       	movw	r16, r22
    2d32:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2d34:	e9 81       	ldd	r30, Y+1	; 0x01
    2d36:	0e 2e       	mov	r0, r30
    2d38:	00 0c       	add	r0, r0
    2d3a:	ff 0b       	sbc	r31, r31
    2d3c:	ea 30       	cpi	r30, 0x0A	; 10
    2d3e:	f1 05       	cpc	r31, r1
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <prvProcessReceivedCommands+0x62>
    2d42:	64 c0       	rjmp	.+200    	; 0x2e0c <prvProcessReceivedCommands+0x12a>
    2d44:	88 27       	eor	r24, r24
    2d46:	ee 58       	subi	r30, 0x8E	; 142
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4c:	0c 94 ec 24 	jmp	0x49d8	; 0x49d8 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d50:	f5 01       	movw	r30, r10
    2d52:	86 89       	ldd	r24, Z+22	; 0x16
    2d54:	81 60       	ori	r24, 0x01	; 1
    2d56:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2d58:	ca 80       	ldd	r12, Y+2	; 0x02
    2d5a:	db 80       	ldd	r13, Y+3	; 0x03
    2d5c:	ec 80       	ldd	r14, Y+4	; 0x04
    2d5e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d60:	46 85       	ldd	r20, Z+14	; 0x0e
    2d62:	57 85       	ldd	r21, Z+15	; 0x0f
    2d64:	60 89       	ldd	r22, Z+16	; 0x10
    2d66:	71 89       	ldd	r23, Z+17	; 0x11
    2d68:	4c 0d       	add	r20, r12
    2d6a:	5d 1d       	adc	r21, r13
    2d6c:	6e 1d       	adc	r22, r14
    2d6e:	7f 1d       	adc	r23, r15
    2d70:	c5 01       	movw	r24, r10
    2d72:	83 dd       	rcall	.-1274   	; 0x287a <prvInsertTimerInActiveList>
    2d74:	88 23       	and	r24, r24
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <prvProcessReceivedCommands+0x98>
    2d78:	49 c0       	rjmp	.+146    	; 0x2e0c <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d7a:	d5 01       	movw	r26, r10
    2d7c:	54 96       	adiw	r26, 0x14	; 20
    2d7e:	ed 91       	ld	r30, X+
    2d80:	fc 91       	ld	r31, X
    2d82:	55 97       	sbiw	r26, 0x15	; 21
    2d84:	c5 01       	movw	r24, r10
    2d86:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d88:	f5 01       	movw	r30, r10
    2d8a:	86 89       	ldd	r24, Z+22	; 0x16
    2d8c:	82 ff       	sbrs	r24, 2
    2d8e:	3e c0       	rjmp	.+124    	; 0x2e0c <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2d90:	4a 81       	ldd	r20, Y+2	; 0x02
    2d92:	5b 81       	ldd	r21, Y+3	; 0x03
    2d94:	6c 81       	ldd	r22, Y+4	; 0x04
    2d96:	7d 81       	ldd	r23, Y+5	; 0x05
    2d98:	86 85       	ldd	r24, Z+14	; 0x0e
    2d9a:	97 85       	ldd	r25, Z+15	; 0x0f
    2d9c:	a0 89       	ldd	r26, Z+16	; 0x10
    2d9e:	b1 89       	ldd	r27, Z+17	; 0x11
    2da0:	9a 01       	movw	r18, r20
    2da2:	ab 01       	movw	r20, r22
    2da4:	28 0f       	add	r18, r24
    2da6:	39 1f       	adc	r19, r25
    2da8:	4a 1f       	adc	r20, r26
    2daa:	5b 1f       	adc	r21, r27
    2dac:	c1 2c       	mov	r12, r1
    2dae:	d1 2c       	mov	r13, r1
    2db0:	76 01       	movw	r14, r12
    2db2:	00 e0       	ldi	r16, 0x00	; 0
    2db4:	10 e0       	ldi	r17, 0x00	; 0
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	c5 01       	movw	r24, r10
    2dba:	f2 dd       	rcall	.-1052   	; 0x29a0 <xTimerGenericCommand>
    2dbc:	27 c0       	rjmp	.+78     	; 0x2e0c <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2dbe:	d5 01       	movw	r26, r10
    2dc0:	56 96       	adiw	r26, 0x16	; 22
    2dc2:	8c 91       	ld	r24, X
    2dc4:	56 97       	sbiw	r26, 0x16	; 22
    2dc6:	8e 7f       	andi	r24, 0xFE	; 254
    2dc8:	56 96       	adiw	r26, 0x16	; 22
    2dca:	8c 93       	st	X, r24
                        break;
    2dcc:	1f c0       	rjmp	.+62     	; 0x2e0c <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2dce:	f5 01       	movw	r30, r10
    2dd0:	86 89       	ldd	r24, Z+22	; 0x16
    2dd2:	81 60       	ori	r24, 0x01	; 1
    2dd4:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2dd6:	4a 81       	ldd	r20, Y+2	; 0x02
    2dd8:	5b 81       	ldd	r21, Y+3	; 0x03
    2dda:	6c 81       	ldd	r22, Y+4	; 0x04
    2ddc:	7d 81       	ldd	r23, Y+5	; 0x05
    2dde:	46 87       	std	Z+14, r20	; 0x0e
    2de0:	57 87       	std	Z+15, r21	; 0x0f
    2de2:	60 8b       	std	Z+16, r22	; 0x10
    2de4:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2de6:	40 0f       	add	r20, r16
    2de8:	51 1f       	adc	r21, r17
    2dea:	62 1f       	adc	r22, r18
    2dec:	73 1f       	adc	r23, r19
    2dee:	68 01       	movw	r12, r16
    2df0:	79 01       	movw	r14, r18
    2df2:	c5 01       	movw	r24, r10
    2df4:	42 dd       	rcall	.-1404   	; 0x287a <prvInsertTimerInActiveList>
                        break;
    2df6:	0a c0       	rjmp	.+20     	; 0x2e0c <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2df8:	f5 01       	movw	r30, r10
    2dfa:	86 89       	ldd	r24, Z+22	; 0x16
    2dfc:	81 fd       	sbrc	r24, 1
    2dfe:	04 c0       	rjmp	.+8      	; 0x2e08 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2e00:	c5 01       	movw	r24, r10
    2e02:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <vPortFree>
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e08:	8e 7f       	andi	r24, 0xFE	; 254
    2e0a:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	a9 01       	movw	r20, r18
    2e12:	be 01       	movw	r22, r28
    2e14:	6f 5f       	subi	r22, 0xFF	; 255
    2e16:	7f 4f       	sbci	r23, 0xFF	; 255
    2e18:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2e1c:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2e20:	0e 94 d1 05 	call	0xba2	; 0xba2 <xQueueReceive>
    2e24:	81 11       	cpse	r24, r1
    2e26:	70 cf       	rjmp	.-288    	; 0x2d08 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2e28:	28 96       	adiw	r28, 0x08	; 8
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	df 90       	pop	r13
    2e42:	cf 90       	pop	r12
    2e44:	bf 90       	pop	r11
    2e46:	af 90       	pop	r10
    2e48:	08 95       	ret

00002e4a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2e4a:	08 95       	ret

00002e4c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2e4c:	84 b1       	in	r24, 0x04	; 4
    2e4e:	80 68       	ori	r24, 0x80	; 128
    2e50:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2e52:	85 b1       	in	r24, 0x05	; 5
    2e54:	80 68       	ori	r24, 0x80	; 128
    2e56:	85 b9       	out	0x05, r24	; 5
    2e58:	08 95       	ret

00002e5a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2e5a:	83 b1       	in	r24, 0x03	; 3
    2e5c:	80 68       	ori	r24, 0x80	; 128
    2e5e:	83 b9       	out	0x03, r24	; 3
    2e60:	08 95       	ret

00002e62 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2e62:	f4 df       	rcall	.-24     	; 0x2e4c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e64:	2f ef       	ldi	r18, 0xFF	; 255
    2e66:	80 e7       	ldi	r24, 0x70	; 112
    2e68:	92 e0       	ldi	r25, 0x02	; 2
    2e6a:	21 50       	subi	r18, 0x01	; 1
    2e6c:	80 40       	sbci	r24, 0x00	; 0
    2e6e:	90 40       	sbci	r25, 0x00	; 0
    2e70:	e1 f7       	brne	.-8      	; 0x2e6a <vApplicationMallocFailedHook+0x8>
    2e72:	00 c0       	rjmp	.+0      	; 0x2e74 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2e74:	00 00       	nop
    2e76:	f1 df       	rcall	.-30     	; 0x2e5a <prvBlinkMainLed>
    2e78:	f5 cf       	rjmp	.-22     	; 0x2e64 <vApplicationMallocFailedHook+0x2>

00002e7a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2e7a:	e8 df       	rcall	.-48     	; 0x2e4c <prvSetMainLedOn>
    2e7c:	2f ef       	ldi	r18, 0xFF	; 255
    2e7e:	87 ea       	ldi	r24, 0xA7	; 167
    2e80:	91 e6       	ldi	r25, 0x61	; 97
    2e82:	21 50       	subi	r18, 0x01	; 1
    2e84:	80 40       	sbci	r24, 0x00	; 0
    2e86:	90 40       	sbci	r25, 0x00	; 0
    2e88:	e1 f7       	brne	.-8      	; 0x2e82 <vApplicationStackOverflowHook+0x8>
    2e8a:	00 c0       	rjmp	.+0      	; 0x2e8c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2e8c:	00 00       	nop
    2e8e:	e5 df       	rcall	.-54     	; 0x2e5a <prvBlinkMainLed>
    2e90:	f5 cf       	rjmp	.-22     	; 0x2e7c <vApplicationStackOverflowHook+0x2>

00002e92 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	0e 94 5e 22 	call	0x44bc	; 0x44bc <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    2e9c:	0a d3       	rcall	.+1556   	; 0x34b2 <lora_driver_rn2483FactoryReset>
    2e9e:	86 d5       	rcall	.+2828   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2ea0:	9f 93       	push	r25
    2ea2:	8f 93       	push	r24
    2ea4:	8a e4       	ldi	r24, 0x4A	; 74
    2ea6:	92 e0       	ldi	r25, 0x02	; 2
    2ea8:	9f 93       	push	r25
    2eaa:	8f 93       	push	r24
    2eac:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    2eb0:	7e d4       	rcall	.+2300   	; 0x37ae <lora_driver_configureToEu868>
    2eb2:	7c d5       	rcall	.+2808   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2eb4:	9f 93       	push	r25
    2eb6:	8f 93       	push	r24
    2eb8:	8d e5       	ldi	r24, 0x5D	; 93
    2eba:	92 e0       	ldi	r25, 0x02	; 2
    2ebc:	9f 93       	push	r25
    2ebe:	8f 93       	push	r24
    2ec0:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    2ec4:	83 e5       	ldi	r24, 0x53	; 83

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    2ec6:	91 e1       	ldi	r25, 0x11	; 17
    2ec8:	06 d3       	rcall	.+1548   	; 0x34d6 <lora_driver_getRn2483Hweui>
    2eca:	70 d5       	rcall	.+2784   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2ecc:	c3 e5       	ldi	r28, 0x53	; 83
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    2ece:	d1 e1       	ldi	r29, 0x11	; 17
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	9f 93       	push	r25
    2ed6:	8f 93       	push	r24
    2ed8:	86 e7       	ldi	r24, 0x76	; 118
    2eda:	92 e0       	ldi	r25, 0x02	; 2
    2edc:	9f 93       	push	r25
    2ede:	8f 93       	push	r24
    2ee0:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    2ee4:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    2ee6:	13 d3       	rcall	.+1574   	; 0x350e <lora_driver_setDeviceIdentifier>
    2ee8:	61 d5       	rcall	.+2754   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2eea:	9f 93       	push	r25
    2eec:	8f 93       	push	r24
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	8a e8       	ldi	r24, 0x8A	; 138
    2ef4:	92 e0       	ldi	r25, 0x02	; 2
    2ef6:	9f 93       	push	r25
    2ef8:	8f 93       	push	r24
    2efa:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    2efe:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    2f00:	6f e9       	ldi	r22, 0x9F	; 159
    2f02:	72 e0       	ldi	r23, 0x02	; 2
    2f04:	80 ec       	ldi	r24, 0xC0	; 192
    2f06:	92 e0       	ldi	r25, 0x02	; 2
    2f08:	30 d5       	rcall	.+2656   	; 0x396a <lora_driver_setOtaaIdentity>
    2f0a:	50 d5       	rcall	.+2720   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2f0c:	9f 93       	push	r25
    2f0e:	8f 93       	push	r24
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	8f e9       	ldi	r24, 0x9F	; 159
    2f16:	92 e0       	ldi	r25, 0x02	; 2
    2f18:	9f 93       	push	r25
    2f1a:	8f 93       	push	r24
    2f1c:	80 ec       	ldi	r24, 0xC0	; 192
    2f1e:	92 e0       	ldi	r25, 0x02	; 2
    2f20:	9f 93       	push	r25
    2f22:	8f 93       	push	r24
    2f24:	81 ed       	ldi	r24, 0xD1	; 209
    2f26:	92 e0       	ldi	r25, 0x02	; 2
    2f28:	9f 93       	push	r25
    2f2a:	8f 93       	push	r24
    2f2c:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    2f30:	21 d3       	rcall	.+1602   	; 0x3574 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    2f32:	3c d5       	rcall	.+2680   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2f34:	9f 93       	push	r25
    2f36:	8f 93       	push	r24
    2f38:	87 e0       	ldi	r24, 0x07	; 7
    2f3a:	93 e0       	ldi	r25, 0x03	; 3
    2f3c:	9f 93       	push	r25
    2f3e:	8f 93       	push	r24
    2f40:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    2f44:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    2f46:	9e b7       	in	r25, 0x3e	; 62
    2f48:	82 96       	adiw	r24, 0x22	; 34
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	f8 94       	cli
    2f4e:	9e bf       	out	0x3e, r25	; 62
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	8d bf       	out	0x3d, r24	; 61
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	08 d4       	rcall	.+2064   	; 0x3768 <lora_driver_setAdaptiveDataRate>
    2f58:	29 d5       	rcall	.+2642   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2f5a:	9f 93       	push	r25
    2f5c:	8f 93       	push	r24
    2f5e:	86 e1       	ldi	r24, 0x16	; 22
    2f60:	93 e0       	ldi	r25, 0x03	; 3
    2f62:	9f 93       	push	r25
    2f64:	8f 93       	push	r24
    2f66:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    2f6a:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    2f6c:	91 e0       	ldi	r25, 0x01	; 1
    2f6e:	07 d4       	rcall	.+2062   	; 0x377e <lora_driver_setReceiveDelay>
    2f70:	1d d5       	rcall	.+2618   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2f72:	9f 93       	push	r25
    2f74:	8f 93       	push	r24
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	8f 93       	push	r24
    2f7a:	84 ef       	ldi	r24, 0xF4	; 244
    2f7c:	8f 93       	push	r24
    2f7e:	87 e3       	ldi	r24, 0x37	; 55
    2f80:	93 e0       	ldi	r25, 0x03	; 3
    2f82:	9f 93       	push	r25
    2f84:	8f 93       	push	r24
    2f86:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    2f8a:	8d b7       	in	r24, 0x3d	; 61
    2f8c:	9e b7       	in	r25, 0x3e	; 62
    2f8e:	0a 96       	adiw	r24, 0x0a	; 10
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	9e bf       	out	0x3e, r25	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	8d bf       	out	0x3d, r24	; 61
    2f9a:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    2f9e:	f0 d2       	rcall	.+1504   	; 0x3580 <lora_driver_join>
    2fa0:	d8 2f       	mov	r29, r24
    2fa2:	04 d5       	rcall	.+2568   	; 0x39ac <lora_driver_mapReturnCodeToText>
    2fa4:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    2fa6:	8f 93       	push	r24
    2fa8:	1f 92       	push	r1
    2faa:	cf 93       	push	r28
    2fac:	87 e5       	ldi	r24, 0x57	; 87
    2fae:	93 e0       	ldi	r25, 0x03	; 3
    2fb0:	9f 93       	push	r25
    2fb2:	8f 93       	push	r24
    2fb4:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	d8 30       	cpi	r29, 0x08	; 8
    2fc6:	59 f0       	breq	.+22     	; 0x2fde <_lora_setup+0x14c>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0e 94 c2 22 	call	0x4584	; 0x4584 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    2fce:	66 e3       	ldi	r22, 0x36	; 54
    2fd0:	71 e0       	ldi	r23, 0x01	; 1
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <vTaskDelay>
    2fda:	c1 50       	subi	r28, 0x01	; 1
    2fdc:	f9 f6       	brne	.-66     	; 0x2f9c <_lora_setup+0x10a>
    2fde:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    2fe0:	21 f4       	brne	.+8      	; 0x2fea <_lora_setup+0x158>
    2fe2:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    2fe4:	0e 94 a4 22 	call	0x4548	; 0x4548 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    2fe8:	09 c0       	rjmp	.+18     	; 0x2ffc <_lora_setup+0x16a>
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	0e 94 b3 22 	call	0x4566	; 0x4566 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	0e 94 81 22 	call	0x4502	; 0x4502 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    2ff6:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    2ffa:	fd cf       	rjmp	.-6      	; 0x2ff6 <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	08 95       	ret

00003002 <lora_handler_task>:
		}
	}
}
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	00 d0       	rcall	.+0      	; 0x3008 <lora_handler_task+0x6>

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3008:	1f 92       	push	r1
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	42 d2       	rcall	.+1156   	; 0x3496 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3012:	62 e0       	ldi	r22, 0x02	; 2
    3014:	70 e0       	ldi	r23, 0x00	; 0
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <vTaskDelay>
	lora_driver_resetRn2483(0);
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	3a d2       	rcall	.+1140   	; 0x3496 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3022:	66 e9       	ldi	r22, 0x96	; 150
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    302e:	ec d1       	rcall	.+984    	; 0x3408 <lora_driver_flushBuffers>

	_lora_setup();
    3030:	30 df       	rcall	.-416    	; 0x2e92 <_lora_setup>
    3032:	ed e3       	ldi	r30, 0x3D	; 61

	_uplink_payload.len = 6;
    3034:	f1 e1       	ldi	r31, 0x11	; 17
    3036:	86 e0       	ldi	r24, 0x06	; 6
    3038:	81 83       	std	Z+1, r24	; 0x01
    303a:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    303c:	80 83       	st	Z, r24
    303e:	0e 94 49 0c 	call	0x1892	; 0x1892 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3042:	69 83       	std	Y+1, r22	; 0x01
    3044:	7a 83       	std	Y+2, r23	; 0x02
    3046:	8b 83       	std	Y+3, r24	; 0x03
    3048:	9c 83       	std	Y+4, r25	; 0x04
    304a:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    304c:	58 e4       	ldi	r21, 0x48	; 72
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	ce 01       	movw	r24, r28
    3054:	01 96       	adiw	r24, 0x01	; 1
    3056:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <xTaskDelayUntil>
    305a:	ed e3       	ldi	r30, 0x3D	; 61
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    305c:	f1 e1       	ldi	r31, 0x11	; 17
    305e:	80 e3       	ldi	r24, 0x30	; 48
    3060:	82 83       	std	Z+2, r24	; 0x02
    3062:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    3064:	83 83       	std	Z+3, r24	; 0x03
    3066:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    3068:	84 83       	std	Z+4, r24	; 0x04
    306a:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    306c:	85 83       	std	Z+5, r24	; 0x05
    306e:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3070:	86 83       	std	Z+6, r24	; 0x06
    3072:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3074:	87 83       	std	Z+7, r24	; 0x07
    3076:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3078:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    307c:	6d e3       	ldi	r22, 0x3D	; 61
    307e:	71 e1       	ldi	r23, 0x11	; 17
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	a7 d2       	rcall	.+1358   	; 0x35d2 <lora_driver_sendUploadMessage>
    3084:	93 d4       	rcall	.+2342   	; 0x39ac <lora_driver_mapReturnCodeToText>
    3086:	9f 93       	push	r25
    3088:	8f 93       	push	r24
    308a:	87 e7       	ldi	r24, 0x77	; 119
    308c:	93 e0       	ldi	r25, 0x03	; 3
    308e:	9f 93       	push	r25
    3090:	8f 93       	push	r24
    3092:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printf>
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	d5 cf       	rjmp	.-86     	; 0x304a <lora_handler_task+0x48>

000030a0 <lora_handler_initialise>:
    30a0:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
	xTaskCreate(
    30a6:	e1 2c       	mov	r14, r1
    30a8:	f1 2c       	mov	r15, r1
    30aa:	08 2f       	mov	r16, r24
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	48 e8       	ldi	r20, 0x88	; 136
    30b2:	51 e0       	ldi	r21, 0x01	; 1
    30b4:	6c e8       	ldi	r22, 0x8C	; 140
    30b6:	73 e0       	ldi	r23, 0x03	; 3
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	98 e1       	ldi	r25, 0x18	; 24
    30bc:	0e 94 bf 0b 	call	0x177e	; 0x177e <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	08 95       	ret

000030c8 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <task1+0x6>
    30ce:	1f 92       	push	r1
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    30d4:	0e 94 49 0c 	call	0x1892	; 0x1892 <xTaskGetTickCount>
    30d8:	69 83       	std	Y+1, r22	; 0x01
    30da:	7a 83       	std	Y+2, r23	; 0x02
    30dc:	8b 83       	std	Y+3, r24	; 0x03
    30de:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    30e0:	4f e1       	ldi	r20, 0x1F	; 31
    30e2:	50 e0       	ldi	r21, 0x00	; 0
    30e4:	60 e0       	ldi	r22, 0x00	; 0
    30e6:	70 e0       	ldi	r23, 0x00	; 0
    30e8:	ce 01       	movw	r24, r28
    30ea:	01 96       	adiw	r24, 0x01	; 1
    30ec:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    30f0:	83 e9       	ldi	r24, 0x93	; 147
    30f2:	93 e0       	ldi	r25, 0x03	; 3
    30f4:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <puts>
		PORTA ^= _BV(PA0);
    30f8:	92 b1       	in	r25, 0x02	; 2
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	89 27       	eor	r24, r25
    30fe:	82 b9       	out	0x02, r24	; 2
    3100:	ef cf       	rjmp	.-34     	; 0x30e0 <task1+0x18>

00003102 <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	00 d0       	rcall	.+0      	; 0x3108 <task2+0x6>
    3108:	1f 92       	push	r1
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    310e:	0e 94 49 0c 	call	0x1892	; 0x1892 <xTaskGetTickCount>
    3112:	69 83       	std	Y+1, r22	; 0x01
    3114:	7a 83       	std	Y+2, r23	; 0x02
    3116:	8b 83       	std	Y+3, r24	; 0x03
    3118:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    311a:	4e e3       	ldi	r20, 0x3E	; 62
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	70 e0       	ldi	r23, 0x00	; 0
    3122:	ce 01       	movw	r24, r28
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    312a:	89 e9       	ldi	r24, 0x99	; 153
    312c:	93 e0       	ldi	r25, 0x03	; 3
    312e:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <puts>
		PORTA ^= _BV(PA7);
    3132:	82 b1       	in	r24, 0x02	; 2
    3134:	80 58       	subi	r24, 0x80	; 128
    3136:	82 b9       	out	0x02, r24	; 2
    3138:	f0 cf       	rjmp	.-32     	; 0x311a <task2+0x18>

0000313a <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    313a:	ef 92       	push	r14
    313c:	ff 92       	push	r15
    313e:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3140:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <xTestSemaphore>
    3144:	90 91 f7 12 	lds	r25, 0x12F7	; 0x8012f7 <xTestSemaphore+0x1>
    3148:	89 2b       	or	r24, r25
    314a:	89 f4       	brne	.+34     	; 0x316e <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	0e 94 8a 05 	call	0xb14	; 0xb14 <xQueueCreateMutex>
    3152:	90 93 f7 12 	sts	0x12F7, r25	; 0x8012f7 <xTestSemaphore+0x1>
    3156:	80 93 f6 12 	sts	0x12F6, r24	; 0x8012f6 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	41 f0       	breq	.+16     	; 0x316e <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    315e:	00 e0       	ldi	r16, 0x00	; 0
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	a9 01       	movw	r20, r18
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <xQueueGenericSend>
		}
	}

	xTaskCreate(
    316e:	e1 2c       	mov	r14, r1
    3170:	f1 2c       	mov	r15, r1
    3172:	02 e0       	ldi	r16, 0x02	; 2
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 ec       	ldi	r20, 0xC0	; 192
    317a:	50 e0       	ldi	r21, 0x00	; 0
    317c:	63 e9       	ldi	r22, 0x93	; 147
    317e:	73 e0       	ldi	r23, 0x03	; 3
    3180:	84 e6       	ldi	r24, 0x64	; 100
    3182:	98 e1       	ldi	r25, 0x18	; 24
    3184:	0e 94 bf 0b 	call	0x177e	; 0x177e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3188:	01 e0       	ldi	r16, 0x01	; 1
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 ec       	ldi	r20, 0xC0	; 192
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	69 e9       	ldi	r22, 0x99	; 153
    3194:	73 e0       	ldi	r23, 0x03	; 3
    3196:	81 e8       	ldi	r24, 0x81	; 129
    3198:	98 e1       	ldi	r25, 0x18	; 24
    319a:	0e 94 bf 0b 	call	0x177e	; 0x177e <xTaskCreate>
	,  "Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	08 95       	ret

000031a6 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    31a6:	81 b1       	in	r24, 0x01	; 1
    31a8:	81 68       	ori	r24, 0x81	; 129
    31aa:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	0e 94 09 21 	call	0x4212	; 0x4212 <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    31b2:	c3 df       	rcall	.-122    	; 0x313a <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    31b4:	85 e0       	ldi	r24, 0x05	; 5
    31b6:	0e 94 10 22 	call	0x4420	; 0x4420 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	2a d1       	rcall	.+596    	; 0x3416 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    31c2:	83 e0       	ldi	r24, 0x03	; 3
    31c4:	6d cf       	rjmp	.-294    	; 0x30a0 <lora_handler_initialise>
    31c6:	08 95       	ret

000031c8 <main>:
    31c8:	ee df       	rcall	.-36     	; 0x31a6 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    31ca:	8f e9       	ldi	r24, 0x9F	; 159
    31cc:	93 e0       	ldi	r25, 0x03	; 3
    31ce:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    31d2:	0e 94 0b 0c 	call	0x1816	; 0x1816 <vTaskStartScheduler>
    31d6:	ff cf       	rjmp	.-2      	; 0x31d6 <main+0xe>

000031d8 <_serialCallBack>:
    31d8:	0f 93       	push	r16
    31da:	1f 93       	push	r17
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	1f 92       	push	r1
    31e2:	1f 92       	push	r1
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	8c 01       	movw	r16, r24
    31ea:	19 82       	std	Y+1, r1	; 0x01
    31ec:	2d c0       	rjmp	.+90     	; 0x3248 <_serialCallBack+0x70>
    31ee:	e0 91 1b 12 	lds	r30, 0x121B	; 0x80121b <rec_buf_inp.2878>
    31f2:	ec 32       	cpi	r30, 0x2C	; 44
    31f4:	50 f4       	brcc	.+20     	; 0x320a <_serialCallBack+0x32>
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	8e 0f       	add	r24, r30
    31fa:	80 93 1b 12 	sts	0x121B, r24	; 0x80121b <rec_buf_inp.2878>
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	e3 5b       	subi	r30, 0xB3	; 179
    3202:	fd 4e       	sbci	r31, 0xED	; 237
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	80 83       	st	Z, r24
    3208:	02 c0       	rjmp	.+4      	; 0x320e <_serialCallBack+0x36>
    320a:	10 92 1b 12 	sts	0x121B, r1	; 0x80121b <rec_buf_inp.2878>
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	8a 30       	cpi	r24, 0x0A	; 10
    3212:	d1 f4       	brne	.+52     	; 0x3248 <_serialCallBack+0x70>
    3214:	40 91 1b 12 	lds	r20, 0x121B	; 0x80121b <rec_buf_inp.2878>
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	fa 01       	movw	r30, r20
    321c:	e5 5b       	subi	r30, 0xB5	; 181
    321e:	fd 4e       	sbci	r31, 0xED	; 237
    3220:	10 82       	st	Z, r1
    3222:	41 50       	subi	r20, 0x01	; 1
    3224:	51 09       	sbc	r21, r1
    3226:	9e 01       	movw	r18, r28
    3228:	2f 5f       	subi	r18, 0xFF	; 255
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	6d e4       	ldi	r22, 0x4D	; 77
    322e:	72 e1       	ldi	r23, 0x12	; 18
    3230:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    3234:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    3238:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <xStreamBufferSendFromISR>
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	81 11       	cpse	r24, r1
    3240:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    3244:	10 92 1b 12 	sts	0x121B, r1	; 0x80121b <rec_buf_inp.2878>
    3248:	be 01       	movw	r22, r28
    324a:	6e 5f       	subi	r22, 0xFE	; 254
    324c:	7f 4f       	sbci	r23, 0xFF	; 255
    324e:	c8 01       	movw	r24, r16
    3250:	4a d5       	rcall	.+2708   	; 0x3ce6 <serial_getByte>
    3252:	88 23       	and	r24, r24
    3254:	61 f2       	breq	.-104    	; 0x31ee <_serialCallBack+0x16>
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	df 91       	pop	r29
    325c:	cf 91       	pop	r28
    325e:	1f 91       	pop	r17
    3260:	0f 91       	pop	r16
    3262:	08 95       	ret

00003264 <_uploadMessage>:
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	8c 01       	movw	r16, r24
    326e:	eb 01       	movw	r28, r22
    3270:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    3274:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    3278:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <xStreamBufferReset>
    327c:	b8 01       	movw	r22, r16
    327e:	87 eb       	ldi	r24, 0xB7	; 183
    3280:	91 e1       	ldi	r25, 0x11	; 17
    3282:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <strcpy>
    3286:	20 97       	sbiw	r28, 0x00	; 0
    3288:	79 f0       	breq	.+30     	; 0x32a8 <_uploadMessage+0x44>
    328a:	e7 eb       	ldi	r30, 0xB7	; 183
    328c:	f1 e1       	ldi	r31, 0x11	; 17
    328e:	01 90       	ld	r0, Z+
    3290:	00 20       	and	r0, r0
    3292:	e9 f7       	brne	.-6      	; 0x328e <_uploadMessage+0x2a>
    3294:	31 97       	sbiw	r30, 0x01	; 1
    3296:	80 e2       	ldi	r24, 0x20	; 32
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	80 83       	st	Z, r24
    329e:	be 01       	movw	r22, r28
    32a0:	87 eb       	ldi	r24, 0xB7	; 183
    32a2:	91 e1       	ldi	r25, 0x11	; 17
    32a4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <strcat>
    32a8:	e7 eb       	ldi	r30, 0xB7	; 183
    32aa:	f1 e1       	ldi	r31, 0x11	; 17
    32ac:	df 01       	movw	r26, r30
    32ae:	0d 90       	ld	r0, X+
    32b0:	00 20       	and	r0, r0
    32b2:	e9 f7       	brne	.-6      	; 0x32ae <_uploadMessage+0x4a>
    32b4:	11 97       	sbiw	r26, 0x01	; 1
    32b6:	8d e0       	ldi	r24, 0x0D	; 13
    32b8:	9a e0       	ldi	r25, 0x0A	; 10
    32ba:	11 96       	adiw	r26, 0x01	; 1
    32bc:	9c 93       	st	X, r25
    32be:	8e 93       	st	-X, r24
    32c0:	12 96       	adiw	r26, 0x02	; 2
    32c2:	1c 92       	st	X, r1
    32c4:	01 90       	ld	r0, Z+
    32c6:	00 20       	and	r0, r0
    32c8:	e9 f7       	brne	.-6      	; 0x32c4 <_uploadMessage+0x60>
    32ca:	31 97       	sbiw	r30, 0x01	; 1
    32cc:	e7 5b       	subi	r30, 0xB7	; 183
    32ce:	f1 41       	sbci	r31, 0x11	; 17
    32d0:	ae 2f       	mov	r26, r30
    32d2:	87 eb       	ldi	r24, 0xB7	; 183
    32d4:	91 e1       	ldi	r25, 0x11	; 17
    32d6:	ac 01       	movw	r20, r24
    32d8:	6a 2f       	mov	r22, r26
    32da:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <_rn2483_serial>
    32de:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <_rn2483_serial+0x1>
    32e2:	ac d4       	rcall	.+2392   	; 0x3c3c <serial_sendBytes>
    32e4:	81 11       	cpse	r24, r1
    32e6:	11 c0       	rjmp	.+34     	; 0x330a <_uploadMessage+0xa6>
    32e8:	08 e2       	ldi	r16, 0x28	; 40
    32ea:	15 e0       	ldi	r17, 0x05	; 5
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	4d e2       	ldi	r20, 0x2D	; 45
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	67 ea       	ldi	r22, 0xA7	; 167
    32f6:	72 e1       	ldi	r23, 0x12	; 18
    32f8:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    32fc:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    3300:	0e 94 28 09 	call	0x1250	; 0x1250 <xStreamBufferReceive>
    3304:	87 ea       	ldi	r24, 0xA7	; 167
    3306:	92 e1       	ldi	r25, 0x12	; 18
    3308:	02 c0       	rjmp	.+4      	; 0x330e <_uploadMessage+0xaa>
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	08 95       	ret

00003318 <_reply2ReturnCode>:
    3318:	2f 92       	push	r2
    331a:	3f 92       	push	r3
    331c:	4f 92       	push	r4
    331e:	5f 92       	push	r5
    3320:	6f 92       	push	r6
    3322:	7f 92       	push	r7
    3324:	8f 92       	push	r8
    3326:	9f 92       	push	r9
    3328:	af 92       	push	r10
    332a:	bf 92       	push	r11
    332c:	cf 92       	push	r12
    332e:	df 92       	push	r13
    3330:	ef 92       	push	r14
    3332:	ff 92       	push	r15
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	5c 01       	movw	r10, r24
    333e:	fc 01       	movw	r30, r24
    3340:	01 90       	ld	r0, Z+
    3342:	00 20       	and	r0, r0
    3344:	e9 f7       	brne	.-6      	; 0x3340 <_reply2ReturnCode+0x28>
    3346:	31 97       	sbiw	r30, 0x01	; 1
    3348:	6f 01       	movw	r12, r30
    334a:	c8 1a       	sub	r12, r24
    334c:	d9 0a       	sbc	r13, r25
    334e:	5c 2c       	mov	r5, r12
    3350:	0f 2e       	mov	r0, r31
    3352:	fa e4       	ldi	r31, 0x4A	; 74
    3354:	8f 2e       	mov	r8, r31
    3356:	f6 e0       	ldi	r31, 0x06	; 6
    3358:	9f 2e       	mov	r9, r31
    335a:	f0 2d       	mov	r31, r0
    335c:	e1 2c       	mov	r14, r1
    335e:	f1 2c       	mov	r15, r1
    3360:	4c 2c       	mov	r4, r12
    3362:	37 01       	movw	r6, r14
    3364:	f4 01       	movw	r30, r8
    3366:	01 81       	ldd	r16, Z+1	; 0x01
    3368:	12 81       	ldd	r17, Z+2	; 0x02
    336a:	e8 01       	movw	r28, r16
    336c:	09 90       	ld	r0, Y+
    336e:	00 20       	and	r0, r0
    3370:	e9 f7       	brne	.-6      	; 0x336c <_reply2ReturnCode+0x54>
    3372:	21 97       	sbiw	r28, 0x01	; 1
    3374:	c0 1b       	sub	r28, r16
    3376:	d1 0b       	sbc	r29, r17
    3378:	3c 2e       	mov	r3, r28
    337a:	f9 e0       	ldi	r31, 0x09	; 9
    337c:	cf 16       	cp	r12, r31
    337e:	d1 04       	cpc	r13, r1
    3380:	58 f0       	brcs	.+22     	; 0x3398 <_reply2ReturnCode+0x80>
    3382:	f4 01       	movw	r30, r8
    3384:	20 80       	ld	r2, Z
    3386:	fe e0       	ldi	r31, 0x0E	; 14
    3388:	2f 12       	cpse	r2, r31
    338a:	06 c0       	rjmp	.+12     	; 0x3398 <_reply2ReturnCode+0x80>
    338c:	b8 01       	movw	r22, r16
    338e:	c5 01       	movw	r24, r10
    3390:	0e 94 43 26 	call	0x4c86	; 0x4c86 <strcasestr>
    3394:	89 2b       	or	r24, r25
    3396:	09 f5       	brne	.+66     	; 0x33da <_reply2ReturnCode+0xc2>
    3398:	44 2d       	mov	r20, r4
    339a:	35 14       	cp	r3, r5
    339c:	08 f4       	brcc	.+2      	; 0x33a0 <_reply2ReturnCode+0x88>
    339e:	4c 2f       	mov	r20, r28
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	b8 01       	movw	r22, r16
    33a4:	c5 01       	movw	r24, r10
    33a6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <strncasecmp>
    33aa:	89 2b       	or	r24, r25
    33ac:	49 f4       	brne	.+18     	; 0x33c0 <_reply2ReturnCode+0xa8>
    33ae:	f3 01       	movw	r30, r6
    33b0:	ee 0f       	add	r30, r30
    33b2:	ff 1f       	adc	r31, r31
    33b4:	e6 0d       	add	r30, r6
    33b6:	f7 1d       	adc	r31, r7
    33b8:	e6 5b       	subi	r30, 0xB6	; 182
    33ba:	f9 4f       	sbci	r31, 0xF9	; 249
    33bc:	20 80       	ld	r2, Z
    33be:	0d c0       	rjmp	.+26     	; 0x33da <_reply2ReturnCode+0xc2>
    33c0:	8f ef       	ldi	r24, 0xFF	; 255
    33c2:	e8 1a       	sub	r14, r24
    33c4:	f8 0a       	sbc	r15, r24
    33c6:	e3 e0       	ldi	r30, 0x03	; 3
    33c8:	8e 0e       	add	r8, r30
    33ca:	91 1c       	adc	r9, r1
    33cc:	f1 e1       	ldi	r31, 0x11	; 17
    33ce:	ef 16       	cp	r14, r31
    33d0:	f1 04       	cpc	r15, r1
    33d2:	39 f6       	brne	.-114    	; 0x3362 <_reply2ReturnCode+0x4a>
    33d4:	68 94       	set
    33d6:	22 24       	eor	r2, r2
    33d8:	24 f8       	bld	r2, 4
    33da:	82 2d       	mov	r24, r2
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	1f 91       	pop	r17
    33e2:	0f 91       	pop	r16
    33e4:	ff 90       	pop	r15
    33e6:	ef 90       	pop	r14
    33e8:	df 90       	pop	r13
    33ea:	cf 90       	pop	r12
    33ec:	bf 90       	pop	r11
    33ee:	af 90       	pop	r10
    33f0:	9f 90       	pop	r9
    33f2:	8f 90       	pop	r8
    33f4:	7f 90       	pop	r7
    33f6:	6f 90       	pop	r6
    33f8:	5f 90       	pop	r5
    33fa:	4f 90       	pop	r4
    33fc:	3f 90       	pop	r3
    33fe:	2f 90       	pop	r2
    3400:	08 95       	ret

00003402 <_uploadMessageRc>:
    3402:	30 df       	rcall	.-416    	; 0x3264 <_uploadMessage>
    3404:	89 cf       	rjmp	.-238    	; 0x3318 <_reply2ReturnCode>
    3406:	08 95       	ret

00003408 <lora_driver_flushBuffers>:
    3408:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    340c:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    3410:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <xStreamBufferReset>
    3414:	08 95       	ret

00003416 <lora_driver_initialise>:
    3416:	8f 92       	push	r8
    3418:	9f 92       	push	r9
    341a:	af 92       	push	r10
    341c:	cf 92       	push	r12
    341e:	ef 92       	push	r14
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	c8 2f       	mov	r28, r24
    3428:	8b 01       	movw	r16, r22
    342a:	41 e0       	ldi	r20, 0x01	; 1
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	70 e0       	ldi	r23, 0x00	; 0
    3430:	88 ec       	ldi	r24, 0xC8	; 200
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xStreamBufferGenericCreate>
    3438:	90 93 1f 12 	sts	0x121F, r25	; 0x80121f <_serialReplyBufferHandle+0x1>
    343c:	80 93 1e 12 	sts	0x121E, r24	; 0x80121e <_serialReplyBufferHandle>
    3440:	10 93 1d 12 	sts	0x121D, r17	; 0x80121d <_downlinkMessageBuffer+0x1>
    3444:	00 93 1c 12 	sts	0x121C, r16	; 0x80121c <_downlinkMessageBuffer>
    3448:	0f 2e       	mov	r0, r31
    344a:	fc ee       	ldi	r31, 0xEC	; 236
    344c:	8f 2e       	mov	r8, r31
    344e:	f8 e1       	ldi	r31, 0x18	; 24
    3450:	9f 2e       	mov	r9, r31
    3452:	f0 2d       	mov	r31, r0
    3454:	68 94       	set
    3456:	aa 24       	eor	r10, r10
    3458:	a6 f8       	bld	r10, 6
    345a:	68 94       	set
    345c:	cc 24       	eor	r12, r12
    345e:	c6 f8       	bld	r12, 6
    3460:	e1 2c       	mov	r14, r1
    3462:	00 e0       	ldi	r16, 0x00	; 0
    3464:	23 e0       	ldi	r18, 0x03	; 3
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	51 ee       	ldi	r21, 0xE1	; 225
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	70 e0       	ldi	r23, 0x00	; 0
    346e:	8c 2f       	mov	r24, r28
    3470:	1e d3       	rcall	.+1596   	; 0x3aae <serial_create>
    3472:	90 93 21 12 	sts	0x1221, r25	; 0x801221 <_rn2483_serial+0x1>
    3476:	80 93 20 12 	sts	0x1220, r24	; 0x801220 <_rn2483_serial>
    347a:	e7 e0       	ldi	r30, 0x07	; 7
    347c:	f1 e0       	ldi	r31, 0x01	; 1
    347e:	80 81       	ld	r24, Z
    3480:	80 61       	ori	r24, 0x10	; 16
    3482:	80 83       	st	Z, r24
    3484:	cf 91       	pop	r28
    3486:	1f 91       	pop	r17
    3488:	0f 91       	pop	r16
    348a:	ef 90       	pop	r14
    348c:	cf 90       	pop	r12
    348e:	af 90       	pop	r10
    3490:	9f 90       	pop	r9
    3492:	8f 90       	pop	r8
    3494:	08 95       	ret

00003496 <lora_driver_resetRn2483>:
    3496:	88 23       	and	r24, r24
    3498:	31 f0       	breq	.+12     	; 0x34a6 <lora_driver_resetRn2483+0x10>
    349a:	e8 e0       	ldi	r30, 0x08	; 8
    349c:	f1 e0       	ldi	r31, 0x01	; 1
    349e:	80 81       	ld	r24, Z
    34a0:	8f 7e       	andi	r24, 0xEF	; 239
    34a2:	80 83       	st	Z, r24
    34a4:	08 95       	ret
    34a6:	e8 e0       	ldi	r30, 0x08	; 8
    34a8:	f1 e0       	ldi	r31, 0x01	; 1
    34aa:	80 81       	ld	r24, Z
    34ac:	80 61       	ori	r24, 0x10	; 16
    34ae:	80 83       	st	Z, r24
    34b0:	08 95       	ret

000034b2 <lora_driver_rn2483FactoryReset>:
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	80 ed       	ldi	r24, 0xD0	; 208
    34b8:	93 e0       	ldi	r25, 0x03	; 3
    34ba:	d4 de       	rcall	.-600    	; 0x3264 <_uploadMessage>
    34bc:	e7 ea       	ldi	r30, 0xA7	; 167
    34be:	f2 e1       	ldi	r31, 0x12	; 18
    34c0:	01 90       	ld	r0, Z+
    34c2:	00 20       	and	r0, r0
    34c4:	e9 f7       	brne	.-6      	; 0x34c0 <lora_driver_rn2483FactoryReset+0xe>
    34c6:	31 97       	sbiw	r30, 0x01	; 1
    34c8:	e7 5a       	subi	r30, 0xA7	; 167
    34ca:	f2 41       	sbci	r31, 0x12	; 18
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	75 97       	sbiw	r30, 0x15	; 21
    34d0:	08 f0       	brcs	.+2      	; 0x34d4 <lora_driver_rn2483FactoryReset+0x22>
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	08 95       	ret

000034d6 <lora_driver_getRn2483Hweui>:
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	ec 01       	movw	r28, r24
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	81 ee       	ldi	r24, 0xE1	; 225
    34e2:	93 e0       	ldi	r25, 0x03	; 3
    34e4:	bf de       	rcall	.-642    	; 0x3264 <_uploadMessage>
    34e6:	e7 ea       	ldi	r30, 0xA7	; 167
    34e8:	f2 e1       	ldi	r31, 0x12	; 18
    34ea:	01 90       	ld	r0, Z+
    34ec:	00 20       	and	r0, r0
    34ee:	e9 f7       	brne	.-6      	; 0x34ea <lora_driver_getRn2483Hweui+0x14>
    34f0:	e8 5b       	subi	r30, 0xB8	; 184
    34f2:	f2 41       	sbci	r31, 0x12	; 18
    34f4:	39 f4       	brne	.+14     	; 0x3504 <lora_driver_getRn2483Hweui+0x2e>
    34f6:	67 ea       	ldi	r22, 0xA7	; 167
    34f8:	72 e1       	ldi	r23, 0x12	; 18
    34fa:	ce 01       	movw	r24, r28
    34fc:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <strcpy>
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <lora_driver_getRn2483Hweui+0x32>
    3504:	18 82       	st	Y, r1
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	08 95       	ret

0000350e <lora_driver_setDeviceIdentifier>:
    350e:	fc 01       	movw	r30, r24
    3510:	01 90       	ld	r0, Z+
    3512:	00 20       	and	r0, r0
    3514:	e9 f7       	brne	.-6      	; 0x3510 <lora_driver_setDeviceIdentifier+0x2>
    3516:	9f 01       	movw	r18, r30
    3518:	21 51       	subi	r18, 0x11	; 17
    351a:	31 09       	sbc	r19, r1
    351c:	28 17       	cp	r18, r24
    351e:	39 07       	cpc	r19, r25
    3520:	29 f4       	brne	.+10     	; 0x352c <lora_driver_setDeviceIdentifier+0x1e>
    3522:	bc 01       	movw	r22, r24
    3524:	8f e0       	ldi	r24, 0x0F	; 15
    3526:	94 e0       	ldi	r25, 0x04	; 4
    3528:	6c cf       	rjmp	.-296    	; 0x3402 <_uploadMessageRc>
    352a:	08 95       	ret
    352c:	89 e0       	ldi	r24, 0x09	; 9
    352e:	08 95       	ret

00003530 <lora_driver_setApplicationIdentifier>:
    3530:	fc 01       	movw	r30, r24
    3532:	01 90       	ld	r0, Z+
    3534:	00 20       	and	r0, r0
    3536:	e9 f7       	brne	.-6      	; 0x3532 <lora_driver_setApplicationIdentifier+0x2>
    3538:	9f 01       	movw	r18, r30
    353a:	21 51       	subi	r18, 0x11	; 17
    353c:	31 09       	sbc	r19, r1
    353e:	28 17       	cp	r18, r24
    3540:	39 07       	cpc	r19, r25
    3542:	29 f4       	brne	.+10     	; 0x354e <lora_driver_setApplicationIdentifier+0x1e>
    3544:	bc 01       	movw	r22, r24
    3546:	8e e1       	ldi	r24, 0x1E	; 30
    3548:	94 e0       	ldi	r25, 0x04	; 4
    354a:	5b cf       	rjmp	.-330    	; 0x3402 <_uploadMessageRc>
    354c:	08 95       	ret
    354e:	89 e0       	ldi	r24, 0x09	; 9
    3550:	08 95       	ret

00003552 <lora_driver_setApplicationKey>:
    3552:	fc 01       	movw	r30, r24
    3554:	01 90       	ld	r0, Z+
    3556:	00 20       	and	r0, r0
    3558:	e9 f7       	brne	.-6      	; 0x3554 <lora_driver_setApplicationKey+0x2>
    355a:	9f 01       	movw	r18, r30
    355c:	21 52       	subi	r18, 0x21	; 33
    355e:	31 09       	sbc	r19, r1
    3560:	28 17       	cp	r18, r24
    3562:	39 07       	cpc	r19, r25
    3564:	29 f4       	brne	.+10     	; 0x3570 <lora_driver_setApplicationKey+0x1e>
    3566:	bc 01       	movw	r22, r24
    3568:	8d e2       	ldi	r24, 0x2D	; 45
    356a:	94 e0       	ldi	r25, 0x04	; 4
    356c:	4a cf       	rjmp	.-364    	; 0x3402 <_uploadMessageRc>
    356e:	08 95       	ret
    3570:	89 e0       	ldi	r24, 0x09	; 9
    3572:	08 95       	ret

00003574 <lora_driver_saveMac>:
    3574:	60 e0       	ldi	r22, 0x00	; 0
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	8c e6       	ldi	r24, 0x6C	; 108
    357a:	94 e0       	ldi	r25, 0x04	; 4
    357c:	42 cf       	rjmp	.-380    	; 0x3402 <_uploadMessageRc>
    357e:	08 95       	ret

00003580 <lora_driver_join>:
    3580:	0f 93       	push	r16
    3582:	1f 93       	push	r17
    3584:	e8 2f       	mov	r30, r24
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	ee 0f       	add	r30, r30
    358a:	ff 1f       	adc	r31, r31
    358c:	ea 5b       	subi	r30, 0xBA	; 186
    358e:	f9 4f       	sbci	r31, 0xF9	; 249
    3590:	60 81       	ld	r22, Z
    3592:	71 81       	ldd	r23, Z+1	; 0x01
    3594:	85 e7       	ldi	r24, 0x75	; 117
    3596:	94 e0       	ldi	r25, 0x04	; 4
    3598:	34 df       	rcall	.-408    	; 0x3402 <_uploadMessageRc>
    359a:	81 11       	cpse	r24, r1
    359c:	14 c0       	rjmp	.+40     	; 0x35c6 <lora_driver_join+0x46>
    359e:	08 e2       	ldi	r16, 0x28	; 40
    35a0:	15 e0       	ldi	r17, 0x05	; 5
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	4d e2       	ldi	r20, 0x2D	; 45
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	67 ea       	ldi	r22, 0xA7	; 167
    35ac:	72 e1       	ldi	r23, 0x12	; 18
    35ae:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    35b2:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    35b6:	0e 94 28 09 	call	0x1250	; 0x1250 <xStreamBufferReceive>
    35ba:	88 23       	and	r24, r24
    35bc:	21 f0       	breq	.+8      	; 0x35c6 <lora_driver_join+0x46>
    35be:	87 ea       	ldi	r24, 0xA7	; 167
    35c0:	92 e1       	ldi	r25, 0x12	; 18
    35c2:	aa de       	rcall	.-684    	; 0x3318 <_reply2ReturnCode>
    35c4:	03 c0       	rjmp	.+6      	; 0x35cc <lora_driver_join+0x4c>
    35c6:	87 ea       	ldi	r24, 0xA7	; 167
    35c8:	92 e1       	ldi	r25, 0x12	; 18
    35ca:	a6 de       	rcall	.-692    	; 0x3318 <_reply2ReturnCode>
    35cc:	1f 91       	pop	r17
    35ce:	0f 91       	pop	r16
    35d0:	08 95       	ret

000035d2 <lora_driver_sendUploadMessage>:
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	1f 92       	push	r1
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	db 01       	movw	r26, r22
    35e2:	11 96       	adiw	r26, 0x01	; 1
    35e4:	9c 91       	ld	r25, X
    35e6:	11 97       	sbiw	r26, 0x01	; 1
    35e8:	95 31       	cpi	r25, 0x15	; 21
    35ea:	08 f0       	brcs	.+2      	; 0x35ee <lora_driver_sendUploadMessage+0x1c>
    35ec:	b4 c0       	rjmp	.+360    	; 0x3756 <lora_driver_sendUploadMessage+0x184>
    35ee:	99 23       	and	r25, r25
    35f0:	81 f1       	breq	.+96     	; 0x3652 <lora_driver_sendUploadMessage+0x80>
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	70 e0       	ldi	r23, 0x00	; 0
    35f6:	27 2f       	mov	r18, r23
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	46 2f       	mov	r20, r22
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	fd 01       	movw	r30, r26
    3600:	e4 0f       	add	r30, r20
    3602:	f5 1f       	adc	r31, r21
    3604:	92 81       	ldd	r25, Z+2	; 0x02
    3606:	92 95       	swap	r25
    3608:	9f 70       	andi	r25, 0x0F	; 15
    360a:	9a 30       	cpi	r25, 0x0A	; 10
    360c:	10 f0       	brcs	.+4      	; 0x3612 <lora_driver_sendUploadMessage+0x40>
    360e:	99 5c       	subi	r25, 0xC9	; 201
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <lora_driver_sendUploadMessage+0x42>
    3612:	90 5d       	subi	r25, 0xD0	; 208
    3614:	f9 01       	movw	r30, r18
    3616:	e8 5c       	subi	r30, 0xC8	; 200
    3618:	fd 4e       	sbci	r31, 0xED	; 237
    361a:	90 83       	st	Z, r25
    361c:	2f 5f       	subi	r18, 0xFF	; 255
    361e:	3f 4f       	sbci	r19, 0xFF	; 255
    3620:	fd 01       	movw	r30, r26
    3622:	e4 0f       	add	r30, r20
    3624:	f5 1f       	adc	r31, r21
    3626:	92 81       	ldd	r25, Z+2	; 0x02
    3628:	9f 70       	andi	r25, 0x0F	; 15
    362a:	49 2f       	mov	r20, r25
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	4a 30       	cpi	r20, 0x0A	; 10
    3630:	51 05       	cpc	r21, r1
    3632:	14 f0       	brlt	.+4      	; 0x3638 <lora_driver_sendUploadMessage+0x66>
    3634:	99 5c       	subi	r25, 0xC9	; 201
    3636:	01 c0       	rjmp	.+2      	; 0x363a <lora_driver_sendUploadMessage+0x68>
    3638:	90 5d       	subi	r25, 0xD0	; 208
    363a:	f9 01       	movw	r30, r18
    363c:	e8 5c       	subi	r30, 0xC8	; 200
    363e:	fd 4e       	sbci	r31, 0xED	; 237
    3640:	90 83       	st	Z, r25
    3642:	7e 5f       	subi	r23, 0xFE	; 254
    3644:	6f 5f       	subi	r22, 0xFF	; 255
    3646:	11 96       	adiw	r26, 0x01	; 1
    3648:	9c 91       	ld	r25, X
    364a:	11 97       	sbiw	r26, 0x01	; 1
    364c:	69 17       	cp	r22, r25
    364e:	98 f2       	brcs	.-90     	; 0x35f6 <lora_driver_sendUploadMessage+0x24>
    3650:	01 c0       	rjmp	.+2      	; 0x3654 <lora_driver_sendUploadMessage+0x82>
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	e7 2f       	mov	r30, r23
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	e8 5c       	subi	r30, 0xC8	; 200
    365a:	fd 4e       	sbci	r31, 0xED	; 237
    365c:	10 82       	st	Z, r1
    365e:	4c 91       	ld	r20, X
    3660:	81 11       	cpse	r24, r1
    3662:	03 c0       	rjmp	.+6      	; 0x366a <lora_driver_sendUploadMessage+0x98>
    3664:	8e e7       	ldi	r24, 0x7E	; 126
    3666:	94 e0       	ldi	r25, 0x04	; 4
    3668:	02 c0       	rjmp	.+4      	; 0x366e <lora_driver_sendUploadMessage+0x9c>
    366a:	80 e8       	ldi	r24, 0x80	; 128
    366c:	94 e0       	ldi	r25, 0x04	; 4
    366e:	28 e3       	ldi	r18, 0x38	; 56
    3670:	32 e1       	ldi	r19, 0x12	; 18
    3672:	3f 93       	push	r19
    3674:	2f 93       	push	r18
    3676:	1f 92       	push	r1
    3678:	4f 93       	push	r20
    367a:	9f 93       	push	r25
    367c:	8f 93       	push	r24
    367e:	84 e8       	ldi	r24, 0x84	; 132
    3680:	94 e0       	ldi	r25, 0x04	; 4
    3682:	9f 93       	push	r25
    3684:	8f 93       	push	r24
    3686:	8a e7       	ldi	r24, 0x7A	; 122
    3688:	92 e1       	ldi	r25, 0x12	; 18
    368a:	9f 93       	push	r25
    368c:	8f 93       	push	r24
    368e:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sprintf>
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	70 e0       	ldi	r23, 0x00	; 0
    3696:	8a e7       	ldi	r24, 0x7A	; 122
    3698:	92 e1       	ldi	r25, 0x12	; 18
    369a:	b3 de       	rcall	.-666    	; 0x3402 <_uploadMessageRc>
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	81 11       	cpse	r24, r1
    36a8:	59 c0       	rjmp	.+178    	; 0x375c <lora_driver_sendUploadMessage+0x18a>
    36aa:	08 e2       	ldi	r16, 0x28	; 40
    36ac:	15 e0       	ldi	r17, 0x05	; 5
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	4d e2       	ldi	r20, 0x2D	; 45
    36b4:	50 e0       	ldi	r21, 0x00	; 0
    36b6:	67 ea       	ldi	r22, 0xA7	; 167
    36b8:	72 e1       	ldi	r23, 0x12	; 18
    36ba:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    36be:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    36c2:	0e 94 28 09 	call	0x1250	; 0x1250 <xStreamBufferReceive>
    36c6:	88 23       	and	r24, r24
    36c8:	09 f4       	brne	.+2      	; 0x36cc <lora_driver_sendUploadMessage+0xfa>
    36ca:	47 c0       	rjmp	.+142    	; 0x375a <lora_driver_sendUploadMessage+0x188>
    36cc:	87 ea       	ldi	r24, 0xA7	; 167
    36ce:	92 e1       	ldi	r25, 0x12	; 18
    36d0:	23 de       	rcall	.-954    	; 0x3318 <_reply2ReturnCode>
    36d2:	8e 30       	cpi	r24, 0x0E	; 14
    36d4:	09 f0       	breq	.+2      	; 0x36d8 <lora_driver_sendUploadMessage+0x106>
    36d6:	42 c0       	rjmp	.+132    	; 0x375c <lora_driver_sendUploadMessage+0x18a>
    36d8:	87 e0       	ldi	r24, 0x07	; 7
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	80 91 1c 12 	lds	r24, 0x121C	; 0x80121c <_downlinkMessageBuffer>
    36e0:	90 91 1d 12 	lds	r25, 0x121D	; 0x80121d <_downlinkMessageBuffer+0x1>
    36e4:	89 2b       	or	r24, r25
    36e6:	a9 f1       	breq	.+106    	; 0x3752 <lora_driver_sendUploadMessage+0x180>
    36e8:	be 01       	movw	r22, r28
    36ea:	6f 5f       	subi	r22, 0xFF	; 255
    36ec:	7f 4f       	sbci	r23, 0xFF	; 255
    36ee:	87 ea       	ldi	r24, 0xA7	; 167
    36f0:	92 e1       	ldi	r25, 0x12	; 18
    36f2:	68 d1       	rcall	.+720    	; 0x39c4 <decode_port_no>
    36f4:	80 93 22 12 	sts	0x1222, r24	; 0x801222 <_downlinkPayload>
    36f8:	e9 81       	ldd	r30, Y+1	; 0x01
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	e9 55       	subi	r30, 0x59	; 89
    36fe:	fd 4e       	sbci	r31, 0xED	; 237
    3700:	df 01       	movw	r26, r30
    3702:	0d 90       	ld	r0, X+
    3704:	00 20       	and	r0, r0
    3706:	e9 f7       	brne	.-6      	; 0x3702 <lora_driver_sendUploadMessage+0x130>
    3708:	11 97       	sbiw	r26, 0x01	; 1
    370a:	ae 1b       	sub	r26, r30
    370c:	bf 0b       	sbc	r27, r31
    370e:	aa 23       	and	r26, r26
    3710:	91 f0       	breq	.+36     	; 0x3736 <lora_driver_sendUploadMessage+0x164>
    3712:	bb 27       	eor	r27, r27
    3714:	cd 01       	movw	r24, r26
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	9c 01       	movw	r18, r24
    371a:	12 f4       	brpl	.+4      	; 0x3720 <lora_driver_sendUploadMessage+0x14e>
    371c:	2f 5f       	subi	r18, 0xFF	; 255
    371e:	3f 4f       	sbci	r19, 0xFF	; 255
    3720:	35 95       	asr	r19
    3722:	27 95       	ror	r18
    3724:	20 93 23 12 	sts	0x1223, r18	; 0x801223 <_downlinkPayload+0x1>
    3728:	af 01       	movw	r20, r30
    372a:	4f 5f       	subi	r20, 0xFF	; 255
    372c:	5f 4f       	sbci	r21, 0xFF	; 255
    372e:	64 e1       	ldi	r22, 0x14	; 20
    3730:	84 e2       	ldi	r24, 0x24	; 36
    3732:	92 e1       	ldi	r25, 0x12	; 18
    3734:	73 d1       	rcall	.+742    	; 0x3a1c <decode_hexadecimal_string_bytes>
    3736:	01 e0       	ldi	r16, 0x01	; 1
    3738:	10 e0       	ldi	r17, 0x00	; 0
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	46 e1       	ldi	r20, 0x16	; 22
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	62 e2       	ldi	r22, 0x22	; 34
    3744:	72 e1       	ldi	r23, 0x12	; 18
    3746:	80 91 1c 12 	lds	r24, 0x121C	; 0x80121c <_downlinkMessageBuffer>
    374a:	90 91 1d 12 	lds	r25, 0x121D	; 0x80121d <_downlinkMessageBuffer+0x1>
    374e:	0e 94 21 08 	call	0x1042	; 0x1042 <xStreamBufferSend>
    3752:	8e e0       	ldi	r24, 0x0E	; 14
    3754:	03 c0       	rjmp	.+6      	; 0x375c <lora_driver_sendUploadMessage+0x18a>
    3756:	84 e1       	ldi	r24, 0x14	; 20
    3758:	01 c0       	rjmp	.+2      	; 0x375c <lora_driver_sendUploadMessage+0x18a>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	0f 90       	pop	r0
    375e:	df 91       	pop	r29
    3760:	cf 91       	pop	r28
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	08 95       	ret

00003768 <lora_driver_setAdaptiveDataRate>:
    3768:	81 30       	cpi	r24, 0x01	; 1
    376a:	19 f0       	breq	.+6      	; 0x3772 <lora_driver_setAdaptiveDataRate+0xa>
    376c:	64 e9       	ldi	r22, 0x94	; 148
    376e:	74 e0       	ldi	r23, 0x04	; 4
    3770:	02 c0       	rjmp	.+4      	; 0x3776 <lora_driver_setAdaptiveDataRate+0xe>
    3772:	6d e6       	ldi	r22, 0x6D	; 109
    3774:	75 e0       	ldi	r23, 0x05	; 5
    3776:	88 e9       	ldi	r24, 0x98	; 152
    3778:	94 e0       	ldi	r25, 0x04	; 4
    377a:	43 ce       	rjmp	.-890    	; 0x3402 <_uploadMessageRc>
    377c:	08 95       	ret

0000377e <lora_driver_setReceiveDelay>:
    377e:	9f 93       	push	r25
    3780:	8f 93       	push	r24
    3782:	89 ec       	ldi	r24, 0xC9	; 201
    3784:	94 e0       	ldi	r25, 0x04	; 4
    3786:	9f 93       	push	r25
    3788:	8f 93       	push	r24
    378a:	8a e7       	ldi	r24, 0x7A	; 122
    378c:	92 e1       	ldi	r25, 0x12	; 18
    378e:	9f 93       	push	r25
    3790:	8f 93       	push	r24
    3792:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sprintf>
    3796:	60 e0       	ldi	r22, 0x00	; 0
    3798:	70 e0       	ldi	r23, 0x00	; 0
    379a:	8a e7       	ldi	r24, 0x7A	; 122
    379c:	92 e1       	ldi	r25, 0x12	; 18
    379e:	31 de       	rcall	.-926    	; 0x3402 <_uploadMessageRc>
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	08 95       	ret

000037ae <lora_driver_configureToEu868>:
    37ae:	2f 92       	push	r2
    37b0:	3f 92       	push	r3
    37b2:	4f 92       	push	r4
    37b4:	5f 92       	push	r5
    37b6:	6f 92       	push	r6
    37b8:	7f 92       	push	r7
    37ba:	8f 92       	push	r8
    37bc:	9f 92       	push	r9
    37be:	af 92       	push	r10
    37c0:	bf 92       	push	r11
    37c2:	cf 92       	push	r12
    37c4:	df 92       	push	r13
    37c6:	ef 92       	push	r14
    37c8:	ff 92       	push	r15
    37ca:	0f 93       	push	r16
    37cc:	1f 93       	push	r17
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	a0 97       	sbiw	r28, 0x20	; 32
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	f8 94       	cli
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	0f be       	out	0x3f, r0	; 63
    37e0:	cd bf       	out	0x3d, r28	; 61
    37e2:	66 ef       	ldi	r22, 0xF6	; 246
    37e4:	74 e0       	ldi	r23, 0x04	; 4
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	95 e0       	ldi	r25, 0x05	; 5
    37ea:	3c dd       	rcall	.-1416   	; 0x3264 <_uploadMessage>
    37ec:	95 dd       	rcall	.-1238   	; 0x3318 <_reply2ReturnCode>
    37ee:	81 11       	cpse	r24, r1
    37f0:	a3 c0       	rjmp	.+326    	; 0x3938 <lora_driver_configureToEu868+0x18a>
    37f2:	80 e2       	ldi	r24, 0x20	; 32
    37f4:	ed e1       	ldi	r30, 0x1D	; 29
    37f6:	f2 e0       	ldi	r31, 0x02	; 2
    37f8:	de 01       	movw	r26, r28
    37fa:	11 96       	adiw	r26, 0x01	; 1
    37fc:	01 90       	ld	r0, Z+
    37fe:	0d 92       	st	X+, r0
    3800:	8a 95       	dec	r24
    3802:	e1 f7       	brne	.-8      	; 0x37fc <lora_driver_configureToEu868+0x4e>
    3804:	9e 01       	movw	r18, r28
    3806:	2f 5f       	subi	r18, 0xFF	; 255
    3808:	3f 4f       	sbci	r19, 0xFF	; 255
    380a:	69 01       	movw	r12, r18
    380c:	e1 2c       	mov	r14, r1
    380e:	f1 2c       	mov	r15, r1
    3810:	0f 2e       	mov	r0, r31
    3812:	fe e0       	ldi	r31, 0x0E	; 14
    3814:	af 2e       	mov	r10, r31
    3816:	f5 e0       	ldi	r31, 0x05	; 5
    3818:	bf 2e       	mov	r11, r31
    381a:	f0 2d       	mov	r31, r0
    381c:	0a e7       	ldi	r16, 0x7A	; 122
    381e:	12 e1       	ldi	r17, 0x12	; 18
    3820:	0f 2e       	mov	r0, r31
    3822:	f7 e2       	ldi	r31, 0x27	; 39
    3824:	4f 2e       	mov	r4, r31
    3826:	f5 e0       	ldi	r31, 0x05	; 5
    3828:	5f 2e       	mov	r5, r31
    382a:	f0 2d       	mov	r31, r0
    382c:	0f 2e       	mov	r0, r31
    382e:	fe e3       	ldi	r31, 0x3E	; 62
    3830:	8f 2e       	mov	r8, r31
    3832:	f5 e0       	ldi	r31, 0x05	; 5
    3834:	9f 2e       	mov	r9, r31
    3836:	f0 2d       	mov	r31, r0
    3838:	0f 2e       	mov	r0, r31
    383a:	f8 e5       	ldi	r31, 0x58	; 88
    383c:	6f 2e       	mov	r6, r31
    383e:	f5 e0       	ldi	r31, 0x05	; 5
    3840:	7f 2e       	mov	r7, r31
    3842:	f0 2d       	mov	r31, r0
    3844:	3e 2c       	mov	r3, r14
    3846:	2f 2c       	mov	r2, r15
    3848:	ff 92       	push	r15
    384a:	ef 92       	push	r14
    384c:	bf 92       	push	r11
    384e:	af 92       	push	r10
    3850:	1f 93       	push	r17
    3852:	0f 93       	push	r16
    3854:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sprintf>
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	c8 01       	movw	r24, r16
    385e:	02 dd       	rcall	.-1532   	; 0x3264 <_uploadMessage>
    3860:	5b dd       	rcall	.-1354   	; 0x3318 <_reply2ReturnCode>
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	81 11       	cpse	r24, r1
    3870:	63 c0       	rjmp	.+198    	; 0x3938 <lora_driver_configureToEu868+0x18a>
    3872:	32 e0       	ldi	r19, 0x02	; 2
    3874:	3e 15       	cp	r19, r14
    3876:	e8 f4       	brcc	.+58     	; 0x38b2 <lora_driver_configureToEu868+0x104>
    3878:	f6 01       	movw	r30, r12
    387a:	83 81       	ldd	r24, Z+3	; 0x03
    387c:	8f 93       	push	r24
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	8f 93       	push	r24
    3882:	81 81       	ldd	r24, Z+1	; 0x01
    3884:	8f 93       	push	r24
    3886:	80 81       	ld	r24, Z
    3888:	8f 93       	push	r24
    388a:	ff 92       	push	r15
    388c:	ef 92       	push	r14
    388e:	5f 92       	push	r5
    3890:	4f 92       	push	r4
    3892:	1f 93       	push	r17
    3894:	0f 93       	push	r16
    3896:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sprintf>
    389a:	60 e0       	ldi	r22, 0x00	; 0
    389c:	70 e0       	ldi	r23, 0x00	; 0
    389e:	c8 01       	movw	r24, r16
    38a0:	e1 dc       	rcall	.-1598   	; 0x3264 <_uploadMessage>
    38a2:	3a dd       	rcall	.-1420   	; 0x3318 <_reply2ReturnCode>
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	81 11       	cpse	r24, r1
    38b0:	43 c0       	rjmp	.+134    	; 0x3938 <lora_driver_configureToEu868+0x18a>
    38b2:	2f 92       	push	r2
    38b4:	3f 92       	push	r3
    38b6:	9f 92       	push	r9
    38b8:	8f 92       	push	r8
    38ba:	1f 93       	push	r17
    38bc:	0f 93       	push	r16
    38be:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sprintf>
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	c8 01       	movw	r24, r16
    38c8:	cd dc       	rcall	.-1638   	; 0x3264 <_uploadMessage>
    38ca:	26 dd       	rcall	.-1460   	; 0x3318 <_reply2ReturnCode>
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	81 11       	cpse	r24, r1
    38da:	2e c0       	rjmp	.+92     	; 0x3938 <lora_driver_configureToEu868+0x18a>
    38dc:	2f 92       	push	r2
    38de:	3f 92       	push	r3
    38e0:	7f 92       	push	r7
    38e2:	6f 92       	push	r6
    38e4:	1f 93       	push	r17
    38e6:	0f 93       	push	r16
    38e8:	0e 94 d5 26 	call	0x4daa	; 0x4daa <sprintf>
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	70 e0       	ldi	r23, 0x00	; 0
    38f0:	c8 01       	movw	r24, r16
    38f2:	b8 dc       	rcall	.-1680   	; 0x3264 <_uploadMessage>
    38f4:	11 dd       	rcall	.-1502   	; 0x3318 <_reply2ReturnCode>
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	81 11       	cpse	r24, r1
    3904:	19 c0       	rjmp	.+50     	; 0x3938 <lora_driver_configureToEu868+0x18a>
    3906:	3f ef       	ldi	r19, 0xFF	; 255
    3908:	e3 1a       	sub	r14, r19
    390a:	f3 0a       	sbc	r15, r19
    390c:	84 e0       	ldi	r24, 0x04	; 4
    390e:	c8 0e       	add	r12, r24
    3910:	d1 1c       	adc	r13, r1
    3912:	98 e0       	ldi	r25, 0x08	; 8
    3914:	e9 16       	cp	r14, r25
    3916:	f1 04       	cpc	r15, r1
    3918:	09 f0       	breq	.+2      	; 0x391c <lora_driver_configureToEu868+0x16e>
    391a:	94 cf       	rjmp	.-216    	; 0x3844 <lora_driver_configureToEu868+0x96>
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	80 e7       	ldi	r24, 0x70	; 112
    3922:	95 e0       	ldi	r25, 0x05	; 5
    3924:	9f dc       	rcall	.-1730   	; 0x3264 <_uploadMessage>
    3926:	f8 dc       	rcall	.-1552   	; 0x3318 <_reply2ReturnCode>
    3928:	81 11       	cpse	r24, r1
    392a:	06 c0       	rjmp	.+12     	; 0x3938 <lora_driver_configureToEu868+0x18a>
    392c:	60 e0       	ldi	r22, 0x00	; 0
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	81 e8       	ldi	r24, 0x81	; 129
    3932:	95 e0       	ldi	r25, 0x05	; 5
    3934:	97 dc       	rcall	.-1746   	; 0x3264 <_uploadMessage>
    3936:	f0 dc       	rcall	.-1568   	; 0x3318 <_reply2ReturnCode>
    3938:	a0 96       	adiw	r28, 0x20	; 32
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	df 91       	pop	r29
    3946:	cf 91       	pop	r28
    3948:	1f 91       	pop	r17
    394a:	0f 91       	pop	r16
    394c:	ff 90       	pop	r15
    394e:	ef 90       	pop	r14
    3950:	df 90       	pop	r13
    3952:	cf 90       	pop	r12
    3954:	bf 90       	pop	r11
    3956:	af 90       	pop	r10
    3958:	9f 90       	pop	r9
    395a:	8f 90       	pop	r8
    395c:	7f 90       	pop	r7
    395e:	6f 90       	pop	r6
    3960:	5f 90       	pop	r5
    3962:	4f 90       	pop	r4
    3964:	3f 90       	pop	r3
    3966:	2f 90       	pop	r2
    3968:	08 95       	ret

0000396a <lora_driver_setOtaaIdentity>:
    396a:	ef 92       	push	r14
    396c:	ff 92       	push	r15
    396e:	0f 93       	push	r16
    3970:	1f 93       	push	r17
    3972:	cf 93       	push	r28
    3974:	df 93       	push	r29
    3976:	ec 01       	movw	r28, r24
    3978:	8b 01       	movw	r16, r22
    397a:	7a 01       	movw	r14, r20
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	f4 de       	rcall	.-536    	; 0x3768 <lora_driver_setAdaptiveDataRate>
    3980:	81 11       	cpse	r24, r1
    3982:	0d c0       	rjmp	.+26     	; 0x399e <lora_driver_setOtaaIdentity+0x34>
    3984:	ce 01       	movw	r24, r28
    3986:	d4 dd       	rcall	.-1112   	; 0x3530 <lora_driver_setApplicationIdentifier>
    3988:	81 11       	cpse	r24, r1
    398a:	09 c0       	rjmp	.+18     	; 0x399e <lora_driver_setOtaaIdentity+0x34>
    398c:	c8 01       	movw	r24, r16
    398e:	e1 dd       	rcall	.-1086   	; 0x3552 <lora_driver_setApplicationKey>
    3990:	81 11       	cpse	r24, r1
    3992:	05 c0       	rjmp	.+10     	; 0x399e <lora_driver_setOtaaIdentity+0x34>
    3994:	c7 01       	movw	r24, r14
    3996:	bb dd       	rcall	.-1162   	; 0x350e <lora_driver_setDeviceIdentifier>
    3998:	81 11       	cpse	r24, r1
    399a:	01 c0       	rjmp	.+2      	; 0x399e <lora_driver_setOtaaIdentity+0x34>
    399c:	eb dd       	rcall	.-1066   	; 0x3574 <lora_driver_saveMac>
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	1f 91       	pop	r17
    39a4:	0f 91       	pop	r16
    39a6:	ff 90       	pop	r15
    39a8:	ef 90       	pop	r14
    39aa:	08 95       	ret

000039ac <lora_driver_mapReturnCodeToText>:
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	fc 01       	movw	r30, r24
    39b0:	ee 0f       	add	r30, r30
    39b2:	ff 1f       	adc	r31, r31
    39b4:	8e 0f       	add	r24, r30
    39b6:	9f 1f       	adc	r25, r31
    39b8:	fc 01       	movw	r30, r24
    39ba:	e6 5b       	subi	r30, 0xB6	; 182
    39bc:	f9 4f       	sbci	r31, 0xF9	; 249
    39be:	81 81       	ldd	r24, Z+1	; 0x01
    39c0:	92 81       	ldd	r25, Z+2	; 0x02
    39c2:	08 95       	ret

000039c4 <decode_port_no>:
    39c4:	dc 01       	movw	r26, r24
    39c6:	00 97       	sbiw	r24, 0x00	; 0
    39c8:	29 f1       	breq	.+74     	; 0x3a14 <decode_port_no+0x50>
    39ca:	fb 01       	movw	r30, r22
    39cc:	20 81       	ld	r18, Z
    39ce:	fc 01       	movw	r30, r24
    39d0:	01 90       	ld	r0, Z+
    39d2:	00 20       	and	r0, r0
    39d4:	e9 f7       	brne	.-6      	; 0x39d0 <decode_port_no+0xc>
    39d6:	31 97       	sbiw	r30, 0x01	; 1
    39d8:	e8 1b       	sub	r30, r24
    39da:	f9 0b       	sbc	r31, r25
    39dc:	82 2f       	mov	r24, r18
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	e8 17       	cp	r30, r24
    39e2:	f9 07       	cpc	r31, r25
    39e4:	c8 f0       	brcs	.+50     	; 0x3a18 <decode_port_no+0x54>
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	08 c0       	rjmp	.+16     	; 0x39fa <decode_port_no+0x36>
    39ea:	88 0f       	add	r24, r24
    39ec:	38 2f       	mov	r19, r24
    39ee:	33 0f       	add	r19, r19
    39f0:	33 0f       	add	r19, r19
    39f2:	83 0f       	add	r24, r19
    39f4:	80 53       	subi	r24, 0x30	; 48
    39f6:	89 0f       	add	r24, r25
    39f8:	2f 5f       	subi	r18, 0xFF	; 255
    39fa:	fd 01       	movw	r30, r26
    39fc:	e2 0f       	add	r30, r18
    39fe:	f1 1d       	adc	r31, r1
    3a00:	90 81       	ld	r25, Z
    3a02:	30 ed       	ldi	r19, 0xD0	; 208
    3a04:	39 0f       	add	r19, r25
    3a06:	3a 30       	cpi	r19, 0x0A	; 10
    3a08:	10 f4       	brcc	.+4      	; 0x3a0e <decode_port_no+0x4a>
    3a0a:	91 11       	cpse	r25, r1
    3a0c:	ee cf       	rjmp	.-36     	; 0x39ea <decode_port_no+0x26>
    3a0e:	fb 01       	movw	r30, r22
    3a10:	20 83       	st	Z, r18
    3a12:	08 95       	ret
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	08 95       	ret
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	08 95       	ret

00003a1c <decode_hexadecimal_string_bytes>:
    3a1c:	0f 93       	push	r16
    3a1e:	1f 93       	push	r17
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	dc 01       	movw	r26, r24
    3a26:	ea 01       	movw	r28, r20
    3a28:	20 97       	sbiw	r28, 0x00	; 0
    3a2a:	e1 f1       	breq	.+120    	; 0x3aa4 <decode_hexadecimal_string_bytes+0x88>
    3a2c:	fa 01       	movw	r30, r20
    3a2e:	01 90       	ld	r0, Z+
    3a30:	00 20       	and	r0, r0
    3a32:	e9 f7       	brne	.-6      	; 0x3a2e <decode_hexadecimal_string_bytes+0x12>
    3a34:	31 97       	sbiw	r30, 0x01	; 1
    3a36:	e4 1b       	sub	r30, r20
    3a38:	f5 0b       	sbc	r31, r21
    3a3a:	32 97       	sbiw	r30, 0x02	; 2
    3a3c:	10 f5       	brcc	.+68     	; 0x3a82 <decode_hexadecimal_string_bytes+0x66>
    3a3e:	32 c0       	rjmp	.+100    	; 0x3aa4 <decode_hexadecimal_string_bytes+0x88>
    3a40:	8d 01       	movw	r16, r26
    3a42:	04 0f       	add	r16, r20
    3a44:	15 1f       	adc	r17, r21
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	ae 01       	movw	r20, r28
    3a4a:	42 0f       	add	r20, r18
    3a4c:	53 1f       	adc	r21, r19
    3a4e:	fa 01       	movw	r30, r20
    3a50:	90 81       	ld	r25, Z
    3a52:	91 34       	cpi	r25, 0x41	; 65
    3a54:	28 f0       	brcs	.+10     	; 0x3a60 <decode_hexadecimal_string_bytes+0x44>
    3a56:	97 53       	subi	r25, 0x37	; 55
    3a58:	59 2f       	mov	r21, r25
    3a5a:	52 95       	swap	r21
    3a5c:	50 7f       	andi	r21, 0xF0	; 240
    3a5e:	03 c0       	rjmp	.+6      	; 0x3a66 <decode_hexadecimal_string_bytes+0x4a>
    3a60:	59 2f       	mov	r21, r25
    3a62:	52 95       	swap	r21
    3a64:	50 7f       	andi	r21, 0xF0	; 240
    3a66:	2c 0f       	add	r18, r28
    3a68:	3d 1f       	adc	r19, r29
    3a6a:	f9 01       	movw	r30, r18
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	91 34       	cpi	r25, 0x41	; 65
    3a70:	10 f0       	brcs	.+4      	; 0x3a76 <decode_hexadecimal_string_bytes+0x5a>
    3a72:	97 53       	subi	r25, 0x37	; 55
    3a74:	01 c0       	rjmp	.+2      	; 0x3a78 <decode_hexadecimal_string_bytes+0x5c>
    3a76:	90 53       	subi	r25, 0x30	; 48
    3a78:	95 0f       	add	r25, r21
    3a7a:	f8 01       	movw	r30, r16
    3a7c:	90 83       	st	Z, r25
    3a7e:	8f 5f       	subi	r24, 0xFF	; 255
    3a80:	01 c0       	rjmp	.+2      	; 0x3a84 <decode_hexadecimal_string_bytes+0x68>
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	28 2f       	mov	r18, r24
    3a86:	22 0f       	add	r18, r18
    3a88:	48 2f       	mov	r20, r24
    3a8a:	50 e0       	ldi	r21, 0x00	; 0
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	01 90       	ld	r0, Z+
    3a90:	00 20       	and	r0, r0
    3a92:	e9 f7       	brne	.-6      	; 0x3a8e <decode_hexadecimal_string_bytes+0x72>
    3a94:	31 97       	sbiw	r30, 0x01	; 1
    3a96:	ec 1b       	sub	r30, r28
    3a98:	fd 0b       	sbc	r31, r29
    3a9a:	4e 17       	cp	r20, r30
    3a9c:	5f 07       	cpc	r21, r31
    3a9e:	10 f4       	brcc	.+4      	; 0x3aa4 <decode_hexadecimal_string_bytes+0x88>
    3aa0:	86 13       	cpse	r24, r22
    3aa2:	ce cf       	rjmp	.-100    	; 0x3a40 <decode_hexadecimal_string_bytes+0x24>
    3aa4:	df 91       	pop	r29
    3aa6:	cf 91       	pop	r28
    3aa8:	1f 91       	pop	r17
    3aaa:	0f 91       	pop	r16
    3aac:	08 95       	ret

00003aae <serial_create>:
    3aae:	2f 92       	push	r2
    3ab0:	3f 92       	push	r3
    3ab2:	4f 92       	push	r4
    3ab4:	5f 92       	push	r5
    3ab6:	6f 92       	push	r6
    3ab8:	7f 92       	push	r7
    3aba:	8f 92       	push	r8
    3abc:	9f 92       	push	r9
    3abe:	af 92       	push	r10
    3ac0:	cf 92       	push	r12
    3ac2:	ef 92       	push	r14
    3ac4:	ff 92       	push	r15
    3ac6:	0f 93       	push	r16
    3ac8:	1f 93       	push	r17
    3aca:	cf 93       	push	r28
    3acc:	df 93       	push	r29
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	f8 2e       	mov	r15, r24
    3ad4:	2a 01       	movw	r4, r20
    3ad6:	3b 01       	movw	r6, r22
    3ad8:	88 e0       	ldi	r24, 0x08	; 8
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	9f d7       	rcall	.+3902   	; 0x4a1c <malloc>
    3ade:	8c 01       	movw	r16, r24
    3ae0:	8f 2d       	mov	r24, r15
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	ee 0f       	add	r30, r30
    3ae8:	ff 1f       	adc	r31, r31
    3aea:	ec 52       	subi	r30, 0x2C	; 44
    3aec:	fd 4e       	sbci	r31, 0xED	; 237
    3aee:	11 83       	std	Z+1, r17	; 0x01
    3af0:	00 83       	st	Z, r16
    3af2:	01 15       	cp	r16, r1
    3af4:	11 05       	cpc	r17, r1
    3af6:	09 f4       	brne	.+2      	; 0x3afa <serial_create+0x4c>
    3af8:	64 c0       	rjmp	.+200    	; 0x3bc2 <serial_create+0x114>
    3afa:	88 0f       	add	r24, r24
    3afc:	99 1f       	adc	r25, r25
    3afe:	fc 01       	movw	r30, r24
    3b00:	e9 5f       	subi	r30, 0xF9	; 249
    3b02:	fd 4f       	sbci	r31, 0xFD	; 253
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	d8 01       	movw	r26, r16
    3b0a:	8d 93       	st	X+, r24
    3b0c:	9c 93       	st	X, r25
    3b0e:	6c 2d       	mov	r22, r12
    3b10:	70 e0       	ldi	r23, 0x00	; 0
    3b12:	84 e0       	ldi	r24, 0x04	; 4
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	68 d7       	rcall	.+3792   	; 0x49e8 <calloc>
    3b18:	1c 01       	movw	r2, r24
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	70 e0       	ldi	r23, 0x00	; 0
    3b1e:	86 e0       	ldi	r24, 0x06	; 6
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	62 d7       	rcall	.+3780   	; 0x49e8 <calloc>
    3b24:	7c 01       	movw	r14, r24
    3b26:	4c 2d       	mov	r20, r12
    3b28:	b1 01       	movw	r22, r2
    3b2a:	50 d5       	rcall	.+2720   	; 0x45cc <fifo_init>
    3b2c:	f8 01       	movw	r30, r16
    3b2e:	f5 82       	std	Z+5, r15	; 0x05
    3b30:	e4 82       	std	Z+4, r14	; 0x04
    3b32:	6a 2d       	mov	r22, r10
    3b34:	70 e0       	ldi	r23, 0x00	; 0
    3b36:	84 e0       	ldi	r24, 0x04	; 4
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	56 d7       	rcall	.+3756   	; 0x49e8 <calloc>
    3b3c:	1c 01       	movw	r2, r24
    3b3e:	61 e0       	ldi	r22, 0x01	; 1
    3b40:	70 e0       	ldi	r23, 0x00	; 0
    3b42:	86 e0       	ldi	r24, 0x06	; 6
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	50 d7       	rcall	.+3744   	; 0x49e8 <calloc>
    3b48:	7c 01       	movw	r14, r24
    3b4a:	4a 2d       	mov	r20, r10
    3b4c:	b1 01       	movw	r22, r2
    3b4e:	3e d5       	rcall	.+2684   	; 0x45cc <fifo_init>
    3b50:	d8 01       	movw	r26, r16
    3b52:	13 96       	adiw	r26, 0x03	; 3
    3b54:	fc 92       	st	X, r15
    3b56:	ee 92       	st	-X, r14
    3b58:	12 97       	sbiw	r26, 0x02	; 2
    3b5a:	17 96       	adiw	r26, 0x07	; 7
    3b5c:	9c 92       	st	X, r9
    3b5e:	8e 92       	st	-X, r8
    3b60:	16 97       	sbiw	r26, 0x06	; 6
    3b62:	ff b6       	in	r15, 0x3f	; 63
    3b64:	f8 94       	cli
    3b66:	ed 91       	ld	r30, X+
    3b68:	fc 91       	ld	r31, X
    3b6a:	11 97       	sbiw	r26, 0x01	; 1
    3b6c:	36 97       	sbiw	r30, 0x06	; 6
    3b6e:	80 81       	ld	r24, Z
    3b70:	82 60       	ori	r24, 0x02	; 2
    3b72:	80 83       	st	Z, r24
    3b74:	8d 90       	ld	r8, X+
    3b76:	9c 90       	ld	r9, X
    3b78:	c3 01       	movw	r24, r6
    3b7a:	b2 01       	movw	r22, r4
    3b7c:	3c d6       	rcall	.+3192   	; 0x47f6 <__floatunsisf>
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	40 e0       	ldi	r20, 0x00	; 0
    3b84:	51 e4       	ldi	r21, 0x41	; 65
    3b86:	c5 d6       	rcall	.+3466   	; 0x4912 <__mulsf3>
    3b88:	9b 01       	movw	r18, r22
    3b8a:	ac 01       	movw	r20, r24
    3b8c:	60 e0       	ldi	r22, 0x00	; 0
    3b8e:	74 e2       	ldi	r23, 0x24	; 36
    3b90:	84 e7       	ldi	r24, 0x74	; 116
    3b92:	9b e4       	ldi	r25, 0x4B	; 75
    3b94:	9c d5       	rcall	.+2872   	; 0x46ce <__divsf3>
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e8       	ldi	r20, 0x80	; 128
    3b9c:	5f e3       	ldi	r21, 0x3F	; 63
    3b9e:	32 d5       	rcall	.+2660   	; 0x4604 <__subsf3>
    3ba0:	fe d5       	rcall	.+3068   	; 0x479e <__fixunssfsi>
    3ba2:	f4 01       	movw	r30, r8
    3ba4:	32 97       	sbiw	r30, 0x02	; 2
    3ba6:	60 83       	st	Z, r22
    3ba8:	d8 01       	movw	r26, r16
    3baa:	ed 91       	ld	r30, X+
    3bac:	fc 91       	ld	r31, X
    3bae:	11 97       	sbiw	r26, 0x01	; 1
    3bb0:	35 97       	sbiw	r30, 0x05	; 5
    3bb2:	88 e9       	ldi	r24, 0x98	; 152
    3bb4:	80 83       	st	Z, r24
    3bb6:	ed 91       	ld	r30, X+
    3bb8:	fc 91       	ld	r31, X
    3bba:	34 97       	sbiw	r30, 0x04	; 4
    3bbc:	86 e0       	ldi	r24, 0x06	; 6
    3bbe:	80 83       	st	Z, r24
    3bc0:	ff be       	out	0x3f, r15	; 63
    3bc2:	c8 01       	movw	r24, r16
    3bc4:	df 91       	pop	r29
    3bc6:	cf 91       	pop	r28
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	ff 90       	pop	r15
    3bce:	ef 90       	pop	r14
    3bd0:	cf 90       	pop	r12
    3bd2:	af 90       	pop	r10
    3bd4:	9f 90       	pop	r9
    3bd6:	8f 90       	pop	r8
    3bd8:	7f 90       	pop	r7
    3bda:	6f 90       	pop	r6
    3bdc:	5f 90       	pop	r5
    3bde:	4f 90       	pop	r4
    3be0:	3f 90       	pop	r3
    3be2:	2f 90       	pop	r2
    3be4:	08 95       	ret

00003be6 <serial_sendByte>:
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	dc 01       	movw	r26, r24
    3bec:	89 2b       	or	r24, r25
    3bee:	01 f1       	breq	.+64     	; 0x3c30 <serial_sendByte+0x4a>
    3bf0:	12 96       	adiw	r26, 0x02	; 2
    3bf2:	ed 91       	ld	r30, X+
    3bf4:	fc 91       	ld	r31, X
    3bf6:	13 97       	sbiw	r26, 0x03	; 3
    3bf8:	93 81       	ldd	r25, Z+3	; 0x03
    3bfa:	82 81       	ldd	r24, Z+2	; 0x02
    3bfc:	25 81       	ldd	r18, Z+5	; 0x05
    3bfe:	98 1b       	sub	r25, r24
    3c00:	92 23       	and	r25, r18
    3c02:	84 81       	ldd	r24, Z+4	; 0x04
    3c04:	98 17       	cp	r25, r24
    3c06:	b1 f0       	breq	.+44     	; 0x3c34 <serial_sendByte+0x4e>
    3c08:	83 81       	ldd	r24, Z+3	; 0x03
    3c0a:	26 95       	lsr	r18
    3c0c:	28 23       	and	r18, r24
    3c0e:	c0 81       	ld	r28, Z
    3c10:	d1 81       	ldd	r29, Z+1	; 0x01
    3c12:	c2 0f       	add	r28, r18
    3c14:	d1 1d       	adc	r29, r1
    3c16:	68 83       	st	Y, r22
    3c18:	8f 5f       	subi	r24, 0xFF	; 255
    3c1a:	95 81       	ldd	r25, Z+5	; 0x05
    3c1c:	89 23       	and	r24, r25
    3c1e:	83 83       	std	Z+3, r24	; 0x03
    3c20:	ed 91       	ld	r30, X+
    3c22:	fc 91       	ld	r31, X
    3c24:	35 97       	sbiw	r30, 0x05	; 5
    3c26:	80 81       	ld	r24, Z
    3c28:	80 62       	ori	r24, 0x20	; 32
    3c2a:	80 83       	st	Z, r24
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	03 c0       	rjmp	.+6      	; 0x3c36 <serial_sendByte+0x50>
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	01 c0       	rjmp	.+2      	; 0x3c36 <serial_sendByte+0x50>
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	08 95       	ret

00003c3c <serial_sendBytes>:
    3c3c:	ef 92       	push	r14
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	cf 93       	push	r28
    3c46:	df 93       	push	r29
    3c48:	7c 01       	movw	r14, r24
    3c4a:	00 97       	sbiw	r24, 0x00	; 0
    3c4c:	09 f4       	brne	.+2      	; 0x3c50 <serial_sendBytes+0x14>
    3c4e:	41 c0       	rjmp	.+130    	; 0x3cd2 <serial_sendBytes+0x96>
    3c50:	dc 01       	movw	r26, r24
    3c52:	12 96       	adiw	r26, 0x02	; 2
    3c54:	ed 91       	ld	r30, X+
    3c56:	fc 91       	ld	r31, X
    3c58:	13 97       	sbiw	r26, 0x03	; 3
    3c5a:	93 81       	ldd	r25, Z+3	; 0x03
    3c5c:	82 81       	ldd	r24, Z+2	; 0x02
    3c5e:	98 1b       	sub	r25, r24
    3c60:	85 81       	ldd	r24, Z+5	; 0x05
    3c62:	98 23       	and	r25, r24
    3c64:	84 81       	ldd	r24, Z+4	; 0x04
    3c66:	89 1b       	sub	r24, r25
    3c68:	86 17       	cp	r24, r22
    3c6a:	a8 f1       	brcs	.+106    	; 0x3cd6 <serial_sendBytes+0x9a>
    3c6c:	66 23       	and	r22, r22
    3c6e:	41 f1       	breq	.+80     	; 0x3cc0 <serial_sendBytes+0x84>
    3c70:	84 2f       	mov	r24, r20
    3c72:	95 2f       	mov	r25, r21
    3c74:	dc 01       	movw	r26, r24
    3c76:	61 50       	subi	r22, 0x01	; 1
    3c78:	46 2f       	mov	r20, r22
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	4f 5f       	subi	r20, 0xFF	; 255
    3c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c80:	48 0f       	add	r20, r24
    3c82:	59 1f       	adc	r21, r25
    3c84:	e7 01       	movw	r28, r14
    3c86:	ea 81       	ldd	r30, Y+2	; 0x02
    3c88:	fb 81       	ldd	r31, Y+3	; 0x03
    3c8a:	93 81       	ldd	r25, Z+3	; 0x03
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	25 81       	ldd	r18, Z+5	; 0x05
    3c90:	98 1b       	sub	r25, r24
    3c92:	92 23       	and	r25, r18
    3c94:	84 81       	ldd	r24, Z+4	; 0x04
    3c96:	98 17       	cp	r25, r24
    3c98:	79 f0       	breq	.+30     	; 0x3cb8 <serial_sendBytes+0x7c>
    3c9a:	8c 91       	ld	r24, X
    3c9c:	93 81       	ldd	r25, Z+3	; 0x03
    3c9e:	26 95       	lsr	r18
    3ca0:	29 23       	and	r18, r25
    3ca2:	60 81       	ld	r22, Z
    3ca4:	71 81       	ldd	r23, Z+1	; 0x01
    3ca6:	8b 01       	movw	r16, r22
    3ca8:	02 0f       	add	r16, r18
    3caa:	11 1d       	adc	r17, r1
    3cac:	e8 01       	movw	r28, r16
    3cae:	88 83       	st	Y, r24
    3cb0:	9f 5f       	subi	r25, 0xFF	; 255
    3cb2:	85 81       	ldd	r24, Z+5	; 0x05
    3cb4:	98 23       	and	r25, r24
    3cb6:	93 83       	std	Z+3, r25	; 0x03
    3cb8:	11 96       	adiw	r26, 0x01	; 1
    3cba:	a4 17       	cp	r26, r20
    3cbc:	b5 07       	cpc	r27, r21
    3cbe:	11 f7       	brne	.-60     	; 0x3c84 <serial_sendBytes+0x48>
    3cc0:	d7 01       	movw	r26, r14
    3cc2:	ed 91       	ld	r30, X+
    3cc4:	fc 91       	ld	r31, X
    3cc6:	35 97       	sbiw	r30, 0x05	; 5
    3cc8:	80 81       	ld	r24, Z
    3cca:	80 62       	ori	r24, 0x20	; 32
    3ccc:	80 83       	st	Z, r24
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	03 c0       	rjmp	.+6      	; 0x3cd8 <serial_sendBytes+0x9c>
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	01 c0       	rjmp	.+2      	; 0x3cd8 <serial_sendBytes+0x9c>
    3cd6:	82 e0       	ldi	r24, 0x02	; 2
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	08 95       	ret

00003ce6 <serial_getByte>:
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	d1 f0       	breq	.+52     	; 0x3d1e <serial_getByte+0x38>
    3cea:	dc 01       	movw	r26, r24
    3cec:	14 96       	adiw	r26, 0x04	; 4
    3cee:	ed 91       	ld	r30, X+
    3cf0:	fc 91       	ld	r31, X
    3cf2:	15 97       	sbiw	r26, 0x05	; 5
    3cf4:	93 81       	ldd	r25, Z+3	; 0x03
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	98 17       	cp	r25, r24
    3cfa:	99 f0       	breq	.+38     	; 0x3d22 <serial_getByte+0x3c>
    3cfc:	92 81       	ldd	r25, Z+2	; 0x02
    3cfe:	85 81       	ldd	r24, Z+5	; 0x05
    3d00:	86 95       	lsr	r24
    3d02:	89 23       	and	r24, r25
    3d04:	a0 81       	ld	r26, Z
    3d06:	b1 81       	ldd	r27, Z+1	; 0x01
    3d08:	a8 0f       	add	r26, r24
    3d0a:	b1 1d       	adc	r27, r1
    3d0c:	8c 91       	ld	r24, X
    3d0e:	db 01       	movw	r26, r22
    3d10:	8c 93       	st	X, r24
    3d12:	9f 5f       	subi	r25, 0xFF	; 255
    3d14:	85 81       	ldd	r24, Z+5	; 0x05
    3d16:	98 23       	and	r25, r24
    3d18:	92 83       	std	Z+2, r25	; 0x02
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	08 95       	ret
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	08 95       	ret
    3d22:	83 e0       	ldi	r24, 0x03	; 3
    3d24:	08 95       	ret

00003d26 <__vector_25>:
    3d26:	1f 92       	push	r1
    3d28:	0f 92       	push	r0
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	0f 92       	push	r0
    3d2e:	11 24       	eor	r1, r1
    3d30:	0b b6       	in	r0, 0x3b	; 59
    3d32:	0f 92       	push	r0
    3d34:	2f 93       	push	r18
    3d36:	3f 93       	push	r19
    3d38:	4f 93       	push	r20
    3d3a:	5f 93       	push	r21
    3d3c:	6f 93       	push	r22
    3d3e:	7f 93       	push	r23
    3d40:	8f 93       	push	r24
    3d42:	9f 93       	push	r25
    3d44:	af 93       	push	r26
    3d46:	bf 93       	push	r27
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	ef 93       	push	r30
    3d4e:	ff 93       	push	r31
    3d50:	a0 91 d4 12 	lds	r26, 0x12D4	; 0x8012d4 <_ser_handle>
    3d54:	b0 91 d5 12 	lds	r27, 0x12D5	; 0x8012d5 <_ser_handle+0x1>
    3d58:	10 97       	sbiw	r26, 0x00	; 0
    3d5a:	11 f1       	breq	.+68     	; 0x3da0 <__vector_25+0x7a>
    3d5c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3d60:	14 96       	adiw	r26, 0x04	; 4
    3d62:	ed 91       	ld	r30, X+
    3d64:	fc 91       	ld	r31, X
    3d66:	15 97       	sbiw	r26, 0x05	; 5
    3d68:	93 81       	ldd	r25, Z+3	; 0x03
    3d6a:	82 81       	ldd	r24, Z+2	; 0x02
    3d6c:	25 81       	ldd	r18, Z+5	; 0x05
    3d6e:	98 1b       	sub	r25, r24
    3d70:	92 23       	and	r25, r18
    3d72:	84 81       	ldd	r24, Z+4	; 0x04
    3d74:	98 17       	cp	r25, r24
    3d76:	61 f0       	breq	.+24     	; 0x3d90 <__vector_25+0x6a>
    3d78:	83 81       	ldd	r24, Z+3	; 0x03
    3d7a:	26 95       	lsr	r18
    3d7c:	28 23       	and	r18, r24
    3d7e:	c0 81       	ld	r28, Z
    3d80:	d1 81       	ldd	r29, Z+1	; 0x01
    3d82:	c2 0f       	add	r28, r18
    3d84:	d1 1d       	adc	r29, r1
    3d86:	68 83       	st	Y, r22
    3d88:	8f 5f       	subi	r24, 0xFF	; 255
    3d8a:	95 81       	ldd	r25, Z+5	; 0x05
    3d8c:	89 23       	and	r24, r25
    3d8e:	83 83       	std	Z+3, r24	; 0x03
    3d90:	16 96       	adiw	r26, 0x06	; 6
    3d92:	ed 91       	ld	r30, X+
    3d94:	fc 91       	ld	r31, X
    3d96:	17 97       	sbiw	r26, 0x07	; 7
    3d98:	30 97       	sbiw	r30, 0x00	; 0
    3d9a:	11 f0       	breq	.+4      	; 0x3da0 <__vector_25+0x7a>
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	19 95       	eicall
    3da0:	ff 91       	pop	r31
    3da2:	ef 91       	pop	r30
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	bf 91       	pop	r27
    3daa:	af 91       	pop	r26
    3dac:	9f 91       	pop	r25
    3dae:	8f 91       	pop	r24
    3db0:	7f 91       	pop	r23
    3db2:	6f 91       	pop	r22
    3db4:	5f 91       	pop	r21
    3db6:	4f 91       	pop	r20
    3db8:	3f 91       	pop	r19
    3dba:	2f 91       	pop	r18
    3dbc:	0f 90       	pop	r0
    3dbe:	0b be       	out	0x3b, r0	; 59
    3dc0:	0f 90       	pop	r0
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	0f 90       	pop	r0
    3dc6:	1f 90       	pop	r1
    3dc8:	18 95       	reti

00003dca <__vector_26>:
    3dca:	1f 92       	push	r1
    3dcc:	0f 92       	push	r0
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	0f 92       	push	r0
    3dd2:	11 24       	eor	r1, r1
    3dd4:	0b b6       	in	r0, 0x3b	; 59
    3dd6:	0f 92       	push	r0
    3dd8:	2f 93       	push	r18
    3dda:	8f 93       	push	r24
    3ddc:	9f 93       	push	r25
    3dde:	af 93       	push	r26
    3de0:	bf 93       	push	r27
    3de2:	ef 93       	push	r30
    3de4:	ff 93       	push	r31
    3de6:	e0 91 d4 12 	lds	r30, 0x12D4	; 0x8012d4 <_ser_handle>
    3dea:	f0 91 d5 12 	lds	r31, 0x12D5	; 0x8012d5 <_ser_handle+0x1>
    3dee:	30 97       	sbiw	r30, 0x00	; 0
    3df0:	b9 f0       	breq	.+46     	; 0x3e20 <__vector_26+0x56>
    3df2:	02 80       	ldd	r0, Z+2	; 0x02
    3df4:	f3 81       	ldd	r31, Z+3	; 0x03
    3df6:	e0 2d       	mov	r30, r0
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	82 81       	ldd	r24, Z+2	; 0x02
    3dfc:	98 17       	cp	r25, r24
    3dfe:	b1 f0       	breq	.+44     	; 0x3e2c <__vector_26+0x62>
    3e00:	92 81       	ldd	r25, Z+2	; 0x02
    3e02:	85 81       	ldd	r24, Z+5	; 0x05
    3e04:	28 2f       	mov	r18, r24
    3e06:	26 95       	lsr	r18
    3e08:	29 23       	and	r18, r25
    3e0a:	a0 81       	ld	r26, Z
    3e0c:	b1 81       	ldd	r27, Z+1	; 0x01
    3e0e:	a2 0f       	add	r26, r18
    3e10:	b1 1d       	adc	r27, r1
    3e12:	2c 91       	ld	r18, X
    3e14:	9f 5f       	subi	r25, 0xFF	; 255
    3e16:	89 23       	and	r24, r25
    3e18:	82 83       	std	Z+2, r24	; 0x02
    3e1a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3e1e:	0b c0       	rjmp	.+22     	; 0x3e36 <__vector_26+0x6c>
    3e20:	e1 ec       	ldi	r30, 0xC1	; 193
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	80 81       	ld	r24, Z
    3e26:	8f 7d       	andi	r24, 0xDF	; 223
    3e28:	80 83       	st	Z, r24
    3e2a:	05 c0       	rjmp	.+10     	; 0x3e36 <__vector_26+0x6c>
    3e2c:	e1 ec       	ldi	r30, 0xC1	; 193
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	80 81       	ld	r24, Z
    3e32:	8f 7d       	andi	r24, 0xDF	; 223
    3e34:	80 83       	st	Z, r24
    3e36:	ff 91       	pop	r31
    3e38:	ef 91       	pop	r30
    3e3a:	bf 91       	pop	r27
    3e3c:	af 91       	pop	r26
    3e3e:	9f 91       	pop	r25
    3e40:	8f 91       	pop	r24
    3e42:	2f 91       	pop	r18
    3e44:	0f 90       	pop	r0
    3e46:	0b be       	out	0x3b, r0	; 59
    3e48:	0f 90       	pop	r0
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	0f 90       	pop	r0
    3e4e:	1f 90       	pop	r1
    3e50:	18 95       	reti

00003e52 <__vector_36>:
    3e52:	1f 92       	push	r1
    3e54:	0f 92       	push	r0
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	0f 92       	push	r0
    3e5a:	11 24       	eor	r1, r1
    3e5c:	0b b6       	in	r0, 0x3b	; 59
    3e5e:	0f 92       	push	r0
    3e60:	2f 93       	push	r18
    3e62:	3f 93       	push	r19
    3e64:	4f 93       	push	r20
    3e66:	5f 93       	push	r21
    3e68:	6f 93       	push	r22
    3e6a:	7f 93       	push	r23
    3e6c:	8f 93       	push	r24
    3e6e:	9f 93       	push	r25
    3e70:	af 93       	push	r26
    3e72:	bf 93       	push	r27
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	ef 93       	push	r30
    3e7a:	ff 93       	push	r31
    3e7c:	a0 91 d6 12 	lds	r26, 0x12D6	; 0x8012d6 <_ser_handle+0x2>
    3e80:	b0 91 d7 12 	lds	r27, 0x12D7	; 0x8012d7 <_ser_handle+0x3>
    3e84:	10 97       	sbiw	r26, 0x00	; 0
    3e86:	11 f1       	breq	.+68     	; 0x3ecc <__vector_36+0x7a>
    3e88:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3e8c:	14 96       	adiw	r26, 0x04	; 4
    3e8e:	ed 91       	ld	r30, X+
    3e90:	fc 91       	ld	r31, X
    3e92:	15 97       	sbiw	r26, 0x05	; 5
    3e94:	93 81       	ldd	r25, Z+3	; 0x03
    3e96:	82 81       	ldd	r24, Z+2	; 0x02
    3e98:	25 81       	ldd	r18, Z+5	; 0x05
    3e9a:	98 1b       	sub	r25, r24
    3e9c:	92 23       	and	r25, r18
    3e9e:	84 81       	ldd	r24, Z+4	; 0x04
    3ea0:	98 17       	cp	r25, r24
    3ea2:	61 f0       	breq	.+24     	; 0x3ebc <__vector_36+0x6a>
    3ea4:	83 81       	ldd	r24, Z+3	; 0x03
    3ea6:	26 95       	lsr	r18
    3ea8:	28 23       	and	r18, r24
    3eaa:	c0 81       	ld	r28, Z
    3eac:	d1 81       	ldd	r29, Z+1	; 0x01
    3eae:	c2 0f       	add	r28, r18
    3eb0:	d1 1d       	adc	r29, r1
    3eb2:	68 83       	st	Y, r22
    3eb4:	8f 5f       	subi	r24, 0xFF	; 255
    3eb6:	95 81       	ldd	r25, Z+5	; 0x05
    3eb8:	89 23       	and	r24, r25
    3eba:	83 83       	std	Z+3, r24	; 0x03
    3ebc:	16 96       	adiw	r26, 0x06	; 6
    3ebe:	ed 91       	ld	r30, X+
    3ec0:	fc 91       	ld	r31, X
    3ec2:	17 97       	sbiw	r26, 0x07	; 7
    3ec4:	30 97       	sbiw	r30, 0x00	; 0
    3ec6:	11 f0       	breq	.+4      	; 0x3ecc <__vector_36+0x7a>
    3ec8:	cd 01       	movw	r24, r26
    3eca:	19 95       	eicall
    3ecc:	ff 91       	pop	r31
    3ece:	ef 91       	pop	r30
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	bf 91       	pop	r27
    3ed6:	af 91       	pop	r26
    3ed8:	9f 91       	pop	r25
    3eda:	8f 91       	pop	r24
    3edc:	7f 91       	pop	r23
    3ede:	6f 91       	pop	r22
    3ee0:	5f 91       	pop	r21
    3ee2:	4f 91       	pop	r20
    3ee4:	3f 91       	pop	r19
    3ee6:	2f 91       	pop	r18
    3ee8:	0f 90       	pop	r0
    3eea:	0b be       	out	0x3b, r0	; 59
    3eec:	0f 90       	pop	r0
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	0f 90       	pop	r0
    3ef2:	1f 90       	pop	r1
    3ef4:	18 95       	reti

00003ef6 <__vector_37>:
    3ef6:	1f 92       	push	r1
    3ef8:	0f 92       	push	r0
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	0f 92       	push	r0
    3efe:	11 24       	eor	r1, r1
    3f00:	0b b6       	in	r0, 0x3b	; 59
    3f02:	0f 92       	push	r0
    3f04:	2f 93       	push	r18
    3f06:	8f 93       	push	r24
    3f08:	9f 93       	push	r25
    3f0a:	af 93       	push	r26
    3f0c:	bf 93       	push	r27
    3f0e:	ef 93       	push	r30
    3f10:	ff 93       	push	r31
    3f12:	e0 91 d6 12 	lds	r30, 0x12D6	; 0x8012d6 <_ser_handle+0x2>
    3f16:	f0 91 d7 12 	lds	r31, 0x12D7	; 0x8012d7 <_ser_handle+0x3>
    3f1a:	30 97       	sbiw	r30, 0x00	; 0
    3f1c:	b9 f0       	breq	.+46     	; 0x3f4c <__vector_37+0x56>
    3f1e:	02 80       	ldd	r0, Z+2	; 0x02
    3f20:	f3 81       	ldd	r31, Z+3	; 0x03
    3f22:	e0 2d       	mov	r30, r0
    3f24:	93 81       	ldd	r25, Z+3	; 0x03
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	98 17       	cp	r25, r24
    3f2a:	b1 f0       	breq	.+44     	; 0x3f58 <__vector_37+0x62>
    3f2c:	92 81       	ldd	r25, Z+2	; 0x02
    3f2e:	85 81       	ldd	r24, Z+5	; 0x05
    3f30:	28 2f       	mov	r18, r24
    3f32:	26 95       	lsr	r18
    3f34:	29 23       	and	r18, r25
    3f36:	a0 81       	ld	r26, Z
    3f38:	b1 81       	ldd	r27, Z+1	; 0x01
    3f3a:	a2 0f       	add	r26, r18
    3f3c:	b1 1d       	adc	r27, r1
    3f3e:	2c 91       	ld	r18, X
    3f40:	9f 5f       	subi	r25, 0xFF	; 255
    3f42:	89 23       	and	r24, r25
    3f44:	82 83       	std	Z+2, r24	; 0x02
    3f46:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3f4a:	0b c0       	rjmp	.+22     	; 0x3f62 <__vector_37+0x6c>
    3f4c:	e9 ec       	ldi	r30, 0xC9	; 201
    3f4e:	f0 e0       	ldi	r31, 0x00	; 0
    3f50:	80 81       	ld	r24, Z
    3f52:	8f 7d       	andi	r24, 0xDF	; 223
    3f54:	80 83       	st	Z, r24
    3f56:	05 c0       	rjmp	.+10     	; 0x3f62 <__vector_37+0x6c>
    3f58:	e9 ec       	ldi	r30, 0xC9	; 201
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	80 81       	ld	r24, Z
    3f5e:	8f 7d       	andi	r24, 0xDF	; 223
    3f60:	80 83       	st	Z, r24
    3f62:	ff 91       	pop	r31
    3f64:	ef 91       	pop	r30
    3f66:	bf 91       	pop	r27
    3f68:	af 91       	pop	r26
    3f6a:	9f 91       	pop	r25
    3f6c:	8f 91       	pop	r24
    3f6e:	2f 91       	pop	r18
    3f70:	0f 90       	pop	r0
    3f72:	0b be       	out	0x3b, r0	; 59
    3f74:	0f 90       	pop	r0
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	0f 90       	pop	r0
    3f7a:	1f 90       	pop	r1
    3f7c:	18 95       	reti

00003f7e <__vector_51>:
    3f7e:	1f 92       	push	r1
    3f80:	0f 92       	push	r0
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	0f 92       	push	r0
    3f86:	11 24       	eor	r1, r1
    3f88:	0b b6       	in	r0, 0x3b	; 59
    3f8a:	0f 92       	push	r0
    3f8c:	2f 93       	push	r18
    3f8e:	3f 93       	push	r19
    3f90:	4f 93       	push	r20
    3f92:	5f 93       	push	r21
    3f94:	6f 93       	push	r22
    3f96:	7f 93       	push	r23
    3f98:	8f 93       	push	r24
    3f9a:	9f 93       	push	r25
    3f9c:	af 93       	push	r26
    3f9e:	bf 93       	push	r27
    3fa0:	cf 93       	push	r28
    3fa2:	df 93       	push	r29
    3fa4:	ef 93       	push	r30
    3fa6:	ff 93       	push	r31
    3fa8:	a0 91 d8 12 	lds	r26, 0x12D8	; 0x8012d8 <_ser_handle+0x4>
    3fac:	b0 91 d9 12 	lds	r27, 0x12D9	; 0x8012d9 <_ser_handle+0x5>
    3fb0:	10 97       	sbiw	r26, 0x00	; 0
    3fb2:	11 f1       	breq	.+68     	; 0x3ff8 <__vector_51+0x7a>
    3fb4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3fb8:	14 96       	adiw	r26, 0x04	; 4
    3fba:	ed 91       	ld	r30, X+
    3fbc:	fc 91       	ld	r31, X
    3fbe:	15 97       	sbiw	r26, 0x05	; 5
    3fc0:	93 81       	ldd	r25, Z+3	; 0x03
    3fc2:	82 81       	ldd	r24, Z+2	; 0x02
    3fc4:	25 81       	ldd	r18, Z+5	; 0x05
    3fc6:	98 1b       	sub	r25, r24
    3fc8:	92 23       	and	r25, r18
    3fca:	84 81       	ldd	r24, Z+4	; 0x04
    3fcc:	98 17       	cp	r25, r24
    3fce:	61 f0       	breq	.+24     	; 0x3fe8 <__vector_51+0x6a>
    3fd0:	83 81       	ldd	r24, Z+3	; 0x03
    3fd2:	26 95       	lsr	r18
    3fd4:	28 23       	and	r18, r24
    3fd6:	c0 81       	ld	r28, Z
    3fd8:	d1 81       	ldd	r29, Z+1	; 0x01
    3fda:	c2 0f       	add	r28, r18
    3fdc:	d1 1d       	adc	r29, r1
    3fde:	68 83       	st	Y, r22
    3fe0:	8f 5f       	subi	r24, 0xFF	; 255
    3fe2:	95 81       	ldd	r25, Z+5	; 0x05
    3fe4:	89 23       	and	r24, r25
    3fe6:	83 83       	std	Z+3, r24	; 0x03
    3fe8:	16 96       	adiw	r26, 0x06	; 6
    3fea:	ed 91       	ld	r30, X+
    3fec:	fc 91       	ld	r31, X
    3fee:	17 97       	sbiw	r26, 0x07	; 7
    3ff0:	30 97       	sbiw	r30, 0x00	; 0
    3ff2:	11 f0       	breq	.+4      	; 0x3ff8 <__vector_51+0x7a>
    3ff4:	cd 01       	movw	r24, r26
    3ff6:	19 95       	eicall
    3ff8:	ff 91       	pop	r31
    3ffa:	ef 91       	pop	r30
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	bf 91       	pop	r27
    4002:	af 91       	pop	r26
    4004:	9f 91       	pop	r25
    4006:	8f 91       	pop	r24
    4008:	7f 91       	pop	r23
    400a:	6f 91       	pop	r22
    400c:	5f 91       	pop	r21
    400e:	4f 91       	pop	r20
    4010:	3f 91       	pop	r19
    4012:	2f 91       	pop	r18
    4014:	0f 90       	pop	r0
    4016:	0b be       	out	0x3b, r0	; 59
    4018:	0f 90       	pop	r0
    401a:	0f be       	out	0x3f, r0	; 63
    401c:	0f 90       	pop	r0
    401e:	1f 90       	pop	r1
    4020:	18 95       	reti

00004022 <__vector_52>:
    4022:	1f 92       	push	r1
    4024:	0f 92       	push	r0
    4026:	0f b6       	in	r0, 0x3f	; 63
    4028:	0f 92       	push	r0
    402a:	11 24       	eor	r1, r1
    402c:	0b b6       	in	r0, 0x3b	; 59
    402e:	0f 92       	push	r0
    4030:	2f 93       	push	r18
    4032:	8f 93       	push	r24
    4034:	9f 93       	push	r25
    4036:	af 93       	push	r26
    4038:	bf 93       	push	r27
    403a:	ef 93       	push	r30
    403c:	ff 93       	push	r31
    403e:	e0 91 d8 12 	lds	r30, 0x12D8	; 0x8012d8 <_ser_handle+0x4>
    4042:	f0 91 d9 12 	lds	r31, 0x12D9	; 0x8012d9 <_ser_handle+0x5>
    4046:	30 97       	sbiw	r30, 0x00	; 0
    4048:	b9 f0       	breq	.+46     	; 0x4078 <__vector_52+0x56>
    404a:	02 80       	ldd	r0, Z+2	; 0x02
    404c:	f3 81       	ldd	r31, Z+3	; 0x03
    404e:	e0 2d       	mov	r30, r0
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	82 81       	ldd	r24, Z+2	; 0x02
    4054:	98 17       	cp	r25, r24
    4056:	b1 f0       	breq	.+44     	; 0x4084 <__vector_52+0x62>
    4058:	92 81       	ldd	r25, Z+2	; 0x02
    405a:	85 81       	ldd	r24, Z+5	; 0x05
    405c:	28 2f       	mov	r18, r24
    405e:	26 95       	lsr	r18
    4060:	29 23       	and	r18, r25
    4062:	a0 81       	ld	r26, Z
    4064:	b1 81       	ldd	r27, Z+1	; 0x01
    4066:	a2 0f       	add	r26, r18
    4068:	b1 1d       	adc	r27, r1
    406a:	2c 91       	ld	r18, X
    406c:	9f 5f       	subi	r25, 0xFF	; 255
    406e:	89 23       	and	r24, r25
    4070:	82 83       	std	Z+2, r24	; 0x02
    4072:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4076:	0b c0       	rjmp	.+22     	; 0x408e <__vector_52+0x6c>
    4078:	e1 ed       	ldi	r30, 0xD1	; 209
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	80 81       	ld	r24, Z
    407e:	8f 7d       	andi	r24, 0xDF	; 223
    4080:	80 83       	st	Z, r24
    4082:	05 c0       	rjmp	.+10     	; 0x408e <__vector_52+0x6c>
    4084:	e1 ed       	ldi	r30, 0xD1	; 209
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	80 81       	ld	r24, Z
    408a:	8f 7d       	andi	r24, 0xDF	; 223
    408c:	80 83       	st	Z, r24
    408e:	ff 91       	pop	r31
    4090:	ef 91       	pop	r30
    4092:	bf 91       	pop	r27
    4094:	af 91       	pop	r26
    4096:	9f 91       	pop	r25
    4098:	8f 91       	pop	r24
    409a:	2f 91       	pop	r18
    409c:	0f 90       	pop	r0
    409e:	0b be       	out	0x3b, r0	; 59
    40a0:	0f 90       	pop	r0
    40a2:	0f be       	out	0x3f, r0	; 63
    40a4:	0f 90       	pop	r0
    40a6:	1f 90       	pop	r1
    40a8:	18 95       	reti

000040aa <__vector_54>:
    40aa:	1f 92       	push	r1
    40ac:	0f 92       	push	r0
    40ae:	0f b6       	in	r0, 0x3f	; 63
    40b0:	0f 92       	push	r0
    40b2:	11 24       	eor	r1, r1
    40b4:	0b b6       	in	r0, 0x3b	; 59
    40b6:	0f 92       	push	r0
    40b8:	2f 93       	push	r18
    40ba:	3f 93       	push	r19
    40bc:	4f 93       	push	r20
    40be:	5f 93       	push	r21
    40c0:	6f 93       	push	r22
    40c2:	7f 93       	push	r23
    40c4:	8f 93       	push	r24
    40c6:	9f 93       	push	r25
    40c8:	af 93       	push	r26
    40ca:	bf 93       	push	r27
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	ef 93       	push	r30
    40d2:	ff 93       	push	r31
    40d4:	a0 91 da 12 	lds	r26, 0x12DA	; 0x8012da <_ser_handle+0x6>
    40d8:	b0 91 db 12 	lds	r27, 0x12DB	; 0x8012db <_ser_handle+0x7>
    40dc:	10 97       	sbiw	r26, 0x00	; 0
    40de:	11 f1       	breq	.+68     	; 0x4124 <__vector_54+0x7a>
    40e0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    40e4:	14 96       	adiw	r26, 0x04	; 4
    40e6:	ed 91       	ld	r30, X+
    40e8:	fc 91       	ld	r31, X
    40ea:	15 97       	sbiw	r26, 0x05	; 5
    40ec:	93 81       	ldd	r25, Z+3	; 0x03
    40ee:	82 81       	ldd	r24, Z+2	; 0x02
    40f0:	25 81       	ldd	r18, Z+5	; 0x05
    40f2:	98 1b       	sub	r25, r24
    40f4:	92 23       	and	r25, r18
    40f6:	84 81       	ldd	r24, Z+4	; 0x04
    40f8:	98 17       	cp	r25, r24
    40fa:	61 f0       	breq	.+24     	; 0x4114 <__vector_54+0x6a>
    40fc:	83 81       	ldd	r24, Z+3	; 0x03
    40fe:	26 95       	lsr	r18
    4100:	28 23       	and	r18, r24
    4102:	c0 81       	ld	r28, Z
    4104:	d1 81       	ldd	r29, Z+1	; 0x01
    4106:	c2 0f       	add	r28, r18
    4108:	d1 1d       	adc	r29, r1
    410a:	68 83       	st	Y, r22
    410c:	8f 5f       	subi	r24, 0xFF	; 255
    410e:	95 81       	ldd	r25, Z+5	; 0x05
    4110:	89 23       	and	r24, r25
    4112:	83 83       	std	Z+3, r24	; 0x03
    4114:	16 96       	adiw	r26, 0x06	; 6
    4116:	ed 91       	ld	r30, X+
    4118:	fc 91       	ld	r31, X
    411a:	17 97       	sbiw	r26, 0x07	; 7
    411c:	30 97       	sbiw	r30, 0x00	; 0
    411e:	11 f0       	breq	.+4      	; 0x4124 <__vector_54+0x7a>
    4120:	cd 01       	movw	r24, r26
    4122:	19 95       	eicall
    4124:	ff 91       	pop	r31
    4126:	ef 91       	pop	r30
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	bf 91       	pop	r27
    412e:	af 91       	pop	r26
    4130:	9f 91       	pop	r25
    4132:	8f 91       	pop	r24
    4134:	7f 91       	pop	r23
    4136:	6f 91       	pop	r22
    4138:	5f 91       	pop	r21
    413a:	4f 91       	pop	r20
    413c:	3f 91       	pop	r19
    413e:	2f 91       	pop	r18
    4140:	0f 90       	pop	r0
    4142:	0b be       	out	0x3b, r0	; 59
    4144:	0f 90       	pop	r0
    4146:	0f be       	out	0x3f, r0	; 63
    4148:	0f 90       	pop	r0
    414a:	1f 90       	pop	r1
    414c:	18 95       	reti

0000414e <__vector_55>:
    414e:	1f 92       	push	r1
    4150:	0f 92       	push	r0
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	0f 92       	push	r0
    4156:	11 24       	eor	r1, r1
    4158:	0b b6       	in	r0, 0x3b	; 59
    415a:	0f 92       	push	r0
    415c:	2f 93       	push	r18
    415e:	8f 93       	push	r24
    4160:	9f 93       	push	r25
    4162:	af 93       	push	r26
    4164:	bf 93       	push	r27
    4166:	ef 93       	push	r30
    4168:	ff 93       	push	r31
    416a:	e0 91 da 12 	lds	r30, 0x12DA	; 0x8012da <_ser_handle+0x6>
    416e:	f0 91 db 12 	lds	r31, 0x12DB	; 0x8012db <_ser_handle+0x7>
    4172:	30 97       	sbiw	r30, 0x00	; 0
    4174:	b9 f0       	breq	.+46     	; 0x41a4 <__vector_55+0x56>
    4176:	02 80       	ldd	r0, Z+2	; 0x02
    4178:	f3 81       	ldd	r31, Z+3	; 0x03
    417a:	e0 2d       	mov	r30, r0
    417c:	93 81       	ldd	r25, Z+3	; 0x03
    417e:	82 81       	ldd	r24, Z+2	; 0x02
    4180:	98 17       	cp	r25, r24
    4182:	b1 f0       	breq	.+44     	; 0x41b0 <__vector_55+0x62>
    4184:	92 81       	ldd	r25, Z+2	; 0x02
    4186:	85 81       	ldd	r24, Z+5	; 0x05
    4188:	28 2f       	mov	r18, r24
    418a:	26 95       	lsr	r18
    418c:	29 23       	and	r18, r25
    418e:	a0 81       	ld	r26, Z
    4190:	b1 81       	ldd	r27, Z+1	; 0x01
    4192:	a2 0f       	add	r26, r18
    4194:	b1 1d       	adc	r27, r1
    4196:	2c 91       	ld	r18, X
    4198:	9f 5f       	subi	r25, 0xFF	; 255
    419a:	89 23       	and	r24, r25
    419c:	82 83       	std	Z+2, r24	; 0x02
    419e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    41a2:	0b c0       	rjmp	.+22     	; 0x41ba <__vector_55+0x6c>
    41a4:	e1 e3       	ldi	r30, 0x31	; 49
    41a6:	f1 e0       	ldi	r31, 0x01	; 1
    41a8:	80 81       	ld	r24, Z
    41aa:	8f 7d       	andi	r24, 0xDF	; 223
    41ac:	80 83       	st	Z, r24
    41ae:	05 c0       	rjmp	.+10     	; 0x41ba <__vector_55+0x6c>
    41b0:	e1 e3       	ldi	r30, 0x31	; 49
    41b2:	f1 e0       	ldi	r31, 0x01	; 1
    41b4:	80 81       	ld	r24, Z
    41b6:	8f 7d       	andi	r24, 0xDF	; 223
    41b8:	80 83       	st	Z, r24
    41ba:	ff 91       	pop	r31
    41bc:	ef 91       	pop	r30
    41be:	bf 91       	pop	r27
    41c0:	af 91       	pop	r26
    41c2:	9f 91       	pop	r25
    41c4:	8f 91       	pop	r24
    41c6:	2f 91       	pop	r18
    41c8:	0f 90       	pop	r0
    41ca:	0b be       	out	0x3b, r0	; 59
    41cc:	0f 90       	pop	r0
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	0f 90       	pop	r0
    41d2:	1f 90       	pop	r1
    41d4:	18 95       	reti

000041d6 <usart_getchar>:
    41d6:	cf 93       	push	r28
    41d8:	df 93       	push	r29
    41da:	1f 92       	push	r1
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
    41e0:	be 01       	movw	r22, r28
    41e2:	6f 5f       	subi	r22, 0xFF	; 255
    41e4:	7f 4f       	sbci	r23, 0xFF	; 255
    41e6:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <_com_serial_instance>
    41ea:	90 91 dd 12 	lds	r25, 0x12DD	; 0x8012dd <_com_serial_instance+0x1>
    41ee:	7b dd       	rcall	.-1290   	; 0x3ce6 <serial_getByte>
    41f0:	81 11       	cpse	r24, r1
    41f2:	f6 cf       	rjmp	.-20     	; 0x41e0 <usart_getchar+0xa>
    41f4:	89 81       	ldd	r24, Y+1	; 0x01
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	0f 90       	pop	r0
    41fa:	df 91       	pop	r29
    41fc:	cf 91       	pop	r28
    41fe:	08 95       	ret

00004200 <usart_putchar>:
    4200:	68 2f       	mov	r22, r24
    4202:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <_com_serial_instance>
    4206:	90 91 dd 12 	lds	r25, 0x12DD	; 0x8012dd <_com_serial_instance+0x1>
    420a:	ed dc       	rcall	.-1574   	; 0x3be6 <serial_sendByte>
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	08 95       	ret

00004212 <stdio_initialise>:
    4212:	8f 92       	push	r8
    4214:	9f 92       	push	r9
    4216:	af 92       	push	r10
    4218:	cf 92       	push	r12
    421a:	ef 92       	push	r14
    421c:	0f 93       	push	r16
    421e:	81 2c       	mov	r8, r1
    4220:	91 2c       	mov	r9, r1
    4222:	68 94       	set
    4224:	aa 24       	eor	r10, r10
    4226:	a7 f8       	bld	r10, 7
    4228:	68 94       	set
    422a:	cc 24       	eor	r12, r12
    422c:	c7 f8       	bld	r12, 7
    422e:	e1 2c       	mov	r14, r1
    4230:	00 e0       	ldi	r16, 0x00	; 0
    4232:	23 e0       	ldi	r18, 0x03	; 3
    4234:	40 e0       	ldi	r20, 0x00	; 0
    4236:	51 ee       	ldi	r21, 0xE1	; 225
    4238:	60 e0       	ldi	r22, 0x00	; 0
    423a:	70 e0       	ldi	r23, 0x00	; 0
    423c:	38 dc       	rcall	.-1936   	; 0x3aae <serial_create>
    423e:	90 93 dd 12 	sts	0x12DD, r25	; 0x8012dd <_com_serial_instance+0x1>
    4242:	80 93 dc 12 	sts	0x12DC, r24	; 0x8012dc <_com_serial_instance>
    4246:	ec ef       	ldi	r30, 0xFC	; 252
    4248:	f2 e1       	ldi	r31, 0x12	; 18
    424a:	8f e0       	ldi	r24, 0x0F	; 15
    424c:	92 e0       	ldi	r25, 0x02	; 2
    424e:	91 83       	std	Z+1, r25	; 0x01
    4250:	80 83       	st	Z, r24
    4252:	93 83       	std	Z+3, r25	; 0x03
    4254:	82 83       	std	Z+2, r24	; 0x02
    4256:	0f 91       	pop	r16
    4258:	ef 90       	pop	r14
    425a:	cf 90       	pop	r12
    425c:	af 90       	pop	r10
    425e:	9f 90       	pop	r9
    4260:	8f 90       	pop	r8
    4262:	08 95       	ret

00004264 <_turn_off>:
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	fc 01       	movw	r30, r24
    4268:	ee 0f       	add	r30, r30
    426a:	ff 1f       	adc	r31, r31
    426c:	e8 0f       	add	r30, r24
    426e:	f9 1f       	adc	r31, r25
    4270:	ee 0f       	add	r30, r30
    4272:	ff 1f       	adc	r31, r31
    4274:	e2 52       	subi	r30, 0x22	; 34
    4276:	fd 4e       	sbci	r31, 0xED	; 237
    4278:	23 81       	ldd	r18, Z+3	; 0x03
    427a:	21 11       	cpse	r18, r1
    427c:	1f c0       	rjmp	.+62     	; 0x42bc <_turn_off+0x58>
    427e:	9c 01       	movw	r18, r24
    4280:	22 0f       	add	r18, r18
    4282:	33 1f       	adc	r19, r19
    4284:	f9 01       	movw	r30, r18
    4286:	e8 0f       	add	r30, r24
    4288:	f9 1f       	adc	r31, r25
    428a:	ee 0f       	add	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	e2 52       	subi	r30, 0x22	; 34
    4290:	fd 4e       	sbci	r31, 0xED	; 237
    4292:	a0 81       	ld	r26, Z
    4294:	b1 81       	ldd	r27, Z+1	; 0x01
    4296:	4c 91       	ld	r20, X
    4298:	f9 01       	movw	r30, r18
    429a:	e8 0f       	add	r30, r24
    429c:	f9 1f       	adc	r31, r25
    429e:	ee 0f       	add	r30, r30
    42a0:	ff 1f       	adc	r31, r31
    42a2:	e2 52       	subi	r30, 0x22	; 34
    42a4:	fd 4e       	sbci	r31, 0xED	; 237
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	02 80       	ldd	r0, Z+2	; 0x02
    42ac:	02 c0       	rjmp	.+4      	; 0x42b2 <_turn_off+0x4e>
    42ae:	88 0f       	add	r24, r24
    42b0:	99 1f       	adc	r25, r25
    42b2:	0a 94       	dec	r0
    42b4:	e2 f7       	brpl	.-8      	; 0x42ae <_turn_off+0x4a>
    42b6:	84 2b       	or	r24, r20
    42b8:	8c 93       	st	X, r24
    42ba:	08 95       	ret
    42bc:	fc 01       	movw	r30, r24
    42be:	ee 0f       	add	r30, r30
    42c0:	ff 1f       	adc	r31, r31
    42c2:	df 01       	movw	r26, r30
    42c4:	a8 0f       	add	r26, r24
    42c6:	b9 1f       	adc	r27, r25
    42c8:	aa 0f       	add	r26, r26
    42ca:	bb 1f       	adc	r27, r27
    42cc:	a2 52       	subi	r26, 0x22	; 34
    42ce:	bd 4e       	sbci	r27, 0xED	; 237
    42d0:	0d 90       	ld	r0, X+
    42d2:	bc 91       	ld	r27, X
    42d4:	a0 2d       	mov	r26, r0
    42d6:	2c 91       	ld	r18, X
    42d8:	e8 0f       	add	r30, r24
    42da:	f9 1f       	adc	r31, r25
    42dc:	ee 0f       	add	r30, r30
    42de:	ff 1f       	adc	r31, r31
    42e0:	e2 52       	subi	r30, 0x22	; 34
    42e2:	fd 4e       	sbci	r31, 0xED	; 237
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	02 80       	ldd	r0, Z+2	; 0x02
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <_turn_off+0x8c>
    42ec:	88 0f       	add	r24, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	0a 94       	dec	r0
    42f2:	e2 f7       	brpl	.-8      	; 0x42ec <_turn_off+0x88>
    42f4:	80 95       	com	r24
    42f6:	82 23       	and	r24, r18
    42f8:	8c 93       	st	X, r24
    42fa:	08 95       	ret

000042fc <_turn_on>:
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	fc 01       	movw	r30, r24
    4300:	ee 0f       	add	r30, r30
    4302:	ff 1f       	adc	r31, r31
    4304:	e8 0f       	add	r30, r24
    4306:	f9 1f       	adc	r31, r25
    4308:	ee 0f       	add	r30, r30
    430a:	ff 1f       	adc	r31, r31
    430c:	e2 52       	subi	r30, 0x22	; 34
    430e:	fd 4e       	sbci	r31, 0xED	; 237
    4310:	23 81       	ldd	r18, Z+3	; 0x03
    4312:	21 11       	cpse	r18, r1
    4314:	20 c0       	rjmp	.+64     	; 0x4356 <_turn_on+0x5a>
    4316:	9c 01       	movw	r18, r24
    4318:	22 0f       	add	r18, r18
    431a:	33 1f       	adc	r19, r19
    431c:	f9 01       	movw	r30, r18
    431e:	e8 0f       	add	r30, r24
    4320:	f9 1f       	adc	r31, r25
    4322:	ee 0f       	add	r30, r30
    4324:	ff 1f       	adc	r31, r31
    4326:	e2 52       	subi	r30, 0x22	; 34
    4328:	fd 4e       	sbci	r31, 0xED	; 237
    432a:	a0 81       	ld	r26, Z
    432c:	b1 81       	ldd	r27, Z+1	; 0x01
    432e:	4c 91       	ld	r20, X
    4330:	f9 01       	movw	r30, r18
    4332:	e8 0f       	add	r30, r24
    4334:	f9 1f       	adc	r31, r25
    4336:	ee 0f       	add	r30, r30
    4338:	ff 1f       	adc	r31, r31
    433a:	e2 52       	subi	r30, 0x22	; 34
    433c:	fd 4e       	sbci	r31, 0xED	; 237
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	02 80       	ldd	r0, Z+2	; 0x02
    4344:	02 c0       	rjmp	.+4      	; 0x434a <_turn_on+0x4e>
    4346:	88 0f       	add	r24, r24
    4348:	99 1f       	adc	r25, r25
    434a:	0a 94       	dec	r0
    434c:	e2 f7       	brpl	.-8      	; 0x4346 <_turn_on+0x4a>
    434e:	80 95       	com	r24
    4350:	84 23       	and	r24, r20
    4352:	8c 93       	st	X, r24
    4354:	08 95       	ret
    4356:	fc 01       	movw	r30, r24
    4358:	ee 0f       	add	r30, r30
    435a:	ff 1f       	adc	r31, r31
    435c:	df 01       	movw	r26, r30
    435e:	a8 0f       	add	r26, r24
    4360:	b9 1f       	adc	r27, r25
    4362:	aa 0f       	add	r26, r26
    4364:	bb 1f       	adc	r27, r27
    4366:	a2 52       	subi	r26, 0x22	; 34
    4368:	bd 4e       	sbci	r27, 0xED	; 237
    436a:	0d 90       	ld	r0, X+
    436c:	bc 91       	ld	r27, X
    436e:	a0 2d       	mov	r26, r0
    4370:	2c 91       	ld	r18, X
    4372:	e8 0f       	add	r30, r24
    4374:	f9 1f       	adc	r31, r25
    4376:	ee 0f       	add	r30, r30
    4378:	ff 1f       	adc	r31, r31
    437a:	e2 52       	subi	r30, 0x22	; 34
    437c:	fd 4e       	sbci	r31, 0xED	; 237
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	02 80       	ldd	r0, Z+2	; 0x02
    4384:	02 c0       	rjmp	.+4      	; 0x438a <_turn_on+0x8e>
    4386:	88 0f       	add	r24, r24
    4388:	99 1f       	adc	r25, r25
    438a:	0a 94       	dec	r0
    438c:	e2 f7       	brpl	.-8      	; 0x4386 <_turn_on+0x8a>
    438e:	82 2b       	or	r24, r18
    4390:	8c 93       	st	X, r24
    4392:	08 95       	ret

00004394 <_hal_led_task>:
    4394:	cc 24       	eor	r12, r12
    4396:	c3 94       	inc	r12
    4398:	d1 2c       	mov	r13, r1
    439a:	68 94       	set
    439c:	bb 24       	eor	r11, r11
    439e:	b2 f8       	bld	r11, 2
    43a0:	ce ed       	ldi	r28, 0xDE	; 222
    43a2:	d2 e1       	ldi	r29, 0x12	; 18
    43a4:	10 e0       	ldi	r17, 0x00	; 0
    43a6:	8c 81       	ldd	r24, Y+4	; 0x04
    43a8:	81 30       	cpi	r24, 0x01	; 1
    43aa:	81 f0       	breq	.+32     	; 0x43cc <_hal_led_task+0x38>
    43ac:	18 f1       	brcs	.+70     	; 0x43f4 <_hal_led_task+0x60>
    43ae:	82 30       	cpi	r24, 0x02	; 2
    43b0:	61 f5       	brne	.+88     	; 0x440a <_hal_led_task+0x76>
    43b2:	e8 81       	ld	r30, Y
    43b4:	f9 81       	ldd	r31, Y+1	; 0x01
    43b6:	20 81       	ld	r18, Z
    43b8:	c6 01       	movw	r24, r12
    43ba:	0a 80       	ldd	r0, Y+2	; 0x02
    43bc:	02 c0       	rjmp	.+4      	; 0x43c2 <_hal_led_task+0x2e>
    43be:	88 0f       	add	r24, r24
    43c0:	99 1f       	adc	r25, r25
    43c2:	0a 94       	dec	r0
    43c4:	e2 f7       	brpl	.-8      	; 0x43be <_hal_led_task+0x2a>
    43c6:	82 27       	eor	r24, r18
    43c8:	80 83       	st	Z, r24
    43ca:	1f c0       	rjmp	.+62     	; 0x440a <_hal_led_task+0x76>
    43cc:	8d 81       	ldd	r24, Y+5	; 0x05
    43ce:	8f 5f       	subi	r24, 0xFF	; 255
    43d0:	8a 30       	cpi	r24, 0x0A	; 10
    43d2:	10 f4       	brcc	.+4      	; 0x43d8 <_hal_led_task+0x44>
    43d4:	8d 83       	std	Y+5, r24	; 0x05
    43d6:	19 c0       	rjmp	.+50     	; 0x440a <_hal_led_task+0x76>
    43d8:	1d 82       	std	Y+5, r1	; 0x05
    43da:	e8 81       	ld	r30, Y
    43dc:	f9 81       	ldd	r31, Y+1	; 0x01
    43de:	20 81       	ld	r18, Z
    43e0:	c6 01       	movw	r24, r12
    43e2:	0a 80       	ldd	r0, Y+2	; 0x02
    43e4:	02 c0       	rjmp	.+4      	; 0x43ea <_hal_led_task+0x56>
    43e6:	88 0f       	add	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	0a 94       	dec	r0
    43ec:	e2 f7       	brpl	.-8      	; 0x43e6 <_hal_led_task+0x52>
    43ee:	82 27       	eor	r24, r18
    43f0:	80 83       	st	Z, r24
    43f2:	0b c0       	rjmp	.+22     	; 0x440a <_hal_led_task+0x76>
    43f4:	0d 81       	ldd	r16, Y+5	; 0x05
    43f6:	00 23       	and	r16, r16
    43f8:	29 f0       	breq	.+10     	; 0x4404 <_hal_led_task+0x70>
    43fa:	81 2f       	mov	r24, r17
    43fc:	7f df       	rcall	.-258    	; 0x42fc <_turn_on>
    43fe:	01 50       	subi	r16, 0x01	; 1
    4400:	0d 83       	std	Y+5, r16	; 0x05
    4402:	03 c0       	rjmp	.+6      	; 0x440a <_hal_led_task+0x76>
    4404:	bc 82       	std	Y+4, r11	; 0x04
    4406:	81 2f       	mov	r24, r17
    4408:	2d df       	rcall	.-422    	; 0x4264 <_turn_off>
    440a:	1f 5f       	subi	r17, 0xFF	; 255
    440c:	26 96       	adiw	r28, 0x06	; 6
    440e:	14 30       	cpi	r17, 0x04	; 4
    4410:	51 f6       	brne	.-108    	; 0x43a6 <_hal_led_task+0x12>
    4412:	65 e0       	ldi	r22, 0x05	; 5
    4414:	70 e0       	ldi	r23, 0x00	; 0
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <vTaskDelay>
    441e:	c0 cf       	rjmp	.-128    	; 0x43a0 <_hal_led_task+0xc>

00004420 <status_leds_initialise>:
    4420:	ef 92       	push	r14
    4422:	ff 92       	push	r15
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	cf 93       	push	r28
    442a:	df 93       	push	r29
    442c:	08 2f       	mov	r16, r24
    442e:	80 e4       	ldi	r24, 0x40	; 64
    4430:	87 b9       	out	0x07, r24	; 7
    4432:	ce ed       	ldi	r28, 0xDE	; 222
    4434:	d2 e1       	ldi	r29, 0x12	; 18
    4436:	0f 2e       	mov	r0, r31
    4438:	f8 e2       	ldi	r31, 0x28	; 40
    443a:	ef 2e       	mov	r14, r31
    443c:	f1 2c       	mov	r15, r1
    443e:	f0 2d       	mov	r31, r0
    4440:	f9 82       	std	Y+1, r15	; 0x01
    4442:	e8 82       	st	Y, r14
    4444:	86 e0       	ldi	r24, 0x06	; 6
    4446:	8a 83       	std	Y+2, r24	; 0x02
    4448:	1b 82       	std	Y+3, r1	; 0x03
    444a:	14 e0       	ldi	r17, 0x04	; 4
    444c:	1c 83       	std	Y+4, r17	; 0x04
    444e:	80 e0       	ldi	r24, 0x00	; 0
    4450:	09 df       	rcall	.-494    	; 0x4264 <_turn_off>
    4452:	80 e8       	ldi	r24, 0x80	; 128
    4454:	87 b9       	out	0x07, r24	; 7
    4456:	ff 82       	std	Y+7, r15	; 0x07
    4458:	ee 82       	std	Y+6, r14	; 0x06
    445a:	87 e0       	ldi	r24, 0x07	; 7
    445c:	88 87       	std	Y+8, r24	; 0x08
    445e:	19 86       	std	Y+9, r1	; 0x09
    4460:	1a 87       	std	Y+10, r17	; 0x0a
    4462:	81 e0       	ldi	r24, 0x01	; 1
    4464:	ff de       	rcall	.-514    	; 0x4264 <_turn_off>
    4466:	80 e2       	ldi	r24, 0x20	; 32
    4468:	83 bb       	out	0x13, r24	; 19
    446a:	84 e3       	ldi	r24, 0x34	; 52
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	9d 87       	std	Y+13, r25	; 0x0d
    4470:	8c 87       	std	Y+12, r24	; 0x0c
    4472:	85 e0       	ldi	r24, 0x05	; 5
    4474:	8e 87       	std	Y+14, r24	; 0x0e
    4476:	1f 86       	std	Y+15, r1	; 0x0f
    4478:	18 8b       	std	Y+16, r17	; 0x10
    447a:	82 e0       	ldi	r24, 0x02	; 2
    447c:	f3 de       	rcall	.-538    	; 0x4264 <_turn_off>
    447e:	80 e1       	ldi	r24, 0x10	; 16
    4480:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4484:	82 e0       	ldi	r24, 0x02	; 2
    4486:	91 e0       	ldi	r25, 0x01	; 1
    4488:	9b 8b       	std	Y+19, r25	; 0x13
    448a:	8a 8b       	std	Y+18, r24	; 0x12
    448c:	1c 8b       	std	Y+20, r17	; 0x14
    448e:	1d 8a       	std	Y+21, r1	; 0x15
    4490:	1e 8b       	std	Y+22, r17	; 0x16
    4492:	83 e0       	ldi	r24, 0x03	; 3
    4494:	e7 de       	rcall	.-562    	; 0x4264 <_turn_off>
    4496:	e1 2c       	mov	r14, r1
    4498:	f1 2c       	mov	r15, r1
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 ec       	ldi	r20, 0xC0	; 192
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	6d e7       	ldi	r22, 0x7D	; 125
    44a4:	76 e0       	ldi	r23, 0x06	; 6
    44a6:	8a ec       	ldi	r24, 0xCA	; 202
    44a8:	91 e2       	ldi	r25, 0x21	; 33
    44aa:	0e 94 bf 0b 	call	0x177e	; 0x177e <xTaskCreate>
    44ae:	df 91       	pop	r29
    44b0:	cf 91       	pop	r28
    44b2:	1f 91       	pop	r17
    44b4:	0f 91       	pop	r16
    44b6:	ff 90       	pop	r15
    44b8:	ef 90       	pop	r14
    44ba:	08 95       	ret

000044bc <status_leds_slowBlink>:
    44bc:	cf 93       	push	r28
    44be:	df 93       	push	r29
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	fc 01       	movw	r30, r24
    44c4:	ee 0f       	add	r30, r30
    44c6:	ff 1f       	adc	r31, r31
    44c8:	df 01       	movw	r26, r30
    44ca:	a8 0f       	add	r26, r24
    44cc:	b9 1f       	adc	r27, r25
    44ce:	aa 0f       	add	r26, r26
    44d0:	bb 1f       	adc	r27, r27
    44d2:	a2 52       	subi	r26, 0x22	; 34
    44d4:	bd 4e       	sbci	r27, 0xED	; 237
    44d6:	cd 91       	ld	r28, X+
    44d8:	dc 91       	ld	r29, X
    44da:	11 97       	sbiw	r26, 0x01	; 1
    44dc:	48 81       	ld	r20, Y
    44de:	21 e0       	ldi	r18, 0x01	; 1
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	12 96       	adiw	r26, 0x02	; 2
    44e4:	0c 90       	ld	r0, X
    44e6:	12 97       	sbiw	r26, 0x02	; 2
    44e8:	02 c0       	rjmp	.+4      	; 0x44ee <status_leds_slowBlink+0x32>
    44ea:	22 0f       	add	r18, r18
    44ec:	33 1f       	adc	r19, r19
    44ee:	0a 94       	dec	r0
    44f0:	e2 f7       	brpl	.-8      	; 0x44ea <status_leds_slowBlink+0x2e>
    44f2:	24 27       	eor	r18, r20
    44f4:	28 83       	st	Y, r18
    44f6:	fd 01       	movw	r30, r26
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	84 83       	std	Z+4, r24	; 0x04
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	08 95       	ret

00004502 <status_leds_fastBlink>:
    4502:	cf 93       	push	r28
    4504:	df 93       	push	r29
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	fc 01       	movw	r30, r24
    450a:	ee 0f       	add	r30, r30
    450c:	ff 1f       	adc	r31, r31
    450e:	df 01       	movw	r26, r30
    4510:	a8 0f       	add	r26, r24
    4512:	b9 1f       	adc	r27, r25
    4514:	aa 0f       	add	r26, r26
    4516:	bb 1f       	adc	r27, r27
    4518:	a2 52       	subi	r26, 0x22	; 34
    451a:	bd 4e       	sbci	r27, 0xED	; 237
    451c:	cd 91       	ld	r28, X+
    451e:	dc 91       	ld	r29, X
    4520:	11 97       	sbiw	r26, 0x01	; 1
    4522:	48 81       	ld	r20, Y
    4524:	21 e0       	ldi	r18, 0x01	; 1
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	12 96       	adiw	r26, 0x02	; 2
    452a:	0c 90       	ld	r0, X
    452c:	12 97       	sbiw	r26, 0x02	; 2
    452e:	02 c0       	rjmp	.+4      	; 0x4534 <status_leds_fastBlink+0x32>
    4530:	22 0f       	add	r18, r18
    4532:	33 1f       	adc	r19, r19
    4534:	0a 94       	dec	r0
    4536:	e2 f7       	brpl	.-8      	; 0x4530 <status_leds_fastBlink+0x2e>
    4538:	24 27       	eor	r18, r20
    453a:	28 83       	st	Y, r18
    453c:	fd 01       	movw	r30, r26
    453e:	82 e0       	ldi	r24, 0x02	; 2
    4540:	84 83       	std	Z+4, r24	; 0x04
    4542:	df 91       	pop	r29
    4544:	cf 91       	pop	r28
    4546:	08 95       	ret

00004548 <status_leds_ledOn>:
    4548:	28 2f       	mov	r18, r24
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	f9 01       	movw	r30, r18
    454e:	ee 0f       	add	r30, r30
    4550:	ff 1f       	adc	r31, r31
    4552:	e2 0f       	add	r30, r18
    4554:	f3 1f       	adc	r31, r19
    4556:	ee 0f       	add	r30, r30
    4558:	ff 1f       	adc	r31, r31
    455a:	e2 52       	subi	r30, 0x22	; 34
    455c:	fd 4e       	sbci	r31, 0xED	; 237
    455e:	93 e0       	ldi	r25, 0x03	; 3
    4560:	94 83       	std	Z+4, r25	; 0x04
    4562:	cc ce       	rjmp	.-616    	; 0x42fc <_turn_on>
    4564:	08 95       	ret

00004566 <status_leds_ledOff>:
    4566:	28 2f       	mov	r18, r24
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	f9 01       	movw	r30, r18
    456c:	ee 0f       	add	r30, r30
    456e:	ff 1f       	adc	r31, r31
    4570:	e2 0f       	add	r30, r18
    4572:	f3 1f       	adc	r31, r19
    4574:	ee 0f       	add	r30, r30
    4576:	ff 1f       	adc	r31, r31
    4578:	e2 52       	subi	r30, 0x22	; 34
    457a:	fd 4e       	sbci	r31, 0xED	; 237
    457c:	94 e0       	ldi	r25, 0x04	; 4
    457e:	94 83       	std	Z+4, r25	; 0x04
    4580:	71 ce       	rjmp	.-798    	; 0x4264 <_turn_off>
    4582:	08 95       	ret

00004584 <status_leds_longPuls>:
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	fc 01       	movw	r30, r24
    4588:	ee 0f       	add	r30, r30
    458a:	ff 1f       	adc	r31, r31
    458c:	df 01       	movw	r26, r30
    458e:	a8 0f       	add	r26, r24
    4590:	b9 1f       	adc	r27, r25
    4592:	aa 0f       	add	r26, r26
    4594:	bb 1f       	adc	r27, r27
    4596:	a2 52       	subi	r26, 0x22	; 34
    4598:	bd 4e       	sbci	r27, 0xED	; 237
    459a:	24 e0       	ldi	r18, 0x04	; 4
    459c:	15 96       	adiw	r26, 0x05	; 5
    459e:	2c 93       	st	X, r18
    45a0:	15 97       	sbiw	r26, 0x05	; 5
    45a2:	fd 01       	movw	r30, r26
    45a4:	14 82       	std	Z+4, r1	; 0x04
    45a6:	08 95       	ret

000045a8 <status_leds_shortPuls>:
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	fc 01       	movw	r30, r24
    45ac:	ee 0f       	add	r30, r30
    45ae:	ff 1f       	adc	r31, r31
    45b0:	df 01       	movw	r26, r30
    45b2:	a8 0f       	add	r26, r24
    45b4:	b9 1f       	adc	r27, r25
    45b6:	aa 0f       	add	r26, r26
    45b8:	bb 1f       	adc	r27, r27
    45ba:	a2 52       	subi	r26, 0x22	; 34
    45bc:	bd 4e       	sbci	r27, 0xED	; 237
    45be:	21 e0       	ldi	r18, 0x01	; 1
    45c0:	15 96       	adiw	r26, 0x05	; 5
    45c2:	2c 93       	st	X, r18
    45c4:	15 97       	sbiw	r26, 0x05	; 5
    45c6:	fd 01       	movw	r30, r26
    45c8:	14 82       	std	Z+4, r1	; 0x04
    45ca:	08 95       	ret

000045cc <fifo_init>:
    45cc:	fc 01       	movw	r30, r24
    45ce:	41 11       	cpse	r20, r1
    45d0:	01 c0       	rjmp	.+2      	; 0x45d4 <fifo_init+0x8>
    45d2:	45 d3       	rcall	.+1674   	; 0x4c5e <abort>
    45d4:	84 2f       	mov	r24, r20
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	9c 01       	movw	r18, r24
    45da:	21 50       	subi	r18, 0x01	; 1
    45dc:	31 09       	sbc	r19, r1
    45de:	82 23       	and	r24, r18
    45e0:	93 23       	and	r25, r19
    45e2:	89 2b       	or	r24, r25
    45e4:	09 f0       	breq	.+2      	; 0x45e8 <fifo_init+0x1c>
    45e6:	3b d3       	rcall	.+1654   	; 0x4c5e <abort>
    45e8:	41 38       	cpi	r20, 0x81	; 129
    45ea:	08 f0       	brcs	.+2      	; 0x45ee <fifo_init+0x22>
    45ec:	38 d3       	rcall	.+1648   	; 0x4c5e <abort>
    45ee:	12 82       	std	Z+2, r1	; 0x02
    45f0:	13 82       	std	Z+3, r1	; 0x03
    45f2:	44 83       	std	Z+4, r20	; 0x04
    45f4:	44 0f       	add	r20, r20
    45f6:	41 50       	subi	r20, 0x01	; 1
    45f8:	45 83       	std	Z+5, r20	; 0x05
    45fa:	71 83       	std	Z+1, r23	; 0x01
    45fc:	60 83       	st	Z, r22
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	08 95       	ret

00004604 <__subsf3>:
    4604:	50 58       	subi	r21, 0x80	; 128

00004606 <__addsf3>:
    4606:	bb 27       	eor	r27, r27
    4608:	aa 27       	eor	r26, r26
    460a:	0e d0       	rcall	.+28     	; 0x4628 <__addsf3x>
    460c:	48 c1       	rjmp	.+656    	; 0x489e <__fp_round>
    460e:	39 d1       	rcall	.+626    	; 0x4882 <__fp_pscA>
    4610:	30 f0       	brcs	.+12     	; 0x461e <__addsf3+0x18>
    4612:	3e d1       	rcall	.+636    	; 0x4890 <__fp_pscB>
    4614:	20 f0       	brcs	.+8      	; 0x461e <__addsf3+0x18>
    4616:	31 f4       	brne	.+12     	; 0x4624 <__addsf3+0x1e>
    4618:	9f 3f       	cpi	r25, 0xFF	; 255
    461a:	11 f4       	brne	.+4      	; 0x4620 <__addsf3+0x1a>
    461c:	1e f4       	brtc	.+6      	; 0x4624 <__addsf3+0x1e>
    461e:	2e c1       	rjmp	.+604    	; 0x487c <__fp_nan>
    4620:	0e f4       	brtc	.+2      	; 0x4624 <__addsf3+0x1e>
    4622:	e0 95       	com	r30
    4624:	e7 fb       	bst	r30, 7
    4626:	24 c1       	rjmp	.+584    	; 0x4870 <__fp_inf>

00004628 <__addsf3x>:
    4628:	e9 2f       	mov	r30, r25
    462a:	4a d1       	rcall	.+660    	; 0x48c0 <__fp_split3>
    462c:	80 f3       	brcs	.-32     	; 0x460e <__addsf3+0x8>
    462e:	ba 17       	cp	r27, r26
    4630:	62 07       	cpc	r22, r18
    4632:	73 07       	cpc	r23, r19
    4634:	84 07       	cpc	r24, r20
    4636:	95 07       	cpc	r25, r21
    4638:	18 f0       	brcs	.+6      	; 0x4640 <__addsf3x+0x18>
    463a:	71 f4       	brne	.+28     	; 0x4658 <__addsf3x+0x30>
    463c:	9e f5       	brtc	.+102    	; 0x46a4 <__addsf3x+0x7c>
    463e:	62 c1       	rjmp	.+708    	; 0x4904 <__fp_zero>
    4640:	0e f4       	brtc	.+2      	; 0x4644 <__addsf3x+0x1c>
    4642:	e0 95       	com	r30
    4644:	0b 2e       	mov	r0, r27
    4646:	ba 2f       	mov	r27, r26
    4648:	a0 2d       	mov	r26, r0
    464a:	0b 01       	movw	r0, r22
    464c:	b9 01       	movw	r22, r18
    464e:	90 01       	movw	r18, r0
    4650:	0c 01       	movw	r0, r24
    4652:	ca 01       	movw	r24, r20
    4654:	a0 01       	movw	r20, r0
    4656:	11 24       	eor	r1, r1
    4658:	ff 27       	eor	r31, r31
    465a:	59 1b       	sub	r21, r25
    465c:	99 f0       	breq	.+38     	; 0x4684 <__addsf3x+0x5c>
    465e:	59 3f       	cpi	r21, 0xF9	; 249
    4660:	50 f4       	brcc	.+20     	; 0x4676 <__addsf3x+0x4e>
    4662:	50 3e       	cpi	r21, 0xE0	; 224
    4664:	68 f1       	brcs	.+90     	; 0x46c0 <__addsf3x+0x98>
    4666:	1a 16       	cp	r1, r26
    4668:	f0 40       	sbci	r31, 0x00	; 0
    466a:	a2 2f       	mov	r26, r18
    466c:	23 2f       	mov	r18, r19
    466e:	34 2f       	mov	r19, r20
    4670:	44 27       	eor	r20, r20
    4672:	58 5f       	subi	r21, 0xF8	; 248
    4674:	f3 cf       	rjmp	.-26     	; 0x465c <__addsf3x+0x34>
    4676:	46 95       	lsr	r20
    4678:	37 95       	ror	r19
    467a:	27 95       	ror	r18
    467c:	a7 95       	ror	r26
    467e:	f0 40       	sbci	r31, 0x00	; 0
    4680:	53 95       	inc	r21
    4682:	c9 f7       	brne	.-14     	; 0x4676 <__addsf3x+0x4e>
    4684:	7e f4       	brtc	.+30     	; 0x46a4 <__addsf3x+0x7c>
    4686:	1f 16       	cp	r1, r31
    4688:	ba 0b       	sbc	r27, r26
    468a:	62 0b       	sbc	r22, r18
    468c:	73 0b       	sbc	r23, r19
    468e:	84 0b       	sbc	r24, r20
    4690:	ba f0       	brmi	.+46     	; 0x46c0 <__addsf3x+0x98>
    4692:	91 50       	subi	r25, 0x01	; 1
    4694:	a1 f0       	breq	.+40     	; 0x46be <__addsf3x+0x96>
    4696:	ff 0f       	add	r31, r31
    4698:	bb 1f       	adc	r27, r27
    469a:	66 1f       	adc	r22, r22
    469c:	77 1f       	adc	r23, r23
    469e:	88 1f       	adc	r24, r24
    46a0:	c2 f7       	brpl	.-16     	; 0x4692 <__addsf3x+0x6a>
    46a2:	0e c0       	rjmp	.+28     	; 0x46c0 <__addsf3x+0x98>
    46a4:	ba 0f       	add	r27, r26
    46a6:	62 1f       	adc	r22, r18
    46a8:	73 1f       	adc	r23, r19
    46aa:	84 1f       	adc	r24, r20
    46ac:	48 f4       	brcc	.+18     	; 0x46c0 <__addsf3x+0x98>
    46ae:	87 95       	ror	r24
    46b0:	77 95       	ror	r23
    46b2:	67 95       	ror	r22
    46b4:	b7 95       	ror	r27
    46b6:	f7 95       	ror	r31
    46b8:	9e 3f       	cpi	r25, 0xFE	; 254
    46ba:	08 f0       	brcs	.+2      	; 0x46be <__addsf3x+0x96>
    46bc:	b3 cf       	rjmp	.-154    	; 0x4624 <__addsf3+0x1e>
    46be:	93 95       	inc	r25
    46c0:	88 0f       	add	r24, r24
    46c2:	08 f0       	brcs	.+2      	; 0x46c6 <__addsf3x+0x9e>
    46c4:	99 27       	eor	r25, r25
    46c6:	ee 0f       	add	r30, r30
    46c8:	97 95       	ror	r25
    46ca:	87 95       	ror	r24
    46cc:	08 95       	ret

000046ce <__divsf3>:
    46ce:	0c d0       	rcall	.+24     	; 0x46e8 <__divsf3x>
    46d0:	e6 c0       	rjmp	.+460    	; 0x489e <__fp_round>
    46d2:	de d0       	rcall	.+444    	; 0x4890 <__fp_pscB>
    46d4:	40 f0       	brcs	.+16     	; 0x46e6 <__divsf3+0x18>
    46d6:	d5 d0       	rcall	.+426    	; 0x4882 <__fp_pscA>
    46d8:	30 f0       	brcs	.+12     	; 0x46e6 <__divsf3+0x18>
    46da:	21 f4       	brne	.+8      	; 0x46e4 <__divsf3+0x16>
    46dc:	5f 3f       	cpi	r21, 0xFF	; 255
    46de:	19 f0       	breq	.+6      	; 0x46e6 <__divsf3+0x18>
    46e0:	c7 c0       	rjmp	.+398    	; 0x4870 <__fp_inf>
    46e2:	51 11       	cpse	r21, r1
    46e4:	10 c1       	rjmp	.+544    	; 0x4906 <__fp_szero>
    46e6:	ca c0       	rjmp	.+404    	; 0x487c <__fp_nan>

000046e8 <__divsf3x>:
    46e8:	eb d0       	rcall	.+470    	; 0x48c0 <__fp_split3>
    46ea:	98 f3       	brcs	.-26     	; 0x46d2 <__divsf3+0x4>

000046ec <__divsf3_pse>:
    46ec:	99 23       	and	r25, r25
    46ee:	c9 f3       	breq	.-14     	; 0x46e2 <__divsf3+0x14>
    46f0:	55 23       	and	r21, r21
    46f2:	b1 f3       	breq	.-20     	; 0x46e0 <__divsf3+0x12>
    46f4:	95 1b       	sub	r25, r21
    46f6:	55 0b       	sbc	r21, r21
    46f8:	bb 27       	eor	r27, r27
    46fa:	aa 27       	eor	r26, r26
    46fc:	62 17       	cp	r22, r18
    46fe:	73 07       	cpc	r23, r19
    4700:	84 07       	cpc	r24, r20
    4702:	38 f0       	brcs	.+14     	; 0x4712 <__divsf3_pse+0x26>
    4704:	9f 5f       	subi	r25, 0xFF	; 255
    4706:	5f 4f       	sbci	r21, 0xFF	; 255
    4708:	22 0f       	add	r18, r18
    470a:	33 1f       	adc	r19, r19
    470c:	44 1f       	adc	r20, r20
    470e:	aa 1f       	adc	r26, r26
    4710:	a9 f3       	breq	.-22     	; 0x46fc <__divsf3_pse+0x10>
    4712:	33 d0       	rcall	.+102    	; 0x477a <__divsf3_pse+0x8e>
    4714:	0e 2e       	mov	r0, r30
    4716:	3a f0       	brmi	.+14     	; 0x4726 <__divsf3_pse+0x3a>
    4718:	e0 e8       	ldi	r30, 0x80	; 128
    471a:	30 d0       	rcall	.+96     	; 0x477c <__divsf3_pse+0x90>
    471c:	91 50       	subi	r25, 0x01	; 1
    471e:	50 40       	sbci	r21, 0x00	; 0
    4720:	e6 95       	lsr	r30
    4722:	00 1c       	adc	r0, r0
    4724:	ca f7       	brpl	.-14     	; 0x4718 <__divsf3_pse+0x2c>
    4726:	29 d0       	rcall	.+82     	; 0x477a <__divsf3_pse+0x8e>
    4728:	fe 2f       	mov	r31, r30
    472a:	27 d0       	rcall	.+78     	; 0x477a <__divsf3_pse+0x8e>
    472c:	66 0f       	add	r22, r22
    472e:	77 1f       	adc	r23, r23
    4730:	88 1f       	adc	r24, r24
    4732:	bb 1f       	adc	r27, r27
    4734:	26 17       	cp	r18, r22
    4736:	37 07       	cpc	r19, r23
    4738:	48 07       	cpc	r20, r24
    473a:	ab 07       	cpc	r26, r27
    473c:	b0 e8       	ldi	r27, 0x80	; 128
    473e:	09 f0       	breq	.+2      	; 0x4742 <__divsf3_pse+0x56>
    4740:	bb 0b       	sbc	r27, r27
    4742:	80 2d       	mov	r24, r0
    4744:	bf 01       	movw	r22, r30
    4746:	ff 27       	eor	r31, r31
    4748:	93 58       	subi	r25, 0x83	; 131
    474a:	5f 4f       	sbci	r21, 0xFF	; 255
    474c:	2a f0       	brmi	.+10     	; 0x4758 <__divsf3_pse+0x6c>
    474e:	9e 3f       	cpi	r25, 0xFE	; 254
    4750:	51 05       	cpc	r21, r1
    4752:	68 f0       	brcs	.+26     	; 0x476e <__divsf3_pse+0x82>
    4754:	8d c0       	rjmp	.+282    	; 0x4870 <__fp_inf>
    4756:	d7 c0       	rjmp	.+430    	; 0x4906 <__fp_szero>
    4758:	5f 3f       	cpi	r21, 0xFF	; 255
    475a:	ec f3       	brlt	.-6      	; 0x4756 <__divsf3_pse+0x6a>
    475c:	98 3e       	cpi	r25, 0xE8	; 232
    475e:	dc f3       	brlt	.-10     	; 0x4756 <__divsf3_pse+0x6a>
    4760:	86 95       	lsr	r24
    4762:	77 95       	ror	r23
    4764:	67 95       	ror	r22
    4766:	b7 95       	ror	r27
    4768:	f7 95       	ror	r31
    476a:	9f 5f       	subi	r25, 0xFF	; 255
    476c:	c9 f7       	brne	.-14     	; 0x4760 <__divsf3_pse+0x74>
    476e:	88 0f       	add	r24, r24
    4770:	91 1d       	adc	r25, r1
    4772:	96 95       	lsr	r25
    4774:	87 95       	ror	r24
    4776:	97 f9       	bld	r25, 7
    4778:	08 95       	ret
    477a:	e1 e0       	ldi	r30, 0x01	; 1
    477c:	66 0f       	add	r22, r22
    477e:	77 1f       	adc	r23, r23
    4780:	88 1f       	adc	r24, r24
    4782:	bb 1f       	adc	r27, r27
    4784:	62 17       	cp	r22, r18
    4786:	73 07       	cpc	r23, r19
    4788:	84 07       	cpc	r24, r20
    478a:	ba 07       	cpc	r27, r26
    478c:	20 f0       	brcs	.+8      	; 0x4796 <__divsf3_pse+0xaa>
    478e:	62 1b       	sub	r22, r18
    4790:	73 0b       	sbc	r23, r19
    4792:	84 0b       	sbc	r24, r20
    4794:	ba 0b       	sbc	r27, r26
    4796:	ee 1f       	adc	r30, r30
    4798:	88 f7       	brcc	.-30     	; 0x477c <__divsf3_pse+0x90>
    479a:	e0 95       	com	r30
    479c:	08 95       	ret

0000479e <__fixunssfsi>:
    479e:	98 d0       	rcall	.+304    	; 0x48d0 <__fp_splitA>
    47a0:	88 f0       	brcs	.+34     	; 0x47c4 <__fixunssfsi+0x26>
    47a2:	9f 57       	subi	r25, 0x7F	; 127
    47a4:	90 f0       	brcs	.+36     	; 0x47ca <__fixunssfsi+0x2c>
    47a6:	b9 2f       	mov	r27, r25
    47a8:	99 27       	eor	r25, r25
    47aa:	b7 51       	subi	r27, 0x17	; 23
    47ac:	a0 f0       	brcs	.+40     	; 0x47d6 <__fixunssfsi+0x38>
    47ae:	d1 f0       	breq	.+52     	; 0x47e4 <__fixunssfsi+0x46>
    47b0:	66 0f       	add	r22, r22
    47b2:	77 1f       	adc	r23, r23
    47b4:	88 1f       	adc	r24, r24
    47b6:	99 1f       	adc	r25, r25
    47b8:	1a f0       	brmi	.+6      	; 0x47c0 <__fixunssfsi+0x22>
    47ba:	ba 95       	dec	r27
    47bc:	c9 f7       	brne	.-14     	; 0x47b0 <__fixunssfsi+0x12>
    47be:	12 c0       	rjmp	.+36     	; 0x47e4 <__fixunssfsi+0x46>
    47c0:	b1 30       	cpi	r27, 0x01	; 1
    47c2:	81 f0       	breq	.+32     	; 0x47e4 <__fixunssfsi+0x46>
    47c4:	9f d0       	rcall	.+318    	; 0x4904 <__fp_zero>
    47c6:	b1 e0       	ldi	r27, 0x01	; 1
    47c8:	08 95       	ret
    47ca:	9c c0       	rjmp	.+312    	; 0x4904 <__fp_zero>
    47cc:	67 2f       	mov	r22, r23
    47ce:	78 2f       	mov	r23, r24
    47d0:	88 27       	eor	r24, r24
    47d2:	b8 5f       	subi	r27, 0xF8	; 248
    47d4:	39 f0       	breq	.+14     	; 0x47e4 <__fixunssfsi+0x46>
    47d6:	b9 3f       	cpi	r27, 0xF9	; 249
    47d8:	cc f3       	brlt	.-14     	; 0x47cc <__fixunssfsi+0x2e>
    47da:	86 95       	lsr	r24
    47dc:	77 95       	ror	r23
    47de:	67 95       	ror	r22
    47e0:	b3 95       	inc	r27
    47e2:	d9 f7       	brne	.-10     	; 0x47da <__fixunssfsi+0x3c>
    47e4:	3e f4       	brtc	.+14     	; 0x47f4 <__fixunssfsi+0x56>
    47e6:	90 95       	com	r25
    47e8:	80 95       	com	r24
    47ea:	70 95       	com	r23
    47ec:	61 95       	neg	r22
    47ee:	7f 4f       	sbci	r23, 0xFF	; 255
    47f0:	8f 4f       	sbci	r24, 0xFF	; 255
    47f2:	9f 4f       	sbci	r25, 0xFF	; 255
    47f4:	08 95       	ret

000047f6 <__floatunsisf>:
    47f6:	e8 94       	clt
    47f8:	09 c0       	rjmp	.+18     	; 0x480c <__floatsisf+0x12>

000047fa <__floatsisf>:
    47fa:	97 fb       	bst	r25, 7
    47fc:	3e f4       	brtc	.+14     	; 0x480c <__floatsisf+0x12>
    47fe:	90 95       	com	r25
    4800:	80 95       	com	r24
    4802:	70 95       	com	r23
    4804:	61 95       	neg	r22
    4806:	7f 4f       	sbci	r23, 0xFF	; 255
    4808:	8f 4f       	sbci	r24, 0xFF	; 255
    480a:	9f 4f       	sbci	r25, 0xFF	; 255
    480c:	99 23       	and	r25, r25
    480e:	a9 f0       	breq	.+42     	; 0x483a <__floatsisf+0x40>
    4810:	f9 2f       	mov	r31, r25
    4812:	96 e9       	ldi	r25, 0x96	; 150
    4814:	bb 27       	eor	r27, r27
    4816:	93 95       	inc	r25
    4818:	f6 95       	lsr	r31
    481a:	87 95       	ror	r24
    481c:	77 95       	ror	r23
    481e:	67 95       	ror	r22
    4820:	b7 95       	ror	r27
    4822:	f1 11       	cpse	r31, r1
    4824:	f8 cf       	rjmp	.-16     	; 0x4816 <__floatsisf+0x1c>
    4826:	fa f4       	brpl	.+62     	; 0x4866 <__floatsisf+0x6c>
    4828:	bb 0f       	add	r27, r27
    482a:	11 f4       	brne	.+4      	; 0x4830 <__floatsisf+0x36>
    482c:	60 ff       	sbrs	r22, 0
    482e:	1b c0       	rjmp	.+54     	; 0x4866 <__floatsisf+0x6c>
    4830:	6f 5f       	subi	r22, 0xFF	; 255
    4832:	7f 4f       	sbci	r23, 0xFF	; 255
    4834:	8f 4f       	sbci	r24, 0xFF	; 255
    4836:	9f 4f       	sbci	r25, 0xFF	; 255
    4838:	16 c0       	rjmp	.+44     	; 0x4866 <__floatsisf+0x6c>
    483a:	88 23       	and	r24, r24
    483c:	11 f0       	breq	.+4      	; 0x4842 <__floatsisf+0x48>
    483e:	96 e9       	ldi	r25, 0x96	; 150
    4840:	11 c0       	rjmp	.+34     	; 0x4864 <__floatsisf+0x6a>
    4842:	77 23       	and	r23, r23
    4844:	21 f0       	breq	.+8      	; 0x484e <__floatsisf+0x54>
    4846:	9e e8       	ldi	r25, 0x8E	; 142
    4848:	87 2f       	mov	r24, r23
    484a:	76 2f       	mov	r23, r22
    484c:	05 c0       	rjmp	.+10     	; 0x4858 <__floatsisf+0x5e>
    484e:	66 23       	and	r22, r22
    4850:	71 f0       	breq	.+28     	; 0x486e <__floatsisf+0x74>
    4852:	96 e8       	ldi	r25, 0x86	; 134
    4854:	86 2f       	mov	r24, r22
    4856:	70 e0       	ldi	r23, 0x00	; 0
    4858:	60 e0       	ldi	r22, 0x00	; 0
    485a:	2a f0       	brmi	.+10     	; 0x4866 <__floatsisf+0x6c>
    485c:	9a 95       	dec	r25
    485e:	66 0f       	add	r22, r22
    4860:	77 1f       	adc	r23, r23
    4862:	88 1f       	adc	r24, r24
    4864:	da f7       	brpl	.-10     	; 0x485c <__floatsisf+0x62>
    4866:	88 0f       	add	r24, r24
    4868:	96 95       	lsr	r25
    486a:	87 95       	ror	r24
    486c:	97 f9       	bld	r25, 7
    486e:	08 95       	ret

00004870 <__fp_inf>:
    4870:	97 f9       	bld	r25, 7
    4872:	9f 67       	ori	r25, 0x7F	; 127
    4874:	80 e8       	ldi	r24, 0x80	; 128
    4876:	70 e0       	ldi	r23, 0x00	; 0
    4878:	60 e0       	ldi	r22, 0x00	; 0
    487a:	08 95       	ret

0000487c <__fp_nan>:
    487c:	9f ef       	ldi	r25, 0xFF	; 255
    487e:	80 ec       	ldi	r24, 0xC0	; 192
    4880:	08 95       	ret

00004882 <__fp_pscA>:
    4882:	00 24       	eor	r0, r0
    4884:	0a 94       	dec	r0
    4886:	16 16       	cp	r1, r22
    4888:	17 06       	cpc	r1, r23
    488a:	18 06       	cpc	r1, r24
    488c:	09 06       	cpc	r0, r25
    488e:	08 95       	ret

00004890 <__fp_pscB>:
    4890:	00 24       	eor	r0, r0
    4892:	0a 94       	dec	r0
    4894:	12 16       	cp	r1, r18
    4896:	13 06       	cpc	r1, r19
    4898:	14 06       	cpc	r1, r20
    489a:	05 06       	cpc	r0, r21
    489c:	08 95       	ret

0000489e <__fp_round>:
    489e:	09 2e       	mov	r0, r25
    48a0:	03 94       	inc	r0
    48a2:	00 0c       	add	r0, r0
    48a4:	11 f4       	brne	.+4      	; 0x48aa <__fp_round+0xc>
    48a6:	88 23       	and	r24, r24
    48a8:	52 f0       	brmi	.+20     	; 0x48be <__fp_round+0x20>
    48aa:	bb 0f       	add	r27, r27
    48ac:	40 f4       	brcc	.+16     	; 0x48be <__fp_round+0x20>
    48ae:	bf 2b       	or	r27, r31
    48b0:	11 f4       	brne	.+4      	; 0x48b6 <__fp_round+0x18>
    48b2:	60 ff       	sbrs	r22, 0
    48b4:	04 c0       	rjmp	.+8      	; 0x48be <__fp_round+0x20>
    48b6:	6f 5f       	subi	r22, 0xFF	; 255
    48b8:	7f 4f       	sbci	r23, 0xFF	; 255
    48ba:	8f 4f       	sbci	r24, 0xFF	; 255
    48bc:	9f 4f       	sbci	r25, 0xFF	; 255
    48be:	08 95       	ret

000048c0 <__fp_split3>:
    48c0:	57 fd       	sbrc	r21, 7
    48c2:	90 58       	subi	r25, 0x80	; 128
    48c4:	44 0f       	add	r20, r20
    48c6:	55 1f       	adc	r21, r21
    48c8:	59 f0       	breq	.+22     	; 0x48e0 <__fp_splitA+0x10>
    48ca:	5f 3f       	cpi	r21, 0xFF	; 255
    48cc:	71 f0       	breq	.+28     	; 0x48ea <__fp_splitA+0x1a>
    48ce:	47 95       	ror	r20

000048d0 <__fp_splitA>:
    48d0:	88 0f       	add	r24, r24
    48d2:	97 fb       	bst	r25, 7
    48d4:	99 1f       	adc	r25, r25
    48d6:	61 f0       	breq	.+24     	; 0x48f0 <__fp_splitA+0x20>
    48d8:	9f 3f       	cpi	r25, 0xFF	; 255
    48da:	79 f0       	breq	.+30     	; 0x48fa <__fp_splitA+0x2a>
    48dc:	87 95       	ror	r24
    48de:	08 95       	ret
    48e0:	12 16       	cp	r1, r18
    48e2:	13 06       	cpc	r1, r19
    48e4:	14 06       	cpc	r1, r20
    48e6:	55 1f       	adc	r21, r21
    48e8:	f2 cf       	rjmp	.-28     	; 0x48ce <__fp_split3+0xe>
    48ea:	46 95       	lsr	r20
    48ec:	f1 df       	rcall	.-30     	; 0x48d0 <__fp_splitA>
    48ee:	08 c0       	rjmp	.+16     	; 0x4900 <__fp_splitA+0x30>
    48f0:	16 16       	cp	r1, r22
    48f2:	17 06       	cpc	r1, r23
    48f4:	18 06       	cpc	r1, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	f1 cf       	rjmp	.-30     	; 0x48dc <__fp_splitA+0xc>
    48fa:	86 95       	lsr	r24
    48fc:	71 05       	cpc	r23, r1
    48fe:	61 05       	cpc	r22, r1
    4900:	08 94       	sec
    4902:	08 95       	ret

00004904 <__fp_zero>:
    4904:	e8 94       	clt

00004906 <__fp_szero>:
    4906:	bb 27       	eor	r27, r27
    4908:	66 27       	eor	r22, r22
    490a:	77 27       	eor	r23, r23
    490c:	cb 01       	movw	r24, r22
    490e:	97 f9       	bld	r25, 7
    4910:	08 95       	ret

00004912 <__mulsf3>:
    4912:	0b d0       	rcall	.+22     	; 0x492a <__mulsf3x>
    4914:	c4 cf       	rjmp	.-120    	; 0x489e <__fp_round>
    4916:	b5 df       	rcall	.-150    	; 0x4882 <__fp_pscA>
    4918:	28 f0       	brcs	.+10     	; 0x4924 <__mulsf3+0x12>
    491a:	ba df       	rcall	.-140    	; 0x4890 <__fp_pscB>
    491c:	18 f0       	brcs	.+6      	; 0x4924 <__mulsf3+0x12>
    491e:	95 23       	and	r25, r21
    4920:	09 f0       	breq	.+2      	; 0x4924 <__mulsf3+0x12>
    4922:	a6 cf       	rjmp	.-180    	; 0x4870 <__fp_inf>
    4924:	ab cf       	rjmp	.-170    	; 0x487c <__fp_nan>
    4926:	11 24       	eor	r1, r1
    4928:	ee cf       	rjmp	.-36     	; 0x4906 <__fp_szero>

0000492a <__mulsf3x>:
    492a:	ca df       	rcall	.-108    	; 0x48c0 <__fp_split3>
    492c:	a0 f3       	brcs	.-24     	; 0x4916 <__mulsf3+0x4>

0000492e <__mulsf3_pse>:
    492e:	95 9f       	mul	r25, r21
    4930:	d1 f3       	breq	.-12     	; 0x4926 <__mulsf3+0x14>
    4932:	95 0f       	add	r25, r21
    4934:	50 e0       	ldi	r21, 0x00	; 0
    4936:	55 1f       	adc	r21, r21
    4938:	62 9f       	mul	r22, r18
    493a:	f0 01       	movw	r30, r0
    493c:	72 9f       	mul	r23, r18
    493e:	bb 27       	eor	r27, r27
    4940:	f0 0d       	add	r31, r0
    4942:	b1 1d       	adc	r27, r1
    4944:	63 9f       	mul	r22, r19
    4946:	aa 27       	eor	r26, r26
    4948:	f0 0d       	add	r31, r0
    494a:	b1 1d       	adc	r27, r1
    494c:	aa 1f       	adc	r26, r26
    494e:	64 9f       	mul	r22, r20
    4950:	66 27       	eor	r22, r22
    4952:	b0 0d       	add	r27, r0
    4954:	a1 1d       	adc	r26, r1
    4956:	66 1f       	adc	r22, r22
    4958:	82 9f       	mul	r24, r18
    495a:	22 27       	eor	r18, r18
    495c:	b0 0d       	add	r27, r0
    495e:	a1 1d       	adc	r26, r1
    4960:	62 1f       	adc	r22, r18
    4962:	73 9f       	mul	r23, r19
    4964:	b0 0d       	add	r27, r0
    4966:	a1 1d       	adc	r26, r1
    4968:	62 1f       	adc	r22, r18
    496a:	83 9f       	mul	r24, r19
    496c:	a0 0d       	add	r26, r0
    496e:	61 1d       	adc	r22, r1
    4970:	22 1f       	adc	r18, r18
    4972:	74 9f       	mul	r23, r20
    4974:	33 27       	eor	r19, r19
    4976:	a0 0d       	add	r26, r0
    4978:	61 1d       	adc	r22, r1
    497a:	23 1f       	adc	r18, r19
    497c:	84 9f       	mul	r24, r20
    497e:	60 0d       	add	r22, r0
    4980:	21 1d       	adc	r18, r1
    4982:	82 2f       	mov	r24, r18
    4984:	76 2f       	mov	r23, r22
    4986:	6a 2f       	mov	r22, r26
    4988:	11 24       	eor	r1, r1
    498a:	9f 57       	subi	r25, 0x7F	; 127
    498c:	50 40       	sbci	r21, 0x00	; 0
    498e:	8a f0       	brmi	.+34     	; 0x49b2 <__mulsf3_pse+0x84>
    4990:	e1 f0       	breq	.+56     	; 0x49ca <__mulsf3_pse+0x9c>
    4992:	88 23       	and	r24, r24
    4994:	4a f0       	brmi	.+18     	; 0x49a8 <__mulsf3_pse+0x7a>
    4996:	ee 0f       	add	r30, r30
    4998:	ff 1f       	adc	r31, r31
    499a:	bb 1f       	adc	r27, r27
    499c:	66 1f       	adc	r22, r22
    499e:	77 1f       	adc	r23, r23
    49a0:	88 1f       	adc	r24, r24
    49a2:	91 50       	subi	r25, 0x01	; 1
    49a4:	50 40       	sbci	r21, 0x00	; 0
    49a6:	a9 f7       	brne	.-22     	; 0x4992 <__mulsf3_pse+0x64>
    49a8:	9e 3f       	cpi	r25, 0xFE	; 254
    49aa:	51 05       	cpc	r21, r1
    49ac:	70 f0       	brcs	.+28     	; 0x49ca <__mulsf3_pse+0x9c>
    49ae:	60 cf       	rjmp	.-320    	; 0x4870 <__fp_inf>
    49b0:	aa cf       	rjmp	.-172    	; 0x4906 <__fp_szero>
    49b2:	5f 3f       	cpi	r21, 0xFF	; 255
    49b4:	ec f3       	brlt	.-6      	; 0x49b0 <__mulsf3_pse+0x82>
    49b6:	98 3e       	cpi	r25, 0xE8	; 232
    49b8:	dc f3       	brlt	.-10     	; 0x49b0 <__mulsf3_pse+0x82>
    49ba:	86 95       	lsr	r24
    49bc:	77 95       	ror	r23
    49be:	67 95       	ror	r22
    49c0:	b7 95       	ror	r27
    49c2:	f7 95       	ror	r31
    49c4:	e7 95       	ror	r30
    49c6:	9f 5f       	subi	r25, 0xFF	; 255
    49c8:	c1 f7       	brne	.-16     	; 0x49ba <__mulsf3_pse+0x8c>
    49ca:	fe 2b       	or	r31, r30
    49cc:	88 0f       	add	r24, r24
    49ce:	91 1d       	adc	r25, r1
    49d0:	96 95       	lsr	r25
    49d2:	87 95       	ror	r24
    49d4:	97 f9       	bld	r25, 7
    49d6:	08 95       	ret

000049d8 <__tablejump2__>:
    49d8:	ee 0f       	add	r30, r30
    49da:	ff 1f       	adc	r31, r31
    49dc:	88 1f       	adc	r24, r24
    49de:	8b bf       	out	0x3b, r24	; 59
    49e0:	07 90       	elpm	r0, Z+
    49e2:	f6 91       	elpm	r31, Z
    49e4:	e0 2d       	mov	r30, r0
    49e6:	19 94       	eijmp

000049e8 <calloc>:
    49e8:	0f 93       	push	r16
    49ea:	1f 93       	push	r17
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	86 9f       	mul	r24, r22
    49f2:	80 01       	movw	r16, r0
    49f4:	87 9f       	mul	r24, r23
    49f6:	10 0d       	add	r17, r0
    49f8:	96 9f       	mul	r25, r22
    49fa:	10 0d       	add	r17, r0
    49fc:	11 24       	eor	r1, r1
    49fe:	c8 01       	movw	r24, r16
    4a00:	0d d0       	rcall	.+26     	; 0x4a1c <malloc>
    4a02:	ec 01       	movw	r28, r24
    4a04:	00 97       	sbiw	r24, 0x00	; 0
    4a06:	21 f0       	breq	.+8      	; 0x4a10 <calloc+0x28>
    4a08:	a8 01       	movw	r20, r16
    4a0a:	60 e0       	ldi	r22, 0x00	; 0
    4a0c:	70 e0       	ldi	r23, 0x00	; 0
    4a0e:	34 d1       	rcall	.+616    	; 0x4c78 <memset>
    4a10:	ce 01       	movw	r24, r28
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	1f 91       	pop	r17
    4a18:	0f 91       	pop	r16
    4a1a:	08 95       	ret

00004a1c <malloc>:
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	82 30       	cpi	r24, 0x02	; 2
    4a26:	91 05       	cpc	r25, r1
    4a28:	10 f4       	brcc	.+4      	; 0x4a2e <malloc+0x12>
    4a2a:	82 e0       	ldi	r24, 0x02	; 2
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	e0 91 fa 12 	lds	r30, 0x12FA	; 0x8012fa <__flp>
    4a32:	f0 91 fb 12 	lds	r31, 0x12FB	; 0x8012fb <__flp+0x1>
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	a0 e0       	ldi	r26, 0x00	; 0
    4a3c:	b0 e0       	ldi	r27, 0x00	; 0
    4a3e:	30 97       	sbiw	r30, 0x00	; 0
    4a40:	19 f1       	breq	.+70     	; 0x4a88 <malloc+0x6c>
    4a42:	40 81       	ld	r20, Z
    4a44:	51 81       	ldd	r21, Z+1	; 0x01
    4a46:	02 81       	ldd	r16, Z+2	; 0x02
    4a48:	13 81       	ldd	r17, Z+3	; 0x03
    4a4a:	48 17       	cp	r20, r24
    4a4c:	59 07       	cpc	r21, r25
    4a4e:	c8 f0       	brcs	.+50     	; 0x4a82 <malloc+0x66>
    4a50:	84 17       	cp	r24, r20
    4a52:	95 07       	cpc	r25, r21
    4a54:	69 f4       	brne	.+26     	; 0x4a70 <malloc+0x54>
    4a56:	10 97       	sbiw	r26, 0x00	; 0
    4a58:	31 f0       	breq	.+12     	; 0x4a66 <malloc+0x4a>
    4a5a:	12 96       	adiw	r26, 0x02	; 2
    4a5c:	0c 93       	st	X, r16
    4a5e:	12 97       	sbiw	r26, 0x02	; 2
    4a60:	13 96       	adiw	r26, 0x03	; 3
    4a62:	1c 93       	st	X, r17
    4a64:	27 c0       	rjmp	.+78     	; 0x4ab4 <malloc+0x98>
    4a66:	00 93 fa 12 	sts	0x12FA, r16	; 0x8012fa <__flp>
    4a6a:	10 93 fb 12 	sts	0x12FB, r17	; 0x8012fb <__flp+0x1>
    4a6e:	22 c0       	rjmp	.+68     	; 0x4ab4 <malloc+0x98>
    4a70:	21 15       	cp	r18, r1
    4a72:	31 05       	cpc	r19, r1
    4a74:	19 f0       	breq	.+6      	; 0x4a7c <malloc+0x60>
    4a76:	42 17       	cp	r20, r18
    4a78:	53 07       	cpc	r21, r19
    4a7a:	18 f4       	brcc	.+6      	; 0x4a82 <malloc+0x66>
    4a7c:	9a 01       	movw	r18, r20
    4a7e:	bd 01       	movw	r22, r26
    4a80:	ef 01       	movw	r28, r30
    4a82:	df 01       	movw	r26, r30
    4a84:	f8 01       	movw	r30, r16
    4a86:	db cf       	rjmp	.-74     	; 0x4a3e <malloc+0x22>
    4a88:	21 15       	cp	r18, r1
    4a8a:	31 05       	cpc	r19, r1
    4a8c:	f9 f0       	breq	.+62     	; 0x4acc <malloc+0xb0>
    4a8e:	28 1b       	sub	r18, r24
    4a90:	39 0b       	sbc	r19, r25
    4a92:	24 30       	cpi	r18, 0x04	; 4
    4a94:	31 05       	cpc	r19, r1
    4a96:	80 f4       	brcc	.+32     	; 0x4ab8 <malloc+0x9c>
    4a98:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9c:	61 15       	cp	r22, r1
    4a9e:	71 05       	cpc	r23, r1
    4aa0:	21 f0       	breq	.+8      	; 0x4aaa <malloc+0x8e>
    4aa2:	fb 01       	movw	r30, r22
    4aa4:	93 83       	std	Z+3, r25	; 0x03
    4aa6:	82 83       	std	Z+2, r24	; 0x02
    4aa8:	04 c0       	rjmp	.+8      	; 0x4ab2 <malloc+0x96>
    4aaa:	90 93 fb 12 	sts	0x12FB, r25	; 0x8012fb <__flp+0x1>
    4aae:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <__flp>
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	32 96       	adiw	r30, 0x02	; 2
    4ab6:	44 c0       	rjmp	.+136    	; 0x4b40 <malloc+0x124>
    4ab8:	fe 01       	movw	r30, r28
    4aba:	e2 0f       	add	r30, r18
    4abc:	f3 1f       	adc	r31, r19
    4abe:	81 93       	st	Z+, r24
    4ac0:	91 93       	st	Z+, r25
    4ac2:	22 50       	subi	r18, 0x02	; 2
    4ac4:	31 09       	sbc	r19, r1
    4ac6:	39 83       	std	Y+1, r19	; 0x01
    4ac8:	28 83       	st	Y, r18
    4aca:	3a c0       	rjmp	.+116    	; 0x4b40 <malloc+0x124>
    4acc:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    4ad0:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    4ad4:	23 2b       	or	r18, r19
    4ad6:	41 f4       	brne	.+16     	; 0x4ae8 <malloc+0xcc>
    4ad8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4adc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4ae0:	30 93 f9 12 	sts	0x12F9, r19	; 0x8012f9 <__brkval+0x1>
    4ae4:	20 93 f8 12 	sts	0x12F8, r18	; 0x8012f8 <__brkval>
    4ae8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4aec:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4af0:	21 15       	cp	r18, r1
    4af2:	31 05       	cpc	r19, r1
    4af4:	41 f4       	brne	.+16     	; 0x4b06 <malloc+0xea>
    4af6:	2d b7       	in	r18, 0x3d	; 61
    4af8:	3e b7       	in	r19, 0x3e	; 62
    4afa:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4afe:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4b02:	24 1b       	sub	r18, r20
    4b04:	35 0b       	sbc	r19, r21
    4b06:	e0 91 f8 12 	lds	r30, 0x12F8	; 0x8012f8 <__brkval>
    4b0a:	f0 91 f9 12 	lds	r31, 0x12F9	; 0x8012f9 <__brkval+0x1>
    4b0e:	e2 17       	cp	r30, r18
    4b10:	f3 07       	cpc	r31, r19
    4b12:	a0 f4       	brcc	.+40     	; 0x4b3c <malloc+0x120>
    4b14:	2e 1b       	sub	r18, r30
    4b16:	3f 0b       	sbc	r19, r31
    4b18:	28 17       	cp	r18, r24
    4b1a:	39 07       	cpc	r19, r25
    4b1c:	78 f0       	brcs	.+30     	; 0x4b3c <malloc+0x120>
    4b1e:	ac 01       	movw	r20, r24
    4b20:	4e 5f       	subi	r20, 0xFE	; 254
    4b22:	5f 4f       	sbci	r21, 0xFF	; 255
    4b24:	24 17       	cp	r18, r20
    4b26:	35 07       	cpc	r19, r21
    4b28:	48 f0       	brcs	.+18     	; 0x4b3c <malloc+0x120>
    4b2a:	4e 0f       	add	r20, r30
    4b2c:	5f 1f       	adc	r21, r31
    4b2e:	50 93 f9 12 	sts	0x12F9, r21	; 0x8012f9 <__brkval+0x1>
    4b32:	40 93 f8 12 	sts	0x12F8, r20	; 0x8012f8 <__brkval>
    4b36:	81 93       	st	Z+, r24
    4b38:	91 93       	st	Z+, r25
    4b3a:	02 c0       	rjmp	.+4      	; 0x4b40 <malloc+0x124>
    4b3c:	e0 e0       	ldi	r30, 0x00	; 0
    4b3e:	f0 e0       	ldi	r31, 0x00	; 0
    4b40:	cf 01       	movw	r24, r30
    4b42:	df 91       	pop	r29
    4b44:	cf 91       	pop	r28
    4b46:	1f 91       	pop	r17
    4b48:	0f 91       	pop	r16
    4b4a:	08 95       	ret

00004b4c <free>:
    4b4c:	cf 93       	push	r28
    4b4e:	df 93       	push	r29
    4b50:	00 97       	sbiw	r24, 0x00	; 0
    4b52:	09 f4       	brne	.+2      	; 0x4b56 <free+0xa>
    4b54:	81 c0       	rjmp	.+258    	; 0x4c58 <free+0x10c>
    4b56:	fc 01       	movw	r30, r24
    4b58:	32 97       	sbiw	r30, 0x02	; 2
    4b5a:	13 82       	std	Z+3, r1	; 0x03
    4b5c:	12 82       	std	Z+2, r1	; 0x02
    4b5e:	a0 91 fa 12 	lds	r26, 0x12FA	; 0x8012fa <__flp>
    4b62:	b0 91 fb 12 	lds	r27, 0x12FB	; 0x8012fb <__flp+0x1>
    4b66:	10 97       	sbiw	r26, 0x00	; 0
    4b68:	81 f4       	brne	.+32     	; 0x4b8a <free+0x3e>
    4b6a:	20 81       	ld	r18, Z
    4b6c:	31 81       	ldd	r19, Z+1	; 0x01
    4b6e:	82 0f       	add	r24, r18
    4b70:	93 1f       	adc	r25, r19
    4b72:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    4b76:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    4b7a:	28 17       	cp	r18, r24
    4b7c:	39 07       	cpc	r19, r25
    4b7e:	51 f5       	brne	.+84     	; 0x4bd4 <free+0x88>
    4b80:	f0 93 f9 12 	sts	0x12F9, r31	; 0x8012f9 <__brkval+0x1>
    4b84:	e0 93 f8 12 	sts	0x12F8, r30	; 0x8012f8 <__brkval>
    4b88:	67 c0       	rjmp	.+206    	; 0x4c58 <free+0x10c>
    4b8a:	ed 01       	movw	r28, r26
    4b8c:	20 e0       	ldi	r18, 0x00	; 0
    4b8e:	30 e0       	ldi	r19, 0x00	; 0
    4b90:	ce 17       	cp	r28, r30
    4b92:	df 07       	cpc	r29, r31
    4b94:	40 f4       	brcc	.+16     	; 0x4ba6 <free+0x5a>
    4b96:	4a 81       	ldd	r20, Y+2	; 0x02
    4b98:	5b 81       	ldd	r21, Y+3	; 0x03
    4b9a:	9e 01       	movw	r18, r28
    4b9c:	41 15       	cp	r20, r1
    4b9e:	51 05       	cpc	r21, r1
    4ba0:	f1 f0       	breq	.+60     	; 0x4bde <free+0x92>
    4ba2:	ea 01       	movw	r28, r20
    4ba4:	f5 cf       	rjmp	.-22     	; 0x4b90 <free+0x44>
    4ba6:	d3 83       	std	Z+3, r29	; 0x03
    4ba8:	c2 83       	std	Z+2, r28	; 0x02
    4baa:	40 81       	ld	r20, Z
    4bac:	51 81       	ldd	r21, Z+1	; 0x01
    4bae:	84 0f       	add	r24, r20
    4bb0:	95 1f       	adc	r25, r21
    4bb2:	c8 17       	cp	r28, r24
    4bb4:	d9 07       	cpc	r29, r25
    4bb6:	59 f4       	brne	.+22     	; 0x4bce <free+0x82>
    4bb8:	88 81       	ld	r24, Y
    4bba:	99 81       	ldd	r25, Y+1	; 0x01
    4bbc:	84 0f       	add	r24, r20
    4bbe:	95 1f       	adc	r25, r21
    4bc0:	02 96       	adiw	r24, 0x02	; 2
    4bc2:	91 83       	std	Z+1, r25	; 0x01
    4bc4:	80 83       	st	Z, r24
    4bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bca:	93 83       	std	Z+3, r25	; 0x03
    4bcc:	82 83       	std	Z+2, r24	; 0x02
    4bce:	21 15       	cp	r18, r1
    4bd0:	31 05       	cpc	r19, r1
    4bd2:	29 f4       	brne	.+10     	; 0x4bde <free+0x92>
    4bd4:	f0 93 fb 12 	sts	0x12FB, r31	; 0x8012fb <__flp+0x1>
    4bd8:	e0 93 fa 12 	sts	0x12FA, r30	; 0x8012fa <__flp>
    4bdc:	3d c0       	rjmp	.+122    	; 0x4c58 <free+0x10c>
    4bde:	e9 01       	movw	r28, r18
    4be0:	fb 83       	std	Y+3, r31	; 0x03
    4be2:	ea 83       	std	Y+2, r30	; 0x02
    4be4:	49 91       	ld	r20, Y+
    4be6:	59 91       	ld	r21, Y+
    4be8:	c4 0f       	add	r28, r20
    4bea:	d5 1f       	adc	r29, r21
    4bec:	ec 17       	cp	r30, r28
    4bee:	fd 07       	cpc	r31, r29
    4bf0:	61 f4       	brne	.+24     	; 0x4c0a <free+0xbe>
    4bf2:	80 81       	ld	r24, Z
    4bf4:	91 81       	ldd	r25, Z+1	; 0x01
    4bf6:	84 0f       	add	r24, r20
    4bf8:	95 1f       	adc	r25, r21
    4bfa:	02 96       	adiw	r24, 0x02	; 2
    4bfc:	e9 01       	movw	r28, r18
    4bfe:	99 83       	std	Y+1, r25	; 0x01
    4c00:	88 83       	st	Y, r24
    4c02:	82 81       	ldd	r24, Z+2	; 0x02
    4c04:	93 81       	ldd	r25, Z+3	; 0x03
    4c06:	9b 83       	std	Y+3, r25	; 0x03
    4c08:	8a 83       	std	Y+2, r24	; 0x02
    4c0a:	e0 e0       	ldi	r30, 0x00	; 0
    4c0c:	f0 e0       	ldi	r31, 0x00	; 0
    4c0e:	12 96       	adiw	r26, 0x02	; 2
    4c10:	8d 91       	ld	r24, X+
    4c12:	9c 91       	ld	r25, X
    4c14:	13 97       	sbiw	r26, 0x03	; 3
    4c16:	00 97       	sbiw	r24, 0x00	; 0
    4c18:	19 f0       	breq	.+6      	; 0x4c20 <free+0xd4>
    4c1a:	fd 01       	movw	r30, r26
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	f7 cf       	rjmp	.-18     	; 0x4c0e <free+0xc2>
    4c20:	8d 91       	ld	r24, X+
    4c22:	9c 91       	ld	r25, X
    4c24:	11 97       	sbiw	r26, 0x01	; 1
    4c26:	9d 01       	movw	r18, r26
    4c28:	2e 5f       	subi	r18, 0xFE	; 254
    4c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c2c:	82 0f       	add	r24, r18
    4c2e:	93 1f       	adc	r25, r19
    4c30:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    4c34:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    4c38:	28 17       	cp	r18, r24
    4c3a:	39 07       	cpc	r19, r25
    4c3c:	69 f4       	brne	.+26     	; 0x4c58 <free+0x10c>
    4c3e:	30 97       	sbiw	r30, 0x00	; 0
    4c40:	29 f4       	brne	.+10     	; 0x4c4c <free+0x100>
    4c42:	10 92 fb 12 	sts	0x12FB, r1	; 0x8012fb <__flp+0x1>
    4c46:	10 92 fa 12 	sts	0x12FA, r1	; 0x8012fa <__flp>
    4c4a:	02 c0       	rjmp	.+4      	; 0x4c50 <free+0x104>
    4c4c:	13 82       	std	Z+3, r1	; 0x03
    4c4e:	12 82       	std	Z+2, r1	; 0x02
    4c50:	b0 93 f9 12 	sts	0x12F9, r27	; 0x8012f9 <__brkval+0x1>
    4c54:	a0 93 f8 12 	sts	0x12F8, r26	; 0x8012f8 <__brkval>
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	08 95       	ret

00004c5e <abort>:
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	f8 94       	cli
    4c64:	7d c3       	rjmp	.+1786   	; 0x5360 <_exit>

00004c66 <memcpy>:
    4c66:	fb 01       	movw	r30, r22
    4c68:	dc 01       	movw	r26, r24
    4c6a:	02 c0       	rjmp	.+4      	; 0x4c70 <memcpy+0xa>
    4c6c:	01 90       	ld	r0, Z+
    4c6e:	0d 92       	st	X+, r0
    4c70:	41 50       	subi	r20, 0x01	; 1
    4c72:	50 40       	sbci	r21, 0x00	; 0
    4c74:	d8 f7       	brcc	.-10     	; 0x4c6c <memcpy+0x6>
    4c76:	08 95       	ret

00004c78 <memset>:
    4c78:	dc 01       	movw	r26, r24
    4c7a:	01 c0       	rjmp	.+2      	; 0x4c7e <memset+0x6>
    4c7c:	6d 93       	st	X+, r22
    4c7e:	41 50       	subi	r20, 0x01	; 1
    4c80:	50 40       	sbci	r21, 0x00	; 0
    4c82:	e0 f7       	brcc	.-8      	; 0x4c7c <memset+0x4>
    4c84:	08 95       	ret

00004c86 <strcasestr>:
    4c86:	fb 01       	movw	r30, r22
    4c88:	51 91       	ld	r21, Z+
    4c8a:	55 23       	and	r21, r21
    4c8c:	b1 f0       	breq	.+44     	; 0x4cba <strcasestr+0x34>
    4c8e:	bf 01       	movw	r22, r30
    4c90:	dc 01       	movw	r26, r24
    4c92:	05 2e       	mov	r0, r21
    4c94:	4d 91       	ld	r20, X+
    4c96:	44 23       	and	r20, r20
    4c98:	69 f0       	breq	.+26     	; 0x4cb4 <strcasestr+0x2e>
    4c9a:	10 d0       	rcall	.+32     	; 0x4cbc <strcasestr+0x36>
    4c9c:	d9 f7       	brne	.-10     	; 0x4c94 <strcasestr+0xe>
    4c9e:	cd 01       	movw	r24, r26
    4ca0:	01 90       	ld	r0, Z+
    4ca2:	00 20       	and	r0, r0
    4ca4:	49 f0       	breq	.+18     	; 0x4cb8 <strcasestr+0x32>
    4ca6:	4d 91       	ld	r20, X+
    4ca8:	41 11       	cpse	r20, r1
    4caa:	08 d0       	rcall	.+16     	; 0x4cbc <strcasestr+0x36>
    4cac:	c9 f3       	breq	.-14     	; 0x4ca0 <strcasestr+0x1a>
    4cae:	fb 01       	movw	r30, r22
    4cb0:	41 11       	cpse	r20, r1
    4cb2:	ee cf       	rjmp	.-36     	; 0x4c90 <strcasestr+0xa>
    4cb4:	81 e0       	ldi	r24, 0x01	; 1
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	01 97       	sbiw	r24, 0x01	; 1
    4cba:	08 95       	ret
    4cbc:	40 25       	eor	r20, r0
    4cbe:	39 f0       	breq	.+14     	; 0x4cce <strcasestr+0x48>
    4cc0:	40 32       	cpi	r20, 0x20	; 32
    4cc2:	29 f4       	brne	.+10     	; 0x4cce <strcasestr+0x48>
    4cc4:	40 29       	or	r20, r0
    4cc6:	4b 57       	subi	r20, 0x7B	; 123
    4cc8:	46 5e       	subi	r20, 0xE6	; 230
    4cca:	08 f0       	brcs	.+2      	; 0x4cce <strcasestr+0x48>
    4ccc:	18 94       	sez
    4cce:	08 95       	ret

00004cd0 <strcat>:
    4cd0:	fb 01       	movw	r30, r22
    4cd2:	dc 01       	movw	r26, r24
    4cd4:	0d 90       	ld	r0, X+
    4cd6:	00 20       	and	r0, r0
    4cd8:	e9 f7       	brne	.-6      	; 0x4cd4 <strcat+0x4>
    4cda:	11 97       	sbiw	r26, 0x01	; 1
    4cdc:	01 90       	ld	r0, Z+
    4cde:	0d 92       	st	X+, r0
    4ce0:	00 20       	and	r0, r0
    4ce2:	e1 f7       	brne	.-8      	; 0x4cdc <strcat+0xc>
    4ce4:	08 95       	ret

00004ce6 <strcpy>:
    4ce6:	fb 01       	movw	r30, r22
    4ce8:	dc 01       	movw	r26, r24
    4cea:	01 90       	ld	r0, Z+
    4cec:	0d 92       	st	X+, r0
    4cee:	00 20       	and	r0, r0
    4cf0:	e1 f7       	brne	.-8      	; 0x4cea <strcpy+0x4>
    4cf2:	08 95       	ret

00004cf4 <strncasecmp>:
    4cf4:	fb 01       	movw	r30, r22
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	41 50       	subi	r20, 0x01	; 1
    4cfa:	50 40       	sbci	r21, 0x00	; 0
    4cfc:	88 f0       	brcs	.+34     	; 0x4d20 <strncasecmp+0x2c>
    4cfe:	8d 91       	ld	r24, X+
    4d00:	81 34       	cpi	r24, 0x41	; 65
    4d02:	1c f0       	brlt	.+6      	; 0x4d0a <strncasecmp+0x16>
    4d04:	8b 35       	cpi	r24, 0x5B	; 91
    4d06:	0c f4       	brge	.+2      	; 0x4d0a <strncasecmp+0x16>
    4d08:	80 5e       	subi	r24, 0xE0	; 224
    4d0a:	61 91       	ld	r22, Z+
    4d0c:	61 34       	cpi	r22, 0x41	; 65
    4d0e:	1c f0       	brlt	.+6      	; 0x4d16 <strncasecmp+0x22>
    4d10:	6b 35       	cpi	r22, 0x5B	; 91
    4d12:	0c f4       	brge	.+2      	; 0x4d16 <strncasecmp+0x22>
    4d14:	60 5e       	subi	r22, 0xE0	; 224
    4d16:	86 1b       	sub	r24, r22
    4d18:	61 11       	cpse	r22, r1
    4d1a:	71 f3       	breq	.-36     	; 0x4cf8 <strncasecmp+0x4>
    4d1c:	99 0b       	sbc	r25, r25
    4d1e:	08 95       	ret
    4d20:	88 1b       	sub	r24, r24
    4d22:	fc cf       	rjmp	.-8      	; 0x4d1c <strncasecmp+0x28>

00004d24 <printf>:
    4d24:	cf 93       	push	r28
    4d26:	df 93       	push	r29
    4d28:	cd b7       	in	r28, 0x3d	; 61
    4d2a:	de b7       	in	r29, 0x3e	; 62
    4d2c:	ae 01       	movw	r20, r28
    4d2e:	4a 5f       	subi	r20, 0xFA	; 250
    4d30:	5f 4f       	sbci	r21, 0xFF	; 255
    4d32:	fa 01       	movw	r30, r20
    4d34:	61 91       	ld	r22, Z+
    4d36:	71 91       	ld	r23, Z+
    4d38:	af 01       	movw	r20, r30
    4d3a:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <__iob+0x2>
    4d3e:	90 91 ff 12 	lds	r25, 0x12FF	; 0x8012ff <__iob+0x3>
    4d42:	61 d0       	rcall	.+194    	; 0x4e06 <vfprintf>
    4d44:	df 91       	pop	r29
    4d46:	cf 91       	pop	r28
    4d48:	08 95       	ret

00004d4a <puts>:
    4d4a:	0f 93       	push	r16
    4d4c:	1f 93       	push	r17
    4d4e:	cf 93       	push	r28
    4d50:	df 93       	push	r29
    4d52:	e0 91 fe 12 	lds	r30, 0x12FE	; 0x8012fe <__iob+0x2>
    4d56:	f0 91 ff 12 	lds	r31, 0x12FF	; 0x8012ff <__iob+0x3>
    4d5a:	23 81       	ldd	r18, Z+3	; 0x03
    4d5c:	21 ff       	sbrs	r18, 1
    4d5e:	1b c0       	rjmp	.+54     	; 0x4d96 <puts+0x4c>
    4d60:	8c 01       	movw	r16, r24
    4d62:	d0 e0       	ldi	r29, 0x00	; 0
    4d64:	c0 e0       	ldi	r28, 0x00	; 0
    4d66:	f8 01       	movw	r30, r16
    4d68:	81 91       	ld	r24, Z+
    4d6a:	8f 01       	movw	r16, r30
    4d6c:	60 91 fe 12 	lds	r22, 0x12FE	; 0x8012fe <__iob+0x2>
    4d70:	70 91 ff 12 	lds	r23, 0x12FF	; 0x8012ff <__iob+0x3>
    4d74:	db 01       	movw	r26, r22
    4d76:	18 96       	adiw	r26, 0x08	; 8
    4d78:	ed 91       	ld	r30, X+
    4d7a:	fc 91       	ld	r31, X
    4d7c:	19 97       	sbiw	r26, 0x09	; 9
    4d7e:	88 23       	and	r24, r24
    4d80:	31 f0       	breq	.+12     	; 0x4d8e <puts+0x44>
    4d82:	19 95       	eicall
    4d84:	89 2b       	or	r24, r25
    4d86:	79 f3       	breq	.-34     	; 0x4d66 <puts+0x1c>
    4d88:	df ef       	ldi	r29, 0xFF	; 255
    4d8a:	cf ef       	ldi	r28, 0xFF	; 255
    4d8c:	ec cf       	rjmp	.-40     	; 0x4d66 <puts+0x1c>
    4d8e:	8a e0       	ldi	r24, 0x0A	; 10
    4d90:	19 95       	eicall
    4d92:	89 2b       	or	r24, r25
    4d94:	19 f0       	breq	.+6      	; 0x4d9c <puts+0x52>
    4d96:	8f ef       	ldi	r24, 0xFF	; 255
    4d98:	9f ef       	ldi	r25, 0xFF	; 255
    4d9a:	02 c0       	rjmp	.+4      	; 0x4da0 <puts+0x56>
    4d9c:	8d 2f       	mov	r24, r29
    4d9e:	9c 2f       	mov	r25, r28
    4da0:	df 91       	pop	r29
    4da2:	cf 91       	pop	r28
    4da4:	1f 91       	pop	r17
    4da6:	0f 91       	pop	r16
    4da8:	08 95       	ret

00004daa <sprintf>:
    4daa:	0f 93       	push	r16
    4dac:	1f 93       	push	r17
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	cd b7       	in	r28, 0x3d	; 61
    4db4:	de b7       	in	r29, 0x3e	; 62
    4db6:	2e 97       	sbiw	r28, 0x0e	; 14
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	cd bf       	out	0x3d, r28	; 61
    4dc2:	0e 89       	ldd	r16, Y+22	; 0x16
    4dc4:	1f 89       	ldd	r17, Y+23	; 0x17
    4dc6:	86 e0       	ldi	r24, 0x06	; 6
    4dc8:	8c 83       	std	Y+4, r24	; 0x04
    4dca:	1a 83       	std	Y+2, r17	; 0x02
    4dcc:	09 83       	std	Y+1, r16	; 0x01
    4dce:	8f ef       	ldi	r24, 0xFF	; 255
    4dd0:	9f e7       	ldi	r25, 0x7F	; 127
    4dd2:	9e 83       	std	Y+6, r25	; 0x06
    4dd4:	8d 83       	std	Y+5, r24	; 0x05
    4dd6:	ae 01       	movw	r20, r28
    4dd8:	46 5e       	subi	r20, 0xE6	; 230
    4dda:	5f 4f       	sbci	r21, 0xFF	; 255
    4ddc:	68 8d       	ldd	r22, Y+24	; 0x18
    4dde:	79 8d       	ldd	r23, Y+25	; 0x19
    4de0:	ce 01       	movw	r24, r28
    4de2:	01 96       	adiw	r24, 0x01	; 1
    4de4:	10 d0       	rcall	.+32     	; 0x4e06 <vfprintf>
    4de6:	ef 81       	ldd	r30, Y+7	; 0x07
    4de8:	f8 85       	ldd	r31, Y+8	; 0x08
    4dea:	e0 0f       	add	r30, r16
    4dec:	f1 1f       	adc	r31, r17
    4dee:	10 82       	st	Z, r1
    4df0:	2e 96       	adiw	r28, 0x0e	; 14
    4df2:	0f b6       	in	r0, 0x3f	; 63
    4df4:	f8 94       	cli
    4df6:	de bf       	out	0x3e, r29	; 62
    4df8:	0f be       	out	0x3f, r0	; 63
    4dfa:	cd bf       	out	0x3d, r28	; 61
    4dfc:	df 91       	pop	r29
    4dfe:	cf 91       	pop	r28
    4e00:	1f 91       	pop	r17
    4e02:	0f 91       	pop	r16
    4e04:	08 95       	ret

00004e06 <vfprintf>:
    4e06:	2f 92       	push	r2
    4e08:	3f 92       	push	r3
    4e0a:	4f 92       	push	r4
    4e0c:	5f 92       	push	r5
    4e0e:	6f 92       	push	r6
    4e10:	7f 92       	push	r7
    4e12:	8f 92       	push	r8
    4e14:	9f 92       	push	r9
    4e16:	af 92       	push	r10
    4e18:	bf 92       	push	r11
    4e1a:	cf 92       	push	r12
    4e1c:	df 92       	push	r13
    4e1e:	ef 92       	push	r14
    4e20:	ff 92       	push	r15
    4e22:	0f 93       	push	r16
    4e24:	1f 93       	push	r17
    4e26:	cf 93       	push	r28
    4e28:	df 93       	push	r29
    4e2a:	cd b7       	in	r28, 0x3d	; 61
    4e2c:	de b7       	in	r29, 0x3e	; 62
    4e2e:	2b 97       	sbiw	r28, 0x0b	; 11
    4e30:	0f b6       	in	r0, 0x3f	; 63
    4e32:	f8 94       	cli
    4e34:	de bf       	out	0x3e, r29	; 62
    4e36:	0f be       	out	0x3f, r0	; 63
    4e38:	cd bf       	out	0x3d, r28	; 61
    4e3a:	6c 01       	movw	r12, r24
    4e3c:	7b 01       	movw	r14, r22
    4e3e:	8a 01       	movw	r16, r20
    4e40:	fc 01       	movw	r30, r24
    4e42:	17 82       	std	Z+7, r1	; 0x07
    4e44:	16 82       	std	Z+6, r1	; 0x06
    4e46:	83 81       	ldd	r24, Z+3	; 0x03
    4e48:	81 ff       	sbrs	r24, 1
    4e4a:	bf c1       	rjmp	.+894    	; 0x51ca <vfprintf+0x3c4>
    4e4c:	ce 01       	movw	r24, r28
    4e4e:	01 96       	adiw	r24, 0x01	; 1
    4e50:	3c 01       	movw	r6, r24
    4e52:	f6 01       	movw	r30, r12
    4e54:	93 81       	ldd	r25, Z+3	; 0x03
    4e56:	f7 01       	movw	r30, r14
    4e58:	93 fd       	sbrc	r25, 3
    4e5a:	85 91       	lpm	r24, Z+
    4e5c:	93 ff       	sbrs	r25, 3
    4e5e:	81 91       	ld	r24, Z+
    4e60:	7f 01       	movw	r14, r30
    4e62:	88 23       	and	r24, r24
    4e64:	09 f4       	brne	.+2      	; 0x4e68 <vfprintf+0x62>
    4e66:	ad c1       	rjmp	.+858    	; 0x51c2 <vfprintf+0x3bc>
    4e68:	85 32       	cpi	r24, 0x25	; 37
    4e6a:	39 f4       	brne	.+14     	; 0x4e7a <vfprintf+0x74>
    4e6c:	93 fd       	sbrc	r25, 3
    4e6e:	85 91       	lpm	r24, Z+
    4e70:	93 ff       	sbrs	r25, 3
    4e72:	81 91       	ld	r24, Z+
    4e74:	7f 01       	movw	r14, r30
    4e76:	85 32       	cpi	r24, 0x25	; 37
    4e78:	21 f4       	brne	.+8      	; 0x4e82 <vfprintf+0x7c>
    4e7a:	b6 01       	movw	r22, r12
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	d6 d1       	rcall	.+940    	; 0x522c <fputc>
    4e80:	e8 cf       	rjmp	.-48     	; 0x4e52 <vfprintf+0x4c>
    4e82:	91 2c       	mov	r9, r1
    4e84:	21 2c       	mov	r2, r1
    4e86:	31 2c       	mov	r3, r1
    4e88:	ff e1       	ldi	r31, 0x1F	; 31
    4e8a:	f3 15       	cp	r31, r3
    4e8c:	d8 f0       	brcs	.+54     	; 0x4ec4 <vfprintf+0xbe>
    4e8e:	8b 32       	cpi	r24, 0x2B	; 43
    4e90:	79 f0       	breq	.+30     	; 0x4eb0 <vfprintf+0xaa>
    4e92:	38 f4       	brcc	.+14     	; 0x4ea2 <vfprintf+0x9c>
    4e94:	80 32       	cpi	r24, 0x20	; 32
    4e96:	79 f0       	breq	.+30     	; 0x4eb6 <vfprintf+0xb0>
    4e98:	83 32       	cpi	r24, 0x23	; 35
    4e9a:	a1 f4       	brne	.+40     	; 0x4ec4 <vfprintf+0xbe>
    4e9c:	23 2d       	mov	r18, r3
    4e9e:	20 61       	ori	r18, 0x10	; 16
    4ea0:	1d c0       	rjmp	.+58     	; 0x4edc <vfprintf+0xd6>
    4ea2:	8d 32       	cpi	r24, 0x2D	; 45
    4ea4:	61 f0       	breq	.+24     	; 0x4ebe <vfprintf+0xb8>
    4ea6:	80 33       	cpi	r24, 0x30	; 48
    4ea8:	69 f4       	brne	.+26     	; 0x4ec4 <vfprintf+0xbe>
    4eaa:	23 2d       	mov	r18, r3
    4eac:	21 60       	ori	r18, 0x01	; 1
    4eae:	16 c0       	rjmp	.+44     	; 0x4edc <vfprintf+0xd6>
    4eb0:	83 2d       	mov	r24, r3
    4eb2:	82 60       	ori	r24, 0x02	; 2
    4eb4:	38 2e       	mov	r3, r24
    4eb6:	e3 2d       	mov	r30, r3
    4eb8:	e4 60       	ori	r30, 0x04	; 4
    4eba:	3e 2e       	mov	r3, r30
    4ebc:	2a c0       	rjmp	.+84     	; 0x4f12 <vfprintf+0x10c>
    4ebe:	f3 2d       	mov	r31, r3
    4ec0:	f8 60       	ori	r31, 0x08	; 8
    4ec2:	1d c0       	rjmp	.+58     	; 0x4efe <vfprintf+0xf8>
    4ec4:	37 fc       	sbrc	r3, 7
    4ec6:	2d c0       	rjmp	.+90     	; 0x4f22 <vfprintf+0x11c>
    4ec8:	20 ed       	ldi	r18, 0xD0	; 208
    4eca:	28 0f       	add	r18, r24
    4ecc:	2a 30       	cpi	r18, 0x0A	; 10
    4ece:	40 f0       	brcs	.+16     	; 0x4ee0 <vfprintf+0xda>
    4ed0:	8e 32       	cpi	r24, 0x2E	; 46
    4ed2:	b9 f4       	brne	.+46     	; 0x4f02 <vfprintf+0xfc>
    4ed4:	36 fc       	sbrc	r3, 6
    4ed6:	75 c1       	rjmp	.+746    	; 0x51c2 <vfprintf+0x3bc>
    4ed8:	23 2d       	mov	r18, r3
    4eda:	20 64       	ori	r18, 0x40	; 64
    4edc:	32 2e       	mov	r3, r18
    4ede:	19 c0       	rjmp	.+50     	; 0x4f12 <vfprintf+0x10c>
    4ee0:	36 fe       	sbrs	r3, 6
    4ee2:	06 c0       	rjmp	.+12     	; 0x4ef0 <vfprintf+0xea>
    4ee4:	8a e0       	ldi	r24, 0x0A	; 10
    4ee6:	98 9e       	mul	r9, r24
    4ee8:	20 0d       	add	r18, r0
    4eea:	11 24       	eor	r1, r1
    4eec:	92 2e       	mov	r9, r18
    4eee:	11 c0       	rjmp	.+34     	; 0x4f12 <vfprintf+0x10c>
    4ef0:	ea e0       	ldi	r30, 0x0A	; 10
    4ef2:	2e 9e       	mul	r2, r30
    4ef4:	20 0d       	add	r18, r0
    4ef6:	11 24       	eor	r1, r1
    4ef8:	22 2e       	mov	r2, r18
    4efa:	f3 2d       	mov	r31, r3
    4efc:	f0 62       	ori	r31, 0x20	; 32
    4efe:	3f 2e       	mov	r3, r31
    4f00:	08 c0       	rjmp	.+16     	; 0x4f12 <vfprintf+0x10c>
    4f02:	8c 36       	cpi	r24, 0x6C	; 108
    4f04:	21 f4       	brne	.+8      	; 0x4f0e <vfprintf+0x108>
    4f06:	83 2d       	mov	r24, r3
    4f08:	80 68       	ori	r24, 0x80	; 128
    4f0a:	38 2e       	mov	r3, r24
    4f0c:	02 c0       	rjmp	.+4      	; 0x4f12 <vfprintf+0x10c>
    4f0e:	88 36       	cpi	r24, 0x68	; 104
    4f10:	41 f4       	brne	.+16     	; 0x4f22 <vfprintf+0x11c>
    4f12:	f7 01       	movw	r30, r14
    4f14:	93 fd       	sbrc	r25, 3
    4f16:	85 91       	lpm	r24, Z+
    4f18:	93 ff       	sbrs	r25, 3
    4f1a:	81 91       	ld	r24, Z+
    4f1c:	7f 01       	movw	r14, r30
    4f1e:	81 11       	cpse	r24, r1
    4f20:	b3 cf       	rjmp	.-154    	; 0x4e88 <vfprintf+0x82>
    4f22:	98 2f       	mov	r25, r24
    4f24:	9f 7d       	andi	r25, 0xDF	; 223
    4f26:	95 54       	subi	r25, 0x45	; 69
    4f28:	93 30       	cpi	r25, 0x03	; 3
    4f2a:	28 f4       	brcc	.+10     	; 0x4f36 <vfprintf+0x130>
    4f2c:	0c 5f       	subi	r16, 0xFC	; 252
    4f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f30:	9f e3       	ldi	r25, 0x3F	; 63
    4f32:	99 83       	std	Y+1, r25	; 0x01
    4f34:	0d c0       	rjmp	.+26     	; 0x4f50 <vfprintf+0x14a>
    4f36:	83 36       	cpi	r24, 0x63	; 99
    4f38:	31 f0       	breq	.+12     	; 0x4f46 <vfprintf+0x140>
    4f3a:	83 37       	cpi	r24, 0x73	; 115
    4f3c:	71 f0       	breq	.+28     	; 0x4f5a <vfprintf+0x154>
    4f3e:	83 35       	cpi	r24, 0x53	; 83
    4f40:	09 f0       	breq	.+2      	; 0x4f44 <vfprintf+0x13e>
    4f42:	55 c0       	rjmp	.+170    	; 0x4fee <vfprintf+0x1e8>
    4f44:	20 c0       	rjmp	.+64     	; 0x4f86 <vfprintf+0x180>
    4f46:	f8 01       	movw	r30, r16
    4f48:	80 81       	ld	r24, Z
    4f4a:	89 83       	std	Y+1, r24	; 0x01
    4f4c:	0e 5f       	subi	r16, 0xFE	; 254
    4f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f50:	88 24       	eor	r8, r8
    4f52:	83 94       	inc	r8
    4f54:	91 2c       	mov	r9, r1
    4f56:	53 01       	movw	r10, r6
    4f58:	12 c0       	rjmp	.+36     	; 0x4f7e <vfprintf+0x178>
    4f5a:	28 01       	movw	r4, r16
    4f5c:	f2 e0       	ldi	r31, 0x02	; 2
    4f5e:	4f 0e       	add	r4, r31
    4f60:	51 1c       	adc	r5, r1
    4f62:	f8 01       	movw	r30, r16
    4f64:	a0 80       	ld	r10, Z
    4f66:	b1 80       	ldd	r11, Z+1	; 0x01
    4f68:	36 fe       	sbrs	r3, 6
    4f6a:	03 c0       	rjmp	.+6      	; 0x4f72 <vfprintf+0x16c>
    4f6c:	69 2d       	mov	r22, r9
    4f6e:	70 e0       	ldi	r23, 0x00	; 0
    4f70:	02 c0       	rjmp	.+4      	; 0x4f76 <vfprintf+0x170>
    4f72:	6f ef       	ldi	r22, 0xFF	; 255
    4f74:	7f ef       	ldi	r23, 0xFF	; 255
    4f76:	c5 01       	movw	r24, r10
    4f78:	4e d1       	rcall	.+668    	; 0x5216 <strnlen>
    4f7a:	4c 01       	movw	r8, r24
    4f7c:	82 01       	movw	r16, r4
    4f7e:	f3 2d       	mov	r31, r3
    4f80:	ff 77       	andi	r31, 0x7F	; 127
    4f82:	3f 2e       	mov	r3, r31
    4f84:	15 c0       	rjmp	.+42     	; 0x4fb0 <vfprintf+0x1aa>
    4f86:	28 01       	movw	r4, r16
    4f88:	22 e0       	ldi	r18, 0x02	; 2
    4f8a:	42 0e       	add	r4, r18
    4f8c:	51 1c       	adc	r5, r1
    4f8e:	f8 01       	movw	r30, r16
    4f90:	a0 80       	ld	r10, Z
    4f92:	b1 80       	ldd	r11, Z+1	; 0x01
    4f94:	36 fe       	sbrs	r3, 6
    4f96:	03 c0       	rjmp	.+6      	; 0x4f9e <vfprintf+0x198>
    4f98:	69 2d       	mov	r22, r9
    4f9a:	70 e0       	ldi	r23, 0x00	; 0
    4f9c:	02 c0       	rjmp	.+4      	; 0x4fa2 <vfprintf+0x19c>
    4f9e:	6f ef       	ldi	r22, 0xFF	; 255
    4fa0:	7f ef       	ldi	r23, 0xFF	; 255
    4fa2:	c5 01       	movw	r24, r10
    4fa4:	2d d1       	rcall	.+602    	; 0x5200 <strnlen_P>
    4fa6:	4c 01       	movw	r8, r24
    4fa8:	f3 2d       	mov	r31, r3
    4faa:	f0 68       	ori	r31, 0x80	; 128
    4fac:	3f 2e       	mov	r3, r31
    4fae:	82 01       	movw	r16, r4
    4fb0:	33 fc       	sbrc	r3, 3
    4fb2:	19 c0       	rjmp	.+50     	; 0x4fe6 <vfprintf+0x1e0>
    4fb4:	82 2d       	mov	r24, r2
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	88 16       	cp	r8, r24
    4fba:	99 06       	cpc	r9, r25
    4fbc:	a0 f4       	brcc	.+40     	; 0x4fe6 <vfprintf+0x1e0>
    4fbe:	b6 01       	movw	r22, r12
    4fc0:	80 e2       	ldi	r24, 0x20	; 32
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	33 d1       	rcall	.+614    	; 0x522c <fputc>
    4fc6:	2a 94       	dec	r2
    4fc8:	f5 cf       	rjmp	.-22     	; 0x4fb4 <vfprintf+0x1ae>
    4fca:	f5 01       	movw	r30, r10
    4fcc:	37 fc       	sbrc	r3, 7
    4fce:	85 91       	lpm	r24, Z+
    4fd0:	37 fe       	sbrs	r3, 7
    4fd2:	81 91       	ld	r24, Z+
    4fd4:	5f 01       	movw	r10, r30
    4fd6:	b6 01       	movw	r22, r12
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	28 d1       	rcall	.+592    	; 0x522c <fputc>
    4fdc:	21 10       	cpse	r2, r1
    4fde:	2a 94       	dec	r2
    4fe0:	21 e0       	ldi	r18, 0x01	; 1
    4fe2:	82 1a       	sub	r8, r18
    4fe4:	91 08       	sbc	r9, r1
    4fe6:	81 14       	cp	r8, r1
    4fe8:	91 04       	cpc	r9, r1
    4fea:	79 f7       	brne	.-34     	; 0x4fca <vfprintf+0x1c4>
    4fec:	e1 c0       	rjmp	.+450    	; 0x51b0 <vfprintf+0x3aa>
    4fee:	84 36       	cpi	r24, 0x64	; 100
    4ff0:	11 f0       	breq	.+4      	; 0x4ff6 <vfprintf+0x1f0>
    4ff2:	89 36       	cpi	r24, 0x69	; 105
    4ff4:	39 f5       	brne	.+78     	; 0x5044 <vfprintf+0x23e>
    4ff6:	f8 01       	movw	r30, r16
    4ff8:	37 fe       	sbrs	r3, 7
    4ffa:	07 c0       	rjmp	.+14     	; 0x500a <vfprintf+0x204>
    4ffc:	60 81       	ld	r22, Z
    4ffe:	71 81       	ldd	r23, Z+1	; 0x01
    5000:	82 81       	ldd	r24, Z+2	; 0x02
    5002:	93 81       	ldd	r25, Z+3	; 0x03
    5004:	0c 5f       	subi	r16, 0xFC	; 252
    5006:	1f 4f       	sbci	r17, 0xFF	; 255
    5008:	08 c0       	rjmp	.+16     	; 0x501a <vfprintf+0x214>
    500a:	60 81       	ld	r22, Z
    500c:	71 81       	ldd	r23, Z+1	; 0x01
    500e:	07 2e       	mov	r0, r23
    5010:	00 0c       	add	r0, r0
    5012:	88 0b       	sbc	r24, r24
    5014:	99 0b       	sbc	r25, r25
    5016:	0e 5f       	subi	r16, 0xFE	; 254
    5018:	1f 4f       	sbci	r17, 0xFF	; 255
    501a:	f3 2d       	mov	r31, r3
    501c:	ff 76       	andi	r31, 0x6F	; 111
    501e:	3f 2e       	mov	r3, r31
    5020:	97 ff       	sbrs	r25, 7
    5022:	09 c0       	rjmp	.+18     	; 0x5036 <vfprintf+0x230>
    5024:	90 95       	com	r25
    5026:	80 95       	com	r24
    5028:	70 95       	com	r23
    502a:	61 95       	neg	r22
    502c:	7f 4f       	sbci	r23, 0xFF	; 255
    502e:	8f 4f       	sbci	r24, 0xFF	; 255
    5030:	9f 4f       	sbci	r25, 0xFF	; 255
    5032:	f0 68       	ori	r31, 0x80	; 128
    5034:	3f 2e       	mov	r3, r31
    5036:	2a e0       	ldi	r18, 0x0A	; 10
    5038:	30 e0       	ldi	r19, 0x00	; 0
    503a:	a3 01       	movw	r20, r6
    503c:	33 d1       	rcall	.+614    	; 0x52a4 <__ultoa_invert>
    503e:	88 2e       	mov	r8, r24
    5040:	86 18       	sub	r8, r6
    5042:	44 c0       	rjmp	.+136    	; 0x50cc <vfprintf+0x2c6>
    5044:	85 37       	cpi	r24, 0x75	; 117
    5046:	31 f4       	brne	.+12     	; 0x5054 <vfprintf+0x24e>
    5048:	23 2d       	mov	r18, r3
    504a:	2f 7e       	andi	r18, 0xEF	; 239
    504c:	b2 2e       	mov	r11, r18
    504e:	2a e0       	ldi	r18, 0x0A	; 10
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	25 c0       	rjmp	.+74     	; 0x509e <vfprintf+0x298>
    5054:	93 2d       	mov	r25, r3
    5056:	99 7f       	andi	r25, 0xF9	; 249
    5058:	b9 2e       	mov	r11, r25
    505a:	8f 36       	cpi	r24, 0x6F	; 111
    505c:	c1 f0       	breq	.+48     	; 0x508e <vfprintf+0x288>
    505e:	18 f4       	brcc	.+6      	; 0x5066 <vfprintf+0x260>
    5060:	88 35       	cpi	r24, 0x58	; 88
    5062:	79 f0       	breq	.+30     	; 0x5082 <vfprintf+0x27c>
    5064:	ae c0       	rjmp	.+348    	; 0x51c2 <vfprintf+0x3bc>
    5066:	80 37       	cpi	r24, 0x70	; 112
    5068:	19 f0       	breq	.+6      	; 0x5070 <vfprintf+0x26a>
    506a:	88 37       	cpi	r24, 0x78	; 120
    506c:	21 f0       	breq	.+8      	; 0x5076 <vfprintf+0x270>
    506e:	a9 c0       	rjmp	.+338    	; 0x51c2 <vfprintf+0x3bc>
    5070:	e9 2f       	mov	r30, r25
    5072:	e0 61       	ori	r30, 0x10	; 16
    5074:	be 2e       	mov	r11, r30
    5076:	b4 fe       	sbrs	r11, 4
    5078:	0d c0       	rjmp	.+26     	; 0x5094 <vfprintf+0x28e>
    507a:	fb 2d       	mov	r31, r11
    507c:	f4 60       	ori	r31, 0x04	; 4
    507e:	bf 2e       	mov	r11, r31
    5080:	09 c0       	rjmp	.+18     	; 0x5094 <vfprintf+0x28e>
    5082:	34 fe       	sbrs	r3, 4
    5084:	0a c0       	rjmp	.+20     	; 0x509a <vfprintf+0x294>
    5086:	29 2f       	mov	r18, r25
    5088:	26 60       	ori	r18, 0x06	; 6
    508a:	b2 2e       	mov	r11, r18
    508c:	06 c0       	rjmp	.+12     	; 0x509a <vfprintf+0x294>
    508e:	28 e0       	ldi	r18, 0x08	; 8
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	05 c0       	rjmp	.+10     	; 0x509e <vfprintf+0x298>
    5094:	20 e1       	ldi	r18, 0x10	; 16
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	02 c0       	rjmp	.+4      	; 0x509e <vfprintf+0x298>
    509a:	20 e1       	ldi	r18, 0x10	; 16
    509c:	32 e0       	ldi	r19, 0x02	; 2
    509e:	f8 01       	movw	r30, r16
    50a0:	b7 fe       	sbrs	r11, 7
    50a2:	07 c0       	rjmp	.+14     	; 0x50b2 <vfprintf+0x2ac>
    50a4:	60 81       	ld	r22, Z
    50a6:	71 81       	ldd	r23, Z+1	; 0x01
    50a8:	82 81       	ldd	r24, Z+2	; 0x02
    50aa:	93 81       	ldd	r25, Z+3	; 0x03
    50ac:	0c 5f       	subi	r16, 0xFC	; 252
    50ae:	1f 4f       	sbci	r17, 0xFF	; 255
    50b0:	06 c0       	rjmp	.+12     	; 0x50be <vfprintf+0x2b8>
    50b2:	60 81       	ld	r22, Z
    50b4:	71 81       	ldd	r23, Z+1	; 0x01
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	0e 5f       	subi	r16, 0xFE	; 254
    50bc:	1f 4f       	sbci	r17, 0xFF	; 255
    50be:	a3 01       	movw	r20, r6
    50c0:	f1 d0       	rcall	.+482    	; 0x52a4 <__ultoa_invert>
    50c2:	88 2e       	mov	r8, r24
    50c4:	86 18       	sub	r8, r6
    50c6:	fb 2d       	mov	r31, r11
    50c8:	ff 77       	andi	r31, 0x7F	; 127
    50ca:	3f 2e       	mov	r3, r31
    50cc:	36 fe       	sbrs	r3, 6
    50ce:	0d c0       	rjmp	.+26     	; 0x50ea <vfprintf+0x2e4>
    50d0:	23 2d       	mov	r18, r3
    50d2:	2e 7f       	andi	r18, 0xFE	; 254
    50d4:	a2 2e       	mov	r10, r18
    50d6:	89 14       	cp	r8, r9
    50d8:	58 f4       	brcc	.+22     	; 0x50f0 <vfprintf+0x2ea>
    50da:	34 fe       	sbrs	r3, 4
    50dc:	0b c0       	rjmp	.+22     	; 0x50f4 <vfprintf+0x2ee>
    50de:	32 fc       	sbrc	r3, 2
    50e0:	09 c0       	rjmp	.+18     	; 0x50f4 <vfprintf+0x2ee>
    50e2:	83 2d       	mov	r24, r3
    50e4:	8e 7e       	andi	r24, 0xEE	; 238
    50e6:	a8 2e       	mov	r10, r24
    50e8:	05 c0       	rjmp	.+10     	; 0x50f4 <vfprintf+0x2ee>
    50ea:	b8 2c       	mov	r11, r8
    50ec:	a3 2c       	mov	r10, r3
    50ee:	03 c0       	rjmp	.+6      	; 0x50f6 <vfprintf+0x2f0>
    50f0:	b8 2c       	mov	r11, r8
    50f2:	01 c0       	rjmp	.+2      	; 0x50f6 <vfprintf+0x2f0>
    50f4:	b9 2c       	mov	r11, r9
    50f6:	a4 fe       	sbrs	r10, 4
    50f8:	0f c0       	rjmp	.+30     	; 0x5118 <vfprintf+0x312>
    50fa:	fe 01       	movw	r30, r28
    50fc:	e8 0d       	add	r30, r8
    50fe:	f1 1d       	adc	r31, r1
    5100:	80 81       	ld	r24, Z
    5102:	80 33       	cpi	r24, 0x30	; 48
    5104:	21 f4       	brne	.+8      	; 0x510e <vfprintf+0x308>
    5106:	9a 2d       	mov	r25, r10
    5108:	99 7e       	andi	r25, 0xE9	; 233
    510a:	a9 2e       	mov	r10, r25
    510c:	09 c0       	rjmp	.+18     	; 0x5120 <vfprintf+0x31a>
    510e:	a2 fe       	sbrs	r10, 2
    5110:	06 c0       	rjmp	.+12     	; 0x511e <vfprintf+0x318>
    5112:	b3 94       	inc	r11
    5114:	b3 94       	inc	r11
    5116:	04 c0       	rjmp	.+8      	; 0x5120 <vfprintf+0x31a>
    5118:	8a 2d       	mov	r24, r10
    511a:	86 78       	andi	r24, 0x86	; 134
    511c:	09 f0       	breq	.+2      	; 0x5120 <vfprintf+0x31a>
    511e:	b3 94       	inc	r11
    5120:	a3 fc       	sbrc	r10, 3
    5122:	10 c0       	rjmp	.+32     	; 0x5144 <vfprintf+0x33e>
    5124:	a0 fe       	sbrs	r10, 0
    5126:	06 c0       	rjmp	.+12     	; 0x5134 <vfprintf+0x32e>
    5128:	b2 14       	cp	r11, r2
    512a:	80 f4       	brcc	.+32     	; 0x514c <vfprintf+0x346>
    512c:	28 0c       	add	r2, r8
    512e:	92 2c       	mov	r9, r2
    5130:	9b 18       	sub	r9, r11
    5132:	0d c0       	rjmp	.+26     	; 0x514e <vfprintf+0x348>
    5134:	b2 14       	cp	r11, r2
    5136:	58 f4       	brcc	.+22     	; 0x514e <vfprintf+0x348>
    5138:	b6 01       	movw	r22, r12
    513a:	80 e2       	ldi	r24, 0x20	; 32
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	76 d0       	rcall	.+236    	; 0x522c <fputc>
    5140:	b3 94       	inc	r11
    5142:	f8 cf       	rjmp	.-16     	; 0x5134 <vfprintf+0x32e>
    5144:	b2 14       	cp	r11, r2
    5146:	18 f4       	brcc	.+6      	; 0x514e <vfprintf+0x348>
    5148:	2b 18       	sub	r2, r11
    514a:	02 c0       	rjmp	.+4      	; 0x5150 <vfprintf+0x34a>
    514c:	98 2c       	mov	r9, r8
    514e:	21 2c       	mov	r2, r1
    5150:	a4 fe       	sbrs	r10, 4
    5152:	0f c0       	rjmp	.+30     	; 0x5172 <vfprintf+0x36c>
    5154:	b6 01       	movw	r22, r12
    5156:	80 e3       	ldi	r24, 0x30	; 48
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	68 d0       	rcall	.+208    	; 0x522c <fputc>
    515c:	a2 fe       	sbrs	r10, 2
    515e:	16 c0       	rjmp	.+44     	; 0x518c <vfprintf+0x386>
    5160:	a1 fc       	sbrc	r10, 1
    5162:	03 c0       	rjmp	.+6      	; 0x516a <vfprintf+0x364>
    5164:	88 e7       	ldi	r24, 0x78	; 120
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	02 c0       	rjmp	.+4      	; 0x516e <vfprintf+0x368>
    516a:	88 e5       	ldi	r24, 0x58	; 88
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	b6 01       	movw	r22, r12
    5170:	0c c0       	rjmp	.+24     	; 0x518a <vfprintf+0x384>
    5172:	8a 2d       	mov	r24, r10
    5174:	86 78       	andi	r24, 0x86	; 134
    5176:	51 f0       	breq	.+20     	; 0x518c <vfprintf+0x386>
    5178:	a1 fe       	sbrs	r10, 1
    517a:	02 c0       	rjmp	.+4      	; 0x5180 <vfprintf+0x37a>
    517c:	8b e2       	ldi	r24, 0x2B	; 43
    517e:	01 c0       	rjmp	.+2      	; 0x5182 <vfprintf+0x37c>
    5180:	80 e2       	ldi	r24, 0x20	; 32
    5182:	a7 fc       	sbrc	r10, 7
    5184:	8d e2       	ldi	r24, 0x2D	; 45
    5186:	b6 01       	movw	r22, r12
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	50 d0       	rcall	.+160    	; 0x522c <fputc>
    518c:	89 14       	cp	r8, r9
    518e:	30 f4       	brcc	.+12     	; 0x519c <vfprintf+0x396>
    5190:	b6 01       	movw	r22, r12
    5192:	80 e3       	ldi	r24, 0x30	; 48
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	4a d0       	rcall	.+148    	; 0x522c <fputc>
    5198:	9a 94       	dec	r9
    519a:	f8 cf       	rjmp	.-16     	; 0x518c <vfprintf+0x386>
    519c:	8a 94       	dec	r8
    519e:	f3 01       	movw	r30, r6
    51a0:	e8 0d       	add	r30, r8
    51a2:	f1 1d       	adc	r31, r1
    51a4:	80 81       	ld	r24, Z
    51a6:	b6 01       	movw	r22, r12
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	40 d0       	rcall	.+128    	; 0x522c <fputc>
    51ac:	81 10       	cpse	r8, r1
    51ae:	f6 cf       	rjmp	.-20     	; 0x519c <vfprintf+0x396>
    51b0:	22 20       	and	r2, r2
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <vfprintf+0x3b0>
    51b4:	4e ce       	rjmp	.-868    	; 0x4e52 <vfprintf+0x4c>
    51b6:	b6 01       	movw	r22, r12
    51b8:	80 e2       	ldi	r24, 0x20	; 32
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	37 d0       	rcall	.+110    	; 0x522c <fputc>
    51be:	2a 94       	dec	r2
    51c0:	f7 cf       	rjmp	.-18     	; 0x51b0 <vfprintf+0x3aa>
    51c2:	f6 01       	movw	r30, r12
    51c4:	86 81       	ldd	r24, Z+6	; 0x06
    51c6:	97 81       	ldd	r25, Z+7	; 0x07
    51c8:	02 c0       	rjmp	.+4      	; 0x51ce <vfprintf+0x3c8>
    51ca:	8f ef       	ldi	r24, 0xFF	; 255
    51cc:	9f ef       	ldi	r25, 0xFF	; 255
    51ce:	2b 96       	adiw	r28, 0x0b	; 11
    51d0:	0f b6       	in	r0, 0x3f	; 63
    51d2:	f8 94       	cli
    51d4:	de bf       	out	0x3e, r29	; 62
    51d6:	0f be       	out	0x3f, r0	; 63
    51d8:	cd bf       	out	0x3d, r28	; 61
    51da:	df 91       	pop	r29
    51dc:	cf 91       	pop	r28
    51de:	1f 91       	pop	r17
    51e0:	0f 91       	pop	r16
    51e2:	ff 90       	pop	r15
    51e4:	ef 90       	pop	r14
    51e6:	df 90       	pop	r13
    51e8:	cf 90       	pop	r12
    51ea:	bf 90       	pop	r11
    51ec:	af 90       	pop	r10
    51ee:	9f 90       	pop	r9
    51f0:	8f 90       	pop	r8
    51f2:	7f 90       	pop	r7
    51f4:	6f 90       	pop	r6
    51f6:	5f 90       	pop	r5
    51f8:	4f 90       	pop	r4
    51fa:	3f 90       	pop	r3
    51fc:	2f 90       	pop	r2
    51fe:	08 95       	ret

00005200 <strnlen_P>:
    5200:	fc 01       	movw	r30, r24
    5202:	05 90       	lpm	r0, Z+
    5204:	61 50       	subi	r22, 0x01	; 1
    5206:	70 40       	sbci	r23, 0x00	; 0
    5208:	01 10       	cpse	r0, r1
    520a:	d8 f7       	brcc	.-10     	; 0x5202 <strnlen_P+0x2>
    520c:	80 95       	com	r24
    520e:	90 95       	com	r25
    5210:	8e 0f       	add	r24, r30
    5212:	9f 1f       	adc	r25, r31
    5214:	08 95       	ret

00005216 <strnlen>:
    5216:	fc 01       	movw	r30, r24
    5218:	61 50       	subi	r22, 0x01	; 1
    521a:	70 40       	sbci	r23, 0x00	; 0
    521c:	01 90       	ld	r0, Z+
    521e:	01 10       	cpse	r0, r1
    5220:	d8 f7       	brcc	.-10     	; 0x5218 <strnlen+0x2>
    5222:	80 95       	com	r24
    5224:	90 95       	com	r25
    5226:	8e 0f       	add	r24, r30
    5228:	9f 1f       	adc	r25, r31
    522a:	08 95       	ret

0000522c <fputc>:
    522c:	0f 93       	push	r16
    522e:	1f 93       	push	r17
    5230:	cf 93       	push	r28
    5232:	df 93       	push	r29
    5234:	fb 01       	movw	r30, r22
    5236:	23 81       	ldd	r18, Z+3	; 0x03
    5238:	21 fd       	sbrc	r18, 1
    523a:	03 c0       	rjmp	.+6      	; 0x5242 <fputc+0x16>
    523c:	8f ef       	ldi	r24, 0xFF	; 255
    523e:	9f ef       	ldi	r25, 0xFF	; 255
    5240:	2c c0       	rjmp	.+88     	; 0x529a <fputc+0x6e>
    5242:	22 ff       	sbrs	r18, 2
    5244:	16 c0       	rjmp	.+44     	; 0x5272 <fputc+0x46>
    5246:	46 81       	ldd	r20, Z+6	; 0x06
    5248:	57 81       	ldd	r21, Z+7	; 0x07
    524a:	24 81       	ldd	r18, Z+4	; 0x04
    524c:	35 81       	ldd	r19, Z+5	; 0x05
    524e:	42 17       	cp	r20, r18
    5250:	53 07       	cpc	r21, r19
    5252:	44 f4       	brge	.+16     	; 0x5264 <fputc+0x38>
    5254:	a0 81       	ld	r26, Z
    5256:	b1 81       	ldd	r27, Z+1	; 0x01
    5258:	9d 01       	movw	r18, r26
    525a:	2f 5f       	subi	r18, 0xFF	; 255
    525c:	3f 4f       	sbci	r19, 0xFF	; 255
    525e:	31 83       	std	Z+1, r19	; 0x01
    5260:	20 83       	st	Z, r18
    5262:	8c 93       	st	X, r24
    5264:	26 81       	ldd	r18, Z+6	; 0x06
    5266:	37 81       	ldd	r19, Z+7	; 0x07
    5268:	2f 5f       	subi	r18, 0xFF	; 255
    526a:	3f 4f       	sbci	r19, 0xFF	; 255
    526c:	37 83       	std	Z+7, r19	; 0x07
    526e:	26 83       	std	Z+6, r18	; 0x06
    5270:	14 c0       	rjmp	.+40     	; 0x529a <fputc+0x6e>
    5272:	8b 01       	movw	r16, r22
    5274:	ec 01       	movw	r28, r24
    5276:	fb 01       	movw	r30, r22
    5278:	00 84       	ldd	r0, Z+8	; 0x08
    527a:	f1 85       	ldd	r31, Z+9	; 0x09
    527c:	e0 2d       	mov	r30, r0
    527e:	19 95       	eicall
    5280:	89 2b       	or	r24, r25
    5282:	e1 f6       	brne	.-72     	; 0x523c <fputc+0x10>
    5284:	d8 01       	movw	r26, r16
    5286:	16 96       	adiw	r26, 0x06	; 6
    5288:	8d 91       	ld	r24, X+
    528a:	9c 91       	ld	r25, X
    528c:	17 97       	sbiw	r26, 0x07	; 7
    528e:	01 96       	adiw	r24, 0x01	; 1
    5290:	17 96       	adiw	r26, 0x07	; 7
    5292:	9c 93       	st	X, r25
    5294:	8e 93       	st	-X, r24
    5296:	16 97       	sbiw	r26, 0x06	; 6
    5298:	ce 01       	movw	r24, r28
    529a:	df 91       	pop	r29
    529c:	cf 91       	pop	r28
    529e:	1f 91       	pop	r17
    52a0:	0f 91       	pop	r16
    52a2:	08 95       	ret

000052a4 <__ultoa_invert>:
    52a4:	fa 01       	movw	r30, r20
    52a6:	aa 27       	eor	r26, r26
    52a8:	28 30       	cpi	r18, 0x08	; 8
    52aa:	51 f1       	breq	.+84     	; 0x5300 <__ultoa_invert+0x5c>
    52ac:	20 31       	cpi	r18, 0x10	; 16
    52ae:	81 f1       	breq	.+96     	; 0x5310 <__ultoa_invert+0x6c>
    52b0:	e8 94       	clt
    52b2:	6f 93       	push	r22
    52b4:	6e 7f       	andi	r22, 0xFE	; 254
    52b6:	6e 5f       	subi	r22, 0xFE	; 254
    52b8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ba:	8f 4f       	sbci	r24, 0xFF	; 255
    52bc:	9f 4f       	sbci	r25, 0xFF	; 255
    52be:	af 4f       	sbci	r26, 0xFF	; 255
    52c0:	b1 e0       	ldi	r27, 0x01	; 1
    52c2:	3e d0       	rcall	.+124    	; 0x5340 <__ultoa_invert+0x9c>
    52c4:	b4 e0       	ldi	r27, 0x04	; 4
    52c6:	3c d0       	rcall	.+120    	; 0x5340 <__ultoa_invert+0x9c>
    52c8:	67 0f       	add	r22, r23
    52ca:	78 1f       	adc	r23, r24
    52cc:	89 1f       	adc	r24, r25
    52ce:	9a 1f       	adc	r25, r26
    52d0:	a1 1d       	adc	r26, r1
    52d2:	68 0f       	add	r22, r24
    52d4:	79 1f       	adc	r23, r25
    52d6:	8a 1f       	adc	r24, r26
    52d8:	91 1d       	adc	r25, r1
    52da:	a1 1d       	adc	r26, r1
    52dc:	6a 0f       	add	r22, r26
    52de:	71 1d       	adc	r23, r1
    52e0:	81 1d       	adc	r24, r1
    52e2:	91 1d       	adc	r25, r1
    52e4:	a1 1d       	adc	r26, r1
    52e6:	20 d0       	rcall	.+64     	; 0x5328 <__ultoa_invert+0x84>
    52e8:	09 f4       	brne	.+2      	; 0x52ec <__ultoa_invert+0x48>
    52ea:	68 94       	set
    52ec:	3f 91       	pop	r19
    52ee:	2a e0       	ldi	r18, 0x0A	; 10
    52f0:	26 9f       	mul	r18, r22
    52f2:	11 24       	eor	r1, r1
    52f4:	30 19       	sub	r19, r0
    52f6:	30 5d       	subi	r19, 0xD0	; 208
    52f8:	31 93       	st	Z+, r19
    52fa:	de f6       	brtc	.-74     	; 0x52b2 <__ultoa_invert+0xe>
    52fc:	cf 01       	movw	r24, r30
    52fe:	08 95       	ret
    5300:	46 2f       	mov	r20, r22
    5302:	47 70       	andi	r20, 0x07	; 7
    5304:	40 5d       	subi	r20, 0xD0	; 208
    5306:	41 93       	st	Z+, r20
    5308:	b3 e0       	ldi	r27, 0x03	; 3
    530a:	0f d0       	rcall	.+30     	; 0x532a <__ultoa_invert+0x86>
    530c:	c9 f7       	brne	.-14     	; 0x5300 <__ultoa_invert+0x5c>
    530e:	f6 cf       	rjmp	.-20     	; 0x52fc <__ultoa_invert+0x58>
    5310:	46 2f       	mov	r20, r22
    5312:	4f 70       	andi	r20, 0x0F	; 15
    5314:	40 5d       	subi	r20, 0xD0	; 208
    5316:	4a 33       	cpi	r20, 0x3A	; 58
    5318:	18 f0       	brcs	.+6      	; 0x5320 <__ultoa_invert+0x7c>
    531a:	49 5d       	subi	r20, 0xD9	; 217
    531c:	31 fd       	sbrc	r19, 1
    531e:	40 52       	subi	r20, 0x20	; 32
    5320:	41 93       	st	Z+, r20
    5322:	02 d0       	rcall	.+4      	; 0x5328 <__ultoa_invert+0x84>
    5324:	a9 f7       	brne	.-22     	; 0x5310 <__ultoa_invert+0x6c>
    5326:	ea cf       	rjmp	.-44     	; 0x52fc <__ultoa_invert+0x58>
    5328:	b4 e0       	ldi	r27, 0x04	; 4
    532a:	a6 95       	lsr	r26
    532c:	97 95       	ror	r25
    532e:	87 95       	ror	r24
    5330:	77 95       	ror	r23
    5332:	67 95       	ror	r22
    5334:	ba 95       	dec	r27
    5336:	c9 f7       	brne	.-14     	; 0x532a <__ultoa_invert+0x86>
    5338:	00 97       	sbiw	r24, 0x00	; 0
    533a:	61 05       	cpc	r22, r1
    533c:	71 05       	cpc	r23, r1
    533e:	08 95       	ret
    5340:	9b 01       	movw	r18, r22
    5342:	ac 01       	movw	r20, r24
    5344:	0a 2e       	mov	r0, r26
    5346:	06 94       	lsr	r0
    5348:	57 95       	ror	r21
    534a:	47 95       	ror	r20
    534c:	37 95       	ror	r19
    534e:	27 95       	ror	r18
    5350:	ba 95       	dec	r27
    5352:	c9 f7       	brne	.-14     	; 0x5346 <__ultoa_invert+0xa2>
    5354:	62 0f       	add	r22, r18
    5356:	73 1f       	adc	r23, r19
    5358:	84 1f       	adc	r24, r20
    535a:	95 1f       	adc	r25, r21
    535c:	a0 1d       	adc	r26, r0
    535e:	08 95       	ret

00005360 <_exit>:
    5360:	f8 94       	cli

00005362 <__stop_program>:
    5362:	ff cf       	rjmp	.-2      	; 0x5362 <__stop_program>
