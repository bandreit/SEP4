
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000063e  00800200  00006726  000067ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f69  0080083e  0080083e  00006df8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006df8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000be8  00000000  00000000  00006e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e58e  00000000  00000000  00007a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b20  00000000  00000000  0001600a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071ee  00000000  00000000  00019b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002918  00000000  00000000  00020d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004489  00000000  00000000  00023630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c65f  00000000  00000000  00027ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae8  00000000  00000000  00034118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c6       	rjmp	.+3310   	; 0xd20 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__vector_25>
      68:	0c 94 95 27 	jmp	0x4f2a	; 0x4f2a <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d9 27 	jmp	0x4fb2	; 0x4fb2 <__vector_36>
      94:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e3 2b 	jmp	0x57c6	; 0x57c6 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6f 28 	jmp	0x50de	; 0x50de <__vector_51>
      d0:	0c 94 c1 28 	jmp	0x5182	; 0x5182 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 05 29 	jmp	0x520a	; 0x520a <__vector_54>
      dc:	0c 94 57 29 	jmp	0x52ae	; 0x52ae <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4c 1c       	adc	r4, r12
      e6:	4c 1c       	adc	r4, r12
      e8:	4c 1c       	adc	r4, r12
      ea:	83 1c       	adc	r8, r3
      ec:	8b 1c       	adc	r8, r11
      ee:	a0 1c       	adc	r10, r0
      f0:	4c 1c       	adc	r4, r12
      f2:	4c 1c       	adc	r4, r12
      f4:	83 1c       	adc	r8, r3
      f6:	8b 1c       	adc	r8, r11
      f8:	05 2c       	mov	r0, r5
      fa:	75 2c       	mov	r7, r5
      fc:	75 2c       	mov	r7, r5
      fe:	75 2c       	mov	r7, r5
     100:	75 2c       	mov	r7, r5
     102:	75 2c       	mov	r7, r5
     104:	75 2c       	mov	r7, r5
     106:	75 2c       	mov	r7, r5
     108:	05 2c       	mov	r0, r5
     10a:	75 2c       	mov	r7, r5
     10c:	75 2c       	mov	r7, r5
     10e:	75 2c       	mov	r7, r5
     110:	75 2c       	mov	r7, r5
     112:	75 2c       	mov	r7, r5
     114:	75 2c       	mov	r7, r5
     116:	75 2c       	mov	r7, r5
     118:	07 2c       	mov	r0, r7
     11a:	75 2c       	mov	r7, r5
     11c:	75 2c       	mov	r7, r5
     11e:	75 2c       	mov	r7, r5
     120:	75 2c       	mov	r7, r5
     122:	75 2c       	mov	r7, r5
     124:	75 2c       	mov	r7, r5
     126:	75 2c       	mov	r7, r5
     128:	75 2c       	mov	r7, r5
     12a:	75 2c       	mov	r7, r5
     12c:	75 2c       	mov	r7, r5
     12e:	75 2c       	mov	r7, r5
     130:	75 2c       	mov	r7, r5
     132:	75 2c       	mov	r7, r5
     134:	75 2c       	mov	r7, r5
     136:	75 2c       	mov	r7, r5
     138:	07 2c       	mov	r0, r7
     13a:	75 2c       	mov	r7, r5
     13c:	75 2c       	mov	r7, r5
     13e:	75 2c       	mov	r7, r5
     140:	75 2c       	mov	r7, r5
     142:	75 2c       	mov	r7, r5
     144:	75 2c       	mov	r7, r5
     146:	75 2c       	mov	r7, r5
     148:	75 2c       	mov	r7, r5
     14a:	75 2c       	mov	r7, r5
     14c:	75 2c       	mov	r7, r5
     14e:	75 2c       	mov	r7, r5
     150:	75 2c       	mov	r7, r5
     152:	75 2c       	mov	r7, r5
     154:	75 2c       	mov	r7, r5
     156:	75 2c       	mov	r7, r5
     158:	71 2c       	mov	r7, r1
     15a:	75 2c       	mov	r7, r5
     15c:	75 2c       	mov	r7, r5
     15e:	75 2c       	mov	r7, r5
     160:	75 2c       	mov	r7, r5
     162:	75 2c       	mov	r7, r5
     164:	75 2c       	mov	r7, r5
     166:	75 2c       	mov	r7, r5
     168:	3c 2c       	mov	r3, r12
     16a:	75 2c       	mov	r7, r5
     16c:	75 2c       	mov	r7, r5
     16e:	75 2c       	mov	r7, r5
     170:	75 2c       	mov	r7, r5
     172:	75 2c       	mov	r7, r5
     174:	75 2c       	mov	r7, r5
     176:	75 2c       	mov	r7, r5
     178:	75 2c       	mov	r7, r5
     17a:	75 2c       	mov	r7, r5
     17c:	75 2c       	mov	r7, r5
     17e:	75 2c       	mov	r7, r5
     180:	75 2c       	mov	r7, r5
     182:	75 2c       	mov	r7, r5
     184:	75 2c       	mov	r7, r5
     186:	75 2c       	mov	r7, r5
     188:	30 2c       	mov	r3, r0
     18a:	75 2c       	mov	r7, r5
     18c:	75 2c       	mov	r7, r5
     18e:	75 2c       	mov	r7, r5
     190:	75 2c       	mov	r7, r5
     192:	75 2c       	mov	r7, r5
     194:	75 2c       	mov	r7, r5
     196:	75 2c       	mov	r7, r5
     198:	54 2c       	mov	r5, r4

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <prvCheckTasksWaitingTermination>
     19e:	80 91 1f 15 	lds	r24, 0x151F	; 0x80151f <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	f6 d4       	rcall	.+2540   	; 0xb94 <vPortYield>
     1a8:	0e 94 c9 1c 	call	0x3992	; 0x3992 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 c9 19 	call	0x3392	; 0x3392 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 be 1b 	call	0x377c	; 0x377c <prvProcessTimerOrBlockTask>
     1c6:	0e 94 15 1c 	call	0x382a	; 0x382a <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e6 e2       	ldi	r30, 0x26	; 38
     1e4:	f7 e6       	ldi	r31, 0x67	; 103
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ae 33       	cpi	r26, 0x3E	; 62
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	27 e1       	ldi	r18, 0x17	; 23
     1f8:	ae e3       	ldi	r26, 0x3E	; 62
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a7 3a       	cpi	r26, 0xA7	; 167
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <main>
     20a:	0c 94 91 33 	jmp	0x6722	; 0x6722 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <setPackageHandler>:
#include "application.h"



void setPackageHandler()
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <setPackageHandler+0xa>
     21a:	00 d0       	rcall	.+0      	; 0x21c <setPackageHandler+0xc>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	uint16_t data[3];
	for(int i=0;i<3;i++)
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	13 c0       	rjmp	.+38     	; 0x24c <setPackageHandler+0x3c>
	{
		xQueueReceive(sensorDataQueue,&data[i],portMAX_DELAY);
     226:	b8 01       	movw	r22, r16
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	8c 0f       	add	r24, r28
     232:	9d 1f       	adc	r25, r29
     234:	68 0f       	add	r22, r24
     236:	79 1f       	adc	r23, r25
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <sensorDataQueue>
     242:	90 91 94 17 	lds	r25, 0x1794	; 0x801794 <sensorDataQueue+0x1>
     246:	8b d7       	rcall	.+3862   	; 0x115e <xQueueReceive>


void setPackageHandler()
{
	uint16_t data[3];
	for(int i=0;i<3;i++)
     248:	0f 5f       	subi	r16, 0xFF	; 255
     24a:	1f 4f       	sbci	r17, 0xFF	; 255
     24c:	03 30       	cpi	r16, 0x03	; 3
     24e:	11 05       	cpc	r17, r1
     250:	54 f3       	brlt	.-44     	; 0x226 <setPackageHandler+0x16>
	{
		xQueueReceive(sensorDataQueue,&data[i],portMAX_DELAY);
	}
	
	sensorDataPackageHandler_setTemp_value(data[0]);
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <sensorDataPackageHandler_setTemp_value>
	sensorDataPackageHandler_setHumidity_value(data[1]);
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04
     25e:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <sensorDataPackageHandler_setHumidity_value>
	sensorDataPackageHandler_setCO2_value(data[2]);
     262:	8d 81       	ldd	r24, Y+5	; 0x05
     264:	9e 81       	ldd	r25, Y+6	; 0x06
     266:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <sensorDataPackageHandler_setCO2_value>
	xQueueReset(sensorDataQueue);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <sensorDataQueue>
     270:	90 91 94 17 	lds	r25, 0x1794	; 0x801794 <sensorDataQueue+0x1>
     274:	2f d6       	rcall	.+3166   	; 0xed4 <xQueueGenericReset>
	
}
     276:	26 96       	adiw	r28, 0x06	; 6
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <ApplicationTask>:
void ApplicationTask(void *pvParameters)
{
	for (;;)
	{
		
		EventBits_t eventBits = xEventGroupWaitBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,portMAX_DELAY);
     28c:	cc 24       	eor	r12, r12
     28e:	ca 94       	dec	r12
     290:	dc 2c       	mov	r13, r12
     292:	76 01       	movw	r14, r12
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	21 e0       	ldi	r18, 0x01	; 1
     298:	43 e0       	ldi	r20, 0x03	; 3
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 91 9b 17 	lds	r24, 0x179B	; 0x80179b <dataEventGroup>
     2a4:	90 91 9c 17 	lds	r25, 0x179C	; 0x80179c <dataEventGroup+0x1>
     2a8:	20 d1       	rcall	.+576    	; 0x4ea <xEventGroupWaitBits>
		
		if((eventBits &(BIT_CO2 | BIT_HUMIDITY_TEMPERATURE))==(BIT_CO2|BIT_HUMIDITY_TEMPERATURE))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	b1 f4       	brne	.+44     	; 0x2ea <ApplicationTask+0x5e>
		{
			printf("ALL DATA COLLECTED\n");
     2be:	8f e6       	ldi	r24, 0x6F	; 111
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	0e 94 86 30 	call	0x610c	; 0x610c <puts>
			setPackageHandler();
     2c6:	a4 df       	rcall	.-184    	; 0x210 <setPackageHandler>
			vTaskDelay(pdMS_TO_TICKS(120000));
     2c8:	60 e1       	ldi	r22, 0x10	; 16
     2ca:	7d e1       	ldi	r23, 0x1D	; 29
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
			xSemaphoreGive(tempHumSemaphore);
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 91 97 17 	lds	r24, 0x1797	; 0x801797 <tempHumSemaphore>
     2e4:	90 91 98 17 	lds	r25, 0x1798	; 0x801798 <tempHumSemaphore+0x1>
     2e8:	6d d6       	rcall	.+3290   	; 0xfc4 <xQueueGenericSend>

		}
		vTaskDelay(pdMS_TO_TICKS(50));
     2ea:	63 e0       	ldi	r22, 0x03	; 3
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
		
	}
     2f6:	ca cf       	rjmp	.-108    	; 0x28c <ApplicationTask>

000002f8 <createApplicationTask>:
}

void createApplicationTask(UBaseType_t Taskpriority)
{
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
	
	xTaskCreate(
     2fe:	e1 2c       	mov	r14, r1
     300:	f1 2c       	mov	r15, r1
     302:	08 2f       	mov	r16, r24
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 ec       	ldi	r20, 0xC0	; 192
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	62 e8       	ldi	r22, 0x82	; 130
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	86 e4       	ldi	r24, 0x46	; 70
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + Taskpriority 
	,  NULL );
	
}
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <myCo2CallBack>:
		vTaskDelay(pdMS_TO_TICKS(50));
			
	}
}
void myCo2CallBack(uint16_t ppm)
{
     320:	0f 93       	push	r16
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	1f 92       	push	r1
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	89 83       	std	Y+1, r24	; 0x01
		//printf("CO2 Value: %d\n",ppm);
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	2f ef       	ldi	r18, 0xFF	; 255
     336:	3f ef       	ldi	r19, 0xFF	; 255
     338:	a9 01       	movw	r20, r18
     33a:	be 01       	movw	r22, r28
     33c:	6f 5f       	subi	r22, 0xFF	; 255
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <sensorDataQueue>
     344:	90 91 94 17 	lds	r25, 0x1794	; 0x801794 <sensorDataQueue+0x1>
     348:	3d d6       	rcall	.+3194   	; 0xfc4 <xQueueGenericSend>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     34a:	41 e0       	ldi	r20, 0x01	; 1
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	80 91 9b 17 	lds	r24, 0x179B	; 0x80179b <dataEventGroup>
     356:	90 91 9c 17 	lds	r25, 0x179C	; 0x80179c <dataEventGroup+0x1>
     35a:	67 d1       	rcall	.+718    	; 0x62a <xEventGroupSetBits>
}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <initializeCO2Driver>:

mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	mh_z19_initialise(ser_USART3);
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	0e 94 75 25 	call	0x4aea	; 0x4aea <mh_z19_initialise>
	
	mh_z19_injectCallBack(myCo2CallBack);
     36e:	80 e9       	ldi	r24, 0x90	; 144
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0c 94 9a 25 	jmp	0x4b34	; 0x4b34 <mh_z19_injectCallBack>
     376:	08 95       	ret

00000378 <measureCO2>:
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     378:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <mh_z19_takeMeassuring>
     37c:	80 93 71 17 	sts	0x1771, r24	; 0x801771 <rc>
	if (rc != MHZ19_OK)
     380:	88 23       	and	r24, r24
     382:	21 f0       	breq	.+8      	; 0x38c <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     384:	8a e8       	ldi	r24, 0x8A	; 138
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	0c 94 86 30 	jmp	0x610c	; 0x610c <puts>
     38c:	08 95       	ret

0000038e <CO2Task>:
void CO2Task()
{
	while(1)
	{

		EventBits_t dataEventBits = xEventGroupWaitBits
     38e:	cc 24       	eor	r12, r12
     390:	ca 94       	dec	r12
     392:	dc 2c       	mov	r13, r12
     394:	76 01       	movw	r14, r12
     396:	01 e0       	ldi	r16, 0x01	; 1
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	42 e0       	ldi	r20, 0x02	; 2
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	80 91 9b 17 	lds	r24, 0x179B	; 0x80179b <dataEventGroup>
     3a6:	90 91 9c 17 	lds	r25, 0x179C	; 0x80179c <dataEventGroup+0x1>
     3aa:	9f d0       	rcall	.+318    	; 0x4ea <xEventGroupWaitBits>
		(dataEventGroup,BIT_HUMIDITY_TEMPERATURE,pdFALSE,pdTRUE,portMAX_DELAY);

		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
			measureCO2();
     3ac:	61 fd       	sbrc	r22, 1
     3ae:	e4 df       	rcall	.-56     	; 0x378 <measureCO2>
			
		vTaskDelay(pdMS_TO_TICKS(50));
     3b0:	63 e0       	ldi	r22, 0x03	; 3
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
			
	}
     3bc:	e8 cf       	rjmp	.-48     	; 0x38e <CO2Task>

000003be <createCO2Task>:
		//printf("CO2 Value: %d\n",ppm);
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
}
void createCO2Task( UBaseType_t Taskpriority)
{
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	08 2f       	mov	r16, r24
			initializeCO2Driver();
     3c6:	d0 df       	rcall	.-96     	; 0x368 <initializeCO2Driver>
			xTaskCreate(
     3c8:	e1 2c       	mov	r14, r1
     3ca:	f1 2c       	mov	r15, r1
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	40 ec       	ldi	r20, 0xC0	; 192
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	61 ea       	ldi	r22, 0xA1	; 161
     3d6:	72 e0       	ldi	r23, 0x02	; 2
     3d8:	87 ec       	ldi	r24, 0xC7	; 199
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <xTaskCreate>
			,  configMINIMAL_STACK_SIZE 
			,  NULL
			,  tskIDLE_PRIORITY + Taskpriority 
			,  NULL );
			
}
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <initializeConfiguration>:

SemaphoreHandle_t configSemaphore;
uint8_t ventilationLevel;

void initializeConfiguration()
{
     3e8:	0f 93       	push	r16
	ventilationLevel = -100;
     3ea:	8c e9       	ldi	r24, 0x9C	; 156
     3ec:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <ventilationLevel>
	configSemaphore = xSemaphoreCreateBinary();
     3f0:	43 e0       	ldi	r20, 0x03	; 3
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	c3 d5       	rcall	.+2950   	; 0xf7e <xQueueGenericCreate>
     3f8:	90 93 73 17 	sts	0x1773, r25	; 0x801773 <configSemaphore+0x1>
     3fc:	80 93 72 17 	sts	0x1772, r24	; 0x801772 <configSemaphore>
	xSemaphoreGive(configSemaphore);
     400:	00 e0       	ldi	r16, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	a9 01       	movw	r20, r18
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	db d5       	rcall	.+2998   	; 0xfc4 <xQueueGenericSend>
}
     40e:	0f 91       	pop	r16
     410:	08 95       	ret

00000412 <setVentilationLevel>:

void setVentilationLevel(uint8_t level)
{
     412:	0f 93       	push	r16
     414:	cf 93       	push	r28
     416:	c8 2f       	mov	r28, r24
	if(xSemaphoreTake(configSemaphore,portMAX_DELAY)==pdTRUE)
     418:	4f ef       	ldi	r20, 0xFF	; 255
     41a:	5f ef       	ldi	r21, 0xFF	; 255
     41c:	ba 01       	movw	r22, r20
     41e:	80 91 72 17 	lds	r24, 0x1772	; 0x801772 <configSemaphore>
     422:	90 91 73 17 	lds	r25, 0x1773	; 0x801773 <configSemaphore+0x1>
     426:	2a d7       	rcall	.+3668   	; 0x127c <xQueueSemaphoreTake>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	69 f4       	brne	.+26     	; 0x446 <setVentilationLevel+0x34>
	{
		ventilationLevel = level;
     42c:	c0 93 74 17 	sts	0x1774, r28	; 0x801774 <ventilationLevel>
		xSemaphoreGive(configSemaphore);
     430:	00 e0       	ldi	r16, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	a9 01       	movw	r20, r18
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 91 72 17 	lds	r24, 0x1772	; 0x801772 <configSemaphore>
     440:	90 91 73 17 	lds	r25, 0x1773	; 0x801773 <configSemaphore+0x1>
     444:	bf d5       	rcall	.+2942   	; 0xfc4 <xQueueGenericSend>
	}
}
     446:	cf 91       	pop	r28
     448:	0f 91       	pop	r16
     44a:	08 95       	ret

0000044c <getVentilationLevel>:

uint8_t getVentilationLevel()
{
     44c:	0f 93       	push	r16
	if(xSemaphoreTake(configSemaphore,portMAX_DELAY)==pdTRUE)
     44e:	4f ef       	ldi	r20, 0xFF	; 255
     450:	5f ef       	ldi	r21, 0xFF	; 255
     452:	ba 01       	movw	r22, r20
     454:	80 91 72 17 	lds	r24, 0x1772	; 0x801772 <configSemaphore>
     458:	90 91 73 17 	lds	r25, 0x1773	; 0x801773 <configSemaphore+0x1>
     45c:	0f d7       	rcall	.+3614   	; 0x127c <xQueueSemaphoreTake>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	71 f4       	brne	.+28     	; 0x47e <getVentilationLevel+0x32>
	{
		xSemaphoreGive(configSemaphore);
     462:	00 e0       	ldi	r16, 0x00	; 0
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	a9 01       	movw	r20, r18
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 91 72 17 	lds	r24, 0x1772	; 0x801772 <configSemaphore>
     472:	90 91 73 17 	lds	r25, 0x1773	; 0x801773 <configSemaphore+0x1>
     476:	a6 d5       	rcall	.+2892   	; 0xfc4 <xQueueGenericSend>
		return ventilationLevel;
     478:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <ventilationLevel>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <getVentilationLevel+0x32>
	}
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     482:	0f 93       	push	r16
     484:	01 11       	cpse	r16, r1
     486:	0c c0       	rjmp	.+24     	; 0x4a0 <prvTestWaitCondition+0x1e>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	82 23       	and	r24, r18
     48e:	93 23       	and	r25, r19
     490:	a4 23       	and	r26, r20
     492:	b5 23       	and	r27, r21
     494:	89 2b       	or	r24, r25
     496:	8a 2b       	or	r24, r26
     498:	8b 2b       	or	r24, r27
     49a:	79 f4       	brne	.+30     	; 0x4ba <prvTestWaitCondition+0x38>
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	10 c0       	rjmp	.+32     	; 0x4c0 <prvTestWaitCondition+0x3e>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	82 23       	and	r24, r18
     4a6:	93 23       	and	r25, r19
     4a8:	a4 23       	and	r26, r20
     4aa:	b5 23       	and	r27, r21
     4ac:	28 17       	cp	r18, r24
     4ae:	39 07       	cpc	r19, r25
     4b0:	4a 07       	cpc	r20, r26
     4b2:	5b 07       	cpc	r21, r27
     4b4:	21 f0       	breq	.+8      	; 0x4be <prvTestWaitCondition+0x3c>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <prvTestWaitCondition+0x3e>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <prvTestWaitCondition+0x3e>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <xEventGroupCreate>:
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	8f e0       	ldi	r24, 0x0F	; 15
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	af d1       	rcall	.+862    	; 0x82c <pvPortMalloc>
     4ce:	ec 01       	movw	r28, r24
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	39 f0       	breq	.+14     	; 0x4e2 <xEventGroupCreate+0x1e>
     4d4:	fc 01       	movw	r30, r24
     4d6:	11 92       	st	Z+, r1
     4d8:	11 92       	st	Z+, r1
     4da:	11 92       	st	Z+, r1
     4dc:	11 92       	st	Z+, r1
     4de:	cf 01       	movw	r24, r30
     4e0:	8b d2       	rcall	.+1302   	; 0x9f8 <vListInitialise>
     4e2:	ce 01       	movw	r24, r28
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <xEventGroupWaitBits>:
     4ea:	2f 92       	push	r2
     4ec:	3f 92       	push	r3
     4ee:	4f 92       	push	r4
     4f0:	5f 92       	push	r5
     4f2:	6f 92       	push	r6
     4f4:	7f 92       	push	r7
     4f6:	8f 92       	push	r8
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
     510:	4a 01       	movw	r8, r20
     512:	5b 01       	movw	r10, r22
     514:	62 2e       	mov	r6, r18
     516:	70 2e       	mov	r7, r16
     518:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <vTaskSuspendAll>
     51c:	28 80       	ld	r2, Y
     51e:	39 80       	ldd	r3, Y+1	; 0x01
     520:	4a 80       	ldd	r4, Y+2	; 0x02
     522:	5b 80       	ldd	r5, Y+3	; 0x03
     524:	a5 01       	movw	r20, r10
     526:	94 01       	movw	r18, r8
     528:	c2 01       	movw	r24, r4
     52a:	b1 01       	movw	r22, r2
     52c:	aa df       	rcall	.-172    	; 0x482 <prvTestWaitCondition>
     52e:	88 23       	and	r24, r24
     530:	a1 f0       	breq	.+40     	; 0x55a <xEventGroupWaitBits+0x70>
     532:	66 20       	and	r6, r6
     534:	89 f1       	breq	.+98     	; 0x598 <xEventGroupWaitBits+0xae>
     536:	d5 01       	movw	r26, r10
     538:	c4 01       	movw	r24, r8
     53a:	80 95       	com	r24
     53c:	90 95       	com	r25
     53e:	a0 95       	com	r26
     540:	b0 95       	com	r27
     542:	82 21       	and	r24, r2
     544:	93 21       	and	r25, r3
     546:	a4 21       	and	r26, r4
     548:	b5 21       	and	r27, r5
     54a:	88 83       	st	Y, r24
     54c:	99 83       	std	Y+1, r25	; 0x01
     54e:	aa 83       	std	Y+2, r26	; 0x02
     550:	bb 83       	std	Y+3, r27	; 0x03
     552:	c1 2c       	mov	r12, r1
     554:	d1 2c       	mov	r13, r1
     556:	76 01       	movw	r14, r12
     558:	22 c0       	rjmp	.+68     	; 0x59e <xEventGroupWaitBits+0xb4>
     55a:	c1 14       	cp	r12, r1
     55c:	d1 04       	cpc	r13, r1
     55e:	e1 04       	cpc	r14, r1
     560:	f1 04       	cpc	r15, r1
     562:	e9 f0       	breq	.+58     	; 0x59e <xEventGroupWaitBits+0xb4>
     564:	61 10       	cpse	r6, r1
     566:	04 c0       	rjmp	.+8      	; 0x570 <xEventGroupWaitBits+0x86>
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	ba 01       	movw	r22, r20
     56e:	04 c0       	rjmp	.+8      	; 0x578 <xEventGroupWaitBits+0x8e>
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	71 e0       	ldi	r23, 0x01	; 1
     578:	71 10       	cpse	r7, r1
     57a:	74 60       	ori	r23, 0x04	; 4
     57c:	48 29       	or	r20, r8
     57e:	59 29       	or	r21, r9
     580:	6a 29       	or	r22, r10
     582:	7b 29       	or	r23, r11
     584:	97 01       	movw	r18, r14
     586:	86 01       	movw	r16, r12
     588:	ce 01       	movw	r24, r28
     58a:	04 96       	adiw	r24, 0x04	; 4
     58c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <vTaskPlaceOnUnorderedEventList>
     590:	21 2c       	mov	r2, r1
     592:	31 2c       	mov	r3, r1
     594:	21 01       	movw	r4, r2
     596:	03 c0       	rjmp	.+6      	; 0x59e <xEventGroupWaitBits+0xb4>
     598:	c1 2c       	mov	r12, r1
     59a:	d1 2c       	mov	r13, r1
     59c:	76 01       	movw	r14, r12
     59e:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
     5a2:	cd 28       	or	r12, r13
     5a4:	ce 28       	or	r12, r14
     5a6:	cf 28       	or	r12, r15
     5a8:	59 f1       	breq	.+86     	; 0x600 <xEventGroupWaitBits+0x116>
     5aa:	81 11       	cpse	r24, r1
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <xEventGroupWaitBits+0xc6>
     5ae:	f2 d2       	rcall	.+1508   	; 0xb94 <vPortYield>
     5b0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <uxTaskResetEventItemValue>
     5b4:	6b 01       	movw	r12, r22
     5b6:	7c 01       	movw	r14, r24
     5b8:	91 fd       	sbrc	r25, 1
     5ba:	1f c0       	rjmp	.+62     	; 0x5fa <xEventGroupWaitBits+0x110>
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	0f 92       	push	r0
     5c2:	c8 80       	ld	r12, Y
     5c4:	d9 80       	ldd	r13, Y+1	; 0x01
     5c6:	ea 80       	ldd	r14, Y+2	; 0x02
     5c8:	fb 80       	ldd	r15, Y+3	; 0x03
     5ca:	07 2d       	mov	r16, r7
     5cc:	a5 01       	movw	r20, r10
     5ce:	94 01       	movw	r18, r8
     5d0:	c7 01       	movw	r24, r14
     5d2:	b6 01       	movw	r22, r12
     5d4:	56 df       	rcall	.-340    	; 0x482 <prvTestWaitCondition>
     5d6:	88 23       	and	r24, r24
     5d8:	71 f0       	breq	.+28     	; 0x5f6 <xEventGroupWaitBits+0x10c>
     5da:	66 20       	and	r6, r6
     5dc:	61 f0       	breq	.+24     	; 0x5f6 <xEventGroupWaitBits+0x10c>
     5de:	80 94       	com	r8
     5e0:	90 94       	com	r9
     5e2:	a0 94       	com	r10
     5e4:	b0 94       	com	r11
     5e6:	8c 20       	and	r8, r12
     5e8:	9d 20       	and	r9, r13
     5ea:	ae 20       	and	r10, r14
     5ec:	bf 20       	and	r11, r15
     5ee:	88 82       	st	Y, r8
     5f0:	99 82       	std	Y+1, r9	; 0x01
     5f2:	aa 82       	std	Y+2, r10	; 0x02
     5f4:	bb 82       	std	Y+3, r11	; 0x03
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	16 01       	movw	r2, r12
     5fc:	27 01       	movw	r4, r14
     5fe:	55 24       	eor	r5, r5
     600:	c2 01       	movw	r24, r4
     602:	b1 01       	movw	r22, r2
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	bf 90       	pop	r11
     616:	af 90       	pop	r10
     618:	9f 90       	pop	r9
     61a:	8f 90       	pop	r8
     61c:	7f 90       	pop	r7
     61e:	6f 90       	pop	r6
     620:	5f 90       	pop	r5
     622:	4f 90       	pop	r4
     624:	3f 90       	pop	r3
     626:	2f 90       	pop	r2
     628:	08 95       	ret

0000062a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     62a:	4f 92       	push	r4
     62c:	5f 92       	push	r5
     62e:	6f 92       	push	r6
     630:	7f 92       	push	r7
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
     648:	6a 01       	movw	r12, r20
     64a:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     64c:	8c 01       	movw	r16, r24
     64e:	09 5f       	subi	r16, 0xF9	; 249
     650:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     652:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     656:	eb 85       	ldd	r30, Y+11	; 0x0b
     658:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     65a:	88 81       	ld	r24, Y
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	aa 81       	ldd	r26, Y+2	; 0x02
     660:	bb 81       	ldd	r27, Y+3	; 0x03
     662:	c8 2a       	or	r12, r24
     664:	d9 2a       	or	r13, r25
     666:	ea 2a       	or	r14, r26
     668:	fb 2a       	or	r15, r27
     66a:	c8 82       	st	Y, r12
     66c:	d9 82       	std	Y+1, r13	; 0x01
     66e:	ea 82       	std	Y+2, r14	; 0x02
     670:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     672:	c1 2c       	mov	r12, r1
     674:	d1 2c       	mov	r13, r1
     676:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     678:	3d c0       	rjmp	.+122    	; 0x6f4 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     67a:	a4 80       	ldd	r10, Z+4	; 0x04
     67c:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     67e:	80 81       	ld	r24, Z
     680:	91 81       	ldd	r25, Z+1	; 0x01
     682:	a2 81       	ldd	r26, Z+2	; 0x02
     684:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     686:	ac 01       	movw	r20, r24
     688:	bd 01       	movw	r22, r26
     68a:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     68c:	b2 fd       	sbrc	r27, 2
     68e:	0e c0       	rjmp	.+28     	; 0x6ac <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     690:	48 80       	ld	r4, Y
     692:	59 80       	ldd	r5, Y+1	; 0x01
     694:	6a 80       	ldd	r6, Y+2	; 0x02
     696:	7b 80       	ldd	r7, Y+3	; 0x03
     698:	44 22       	and	r4, r20
     69a:	55 22       	and	r5, r21
     69c:	66 22       	and	r6, r22
     69e:	77 22       	and	r7, r23
     6a0:	45 28       	or	r4, r5
     6a2:	46 28       	or	r4, r6
     6a4:	47 28       	or	r4, r7
     6a6:	89 f4       	brne	.+34     	; 0x6ca <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	12 c0       	rjmp	.+36     	; 0x6d0 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     6ac:	48 80       	ld	r4, Y
     6ae:	59 80       	ldd	r5, Y+1	; 0x01
     6b0:	6a 80       	ldd	r6, Y+2	; 0x02
     6b2:	7b 80       	ldd	r7, Y+3	; 0x03
     6b4:	44 22       	and	r4, r20
     6b6:	55 22       	and	r5, r21
     6b8:	66 22       	and	r6, r22
     6ba:	77 22       	and	r7, r23
     6bc:	44 15       	cp	r20, r4
     6be:	55 05       	cpc	r21, r5
     6c0:	66 05       	cpc	r22, r6
     6c2:	77 05       	cpc	r23, r7
     6c4:	21 f0       	breq	.+8      	; 0x6ce <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     6ce:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     6d0:	22 23       	and	r18, r18
     6d2:	71 f0       	breq	.+28     	; 0x6f0 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     6d4:	b0 ff       	sbrs	r27, 0
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     6d8:	c4 2a       	or	r12, r20
     6da:	d5 2a       	or	r13, r21
     6dc:	e6 2a       	or	r14, r22
     6de:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     6e0:	48 81       	ld	r20, Y
     6e2:	59 81       	ldd	r21, Y+1	; 0x01
     6e4:	6a 81       	ldd	r22, Y+2	; 0x02
     6e6:	7b 81       	ldd	r23, Y+3	; 0x03
     6e8:	72 60       	ori	r23, 0x02	; 2
     6ea:	cf 01       	movw	r24, r30
     6ec:	0e 94 2b 14 	call	0x2856	; 0x2856 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6f0:	ea 2d       	mov	r30, r10
     6f2:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6f4:	e0 17       	cp	r30, r16
     6f6:	f1 07       	cpc	r31, r17
     6f8:	09 f0       	breq	.+2      	; 0x6fc <xEventGroupSetBits+0xd2>
     6fa:	bf cf       	rjmp	.-130    	; 0x67a <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     6fc:	c0 94       	com	r12
     6fe:	d0 94       	com	r13
     700:	e0 94       	com	r14
     702:	f0 94       	com	r15
     704:	88 81       	ld	r24, Y
     706:	99 81       	ldd	r25, Y+1	; 0x01
     708:	aa 81       	ldd	r26, Y+2	; 0x02
     70a:	bb 81       	ldd	r27, Y+3	; 0x03
     70c:	c8 22       	and	r12, r24
     70e:	d9 22       	and	r13, r25
     710:	ea 22       	and	r14, r26
     712:	fb 22       	and	r15, r27
     714:	c8 82       	st	Y, r12
     716:	d9 82       	std	Y+1, r13	; 0x01
     718:	ea 82       	std	Y+2, r14	; 0x02
     71a:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     71c:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     720:	68 81       	ld	r22, Y
     722:	79 81       	ldd	r23, Y+1	; 0x01
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	9b 81       	ldd	r25, Y+3	; 0x03
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	bf 90       	pop	r11
     73a:	af 90       	pop	r10
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	5f 90       	pop	r5
     742:	4f 90       	pop	r4
     744:	08 95       	ret

00000746 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     746:	ea e4       	ldi	r30, 0x4A	; 74
     748:	f8 e0       	ldi	r31, 0x08	; 8
     74a:	ae e4       	ldi	r26, 0x4E	; 78
     74c:	b8 e0       	ldi	r27, 0x08	; 8
     74e:	b1 83       	std	Z+1, r27	; 0x01
     750:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     752:	13 82       	std	Z+3, r1	; 0x03
     754:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     756:	ea ec       	ldi	r30, 0xCA	; 202
     758:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     75a:	f0 93 49 08 	sts	0x0849, r31	; 0x800849 <pxEnd+0x1>
     75e:	e0 93 48 08 	sts	0x0848, r30	; 0x800848 <pxEnd>
    pxEnd->xBlockSize = 0;
     762:	13 82       	std	Z+3, r1	; 0x03
     764:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     766:	11 82       	std	Z+1, r1	; 0x01
     768:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     76a:	8c e7       	ldi	r24, 0x7C	; 124
     76c:	9c e0       	ldi	r25, 0x0C	; 12
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	9c 93       	st	X, r25
     772:	8e 93       	st	-X, r24
     774:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     776:	ed 93       	st	X+, r30
     778:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     77a:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <xMinimumEverFreeBytesRemaining+0x1>
     77e:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     782:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <xFreeBytesRemaining+0x1>
     786:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e8       	ldi	r25, 0x80	; 128
     78e:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <__data_end+0x1>
     792:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <__data_end>
     796:	08 95       	ret

00000798 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     79e:	aa e4       	ldi	r26, 0x4A	; 74
     7a0:	b8 e0       	ldi	r27, 0x08	; 8
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <prvInsertBlockIntoFreeList+0xe>
     7a4:	df 01       	movw	r26, r30
     7a6:	ed 91       	ld	r30, X+
     7a8:	fc 91       	ld	r31, X
     7aa:	11 97       	sbiw	r26, 0x01	; 1
     7ac:	ec 17       	cp	r30, r28
     7ae:	fd 07       	cpc	r31, r29
     7b0:	c8 f3       	brcs	.-14     	; 0x7a4 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	8d 91       	ld	r24, X+
     7b6:	9c 91       	ld	r25, X
     7b8:	13 97       	sbiw	r26, 0x03	; 3
     7ba:	9d 01       	movw	r18, r26
     7bc:	28 0f       	add	r18, r24
     7be:	39 1f       	adc	r19, r25
     7c0:	c2 17       	cp	r28, r18
     7c2:	d3 07       	cpc	r29, r19
     7c4:	49 f4       	brne	.+18     	; 0x7d8 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     7c6:	2a 81       	ldd	r18, Y+2	; 0x02
     7c8:	3b 81       	ldd	r19, Y+3	; 0x03
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	13 96       	adiw	r26, 0x03	; 3
     7d0:	9c 93       	st	X, r25
     7d2:	8e 93       	st	-X, r24
     7d4:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     7d6:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	9b 81       	ldd	r25, Y+3	; 0x03
     7dc:	9e 01       	movw	r18, r28
     7de:	28 0f       	add	r18, r24
     7e0:	39 1f       	adc	r19, r25
     7e2:	e2 17       	cp	r30, r18
     7e4:	f3 07       	cpc	r31, r19
     7e6:	c1 f4       	brne	.+48     	; 0x818 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     7e8:	20 91 48 08 	lds	r18, 0x0848	; 0x800848 <pxEnd>
     7ec:	30 91 49 08 	lds	r19, 0x0849	; 0x800849 <pxEnd+0x1>
     7f0:	e2 17       	cp	r30, r18
     7f2:	f3 07       	cpc	r31, r19
     7f4:	71 f0       	breq	.+28     	; 0x812 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7f6:	22 81       	ldd	r18, Z+2	; 0x02
     7f8:	33 81       	ldd	r19, Z+3	; 0x03
     7fa:	82 0f       	add	r24, r18
     7fc:	93 1f       	adc	r25, r19
     7fe:	9b 83       	std	Y+3, r25	; 0x03
     800:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     802:	ed 91       	ld	r30, X+
     804:	fc 91       	ld	r31, X
     806:	11 97       	sbiw	r26, 0x01	; 1
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	99 83       	std	Y+1, r25	; 0x01
     80e:	88 83       	st	Y, r24
     810:	05 c0       	rjmp	.+10     	; 0x81c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     812:	39 83       	std	Y+1, r19	; 0x01
     814:	28 83       	st	Y, r18
     816:	02 c0       	rjmp	.+4      	; 0x81c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     818:	f9 83       	std	Y+1, r31	; 0x01
     81a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     81c:	ca 17       	cp	r28, r26
     81e:	db 07       	cpc	r29, r27
     820:	11 f0       	breq	.+4      	; 0x826 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     822:	cd 93       	st	X+, r28
     824:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     83a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     83e:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxEnd>
     842:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxEnd+0x1>
     846:	89 2b       	or	r24, r25
     848:	09 f4       	brne	.+2      	; 0x84c <pvPortMalloc+0x20>
        {
            prvHeapInit();
     84a:	7d df       	rcall	.-262    	; 0x746 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     84c:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <__data_end>
     850:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <__data_end+0x1>
     854:	80 23       	and	r24, r16
     856:	91 23       	and	r25, r17
     858:	89 2b       	or	r24, r25
     85a:	09 f0       	breq	.+2      	; 0x85e <pvPortMalloc+0x32>
     85c:	76 c0       	rjmp	.+236    	; 0x94a <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     85e:	01 15       	cp	r16, r1
     860:	11 05       	cpc	r17, r1
     862:	49 f0       	breq	.+18     	; 0x876 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     864:	c8 01       	movw	r24, r16
     866:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     868:	08 17       	cp	r16, r24
     86a:	19 07       	cpc	r17, r25
     86c:	18 f0       	brcs	.+6      	; 0x874 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     86e:	00 e0       	ldi	r16, 0x00	; 0
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	01 c0       	rjmp	.+2      	; 0x876 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     874:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     876:	01 15       	cp	r16, r1
     878:	11 05       	cpc	r17, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <pvPortMalloc+0x52>
     87c:	69 c0       	rjmp	.+210    	; 0x950 <pvPortMalloc+0x124>
     87e:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xFreeBytesRemaining>
     882:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xFreeBytesRemaining+0x1>
     886:	80 17       	cp	r24, r16
     888:	91 07       	cpc	r25, r17
     88a:	08 f4       	brcc	.+2      	; 0x88e <pvPortMalloc+0x62>
     88c:	64 c0       	rjmp	.+200    	; 0x956 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     88e:	c0 91 4a 08 	lds	r28, 0x084A	; 0x80084a <xStart>
     892:	d0 91 4b 08 	lds	r29, 0x084B	; 0x80084b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     896:	ea e4       	ldi	r30, 0x4A	; 74
     898:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     89c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     89e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	9b 81       	ldd	r25, Y+3	; 0x03
     8a4:	80 17       	cp	r24, r16
     8a6:	91 07       	cpc	r25, r17
     8a8:	20 f4       	brcc	.+8      	; 0x8b2 <pvPortMalloc+0x86>
     8aa:	88 81       	ld	r24, Y
     8ac:	99 81       	ldd	r25, Y+1	; 0x01
     8ae:	00 97       	sbiw	r24, 0x00	; 0
     8b0:	a9 f7       	brne	.-22     	; 0x89c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     8b2:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxEnd>
     8b6:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxEnd+0x1>
     8ba:	c8 17       	cp	r28, r24
     8bc:	d9 07       	cpc	r29, r25
     8be:	09 f4       	brne	.+2      	; 0x8c2 <pvPortMalloc+0x96>
     8c0:	4d c0       	rjmp	.+154    	; 0x95c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     8c2:	e0 80       	ld	r14, Z
     8c4:	f1 80       	ldd	r15, Z+1	; 0x01
     8c6:	84 e0       	ldi	r24, 0x04	; 4
     8c8:	e8 0e       	add	r14, r24
     8ca:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     8cc:	88 81       	ld	r24, Y
     8ce:	99 81       	ldd	r25, Y+1	; 0x01
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     8d4:	2a 81       	ldd	r18, Y+2	; 0x02
     8d6:	3b 81       	ldd	r19, Y+3	; 0x03
     8d8:	20 1b       	sub	r18, r16
     8da:	31 0b       	sbc	r19, r17
     8dc:	29 30       	cpi	r18, 0x09	; 9
     8de:	31 05       	cpc	r19, r1
     8e0:	48 f0       	brcs	.+18     	; 0x8f4 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8e2:	ce 01       	movw	r24, r28
     8e4:	80 0f       	add	r24, r16
     8e6:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8e8:	fc 01       	movw	r30, r24
     8ea:	33 83       	std	Z+3, r19	; 0x03
     8ec:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     8ee:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     8f0:	0a 83       	std	Y+2, r16	; 0x02
     8f2:	52 df       	rcall	.-348    	; 0x798 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     8f4:	2a 81       	ldd	r18, Y+2	; 0x02
     8f6:	3b 81       	ldd	r19, Y+3	; 0x03
     8f8:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xFreeBytesRemaining>
     8fc:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xFreeBytesRemaining+0x1>
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <xFreeBytesRemaining+0x1>
     908:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     90c:	40 91 44 08 	lds	r20, 0x0844	; 0x800844 <xMinimumEverFreeBytesRemaining>
     910:	50 91 45 08 	lds	r21, 0x0845	; 0x800845 <xMinimumEverFreeBytesRemaining+0x1>
     914:	84 17       	cp	r24, r20
     916:	95 07       	cpc	r25, r21
     918:	20 f4       	brcc	.+8      	; 0x922 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     91a:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <xMinimumEverFreeBytesRemaining+0x1>
     91e:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     922:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <__data_end>
     926:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <__data_end+0x1>
     92a:	28 2b       	or	r18, r24
     92c:	39 2b       	or	r19, r25
     92e:	3b 83       	std	Y+3, r19	; 0x03
     930:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     932:	19 82       	std	Y+1, r1	; 0x01
     934:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     936:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <xNumberOfSuccessfulAllocations>
     93a:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <xNumberOfSuccessfulAllocations+0x1>
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	90 93 43 08 	sts	0x0843, r25	; 0x800843 <xNumberOfSuccessfulAllocations+0x1>
     944:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <xNumberOfSuccessfulAllocations>
     948:	0b c0       	rjmp	.+22     	; 0x960 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     94a:	e1 2c       	mov	r14, r1
     94c:	f1 2c       	mov	r15, r1
     94e:	08 c0       	rjmp	.+16     	; 0x960 <pvPortMalloc+0x134>
     950:	e1 2c       	mov	r14, r1
     952:	f1 2c       	mov	r15, r1
     954:	05 c0       	rjmp	.+10     	; 0x960 <pvPortMalloc+0x134>
     956:	e1 2c       	mov	r14, r1
     958:	f1 2c       	mov	r15, r1
     95a:	02 c0       	rjmp	.+4      	; 0x960 <pvPortMalloc+0x134>
     95c:	e1 2c       	mov	r14, r1
     95e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     960:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     964:	e1 14       	cp	r14, r1
     966:	f1 04       	cpc	r15, r1
     968:	11 f4       	brne	.+4      	; 0x96e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     96a:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     96e:	c7 01       	movw	r24, r14
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	08 95       	ret

0000097e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	91 f1       	breq	.+100    	; 0x9ee <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     98a:	ec 01       	movw	r28, r24
     98c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     98e:	4a 81       	ldd	r20, Y+2	; 0x02
     990:	5b 81       	ldd	r21, Y+3	; 0x03
     992:	20 91 3e 08 	lds	r18, 0x083E	; 0x80083e <__data_end>
     996:	30 91 3f 08 	lds	r19, 0x083F	; 0x80083f <__data_end+0x1>
     99a:	ba 01       	movw	r22, r20
     99c:	62 23       	and	r22, r18
     99e:	73 23       	and	r23, r19
     9a0:	67 2b       	or	r22, r23
     9a2:	29 f1       	breq	.+74     	; 0x9ee <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     9a4:	68 81       	ld	r22, Y
     9a6:	79 81       	ldd	r23, Y+1	; 0x01
     9a8:	67 2b       	or	r22, r23
     9aa:	09 f5       	brne	.+66     	; 0x9ee <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     9ac:	20 95       	com	r18
     9ae:	30 95       	com	r19
     9b0:	24 23       	and	r18, r20
     9b2:	35 23       	and	r19, r21
     9b4:	3b 83       	std	Y+3, r19	; 0x03
     9b6:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     9b8:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	9b 81       	ldd	r25, Y+3	; 0x03
     9c0:	20 91 46 08 	lds	r18, 0x0846	; 0x800846 <xFreeBytesRemaining>
     9c4:	30 91 47 08 	lds	r19, 0x0847	; 0x800847 <xFreeBytesRemaining+0x1>
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <xFreeBytesRemaining+0x1>
     9d0:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     9d4:	ce 01       	movw	r24, r28
     9d6:	e0 de       	rcall	.-576    	; 0x798 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     9d8:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xNumberOfSuccessfulFrees>
     9dc:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <xNumberOfSuccessfulFrees+0x1>
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xNumberOfSuccessfulFrees+0x1>
     9e6:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     9ea:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9f8:	fc 01       	movw	r30, r24
     9fa:	03 96       	adiw	r24, 0x03	; 3
     9fc:	92 83       	std	Z+2, r25	; 0x02
     9fe:	81 83       	std	Z+1, r24	; 0x01
     a00:	4f ef       	ldi	r20, 0xFF	; 255
     a02:	5f ef       	ldi	r21, 0xFF	; 255
     a04:	ba 01       	movw	r22, r20
     a06:	43 83       	std	Z+3, r20	; 0x03
     a08:	54 83       	std	Z+4, r21	; 0x04
     a0a:	65 83       	std	Z+5, r22	; 0x05
     a0c:	76 83       	std	Z+6, r23	; 0x06
     a0e:	90 87       	std	Z+8, r25	; 0x08
     a10:	87 83       	std	Z+7, r24	; 0x07
     a12:	92 87       	std	Z+10, r25	; 0x0a
     a14:	81 87       	std	Z+9, r24	; 0x09
     a16:	10 82       	st	Z, r1
     a18:	08 95       	ret

00000a1a <vListInitialiseItem>:
     a1a:	fc 01       	movw	r30, r24
     a1c:	13 86       	std	Z+11, r1	; 0x0b
     a1e:	12 86       	std	Z+10, r1	; 0x0a
     a20:	08 95       	ret

00000a22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a2c:	08 81       	ld	r16, Y
     a2e:	19 81       	ldd	r17, Y+1	; 0x01
     a30:	2a 81       	ldd	r18, Y+2	; 0x02
     a32:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a34:	0f 3f       	cpi	r16, 0xFF	; 255
     a36:	4f ef       	ldi	r20, 0xFF	; 255
     a38:	14 07       	cpc	r17, r20
     a3a:	24 07       	cpc	r18, r20
     a3c:	34 07       	cpc	r19, r20
     a3e:	21 f4       	brne	.+8      	; 0xa48 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a40:	fc 01       	movw	r30, r24
     a42:	a1 85       	ldd	r26, Z+9	; 0x09
     a44:	b2 85       	ldd	r27, Z+10	; 0x0a
     a46:	11 c0       	rjmp	.+34     	; 0xa6a <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a48:	dc 01       	movw	r26, r24
     a4a:	13 96       	adiw	r26, 0x03	; 3
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <vListInsert+0x2e>
     a4e:	df 01       	movw	r26, r30
     a50:	14 96       	adiw	r26, 0x04	; 4
     a52:	ed 91       	ld	r30, X+
     a54:	fc 91       	ld	r31, X
     a56:	15 97       	sbiw	r26, 0x05	; 5
     a58:	40 81       	ld	r20, Z
     a5a:	51 81       	ldd	r21, Z+1	; 0x01
     a5c:	62 81       	ldd	r22, Z+2	; 0x02
     a5e:	73 81       	ldd	r23, Z+3	; 0x03
     a60:	04 17       	cp	r16, r20
     a62:	15 07       	cpc	r17, r21
     a64:	26 07       	cpc	r18, r22
     a66:	37 07       	cpc	r19, r23
     a68:	90 f7       	brcc	.-28     	; 0xa4e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a6a:	14 96       	adiw	r26, 0x04	; 4
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	15 97       	sbiw	r26, 0x05	; 5
     a72:	fd 83       	std	Y+5, r31	; 0x05
     a74:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a76:	d7 83       	std	Z+7, r29	; 0x07
     a78:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a7a:	bf 83       	std	Y+7, r27	; 0x07
     a7c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a7e:	15 96       	adiw	r26, 0x05	; 5
     a80:	dc 93       	st	X, r29
     a82:	ce 93       	st	-X, r28
     a84:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a86:	9b 87       	std	Y+11, r25	; 0x0b
     a88:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 81       	ld	r18, Z
     a8e:	2f 5f       	subi	r18, 0xFF	; 255
     a90:	20 83       	st	Z, r18
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     aa2:	a2 85       	ldd	r26, Z+10	; 0x0a
     aa4:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     aa6:	c4 81       	ldd	r28, Z+4	; 0x04
     aa8:	d5 81       	ldd	r29, Z+5	; 0x05
     aaa:	86 81       	ldd	r24, Z+6	; 0x06
     aac:	97 81       	ldd	r25, Z+7	; 0x07
     aae:	9f 83       	std	Y+7, r25	; 0x07
     ab0:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ab2:	c6 81       	ldd	r28, Z+6	; 0x06
     ab4:	d7 81       	ldd	r29, Z+7	; 0x07
     ab6:	84 81       	ldd	r24, Z+4	; 0x04
     ab8:	95 81       	ldd	r25, Z+5	; 0x05
     aba:	9d 83       	std	Y+5, r25	; 0x05
     abc:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     abe:	11 96       	adiw	r26, 0x01	; 1
     ac0:	8d 91       	ld	r24, X+
     ac2:	9c 91       	ld	r25, X
     ac4:	12 97       	sbiw	r26, 0x02	; 2
     ac6:	e8 17       	cp	r30, r24
     ac8:	f9 07       	cpc	r31, r25
     aca:	31 f4       	brne	.+12     	; 0xad8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     acc:	86 81       	ldd	r24, Z+6	; 0x06
     ace:	97 81       	ldd	r25, Z+7	; 0x07
     ad0:	12 96       	adiw	r26, 0x02	; 2
     ad2:	9c 93       	st	X, r25
     ad4:	8e 93       	st	-X, r24
     ad6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ad8:	13 86       	std	Z+11, r1	; 0x0b
     ada:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     adc:	8c 91       	ld	r24, X
     ade:	81 50       	subi	r24, 0x01	; 1
     ae0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ae2:	8c 91       	ld	r24, X
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     aea:	a8 95       	wdr
     aec:	90 ec       	ldi	r25, 0xC0	; 192
     aee:	88 e1       	ldi	r24, 0x18	; 24
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	a8 95       	wdr
     af6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     b00:	08 95       	ret

00000b02 <pxPortInitialiseStack>:
     b02:	fc 01       	movw	r30, r24
     b04:	60 83       	st	Z, r22
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	70 83       	st	Z, r23
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	10 82       	st	Z, r1
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	10 82       	st	Z, r1
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	20 e8       	ldi	r18, 0x80	; 128
     b16:	20 83       	st	Z, r18
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	10 82       	st	Z, r1
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	10 82       	st	Z, r1
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	10 82       	st	Z, r1
     b24:	77 97       	sbiw	r30, 0x17	; 23
     b26:	40 83       	st	Z, r20
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	50 83       	st	Z, r21
     b2c:	86 97       	sbiw	r24, 0x26	; 38
     b2e:	08 95       	ret

00000b30 <xPortStartScheduler>:
     b30:	dc df       	rcall	.-72     	; 0xaea <prvSetupTimerInterrupt>
     b32:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
     b36:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
     b3a:	cd 91       	ld	r28, X+
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	dd 91       	ld	r29, X+
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	bf 90       	pop	r11
     b6c:	af 90       	pop	r10
     b6e:	9f 90       	pop	r9
     b70:	8f 90       	pop	r8
     b72:	7f 90       	pop	r7
     b74:	6f 90       	pop	r6
     b76:	5f 90       	pop	r5
     b78:	4f 90       	pop	r4
     b7a:	3f 90       	pop	r3
     b7c:	2f 90       	pop	r2
     b7e:	1f 90       	pop	r1
     b80:	0f 90       	pop	r0
     b82:	0c be       	out	0x3c, r0	; 60
     b84:	0f 90       	pop	r0
     b86:	0b be       	out	0x3b, r0	; 59
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	08 95       	ret
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	08 95       	ret

00000b94 <vPortYield>:
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	0f 92       	push	r0
     b9c:	0b b6       	in	r0, 0x3b	; 59
     b9e:	0f 92       	push	r0
     ba0:	0c b6       	in	r0, 0x3c	; 60
     ba2:	0f 92       	push	r0
     ba4:	1f 92       	push	r1
     ba6:	11 24       	eor	r1, r1
     ba8:	2f 92       	push	r2
     baa:	3f 92       	push	r3
     bac:	4f 92       	push	r4
     bae:	5f 92       	push	r5
     bb0:	6f 92       	push	r6
     bb2:	7f 92       	push	r7
     bb4:	8f 92       	push	r8
     bb6:	9f 92       	push	r9
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	2f 93       	push	r18
     bca:	3f 93       	push	r19
     bcc:	4f 93       	push	r20
     bce:	5f 93       	push	r21
     bd0:	6f 93       	push	r22
     bd2:	7f 93       	push	r23
     bd4:	8f 93       	push	r24
     bd6:	9f 93       	push	r25
     bd8:	af 93       	push	r26
     bda:	bf 93       	push	r27
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ef 93       	push	r30
     be2:	ff 93       	push	r31
     be4:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
     be8:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
     bec:	0d b6       	in	r0, 0x3d	; 61
     bee:	0d 92       	st	X+, r0
     bf0:	0e b6       	in	r0, 0x3e	; 62
     bf2:	0d 92       	st	X+, r0
     bf4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <vTaskSwitchContext>
     bf8:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
     bfc:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
     c00:	cd 91       	ld	r28, X+
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	dd 91       	ld	r29, X+
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	bf 91       	pop	r27
     c12:	af 91       	pop	r26
     c14:	9f 91       	pop	r25
     c16:	8f 91       	pop	r24
     c18:	7f 91       	pop	r23
     c1a:	6f 91       	pop	r22
     c1c:	5f 91       	pop	r21
     c1e:	4f 91       	pop	r20
     c20:	3f 91       	pop	r19
     c22:	2f 91       	pop	r18
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	bf 90       	pop	r11
     c32:	af 90       	pop	r10
     c34:	9f 90       	pop	r9
     c36:	8f 90       	pop	r8
     c38:	7f 90       	pop	r7
     c3a:	6f 90       	pop	r6
     c3c:	5f 90       	pop	r5
     c3e:	4f 90       	pop	r4
     c40:	3f 90       	pop	r3
     c42:	2f 90       	pop	r2
     c44:	1f 90       	pop	r1
     c46:	0f 90       	pop	r0
     c48:	0c be       	out	0x3c, r0	; 60
     c4a:	0f 90       	pop	r0
     c4c:	0b be       	out	0x3b, r0	; 59
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	08 95       	ret

00000c56 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	0f 92       	push	r0
     c5e:	0b b6       	in	r0, 0x3b	; 59
     c60:	0f 92       	push	r0
     c62:	0c b6       	in	r0, 0x3c	; 60
     c64:	0f 92       	push	r0
     c66:	1f 92       	push	r1
     c68:	11 24       	eor	r1, r1
     c6a:	2f 92       	push	r2
     c6c:	3f 92       	push	r3
     c6e:	4f 92       	push	r4
     c70:	5f 92       	push	r5
     c72:	6f 92       	push	r6
     c74:	7f 92       	push	r7
     c76:	8f 92       	push	r8
     c78:	9f 92       	push	r9
     c7a:	af 92       	push	r10
     c7c:	bf 92       	push	r11
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	2f 93       	push	r18
     c8c:	3f 93       	push	r19
     c8e:	4f 93       	push	r20
     c90:	5f 93       	push	r21
     c92:	6f 93       	push	r22
     c94:	7f 93       	push	r23
     c96:	8f 93       	push	r24
     c98:	9f 93       	push	r25
     c9a:	af 93       	push	r26
     c9c:	bf 93       	push	r27
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
     caa:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
     cae:	0d b6       	in	r0, 0x3d	; 61
     cb0:	0d 92       	st	X+, r0
     cb2:	0e b6       	in	r0, 0x3e	; 62
     cb4:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     cb6:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     cb8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <xTaskIncrementTick>
     cbc:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     cbe:	0e 94 74 12 	call	0x24e8	; 0x24e8 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     cc2:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
     cc6:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
     cca:	cd 91       	ld	r28, X+
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	dd 91       	ld	r29, X+
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	7f 90       	pop	r7
     d04:	6f 90       	pop	r6
     d06:	5f 90       	pop	r5
     d08:	4f 90       	pop	r4
     d0a:	3f 90       	pop	r3
     d0c:	2f 90       	pop	r2
     d0e:	1f 90       	pop	r1
     d10:	0f 90       	pop	r0
     d12:	0c be       	out	0x3c, r0	; 60
     d14:	0f 90       	pop	r0
     d16:	0b be       	out	0x3b, r0	; 59
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d1e:	08 95       	ret

00000d20 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d20:	9a df       	rcall	.-204    	; 0xc56 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d22:	18 95       	reti

00000d24 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d24:	dc 01       	movw	r26, r24
     d26:	53 96       	adiw	r26, 0x13	; 19
     d28:	2c 91       	ld	r18, X
     d2a:	53 97       	sbiw	r26, 0x13	; 19
     d2c:	22 23       	and	r18, r18
     d2e:	41 f0       	breq	.+16     	; 0xd40 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     d30:	5a 96       	adiw	r26, 0x1a	; 26
     d32:	ed 91       	ld	r30, X+
     d34:	fc 91       	ld	r31, X
     d36:	5b 97       	sbiw	r26, 0x1b	; 27
     d38:	90 81       	ld	r25, Z
     d3a:	8a e0       	ldi	r24, 0x0A	; 10
     d3c:	89 1b       	sub	r24, r25
     d3e:	08 95       	ret
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	08 95       	ret

00000d44 <prvIsQueueEmpty>:
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	0f 92       	push	r0
     d4a:	fc 01       	movw	r30, r24
     d4c:	86 8d       	ldd	r24, Z+30	; 0x1e
     d4e:	81 11       	cpse	r24, r1
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <prvIsQueueEmpty+0x12>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <prvIsQueueEmpty+0x14>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	08 95       	ret

00000d5e <prvIsQueueFull>:
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	0f 92       	push	r0
     d64:	fc 01       	movw	r30, r24
     d66:	26 8d       	ldd	r18, Z+30	; 0x1e
     d68:	87 8d       	ldd	r24, Z+31	; 0x1f
     d6a:	28 13       	cpse	r18, r24
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <prvIsQueueFull+0x14>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <prvIsQueueFull+0x16>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	08 95       	ret

00000d7a <prvCopyDataToQueue>:
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	ec 01       	movw	r28, r24
     d84:	04 2f       	mov	r16, r20
     d86:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d88:	48 a1       	ldd	r20, Y+32	; 0x20
     d8a:	41 11       	cpse	r20, r1
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <prvCopyDataToQueue+0x2c>
     d8e:	88 81       	ld	r24, Y
     d90:	99 81       	ldd	r25, Y+1	; 0x01
     d92:	89 2b       	or	r24, r25
     d94:	09 f0       	breq	.+2      	; 0xd98 <prvCopyDataToQueue+0x1e>
     d96:	42 c0       	rjmp	.+132    	; 0xe1c <prvCopyDataToQueue+0xa2>
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	9d 81       	ldd	r25, Y+5	; 0x05
     d9c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <xTaskPriorityDisinherit>
     da0:	1d 82       	std	Y+5, r1	; 0x05
     da2:	1c 82       	std	Y+4, r1	; 0x04
     da4:	42 c0       	rjmp	.+132    	; 0xe2a <prvCopyDataToQueue+0xb0>
     da6:	01 11       	cpse	r16, r1
     da8:	17 c0       	rjmp	.+46     	; 0xdd8 <prvCopyDataToQueue+0x5e>
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
     db0:	0e 94 14 30 	call	0x6028	; 0x6028 <memcpy>
     db4:	28 a1       	ldd	r18, Y+32	; 0x20
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	82 0f       	add	r24, r18
     dbc:	91 1d       	adc	r25, r1
     dbe:	9b 83       	std	Y+3, r25	; 0x03
     dc0:	8a 83       	std	Y+2, r24	; 0x02
     dc2:	2c 81       	ldd	r18, Y+4	; 0x04
     dc4:	3d 81       	ldd	r19, Y+5	; 0x05
     dc6:	82 17       	cp	r24, r18
     dc8:	93 07       	cpc	r25, r19
     dca:	50 f1       	brcs	.+84     	; 0xe20 <prvCopyDataToQueue+0xa6>
     dcc:	88 81       	ld	r24, Y
     dce:	99 81       	ldd	r25, Y+1	; 0x01
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	29 c0       	rjmp	.+82     	; 0xe2a <prvCopyDataToQueue+0xb0>
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	9f 81       	ldd	r25, Y+7	; 0x07
     dde:	0e 94 14 30 	call	0x6028	; 0x6028 <memcpy>
     de2:	88 a1       	ldd	r24, Y+32	; 0x20
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	91 95       	neg	r25
     de8:	81 95       	neg	r24
     dea:	91 09       	sbc	r25, r1
     dec:	2e 81       	ldd	r18, Y+6	; 0x06
     dee:	3f 81       	ldd	r19, Y+7	; 0x07
     df0:	28 0f       	add	r18, r24
     df2:	39 1f       	adc	r19, r25
     df4:	3f 83       	std	Y+7, r19	; 0x07
     df6:	2e 83       	std	Y+6, r18	; 0x06
     df8:	48 81       	ld	r20, Y
     dfa:	59 81       	ldd	r21, Y+1	; 0x01
     dfc:	24 17       	cp	r18, r20
     dfe:	35 07       	cpc	r19, r21
     e00:	30 f4       	brcc	.+12     	; 0xe0e <prvCopyDataToQueue+0x94>
     e02:	2c 81       	ldd	r18, Y+4	; 0x04
     e04:	3d 81       	ldd	r19, Y+5	; 0x05
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	9f 83       	std	Y+7, r25	; 0x07
     e0c:	8e 83       	std	Y+6, r24	; 0x06
     e0e:	02 30       	cpi	r16, 0x02	; 2
     e10:	49 f4       	brne	.+18     	; 0xe24 <prvCopyDataToQueue+0xaa>
     e12:	11 23       	and	r17, r17
     e14:	49 f0       	breq	.+18     	; 0xe28 <prvCopyDataToQueue+0xae>
     e16:	11 50       	subi	r17, 0x01	; 1
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <prvCopyDataToQueue+0xb0>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <prvCopyDataToQueue+0xb0>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <prvCopyDataToQueue+0xb0>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <prvCopyDataToQueue+0xb0>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	1f 5f       	subi	r17, 0xFF	; 255
     e2c:	1e 8f       	std	Y+30, r17	; 0x1e
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <prvCopyDataFromQueue>:
     e38:	fc 01       	movw	r30, r24
     e3a:	40 a1       	ldd	r20, Z+32	; 0x20
     e3c:	44 23       	and	r20, r20
     e3e:	a9 f0       	breq	.+42     	; 0xe6a <prvCopyDataFromQueue+0x32>
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	26 81       	ldd	r18, Z+6	; 0x06
     e44:	37 81       	ldd	r19, Z+7	; 0x07
     e46:	24 0f       	add	r18, r20
     e48:	35 1f       	adc	r19, r21
     e4a:	37 83       	std	Z+7, r19	; 0x07
     e4c:	26 83       	std	Z+6, r18	; 0x06
     e4e:	84 81       	ldd	r24, Z+4	; 0x04
     e50:	95 81       	ldd	r25, Z+5	; 0x05
     e52:	28 17       	cp	r18, r24
     e54:	39 07       	cpc	r19, r25
     e56:	20 f0       	brcs	.+8      	; 0xe60 <prvCopyDataFromQueue+0x28>
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	97 83       	std	Z+7, r25	; 0x07
     e5e:	86 83       	std	Z+6, r24	; 0x06
     e60:	cb 01       	movw	r24, r22
     e62:	66 81       	ldd	r22, Z+6	; 0x06
     e64:	77 81       	ldd	r23, Z+7	; 0x07
     e66:	0c 94 14 30 	jmp	0x6028	; 0x6028 <memcpy>
     e6a:	08 95       	ret

00000e6c <prvUnlockQueue>:
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ec 01       	movw	r28, r24
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	0f 92       	push	r0
     e7a:	1a a1       	ldd	r17, Y+34	; 0x22
     e7c:	0b c0       	rjmp	.+22     	; 0xe94 <prvUnlockQueue+0x28>
     e7e:	8b 89       	ldd	r24, Y+19	; 0x13
     e80:	88 23       	and	r24, r24
     e82:	51 f0       	breq	.+20     	; 0xe98 <prvUnlockQueue+0x2c>
     e84:	ce 01       	movw	r24, r28
     e86:	43 96       	adiw	r24, 0x13	; 19
     e88:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <xTaskRemoveFromEventList>
     e8c:	81 11       	cpse	r24, r1
     e8e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <vTaskMissedYield>
     e92:	11 50       	subi	r17, 0x01	; 1
     e94:	11 16       	cp	r1, r17
     e96:	9c f3       	brlt	.-26     	; 0xe7e <prvUnlockQueue+0x12>
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	8a a3       	std	Y+34, r24	; 0x22
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	0f 92       	push	r0
     ea6:	19 a1       	ldd	r17, Y+33	; 0x21
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <prvUnlockQueue+0x54>
     eaa:	88 85       	ldd	r24, Y+8	; 0x08
     eac:	88 23       	and	r24, r24
     eae:	51 f0       	breq	.+20     	; 0xec4 <prvUnlockQueue+0x58>
     eb0:	ce 01       	movw	r24, r28
     eb2:	08 96       	adiw	r24, 0x08	; 8
     eb4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <xTaskRemoveFromEventList>
     eb8:	81 11       	cpse	r24, r1
     eba:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <vTaskMissedYield>
     ebe:	11 50       	subi	r17, 0x01	; 1
     ec0:	11 16       	cp	r1, r17
     ec2:	9c f3       	brlt	.-26     	; 0xeaa <prvUnlockQueue+0x3e>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	89 a3       	std	Y+33, r24	; 0x21
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	08 95       	ret

00000ed4 <xQueueGenericReset>:
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	ec 01       	movw	r28, r24
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	0f 92       	push	r0
     ee0:	e8 81       	ld	r30, Y
     ee2:	f9 81       	ldd	r31, Y+1	; 0x01
     ee4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ee6:	28 a1       	ldd	r18, Y+32	; 0x20
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	82 9f       	mul	r24, r18
     eee:	a0 01       	movw	r20, r0
     ef0:	83 9f       	mul	r24, r19
     ef2:	50 0d       	add	r21, r0
     ef4:	92 9f       	mul	r25, r18
     ef6:	50 0d       	add	r21, r0
     ef8:	11 24       	eor	r1, r1
     efa:	4e 0f       	add	r20, r30
     efc:	5f 1f       	adc	r21, r31
     efe:	5d 83       	std	Y+5, r21	; 0x05
     f00:	4c 83       	std	Y+4, r20	; 0x04
     f02:	1e 8e       	std	Y+30, r1	; 0x1e
     f04:	fb 83       	std	Y+3, r31	; 0x03
     f06:	ea 83       	std	Y+2, r30	; 0x02
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	28 9f       	mul	r18, r24
     f0c:	a0 01       	movw	r20, r0
     f0e:	29 9f       	mul	r18, r25
     f10:	50 0d       	add	r21, r0
     f12:	38 9f       	mul	r19, r24
     f14:	50 0d       	add	r21, r0
     f16:	11 24       	eor	r1, r1
     f18:	cf 01       	movw	r24, r30
     f1a:	84 0f       	add	r24, r20
     f1c:	95 1f       	adc	r25, r21
     f1e:	9f 83       	std	Y+7, r25	; 0x07
     f20:	8e 83       	std	Y+6, r24	; 0x06
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	89 a3       	std	Y+33, r24	; 0x21
     f26:	8a a3       	std	Y+34, r24	; 0x22
     f28:	61 11       	cpse	r22, r1
     f2a:	0b c0       	rjmp	.+22     	; 0xf42 <xQueueGenericReset+0x6e>
     f2c:	88 85       	ldd	r24, Y+8	; 0x08
     f2e:	88 23       	and	r24, r24
     f30:	71 f0       	breq	.+28     	; 0xf4e <xQueueGenericReset+0x7a>
     f32:	ce 01       	movw	r24, r28
     f34:	08 96       	adiw	r24, 0x08	; 8
     f36:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <xTaskRemoveFromEventList>
     f3a:	88 23       	and	r24, r24
     f3c:	41 f0       	breq	.+16     	; 0xf4e <xQueueGenericReset+0x7a>
     f3e:	2a de       	rcall	.-940    	; 0xb94 <vPortYield>
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <xQueueGenericReset+0x7a>
     f42:	ce 01       	movw	r24, r28
     f44:	08 96       	adiw	r24, 0x08	; 8
     f46:	58 dd       	rcall	.-1360   	; 0x9f8 <vListInitialise>
     f48:	ce 01       	movw	r24, r28
     f4a:	43 96       	adiw	r24, 0x13	; 19
     f4c:	55 dd       	rcall	.-1366   	; 0x9f8 <vListInitialise>
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <prvInitialiseNewQueue>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	f8 01       	movw	r30, r16
     f60:	61 11       	cpse	r22, r1
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <prvInitialiseNewQueue+0x10>
     f64:	11 83       	std	Z+1, r17	; 0x01
     f66:	00 83       	st	Z, r16
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <prvInitialiseNewQueue+0x14>
     f6a:	51 83       	std	Z+1, r21	; 0x01
     f6c:	40 83       	st	Z, r20
     f6e:	87 8f       	std	Z+31, r24	; 0x1f
     f70:	60 a3       	std	Z+32, r22	; 0x20
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	cf 01       	movw	r24, r30
     f76:	ae df       	rcall	.-164    	; 0xed4 <xQueueGenericReset>
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <xQueueGenericCreate>:
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	f8 2e       	mov	r15, r24
     f8e:	e6 2e       	mov	r14, r22
     f90:	d4 2e       	mov	r13, r20
     f92:	86 9f       	mul	r24, r22
     f94:	c0 01       	movw	r24, r0
     f96:	11 24       	eor	r1, r1
     f98:	83 96       	adiw	r24, 0x23	; 35
     f9a:	48 dc       	rcall	.-1904   	; 0x82c <pvPortMalloc>
     f9c:	ec 01       	movw	r28, r24
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	41 f0       	breq	.+16     	; 0xfb2 <xQueueGenericCreate+0x34>
     fa2:	8c 01       	movw	r16, r24
     fa4:	2d 2d       	mov	r18, r13
     fa6:	ac 01       	movw	r20, r24
     fa8:	4d 5d       	subi	r20, 0xDD	; 221
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	6e 2d       	mov	r22, r14
     fae:	8f 2d       	mov	r24, r15
     fb0:	d4 df       	rcall	.-88     	; 0xf5a <prvInitialiseNewQueue>
     fb2:	ce 01       	movw	r24, r28
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	08 95       	ret

00000fc4 <xQueueGenericSend>:
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	29 97       	sbiw	r28, 0x09	; 9
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	7c 01       	movw	r14, r24
     fe6:	6b 01       	movw	r12, r22
     fe8:	2e 83       	std	Y+6, r18	; 0x06
     fea:	3f 83       	std	Y+7, r19	; 0x07
     fec:	48 87       	std	Y+8, r20	; 0x08
     fee:	59 87       	std	Y+9, r21	; 0x09
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	0f 92       	push	r0
     ff8:	f7 01       	movw	r30, r14
     ffa:	96 8d       	ldd	r25, Z+30	; 0x1e
     ffc:	87 8d       	ldd	r24, Z+31	; 0x1f
     ffe:	98 17       	cp	r25, r24
    1000:	10 f0       	brcs	.+4      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1002:	02 30       	cpi	r16, 0x02	; 2
    1004:	b1 f4       	brne	.+44     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1006:	40 2f       	mov	r20, r16
    1008:	b6 01       	movw	r22, r12
    100a:	c7 01       	movw	r24, r14
    100c:	b6 de       	rcall	.-660    	; 0xd7a <prvCopyDataToQueue>
    100e:	f7 01       	movw	r30, r14
    1010:	93 89       	ldd	r25, Z+19	; 0x13
    1012:	99 23       	and	r25, r25
    1014:	41 f0       	breq	.+16     	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    1016:	c7 01       	movw	r24, r14
    1018:	43 96       	adiw	r24, 0x13	; 19
    101a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <xTaskRemoveFromEventList>
    101e:	88 23       	and	r24, r24
    1020:	21 f0       	breq	.+8      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1022:	b8 dd       	rcall	.-1168   	; 0xb94 <vPortYield>
    1024:	02 c0       	rjmp	.+4      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1026:	81 11       	cpse	r24, r1
    1028:	b5 dd       	rcall	.-1174   	; 0xb94 <vPortYield>
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	4c c0       	rjmp	.+152    	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
    1032:	8e 81       	ldd	r24, Y+6	; 0x06
    1034:	9f 81       	ldd	r25, Y+7	; 0x07
    1036:	a8 85       	ldd	r26, Y+8	; 0x08
    1038:	b9 85       	ldd	r27, Y+9	; 0x09
    103a:	89 2b       	or	r24, r25
    103c:	8a 2b       	or	r24, r26
    103e:	8b 2b       	or	r24, r27
    1040:	21 f4       	brne	.+8      	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	40 c0       	rjmp	.+128    	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
    104a:	11 11       	cpse	r17, r1
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 db 14 	call	0x29b6	; 0x29b6 <vTaskInternalSetTimeOutState>
    1056:	11 e0       	ldi	r17, 0x01	; 1
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	a9 d7       	rcall	.+3922   	; 0x1fb0 <vTaskSuspendAll>
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	0f 92       	push	r0
    1064:	f7 01       	movw	r30, r14
    1066:	81 a1       	ldd	r24, Z+33	; 0x21
    1068:	8f 3f       	cpi	r24, 0xFF	; 255
    106a:	09 f4       	brne	.+2      	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
    106c:	11 a2       	std	Z+33, r1	; 0x21
    106e:	f7 01       	movw	r30, r14
    1070:	82 a1       	ldd	r24, Z+34	; 0x22
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	09 f4       	brne	.+2      	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    1076:	12 a2       	std	Z+34, r1	; 0x22
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	be 01       	movw	r22, r28
    107e:	6a 5f       	subi	r22, 0xFA	; 250
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <xTaskCheckForTimeOut>
    108a:	81 11       	cpse	r24, r1
    108c:	19 c0       	rjmp	.+50     	; 0x10c0 <__EEPROM_REGION_LENGTH__+0xc0>
    108e:	c7 01       	movw	r24, r14
    1090:	66 de       	rcall	.-820    	; 0xd5e <prvIsQueueFull>
    1092:	88 23       	and	r24, r24
    1094:	81 f0       	breq	.+32     	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
    1096:	4e 81       	ldd	r20, Y+6	; 0x06
    1098:	5f 81       	ldd	r21, Y+7	; 0x07
    109a:	68 85       	ldd	r22, Y+8	; 0x08
    109c:	79 85       	ldd	r23, Y+9	; 0x09
    109e:	c7 01       	movw	r24, r14
    10a0:	08 96       	adiw	r24, 0x08	; 8
    10a2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskPlaceOnEventList>
    10a6:	c7 01       	movw	r24, r14
    10a8:	e1 de       	rcall	.-574    	; 0xe6c <prvUnlockQueue>
    10aa:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    10ae:	81 11       	cpse	r24, r1
    10b0:	a0 cf       	rjmp	.-192    	; 0xff2 <xQueueGenericSend+0x2e>
    10b2:	70 dd       	rcall	.-1312   	; 0xb94 <vPortYield>
    10b4:	9e cf       	rjmp	.-196    	; 0xff2 <xQueueGenericSend+0x2e>
    10b6:	c7 01       	movw	r24, r14
    10b8:	d9 de       	rcall	.-590    	; 0xe6c <prvUnlockQueue>
    10ba:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    10be:	99 cf       	rjmp	.-206    	; 0xff2 <xQueueGenericSend+0x2e>
    10c0:	c7 01       	movw	r24, r14
    10c2:	d4 de       	rcall	.-600    	; 0xe6c <prvUnlockQueue>
    10c4:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	29 96       	adiw	r28, 0x09	; 9
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	08 95       	ret

000010e8 <xQueueGenericSendFromISR>:
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	8a 01       	movw	r16, r20
    10f6:	fc 01       	movw	r30, r24
    10f8:	56 8d       	ldd	r21, Z+30	; 0x1e
    10fa:	37 8d       	ldd	r19, Z+31	; 0x1f
    10fc:	53 17       	cp	r21, r19
    10fe:	10 f0       	brcs	.+4      	; 0x1104 <xQueueGenericSendFromISR+0x1c>
    1100:	22 30       	cpi	r18, 0x02	; 2
    1102:	f9 f4       	brne	.+62     	; 0x1142 <xQueueGenericSendFromISR+0x5a>
    1104:	42 2f       	mov	r20, r18
    1106:	78 01       	movw	r14, r16
    1108:	ec 01       	movw	r28, r24
    110a:	1a a1       	ldd	r17, Y+34	; 0x22
    110c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    110e:	ce 01       	movw	r24, r28
    1110:	34 de       	rcall	.-920    	; 0xd7a <prvCopyDataToQueue>
    1112:	1f 3f       	cpi	r17, 0xFF	; 255
    1114:	81 f4       	brne	.+32     	; 0x1136 <xQueueGenericSendFromISR+0x4e>
    1116:	8b 89       	ldd	r24, Y+19	; 0x13
    1118:	88 23       	and	r24, r24
    111a:	a9 f0       	breq	.+42     	; 0x1146 <xQueueGenericSendFromISR+0x5e>
    111c:	ce 01       	movw	r24, r28
    111e:	43 96       	adiw	r24, 0x13	; 19
    1120:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <xTaskRemoveFromEventList>
    1124:	88 23       	and	r24, r24
    1126:	89 f0       	breq	.+34     	; 0x114a <xQueueGenericSendFromISR+0x62>
    1128:	e1 14       	cp	r14, r1
    112a:	f1 04       	cpc	r15, r1
    112c:	81 f0       	breq	.+32     	; 0x114e <xQueueGenericSendFromISR+0x66>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	f7 01       	movw	r30, r14
    1132:	80 83       	st	Z, r24
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <xQueueGenericSendFromISR+0x68>
    1136:	ff 24       	eor	r15, r15
    1138:	f3 94       	inc	r15
    113a:	f1 0e       	add	r15, r17
    113c:	fa a2       	std	Y+34, r15	; 0x22
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <xQueueGenericSendFromISR+0x68>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	05 c0       	rjmp	.+10     	; 0x1150 <xQueueGenericSendFromISR+0x68>
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <xQueueGenericSendFromISR+0x68>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <xQueueGenericSendFromISR+0x68>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	08 95       	ret

0000115e <xQueueReceive>:
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	29 97       	sbiw	r28, 0x09	; 9
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	8c 01       	movw	r16, r24
    1180:	6b 01       	movw	r12, r22
    1182:	2e 83       	std	Y+6, r18	; 0x06
    1184:	3f 83       	std	Y+7, r19	; 0x07
    1186:	48 87       	std	Y+8, r20	; 0x08
    1188:	59 87       	std	Y+9, r21	; 0x09
    118a:	e1 2c       	mov	r14, r1
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	0f 92       	push	r0
    1192:	f8 01       	movw	r30, r16
    1194:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1196:	ff 20       	and	r15, r15
    1198:	99 f0       	breq	.+38     	; 0x11c0 <xQueueReceive+0x62>
    119a:	b6 01       	movw	r22, r12
    119c:	c8 01       	movw	r24, r16
    119e:	4c de       	rcall	.-872    	; 0xe38 <prvCopyDataFromQueue>
    11a0:	fa 94       	dec	r15
    11a2:	f8 01       	movw	r30, r16
    11a4:	f6 8e       	std	Z+30, r15	; 0x1e
    11a6:	80 85       	ldd	r24, Z+8	; 0x08
    11a8:	88 23       	and	r24, r24
    11aa:	31 f0       	breq	.+12     	; 0x11b8 <xQueueReceive+0x5a>
    11ac:	c8 01       	movw	r24, r16
    11ae:	08 96       	adiw	r24, 0x08	; 8
    11b0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <xTaskRemoveFromEventList>
    11b4:	81 11       	cpse	r24, r1
    11b6:	ee dc       	rcall	.-1572   	; 0xb94 <vPortYield>
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	4f c0       	rjmp	.+158    	; 0x125e <xQueueReceive+0x100>
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	a8 85       	ldd	r26, Y+8	; 0x08
    11c6:	b9 85       	ldd	r27, Y+9	; 0x09
    11c8:	89 2b       	or	r24, r25
    11ca:	8a 2b       	or	r24, r26
    11cc:	8b 2b       	or	r24, r27
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <xQueueReceive+0x7a>
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	43 c0       	rjmp	.+134    	; 0x125e <xQueueReceive+0x100>
    11d8:	e1 10       	cpse	r14, r1
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <xQueueReceive+0x8a>
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 db 14 	call	0x29b6	; 0x29b6 <vTaskInternalSetTimeOutState>
    11e4:	ee 24       	eor	r14, r14
    11e6:	e3 94       	inc	r14
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	e1 d6       	rcall	.+3522   	; 0x1fb0 <vTaskSuspendAll>
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	0f 92       	push	r0
    11f4:	f8 01       	movw	r30, r16
    11f6:	81 a1       	ldd	r24, Z+33	; 0x21
    11f8:	8f 3f       	cpi	r24, 0xFF	; 255
    11fa:	09 f4       	brne	.+2      	; 0x11fe <xQueueReceive+0xa0>
    11fc:	11 a2       	std	Z+33, r1	; 0x21
    11fe:	f8 01       	movw	r30, r16
    1200:	82 a1       	ldd	r24, Z+34	; 0x22
    1202:	8f 3f       	cpi	r24, 0xFF	; 255
    1204:	09 f4       	brne	.+2      	; 0x1208 <xQueueReceive+0xaa>
    1206:	12 a2       	std	Z+34, r1	; 0x22
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	be 01       	movw	r22, r28
    120e:	6a 5f       	subi	r22, 0xFA	; 250
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <xTaskCheckForTimeOut>
    121a:	81 11       	cpse	r24, r1
    121c:	17 c0       	rjmp	.+46     	; 0x124c <xQueueReceive+0xee>
    121e:	c8 01       	movw	r24, r16
    1220:	91 dd       	rcall	.-1246   	; 0xd44 <prvIsQueueEmpty>
    1222:	88 23       	and	r24, r24
    1224:	79 f0       	breq	.+30     	; 0x1244 <xQueueReceive+0xe6>
    1226:	4e 81       	ldd	r20, Y+6	; 0x06
    1228:	5f 81       	ldd	r21, Y+7	; 0x07
    122a:	68 85       	ldd	r22, Y+8	; 0x08
    122c:	79 85       	ldd	r23, Y+9	; 0x09
    122e:	c8 01       	movw	r24, r16
    1230:	43 96       	adiw	r24, 0x13	; 19
    1232:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskPlaceOnEventList>
    1236:	c8 01       	movw	r24, r16
    1238:	19 de       	rcall	.-974    	; 0xe6c <prvUnlockQueue>
    123a:	fa d7       	rcall	.+4084   	; 0x2230 <xTaskResumeAll>
    123c:	81 11       	cpse	r24, r1
    123e:	a6 cf       	rjmp	.-180    	; 0x118c <xQueueReceive+0x2e>
    1240:	a9 dc       	rcall	.-1710   	; 0xb94 <vPortYield>
    1242:	a4 cf       	rjmp	.-184    	; 0x118c <xQueueReceive+0x2e>
    1244:	c8 01       	movw	r24, r16
    1246:	12 de       	rcall	.-988    	; 0xe6c <prvUnlockQueue>
    1248:	f3 d7       	rcall	.+4070   	; 0x2230 <xTaskResumeAll>
    124a:	a0 cf       	rjmp	.-192    	; 0x118c <xQueueReceive+0x2e>
    124c:	c8 01       	movw	r24, r16
    124e:	0e de       	rcall	.-996    	; 0xe6c <prvUnlockQueue>
    1250:	ef d7       	rcall	.+4062   	; 0x2230 <xTaskResumeAll>
    1252:	c8 01       	movw	r24, r16
    1254:	77 dd       	rcall	.-1298   	; 0xd44 <prvIsQueueEmpty>
    1256:	88 23       	and	r24, r24
    1258:	09 f4       	brne	.+2      	; 0x125c <xQueueReceive+0xfe>
    125a:	98 cf       	rjmp	.-208    	; 0x118c <xQueueReceive+0x2e>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	29 96       	adiw	r28, 0x09	; 9
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	08 95       	ret

0000127c <xQueueSemaphoreTake>:
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	29 97       	sbiw	r28, 0x09	; 9
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	8c 01       	movw	r16, r24
    129a:	4e 83       	std	Y+6, r20	; 0x06
    129c:	5f 83       	std	Y+7, r21	; 0x07
    129e:	68 87       	std	Y+8, r22	; 0x08
    12a0:	79 87       	std	Y+9, r23	; 0x09
    12a2:	e1 2c       	mov	r14, r1
    12a4:	f1 2c       	mov	r15, r1
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	0f 92       	push	r0
    12ac:	f8 01       	movw	r30, r16
    12ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    12b0:	88 23       	and	r24, r24
    12b2:	c9 f0       	breq	.+50     	; 0x12e6 <xQueueSemaphoreTake+0x6a>
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	86 8f       	std	Z+30, r24	; 0x1e
    12b8:	80 81       	ld	r24, Z
    12ba:	91 81       	ldd	r25, Z+1	; 0x01
    12bc:	89 2b       	or	r24, r25
    12be:	29 f4       	brne	.+10     	; 0x12ca <xQueueSemaphoreTake+0x4e>
    12c0:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <pvTaskIncrementMutexHeldCount>
    12c4:	f8 01       	movw	r30, r16
    12c6:	95 83       	std	Z+5, r25	; 0x05
    12c8:	84 83       	std	Z+4, r24	; 0x04
    12ca:	f8 01       	movw	r30, r16
    12cc:	80 85       	ldd	r24, Z+8	; 0x08
    12ce:	88 23       	and	r24, r24
    12d0:	31 f0       	breq	.+12     	; 0x12de <xQueueSemaphoreTake+0x62>
    12d2:	c8 01       	movw	r24, r16
    12d4:	08 96       	adiw	r24, 0x08	; 8
    12d6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <xTaskRemoveFromEventList>
    12da:	81 11       	cpse	r24, r1
    12dc:	5b dc       	rcall	.-1866   	; 0xb94 <vPortYield>
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	6f c0       	rjmp	.+222    	; 0x13c4 <xQueueSemaphoreTake+0x148>
    12e6:	8e 81       	ldd	r24, Y+6	; 0x06
    12e8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ea:	a8 85       	ldd	r26, Y+8	; 0x08
    12ec:	b9 85       	ldd	r27, Y+9	; 0x09
    12ee:	89 2b       	or	r24, r25
    12f0:	8a 2b       	or	r24, r26
    12f2:	8b 2b       	or	r24, r27
    12f4:	21 f4       	brne	.+8      	; 0x12fe <xQueueSemaphoreTake+0x82>
    12f6:	0f 90       	pop	r0
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	63 c0       	rjmp	.+198    	; 0x13c4 <xQueueSemaphoreTake+0x148>
    12fe:	f1 10       	cpse	r15, r1
    1300:	06 c0       	rjmp	.+12     	; 0x130e <xQueueSemaphoreTake+0x92>
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	0e 94 db 14 	call	0x29b6	; 0x29b6 <vTaskInternalSetTimeOutState>
    130a:	ff 24       	eor	r15, r15
    130c:	f3 94       	inc	r15
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	4e d6       	rcall	.+3228   	; 0x1fb0 <vTaskSuspendAll>
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	0f 92       	push	r0
    131a:	f8 01       	movw	r30, r16
    131c:	81 a1       	ldd	r24, Z+33	; 0x21
    131e:	8f 3f       	cpi	r24, 0xFF	; 255
    1320:	09 f4       	brne	.+2      	; 0x1324 <xQueueSemaphoreTake+0xa8>
    1322:	11 a2       	std	Z+33, r1	; 0x21
    1324:	f8 01       	movw	r30, r16
    1326:	82 a1       	ldd	r24, Z+34	; 0x22
    1328:	8f 3f       	cpi	r24, 0xFF	; 255
    132a:	09 f4       	brne	.+2      	; 0x132e <xQueueSemaphoreTake+0xb2>
    132c:	12 a2       	std	Z+34, r1	; 0x22
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	be 01       	movw	r22, r28
    1334:	6a 5f       	subi	r22, 0xFA	; 250
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <xTaskCheckForTimeOut>
    1340:	81 11       	cpse	r24, r1
    1342:	26 c0       	rjmp	.+76     	; 0x1390 <xQueueSemaphoreTake+0x114>
    1344:	c8 01       	movw	r24, r16
    1346:	fe dc       	rcall	.-1540   	; 0xd44 <prvIsQueueEmpty>
    1348:	88 23       	and	r24, r24
    134a:	f1 f0       	breq	.+60     	; 0x1388 <xQueueSemaphoreTake+0x10c>
    134c:	f8 01       	movw	r30, r16
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	89 2b       	or	r24, r25
    1354:	51 f4       	brne	.+20     	; 0x136a <xQueueSemaphoreTake+0xee>
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	0f 92       	push	r0
    135c:	84 81       	ldd	r24, Z+4	; 0x04
    135e:	95 81       	ldd	r25, Z+5	; 0x05
    1360:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xTaskPriorityInherit>
    1364:	e8 2e       	mov	r14, r24
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	4e 81       	ldd	r20, Y+6	; 0x06
    136c:	5f 81       	ldd	r21, Y+7	; 0x07
    136e:	68 85       	ldd	r22, Y+8	; 0x08
    1370:	79 85       	ldd	r23, Y+9	; 0x09
    1372:	c8 01       	movw	r24, r16
    1374:	43 96       	adiw	r24, 0x13	; 19
    1376:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskPlaceOnEventList>
    137a:	c8 01       	movw	r24, r16
    137c:	77 dd       	rcall	.-1298   	; 0xe6c <prvUnlockQueue>
    137e:	58 d7       	rcall	.+3760   	; 0x2230 <xTaskResumeAll>
    1380:	81 11       	cpse	r24, r1
    1382:	91 cf       	rjmp	.-222    	; 0x12a6 <xQueueSemaphoreTake+0x2a>
    1384:	07 dc       	rcall	.-2034   	; 0xb94 <vPortYield>
    1386:	8f cf       	rjmp	.-226    	; 0x12a6 <xQueueSemaphoreTake+0x2a>
    1388:	c8 01       	movw	r24, r16
    138a:	70 dd       	rcall	.-1312   	; 0xe6c <prvUnlockQueue>
    138c:	51 d7       	rcall	.+3746   	; 0x2230 <xTaskResumeAll>
    138e:	8b cf       	rjmp	.-234    	; 0x12a6 <xQueueSemaphoreTake+0x2a>
    1390:	c8 01       	movw	r24, r16
    1392:	6c dd       	rcall	.-1320   	; 0xe6c <prvUnlockQueue>
    1394:	4d d7       	rcall	.+3738   	; 0x2230 <xTaskResumeAll>
    1396:	c8 01       	movw	r24, r16
    1398:	d5 dc       	rcall	.-1622   	; 0xd44 <prvIsQueueEmpty>
    139a:	88 23       	and	r24, r24
    139c:	09 f4       	brne	.+2      	; 0x13a0 <xQueueSemaphoreTake+0x124>
    139e:	83 cf       	rjmp	.-250    	; 0x12a6 <xQueueSemaphoreTake+0x2a>
    13a0:	ee 20       	and	r14, r14
    13a2:	79 f0       	breq	.+30     	; 0x13c2 <xQueueSemaphoreTake+0x146>
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	0f 92       	push	r0
    13aa:	c8 01       	movw	r24, r16
    13ac:	bb dc       	rcall	.-1674   	; 0xd24 <prvGetDisinheritPriorityAfterTimeout>
    13ae:	68 2f       	mov	r22, r24
    13b0:	f8 01       	movw	r30, r16
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	95 81       	ldd	r25, Z+5	; 0x05
    13b6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vTaskPriorityDisinheritAfterTimeout>
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <xQueueSemaphoreTake+0x148>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	29 96       	adiw	r28, 0x09	; 9
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	08 95       	ret

000013de <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	0f 92       	push	r0
    13ea:	89 a1       	ldd	r24, Y+33	; 0x21
    13ec:	8f 3f       	cpi	r24, 0xFF	; 255
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <vQueueWaitForMessageRestricted+0x14>
    13f0:	19 a2       	std	Y+33, r1	; 0x21
    13f2:	8a a1       	ldd	r24, Y+34	; 0x22
    13f4:	8f 3f       	cpi	r24, 0xFF	; 255
    13f6:	09 f4       	brne	.+2      	; 0x13fa <vQueueWaitForMessageRestricted+0x1c>
    13f8:	1a a2       	std	Y+34, r1	; 0x22
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    13fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1400:	81 11       	cpse	r24, r1
    1402:	04 c0       	rjmp	.+8      	; 0x140c <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1404:	ce 01       	movw	r24, r28
    1406:	43 96       	adiw	r24, 0x13	; 19
    1408:	0e 94 3a 13 	call	0x2674	; 0x2674 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    140c:	ce 01       	movw	r24, r28
    140e:	2e dd       	rcall	.-1444   	; 0xe6c <prvUnlockQueue>
    }
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1416:	fc 01       	movw	r30, r24
    1418:	44 81       	ldd	r20, Z+4	; 0x04
    141a:	55 81       	ldd	r21, Z+5	; 0x05
    141c:	22 81       	ldd	r18, Z+2	; 0x02
    141e:	33 81       	ldd	r19, Z+3	; 0x03
    1420:	24 0f       	add	r18, r20
    1422:	35 1f       	adc	r19, r21
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	b9 01       	movw	r22, r18
    142a:	68 1b       	sub	r22, r24
    142c:	79 0b       	sbc	r23, r25
    142e:	cb 01       	movw	r24, r22
    1430:	64 17       	cp	r22, r20
    1432:	75 07       	cpc	r23, r21
    1434:	10 f0       	brcs	.+4      	; 0x143a <prvBytesInBuffer+0x24>
    1436:	84 1b       	sub	r24, r20
    1438:	95 0b       	sbc	r25, r21
    143a:	08 95       	ret

0000143c <prvInitialiseNewStreamBuffer>:
    143c:	0f 93       	push	r16
    143e:	fc 01       	movw	r30, r24
    1440:	8f e0       	ldi	r24, 0x0F	; 15
    1442:	df 01       	movw	r26, r30
    1444:	1d 92       	st	X+, r1
    1446:	8a 95       	dec	r24
    1448:	e9 f7       	brne	.-6      	; 0x1444 <prvInitialiseNewStreamBuffer+0x8>
    144a:	75 87       	std	Z+13, r23	; 0x0d
    144c:	64 87       	std	Z+12, r22	; 0x0c
    144e:	55 83       	std	Z+5, r21	; 0x05
    1450:	44 83       	std	Z+4, r20	; 0x04
    1452:	37 83       	std	Z+7, r19	; 0x07
    1454:	26 83       	std	Z+6, r18	; 0x06
    1456:	06 87       	std	Z+14, r16	; 0x0e
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <prvWriteBytesToBuffer>:
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	6c 01       	movw	r12, r24
    1472:	5b 01       	movw	r10, r22
    1474:	7a 01       	movw	r14, r20
    1476:	fc 01       	movw	r30, r24
    1478:	c2 81       	ldd	r28, Z+2	; 0x02
    147a:	d3 81       	ldd	r29, Z+3	; 0x03
    147c:	04 81       	ldd	r16, Z+4	; 0x04
    147e:	15 81       	ldd	r17, Z+5	; 0x05
    1480:	0c 1b       	sub	r16, r28
    1482:	1d 0b       	sbc	r17, r29
    1484:	40 17       	cp	r20, r16
    1486:	51 07       	cpc	r21, r17
    1488:	08 f4       	brcc	.+2      	; 0x148c <prvWriteBytesToBuffer+0x30>
    148a:	8a 01       	movw	r16, r20
    148c:	f6 01       	movw	r30, r12
    148e:	84 85       	ldd	r24, Z+12	; 0x0c
    1490:	95 85       	ldd	r25, Z+13	; 0x0d
    1492:	a8 01       	movw	r20, r16
    1494:	b5 01       	movw	r22, r10
    1496:	8c 0f       	add	r24, r28
    1498:	9d 1f       	adc	r25, r29
    149a:	0e 94 14 30 	call	0x6028	; 0x6028 <memcpy>
    149e:	0e 15       	cp	r16, r14
    14a0:	1f 05       	cpc	r17, r15
    14a2:	58 f4       	brcc	.+22     	; 0x14ba <prvWriteBytesToBuffer+0x5e>
    14a4:	a7 01       	movw	r20, r14
    14a6:	40 1b       	sub	r20, r16
    14a8:	51 0b       	sbc	r21, r17
    14aa:	b5 01       	movw	r22, r10
    14ac:	60 0f       	add	r22, r16
    14ae:	71 1f       	adc	r23, r17
    14b0:	f6 01       	movw	r30, r12
    14b2:	84 85       	ldd	r24, Z+12	; 0x0c
    14b4:	95 85       	ldd	r25, Z+13	; 0x0d
    14b6:	0e 94 14 30 	call	0x6028	; 0x6028 <memcpy>
    14ba:	ce 01       	movw	r24, r28
    14bc:	8e 0d       	add	r24, r14
    14be:	9f 1d       	adc	r25, r15
    14c0:	f6 01       	movw	r30, r12
    14c2:	24 81       	ldd	r18, Z+4	; 0x04
    14c4:	35 81       	ldd	r19, Z+5	; 0x05
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <prvWriteBytesToBuffer+0x74>
    14cc:	82 1b       	sub	r24, r18
    14ce:	93 0b       	sbc	r25, r19
    14d0:	f6 01       	movw	r30, r12
    14d2:	93 83       	std	Z+3, r25	; 0x03
    14d4:	82 83       	std	Z+2, r24	; 0x02
    14d6:	c7 01       	movw	r24, r14
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	bf 90       	pop	r11
    14ea:	af 90       	pop	r10
    14ec:	08 95       	ret

000014ee <prvWriteMessageToBuffer>:
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	1f 92       	push	r1
    1500:	1f 92       	push	r1
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	7c 01       	movw	r14, r24
    1508:	6b 01       	movw	r12, r22
    150a:	5a 83       	std	Y+2, r21	; 0x02
    150c:	49 83       	std	Y+1, r20	; 0x01
    150e:	21 15       	cp	r18, r1
    1510:	31 05       	cpc	r19, r1
    1512:	c1 f0       	breq	.+48     	; 0x1544 <prvWriteMessageToBuffer+0x56>
    1514:	fc 01       	movw	r30, r24
    1516:	86 85       	ldd	r24, Z+14	; 0x0e
    1518:	80 fd       	sbrc	r24, 0
    151a:	08 c0       	rjmp	.+16     	; 0x152c <prvWriteMessageToBuffer+0x3e>
    151c:	42 17       	cp	r20, r18
    151e:	53 07       	cpc	r21, r19
    1520:	08 f4       	brcc	.+2      	; 0x1524 <prvWriteMessageToBuffer+0x36>
    1522:	9a 01       	movw	r18, r20
    1524:	3a 83       	std	Y+2, r19	; 0x02
    1526:	29 83       	std	Y+1, r18	; 0x01
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	0f c0       	rjmp	.+30     	; 0x154a <prvWriteMessageToBuffer+0x5c>
    152c:	20 17       	cp	r18, r16
    152e:	31 07       	cpc	r19, r17
    1530:	58 f0       	brcs	.+22     	; 0x1548 <prvWriteMessageToBuffer+0x5a>
    1532:	42 e0       	ldi	r20, 0x02	; 2
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	be 01       	movw	r22, r28
    1538:	6f 5f       	subi	r22, 0xFF	; 255
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	c7 01       	movw	r24, r14
    153e:	8e df       	rcall	.-228    	; 0x145c <prvWriteBytesToBuffer>
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	03 c0       	rjmp	.+6      	; 0x154a <prvWriteMessageToBuffer+0x5c>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	01 c0       	rjmp	.+2      	; 0x154a <prvWriteMessageToBuffer+0x5c>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	88 23       	and	r24, r24
    154c:	31 f0       	breq	.+12     	; 0x155a <prvWriteMessageToBuffer+0x6c>
    154e:	49 81       	ldd	r20, Y+1	; 0x01
    1550:	5a 81       	ldd	r21, Y+2	; 0x02
    1552:	b6 01       	movw	r22, r12
    1554:	c7 01       	movw	r24, r14
    1556:	82 df       	rcall	.-252    	; 0x145c <prvWriteBytesToBuffer>
    1558:	02 c0       	rjmp	.+4      	; 0x155e <prvWriteMessageToBuffer+0x70>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	08 95       	ret

00001574 <prvReadBytesFromBuffer>:
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	7c 01       	movw	r14, r24
    158a:	5b 01       	movw	r10, r22
    158c:	e9 01       	movw	r28, r18
    158e:	42 17       	cp	r20, r18
    1590:	53 07       	cpc	r21, r19
    1592:	08 f4       	brcc	.+2      	; 0x1596 <prvReadBytesFromBuffer+0x22>
    1594:	ea 01       	movw	r28, r20
    1596:	20 97       	sbiw	r28, 0x00	; 0
    1598:	81 f1       	breq	.+96     	; 0x15fa <prvReadBytesFromBuffer+0x86>
    159a:	f7 01       	movw	r30, r14
    159c:	00 81       	ld	r16, Z
    159e:	11 81       	ldd	r17, Z+1	; 0x01
    15a0:	84 81       	ldd	r24, Z+4	; 0x04
    15a2:	95 81       	ldd	r25, Z+5	; 0x05
    15a4:	80 1b       	sub	r24, r16
    15a6:	91 0b       	sbc	r25, r17
    15a8:	6e 01       	movw	r12, r28
    15aa:	8c 17       	cp	r24, r28
    15ac:	9d 07       	cpc	r25, r29
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <prvReadBytesFromBuffer+0x3e>
    15b0:	6c 01       	movw	r12, r24
    15b2:	f7 01       	movw	r30, r14
    15b4:	64 85       	ldd	r22, Z+12	; 0x0c
    15b6:	75 85       	ldd	r23, Z+13	; 0x0d
    15b8:	60 0f       	add	r22, r16
    15ba:	71 1f       	adc	r23, r17
    15bc:	a6 01       	movw	r20, r12
    15be:	c5 01       	movw	r24, r10
    15c0:	0e 94 14 30 	call	0x6028	; 0x6028 <memcpy>
    15c4:	cc 16       	cp	r12, r28
    15c6:	dd 06       	cpc	r13, r29
    15c8:	58 f4       	brcc	.+22     	; 0x15e0 <prvReadBytesFromBuffer+0x6c>
    15ca:	ae 01       	movw	r20, r28
    15cc:	4c 19       	sub	r20, r12
    15ce:	5d 09       	sbc	r21, r13
    15d0:	f7 01       	movw	r30, r14
    15d2:	64 85       	ldd	r22, Z+12	; 0x0c
    15d4:	75 85       	ldd	r23, Z+13	; 0x0d
    15d6:	c5 01       	movw	r24, r10
    15d8:	8c 0d       	add	r24, r12
    15da:	9d 1d       	adc	r25, r13
    15dc:	0e 94 14 30 	call	0x6028	; 0x6028 <memcpy>
    15e0:	0c 0f       	add	r16, r28
    15e2:	1d 1f       	adc	r17, r29
    15e4:	f7 01       	movw	r30, r14
    15e6:	84 81       	ldd	r24, Z+4	; 0x04
    15e8:	95 81       	ldd	r25, Z+5	; 0x05
    15ea:	08 17       	cp	r16, r24
    15ec:	19 07       	cpc	r17, r25
    15ee:	10 f0       	brcs	.+4      	; 0x15f4 <prvReadBytesFromBuffer+0x80>
    15f0:	08 1b       	sub	r16, r24
    15f2:	19 0b       	sbc	r17, r25
    15f4:	f7 01       	movw	r30, r14
    15f6:	11 83       	std	Z+1, r17	; 0x01
    15f8:	00 83       	st	Z, r16
    15fa:	ce 01       	movw	r24, r28
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	df 90       	pop	r13
    160a:	cf 90       	pop	r12
    160c:	bf 90       	pop	r11
    160e:	af 90       	pop	r10
    1610:	08 95       	ret

00001612 <prvReadMessageFromBuffer>:
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	1f 92       	push	r1
    1630:	1f 92       	push	r1
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	6c 01       	movw	r12, r24
    1638:	4b 01       	movw	r8, r22
    163a:	5a 01       	movw	r10, r20
    163c:	79 01       	movw	r14, r18
    163e:	01 15       	cp	r16, r1
    1640:	11 05       	cpc	r17, r1
    1642:	b1 f0       	breq	.+44     	; 0x1670 <prvReadMessageFromBuffer+0x5e>
    1644:	fc 01       	movw	r30, r24
    1646:	60 80       	ld	r6, Z
    1648:	71 80       	ldd	r7, Z+1	; 0x01
    164a:	a8 01       	movw	r20, r16
    164c:	be 01       	movw	r22, r28
    164e:	6f 5f       	subi	r22, 0xFF	; 255
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	90 df       	rcall	.-224    	; 0x1574 <prvReadBytesFromBuffer>
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	e0 1a       	sub	r14, r16
    165a:	f1 0a       	sbc	r15, r17
    165c:	a8 16       	cp	r10, r24
    165e:	b9 06       	cpc	r11, r25
    1660:	30 f4       	brcc	.+12     	; 0x166e <prvReadMessageFromBuffer+0x5c>
    1662:	f6 01       	movw	r30, r12
    1664:	71 82       	std	Z+1, r7	; 0x01
    1666:	60 82       	st	Z, r6
    1668:	a1 2c       	mov	r10, r1
    166a:	b1 2c       	mov	r11, r1
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <prvReadMessageFromBuffer+0x5e>
    166e:	5c 01       	movw	r10, r24
    1670:	97 01       	movw	r18, r14
    1672:	a5 01       	movw	r20, r10
    1674:	b4 01       	movw	r22, r8
    1676:	c6 01       	movw	r24, r12
    1678:	7d df       	rcall	.-262    	; 0x1574 <prvReadBytesFromBuffer>
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	8f 90       	pop	r8
    1696:	7f 90       	pop	r7
    1698:	6f 90       	pop	r6
    169a:	08 95       	ret

0000169c <xStreamBufferGenericCreate>:
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ec 01       	movw	r28, r24
    16ac:	6b 01       	movw	r12, r22
    16ae:	41 30       	cpi	r20, 0x01	; 1
    16b0:	11 f4       	brne	.+4      	; 0x16b6 <xStreamBufferGenericCreate+0x1a>
    16b2:	01 e0       	ldi	r16, 0x01	; 1
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <xStreamBufferGenericCreate+0x1c>
    16b6:	00 e0       	ldi	r16, 0x00	; 0
    16b8:	c1 14       	cp	r12, r1
    16ba:	d1 04       	cpc	r13, r1
    16bc:	19 f4       	brne	.+6      	; 0x16c4 <xStreamBufferGenericCreate+0x28>
    16be:	cc 24       	eor	r12, r12
    16c0:	c3 94       	inc	r12
    16c2:	d1 2c       	mov	r13, r1
    16c4:	ce 01       	movw	r24, r28
    16c6:	40 96       	adiw	r24, 0x10	; 16
    16c8:	c8 17       	cp	r28, r24
    16ca:	d9 07       	cpc	r29, r25
    16cc:	20 f4       	brcc	.+8      	; 0x16d6 <xStreamBufferGenericCreate+0x3a>
    16ce:	21 96       	adiw	r28, 0x01	; 1
    16d0:	ad d8       	rcall	.-3750   	; 0x82c <pvPortMalloc>
    16d2:	7c 01       	movw	r14, r24
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <xStreamBufferGenericCreate+0x3e>
    16d6:	e1 2c       	mov	r14, r1
    16d8:	f1 2c       	mov	r15, r1
    16da:	e1 14       	cp	r14, r1
    16dc:	f1 04       	cpc	r15, r1
    16de:	39 f0       	breq	.+14     	; 0x16ee <xStreamBufferGenericCreate+0x52>
    16e0:	96 01       	movw	r18, r12
    16e2:	ae 01       	movw	r20, r28
    16e4:	b7 01       	movw	r22, r14
    16e6:	61 5f       	subi	r22, 0xF1	; 241
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	c7 01       	movw	r24, r14
    16ec:	a7 de       	rcall	.-690    	; 0x143c <prvInitialiseNewStreamBuffer>
    16ee:	c7 01       	movw	r24, r14
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	08 95       	ret

00001700 <xStreamBufferReset>:
    1700:	0f 93       	push	r16
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	0f 92       	push	r0
    1708:	fc 01       	movw	r30, r24
    170a:	20 85       	ldd	r18, Z+8	; 0x08
    170c:	31 85       	ldd	r19, Z+9	; 0x09
    170e:	23 2b       	or	r18, r19
    1710:	71 f4       	brne	.+28     	; 0x172e <xStreamBufferReset+0x2e>
    1712:	22 85       	ldd	r18, Z+10	; 0x0a
    1714:	33 85       	ldd	r19, Z+11	; 0x0b
    1716:	23 2b       	or	r18, r19
    1718:	61 f4       	brne	.+24     	; 0x1732 <xStreamBufferReset+0x32>
    171a:	26 81       	ldd	r18, Z+6	; 0x06
    171c:	37 81       	ldd	r19, Z+7	; 0x07
    171e:	44 81       	ldd	r20, Z+4	; 0x04
    1720:	55 81       	ldd	r21, Z+5	; 0x05
    1722:	64 85       	ldd	r22, Z+12	; 0x0c
    1724:	75 85       	ldd	r23, Z+13	; 0x0d
    1726:	06 85       	ldd	r16, Z+14	; 0x0e
    1728:	89 de       	rcall	.-750    	; 0x143c <prvInitialiseNewStreamBuffer>
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <xStreamBufferReset+0x34>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <xStreamBufferReset+0x34>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <xStreamBufferSpacesAvailable>:
    173c:	fc 01       	movw	r30, r24
    173e:	24 81       	ldd	r18, Z+4	; 0x04
    1740:	35 81       	ldd	r19, Z+5	; 0x05
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	82 0f       	add	r24, r18
    1748:	93 1f       	adc	r25, r19
    174a:	42 81       	ldd	r20, Z+2	; 0x02
    174c:	53 81       	ldd	r21, Z+3	; 0x03
    174e:	84 1b       	sub	r24, r20
    1750:	95 0b       	sbc	r25, r21
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	82 17       	cp	r24, r18
    1756:	93 07       	cpc	r25, r19
    1758:	10 f0       	brcs	.+4      	; 0x175e <xStreamBufferSpacesAvailable+0x22>
    175a:	82 1b       	sub	r24, r18
    175c:	93 0b       	sbc	r25, r19
    175e:	08 95       	ret

00001760 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1760:	2f 92       	push	r2
    1762:	3f 92       	push	r3
    1764:	4f 92       	push	r4
    1766:	5f 92       	push	r5
    1768:	6f 92       	push	r6
    176a:	7f 92       	push	r7
    176c:	8f 92       	push	r8
    176e:	9f 92       	push	r9
    1770:	af 92       	push	r10
    1772:	bf 92       	push	r11
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	2b 97       	sbiw	r28, 0x0b	; 11
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	4c 01       	movw	r8, r24
    1796:	7b 87       	std	Y+11, r23	; 0x0b
    1798:	6a 87       	std	Y+10, r22	; 0x0a
    179a:	1a 01       	movw	r2, r20
    179c:	0e 83       	std	Y+6, r16	; 0x06
    179e:	1f 83       	std	Y+7, r17	; 0x07
    17a0:	28 87       	std	Y+8, r18	; 0x08
    17a2:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    17a4:	fc 01       	movw	r30, r24
    17a6:	84 81       	ldd	r24, Z+4	; 0x04
    17a8:	95 81       	ldd	r25, Z+5	; 0x05
    17aa:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17ac:	26 85       	ldd	r18, Z+14	; 0x0e
    17ae:	20 ff       	sbrs	r18, 0
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17b2:	2a 01       	movw	r4, r20
    17b4:	f2 e0       	ldi	r31, 0x02	; 2
    17b6:	4f 0e       	add	r4, r31
    17b8:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    17ba:	84 15       	cp	r24, r4
    17bc:	95 05       	cpc	r25, r5
    17be:	58 f4       	brcc	.+22     	; 0x17d6 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    17c0:	1e 82       	std	Y+6, r1	; 0x06
    17c2:	1f 82       	std	Y+7, r1	; 0x07
    17c4:	18 86       	std	Y+8, r1	; 0x08
    17c6:	19 86       	std	Y+9, r1	; 0x09
    17c8:	06 c0       	rjmp	.+12     	; 0x17d6 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    17ca:	84 17       	cp	r24, r20
    17cc:	95 07       	cpc	r25, r21
    17ce:	10 f0       	brcs	.+4      	; 0x17d4 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    17d0:	2a 01       	movw	r4, r20
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    17d4:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    17d6:	8e 81       	ldd	r24, Y+6	; 0x06
    17d8:	9f 81       	ldd	r25, Y+7	; 0x07
    17da:	a8 85       	ldd	r26, Y+8	; 0x08
    17dc:	b9 85       	ldd	r27, Y+9	; 0x09
    17de:	89 2b       	or	r24, r25
    17e0:	8a 2b       	or	r24, r26
    17e2:	8b 2b       	or	r24, r27
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <xStreamBufferSend+0x88>
    17e6:	38 c0       	rjmp	.+112    	; 0x1858 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	0e 94 c5 14 	call	0x298a	; 0x298a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17f6:	c4 01       	movw	r24, r8
    17f8:	a1 df       	rcall	.-190    	; 0x173c <xStreamBufferSpacesAvailable>
    17fa:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    17fc:	84 15       	cp	r24, r4
    17fe:	95 05       	cpc	r25, r5
    1800:	40 f5       	brcc	.+80     	; 0x1852 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 af 19 	call	0x335e	; 0x335e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    180c:	0e 94 56 15 	call	0x2aac	; 0x2aac <xTaskGetCurrentTaskHandle>
    1810:	f4 01       	movw	r30, r8
    1812:	93 87       	std	Z+11, r25	; 0x0b
    1814:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    181a:	ae 80       	ldd	r10, Y+6	; 0x06
    181c:	bf 80       	ldd	r11, Y+7	; 0x07
    181e:	c8 84       	ldd	r12, Y+8	; 0x08
    1820:	d9 84       	ldd	r13, Y+9	; 0x09
    1822:	e1 2c       	mov	r14, r1
    1824:	f1 2c       	mov	r15, r1
    1826:	00 e0       	ldi	r16, 0x00	; 0
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	98 01       	movw	r18, r16
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	ba 01       	movw	r22, r20
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1838:	f4 01       	movw	r30, r8
    183a:	13 86       	std	Z+11, r1	; 0x0b
    183c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    183e:	be 01       	movw	r22, r28
    1840:	6a 5f       	subi	r22, 0xFA	; 250
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <xTaskCheckForTimeOut>
    184c:	88 23       	and	r24, r24
    184e:	81 f2       	breq	.-96     	; 0x17f0 <xStreamBufferSend+0x90>
    1850:	05 c0       	rjmp	.+10     	; 0x185c <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
                    break;
    1856:	02 c0       	rjmp	.+4      	; 0x185c <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1858:	61 2c       	mov	r6, r1
    185a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    185c:	61 14       	cp	r6, r1
    185e:	71 04       	cpc	r7, r1
    1860:	19 f4       	brne	.+6      	; 0x1868 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1862:	c4 01       	movw	r24, r8
    1864:	6b df       	rcall	.-298    	; 0x173c <xStreamBufferSpacesAvailable>
    1866:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1868:	82 01       	movw	r16, r4
    186a:	93 01       	movw	r18, r6
    186c:	a1 01       	movw	r20, r2
    186e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1870:	7b 85       	ldd	r23, Y+11	; 0x0b
    1872:	c4 01       	movw	r24, r8
    1874:	3c de       	rcall	.-904    	; 0x14ee <prvWriteMessageToBuffer>
    1876:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1878:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    187a:	e9 f0       	breq	.+58     	; 0x18b6 <xStreamBufferSend+0x156>
    187c:	c4 01       	movw	r24, r8
    187e:	cb dd       	rcall	.-1130   	; 0x1416 <prvBytesInBuffer>
    1880:	f4 01       	movw	r30, r8
    1882:	26 81       	ldd	r18, Z+6	; 0x06
    1884:	37 81       	ldd	r19, Z+7	; 0x07
    1886:	82 17       	cp	r24, r18
    1888:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    188a:	a8 f0       	brcs	.+42     	; 0x18b6 <xStreamBufferSend+0x156>
    188c:	91 d3       	rcall	.+1826   	; 0x1fb0 <vTaskSuspendAll>
    188e:	f4 01       	movw	r30, r8
    1890:	80 85       	ldd	r24, Z+8	; 0x08
    1892:	91 85       	ldd	r25, Z+9	; 0x09
    1894:	89 2b       	or	r24, r25
    1896:	71 f0       	breq	.+28     	; 0x18b4 <xStreamBufferSend+0x154>
    1898:	80 85       	ldd	r24, Z+8	; 0x08
    189a:	91 85       	ldd	r25, Z+9	; 0x09
    189c:	e1 2c       	mov	r14, r1
    189e:	f1 2c       	mov	r15, r1
    18a0:	00 e0       	ldi	r16, 0x00	; 0
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <xTaskGenericNotify>
    18ae:	f4 01       	movw	r30, r8
    18b0:	11 86       	std	Z+9, r1	; 0x09
    18b2:	10 86       	std	Z+8, r1	; 0x08
    18b4:	bd d4       	rcall	.+2426   	; 0x2230 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    18b6:	c6 01       	movw	r24, r12
    18b8:	2b 96       	adiw	r28, 0x0b	; 11
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	9f 90       	pop	r9
    18da:	8f 90       	pop	r8
    18dc:	7f 90       	pop	r7
    18de:	6f 90       	pop	r6
    18e0:	5f 90       	pop	r5
    18e2:	4f 90       	pop	r4
    18e4:	3f 90       	pop	r3
    18e6:	2f 90       	pop	r2
    18e8:	08 95       	ret

000018ea <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    18ea:	af 92       	push	r10
    18ec:	bf 92       	push	r11
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	ec 01       	movw	r28, r24
    1900:	7b 01       	movw	r14, r22
    1902:	5a 01       	movw	r10, r20
    1904:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1906:	8e 85       	ldd	r24, Y+14	; 0x0e
    1908:	80 ff       	sbrs	r24, 0
    190a:	04 c0       	rjmp	.+8      	; 0x1914 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    190c:	8a 01       	movw	r16, r20
    190e:	0e 5f       	subi	r16, 0xFE	; 254
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1914:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1916:	ce 01       	movw	r24, r28
    1918:	11 df       	rcall	.-478    	; 0x173c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    191a:	9c 01       	movw	r18, r24
    191c:	a5 01       	movw	r20, r10
    191e:	b7 01       	movw	r22, r14
    1920:	ce 01       	movw	r24, r28
    1922:	e5 dd       	rcall	.-1078   	; 0x14ee <prvWriteMessageToBuffer>
    1924:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1926:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1928:	c1 f0       	breq	.+48     	; 0x195a <xStreamBufferSendFromISR+0x70>
    192a:	ce 01       	movw	r24, r28
    192c:	74 dd       	rcall	.-1304   	; 0x1416 <prvBytesInBuffer>
    192e:	2e 81       	ldd	r18, Y+6	; 0x06
    1930:	3f 81       	ldd	r19, Y+7	; 0x07
    1932:	82 17       	cp	r24, r18
    1934:	93 07       	cpc	r25, r19
    1936:	88 f0       	brcs	.+34     	; 0x195a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1938:	88 85       	ldd	r24, Y+8	; 0x08
    193a:	99 85       	ldd	r25, Y+9	; 0x09
    193c:	89 2b       	or	r24, r25
    193e:	69 f0       	breq	.+26     	; 0x195a <xStreamBufferSendFromISR+0x70>
    1940:	88 85       	ldd	r24, Y+8	; 0x08
    1942:	99 85       	ldd	r25, Y+9	; 0x09
    1944:	e1 2c       	mov	r14, r1
    1946:	f1 2c       	mov	r15, r1
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	0e 94 8d 18 	call	0x311a	; 0x311a <xTaskGenericNotifyFromISR>
    1956:	19 86       	std	Y+9, r1	; 0x09
    1958:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    195a:	c5 01       	movw	r24, r10
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	bf 90       	pop	r11
    196e:	af 90       	pop	r10
    1970:	08 95       	ret

00001972 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1972:	4f 92       	push	r4
    1974:	5f 92       	push	r5
    1976:	6f 92       	push	r6
    1978:	7f 92       	push	r7
    197a:	8f 92       	push	r8
    197c:	9f 92       	push	r9
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	ec 01       	movw	r28, r24
    1994:	2b 01       	movw	r4, r22
    1996:	3a 01       	movw	r6, r20
    1998:	58 01       	movw	r10, r16
    199a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    199c:	8e 85       	ldd	r24, Y+14	; 0x0e
    199e:	80 ff       	sbrs	r24, 0
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19a2:	68 94       	set
    19a4:	88 24       	eor	r8, r8
    19a6:	81 f8       	bld	r8, 1
    19a8:	91 2c       	mov	r9, r1
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    19ac:	81 2c       	mov	r8, r1
    19ae:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19b0:	a1 14       	cp	r10, r1
    19b2:	b1 04       	cpc	r11, r1
    19b4:	c1 04       	cpc	r12, r1
    19b6:	d1 04       	cpc	r13, r1
    19b8:	41 f1       	breq	.+80     	; 0x1a0a <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    19c0:	ce 01       	movw	r24, r28
    19c2:	29 dd       	rcall	.-1454   	; 0x1416 <prvBytesInBuffer>
    19c4:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    19c6:	88 16       	cp	r8, r24
    19c8:	99 06       	cpc	r9, r25
    19ca:	48 f0       	brcs	.+18     	; 0x19de <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 af 19 	call	0x335e	; 0x335e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    19d6:	0e 94 56 15 	call	0x2aac	; 0x2aac <xTaskGetCurrentTaskHandle>
    19da:	99 87       	std	Y+9, r25	; 0x09
    19dc:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    19e2:	8e 14       	cp	r8, r14
    19e4:	9f 04       	cpc	r9, r15
    19e6:	a0 f0       	brcs	.+40     	; 0x1a10 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    19e8:	e1 2c       	mov	r14, r1
    19ea:	f1 2c       	mov	r15, r1
    19ec:	00 e0       	ldi	r16, 0x00	; 0
    19ee:	10 e0       	ldi	r17, 0x00	; 0
    19f0:	98 01       	movw	r18, r16
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	ba 01       	movw	r22, r20
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    19fe:	19 86       	std	Y+9, r1	; 0x09
    1a00:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a02:	ce 01       	movw	r24, r28
    1a04:	08 dd       	rcall	.-1520   	; 0x1416 <prvBytesInBuffer>
    1a06:	7c 01       	movw	r14, r24
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	04 dd       	rcall	.-1528   	; 0x1416 <prvBytesInBuffer>
    1a0e:	7c 01       	movw	r14, r24
    1a10:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1a12:	9f 04       	cpc	r9, r15
    1a14:	e8 f4       	brcc	.+58     	; 0x1a50 <xStreamBufferReceive+0xde>
    1a16:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1a18:	97 01       	movw	r18, r14
    1a1a:	a3 01       	movw	r20, r6
    1a1c:	b2 01       	movw	r22, r4
    1a1e:	ce 01       	movw	r24, r28
    1a20:	f8 dd       	rcall	.-1040   	; 0x1612 <prvReadMessageFromBuffer>
    1a22:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1a24:	89 2b       	or	r24, r25
    1a26:	b1 f0       	breq	.+44     	; 0x1a54 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1a28:	c3 d2       	rcall	.+1414   	; 0x1fb0 <vTaskSuspendAll>
    1a2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2e:	89 2b       	or	r24, r25
    1a30:	69 f0       	breq	.+26     	; 0x1a4c <xStreamBufferReceive+0xda>
    1a32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a36:	e1 2c       	mov	r14, r1
    1a38:	f1 2c       	mov	r15, r1
    1a3a:	00 e0       	ldi	r16, 0x00	; 0
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	a9 01       	movw	r20, r18
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <xTaskGenericNotify>
    1a48:	1b 86       	std	Y+11, r1	; 0x0b
    1a4a:	1a 86       	std	Y+10, r1	; 0x0a
    1a4c:	f1 d3       	rcall	.+2018   	; 0x2230 <xTaskResumeAll>
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <xStreamBufferReceive+0xe2>
    1a50:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1a52:	d1 2c       	mov	r13, r1
    1a54:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	ef 90       	pop	r14
    1a62:	df 90       	pop	r13
    1a64:	cf 90       	pop	r12
    1a66:	bf 90       	pop	r11
    1a68:	af 90       	pop	r10
    1a6a:	9f 90       	pop	r9
    1a6c:	8f 90       	pop	r8
    1a6e:	7f 90       	pop	r7
    1a70:	6f 90       	pop	r6
    1a72:	5f 90       	pop	r5
    1a74:	4f 90       	pop	r4
    1a76:	08 95       	ret

00001a78 <prvResetNextTaskUnblockTime>:
    1a78:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxDelayedTaskList>
    1a7c:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxDelayedTaskList+0x1>
    1a80:	80 81       	ld	r24, Z
    1a82:	81 11       	cpse	r24, r1
    1a84:	0c c0       	rjmp	.+24     	; 0x1a9e <prvResetNextTaskUnblockTime+0x26>
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	9f ef       	ldi	r25, 0xFF	; 255
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	80 93 d1 14 	sts	0x14D1, r24	; 0x8014d1 <xNextTaskUnblockTime>
    1a90:	90 93 d2 14 	sts	0x14D2, r25	; 0x8014d2 <xNextTaskUnblockTime+0x1>
    1a94:	a0 93 d3 14 	sts	0x14D3, r26	; 0x8014d3 <xNextTaskUnblockTime+0x2>
    1a98:	b0 93 d4 14 	sts	0x14D4, r27	; 0x8014d4 <xNextTaskUnblockTime+0x3>
    1a9c:	08 95       	ret
    1a9e:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxDelayedTaskList>
    1aa2:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxDelayedTaskList+0x1>
    1aa6:	07 80       	ldd	r0, Z+7	; 0x07
    1aa8:	f0 85       	ldd	r31, Z+8	; 0x08
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab2:	b3 81       	ldd	r27, Z+3	; 0x03
    1ab4:	80 93 d1 14 	sts	0x14D1, r24	; 0x8014d1 <xNextTaskUnblockTime>
    1ab8:	90 93 d2 14 	sts	0x14D2, r25	; 0x8014d2 <xNextTaskUnblockTime+0x1>
    1abc:	a0 93 d3 14 	sts	0x14D3, r26	; 0x8014d3 <xNextTaskUnblockTime+0x2>
    1ac0:	b0 93 d4 14 	sts	0x14D4, r27	; 0x8014d4 <xNextTaskUnblockTime+0x3>
    1ac4:	08 95       	ret

00001ac6 <prvDeleteTCB>:
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	ec 01       	movw	r28, r24
    1acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad0:	0e 94 bf 04 	call	0x97e	; 0x97e <vPortFree>
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	0e 94 bf 04 	call	0x97e	; 0x97e <vPortFree>
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	08 95       	ret

00001ae0 <prvInitialiseNewTask>:
    1ae0:	4f 92       	push	r4
    1ae2:	5f 92       	push	r5
    1ae4:	6f 92       	push	r6
    1ae6:	7f 92       	push	r7
    1ae8:	8f 92       	push	r8
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	2c 01       	movw	r4, r24
    1b00:	5b 01       	movw	r10, r22
    1b02:	4a 01       	movw	r8, r20
    1b04:	39 01       	movw	r6, r18
    1b06:	e6 01       	movw	r28, r12
    1b08:	65 ea       	ldi	r22, 0xA5	; 165
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b10:	0e 94 1d 30 	call	0x603a	; 0x603a <memset>
    1b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b18:	21 e0       	ldi	r18, 0x01	; 1
    1b1a:	82 1a       	sub	r8, r18
    1b1c:	91 08       	sbc	r9, r1
    1b1e:	88 0e       	add	r8, r24
    1b20:	99 1e       	adc	r9, r25
    1b22:	a1 14       	cp	r10, r1
    1b24:	b1 04       	cpc	r11, r1
    1b26:	89 f4       	brne	.+34     	; 0x1b4a <prvInitialiseNewTask+0x6a>
    1b28:	15 c0       	rjmp	.+42     	; 0x1b54 <prvInitialiseNewTask+0x74>
    1b2a:	82 2f       	mov	r24, r18
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	f5 01       	movw	r30, r10
    1b30:	e8 0f       	add	r30, r24
    1b32:	f9 1f       	adc	r31, r25
    1b34:	30 81       	ld	r19, Z
    1b36:	de 01       	movw	r26, r28
    1b38:	a8 0f       	add	r26, r24
    1b3a:	b9 1f       	adc	r27, r25
    1b3c:	5d 96       	adiw	r26, 0x1d	; 29
    1b3e:	3c 93       	st	X, r19
    1b40:	80 81       	ld	r24, Z
    1b42:	88 23       	and	r24, r24
    1b44:	29 f0       	breq	.+10     	; 0x1b50 <prvInitialiseNewTask+0x70>
    1b46:	2f 5f       	subi	r18, 0xFF	; 255
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <prvInitialiseNewTask+0x6c>
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	20 31       	cpi	r18, 0x10	; 16
    1b4e:	68 f3       	brcs	.-38     	; 0x1b2a <prvInitialiseNewTask+0x4a>
    1b50:	1c a6       	std	Y+44, r1	; 0x2c
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <prvInitialiseNewTask+0x76>
    1b54:	1d 8e       	std	Y+29, r1	; 0x1d
    1b56:	0a 30       	cpi	r16, 0x0A	; 10
    1b58:	08 f0       	brcs	.+2      	; 0x1b5c <prvInitialiseNewTask+0x7c>
    1b5a:	09 e0       	ldi	r16, 0x09	; 9
    1b5c:	0a 8f       	std	Y+26, r16	; 0x1a
    1b5e:	0d a7       	std	Y+45, r16	; 0x2d
    1b60:	1e a6       	std	Y+46, r1	; 0x2e
    1b62:	ce 01       	movw	r24, r28
    1b64:	02 96       	adiw	r24, 0x02	; 2
    1b66:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vListInitialiseItem>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	0e 96       	adiw	r24, 0x0e	; 14
    1b6e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vListInitialiseItem>
    1b72:	db 87       	std	Y+11, r29	; 0x0b
    1b74:	ca 87       	std	Y+10, r28	; 0x0a
    1b76:	8a e0       	ldi	r24, 0x0A	; 10
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e0       	ldi	r26, 0x00	; 0
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	80 1b       	sub	r24, r16
    1b80:	91 09       	sbc	r25, r1
    1b82:	a1 09       	sbc	r26, r1
    1b84:	b1 09       	sbc	r27, r1
    1b86:	8e 87       	std	Y+14, r24	; 0x0e
    1b88:	9f 87       	std	Y+15, r25	; 0x0f
    1b8a:	a8 8b       	std	Y+16, r26	; 0x10
    1b8c:	b9 8b       	std	Y+17, r27	; 0x11
    1b8e:	df 8b       	std	Y+23, r29	; 0x17
    1b90:	ce 8b       	std	Y+22, r28	; 0x16
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	fe 01       	movw	r30, r28
    1b96:	bf 96       	adiw	r30, 0x2f	; 47
    1b98:	df 01       	movw	r26, r30
    1b9a:	1d 92       	st	X+, r1
    1b9c:	8a 95       	dec	r24
    1b9e:	e9 f7       	brne	.-6      	; 0x1b9a <prvInitialiseNewTask+0xba>
    1ba0:	1b aa       	std	Y+51, r1	; 0x33
    1ba2:	a3 01       	movw	r20, r6
    1ba4:	b2 01       	movw	r22, r4
    1ba6:	c4 01       	movw	r24, r8
    1ba8:	0e 94 81 05 	call	0xb02	; 0xb02 <pxPortInitialiseStack>
    1bac:	99 83       	std	Y+1, r25	; 0x01
    1bae:	88 83       	st	Y, r24
    1bb0:	e1 14       	cp	r14, r1
    1bb2:	f1 04       	cpc	r15, r1
    1bb4:	19 f0       	breq	.+6      	; 0x1bbc <prvInitialiseNewTask+0xdc>
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	d1 83       	std	Z+1, r29	; 0x01
    1bba:	c0 83       	st	Z, r28
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	9f 90       	pop	r9
    1bd0:	8f 90       	pop	r8
    1bd2:	7f 90       	pop	r7
    1bd4:	6f 90       	pop	r6
    1bd6:	5f 90       	pop	r5
    1bd8:	4f 90       	pop	r4
    1bda:	08 95       	ret

00001bdc <prvInitialiseTaskLists>:
    1bdc:	cf 93       	push	r28
    1bde:	c0 e0       	ldi	r28, 0x00	; 0
    1be0:	09 c0       	rjmp	.+18     	; 0x1bf4 <prvInitialiseTaskLists+0x18>
    1be2:	2b e0       	ldi	r18, 0x0B	; 11
    1be4:	c2 9f       	mul	r28, r18
    1be6:	c0 01       	movw	r24, r0
    1be8:	11 24       	eor	r1, r1
    1bea:	81 5e       	subi	r24, 0xE1	; 225
    1bec:	9a 4e       	sbci	r25, 0xEA	; 234
    1bee:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1bf2:	cf 5f       	subi	r28, 0xFF	; 255
    1bf4:	ca 30       	cpi	r28, 0x0A	; 10
    1bf6:	a8 f3       	brcs	.-22     	; 0x1be2 <prvInitialiseTaskLists+0x6>
    1bf8:	84 e1       	ldi	r24, 0x14	; 20
    1bfa:	95 e1       	ldi	r25, 0x15	; 21
    1bfc:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c00:	89 e0       	ldi	r24, 0x09	; 9
    1c02:	95 e1       	ldi	r25, 0x15	; 21
    1c04:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c08:	8a ef       	ldi	r24, 0xFA	; 250
    1c0a:	94 e1       	ldi	r25, 0x14	; 20
    1c0c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c10:	8f ee       	ldi	r24, 0xEF	; 239
    1c12:	94 e1       	ldi	r25, 0x14	; 20
    1c14:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c18:	83 ee       	ldi	r24, 0xE3	; 227
    1c1a:	94 e1       	ldi	r25, 0x14	; 20
    1c1c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    1c20:	84 e1       	ldi	r24, 0x14	; 20
    1c22:	95 e1       	ldi	r25, 0x15	; 21
    1c24:	90 93 08 15 	sts	0x1508, r25	; 0x801508 <pxDelayedTaskList+0x1>
    1c28:	80 93 07 15 	sts	0x1507, r24	; 0x801507 <pxDelayedTaskList>
    1c2c:	89 e0       	ldi	r24, 0x09	; 9
    1c2e:	95 e1       	ldi	r25, 0x15	; 21
    1c30:	90 93 06 15 	sts	0x1506, r25	; 0x801506 <pxOverflowDelayedTaskList+0x1>
    1c34:	80 93 05 15 	sts	0x1505, r24	; 0x801505 <pxOverflowDelayedTaskList>
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <prvAddNewTaskToReadyList>:
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	ec 01       	movw	r28, r24
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	0f 92       	push	r0
    1c48:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <uxCurrentNumberOfTasks>
    1c4c:	8f 5f       	subi	r24, 0xFF	; 255
    1c4e:	80 93 e2 14 	sts	0x14E2, r24	; 0x8014e2 <uxCurrentNumberOfTasks>
    1c52:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    1c56:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1c5a:	89 2b       	or	r24, r25
    1c5c:	51 f4       	brne	.+20     	; 0x1c72 <prvAddNewTaskToReadyList+0x36>
    1c5e:	d0 93 8e 15 	sts	0x158E, r29	; 0x80158e <pxCurrentTCB+0x1>
    1c62:	c0 93 8d 15 	sts	0x158D, r28	; 0x80158d <pxCurrentTCB>
    1c66:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <uxCurrentNumberOfTasks>
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 f4       	brne	.+36     	; 0x1c92 <prvAddNewTaskToReadyList+0x56>
    1c6e:	b6 df       	rcall	.-148    	; 0x1bdc <prvInitialiseTaskLists>
    1c70:	10 c0       	rjmp	.+32     	; 0x1c92 <prvAddNewTaskToReadyList+0x56>
    1c72:	80 91 dc 14 	lds	r24, 0x14DC	; 0x8014dc <xSchedulerRunning>
    1c76:	81 11       	cpse	r24, r1
    1c78:	0c c0       	rjmp	.+24     	; 0x1c92 <prvAddNewTaskToReadyList+0x56>
    1c7a:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    1c7e:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1c82:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c86:	89 17       	cp	r24, r25
    1c88:	20 f0       	brcs	.+8      	; 0x1c92 <prvAddNewTaskToReadyList+0x56>
    1c8a:	d0 93 8e 15 	sts	0x158E, r29	; 0x80158e <pxCurrentTCB+0x1>
    1c8e:	c0 93 8d 15 	sts	0x158D, r28	; 0x80158d <pxCurrentTCB>
    1c92:	80 91 d5 14 	lds	r24, 0x14D5	; 0x8014d5 <uxTaskNumber>
    1c96:	8f 5f       	subi	r24, 0xFF	; 255
    1c98:	80 93 d5 14 	sts	0x14D5, r24	; 0x8014d5 <uxTaskNumber>
    1c9c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c9e:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    1ca2:	8e 17       	cp	r24, r30
    1ca4:	10 f4       	brcc	.+4      	; 0x1caa <prvAddNewTaskToReadyList+0x6e>
    1ca6:	e0 93 dd 14 	sts	0x14DD, r30	; 0x8014dd <uxTopReadyPriority>
    1caa:	8b e0       	ldi	r24, 0x0B	; 11
    1cac:	8e 9f       	mul	r24, r30
    1cae:	f0 01       	movw	r30, r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	e1 5e       	subi	r30, 0xE1	; 225
    1cb4:	fa 4e       	sbci	r31, 0xEA	; 234
    1cb6:	01 80       	ldd	r0, Z+1	; 0x01
    1cb8:	f2 81       	ldd	r31, Z+2	; 0x02
    1cba:	e0 2d       	mov	r30, r0
    1cbc:	ff 83       	std	Y+7, r31	; 0x07
    1cbe:	ee 83       	std	Y+6, r30	; 0x06
    1cc0:	26 81       	ldd	r18, Z+6	; 0x06
    1cc2:	37 81       	ldd	r19, Z+7	; 0x07
    1cc4:	39 87       	std	Y+9, r19	; 0x09
    1cc6:	28 87       	std	Y+8, r18	; 0x08
    1cc8:	a6 81       	ldd	r26, Z+6	; 0x06
    1cca:	b7 81       	ldd	r27, Z+7	; 0x07
    1ccc:	9e 01       	movw	r18, r28
    1cce:	2e 5f       	subi	r18, 0xFE	; 254
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	15 96       	adiw	r26, 0x05	; 5
    1cd4:	3c 93       	st	X, r19
    1cd6:	2e 93       	st	-X, r18
    1cd8:	14 97       	sbiw	r26, 0x04	; 4
    1cda:	37 83       	std	Z+7, r19	; 0x07
    1cdc:	26 83       	std	Z+6, r18	; 0x06
    1cde:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ce0:	8e 9f       	mul	r24, r30
    1ce2:	f0 01       	movw	r30, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	e1 5e       	subi	r30, 0xE1	; 225
    1ce8:	fa 4e       	sbci	r31, 0xEA	; 234
    1cea:	fd 87       	std	Y+13, r31	; 0x0d
    1cec:	ec 87       	std	Y+12, r30	; 0x0c
    1cee:	80 81       	ld	r24, Z
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	80 83       	st	Z, r24
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	80 91 dc 14 	lds	r24, 0x14DC	; 0x8014dc <xSchedulerRunning>
    1cfc:	88 23       	and	r24, r24
    1cfe:	51 f0       	breq	.+20     	; 0x1d14 <prvAddNewTaskToReadyList+0xd8>
    1d00:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    1d04:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1d08:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d0c:	98 17       	cp	r25, r24
    1d0e:	10 f4       	brcc	.+4      	; 0x1d14 <prvAddNewTaskToReadyList+0xd8>
    1d10:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <prvCheckTasksWaitingTermination>:
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	1b c0       	rjmp	.+54     	; 0x1d56 <prvCheckTasksWaitingTermination+0x3c>
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	0f 92       	push	r0
    1d26:	e0 91 f6 14 	lds	r30, 0x14F6	; 0x8014f6 <xTasksWaitingTermination+0x7>
    1d2a:	f0 91 f7 14 	lds	r31, 0x14F7	; 0x8014f7 <xTasksWaitingTermination+0x8>
    1d2e:	c0 85       	ldd	r28, Z+8	; 0x08
    1d30:	d1 85       	ldd	r29, Z+9	; 0x09
    1d32:	ce 01       	movw	r24, r28
    1d34:	02 96       	adiw	r24, 0x02	; 2
    1d36:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    1d3a:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <uxCurrentNumberOfTasks>
    1d3e:	81 50       	subi	r24, 0x01	; 1
    1d40:	80 93 e2 14 	sts	0x14E2, r24	; 0x8014e2 <uxCurrentNumberOfTasks>
    1d44:	80 91 ee 14 	lds	r24, 0x14EE	; 0x8014ee <uxDeletedTasksWaitingCleanUp>
    1d48:	81 50       	subi	r24, 0x01	; 1
    1d4a:	80 93 ee 14 	sts	0x14EE, r24	; 0x8014ee <uxDeletedTasksWaitingCleanUp>
    1d4e:	0f 90       	pop	r0
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	ce 01       	movw	r24, r28
    1d54:	b8 de       	rcall	.-656    	; 0x1ac6 <prvDeleteTCB>
    1d56:	80 91 ee 14 	lds	r24, 0x14EE	; 0x8014ee <uxDeletedTasksWaitingCleanUp>
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	e1 cf       	rjmp	.-62     	; 0x1d20 <prvCheckTasksWaitingTermination+0x6>
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <prvAddCurrentTaskToDelayedList>:
    1d64:	8f 92       	push	r8
    1d66:	9f 92       	push	r9
    1d68:	af 92       	push	r10
    1d6a:	bf 92       	push	r11
    1d6c:	cf 92       	push	r12
    1d6e:	df 92       	push	r13
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	6b 01       	movw	r12, r22
    1d7a:	7c 01       	movw	r14, r24
    1d7c:	c4 2f       	mov	r28, r20
    1d7e:	80 90 de 14 	lds	r8, 0x14DE	; 0x8014de <xTickCount>
    1d82:	90 90 df 14 	lds	r9, 0x14DF	; 0x8014df <xTickCount+0x1>
    1d86:	a0 90 e0 14 	lds	r10, 0x14E0	; 0x8014e0 <xTickCount+0x2>
    1d8a:	b0 90 e1 14 	lds	r11, 0x14E1	; 0x8014e1 <xTickCount+0x3>
    1d8e:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    1d92:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1d96:	02 96       	adiw	r24, 0x02	; 2
    1d98:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	c8 16       	cp	r12, r24
    1da0:	d8 06       	cpc	r13, r24
    1da2:	e8 06       	cpc	r14, r24
    1da4:	f8 06       	cpc	r15, r24
    1da6:	b1 f5       	brne	.+108    	; 0x1e14 <prvAddCurrentTaskToDelayedList+0xb0>
    1da8:	cc 23       	and	r28, r28
    1daa:	a1 f1       	breq	.+104    	; 0x1e14 <prvAddCurrentTaskToDelayedList+0xb0>
    1dac:	e3 ee       	ldi	r30, 0xE3	; 227
    1dae:	f4 e1       	ldi	r31, 0x14	; 20
    1db0:	a1 81       	ldd	r26, Z+1	; 0x01
    1db2:	b2 81       	ldd	r27, Z+2	; 0x02
    1db4:	c0 91 8d 15 	lds	r28, 0x158D	; 0x80158d <pxCurrentTCB>
    1db8:	d0 91 8e 15 	lds	r29, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1dbc:	bf 83       	std	Y+7, r27	; 0x07
    1dbe:	ae 83       	std	Y+6, r26	; 0x06
    1dc0:	c0 91 8d 15 	lds	r28, 0x158D	; 0x80158d <pxCurrentTCB>
    1dc4:	d0 91 8e 15 	lds	r29, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1dc8:	16 96       	adiw	r26, 0x06	; 6
    1dca:	8d 91       	ld	r24, X+
    1dcc:	9c 91       	ld	r25, X
    1dce:	17 97       	sbiw	r26, 0x07	; 7
    1dd0:	99 87       	std	Y+9, r25	; 0x09
    1dd2:	88 87       	std	Y+8, r24	; 0x08
    1dd4:	16 96       	adiw	r26, 0x06	; 6
    1dd6:	cd 91       	ld	r28, X+
    1dd8:	dc 91       	ld	r29, X
    1dda:	17 97       	sbiw	r26, 0x07	; 7
    1ddc:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    1de0:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1de4:	02 96       	adiw	r24, 0x02	; 2
    1de6:	9d 83       	std	Y+5, r25	; 0x05
    1de8:	8c 83       	std	Y+4, r24	; 0x04
    1dea:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    1dee:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1df2:	02 96       	adiw	r24, 0x02	; 2
    1df4:	17 96       	adiw	r26, 0x07	; 7
    1df6:	9c 93       	st	X, r25
    1df8:	8e 93       	st	-X, r24
    1dfa:	16 97       	sbiw	r26, 0x06	; 6
    1dfc:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    1e00:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1e04:	1d 96       	adiw	r26, 0x0d	; 13
    1e06:	fc 93       	st	X, r31
    1e08:	ee 93       	st	-X, r30
    1e0a:	1c 97       	sbiw	r26, 0x0c	; 12
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	80 83       	st	Z, r24
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <prvAddCurrentTaskToDelayedList+0x12e>
    1e14:	c8 0c       	add	r12, r8
    1e16:	d9 1c       	adc	r13, r9
    1e18:	ea 1c       	adc	r14, r10
    1e1a:	fb 1c       	adc	r15, r11
    1e1c:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    1e20:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1e24:	c2 82       	std	Z+2, r12	; 0x02
    1e26:	d3 82       	std	Z+3, r13	; 0x03
    1e28:	e4 82       	std	Z+4, r14	; 0x04
    1e2a:	f5 82       	std	Z+5, r15	; 0x05
    1e2c:	c8 14       	cp	r12, r8
    1e2e:	d9 04       	cpc	r13, r9
    1e30:	ea 04       	cpc	r14, r10
    1e32:	fb 04       	cpc	r15, r11
    1e34:	68 f4       	brcc	.+26     	; 0x1e50 <prvAddCurrentTaskToDelayedList+0xec>
    1e36:	60 91 8d 15 	lds	r22, 0x158D	; 0x80158d <pxCurrentTCB>
    1e3a:	70 91 8e 15 	lds	r23, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1e3e:	80 91 05 15 	lds	r24, 0x1505	; 0x801505 <pxOverflowDelayedTaskList>
    1e42:	90 91 06 15 	lds	r25, 0x1506	; 0x801506 <pxOverflowDelayedTaskList+0x1>
    1e46:	6e 5f       	subi	r22, 0xFE	; 254
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    1e4e:	21 c0       	rjmp	.+66     	; 0x1e92 <prvAddCurrentTaskToDelayedList+0x12e>
    1e50:	60 91 8d 15 	lds	r22, 0x158D	; 0x80158d <pxCurrentTCB>
    1e54:	70 91 8e 15 	lds	r23, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    1e58:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxDelayedTaskList>
    1e5c:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxDelayedTaskList+0x1>
    1e60:	6e 5f       	subi	r22, 0xFE	; 254
    1e62:	7f 4f       	sbci	r23, 0xFF	; 255
    1e64:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    1e68:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <xNextTaskUnblockTime>
    1e6c:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <xNextTaskUnblockTime+0x1>
    1e70:	a0 91 d3 14 	lds	r26, 0x14D3	; 0x8014d3 <xNextTaskUnblockTime+0x2>
    1e74:	b0 91 d4 14 	lds	r27, 0x14D4	; 0x8014d4 <xNextTaskUnblockTime+0x3>
    1e78:	c8 16       	cp	r12, r24
    1e7a:	d9 06       	cpc	r13, r25
    1e7c:	ea 06       	cpc	r14, r26
    1e7e:	fb 06       	cpc	r15, r27
    1e80:	40 f4       	brcc	.+16     	; 0x1e92 <prvAddCurrentTaskToDelayedList+0x12e>
    1e82:	c0 92 d1 14 	sts	0x14D1, r12	; 0x8014d1 <xNextTaskUnblockTime>
    1e86:	d0 92 d2 14 	sts	0x14D2, r13	; 0x8014d2 <xNextTaskUnblockTime+0x1>
    1e8a:	e0 92 d3 14 	sts	0x14D3, r14	; 0x8014d3 <xNextTaskUnblockTime+0x2>
    1e8e:	f0 92 d4 14 	sts	0x14D4, r15	; 0x8014d4 <xNextTaskUnblockTime+0x3>
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	bf 90       	pop	r11
    1ea0:	af 90       	pop	r10
    1ea2:	9f 90       	pop	r9
    1ea4:	8f 90       	pop	r8
    1ea6:	08 95       	ret

00001ea8 <xTaskCreate>:
    1ea8:	2f 92       	push	r2
    1eaa:	3f 92       	push	r3
    1eac:	4f 92       	push	r4
    1eae:	5f 92       	push	r5
    1eb0:	6f 92       	push	r6
    1eb2:	7f 92       	push	r7
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	3c 01       	movw	r6, r24
    1ecc:	1b 01       	movw	r2, r22
    1ece:	4a 01       	movw	r8, r20
    1ed0:	29 01       	movw	r4, r18
    1ed2:	ca 01       	movw	r24, r20
    1ed4:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
    1ed8:	6c 01       	movw	r12, r24
    1eda:	89 2b       	or	r24, r25
    1edc:	71 f0       	breq	.+28     	; 0x1efa <xTaskCreate+0x52>
    1ede:	84 e3       	ldi	r24, 0x34	; 52
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
    1ee6:	ec 01       	movw	r28, r24
    1ee8:	89 2b       	or	r24, r25
    1eea:	19 f0       	breq	.+6      	; 0x1ef2 <xTaskCreate+0x4a>
    1eec:	dc 8e       	std	Y+28, r13	; 0x1c
    1eee:	cb 8e       	std	Y+27, r12	; 0x1b
    1ef0:	06 c0       	rjmp	.+12     	; 0x1efe <xTaskCreate+0x56>
    1ef2:	c6 01       	movw	r24, r12
    1ef4:	0e 94 bf 04 	call	0x97e	; 0x97e <vPortFree>
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <xTaskCreate+0x56>
    1efa:	c0 e0       	ldi	r28, 0x00	; 0
    1efc:	d0 e0       	ldi	r29, 0x00	; 0
    1efe:	20 97       	sbiw	r28, 0x00	; 0
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <xTaskCreate+0x72>
    1f02:	a1 2c       	mov	r10, r1
    1f04:	b1 2c       	mov	r11, r1
    1f06:	6e 01       	movw	r12, r28
    1f08:	92 01       	movw	r18, r4
    1f0a:	a4 01       	movw	r20, r8
    1f0c:	b1 01       	movw	r22, r2
    1f0e:	c3 01       	movw	r24, r6
    1f10:	e7 dd       	rcall	.-1074   	; 0x1ae0 <prvInitialiseNewTask>
    1f12:	ce 01       	movw	r24, r28
    1f14:	93 de       	rcall	.-730    	; 0x1c3c <prvAddNewTaskToReadyList>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <xTaskCreate+0x74>
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	0f 91       	pop	r16
    1f22:	ff 90       	pop	r15
    1f24:	ef 90       	pop	r14
    1f26:	df 90       	pop	r13
    1f28:	cf 90       	pop	r12
    1f2a:	bf 90       	pop	r11
    1f2c:	af 90       	pop	r10
    1f2e:	9f 90       	pop	r9
    1f30:	8f 90       	pop	r8
    1f32:	7f 90       	pop	r7
    1f34:	6f 90       	pop	r6
    1f36:	5f 90       	pop	r5
    1f38:	4f 90       	pop	r4
    1f3a:	3f 90       	pop	r3
    1f3c:	2f 90       	pop	r2
    1f3e:	08 95       	ret

00001f40 <vTaskStartScheduler>:
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	0f 2e       	mov	r0, r31
    1f48:	ff ec       	ldi	r31, 0xCF	; 207
    1f4a:	ef 2e       	mov	r14, r31
    1f4c:	f4 e1       	ldi	r31, 0x14	; 20
    1f4e:	ff 2e       	mov	r15, r31
    1f50:	f0 2d       	mov	r31, r0
    1f52:	00 e0       	ldi	r16, 0x00	; 0
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 ec       	ldi	r20, 0xC0	; 192
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	69 ea       	ldi	r22, 0xA9	; 169
    1f5e:	72 e0       	ldi	r23, 0x02	; 2
    1f60:	8d ec       	ldi	r24, 0xCD	; 205
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a1 df       	rcall	.-190    	; 0x1ea8 <xTaskCreate>
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	11 f4       	brne	.+4      	; 0x1f6e <vTaskStartScheduler+0x2e>
    1f6a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTimerCreateTimerTask>
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	c9 f4       	brne	.+50     	; 0x1fa4 <vTaskStartScheduler+0x64>
    1f72:	f8 94       	cli
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	dc 01       	movw	r26, r24
    1f7a:	80 93 d1 14 	sts	0x14D1, r24	; 0x8014d1 <xNextTaskUnblockTime>
    1f7e:	90 93 d2 14 	sts	0x14D2, r25	; 0x8014d2 <xNextTaskUnblockTime+0x1>
    1f82:	a0 93 d3 14 	sts	0x14D3, r26	; 0x8014d3 <xNextTaskUnblockTime+0x2>
    1f86:	b0 93 d4 14 	sts	0x14D4, r27	; 0x8014d4 <xNextTaskUnblockTime+0x3>
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	80 93 dc 14 	sts	0x14DC, r24	; 0x8014dc <xSchedulerRunning>
    1f90:	10 92 de 14 	sts	0x14DE, r1	; 0x8014de <xTickCount>
    1f94:	10 92 df 14 	sts	0x14DF, r1	; 0x8014df <xTickCount+0x1>
    1f98:	10 92 e0 14 	sts	0x14E0, r1	; 0x8014e0 <xTickCount+0x2>
    1f9c:	10 92 e1 14 	sts	0x14E1, r1	; 0x8014e1 <xTickCount+0x3>
    1fa0:	0e 94 98 05 	call	0xb30	; 0xb30 <xPortStartScheduler>
    1fa4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1fa8:	0f 91       	pop	r16
    1faa:	ff 90       	pop	r15
    1fac:	ef 90       	pop	r14
    1fae:	08 95       	ret

00001fb0 <vTaskSuspendAll>:
    1fb0:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxSchedulerSuspended>
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	80 93 ce 14 	sts	0x14CE, r24	; 0x8014ce <uxSchedulerSuspended>
    1fba:	08 95       	ret

00001fbc <xTaskGetTickCount>:
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	0f 92       	push	r0
    1fc2:	60 91 de 14 	lds	r22, 0x14DE	; 0x8014de <xTickCount>
    1fc6:	70 91 df 14 	lds	r23, 0x14DF	; 0x8014df <xTickCount+0x1>
    1fca:	80 91 e0 14 	lds	r24, 0x14E0	; 0x8014e0 <xTickCount+0x2>
    1fce:	90 91 e1 14 	lds	r25, 0x14E1	; 0x8014e1 <xTickCount+0x3>
    1fd2:	0f 90       	pop	r0
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	08 95       	ret

00001fd8 <xTaskIncrementTick>:
    1fd8:	cf 92       	push	r12
    1fda:	df 92       	push	r13
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxSchedulerSuspended>
    1fe8:	81 11       	cpse	r24, r1
    1fea:	05 c1       	rjmp	.+522    	; 0x21f6 <__DATA_REGION_LENGTH__+0x1f6>
    1fec:	c0 90 de 14 	lds	r12, 0x14DE	; 0x8014de <xTickCount>
    1ff0:	d0 90 df 14 	lds	r13, 0x14DF	; 0x8014df <xTickCount+0x1>
    1ff4:	e0 90 e0 14 	lds	r14, 0x14E0	; 0x8014e0 <xTickCount+0x2>
    1ff8:	f0 90 e1 14 	lds	r15, 0x14E1	; 0x8014e1 <xTickCount+0x3>
    1ffc:	8f ef       	ldi	r24, 0xFF	; 255
    1ffe:	c8 1a       	sub	r12, r24
    2000:	d8 0a       	sbc	r13, r24
    2002:	e8 0a       	sbc	r14, r24
    2004:	f8 0a       	sbc	r15, r24
    2006:	c0 92 de 14 	sts	0x14DE, r12	; 0x8014de <xTickCount>
    200a:	d0 92 df 14 	sts	0x14DF, r13	; 0x8014df <xTickCount+0x1>
    200e:	e0 92 e0 14 	sts	0x14E0, r14	; 0x8014e0 <xTickCount+0x2>
    2012:	f0 92 e1 14 	sts	0x14E1, r15	; 0x8014e1 <xTickCount+0x3>
    2016:	c1 14       	cp	r12, r1
    2018:	d1 04       	cpc	r13, r1
    201a:	e1 04       	cpc	r14, r1
    201c:	f1 04       	cpc	r15, r1
    201e:	b1 f4       	brne	.+44     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2020:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxDelayedTaskList>
    2024:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxDelayedTaskList+0x1>
    2028:	20 91 05 15 	lds	r18, 0x1505	; 0x801505 <pxOverflowDelayedTaskList>
    202c:	30 91 06 15 	lds	r19, 0x1506	; 0x801506 <pxOverflowDelayedTaskList+0x1>
    2030:	30 93 08 15 	sts	0x1508, r19	; 0x801508 <pxDelayedTaskList+0x1>
    2034:	20 93 07 15 	sts	0x1507, r18	; 0x801507 <pxDelayedTaskList>
    2038:	90 93 06 15 	sts	0x1506, r25	; 0x801506 <pxOverflowDelayedTaskList+0x1>
    203c:	80 93 05 15 	sts	0x1505, r24	; 0x801505 <pxOverflowDelayedTaskList>
    2040:	80 91 d6 14 	lds	r24, 0x14D6	; 0x8014d6 <xNumOfOverflows>
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	80 93 d6 14 	sts	0x14D6, r24	; 0x8014d6 <xNumOfOverflows>
    204a:	16 dd       	rcall	.-1492   	; 0x1a78 <prvResetNextTaskUnblockTime>
    204c:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <xNextTaskUnblockTime>
    2050:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <xNextTaskUnblockTime+0x1>
    2054:	a0 91 d3 14 	lds	r26, 0x14D3	; 0x8014d3 <xNextTaskUnblockTime+0x2>
    2058:	b0 91 d4 14 	lds	r27, 0x14D4	; 0x8014d4 <xNextTaskUnblockTime+0x3>
    205c:	c8 16       	cp	r12, r24
    205e:	d9 06       	cpc	r13, r25
    2060:	ea 06       	cpc	r14, r26
    2062:	fb 06       	cpc	r15, r27
    2064:	20 f4       	brcc	.+8      	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	b2 c0       	rjmp	.+356    	; 0x21ce <__DATA_REGION_LENGTH__+0x1ce>
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxDelayedTaskList>
    2074:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxDelayedTaskList+0x1>
    2078:	90 81       	ld	r25, Z
    207a:	91 11       	cpse	r25, r1
    207c:	0c c0       	rjmp	.+24     	; 0x2096 <__DATA_REGION_LENGTH__+0x96>
    207e:	4f ef       	ldi	r20, 0xFF	; 255
    2080:	5f ef       	ldi	r21, 0xFF	; 255
    2082:	ba 01       	movw	r22, r20
    2084:	40 93 d1 14 	sts	0x14D1, r20	; 0x8014d1 <xNextTaskUnblockTime>
    2088:	50 93 d2 14 	sts	0x14D2, r21	; 0x8014d2 <xNextTaskUnblockTime+0x1>
    208c:	60 93 d3 14 	sts	0x14D3, r22	; 0x8014d3 <xNextTaskUnblockTime+0x2>
    2090:	70 93 d4 14 	sts	0x14D4, r23	; 0x8014d4 <xNextTaskUnblockTime+0x3>
    2094:	9c c0       	rjmp	.+312    	; 0x21ce <__DATA_REGION_LENGTH__+0x1ce>
    2096:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxDelayedTaskList>
    209a:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxDelayedTaskList+0x1>
    209e:	07 80       	ldd	r0, Z+7	; 0x07
    20a0:	f0 85       	ldd	r31, Z+8	; 0x08
    20a2:	e0 2d       	mov	r30, r0
    20a4:	00 84       	ldd	r0, Z+8	; 0x08
    20a6:	f1 85       	ldd	r31, Z+9	; 0x09
    20a8:	e0 2d       	mov	r30, r0
    20aa:	42 81       	ldd	r20, Z+2	; 0x02
    20ac:	53 81       	ldd	r21, Z+3	; 0x03
    20ae:	64 81       	ldd	r22, Z+4	; 0x04
    20b0:	75 81       	ldd	r23, Z+5	; 0x05
    20b2:	c4 16       	cp	r12, r20
    20b4:	d5 06       	cpc	r13, r21
    20b6:	e6 06       	cpc	r14, r22
    20b8:	f7 06       	cpc	r15, r23
    20ba:	48 f4       	brcc	.+18     	; 0x20ce <__DATA_REGION_LENGTH__+0xce>
    20bc:	40 93 d1 14 	sts	0x14D1, r20	; 0x8014d1 <xNextTaskUnblockTime>
    20c0:	50 93 d2 14 	sts	0x14D2, r21	; 0x8014d2 <xNextTaskUnblockTime+0x1>
    20c4:	60 93 d3 14 	sts	0x14D3, r22	; 0x8014d3 <xNextTaskUnblockTime+0x2>
    20c8:	70 93 d4 14 	sts	0x14D4, r23	; 0x8014d4 <xNextTaskUnblockTime+0x3>
    20cc:	80 c0       	rjmp	.+256    	; 0x21ce <__DATA_REGION_LENGTH__+0x1ce>
    20ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    20d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    20d2:	c6 81       	ldd	r28, Z+6	; 0x06
    20d4:	d7 81       	ldd	r29, Z+7	; 0x07
    20d6:	20 85       	ldd	r18, Z+8	; 0x08
    20d8:	31 85       	ldd	r19, Z+9	; 0x09
    20da:	3f 83       	std	Y+7, r19	; 0x07
    20dc:	2e 83       	std	Y+6, r18	; 0x06
    20de:	c0 85       	ldd	r28, Z+8	; 0x08
    20e0:	d1 85       	ldd	r29, Z+9	; 0x09
    20e2:	26 81       	ldd	r18, Z+6	; 0x06
    20e4:	37 81       	ldd	r19, Z+7	; 0x07
    20e6:	3d 83       	std	Y+5, r19	; 0x05
    20e8:	2c 83       	std	Y+4, r18	; 0x04
    20ea:	11 96       	adiw	r26, 0x01	; 1
    20ec:	4d 91       	ld	r20, X+
    20ee:	5c 91       	ld	r21, X
    20f0:	12 97       	sbiw	r26, 0x02	; 2
    20f2:	9f 01       	movw	r18, r30
    20f4:	2e 5f       	subi	r18, 0xFE	; 254
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	42 17       	cp	r20, r18
    20fa:	53 07       	cpc	r21, r19
    20fc:	31 f4       	brne	.+12     	; 0x210a <__DATA_REGION_LENGTH__+0x10a>
    20fe:	40 85       	ldd	r20, Z+8	; 0x08
    2100:	51 85       	ldd	r21, Z+9	; 0x09
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	5c 93       	st	X, r21
    2106:	4e 93       	st	-X, r20
    2108:	11 97       	sbiw	r26, 0x01	; 1
    210a:	15 86       	std	Z+13, r1	; 0x0d
    210c:	14 86       	std	Z+12, r1	; 0x0c
    210e:	9c 91       	ld	r25, X
    2110:	91 50       	subi	r25, 0x01	; 1
    2112:	9c 93       	st	X, r25
    2114:	a0 8d       	ldd	r26, Z+24	; 0x18
    2116:	b1 8d       	ldd	r27, Z+25	; 0x19
    2118:	10 97       	sbiw	r26, 0x00	; 0
    211a:	09 f1       	breq	.+66     	; 0x215e <__DATA_REGION_LENGTH__+0x15e>
    211c:	c2 89       	ldd	r28, Z+18	; 0x12
    211e:	d3 89       	ldd	r29, Z+19	; 0x13
    2120:	44 89       	ldd	r20, Z+20	; 0x14
    2122:	55 89       	ldd	r21, Z+21	; 0x15
    2124:	5f 83       	std	Y+7, r21	; 0x07
    2126:	4e 83       	std	Y+6, r20	; 0x06
    2128:	c4 89       	ldd	r28, Z+20	; 0x14
    212a:	d5 89       	ldd	r29, Z+21	; 0x15
    212c:	42 89       	ldd	r20, Z+18	; 0x12
    212e:	53 89       	ldd	r21, Z+19	; 0x13
    2130:	5d 83       	std	Y+5, r21	; 0x05
    2132:	4c 83       	std	Y+4, r20	; 0x04
    2134:	11 96       	adiw	r26, 0x01	; 1
    2136:	6d 91       	ld	r22, X+
    2138:	7c 91       	ld	r23, X
    213a:	12 97       	sbiw	r26, 0x02	; 2
    213c:	af 01       	movw	r20, r30
    213e:	42 5f       	subi	r20, 0xF2	; 242
    2140:	5f 4f       	sbci	r21, 0xFF	; 255
    2142:	64 17       	cp	r22, r20
    2144:	75 07       	cpc	r23, r21
    2146:	31 f4       	brne	.+12     	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
    2148:	44 89       	ldd	r20, Z+20	; 0x14
    214a:	55 89       	ldd	r21, Z+21	; 0x15
    214c:	12 96       	adiw	r26, 0x02	; 2
    214e:	5c 93       	st	X, r21
    2150:	4e 93       	st	-X, r20
    2152:	11 97       	sbiw	r26, 0x01	; 1
    2154:	11 8e       	std	Z+25, r1	; 0x19
    2156:	10 8e       	std	Z+24, r1	; 0x18
    2158:	9c 91       	ld	r25, X
    215a:	91 50       	subi	r25, 0x01	; 1
    215c:	9c 93       	st	X, r25
    215e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2160:	90 91 dd 14 	lds	r25, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    2164:	9a 17       	cp	r25, r26
    2166:	10 f4       	brcc	.+4      	; 0x216c <__DATA_REGION_LENGTH__+0x16c>
    2168:	a0 93 dd 14 	sts	0x14DD, r26	; 0x8014dd <uxTopReadyPriority>
    216c:	9b e0       	ldi	r25, 0x0B	; 11
    216e:	9a 9f       	mul	r25, r26
    2170:	d0 01       	movw	r26, r0
    2172:	11 24       	eor	r1, r1
    2174:	a1 5e       	subi	r26, 0xE1	; 225
    2176:	ba 4e       	sbci	r27, 0xEA	; 234
    2178:	11 96       	adiw	r26, 0x01	; 1
    217a:	0d 90       	ld	r0, X+
    217c:	bc 91       	ld	r27, X
    217e:	a0 2d       	mov	r26, r0
    2180:	b7 83       	std	Z+7, r27	; 0x07
    2182:	a6 83       	std	Z+6, r26	; 0x06
    2184:	16 96       	adiw	r26, 0x06	; 6
    2186:	4d 91       	ld	r20, X+
    2188:	5c 91       	ld	r21, X
    218a:	17 97       	sbiw	r26, 0x07	; 7
    218c:	51 87       	std	Z+9, r21	; 0x09
    218e:	40 87       	std	Z+8, r20	; 0x08
    2190:	16 96       	adiw	r26, 0x06	; 6
    2192:	cd 91       	ld	r28, X+
    2194:	dc 91       	ld	r29, X
    2196:	17 97       	sbiw	r26, 0x07	; 7
    2198:	3d 83       	std	Y+5, r19	; 0x05
    219a:	2c 83       	std	Y+4, r18	; 0x04
    219c:	17 96       	adiw	r26, 0x07	; 7
    219e:	3c 93       	st	X, r19
    21a0:	2e 93       	st	-X, r18
    21a2:	16 97       	sbiw	r26, 0x06	; 6
    21a4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21a6:	9a 9f       	mul	r25, r26
    21a8:	d0 01       	movw	r26, r0
    21aa:	11 24       	eor	r1, r1
    21ac:	a1 5e       	subi	r26, 0xE1	; 225
    21ae:	ba 4e       	sbci	r27, 0xEA	; 234
    21b0:	b5 87       	std	Z+13, r27	; 0x0d
    21b2:	a4 87       	std	Z+12, r26	; 0x0c
    21b4:	9c 91       	ld	r25, X
    21b6:	9f 5f       	subi	r25, 0xFF	; 255
    21b8:	9c 93       	st	X, r25
    21ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    21bc:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    21c0:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    21c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    21c6:	29 17       	cp	r18, r25
    21c8:	08 f0       	brcs	.+2      	; 0x21cc <__DATA_REGION_LENGTH__+0x1cc>
    21ca:	4f cf       	rjmp	.-354    	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    21cc:	51 cf       	rjmp	.-350    	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    21ce:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    21d2:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    21d6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    21d8:	9b e0       	ldi	r25, 0x0B	; 11
    21da:	e9 9f       	mul	r30, r25
    21dc:	f0 01       	movw	r30, r0
    21de:	11 24       	eor	r1, r1
    21e0:	e1 5e       	subi	r30, 0xE1	; 225
    21e2:	fa 4e       	sbci	r31, 0xEA	; 234
    21e4:	90 81       	ld	r25, Z
    21e6:	92 30       	cpi	r25, 0x02	; 2
    21e8:	08 f0       	brcs	.+2      	; 0x21ec <__DATA_REGION_LENGTH__+0x1ec>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 91 d7 14 	lds	r25, 0x14D7	; 0x8014d7 <xYieldPending>
    21f0:	91 11       	cpse	r25, r1
    21f2:	16 c0       	rjmp	.+44     	; 0x2220 <__stack+0x21>
    21f4:	16 c0       	rjmp	.+44     	; 0x2222 <__stack+0x23>
    21f6:	80 91 d8 14 	lds	r24, 0x14D8	; 0x8014d8 <xPendedTicks>
    21fa:	90 91 d9 14 	lds	r25, 0x14D9	; 0x8014d9 <xPendedTicks+0x1>
    21fe:	a0 91 da 14 	lds	r26, 0x14DA	; 0x8014da <xPendedTicks+0x2>
    2202:	b0 91 db 14 	lds	r27, 0x14DB	; 0x8014db <xPendedTicks+0x3>
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	a1 1d       	adc	r26, r1
    220a:	b1 1d       	adc	r27, r1
    220c:	80 93 d8 14 	sts	0x14D8, r24	; 0x8014d8 <xPendedTicks>
    2210:	90 93 d9 14 	sts	0x14D9, r25	; 0x8014d9 <xPendedTicks+0x1>
    2214:	a0 93 da 14 	sts	0x14DA, r26	; 0x8014da <xPendedTicks+0x2>
    2218:	b0 93 db 14 	sts	0x14DB, r27	; 0x8014db <xPendedTicks+0x3>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	01 c0       	rjmp	.+2      	; 0x2222 <__stack+0x23>
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	ff 90       	pop	r15
    2228:	ef 90       	pop	r14
    222a:	df 90       	pop	r13
    222c:	cf 90       	pop	r12
    222e:	08 95       	ret

00002230 <xTaskResumeAll>:
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	0f 92       	push	r0
    2242:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxSchedulerSuspended>
    2246:	81 50       	subi	r24, 0x01	; 1
    2248:	80 93 ce 14 	sts	0x14CE, r24	; 0x8014ce <uxSchedulerSuspended>
    224c:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxSchedulerSuspended>
    2250:	81 11       	cpse	r24, r1
    2252:	be c0       	rjmp	.+380    	; 0x23d0 <xTaskResumeAll+0x1a0>
    2254:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <uxCurrentNumberOfTasks>
    2258:	81 11       	cpse	r24, r1
    225a:	88 c0       	rjmp	.+272    	; 0x236c <xTaskResumeAll+0x13c>
    225c:	bc c0       	rjmp	.+376    	; 0x23d6 <xTaskResumeAll+0x1a6>
    225e:	e0 91 01 15 	lds	r30, 0x1501	; 0x801501 <xPendingReadyList+0x7>
    2262:	f0 91 02 15 	lds	r31, 0x1502	; 0x801502 <xPendingReadyList+0x8>
    2266:	00 84       	ldd	r0, Z+8	; 0x08
    2268:	f1 85       	ldd	r31, Z+9	; 0x09
    226a:	e0 2d       	mov	r30, r0
    226c:	a0 8d       	ldd	r26, Z+24	; 0x18
    226e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2270:	c2 89       	ldd	r28, Z+18	; 0x12
    2272:	d3 89       	ldd	r29, Z+19	; 0x13
    2274:	84 89       	ldd	r24, Z+20	; 0x14
    2276:	95 89       	ldd	r25, Z+21	; 0x15
    2278:	9f 83       	std	Y+7, r25	; 0x07
    227a:	8e 83       	std	Y+6, r24	; 0x06
    227c:	c4 89       	ldd	r28, Z+20	; 0x14
    227e:	d5 89       	ldd	r29, Z+21	; 0x15
    2280:	82 89       	ldd	r24, Z+18	; 0x12
    2282:	93 89       	ldd	r25, Z+19	; 0x13
    2284:	9d 83       	std	Y+5, r25	; 0x05
    2286:	8c 83       	std	Y+4, r24	; 0x04
    2288:	11 96       	adiw	r26, 0x01	; 1
    228a:	2d 91       	ld	r18, X+
    228c:	3c 91       	ld	r19, X
    228e:	12 97       	sbiw	r26, 0x02	; 2
    2290:	cf 01       	movw	r24, r30
    2292:	0e 96       	adiw	r24, 0x0e	; 14
    2294:	28 17       	cp	r18, r24
    2296:	39 07       	cpc	r19, r25
    2298:	31 f4       	brne	.+12     	; 0x22a6 <xTaskResumeAll+0x76>
    229a:	84 89       	ldd	r24, Z+20	; 0x14
    229c:	95 89       	ldd	r25, Z+21	; 0x15
    229e:	12 96       	adiw	r26, 0x02	; 2
    22a0:	9c 93       	st	X, r25
    22a2:	8e 93       	st	-X, r24
    22a4:	11 97       	sbiw	r26, 0x01	; 1
    22a6:	11 8e       	std	Z+25, r1	; 0x19
    22a8:	10 8e       	std	Z+24, r1	; 0x18
    22aa:	8c 91       	ld	r24, X
    22ac:	81 50       	subi	r24, 0x01	; 1
    22ae:	8c 93       	st	X, r24
    22b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    22b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    22b4:	c6 81       	ldd	r28, Z+6	; 0x06
    22b6:	d7 81       	ldd	r29, Z+7	; 0x07
    22b8:	80 85       	ldd	r24, Z+8	; 0x08
    22ba:	91 85       	ldd	r25, Z+9	; 0x09
    22bc:	9f 83       	std	Y+7, r25	; 0x07
    22be:	8e 83       	std	Y+6, r24	; 0x06
    22c0:	c0 85       	ldd	r28, Z+8	; 0x08
    22c2:	d1 85       	ldd	r29, Z+9	; 0x09
    22c4:	86 81       	ldd	r24, Z+6	; 0x06
    22c6:	97 81       	ldd	r25, Z+7	; 0x07
    22c8:	9d 83       	std	Y+5, r25	; 0x05
    22ca:	8c 83       	std	Y+4, r24	; 0x04
    22cc:	11 96       	adiw	r26, 0x01	; 1
    22ce:	8d 91       	ld	r24, X+
    22d0:	9c 91       	ld	r25, X
    22d2:	12 97       	sbiw	r26, 0x02	; 2
    22d4:	9f 01       	movw	r18, r30
    22d6:	2e 5f       	subi	r18, 0xFE	; 254
    22d8:	3f 4f       	sbci	r19, 0xFF	; 255
    22da:	82 17       	cp	r24, r18
    22dc:	93 07       	cpc	r25, r19
    22de:	31 f4       	brne	.+12     	; 0x22ec <xTaskResumeAll+0xbc>
    22e0:	80 85       	ldd	r24, Z+8	; 0x08
    22e2:	91 85       	ldd	r25, Z+9	; 0x09
    22e4:	12 96       	adiw	r26, 0x02	; 2
    22e6:	9c 93       	st	X, r25
    22e8:	8e 93       	st	-X, r24
    22ea:	11 97       	sbiw	r26, 0x01	; 1
    22ec:	15 86       	std	Z+13, r1	; 0x0d
    22ee:	14 86       	std	Z+12, r1	; 0x0c
    22f0:	8c 91       	ld	r24, X
    22f2:	81 50       	subi	r24, 0x01	; 1
    22f4:	8c 93       	st	X, r24
    22f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22f8:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    22fc:	8a 17       	cp	r24, r26
    22fe:	10 f4       	brcc	.+4      	; 0x2304 <xTaskResumeAll+0xd4>
    2300:	a0 93 dd 14 	sts	0x14DD, r26	; 0x8014dd <uxTopReadyPriority>
    2304:	8b e0       	ldi	r24, 0x0B	; 11
    2306:	8a 9f       	mul	r24, r26
    2308:	d0 01       	movw	r26, r0
    230a:	11 24       	eor	r1, r1
    230c:	a1 5e       	subi	r26, 0xE1	; 225
    230e:	ba 4e       	sbci	r27, 0xEA	; 234
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	0d 90       	ld	r0, X+
    2314:	bc 91       	ld	r27, X
    2316:	a0 2d       	mov	r26, r0
    2318:	b7 83       	std	Z+7, r27	; 0x07
    231a:	a6 83       	std	Z+6, r26	; 0x06
    231c:	16 96       	adiw	r26, 0x06	; 6
    231e:	4d 91       	ld	r20, X+
    2320:	5c 91       	ld	r21, X
    2322:	17 97       	sbiw	r26, 0x07	; 7
    2324:	51 87       	std	Z+9, r21	; 0x09
    2326:	40 87       	std	Z+8, r20	; 0x08
    2328:	16 96       	adiw	r26, 0x06	; 6
    232a:	cd 91       	ld	r28, X+
    232c:	dc 91       	ld	r29, X
    232e:	17 97       	sbiw	r26, 0x07	; 7
    2330:	3d 83       	std	Y+5, r19	; 0x05
    2332:	2c 83       	std	Y+4, r18	; 0x04
    2334:	17 96       	adiw	r26, 0x07	; 7
    2336:	3c 93       	st	X, r19
    2338:	2e 93       	st	-X, r18
    233a:	16 97       	sbiw	r26, 0x06	; 6
    233c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    233e:	8a 9f       	mul	r24, r26
    2340:	d0 01       	movw	r26, r0
    2342:	11 24       	eor	r1, r1
    2344:	a1 5e       	subi	r26, 0xE1	; 225
    2346:	ba 4e       	sbci	r27, 0xEA	; 234
    2348:	b5 87       	std	Z+13, r27	; 0x0d
    234a:	a4 87       	std	Z+12, r26	; 0x0c
    234c:	8c 91       	ld	r24, X
    234e:	8f 5f       	subi	r24, 0xFF	; 255
    2350:	8c 93       	st	X, r24
    2352:	92 8d       	ldd	r25, Z+26	; 0x1a
    2354:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    2358:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    235c:	5a 96       	adiw	r26, 0x1a	; 26
    235e:	8c 91       	ld	r24, X
    2360:	98 17       	cp	r25, r24
    2362:	30 f0       	brcs	.+12     	; 0x2370 <xTaskResumeAll+0x140>
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xYieldPending>
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <xTaskResumeAll+0x140>
    236c:	e0 e0       	ldi	r30, 0x00	; 0
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 91 fa 14 	lds	r24, 0x14FA	; 0x8014fa <xPendingReadyList>
    2374:	81 11       	cpse	r24, r1
    2376:	73 cf       	rjmp	.-282    	; 0x225e <xTaskResumeAll+0x2e>
    2378:	ef 2b       	or	r30, r31
    237a:	09 f0       	breq	.+2      	; 0x237e <xTaskResumeAll+0x14e>
    237c:	7d db       	rcall	.-2310   	; 0x1a78 <prvResetNextTaskUnblockTime>
    237e:	c0 90 d8 14 	lds	r12, 0x14D8	; 0x8014d8 <xPendedTicks>
    2382:	d0 90 d9 14 	lds	r13, 0x14D9	; 0x8014d9 <xPendedTicks+0x1>
    2386:	e0 90 da 14 	lds	r14, 0x14DA	; 0x8014da <xPendedTicks+0x2>
    238a:	f0 90 db 14 	lds	r15, 0x14DB	; 0x8014db <xPendedTicks+0x3>
    238e:	c1 14       	cp	r12, r1
    2390:	d1 04       	cpc	r13, r1
    2392:	e1 04       	cpc	r14, r1
    2394:	f1 04       	cpc	r15, r1
    2396:	a1 f0       	breq	.+40     	; 0x23c0 <xTaskResumeAll+0x190>
    2398:	1f de       	rcall	.-962    	; 0x1fd8 <xTaskIncrementTick>
    239a:	88 23       	and	r24, r24
    239c:	19 f0       	breq	.+6      	; 0x23a4 <xTaskResumeAll+0x174>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xYieldPending>
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	c8 1a       	sub	r12, r24
    23a8:	d1 08       	sbc	r13, r1
    23aa:	e1 08       	sbc	r14, r1
    23ac:	f1 08       	sbc	r15, r1
    23ae:	a1 f7       	brne	.-24     	; 0x2398 <xTaskResumeAll+0x168>
    23b0:	10 92 d8 14 	sts	0x14D8, r1	; 0x8014d8 <xPendedTicks>
    23b4:	10 92 d9 14 	sts	0x14D9, r1	; 0x8014d9 <xPendedTicks+0x1>
    23b8:	10 92 da 14 	sts	0x14DA, r1	; 0x8014da <xPendedTicks+0x2>
    23bc:	10 92 db 14 	sts	0x14DB, r1	; 0x8014db <xPendedTicks+0x3>
    23c0:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <xYieldPending>
    23c4:	88 23       	and	r24, r24
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <xTaskResumeAll+0x1a4>
    23c8:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	03 c0       	rjmp	.+6      	; 0x23d6 <xTaskResumeAll+0x1a6>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <xTaskResumeAll+0x1a6>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	0f 90       	pop	r0
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	cf 90       	pop	r12
    23e6:	08 95       	ret

000023e8 <xTaskDelayUntil>:
    23e8:	8f 92       	push	r8
    23ea:	9f 92       	push	r9
    23ec:	af 92       	push	r10
    23ee:	bf 92       	push	r11
    23f0:	cf 92       	push	r12
    23f2:	df 92       	push	r13
    23f4:	ef 92       	push	r14
    23f6:	ff 92       	push	r15
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	ec 01       	movw	r28, r24
    2400:	6a 01       	movw	r12, r20
    2402:	7b 01       	movw	r14, r22
    2404:	d5 dd       	rcall	.-1110   	; 0x1fb0 <vTaskSuspendAll>
    2406:	80 90 de 14 	lds	r8, 0x14DE	; 0x8014de <xTickCount>
    240a:	90 90 df 14 	lds	r9, 0x14DF	; 0x8014df <xTickCount+0x1>
    240e:	a0 90 e0 14 	lds	r10, 0x14E0	; 0x8014e0 <xTickCount+0x2>
    2412:	b0 90 e1 14 	lds	r11, 0x14E1	; 0x8014e1 <xTickCount+0x3>
    2416:	88 81       	ld	r24, Y
    2418:	99 81       	ldd	r25, Y+1	; 0x01
    241a:	aa 81       	ldd	r26, Y+2	; 0x02
    241c:	bb 81       	ldd	r27, Y+3	; 0x03
    241e:	ac 01       	movw	r20, r24
    2420:	bd 01       	movw	r22, r26
    2422:	4c 0d       	add	r20, r12
    2424:	5d 1d       	adc	r21, r13
    2426:	6e 1d       	adc	r22, r14
    2428:	7f 1d       	adc	r23, r15
    242a:	88 16       	cp	r8, r24
    242c:	99 06       	cpc	r9, r25
    242e:	aa 06       	cpc	r10, r26
    2430:	bb 06       	cpc	r11, r27
    2432:	60 f4       	brcc	.+24     	; 0x244c <xTaskDelayUntil+0x64>
    2434:	48 17       	cp	r20, r24
    2436:	59 07       	cpc	r21, r25
    2438:	6a 07       	cpc	r22, r26
    243a:	7b 07       	cpc	r23, r27
    243c:	98 f4       	brcc	.+38     	; 0x2464 <xTaskDelayUntil+0x7c>
    243e:	84 16       	cp	r8, r20
    2440:	95 06       	cpc	r9, r21
    2442:	a6 06       	cpc	r10, r22
    2444:	b7 06       	cpc	r11, r23
    2446:	80 f0       	brcs	.+32     	; 0x2468 <xTaskDelayUntil+0x80>
    2448:	10 e0       	ldi	r17, 0x00	; 0
    244a:	13 c0       	rjmp	.+38     	; 0x2472 <xTaskDelayUntil+0x8a>
    244c:	48 17       	cp	r20, r24
    244e:	59 07       	cpc	r21, r25
    2450:	6a 07       	cpc	r22, r26
    2452:	7b 07       	cpc	r23, r27
    2454:	58 f0       	brcs	.+22     	; 0x246c <xTaskDelayUntil+0x84>
    2456:	84 16       	cp	r8, r20
    2458:	95 06       	cpc	r9, r21
    245a:	a6 06       	cpc	r10, r22
    245c:	b7 06       	cpc	r11, r23
    245e:	40 f0       	brcs	.+16     	; 0x2470 <xTaskDelayUntil+0x88>
    2460:	10 e0       	ldi	r17, 0x00	; 0
    2462:	07 c0       	rjmp	.+14     	; 0x2472 <xTaskDelayUntil+0x8a>
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <xTaskDelayUntil+0x8a>
    2468:	11 e0       	ldi	r17, 0x01	; 1
    246a:	03 c0       	rjmp	.+6      	; 0x2472 <xTaskDelayUntil+0x8a>
    246c:	11 e0       	ldi	r17, 0x01	; 1
    246e:	01 c0       	rjmp	.+2      	; 0x2472 <xTaskDelayUntil+0x8a>
    2470:	11 e0       	ldi	r17, 0x01	; 1
    2472:	48 83       	st	Y, r20
    2474:	59 83       	std	Y+1, r21	; 0x01
    2476:	6a 83       	std	Y+2, r22	; 0x02
    2478:	7b 83       	std	Y+3, r23	; 0x03
    247a:	11 23       	and	r17, r17
    247c:	41 f0       	breq	.+16     	; 0x248e <xTaskDelayUntil+0xa6>
    247e:	cb 01       	movw	r24, r22
    2480:	ba 01       	movw	r22, r20
    2482:	68 19       	sub	r22, r8
    2484:	79 09       	sbc	r23, r9
    2486:	8a 09       	sbc	r24, r10
    2488:	9b 09       	sbc	r25, r11
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	6b dc       	rcall	.-1834   	; 0x1d64 <prvAddCurrentTaskToDelayedList>
    248e:	d0 de       	rcall	.-608    	; 0x2230 <xTaskResumeAll>
    2490:	81 11       	cpse	r24, r1
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <xTaskDelayUntil+0xb0>
    2494:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    2498:	81 2f       	mov	r24, r17
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	1f 91       	pop	r17
    24a0:	ff 90       	pop	r15
    24a2:	ef 90       	pop	r14
    24a4:	df 90       	pop	r13
    24a6:	cf 90       	pop	r12
    24a8:	bf 90       	pop	r11
    24aa:	af 90       	pop	r10
    24ac:	9f 90       	pop	r9
    24ae:	8f 90       	pop	r8
    24b0:	08 95       	ret

000024b2 <vTaskDelay>:
    24b2:	cf 92       	push	r12
    24b4:	df 92       	push	r13
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	6b 01       	movw	r12, r22
    24bc:	7c 01       	movw	r14, r24
    24be:	67 2b       	or	r22, r23
    24c0:	68 2b       	or	r22, r24
    24c2:	69 2b       	or	r22, r25
    24c4:	39 f0       	breq	.+14     	; 0x24d4 <vTaskDelay+0x22>
    24c6:	74 dd       	rcall	.-1304   	; 0x1fb0 <vTaskSuspendAll>
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	c7 01       	movw	r24, r14
    24cc:	b6 01       	movw	r22, r12
    24ce:	4a dc       	rcall	.-1900   	; 0x1d64 <prvAddCurrentTaskToDelayedList>
    24d0:	af de       	rcall	.-674    	; 0x2230 <xTaskResumeAll>
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <vTaskDelay+0x24>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	81 11       	cpse	r24, r1
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <vTaskDelay+0x2c>
    24da:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	df 90       	pop	r13
    24e4:	cf 90       	pop	r12
    24e6:	08 95       	ret

000024e8 <vTaskSwitchContext>:
    24e8:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxSchedulerSuspended>
    24ec:	88 23       	and	r24, r24
    24ee:	21 f0       	breq	.+8      	; 0x24f8 <vTaskSwitchContext+0x10>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xYieldPending>
    24f6:	08 95       	ret
    24f8:	10 92 d7 14 	sts	0x14D7, r1	; 0x8014d7 <xYieldPending>
    24fc:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2500:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2504:	20 81       	ld	r18, Z
    2506:	31 81       	ldd	r19, Z+1	; 0x01
    2508:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    250c:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2510:	83 8d       	ldd	r24, Z+27	; 0x1b
    2512:	94 8d       	ldd	r25, Z+28	; 0x1c
    2514:	82 17       	cp	r24, r18
    2516:	93 07       	cpc	r25, r19
    2518:	60 f0       	brcs	.+24     	; 0x2532 <vTaskSwitchContext+0x4a>
    251a:	60 91 8d 15 	lds	r22, 0x158D	; 0x80158d <pxCurrentTCB>
    251e:	70 91 8e 15 	lds	r23, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2522:	63 5e       	subi	r22, 0xE3	; 227
    2524:	7f 4f       	sbci	r23, 0xFF	; 255
    2526:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    252a:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    252e:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <vApplicationStackOverflowHook>
    2532:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    2536:	01 c0       	rjmp	.+2      	; 0x253a <vTaskSwitchContext+0x52>
    2538:	81 50       	subi	r24, 0x01	; 1
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	9b e0       	ldi	r25, 0x0B	; 11
    2540:	92 9f       	mul	r25, r18
    2542:	f0 01       	movw	r30, r0
    2544:	93 9f       	mul	r25, r19
    2546:	f0 0d       	add	r31, r0
    2548:	11 24       	eor	r1, r1
    254a:	e1 5e       	subi	r30, 0xE1	; 225
    254c:	fa 4e       	sbci	r31, 0xEA	; 234
    254e:	90 81       	ld	r25, Z
    2550:	99 23       	and	r25, r25
    2552:	91 f3       	breq	.-28     	; 0x2538 <vTaskSwitchContext+0x50>
    2554:	9b e0       	ldi	r25, 0x0B	; 11
    2556:	92 9f       	mul	r25, r18
    2558:	a0 01       	movw	r20, r0
    255a:	93 9f       	mul	r25, r19
    255c:	50 0d       	add	r21, r0
    255e:	11 24       	eor	r1, r1
    2560:	df 01       	movw	r26, r30
    2562:	01 80       	ldd	r0, Z+1	; 0x01
    2564:	f2 81       	ldd	r31, Z+2	; 0x02
    2566:	e0 2d       	mov	r30, r0
    2568:	04 80       	ldd	r0, Z+4	; 0x04
    256a:	f5 81       	ldd	r31, Z+5	; 0x05
    256c:	e0 2d       	mov	r30, r0
    256e:	12 96       	adiw	r26, 0x02	; 2
    2570:	fc 93       	st	X, r31
    2572:	ee 93       	st	-X, r30
    2574:	11 97       	sbiw	r26, 0x01	; 1
    2576:	4e 5d       	subi	r20, 0xDE	; 222
    2578:	5a 4e       	sbci	r21, 0xEA	; 234
    257a:	e4 17       	cp	r30, r20
    257c:	f5 07       	cpc	r31, r21
    257e:	29 f4       	brne	.+10     	; 0x258a <vTaskSwitchContext+0xa2>
    2580:	44 81       	ldd	r20, Z+4	; 0x04
    2582:	55 81       	ldd	r21, Z+5	; 0x05
    2584:	fd 01       	movw	r30, r26
    2586:	52 83       	std	Z+2, r21	; 0x02
    2588:	41 83       	std	Z+1, r20	; 0x01
    258a:	9b e0       	ldi	r25, 0x0B	; 11
    258c:	92 9f       	mul	r25, r18
    258e:	f0 01       	movw	r30, r0
    2590:	93 9f       	mul	r25, r19
    2592:	f0 0d       	add	r31, r0
    2594:	11 24       	eor	r1, r1
    2596:	e1 5e       	subi	r30, 0xE1	; 225
    2598:	fa 4e       	sbci	r31, 0xEA	; 234
    259a:	01 80       	ldd	r0, Z+1	; 0x01
    259c:	f2 81       	ldd	r31, Z+2	; 0x02
    259e:	e0 2d       	mov	r30, r0
    25a0:	20 85       	ldd	r18, Z+8	; 0x08
    25a2:	31 85       	ldd	r19, Z+9	; 0x09
    25a4:	30 93 8e 15 	sts	0x158E, r19	; 0x80158e <pxCurrentTCB+0x1>
    25a8:	20 93 8d 15 	sts	0x158D, r18	; 0x80158d <pxCurrentTCB>
    25ac:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <uxTopReadyPriority>
    25b0:	08 95       	ret

000025b2 <vTaskPlaceOnEventList>:
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	6a 01       	movw	r12, r20
    25bc:	7b 01       	movw	r14, r22
    25be:	60 91 8d 15 	lds	r22, 0x158D	; 0x80158d <pxCurrentTCB>
    25c2:	70 91 8e 15 	lds	r23, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    25c6:	62 5f       	subi	r22, 0xF2	; 242
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    25ce:	41 e0       	ldi	r20, 0x01	; 1
    25d0:	c7 01       	movw	r24, r14
    25d2:	b6 01       	movw	r22, r12
    25d4:	c7 db       	rcall	.-2162   	; 0x1d64 <prvAddCurrentTaskToDelayedList>
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	08 95       	ret

000025e0 <vTaskPlaceOnUnorderedEventList>:
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	fc 01       	movw	r30, r24
    25ea:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    25ee:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    25f2:	70 68       	ori	r23, 0x80	; 128
    25f4:	1e 96       	adiw	r26, 0x0e	; 14
    25f6:	4d 93       	st	X+, r20
    25f8:	5d 93       	st	X+, r21
    25fa:	6d 93       	st	X+, r22
    25fc:	7c 93       	st	X, r23
    25fe:	51 97       	sbiw	r26, 0x11	; 17
    2600:	a1 81       	ldd	r26, Z+1	; 0x01
    2602:	b2 81       	ldd	r27, Z+2	; 0x02
    2604:	c0 91 8d 15 	lds	r28, 0x158D	; 0x80158d <pxCurrentTCB>
    2608:	d0 91 8e 15 	lds	r29, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    260c:	bb 8b       	std	Y+19, r27	; 0x13
    260e:	aa 8b       	std	Y+18, r26	; 0x12
    2610:	c0 91 8d 15 	lds	r28, 0x158D	; 0x80158d <pxCurrentTCB>
    2614:	d0 91 8e 15 	lds	r29, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2618:	16 96       	adiw	r26, 0x06	; 6
    261a:	8d 91       	ld	r24, X+
    261c:	9c 91       	ld	r25, X
    261e:	17 97       	sbiw	r26, 0x07	; 7
    2620:	9d 8b       	std	Y+21, r25	; 0x15
    2622:	8c 8b       	std	Y+20, r24	; 0x14
    2624:	16 96       	adiw	r26, 0x06	; 6
    2626:	cd 91       	ld	r28, X+
    2628:	dc 91       	ld	r29, X
    262a:	17 97       	sbiw	r26, 0x07	; 7
    262c:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    2630:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2634:	0e 96       	adiw	r24, 0x0e	; 14
    2636:	9d 83       	std	Y+5, r25	; 0x05
    2638:	8c 83       	std	Y+4, r24	; 0x04
    263a:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    263e:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2642:	0e 96       	adiw	r24, 0x0e	; 14
    2644:	17 96       	adiw	r26, 0x07	; 7
    2646:	9c 93       	st	X, r25
    2648:	8e 93       	st	-X, r24
    264a:	16 97       	sbiw	r26, 0x06	; 6
    264c:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    2650:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2654:	59 96       	adiw	r26, 0x19	; 25
    2656:	fc 93       	st	X, r31
    2658:	ee 93       	st	-X, r30
    265a:	58 97       	sbiw	r26, 0x18	; 24
    265c:	80 81       	ld	r24, Z
    265e:	8f 5f       	subi	r24, 0xFF	; 255
    2660:	80 83       	st	Z, r24
    2662:	41 e0       	ldi	r20, 0x01	; 1
    2664:	c9 01       	movw	r24, r18
    2666:	b8 01       	movw	r22, r16
    2668:	7d db       	rcall	.-2310   	; 0x1d64 <prvAddCurrentTaskToDelayedList>
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	08 95       	ret

00002674 <vTaskPlaceOnEventListRestricted>:
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	fc 01       	movw	r30, r24
    267a:	cb 01       	movw	r24, r22
    267c:	ba 01       	movw	r22, r20
    267e:	a1 81       	ldd	r26, Z+1	; 0x01
    2680:	b2 81       	ldd	r27, Z+2	; 0x02
    2682:	c0 91 8d 15 	lds	r28, 0x158D	; 0x80158d <pxCurrentTCB>
    2686:	d0 91 8e 15 	lds	r29, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    268a:	bb 8b       	std	Y+19, r27	; 0x13
    268c:	aa 8b       	std	Y+18, r26	; 0x12
    268e:	c0 91 8d 15 	lds	r28, 0x158D	; 0x80158d <pxCurrentTCB>
    2692:	d0 91 8e 15 	lds	r29, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2696:	16 96       	adiw	r26, 0x06	; 6
    2698:	4d 91       	ld	r20, X+
    269a:	5c 91       	ld	r21, X
    269c:	17 97       	sbiw	r26, 0x07	; 7
    269e:	5d 8b       	std	Y+21, r21	; 0x15
    26a0:	4c 8b       	std	Y+20, r20	; 0x14
    26a2:	16 96       	adiw	r26, 0x06	; 6
    26a4:	cd 91       	ld	r28, X+
    26a6:	dc 91       	ld	r29, X
    26a8:	17 97       	sbiw	r26, 0x07	; 7
    26aa:	40 91 8d 15 	lds	r20, 0x158D	; 0x80158d <pxCurrentTCB>
    26ae:	50 91 8e 15 	lds	r21, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    26b2:	42 5f       	subi	r20, 0xF2	; 242
    26b4:	5f 4f       	sbci	r21, 0xFF	; 255
    26b6:	5d 83       	std	Y+5, r21	; 0x05
    26b8:	4c 83       	std	Y+4, r20	; 0x04
    26ba:	40 91 8d 15 	lds	r20, 0x158D	; 0x80158d <pxCurrentTCB>
    26be:	50 91 8e 15 	lds	r21, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    26c2:	42 5f       	subi	r20, 0xF2	; 242
    26c4:	5f 4f       	sbci	r21, 0xFF	; 255
    26c6:	17 96       	adiw	r26, 0x07	; 7
    26c8:	5c 93       	st	X, r21
    26ca:	4e 93       	st	-X, r20
    26cc:	16 97       	sbiw	r26, 0x06	; 6
    26ce:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    26d2:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    26d6:	59 96       	adiw	r26, 0x19	; 25
    26d8:	fc 93       	st	X, r31
    26da:	ee 93       	st	-X, r30
    26dc:	58 97       	sbiw	r26, 0x18	; 24
    26de:	30 81       	ld	r19, Z
    26e0:	3f 5f       	subi	r19, 0xFF	; 255
    26e2:	30 83       	st	Z, r19
    26e4:	22 23       	and	r18, r18
    26e6:	19 f0       	breq	.+6      	; 0x26ee <vTaskPlaceOnEventListRestricted+0x7a>
    26e8:	6f ef       	ldi	r22, 0xFF	; 255
    26ea:	7f ef       	ldi	r23, 0xFF	; 255
    26ec:	cb 01       	movw	r24, r22
    26ee:	42 2f       	mov	r20, r18
    26f0:	39 db       	rcall	.-2446   	; 0x1d64 <prvAddCurrentTaskToDelayedList>
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	08 95       	ret

000026f8 <xTaskRemoveFromEventList>:
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	dc 01       	movw	r26, r24
    26fe:	17 96       	adiw	r26, 0x07	; 7
    2700:	ed 91       	ld	r30, X+
    2702:	fc 91       	ld	r31, X
    2704:	18 97       	sbiw	r26, 0x08	; 8
    2706:	00 84       	ldd	r0, Z+8	; 0x08
    2708:	f1 85       	ldd	r31, Z+9	; 0x09
    270a:	e0 2d       	mov	r30, r0
    270c:	a0 8d       	ldd	r26, Z+24	; 0x18
    270e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2710:	c2 89       	ldd	r28, Z+18	; 0x12
    2712:	d3 89       	ldd	r29, Z+19	; 0x13
    2714:	84 89       	ldd	r24, Z+20	; 0x14
    2716:	95 89       	ldd	r25, Z+21	; 0x15
    2718:	9f 83       	std	Y+7, r25	; 0x07
    271a:	8e 83       	std	Y+6, r24	; 0x06
    271c:	c4 89       	ldd	r28, Z+20	; 0x14
    271e:	d5 89       	ldd	r29, Z+21	; 0x15
    2720:	82 89       	ldd	r24, Z+18	; 0x12
    2722:	93 89       	ldd	r25, Z+19	; 0x13
    2724:	9d 83       	std	Y+5, r25	; 0x05
    2726:	8c 83       	std	Y+4, r24	; 0x04
    2728:	11 96       	adiw	r26, 0x01	; 1
    272a:	8d 91       	ld	r24, X+
    272c:	9c 91       	ld	r25, X
    272e:	12 97       	sbiw	r26, 0x02	; 2
    2730:	9f 01       	movw	r18, r30
    2732:	22 5f       	subi	r18, 0xF2	; 242
    2734:	3f 4f       	sbci	r19, 0xFF	; 255
    2736:	82 17       	cp	r24, r18
    2738:	93 07       	cpc	r25, r19
    273a:	31 f4       	brne	.+12     	; 0x2748 <xTaskRemoveFromEventList+0x50>
    273c:	84 89       	ldd	r24, Z+20	; 0x14
    273e:	95 89       	ldd	r25, Z+21	; 0x15
    2740:	12 96       	adiw	r26, 0x02	; 2
    2742:	9c 93       	st	X, r25
    2744:	8e 93       	st	-X, r24
    2746:	11 97       	sbiw	r26, 0x01	; 1
    2748:	11 8e       	std	Z+25, r1	; 0x19
    274a:	10 8e       	std	Z+24, r1	; 0x18
    274c:	8c 91       	ld	r24, X
    274e:	81 50       	subi	r24, 0x01	; 1
    2750:	8c 93       	st	X, r24
    2752:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxSchedulerSuspended>
    2756:	81 11       	cpse	r24, r1
    2758:	52 c0       	rjmp	.+164    	; 0x27fe <xTaskRemoveFromEventList+0x106>
    275a:	a4 85       	ldd	r26, Z+12	; 0x0c
    275c:	b5 85       	ldd	r27, Z+13	; 0x0d
    275e:	c6 81       	ldd	r28, Z+6	; 0x06
    2760:	d7 81       	ldd	r29, Z+7	; 0x07
    2762:	80 85       	ldd	r24, Z+8	; 0x08
    2764:	91 85       	ldd	r25, Z+9	; 0x09
    2766:	9f 83       	std	Y+7, r25	; 0x07
    2768:	8e 83       	std	Y+6, r24	; 0x06
    276a:	c0 85       	ldd	r28, Z+8	; 0x08
    276c:	d1 85       	ldd	r29, Z+9	; 0x09
    276e:	86 81       	ldd	r24, Z+6	; 0x06
    2770:	97 81       	ldd	r25, Z+7	; 0x07
    2772:	9d 83       	std	Y+5, r25	; 0x05
    2774:	8c 83       	std	Y+4, r24	; 0x04
    2776:	11 96       	adiw	r26, 0x01	; 1
    2778:	8d 91       	ld	r24, X+
    277a:	9c 91       	ld	r25, X
    277c:	12 97       	sbiw	r26, 0x02	; 2
    277e:	9f 01       	movw	r18, r30
    2780:	2e 5f       	subi	r18, 0xFE	; 254
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	82 17       	cp	r24, r18
    2786:	93 07       	cpc	r25, r19
    2788:	31 f4       	brne	.+12     	; 0x2796 <xTaskRemoveFromEventList+0x9e>
    278a:	80 85       	ldd	r24, Z+8	; 0x08
    278c:	91 85       	ldd	r25, Z+9	; 0x09
    278e:	12 96       	adiw	r26, 0x02	; 2
    2790:	9c 93       	st	X, r25
    2792:	8e 93       	st	-X, r24
    2794:	11 97       	sbiw	r26, 0x01	; 1
    2796:	15 86       	std	Z+13, r1	; 0x0d
    2798:	14 86       	std	Z+12, r1	; 0x0c
    279a:	8c 91       	ld	r24, X
    279c:	81 50       	subi	r24, 0x01	; 1
    279e:	8c 93       	st	X, r24
    27a0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27a2:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    27a6:	8a 17       	cp	r24, r26
    27a8:	10 f4       	brcc	.+4      	; 0x27ae <xTaskRemoveFromEventList+0xb6>
    27aa:	a0 93 dd 14 	sts	0x14DD, r26	; 0x8014dd <uxTopReadyPriority>
    27ae:	8b e0       	ldi	r24, 0x0B	; 11
    27b0:	8a 9f       	mul	r24, r26
    27b2:	d0 01       	movw	r26, r0
    27b4:	11 24       	eor	r1, r1
    27b6:	a1 5e       	subi	r26, 0xE1	; 225
    27b8:	ba 4e       	sbci	r27, 0xEA	; 234
    27ba:	11 96       	adiw	r26, 0x01	; 1
    27bc:	0d 90       	ld	r0, X+
    27be:	bc 91       	ld	r27, X
    27c0:	a0 2d       	mov	r26, r0
    27c2:	b7 83       	std	Z+7, r27	; 0x07
    27c4:	a6 83       	std	Z+6, r26	; 0x06
    27c6:	16 96       	adiw	r26, 0x06	; 6
    27c8:	4d 91       	ld	r20, X+
    27ca:	5c 91       	ld	r21, X
    27cc:	17 97       	sbiw	r26, 0x07	; 7
    27ce:	51 87       	std	Z+9, r21	; 0x09
    27d0:	40 87       	std	Z+8, r20	; 0x08
    27d2:	16 96       	adiw	r26, 0x06	; 6
    27d4:	cd 91       	ld	r28, X+
    27d6:	dc 91       	ld	r29, X
    27d8:	17 97       	sbiw	r26, 0x07	; 7
    27da:	3d 83       	std	Y+5, r19	; 0x05
    27dc:	2c 83       	std	Y+4, r18	; 0x04
    27de:	17 96       	adiw	r26, 0x07	; 7
    27e0:	3c 93       	st	X, r19
    27e2:	2e 93       	st	-X, r18
    27e4:	16 97       	sbiw	r26, 0x06	; 6
    27e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27e8:	8a 9f       	mul	r24, r26
    27ea:	d0 01       	movw	r26, r0
    27ec:	11 24       	eor	r1, r1
    27ee:	a1 5e       	subi	r26, 0xE1	; 225
    27f0:	ba 4e       	sbci	r27, 0xEA	; 234
    27f2:	b5 87       	std	Z+13, r27	; 0x0d
    27f4:	a4 87       	std	Z+12, r26	; 0x0c
    27f6:	8c 91       	ld	r24, X
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	8c 93       	st	X, r24
    27fc:	1c c0       	rjmp	.+56     	; 0x2836 <xTaskRemoveFromEventList+0x13e>
    27fe:	4a ef       	ldi	r20, 0xFA	; 250
    2800:	54 e1       	ldi	r21, 0x14	; 20
    2802:	da 01       	movw	r26, r20
    2804:	11 96       	adiw	r26, 0x01	; 1
    2806:	cd 91       	ld	r28, X+
    2808:	dc 91       	ld	r29, X
    280a:	12 97       	sbiw	r26, 0x02	; 2
    280c:	d3 8b       	std	Z+19, r29	; 0x13
    280e:	c2 8b       	std	Z+18, r28	; 0x12
    2810:	8e 81       	ldd	r24, Y+6	; 0x06
    2812:	9f 81       	ldd	r25, Y+7	; 0x07
    2814:	95 8b       	std	Z+21, r25	; 0x15
    2816:	84 8b       	std	Z+20, r24	; 0x14
    2818:	8e 81       	ldd	r24, Y+6	; 0x06
    281a:	9f 81       	ldd	r25, Y+7	; 0x07
    281c:	dc 01       	movw	r26, r24
    281e:	15 96       	adiw	r26, 0x05	; 5
    2820:	3c 93       	st	X, r19
    2822:	2e 93       	st	-X, r18
    2824:	14 97       	sbiw	r26, 0x04	; 4
    2826:	3f 83       	std	Y+7, r19	; 0x07
    2828:	2e 83       	std	Y+6, r18	; 0x06
    282a:	51 8f       	std	Z+25, r21	; 0x19
    282c:	40 8f       	std	Z+24, r20	; 0x18
    282e:	da 01       	movw	r26, r20
    2830:	8c 91       	ld	r24, X
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	8c 93       	st	X, r24
    2836:	92 8d       	ldd	r25, Z+26	; 0x1a
    2838:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    283c:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2840:	82 8d       	ldd	r24, Z+26	; 0x1a
    2842:	89 17       	cp	r24, r25
    2844:	20 f4       	brcc	.+8      	; 0x284e <xTaskRemoveFromEventList+0x156>
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xYieldPending>
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <xTaskRemoveFromEventList+0x158>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	08 95       	ret

00002856 <vTaskRemoveFromUnorderedEventList>:
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	dc 01       	movw	r26, r24
    285c:	70 68       	ori	r23, 0x80	; 128
    285e:	4d 93       	st	X+, r20
    2860:	5d 93       	st	X+, r21
    2862:	6d 93       	st	X+, r22
    2864:	7c 93       	st	X, r23
    2866:	13 97       	sbiw	r26, 0x03	; 3
    2868:	18 96       	adiw	r26, 0x08	; 8
    286a:	ed 91       	ld	r30, X+
    286c:	fc 91       	ld	r31, X
    286e:	19 97       	sbiw	r26, 0x09	; 9
    2870:	1a 96       	adiw	r26, 0x0a	; 10
    2872:	4d 91       	ld	r20, X+
    2874:	5c 91       	ld	r21, X
    2876:	1b 97       	sbiw	r26, 0x0b	; 11
    2878:	14 96       	adiw	r26, 0x04	; 4
    287a:	8d 91       	ld	r24, X+
    287c:	9c 91       	ld	r25, X
    287e:	15 97       	sbiw	r26, 0x05	; 5
    2880:	16 96       	adiw	r26, 0x06	; 6
    2882:	2d 91       	ld	r18, X+
    2884:	3c 91       	ld	r19, X
    2886:	17 97       	sbiw	r26, 0x07	; 7
    2888:	ec 01       	movw	r28, r24
    288a:	3f 83       	std	Y+7, r19	; 0x07
    288c:	2e 83       	std	Y+6, r18	; 0x06
    288e:	16 96       	adiw	r26, 0x06	; 6
    2890:	8d 91       	ld	r24, X+
    2892:	9c 91       	ld	r25, X
    2894:	17 97       	sbiw	r26, 0x07	; 7
    2896:	14 96       	adiw	r26, 0x04	; 4
    2898:	2d 91       	ld	r18, X+
    289a:	3c 91       	ld	r19, X
    289c:	15 97       	sbiw	r26, 0x05	; 5
    289e:	ec 01       	movw	r28, r24
    28a0:	3d 83       	std	Y+5, r19	; 0x05
    28a2:	2c 83       	std	Y+4, r18	; 0x04
    28a4:	ea 01       	movw	r28, r20
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	9a 81       	ldd	r25, Y+2	; 0x02
    28aa:	a8 17       	cp	r26, r24
    28ac:	b9 07       	cpc	r27, r25
    28ae:	31 f4       	brne	.+12     	; 0x28bc <vTaskRemoveFromUnorderedEventList+0x66>
    28b0:	16 96       	adiw	r26, 0x06	; 6
    28b2:	8d 91       	ld	r24, X+
    28b4:	9c 91       	ld	r25, X
    28b6:	17 97       	sbiw	r26, 0x07	; 7
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	1b 96       	adiw	r26, 0x0b	; 11
    28be:	1c 92       	st	X, r1
    28c0:	1e 92       	st	-X, r1
    28c2:	1a 97       	sbiw	r26, 0x0a	; 10
    28c4:	da 01       	movw	r26, r20
    28c6:	8c 91       	ld	r24, X
    28c8:	81 50       	subi	r24, 0x01	; 1
    28ca:	8c 93       	st	X, r24
    28cc:	a4 85       	ldd	r26, Z+12	; 0x0c
    28ce:	b5 85       	ldd	r27, Z+13	; 0x0d
    28d0:	c6 81       	ldd	r28, Z+6	; 0x06
    28d2:	d7 81       	ldd	r29, Z+7	; 0x07
    28d4:	80 85       	ldd	r24, Z+8	; 0x08
    28d6:	91 85       	ldd	r25, Z+9	; 0x09
    28d8:	9f 83       	std	Y+7, r25	; 0x07
    28da:	8e 83       	std	Y+6, r24	; 0x06
    28dc:	c0 85       	ldd	r28, Z+8	; 0x08
    28de:	d1 85       	ldd	r29, Z+9	; 0x09
    28e0:	86 81       	ldd	r24, Z+6	; 0x06
    28e2:	97 81       	ldd	r25, Z+7	; 0x07
    28e4:	9d 83       	std	Y+5, r25	; 0x05
    28e6:	8c 83       	std	Y+4, r24	; 0x04
    28e8:	11 96       	adiw	r26, 0x01	; 1
    28ea:	8d 91       	ld	r24, X+
    28ec:	9c 91       	ld	r25, X
    28ee:	12 97       	sbiw	r26, 0x02	; 2
    28f0:	9f 01       	movw	r18, r30
    28f2:	2e 5f       	subi	r18, 0xFE	; 254
    28f4:	3f 4f       	sbci	r19, 0xFF	; 255
    28f6:	82 17       	cp	r24, r18
    28f8:	93 07       	cpc	r25, r19
    28fa:	31 f4       	brne	.+12     	; 0x2908 <vTaskRemoveFromUnorderedEventList+0xb2>
    28fc:	80 85       	ldd	r24, Z+8	; 0x08
    28fe:	91 85       	ldd	r25, Z+9	; 0x09
    2900:	12 96       	adiw	r26, 0x02	; 2
    2902:	9c 93       	st	X, r25
    2904:	8e 93       	st	-X, r24
    2906:	11 97       	sbiw	r26, 0x01	; 1
    2908:	15 86       	std	Z+13, r1	; 0x0d
    290a:	14 86       	std	Z+12, r1	; 0x0c
    290c:	8c 91       	ld	r24, X
    290e:	81 50       	subi	r24, 0x01	; 1
    2910:	8c 93       	st	X, r24
    2912:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2914:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    2918:	8a 17       	cp	r24, r26
    291a:	10 f4       	brcc	.+4      	; 0x2920 <vTaskRemoveFromUnorderedEventList+0xca>
    291c:	a0 93 dd 14 	sts	0x14DD, r26	; 0x8014dd <uxTopReadyPriority>
    2920:	8b e0       	ldi	r24, 0x0B	; 11
    2922:	8a 9f       	mul	r24, r26
    2924:	d0 01       	movw	r26, r0
    2926:	11 24       	eor	r1, r1
    2928:	a1 5e       	subi	r26, 0xE1	; 225
    292a:	ba 4e       	sbci	r27, 0xEA	; 234
    292c:	11 96       	adiw	r26, 0x01	; 1
    292e:	0d 90       	ld	r0, X+
    2930:	bc 91       	ld	r27, X
    2932:	a0 2d       	mov	r26, r0
    2934:	b7 83       	std	Z+7, r27	; 0x07
    2936:	a6 83       	std	Z+6, r26	; 0x06
    2938:	16 96       	adiw	r26, 0x06	; 6
    293a:	4d 91       	ld	r20, X+
    293c:	5c 91       	ld	r21, X
    293e:	17 97       	sbiw	r26, 0x07	; 7
    2940:	51 87       	std	Z+9, r21	; 0x09
    2942:	40 87       	std	Z+8, r20	; 0x08
    2944:	16 96       	adiw	r26, 0x06	; 6
    2946:	cd 91       	ld	r28, X+
    2948:	dc 91       	ld	r29, X
    294a:	17 97       	sbiw	r26, 0x07	; 7
    294c:	3d 83       	std	Y+5, r19	; 0x05
    294e:	2c 83       	std	Y+4, r18	; 0x04
    2950:	17 96       	adiw	r26, 0x07	; 7
    2952:	3c 93       	st	X, r19
    2954:	2e 93       	st	-X, r18
    2956:	16 97       	sbiw	r26, 0x06	; 6
    2958:	a2 8d       	ldd	r26, Z+26	; 0x1a
    295a:	8a 9f       	mul	r24, r26
    295c:	d0 01       	movw	r26, r0
    295e:	11 24       	eor	r1, r1
    2960:	a1 5e       	subi	r26, 0xE1	; 225
    2962:	ba 4e       	sbci	r27, 0xEA	; 234
    2964:	b5 87       	std	Z+13, r27	; 0x0d
    2966:	a4 87       	std	Z+12, r26	; 0x0c
    2968:	8c 91       	ld	r24, X
    296a:	8f 5f       	subi	r24, 0xFF	; 255
    296c:	8c 93       	st	X, r24
    296e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2970:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2974:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2978:	82 8d       	ldd	r24, Z+26	; 0x1a
    297a:	89 17       	cp	r24, r25
    297c:	18 f4       	brcc	.+6      	; 0x2984 <vTaskRemoveFromUnorderedEventList+0x12e>
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xYieldPending>
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	08 95       	ret

0000298a <vTaskSetTimeOutState>:
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	0f 92       	push	r0
    2990:	20 91 d6 14 	lds	r18, 0x14D6	; 0x8014d6 <xNumOfOverflows>
    2994:	fc 01       	movw	r30, r24
    2996:	20 83       	st	Z, r18
    2998:	40 91 de 14 	lds	r20, 0x14DE	; 0x8014de <xTickCount>
    299c:	50 91 df 14 	lds	r21, 0x14DF	; 0x8014df <xTickCount+0x1>
    29a0:	60 91 e0 14 	lds	r22, 0x14E0	; 0x8014e0 <xTickCount+0x2>
    29a4:	70 91 e1 14 	lds	r23, 0x14E1	; 0x8014e1 <xTickCount+0x3>
    29a8:	41 83       	std	Z+1, r20	; 0x01
    29aa:	52 83       	std	Z+2, r21	; 0x02
    29ac:	63 83       	std	Z+3, r22	; 0x03
    29ae:	74 83       	std	Z+4, r23	; 0x04
    29b0:	0f 90       	pop	r0
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	08 95       	ret

000029b6 <vTaskInternalSetTimeOutState>:
    29b6:	20 91 d6 14 	lds	r18, 0x14D6	; 0x8014d6 <xNumOfOverflows>
    29ba:	fc 01       	movw	r30, r24
    29bc:	20 83       	st	Z, r18
    29be:	40 91 de 14 	lds	r20, 0x14DE	; 0x8014de <xTickCount>
    29c2:	50 91 df 14 	lds	r21, 0x14DF	; 0x8014df <xTickCount+0x1>
    29c6:	60 91 e0 14 	lds	r22, 0x14E0	; 0x8014e0 <xTickCount+0x2>
    29ca:	70 91 e1 14 	lds	r23, 0x14E1	; 0x8014e1 <xTickCount+0x3>
    29ce:	41 83       	std	Z+1, r20	; 0x01
    29d0:	52 83       	std	Z+2, r21	; 0x02
    29d2:	63 83       	std	Z+3, r22	; 0x03
    29d4:	74 83       	std	Z+4, r23	; 0x04
    29d6:	08 95       	ret

000029d8 <xTaskCheckForTimeOut>:
    29d8:	8f 92       	push	r8
    29da:	9f 92       	push	r9
    29dc:	af 92       	push	r10
    29de:	bf 92       	push	r11
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	fb 01       	movw	r30, r22
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	0f 92       	push	r0
    29f8:	c0 90 de 14 	lds	r12, 0x14DE	; 0x8014de <xTickCount>
    29fc:	d0 90 df 14 	lds	r13, 0x14DF	; 0x8014df <xTickCount+0x1>
    2a00:	e0 90 e0 14 	lds	r14, 0x14E0	; 0x8014e0 <xTickCount+0x2>
    2a04:	f0 90 e1 14 	lds	r15, 0x14E1	; 0x8014e1 <xTickCount+0x3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	11 96       	adiw	r26, 0x01	; 1
    2a0c:	0d 91       	ld	r16, X+
    2a0e:	1d 91       	ld	r17, X+
    2a10:	2d 91       	ld	r18, X+
    2a12:	3c 91       	ld	r19, X
    2a14:	14 97       	sbiw	r26, 0x04	; 4
    2a16:	46 01       	movw	r8, r12
    2a18:	57 01       	movw	r10, r14
    2a1a:	80 1a       	sub	r8, r16
    2a1c:	91 0a       	sbc	r9, r17
    2a1e:	a2 0a       	sbc	r10, r18
    2a20:	b3 0a       	sbc	r11, r19
    2a22:	40 81       	ld	r20, Z
    2a24:	51 81       	ldd	r21, Z+1	; 0x01
    2a26:	62 81       	ldd	r22, Z+2	; 0x02
    2a28:	73 81       	ldd	r23, Z+3	; 0x03
    2a2a:	4f 3f       	cpi	r20, 0xFF	; 255
    2a2c:	bf ef       	ldi	r27, 0xFF	; 255
    2a2e:	5b 07       	cpc	r21, r27
    2a30:	6b 07       	cpc	r22, r27
    2a32:	7b 07       	cpc	r23, r27
    2a34:	39 f1       	breq	.+78     	; 0x2a84 <xTaskCheckForTimeOut+0xac>
    2a36:	ec 01       	movw	r28, r24
    2a38:	b8 81       	ld	r27, Y
    2a3a:	a0 91 d6 14 	lds	r26, 0x14D6	; 0x8014d6 <xNumOfOverflows>
    2a3e:	ba 17       	cp	r27, r26
    2a40:	59 f0       	breq	.+22     	; 0x2a58 <xTaskCheckForTimeOut+0x80>
    2a42:	c0 16       	cp	r12, r16
    2a44:	d1 06       	cpc	r13, r17
    2a46:	e2 06       	cpc	r14, r18
    2a48:	f3 06       	cpc	r15, r19
    2a4a:	30 f0       	brcs	.+12     	; 0x2a58 <xTaskCheckForTimeOut+0x80>
    2a4c:	10 82       	st	Z, r1
    2a4e:	11 82       	std	Z+1, r1	; 0x01
    2a50:	12 82       	std	Z+2, r1	; 0x02
    2a52:	13 82       	std	Z+3, r1	; 0x03
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	17 c0       	rjmp	.+46     	; 0x2a86 <xTaskCheckForTimeOut+0xae>
    2a58:	84 16       	cp	r8, r20
    2a5a:	95 06       	cpc	r9, r21
    2a5c:	a6 06       	cpc	r10, r22
    2a5e:	b7 06       	cpc	r11, r23
    2a60:	58 f4       	brcc	.+22     	; 0x2a78 <xTaskCheckForTimeOut+0xa0>
    2a62:	48 19       	sub	r20, r8
    2a64:	59 09       	sbc	r21, r9
    2a66:	6a 09       	sbc	r22, r10
    2a68:	7b 09       	sbc	r23, r11
    2a6a:	40 83       	st	Z, r20
    2a6c:	51 83       	std	Z+1, r21	; 0x01
    2a6e:	62 83       	std	Z+2, r22	; 0x02
    2a70:	73 83       	std	Z+3, r23	; 0x03
    2a72:	a1 df       	rcall	.-190    	; 0x29b6 <vTaskInternalSetTimeOutState>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	07 c0       	rjmp	.+14     	; 0x2a86 <xTaskCheckForTimeOut+0xae>
    2a78:	10 82       	st	Z, r1
    2a7a:	11 82       	std	Z+1, r1	; 0x01
    2a7c:	12 82       	std	Z+2, r1	; 0x02
    2a7e:	13 82       	std	Z+3, r1	; 0x03
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	01 c0       	rjmp	.+2      	; 0x2a86 <xTaskCheckForTimeOut+0xae>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	bf 90       	pop	r11
    2a9c:	af 90       	pop	r10
    2a9e:	9f 90       	pop	r9
    2aa0:	8f 90       	pop	r8
    2aa2:	08 95       	ret

00002aa4 <vTaskMissedYield>:
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xYieldPending>
    2aaa:	08 95       	ret

00002aac <xTaskGetCurrentTaskHandle>:
    2aac:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    2ab0:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2ab4:	08 95       	ret

00002ab6 <xTaskGetSchedulerState>:
    2ab6:	80 91 dc 14 	lds	r24, 0x14DC	; 0x8014dc <xSchedulerRunning>
    2aba:	88 23       	and	r24, r24
    2abc:	31 f0       	breq	.+12     	; 0x2aca <xTaskGetSchedulerState+0x14>
    2abe:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxSchedulerSuspended>
    2ac2:	81 11       	cpse	r24, r1
    2ac4:	04 c0       	rjmp	.+8      	; 0x2ace <xTaskGetSchedulerState+0x18>
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	08 95       	ret
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	08 95       	ret
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	08 95       	ret

00002ad2 <xTaskPriorityInherit>:
    2ad2:	0f 93       	push	r16
    2ad4:	1f 93       	push	r17
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
    2ada:	fc 01       	movw	r30, r24
    2adc:	89 2b       	or	r24, r25
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <xTaskPriorityInherit+0x10>
    2ae0:	77 c0       	rjmp	.+238    	; 0x2bd0 <xTaskPriorityInherit+0xfe>
    2ae2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ae4:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    2ae8:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2aec:	5a 96       	adiw	r26, 0x1a	; 26
    2aee:	9c 91       	ld	r25, X
    2af0:	89 17       	cp	r24, r25
    2af2:	08 f0       	brcs	.+2      	; 0x2af6 <xTaskPriorityInherit+0x24>
    2af4:	63 c0       	rjmp	.+198    	; 0x2bbc <xTaskPriorityInherit+0xea>
    2af6:	46 85       	ldd	r20, Z+14	; 0x0e
    2af8:	57 85       	ldd	r21, Z+15	; 0x0f
    2afa:	60 89       	ldd	r22, Z+16	; 0x10
    2afc:	71 89       	ldd	r23, Z+17	; 0x11
    2afe:	77 23       	and	r23, r23
    2b00:	94 f0       	brlt	.+36     	; 0x2b26 <xTaskPriorityInherit+0x54>
    2b02:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    2b06:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2b0a:	5a 96       	adiw	r26, 0x1a	; 26
    2b0c:	9c 91       	ld	r25, X
    2b0e:	4a e0       	ldi	r20, 0x0A	; 10
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	70 e0       	ldi	r23, 0x00	; 0
    2b16:	49 1b       	sub	r20, r25
    2b18:	51 09       	sbc	r21, r1
    2b1a:	61 09       	sbc	r22, r1
    2b1c:	71 09       	sbc	r23, r1
    2b1e:	46 87       	std	Z+14, r20	; 0x0e
    2b20:	57 87       	std	Z+15, r21	; 0x0f
    2b22:	60 8b       	std	Z+16, r22	; 0x10
    2b24:	71 8b       	std	Z+17, r23	; 0x11
    2b26:	24 85       	ldd	r18, Z+12	; 0x0c
    2b28:	35 85       	ldd	r19, Z+13	; 0x0d
    2b2a:	4b e0       	ldi	r20, 0x0B	; 11
    2b2c:	84 9f       	mul	r24, r20
    2b2e:	c0 01       	movw	r24, r0
    2b30:	11 24       	eor	r1, r1
    2b32:	81 5e       	subi	r24, 0xE1	; 225
    2b34:	9a 4e       	sbci	r25, 0xEA	; 234
    2b36:	28 17       	cp	r18, r24
    2b38:	39 07       	cpc	r19, r25
    2b3a:	b9 f5       	brne	.+110    	; 0x2baa <xTaskPriorityInherit+0xd8>
    2b3c:	ef 01       	movw	r28, r30
    2b3e:	8f 01       	movw	r16, r30
    2b40:	0e 5f       	subi	r16, 0xFE	; 254
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	c8 01       	movw	r24, r16
    2b46:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    2b4a:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2b4e:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2b52:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2b54:	ea 8f       	std	Y+26, r30	; 0x1a
    2b56:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    2b5a:	8e 17       	cp	r24, r30
    2b5c:	10 f4       	brcc	.+4      	; 0x2b62 <xTaskPriorityInherit+0x90>
    2b5e:	e0 93 dd 14 	sts	0x14DD, r30	; 0x8014dd <uxTopReadyPriority>
    2b62:	8b e0       	ldi	r24, 0x0B	; 11
    2b64:	8e 9f       	mul	r24, r30
    2b66:	f0 01       	movw	r30, r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	e1 5e       	subi	r30, 0xE1	; 225
    2b6c:	fa 4e       	sbci	r31, 0xEA	; 234
    2b6e:	01 80       	ldd	r0, Z+1	; 0x01
    2b70:	f2 81       	ldd	r31, Z+2	; 0x02
    2b72:	e0 2d       	mov	r30, r0
    2b74:	ff 83       	std	Y+7, r31	; 0x07
    2b76:	ee 83       	std	Y+6, r30	; 0x06
    2b78:	26 81       	ldd	r18, Z+6	; 0x06
    2b7a:	37 81       	ldd	r19, Z+7	; 0x07
    2b7c:	39 87       	std	Y+9, r19	; 0x09
    2b7e:	28 87       	std	Y+8, r18	; 0x08
    2b80:	a6 81       	ldd	r26, Z+6	; 0x06
    2b82:	b7 81       	ldd	r27, Z+7	; 0x07
    2b84:	15 96       	adiw	r26, 0x05	; 5
    2b86:	1c 93       	st	X, r17
    2b88:	0e 93       	st	-X, r16
    2b8a:	14 97       	sbiw	r26, 0x04	; 4
    2b8c:	17 83       	std	Z+7, r17	; 0x07
    2b8e:	06 83       	std	Z+6, r16	; 0x06
    2b90:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b92:	8e 9f       	mul	r24, r30
    2b94:	f0 01       	movw	r30, r0
    2b96:	11 24       	eor	r1, r1
    2b98:	e1 5e       	subi	r30, 0xE1	; 225
    2b9a:	fa 4e       	sbci	r31, 0xEA	; 234
    2b9c:	fd 87       	std	Y+13, r31	; 0x0d
    2b9e:	ec 87       	std	Y+12, r30	; 0x0c
    2ba0:	80 81       	ld	r24, Z
    2ba2:	8f 5f       	subi	r24, 0xFF	; 255
    2ba4:	80 83       	st	Z, r24
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	16 c0       	rjmp	.+44     	; 0x2bd6 <xTaskPriorityInherit+0x104>
    2baa:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    2bae:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2bb2:	5a 96       	adiw	r26, 0x1a	; 26
    2bb4:	8c 91       	ld	r24, X
    2bb6:	82 8f       	std	Z+26, r24	; 0x1a
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	0d c0       	rjmp	.+26     	; 0x2bd6 <xTaskPriorityInherit+0x104>
    2bbc:	95 a5       	ldd	r25, Z+45	; 0x2d
    2bbe:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2bc2:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2bc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bc8:	98 17       	cp	r25, r24
    2bca:	20 f0       	brcs	.+8      	; 0x2bd4 <xTaskPriorityInherit+0x102>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	03 c0       	rjmp	.+6      	; 0x2bd6 <xTaskPriorityInherit+0x104>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <xTaskPriorityInherit+0x104>
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	08 95       	ret

00002be0 <xTaskPriorityDisinherit>:
    2be0:	0f 93       	push	r16
    2be2:	1f 93       	push	r17
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	fc 01       	movw	r30, r24
    2bea:	89 2b       	or	r24, r25
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <xTaskPriorityDisinherit+0x10>
    2bee:	49 c0       	rjmp	.+146    	; 0x2c82 <xTaskPriorityDisinherit+0xa2>
    2bf0:	86 a5       	ldd	r24, Z+46	; 0x2e
    2bf2:	81 50       	subi	r24, 0x01	; 1
    2bf4:	86 a7       	std	Z+46, r24	; 0x2e
    2bf6:	22 8d       	ldd	r18, Z+26	; 0x1a
    2bf8:	95 a5       	ldd	r25, Z+45	; 0x2d
    2bfa:	29 17       	cp	r18, r25
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <xTaskPriorityDisinherit+0x20>
    2bfe:	43 c0       	rjmp	.+134    	; 0x2c86 <xTaskPriorityDisinherit+0xa6>
    2c00:	81 11       	cpse	r24, r1
    2c02:	43 c0       	rjmp	.+134    	; 0x2c8a <xTaskPriorityDisinherit+0xaa>
    2c04:	ef 01       	movw	r28, r30
    2c06:	8f 01       	movw	r16, r30
    2c08:	0e 5f       	subi	r16, 0xFE	; 254
    2c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0c:	c8 01       	movw	r24, r16
    2c0e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    2c12:	ed a5       	ldd	r30, Y+45	; 0x2d
    2c14:	ea 8f       	std	Y+26, r30	; 0x1a
    2c16:	8a e0       	ldi	r24, 0x0A	; 10
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	8e 1b       	sub	r24, r30
    2c20:	91 09       	sbc	r25, r1
    2c22:	a1 09       	sbc	r26, r1
    2c24:	b1 09       	sbc	r27, r1
    2c26:	8e 87       	std	Y+14, r24	; 0x0e
    2c28:	9f 87       	std	Y+15, r25	; 0x0f
    2c2a:	a8 8b       	std	Y+16, r26	; 0x10
    2c2c:	b9 8b       	std	Y+17, r27	; 0x11
    2c2e:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    2c32:	8e 17       	cp	r24, r30
    2c34:	10 f4       	brcc	.+4      	; 0x2c3a <xTaskPriorityDisinherit+0x5a>
    2c36:	e0 93 dd 14 	sts	0x14DD, r30	; 0x8014dd <uxTopReadyPriority>
    2c3a:	8b e0       	ldi	r24, 0x0B	; 11
    2c3c:	8e 9f       	mul	r24, r30
    2c3e:	f0 01       	movw	r30, r0
    2c40:	11 24       	eor	r1, r1
    2c42:	e1 5e       	subi	r30, 0xE1	; 225
    2c44:	fa 4e       	sbci	r31, 0xEA	; 234
    2c46:	01 80       	ldd	r0, Z+1	; 0x01
    2c48:	f2 81       	ldd	r31, Z+2	; 0x02
    2c4a:	e0 2d       	mov	r30, r0
    2c4c:	ff 83       	std	Y+7, r31	; 0x07
    2c4e:	ee 83       	std	Y+6, r30	; 0x06
    2c50:	26 81       	ldd	r18, Z+6	; 0x06
    2c52:	37 81       	ldd	r19, Z+7	; 0x07
    2c54:	39 87       	std	Y+9, r19	; 0x09
    2c56:	28 87       	std	Y+8, r18	; 0x08
    2c58:	a6 81       	ldd	r26, Z+6	; 0x06
    2c5a:	b7 81       	ldd	r27, Z+7	; 0x07
    2c5c:	15 96       	adiw	r26, 0x05	; 5
    2c5e:	1c 93       	st	X, r17
    2c60:	0e 93       	st	-X, r16
    2c62:	14 97       	sbiw	r26, 0x04	; 4
    2c64:	17 83       	std	Z+7, r17	; 0x07
    2c66:	06 83       	std	Z+6, r16	; 0x06
    2c68:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c6a:	8e 9f       	mul	r24, r30
    2c6c:	f0 01       	movw	r30, r0
    2c6e:	11 24       	eor	r1, r1
    2c70:	e1 5e       	subi	r30, 0xE1	; 225
    2c72:	fa 4e       	sbci	r31, 0xEA	; 234
    2c74:	fd 87       	std	Y+13, r31	; 0x0d
    2c76:	ec 87       	std	Y+12, r30	; 0x0c
    2c78:	80 81       	ld	r24, Z
    2c7a:	8f 5f       	subi	r24, 0xFF	; 255
    2c7c:	80 83       	st	Z, r24
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	05 c0       	rjmp	.+10     	; 0x2c8c <xTaskPriorityDisinherit+0xac>
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	03 c0       	rjmp	.+6      	; 0x2c8c <xTaskPriorityDisinherit+0xac>
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <xTaskPriorityDisinherit+0xac>
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	1f 91       	pop	r17
    2c92:	0f 91       	pop	r16
    2c94:	08 95       	ret

00002c96 <vTaskPriorityDisinheritAfterTimeout>:
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	89 2b       	or	r24, r25
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2ca4:	5a c0       	rjmp	.+180    	; 0x2d5a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ca6:	85 a5       	ldd	r24, Z+45	; 0x2d
    2ca8:	86 17       	cp	r24, r22
    2caa:	08 f4       	brcc	.+2      	; 0x2cae <vTaskPriorityDisinheritAfterTimeout+0x18>
    2cac:	86 2f       	mov	r24, r22
    2cae:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cb0:	89 17       	cp	r24, r25
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2cb4:	52 c0       	rjmp	.+164    	; 0x2d5a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cb6:	26 a5       	ldd	r18, Z+46	; 0x2e
    2cb8:	21 30       	cpi	r18, 0x01	; 1
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <vTaskPriorityDisinheritAfterTimeout+0x28>
    2cbc:	4e c0       	rjmp	.+156    	; 0x2d5a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cbe:	82 8f       	std	Z+26, r24	; 0x1a
    2cc0:	46 85       	ldd	r20, Z+14	; 0x0e
    2cc2:	57 85       	ldd	r21, Z+15	; 0x0f
    2cc4:	60 89       	ldd	r22, Z+16	; 0x10
    2cc6:	71 89       	ldd	r23, Z+17	; 0x11
    2cc8:	77 23       	and	r23, r23
    2cca:	64 f0       	brlt	.+24     	; 0x2ce4 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2ccc:	4a e0       	ldi	r20, 0x0A	; 10
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	48 1b       	sub	r20, r24
    2cd6:	51 09       	sbc	r21, r1
    2cd8:	61 09       	sbc	r22, r1
    2cda:	71 09       	sbc	r23, r1
    2cdc:	46 87       	std	Z+14, r20	; 0x0e
    2cde:	57 87       	std	Z+15, r21	; 0x0f
    2ce0:	60 8b       	std	Z+16, r22	; 0x10
    2ce2:	71 8b       	std	Z+17, r23	; 0x11
    2ce4:	24 85       	ldd	r18, Z+12	; 0x0c
    2ce6:	35 85       	ldd	r19, Z+13	; 0x0d
    2ce8:	4b e0       	ldi	r20, 0x0B	; 11
    2cea:	94 9f       	mul	r25, r20
    2cec:	c0 01       	movw	r24, r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	81 5e       	subi	r24, 0xE1	; 225
    2cf2:	9a 4e       	sbci	r25, 0xEA	; 234
    2cf4:	28 17       	cp	r18, r24
    2cf6:	39 07       	cpc	r19, r25
    2cf8:	81 f5       	brne	.+96     	; 0x2d5a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2cfa:	ef 01       	movw	r28, r30
    2cfc:	8f 01       	movw	r16, r30
    2cfe:	0e 5f       	subi	r16, 0xFE	; 254
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	c8 01       	movw	r24, r16
    2d04:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
    2d08:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d0a:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    2d0e:	8e 17       	cp	r24, r30
    2d10:	10 f4       	brcc	.+4      	; 0x2d16 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2d12:	e0 93 dd 14 	sts	0x14DD, r30	; 0x8014dd <uxTopReadyPriority>
    2d16:	8b e0       	ldi	r24, 0x0B	; 11
    2d18:	8e 9f       	mul	r24, r30
    2d1a:	f0 01       	movw	r30, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	e1 5e       	subi	r30, 0xE1	; 225
    2d20:	fa 4e       	sbci	r31, 0xEA	; 234
    2d22:	01 80       	ldd	r0, Z+1	; 0x01
    2d24:	f2 81       	ldd	r31, Z+2	; 0x02
    2d26:	e0 2d       	mov	r30, r0
    2d28:	ff 83       	std	Y+7, r31	; 0x07
    2d2a:	ee 83       	std	Y+6, r30	; 0x06
    2d2c:	26 81       	ldd	r18, Z+6	; 0x06
    2d2e:	37 81       	ldd	r19, Z+7	; 0x07
    2d30:	39 87       	std	Y+9, r19	; 0x09
    2d32:	28 87       	std	Y+8, r18	; 0x08
    2d34:	a6 81       	ldd	r26, Z+6	; 0x06
    2d36:	b7 81       	ldd	r27, Z+7	; 0x07
    2d38:	15 96       	adiw	r26, 0x05	; 5
    2d3a:	1c 93       	st	X, r17
    2d3c:	0e 93       	st	-X, r16
    2d3e:	14 97       	sbiw	r26, 0x04	; 4
    2d40:	17 83       	std	Z+7, r17	; 0x07
    2d42:	06 83       	std	Z+6, r16	; 0x06
    2d44:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d46:	8e 9f       	mul	r24, r30
    2d48:	f0 01       	movw	r30, r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	e1 5e       	subi	r30, 0xE1	; 225
    2d4e:	fa 4e       	sbci	r31, 0xEA	; 234
    2d50:	fd 87       	std	Y+13, r31	; 0x0d
    2d52:	ec 87       	std	Y+12, r30	; 0x0c
    2d54:	80 81       	ld	r24, Z
    2d56:	8f 5f       	subi	r24, 0xFF	; 255
    2d58:	80 83       	st	Z, r24
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	08 95       	ret

00002d64 <uxTaskResetEventItemValue>:
    2d64:	cf 92       	push	r12
    2d66:	df 92       	push	r13
    2d68:	ef 92       	push	r14
    2d6a:	ff 92       	push	r15
    2d6c:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2d70:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2d74:	66 85       	ldd	r22, Z+14	; 0x0e
    2d76:	77 85       	ldd	r23, Z+15	; 0x0f
    2d78:	80 89       	ldd	r24, Z+16	; 0x10
    2d7a:	91 89       	ldd	r25, Z+17	; 0x11
    2d7c:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2d80:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2d84:	a0 91 8d 15 	lds	r26, 0x158D	; 0x80158d <pxCurrentTCB>
    2d88:	b0 91 8e 15 	lds	r27, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2d8c:	5a 96       	adiw	r26, 0x1a	; 26
    2d8e:	2c 91       	ld	r18, X
    2d90:	0f 2e       	mov	r0, r31
    2d92:	fa e0       	ldi	r31, 0x0A	; 10
    2d94:	cf 2e       	mov	r12, r31
    2d96:	d1 2c       	mov	r13, r1
    2d98:	e1 2c       	mov	r14, r1
    2d9a:	f1 2c       	mov	r15, r1
    2d9c:	f0 2d       	mov	r31, r0
    2d9e:	c2 1a       	sub	r12, r18
    2da0:	d1 08       	sbc	r13, r1
    2da2:	e1 08       	sbc	r14, r1
    2da4:	f1 08       	sbc	r15, r1
    2da6:	c6 86       	std	Z+14, r12	; 0x0e
    2da8:	d7 86       	std	Z+15, r13	; 0x0f
    2daa:	e0 8a       	std	Z+16, r14	; 0x10
    2dac:	f1 8a       	std	Z+17, r15	; 0x11
    2dae:	ff 90       	pop	r15
    2db0:	ef 90       	pop	r14
    2db2:	df 90       	pop	r13
    2db4:	cf 90       	pop	r12
    2db6:	08 95       	ret

00002db8 <pvTaskIncrementMutexHeldCount>:
    2db8:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    2dbc:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2dc0:	89 2b       	or	r24, r25
    2dc2:	39 f0       	breq	.+14     	; 0x2dd2 <pvTaskIncrementMutexHeldCount+0x1a>
    2dc4:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2dc8:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2dcc:	86 a5       	ldd	r24, Z+46	; 0x2e
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	86 a7       	std	Z+46, r24	; 0x2e
    2dd2:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    2dd6:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2dda:	08 95       	ret

00002ddc <xTaskGenericNotifyWait>:
    2ddc:	4f 92       	push	r4
    2dde:	5f 92       	push	r5
    2de0:	6f 92       	push	r6
    2de2:	7f 92       	push	r7
    2de4:	af 92       	push	r10
    2de6:	bf 92       	push	r11
    2de8:	cf 92       	push	r12
    2dea:	df 92       	push	r13
    2dec:	ef 92       	push	r14
    2dee:	ff 92       	push	r15
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	28 01       	movw	r4, r16
    2dfa:	39 01       	movw	r6, r18
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	0f 92       	push	r0
    2e02:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2e06:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2e0a:	c8 2f       	mov	r28, r24
    2e0c:	d0 e0       	ldi	r29, 0x00	; 0
    2e0e:	ec 0f       	add	r30, r28
    2e10:	fd 1f       	adc	r31, r29
    2e12:	83 a9       	ldd	r24, Z+51	; 0x33
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	79 f1       	breq	.+94     	; 0x2e76 <xTaskGenericNotifyWait+0x9a>
    2e18:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2e1c:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2e20:	ce 01       	movw	r24, r28
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	e8 0f       	add	r30, r24
    2e2c:	f9 1f       	adc	r31, r25
    2e2e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e30:	90 a9       	ldd	r25, Z+48	; 0x30
    2e32:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e34:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e36:	40 95       	com	r20
    2e38:	50 95       	com	r21
    2e3a:	60 95       	com	r22
    2e3c:	70 95       	com	r23
    2e3e:	48 23       	and	r20, r24
    2e40:	59 23       	and	r21, r25
    2e42:	6a 23       	and	r22, r26
    2e44:	7b 23       	and	r23, r27
    2e46:	47 a7       	std	Z+47, r20	; 0x2f
    2e48:	50 ab       	std	Z+48, r21	; 0x30
    2e4a:	61 ab       	std	Z+49, r22	; 0x31
    2e4c:	72 ab       	std	Z+50, r23	; 0x32
    2e4e:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2e52:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2e56:	ec 0f       	add	r30, r28
    2e58:	fd 1f       	adc	r31, r29
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	83 ab       	std	Z+51, r24	; 0x33
    2e5e:	a1 14       	cp	r10, r1
    2e60:	b1 04       	cpc	r11, r1
    2e62:	c1 04       	cpc	r12, r1
    2e64:	d1 04       	cpc	r13, r1
    2e66:	39 f0       	breq	.+14     	; 0x2e76 <xTaskGenericNotifyWait+0x9a>
    2e68:	41 e0       	ldi	r20, 0x01	; 1
    2e6a:	c6 01       	movw	r24, r12
    2e6c:	b5 01       	movw	r22, r10
    2e6e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <prvAddCurrentTaskToDelayedList>
    2e72:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    2e76:	0f 90       	pop	r0
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	0f 92       	push	r0
    2e80:	e1 14       	cp	r14, r1
    2e82:	f1 04       	cpc	r15, r1
    2e84:	a1 f0       	breq	.+40     	; 0x2eae <xTaskGenericNotifyWait+0xd2>
    2e86:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2e8a:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2e8e:	ce 01       	movw	r24, r28
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	e8 0f       	add	r30, r24
    2e9a:	f9 1f       	adc	r31, r25
    2e9c:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e9e:	90 a9       	ldd	r25, Z+48	; 0x30
    2ea0:	a1 a9       	ldd	r26, Z+49	; 0x31
    2ea2:	b2 a9       	ldd	r27, Z+50	; 0x32
    2ea4:	f7 01       	movw	r30, r14
    2ea6:	80 83       	st	Z, r24
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	a2 83       	std	Z+2, r26	; 0x02
    2eac:	b3 83       	std	Z+3, r27	; 0x03
    2eae:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2eb2:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2eb6:	ec 0f       	add	r30, r28
    2eb8:	fd 1f       	adc	r31, r29
    2eba:	83 a9       	ldd	r24, Z+51	; 0x33
    2ebc:	82 30       	cpi	r24, 0x02	; 2
    2ebe:	e9 f4       	brne	.+58     	; 0x2efa <xTaskGenericNotifyWait+0x11e>
    2ec0:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    2ec4:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2ec8:	ce 01       	movw	r24, r28
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	e8 0f       	add	r30, r24
    2ed4:	f9 1f       	adc	r31, r25
    2ed6:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ed8:	90 a9       	ldd	r25, Z+48	; 0x30
    2eda:	a1 a9       	ldd	r26, Z+49	; 0x31
    2edc:	b2 a9       	ldd	r27, Z+50	; 0x32
    2ede:	40 94       	com	r4
    2ee0:	50 94       	com	r5
    2ee2:	60 94       	com	r6
    2ee4:	70 94       	com	r7
    2ee6:	48 22       	and	r4, r24
    2ee8:	59 22       	and	r5, r25
    2eea:	6a 22       	and	r6, r26
    2eec:	7b 22       	and	r7, r27
    2eee:	47 a6       	std	Z+47, r4	; 0x2f
    2ef0:	50 aa       	std	Z+48, r5	; 0x30
    2ef2:	61 aa       	std	Z+49, r6	; 0x31
    2ef4:	72 aa       	std	Z+50, r7	; 0x32
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <xTaskGenericNotifyWait+0x120>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	20 91 8d 15 	lds	r18, 0x158D	; 0x80158d <pxCurrentTCB>
    2f00:	30 91 8e 15 	lds	r19, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    2f04:	c2 0f       	add	r28, r18
    2f06:	d3 1f       	adc	r29, r19
    2f08:	1b aa       	std	Y+51, r1	; 0x33
    2f0a:	0f 90       	pop	r0
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	ff 90       	pop	r15
    2f18:	ef 90       	pop	r14
    2f1a:	df 90       	pop	r13
    2f1c:	cf 90       	pop	r12
    2f1e:	bf 90       	pop	r11
    2f20:	af 90       	pop	r10
    2f22:	7f 90       	pop	r7
    2f24:	6f 90       	pop	r6
    2f26:	5f 90       	pop	r5
    2f28:	4f 90       	pop	r4
    2f2a:	08 95       	ret

00002f2c <xTaskGenericNotify>:
    2f2c:	8f 92       	push	r8
    2f2e:	9f 92       	push	r9
    2f30:	af 92       	push	r10
    2f32:	bf 92       	push	r11
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	dc 01       	movw	r26, r24
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	0f 92       	push	r0
    2f46:	e1 14       	cp	r14, r1
    2f48:	f1 04       	cpc	r15, r1
    2f4a:	89 f0       	breq	.+34     	; 0x2f6e <xTaskGenericNotify+0x42>
    2f4c:	e6 2f       	mov	r30, r22
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	ee 0f       	add	r30, r30
    2f52:	ff 1f       	adc	r31, r31
    2f54:	ee 0f       	add	r30, r30
    2f56:	ff 1f       	adc	r31, r31
    2f58:	e8 0f       	add	r30, r24
    2f5a:	f9 1f       	adc	r31, r25
    2f5c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f5e:	90 a8       	ldd	r9, Z+48	; 0x30
    2f60:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f62:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f64:	f7 01       	movw	r30, r14
    2f66:	80 82       	st	Z, r8
    2f68:	91 82       	std	Z+1, r9	; 0x01
    2f6a:	a2 82       	std	Z+2, r10	; 0x02
    2f6c:	b3 82       	std	Z+3, r11	; 0x03
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	fd 01       	movw	r30, r26
    2f72:	e6 0f       	add	r30, r22
    2f74:	f7 1f       	adc	r31, r23
    2f76:	83 a9       	ldd	r24, Z+51	; 0x33
    2f78:	92 e0       	ldi	r25, 0x02	; 2
    2f7a:	93 ab       	std	Z+51, r25	; 0x33
    2f7c:	02 30       	cpi	r16, 0x02	; 2
    2f7e:	01 f1       	breq	.+64     	; 0x2fc0 <xTaskGenericNotify+0x94>
    2f80:	18 f4       	brcc	.+6      	; 0x2f88 <xTaskGenericNotify+0x5c>
    2f82:	01 30       	cpi	r16, 0x01	; 1
    2f84:	31 f0       	breq	.+12     	; 0x2f92 <xTaskGenericNotify+0x66>
    2f86:	4d c0       	rjmp	.+154    	; 0x3022 <xTaskGenericNotify+0xf6>
    2f88:	03 30       	cpi	r16, 0x03	; 3
    2f8a:	79 f1       	breq	.+94     	; 0x2fea <xTaskGenericNotify+0xbe>
    2f8c:	04 30       	cpi	r16, 0x04	; 4
    2f8e:	d1 f1       	breq	.+116    	; 0x3004 <xTaskGenericNotify+0xd8>
    2f90:	48 c0       	rjmp	.+144    	; 0x3022 <xTaskGenericNotify+0xf6>
    2f92:	66 0f       	add	r22, r22
    2f94:	77 1f       	adc	r23, r23
    2f96:	66 0f       	add	r22, r22
    2f98:	77 1f       	adc	r23, r23
    2f9a:	fd 01       	movw	r30, r26
    2f9c:	e6 0f       	add	r30, r22
    2f9e:	f7 1f       	adc	r31, r23
    2fa0:	87 a4       	ldd	r8, Z+47	; 0x2f
    2fa2:	90 a8       	ldd	r9, Z+48	; 0x30
    2fa4:	a1 a8       	ldd	r10, Z+49	; 0x31
    2fa6:	b2 a8       	ldd	r11, Z+50	; 0x32
    2fa8:	ba 01       	movw	r22, r20
    2faa:	a9 01       	movw	r20, r18
    2fac:	48 29       	or	r20, r8
    2fae:	59 29       	or	r21, r9
    2fb0:	6a 29       	or	r22, r10
    2fb2:	7b 29       	or	r23, r11
    2fb4:	47 a7       	std	Z+47, r20	; 0x2f
    2fb6:	50 ab       	std	Z+48, r21	; 0x30
    2fb8:	61 ab       	std	Z+49, r22	; 0x31
    2fba:	72 ab       	std	Z+50, r23	; 0x32
    2fbc:	01 e0       	ldi	r16, 0x01	; 1
    2fbe:	34 c0       	rjmp	.+104    	; 0x3028 <xTaskGenericNotify+0xfc>
    2fc0:	66 0f       	add	r22, r22
    2fc2:	77 1f       	adc	r23, r23
    2fc4:	66 0f       	add	r22, r22
    2fc6:	77 1f       	adc	r23, r23
    2fc8:	fd 01       	movw	r30, r26
    2fca:	e6 0f       	add	r30, r22
    2fcc:	f7 1f       	adc	r31, r23
    2fce:	47 a5       	ldd	r20, Z+47	; 0x2f
    2fd0:	50 a9       	ldd	r21, Z+48	; 0x30
    2fd2:	61 a9       	ldd	r22, Z+49	; 0x31
    2fd4:	72 a9       	ldd	r23, Z+50	; 0x32
    2fd6:	4f 5f       	subi	r20, 0xFF	; 255
    2fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fda:	6f 4f       	sbci	r22, 0xFF	; 255
    2fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fde:	47 a7       	std	Z+47, r20	; 0x2f
    2fe0:	50 ab       	std	Z+48, r21	; 0x30
    2fe2:	61 ab       	std	Z+49, r22	; 0x31
    2fe4:	72 ab       	std	Z+50, r23	; 0x32
    2fe6:	01 e0       	ldi	r16, 0x01	; 1
    2fe8:	1f c0       	rjmp	.+62     	; 0x3028 <xTaskGenericNotify+0xfc>
    2fea:	66 0f       	add	r22, r22
    2fec:	77 1f       	adc	r23, r23
    2fee:	66 0f       	add	r22, r22
    2ff0:	77 1f       	adc	r23, r23
    2ff2:	fd 01       	movw	r30, r26
    2ff4:	e6 0f       	add	r30, r22
    2ff6:	f7 1f       	adc	r31, r23
    2ff8:	27 a7       	std	Z+47, r18	; 0x2f
    2ffa:	30 ab       	std	Z+48, r19	; 0x30
    2ffc:	41 ab       	std	Z+49, r20	; 0x31
    2ffe:	52 ab       	std	Z+50, r21	; 0x32
    3000:	01 e0       	ldi	r16, 0x01	; 1
    3002:	12 c0       	rjmp	.+36     	; 0x3028 <xTaskGenericNotify+0xfc>
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	79 f0       	breq	.+30     	; 0x3026 <xTaskGenericNotify+0xfa>
    3008:	66 0f       	add	r22, r22
    300a:	77 1f       	adc	r23, r23
    300c:	66 0f       	add	r22, r22
    300e:	77 1f       	adc	r23, r23
    3010:	fd 01       	movw	r30, r26
    3012:	e6 0f       	add	r30, r22
    3014:	f7 1f       	adc	r31, r23
    3016:	27 a7       	std	Z+47, r18	; 0x2f
    3018:	30 ab       	std	Z+48, r19	; 0x30
    301a:	41 ab       	std	Z+49, r20	; 0x31
    301c:	52 ab       	std	Z+50, r21	; 0x32
    301e:	01 e0       	ldi	r16, 0x01	; 1
    3020:	03 c0       	rjmp	.+6      	; 0x3028 <xTaskGenericNotify+0xfc>
    3022:	01 e0       	ldi	r16, 0x01	; 1
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <xTaskGenericNotify+0xfc>
    3026:	00 e0       	ldi	r16, 0x00	; 0
    3028:	81 30       	cpi	r24, 0x01	; 1
    302a:	09 f0       	breq	.+2      	; 0x302e <xTaskGenericNotify+0x102>
    302c:	69 c0       	rjmp	.+210    	; 0x3100 <xTaskGenericNotify+0x1d4>
    302e:	1c 96       	adiw	r26, 0x0c	; 12
    3030:	ed 91       	ld	r30, X+
    3032:	fc 91       	ld	r31, X
    3034:	1d 97       	sbiw	r26, 0x0d	; 13
    3036:	16 96       	adiw	r26, 0x06	; 6
    3038:	cd 91       	ld	r28, X+
    303a:	dc 91       	ld	r29, X
    303c:	17 97       	sbiw	r26, 0x07	; 7
    303e:	18 96       	adiw	r26, 0x08	; 8
    3040:	8d 91       	ld	r24, X+
    3042:	9c 91       	ld	r25, X
    3044:	19 97       	sbiw	r26, 0x09	; 9
    3046:	9f 83       	std	Y+7, r25	; 0x07
    3048:	8e 83       	std	Y+6, r24	; 0x06
    304a:	18 96       	adiw	r26, 0x08	; 8
    304c:	cd 91       	ld	r28, X+
    304e:	dc 91       	ld	r29, X
    3050:	19 97       	sbiw	r26, 0x09	; 9
    3052:	16 96       	adiw	r26, 0x06	; 6
    3054:	8d 91       	ld	r24, X+
    3056:	9c 91       	ld	r25, X
    3058:	17 97       	sbiw	r26, 0x07	; 7
    305a:	9d 83       	std	Y+5, r25	; 0x05
    305c:	8c 83       	std	Y+4, r24	; 0x04
    305e:	81 81       	ldd	r24, Z+1	; 0x01
    3060:	92 81       	ldd	r25, Z+2	; 0x02
    3062:	9d 01       	movw	r18, r26
    3064:	2e 5f       	subi	r18, 0xFE	; 254
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	82 17       	cp	r24, r18
    306a:	93 07       	cpc	r25, r19
    306c:	31 f4       	brne	.+12     	; 0x307a <xTaskGenericNotify+0x14e>
    306e:	18 96       	adiw	r26, 0x08	; 8
    3070:	8d 91       	ld	r24, X+
    3072:	9c 91       	ld	r25, X
    3074:	19 97       	sbiw	r26, 0x09	; 9
    3076:	92 83       	std	Z+2, r25	; 0x02
    3078:	81 83       	std	Z+1, r24	; 0x01
    307a:	1d 96       	adiw	r26, 0x0d	; 13
    307c:	1c 92       	st	X, r1
    307e:	1e 92       	st	-X, r1
    3080:	1c 97       	sbiw	r26, 0x0c	; 12
    3082:	80 81       	ld	r24, Z
    3084:	81 50       	subi	r24, 0x01	; 1
    3086:	80 83       	st	Z, r24
    3088:	5a 96       	adiw	r26, 0x1a	; 26
    308a:	ec 91       	ld	r30, X
    308c:	5a 97       	sbiw	r26, 0x1a	; 26
    308e:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    3092:	8e 17       	cp	r24, r30
    3094:	10 f4       	brcc	.+4      	; 0x309a <xTaskGenericNotify+0x16e>
    3096:	e0 93 dd 14 	sts	0x14DD, r30	; 0x8014dd <uxTopReadyPriority>
    309a:	8b e0       	ldi	r24, 0x0B	; 11
    309c:	8e 9f       	mul	r24, r30
    309e:	f0 01       	movw	r30, r0
    30a0:	11 24       	eor	r1, r1
    30a2:	e1 5e       	subi	r30, 0xE1	; 225
    30a4:	fa 4e       	sbci	r31, 0xEA	; 234
    30a6:	01 80       	ldd	r0, Z+1	; 0x01
    30a8:	f2 81       	ldd	r31, Z+2	; 0x02
    30aa:	e0 2d       	mov	r30, r0
    30ac:	17 96       	adiw	r26, 0x07	; 7
    30ae:	fc 93       	st	X, r31
    30b0:	ee 93       	st	-X, r30
    30b2:	16 97       	sbiw	r26, 0x06	; 6
    30b4:	46 81       	ldd	r20, Z+6	; 0x06
    30b6:	57 81       	ldd	r21, Z+7	; 0x07
    30b8:	19 96       	adiw	r26, 0x09	; 9
    30ba:	5c 93       	st	X, r21
    30bc:	4e 93       	st	-X, r20
    30be:	18 97       	sbiw	r26, 0x08	; 8
    30c0:	c6 81       	ldd	r28, Z+6	; 0x06
    30c2:	d7 81       	ldd	r29, Z+7	; 0x07
    30c4:	3d 83       	std	Y+5, r19	; 0x05
    30c6:	2c 83       	std	Y+4, r18	; 0x04
    30c8:	37 83       	std	Z+7, r19	; 0x07
    30ca:	26 83       	std	Z+6, r18	; 0x06
    30cc:	5a 96       	adiw	r26, 0x1a	; 26
    30ce:	ec 91       	ld	r30, X
    30d0:	5a 97       	sbiw	r26, 0x1a	; 26
    30d2:	8e 9f       	mul	r24, r30
    30d4:	f0 01       	movw	r30, r0
    30d6:	11 24       	eor	r1, r1
    30d8:	e1 5e       	subi	r30, 0xE1	; 225
    30da:	fa 4e       	sbci	r31, 0xEA	; 234
    30dc:	1d 96       	adiw	r26, 0x0d	; 13
    30de:	fc 93       	st	X, r31
    30e0:	ee 93       	st	-X, r30
    30e2:	1c 97       	sbiw	r26, 0x0c	; 12
    30e4:	80 81       	ld	r24, Z
    30e6:	8f 5f       	subi	r24, 0xFF	; 255
    30e8:	80 83       	st	Z, r24
    30ea:	5a 96       	adiw	r26, 0x1a	; 26
    30ec:	9c 91       	ld	r25, X
    30ee:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    30f2:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    30f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    30f8:	89 17       	cp	r24, r25
    30fa:	10 f4       	brcc	.+4      	; 0x3100 <xTaskGenericNotify+0x1d4>
    30fc:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    3100:	0f 90       	pop	r0
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	80 2f       	mov	r24, r16
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	0f 91       	pop	r16
    310c:	ff 90       	pop	r15
    310e:	ef 90       	pop	r14
    3110:	bf 90       	pop	r11
    3112:	af 90       	pop	r10
    3114:	9f 90       	pop	r9
    3116:	8f 90       	pop	r8
    3118:	08 95       	ret

0000311a <xTaskGenericNotifyFromISR>:
    311a:	8f 92       	push	r8
    311c:	9f 92       	push	r9
    311e:	af 92       	push	r10
    3120:	bf 92       	push	r11
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	dc 01       	movw	r26, r24
    3132:	e1 14       	cp	r14, r1
    3134:	f1 04       	cpc	r15, r1
    3136:	89 f0       	breq	.+34     	; 0x315a <xTaskGenericNotifyFromISR+0x40>
    3138:	e6 2f       	mov	r30, r22
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	ee 0f       	add	r30, r30
    313e:	ff 1f       	adc	r31, r31
    3140:	ee 0f       	add	r30, r30
    3142:	ff 1f       	adc	r31, r31
    3144:	e8 0f       	add	r30, r24
    3146:	f9 1f       	adc	r31, r25
    3148:	87 a4       	ldd	r8, Z+47	; 0x2f
    314a:	90 a8       	ldd	r9, Z+48	; 0x30
    314c:	a1 a8       	ldd	r10, Z+49	; 0x31
    314e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3150:	f7 01       	movw	r30, r14
    3152:	80 82       	st	Z, r8
    3154:	91 82       	std	Z+1, r9	; 0x01
    3156:	a2 82       	std	Z+2, r10	; 0x02
    3158:	b3 82       	std	Z+3, r11	; 0x03
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	fd 01       	movw	r30, r26
    315e:	e6 0f       	add	r30, r22
    3160:	f7 1f       	adc	r31, r23
    3162:	93 a9       	ldd	r25, Z+51	; 0x33
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	83 ab       	std	Z+51, r24	; 0x33
    3168:	02 30       	cpi	r16, 0x02	; 2
    316a:	01 f1       	breq	.+64     	; 0x31ac <xTaskGenericNotifyFromISR+0x92>
    316c:	18 f4       	brcc	.+6      	; 0x3174 <xTaskGenericNotifyFromISR+0x5a>
    316e:	01 30       	cpi	r16, 0x01	; 1
    3170:	31 f0       	breq	.+12     	; 0x317e <xTaskGenericNotifyFromISR+0x64>
    3172:	4d c0       	rjmp	.+154    	; 0x320e <xTaskGenericNotifyFromISR+0xf4>
    3174:	03 30       	cpi	r16, 0x03	; 3
    3176:	79 f1       	breq	.+94     	; 0x31d6 <xTaskGenericNotifyFromISR+0xbc>
    3178:	04 30       	cpi	r16, 0x04	; 4
    317a:	d1 f1       	breq	.+116    	; 0x31f0 <xTaskGenericNotifyFromISR+0xd6>
    317c:	48 c0       	rjmp	.+144    	; 0x320e <xTaskGenericNotifyFromISR+0xf4>
    317e:	66 0f       	add	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	66 0f       	add	r22, r22
    3184:	77 1f       	adc	r23, r23
    3186:	fd 01       	movw	r30, r26
    3188:	e6 0f       	add	r30, r22
    318a:	f7 1f       	adc	r31, r23
    318c:	87 a4       	ldd	r8, Z+47	; 0x2f
    318e:	90 a8       	ldd	r9, Z+48	; 0x30
    3190:	a1 a8       	ldd	r10, Z+49	; 0x31
    3192:	b2 a8       	ldd	r11, Z+50	; 0x32
    3194:	ba 01       	movw	r22, r20
    3196:	a9 01       	movw	r20, r18
    3198:	48 29       	or	r20, r8
    319a:	59 29       	or	r21, r9
    319c:	6a 29       	or	r22, r10
    319e:	7b 29       	or	r23, r11
    31a0:	47 a7       	std	Z+47, r20	; 0x2f
    31a2:	50 ab       	std	Z+48, r21	; 0x30
    31a4:	61 ab       	std	Z+49, r22	; 0x31
    31a6:	72 ab       	std	Z+50, r23	; 0x32
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	34 c0       	rjmp	.+104    	; 0x3214 <xTaskGenericNotifyFromISR+0xfa>
    31ac:	66 0f       	add	r22, r22
    31ae:	77 1f       	adc	r23, r23
    31b0:	66 0f       	add	r22, r22
    31b2:	77 1f       	adc	r23, r23
    31b4:	fd 01       	movw	r30, r26
    31b6:	e6 0f       	add	r30, r22
    31b8:	f7 1f       	adc	r31, r23
    31ba:	47 a5       	ldd	r20, Z+47	; 0x2f
    31bc:	50 a9       	ldd	r21, Z+48	; 0x30
    31be:	61 a9       	ldd	r22, Z+49	; 0x31
    31c0:	72 a9       	ldd	r23, Z+50	; 0x32
    31c2:	4f 5f       	subi	r20, 0xFF	; 255
    31c4:	5f 4f       	sbci	r21, 0xFF	; 255
    31c6:	6f 4f       	sbci	r22, 0xFF	; 255
    31c8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ca:	47 a7       	std	Z+47, r20	; 0x2f
    31cc:	50 ab       	std	Z+48, r21	; 0x30
    31ce:	61 ab       	std	Z+49, r22	; 0x31
    31d0:	72 ab       	std	Z+50, r23	; 0x32
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	1f c0       	rjmp	.+62     	; 0x3214 <xTaskGenericNotifyFromISR+0xfa>
    31d6:	66 0f       	add	r22, r22
    31d8:	77 1f       	adc	r23, r23
    31da:	66 0f       	add	r22, r22
    31dc:	77 1f       	adc	r23, r23
    31de:	fd 01       	movw	r30, r26
    31e0:	e6 0f       	add	r30, r22
    31e2:	f7 1f       	adc	r31, r23
    31e4:	27 a7       	std	Z+47, r18	; 0x2f
    31e6:	30 ab       	std	Z+48, r19	; 0x30
    31e8:	41 ab       	std	Z+49, r20	; 0x31
    31ea:	52 ab       	std	Z+50, r21	; 0x32
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	12 c0       	rjmp	.+36     	; 0x3214 <xTaskGenericNotifyFromISR+0xfa>
    31f0:	92 30       	cpi	r25, 0x02	; 2
    31f2:	79 f0       	breq	.+30     	; 0x3212 <xTaskGenericNotifyFromISR+0xf8>
    31f4:	66 0f       	add	r22, r22
    31f6:	77 1f       	adc	r23, r23
    31f8:	66 0f       	add	r22, r22
    31fa:	77 1f       	adc	r23, r23
    31fc:	fd 01       	movw	r30, r26
    31fe:	e6 0f       	add	r30, r22
    3200:	f7 1f       	adc	r31, r23
    3202:	27 a7       	std	Z+47, r18	; 0x2f
    3204:	30 ab       	std	Z+48, r19	; 0x30
    3206:	41 ab       	std	Z+49, r20	; 0x31
    3208:	52 ab       	std	Z+50, r21	; 0x32
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	03 c0       	rjmp	.+6      	; 0x3214 <xTaskGenericNotifyFromISR+0xfa>
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	01 c0       	rjmp	.+2      	; 0x3214 <xTaskGenericNotifyFromISR+0xfa>
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	91 30       	cpi	r25, 0x01	; 1
    3216:	09 f0       	breq	.+2      	; 0x321a <xTaskGenericNotifyFromISR+0x100>
    3218:	96 c0       	rjmp	.+300    	; 0x3346 <xTaskGenericNotifyFromISR+0x22c>
    321a:	90 91 ce 14 	lds	r25, 0x14CE	; 0x8014ce <uxSchedulerSuspended>
    321e:	91 11       	cpse	r25, r1
    3220:	5f c0       	rjmp	.+190    	; 0x32e0 <xTaskGenericNotifyFromISR+0x1c6>
    3222:	1c 96       	adiw	r26, 0x0c	; 12
    3224:	ed 91       	ld	r30, X+
    3226:	fc 91       	ld	r31, X
    3228:	1d 97       	sbiw	r26, 0x0d	; 13
    322a:	16 96       	adiw	r26, 0x06	; 6
    322c:	cd 91       	ld	r28, X+
    322e:	dc 91       	ld	r29, X
    3230:	17 97       	sbiw	r26, 0x07	; 7
    3232:	18 96       	adiw	r26, 0x08	; 8
    3234:	2d 91       	ld	r18, X+
    3236:	3c 91       	ld	r19, X
    3238:	19 97       	sbiw	r26, 0x09	; 9
    323a:	3f 83       	std	Y+7, r19	; 0x07
    323c:	2e 83       	std	Y+6, r18	; 0x06
    323e:	18 96       	adiw	r26, 0x08	; 8
    3240:	cd 91       	ld	r28, X+
    3242:	dc 91       	ld	r29, X
    3244:	19 97       	sbiw	r26, 0x09	; 9
    3246:	16 96       	adiw	r26, 0x06	; 6
    3248:	2d 91       	ld	r18, X+
    324a:	3c 91       	ld	r19, X
    324c:	17 97       	sbiw	r26, 0x07	; 7
    324e:	3d 83       	std	Y+5, r19	; 0x05
    3250:	2c 83       	std	Y+4, r18	; 0x04
    3252:	41 81       	ldd	r20, Z+1	; 0x01
    3254:	52 81       	ldd	r21, Z+2	; 0x02
    3256:	9d 01       	movw	r18, r26
    3258:	2e 5f       	subi	r18, 0xFE	; 254
    325a:	3f 4f       	sbci	r19, 0xFF	; 255
    325c:	42 17       	cp	r20, r18
    325e:	53 07       	cpc	r21, r19
    3260:	31 f4       	brne	.+12     	; 0x326e <xTaskGenericNotifyFromISR+0x154>
    3262:	18 96       	adiw	r26, 0x08	; 8
    3264:	4d 91       	ld	r20, X+
    3266:	5c 91       	ld	r21, X
    3268:	19 97       	sbiw	r26, 0x09	; 9
    326a:	52 83       	std	Z+2, r21	; 0x02
    326c:	41 83       	std	Z+1, r20	; 0x01
    326e:	1d 96       	adiw	r26, 0x0d	; 13
    3270:	1c 92       	st	X, r1
    3272:	1e 92       	st	-X, r1
    3274:	1c 97       	sbiw	r26, 0x0c	; 12
    3276:	90 81       	ld	r25, Z
    3278:	91 50       	subi	r25, 0x01	; 1
    327a:	90 83       	st	Z, r25
    327c:	5a 96       	adiw	r26, 0x1a	; 26
    327e:	ec 91       	ld	r30, X
    3280:	5a 97       	sbiw	r26, 0x1a	; 26
    3282:	90 91 dd 14 	lds	r25, 0x14DD	; 0x8014dd <uxTopReadyPriority>
    3286:	9e 17       	cp	r25, r30
    3288:	10 f4       	brcc	.+4      	; 0x328e <xTaskGenericNotifyFromISR+0x174>
    328a:	e0 93 dd 14 	sts	0x14DD, r30	; 0x8014dd <uxTopReadyPriority>
    328e:	9b e0       	ldi	r25, 0x0B	; 11
    3290:	9e 9f       	mul	r25, r30
    3292:	f0 01       	movw	r30, r0
    3294:	11 24       	eor	r1, r1
    3296:	e1 5e       	subi	r30, 0xE1	; 225
    3298:	fa 4e       	sbci	r31, 0xEA	; 234
    329a:	01 80       	ldd	r0, Z+1	; 0x01
    329c:	f2 81       	ldd	r31, Z+2	; 0x02
    329e:	e0 2d       	mov	r30, r0
    32a0:	17 96       	adiw	r26, 0x07	; 7
    32a2:	fc 93       	st	X, r31
    32a4:	ee 93       	st	-X, r30
    32a6:	16 97       	sbiw	r26, 0x06	; 6
    32a8:	46 81       	ldd	r20, Z+6	; 0x06
    32aa:	57 81       	ldd	r21, Z+7	; 0x07
    32ac:	19 96       	adiw	r26, 0x09	; 9
    32ae:	5c 93       	st	X, r21
    32b0:	4e 93       	st	-X, r20
    32b2:	18 97       	sbiw	r26, 0x08	; 8
    32b4:	c6 81       	ldd	r28, Z+6	; 0x06
    32b6:	d7 81       	ldd	r29, Z+7	; 0x07
    32b8:	3d 83       	std	Y+5, r19	; 0x05
    32ba:	2c 83       	std	Y+4, r18	; 0x04
    32bc:	37 83       	std	Z+7, r19	; 0x07
    32be:	26 83       	std	Z+6, r18	; 0x06
    32c0:	5a 96       	adiw	r26, 0x1a	; 26
    32c2:	ec 91       	ld	r30, X
    32c4:	5a 97       	sbiw	r26, 0x1a	; 26
    32c6:	9e 9f       	mul	r25, r30
    32c8:	f0 01       	movw	r30, r0
    32ca:	11 24       	eor	r1, r1
    32cc:	e1 5e       	subi	r30, 0xE1	; 225
    32ce:	fa 4e       	sbci	r31, 0xEA	; 234
    32d0:	1d 96       	adiw	r26, 0x0d	; 13
    32d2:	fc 93       	st	X, r31
    32d4:	ee 93       	st	-X, r30
    32d6:	1c 97       	sbiw	r26, 0x0c	; 12
    32d8:	90 81       	ld	r25, Z
    32da:	9f 5f       	subi	r25, 0xFF	; 255
    32dc:	90 83       	st	Z, r25
    32de:	21 c0       	rjmp	.+66     	; 0x3322 <xTaskGenericNotifyFromISR+0x208>
    32e0:	6a ef       	ldi	r22, 0xFA	; 250
    32e2:	74 e1       	ldi	r23, 0x14	; 20
    32e4:	fb 01       	movw	r30, r22
    32e6:	c1 81       	ldd	r28, Z+1	; 0x01
    32e8:	d2 81       	ldd	r29, Z+2	; 0x02
    32ea:	53 96       	adiw	r26, 0x13	; 19
    32ec:	dc 93       	st	X, r29
    32ee:	ce 93       	st	-X, r28
    32f0:	52 97       	sbiw	r26, 0x12	; 18
    32f2:	2e 81       	ldd	r18, Y+6	; 0x06
    32f4:	3f 81       	ldd	r19, Y+7	; 0x07
    32f6:	55 96       	adiw	r26, 0x15	; 21
    32f8:	3c 93       	st	X, r19
    32fa:	2e 93       	st	-X, r18
    32fc:	54 97       	sbiw	r26, 0x14	; 20
    32fe:	4e 81       	ldd	r20, Y+6	; 0x06
    3300:	5f 81       	ldd	r21, Y+7	; 0x07
    3302:	9d 01       	movw	r18, r26
    3304:	22 5f       	subi	r18, 0xF2	; 242
    3306:	3f 4f       	sbci	r19, 0xFF	; 255
    3308:	fa 01       	movw	r30, r20
    330a:	35 83       	std	Z+5, r19	; 0x05
    330c:	24 83       	std	Z+4, r18	; 0x04
    330e:	3f 83       	std	Y+7, r19	; 0x07
    3310:	2e 83       	std	Y+6, r18	; 0x06
    3312:	59 96       	adiw	r26, 0x19	; 25
    3314:	7c 93       	st	X, r23
    3316:	6e 93       	st	-X, r22
    3318:	58 97       	sbiw	r26, 0x18	; 24
    331a:	fb 01       	movw	r30, r22
    331c:	90 81       	ld	r25, Z
    331e:	9f 5f       	subi	r25, 0xFF	; 255
    3320:	90 83       	st	Z, r25
    3322:	5a 96       	adiw	r26, 0x1a	; 26
    3324:	2c 91       	ld	r18, X
    3326:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <pxCurrentTCB>
    332a:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <pxCurrentTCB+0x1>
    332e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3330:	92 17       	cp	r25, r18
    3332:	48 f4       	brcc	.+18     	; 0x3346 <xTaskGenericNotifyFromISR+0x22c>
    3334:	c1 14       	cp	r12, r1
    3336:	d1 04       	cpc	r13, r1
    3338:	19 f0       	breq	.+6      	; 0x3340 <xTaskGenericNotifyFromISR+0x226>
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	f6 01       	movw	r30, r12
    333e:	90 83       	st	Z, r25
    3340:	91 e0       	ldi	r25, 0x01	; 1
    3342:	90 93 d7 14 	sts	0x14D7, r25	; 0x8014d7 <xYieldPending>
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	0f 91       	pop	r16
    334c:	ff 90       	pop	r15
    334e:	ef 90       	pop	r14
    3350:	df 90       	pop	r13
    3352:	cf 90       	pop	r12
    3354:	bf 90       	pop	r11
    3356:	af 90       	pop	r10
    3358:	9f 90       	pop	r9
    335a:	8f 90       	pop	r8
    335c:	08 95       	ret

0000335e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	21 f4       	brne	.+8      	; 0x336a <xTaskGenericNotifyStateClear+0xc>
    3362:	80 91 8d 15 	lds	r24, 0x158D	; 0x80158d <pxCurrentTCB>
    3366:	90 91 8e 15 	lds	r25, 0x158E	; 0x80158e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3370:	70 e0       	ldi	r23, 0x00	; 0
    3372:	fc 01       	movw	r30, r24
    3374:	e6 0f       	add	r30, r22
    3376:	f7 1f       	adc	r31, r23
    3378:	23 a9       	ldd	r18, Z+51	; 0x33
    337a:	22 30       	cpi	r18, 0x02	; 2
    337c:	31 f4       	brne	.+12     	; 0x338a <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    337e:	fc 01       	movw	r30, r24
    3380:	e6 0f       	add	r30, r22
    3382:	f7 1f       	adc	r31, r23
    3384:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	01 c0       	rjmp	.+2      	; 0x338c <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    338a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    338c:	0f 90       	pop	r0
    338e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3390:	08 95       	ret

00003392 <prvGetNextExpireTime>:
    3392:	dc 01       	movw	r26, r24
    3394:	e0 91 99 15 	lds	r30, 0x1599	; 0x801599 <pxCurrentTimerList>
    3398:	f0 91 9a 15 	lds	r31, 0x159A	; 0x80159a <pxCurrentTimerList+0x1>
    339c:	80 81       	ld	r24, Z
    339e:	91 e0       	ldi	r25, 0x01	; 1
    33a0:	81 11       	cpse	r24, r1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9c 93       	st	X, r25
    33a6:	91 11       	cpse	r25, r1
    33a8:	08 c0       	rjmp	.+16     	; 0x33ba <prvGetNextExpireTime+0x28>
    33aa:	07 80       	ldd	r0, Z+7	; 0x07
    33ac:	f0 85       	ldd	r31, Z+8	; 0x08
    33ae:	e0 2d       	mov	r30, r0
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	08 95       	ret
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	70 e0       	ldi	r23, 0x00	; 0
    33be:	cb 01       	movw	r24, r22
    33c0:	08 95       	ret

000033c2 <prvInsertTimerInActiveList>:
    33c2:	cf 92       	push	r12
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	fc 01       	movw	r30, r24
    33d0:	42 83       	std	Z+2, r20	; 0x02
    33d2:	53 83       	std	Z+3, r21	; 0x03
    33d4:	64 83       	std	Z+4, r22	; 0x04
    33d6:	75 83       	std	Z+5, r23	; 0x05
    33d8:	93 87       	std	Z+11, r25	; 0x0b
    33da:	82 87       	std	Z+10, r24	; 0x0a
    33dc:	04 17       	cp	r16, r20
    33de:	15 07       	cpc	r17, r21
    33e0:	26 07       	cpc	r18, r22
    33e2:	37 07       	cpc	r19, r23
    33e4:	c0 f0       	brcs	.+48     	; 0x3416 <prvInsertTimerInActiveList+0x54>
    33e6:	0c 19       	sub	r16, r12
    33e8:	1d 09       	sbc	r17, r13
    33ea:	2e 09       	sbc	r18, r14
    33ec:	3f 09       	sbc	r19, r15
    33ee:	86 85       	ldd	r24, Z+14	; 0x0e
    33f0:	97 85       	ldd	r25, Z+15	; 0x0f
    33f2:	a0 89       	ldd	r26, Z+16	; 0x10
    33f4:	b1 89       	ldd	r27, Z+17	; 0x11
    33f6:	08 17       	cp	r16, r24
    33f8:	19 07       	cpc	r17, r25
    33fa:	2a 07       	cpc	r18, r26
    33fc:	3b 07       	cpc	r19, r27
    33fe:	00 f5       	brcc	.+64     	; 0x3440 <prvInsertTimerInActiveList+0x7e>
    3400:	bf 01       	movw	r22, r30
    3402:	6e 5f       	subi	r22, 0xFE	; 254
    3404:	7f 4f       	sbci	r23, 0xFF	; 255
    3406:	80 91 97 15 	lds	r24, 0x1597	; 0x801597 <pxOverflowTimerList>
    340a:	90 91 98 15 	lds	r25, 0x1598	; 0x801598 <pxOverflowTimerList+0x1>
    340e:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	18 c0       	rjmp	.+48     	; 0x3446 <prvInsertTimerInActiveList+0x84>
    3416:	0c 15       	cp	r16, r12
    3418:	1d 05       	cpc	r17, r13
    341a:	2e 05       	cpc	r18, r14
    341c:	3f 05       	cpc	r19, r15
    341e:	28 f4       	brcc	.+10     	; 0x342a <prvInsertTimerInActiveList+0x68>
    3420:	4c 15       	cp	r20, r12
    3422:	5d 05       	cpc	r21, r13
    3424:	6e 05       	cpc	r22, r14
    3426:	7f 05       	cpc	r23, r15
    3428:	68 f4       	brcc	.+26     	; 0x3444 <prvInsertTimerInActiveList+0x82>
    342a:	bf 01       	movw	r22, r30
    342c:	6e 5f       	subi	r22, 0xFE	; 254
    342e:	7f 4f       	sbci	r23, 0xFF	; 255
    3430:	80 91 99 15 	lds	r24, 0x1599	; 0x801599 <pxCurrentTimerList>
    3434:	90 91 9a 15 	lds	r25, 0x159A	; 0x80159a <pxCurrentTimerList+0x1>
    3438:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	03 c0       	rjmp	.+6      	; 0x3446 <prvInsertTimerInActiveList+0x84>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	01 c0       	rjmp	.+2      	; 0x3446 <prvInsertTimerInActiveList+0x84>
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	1f 91       	pop	r17
    3448:	0f 91       	pop	r16
    344a:	ff 90       	pop	r15
    344c:	ef 90       	pop	r14
    344e:	df 90       	pop	r13
    3450:	cf 90       	pop	r12
    3452:	08 95       	ret

00003454 <prvCheckForValidListAndQueue>:
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	0f 92       	push	r0
    345a:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <xTimerQueue>
    345e:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <xTimerQueue+0x1>
    3462:	89 2b       	or	r24, r25
    3464:	e9 f4       	brne	.+58     	; 0x34a0 <prvCheckForValidListAndQueue+0x4c>
    3466:	86 ea       	ldi	r24, 0xA6	; 166
    3468:	95 e1       	ldi	r25, 0x15	; 21
    346a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    346e:	8b e9       	ldi	r24, 0x9B	; 155
    3470:	95 e1       	ldi	r25, 0x15	; 21
    3472:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vListInitialise>
    3476:	86 ea       	ldi	r24, 0xA6	; 166
    3478:	95 e1       	ldi	r25, 0x15	; 21
    347a:	90 93 9a 15 	sts	0x159A, r25	; 0x80159a <pxCurrentTimerList+0x1>
    347e:	80 93 99 15 	sts	0x1599, r24	; 0x801599 <pxCurrentTimerList>
    3482:	8b e9       	ldi	r24, 0x9B	; 155
    3484:	95 e1       	ldi	r25, 0x15	; 21
    3486:	90 93 98 15 	sts	0x1598, r25	; 0x801598 <pxOverflowTimerList+0x1>
    348a:	80 93 97 15 	sts	0x1597, r24	; 0x801597 <pxOverflowTimerList>
    348e:	40 e0       	ldi	r20, 0x00	; 0
    3490:	67 e0       	ldi	r22, 0x07	; 7
    3492:	8a e0       	ldi	r24, 0x0A	; 10
    3494:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericCreate>
    3498:	90 93 96 15 	sts	0x1596, r25	; 0x801596 <xTimerQueue+0x1>
    349c:	80 93 95 15 	sts	0x1595, r24	; 0x801595 <xTimerQueue>
    34a0:	0f 90       	pop	r0
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	08 95       	ret

000034a6 <xTimerCreateTimerTask>:
    34a6:	ef 92       	push	r14
    34a8:	ff 92       	push	r15
    34aa:	0f 93       	push	r16
    34ac:	d3 df       	rcall	.-90     	; 0x3454 <prvCheckForValidListAndQueue>
    34ae:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <xTimerQueue>
    34b2:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <xTimerQueue+0x1>
    34b6:	89 2b       	or	r24, r25
    34b8:	91 f0       	breq	.+36     	; 0x34de <xTimerCreateTimerTask+0x38>
    34ba:	0f 2e       	mov	r0, r31
    34bc:	f3 e9       	ldi	r31, 0x93	; 147
    34be:	ef 2e       	mov	r14, r31
    34c0:	f5 e1       	ldi	r31, 0x15	; 21
    34c2:	ff 2e       	mov	r15, r31
    34c4:	f0 2d       	mov	r31, r0
    34c6:	03 e0       	ldi	r16, 0x03	; 3
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 ec       	ldi	r20, 0xC0	; 192
    34ce:	50 e0       	ldi	r21, 0x00	; 0
    34d0:	6e ea       	ldi	r22, 0xAE	; 174
    34d2:	72 e0       	ldi	r23, 0x02	; 2
    34d4:	87 ed       	ldi	r24, 0xD7	; 215
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <xTaskCreate>
    34dc:	01 c0       	rjmp	.+2      	; 0x34e0 <xTimerCreateTimerTask+0x3a>
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	0f 91       	pop	r16
    34e2:	ff 90       	pop	r15
    34e4:	ef 90       	pop	r14
    34e6:	08 95       	ret

000034e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    34e8:	8f 92       	push	r8
    34ea:	9f 92       	push	r9
    34ec:	af 92       	push	r10
    34ee:	bf 92       	push	r11
    34f0:	cf 92       	push	r12
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	27 97       	sbiw	r28, 0x07	; 7
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3510:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <xTimerQueue>
    3514:	f0 91 96 15 	lds	r31, 0x1596	; 0x801596 <xTimerQueue+0x1>
    3518:	30 97       	sbiw	r30, 0x00	; 0
    351a:	81 f1       	breq	.+96     	; 0x357c <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    351c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    351e:	2a 83       	std	Y+2, r18	; 0x02
    3520:	3b 83       	std	Y+3, r19	; 0x03
    3522:	4c 83       	std	Y+4, r20	; 0x04
    3524:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3526:	9f 83       	std	Y+7, r25	; 0x07
    3528:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    352a:	66 30       	cpi	r22, 0x06	; 6
    352c:	f4 f4       	brge	.+60     	; 0x356a <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    352e:	c3 da       	rcall	.-2682   	; 0x2ab6 <xTaskGetSchedulerState>
    3530:	82 30       	cpi	r24, 0x02	; 2
    3532:	69 f4       	brne	.+26     	; 0x354e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3534:	00 e0       	ldi	r16, 0x00	; 0
    3536:	a7 01       	movw	r20, r14
    3538:	96 01       	movw	r18, r12
    353a:	be 01       	movw	r22, r28
    353c:	6f 5f       	subi	r22, 0xFF	; 255
    353e:	7f 4f       	sbci	r23, 0xFF	; 255
    3540:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <xTimerQueue>
    3544:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <xTimerQueue+0x1>
    3548:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    354c:	18 c0       	rjmp	.+48     	; 0x357e <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    354e:	00 e0       	ldi	r16, 0x00	; 0
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	a9 01       	movw	r20, r18
    3556:	be 01       	movw	r22, r28
    3558:	6f 5f       	subi	r22, 0xFF	; 255
    355a:	7f 4f       	sbci	r23, 0xFF	; 255
    355c:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <xTimerQueue>
    3560:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <xTimerQueue+0x1>
    3564:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    3568:	0a c0       	rjmp	.+20     	; 0x357e <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	a8 01       	movw	r20, r16
    356e:	be 01       	movw	r22, r28
    3570:	6f 5f       	subi	r22, 0xFF	; 255
    3572:	7f 4f       	sbci	r23, 0xFF	; 255
    3574:	cf 01       	movw	r24, r30
    3576:	0e 94 74 08 	call	0x10e8	; 0x10e8 <xQueueGenericSendFromISR>
    357a:	01 c0       	rjmp	.+2      	; 0x357e <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    357c:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    357e:	27 96       	adiw	r28, 0x07	; 7
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	ff 90       	pop	r15
    3594:	ef 90       	pop	r14
    3596:	df 90       	pop	r13
    3598:	cf 90       	pop	r12
    359a:	bf 90       	pop	r11
    359c:	af 90       	pop	r10
    359e:	9f 90       	pop	r9
    35a0:	8f 90       	pop	r8
    35a2:	08 95       	ret

000035a4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    35a4:	8f 92       	push	r8
    35a6:	9f 92       	push	r9
    35a8:	af 92       	push	r10
    35aa:	bf 92       	push	r11
    35ac:	cf 92       	push	r12
    35ae:	df 92       	push	r13
    35b0:	ef 92       	push	r14
    35b2:	ff 92       	push	r15
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    35bc:	3b c0       	rjmp	.+118    	; 0x3634 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    35be:	07 80       	ldd	r0, Z+7	; 0x07
    35c0:	f0 85       	ldd	r31, Z+8	; 0x08
    35c2:	e0 2d       	mov	r30, r0
    35c4:	80 80       	ld	r8, Z
    35c6:	91 80       	ldd	r9, Z+1	; 0x01
    35c8:	a2 80       	ldd	r10, Z+2	; 0x02
    35ca:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    35cc:	c0 85       	ldd	r28, Z+8	; 0x08
    35ce:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    35d0:	8e 01       	movw	r16, r28
    35d2:	0e 5f       	subi	r16, 0xFE	; 254
    35d4:	1f 4f       	sbci	r17, 0xFF	; 255
    35d6:	c8 01       	movw	r24, r16
    35d8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    35dc:	ec 89       	ldd	r30, Y+20	; 0x14
    35de:	fd 89       	ldd	r31, Y+21	; 0x15
    35e0:	ce 01       	movw	r24, r28
    35e2:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35e4:	8e 89       	ldd	r24, Y+22	; 0x16
    35e6:	82 ff       	sbrs	r24, 2
    35e8:	25 c0       	rjmp	.+74     	; 0x3634 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    35ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    35ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    35ee:	a8 89       	ldd	r26, Y+16	; 0x10
    35f0:	b9 89       	ldd	r27, Y+17	; 0x11
    35f2:	88 0d       	add	r24, r8
    35f4:	99 1d       	adc	r25, r9
    35f6:	aa 1d       	adc	r26, r10
    35f8:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    35fa:	88 16       	cp	r8, r24
    35fc:	99 06       	cpc	r9, r25
    35fe:	aa 06       	cpc	r10, r26
    3600:	bb 06       	cpc	r11, r27
    3602:	70 f4       	brcc	.+28     	; 0x3620 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3604:	8a 83       	std	Y+2, r24	; 0x02
    3606:	9b 83       	std	Y+3, r25	; 0x03
    3608:	ac 83       	std	Y+4, r26	; 0x04
    360a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    360c:	db 87       	std	Y+11, r29	; 0x0b
    360e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3610:	b8 01       	movw	r22, r16
    3612:	80 91 99 15 	lds	r24, 0x1599	; 0x801599 <pxCurrentTimerList>
    3616:	90 91 9a 15 	lds	r25, 0x159A	; 0x80159a <pxCurrentTimerList+0x1>
    361a:	0e 94 11 05 	call	0xa22	; 0xa22 <vListInsert>
    361e:	0a c0       	rjmp	.+20     	; 0x3634 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3620:	c1 2c       	mov	r12, r1
    3622:	d1 2c       	mov	r13, r1
    3624:	76 01       	movw	r14, r12
    3626:	00 e0       	ldi	r16, 0x00	; 0
    3628:	10 e0       	ldi	r17, 0x00	; 0
    362a:	a5 01       	movw	r20, r10
    362c:	94 01       	movw	r18, r8
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	ce 01       	movw	r24, r28
    3632:	5a df       	rcall	.-332    	; 0x34e8 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3634:	e0 91 99 15 	lds	r30, 0x1599	; 0x801599 <pxCurrentTimerList>
    3638:	f0 91 9a 15 	lds	r31, 0x159A	; 0x80159a <pxCurrentTimerList+0x1>
    363c:	80 81       	ld	r24, Z
    363e:	81 11       	cpse	r24, r1
    3640:	be cf       	rjmp	.-132    	; 0x35be <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3642:	80 91 97 15 	lds	r24, 0x1597	; 0x801597 <pxOverflowTimerList>
    3646:	90 91 98 15 	lds	r25, 0x1598	; 0x801598 <pxOverflowTimerList+0x1>
    364a:	90 93 9a 15 	sts	0x159A, r25	; 0x80159a <pxCurrentTimerList+0x1>
    364e:	80 93 99 15 	sts	0x1599, r24	; 0x801599 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3652:	f0 93 98 15 	sts	0x1598, r31	; 0x801598 <pxOverflowTimerList+0x1>
    3656:	e0 93 97 15 	sts	0x1597, r30	; 0x801597 <pxOverflowTimerList>
    }
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	1f 91       	pop	r17
    3660:	0f 91       	pop	r16
    3662:	ff 90       	pop	r15
    3664:	ef 90       	pop	r14
    3666:	df 90       	pop	r13
    3668:	cf 90       	pop	r12
    366a:	bf 90       	pop	r11
    366c:	af 90       	pop	r10
    366e:	9f 90       	pop	r9
    3670:	8f 90       	pop	r8
    3672:	08 95       	ret

00003674 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3674:	cf 92       	push	r12
    3676:	df 92       	push	r13
    3678:	ef 92       	push	r14
    367a:	ff 92       	push	r15
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3682:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <xTaskGetTickCount>
    3686:	6b 01       	movw	r12, r22
    3688:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    368a:	80 91 8f 15 	lds	r24, 0x158F	; 0x80158f <xLastTime.2436>
    368e:	90 91 90 15 	lds	r25, 0x1590	; 0x801590 <xLastTime.2436+0x1>
    3692:	a0 91 91 15 	lds	r26, 0x1591	; 0x801591 <xLastTime.2436+0x2>
    3696:	b0 91 92 15 	lds	r27, 0x1592	; 0x801592 <xLastTime.2436+0x3>
    369a:	c8 16       	cp	r12, r24
    369c:	d9 06       	cpc	r13, r25
    369e:	ea 06       	cpc	r14, r26
    36a0:	fb 06       	cpc	r15, r27
    36a2:	20 f4       	brcc	.+8      	; 0x36ac <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    36a4:	7f df       	rcall	.-258    	; 0x35a4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	88 83       	st	Y, r24
    36aa:	01 c0       	rjmp	.+2      	; 0x36ae <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    36ac:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    36ae:	c0 92 8f 15 	sts	0x158F, r12	; 0x80158f <xLastTime.2436>
    36b2:	d0 92 90 15 	sts	0x1590, r13	; 0x801590 <xLastTime.2436+0x1>
    36b6:	e0 92 91 15 	sts	0x1591, r14	; 0x801591 <xLastTime.2436+0x2>
    36ba:	f0 92 92 15 	sts	0x1592, r15	; 0x801592 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    36be:	c7 01       	movw	r24, r14
    36c0:	b6 01       	movw	r22, r12
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	ff 90       	pop	r15
    36c8:	ef 90       	pop	r14
    36ca:	df 90       	pop	r13
    36cc:	cf 90       	pop	r12
    36ce:	08 95       	ret

000036d0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    36d0:	4f 92       	push	r4
    36d2:	5f 92       	push	r5
    36d4:	6f 92       	push	r6
    36d6:	7f 92       	push	r7
    36d8:	8f 92       	push	r8
    36da:	9f 92       	push	r9
    36dc:	af 92       	push	r10
    36de:	bf 92       	push	r11
    36e0:	cf 92       	push	r12
    36e2:	df 92       	push	r13
    36e4:	ef 92       	push	r14
    36e6:	ff 92       	push	r15
    36e8:	0f 93       	push	r16
    36ea:	1f 93       	push	r17
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
    36f0:	4b 01       	movw	r8, r22
    36f2:	5c 01       	movw	r10, r24
    36f4:	29 01       	movw	r4, r18
    36f6:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    36f8:	e0 91 99 15 	lds	r30, 0x1599	; 0x801599 <pxCurrentTimerList>
    36fc:	f0 91 9a 15 	lds	r31, 0x159A	; 0x80159a <pxCurrentTimerList+0x1>
    3700:	07 80       	ldd	r0, Z+7	; 0x07
    3702:	f0 85       	ldd	r31, Z+8	; 0x08
    3704:	e0 2d       	mov	r30, r0
    3706:	c0 85       	ldd	r28, Z+8	; 0x08
    3708:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    370a:	ce 01       	movw	r24, r28
    370c:	02 96       	adiw	r24, 0x02	; 2
    370e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3712:	8e 89       	ldd	r24, Y+22	; 0x16
    3714:	82 ff       	sbrs	r24, 2
    3716:	1b c0       	rjmp	.+54     	; 0x374e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3718:	4e 85       	ldd	r20, Y+14	; 0x0e
    371a:	5f 85       	ldd	r21, Y+15	; 0x0f
    371c:	68 89       	ldd	r22, Y+16	; 0x10
    371e:	79 89       	ldd	r23, Y+17	; 0x11
    3720:	48 0d       	add	r20, r8
    3722:	59 1d       	adc	r21, r9
    3724:	6a 1d       	adc	r22, r10
    3726:	7b 1d       	adc	r23, r11
    3728:	75 01       	movw	r14, r10
    372a:	64 01       	movw	r12, r8
    372c:	93 01       	movw	r18, r6
    372e:	82 01       	movw	r16, r4
    3730:	ce 01       	movw	r24, r28
    3732:	47 de       	rcall	.-882    	; 0x33c2 <prvInsertTimerInActiveList>
    3734:	88 23       	and	r24, r24
    3736:	69 f0       	breq	.+26     	; 0x3752 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3738:	c1 2c       	mov	r12, r1
    373a:	d1 2c       	mov	r13, r1
    373c:	76 01       	movw	r14, r12
    373e:	00 e0       	ldi	r16, 0x00	; 0
    3740:	10 e0       	ldi	r17, 0x00	; 0
    3742:	a5 01       	movw	r20, r10
    3744:	94 01       	movw	r18, r8
    3746:	60 e0       	ldi	r22, 0x00	; 0
    3748:	ce 01       	movw	r24, r28
    374a:	ce de       	rcall	.-612    	; 0x34e8 <xTimerGenericCommand>
    374c:	02 c0       	rjmp	.+4      	; 0x3752 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    374e:	8e 7f       	andi	r24, 0xFE	; 254
    3750:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3752:	ec 89       	ldd	r30, Y+20	; 0x14
    3754:	fd 89       	ldd	r31, Y+21	; 0x15
    3756:	ce 01       	movw	r24, r28
    3758:	19 95       	eicall
    }
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	1f 91       	pop	r17
    3760:	0f 91       	pop	r16
    3762:	ff 90       	pop	r15
    3764:	ef 90       	pop	r14
    3766:	df 90       	pop	r13
    3768:	cf 90       	pop	r12
    376a:	bf 90       	pop	r11
    376c:	af 90       	pop	r10
    376e:	9f 90       	pop	r9
    3770:	8f 90       	pop	r8
    3772:	7f 90       	pop	r7
    3774:	6f 90       	pop	r6
    3776:	5f 90       	pop	r5
    3778:	4f 90       	pop	r4
    377a:	08 95       	ret

0000377c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    377c:	8f 92       	push	r8
    377e:	9f 92       	push	r9
    3780:	af 92       	push	r10
    3782:	bf 92       	push	r11
    3784:	cf 92       	push	r12
    3786:	df 92       	push	r13
    3788:	ef 92       	push	r14
    378a:	ff 92       	push	r15
    378c:	1f 93       	push	r17
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	1f 92       	push	r1
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
    3798:	6b 01       	movw	r12, r22
    379a:	7c 01       	movw	r14, r24
    379c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    379e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    37a2:	ce 01       	movw	r24, r28
    37a4:	01 96       	adiw	r24, 0x01	; 1
    37a6:	66 df       	rcall	.-308    	; 0x3674 <prvSampleTimeNow>
    37a8:	4b 01       	movw	r8, r22
    37aa:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	81 11       	cpse	r24, r1
    37b0:	2d c0       	rjmp	.+90     	; 0x380c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    37b2:	11 11       	cpse	r17, r1
    37b4:	0d c0       	rjmp	.+26     	; 0x37d0 <prvProcessTimerOrBlockTask+0x54>
    37b6:	8c 14       	cp	r8, r12
    37b8:	9d 04       	cpc	r9, r13
    37ba:	ae 04       	cpc	r10, r14
    37bc:	bf 04       	cpc	r11, r15
    37be:	40 f0       	brcs	.+16     	; 0x37d0 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    37c0:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    37c4:	a5 01       	movw	r20, r10
    37c6:	94 01       	movw	r18, r8
    37c8:	c7 01       	movw	r24, r14
    37ca:	b6 01       	movw	r22, r12
    37cc:	81 df       	rcall	.-254    	; 0x36d0 <prvProcessExpiredTimer>
    37ce:	20 c0       	rjmp	.+64     	; 0x3810 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    37d0:	11 23       	and	r17, r17
    37d2:	41 f0       	breq	.+16     	; 0x37e4 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    37d4:	e0 91 97 15 	lds	r30, 0x1597	; 0x801597 <pxOverflowTimerList>
    37d8:	f0 91 98 15 	lds	r31, 0x1598	; 0x801598 <pxOverflowTimerList+0x1>
    37dc:	80 81       	ld	r24, Z
    37de:	11 e0       	ldi	r17, 0x01	; 1
    37e0:	81 11       	cpse	r24, r1
    37e2:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    37e4:	b7 01       	movw	r22, r14
    37e6:	a6 01       	movw	r20, r12
    37e8:	48 19       	sub	r20, r8
    37ea:	59 09       	sbc	r21, r9
    37ec:	6a 09       	sbc	r22, r10
    37ee:	7b 09       	sbc	r23, r11
    37f0:	21 2f       	mov	r18, r17
    37f2:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <xTimerQueue>
    37f6:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <xTimerQueue+0x1>
    37fa:	0e 94 ef 09 	call	0x13de	; 0x13de <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    37fe:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    3802:	81 11       	cpse	r24, r1
    3804:	05 c0       	rjmp	.+10     	; 0x3810 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3806:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    380a:	02 c0       	rjmp	.+4      	; 0x3810 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    380c:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
            }
        }
    }
    3810:	0f 90       	pop	r0
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	1f 91       	pop	r17
    3818:	ff 90       	pop	r15
    381a:	ef 90       	pop	r14
    381c:	df 90       	pop	r13
    381e:	cf 90       	pop	r12
    3820:	bf 90       	pop	r11
    3822:	af 90       	pop	r10
    3824:	9f 90       	pop	r9
    3826:	8f 90       	pop	r8
    3828:	08 95       	ret

0000382a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    382a:	af 92       	push	r10
    382c:	bf 92       	push	r11
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	28 97       	sbiw	r28, 0x08	; 8
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	f8 94       	cli
    3848:	de bf       	out	0x3e, r29	; 62
    384a:	0f be       	out	0x3f, r0	; 63
    384c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    384e:	82 c0       	rjmp	.+260    	; 0x3954 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	88 23       	and	r24, r24
    3854:	0c f4       	brge	.+2      	; 0x3858 <prvProcessReceivedCommands+0x2e>
    3856:	7e c0       	rjmp	.+252    	; 0x3954 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3858:	ae 80       	ldd	r10, Y+6	; 0x06
    385a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    385c:	d5 01       	movw	r26, r10
    385e:	1c 96       	adiw	r26, 0x0c	; 12
    3860:	8d 91       	ld	r24, X+
    3862:	9c 91       	ld	r25, X
    3864:	1d 97       	sbiw	r26, 0x0d	; 13
    3866:	89 2b       	or	r24, r25
    3868:	21 f0       	breq	.+8      	; 0x3872 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    386a:	c5 01       	movw	r24, r10
    386c:	02 96       	adiw	r24, 0x02	; 2
    386e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3872:	ce 01       	movw	r24, r28
    3874:	08 96       	adiw	r24, 0x08	; 8
    3876:	fe de       	rcall	.-516    	; 0x3674 <prvSampleTimeNow>
    3878:	8b 01       	movw	r16, r22
    387a:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    387c:	e9 81       	ldd	r30, Y+1	; 0x01
    387e:	0e 2e       	mov	r0, r30
    3880:	00 0c       	add	r0, r0
    3882:	ff 0b       	sbc	r31, r31
    3884:	ea 30       	cpi	r30, 0x0A	; 10
    3886:	f1 05       	cpc	r31, r1
    3888:	08 f0       	brcs	.+2      	; 0x388c <prvProcessReceivedCommands+0x62>
    388a:	64 c0       	rjmp	.+200    	; 0x3954 <prvProcessReceivedCommands+0x12a>
    388c:	88 27       	eor	r24, r24
    388e:	ee 58       	subi	r30, 0x8E	; 142
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	8f 4f       	sbci	r24, 0xFF	; 255
    3894:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3898:	f5 01       	movw	r30, r10
    389a:	86 89       	ldd	r24, Z+22	; 0x16
    389c:	81 60       	ori	r24, 0x01	; 1
    389e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    38a0:	ca 80       	ldd	r12, Y+2	; 0x02
    38a2:	db 80       	ldd	r13, Y+3	; 0x03
    38a4:	ec 80       	ldd	r14, Y+4	; 0x04
    38a6:	fd 80       	ldd	r15, Y+5	; 0x05
    38a8:	46 85       	ldd	r20, Z+14	; 0x0e
    38aa:	57 85       	ldd	r21, Z+15	; 0x0f
    38ac:	60 89       	ldd	r22, Z+16	; 0x10
    38ae:	71 89       	ldd	r23, Z+17	; 0x11
    38b0:	4c 0d       	add	r20, r12
    38b2:	5d 1d       	adc	r21, r13
    38b4:	6e 1d       	adc	r22, r14
    38b6:	7f 1d       	adc	r23, r15
    38b8:	c5 01       	movw	r24, r10
    38ba:	83 dd       	rcall	.-1274   	; 0x33c2 <prvInsertTimerInActiveList>
    38bc:	88 23       	and	r24, r24
    38be:	09 f4       	brne	.+2      	; 0x38c2 <prvProcessReceivedCommands+0x98>
    38c0:	49 c0       	rjmp	.+146    	; 0x3954 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    38c2:	d5 01       	movw	r26, r10
    38c4:	54 96       	adiw	r26, 0x14	; 20
    38c6:	ed 91       	ld	r30, X+
    38c8:	fc 91       	ld	r31, X
    38ca:	55 97       	sbiw	r26, 0x15	; 21
    38cc:	c5 01       	movw	r24, r10
    38ce:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    38d0:	f5 01       	movw	r30, r10
    38d2:	86 89       	ldd	r24, Z+22	; 0x16
    38d4:	82 ff       	sbrs	r24, 2
    38d6:	3e c0       	rjmp	.+124    	; 0x3954 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    38d8:	4a 81       	ldd	r20, Y+2	; 0x02
    38da:	5b 81       	ldd	r21, Y+3	; 0x03
    38dc:	6c 81       	ldd	r22, Y+4	; 0x04
    38de:	7d 81       	ldd	r23, Y+5	; 0x05
    38e0:	86 85       	ldd	r24, Z+14	; 0x0e
    38e2:	97 85       	ldd	r25, Z+15	; 0x0f
    38e4:	a0 89       	ldd	r26, Z+16	; 0x10
    38e6:	b1 89       	ldd	r27, Z+17	; 0x11
    38e8:	9a 01       	movw	r18, r20
    38ea:	ab 01       	movw	r20, r22
    38ec:	28 0f       	add	r18, r24
    38ee:	39 1f       	adc	r19, r25
    38f0:	4a 1f       	adc	r20, r26
    38f2:	5b 1f       	adc	r21, r27
    38f4:	c1 2c       	mov	r12, r1
    38f6:	d1 2c       	mov	r13, r1
    38f8:	76 01       	movw	r14, r12
    38fa:	00 e0       	ldi	r16, 0x00	; 0
    38fc:	10 e0       	ldi	r17, 0x00	; 0
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	c5 01       	movw	r24, r10
    3902:	f2 dd       	rcall	.-1052   	; 0x34e8 <xTimerGenericCommand>
    3904:	27 c0       	rjmp	.+78     	; 0x3954 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3906:	d5 01       	movw	r26, r10
    3908:	56 96       	adiw	r26, 0x16	; 22
    390a:	8c 91       	ld	r24, X
    390c:	56 97       	sbiw	r26, 0x16	; 22
    390e:	8e 7f       	andi	r24, 0xFE	; 254
    3910:	56 96       	adiw	r26, 0x16	; 22
    3912:	8c 93       	st	X, r24
                        break;
    3914:	1f c0       	rjmp	.+62     	; 0x3954 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3916:	f5 01       	movw	r30, r10
    3918:	86 89       	ldd	r24, Z+22	; 0x16
    391a:	81 60       	ori	r24, 0x01	; 1
    391c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    391e:	4a 81       	ldd	r20, Y+2	; 0x02
    3920:	5b 81       	ldd	r21, Y+3	; 0x03
    3922:	6c 81       	ldd	r22, Y+4	; 0x04
    3924:	7d 81       	ldd	r23, Y+5	; 0x05
    3926:	46 87       	std	Z+14, r20	; 0x0e
    3928:	57 87       	std	Z+15, r21	; 0x0f
    392a:	60 8b       	std	Z+16, r22	; 0x10
    392c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    392e:	40 0f       	add	r20, r16
    3930:	51 1f       	adc	r21, r17
    3932:	62 1f       	adc	r22, r18
    3934:	73 1f       	adc	r23, r19
    3936:	68 01       	movw	r12, r16
    3938:	79 01       	movw	r14, r18
    393a:	c5 01       	movw	r24, r10
    393c:	42 dd       	rcall	.-1404   	; 0x33c2 <prvInsertTimerInActiveList>
                        break;
    393e:	0a c0       	rjmp	.+20     	; 0x3954 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3940:	f5 01       	movw	r30, r10
    3942:	86 89       	ldd	r24, Z+22	; 0x16
    3944:	81 fd       	sbrc	r24, 1
    3946:	04 c0       	rjmp	.+8      	; 0x3950 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3948:	c5 01       	movw	r24, r10
    394a:	0e 94 bf 04 	call	0x97e	; 0x97e <vPortFree>
    394e:	02 c0       	rjmp	.+4      	; 0x3954 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3950:	8e 7f       	andi	r24, 0xFE	; 254
    3952:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	a9 01       	movw	r20, r18
    395a:	be 01       	movw	r22, r28
    395c:	6f 5f       	subi	r22, 0xFF	; 255
    395e:	7f 4f       	sbci	r23, 0xFF	; 255
    3960:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <xTimerQueue>
    3964:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <xTimerQueue+0x1>
    3968:	0e 94 af 08 	call	0x115e	; 0x115e <xQueueReceive>
    396c:	81 11       	cpse	r24, r1
    396e:	70 cf       	rjmp	.-288    	; 0x3850 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3970:	28 96       	adiw	r28, 0x08	; 8
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	f8 94       	cli
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	cd bf       	out	0x3d, r28	; 61
    397c:	df 91       	pop	r29
    397e:	cf 91       	pop	r28
    3980:	1f 91       	pop	r17
    3982:	0f 91       	pop	r16
    3984:	ff 90       	pop	r15
    3986:	ef 90       	pop	r14
    3988:	df 90       	pop	r13
    398a:	cf 90       	pop	r12
    398c:	bf 90       	pop	r11
    398e:	af 90       	pop	r10
    3990:	08 95       	ret

00003992 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3992:	08 95       	ret

00003994 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3994:	84 b1       	in	r24, 0x04	; 4
    3996:	80 68       	ori	r24, 0x80	; 128
    3998:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    399a:	85 b1       	in	r24, 0x05	; 5
    399c:	80 68       	ori	r24, 0x80	; 128
    399e:	85 b9       	out	0x05, r24	; 5
    39a0:	08 95       	ret

000039a2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    39a2:	83 b1       	in	r24, 0x03	; 3
    39a4:	80 68       	ori	r24, 0x80	; 128
    39a6:	83 b9       	out	0x03, r24	; 3
    39a8:	08 95       	ret

000039aa <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    39aa:	f4 df       	rcall	.-24     	; 0x3994 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    39ac:	2f ef       	ldi	r18, 0xFF	; 255
    39ae:	80 e7       	ldi	r24, 0x70	; 112
    39b0:	92 e0       	ldi	r25, 0x02	; 2
    39b2:	21 50       	subi	r18, 0x01	; 1
    39b4:	80 40       	sbci	r24, 0x00	; 0
    39b6:	90 40       	sbci	r25, 0x00	; 0
    39b8:	e1 f7       	brne	.-8      	; 0x39b2 <vApplicationMallocFailedHook+0x8>
    39ba:	00 c0       	rjmp	.+0      	; 0x39bc <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    39bc:	00 00       	nop
    39be:	f1 df       	rcall	.-30     	; 0x39a2 <prvBlinkMainLed>
    39c0:	f5 cf       	rjmp	.-22     	; 0x39ac <vApplicationMallocFailedHook+0x2>

000039c2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    39c2:	e8 df       	rcall	.-48     	; 0x3994 <prvSetMainLedOn>
    39c4:	2f ef       	ldi	r18, 0xFF	; 255
    39c6:	87 ea       	ldi	r24, 0xA7	; 167
    39c8:	91 e6       	ldi	r25, 0x61	; 97
    39ca:	21 50       	subi	r18, 0x01	; 1
    39cc:	80 40       	sbci	r24, 0x00	; 0
    39ce:	90 40       	sbci	r25, 0x00	; 0
    39d0:	e1 f7       	brne	.-8      	; 0x39ca <vApplicationStackOverflowHook+0x8>
    39d2:	00 c0       	rjmp	.+0      	; 0x39d4 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    39d4:	00 00       	nop
    39d6:	e5 df       	rcall	.-54     	; 0x39a2 <prvBlinkMainLed>
    39d8:	f5 cf       	rjmp	.-22     	; 0x39c4 <vApplicationStackOverflowHook+0x2>

000039da <lora_downLink_task>:

void lora_downLink_task()
{
	for(;;)
	{
		xMessageBufferReceive(downlinkMessageBuffer, &lora_downlink_payload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    39da:	0f ef       	ldi	r16, 0xFF	; 255
    39dc:	1f ef       	ldi	r17, 0xFF	; 255
    39de:	98 01       	movw	r18, r16
    39e0:	46 e1       	ldi	r20, 0x16	; 22
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	65 e7       	ldi	r22, 0x75	; 117
    39e6:	77 e1       	ldi	r23, 0x17	; 23
    39e8:	80 91 99 17 	lds	r24, 0x1799	; 0x801799 <downlinkMessageBuffer>
    39ec:	90 91 9a 17 	lds	r25, 0x179A	; 0x80179a <downlinkMessageBuffer+0x1>
    39f0:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferReceive>
		printf("DOWN LINK<<<<<: from port: %d with %d bytes received!",lora_downlink_payload.portNo, lora_downlink_payload.len); // Just for Debug
    39f4:	c5 e7       	ldi	r28, 0x75	; 117
    39f6:	d7 e1       	ldi	r29, 0x17	; 23
    39f8:	99 81       	ldd	r25, Y+1	; 0x01
    39fa:	88 81       	ld	r24, Y
    39fc:	1f 92       	push	r1
    39fe:	9f 93       	push	r25
    3a00:	1f 92       	push	r1
    3a02:	8f 93       	push	r24
    3a04:	86 eb       	ldi	r24, 0xB6	; 182
    3a06:	92 e0       	ldi	r25, 0x02	; 2
    3a08:	9f 93       	push	r25
    3a0a:	8f 93       	push	r24
    3a0c:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
		if (1 == lora_downlink_payload.len)
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	81 30       	cpi	r24, 0x01	; 1
    3a20:	81 f4       	brne	.+32     	; 0x3a42 <lora_downLink_task+0x68>
		{
			 uint8_t level =  (lora_downlink_payload.bytes[0]);
			 setVentilationLevel(level);
    3a22:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <lora_downlink_payload+0x2>
    3a26:	0e 94 09 02 	call	0x412	; 0x412 <setVentilationLevel>
			 xSemaphoreGive(ventilationSemaphore);
    3a2a:	00 e0       	ldi	r16, 0x00	; 0
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	a9 01       	movw	r20, r18
    3a32:	60 e0       	ldi	r22, 0x00	; 0
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	80 91 95 17 	lds	r24, 0x1795	; 0x801795 <ventilationSemaphore>
    3a3a:	90 91 96 17 	lds	r25, 0x1796	; 0x801796 <ventilationSemaphore+0x1>
    3a3e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
		}

		vTaskDelay(pdMS_TO_TICKS(100));
    3a42:	66 e0       	ldi	r22, 0x06	; 6
    3a44:	70 e0       	ldi	r23, 0x00	; 0
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
	}
    3a4e:	c5 cf       	rjmp	.-118    	; 0x39da <lora_downLink_task>

00003a50 <lora_downlink_handler_create>:

}


 void lora_downlink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3a50:	ef 92       	push	r14
    3a52:	ff 92       	push	r15
    3a54:	0f 93       	push	r16

 xTaskCreate(
    3a56:	e1 2c       	mov	r14, r1
    3a58:	f1 2c       	mov	r15, r1
    3a5a:	08 2f       	mov	r16, r24
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 ec       	ldi	r20, 0xC0	; 192
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	6c ee       	ldi	r22, 0xEC	; 236
    3a66:	72 e0       	ldi	r23, 0x02	; 2
    3a68:	8d ee       	ldi	r24, 0xED	; 237
    3a6a:	9c e1       	ldi	r25, 0x1C	; 28
    3a6c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <xTaskCreate>
 , NULL
 ,	tskIDLE_PRIORITY + lora_handler_task_priority  
 , NULL );
	 
	 
 }
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	08 95       	ret

00003a78 <_lora_setup>:
 #define LORA_appKEY "266F209D5D1F15A2AF87F013DC002926"

 static char _out_buf[100];

 static void _lora_setup(void)
 {
    3a78:	cf 93       	push	r28
    3a7a:	df 93       	push	r29
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <status_leds_slowBlink>

	 // Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3a82:	da d4       	rcall	.+2484   	; 0x4438 <lora_driver_rn2483FactoryReset>
    3a84:	56 d7       	rcall	.+3756   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3a86:	9f 93       	push	r25
    3a88:	8f 93       	push	r24
    3a8a:	8a ef       	ldi	r24, 0xFA	; 250
    3a8c:	92 e0       	ldi	r25, 0x02	; 2
    3a8e:	9f 93       	push	r25
    3a90:	8f 93       	push	r24
    3a92:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3a96:	4e d6       	rcall	.+3228   	; 0x4734 <lora_driver_configureToEu868>
    3a98:	4c d7       	rcall	.+3736   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3a9a:	9f 93       	push	r25
    3a9c:	8f 93       	push	r24
    3a9e:	8d e0       	ldi	r24, 0x0D	; 13
    3aa0:	93 e0       	ldi	r25, 0x03	; 3
    3aa2:	9f 93       	push	r25
    3aa4:	8f 93       	push	r24
    3aa6:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3aaa:	81 eb       	ldi	r24, 0xB1	; 177

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
    3aac:	95 e1       	ldi	r25, 0x15	; 21
    3aae:	d6 d4       	rcall	.+2476   	; 0x445c <lora_driver_getRn2483Hweui>
    3ab0:	40 d7       	rcall	.+3712   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3ab2:	c1 eb       	ldi	r28, 0xB1	; 177
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3ab4:	d5 e1       	ldi	r29, 0x15	; 21
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	9f 93       	push	r25
    3abc:	8f 93       	push	r24
    3abe:	86 e2       	ldi	r24, 0x26	; 38
    3ac0:	93 e0       	ldi	r25, 0x03	; 3
    3ac2:	9f 93       	push	r25
    3ac4:	8f 93       	push	r24
    3ac6:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3aca:	ce 01       	movw	r24, r28

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3acc:	e3 d4       	rcall	.+2502   	; 0x4494 <lora_driver_setDeviceIdentifier>
    3ace:	31 d7       	rcall	.+3682   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3ad0:	9f 93       	push	r25
    3ad2:	8f 93       	push	r24
    3ad4:	df 93       	push	r29
    3ad6:	cf 93       	push	r28
    3ad8:	8a e3       	ldi	r24, 0x3A	; 58
    3ada:	93 e0       	ldi	r25, 0x03	; 3
    3adc:	9f 93       	push	r25
    3ade:	8f 93       	push	r24
    3ae0:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3ae4:	ae 01       	movw	r20, r28

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3ae6:	6f e4       	ldi	r22, 0x4F	; 79
    3ae8:	73 e0       	ldi	r23, 0x03	; 3
    3aea:	80 e7       	ldi	r24, 0x70	; 112
    3aec:	93 e0       	ldi	r25, 0x03	; 3
    3aee:	00 d7       	rcall	.+3584   	; 0x48f0 <lora_driver_setOtaaIdentity>
    3af0:	20 d7       	rcall	.+3648   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3af2:	9f 93       	push	r25
    3af4:	8f 93       	push	r24
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	8f e4       	ldi	r24, 0x4F	; 79
    3afc:	93 e0       	ldi	r25, 0x03	; 3
    3afe:	9f 93       	push	r25
    3b00:	8f 93       	push	r24
    3b02:	80 e7       	ldi	r24, 0x70	; 112
    3b04:	93 e0       	ldi	r25, 0x03	; 3
    3b06:	9f 93       	push	r25
    3b08:	8f 93       	push	r24
    3b0a:	81 e8       	ldi	r24, 0x81	; 129
    3b0c:	93 e0       	ldi	r25, 0x03	; 3
    3b0e:	9f 93       	push	r25
    3b10:	8f 93       	push	r24
    3b12:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3b16:	f1 d4       	rcall	.+2530   	; 0x44fa <lora_driver_saveMac>

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b18:	0c d7       	rcall	.+3608   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3b1a:	9f 93       	push	r25
    3b1c:	8f 93       	push	r24
    3b1e:	87 eb       	ldi	r24, 0xB7	; 183
    3b20:	93 e0       	ldi	r25, 0x03	; 3
    3b22:	9f 93       	push	r25
    3b24:	8f 93       	push	r24
    3b26:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3b2a:	8d b7       	in	r24, 0x3d	; 61

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3b2c:	9e b7       	in	r25, 0x3e	; 62
    3b2e:	82 96       	adiw	r24, 0x22	; 34
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	f8 94       	cli
    3b34:	9e bf       	out	0x3e, r25	; 62
    3b36:	0f be       	out	0x3f, r0	; 63
    3b38:	8d bf       	out	0x3d, r24	; 61
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	d8 d5       	rcall	.+2992   	; 0x46ee <lora_driver_setAdaptiveDataRate>
    3b3e:	f9 d6       	rcall	.+3570   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3b40:	9f 93       	push	r25
    3b42:	8f 93       	push	r24
    3b44:	86 ec       	ldi	r24, 0xC6	; 198
    3b46:	93 e0       	ldi	r25, 0x03	; 3
    3b48:	9f 93       	push	r25
    3b4a:	8f 93       	push	r24
    3b4c:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3b50:	84 ef       	ldi	r24, 0xF4	; 244

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3b52:	91 e0       	ldi	r25, 0x01	; 1
    3b54:	d7 d5       	rcall	.+2990   	; 0x4704 <lora_driver_setReceiveDelay>
    3b56:	ed d6       	rcall	.+3546   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3b58:	9f 93       	push	r25
    3b5a:	8f 93       	push	r24
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	8f 93       	push	r24
    3b60:	84 ef       	ldi	r24, 0xF4	; 244
    3b62:	8f 93       	push	r24
    3b64:	87 ee       	ldi	r24, 0xE7	; 231
    3b66:	93 e0       	ldi	r25, 0x03	; 3
    3b68:	9f 93       	push	r25
    3b6a:	8f 93       	push	r24
    3b6c:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3b70:	8d b7       	in	r24, 0x3d	; 61
    3b72:	9e b7       	in	r25, 0x3e	; 62
    3b74:	0a 96       	adiw	r24, 0x0a	; 10
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	9e bf       	out	0x3e, r25	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	8d bf       	out	0x3d, r24	; 61
    3b80:	ca e0       	ldi	r28, 0x0A	; 10

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
    3b82:	80 e0       	ldi	r24, 0x00	; 0
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
    3b84:	c0 d4       	rcall	.+2432   	; 0x4506 <lora_driver_join>
    3b86:	d8 2f       	mov	r29, r24
    3b88:	d4 d6       	rcall	.+3496   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3b8a:	9f 93       	push	r25
		 
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3b8c:	8f 93       	push	r24
    3b8e:	1f 92       	push	r1
    3b90:	cf 93       	push	r28
    3b92:	87 e0       	ldi	r24, 0x07	; 7
    3b94:	94 e0       	ldi	r25, 0x04	; 4
    3b96:	9f 93       	push	r25
    3b98:	8f 93       	push	r24
    3b9a:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0

		 if ( rc != LORA_ACCEPTED)
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	d8 30       	cpi	r29, 0x08	; 8
    3bac:	59 f0       	breq	.+22     	; 0x3bc4 <_lora_setup+0x14c>
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	0e 94 de 2a 	call	0x55bc	; 0x55bc <status_leds_longPuls>
		 {
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
    3bb4:	66 e3       	ldi	r22, 0x36	; 54
    3bb6:	71 e0       	ldi	r23, 0x01	; 1
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
    3bc0:	c1 50       	subi	r28, 0x01	; 1
    3bc2:	f9 f6       	brne	.-66     	; 0x3b82 <_lora_setup+0x10a>
    3bc4:	d8 30       	cpi	r29, 0x08	; 8
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
    3bc6:	21 f4       	brne	.+8      	; 0x3bd0 <_lora_setup+0x158>
    3bc8:	81 e0       	ldi	r24, 0x01	; 1

	 if (rc == LORA_ACCEPTED)
    3bca:	0e 94 c0 2a 	call	0x5580	; 0x5580 <status_leds_ledOn>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
    3bce:	09 c0       	rjmp	.+18     	; 0x3be2 <_lora_setup+0x16a>
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	0e 94 cf 2a 	call	0x559e	; 0x559e <status_leds_ledOff>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	0e 94 9d 2a 	call	0x553a	; 0x553a <status_leds_fastBlink>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
    3bdc:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    3be0:	fd cf       	rjmp	.-6      	; 0x3bdc <_lora_setup+0x164>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
    3be2:	df 91       	pop	r29
    3be4:	cf 91       	pop	r28
    3be6:	08 95       	ret

00003be8 <lora_uplink_handler_task>:
		 }
	 }
 }
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
    3bec:	cd b7       	in	r28, 0x3d	; 61

 void lora_uplink_handler_task( void *pvParameters )
 {
    3bee:	de b7       	in	r29, 0x3e	; 62
    3bf0:	6a 97       	sbiw	r28, 0x1a	; 26
    3bf2:	0f b6       	in	r0, 0x3f	; 63
    3bf4:	f8 94       	cli
    3bf6:	de bf       	out	0x3e, r29	; 62
    3bf8:	0f be       	out	0x3f, r0	; 63
    3bfa:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	0e d4       	rcall	.+2076   	; 0x441c <lora_driver_resetRn2483>
	vTaskDelay(2);
    3c00:	62 e0       	ldi	r22, 0x02	; 2
    3c02:	70 e0       	ldi	r23, 0x00	; 0
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	06 d4       	rcall	.+2060   	; 0x441c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3c10:	66 e9       	ldi	r22, 0x96	; 150
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c1c:	b8 d3       	rcall	.+1904   	; 0x438e <lora_driver_flushBuffers>

	_lora_setup();
    3c1e:	2c df       	rcall	.-424    	; 0x3a78 <_lora_setup>
    3c20:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <xTaskGetTickCount>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3c24:	69 83       	std	Y+1, r22	; 0x01
    3c26:	7a 83       	std	Y+2, r23	; 0x02
    3c28:	8b 83       	std	Y+3, r24	; 0x03
    3c2a:	9c 83       	std	Y+4, r25	; 0x04


	sensorDataPackageHandler_setPackage_lenght(6);
    3c2c:	86 e0       	ldi	r24, 0x06	; 6
    3c2e:	84 d0       	rcall	.+264    	; 0x3d38 <sensorDataPackageHandler_setPackage_lenght>
	
	for(;;)
	{
		lora_driver_payload_t _uplink_payload = sensorDataPackageHandler_getLoRaPayload(2);
    3c30:	62 e0       	ldi	r22, 0x02	; 2
    3c32:	ce 01       	movw	r24, r28
    3c34:	05 96       	adiw	r24, 0x05	; 5
    3c36:	92 d0       	rcall	.+292    	; 0x3d5c <sensorDataPackageHandler_getLoRaPayload>
    3c38:	48 ea       	ldi	r20, 0xA8	; 168

		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c3a:	58 e4       	ldi	r21, 0x48	; 72
    3c3c:	60 e0       	ldi	r22, 0x00	; 0
    3c3e:	70 e0       	ldi	r23, 0x00	; 0
    3c40:	ce 01       	movw	r24, r28
    3c42:	01 96       	adiw	r24, 0x01	; 1
    3c44:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <xTaskDelayUntil>
    3c48:	8e 81       	ldd	r24, Y+6	; 0x06
		printf("%d payload\n",_uplink_payload.len);
    3c4a:	1f 92       	push	r1
    3c4c:	8f 93       	push	r24
    3c4e:	87 e2       	ldi	r24, 0x27	; 39
    3c50:	94 e0       	ldi	r25, 0x04	; 4
    3c52:	9f 93       	push	r25
    3c54:	8f 93       	push	r24
    3c56:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3c5a:	8e 81       	ldd	r24, Y+6	; 0x06

		if( _uplink_payload.len > 5 )
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	86 30       	cpi	r24, 0x06	; 6
    3c66:	08 f4       	brcc	.+2      	; 0x3c6a <lora_uplink_handler_task+0x82>
    3c68:	4c c0       	rjmp	.+152    	; 0x3d02 <lora_uplink_handler_task+0x11a>
    3c6a:	83 e0       	ldi	r24, 0x03	; 3
		{
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3c6c:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <status_leds_shortPuls>
    3c70:	8f 81       	ldd	r24, Y+7	; 0x07
			printf("0 -> %x\n", _uplink_payload.bytes[0]);
    3c72:	1f 92       	push	r1
    3c74:	8f 93       	push	r24
    3c76:	83 e3       	ldi	r24, 0x33	; 51
    3c78:	94 e0       	ldi	r25, 0x04	; 4
    3c7a:	9f 93       	push	r25
    3c7c:	8f 93       	push	r24
    3c7e:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3c82:	88 85       	ldd	r24, Y+8	; 0x08
			printf("1 -> %x\n", _uplink_payload.bytes[1]);
    3c84:	1f 92       	push	r1
    3c86:	8f 93       	push	r24
    3c88:	8c e3       	ldi	r24, 0x3C	; 60
    3c8a:	94 e0       	ldi	r25, 0x04	; 4
    3c8c:	9f 93       	push	r25
    3c8e:	8f 93       	push	r24
    3c90:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3c94:	89 85       	ldd	r24, Y+9	; 0x09
			printf("2 -> %x\n", _uplink_payload.bytes[2]);
    3c96:	1f 92       	push	r1
    3c98:	8f 93       	push	r24
    3c9a:	85 e4       	ldi	r24, 0x45	; 69
    3c9c:	94 e0       	ldi	r25, 0x04	; 4
    3c9e:	9f 93       	push	r25
    3ca0:	8f 93       	push	r24
    3ca2:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
			printf("3 -> %x\n", _uplink_payload.bytes[3]);
    3ca8:	1f 92       	push	r1
    3caa:	8f 93       	push	r24
    3cac:	8e e4       	ldi	r24, 0x4E	; 78
    3cae:	94 e0       	ldi	r25, 0x04	; 4
    3cb0:	9f 93       	push	r25
    3cb2:	8f 93       	push	r24
    3cb4:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3cb8:	8b 85       	ldd	r24, Y+11	; 0x0b
			printf("4 -> %x\n", _uplink_payload.bytes[4]);
    3cba:	1f 92       	push	r1
    3cbc:	8f 93       	push	r24
    3cbe:	87 e5       	ldi	r24, 0x57	; 87
    3cc0:	94 e0       	ldi	r25, 0x04	; 4
    3cc2:	9f 93       	push	r25
    3cc4:	8f 93       	push	r24
    3cc6:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3cca:	8c 85       	ldd	r24, Y+12	; 0x0c
			printf("5 -> %x\n", _uplink_payload.bytes[5]);
    3ccc:	1f 92       	push	r1
    3cce:	8f 93       	push	r24
    3cd0:	80 e6       	ldi	r24, 0x60	; 96
    3cd2:	94 e0       	ldi	r25, 0x04	; 4
    3cd4:	9f 93       	push	r25
    3cd6:	8f 93       	push	r24
    3cd8:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
			printf("Uploaded Message ------------------>%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3cdc:	be 01       	movw	r22, r28
    3cde:	6b 5f       	subi	r22, 0xFB	; 251
    3ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	39 d4       	rcall	.+2162   	; 0x4558 <lora_driver_sendUploadMessage>
    3ce6:	25 d6       	rcall	.+3146   	; 0x4932 <lora_driver_mapReturnCodeToText>
    3ce8:	9f 93       	push	r25
    3cea:	8f 93       	push	r24
    3cec:	89 e6       	ldi	r24, 0x69	; 105
    3cee:	94 e0       	ldi	r25, 0x04	; 4
    3cf0:	9f 93       	push	r25
    3cf2:	8f 93       	push	r24
    3cf4:	0e 94 73 30 	call	0x60e6	; 0x60e6 <printf>
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	64 e6       	ldi	r22, 0x64	; 100
    3d04:	70 e0       	ldi	r23, 0x00	; 0
		}
		vTaskDelay(100);
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
    3d0e:	90 cf       	rjmp	.-224    	; 0x3c30 <lora_uplink_handler_task+0x48>

00003d10 <lora_uplink_handler_create>:
    3d10:	ef 92       	push	r14
	}
    3d12:	ff 92       	push	r15
 }

 void lora_uplink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3d14:	0f 93       	push	r16
	 xTaskCreate(
    3d16:	e1 2c       	mov	r14, r1
    3d18:	f1 2c       	mov	r15, r1
    3d1a:	08 2f       	mov	r16, r24
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	40 ec       	ldi	r20, 0xC0	; 192
    3d22:	50 e0       	ldi	r21, 0x00	; 0
    3d24:	62 e9       	ldi	r22, 0x92	; 146
    3d26:	74 e0       	ldi	r23, 0x04	; 4
    3d28:	84 ef       	ldi	r24, 0xF4	; 244
    3d2a:	9d e1       	ldi	r25, 0x1D	; 29
    3d2c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <xTaskCreate>
	, tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );


	
 }
    3d30:	0f 91       	pop	r16
    3d32:	ff 90       	pop	r15
    3d34:	ef 90       	pop	r14
    3d36:	08 95       	ret

00003d38 <sensorDataPackageHandler_setPackage_lenght>:
	hum_value=value;
}

void sensorDataPackageHandler_setVentilator_servo(uint8_t ventilator_state_servo)
{
	ventilator_servo=ventilator_state_servo;
    3d38:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <package_lenght>
    3d3c:	08 95       	ret

00003d3e <sensorDataPackageHandler_setCO2_value>:
    3d3e:	90 93 91 17 	sts	0x1791, r25	; 0x801791 <co2_value+0x1>
    3d42:	80 93 90 17 	sts	0x1790, r24	; 0x801790 <co2_value>
    3d46:	08 95       	ret

00003d48 <sensorDataPackageHandler_setTemp_value>:
    3d48:	90 93 8c 17 	sts	0x178C, r25	; 0x80178c <temp_value+0x1>
    3d4c:	80 93 8b 17 	sts	0x178B, r24	; 0x80178b <temp_value>
    3d50:	08 95       	ret

00003d52 <sensorDataPackageHandler_setHumidity_value>:
    3d52:	90 93 8f 17 	sts	0x178F, r25	; 0x80178f <hum_value+0x1>
    3d56:	80 93 8e 17 	sts	0x178E, r24	; 0x80178e <hum_value>
    3d5a:	08 95       	ret

00003d5c <sensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t sensorDataPackageHandler_getLoRaPayload(uint8_t port_No)
{
    3d5c:	1f 93       	push	r17
    3d5e:	cf 93       	push	r28
    3d60:	df 93       	push	r29
    3d62:	ec 01       	movw	r28, r24
    3d64:	16 2f       	mov	r17, r22
	lora_driver_payload_t *uplink_payload;
	
	uplink_payload=pvPortMalloc(sizeof(lora_driver_payload_t));
    3d66:	86 e1       	ldi	r24, 0x16	; 22
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
    3d6e:	fc 01       	movw	r30, r24
	
	if(uplink_payload != NULL){
    3d70:	89 2b       	or	r24, r25
    3d72:	b1 f0       	breq	.+44     	; 0x3da0 <sensorDataPackageHandler_getLoRaPayload+0x44>
		uplink_payload->portNo=port_No;
    3d74:	10 83       	st	Z, r17
		uplink_payload->len=package_lenght;
    3d76:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <package_lenght>
    3d7a:	81 83       	std	Z+1, r24	; 0x01
		uplink_payload->bytes[0]=co2_value >> 8;
    3d7c:	80 91 90 17 	lds	r24, 0x1790	; 0x801790 <co2_value>
    3d80:	90 91 91 17 	lds	r25, 0x1791	; 0x801791 <co2_value+0x1>
    3d84:	92 83       	std	Z+2, r25	; 0x02
		uplink_payload->bytes[1]=co2_value & 0xFF;
    3d86:	83 83       	std	Z+3, r24	; 0x03
		uplink_payload->bytes[2]=hum_value >> 8;
    3d88:	80 91 8e 17 	lds	r24, 0x178E	; 0x80178e <hum_value>
    3d8c:	90 91 8f 17 	lds	r25, 0x178F	; 0x80178f <hum_value+0x1>
    3d90:	94 83       	std	Z+4, r25	; 0x04
		uplink_payload->bytes[3]=hum_value & 0xFF;
    3d92:	85 83       	std	Z+5, r24	; 0x05
		uplink_payload->bytes[4]=temp_value >> 8;
    3d94:	80 91 8b 17 	lds	r24, 0x178B	; 0x80178b <temp_value>
    3d98:	90 91 8c 17 	lds	r25, 0x178C	; 0x80178c <temp_value+0x1>
    3d9c:	96 83       	std	Z+6, r25	; 0x06
		uplink_payload->bytes[5]=temp_value & 0xFF;
    3d9e:	87 83       	std	Z+7, r24	; 0x07
	}
	
	return *uplink_payload;
    3da0:	86 e1       	ldi	r24, 0x16	; 22
    3da2:	de 01       	movw	r26, r28
    3da4:	01 90       	ld	r0, Z+
    3da6:	0d 92       	st	X+, r0
    3da8:	8a 95       	dec	r24
    3daa:	e1 f7       	brne	.-8      	; 0x3da4 <sensorDataPackageHandler_getLoRaPayload+0x48>
}
    3dac:	ce 01       	movw	r24, r28
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	1f 91       	pop	r17
    3db4:	08 95       	ret

00003db6 <initializeTempAndHumiditySemaphore>:
  QueueHandle_t sensorDataQueue;
  EventGroupHandle_t dataEventGroup;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
    3db6:	0f 93       	push	r16
	tempHumSemaphore = xSemaphoreCreateBinary();
    3db8:	43 e0       	ldi	r20, 0x03	; 3
    3dba:	60 e0       	ldi	r22, 0x00	; 0
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericCreate>
    3dc2:	90 93 98 17 	sts	0x1798, r25	; 0x801798 <tempHumSemaphore+0x1>
    3dc6:	80 93 97 17 	sts	0x1797, r24	; 0x801797 <tempHumSemaphore>
	xSemaphoreGive(tempHumSemaphore);
    3dca:	00 e0       	ldi	r16, 0x00	; 0
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	a9 01       	movw	r20, r18
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	70 e0       	ldi	r23, 0x00	; 0
    3dd6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
}
    3dda:	0f 91       	pop	r16
    3ddc:	08 95       	ret

00003dde <initializeVentilationSemaphore>:

void initializeVentilationSemaphore()
{
    3dde:	0f 93       	push	r16
	ventilationSemaphore = xSemaphoreCreateBinary();
    3de0:	43 e0       	ldi	r20, 0x03	; 3
    3de2:	60 e0       	ldi	r22, 0x00	; 0
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericCreate>
    3dea:	90 93 96 17 	sts	0x1796, r25	; 0x801796 <ventilationSemaphore+0x1>
    3dee:	80 93 95 17 	sts	0x1795, r24	; 0x801795 <ventilationSemaphore>
	xSemaphoreGive(ventilationSemaphore);
    3df2:	00 e0       	ldi	r16, 0x00	; 0
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	a9 01       	movw	r20, r18
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
}
    3e02:	0f 91       	pop	r16
    3e04:	08 95       	ret

00003e06 <initializeQueue>:

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    3e06:	40 e0       	ldi	r20, 0x00	; 0
    3e08:	62 e0       	ldi	r22, 0x02	; 2
    3e0a:	83 e0       	ldi	r24, 0x03	; 3
    3e0c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericCreate>
    3e10:	90 93 94 17 	sts	0x1794, r25	; 0x801794 <sensorDataQueue+0x1>
    3e14:	80 93 93 17 	sts	0x1793, r24	; 0x801793 <sensorDataQueue>
    3e18:	08 95       	ret

00003e1a <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    3e1a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <xEventGroupCreate>
    3e1e:	90 93 9c 17 	sts	0x179C, r25	; 0x80179c <dataEventGroup+0x1>
    3e22:	80 93 9b 17 	sts	0x179B, r24	; 0x80179b <dataEventGroup>
    3e26:	08 95       	ret

00003e28 <initializeDownlinkMessageBuffer>:
}


void initializeDownlinkMessageBuffer()
{
	downlinkMessageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2);
    3e28:	41 e0       	ldi	r20, 0x01	; 1
    3e2a:	60 e0       	ldi	r22, 0x00	; 0
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	8c e2       	ldi	r24, 0x2C	; 44
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0e 94 4e 0b 	call	0x169c	; 0x169c <xStreamBufferGenericCreate>
    3e36:	90 93 9a 17 	sts	0x179A, r25	; 0x80179a <downlinkMessageBuffer+0x1>
    3e3a:	80 93 99 17 	sts	0x1799, r24	; 0x801799 <downlinkMessageBuffer>
    3e3e:	08 95       	ret

00003e40 <initializeTempAndHumDriver>:
#include "TempAndHum.h"


void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    3e40:	0a d1       	rcall	.+532    	; 0x4056 <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    3e42:	81 11       	cpse	r24, r1
    3e44:	05 c0       	rjmp	.+10     	; 0x3e50 <initializeTempAndHumDriver+0x10>
	{
		printf("Temp and Hum Driver Initialized ok\n");
    3e46:	8f e9       	ldi	r24, 0x9F	; 159
    3e48:	94 e0       	ldi	r25, 0x04	; 4
    3e4a:	0c 94 86 30 	jmp	0x610c	; 0x610c <puts>
    3e4e:	08 95       	ret
	}
	
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    3e50:	82 ec       	ldi	r24, 0xC2	; 194
    3e52:	94 e0       	ldi	r25, 0x04	; 4
    3e54:	0c 94 86 30 	jmp	0x610c	; 0x610c <puts>
    3e58:	08 95       	ret

00003e5a <measureTempAndHum>:
	}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    3e5a:	15 d1       	rcall	.+554    	; 0x4086 <hih8120_wakeup>
    3e5c:	88 23       	and	r24, r24
    3e5e:	21 f0       	breq	.+8      	; 0x3e68 <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    3e60:	8c ed       	ldi	r24, 0xDC	; 220
    3e62:	94 e0       	ldi	r25, 0x04	; 4
    3e64:	0e 94 86 30 	call	0x610c	; 0x610c <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    3e68:	63 e0       	ldi	r22, 0x03	; 3
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
	
	if ( HIH8120_OK !=  hih8120_measure() )
    3e74:	1d d1       	rcall	.+570    	; 0x40b0 <hih8120_measure>
    3e76:	88 23       	and	r24, r24
    3e78:	21 f0       	breq	.+8      	; 0x3e82 <measureTempAndHum+0x28>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    3e7a:	8c ef       	ldi	r24, 0xFC	; 252
    3e7c:	94 e0       	ldi	r25, 0x04	; 4
    3e7e:	0e 94 86 30 	call	0x610c	; 0x610c <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    3e82:	61 e0       	ldi	r22, 0x01	; 1
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <vTaskDelay>
    3e8e:	08 95       	ret

00003e90 <TempAndHumTask>:
	
}

void TempAndHumTask(void* pvpParameter)
{
    3e90:	cf 93       	push	r28
    3e92:	df 93       	push	r29
    3e94:	00 d0       	rcall	.+0      	; 0x3e96 <TempAndHumTask+0x6>
    3e96:	1f 92       	push	r1
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
	
	while(1)
	{
		uint16_t Temp = 0;
    3e9c:	1c 82       	std	Y+4, r1	; 0x04
    3e9e:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t Humidity = 0;
    3ea0:	1a 82       	std	Y+2, r1	; 0x02
    3ea2:	19 82       	std	Y+1, r1	; 0x01
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    3ea4:	4f ef       	ldi	r20, 0xFF	; 255
    3ea6:	5f ef       	ldi	r21, 0xFF	; 255
    3ea8:	ba 01       	movw	r22, r20
    3eaa:	80 91 97 17 	lds	r24, 0x1797	; 0x801797 <tempHumSemaphore>
    3eae:	90 91 98 17 	lds	r25, 0x1798	; 0x801798 <tempHumSemaphore+0x1>
    3eb2:	0e 94 3e 09 	call	0x127c	; 0x127c <xQueueSemaphoreTake>
    3eb6:	81 30       	cpi	r24, 0x01	; 1
    3eb8:	51 f5       	brne	.+84     	; 0x3f0e <TempAndHumTask+0x7e>
		{
			measureTempAndHum();
    3eba:	cf df       	rcall	.-98     	; 0x3e5a <measureTempAndHum>
			Temp = hih8120_getTemperature_x10();
    3ebc:	45 d1       	rcall	.+650    	; 0x4148 <hih8120_getTemperature_x10>
    3ebe:	9c 83       	std	Y+4, r25	; 0x04
    3ec0:	8b 83       	std	Y+3, r24	; 0x03
			Humidity = hih8120_getHumidityPercent_x10();
    3ec2:	1c d1       	rcall	.+568    	; 0x40fc <hih8120_getHumidityPercent_x10>
    3ec4:	9a 83       	std	Y+2, r25	; 0x02
    3ec6:	89 83       	std	Y+1, r24	; 0x01
    3ec8:	00 e0       	ldi	r16, 0x00	; 0
			//printf("Temperature: %d\n",Temp);
			//printf("Humidity: %d\n",Humidity);
			xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
    3eca:	2f ef       	ldi	r18, 0xFF	; 255
    3ecc:	3f ef       	ldi	r19, 0xFF	; 255
    3ece:	a9 01       	movw	r20, r18
    3ed0:	be 01       	movw	r22, r28
    3ed2:	6d 5f       	subi	r22, 0xFD	; 253
    3ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed6:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <sensorDataQueue>
    3eda:	90 91 94 17 	lds	r25, 0x1794	; 0x801794 <sensorDataQueue+0x1>
    3ede:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    3ee2:	2f ef       	ldi	r18, 0xFF	; 255
			xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
    3ee4:	3f ef       	ldi	r19, 0xFF	; 255
    3ee6:	a9 01       	movw	r20, r18
    3ee8:	be 01       	movw	r22, r28
    3eea:	6f 5f       	subi	r22, 0xFF	; 255
    3eec:	7f 4f       	sbci	r23, 0xFF	; 255
    3eee:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <sensorDataQueue>
    3ef2:	90 91 94 17 	lds	r25, 0x1794	; 0x801794 <sensorDataQueue+0x1>
    3ef6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xQueueGenericSend>
    3efa:	42 e0       	ldi	r20, 0x02	; 2

			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	80 91 9b 17 	lds	r24, 0x179B	; 0x80179b <dataEventGroup>
    3f06:	90 91 9c 17 	lds	r25, 0x179C	; 0x80179c <dataEventGroup+0x1>
    3f0a:	0e 94 15 03 	call	0x62a	; 0x62a <xEventGroupSetBits>
    3f0e:	60 e0       	ldi	r22, 0x00	; 0

		}
		vTaskDelay(pdMS_TO_TICKS(10));
    3f10:	70 e0       	ldi	r23, 0x00	; 0
    3f12:	cb 01       	movw	r24, r22
    3f14:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
    3f18:	c1 cf       	rjmp	.-126    	; 0x3e9c <TempAndHumTask+0xc>

00003f1a <createTempAndHumTask>:
		
	}
    3f1a:	ef 92       	push	r14
}

void createTempAndHumTask(UBaseType_t Taskpriority)
{
    3f1c:	ff 92       	push	r15
    3f1e:	0f 93       	push	r16
    3f20:	08 2f       	mov	r16, r24
	initializeTempAndHumDriver();
    3f22:	8e df       	rcall	.-228    	; 0x3e40 <initializeTempAndHumDriver>
		xTaskCreate(
    3f24:	e1 2c       	mov	r14, r1
    3f26:	f1 2c       	mov	r15, r1
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	40 ec       	ldi	r20, 0xC0	; 192
    3f2e:	50 e0       	ldi	r21, 0x00	; 0
    3f30:	61 e2       	ldi	r22, 0x21	; 33
    3f32:	75 e0       	ldi	r23, 0x05	; 5
    3f34:	88 e4       	ldi	r24, 0x48	; 72
    3f36:	9f e1       	ldi	r25, 0x1F	; 31
    3f38:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <xTaskCreate>
		,  "TempAndHumTask"  
		,  configMINIMAL_STACK_SIZE  
		,  NULL
		,  tskIDLE_PRIORITY + Taskpriority 
		,  NULL );
}
    3f3c:	0f 91       	pop	r16
    3f3e:	ff 90       	pop	r15
    3f40:	ef 90       	pop	r14
    3f42:	08 95       	ret

00003f44 <ventilationTask>:
void ventilationTask(void* pvpParameter)
{
	for(;;)
	{
	
		if(xSemaphoreTake(ventilationSemaphore,portMAX_DELAY)==pdTRUE)
    3f44:	4f ef       	ldi	r20, 0xFF	; 255
    3f46:	5f ef       	ldi	r21, 0xFF	; 255
    3f48:	ba 01       	movw	r22, r20
    3f4a:	80 91 95 17 	lds	r24, 0x1795	; 0x801795 <ventilationSemaphore>
    3f4e:	90 91 96 17 	lds	r25, 0x1796	; 0x801796 <ventilationSemaphore+0x1>
    3f52:	0e 94 3e 09 	call	0x127c	; 0x127c <xQueueSemaphoreTake>
    3f56:	81 30       	cpi	r24, 0x01	; 1
    3f58:	49 f4       	brne	.+18     	; 0x3f6c <ventilationTask+0x28>
		{
			printf("setting the ventilation level.....\n");
    3f5a:	80 e3       	ldi	r24, 0x30	; 48
    3f5c:	95 e0       	ldi	r25, 0x05	; 5
    3f5e:	0e 94 86 30 	call	0x610c	; 0x610c <puts>
			rc_servo_setPosition(1, getVentilationLevel());
    3f62:	0e 94 26 02 	call	0x44c	; 0x44c <getVentilationLevel>
    3f66:	68 2f       	mov	r22, r24
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	18 d6       	rcall	.+3120   	; 0x4b9c <rc_servo_setPosition>
		}
		vTaskDelay(pdMS_TO_TICKS(100));
    3f6c:	66 e0       	ldi	r22, 0x06	; 6
    3f6e:	70 e0       	ldi	r23, 0x00	; 0
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	0e 94 59 12 	call	0x24b2	; 0x24b2 <vTaskDelay>
	}
    3f78:	e5 cf       	rjmp	.-54     	; 0x3f44 <ventilationTask>

00003f7a <createVentilationTask>:
}

void createVentilationTask()
{
    3f7a:	ef 92       	push	r14
    3f7c:	ff 92       	push	r15
    3f7e:	0f 93       	push	r16
	rc_servo_initialise();
    3f80:	25 d6       	rcall	.+3146   	; 0x4bcc <rc_servo_initialise>
		
	xTaskCreate(
    3f82:	e1 2c       	mov	r14, r1
    3f84:	f1 2c       	mov	r15, r1
    3f86:	03 e0       	ldi	r16, 0x03	; 3
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 ec       	ldi	r20, 0xC0	; 192
    3f8e:	50 e0       	ldi	r21, 0x00	; 0
    3f90:	63 e5       	ldi	r22, 0x53	; 83
    3f92:	75 e0       	ldi	r23, 0x05	; 5
    3f94:	82 ea       	ldi	r24, 0xA2	; 162
    3f96:	9f e1       	ldi	r25, 0x1F	; 31
    3f98:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
		
}
    3f9c:	0f 91       	pop	r16
    3f9e:	ff 90       	pop	r15
    3fa0:	ef 90       	pop	r14
    3fa2:	08 95       	ret

00003fa4 <initializeUsedData>:
#include "configuration.h"


void initializeUsedData()
{
	initializeEventGroup();
    3fa4:	3a df       	rcall	.-396    	; 0x3e1a <initializeEventGroup>
	initializeQueue();
    3fa6:	2f df       	rcall	.-418    	; 0x3e06 <initializeQueue>
	initializeTempAndHumiditySemaphore();
    3fa8:	06 df       	rcall	.-500    	; 0x3db6 <initializeTempAndHumiditySemaphore>
    3faa:	19 df       	rcall	.-462    	; 0x3dde <initializeVentilationSemaphore>
	initializeVentilationSemaphore();
    3fac:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <initializeConfiguration>
	initializeConfiguration();
    3fb0:	3b df       	rcall	.-394    	; 0x3e28 <initializeDownlinkMessageBuffer>
	initializeDownlinkMessageBuffer();
    3fb2:	60 91 99 17 	lds	r22, 0x1799	; 0x801799 <downlinkMessageBuffer>
	
	lora_driver_initialise(ser_USART1, downlinkMessageBuffer);
    3fb6:	70 91 9a 17 	lds	r23, 0x179A	; 0x80179a <downlinkMessageBuffer+0x1>
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	ef c1       	rjmp	.+990    	; 0x439c <lora_driver_initialise>
    3fbe:	08 95       	ret

00003fc0 <create_tasks>:
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	ab df       	rcall	.-170    	; 0x3f1a <createTempAndHumTask>
}
/*-----------------------------------------------------------*/
void create_tasks(void)
{		
		createTempAndHumTask(1);
		createCO2Task(1);
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    3fc6:	0e 94 df 01 	call	0x3be	; 0x3be <createCO2Task>
		createApplicationTask(2);	
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <createApplicationTask>
		
		lora_uplink_handler_create(4);
    3fd0:	84 e0       	ldi	r24, 0x04	; 4
    3fd2:	9e de       	rcall	.-708    	; 0x3d10 <lora_uplink_handler_create>
		lora_downlink_handler_create(3);
    3fd4:	83 e0       	ldi	r24, 0x03	; 3
    3fd6:	3c dd       	rcall	.-1416   	; 0x3a50 <lora_downlink_handler_create>
		createVentilationTask(3);
    3fd8:	83 e0       	ldi	r24, 0x03	; 3
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	ce cf       	rjmp	.-100    	; 0x3f7a <createVentilationTask>
    3fde:	08 95       	ret

00003fe0 <initialiseSystem>:
    3fe0:	80 e0       	ldi	r24, 0x00	; 0


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    3fe2:	0e 94 b9 29 	call	0x5372	; 0x5372 <stdio_initialise>
	initializeUsedData();
    3fe6:	de df       	rcall	.-68     	; 0x3fa4 <initializeUsedData>
	create_tasks();
    3fe8:	eb cf       	rjmp	.-42     	; 0x3fc0 <create_tasks>
    3fea:	08 95       	ret

00003fec <main>:
    3fec:	f9 df       	rcall	.-14     	; 0x3fe0 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3fee:	8f e5       	ldi	r24, 0x5F	; 95
    3ff0:	95 e0       	ldi	r25, 0x05	; 5
    3ff2:	0e 94 86 30 	call	0x610c	; 0x610c <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3ff6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <vTaskStartScheduler>
    3ffa:	ff cf       	rjmp	.-2      	; 0x3ffa <main+0xe>

00003ffc <_hihTwiCallback>:
    3ffc:	65 30       	cpi	r22, 0x05	; 5
    3ffe:	f1 f4       	brne	.+60     	; 0x403c <_hihTwiCallback+0x40>
    4000:	fa 01       	movw	r30, r20
    4002:	80 81       	ld	r24, Z
    4004:	8f 73       	andi	r24, 0x3F	; 63
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	98 2f       	mov	r25, r24
    400a:	88 27       	eor	r24, r24
    400c:	21 81       	ldd	r18, Z+1	; 0x01
    400e:	82 2b       	or	r24, r18
    4010:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4014:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	f0 e4       	ldi	r31, 0x40	; 64
    401c:	8f 9f       	mul	r24, r31
    401e:	c0 01       	movw	r24, r0
    4020:	11 24       	eor	r1, r1
    4022:	fa 01       	movw	r30, r20
    4024:	23 81       	ldd	r18, Z+3	; 0x03
    4026:	26 95       	lsr	r18
    4028:	26 95       	lsr	r18
    402a:	82 2b       	or	r24, r18
    402c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4030:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	80 93 15 16 	sts	0x1615, r24	; 0x801615 <_measuringIsReady>
    403a:	08 95       	ret
    403c:	64 30       	cpi	r22, 0x04	; 4
    403e:	51 f0       	breq	.+20     	; 0x4054 <_hihTwiCallback+0x58>
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	90 e4       	ldi	r25, 0x40	; 64
    4044:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4048:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    404c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4050:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4054:	08 95       	ret

00004056 <hih8120_initialise>:
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	0e ef       	ldi	r16, 0xFE	; 254
    405c:	1f e1       	ldi	r17, 0x1F	; 31
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	34 e2       	ldi	r19, 0x24	; 36
    4062:	44 ef       	ldi	r20, 0xF4	; 244
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	60 e0       	ldi	r22, 0x00	; 0
    4068:	87 e2       	ldi	r24, 0x27	; 39
    406a:	0e 94 13 2b 	call	0x5626	; 0x5626 <twiCreate>
    406e:	90 93 17 16 	sts	0x1617, r25	; 0x801617 <_hih8120Handler+0x1>
    4072:	80 93 16 16 	sts	0x1616, r24	; 0x801616 <_hih8120Handler>
    4076:	21 e0       	ldi	r18, 0x01	; 1
    4078:	89 2b       	or	r24, r25
    407a:	09 f0       	breq	.+2      	; 0x407e <hih8120_initialise+0x28>
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	82 2f       	mov	r24, r18
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	08 95       	ret

00004086 <hih8120_wakeup>:
    4086:	80 91 16 16 	lds	r24, 0x1616	; 0x801616 <_hih8120Handler>
    408a:	90 91 17 16 	lds	r25, 0x1617	; 0x801617 <_hih8120Handler+0x1>
    408e:	00 97       	sbiw	r24, 0x00	; 0
    4090:	59 f0       	breq	.+22     	; 0x40a8 <hih8120_wakeup+0x22>
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	60 e0       	ldi	r22, 0x00	; 0
    4096:	70 e0       	ldi	r23, 0x00	; 0
    4098:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <twiTransmit>
    409c:	84 30       	cpi	r24, 0x04	; 4
    409e:	31 f4       	brne	.+12     	; 0x40ac <hih8120_wakeup+0x26>
    40a0:	10 92 15 16 	sts	0x1615, r1	; 0x801615 <_measuringIsReady>
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	08 95       	ret
    40a8:	82 e0       	ldi	r24, 0x02	; 2
    40aa:	08 95       	ret
    40ac:	83 e0       	ldi	r24, 0x03	; 3
    40ae:	08 95       	ret

000040b0 <hih8120_measure>:
    40b0:	80 91 16 16 	lds	r24, 0x1616	; 0x801616 <_hih8120Handler>
    40b4:	90 91 17 16 	lds	r25, 0x1617	; 0x801617 <_hih8120Handler+0x1>
    40b8:	00 97       	sbiw	r24, 0x00	; 0
    40ba:	39 f0       	breq	.+14     	; 0x40ca <hih8120_measure+0x1a>
    40bc:	64 e0       	ldi	r22, 0x04	; 4
    40be:	0e 94 b0 2b 	call	0x5760	; 0x5760 <twiReceive>
    40c2:	85 30       	cpi	r24, 0x05	; 5
    40c4:	21 f0       	breq	.+8      	; 0x40ce <hih8120_measure+0x1e>
    40c6:	83 e0       	ldi	r24, 0x03	; 3
    40c8:	08 95       	ret
    40ca:	82 e0       	ldi	r24, 0x02	; 2
    40cc:	08 95       	ret
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	08 95       	ret

000040d2 <hih8120_getHumidity>:
    40d2:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    40d6:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <__floatunsisf>
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	48 ec       	ldi	r20, 0xC8	; 200
    40e8:	52 e4       	ldi	r21, 0x42	; 66
    40ea:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <__mulsf3>
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	38 ef       	ldi	r19, 0xF8	; 248
    40f2:	4f e7       	ldi	r20, 0x7F	; 127
    40f4:	56 e4       	ldi	r21, 0x46	; 70
    40f6:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__divsf3>
    40fa:	08 95       	ret

000040fc <hih8120_getHumidityPercent_x10>:
    40fc:	ea df       	rcall	.-44     	; 0x40d2 <hih8120_getHumidity>
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e2       	ldi	r20, 0x20	; 32
    4104:	51 e4       	ldi	r21, 0x41	; 65
    4106:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <__mulsf3>
    410a:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__fixunssfsi>
    410e:	cb 01       	movw	r24, r22
    4110:	08 95       	ret

00004112 <hih8120_getTemperature>:
    4112:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4116:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <__floatunsisf>
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	45 e2       	ldi	r20, 0x25	; 37
    4128:	53 e4       	ldi	r21, 0x43	; 67
    412a:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <__mulsf3>
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	38 ef       	ldi	r19, 0xF8	; 248
    4132:	4f e7       	ldi	r20, 0x7F	; 127
    4134:	56 e4       	ldi	r21, 0x46	; 70
    4136:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__divsf3>
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e2       	ldi	r20, 0x20	; 32
    4140:	52 e4       	ldi	r21, 0x42	; 66
    4142:	0c 94 bc 2c 	jmp	0x5978	; 0x5978 <__subsf3>
    4146:	08 95       	ret

00004148 <hih8120_getTemperature_x10>:
    4148:	e4 df       	rcall	.-56     	; 0x4112 <hih8120_getTemperature>
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	40 e2       	ldi	r20, 0x20	; 32
    4150:	51 e4       	ldi	r21, 0x41	; 65
    4152:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <__mulsf3>
    4156:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__fixsfsi>
    415a:	cb 01       	movw	r24, r22
    415c:	08 95       	ret

0000415e <_serialCallBack>:
    415e:	0f 93       	push	r16
    4160:	1f 93       	push	r17
    4162:	cf 93       	push	r28
    4164:	df 93       	push	r29
    4166:	1f 92       	push	r1
    4168:	1f 92       	push	r1
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	8c 01       	movw	r16, r24
    4170:	19 82       	std	Y+1, r1	; 0x01
    4172:	2d c0       	rjmp	.+90     	; 0x41ce <_serialCallBack+0x70>
    4174:	e0 91 7c 16 	lds	r30, 0x167C	; 0x80167c <rec_buf_inp.2878>
    4178:	ec 32       	cpi	r30, 0x2C	; 44
    417a:	50 f4       	brcc	.+20     	; 0x4190 <_serialCallBack+0x32>
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	8e 0f       	add	r24, r30
    4180:	80 93 7c 16 	sts	0x167C, r24	; 0x80167c <rec_buf_inp.2878>
    4184:	f0 e0       	ldi	r31, 0x00	; 0
    4186:	e2 55       	subi	r30, 0x52	; 82
    4188:	f9 4e       	sbci	r31, 0xE9	; 233
    418a:	8a 81       	ldd	r24, Y+2	; 0x02
    418c:	80 83       	st	Z, r24
    418e:	02 c0       	rjmp	.+4      	; 0x4194 <_serialCallBack+0x36>
    4190:	10 92 7c 16 	sts	0x167C, r1	; 0x80167c <rec_buf_inp.2878>
    4194:	8a 81       	ldd	r24, Y+2	; 0x02
    4196:	8a 30       	cpi	r24, 0x0A	; 10
    4198:	d1 f4       	brne	.+52     	; 0x41ce <_serialCallBack+0x70>
    419a:	40 91 7c 16 	lds	r20, 0x167C	; 0x80167c <rec_buf_inp.2878>
    419e:	50 e0       	ldi	r21, 0x00	; 0
    41a0:	fa 01       	movw	r30, r20
    41a2:	e4 55       	subi	r30, 0x54	; 84
    41a4:	f9 4e       	sbci	r31, 0xE9	; 233
    41a6:	10 82       	st	Z, r1
    41a8:	41 50       	subi	r20, 0x01	; 1
    41aa:	51 09       	sbc	r21, r1
    41ac:	9e 01       	movw	r18, r28
    41ae:	2f 5f       	subi	r18, 0xFF	; 255
    41b0:	3f 4f       	sbci	r19, 0xFF	; 255
    41b2:	6e ea       	ldi	r22, 0xAE	; 174
    41b4:	76 e1       	ldi	r23, 0x16	; 22
    41b6:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <_serialReplyBufferHandle>
    41ba:	90 91 80 16 	lds	r25, 0x1680	; 0x801680 <_serialReplyBufferHandle+0x1>
    41be:	0e 94 75 0c 	call	0x18ea	; 0x18ea <xStreamBufferSendFromISR>
    41c2:	89 81       	ldd	r24, Y+1	; 0x01
    41c4:	81 11       	cpse	r24, r1
    41c6:	0e 94 ca 05 	call	0xb94	; 0xb94 <vPortYield>
    41ca:	10 92 7c 16 	sts	0x167C, r1	; 0x80167c <rec_buf_inp.2878>
    41ce:	be 01       	movw	r22, r28
    41d0:	6e 5f       	subi	r22, 0xFE	; 254
    41d2:	7f 4f       	sbci	r23, 0xFF	; 255
    41d4:	c8 01       	movw	r24, r16
    41d6:	37 d6       	rcall	.+3182   	; 0x4e46 <serial_getByte>
    41d8:	88 23       	and	r24, r24
    41da:	61 f2       	breq	.-104    	; 0x4174 <_serialCallBack+0x16>
    41dc:	0f 90       	pop	r0
    41de:	0f 90       	pop	r0
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	1f 91       	pop	r17
    41e6:	0f 91       	pop	r16
    41e8:	08 95       	ret

000041ea <_uploadMessage>:
    41ea:	0f 93       	push	r16
    41ec:	1f 93       	push	r17
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	8c 01       	movw	r16, r24
    41f4:	eb 01       	movw	r28, r22
    41f6:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <_serialReplyBufferHandle>
    41fa:	90 91 80 16 	lds	r25, 0x1680	; 0x801680 <_serialReplyBufferHandle+0x1>
    41fe:	0e 94 80 0b 	call	0x1700	; 0x1700 <xStreamBufferReset>
    4202:	b8 01       	movw	r22, r16
    4204:	88 e1       	ldi	r24, 0x18	; 24
    4206:	96 e1       	ldi	r25, 0x16	; 22
    4208:	0e 94 54 30 	call	0x60a8	; 0x60a8 <strcpy>
    420c:	20 97       	sbiw	r28, 0x00	; 0
    420e:	79 f0       	breq	.+30     	; 0x422e <_uploadMessage+0x44>
    4210:	e8 e1       	ldi	r30, 0x18	; 24
    4212:	f6 e1       	ldi	r31, 0x16	; 22
    4214:	01 90       	ld	r0, Z+
    4216:	00 20       	and	r0, r0
    4218:	e9 f7       	brne	.-6      	; 0x4214 <_uploadMessage+0x2a>
    421a:	31 97       	sbiw	r30, 0x01	; 1
    421c:	80 e2       	ldi	r24, 0x20	; 32
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	91 83       	std	Z+1, r25	; 0x01
    4222:	80 83       	st	Z, r24
    4224:	be 01       	movw	r22, r28
    4226:	88 e1       	ldi	r24, 0x18	; 24
    4228:	96 e1       	ldi	r25, 0x16	; 22
    422a:	0e 94 49 30 	call	0x6092	; 0x6092 <strcat>
    422e:	e8 e1       	ldi	r30, 0x18	; 24
    4230:	f6 e1       	ldi	r31, 0x16	; 22
    4232:	df 01       	movw	r26, r30
    4234:	0d 90       	ld	r0, X+
    4236:	00 20       	and	r0, r0
    4238:	e9 f7       	brne	.-6      	; 0x4234 <_uploadMessage+0x4a>
    423a:	11 97       	sbiw	r26, 0x01	; 1
    423c:	8d e0       	ldi	r24, 0x0D	; 13
    423e:	9a e0       	ldi	r25, 0x0A	; 10
    4240:	11 96       	adiw	r26, 0x01	; 1
    4242:	9c 93       	st	X, r25
    4244:	8e 93       	st	-X, r24
    4246:	12 96       	adiw	r26, 0x02	; 2
    4248:	1c 92       	st	X, r1
    424a:	01 90       	ld	r0, Z+
    424c:	00 20       	and	r0, r0
    424e:	e9 f7       	brne	.-6      	; 0x424a <_uploadMessage+0x60>
    4250:	31 97       	sbiw	r30, 0x01	; 1
    4252:	e8 51       	subi	r30, 0x18	; 24
    4254:	f6 41       	sbci	r31, 0x16	; 22
    4256:	ae 2f       	mov	r26, r30
    4258:	88 e1       	ldi	r24, 0x18	; 24
    425a:	96 e1       	ldi	r25, 0x16	; 22
    425c:	ac 01       	movw	r20, r24
    425e:	6a 2f       	mov	r22, r26
    4260:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <_rn2483_serial>
    4264:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <_rn2483_serial+0x1>
    4268:	99 d5       	rcall	.+2866   	; 0x4d9c <serial_sendBytes>
    426a:	81 11       	cpse	r24, r1
    426c:	11 c0       	rjmp	.+34     	; 0x4290 <_uploadMessage+0xa6>
    426e:	08 e2       	ldi	r16, 0x28	; 40
    4270:	15 e0       	ldi	r17, 0x05	; 5
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	4d e2       	ldi	r20, 0x2D	; 45
    4278:	50 e0       	ldi	r21, 0x00	; 0
    427a:	68 e0       	ldi	r22, 0x08	; 8
    427c:	77 e1       	ldi	r23, 0x17	; 23
    427e:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <_serialReplyBufferHandle>
    4282:	90 91 80 16 	lds	r25, 0x1680	; 0x801680 <_serialReplyBufferHandle+0x1>
    4286:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferReceive>
    428a:	88 e0       	ldi	r24, 0x08	; 8
    428c:	97 e1       	ldi	r25, 0x17	; 23
    428e:	02 c0       	rjmp	.+4      	; 0x4294 <_uploadMessage+0xaa>
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	df 91       	pop	r29
    4296:	cf 91       	pop	r28
    4298:	1f 91       	pop	r17
    429a:	0f 91       	pop	r16
    429c:	08 95       	ret

0000429e <_reply2ReturnCode>:
    429e:	2f 92       	push	r2
    42a0:	3f 92       	push	r3
    42a2:	4f 92       	push	r4
    42a4:	5f 92       	push	r5
    42a6:	6f 92       	push	r6
    42a8:	7f 92       	push	r7
    42aa:	8f 92       	push	r8
    42ac:	9f 92       	push	r9
    42ae:	af 92       	push	r10
    42b0:	bf 92       	push	r11
    42b2:	cf 92       	push	r12
    42b4:	df 92       	push	r13
    42b6:	ef 92       	push	r14
    42b8:	ff 92       	push	r15
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	5c 01       	movw	r10, r24
    42c4:	fc 01       	movw	r30, r24
    42c6:	01 90       	ld	r0, Z+
    42c8:	00 20       	and	r0, r0
    42ca:	e9 f7       	brne	.-6      	; 0x42c6 <_reply2ReturnCode+0x28>
    42cc:	31 97       	sbiw	r30, 0x01	; 1
    42ce:	6f 01       	movw	r12, r30
    42d0:	c8 1a       	sub	r12, r24
    42d2:	d9 0a       	sbc	r13, r25
    42d4:	5c 2c       	mov	r5, r12
    42d6:	0f 2e       	mov	r0, r31
    42d8:	fa e0       	ldi	r31, 0x0A	; 10
    42da:	8f 2e       	mov	r8, r31
    42dc:	f8 e0       	ldi	r31, 0x08	; 8
    42de:	9f 2e       	mov	r9, r31
    42e0:	f0 2d       	mov	r31, r0
    42e2:	e1 2c       	mov	r14, r1
    42e4:	f1 2c       	mov	r15, r1
    42e6:	4c 2c       	mov	r4, r12
    42e8:	37 01       	movw	r6, r14
    42ea:	f4 01       	movw	r30, r8
    42ec:	01 81       	ldd	r16, Z+1	; 0x01
    42ee:	12 81       	ldd	r17, Z+2	; 0x02
    42f0:	e8 01       	movw	r28, r16
    42f2:	09 90       	ld	r0, Y+
    42f4:	00 20       	and	r0, r0
    42f6:	e9 f7       	brne	.-6      	; 0x42f2 <_reply2ReturnCode+0x54>
    42f8:	21 97       	sbiw	r28, 0x01	; 1
    42fa:	c0 1b       	sub	r28, r16
    42fc:	d1 0b       	sbc	r29, r17
    42fe:	3c 2e       	mov	r3, r28
    4300:	f9 e0       	ldi	r31, 0x09	; 9
    4302:	cf 16       	cp	r12, r31
    4304:	d1 04       	cpc	r13, r1
    4306:	58 f0       	brcs	.+22     	; 0x431e <_reply2ReturnCode+0x80>
    4308:	f4 01       	movw	r30, r8
    430a:	20 80       	ld	r2, Z
    430c:	fe e0       	ldi	r31, 0x0E	; 14
    430e:	2f 12       	cpse	r2, r31
    4310:	06 c0       	rjmp	.+12     	; 0x431e <_reply2ReturnCode+0x80>
    4312:	b8 01       	movw	r22, r16
    4314:	c5 01       	movw	r24, r10
    4316:	0e 94 24 30 	call	0x6048	; 0x6048 <strcasestr>
    431a:	89 2b       	or	r24, r25
    431c:	09 f5       	brne	.+66     	; 0x4360 <_reply2ReturnCode+0xc2>
    431e:	44 2d       	mov	r20, r4
    4320:	35 14       	cp	r3, r5
    4322:	08 f4       	brcc	.+2      	; 0x4326 <_reply2ReturnCode+0x88>
    4324:	4c 2f       	mov	r20, r28
    4326:	50 e0       	ldi	r21, 0x00	; 0
    4328:	b8 01       	movw	r22, r16
    432a:	c5 01       	movw	r24, r10
    432c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <strncasecmp>
    4330:	89 2b       	or	r24, r25
    4332:	49 f4       	brne	.+18     	; 0x4346 <_reply2ReturnCode+0xa8>
    4334:	f3 01       	movw	r30, r6
    4336:	ee 0f       	add	r30, r30
    4338:	ff 1f       	adc	r31, r31
    433a:	e6 0d       	add	r30, r6
    433c:	f7 1d       	adc	r31, r7
    433e:	e6 5f       	subi	r30, 0xF6	; 246
    4340:	f7 4f       	sbci	r31, 0xF7	; 247
    4342:	20 80       	ld	r2, Z
    4344:	0d c0       	rjmp	.+26     	; 0x4360 <_reply2ReturnCode+0xc2>
    4346:	8f ef       	ldi	r24, 0xFF	; 255
    4348:	e8 1a       	sub	r14, r24
    434a:	f8 0a       	sbc	r15, r24
    434c:	e3 e0       	ldi	r30, 0x03	; 3
    434e:	8e 0e       	add	r8, r30
    4350:	91 1c       	adc	r9, r1
    4352:	f1 e1       	ldi	r31, 0x11	; 17
    4354:	ef 16       	cp	r14, r31
    4356:	f1 04       	cpc	r15, r1
    4358:	39 f6       	brne	.-114    	; 0x42e8 <_reply2ReturnCode+0x4a>
    435a:	68 94       	set
    435c:	22 24       	eor	r2, r2
    435e:	24 f8       	bld	r2, 4
    4360:	82 2d       	mov	r24, r2
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	1f 91       	pop	r17
    4368:	0f 91       	pop	r16
    436a:	ff 90       	pop	r15
    436c:	ef 90       	pop	r14
    436e:	df 90       	pop	r13
    4370:	cf 90       	pop	r12
    4372:	bf 90       	pop	r11
    4374:	af 90       	pop	r10
    4376:	9f 90       	pop	r9
    4378:	8f 90       	pop	r8
    437a:	7f 90       	pop	r7
    437c:	6f 90       	pop	r6
    437e:	5f 90       	pop	r5
    4380:	4f 90       	pop	r4
    4382:	3f 90       	pop	r3
    4384:	2f 90       	pop	r2
    4386:	08 95       	ret

00004388 <_uploadMessageRc>:
    4388:	30 df       	rcall	.-416    	; 0x41ea <_uploadMessage>
    438a:	89 cf       	rjmp	.-238    	; 0x429e <_reply2ReturnCode>
    438c:	08 95       	ret

0000438e <lora_driver_flushBuffers>:
    438e:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <_serialReplyBufferHandle>
    4392:	90 91 80 16 	lds	r25, 0x1680	; 0x801680 <_serialReplyBufferHandle+0x1>
    4396:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <xStreamBufferReset>
    439a:	08 95       	ret

0000439c <lora_driver_initialise>:
    439c:	8f 92       	push	r8
    439e:	9f 92       	push	r9
    43a0:	af 92       	push	r10
    43a2:	cf 92       	push	r12
    43a4:	ef 92       	push	r14
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	c8 2f       	mov	r28, r24
    43ae:	8b 01       	movw	r16, r22
    43b0:	41 e0       	ldi	r20, 0x01	; 1
    43b2:	60 e0       	ldi	r22, 0x00	; 0
    43b4:	70 e0       	ldi	r23, 0x00	; 0
    43b6:	88 ec       	ldi	r24, 0xC8	; 200
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	0e 94 4e 0b 	call	0x169c	; 0x169c <xStreamBufferGenericCreate>
    43be:	90 93 80 16 	sts	0x1680, r25	; 0x801680 <_serialReplyBufferHandle+0x1>
    43c2:	80 93 7f 16 	sts	0x167F, r24	; 0x80167f <_serialReplyBufferHandle>
    43c6:	10 93 7e 16 	sts	0x167E, r17	; 0x80167e <_downlinkMessageBuffer+0x1>
    43ca:	00 93 7d 16 	sts	0x167D, r16	; 0x80167d <_downlinkMessageBuffer>
    43ce:	0f 2e       	mov	r0, r31
    43d0:	ff ea       	ldi	r31, 0xAF	; 175
    43d2:	8f 2e       	mov	r8, r31
    43d4:	f0 e2       	ldi	r31, 0x20	; 32
    43d6:	9f 2e       	mov	r9, r31
    43d8:	f0 2d       	mov	r31, r0
    43da:	68 94       	set
    43dc:	aa 24       	eor	r10, r10
    43de:	a6 f8       	bld	r10, 6
    43e0:	68 94       	set
    43e2:	cc 24       	eor	r12, r12
    43e4:	c6 f8       	bld	r12, 6
    43e6:	e1 2c       	mov	r14, r1
    43e8:	00 e0       	ldi	r16, 0x00	; 0
    43ea:	23 e0       	ldi	r18, 0x03	; 3
    43ec:	40 e0       	ldi	r20, 0x00	; 0
    43ee:	51 ee       	ldi	r21, 0xE1	; 225
    43f0:	60 e0       	ldi	r22, 0x00	; 0
    43f2:	70 e0       	ldi	r23, 0x00	; 0
    43f4:	8c 2f       	mov	r24, r28
    43f6:	06 d4       	rcall	.+2060   	; 0x4c04 <serial_create>
    43f8:	90 93 82 16 	sts	0x1682, r25	; 0x801682 <_rn2483_serial+0x1>
    43fc:	80 93 81 16 	sts	0x1681, r24	; 0x801681 <_rn2483_serial>
    4400:	e7 e0       	ldi	r30, 0x07	; 7
    4402:	f1 e0       	ldi	r31, 0x01	; 1
    4404:	80 81       	ld	r24, Z
    4406:	80 61       	ori	r24, 0x10	; 16
    4408:	80 83       	st	Z, r24
    440a:	cf 91       	pop	r28
    440c:	1f 91       	pop	r17
    440e:	0f 91       	pop	r16
    4410:	ef 90       	pop	r14
    4412:	cf 90       	pop	r12
    4414:	af 90       	pop	r10
    4416:	9f 90       	pop	r9
    4418:	8f 90       	pop	r8
    441a:	08 95       	ret

0000441c <lora_driver_resetRn2483>:
    441c:	88 23       	and	r24, r24
    441e:	31 f0       	breq	.+12     	; 0x442c <lora_driver_resetRn2483+0x10>
    4420:	e8 e0       	ldi	r30, 0x08	; 8
    4422:	f1 e0       	ldi	r31, 0x01	; 1
    4424:	80 81       	ld	r24, Z
    4426:	8f 7e       	andi	r24, 0xEF	; 239
    4428:	80 83       	st	Z, r24
    442a:	08 95       	ret
    442c:	e8 e0       	ldi	r30, 0x08	; 8
    442e:	f1 e0       	ldi	r31, 0x01	; 1
    4430:	80 81       	ld	r24, Z
    4432:	80 61       	ori	r24, 0x10	; 16
    4434:	80 83       	st	Z, r24
    4436:	08 95       	ret

00004438 <lora_driver_rn2483FactoryReset>:
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	70 e0       	ldi	r23, 0x00	; 0
    443c:	80 e9       	ldi	r24, 0x90	; 144
    443e:	95 e0       	ldi	r25, 0x05	; 5
    4440:	d4 de       	rcall	.-600    	; 0x41ea <_uploadMessage>
    4442:	e8 e0       	ldi	r30, 0x08	; 8
    4444:	f7 e1       	ldi	r31, 0x17	; 23
    4446:	01 90       	ld	r0, Z+
    4448:	00 20       	and	r0, r0
    444a:	e9 f7       	brne	.-6      	; 0x4446 <lora_driver_rn2483FactoryReset+0xe>
    444c:	31 97       	sbiw	r30, 0x01	; 1
    444e:	e8 50       	subi	r30, 0x08	; 8
    4450:	f7 41       	sbci	r31, 0x17	; 23
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	75 97       	sbiw	r30, 0x15	; 21
    4456:	08 f0       	brcs	.+2      	; 0x445a <lora_driver_rn2483FactoryReset+0x22>
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	08 95       	ret

0000445c <lora_driver_getRn2483Hweui>:
    445c:	cf 93       	push	r28
    445e:	df 93       	push	r29
    4460:	ec 01       	movw	r28, r24
    4462:	60 e0       	ldi	r22, 0x00	; 0
    4464:	70 e0       	ldi	r23, 0x00	; 0
    4466:	81 ea       	ldi	r24, 0xA1	; 161
    4468:	95 e0       	ldi	r25, 0x05	; 5
    446a:	bf de       	rcall	.-642    	; 0x41ea <_uploadMessage>
    446c:	e8 e0       	ldi	r30, 0x08	; 8
    446e:	f7 e1       	ldi	r31, 0x17	; 23
    4470:	01 90       	ld	r0, Z+
    4472:	00 20       	and	r0, r0
    4474:	e9 f7       	brne	.-6      	; 0x4470 <lora_driver_getRn2483Hweui+0x14>
    4476:	e9 51       	subi	r30, 0x19	; 25
    4478:	f7 41       	sbci	r31, 0x17	; 23
    447a:	39 f4       	brne	.+14     	; 0x448a <lora_driver_getRn2483Hweui+0x2e>
    447c:	68 e0       	ldi	r22, 0x08	; 8
    447e:	77 e1       	ldi	r23, 0x17	; 23
    4480:	ce 01       	movw	r24, r28
    4482:	0e 94 54 30 	call	0x60a8	; 0x60a8 <strcpy>
    4486:	80 e0       	ldi	r24, 0x00	; 0
    4488:	02 c0       	rjmp	.+4      	; 0x448e <lora_driver_getRn2483Hweui+0x32>
    448a:	18 82       	st	Y, r1
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	df 91       	pop	r29
    4490:	cf 91       	pop	r28
    4492:	08 95       	ret

00004494 <lora_driver_setDeviceIdentifier>:
    4494:	fc 01       	movw	r30, r24
    4496:	01 90       	ld	r0, Z+
    4498:	00 20       	and	r0, r0
    449a:	e9 f7       	brne	.-6      	; 0x4496 <lora_driver_setDeviceIdentifier+0x2>
    449c:	9f 01       	movw	r18, r30
    449e:	21 51       	subi	r18, 0x11	; 17
    44a0:	31 09       	sbc	r19, r1
    44a2:	28 17       	cp	r18, r24
    44a4:	39 07       	cpc	r19, r25
    44a6:	29 f4       	brne	.+10     	; 0x44b2 <lora_driver_setDeviceIdentifier+0x1e>
    44a8:	bc 01       	movw	r22, r24
    44aa:	8f ec       	ldi	r24, 0xCF	; 207
    44ac:	95 e0       	ldi	r25, 0x05	; 5
    44ae:	6c cf       	rjmp	.-296    	; 0x4388 <_uploadMessageRc>
    44b0:	08 95       	ret
    44b2:	89 e0       	ldi	r24, 0x09	; 9
    44b4:	08 95       	ret

000044b6 <lora_driver_setApplicationIdentifier>:
    44b6:	fc 01       	movw	r30, r24
    44b8:	01 90       	ld	r0, Z+
    44ba:	00 20       	and	r0, r0
    44bc:	e9 f7       	brne	.-6      	; 0x44b8 <lora_driver_setApplicationIdentifier+0x2>
    44be:	9f 01       	movw	r18, r30
    44c0:	21 51       	subi	r18, 0x11	; 17
    44c2:	31 09       	sbc	r19, r1
    44c4:	28 17       	cp	r18, r24
    44c6:	39 07       	cpc	r19, r25
    44c8:	29 f4       	brne	.+10     	; 0x44d4 <lora_driver_setApplicationIdentifier+0x1e>
    44ca:	bc 01       	movw	r22, r24
    44cc:	8e ed       	ldi	r24, 0xDE	; 222
    44ce:	95 e0       	ldi	r25, 0x05	; 5
    44d0:	5b cf       	rjmp	.-330    	; 0x4388 <_uploadMessageRc>
    44d2:	08 95       	ret
    44d4:	89 e0       	ldi	r24, 0x09	; 9
    44d6:	08 95       	ret

000044d8 <lora_driver_setApplicationKey>:
    44d8:	fc 01       	movw	r30, r24
    44da:	01 90       	ld	r0, Z+
    44dc:	00 20       	and	r0, r0
    44de:	e9 f7       	brne	.-6      	; 0x44da <lora_driver_setApplicationKey+0x2>
    44e0:	9f 01       	movw	r18, r30
    44e2:	21 52       	subi	r18, 0x21	; 33
    44e4:	31 09       	sbc	r19, r1
    44e6:	28 17       	cp	r18, r24
    44e8:	39 07       	cpc	r19, r25
    44ea:	29 f4       	brne	.+10     	; 0x44f6 <lora_driver_setApplicationKey+0x1e>
    44ec:	bc 01       	movw	r22, r24
    44ee:	8d ee       	ldi	r24, 0xED	; 237
    44f0:	95 e0       	ldi	r25, 0x05	; 5
    44f2:	4a cf       	rjmp	.-364    	; 0x4388 <_uploadMessageRc>
    44f4:	08 95       	ret
    44f6:	89 e0       	ldi	r24, 0x09	; 9
    44f8:	08 95       	ret

000044fa <lora_driver_saveMac>:
    44fa:	60 e0       	ldi	r22, 0x00	; 0
    44fc:	70 e0       	ldi	r23, 0x00	; 0
    44fe:	8c e2       	ldi	r24, 0x2C	; 44
    4500:	96 e0       	ldi	r25, 0x06	; 6
    4502:	42 cf       	rjmp	.-380    	; 0x4388 <_uploadMessageRc>
    4504:	08 95       	ret

00004506 <lora_driver_join>:
    4506:	0f 93       	push	r16
    4508:	1f 93       	push	r17
    450a:	e8 2f       	mov	r30, r24
    450c:	f0 e0       	ldi	r31, 0x00	; 0
    450e:	ee 0f       	add	r30, r30
    4510:	ff 1f       	adc	r31, r31
    4512:	ea 5f       	subi	r30, 0xFA	; 250
    4514:	f7 4f       	sbci	r31, 0xF7	; 247
    4516:	60 81       	ld	r22, Z
    4518:	71 81       	ldd	r23, Z+1	; 0x01
    451a:	85 e3       	ldi	r24, 0x35	; 53
    451c:	96 e0       	ldi	r25, 0x06	; 6
    451e:	34 df       	rcall	.-408    	; 0x4388 <_uploadMessageRc>
    4520:	81 11       	cpse	r24, r1
    4522:	14 c0       	rjmp	.+40     	; 0x454c <lora_driver_join+0x46>
    4524:	08 e2       	ldi	r16, 0x28	; 40
    4526:	15 e0       	ldi	r17, 0x05	; 5
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	4d e2       	ldi	r20, 0x2D	; 45
    452e:	50 e0       	ldi	r21, 0x00	; 0
    4530:	68 e0       	ldi	r22, 0x08	; 8
    4532:	77 e1       	ldi	r23, 0x17	; 23
    4534:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <_serialReplyBufferHandle>
    4538:	90 91 80 16 	lds	r25, 0x1680	; 0x801680 <_serialReplyBufferHandle+0x1>
    453c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferReceive>
    4540:	88 23       	and	r24, r24
    4542:	21 f0       	breq	.+8      	; 0x454c <lora_driver_join+0x46>
    4544:	88 e0       	ldi	r24, 0x08	; 8
    4546:	97 e1       	ldi	r25, 0x17	; 23
    4548:	aa de       	rcall	.-684    	; 0x429e <_reply2ReturnCode>
    454a:	03 c0       	rjmp	.+6      	; 0x4552 <lora_driver_join+0x4c>
    454c:	88 e0       	ldi	r24, 0x08	; 8
    454e:	97 e1       	ldi	r25, 0x17	; 23
    4550:	a6 de       	rcall	.-692    	; 0x429e <_reply2ReturnCode>
    4552:	1f 91       	pop	r17
    4554:	0f 91       	pop	r16
    4556:	08 95       	ret

00004558 <lora_driver_sendUploadMessage>:
    4558:	0f 93       	push	r16
    455a:	1f 93       	push	r17
    455c:	cf 93       	push	r28
    455e:	df 93       	push	r29
    4560:	1f 92       	push	r1
    4562:	cd b7       	in	r28, 0x3d	; 61
    4564:	de b7       	in	r29, 0x3e	; 62
    4566:	db 01       	movw	r26, r22
    4568:	11 96       	adiw	r26, 0x01	; 1
    456a:	9c 91       	ld	r25, X
    456c:	11 97       	sbiw	r26, 0x01	; 1
    456e:	95 31       	cpi	r25, 0x15	; 21
    4570:	08 f0       	brcs	.+2      	; 0x4574 <lora_driver_sendUploadMessage+0x1c>
    4572:	b4 c0       	rjmp	.+360    	; 0x46dc <lora_driver_sendUploadMessage+0x184>
    4574:	99 23       	and	r25, r25
    4576:	81 f1       	breq	.+96     	; 0x45d8 <lora_driver_sendUploadMessage+0x80>
    4578:	60 e0       	ldi	r22, 0x00	; 0
    457a:	70 e0       	ldi	r23, 0x00	; 0
    457c:	27 2f       	mov	r18, r23
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	46 2f       	mov	r20, r22
    4582:	50 e0       	ldi	r21, 0x00	; 0
    4584:	fd 01       	movw	r30, r26
    4586:	e4 0f       	add	r30, r20
    4588:	f5 1f       	adc	r31, r21
    458a:	92 81       	ldd	r25, Z+2	; 0x02
    458c:	92 95       	swap	r25
    458e:	9f 70       	andi	r25, 0x0F	; 15
    4590:	9a 30       	cpi	r25, 0x0A	; 10
    4592:	10 f0       	brcs	.+4      	; 0x4598 <lora_driver_sendUploadMessage+0x40>
    4594:	99 5c       	subi	r25, 0xC9	; 201
    4596:	01 c0       	rjmp	.+2      	; 0x459a <lora_driver_sendUploadMessage+0x42>
    4598:	90 5d       	subi	r25, 0xD0	; 208
    459a:	f9 01       	movw	r30, r18
    459c:	e7 56       	subi	r30, 0x67	; 103
    459e:	f9 4e       	sbci	r31, 0xE9	; 233
    45a0:	90 83       	st	Z, r25
    45a2:	2f 5f       	subi	r18, 0xFF	; 255
    45a4:	3f 4f       	sbci	r19, 0xFF	; 255
    45a6:	fd 01       	movw	r30, r26
    45a8:	e4 0f       	add	r30, r20
    45aa:	f5 1f       	adc	r31, r21
    45ac:	92 81       	ldd	r25, Z+2	; 0x02
    45ae:	9f 70       	andi	r25, 0x0F	; 15
    45b0:	49 2f       	mov	r20, r25
    45b2:	50 e0       	ldi	r21, 0x00	; 0
    45b4:	4a 30       	cpi	r20, 0x0A	; 10
    45b6:	51 05       	cpc	r21, r1
    45b8:	14 f0       	brlt	.+4      	; 0x45be <lora_driver_sendUploadMessage+0x66>
    45ba:	99 5c       	subi	r25, 0xC9	; 201
    45bc:	01 c0       	rjmp	.+2      	; 0x45c0 <lora_driver_sendUploadMessage+0x68>
    45be:	90 5d       	subi	r25, 0xD0	; 208
    45c0:	f9 01       	movw	r30, r18
    45c2:	e7 56       	subi	r30, 0x67	; 103
    45c4:	f9 4e       	sbci	r31, 0xE9	; 233
    45c6:	90 83       	st	Z, r25
    45c8:	7e 5f       	subi	r23, 0xFE	; 254
    45ca:	6f 5f       	subi	r22, 0xFF	; 255
    45cc:	11 96       	adiw	r26, 0x01	; 1
    45ce:	9c 91       	ld	r25, X
    45d0:	11 97       	sbiw	r26, 0x01	; 1
    45d2:	69 17       	cp	r22, r25
    45d4:	98 f2       	brcs	.-90     	; 0x457c <lora_driver_sendUploadMessage+0x24>
    45d6:	01 c0       	rjmp	.+2      	; 0x45da <lora_driver_sendUploadMessage+0x82>
    45d8:	70 e0       	ldi	r23, 0x00	; 0
    45da:	e7 2f       	mov	r30, r23
    45dc:	f0 e0       	ldi	r31, 0x00	; 0
    45de:	e7 56       	subi	r30, 0x67	; 103
    45e0:	f9 4e       	sbci	r31, 0xE9	; 233
    45e2:	10 82       	st	Z, r1
    45e4:	4c 91       	ld	r20, X
    45e6:	81 11       	cpse	r24, r1
    45e8:	03 c0       	rjmp	.+6      	; 0x45f0 <lora_driver_sendUploadMessage+0x98>
    45ea:	8e e3       	ldi	r24, 0x3E	; 62
    45ec:	96 e0       	ldi	r25, 0x06	; 6
    45ee:	02 c0       	rjmp	.+4      	; 0x45f4 <lora_driver_sendUploadMessage+0x9c>
    45f0:	80 e4       	ldi	r24, 0x40	; 64
    45f2:	96 e0       	ldi	r25, 0x06	; 6
    45f4:	29 e9       	ldi	r18, 0x99	; 153
    45f6:	36 e1       	ldi	r19, 0x16	; 22
    45f8:	3f 93       	push	r19
    45fa:	2f 93       	push	r18
    45fc:	1f 92       	push	r1
    45fe:	4f 93       	push	r20
    4600:	9f 93       	push	r25
    4602:	8f 93       	push	r24
    4604:	84 e4       	ldi	r24, 0x44	; 68
    4606:	96 e0       	ldi	r25, 0x06	; 6
    4608:	9f 93       	push	r25
    460a:	8f 93       	push	r24
    460c:	8b ed       	ldi	r24, 0xDB	; 219
    460e:	96 e1       	ldi	r25, 0x16	; 22
    4610:	9f 93       	push	r25
    4612:	8f 93       	push	r24
    4614:	0e 94 b6 30 	call	0x616c	; 0x616c <sprintf>
    4618:	60 e0       	ldi	r22, 0x00	; 0
    461a:	70 e0       	ldi	r23, 0x00	; 0
    461c:	8b ed       	ldi	r24, 0xDB	; 219
    461e:	96 e1       	ldi	r25, 0x16	; 22
    4620:	b3 de       	rcall	.-666    	; 0x4388 <_uploadMessageRc>
    4622:	0f b6       	in	r0, 0x3f	; 63
    4624:	f8 94       	cli
    4626:	de bf       	out	0x3e, r29	; 62
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	cd bf       	out	0x3d, r28	; 61
    462c:	81 11       	cpse	r24, r1
    462e:	59 c0       	rjmp	.+178    	; 0x46e2 <lora_driver_sendUploadMessage+0x18a>
    4630:	08 e2       	ldi	r16, 0x28	; 40
    4632:	15 e0       	ldi	r17, 0x05	; 5
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	4d e2       	ldi	r20, 0x2D	; 45
    463a:	50 e0       	ldi	r21, 0x00	; 0
    463c:	68 e0       	ldi	r22, 0x08	; 8
    463e:	77 e1       	ldi	r23, 0x17	; 23
    4640:	80 91 7f 16 	lds	r24, 0x167F	; 0x80167f <_serialReplyBufferHandle>
    4644:	90 91 80 16 	lds	r25, 0x1680	; 0x801680 <_serialReplyBufferHandle+0x1>
    4648:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferReceive>
    464c:	88 23       	and	r24, r24
    464e:	09 f4       	brne	.+2      	; 0x4652 <lora_driver_sendUploadMessage+0xfa>
    4650:	47 c0       	rjmp	.+142    	; 0x46e0 <lora_driver_sendUploadMessage+0x188>
    4652:	88 e0       	ldi	r24, 0x08	; 8
    4654:	97 e1       	ldi	r25, 0x17	; 23
    4656:	23 de       	rcall	.-954    	; 0x429e <_reply2ReturnCode>
    4658:	8e 30       	cpi	r24, 0x0E	; 14
    465a:	09 f0       	breq	.+2      	; 0x465e <lora_driver_sendUploadMessage+0x106>
    465c:	42 c0       	rjmp	.+132    	; 0x46e2 <lora_driver_sendUploadMessage+0x18a>
    465e:	87 e0       	ldi	r24, 0x07	; 7
    4660:	89 83       	std	Y+1, r24	; 0x01
    4662:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <_downlinkMessageBuffer>
    4666:	90 91 7e 16 	lds	r25, 0x167E	; 0x80167e <_downlinkMessageBuffer+0x1>
    466a:	89 2b       	or	r24, r25
    466c:	a9 f1       	breq	.+106    	; 0x46d8 <lora_driver_sendUploadMessage+0x180>
    466e:	be 01       	movw	r22, r28
    4670:	6f 5f       	subi	r22, 0xFF	; 255
    4672:	7f 4f       	sbci	r23, 0xFF	; 255
    4674:	88 e0       	ldi	r24, 0x08	; 8
    4676:	97 e1       	ldi	r25, 0x17	; 23
    4678:	68 d1       	rcall	.+720    	; 0x494a <decode_port_no>
    467a:	80 93 83 16 	sts	0x1683, r24	; 0x801683 <_downlinkPayload>
    467e:	e9 81       	ldd	r30, Y+1	; 0x01
    4680:	f0 e0       	ldi	r31, 0x00	; 0
    4682:	e8 5f       	subi	r30, 0xF8	; 248
    4684:	f8 4e       	sbci	r31, 0xE8	; 232
    4686:	df 01       	movw	r26, r30
    4688:	0d 90       	ld	r0, X+
    468a:	00 20       	and	r0, r0
    468c:	e9 f7       	brne	.-6      	; 0x4688 <lora_driver_sendUploadMessage+0x130>
    468e:	11 97       	sbiw	r26, 0x01	; 1
    4690:	ae 1b       	sub	r26, r30
    4692:	bf 0b       	sbc	r27, r31
    4694:	aa 23       	and	r26, r26
    4696:	91 f0       	breq	.+36     	; 0x46bc <lora_driver_sendUploadMessage+0x164>
    4698:	bb 27       	eor	r27, r27
    469a:	cd 01       	movw	r24, r26
    469c:	01 97       	sbiw	r24, 0x01	; 1
    469e:	9c 01       	movw	r18, r24
    46a0:	12 f4       	brpl	.+4      	; 0x46a6 <lora_driver_sendUploadMessage+0x14e>
    46a2:	2f 5f       	subi	r18, 0xFF	; 255
    46a4:	3f 4f       	sbci	r19, 0xFF	; 255
    46a6:	35 95       	asr	r19
    46a8:	27 95       	ror	r18
    46aa:	20 93 84 16 	sts	0x1684, r18	; 0x801684 <_downlinkPayload+0x1>
    46ae:	af 01       	movw	r20, r30
    46b0:	4f 5f       	subi	r20, 0xFF	; 255
    46b2:	5f 4f       	sbci	r21, 0xFF	; 255
    46b4:	64 e1       	ldi	r22, 0x14	; 20
    46b6:	85 e8       	ldi	r24, 0x85	; 133
    46b8:	96 e1       	ldi	r25, 0x16	; 22
    46ba:	73 d1       	rcall	.+742    	; 0x49a2 <decode_hexadecimal_string_bytes>
    46bc:	01 e0       	ldi	r16, 0x01	; 1
    46be:	10 e0       	ldi	r17, 0x00	; 0
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	46 e1       	ldi	r20, 0x16	; 22
    46c6:	50 e0       	ldi	r21, 0x00	; 0
    46c8:	63 e8       	ldi	r22, 0x83	; 131
    46ca:	76 e1       	ldi	r23, 0x16	; 22
    46cc:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <_downlinkMessageBuffer>
    46d0:	90 91 7e 16 	lds	r25, 0x167E	; 0x80167e <_downlinkMessageBuffer+0x1>
    46d4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <xStreamBufferSend>
    46d8:	8e e0       	ldi	r24, 0x0E	; 14
    46da:	03 c0       	rjmp	.+6      	; 0x46e2 <lora_driver_sendUploadMessage+0x18a>
    46dc:	84 e1       	ldi	r24, 0x14	; 20
    46de:	01 c0       	rjmp	.+2      	; 0x46e2 <lora_driver_sendUploadMessage+0x18a>
    46e0:	80 e0       	ldi	r24, 0x00	; 0
    46e2:	0f 90       	pop	r0
    46e4:	df 91       	pop	r29
    46e6:	cf 91       	pop	r28
    46e8:	1f 91       	pop	r17
    46ea:	0f 91       	pop	r16
    46ec:	08 95       	ret

000046ee <lora_driver_setAdaptiveDataRate>:
    46ee:	81 30       	cpi	r24, 0x01	; 1
    46f0:	19 f0       	breq	.+6      	; 0x46f8 <lora_driver_setAdaptiveDataRate+0xa>
    46f2:	64 e5       	ldi	r22, 0x54	; 84
    46f4:	76 e0       	ldi	r23, 0x06	; 6
    46f6:	02 c0       	rjmp	.+4      	; 0x46fc <lora_driver_setAdaptiveDataRate+0xe>
    46f8:	6d e2       	ldi	r22, 0x2D	; 45
    46fa:	77 e0       	ldi	r23, 0x07	; 7
    46fc:	88 e5       	ldi	r24, 0x58	; 88
    46fe:	96 e0       	ldi	r25, 0x06	; 6
    4700:	43 ce       	rjmp	.-890    	; 0x4388 <_uploadMessageRc>
    4702:	08 95       	ret

00004704 <lora_driver_setReceiveDelay>:
    4704:	9f 93       	push	r25
    4706:	8f 93       	push	r24
    4708:	89 e8       	ldi	r24, 0x89	; 137
    470a:	96 e0       	ldi	r25, 0x06	; 6
    470c:	9f 93       	push	r25
    470e:	8f 93       	push	r24
    4710:	8b ed       	ldi	r24, 0xDB	; 219
    4712:	96 e1       	ldi	r25, 0x16	; 22
    4714:	9f 93       	push	r25
    4716:	8f 93       	push	r24
    4718:	0e 94 b6 30 	call	0x616c	; 0x616c <sprintf>
    471c:	60 e0       	ldi	r22, 0x00	; 0
    471e:	70 e0       	ldi	r23, 0x00	; 0
    4720:	8b ed       	ldi	r24, 0xDB	; 219
    4722:	96 e1       	ldi	r25, 0x16	; 22
    4724:	31 de       	rcall	.-926    	; 0x4388 <_uploadMessageRc>
    4726:	0f 90       	pop	r0
    4728:	0f 90       	pop	r0
    472a:	0f 90       	pop	r0
    472c:	0f 90       	pop	r0
    472e:	0f 90       	pop	r0
    4730:	0f 90       	pop	r0
    4732:	08 95       	ret

00004734 <lora_driver_configureToEu868>:
    4734:	2f 92       	push	r2
    4736:	3f 92       	push	r3
    4738:	4f 92       	push	r4
    473a:	5f 92       	push	r5
    473c:	6f 92       	push	r6
    473e:	7f 92       	push	r7
    4740:	8f 92       	push	r8
    4742:	9f 92       	push	r9
    4744:	af 92       	push	r10
    4746:	bf 92       	push	r11
    4748:	cf 92       	push	r12
    474a:	df 92       	push	r13
    474c:	ef 92       	push	r14
    474e:	ff 92       	push	r15
    4750:	0f 93       	push	r16
    4752:	1f 93       	push	r17
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    475c:	a0 97       	sbiw	r28, 0x20	; 32
    475e:	0f b6       	in	r0, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	de bf       	out	0x3e, r29	; 62
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	66 eb       	ldi	r22, 0xB6	; 182
    476a:	76 e0       	ldi	r23, 0x06	; 6
    476c:	82 ec       	ldi	r24, 0xC2	; 194
    476e:	96 e0       	ldi	r25, 0x06	; 6
    4770:	3c dd       	rcall	.-1416   	; 0x41ea <_uploadMessage>
    4772:	95 dd       	rcall	.-1238   	; 0x429e <_reply2ReturnCode>
    4774:	81 11       	cpse	r24, r1
    4776:	a3 c0       	rjmp	.+326    	; 0x48be <lora_driver_configureToEu868+0x18a>
    4778:	80 e2       	ldi	r24, 0x20	; 32
    477a:	e2 e2       	ldi	r30, 0x22	; 34
    477c:	f2 e0       	ldi	r31, 0x02	; 2
    477e:	de 01       	movw	r26, r28
    4780:	11 96       	adiw	r26, 0x01	; 1
    4782:	01 90       	ld	r0, Z+
    4784:	0d 92       	st	X+, r0
    4786:	8a 95       	dec	r24
    4788:	e1 f7       	brne	.-8      	; 0x4782 <lora_driver_configureToEu868+0x4e>
    478a:	9e 01       	movw	r18, r28
    478c:	2f 5f       	subi	r18, 0xFF	; 255
    478e:	3f 4f       	sbci	r19, 0xFF	; 255
    4790:	69 01       	movw	r12, r18
    4792:	e1 2c       	mov	r14, r1
    4794:	f1 2c       	mov	r15, r1
    4796:	0f 2e       	mov	r0, r31
    4798:	fe ec       	ldi	r31, 0xCE	; 206
    479a:	af 2e       	mov	r10, r31
    479c:	f6 e0       	ldi	r31, 0x06	; 6
    479e:	bf 2e       	mov	r11, r31
    47a0:	f0 2d       	mov	r31, r0
    47a2:	0b ed       	ldi	r16, 0xDB	; 219
    47a4:	16 e1       	ldi	r17, 0x16	; 22
    47a6:	0f 2e       	mov	r0, r31
    47a8:	f7 ee       	ldi	r31, 0xE7	; 231
    47aa:	4f 2e       	mov	r4, r31
    47ac:	f6 e0       	ldi	r31, 0x06	; 6
    47ae:	5f 2e       	mov	r5, r31
    47b0:	f0 2d       	mov	r31, r0
    47b2:	0f 2e       	mov	r0, r31
    47b4:	fe ef       	ldi	r31, 0xFE	; 254
    47b6:	8f 2e       	mov	r8, r31
    47b8:	f6 e0       	ldi	r31, 0x06	; 6
    47ba:	9f 2e       	mov	r9, r31
    47bc:	f0 2d       	mov	r31, r0
    47be:	0f 2e       	mov	r0, r31
    47c0:	f8 e1       	ldi	r31, 0x18	; 24
    47c2:	6f 2e       	mov	r6, r31
    47c4:	f7 e0       	ldi	r31, 0x07	; 7
    47c6:	7f 2e       	mov	r7, r31
    47c8:	f0 2d       	mov	r31, r0
    47ca:	3e 2c       	mov	r3, r14
    47cc:	2f 2c       	mov	r2, r15
    47ce:	ff 92       	push	r15
    47d0:	ef 92       	push	r14
    47d2:	bf 92       	push	r11
    47d4:	af 92       	push	r10
    47d6:	1f 93       	push	r17
    47d8:	0f 93       	push	r16
    47da:	0e 94 b6 30 	call	0x616c	; 0x616c <sprintf>
    47de:	60 e0       	ldi	r22, 0x00	; 0
    47e0:	70 e0       	ldi	r23, 0x00	; 0
    47e2:	c8 01       	movw	r24, r16
    47e4:	02 dd       	rcall	.-1532   	; 0x41ea <_uploadMessage>
    47e6:	5b dd       	rcall	.-1354   	; 0x429e <_reply2ReturnCode>
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	0f 90       	pop	r0
    47f4:	81 11       	cpse	r24, r1
    47f6:	63 c0       	rjmp	.+198    	; 0x48be <lora_driver_configureToEu868+0x18a>
    47f8:	32 e0       	ldi	r19, 0x02	; 2
    47fa:	3e 15       	cp	r19, r14
    47fc:	e8 f4       	brcc	.+58     	; 0x4838 <lora_driver_configureToEu868+0x104>
    47fe:	f6 01       	movw	r30, r12
    4800:	83 81       	ldd	r24, Z+3	; 0x03
    4802:	8f 93       	push	r24
    4804:	82 81       	ldd	r24, Z+2	; 0x02
    4806:	8f 93       	push	r24
    4808:	81 81       	ldd	r24, Z+1	; 0x01
    480a:	8f 93       	push	r24
    480c:	80 81       	ld	r24, Z
    480e:	8f 93       	push	r24
    4810:	ff 92       	push	r15
    4812:	ef 92       	push	r14
    4814:	5f 92       	push	r5
    4816:	4f 92       	push	r4
    4818:	1f 93       	push	r17
    481a:	0f 93       	push	r16
    481c:	0e 94 b6 30 	call	0x616c	; 0x616c <sprintf>
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	70 e0       	ldi	r23, 0x00	; 0
    4824:	c8 01       	movw	r24, r16
    4826:	e1 dc       	rcall	.-1598   	; 0x41ea <_uploadMessage>
    4828:	3a dd       	rcall	.-1420   	; 0x429e <_reply2ReturnCode>
    482a:	0f b6       	in	r0, 0x3f	; 63
    482c:	f8 94       	cli
    482e:	de bf       	out	0x3e, r29	; 62
    4830:	0f be       	out	0x3f, r0	; 63
    4832:	cd bf       	out	0x3d, r28	; 61
    4834:	81 11       	cpse	r24, r1
    4836:	43 c0       	rjmp	.+134    	; 0x48be <lora_driver_configureToEu868+0x18a>
    4838:	2f 92       	push	r2
    483a:	3f 92       	push	r3
    483c:	9f 92       	push	r9
    483e:	8f 92       	push	r8
    4840:	1f 93       	push	r17
    4842:	0f 93       	push	r16
    4844:	0e 94 b6 30 	call	0x616c	; 0x616c <sprintf>
    4848:	60 e0       	ldi	r22, 0x00	; 0
    484a:	70 e0       	ldi	r23, 0x00	; 0
    484c:	c8 01       	movw	r24, r16
    484e:	cd dc       	rcall	.-1638   	; 0x41ea <_uploadMessage>
    4850:	26 dd       	rcall	.-1460   	; 0x429e <_reply2ReturnCode>
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	81 11       	cpse	r24, r1
    4860:	2e c0       	rjmp	.+92     	; 0x48be <lora_driver_configureToEu868+0x18a>
    4862:	2f 92       	push	r2
    4864:	3f 92       	push	r3
    4866:	7f 92       	push	r7
    4868:	6f 92       	push	r6
    486a:	1f 93       	push	r17
    486c:	0f 93       	push	r16
    486e:	0e 94 b6 30 	call	0x616c	; 0x616c <sprintf>
    4872:	60 e0       	ldi	r22, 0x00	; 0
    4874:	70 e0       	ldi	r23, 0x00	; 0
    4876:	c8 01       	movw	r24, r16
    4878:	b8 dc       	rcall	.-1680   	; 0x41ea <_uploadMessage>
    487a:	11 dd       	rcall	.-1502   	; 0x429e <_reply2ReturnCode>
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	81 11       	cpse	r24, r1
    488a:	19 c0       	rjmp	.+50     	; 0x48be <lora_driver_configureToEu868+0x18a>
    488c:	3f ef       	ldi	r19, 0xFF	; 255
    488e:	e3 1a       	sub	r14, r19
    4890:	f3 0a       	sbc	r15, r19
    4892:	84 e0       	ldi	r24, 0x04	; 4
    4894:	c8 0e       	add	r12, r24
    4896:	d1 1c       	adc	r13, r1
    4898:	98 e0       	ldi	r25, 0x08	; 8
    489a:	e9 16       	cp	r14, r25
    489c:	f1 04       	cpc	r15, r1
    489e:	09 f0       	breq	.+2      	; 0x48a2 <lora_driver_configureToEu868+0x16e>
    48a0:	94 cf       	rjmp	.-216    	; 0x47ca <lora_driver_configureToEu868+0x96>
    48a2:	60 e0       	ldi	r22, 0x00	; 0
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	80 e3       	ldi	r24, 0x30	; 48
    48a8:	97 e0       	ldi	r25, 0x07	; 7
    48aa:	9f dc       	rcall	.-1730   	; 0x41ea <_uploadMessage>
    48ac:	f8 dc       	rcall	.-1552   	; 0x429e <_reply2ReturnCode>
    48ae:	81 11       	cpse	r24, r1
    48b0:	06 c0       	rjmp	.+12     	; 0x48be <lora_driver_configureToEu868+0x18a>
    48b2:	60 e0       	ldi	r22, 0x00	; 0
    48b4:	70 e0       	ldi	r23, 0x00	; 0
    48b6:	81 e4       	ldi	r24, 0x41	; 65
    48b8:	97 e0       	ldi	r25, 0x07	; 7
    48ba:	97 dc       	rcall	.-1746   	; 0x41ea <_uploadMessage>
    48bc:	f0 dc       	rcall	.-1568   	; 0x429e <_reply2ReturnCode>
    48be:	a0 96       	adiw	r28, 0x20	; 32
    48c0:	0f b6       	in	r0, 0x3f	; 63
    48c2:	f8 94       	cli
    48c4:	de bf       	out	0x3e, r29	; 62
    48c6:	0f be       	out	0x3f, r0	; 63
    48c8:	cd bf       	out	0x3d, r28	; 61
    48ca:	df 91       	pop	r29
    48cc:	cf 91       	pop	r28
    48ce:	1f 91       	pop	r17
    48d0:	0f 91       	pop	r16
    48d2:	ff 90       	pop	r15
    48d4:	ef 90       	pop	r14
    48d6:	df 90       	pop	r13
    48d8:	cf 90       	pop	r12
    48da:	bf 90       	pop	r11
    48dc:	af 90       	pop	r10
    48de:	9f 90       	pop	r9
    48e0:	8f 90       	pop	r8
    48e2:	7f 90       	pop	r7
    48e4:	6f 90       	pop	r6
    48e6:	5f 90       	pop	r5
    48e8:	4f 90       	pop	r4
    48ea:	3f 90       	pop	r3
    48ec:	2f 90       	pop	r2
    48ee:	08 95       	ret

000048f0 <lora_driver_setOtaaIdentity>:
    48f0:	ef 92       	push	r14
    48f2:	ff 92       	push	r15
    48f4:	0f 93       	push	r16
    48f6:	1f 93       	push	r17
    48f8:	cf 93       	push	r28
    48fa:	df 93       	push	r29
    48fc:	ec 01       	movw	r28, r24
    48fe:	8b 01       	movw	r16, r22
    4900:	7a 01       	movw	r14, r20
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	f4 de       	rcall	.-536    	; 0x46ee <lora_driver_setAdaptiveDataRate>
    4906:	81 11       	cpse	r24, r1
    4908:	0d c0       	rjmp	.+26     	; 0x4924 <lora_driver_setOtaaIdentity+0x34>
    490a:	ce 01       	movw	r24, r28
    490c:	d4 dd       	rcall	.-1112   	; 0x44b6 <lora_driver_setApplicationIdentifier>
    490e:	81 11       	cpse	r24, r1
    4910:	09 c0       	rjmp	.+18     	; 0x4924 <lora_driver_setOtaaIdentity+0x34>
    4912:	c8 01       	movw	r24, r16
    4914:	e1 dd       	rcall	.-1086   	; 0x44d8 <lora_driver_setApplicationKey>
    4916:	81 11       	cpse	r24, r1
    4918:	05 c0       	rjmp	.+10     	; 0x4924 <lora_driver_setOtaaIdentity+0x34>
    491a:	c7 01       	movw	r24, r14
    491c:	bb dd       	rcall	.-1162   	; 0x4494 <lora_driver_setDeviceIdentifier>
    491e:	81 11       	cpse	r24, r1
    4920:	01 c0       	rjmp	.+2      	; 0x4924 <lora_driver_setOtaaIdentity+0x34>
    4922:	eb dd       	rcall	.-1066   	; 0x44fa <lora_driver_saveMac>
    4924:	df 91       	pop	r29
    4926:	cf 91       	pop	r28
    4928:	1f 91       	pop	r17
    492a:	0f 91       	pop	r16
    492c:	ff 90       	pop	r15
    492e:	ef 90       	pop	r14
    4930:	08 95       	ret

00004932 <lora_driver_mapReturnCodeToText>:
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	fc 01       	movw	r30, r24
    4936:	ee 0f       	add	r30, r30
    4938:	ff 1f       	adc	r31, r31
    493a:	8e 0f       	add	r24, r30
    493c:	9f 1f       	adc	r25, r31
    493e:	fc 01       	movw	r30, r24
    4940:	e6 5f       	subi	r30, 0xF6	; 246
    4942:	f7 4f       	sbci	r31, 0xF7	; 247
    4944:	81 81       	ldd	r24, Z+1	; 0x01
    4946:	92 81       	ldd	r25, Z+2	; 0x02
    4948:	08 95       	ret

0000494a <decode_port_no>:
    494a:	dc 01       	movw	r26, r24
    494c:	00 97       	sbiw	r24, 0x00	; 0
    494e:	29 f1       	breq	.+74     	; 0x499a <decode_port_no+0x50>
    4950:	fb 01       	movw	r30, r22
    4952:	20 81       	ld	r18, Z
    4954:	fc 01       	movw	r30, r24
    4956:	01 90       	ld	r0, Z+
    4958:	00 20       	and	r0, r0
    495a:	e9 f7       	brne	.-6      	; 0x4956 <decode_port_no+0xc>
    495c:	31 97       	sbiw	r30, 0x01	; 1
    495e:	e8 1b       	sub	r30, r24
    4960:	f9 0b       	sbc	r31, r25
    4962:	82 2f       	mov	r24, r18
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	e8 17       	cp	r30, r24
    4968:	f9 07       	cpc	r31, r25
    496a:	c8 f0       	brcs	.+50     	; 0x499e <decode_port_no+0x54>
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	08 c0       	rjmp	.+16     	; 0x4980 <decode_port_no+0x36>
    4970:	88 0f       	add	r24, r24
    4972:	38 2f       	mov	r19, r24
    4974:	33 0f       	add	r19, r19
    4976:	33 0f       	add	r19, r19
    4978:	83 0f       	add	r24, r19
    497a:	80 53       	subi	r24, 0x30	; 48
    497c:	89 0f       	add	r24, r25
    497e:	2f 5f       	subi	r18, 0xFF	; 255
    4980:	fd 01       	movw	r30, r26
    4982:	e2 0f       	add	r30, r18
    4984:	f1 1d       	adc	r31, r1
    4986:	90 81       	ld	r25, Z
    4988:	30 ed       	ldi	r19, 0xD0	; 208
    498a:	39 0f       	add	r19, r25
    498c:	3a 30       	cpi	r19, 0x0A	; 10
    498e:	10 f4       	brcc	.+4      	; 0x4994 <decode_port_no+0x4a>
    4990:	91 11       	cpse	r25, r1
    4992:	ee cf       	rjmp	.-36     	; 0x4970 <decode_port_no+0x26>
    4994:	fb 01       	movw	r30, r22
    4996:	20 83       	st	Z, r18
    4998:	08 95       	ret
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	08 95       	ret
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	08 95       	ret

000049a2 <decode_hexadecimal_string_bytes>:
    49a2:	0f 93       	push	r16
    49a4:	1f 93       	push	r17
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	dc 01       	movw	r26, r24
    49ac:	ea 01       	movw	r28, r20
    49ae:	20 97       	sbiw	r28, 0x00	; 0
    49b0:	e1 f1       	breq	.+120    	; 0x4a2a <decode_hexadecimal_string_bytes+0x88>
    49b2:	fa 01       	movw	r30, r20
    49b4:	01 90       	ld	r0, Z+
    49b6:	00 20       	and	r0, r0
    49b8:	e9 f7       	brne	.-6      	; 0x49b4 <decode_hexadecimal_string_bytes+0x12>
    49ba:	31 97       	sbiw	r30, 0x01	; 1
    49bc:	e4 1b       	sub	r30, r20
    49be:	f5 0b       	sbc	r31, r21
    49c0:	32 97       	sbiw	r30, 0x02	; 2
    49c2:	10 f5       	brcc	.+68     	; 0x4a08 <decode_hexadecimal_string_bytes+0x66>
    49c4:	32 c0       	rjmp	.+100    	; 0x4a2a <decode_hexadecimal_string_bytes+0x88>
    49c6:	8d 01       	movw	r16, r26
    49c8:	04 0f       	add	r16, r20
    49ca:	15 1f       	adc	r17, r21
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	ae 01       	movw	r20, r28
    49d0:	42 0f       	add	r20, r18
    49d2:	53 1f       	adc	r21, r19
    49d4:	fa 01       	movw	r30, r20
    49d6:	90 81       	ld	r25, Z
    49d8:	91 34       	cpi	r25, 0x41	; 65
    49da:	28 f0       	brcs	.+10     	; 0x49e6 <decode_hexadecimal_string_bytes+0x44>
    49dc:	97 53       	subi	r25, 0x37	; 55
    49de:	59 2f       	mov	r21, r25
    49e0:	52 95       	swap	r21
    49e2:	50 7f       	andi	r21, 0xF0	; 240
    49e4:	03 c0       	rjmp	.+6      	; 0x49ec <decode_hexadecimal_string_bytes+0x4a>
    49e6:	59 2f       	mov	r21, r25
    49e8:	52 95       	swap	r21
    49ea:	50 7f       	andi	r21, 0xF0	; 240
    49ec:	2c 0f       	add	r18, r28
    49ee:	3d 1f       	adc	r19, r29
    49f0:	f9 01       	movw	r30, r18
    49f2:	91 81       	ldd	r25, Z+1	; 0x01
    49f4:	91 34       	cpi	r25, 0x41	; 65
    49f6:	10 f0       	brcs	.+4      	; 0x49fc <decode_hexadecimal_string_bytes+0x5a>
    49f8:	97 53       	subi	r25, 0x37	; 55
    49fa:	01 c0       	rjmp	.+2      	; 0x49fe <decode_hexadecimal_string_bytes+0x5c>
    49fc:	90 53       	subi	r25, 0x30	; 48
    49fe:	95 0f       	add	r25, r21
    4a00:	f8 01       	movw	r30, r16
    4a02:	90 83       	st	Z, r25
    4a04:	8f 5f       	subi	r24, 0xFF	; 255
    4a06:	01 c0       	rjmp	.+2      	; 0x4a0a <decode_hexadecimal_string_bytes+0x68>
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	28 2f       	mov	r18, r24
    4a0c:	22 0f       	add	r18, r18
    4a0e:	48 2f       	mov	r20, r24
    4a10:	50 e0       	ldi	r21, 0x00	; 0
    4a12:	fe 01       	movw	r30, r28
    4a14:	01 90       	ld	r0, Z+
    4a16:	00 20       	and	r0, r0
    4a18:	e9 f7       	brne	.-6      	; 0x4a14 <decode_hexadecimal_string_bytes+0x72>
    4a1a:	31 97       	sbiw	r30, 0x01	; 1
    4a1c:	ec 1b       	sub	r30, r28
    4a1e:	fd 0b       	sbc	r31, r29
    4a20:	4e 17       	cp	r20, r30
    4a22:	5f 07       	cpc	r21, r31
    4a24:	10 f4       	brcc	.+4      	; 0x4a2a <decode_hexadecimal_string_bytes+0x88>
    4a26:	86 13       	cpse	r24, r22
    4a28:	ce cf       	rjmp	.-100    	; 0x49c6 <decode_hexadecimal_string_bytes+0x24>
    4a2a:	df 91       	pop	r29
    4a2c:	cf 91       	pop	r28
    4a2e:	1f 91       	pop	r17
    4a30:	0f 91       	pop	r16
    4a32:	08 95       	ret

00004a34 <_serialCallBack>:
    4a34:	80 91 38 17 	lds	r24, 0x1738	; 0x801738 <crc_sum.1945>
    4a38:	86 0f       	add	r24, r22
    4a3a:	80 93 38 17 	sts	0x1738, r24	; 0x801738 <crc_sum.1945>
    4a3e:	90 91 3b 17 	lds	r25, 0x173B	; 0x80173b <_mh_state>
    4a42:	91 30       	cpi	r25, 0x01	; 1
    4a44:	79 f0       	breq	.+30     	; 0x4a64 <_serialCallBack+0x30>
    4a46:	28 f0       	brcs	.+10     	; 0x4a52 <_serialCallBack+0x1e>
    4a48:	92 30       	cpi	r25, 0x02	; 2
    4a4a:	a9 f0       	breq	.+42     	; 0x4a76 <_serialCallBack+0x42>
    4a4c:	93 30       	cpi	r25, 0x03	; 3
    4a4e:	19 f1       	breq	.+70     	; 0x4a96 <_serialCallBack+0x62>
    4a50:	08 95       	ret
    4a52:	6f 3f       	cpi	r22, 0xFF	; 255
    4a54:	09 f0       	breq	.+2      	; 0x4a58 <_serialCallBack+0x24>
    4a56:	48 c0       	rjmp	.+144    	; 0x4ae8 <_serialCallBack+0xb4>
    4a58:	10 92 38 17 	sts	0x1738, r1	; 0x801738 <crc_sum.1945>
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <_mh_state>
    4a62:	08 95       	ret
    4a64:	66 38       	cpi	r22, 0x86	; 134
    4a66:	09 f0       	breq	.+2      	; 0x4a6a <_serialCallBack+0x36>
    4a68:	3f c0       	rjmp	.+126    	; 0x4ae8 <_serialCallBack+0xb4>
    4a6a:	10 92 37 17 	sts	0x1737, r1	; 0x801737 <inDex.1943>
    4a6e:	82 e0       	ldi	r24, 0x02	; 2
    4a70:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <_mh_state>
    4a74:	08 95       	ret
    4a76:	e0 91 37 17 	lds	r30, 0x1737	; 0x801737 <inDex.1943>
    4a7a:	81 e0       	ldi	r24, 0x01	; 1
    4a7c:	8e 0f       	add	r24, r30
    4a7e:	80 93 37 17 	sts	0x1737, r24	; 0x801737 <inDex.1943>
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	eb 5c       	subi	r30, 0xCB	; 203
    4a86:	f8 4e       	sbci	r31, 0xE8	; 232
    4a88:	60 83       	st	Z, r22
    4a8a:	82 30       	cpi	r24, 0x02	; 2
    4a8c:	69 f5       	brne	.+90     	; 0x4ae8 <_serialCallBack+0xb4>
    4a8e:	83 e0       	ldi	r24, 0x03	; 3
    4a90:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <_mh_state>
    4a94:	08 95       	ret
    4a96:	90 91 37 17 	lds	r25, 0x1737	; 0x801737 <inDex.1943>
    4a9a:	21 e0       	ldi	r18, 0x01	; 1
    4a9c:	29 0f       	add	r18, r25
    4a9e:	20 93 37 17 	sts	0x1737, r18	; 0x801737 <inDex.1943>
    4aa2:	96 30       	cpi	r25, 0x06	; 6
    4aa4:	09 f5       	brne	.+66     	; 0x4ae8 <_serialCallBack+0xb4>
    4aa6:	81 11       	cpse	r24, r1
    4aa8:	0e c0       	rjmp	.+28     	; 0x4ac6 <_serialCallBack+0x92>
    4aaa:	e5 e3       	ldi	r30, 0x35	; 53
    4aac:	f7 e1       	ldi	r31, 0x17	; 23
    4aae:	80 81       	ld	r24, Z
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	98 2f       	mov	r25, r24
    4ab4:	88 27       	eor	r24, r24
    4ab6:	21 81       	ldd	r18, Z+1	; 0x01
    4ab8:	82 0f       	add	r24, r18
    4aba:	91 1d       	adc	r25, r1
    4abc:	90 93 3d 17 	sts	0x173D, r25	; 0x80173d <_ppm+0x1>
    4ac0:	80 93 3c 17 	sts	0x173C, r24	; 0x80173c <_ppm>
    4ac4:	04 c0       	rjmp	.+8      	; 0x4ace <_serialCallBack+0x9a>
    4ac6:	10 92 3d 17 	sts	0x173D, r1	; 0x80173d <_ppm+0x1>
    4aca:	10 92 3c 17 	sts	0x173C, r1	; 0x80173c <_ppm>
    4ace:	10 92 3b 17 	sts	0x173B, r1	; 0x80173b <_mh_state>
    4ad2:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <_appCallBack>
    4ad6:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <_appCallBack+0x1>
    4ada:	30 97       	sbiw	r30, 0x00	; 0
    4adc:	29 f0       	breq	.+10     	; 0x4ae8 <_serialCallBack+0xb4>
    4ade:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <_ppm>
    4ae2:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <_ppm+0x1>
    4ae6:	19 95       	eicall
    4ae8:	08 95       	ret

00004aea <mh_z19_initialise>:
    4aea:	8f 92       	push	r8
    4aec:	9f 92       	push	r9
    4aee:	af 92       	push	r10
    4af0:	cf 92       	push	r12
    4af2:	ef 92       	push	r14
    4af4:	0f 93       	push	r16
    4af6:	0f 2e       	mov	r0, r31
    4af8:	fa e1       	ldi	r31, 0x1A	; 26
    4afa:	8f 2e       	mov	r8, r31
    4afc:	f5 e2       	ldi	r31, 0x25	; 37
    4afe:	9f 2e       	mov	r9, r31
    4b00:	f0 2d       	mov	r31, r0
    4b02:	68 94       	set
    4b04:	aa 24       	eor	r10, r10
    4b06:	a4 f8       	bld	r10, 4
    4b08:	68 94       	set
    4b0a:	cc 24       	eor	r12, r12
    4b0c:	c4 f8       	bld	r12, 4
    4b0e:	e1 2c       	mov	r14, r1
    4b10:	00 e0       	ldi	r16, 0x00	; 0
    4b12:	23 e0       	ldi	r18, 0x03	; 3
    4b14:	40 e8       	ldi	r20, 0x80	; 128
    4b16:	55 e2       	ldi	r21, 0x25	; 37
    4b18:	60 e0       	ldi	r22, 0x00	; 0
    4b1a:	70 e0       	ldi	r23, 0x00	; 0
    4b1c:	73 d0       	rcall	.+230    	; 0x4c04 <serial_create>
    4b1e:	90 93 3f 17 	sts	0x173F, r25	; 0x80173f <_serial+0x1>
    4b22:	80 93 3e 17 	sts	0x173E, r24	; 0x80173e <_serial>
    4b26:	0f 91       	pop	r16
    4b28:	ef 90       	pop	r14
    4b2a:	cf 90       	pop	r12
    4b2c:	af 90       	pop	r10
    4b2e:	9f 90       	pop	r9
    4b30:	8f 90       	pop	r8
    4b32:	08 95       	ret

00004b34 <mh_z19_injectCallBack>:
    4b34:	90 93 3a 17 	sts	0x173A, r25	; 0x80173a <_appCallBack+0x1>
    4b38:	80 93 39 17 	sts	0x1739, r24	; 0x801739 <_appCallBack>
    4b3c:	08 95       	ret

00004b3e <mh_z19_takeMeassuring>:
    4b3e:	cf 93       	push	r28
    4b40:	df 93       	push	r29
    4b42:	cd b7       	in	r28, 0x3d	; 61
    4b44:	de b7       	in	r29, 0x3e	; 62
    4b46:	29 97       	sbiw	r28, 0x09	; 9
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	f8 94       	cli
    4b4c:	de bf       	out	0x3e, r29	; 62
    4b4e:	0f be       	out	0x3f, r0	; 63
    4b50:	cd bf       	out	0x3d, r28	; 61
    4b52:	89 e0       	ldi	r24, 0x09	; 9
    4b54:	e2 e4       	ldi	r30, 0x42	; 66
    4b56:	f2 e0       	ldi	r31, 0x02	; 2
    4b58:	9e 01       	movw	r18, r28
    4b5a:	2f 5f       	subi	r18, 0xFF	; 255
    4b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5e:	d9 01       	movw	r26, r18
    4b60:	01 90       	ld	r0, Z+
    4b62:	0d 92       	st	X+, r0
    4b64:	8a 95       	dec	r24
    4b66:	e1 f7       	brne	.-8      	; 0x4b60 <mh_z19_takeMeassuring+0x22>
    4b68:	10 92 3d 17 	sts	0x173D, r1	; 0x80173d <_ppm+0x1>
    4b6c:	10 92 3c 17 	sts	0x173C, r1	; 0x80173c <_ppm>
    4b70:	80 91 3e 17 	lds	r24, 0x173E	; 0x80173e <_serial>
    4b74:	90 91 3f 17 	lds	r25, 0x173F	; 0x80173f <_serial+0x1>
    4b78:	00 97       	sbiw	r24, 0x00	; 0
    4b7a:	31 f0       	breq	.+12     	; 0x4b88 <mh_z19_takeMeassuring+0x4a>
    4b7c:	42 2f       	mov	r20, r18
    4b7e:	53 2f       	mov	r21, r19
    4b80:	69 e0       	ldi	r22, 0x09	; 9
    4b82:	0c d1       	rcall	.+536    	; 0x4d9c <serial_sendBytes>
    4b84:	80 e0       	ldi	r24, 0x00	; 0
    4b86:	01 c0       	rjmp	.+2      	; 0x4b8a <mh_z19_takeMeassuring+0x4c>
    4b88:	82 e0       	ldi	r24, 0x02	; 2
    4b8a:	29 96       	adiw	r28, 0x09	; 9
    4b8c:	0f b6       	in	r0, 0x3f	; 63
    4b8e:	f8 94       	cli
    4b90:	de bf       	out	0x3e, r29	; 62
    4b92:	0f be       	out	0x3f, r0	; 63
    4b94:	cd bf       	out	0x3d, r28	; 61
    4b96:	df 91       	pop	r29
    4b98:	cf 91       	pop	r28
    4b9a:	08 95       	ret

00004b9c <rc_servo_setPosition>:
    4b9c:	65 36       	cpi	r22, 0x65	; 101
    4b9e:	0c f0       	brlt	.+2      	; 0x4ba2 <rc_servo_setPosition+0x6>
    4ba0:	64 e6       	ldi	r22, 0x64	; 100
    4ba2:	6c 39       	cpi	r22, 0x9C	; 156
    4ba4:	0c f4       	brge	.+2      	; 0x4ba8 <rc_servo_setPosition+0xc>
    4ba6:	6c e9       	ldi	r22, 0x9C	; 156
    4ba8:	96 ef       	ldi	r25, 0xF6	; 246
    4baa:	69 02       	muls	r22, r25
    4bac:	b0 01       	movw	r22, r0
    4bae:	11 24       	eor	r1, r1
    4bb0:	68 54       	subi	r22, 0x48	; 72
    4bb2:	74 4f       	sbci	r23, 0xF4	; 244
    4bb4:	81 11       	cpse	r24, r1
    4bb6:	05 c0       	rjmp	.+10     	; 0x4bc2 <rc_servo_setPosition+0x26>
    4bb8:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4bbc:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4bc0:	08 95       	ret
    4bc2:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4bc6:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4bca:	08 95       	ret

00004bcc <rc_servo_initialise>:
    4bcc:	ea e0       	ldi	r30, 0x0A	; 10
    4bce:	f1 e0       	ldi	r31, 0x01	; 1
    4bd0:	80 81       	ld	r24, Z
    4bd2:	88 61       	ori	r24, 0x18	; 24
    4bd4:	80 83       	st	Z, r24
    4bd6:	8f e3       	ldi	r24, 0x3F	; 63
    4bd8:	9c e9       	ldi	r25, 0x9C	; 156
    4bda:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4bde:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4be2:	60 e0       	ldi	r22, 0x00	; 0
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	da df       	rcall	.-76     	; 0x4b9c <rc_servo_setPosition>
    4be8:	60 e0       	ldi	r22, 0x00	; 0
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	d7 df       	rcall	.-82     	; 0x4b9c <rc_servo_setPosition>
    4bee:	e0 e2       	ldi	r30, 0x20	; 32
    4bf0:	f1 e0       	ldi	r31, 0x01	; 1
    4bf2:	80 81       	ld	r24, Z
    4bf4:	82 6a       	ori	r24, 0xA2	; 162
    4bf6:	80 83       	st	Z, r24
    4bf8:	e1 e2       	ldi	r30, 0x21	; 33
    4bfa:	f1 e0       	ldi	r31, 0x01	; 1
    4bfc:	80 81       	ld	r24, Z
    4bfe:	8a 61       	ori	r24, 0x1A	; 26
    4c00:	80 83       	st	Z, r24
    4c02:	08 95       	ret

00004c04 <serial_create>:
    4c04:	2f 92       	push	r2
    4c06:	3f 92       	push	r3
    4c08:	4f 92       	push	r4
    4c0a:	5f 92       	push	r5
    4c0c:	6f 92       	push	r6
    4c0e:	7f 92       	push	r7
    4c10:	8f 92       	push	r8
    4c12:	9f 92       	push	r9
    4c14:	af 92       	push	r10
    4c16:	cf 92       	push	r12
    4c18:	ef 92       	push	r14
    4c1a:	ff 92       	push	r15
    4c1c:	0f 93       	push	r16
    4c1e:	1f 93       	push	r17
    4c20:	cf 93       	push	r28
    4c22:	df 93       	push	r29
    4c24:	cd b7       	in	r28, 0x3d	; 61
    4c26:	de b7       	in	r29, 0x3e	; 62
    4c28:	f8 2e       	mov	r15, r24
    4c2a:	2a 01       	movw	r4, r20
    4c2c:	3b 01       	movw	r6, r22
    4c2e:	88 e0       	ldi	r24, 0x08	; 8
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <malloc>
    4c36:	8c 01       	movw	r16, r24
    4c38:	8f 2d       	mov	r24, r15
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	fc 01       	movw	r30, r24
    4c3e:	ee 0f       	add	r30, r30
    4c40:	ff 1f       	adc	r31, r31
    4c42:	e0 5c       	subi	r30, 0xC0	; 192
    4c44:	f8 4e       	sbci	r31, 0xE8	; 232
    4c46:	11 83       	std	Z+1, r17	; 0x01
    4c48:	00 83       	st	Z, r16
    4c4a:	01 15       	cp	r16, r1
    4c4c:	11 05       	cpc	r17, r1
    4c4e:	09 f4       	brne	.+2      	; 0x4c52 <serial_create+0x4e>
    4c50:	68 c0       	rjmp	.+208    	; 0x4d22 <serial_create+0x11e>
    4c52:	88 0f       	add	r24, r24
    4c54:	99 1f       	adc	r25, r25
    4c56:	fc 01       	movw	r30, r24
    4c58:	e5 5f       	subi	r30, 0xF5	; 245
    4c5a:	fd 4f       	sbci	r31, 0xFD	; 253
    4c5c:	80 81       	ld	r24, Z
    4c5e:	91 81       	ldd	r25, Z+1	; 0x01
    4c60:	d8 01       	movw	r26, r16
    4c62:	8d 93       	st	X+, r24
    4c64:	9c 93       	st	X, r25
    4c66:	6c 2d       	mov	r22, r12
    4c68:	70 e0       	ldi	r23, 0x00	; 0
    4c6a:	84 e0       	ldi	r24, 0x04	; 4
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <calloc>
    4c72:	1c 01       	movw	r2, r24
    4c74:	61 e0       	ldi	r22, 0x01	; 1
    4c76:	70 e0       	ldi	r23, 0x00	; 0
    4c78:	86 e0       	ldi	r24, 0x06	; 6
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <calloc>
    4c80:	7c 01       	movw	r14, r24
    4c82:	4c 2d       	mov	r20, r12
    4c84:	b1 01       	movw	r22, r2
    4c86:	5c d6       	rcall	.+3256   	; 0x5940 <fifo_init>
    4c88:	f8 01       	movw	r30, r16
    4c8a:	f5 82       	std	Z+5, r15	; 0x05
    4c8c:	e4 82       	std	Z+4, r14	; 0x04
    4c8e:	6a 2d       	mov	r22, r10
    4c90:	70 e0       	ldi	r23, 0x00	; 0
    4c92:	84 e0       	ldi	r24, 0x04	; 4
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <calloc>
    4c9a:	1c 01       	movw	r2, r24
    4c9c:	61 e0       	ldi	r22, 0x01	; 1
    4c9e:	70 e0       	ldi	r23, 0x00	; 0
    4ca0:	86 e0       	ldi	r24, 0x06	; 6
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <calloc>
    4ca8:	7c 01       	movw	r14, r24
    4caa:	4a 2d       	mov	r20, r10
    4cac:	b1 01       	movw	r22, r2
    4cae:	48 d6       	rcall	.+3216   	; 0x5940 <fifo_init>
    4cb0:	d8 01       	movw	r26, r16
    4cb2:	13 96       	adiw	r26, 0x03	; 3
    4cb4:	fc 92       	st	X, r15
    4cb6:	ee 92       	st	-X, r14
    4cb8:	12 97       	sbiw	r26, 0x02	; 2
    4cba:	17 96       	adiw	r26, 0x07	; 7
    4cbc:	9c 92       	st	X, r9
    4cbe:	8e 92       	st	-X, r8
    4cc0:	16 97       	sbiw	r26, 0x06	; 6
    4cc2:	ff b6       	in	r15, 0x3f	; 63
    4cc4:	f8 94       	cli
    4cc6:	ed 91       	ld	r30, X+
    4cc8:	fc 91       	ld	r31, X
    4cca:	11 97       	sbiw	r26, 0x01	; 1
    4ccc:	36 97       	sbiw	r30, 0x06	; 6
    4cce:	80 81       	ld	r24, Z
    4cd0:	82 60       	ori	r24, 0x02	; 2
    4cd2:	80 83       	st	Z, r24
    4cd4:	8d 90       	ld	r8, X+
    4cd6:	9c 90       	ld	r9, X
    4cd8:	c3 01       	movw	r24, r6
    4cda:	b2 01       	movw	r22, r4
    4cdc:	4b d7       	rcall	.+3734   	; 0x5b74 <__floatunsisf>
    4cde:	20 e0       	ldi	r18, 0x00	; 0
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	40 e0       	ldi	r20, 0x00	; 0
    4ce4:	51 e4       	ldi	r21, 0x41	; 65
    4ce6:	d4 d7       	rcall	.+4008   	; 0x5c90 <__mulsf3>
    4ce8:	9b 01       	movw	r18, r22
    4cea:	ac 01       	movw	r20, r24
    4cec:	60 e0       	ldi	r22, 0x00	; 0
    4cee:	74 e2       	ldi	r23, 0x24	; 36
    4cf0:	84 e7       	ldi	r24, 0x74	; 116
    4cf2:	9b e4       	ldi	r25, 0x4B	; 75
    4cf4:	a6 d6       	rcall	.+3404   	; 0x5a42 <__divsf3>
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	40 e8       	ldi	r20, 0x80	; 128
    4cfc:	5f e3       	ldi	r21, 0x3F	; 63
    4cfe:	3c d6       	rcall	.+3192   	; 0x5978 <__subsf3>
    4d00:	0d d7       	rcall	.+3610   	; 0x5b1c <__fixunssfsi>
    4d02:	f4 01       	movw	r30, r8
    4d04:	32 97       	sbiw	r30, 0x02	; 2
    4d06:	60 83       	st	Z, r22
    4d08:	d8 01       	movw	r26, r16
    4d0a:	ed 91       	ld	r30, X+
    4d0c:	fc 91       	ld	r31, X
    4d0e:	11 97       	sbiw	r26, 0x01	; 1
    4d10:	35 97       	sbiw	r30, 0x05	; 5
    4d12:	88 e9       	ldi	r24, 0x98	; 152
    4d14:	80 83       	st	Z, r24
    4d16:	ed 91       	ld	r30, X+
    4d18:	fc 91       	ld	r31, X
    4d1a:	34 97       	sbiw	r30, 0x04	; 4
    4d1c:	86 e0       	ldi	r24, 0x06	; 6
    4d1e:	80 83       	st	Z, r24
    4d20:	ff be       	out	0x3f, r15	; 63
    4d22:	c8 01       	movw	r24, r16
    4d24:	df 91       	pop	r29
    4d26:	cf 91       	pop	r28
    4d28:	1f 91       	pop	r17
    4d2a:	0f 91       	pop	r16
    4d2c:	ff 90       	pop	r15
    4d2e:	ef 90       	pop	r14
    4d30:	cf 90       	pop	r12
    4d32:	af 90       	pop	r10
    4d34:	9f 90       	pop	r9
    4d36:	8f 90       	pop	r8
    4d38:	7f 90       	pop	r7
    4d3a:	6f 90       	pop	r6
    4d3c:	5f 90       	pop	r5
    4d3e:	4f 90       	pop	r4
    4d40:	3f 90       	pop	r3
    4d42:	2f 90       	pop	r2
    4d44:	08 95       	ret

00004d46 <serial_sendByte>:
    4d46:	cf 93       	push	r28
    4d48:	df 93       	push	r29
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	89 2b       	or	r24, r25
    4d4e:	01 f1       	breq	.+64     	; 0x4d90 <serial_sendByte+0x4a>
    4d50:	12 96       	adiw	r26, 0x02	; 2
    4d52:	ed 91       	ld	r30, X+
    4d54:	fc 91       	ld	r31, X
    4d56:	13 97       	sbiw	r26, 0x03	; 3
    4d58:	93 81       	ldd	r25, Z+3	; 0x03
    4d5a:	82 81       	ldd	r24, Z+2	; 0x02
    4d5c:	25 81       	ldd	r18, Z+5	; 0x05
    4d5e:	98 1b       	sub	r25, r24
    4d60:	92 23       	and	r25, r18
    4d62:	84 81       	ldd	r24, Z+4	; 0x04
    4d64:	98 17       	cp	r25, r24
    4d66:	b1 f0       	breq	.+44     	; 0x4d94 <serial_sendByte+0x4e>
    4d68:	83 81       	ldd	r24, Z+3	; 0x03
    4d6a:	26 95       	lsr	r18
    4d6c:	28 23       	and	r18, r24
    4d6e:	c0 81       	ld	r28, Z
    4d70:	d1 81       	ldd	r29, Z+1	; 0x01
    4d72:	c2 0f       	add	r28, r18
    4d74:	d1 1d       	adc	r29, r1
    4d76:	68 83       	st	Y, r22
    4d78:	8f 5f       	subi	r24, 0xFF	; 255
    4d7a:	95 81       	ldd	r25, Z+5	; 0x05
    4d7c:	89 23       	and	r24, r25
    4d7e:	83 83       	std	Z+3, r24	; 0x03
    4d80:	ed 91       	ld	r30, X+
    4d82:	fc 91       	ld	r31, X
    4d84:	35 97       	sbiw	r30, 0x05	; 5
    4d86:	80 81       	ld	r24, Z
    4d88:	80 62       	ori	r24, 0x20	; 32
    4d8a:	80 83       	st	Z, r24
    4d8c:	80 e0       	ldi	r24, 0x00	; 0
    4d8e:	03 c0       	rjmp	.+6      	; 0x4d96 <serial_sendByte+0x50>
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	01 c0       	rjmp	.+2      	; 0x4d96 <serial_sendByte+0x50>
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	df 91       	pop	r29
    4d98:	cf 91       	pop	r28
    4d9a:	08 95       	ret

00004d9c <serial_sendBytes>:
    4d9c:	ef 92       	push	r14
    4d9e:	ff 92       	push	r15
    4da0:	0f 93       	push	r16
    4da2:	1f 93       	push	r17
    4da4:	cf 93       	push	r28
    4da6:	df 93       	push	r29
    4da8:	7c 01       	movw	r14, r24
    4daa:	00 97       	sbiw	r24, 0x00	; 0
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <serial_sendBytes+0x14>
    4dae:	41 c0       	rjmp	.+130    	; 0x4e32 <serial_sendBytes+0x96>
    4db0:	dc 01       	movw	r26, r24
    4db2:	12 96       	adiw	r26, 0x02	; 2
    4db4:	ed 91       	ld	r30, X+
    4db6:	fc 91       	ld	r31, X
    4db8:	13 97       	sbiw	r26, 0x03	; 3
    4dba:	93 81       	ldd	r25, Z+3	; 0x03
    4dbc:	82 81       	ldd	r24, Z+2	; 0x02
    4dbe:	98 1b       	sub	r25, r24
    4dc0:	85 81       	ldd	r24, Z+5	; 0x05
    4dc2:	98 23       	and	r25, r24
    4dc4:	84 81       	ldd	r24, Z+4	; 0x04
    4dc6:	89 1b       	sub	r24, r25
    4dc8:	86 17       	cp	r24, r22
    4dca:	a8 f1       	brcs	.+106    	; 0x4e36 <serial_sendBytes+0x9a>
    4dcc:	66 23       	and	r22, r22
    4dce:	41 f1       	breq	.+80     	; 0x4e20 <serial_sendBytes+0x84>
    4dd0:	84 2f       	mov	r24, r20
    4dd2:	95 2f       	mov	r25, r21
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	61 50       	subi	r22, 0x01	; 1
    4dd8:	46 2f       	mov	r20, r22
    4dda:	50 e0       	ldi	r21, 0x00	; 0
    4ddc:	4f 5f       	subi	r20, 0xFF	; 255
    4dde:	5f 4f       	sbci	r21, 0xFF	; 255
    4de0:	48 0f       	add	r20, r24
    4de2:	59 1f       	adc	r21, r25
    4de4:	e7 01       	movw	r28, r14
    4de6:	ea 81       	ldd	r30, Y+2	; 0x02
    4de8:	fb 81       	ldd	r31, Y+3	; 0x03
    4dea:	93 81       	ldd	r25, Z+3	; 0x03
    4dec:	82 81       	ldd	r24, Z+2	; 0x02
    4dee:	25 81       	ldd	r18, Z+5	; 0x05
    4df0:	98 1b       	sub	r25, r24
    4df2:	92 23       	and	r25, r18
    4df4:	84 81       	ldd	r24, Z+4	; 0x04
    4df6:	98 17       	cp	r25, r24
    4df8:	79 f0       	breq	.+30     	; 0x4e18 <serial_sendBytes+0x7c>
    4dfa:	8c 91       	ld	r24, X
    4dfc:	93 81       	ldd	r25, Z+3	; 0x03
    4dfe:	26 95       	lsr	r18
    4e00:	29 23       	and	r18, r25
    4e02:	60 81       	ld	r22, Z
    4e04:	71 81       	ldd	r23, Z+1	; 0x01
    4e06:	8b 01       	movw	r16, r22
    4e08:	02 0f       	add	r16, r18
    4e0a:	11 1d       	adc	r17, r1
    4e0c:	e8 01       	movw	r28, r16
    4e0e:	88 83       	st	Y, r24
    4e10:	9f 5f       	subi	r25, 0xFF	; 255
    4e12:	85 81       	ldd	r24, Z+5	; 0x05
    4e14:	98 23       	and	r25, r24
    4e16:	93 83       	std	Z+3, r25	; 0x03
    4e18:	11 96       	adiw	r26, 0x01	; 1
    4e1a:	a4 17       	cp	r26, r20
    4e1c:	b5 07       	cpc	r27, r21
    4e1e:	11 f7       	brne	.-60     	; 0x4de4 <serial_sendBytes+0x48>
    4e20:	d7 01       	movw	r26, r14
    4e22:	ed 91       	ld	r30, X+
    4e24:	fc 91       	ld	r31, X
    4e26:	35 97       	sbiw	r30, 0x05	; 5
    4e28:	80 81       	ld	r24, Z
    4e2a:	80 62       	ori	r24, 0x20	; 32
    4e2c:	80 83       	st	Z, r24
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	03 c0       	rjmp	.+6      	; 0x4e38 <serial_sendBytes+0x9c>
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	01 c0       	rjmp	.+2      	; 0x4e38 <serial_sendBytes+0x9c>
    4e36:	82 e0       	ldi	r24, 0x02	; 2
    4e38:	df 91       	pop	r29
    4e3a:	cf 91       	pop	r28
    4e3c:	1f 91       	pop	r17
    4e3e:	0f 91       	pop	r16
    4e40:	ff 90       	pop	r15
    4e42:	ef 90       	pop	r14
    4e44:	08 95       	ret

00004e46 <serial_getByte>:
    4e46:	00 97       	sbiw	r24, 0x00	; 0
    4e48:	d1 f0       	breq	.+52     	; 0x4e7e <serial_getByte+0x38>
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	14 96       	adiw	r26, 0x04	; 4
    4e4e:	ed 91       	ld	r30, X+
    4e50:	fc 91       	ld	r31, X
    4e52:	15 97       	sbiw	r26, 0x05	; 5
    4e54:	93 81       	ldd	r25, Z+3	; 0x03
    4e56:	82 81       	ldd	r24, Z+2	; 0x02
    4e58:	98 17       	cp	r25, r24
    4e5a:	99 f0       	breq	.+38     	; 0x4e82 <serial_getByte+0x3c>
    4e5c:	92 81       	ldd	r25, Z+2	; 0x02
    4e5e:	85 81       	ldd	r24, Z+5	; 0x05
    4e60:	86 95       	lsr	r24
    4e62:	89 23       	and	r24, r25
    4e64:	a0 81       	ld	r26, Z
    4e66:	b1 81       	ldd	r27, Z+1	; 0x01
    4e68:	a8 0f       	add	r26, r24
    4e6a:	b1 1d       	adc	r27, r1
    4e6c:	8c 91       	ld	r24, X
    4e6e:	db 01       	movw	r26, r22
    4e70:	8c 93       	st	X, r24
    4e72:	9f 5f       	subi	r25, 0xFF	; 255
    4e74:	85 81       	ldd	r24, Z+5	; 0x05
    4e76:	98 23       	and	r25, r24
    4e78:	92 83       	std	Z+2, r25	; 0x02
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	08 95       	ret
    4e7e:	81 e0       	ldi	r24, 0x01	; 1
    4e80:	08 95       	ret
    4e82:	83 e0       	ldi	r24, 0x03	; 3
    4e84:	08 95       	ret

00004e86 <__vector_25>:
    4e86:	1f 92       	push	r1
    4e88:	0f 92       	push	r0
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	0f 92       	push	r0
    4e8e:	11 24       	eor	r1, r1
    4e90:	0b b6       	in	r0, 0x3b	; 59
    4e92:	0f 92       	push	r0
    4e94:	2f 93       	push	r18
    4e96:	3f 93       	push	r19
    4e98:	4f 93       	push	r20
    4e9a:	5f 93       	push	r21
    4e9c:	6f 93       	push	r22
    4e9e:	7f 93       	push	r23
    4ea0:	8f 93       	push	r24
    4ea2:	9f 93       	push	r25
    4ea4:	af 93       	push	r26
    4ea6:	bf 93       	push	r27
    4ea8:	cf 93       	push	r28
    4eaa:	df 93       	push	r29
    4eac:	ef 93       	push	r30
    4eae:	ff 93       	push	r31
    4eb0:	a0 91 40 17 	lds	r26, 0x1740	; 0x801740 <_ser_handle>
    4eb4:	b0 91 41 17 	lds	r27, 0x1741	; 0x801741 <_ser_handle+0x1>
    4eb8:	10 97       	sbiw	r26, 0x00	; 0
    4eba:	11 f1       	breq	.+68     	; 0x4f00 <__vector_25+0x7a>
    4ebc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4ec0:	14 96       	adiw	r26, 0x04	; 4
    4ec2:	ed 91       	ld	r30, X+
    4ec4:	fc 91       	ld	r31, X
    4ec6:	15 97       	sbiw	r26, 0x05	; 5
    4ec8:	93 81       	ldd	r25, Z+3	; 0x03
    4eca:	82 81       	ldd	r24, Z+2	; 0x02
    4ecc:	25 81       	ldd	r18, Z+5	; 0x05
    4ece:	98 1b       	sub	r25, r24
    4ed0:	92 23       	and	r25, r18
    4ed2:	84 81       	ldd	r24, Z+4	; 0x04
    4ed4:	98 17       	cp	r25, r24
    4ed6:	61 f0       	breq	.+24     	; 0x4ef0 <__vector_25+0x6a>
    4ed8:	83 81       	ldd	r24, Z+3	; 0x03
    4eda:	26 95       	lsr	r18
    4edc:	28 23       	and	r18, r24
    4ede:	c0 81       	ld	r28, Z
    4ee0:	d1 81       	ldd	r29, Z+1	; 0x01
    4ee2:	c2 0f       	add	r28, r18
    4ee4:	d1 1d       	adc	r29, r1
    4ee6:	68 83       	st	Y, r22
    4ee8:	8f 5f       	subi	r24, 0xFF	; 255
    4eea:	95 81       	ldd	r25, Z+5	; 0x05
    4eec:	89 23       	and	r24, r25
    4eee:	83 83       	std	Z+3, r24	; 0x03
    4ef0:	16 96       	adiw	r26, 0x06	; 6
    4ef2:	ed 91       	ld	r30, X+
    4ef4:	fc 91       	ld	r31, X
    4ef6:	17 97       	sbiw	r26, 0x07	; 7
    4ef8:	30 97       	sbiw	r30, 0x00	; 0
    4efa:	11 f0       	breq	.+4      	; 0x4f00 <__vector_25+0x7a>
    4efc:	cd 01       	movw	r24, r26
    4efe:	19 95       	eicall
    4f00:	ff 91       	pop	r31
    4f02:	ef 91       	pop	r30
    4f04:	df 91       	pop	r29
    4f06:	cf 91       	pop	r28
    4f08:	bf 91       	pop	r27
    4f0a:	af 91       	pop	r26
    4f0c:	9f 91       	pop	r25
    4f0e:	8f 91       	pop	r24
    4f10:	7f 91       	pop	r23
    4f12:	6f 91       	pop	r22
    4f14:	5f 91       	pop	r21
    4f16:	4f 91       	pop	r20
    4f18:	3f 91       	pop	r19
    4f1a:	2f 91       	pop	r18
    4f1c:	0f 90       	pop	r0
    4f1e:	0b be       	out	0x3b, r0	; 59
    4f20:	0f 90       	pop	r0
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	0f 90       	pop	r0
    4f26:	1f 90       	pop	r1
    4f28:	18 95       	reti

00004f2a <__vector_26>:
    4f2a:	1f 92       	push	r1
    4f2c:	0f 92       	push	r0
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	0f 92       	push	r0
    4f32:	11 24       	eor	r1, r1
    4f34:	0b b6       	in	r0, 0x3b	; 59
    4f36:	0f 92       	push	r0
    4f38:	2f 93       	push	r18
    4f3a:	8f 93       	push	r24
    4f3c:	9f 93       	push	r25
    4f3e:	af 93       	push	r26
    4f40:	bf 93       	push	r27
    4f42:	ef 93       	push	r30
    4f44:	ff 93       	push	r31
    4f46:	e0 91 40 17 	lds	r30, 0x1740	; 0x801740 <_ser_handle>
    4f4a:	f0 91 41 17 	lds	r31, 0x1741	; 0x801741 <_ser_handle+0x1>
    4f4e:	30 97       	sbiw	r30, 0x00	; 0
    4f50:	b9 f0       	breq	.+46     	; 0x4f80 <__vector_26+0x56>
    4f52:	02 80       	ldd	r0, Z+2	; 0x02
    4f54:	f3 81       	ldd	r31, Z+3	; 0x03
    4f56:	e0 2d       	mov	r30, r0
    4f58:	93 81       	ldd	r25, Z+3	; 0x03
    4f5a:	82 81       	ldd	r24, Z+2	; 0x02
    4f5c:	98 17       	cp	r25, r24
    4f5e:	b1 f0       	breq	.+44     	; 0x4f8c <__vector_26+0x62>
    4f60:	92 81       	ldd	r25, Z+2	; 0x02
    4f62:	85 81       	ldd	r24, Z+5	; 0x05
    4f64:	28 2f       	mov	r18, r24
    4f66:	26 95       	lsr	r18
    4f68:	29 23       	and	r18, r25
    4f6a:	a0 81       	ld	r26, Z
    4f6c:	b1 81       	ldd	r27, Z+1	; 0x01
    4f6e:	a2 0f       	add	r26, r18
    4f70:	b1 1d       	adc	r27, r1
    4f72:	2c 91       	ld	r18, X
    4f74:	9f 5f       	subi	r25, 0xFF	; 255
    4f76:	89 23       	and	r24, r25
    4f78:	82 83       	std	Z+2, r24	; 0x02
    4f7a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4f7e:	0b c0       	rjmp	.+22     	; 0x4f96 <__vector_26+0x6c>
    4f80:	e1 ec       	ldi	r30, 0xC1	; 193
    4f82:	f0 e0       	ldi	r31, 0x00	; 0
    4f84:	80 81       	ld	r24, Z
    4f86:	8f 7d       	andi	r24, 0xDF	; 223
    4f88:	80 83       	st	Z, r24
    4f8a:	05 c0       	rjmp	.+10     	; 0x4f96 <__vector_26+0x6c>
    4f8c:	e1 ec       	ldi	r30, 0xC1	; 193
    4f8e:	f0 e0       	ldi	r31, 0x00	; 0
    4f90:	80 81       	ld	r24, Z
    4f92:	8f 7d       	andi	r24, 0xDF	; 223
    4f94:	80 83       	st	Z, r24
    4f96:	ff 91       	pop	r31
    4f98:	ef 91       	pop	r30
    4f9a:	bf 91       	pop	r27
    4f9c:	af 91       	pop	r26
    4f9e:	9f 91       	pop	r25
    4fa0:	8f 91       	pop	r24
    4fa2:	2f 91       	pop	r18
    4fa4:	0f 90       	pop	r0
    4fa6:	0b be       	out	0x3b, r0	; 59
    4fa8:	0f 90       	pop	r0
    4faa:	0f be       	out	0x3f, r0	; 63
    4fac:	0f 90       	pop	r0
    4fae:	1f 90       	pop	r1
    4fb0:	18 95       	reti

00004fb2 <__vector_36>:
    4fb2:	1f 92       	push	r1
    4fb4:	0f 92       	push	r0
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	0f 92       	push	r0
    4fba:	11 24       	eor	r1, r1
    4fbc:	0b b6       	in	r0, 0x3b	; 59
    4fbe:	0f 92       	push	r0
    4fc0:	2f 93       	push	r18
    4fc2:	3f 93       	push	r19
    4fc4:	4f 93       	push	r20
    4fc6:	5f 93       	push	r21
    4fc8:	6f 93       	push	r22
    4fca:	7f 93       	push	r23
    4fcc:	8f 93       	push	r24
    4fce:	9f 93       	push	r25
    4fd0:	af 93       	push	r26
    4fd2:	bf 93       	push	r27
    4fd4:	cf 93       	push	r28
    4fd6:	df 93       	push	r29
    4fd8:	ef 93       	push	r30
    4fda:	ff 93       	push	r31
    4fdc:	a0 91 42 17 	lds	r26, 0x1742	; 0x801742 <_ser_handle+0x2>
    4fe0:	b0 91 43 17 	lds	r27, 0x1743	; 0x801743 <_ser_handle+0x3>
    4fe4:	10 97       	sbiw	r26, 0x00	; 0
    4fe6:	11 f1       	breq	.+68     	; 0x502c <__vector_36+0x7a>
    4fe8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4fec:	14 96       	adiw	r26, 0x04	; 4
    4fee:	ed 91       	ld	r30, X+
    4ff0:	fc 91       	ld	r31, X
    4ff2:	15 97       	sbiw	r26, 0x05	; 5
    4ff4:	93 81       	ldd	r25, Z+3	; 0x03
    4ff6:	82 81       	ldd	r24, Z+2	; 0x02
    4ff8:	25 81       	ldd	r18, Z+5	; 0x05
    4ffa:	98 1b       	sub	r25, r24
    4ffc:	92 23       	and	r25, r18
    4ffe:	84 81       	ldd	r24, Z+4	; 0x04
    5000:	98 17       	cp	r25, r24
    5002:	61 f0       	breq	.+24     	; 0x501c <__vector_36+0x6a>
    5004:	83 81       	ldd	r24, Z+3	; 0x03
    5006:	26 95       	lsr	r18
    5008:	28 23       	and	r18, r24
    500a:	c0 81       	ld	r28, Z
    500c:	d1 81       	ldd	r29, Z+1	; 0x01
    500e:	c2 0f       	add	r28, r18
    5010:	d1 1d       	adc	r29, r1
    5012:	68 83       	st	Y, r22
    5014:	8f 5f       	subi	r24, 0xFF	; 255
    5016:	95 81       	ldd	r25, Z+5	; 0x05
    5018:	89 23       	and	r24, r25
    501a:	83 83       	std	Z+3, r24	; 0x03
    501c:	16 96       	adiw	r26, 0x06	; 6
    501e:	ed 91       	ld	r30, X+
    5020:	fc 91       	ld	r31, X
    5022:	17 97       	sbiw	r26, 0x07	; 7
    5024:	30 97       	sbiw	r30, 0x00	; 0
    5026:	11 f0       	breq	.+4      	; 0x502c <__vector_36+0x7a>
    5028:	cd 01       	movw	r24, r26
    502a:	19 95       	eicall
    502c:	ff 91       	pop	r31
    502e:	ef 91       	pop	r30
    5030:	df 91       	pop	r29
    5032:	cf 91       	pop	r28
    5034:	bf 91       	pop	r27
    5036:	af 91       	pop	r26
    5038:	9f 91       	pop	r25
    503a:	8f 91       	pop	r24
    503c:	7f 91       	pop	r23
    503e:	6f 91       	pop	r22
    5040:	5f 91       	pop	r21
    5042:	4f 91       	pop	r20
    5044:	3f 91       	pop	r19
    5046:	2f 91       	pop	r18
    5048:	0f 90       	pop	r0
    504a:	0b be       	out	0x3b, r0	; 59
    504c:	0f 90       	pop	r0
    504e:	0f be       	out	0x3f, r0	; 63
    5050:	0f 90       	pop	r0
    5052:	1f 90       	pop	r1
    5054:	18 95       	reti

00005056 <__vector_37>:
    5056:	1f 92       	push	r1
    5058:	0f 92       	push	r0
    505a:	0f b6       	in	r0, 0x3f	; 63
    505c:	0f 92       	push	r0
    505e:	11 24       	eor	r1, r1
    5060:	0b b6       	in	r0, 0x3b	; 59
    5062:	0f 92       	push	r0
    5064:	2f 93       	push	r18
    5066:	8f 93       	push	r24
    5068:	9f 93       	push	r25
    506a:	af 93       	push	r26
    506c:	bf 93       	push	r27
    506e:	ef 93       	push	r30
    5070:	ff 93       	push	r31
    5072:	e0 91 42 17 	lds	r30, 0x1742	; 0x801742 <_ser_handle+0x2>
    5076:	f0 91 43 17 	lds	r31, 0x1743	; 0x801743 <_ser_handle+0x3>
    507a:	30 97       	sbiw	r30, 0x00	; 0
    507c:	b9 f0       	breq	.+46     	; 0x50ac <__vector_37+0x56>
    507e:	02 80       	ldd	r0, Z+2	; 0x02
    5080:	f3 81       	ldd	r31, Z+3	; 0x03
    5082:	e0 2d       	mov	r30, r0
    5084:	93 81       	ldd	r25, Z+3	; 0x03
    5086:	82 81       	ldd	r24, Z+2	; 0x02
    5088:	98 17       	cp	r25, r24
    508a:	b1 f0       	breq	.+44     	; 0x50b8 <__vector_37+0x62>
    508c:	92 81       	ldd	r25, Z+2	; 0x02
    508e:	85 81       	ldd	r24, Z+5	; 0x05
    5090:	28 2f       	mov	r18, r24
    5092:	26 95       	lsr	r18
    5094:	29 23       	and	r18, r25
    5096:	a0 81       	ld	r26, Z
    5098:	b1 81       	ldd	r27, Z+1	; 0x01
    509a:	a2 0f       	add	r26, r18
    509c:	b1 1d       	adc	r27, r1
    509e:	2c 91       	ld	r18, X
    50a0:	9f 5f       	subi	r25, 0xFF	; 255
    50a2:	89 23       	and	r24, r25
    50a4:	82 83       	std	Z+2, r24	; 0x02
    50a6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    50aa:	0b c0       	rjmp	.+22     	; 0x50c2 <__vector_37+0x6c>
    50ac:	e9 ec       	ldi	r30, 0xC9	; 201
    50ae:	f0 e0       	ldi	r31, 0x00	; 0
    50b0:	80 81       	ld	r24, Z
    50b2:	8f 7d       	andi	r24, 0xDF	; 223
    50b4:	80 83       	st	Z, r24
    50b6:	05 c0       	rjmp	.+10     	; 0x50c2 <__vector_37+0x6c>
    50b8:	e9 ec       	ldi	r30, 0xC9	; 201
    50ba:	f0 e0       	ldi	r31, 0x00	; 0
    50bc:	80 81       	ld	r24, Z
    50be:	8f 7d       	andi	r24, 0xDF	; 223
    50c0:	80 83       	st	Z, r24
    50c2:	ff 91       	pop	r31
    50c4:	ef 91       	pop	r30
    50c6:	bf 91       	pop	r27
    50c8:	af 91       	pop	r26
    50ca:	9f 91       	pop	r25
    50cc:	8f 91       	pop	r24
    50ce:	2f 91       	pop	r18
    50d0:	0f 90       	pop	r0
    50d2:	0b be       	out	0x3b, r0	; 59
    50d4:	0f 90       	pop	r0
    50d6:	0f be       	out	0x3f, r0	; 63
    50d8:	0f 90       	pop	r0
    50da:	1f 90       	pop	r1
    50dc:	18 95       	reti

000050de <__vector_51>:
    50de:	1f 92       	push	r1
    50e0:	0f 92       	push	r0
    50e2:	0f b6       	in	r0, 0x3f	; 63
    50e4:	0f 92       	push	r0
    50e6:	11 24       	eor	r1, r1
    50e8:	0b b6       	in	r0, 0x3b	; 59
    50ea:	0f 92       	push	r0
    50ec:	2f 93       	push	r18
    50ee:	3f 93       	push	r19
    50f0:	4f 93       	push	r20
    50f2:	5f 93       	push	r21
    50f4:	6f 93       	push	r22
    50f6:	7f 93       	push	r23
    50f8:	8f 93       	push	r24
    50fa:	9f 93       	push	r25
    50fc:	af 93       	push	r26
    50fe:	bf 93       	push	r27
    5100:	cf 93       	push	r28
    5102:	df 93       	push	r29
    5104:	ef 93       	push	r30
    5106:	ff 93       	push	r31
    5108:	a0 91 44 17 	lds	r26, 0x1744	; 0x801744 <_ser_handle+0x4>
    510c:	b0 91 45 17 	lds	r27, 0x1745	; 0x801745 <_ser_handle+0x5>
    5110:	10 97       	sbiw	r26, 0x00	; 0
    5112:	11 f1       	breq	.+68     	; 0x5158 <__vector_51+0x7a>
    5114:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5118:	14 96       	adiw	r26, 0x04	; 4
    511a:	ed 91       	ld	r30, X+
    511c:	fc 91       	ld	r31, X
    511e:	15 97       	sbiw	r26, 0x05	; 5
    5120:	93 81       	ldd	r25, Z+3	; 0x03
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	25 81       	ldd	r18, Z+5	; 0x05
    5126:	98 1b       	sub	r25, r24
    5128:	92 23       	and	r25, r18
    512a:	84 81       	ldd	r24, Z+4	; 0x04
    512c:	98 17       	cp	r25, r24
    512e:	61 f0       	breq	.+24     	; 0x5148 <__vector_51+0x6a>
    5130:	83 81       	ldd	r24, Z+3	; 0x03
    5132:	26 95       	lsr	r18
    5134:	28 23       	and	r18, r24
    5136:	c0 81       	ld	r28, Z
    5138:	d1 81       	ldd	r29, Z+1	; 0x01
    513a:	c2 0f       	add	r28, r18
    513c:	d1 1d       	adc	r29, r1
    513e:	68 83       	st	Y, r22
    5140:	8f 5f       	subi	r24, 0xFF	; 255
    5142:	95 81       	ldd	r25, Z+5	; 0x05
    5144:	89 23       	and	r24, r25
    5146:	83 83       	std	Z+3, r24	; 0x03
    5148:	16 96       	adiw	r26, 0x06	; 6
    514a:	ed 91       	ld	r30, X+
    514c:	fc 91       	ld	r31, X
    514e:	17 97       	sbiw	r26, 0x07	; 7
    5150:	30 97       	sbiw	r30, 0x00	; 0
    5152:	11 f0       	breq	.+4      	; 0x5158 <__vector_51+0x7a>
    5154:	cd 01       	movw	r24, r26
    5156:	19 95       	eicall
    5158:	ff 91       	pop	r31
    515a:	ef 91       	pop	r30
    515c:	df 91       	pop	r29
    515e:	cf 91       	pop	r28
    5160:	bf 91       	pop	r27
    5162:	af 91       	pop	r26
    5164:	9f 91       	pop	r25
    5166:	8f 91       	pop	r24
    5168:	7f 91       	pop	r23
    516a:	6f 91       	pop	r22
    516c:	5f 91       	pop	r21
    516e:	4f 91       	pop	r20
    5170:	3f 91       	pop	r19
    5172:	2f 91       	pop	r18
    5174:	0f 90       	pop	r0
    5176:	0b be       	out	0x3b, r0	; 59
    5178:	0f 90       	pop	r0
    517a:	0f be       	out	0x3f, r0	; 63
    517c:	0f 90       	pop	r0
    517e:	1f 90       	pop	r1
    5180:	18 95       	reti

00005182 <__vector_52>:
    5182:	1f 92       	push	r1
    5184:	0f 92       	push	r0
    5186:	0f b6       	in	r0, 0x3f	; 63
    5188:	0f 92       	push	r0
    518a:	11 24       	eor	r1, r1
    518c:	0b b6       	in	r0, 0x3b	; 59
    518e:	0f 92       	push	r0
    5190:	2f 93       	push	r18
    5192:	8f 93       	push	r24
    5194:	9f 93       	push	r25
    5196:	af 93       	push	r26
    5198:	bf 93       	push	r27
    519a:	ef 93       	push	r30
    519c:	ff 93       	push	r31
    519e:	e0 91 44 17 	lds	r30, 0x1744	; 0x801744 <_ser_handle+0x4>
    51a2:	f0 91 45 17 	lds	r31, 0x1745	; 0x801745 <_ser_handle+0x5>
    51a6:	30 97       	sbiw	r30, 0x00	; 0
    51a8:	b9 f0       	breq	.+46     	; 0x51d8 <__vector_52+0x56>
    51aa:	02 80       	ldd	r0, Z+2	; 0x02
    51ac:	f3 81       	ldd	r31, Z+3	; 0x03
    51ae:	e0 2d       	mov	r30, r0
    51b0:	93 81       	ldd	r25, Z+3	; 0x03
    51b2:	82 81       	ldd	r24, Z+2	; 0x02
    51b4:	98 17       	cp	r25, r24
    51b6:	b1 f0       	breq	.+44     	; 0x51e4 <__vector_52+0x62>
    51b8:	92 81       	ldd	r25, Z+2	; 0x02
    51ba:	85 81       	ldd	r24, Z+5	; 0x05
    51bc:	28 2f       	mov	r18, r24
    51be:	26 95       	lsr	r18
    51c0:	29 23       	and	r18, r25
    51c2:	a0 81       	ld	r26, Z
    51c4:	b1 81       	ldd	r27, Z+1	; 0x01
    51c6:	a2 0f       	add	r26, r18
    51c8:	b1 1d       	adc	r27, r1
    51ca:	2c 91       	ld	r18, X
    51cc:	9f 5f       	subi	r25, 0xFF	; 255
    51ce:	89 23       	and	r24, r25
    51d0:	82 83       	std	Z+2, r24	; 0x02
    51d2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    51d6:	0b c0       	rjmp	.+22     	; 0x51ee <__vector_52+0x6c>
    51d8:	e1 ed       	ldi	r30, 0xD1	; 209
    51da:	f0 e0       	ldi	r31, 0x00	; 0
    51dc:	80 81       	ld	r24, Z
    51de:	8f 7d       	andi	r24, 0xDF	; 223
    51e0:	80 83       	st	Z, r24
    51e2:	05 c0       	rjmp	.+10     	; 0x51ee <__vector_52+0x6c>
    51e4:	e1 ed       	ldi	r30, 0xD1	; 209
    51e6:	f0 e0       	ldi	r31, 0x00	; 0
    51e8:	80 81       	ld	r24, Z
    51ea:	8f 7d       	andi	r24, 0xDF	; 223
    51ec:	80 83       	st	Z, r24
    51ee:	ff 91       	pop	r31
    51f0:	ef 91       	pop	r30
    51f2:	bf 91       	pop	r27
    51f4:	af 91       	pop	r26
    51f6:	9f 91       	pop	r25
    51f8:	8f 91       	pop	r24
    51fa:	2f 91       	pop	r18
    51fc:	0f 90       	pop	r0
    51fe:	0b be       	out	0x3b, r0	; 59
    5200:	0f 90       	pop	r0
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	0f 90       	pop	r0
    5206:	1f 90       	pop	r1
    5208:	18 95       	reti

0000520a <__vector_54>:
    520a:	1f 92       	push	r1
    520c:	0f 92       	push	r0
    520e:	0f b6       	in	r0, 0x3f	; 63
    5210:	0f 92       	push	r0
    5212:	11 24       	eor	r1, r1
    5214:	0b b6       	in	r0, 0x3b	; 59
    5216:	0f 92       	push	r0
    5218:	2f 93       	push	r18
    521a:	3f 93       	push	r19
    521c:	4f 93       	push	r20
    521e:	5f 93       	push	r21
    5220:	6f 93       	push	r22
    5222:	7f 93       	push	r23
    5224:	8f 93       	push	r24
    5226:	9f 93       	push	r25
    5228:	af 93       	push	r26
    522a:	bf 93       	push	r27
    522c:	cf 93       	push	r28
    522e:	df 93       	push	r29
    5230:	ef 93       	push	r30
    5232:	ff 93       	push	r31
    5234:	a0 91 46 17 	lds	r26, 0x1746	; 0x801746 <_ser_handle+0x6>
    5238:	b0 91 47 17 	lds	r27, 0x1747	; 0x801747 <_ser_handle+0x7>
    523c:	10 97       	sbiw	r26, 0x00	; 0
    523e:	11 f1       	breq	.+68     	; 0x5284 <__vector_54+0x7a>
    5240:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5244:	14 96       	adiw	r26, 0x04	; 4
    5246:	ed 91       	ld	r30, X+
    5248:	fc 91       	ld	r31, X
    524a:	15 97       	sbiw	r26, 0x05	; 5
    524c:	93 81       	ldd	r25, Z+3	; 0x03
    524e:	82 81       	ldd	r24, Z+2	; 0x02
    5250:	25 81       	ldd	r18, Z+5	; 0x05
    5252:	98 1b       	sub	r25, r24
    5254:	92 23       	and	r25, r18
    5256:	84 81       	ldd	r24, Z+4	; 0x04
    5258:	98 17       	cp	r25, r24
    525a:	61 f0       	breq	.+24     	; 0x5274 <__vector_54+0x6a>
    525c:	83 81       	ldd	r24, Z+3	; 0x03
    525e:	26 95       	lsr	r18
    5260:	28 23       	and	r18, r24
    5262:	c0 81       	ld	r28, Z
    5264:	d1 81       	ldd	r29, Z+1	; 0x01
    5266:	c2 0f       	add	r28, r18
    5268:	d1 1d       	adc	r29, r1
    526a:	68 83       	st	Y, r22
    526c:	8f 5f       	subi	r24, 0xFF	; 255
    526e:	95 81       	ldd	r25, Z+5	; 0x05
    5270:	89 23       	and	r24, r25
    5272:	83 83       	std	Z+3, r24	; 0x03
    5274:	16 96       	adiw	r26, 0x06	; 6
    5276:	ed 91       	ld	r30, X+
    5278:	fc 91       	ld	r31, X
    527a:	17 97       	sbiw	r26, 0x07	; 7
    527c:	30 97       	sbiw	r30, 0x00	; 0
    527e:	11 f0       	breq	.+4      	; 0x5284 <__vector_54+0x7a>
    5280:	cd 01       	movw	r24, r26
    5282:	19 95       	eicall
    5284:	ff 91       	pop	r31
    5286:	ef 91       	pop	r30
    5288:	df 91       	pop	r29
    528a:	cf 91       	pop	r28
    528c:	bf 91       	pop	r27
    528e:	af 91       	pop	r26
    5290:	9f 91       	pop	r25
    5292:	8f 91       	pop	r24
    5294:	7f 91       	pop	r23
    5296:	6f 91       	pop	r22
    5298:	5f 91       	pop	r21
    529a:	4f 91       	pop	r20
    529c:	3f 91       	pop	r19
    529e:	2f 91       	pop	r18
    52a0:	0f 90       	pop	r0
    52a2:	0b be       	out	0x3b, r0	; 59
    52a4:	0f 90       	pop	r0
    52a6:	0f be       	out	0x3f, r0	; 63
    52a8:	0f 90       	pop	r0
    52aa:	1f 90       	pop	r1
    52ac:	18 95       	reti

000052ae <__vector_55>:
    52ae:	1f 92       	push	r1
    52b0:	0f 92       	push	r0
    52b2:	0f b6       	in	r0, 0x3f	; 63
    52b4:	0f 92       	push	r0
    52b6:	11 24       	eor	r1, r1
    52b8:	0b b6       	in	r0, 0x3b	; 59
    52ba:	0f 92       	push	r0
    52bc:	2f 93       	push	r18
    52be:	8f 93       	push	r24
    52c0:	9f 93       	push	r25
    52c2:	af 93       	push	r26
    52c4:	bf 93       	push	r27
    52c6:	ef 93       	push	r30
    52c8:	ff 93       	push	r31
    52ca:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <_ser_handle+0x6>
    52ce:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <_ser_handle+0x7>
    52d2:	30 97       	sbiw	r30, 0x00	; 0
    52d4:	b9 f0       	breq	.+46     	; 0x5304 <__vector_55+0x56>
    52d6:	02 80       	ldd	r0, Z+2	; 0x02
    52d8:	f3 81       	ldd	r31, Z+3	; 0x03
    52da:	e0 2d       	mov	r30, r0
    52dc:	93 81       	ldd	r25, Z+3	; 0x03
    52de:	82 81       	ldd	r24, Z+2	; 0x02
    52e0:	98 17       	cp	r25, r24
    52e2:	b1 f0       	breq	.+44     	; 0x5310 <__vector_55+0x62>
    52e4:	92 81       	ldd	r25, Z+2	; 0x02
    52e6:	85 81       	ldd	r24, Z+5	; 0x05
    52e8:	28 2f       	mov	r18, r24
    52ea:	26 95       	lsr	r18
    52ec:	29 23       	and	r18, r25
    52ee:	a0 81       	ld	r26, Z
    52f0:	b1 81       	ldd	r27, Z+1	; 0x01
    52f2:	a2 0f       	add	r26, r18
    52f4:	b1 1d       	adc	r27, r1
    52f6:	2c 91       	ld	r18, X
    52f8:	9f 5f       	subi	r25, 0xFF	; 255
    52fa:	89 23       	and	r24, r25
    52fc:	82 83       	std	Z+2, r24	; 0x02
    52fe:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5302:	0b c0       	rjmp	.+22     	; 0x531a <__vector_55+0x6c>
    5304:	e1 e3       	ldi	r30, 0x31	; 49
    5306:	f1 e0       	ldi	r31, 0x01	; 1
    5308:	80 81       	ld	r24, Z
    530a:	8f 7d       	andi	r24, 0xDF	; 223
    530c:	80 83       	st	Z, r24
    530e:	05 c0       	rjmp	.+10     	; 0x531a <__vector_55+0x6c>
    5310:	e1 e3       	ldi	r30, 0x31	; 49
    5312:	f1 e0       	ldi	r31, 0x01	; 1
    5314:	80 81       	ld	r24, Z
    5316:	8f 7d       	andi	r24, 0xDF	; 223
    5318:	80 83       	st	Z, r24
    531a:	ff 91       	pop	r31
    531c:	ef 91       	pop	r30
    531e:	bf 91       	pop	r27
    5320:	af 91       	pop	r26
    5322:	9f 91       	pop	r25
    5324:	8f 91       	pop	r24
    5326:	2f 91       	pop	r18
    5328:	0f 90       	pop	r0
    532a:	0b be       	out	0x3b, r0	; 59
    532c:	0f 90       	pop	r0
    532e:	0f be       	out	0x3f, r0	; 63
    5330:	0f 90       	pop	r0
    5332:	1f 90       	pop	r1
    5334:	18 95       	reti

00005336 <usart_getchar>:
    5336:	cf 93       	push	r28
    5338:	df 93       	push	r29
    533a:	1f 92       	push	r1
    533c:	cd b7       	in	r28, 0x3d	; 61
    533e:	de b7       	in	r29, 0x3e	; 62
    5340:	be 01       	movw	r22, r28
    5342:	6f 5f       	subi	r22, 0xFF	; 255
    5344:	7f 4f       	sbci	r23, 0xFF	; 255
    5346:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <_com_serial_instance>
    534a:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <_com_serial_instance+0x1>
    534e:	7b dd       	rcall	.-1290   	; 0x4e46 <serial_getByte>
    5350:	81 11       	cpse	r24, r1
    5352:	f6 cf       	rjmp	.-20     	; 0x5340 <usart_getchar+0xa>
    5354:	89 81       	ldd	r24, Y+1	; 0x01
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	0f 90       	pop	r0
    535a:	df 91       	pop	r29
    535c:	cf 91       	pop	r28
    535e:	08 95       	ret

00005360 <usart_putchar>:
    5360:	68 2f       	mov	r22, r24
    5362:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <_com_serial_instance>
    5366:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <_com_serial_instance+0x1>
    536a:	ed dc       	rcall	.-1574   	; 0x4d46 <serial_sendByte>
    536c:	80 e0       	ldi	r24, 0x00	; 0
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	08 95       	ret

00005372 <stdio_initialise>:
    5372:	8f 92       	push	r8
    5374:	9f 92       	push	r9
    5376:	af 92       	push	r10
    5378:	cf 92       	push	r12
    537a:	ef 92       	push	r14
    537c:	0f 93       	push	r16
    537e:	81 2c       	mov	r8, r1
    5380:	91 2c       	mov	r9, r1
    5382:	68 94       	set
    5384:	aa 24       	eor	r10, r10
    5386:	a7 f8       	bld	r10, 7
    5388:	68 94       	set
    538a:	cc 24       	eor	r12, r12
    538c:	c7 f8       	bld	r12, 7
    538e:	e1 2c       	mov	r14, r1
    5390:	00 e0       	ldi	r16, 0x00	; 0
    5392:	23 e0       	ldi	r18, 0x03	; 3
    5394:	40 e0       	ldi	r20, 0x00	; 0
    5396:	51 ee       	ldi	r21, 0xE1	; 225
    5398:	60 e0       	ldi	r22, 0x00	; 0
    539a:	70 e0       	ldi	r23, 0x00	; 0
    539c:	33 dc       	rcall	.-1946   	; 0x4c04 <serial_create>
    539e:	90 93 49 17 	sts	0x1749, r25	; 0x801749 <_com_serial_instance+0x1>
    53a2:	80 93 48 17 	sts	0x1748, r24	; 0x801748 <_com_serial_instance>
    53a6:	e1 ea       	ldi	r30, 0xA1	; 161
    53a8:	f7 e1       	ldi	r31, 0x17	; 23
    53aa:	83 e1       	ldi	r24, 0x13	; 19
    53ac:	92 e0       	ldi	r25, 0x02	; 2
    53ae:	91 83       	std	Z+1, r25	; 0x01
    53b0:	80 83       	st	Z, r24
    53b2:	93 83       	std	Z+3, r25	; 0x03
    53b4:	82 83       	std	Z+2, r24	; 0x02
    53b6:	0f 91       	pop	r16
    53b8:	ef 90       	pop	r14
    53ba:	cf 90       	pop	r12
    53bc:	af 90       	pop	r10
    53be:	9f 90       	pop	r9
    53c0:	8f 90       	pop	r8
    53c2:	08 95       	ret

000053c4 <_turn_off>:
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	fc 01       	movw	r30, r24
    53c8:	ee 0f       	add	r30, r30
    53ca:	ff 1f       	adc	r31, r31
    53cc:	e8 0f       	add	r30, r24
    53ce:	f9 1f       	adc	r31, r25
    53d0:	ee 0f       	add	r30, r30
    53d2:	ff 1f       	adc	r31, r31
    53d4:	e6 5b       	subi	r30, 0xB6	; 182
    53d6:	f8 4e       	sbci	r31, 0xE8	; 232
    53d8:	23 81       	ldd	r18, Z+3	; 0x03
    53da:	21 11       	cpse	r18, r1
    53dc:	1f c0       	rjmp	.+62     	; 0x541c <_turn_off+0x58>
    53de:	9c 01       	movw	r18, r24
    53e0:	22 0f       	add	r18, r18
    53e2:	33 1f       	adc	r19, r19
    53e4:	f9 01       	movw	r30, r18
    53e6:	e8 0f       	add	r30, r24
    53e8:	f9 1f       	adc	r31, r25
    53ea:	ee 0f       	add	r30, r30
    53ec:	ff 1f       	adc	r31, r31
    53ee:	e6 5b       	subi	r30, 0xB6	; 182
    53f0:	f8 4e       	sbci	r31, 0xE8	; 232
    53f2:	a0 81       	ld	r26, Z
    53f4:	b1 81       	ldd	r27, Z+1	; 0x01
    53f6:	4c 91       	ld	r20, X
    53f8:	f9 01       	movw	r30, r18
    53fa:	e8 0f       	add	r30, r24
    53fc:	f9 1f       	adc	r31, r25
    53fe:	ee 0f       	add	r30, r30
    5400:	ff 1f       	adc	r31, r31
    5402:	e6 5b       	subi	r30, 0xB6	; 182
    5404:	f8 4e       	sbci	r31, 0xE8	; 232
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	02 80       	ldd	r0, Z+2	; 0x02
    540c:	02 c0       	rjmp	.+4      	; 0x5412 <_turn_off+0x4e>
    540e:	88 0f       	add	r24, r24
    5410:	99 1f       	adc	r25, r25
    5412:	0a 94       	dec	r0
    5414:	e2 f7       	brpl	.-8      	; 0x540e <_turn_off+0x4a>
    5416:	84 2b       	or	r24, r20
    5418:	8c 93       	st	X, r24
    541a:	08 95       	ret
    541c:	fc 01       	movw	r30, r24
    541e:	ee 0f       	add	r30, r30
    5420:	ff 1f       	adc	r31, r31
    5422:	df 01       	movw	r26, r30
    5424:	a8 0f       	add	r26, r24
    5426:	b9 1f       	adc	r27, r25
    5428:	aa 0f       	add	r26, r26
    542a:	bb 1f       	adc	r27, r27
    542c:	a6 5b       	subi	r26, 0xB6	; 182
    542e:	b8 4e       	sbci	r27, 0xE8	; 232
    5430:	0d 90       	ld	r0, X+
    5432:	bc 91       	ld	r27, X
    5434:	a0 2d       	mov	r26, r0
    5436:	2c 91       	ld	r18, X
    5438:	e8 0f       	add	r30, r24
    543a:	f9 1f       	adc	r31, r25
    543c:	ee 0f       	add	r30, r30
    543e:	ff 1f       	adc	r31, r31
    5440:	e6 5b       	subi	r30, 0xB6	; 182
    5442:	f8 4e       	sbci	r31, 0xE8	; 232
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	02 80       	ldd	r0, Z+2	; 0x02
    544a:	02 c0       	rjmp	.+4      	; 0x5450 <_turn_off+0x8c>
    544c:	88 0f       	add	r24, r24
    544e:	99 1f       	adc	r25, r25
    5450:	0a 94       	dec	r0
    5452:	e2 f7       	brpl	.-8      	; 0x544c <_turn_off+0x88>
    5454:	80 95       	com	r24
    5456:	82 23       	and	r24, r18
    5458:	8c 93       	st	X, r24
    545a:	08 95       	ret

0000545c <_turn_on>:
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	fc 01       	movw	r30, r24
    5460:	ee 0f       	add	r30, r30
    5462:	ff 1f       	adc	r31, r31
    5464:	e8 0f       	add	r30, r24
    5466:	f9 1f       	adc	r31, r25
    5468:	ee 0f       	add	r30, r30
    546a:	ff 1f       	adc	r31, r31
    546c:	e6 5b       	subi	r30, 0xB6	; 182
    546e:	f8 4e       	sbci	r31, 0xE8	; 232
    5470:	23 81       	ldd	r18, Z+3	; 0x03
    5472:	21 11       	cpse	r18, r1
    5474:	20 c0       	rjmp	.+64     	; 0x54b6 <_turn_on+0x5a>
    5476:	9c 01       	movw	r18, r24
    5478:	22 0f       	add	r18, r18
    547a:	33 1f       	adc	r19, r19
    547c:	f9 01       	movw	r30, r18
    547e:	e8 0f       	add	r30, r24
    5480:	f9 1f       	adc	r31, r25
    5482:	ee 0f       	add	r30, r30
    5484:	ff 1f       	adc	r31, r31
    5486:	e6 5b       	subi	r30, 0xB6	; 182
    5488:	f8 4e       	sbci	r31, 0xE8	; 232
    548a:	a0 81       	ld	r26, Z
    548c:	b1 81       	ldd	r27, Z+1	; 0x01
    548e:	4c 91       	ld	r20, X
    5490:	f9 01       	movw	r30, r18
    5492:	e8 0f       	add	r30, r24
    5494:	f9 1f       	adc	r31, r25
    5496:	ee 0f       	add	r30, r30
    5498:	ff 1f       	adc	r31, r31
    549a:	e6 5b       	subi	r30, 0xB6	; 182
    549c:	f8 4e       	sbci	r31, 0xE8	; 232
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	02 80       	ldd	r0, Z+2	; 0x02
    54a4:	02 c0       	rjmp	.+4      	; 0x54aa <_turn_on+0x4e>
    54a6:	88 0f       	add	r24, r24
    54a8:	99 1f       	adc	r25, r25
    54aa:	0a 94       	dec	r0
    54ac:	e2 f7       	brpl	.-8      	; 0x54a6 <_turn_on+0x4a>
    54ae:	80 95       	com	r24
    54b0:	84 23       	and	r24, r20
    54b2:	8c 93       	st	X, r24
    54b4:	08 95       	ret
    54b6:	fc 01       	movw	r30, r24
    54b8:	ee 0f       	add	r30, r30
    54ba:	ff 1f       	adc	r31, r31
    54bc:	df 01       	movw	r26, r30
    54be:	a8 0f       	add	r26, r24
    54c0:	b9 1f       	adc	r27, r25
    54c2:	aa 0f       	add	r26, r26
    54c4:	bb 1f       	adc	r27, r27
    54c6:	a6 5b       	subi	r26, 0xB6	; 182
    54c8:	b8 4e       	sbci	r27, 0xE8	; 232
    54ca:	0d 90       	ld	r0, X+
    54cc:	bc 91       	ld	r27, X
    54ce:	a0 2d       	mov	r26, r0
    54d0:	2c 91       	ld	r18, X
    54d2:	e8 0f       	add	r30, r24
    54d4:	f9 1f       	adc	r31, r25
    54d6:	ee 0f       	add	r30, r30
    54d8:	ff 1f       	adc	r31, r31
    54da:	e6 5b       	subi	r30, 0xB6	; 182
    54dc:	f8 4e       	sbci	r31, 0xE8	; 232
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	02 80       	ldd	r0, Z+2	; 0x02
    54e4:	02 c0       	rjmp	.+4      	; 0x54ea <_turn_on+0x8e>
    54e6:	88 0f       	add	r24, r24
    54e8:	99 1f       	adc	r25, r25
    54ea:	0a 94       	dec	r0
    54ec:	e2 f7       	brpl	.-8      	; 0x54e6 <_turn_on+0x8a>
    54ee:	82 2b       	or	r24, r18
    54f0:	8c 93       	st	X, r24
    54f2:	08 95       	ret

000054f4 <status_leds_slowBlink>:
    54f4:	cf 93       	push	r28
    54f6:	df 93       	push	r29
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	fc 01       	movw	r30, r24
    54fc:	ee 0f       	add	r30, r30
    54fe:	ff 1f       	adc	r31, r31
    5500:	df 01       	movw	r26, r30
    5502:	a8 0f       	add	r26, r24
    5504:	b9 1f       	adc	r27, r25
    5506:	aa 0f       	add	r26, r26
    5508:	bb 1f       	adc	r27, r27
    550a:	a6 5b       	subi	r26, 0xB6	; 182
    550c:	b8 4e       	sbci	r27, 0xE8	; 232
    550e:	cd 91       	ld	r28, X+
    5510:	dc 91       	ld	r29, X
    5512:	11 97       	sbiw	r26, 0x01	; 1
    5514:	48 81       	ld	r20, Y
    5516:	21 e0       	ldi	r18, 0x01	; 1
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	12 96       	adiw	r26, 0x02	; 2
    551c:	0c 90       	ld	r0, X
    551e:	12 97       	sbiw	r26, 0x02	; 2
    5520:	02 c0       	rjmp	.+4      	; 0x5526 <status_leds_slowBlink+0x32>
    5522:	22 0f       	add	r18, r18
    5524:	33 1f       	adc	r19, r19
    5526:	0a 94       	dec	r0
    5528:	e2 f7       	brpl	.-8      	; 0x5522 <status_leds_slowBlink+0x2e>
    552a:	24 27       	eor	r18, r20
    552c:	28 83       	st	Y, r18
    552e:	fd 01       	movw	r30, r26
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	84 83       	std	Z+4, r24	; 0x04
    5534:	df 91       	pop	r29
    5536:	cf 91       	pop	r28
    5538:	08 95       	ret

0000553a <status_leds_fastBlink>:
    553a:	cf 93       	push	r28
    553c:	df 93       	push	r29
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	fc 01       	movw	r30, r24
    5542:	ee 0f       	add	r30, r30
    5544:	ff 1f       	adc	r31, r31
    5546:	df 01       	movw	r26, r30
    5548:	a8 0f       	add	r26, r24
    554a:	b9 1f       	adc	r27, r25
    554c:	aa 0f       	add	r26, r26
    554e:	bb 1f       	adc	r27, r27
    5550:	a6 5b       	subi	r26, 0xB6	; 182
    5552:	b8 4e       	sbci	r27, 0xE8	; 232
    5554:	cd 91       	ld	r28, X+
    5556:	dc 91       	ld	r29, X
    5558:	11 97       	sbiw	r26, 0x01	; 1
    555a:	48 81       	ld	r20, Y
    555c:	21 e0       	ldi	r18, 0x01	; 1
    555e:	30 e0       	ldi	r19, 0x00	; 0
    5560:	12 96       	adiw	r26, 0x02	; 2
    5562:	0c 90       	ld	r0, X
    5564:	12 97       	sbiw	r26, 0x02	; 2
    5566:	02 c0       	rjmp	.+4      	; 0x556c <status_leds_fastBlink+0x32>
    5568:	22 0f       	add	r18, r18
    556a:	33 1f       	adc	r19, r19
    556c:	0a 94       	dec	r0
    556e:	e2 f7       	brpl	.-8      	; 0x5568 <status_leds_fastBlink+0x2e>
    5570:	24 27       	eor	r18, r20
    5572:	28 83       	st	Y, r18
    5574:	fd 01       	movw	r30, r26
    5576:	82 e0       	ldi	r24, 0x02	; 2
    5578:	84 83       	std	Z+4, r24	; 0x04
    557a:	df 91       	pop	r29
    557c:	cf 91       	pop	r28
    557e:	08 95       	ret

00005580 <status_leds_ledOn>:
    5580:	28 2f       	mov	r18, r24
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	f9 01       	movw	r30, r18
    5586:	ee 0f       	add	r30, r30
    5588:	ff 1f       	adc	r31, r31
    558a:	e2 0f       	add	r30, r18
    558c:	f3 1f       	adc	r31, r19
    558e:	ee 0f       	add	r30, r30
    5590:	ff 1f       	adc	r31, r31
    5592:	e6 5b       	subi	r30, 0xB6	; 182
    5594:	f8 4e       	sbci	r31, 0xE8	; 232
    5596:	93 e0       	ldi	r25, 0x03	; 3
    5598:	94 83       	std	Z+4, r25	; 0x04
    559a:	60 cf       	rjmp	.-320    	; 0x545c <_turn_on>
    559c:	08 95       	ret

0000559e <status_leds_ledOff>:
    559e:	28 2f       	mov	r18, r24
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	f9 01       	movw	r30, r18
    55a4:	ee 0f       	add	r30, r30
    55a6:	ff 1f       	adc	r31, r31
    55a8:	e2 0f       	add	r30, r18
    55aa:	f3 1f       	adc	r31, r19
    55ac:	ee 0f       	add	r30, r30
    55ae:	ff 1f       	adc	r31, r31
    55b0:	e6 5b       	subi	r30, 0xB6	; 182
    55b2:	f8 4e       	sbci	r31, 0xE8	; 232
    55b4:	94 e0       	ldi	r25, 0x04	; 4
    55b6:	94 83       	std	Z+4, r25	; 0x04
    55b8:	05 cf       	rjmp	.-502    	; 0x53c4 <_turn_off>
    55ba:	08 95       	ret

000055bc <status_leds_longPuls>:
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	fc 01       	movw	r30, r24
    55c0:	ee 0f       	add	r30, r30
    55c2:	ff 1f       	adc	r31, r31
    55c4:	df 01       	movw	r26, r30
    55c6:	a8 0f       	add	r26, r24
    55c8:	b9 1f       	adc	r27, r25
    55ca:	aa 0f       	add	r26, r26
    55cc:	bb 1f       	adc	r27, r27
    55ce:	a6 5b       	subi	r26, 0xB6	; 182
    55d0:	b8 4e       	sbci	r27, 0xE8	; 232
    55d2:	24 e0       	ldi	r18, 0x04	; 4
    55d4:	15 96       	adiw	r26, 0x05	; 5
    55d6:	2c 93       	st	X, r18
    55d8:	15 97       	sbiw	r26, 0x05	; 5
    55da:	fd 01       	movw	r30, r26
    55dc:	14 82       	std	Z+4, r1	; 0x04
    55de:	08 95       	ret

000055e0 <status_leds_shortPuls>:
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	fc 01       	movw	r30, r24
    55e4:	ee 0f       	add	r30, r30
    55e6:	ff 1f       	adc	r31, r31
    55e8:	df 01       	movw	r26, r30
    55ea:	a8 0f       	add	r26, r24
    55ec:	b9 1f       	adc	r27, r25
    55ee:	aa 0f       	add	r26, r26
    55f0:	bb 1f       	adc	r27, r27
    55f2:	a6 5b       	subi	r26, 0xB6	; 182
    55f4:	b8 4e       	sbci	r27, 0xE8	; 232
    55f6:	21 e0       	ldi	r18, 0x01	; 1
    55f8:	15 96       	adiw	r26, 0x05	; 5
    55fa:	2c 93       	st	X, r18
    55fc:	15 97       	sbiw	r26, 0x05	; 5
    55fe:	fd 01       	movw	r30, r26
    5600:	14 82       	std	Z+4, r1	; 0x04
    5602:	08 95       	ret

00005604 <_initTwiInterface>:
    5604:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <_twiIsInitiated>
    5608:	81 11       	cpse	r24, r1
    560a:	0c c0       	rjmp	.+24     	; 0x5624 <_initTwiInterface+0x20>
    560c:	8c e0       	ldi	r24, 0x0C	; 12
    560e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5612:	8f ef       	ldi	r24, 0xFF	; 255
    5614:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5618:	84 e0       	ldi	r24, 0x04	; 4
    561a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    561e:	81 e0       	ldi	r24, 0x01	; 1
    5620:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <_twiIsInitiated>
    5624:	08 95       	ret

00005626 <twiCreate>:
    5626:	af 92       	push	r10
    5628:	bf 92       	push	r11
    562a:	cf 92       	push	r12
    562c:	df 92       	push	r13
    562e:	ef 92       	push	r14
    5630:	ff 92       	push	r15
    5632:	0f 93       	push	r16
    5634:	1f 93       	push	r17
    5636:	cf 93       	push	r28
    5638:	df 93       	push	r29
    563a:	a8 2e       	mov	r10, r24
    563c:	b6 2e       	mov	r11, r22
    563e:	69 01       	movw	r12, r18
    5640:	7a 01       	movw	r14, r20
    5642:	84 e0       	ldi	r24, 0x04	; 4
    5644:	90 e0       	ldi	r25, 0x00	; 0
    5646:	cb d3       	rcall	.+1942   	; 0x5dde <malloc>
    5648:	ec 01       	movw	r28, r24
    564a:	89 2b       	or	r24, r25
    564c:	61 f1       	breq	.+88     	; 0x56a6 <twiCreate+0x80>
    564e:	a8 82       	st	Y, r10
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	b8 12       	cpse	r11, r24
    5654:	12 c0       	rjmp	.+36     	; 0x567a <twiCreate+0x54>
    5656:	c7 01       	movw	r24, r14
    5658:	b6 01       	movw	r22, r12
    565a:	20 ea       	ldi	r18, 0xA0	; 160
    565c:	36 e8       	ldi	r19, 0x86	; 134
    565e:	41 e0       	ldi	r20, 0x01	; 1
    5660:	50 e0       	ldi	r21, 0x00	; 0
    5662:	79 d3       	rcall	.+1778   	; 0x5d56 <__udivmodsi4>
    5664:	da 01       	movw	r26, r20
    5666:	c9 01       	movw	r24, r18
    5668:	40 97       	sbiw	r24, 0x10	; 16
    566a:	a1 09       	sbc	r26, r1
    566c:	b1 09       	sbc	r27, r1
    566e:	b6 95       	lsr	r27
    5670:	a7 95       	ror	r26
    5672:	97 95       	ror	r25
    5674:	87 95       	ror	r24
    5676:	89 83       	std	Y+1, r24	; 0x01
    5678:	11 c0       	rjmp	.+34     	; 0x569c <twiCreate+0x76>
    567a:	c7 01       	movw	r24, r14
    567c:	b6 01       	movw	r22, r12
    567e:	20 e8       	ldi	r18, 0x80	; 128
    5680:	3a e1       	ldi	r19, 0x1A	; 26
    5682:	46 e0       	ldi	r20, 0x06	; 6
    5684:	50 e0       	ldi	r21, 0x00	; 0
    5686:	67 d3       	rcall	.+1742   	; 0x5d56 <__udivmodsi4>
    5688:	da 01       	movw	r26, r20
    568a:	c9 01       	movw	r24, r18
    568c:	40 97       	sbiw	r24, 0x10	; 16
    568e:	a1 09       	sbc	r26, r1
    5690:	b1 09       	sbc	r27, r1
    5692:	b6 95       	lsr	r27
    5694:	a7 95       	ror	r26
    5696:	97 95       	ror	r25
    5698:	87 95       	ror	r24
    569a:	89 83       	std	Y+1, r24	; 0x01
    569c:	1b 83       	std	Y+3, r17	; 0x03
    569e:	0a 83       	std	Y+2, r16	; 0x02
    56a0:	8c 2f       	mov	r24, r28
    56a2:	9d 2f       	mov	r25, r29
    56a4:	02 c0       	rjmp	.+4      	; 0x56aa <twiCreate+0x84>
    56a6:	80 e0       	ldi	r24, 0x00	; 0
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	1f 91       	pop	r17
    56b0:	0f 91       	pop	r16
    56b2:	ff 90       	pop	r15
    56b4:	ef 90       	pop	r14
    56b6:	df 90       	pop	r13
    56b8:	cf 90       	pop	r12
    56ba:	bf 90       	pop	r11
    56bc:	af 90       	pop	r10
    56be:	08 95       	ret

000056c0 <twiIsBusy>:
    56c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56c4:	81 70       	andi	r24, 0x01	; 1
    56c6:	08 95       	ret

000056c8 <twiTransmit>:
    56c8:	ff 92       	push	r15
    56ca:	0f 93       	push	r16
    56cc:	1f 93       	push	r17
    56ce:	cf 93       	push	r28
    56d0:	df 93       	push	r29
    56d2:	00 97       	sbiw	r24, 0x00	; 0
    56d4:	d1 f1       	breq	.+116    	; 0x574a <twiTransmit+0x82>
    56d6:	4a 30       	cpi	r20, 0x0A	; 10
    56d8:	d0 f5       	brcc	.+116    	; 0x574e <twiTransmit+0x86>
    56da:	f4 2e       	mov	r15, r20
    56dc:	8b 01       	movw	r16, r22
    56de:	ec 01       	movw	r28, r24
    56e0:	ef df       	rcall	.-34     	; 0x56c0 <twiIsBusy>
    56e2:	81 11       	cpse	r24, r1
    56e4:	36 c0       	rjmp	.+108    	; 0x5752 <twiTransmit+0x8a>
    56e6:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <_twiCurrentHandler>
    56ea:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <_twiCurrentHandler+0x1>
    56ee:	c8 17       	cp	r28, r24
    56f0:	d9 07       	cpc	r29, r25
    56f2:	41 f0       	breq	.+16     	; 0x5704 <twiTransmit+0x3c>
    56f4:	87 df       	rcall	.-242    	; 0x5604 <_initTwiInterface>
    56f6:	89 81       	ldd	r24, Y+1	; 0x01
    56f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    56fc:	d0 93 64 17 	sts	0x1764, r29	; 0x801764 <_twiCurrentHandler+0x1>
    5700:	c0 93 63 17 	sts	0x1763, r28	; 0x801763 <_twiCurrentHandler>
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	8f 0d       	add	r24, r15
    5708:	80 93 65 17 	sts	0x1765, r24	; 0x801765 <_twiMessageLen>
    570c:	88 81       	ld	r24, Y
    570e:	88 0f       	add	r24, r24
    5710:	80 93 66 17 	sts	0x1766, r24	; 0x801766 <_twiMessageBuffer>
    5714:	ff 20       	and	r15, r15
    5716:	89 f0       	breq	.+34     	; 0x573a <twiTransmit+0x72>
    5718:	f8 01       	movw	r30, r16
    571a:	a7 e6       	ldi	r26, 0x67	; 103
    571c:	b7 e1       	ldi	r27, 0x17	; 23
    571e:	4f ef       	ldi	r20, 0xFF	; 255
    5720:	4f 0d       	add	r20, r15
    5722:	64 2f       	mov	r22, r20
    5724:	70 e0       	ldi	r23, 0x00	; 0
    5726:	cb 01       	movw	r24, r22
    5728:	01 96       	adiw	r24, 0x01	; 1
    572a:	b8 01       	movw	r22, r16
    572c:	68 0f       	add	r22, r24
    572e:	79 1f       	adc	r23, r25
    5730:	81 91       	ld	r24, Z+
    5732:	8d 93       	st	X+, r24
    5734:	e6 17       	cp	r30, r22
    5736:	f7 07       	cpc	r31, r23
    5738:	d9 f7       	brne	.-10     	; 0x5730 <twiTransmit+0x68>
    573a:	88 ef       	ldi	r24, 0xF8	; 248
    573c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5740:	85 ea       	ldi	r24, 0xA5	; 165
    5742:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5746:	84 e0       	ldi	r24, 0x04	; 4
    5748:	05 c0       	rjmp	.+10     	; 0x5754 <twiTransmit+0x8c>
    574a:	86 e0       	ldi	r24, 0x06	; 6
    574c:	03 c0       	rjmp	.+6      	; 0x5754 <twiTransmit+0x8c>
    574e:	87 e0       	ldi	r24, 0x07	; 7
    5750:	01 c0       	rjmp	.+2      	; 0x5754 <twiTransmit+0x8c>
    5752:	82 e0       	ldi	r24, 0x02	; 2
    5754:	df 91       	pop	r29
    5756:	cf 91       	pop	r28
    5758:	1f 91       	pop	r17
    575a:	0f 91       	pop	r16
    575c:	ff 90       	pop	r15
    575e:	08 95       	ret

00005760 <twiReceive>:
    5760:	1f 93       	push	r17
    5762:	cf 93       	push	r28
    5764:	df 93       	push	r29
    5766:	00 97       	sbiw	r24, 0x00	; 0
    5768:	29 f1       	breq	.+74     	; 0x57b4 <twiReceive+0x54>
    576a:	6b 30       	cpi	r22, 0x0B	; 11
    576c:	28 f5       	brcc	.+74     	; 0x57b8 <twiReceive+0x58>
    576e:	16 2f       	mov	r17, r22
    5770:	ec 01       	movw	r28, r24
    5772:	a6 df       	rcall	.-180    	; 0x56c0 <twiIsBusy>
    5774:	81 11       	cpse	r24, r1
    5776:	22 c0       	rjmp	.+68     	; 0x57bc <twiReceive+0x5c>
    5778:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <_twiCurrentHandler>
    577c:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <_twiCurrentHandler+0x1>
    5780:	c8 17       	cp	r28, r24
    5782:	d9 07       	cpc	r29, r25
    5784:	41 f0       	breq	.+16     	; 0x5796 <twiReceive+0x36>
    5786:	3e df       	rcall	.-388    	; 0x5604 <_initTwiInterface>
    5788:	89 81       	ldd	r24, Y+1	; 0x01
    578a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    578e:	d0 93 64 17 	sts	0x1764, r29	; 0x801764 <_twiCurrentHandler+0x1>
    5792:	c0 93 63 17 	sts	0x1763, r28	; 0x801763 <_twiCurrentHandler>
    5796:	10 93 65 17 	sts	0x1765, r17	; 0x801765 <_twiMessageLen>
    579a:	88 81       	ld	r24, Y
    579c:	88 0f       	add	r24, r24
    579e:	81 60       	ori	r24, 0x01	; 1
    57a0:	80 93 66 17 	sts	0x1766, r24	; 0x801766 <_twiMessageBuffer>
    57a4:	88 ef       	ldi	r24, 0xF8	; 248
    57a6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    57aa:	85 ea       	ldi	r24, 0xA5	; 165
    57ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57b0:	85 e0       	ldi	r24, 0x05	; 5
    57b2:	05 c0       	rjmp	.+10     	; 0x57be <twiReceive+0x5e>
    57b4:	86 e0       	ldi	r24, 0x06	; 6
    57b6:	03 c0       	rjmp	.+6      	; 0x57be <twiReceive+0x5e>
    57b8:	87 e0       	ldi	r24, 0x07	; 7
    57ba:	01 c0       	rjmp	.+2      	; 0x57be <twiReceive+0x5e>
    57bc:	82 e0       	ldi	r24, 0x02	; 2
    57be:	df 91       	pop	r29
    57c0:	cf 91       	pop	r28
    57c2:	1f 91       	pop	r17
    57c4:	08 95       	ret

000057c6 <__vector_39>:
    57c6:	1f 92       	push	r1
    57c8:	0f 92       	push	r0
    57ca:	0f b6       	in	r0, 0x3f	; 63
    57cc:	0f 92       	push	r0
    57ce:	11 24       	eor	r1, r1
    57d0:	0b b6       	in	r0, 0x3b	; 59
    57d2:	0f 92       	push	r0
    57d4:	2f 93       	push	r18
    57d6:	3f 93       	push	r19
    57d8:	4f 93       	push	r20
    57da:	5f 93       	push	r21
    57dc:	6f 93       	push	r22
    57de:	7f 93       	push	r23
    57e0:	8f 93       	push	r24
    57e2:	9f 93       	push	r25
    57e4:	af 93       	push	r26
    57e6:	bf 93       	push	r27
    57e8:	ef 93       	push	r30
    57ea:	ff 93       	push	r31
    57ec:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    57f0:	8e 2f       	mov	r24, r30
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	fc 01       	movw	r30, r24
    57f6:	38 97       	sbiw	r30, 0x08	; 8
    57f8:	e1 35       	cpi	r30, 0x51	; 81
    57fa:	f1 05       	cpc	r31, r1
    57fc:	08 f0       	brcs	.+2      	; 0x5800 <__vector_39+0x3a>
    57fe:	75 c0       	rjmp	.+234    	; 0x58ea <__vector_39+0x124>
    5800:	88 27       	eor	r24, r24
    5802:	e4 58       	subi	r30, 0x84	; 132
    5804:	ff 4f       	sbci	r31, 0xFF	; 255
    5806:	8f 4f       	sbci	r24, 0xFF	; 255
    5808:	c8 c2       	rjmp	.+1424   	; 0x5d9a <__tablejump2__>
    580a:	10 92 62 17 	sts	0x1762, r1	; 0x801762 <_index.1885>
    580e:	e0 91 62 17 	lds	r30, 0x1762	; 0x801762 <_index.1885>
    5812:	80 91 65 17 	lds	r24, 0x1765	; 0x801765 <_twiMessageLen>
    5816:	e8 17       	cp	r30, r24
    5818:	70 f4       	brcc	.+28     	; 0x5836 <__vector_39+0x70>
    581a:	81 e0       	ldi	r24, 0x01	; 1
    581c:	8e 0f       	add	r24, r30
    581e:	80 93 62 17 	sts	0x1762, r24	; 0x801762 <_index.1885>
    5822:	f0 e0       	ldi	r31, 0x00	; 0
    5824:	ea 59       	subi	r30, 0x9A	; 154
    5826:	f8 4e       	sbci	r31, 0xE8	; 232
    5828:	80 81       	ld	r24, Z
    582a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    582e:	85 e8       	ldi	r24, 0x85	; 133
    5830:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5834:	72 c0       	rjmp	.+228    	; 0x591a <__vector_39+0x154>
    5836:	84 e9       	ldi	r24, 0x94	; 148
    5838:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    583c:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <_twiCurrentHandler>
    5840:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <_twiCurrentHandler+0x1>
    5844:	dc 01       	movw	r26, r24
    5846:	12 96       	adiw	r26, 0x02	; 2
    5848:	ed 91       	ld	r30, X+
    584a:	fc 91       	ld	r31, X
    584c:	13 97       	sbiw	r26, 0x03	; 3
    584e:	30 97       	sbiw	r30, 0x00	; 0
    5850:	09 f4       	brne	.+2      	; 0x5854 <__vector_39+0x8e>
    5852:	63 c0       	rjmp	.+198    	; 0x591a <__vector_39+0x154>
    5854:	20 e0       	ldi	r18, 0x00	; 0
    5856:	40 e0       	ldi	r20, 0x00	; 0
    5858:	50 e0       	ldi	r21, 0x00	; 0
    585a:	64 e0       	ldi	r22, 0x04	; 4
    585c:	19 95       	eicall
    585e:	5d c0       	rjmp	.+186    	; 0x591a <__vector_39+0x154>
    5860:	e0 91 62 17 	lds	r30, 0x1762	; 0x801762 <_index.1885>
    5864:	81 e0       	ldi	r24, 0x01	; 1
    5866:	8e 0f       	add	r24, r30
    5868:	80 93 62 17 	sts	0x1762, r24	; 0x801762 <_index.1885>
    586c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5870:	f0 e0       	ldi	r31, 0x00	; 0
    5872:	ea 59       	subi	r30, 0x9A	; 154
    5874:	f8 4e       	sbci	r31, 0xE8	; 232
    5876:	80 83       	st	Z, r24
    5878:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    587c:	80 34       	cpi	r24, 0x40	; 64
    587e:	11 f4       	brne	.+4      	; 0x5884 <__vector_39+0xbe>
    5880:	10 92 62 17 	sts	0x1762, r1	; 0x801762 <_index.1885>
    5884:	20 91 62 17 	lds	r18, 0x1762	; 0x801762 <_index.1885>
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	80 91 65 17 	lds	r24, 0x1765	; 0x801765 <_twiMessageLen>
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	01 97       	sbiw	r24, 0x01	; 1
    5892:	28 17       	cp	r18, r24
    5894:	39 07       	cpc	r19, r25
    5896:	24 f4       	brge	.+8      	; 0x58a0 <__vector_39+0xda>
    5898:	85 ec       	ldi	r24, 0xC5	; 197
    589a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    589e:	3d c0       	rjmp	.+122    	; 0x591a <__vector_39+0x154>
    58a0:	85 e8       	ldi	r24, 0x85	; 133
    58a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58a6:	39 c0       	rjmp	.+114    	; 0x591a <__vector_39+0x154>
    58a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    58ac:	e0 91 62 17 	lds	r30, 0x1762	; 0x801762 <_index.1885>
    58b0:	f0 e0       	ldi	r31, 0x00	; 0
    58b2:	ea 59       	subi	r30, 0x9A	; 154
    58b4:	f8 4e       	sbci	r31, 0xE8	; 232
    58b6:	80 83       	st	Z, r24
    58b8:	84 e9       	ldi	r24, 0x94	; 148
    58ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58be:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <_twiCurrentHandler>
    58c2:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <_twiCurrentHandler+0x1>
    58c6:	dc 01       	movw	r26, r24
    58c8:	12 96       	adiw	r26, 0x02	; 2
    58ca:	ed 91       	ld	r30, X+
    58cc:	fc 91       	ld	r31, X
    58ce:	13 97       	sbiw	r26, 0x03	; 3
    58d0:	30 97       	sbiw	r30, 0x00	; 0
    58d2:	19 f1       	breq	.+70     	; 0x591a <__vector_39+0x154>
    58d4:	20 91 65 17 	lds	r18, 0x1765	; 0x801765 <_twiMessageLen>
    58d8:	46 e6       	ldi	r20, 0x66	; 102
    58da:	57 e1       	ldi	r21, 0x17	; 23
    58dc:	65 e0       	ldi	r22, 0x05	; 5
    58de:	19 95       	eicall
    58e0:	1c c0       	rjmp	.+56     	; 0x591a <__vector_39+0x154>
    58e2:	85 ea       	ldi	r24, 0xA5	; 165
    58e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58e8:	18 c0       	rjmp	.+48     	; 0x591a <__vector_39+0x154>
    58ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    58ee:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    58f2:	84 e0       	ldi	r24, 0x04	; 4
    58f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58f8:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <_twiCurrentHandler>
    58fc:	90 91 64 17 	lds	r25, 0x1764	; 0x801764 <_twiCurrentHandler+0x1>
    5900:	dc 01       	movw	r26, r24
    5902:	12 96       	adiw	r26, 0x02	; 2
    5904:	ed 91       	ld	r30, X+
    5906:	fc 91       	ld	r31, X
    5908:	13 97       	sbiw	r26, 0x03	; 3
    590a:	30 97       	sbiw	r30, 0x00	; 0
    590c:	31 f0       	breq	.+12     	; 0x591a <__vector_39+0x154>
    590e:	20 e0       	ldi	r18, 0x00	; 0
    5910:	40 e0       	ldi	r20, 0x00	; 0
    5912:	50 e0       	ldi	r21, 0x00	; 0
    5914:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5918:	19 95       	eicall
    591a:	ff 91       	pop	r31
    591c:	ef 91       	pop	r30
    591e:	bf 91       	pop	r27
    5920:	af 91       	pop	r26
    5922:	9f 91       	pop	r25
    5924:	8f 91       	pop	r24
    5926:	7f 91       	pop	r23
    5928:	6f 91       	pop	r22
    592a:	5f 91       	pop	r21
    592c:	4f 91       	pop	r20
    592e:	3f 91       	pop	r19
    5930:	2f 91       	pop	r18
    5932:	0f 90       	pop	r0
    5934:	0b be       	out	0x3b, r0	; 59
    5936:	0f 90       	pop	r0
    5938:	0f be       	out	0x3f, r0	; 63
    593a:	0f 90       	pop	r0
    593c:	1f 90       	pop	r1
    593e:	18 95       	reti

00005940 <fifo_init>:
    5940:	fc 01       	movw	r30, r24
    5942:	41 11       	cpse	r20, r1
    5944:	01 c0       	rjmp	.+2      	; 0x5948 <fifo_init+0x8>
    5946:	6c d3       	rcall	.+1752   	; 0x6020 <abort>
    5948:	84 2f       	mov	r24, r20
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	9c 01       	movw	r18, r24
    594e:	21 50       	subi	r18, 0x01	; 1
    5950:	31 09       	sbc	r19, r1
    5952:	82 23       	and	r24, r18
    5954:	93 23       	and	r25, r19
    5956:	89 2b       	or	r24, r25
    5958:	09 f0       	breq	.+2      	; 0x595c <fifo_init+0x1c>
    595a:	62 d3       	rcall	.+1732   	; 0x6020 <abort>
    595c:	41 38       	cpi	r20, 0x81	; 129
    595e:	08 f0       	brcs	.+2      	; 0x5962 <fifo_init+0x22>
    5960:	5f d3       	rcall	.+1726   	; 0x6020 <abort>
    5962:	12 82       	std	Z+2, r1	; 0x02
    5964:	13 82       	std	Z+3, r1	; 0x03
    5966:	44 83       	std	Z+4, r20	; 0x04
    5968:	44 0f       	add	r20, r20
    596a:	41 50       	subi	r20, 0x01	; 1
    596c:	45 83       	std	Z+5, r20	; 0x05
    596e:	71 83       	std	Z+1, r23	; 0x01
    5970:	60 83       	st	Z, r22
    5972:	80 e0       	ldi	r24, 0x00	; 0
    5974:	90 e0       	ldi	r25, 0x00	; 0
    5976:	08 95       	ret

00005978 <__subsf3>:
    5978:	50 58       	subi	r21, 0x80	; 128

0000597a <__addsf3>:
    597a:	bb 27       	eor	r27, r27
    597c:	aa 27       	eor	r26, r26
    597e:	0e d0       	rcall	.+28     	; 0x599c <__addsf3x>
    5980:	4d c1       	rjmp	.+666    	; 0x5c1c <__fp_round>
    5982:	3e d1       	rcall	.+636    	; 0x5c00 <__fp_pscA>
    5984:	30 f0       	brcs	.+12     	; 0x5992 <__addsf3+0x18>
    5986:	43 d1       	rcall	.+646    	; 0x5c0e <__fp_pscB>
    5988:	20 f0       	brcs	.+8      	; 0x5992 <__addsf3+0x18>
    598a:	31 f4       	brne	.+12     	; 0x5998 <__addsf3+0x1e>
    598c:	9f 3f       	cpi	r25, 0xFF	; 255
    598e:	11 f4       	brne	.+4      	; 0x5994 <__addsf3+0x1a>
    5990:	1e f4       	brtc	.+6      	; 0x5998 <__addsf3+0x1e>
    5992:	33 c1       	rjmp	.+614    	; 0x5bfa <__fp_nan>
    5994:	0e f4       	brtc	.+2      	; 0x5998 <__addsf3+0x1e>
    5996:	e0 95       	com	r30
    5998:	e7 fb       	bst	r30, 7
    599a:	29 c1       	rjmp	.+594    	; 0x5bee <__fp_inf>

0000599c <__addsf3x>:
    599c:	e9 2f       	mov	r30, r25
    599e:	4f d1       	rcall	.+670    	; 0x5c3e <__fp_split3>
    59a0:	80 f3       	brcs	.-32     	; 0x5982 <__addsf3+0x8>
    59a2:	ba 17       	cp	r27, r26
    59a4:	62 07       	cpc	r22, r18
    59a6:	73 07       	cpc	r23, r19
    59a8:	84 07       	cpc	r24, r20
    59aa:	95 07       	cpc	r25, r21
    59ac:	18 f0       	brcs	.+6      	; 0x59b4 <__addsf3x+0x18>
    59ae:	71 f4       	brne	.+28     	; 0x59cc <__addsf3x+0x30>
    59b0:	9e f5       	brtc	.+102    	; 0x5a18 <__addsf3x+0x7c>
    59b2:	67 c1       	rjmp	.+718    	; 0x5c82 <__fp_zero>
    59b4:	0e f4       	brtc	.+2      	; 0x59b8 <__addsf3x+0x1c>
    59b6:	e0 95       	com	r30
    59b8:	0b 2e       	mov	r0, r27
    59ba:	ba 2f       	mov	r27, r26
    59bc:	a0 2d       	mov	r26, r0
    59be:	0b 01       	movw	r0, r22
    59c0:	b9 01       	movw	r22, r18
    59c2:	90 01       	movw	r18, r0
    59c4:	0c 01       	movw	r0, r24
    59c6:	ca 01       	movw	r24, r20
    59c8:	a0 01       	movw	r20, r0
    59ca:	11 24       	eor	r1, r1
    59cc:	ff 27       	eor	r31, r31
    59ce:	59 1b       	sub	r21, r25
    59d0:	99 f0       	breq	.+38     	; 0x59f8 <__addsf3x+0x5c>
    59d2:	59 3f       	cpi	r21, 0xF9	; 249
    59d4:	50 f4       	brcc	.+20     	; 0x59ea <__addsf3x+0x4e>
    59d6:	50 3e       	cpi	r21, 0xE0	; 224
    59d8:	68 f1       	brcs	.+90     	; 0x5a34 <__addsf3x+0x98>
    59da:	1a 16       	cp	r1, r26
    59dc:	f0 40       	sbci	r31, 0x00	; 0
    59de:	a2 2f       	mov	r26, r18
    59e0:	23 2f       	mov	r18, r19
    59e2:	34 2f       	mov	r19, r20
    59e4:	44 27       	eor	r20, r20
    59e6:	58 5f       	subi	r21, 0xF8	; 248
    59e8:	f3 cf       	rjmp	.-26     	; 0x59d0 <__addsf3x+0x34>
    59ea:	46 95       	lsr	r20
    59ec:	37 95       	ror	r19
    59ee:	27 95       	ror	r18
    59f0:	a7 95       	ror	r26
    59f2:	f0 40       	sbci	r31, 0x00	; 0
    59f4:	53 95       	inc	r21
    59f6:	c9 f7       	brne	.-14     	; 0x59ea <__addsf3x+0x4e>
    59f8:	7e f4       	brtc	.+30     	; 0x5a18 <__addsf3x+0x7c>
    59fa:	1f 16       	cp	r1, r31
    59fc:	ba 0b       	sbc	r27, r26
    59fe:	62 0b       	sbc	r22, r18
    5a00:	73 0b       	sbc	r23, r19
    5a02:	84 0b       	sbc	r24, r20
    5a04:	ba f0       	brmi	.+46     	; 0x5a34 <__addsf3x+0x98>
    5a06:	91 50       	subi	r25, 0x01	; 1
    5a08:	a1 f0       	breq	.+40     	; 0x5a32 <__addsf3x+0x96>
    5a0a:	ff 0f       	add	r31, r31
    5a0c:	bb 1f       	adc	r27, r27
    5a0e:	66 1f       	adc	r22, r22
    5a10:	77 1f       	adc	r23, r23
    5a12:	88 1f       	adc	r24, r24
    5a14:	c2 f7       	brpl	.-16     	; 0x5a06 <__addsf3x+0x6a>
    5a16:	0e c0       	rjmp	.+28     	; 0x5a34 <__addsf3x+0x98>
    5a18:	ba 0f       	add	r27, r26
    5a1a:	62 1f       	adc	r22, r18
    5a1c:	73 1f       	adc	r23, r19
    5a1e:	84 1f       	adc	r24, r20
    5a20:	48 f4       	brcc	.+18     	; 0x5a34 <__addsf3x+0x98>
    5a22:	87 95       	ror	r24
    5a24:	77 95       	ror	r23
    5a26:	67 95       	ror	r22
    5a28:	b7 95       	ror	r27
    5a2a:	f7 95       	ror	r31
    5a2c:	9e 3f       	cpi	r25, 0xFE	; 254
    5a2e:	08 f0       	brcs	.+2      	; 0x5a32 <__addsf3x+0x96>
    5a30:	b3 cf       	rjmp	.-154    	; 0x5998 <__addsf3+0x1e>
    5a32:	93 95       	inc	r25
    5a34:	88 0f       	add	r24, r24
    5a36:	08 f0       	brcs	.+2      	; 0x5a3a <__addsf3x+0x9e>
    5a38:	99 27       	eor	r25, r25
    5a3a:	ee 0f       	add	r30, r30
    5a3c:	97 95       	ror	r25
    5a3e:	87 95       	ror	r24
    5a40:	08 95       	ret

00005a42 <__divsf3>:
    5a42:	0c d0       	rcall	.+24     	; 0x5a5c <__divsf3x>
    5a44:	eb c0       	rjmp	.+470    	; 0x5c1c <__fp_round>
    5a46:	e3 d0       	rcall	.+454    	; 0x5c0e <__fp_pscB>
    5a48:	40 f0       	brcs	.+16     	; 0x5a5a <__divsf3+0x18>
    5a4a:	da d0       	rcall	.+436    	; 0x5c00 <__fp_pscA>
    5a4c:	30 f0       	brcs	.+12     	; 0x5a5a <__divsf3+0x18>
    5a4e:	21 f4       	brne	.+8      	; 0x5a58 <__divsf3+0x16>
    5a50:	5f 3f       	cpi	r21, 0xFF	; 255
    5a52:	19 f0       	breq	.+6      	; 0x5a5a <__divsf3+0x18>
    5a54:	cc c0       	rjmp	.+408    	; 0x5bee <__fp_inf>
    5a56:	51 11       	cpse	r21, r1
    5a58:	15 c1       	rjmp	.+554    	; 0x5c84 <__fp_szero>
    5a5a:	cf c0       	rjmp	.+414    	; 0x5bfa <__fp_nan>

00005a5c <__divsf3x>:
    5a5c:	f0 d0       	rcall	.+480    	; 0x5c3e <__fp_split3>
    5a5e:	98 f3       	brcs	.-26     	; 0x5a46 <__divsf3+0x4>

00005a60 <__divsf3_pse>:
    5a60:	99 23       	and	r25, r25
    5a62:	c9 f3       	breq	.-14     	; 0x5a56 <__divsf3+0x14>
    5a64:	55 23       	and	r21, r21
    5a66:	b1 f3       	breq	.-20     	; 0x5a54 <__divsf3+0x12>
    5a68:	95 1b       	sub	r25, r21
    5a6a:	55 0b       	sbc	r21, r21
    5a6c:	bb 27       	eor	r27, r27
    5a6e:	aa 27       	eor	r26, r26
    5a70:	62 17       	cp	r22, r18
    5a72:	73 07       	cpc	r23, r19
    5a74:	84 07       	cpc	r24, r20
    5a76:	38 f0       	brcs	.+14     	; 0x5a86 <__divsf3_pse+0x26>
    5a78:	9f 5f       	subi	r25, 0xFF	; 255
    5a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a7c:	22 0f       	add	r18, r18
    5a7e:	33 1f       	adc	r19, r19
    5a80:	44 1f       	adc	r20, r20
    5a82:	aa 1f       	adc	r26, r26
    5a84:	a9 f3       	breq	.-22     	; 0x5a70 <__divsf3_pse+0x10>
    5a86:	33 d0       	rcall	.+102    	; 0x5aee <__divsf3_pse+0x8e>
    5a88:	0e 2e       	mov	r0, r30
    5a8a:	3a f0       	brmi	.+14     	; 0x5a9a <__divsf3_pse+0x3a>
    5a8c:	e0 e8       	ldi	r30, 0x80	; 128
    5a8e:	30 d0       	rcall	.+96     	; 0x5af0 <__divsf3_pse+0x90>
    5a90:	91 50       	subi	r25, 0x01	; 1
    5a92:	50 40       	sbci	r21, 0x00	; 0
    5a94:	e6 95       	lsr	r30
    5a96:	00 1c       	adc	r0, r0
    5a98:	ca f7       	brpl	.-14     	; 0x5a8c <__divsf3_pse+0x2c>
    5a9a:	29 d0       	rcall	.+82     	; 0x5aee <__divsf3_pse+0x8e>
    5a9c:	fe 2f       	mov	r31, r30
    5a9e:	27 d0       	rcall	.+78     	; 0x5aee <__divsf3_pse+0x8e>
    5aa0:	66 0f       	add	r22, r22
    5aa2:	77 1f       	adc	r23, r23
    5aa4:	88 1f       	adc	r24, r24
    5aa6:	bb 1f       	adc	r27, r27
    5aa8:	26 17       	cp	r18, r22
    5aaa:	37 07       	cpc	r19, r23
    5aac:	48 07       	cpc	r20, r24
    5aae:	ab 07       	cpc	r26, r27
    5ab0:	b0 e8       	ldi	r27, 0x80	; 128
    5ab2:	09 f0       	breq	.+2      	; 0x5ab6 <__divsf3_pse+0x56>
    5ab4:	bb 0b       	sbc	r27, r27
    5ab6:	80 2d       	mov	r24, r0
    5ab8:	bf 01       	movw	r22, r30
    5aba:	ff 27       	eor	r31, r31
    5abc:	93 58       	subi	r25, 0x83	; 131
    5abe:	5f 4f       	sbci	r21, 0xFF	; 255
    5ac0:	2a f0       	brmi	.+10     	; 0x5acc <__divsf3_pse+0x6c>
    5ac2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ac4:	51 05       	cpc	r21, r1
    5ac6:	68 f0       	brcs	.+26     	; 0x5ae2 <__divsf3_pse+0x82>
    5ac8:	92 c0       	rjmp	.+292    	; 0x5bee <__fp_inf>
    5aca:	dc c0       	rjmp	.+440    	; 0x5c84 <__fp_szero>
    5acc:	5f 3f       	cpi	r21, 0xFF	; 255
    5ace:	ec f3       	brlt	.-6      	; 0x5aca <__divsf3_pse+0x6a>
    5ad0:	98 3e       	cpi	r25, 0xE8	; 232
    5ad2:	dc f3       	brlt	.-10     	; 0x5aca <__divsf3_pse+0x6a>
    5ad4:	86 95       	lsr	r24
    5ad6:	77 95       	ror	r23
    5ad8:	67 95       	ror	r22
    5ada:	b7 95       	ror	r27
    5adc:	f7 95       	ror	r31
    5ade:	9f 5f       	subi	r25, 0xFF	; 255
    5ae0:	c9 f7       	brne	.-14     	; 0x5ad4 <__divsf3_pse+0x74>
    5ae2:	88 0f       	add	r24, r24
    5ae4:	91 1d       	adc	r25, r1
    5ae6:	96 95       	lsr	r25
    5ae8:	87 95       	ror	r24
    5aea:	97 f9       	bld	r25, 7
    5aec:	08 95       	ret
    5aee:	e1 e0       	ldi	r30, 0x01	; 1
    5af0:	66 0f       	add	r22, r22
    5af2:	77 1f       	adc	r23, r23
    5af4:	88 1f       	adc	r24, r24
    5af6:	bb 1f       	adc	r27, r27
    5af8:	62 17       	cp	r22, r18
    5afa:	73 07       	cpc	r23, r19
    5afc:	84 07       	cpc	r24, r20
    5afe:	ba 07       	cpc	r27, r26
    5b00:	20 f0       	brcs	.+8      	; 0x5b0a <__divsf3_pse+0xaa>
    5b02:	62 1b       	sub	r22, r18
    5b04:	73 0b       	sbc	r23, r19
    5b06:	84 0b       	sbc	r24, r20
    5b08:	ba 0b       	sbc	r27, r26
    5b0a:	ee 1f       	adc	r30, r30
    5b0c:	88 f7       	brcc	.-30     	; 0x5af0 <__divsf3_pse+0x90>
    5b0e:	e0 95       	com	r30
    5b10:	08 95       	ret

00005b12 <__fixsfsi>:
    5b12:	04 d0       	rcall	.+8      	; 0x5b1c <__fixunssfsi>
    5b14:	68 94       	set
    5b16:	b1 11       	cpse	r27, r1
    5b18:	b5 c0       	rjmp	.+362    	; 0x5c84 <__fp_szero>
    5b1a:	08 95       	ret

00005b1c <__fixunssfsi>:
    5b1c:	98 d0       	rcall	.+304    	; 0x5c4e <__fp_splitA>
    5b1e:	88 f0       	brcs	.+34     	; 0x5b42 <__fixunssfsi+0x26>
    5b20:	9f 57       	subi	r25, 0x7F	; 127
    5b22:	90 f0       	brcs	.+36     	; 0x5b48 <__fixunssfsi+0x2c>
    5b24:	b9 2f       	mov	r27, r25
    5b26:	99 27       	eor	r25, r25
    5b28:	b7 51       	subi	r27, 0x17	; 23
    5b2a:	a0 f0       	brcs	.+40     	; 0x5b54 <__fixunssfsi+0x38>
    5b2c:	d1 f0       	breq	.+52     	; 0x5b62 <__fixunssfsi+0x46>
    5b2e:	66 0f       	add	r22, r22
    5b30:	77 1f       	adc	r23, r23
    5b32:	88 1f       	adc	r24, r24
    5b34:	99 1f       	adc	r25, r25
    5b36:	1a f0       	brmi	.+6      	; 0x5b3e <__fixunssfsi+0x22>
    5b38:	ba 95       	dec	r27
    5b3a:	c9 f7       	brne	.-14     	; 0x5b2e <__fixunssfsi+0x12>
    5b3c:	12 c0       	rjmp	.+36     	; 0x5b62 <__fixunssfsi+0x46>
    5b3e:	b1 30       	cpi	r27, 0x01	; 1
    5b40:	81 f0       	breq	.+32     	; 0x5b62 <__fixunssfsi+0x46>
    5b42:	9f d0       	rcall	.+318    	; 0x5c82 <__fp_zero>
    5b44:	b1 e0       	ldi	r27, 0x01	; 1
    5b46:	08 95       	ret
    5b48:	9c c0       	rjmp	.+312    	; 0x5c82 <__fp_zero>
    5b4a:	67 2f       	mov	r22, r23
    5b4c:	78 2f       	mov	r23, r24
    5b4e:	88 27       	eor	r24, r24
    5b50:	b8 5f       	subi	r27, 0xF8	; 248
    5b52:	39 f0       	breq	.+14     	; 0x5b62 <__fixunssfsi+0x46>
    5b54:	b9 3f       	cpi	r27, 0xF9	; 249
    5b56:	cc f3       	brlt	.-14     	; 0x5b4a <__fixunssfsi+0x2e>
    5b58:	86 95       	lsr	r24
    5b5a:	77 95       	ror	r23
    5b5c:	67 95       	ror	r22
    5b5e:	b3 95       	inc	r27
    5b60:	d9 f7       	brne	.-10     	; 0x5b58 <__fixunssfsi+0x3c>
    5b62:	3e f4       	brtc	.+14     	; 0x5b72 <__fixunssfsi+0x56>
    5b64:	90 95       	com	r25
    5b66:	80 95       	com	r24
    5b68:	70 95       	com	r23
    5b6a:	61 95       	neg	r22
    5b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5b70:	9f 4f       	sbci	r25, 0xFF	; 255
    5b72:	08 95       	ret

00005b74 <__floatunsisf>:
    5b74:	e8 94       	clt
    5b76:	09 c0       	rjmp	.+18     	; 0x5b8a <__floatsisf+0x12>

00005b78 <__floatsisf>:
    5b78:	97 fb       	bst	r25, 7
    5b7a:	3e f4       	brtc	.+14     	; 0x5b8a <__floatsisf+0x12>
    5b7c:	90 95       	com	r25
    5b7e:	80 95       	com	r24
    5b80:	70 95       	com	r23
    5b82:	61 95       	neg	r22
    5b84:	7f 4f       	sbci	r23, 0xFF	; 255
    5b86:	8f 4f       	sbci	r24, 0xFF	; 255
    5b88:	9f 4f       	sbci	r25, 0xFF	; 255
    5b8a:	99 23       	and	r25, r25
    5b8c:	a9 f0       	breq	.+42     	; 0x5bb8 <__floatsisf+0x40>
    5b8e:	f9 2f       	mov	r31, r25
    5b90:	96 e9       	ldi	r25, 0x96	; 150
    5b92:	bb 27       	eor	r27, r27
    5b94:	93 95       	inc	r25
    5b96:	f6 95       	lsr	r31
    5b98:	87 95       	ror	r24
    5b9a:	77 95       	ror	r23
    5b9c:	67 95       	ror	r22
    5b9e:	b7 95       	ror	r27
    5ba0:	f1 11       	cpse	r31, r1
    5ba2:	f8 cf       	rjmp	.-16     	; 0x5b94 <__floatsisf+0x1c>
    5ba4:	fa f4       	brpl	.+62     	; 0x5be4 <__floatsisf+0x6c>
    5ba6:	bb 0f       	add	r27, r27
    5ba8:	11 f4       	brne	.+4      	; 0x5bae <__floatsisf+0x36>
    5baa:	60 ff       	sbrs	r22, 0
    5bac:	1b c0       	rjmp	.+54     	; 0x5be4 <__floatsisf+0x6c>
    5bae:	6f 5f       	subi	r22, 0xFF	; 255
    5bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    5bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb6:	16 c0       	rjmp	.+44     	; 0x5be4 <__floatsisf+0x6c>
    5bb8:	88 23       	and	r24, r24
    5bba:	11 f0       	breq	.+4      	; 0x5bc0 <__floatsisf+0x48>
    5bbc:	96 e9       	ldi	r25, 0x96	; 150
    5bbe:	11 c0       	rjmp	.+34     	; 0x5be2 <__floatsisf+0x6a>
    5bc0:	77 23       	and	r23, r23
    5bc2:	21 f0       	breq	.+8      	; 0x5bcc <__floatsisf+0x54>
    5bc4:	9e e8       	ldi	r25, 0x8E	; 142
    5bc6:	87 2f       	mov	r24, r23
    5bc8:	76 2f       	mov	r23, r22
    5bca:	05 c0       	rjmp	.+10     	; 0x5bd6 <__floatsisf+0x5e>
    5bcc:	66 23       	and	r22, r22
    5bce:	71 f0       	breq	.+28     	; 0x5bec <__floatsisf+0x74>
    5bd0:	96 e8       	ldi	r25, 0x86	; 134
    5bd2:	86 2f       	mov	r24, r22
    5bd4:	70 e0       	ldi	r23, 0x00	; 0
    5bd6:	60 e0       	ldi	r22, 0x00	; 0
    5bd8:	2a f0       	brmi	.+10     	; 0x5be4 <__floatsisf+0x6c>
    5bda:	9a 95       	dec	r25
    5bdc:	66 0f       	add	r22, r22
    5bde:	77 1f       	adc	r23, r23
    5be0:	88 1f       	adc	r24, r24
    5be2:	da f7       	brpl	.-10     	; 0x5bda <__floatsisf+0x62>
    5be4:	88 0f       	add	r24, r24
    5be6:	96 95       	lsr	r25
    5be8:	87 95       	ror	r24
    5bea:	97 f9       	bld	r25, 7
    5bec:	08 95       	ret

00005bee <__fp_inf>:
    5bee:	97 f9       	bld	r25, 7
    5bf0:	9f 67       	ori	r25, 0x7F	; 127
    5bf2:	80 e8       	ldi	r24, 0x80	; 128
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	60 e0       	ldi	r22, 0x00	; 0
    5bf8:	08 95       	ret

00005bfa <__fp_nan>:
    5bfa:	9f ef       	ldi	r25, 0xFF	; 255
    5bfc:	80 ec       	ldi	r24, 0xC0	; 192
    5bfe:	08 95       	ret

00005c00 <__fp_pscA>:
    5c00:	00 24       	eor	r0, r0
    5c02:	0a 94       	dec	r0
    5c04:	16 16       	cp	r1, r22
    5c06:	17 06       	cpc	r1, r23
    5c08:	18 06       	cpc	r1, r24
    5c0a:	09 06       	cpc	r0, r25
    5c0c:	08 95       	ret

00005c0e <__fp_pscB>:
    5c0e:	00 24       	eor	r0, r0
    5c10:	0a 94       	dec	r0
    5c12:	12 16       	cp	r1, r18
    5c14:	13 06       	cpc	r1, r19
    5c16:	14 06       	cpc	r1, r20
    5c18:	05 06       	cpc	r0, r21
    5c1a:	08 95       	ret

00005c1c <__fp_round>:
    5c1c:	09 2e       	mov	r0, r25
    5c1e:	03 94       	inc	r0
    5c20:	00 0c       	add	r0, r0
    5c22:	11 f4       	brne	.+4      	; 0x5c28 <__fp_round+0xc>
    5c24:	88 23       	and	r24, r24
    5c26:	52 f0       	brmi	.+20     	; 0x5c3c <__fp_round+0x20>
    5c28:	bb 0f       	add	r27, r27
    5c2a:	40 f4       	brcc	.+16     	; 0x5c3c <__fp_round+0x20>
    5c2c:	bf 2b       	or	r27, r31
    5c2e:	11 f4       	brne	.+4      	; 0x5c34 <__fp_round+0x18>
    5c30:	60 ff       	sbrs	r22, 0
    5c32:	04 c0       	rjmp	.+8      	; 0x5c3c <__fp_round+0x20>
    5c34:	6f 5f       	subi	r22, 0xFF	; 255
    5c36:	7f 4f       	sbci	r23, 0xFF	; 255
    5c38:	8f 4f       	sbci	r24, 0xFF	; 255
    5c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3c:	08 95       	ret

00005c3e <__fp_split3>:
    5c3e:	57 fd       	sbrc	r21, 7
    5c40:	90 58       	subi	r25, 0x80	; 128
    5c42:	44 0f       	add	r20, r20
    5c44:	55 1f       	adc	r21, r21
    5c46:	59 f0       	breq	.+22     	; 0x5c5e <__fp_splitA+0x10>
    5c48:	5f 3f       	cpi	r21, 0xFF	; 255
    5c4a:	71 f0       	breq	.+28     	; 0x5c68 <__fp_splitA+0x1a>
    5c4c:	47 95       	ror	r20

00005c4e <__fp_splitA>:
    5c4e:	88 0f       	add	r24, r24
    5c50:	97 fb       	bst	r25, 7
    5c52:	99 1f       	adc	r25, r25
    5c54:	61 f0       	breq	.+24     	; 0x5c6e <__fp_splitA+0x20>
    5c56:	9f 3f       	cpi	r25, 0xFF	; 255
    5c58:	79 f0       	breq	.+30     	; 0x5c78 <__fp_splitA+0x2a>
    5c5a:	87 95       	ror	r24
    5c5c:	08 95       	ret
    5c5e:	12 16       	cp	r1, r18
    5c60:	13 06       	cpc	r1, r19
    5c62:	14 06       	cpc	r1, r20
    5c64:	55 1f       	adc	r21, r21
    5c66:	f2 cf       	rjmp	.-28     	; 0x5c4c <__fp_split3+0xe>
    5c68:	46 95       	lsr	r20
    5c6a:	f1 df       	rcall	.-30     	; 0x5c4e <__fp_splitA>
    5c6c:	08 c0       	rjmp	.+16     	; 0x5c7e <__fp_splitA+0x30>
    5c6e:	16 16       	cp	r1, r22
    5c70:	17 06       	cpc	r1, r23
    5c72:	18 06       	cpc	r1, r24
    5c74:	99 1f       	adc	r25, r25
    5c76:	f1 cf       	rjmp	.-30     	; 0x5c5a <__fp_splitA+0xc>
    5c78:	86 95       	lsr	r24
    5c7a:	71 05       	cpc	r23, r1
    5c7c:	61 05       	cpc	r22, r1
    5c7e:	08 94       	sec
    5c80:	08 95       	ret

00005c82 <__fp_zero>:
    5c82:	e8 94       	clt

00005c84 <__fp_szero>:
    5c84:	bb 27       	eor	r27, r27
    5c86:	66 27       	eor	r22, r22
    5c88:	77 27       	eor	r23, r23
    5c8a:	cb 01       	movw	r24, r22
    5c8c:	97 f9       	bld	r25, 7
    5c8e:	08 95       	ret

00005c90 <__mulsf3>:
    5c90:	0b d0       	rcall	.+22     	; 0x5ca8 <__mulsf3x>
    5c92:	c4 cf       	rjmp	.-120    	; 0x5c1c <__fp_round>
    5c94:	b5 df       	rcall	.-150    	; 0x5c00 <__fp_pscA>
    5c96:	28 f0       	brcs	.+10     	; 0x5ca2 <__mulsf3+0x12>
    5c98:	ba df       	rcall	.-140    	; 0x5c0e <__fp_pscB>
    5c9a:	18 f0       	brcs	.+6      	; 0x5ca2 <__mulsf3+0x12>
    5c9c:	95 23       	and	r25, r21
    5c9e:	09 f0       	breq	.+2      	; 0x5ca2 <__mulsf3+0x12>
    5ca0:	a6 cf       	rjmp	.-180    	; 0x5bee <__fp_inf>
    5ca2:	ab cf       	rjmp	.-170    	; 0x5bfa <__fp_nan>
    5ca4:	11 24       	eor	r1, r1
    5ca6:	ee cf       	rjmp	.-36     	; 0x5c84 <__fp_szero>

00005ca8 <__mulsf3x>:
    5ca8:	ca df       	rcall	.-108    	; 0x5c3e <__fp_split3>
    5caa:	a0 f3       	brcs	.-24     	; 0x5c94 <__mulsf3+0x4>

00005cac <__mulsf3_pse>:
    5cac:	95 9f       	mul	r25, r21
    5cae:	d1 f3       	breq	.-12     	; 0x5ca4 <__mulsf3+0x14>
    5cb0:	95 0f       	add	r25, r21
    5cb2:	50 e0       	ldi	r21, 0x00	; 0
    5cb4:	55 1f       	adc	r21, r21
    5cb6:	62 9f       	mul	r22, r18
    5cb8:	f0 01       	movw	r30, r0
    5cba:	72 9f       	mul	r23, r18
    5cbc:	bb 27       	eor	r27, r27
    5cbe:	f0 0d       	add	r31, r0
    5cc0:	b1 1d       	adc	r27, r1
    5cc2:	63 9f       	mul	r22, r19
    5cc4:	aa 27       	eor	r26, r26
    5cc6:	f0 0d       	add	r31, r0
    5cc8:	b1 1d       	adc	r27, r1
    5cca:	aa 1f       	adc	r26, r26
    5ccc:	64 9f       	mul	r22, r20
    5cce:	66 27       	eor	r22, r22
    5cd0:	b0 0d       	add	r27, r0
    5cd2:	a1 1d       	adc	r26, r1
    5cd4:	66 1f       	adc	r22, r22
    5cd6:	82 9f       	mul	r24, r18
    5cd8:	22 27       	eor	r18, r18
    5cda:	b0 0d       	add	r27, r0
    5cdc:	a1 1d       	adc	r26, r1
    5cde:	62 1f       	adc	r22, r18
    5ce0:	73 9f       	mul	r23, r19
    5ce2:	b0 0d       	add	r27, r0
    5ce4:	a1 1d       	adc	r26, r1
    5ce6:	62 1f       	adc	r22, r18
    5ce8:	83 9f       	mul	r24, r19
    5cea:	a0 0d       	add	r26, r0
    5cec:	61 1d       	adc	r22, r1
    5cee:	22 1f       	adc	r18, r18
    5cf0:	74 9f       	mul	r23, r20
    5cf2:	33 27       	eor	r19, r19
    5cf4:	a0 0d       	add	r26, r0
    5cf6:	61 1d       	adc	r22, r1
    5cf8:	23 1f       	adc	r18, r19
    5cfa:	84 9f       	mul	r24, r20
    5cfc:	60 0d       	add	r22, r0
    5cfe:	21 1d       	adc	r18, r1
    5d00:	82 2f       	mov	r24, r18
    5d02:	76 2f       	mov	r23, r22
    5d04:	6a 2f       	mov	r22, r26
    5d06:	11 24       	eor	r1, r1
    5d08:	9f 57       	subi	r25, 0x7F	; 127
    5d0a:	50 40       	sbci	r21, 0x00	; 0
    5d0c:	8a f0       	brmi	.+34     	; 0x5d30 <__mulsf3_pse+0x84>
    5d0e:	e1 f0       	breq	.+56     	; 0x5d48 <__mulsf3_pse+0x9c>
    5d10:	88 23       	and	r24, r24
    5d12:	4a f0       	brmi	.+18     	; 0x5d26 <__mulsf3_pse+0x7a>
    5d14:	ee 0f       	add	r30, r30
    5d16:	ff 1f       	adc	r31, r31
    5d18:	bb 1f       	adc	r27, r27
    5d1a:	66 1f       	adc	r22, r22
    5d1c:	77 1f       	adc	r23, r23
    5d1e:	88 1f       	adc	r24, r24
    5d20:	91 50       	subi	r25, 0x01	; 1
    5d22:	50 40       	sbci	r21, 0x00	; 0
    5d24:	a9 f7       	brne	.-22     	; 0x5d10 <__mulsf3_pse+0x64>
    5d26:	9e 3f       	cpi	r25, 0xFE	; 254
    5d28:	51 05       	cpc	r21, r1
    5d2a:	70 f0       	brcs	.+28     	; 0x5d48 <__mulsf3_pse+0x9c>
    5d2c:	60 cf       	rjmp	.-320    	; 0x5bee <__fp_inf>
    5d2e:	aa cf       	rjmp	.-172    	; 0x5c84 <__fp_szero>
    5d30:	5f 3f       	cpi	r21, 0xFF	; 255
    5d32:	ec f3       	brlt	.-6      	; 0x5d2e <__mulsf3_pse+0x82>
    5d34:	98 3e       	cpi	r25, 0xE8	; 232
    5d36:	dc f3       	brlt	.-10     	; 0x5d2e <__mulsf3_pse+0x82>
    5d38:	86 95       	lsr	r24
    5d3a:	77 95       	ror	r23
    5d3c:	67 95       	ror	r22
    5d3e:	b7 95       	ror	r27
    5d40:	f7 95       	ror	r31
    5d42:	e7 95       	ror	r30
    5d44:	9f 5f       	subi	r25, 0xFF	; 255
    5d46:	c1 f7       	brne	.-16     	; 0x5d38 <__mulsf3_pse+0x8c>
    5d48:	fe 2b       	or	r31, r30
    5d4a:	88 0f       	add	r24, r24
    5d4c:	91 1d       	adc	r25, r1
    5d4e:	96 95       	lsr	r25
    5d50:	87 95       	ror	r24
    5d52:	97 f9       	bld	r25, 7
    5d54:	08 95       	ret

00005d56 <__udivmodsi4>:
    5d56:	a1 e2       	ldi	r26, 0x21	; 33
    5d58:	1a 2e       	mov	r1, r26
    5d5a:	aa 1b       	sub	r26, r26
    5d5c:	bb 1b       	sub	r27, r27
    5d5e:	fd 01       	movw	r30, r26
    5d60:	0d c0       	rjmp	.+26     	; 0x5d7c <__udivmodsi4_ep>

00005d62 <__udivmodsi4_loop>:
    5d62:	aa 1f       	adc	r26, r26
    5d64:	bb 1f       	adc	r27, r27
    5d66:	ee 1f       	adc	r30, r30
    5d68:	ff 1f       	adc	r31, r31
    5d6a:	a2 17       	cp	r26, r18
    5d6c:	b3 07       	cpc	r27, r19
    5d6e:	e4 07       	cpc	r30, r20
    5d70:	f5 07       	cpc	r31, r21
    5d72:	20 f0       	brcs	.+8      	; 0x5d7c <__udivmodsi4_ep>
    5d74:	a2 1b       	sub	r26, r18
    5d76:	b3 0b       	sbc	r27, r19
    5d78:	e4 0b       	sbc	r30, r20
    5d7a:	f5 0b       	sbc	r31, r21

00005d7c <__udivmodsi4_ep>:
    5d7c:	66 1f       	adc	r22, r22
    5d7e:	77 1f       	adc	r23, r23
    5d80:	88 1f       	adc	r24, r24
    5d82:	99 1f       	adc	r25, r25
    5d84:	1a 94       	dec	r1
    5d86:	69 f7       	brne	.-38     	; 0x5d62 <__udivmodsi4_loop>
    5d88:	60 95       	com	r22
    5d8a:	70 95       	com	r23
    5d8c:	80 95       	com	r24
    5d8e:	90 95       	com	r25
    5d90:	9b 01       	movw	r18, r22
    5d92:	ac 01       	movw	r20, r24
    5d94:	bd 01       	movw	r22, r26
    5d96:	cf 01       	movw	r24, r30
    5d98:	08 95       	ret

00005d9a <__tablejump2__>:
    5d9a:	ee 0f       	add	r30, r30
    5d9c:	ff 1f       	adc	r31, r31
    5d9e:	88 1f       	adc	r24, r24
    5da0:	8b bf       	out	0x3b, r24	; 59
    5da2:	07 90       	elpm	r0, Z+
    5da4:	f6 91       	elpm	r31, Z
    5da6:	e0 2d       	mov	r30, r0
    5da8:	19 94       	eijmp

00005daa <calloc>:
    5daa:	0f 93       	push	r16
    5dac:	1f 93       	push	r17
    5dae:	cf 93       	push	r28
    5db0:	df 93       	push	r29
    5db2:	86 9f       	mul	r24, r22
    5db4:	80 01       	movw	r16, r0
    5db6:	87 9f       	mul	r24, r23
    5db8:	10 0d       	add	r17, r0
    5dba:	96 9f       	mul	r25, r22
    5dbc:	10 0d       	add	r17, r0
    5dbe:	11 24       	eor	r1, r1
    5dc0:	c8 01       	movw	r24, r16
    5dc2:	0d d0       	rcall	.+26     	; 0x5dde <malloc>
    5dc4:	ec 01       	movw	r28, r24
    5dc6:	00 97       	sbiw	r24, 0x00	; 0
    5dc8:	21 f0       	breq	.+8      	; 0x5dd2 <calloc+0x28>
    5dca:	a8 01       	movw	r20, r16
    5dcc:	60 e0       	ldi	r22, 0x00	; 0
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	34 d1       	rcall	.+616    	; 0x603a <memset>
    5dd2:	ce 01       	movw	r24, r28
    5dd4:	df 91       	pop	r29
    5dd6:	cf 91       	pop	r28
    5dd8:	1f 91       	pop	r17
    5dda:	0f 91       	pop	r16
    5ddc:	08 95       	ret

00005dde <malloc>:
    5dde:	0f 93       	push	r16
    5de0:	1f 93       	push	r17
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
    5de6:	82 30       	cpi	r24, 0x02	; 2
    5de8:	91 05       	cpc	r25, r1
    5dea:	10 f4       	brcc	.+4      	; 0x5df0 <malloc+0x12>
    5dec:	82 e0       	ldi	r24, 0x02	; 2
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	e0 91 9f 17 	lds	r30, 0x179F	; 0x80179f <__flp>
    5df4:	f0 91 a0 17 	lds	r31, 0x17A0	; 0x8017a0 <__flp+0x1>
    5df8:	20 e0       	ldi	r18, 0x00	; 0
    5dfa:	30 e0       	ldi	r19, 0x00	; 0
    5dfc:	a0 e0       	ldi	r26, 0x00	; 0
    5dfe:	b0 e0       	ldi	r27, 0x00	; 0
    5e00:	30 97       	sbiw	r30, 0x00	; 0
    5e02:	19 f1       	breq	.+70     	; 0x5e4a <malloc+0x6c>
    5e04:	40 81       	ld	r20, Z
    5e06:	51 81       	ldd	r21, Z+1	; 0x01
    5e08:	02 81       	ldd	r16, Z+2	; 0x02
    5e0a:	13 81       	ldd	r17, Z+3	; 0x03
    5e0c:	48 17       	cp	r20, r24
    5e0e:	59 07       	cpc	r21, r25
    5e10:	c8 f0       	brcs	.+50     	; 0x5e44 <malloc+0x66>
    5e12:	84 17       	cp	r24, r20
    5e14:	95 07       	cpc	r25, r21
    5e16:	69 f4       	brne	.+26     	; 0x5e32 <malloc+0x54>
    5e18:	10 97       	sbiw	r26, 0x00	; 0
    5e1a:	31 f0       	breq	.+12     	; 0x5e28 <malloc+0x4a>
    5e1c:	12 96       	adiw	r26, 0x02	; 2
    5e1e:	0c 93       	st	X, r16
    5e20:	12 97       	sbiw	r26, 0x02	; 2
    5e22:	13 96       	adiw	r26, 0x03	; 3
    5e24:	1c 93       	st	X, r17
    5e26:	27 c0       	rjmp	.+78     	; 0x5e76 <malloc+0x98>
    5e28:	00 93 9f 17 	sts	0x179F, r16	; 0x80179f <__flp>
    5e2c:	10 93 a0 17 	sts	0x17A0, r17	; 0x8017a0 <__flp+0x1>
    5e30:	22 c0       	rjmp	.+68     	; 0x5e76 <malloc+0x98>
    5e32:	21 15       	cp	r18, r1
    5e34:	31 05       	cpc	r19, r1
    5e36:	19 f0       	breq	.+6      	; 0x5e3e <malloc+0x60>
    5e38:	42 17       	cp	r20, r18
    5e3a:	53 07       	cpc	r21, r19
    5e3c:	18 f4       	brcc	.+6      	; 0x5e44 <malloc+0x66>
    5e3e:	9a 01       	movw	r18, r20
    5e40:	bd 01       	movw	r22, r26
    5e42:	ef 01       	movw	r28, r30
    5e44:	df 01       	movw	r26, r30
    5e46:	f8 01       	movw	r30, r16
    5e48:	db cf       	rjmp	.-74     	; 0x5e00 <malloc+0x22>
    5e4a:	21 15       	cp	r18, r1
    5e4c:	31 05       	cpc	r19, r1
    5e4e:	f9 f0       	breq	.+62     	; 0x5e8e <malloc+0xb0>
    5e50:	28 1b       	sub	r18, r24
    5e52:	39 0b       	sbc	r19, r25
    5e54:	24 30       	cpi	r18, 0x04	; 4
    5e56:	31 05       	cpc	r19, r1
    5e58:	80 f4       	brcc	.+32     	; 0x5e7a <malloc+0x9c>
    5e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e5e:	61 15       	cp	r22, r1
    5e60:	71 05       	cpc	r23, r1
    5e62:	21 f0       	breq	.+8      	; 0x5e6c <malloc+0x8e>
    5e64:	fb 01       	movw	r30, r22
    5e66:	93 83       	std	Z+3, r25	; 0x03
    5e68:	82 83       	std	Z+2, r24	; 0x02
    5e6a:	04 c0       	rjmp	.+8      	; 0x5e74 <malloc+0x96>
    5e6c:	90 93 a0 17 	sts	0x17A0, r25	; 0x8017a0 <__flp+0x1>
    5e70:	80 93 9f 17 	sts	0x179F, r24	; 0x80179f <__flp>
    5e74:	fe 01       	movw	r30, r28
    5e76:	32 96       	adiw	r30, 0x02	; 2
    5e78:	44 c0       	rjmp	.+136    	; 0x5f02 <malloc+0x124>
    5e7a:	fe 01       	movw	r30, r28
    5e7c:	e2 0f       	add	r30, r18
    5e7e:	f3 1f       	adc	r31, r19
    5e80:	81 93       	st	Z+, r24
    5e82:	91 93       	st	Z+, r25
    5e84:	22 50       	subi	r18, 0x02	; 2
    5e86:	31 09       	sbc	r19, r1
    5e88:	39 83       	std	Y+1, r19	; 0x01
    5e8a:	28 83       	st	Y, r18
    5e8c:	3a c0       	rjmp	.+116    	; 0x5f02 <malloc+0x124>
    5e8e:	20 91 9d 17 	lds	r18, 0x179D	; 0x80179d <__brkval>
    5e92:	30 91 9e 17 	lds	r19, 0x179E	; 0x80179e <__brkval+0x1>
    5e96:	23 2b       	or	r18, r19
    5e98:	41 f4       	brne	.+16     	; 0x5eaa <malloc+0xcc>
    5e9a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5e9e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5ea2:	30 93 9e 17 	sts	0x179E, r19	; 0x80179e <__brkval+0x1>
    5ea6:	20 93 9d 17 	sts	0x179D, r18	; 0x80179d <__brkval>
    5eaa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5eae:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5eb2:	21 15       	cp	r18, r1
    5eb4:	31 05       	cpc	r19, r1
    5eb6:	41 f4       	brne	.+16     	; 0x5ec8 <malloc+0xea>
    5eb8:	2d b7       	in	r18, 0x3d	; 61
    5eba:	3e b7       	in	r19, 0x3e	; 62
    5ebc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5ec0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5ec4:	24 1b       	sub	r18, r20
    5ec6:	35 0b       	sbc	r19, r21
    5ec8:	e0 91 9d 17 	lds	r30, 0x179D	; 0x80179d <__brkval>
    5ecc:	f0 91 9e 17 	lds	r31, 0x179E	; 0x80179e <__brkval+0x1>
    5ed0:	e2 17       	cp	r30, r18
    5ed2:	f3 07       	cpc	r31, r19
    5ed4:	a0 f4       	brcc	.+40     	; 0x5efe <malloc+0x120>
    5ed6:	2e 1b       	sub	r18, r30
    5ed8:	3f 0b       	sbc	r19, r31
    5eda:	28 17       	cp	r18, r24
    5edc:	39 07       	cpc	r19, r25
    5ede:	78 f0       	brcs	.+30     	; 0x5efe <malloc+0x120>
    5ee0:	ac 01       	movw	r20, r24
    5ee2:	4e 5f       	subi	r20, 0xFE	; 254
    5ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee6:	24 17       	cp	r18, r20
    5ee8:	35 07       	cpc	r19, r21
    5eea:	48 f0       	brcs	.+18     	; 0x5efe <malloc+0x120>
    5eec:	4e 0f       	add	r20, r30
    5eee:	5f 1f       	adc	r21, r31
    5ef0:	50 93 9e 17 	sts	0x179E, r21	; 0x80179e <__brkval+0x1>
    5ef4:	40 93 9d 17 	sts	0x179D, r20	; 0x80179d <__brkval>
    5ef8:	81 93       	st	Z+, r24
    5efa:	91 93       	st	Z+, r25
    5efc:	02 c0       	rjmp	.+4      	; 0x5f02 <malloc+0x124>
    5efe:	e0 e0       	ldi	r30, 0x00	; 0
    5f00:	f0 e0       	ldi	r31, 0x00	; 0
    5f02:	cf 01       	movw	r24, r30
    5f04:	df 91       	pop	r29
    5f06:	cf 91       	pop	r28
    5f08:	1f 91       	pop	r17
    5f0a:	0f 91       	pop	r16
    5f0c:	08 95       	ret

00005f0e <free>:
    5f0e:	cf 93       	push	r28
    5f10:	df 93       	push	r29
    5f12:	00 97       	sbiw	r24, 0x00	; 0
    5f14:	09 f4       	brne	.+2      	; 0x5f18 <free+0xa>
    5f16:	81 c0       	rjmp	.+258    	; 0x601a <free+0x10c>
    5f18:	fc 01       	movw	r30, r24
    5f1a:	32 97       	sbiw	r30, 0x02	; 2
    5f1c:	13 82       	std	Z+3, r1	; 0x03
    5f1e:	12 82       	std	Z+2, r1	; 0x02
    5f20:	a0 91 9f 17 	lds	r26, 0x179F	; 0x80179f <__flp>
    5f24:	b0 91 a0 17 	lds	r27, 0x17A0	; 0x8017a0 <__flp+0x1>
    5f28:	10 97       	sbiw	r26, 0x00	; 0
    5f2a:	81 f4       	brne	.+32     	; 0x5f4c <free+0x3e>
    5f2c:	20 81       	ld	r18, Z
    5f2e:	31 81       	ldd	r19, Z+1	; 0x01
    5f30:	82 0f       	add	r24, r18
    5f32:	93 1f       	adc	r25, r19
    5f34:	20 91 9d 17 	lds	r18, 0x179D	; 0x80179d <__brkval>
    5f38:	30 91 9e 17 	lds	r19, 0x179E	; 0x80179e <__brkval+0x1>
    5f3c:	28 17       	cp	r18, r24
    5f3e:	39 07       	cpc	r19, r25
    5f40:	51 f5       	brne	.+84     	; 0x5f96 <free+0x88>
    5f42:	f0 93 9e 17 	sts	0x179E, r31	; 0x80179e <__brkval+0x1>
    5f46:	e0 93 9d 17 	sts	0x179D, r30	; 0x80179d <__brkval>
    5f4a:	67 c0       	rjmp	.+206    	; 0x601a <free+0x10c>
    5f4c:	ed 01       	movw	r28, r26
    5f4e:	20 e0       	ldi	r18, 0x00	; 0
    5f50:	30 e0       	ldi	r19, 0x00	; 0
    5f52:	ce 17       	cp	r28, r30
    5f54:	df 07       	cpc	r29, r31
    5f56:	40 f4       	brcc	.+16     	; 0x5f68 <free+0x5a>
    5f58:	4a 81       	ldd	r20, Y+2	; 0x02
    5f5a:	5b 81       	ldd	r21, Y+3	; 0x03
    5f5c:	9e 01       	movw	r18, r28
    5f5e:	41 15       	cp	r20, r1
    5f60:	51 05       	cpc	r21, r1
    5f62:	f1 f0       	breq	.+60     	; 0x5fa0 <free+0x92>
    5f64:	ea 01       	movw	r28, r20
    5f66:	f5 cf       	rjmp	.-22     	; 0x5f52 <free+0x44>
    5f68:	d3 83       	std	Z+3, r29	; 0x03
    5f6a:	c2 83       	std	Z+2, r28	; 0x02
    5f6c:	40 81       	ld	r20, Z
    5f6e:	51 81       	ldd	r21, Z+1	; 0x01
    5f70:	84 0f       	add	r24, r20
    5f72:	95 1f       	adc	r25, r21
    5f74:	c8 17       	cp	r28, r24
    5f76:	d9 07       	cpc	r29, r25
    5f78:	59 f4       	brne	.+22     	; 0x5f90 <free+0x82>
    5f7a:	88 81       	ld	r24, Y
    5f7c:	99 81       	ldd	r25, Y+1	; 0x01
    5f7e:	84 0f       	add	r24, r20
    5f80:	95 1f       	adc	r25, r21
    5f82:	02 96       	adiw	r24, 0x02	; 2
    5f84:	91 83       	std	Z+1, r25	; 0x01
    5f86:	80 83       	st	Z, r24
    5f88:	8a 81       	ldd	r24, Y+2	; 0x02
    5f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f8c:	93 83       	std	Z+3, r25	; 0x03
    5f8e:	82 83       	std	Z+2, r24	; 0x02
    5f90:	21 15       	cp	r18, r1
    5f92:	31 05       	cpc	r19, r1
    5f94:	29 f4       	brne	.+10     	; 0x5fa0 <free+0x92>
    5f96:	f0 93 a0 17 	sts	0x17A0, r31	; 0x8017a0 <__flp+0x1>
    5f9a:	e0 93 9f 17 	sts	0x179F, r30	; 0x80179f <__flp>
    5f9e:	3d c0       	rjmp	.+122    	; 0x601a <free+0x10c>
    5fa0:	e9 01       	movw	r28, r18
    5fa2:	fb 83       	std	Y+3, r31	; 0x03
    5fa4:	ea 83       	std	Y+2, r30	; 0x02
    5fa6:	49 91       	ld	r20, Y+
    5fa8:	59 91       	ld	r21, Y+
    5faa:	c4 0f       	add	r28, r20
    5fac:	d5 1f       	adc	r29, r21
    5fae:	ec 17       	cp	r30, r28
    5fb0:	fd 07       	cpc	r31, r29
    5fb2:	61 f4       	brne	.+24     	; 0x5fcc <free+0xbe>
    5fb4:	80 81       	ld	r24, Z
    5fb6:	91 81       	ldd	r25, Z+1	; 0x01
    5fb8:	84 0f       	add	r24, r20
    5fba:	95 1f       	adc	r25, r21
    5fbc:	02 96       	adiw	r24, 0x02	; 2
    5fbe:	e9 01       	movw	r28, r18
    5fc0:	99 83       	std	Y+1, r25	; 0x01
    5fc2:	88 83       	st	Y, r24
    5fc4:	82 81       	ldd	r24, Z+2	; 0x02
    5fc6:	93 81       	ldd	r25, Z+3	; 0x03
    5fc8:	9b 83       	std	Y+3, r25	; 0x03
    5fca:	8a 83       	std	Y+2, r24	; 0x02
    5fcc:	e0 e0       	ldi	r30, 0x00	; 0
    5fce:	f0 e0       	ldi	r31, 0x00	; 0
    5fd0:	12 96       	adiw	r26, 0x02	; 2
    5fd2:	8d 91       	ld	r24, X+
    5fd4:	9c 91       	ld	r25, X
    5fd6:	13 97       	sbiw	r26, 0x03	; 3
    5fd8:	00 97       	sbiw	r24, 0x00	; 0
    5fda:	19 f0       	breq	.+6      	; 0x5fe2 <free+0xd4>
    5fdc:	fd 01       	movw	r30, r26
    5fde:	dc 01       	movw	r26, r24
    5fe0:	f7 cf       	rjmp	.-18     	; 0x5fd0 <free+0xc2>
    5fe2:	8d 91       	ld	r24, X+
    5fe4:	9c 91       	ld	r25, X
    5fe6:	11 97       	sbiw	r26, 0x01	; 1
    5fe8:	9d 01       	movw	r18, r26
    5fea:	2e 5f       	subi	r18, 0xFE	; 254
    5fec:	3f 4f       	sbci	r19, 0xFF	; 255
    5fee:	82 0f       	add	r24, r18
    5ff0:	93 1f       	adc	r25, r19
    5ff2:	20 91 9d 17 	lds	r18, 0x179D	; 0x80179d <__brkval>
    5ff6:	30 91 9e 17 	lds	r19, 0x179E	; 0x80179e <__brkval+0x1>
    5ffa:	28 17       	cp	r18, r24
    5ffc:	39 07       	cpc	r19, r25
    5ffe:	69 f4       	brne	.+26     	; 0x601a <free+0x10c>
    6000:	30 97       	sbiw	r30, 0x00	; 0
    6002:	29 f4       	brne	.+10     	; 0x600e <free+0x100>
    6004:	10 92 a0 17 	sts	0x17A0, r1	; 0x8017a0 <__flp+0x1>
    6008:	10 92 9f 17 	sts	0x179F, r1	; 0x80179f <__flp>
    600c:	02 c0       	rjmp	.+4      	; 0x6012 <free+0x104>
    600e:	13 82       	std	Z+3, r1	; 0x03
    6010:	12 82       	std	Z+2, r1	; 0x02
    6012:	b0 93 9e 17 	sts	0x179E, r27	; 0x80179e <__brkval+0x1>
    6016:	a0 93 9d 17 	sts	0x179D, r26	; 0x80179d <__brkval>
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	08 95       	ret

00006020 <abort>:
    6020:	81 e0       	ldi	r24, 0x01	; 1
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	f8 94       	cli
    6026:	7d c3       	rjmp	.+1786   	; 0x6722 <_exit>

00006028 <memcpy>:
    6028:	fb 01       	movw	r30, r22
    602a:	dc 01       	movw	r26, r24
    602c:	02 c0       	rjmp	.+4      	; 0x6032 <memcpy+0xa>
    602e:	01 90       	ld	r0, Z+
    6030:	0d 92       	st	X+, r0
    6032:	41 50       	subi	r20, 0x01	; 1
    6034:	50 40       	sbci	r21, 0x00	; 0
    6036:	d8 f7       	brcc	.-10     	; 0x602e <memcpy+0x6>
    6038:	08 95       	ret

0000603a <memset>:
    603a:	dc 01       	movw	r26, r24
    603c:	01 c0       	rjmp	.+2      	; 0x6040 <memset+0x6>
    603e:	6d 93       	st	X+, r22
    6040:	41 50       	subi	r20, 0x01	; 1
    6042:	50 40       	sbci	r21, 0x00	; 0
    6044:	e0 f7       	brcc	.-8      	; 0x603e <memset+0x4>
    6046:	08 95       	ret

00006048 <strcasestr>:
    6048:	fb 01       	movw	r30, r22
    604a:	51 91       	ld	r21, Z+
    604c:	55 23       	and	r21, r21
    604e:	b1 f0       	breq	.+44     	; 0x607c <strcasestr+0x34>
    6050:	bf 01       	movw	r22, r30
    6052:	dc 01       	movw	r26, r24
    6054:	05 2e       	mov	r0, r21
    6056:	4d 91       	ld	r20, X+
    6058:	44 23       	and	r20, r20
    605a:	69 f0       	breq	.+26     	; 0x6076 <strcasestr+0x2e>
    605c:	10 d0       	rcall	.+32     	; 0x607e <strcasestr+0x36>
    605e:	d9 f7       	brne	.-10     	; 0x6056 <strcasestr+0xe>
    6060:	cd 01       	movw	r24, r26
    6062:	01 90       	ld	r0, Z+
    6064:	00 20       	and	r0, r0
    6066:	49 f0       	breq	.+18     	; 0x607a <strcasestr+0x32>
    6068:	4d 91       	ld	r20, X+
    606a:	41 11       	cpse	r20, r1
    606c:	08 d0       	rcall	.+16     	; 0x607e <strcasestr+0x36>
    606e:	c9 f3       	breq	.-14     	; 0x6062 <strcasestr+0x1a>
    6070:	fb 01       	movw	r30, r22
    6072:	41 11       	cpse	r20, r1
    6074:	ee cf       	rjmp	.-36     	; 0x6052 <strcasestr+0xa>
    6076:	81 e0       	ldi	r24, 0x01	; 1
    6078:	90 e0       	ldi	r25, 0x00	; 0
    607a:	01 97       	sbiw	r24, 0x01	; 1
    607c:	08 95       	ret
    607e:	40 25       	eor	r20, r0
    6080:	39 f0       	breq	.+14     	; 0x6090 <strcasestr+0x48>
    6082:	40 32       	cpi	r20, 0x20	; 32
    6084:	29 f4       	brne	.+10     	; 0x6090 <strcasestr+0x48>
    6086:	40 29       	or	r20, r0
    6088:	4b 57       	subi	r20, 0x7B	; 123
    608a:	46 5e       	subi	r20, 0xE6	; 230
    608c:	08 f0       	brcs	.+2      	; 0x6090 <strcasestr+0x48>
    608e:	18 94       	sez
    6090:	08 95       	ret

00006092 <strcat>:
    6092:	fb 01       	movw	r30, r22
    6094:	dc 01       	movw	r26, r24
    6096:	0d 90       	ld	r0, X+
    6098:	00 20       	and	r0, r0
    609a:	e9 f7       	brne	.-6      	; 0x6096 <strcat+0x4>
    609c:	11 97       	sbiw	r26, 0x01	; 1
    609e:	01 90       	ld	r0, Z+
    60a0:	0d 92       	st	X+, r0
    60a2:	00 20       	and	r0, r0
    60a4:	e1 f7       	brne	.-8      	; 0x609e <strcat+0xc>
    60a6:	08 95       	ret

000060a8 <strcpy>:
    60a8:	fb 01       	movw	r30, r22
    60aa:	dc 01       	movw	r26, r24
    60ac:	01 90       	ld	r0, Z+
    60ae:	0d 92       	st	X+, r0
    60b0:	00 20       	and	r0, r0
    60b2:	e1 f7       	brne	.-8      	; 0x60ac <strcpy+0x4>
    60b4:	08 95       	ret

000060b6 <strncasecmp>:
    60b6:	fb 01       	movw	r30, r22
    60b8:	dc 01       	movw	r26, r24
    60ba:	41 50       	subi	r20, 0x01	; 1
    60bc:	50 40       	sbci	r21, 0x00	; 0
    60be:	88 f0       	brcs	.+34     	; 0x60e2 <strncasecmp+0x2c>
    60c0:	8d 91       	ld	r24, X+
    60c2:	81 34       	cpi	r24, 0x41	; 65
    60c4:	1c f0       	brlt	.+6      	; 0x60cc <strncasecmp+0x16>
    60c6:	8b 35       	cpi	r24, 0x5B	; 91
    60c8:	0c f4       	brge	.+2      	; 0x60cc <strncasecmp+0x16>
    60ca:	80 5e       	subi	r24, 0xE0	; 224
    60cc:	61 91       	ld	r22, Z+
    60ce:	61 34       	cpi	r22, 0x41	; 65
    60d0:	1c f0       	brlt	.+6      	; 0x60d8 <strncasecmp+0x22>
    60d2:	6b 35       	cpi	r22, 0x5B	; 91
    60d4:	0c f4       	brge	.+2      	; 0x60d8 <strncasecmp+0x22>
    60d6:	60 5e       	subi	r22, 0xE0	; 224
    60d8:	86 1b       	sub	r24, r22
    60da:	61 11       	cpse	r22, r1
    60dc:	71 f3       	breq	.-36     	; 0x60ba <strncasecmp+0x4>
    60de:	99 0b       	sbc	r25, r25
    60e0:	08 95       	ret
    60e2:	88 1b       	sub	r24, r24
    60e4:	fc cf       	rjmp	.-8      	; 0x60de <strncasecmp+0x28>

000060e6 <printf>:
    60e6:	cf 93       	push	r28
    60e8:	df 93       	push	r29
    60ea:	cd b7       	in	r28, 0x3d	; 61
    60ec:	de b7       	in	r29, 0x3e	; 62
    60ee:	ae 01       	movw	r20, r28
    60f0:	4a 5f       	subi	r20, 0xFA	; 250
    60f2:	5f 4f       	sbci	r21, 0xFF	; 255
    60f4:	fa 01       	movw	r30, r20
    60f6:	61 91       	ld	r22, Z+
    60f8:	71 91       	ld	r23, Z+
    60fa:	af 01       	movw	r20, r30
    60fc:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <__iob+0x2>
    6100:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <__iob+0x3>
    6104:	61 d0       	rcall	.+194    	; 0x61c8 <vfprintf>
    6106:	df 91       	pop	r29
    6108:	cf 91       	pop	r28
    610a:	08 95       	ret

0000610c <puts>:
    610c:	0f 93       	push	r16
    610e:	1f 93       	push	r17
    6110:	cf 93       	push	r28
    6112:	df 93       	push	r29
    6114:	e0 91 a3 17 	lds	r30, 0x17A3	; 0x8017a3 <__iob+0x2>
    6118:	f0 91 a4 17 	lds	r31, 0x17A4	; 0x8017a4 <__iob+0x3>
    611c:	23 81       	ldd	r18, Z+3	; 0x03
    611e:	21 ff       	sbrs	r18, 1
    6120:	1b c0       	rjmp	.+54     	; 0x6158 <puts+0x4c>
    6122:	8c 01       	movw	r16, r24
    6124:	d0 e0       	ldi	r29, 0x00	; 0
    6126:	c0 e0       	ldi	r28, 0x00	; 0
    6128:	f8 01       	movw	r30, r16
    612a:	81 91       	ld	r24, Z+
    612c:	8f 01       	movw	r16, r30
    612e:	60 91 a3 17 	lds	r22, 0x17A3	; 0x8017a3 <__iob+0x2>
    6132:	70 91 a4 17 	lds	r23, 0x17A4	; 0x8017a4 <__iob+0x3>
    6136:	db 01       	movw	r26, r22
    6138:	18 96       	adiw	r26, 0x08	; 8
    613a:	ed 91       	ld	r30, X+
    613c:	fc 91       	ld	r31, X
    613e:	19 97       	sbiw	r26, 0x09	; 9
    6140:	88 23       	and	r24, r24
    6142:	31 f0       	breq	.+12     	; 0x6150 <puts+0x44>
    6144:	19 95       	eicall
    6146:	89 2b       	or	r24, r25
    6148:	79 f3       	breq	.-34     	; 0x6128 <puts+0x1c>
    614a:	df ef       	ldi	r29, 0xFF	; 255
    614c:	cf ef       	ldi	r28, 0xFF	; 255
    614e:	ec cf       	rjmp	.-40     	; 0x6128 <puts+0x1c>
    6150:	8a e0       	ldi	r24, 0x0A	; 10
    6152:	19 95       	eicall
    6154:	89 2b       	or	r24, r25
    6156:	19 f0       	breq	.+6      	; 0x615e <puts+0x52>
    6158:	8f ef       	ldi	r24, 0xFF	; 255
    615a:	9f ef       	ldi	r25, 0xFF	; 255
    615c:	02 c0       	rjmp	.+4      	; 0x6162 <puts+0x56>
    615e:	8d 2f       	mov	r24, r29
    6160:	9c 2f       	mov	r25, r28
    6162:	df 91       	pop	r29
    6164:	cf 91       	pop	r28
    6166:	1f 91       	pop	r17
    6168:	0f 91       	pop	r16
    616a:	08 95       	ret

0000616c <sprintf>:
    616c:	0f 93       	push	r16
    616e:	1f 93       	push	r17
    6170:	cf 93       	push	r28
    6172:	df 93       	push	r29
    6174:	cd b7       	in	r28, 0x3d	; 61
    6176:	de b7       	in	r29, 0x3e	; 62
    6178:	2e 97       	sbiw	r28, 0x0e	; 14
    617a:	0f b6       	in	r0, 0x3f	; 63
    617c:	f8 94       	cli
    617e:	de bf       	out	0x3e, r29	; 62
    6180:	0f be       	out	0x3f, r0	; 63
    6182:	cd bf       	out	0x3d, r28	; 61
    6184:	0e 89       	ldd	r16, Y+22	; 0x16
    6186:	1f 89       	ldd	r17, Y+23	; 0x17
    6188:	86 e0       	ldi	r24, 0x06	; 6
    618a:	8c 83       	std	Y+4, r24	; 0x04
    618c:	1a 83       	std	Y+2, r17	; 0x02
    618e:	09 83       	std	Y+1, r16	; 0x01
    6190:	8f ef       	ldi	r24, 0xFF	; 255
    6192:	9f e7       	ldi	r25, 0x7F	; 127
    6194:	9e 83       	std	Y+6, r25	; 0x06
    6196:	8d 83       	std	Y+5, r24	; 0x05
    6198:	ae 01       	movw	r20, r28
    619a:	46 5e       	subi	r20, 0xE6	; 230
    619c:	5f 4f       	sbci	r21, 0xFF	; 255
    619e:	68 8d       	ldd	r22, Y+24	; 0x18
    61a0:	79 8d       	ldd	r23, Y+25	; 0x19
    61a2:	ce 01       	movw	r24, r28
    61a4:	01 96       	adiw	r24, 0x01	; 1
    61a6:	10 d0       	rcall	.+32     	; 0x61c8 <vfprintf>
    61a8:	ef 81       	ldd	r30, Y+7	; 0x07
    61aa:	f8 85       	ldd	r31, Y+8	; 0x08
    61ac:	e0 0f       	add	r30, r16
    61ae:	f1 1f       	adc	r31, r17
    61b0:	10 82       	st	Z, r1
    61b2:	2e 96       	adiw	r28, 0x0e	; 14
    61b4:	0f b6       	in	r0, 0x3f	; 63
    61b6:	f8 94       	cli
    61b8:	de bf       	out	0x3e, r29	; 62
    61ba:	0f be       	out	0x3f, r0	; 63
    61bc:	cd bf       	out	0x3d, r28	; 61
    61be:	df 91       	pop	r29
    61c0:	cf 91       	pop	r28
    61c2:	1f 91       	pop	r17
    61c4:	0f 91       	pop	r16
    61c6:	08 95       	ret

000061c8 <vfprintf>:
    61c8:	2f 92       	push	r2
    61ca:	3f 92       	push	r3
    61cc:	4f 92       	push	r4
    61ce:	5f 92       	push	r5
    61d0:	6f 92       	push	r6
    61d2:	7f 92       	push	r7
    61d4:	8f 92       	push	r8
    61d6:	9f 92       	push	r9
    61d8:	af 92       	push	r10
    61da:	bf 92       	push	r11
    61dc:	cf 92       	push	r12
    61de:	df 92       	push	r13
    61e0:	ef 92       	push	r14
    61e2:	ff 92       	push	r15
    61e4:	0f 93       	push	r16
    61e6:	1f 93       	push	r17
    61e8:	cf 93       	push	r28
    61ea:	df 93       	push	r29
    61ec:	cd b7       	in	r28, 0x3d	; 61
    61ee:	de b7       	in	r29, 0x3e	; 62
    61f0:	2b 97       	sbiw	r28, 0x0b	; 11
    61f2:	0f b6       	in	r0, 0x3f	; 63
    61f4:	f8 94       	cli
    61f6:	de bf       	out	0x3e, r29	; 62
    61f8:	0f be       	out	0x3f, r0	; 63
    61fa:	cd bf       	out	0x3d, r28	; 61
    61fc:	6c 01       	movw	r12, r24
    61fe:	7b 01       	movw	r14, r22
    6200:	8a 01       	movw	r16, r20
    6202:	fc 01       	movw	r30, r24
    6204:	17 82       	std	Z+7, r1	; 0x07
    6206:	16 82       	std	Z+6, r1	; 0x06
    6208:	83 81       	ldd	r24, Z+3	; 0x03
    620a:	81 ff       	sbrs	r24, 1
    620c:	bf c1       	rjmp	.+894    	; 0x658c <vfprintf+0x3c4>
    620e:	ce 01       	movw	r24, r28
    6210:	01 96       	adiw	r24, 0x01	; 1
    6212:	3c 01       	movw	r6, r24
    6214:	f6 01       	movw	r30, r12
    6216:	93 81       	ldd	r25, Z+3	; 0x03
    6218:	f7 01       	movw	r30, r14
    621a:	93 fd       	sbrc	r25, 3
    621c:	85 91       	lpm	r24, Z+
    621e:	93 ff       	sbrs	r25, 3
    6220:	81 91       	ld	r24, Z+
    6222:	7f 01       	movw	r14, r30
    6224:	88 23       	and	r24, r24
    6226:	09 f4       	brne	.+2      	; 0x622a <vfprintf+0x62>
    6228:	ad c1       	rjmp	.+858    	; 0x6584 <vfprintf+0x3bc>
    622a:	85 32       	cpi	r24, 0x25	; 37
    622c:	39 f4       	brne	.+14     	; 0x623c <vfprintf+0x74>
    622e:	93 fd       	sbrc	r25, 3
    6230:	85 91       	lpm	r24, Z+
    6232:	93 ff       	sbrs	r25, 3
    6234:	81 91       	ld	r24, Z+
    6236:	7f 01       	movw	r14, r30
    6238:	85 32       	cpi	r24, 0x25	; 37
    623a:	21 f4       	brne	.+8      	; 0x6244 <vfprintf+0x7c>
    623c:	b6 01       	movw	r22, r12
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	d6 d1       	rcall	.+940    	; 0x65ee <fputc>
    6242:	e8 cf       	rjmp	.-48     	; 0x6214 <vfprintf+0x4c>
    6244:	91 2c       	mov	r9, r1
    6246:	21 2c       	mov	r2, r1
    6248:	31 2c       	mov	r3, r1
    624a:	ff e1       	ldi	r31, 0x1F	; 31
    624c:	f3 15       	cp	r31, r3
    624e:	d8 f0       	brcs	.+54     	; 0x6286 <vfprintf+0xbe>
    6250:	8b 32       	cpi	r24, 0x2B	; 43
    6252:	79 f0       	breq	.+30     	; 0x6272 <vfprintf+0xaa>
    6254:	38 f4       	brcc	.+14     	; 0x6264 <vfprintf+0x9c>
    6256:	80 32       	cpi	r24, 0x20	; 32
    6258:	79 f0       	breq	.+30     	; 0x6278 <vfprintf+0xb0>
    625a:	83 32       	cpi	r24, 0x23	; 35
    625c:	a1 f4       	brne	.+40     	; 0x6286 <vfprintf+0xbe>
    625e:	23 2d       	mov	r18, r3
    6260:	20 61       	ori	r18, 0x10	; 16
    6262:	1d c0       	rjmp	.+58     	; 0x629e <vfprintf+0xd6>
    6264:	8d 32       	cpi	r24, 0x2D	; 45
    6266:	61 f0       	breq	.+24     	; 0x6280 <vfprintf+0xb8>
    6268:	80 33       	cpi	r24, 0x30	; 48
    626a:	69 f4       	brne	.+26     	; 0x6286 <vfprintf+0xbe>
    626c:	23 2d       	mov	r18, r3
    626e:	21 60       	ori	r18, 0x01	; 1
    6270:	16 c0       	rjmp	.+44     	; 0x629e <vfprintf+0xd6>
    6272:	83 2d       	mov	r24, r3
    6274:	82 60       	ori	r24, 0x02	; 2
    6276:	38 2e       	mov	r3, r24
    6278:	e3 2d       	mov	r30, r3
    627a:	e4 60       	ori	r30, 0x04	; 4
    627c:	3e 2e       	mov	r3, r30
    627e:	2a c0       	rjmp	.+84     	; 0x62d4 <vfprintf+0x10c>
    6280:	f3 2d       	mov	r31, r3
    6282:	f8 60       	ori	r31, 0x08	; 8
    6284:	1d c0       	rjmp	.+58     	; 0x62c0 <vfprintf+0xf8>
    6286:	37 fc       	sbrc	r3, 7
    6288:	2d c0       	rjmp	.+90     	; 0x62e4 <vfprintf+0x11c>
    628a:	20 ed       	ldi	r18, 0xD0	; 208
    628c:	28 0f       	add	r18, r24
    628e:	2a 30       	cpi	r18, 0x0A	; 10
    6290:	40 f0       	brcs	.+16     	; 0x62a2 <vfprintf+0xda>
    6292:	8e 32       	cpi	r24, 0x2E	; 46
    6294:	b9 f4       	brne	.+46     	; 0x62c4 <vfprintf+0xfc>
    6296:	36 fc       	sbrc	r3, 6
    6298:	75 c1       	rjmp	.+746    	; 0x6584 <vfprintf+0x3bc>
    629a:	23 2d       	mov	r18, r3
    629c:	20 64       	ori	r18, 0x40	; 64
    629e:	32 2e       	mov	r3, r18
    62a0:	19 c0       	rjmp	.+50     	; 0x62d4 <vfprintf+0x10c>
    62a2:	36 fe       	sbrs	r3, 6
    62a4:	06 c0       	rjmp	.+12     	; 0x62b2 <vfprintf+0xea>
    62a6:	8a e0       	ldi	r24, 0x0A	; 10
    62a8:	98 9e       	mul	r9, r24
    62aa:	20 0d       	add	r18, r0
    62ac:	11 24       	eor	r1, r1
    62ae:	92 2e       	mov	r9, r18
    62b0:	11 c0       	rjmp	.+34     	; 0x62d4 <vfprintf+0x10c>
    62b2:	ea e0       	ldi	r30, 0x0A	; 10
    62b4:	2e 9e       	mul	r2, r30
    62b6:	20 0d       	add	r18, r0
    62b8:	11 24       	eor	r1, r1
    62ba:	22 2e       	mov	r2, r18
    62bc:	f3 2d       	mov	r31, r3
    62be:	f0 62       	ori	r31, 0x20	; 32
    62c0:	3f 2e       	mov	r3, r31
    62c2:	08 c0       	rjmp	.+16     	; 0x62d4 <vfprintf+0x10c>
    62c4:	8c 36       	cpi	r24, 0x6C	; 108
    62c6:	21 f4       	brne	.+8      	; 0x62d0 <vfprintf+0x108>
    62c8:	83 2d       	mov	r24, r3
    62ca:	80 68       	ori	r24, 0x80	; 128
    62cc:	38 2e       	mov	r3, r24
    62ce:	02 c0       	rjmp	.+4      	; 0x62d4 <vfprintf+0x10c>
    62d0:	88 36       	cpi	r24, 0x68	; 104
    62d2:	41 f4       	brne	.+16     	; 0x62e4 <vfprintf+0x11c>
    62d4:	f7 01       	movw	r30, r14
    62d6:	93 fd       	sbrc	r25, 3
    62d8:	85 91       	lpm	r24, Z+
    62da:	93 ff       	sbrs	r25, 3
    62dc:	81 91       	ld	r24, Z+
    62de:	7f 01       	movw	r14, r30
    62e0:	81 11       	cpse	r24, r1
    62e2:	b3 cf       	rjmp	.-154    	; 0x624a <vfprintf+0x82>
    62e4:	98 2f       	mov	r25, r24
    62e6:	9f 7d       	andi	r25, 0xDF	; 223
    62e8:	95 54       	subi	r25, 0x45	; 69
    62ea:	93 30       	cpi	r25, 0x03	; 3
    62ec:	28 f4       	brcc	.+10     	; 0x62f8 <vfprintf+0x130>
    62ee:	0c 5f       	subi	r16, 0xFC	; 252
    62f0:	1f 4f       	sbci	r17, 0xFF	; 255
    62f2:	9f e3       	ldi	r25, 0x3F	; 63
    62f4:	99 83       	std	Y+1, r25	; 0x01
    62f6:	0d c0       	rjmp	.+26     	; 0x6312 <vfprintf+0x14a>
    62f8:	83 36       	cpi	r24, 0x63	; 99
    62fa:	31 f0       	breq	.+12     	; 0x6308 <vfprintf+0x140>
    62fc:	83 37       	cpi	r24, 0x73	; 115
    62fe:	71 f0       	breq	.+28     	; 0x631c <vfprintf+0x154>
    6300:	83 35       	cpi	r24, 0x53	; 83
    6302:	09 f0       	breq	.+2      	; 0x6306 <vfprintf+0x13e>
    6304:	55 c0       	rjmp	.+170    	; 0x63b0 <vfprintf+0x1e8>
    6306:	20 c0       	rjmp	.+64     	; 0x6348 <vfprintf+0x180>
    6308:	f8 01       	movw	r30, r16
    630a:	80 81       	ld	r24, Z
    630c:	89 83       	std	Y+1, r24	; 0x01
    630e:	0e 5f       	subi	r16, 0xFE	; 254
    6310:	1f 4f       	sbci	r17, 0xFF	; 255
    6312:	88 24       	eor	r8, r8
    6314:	83 94       	inc	r8
    6316:	91 2c       	mov	r9, r1
    6318:	53 01       	movw	r10, r6
    631a:	12 c0       	rjmp	.+36     	; 0x6340 <vfprintf+0x178>
    631c:	28 01       	movw	r4, r16
    631e:	f2 e0       	ldi	r31, 0x02	; 2
    6320:	4f 0e       	add	r4, r31
    6322:	51 1c       	adc	r5, r1
    6324:	f8 01       	movw	r30, r16
    6326:	a0 80       	ld	r10, Z
    6328:	b1 80       	ldd	r11, Z+1	; 0x01
    632a:	36 fe       	sbrs	r3, 6
    632c:	03 c0       	rjmp	.+6      	; 0x6334 <vfprintf+0x16c>
    632e:	69 2d       	mov	r22, r9
    6330:	70 e0       	ldi	r23, 0x00	; 0
    6332:	02 c0       	rjmp	.+4      	; 0x6338 <vfprintf+0x170>
    6334:	6f ef       	ldi	r22, 0xFF	; 255
    6336:	7f ef       	ldi	r23, 0xFF	; 255
    6338:	c5 01       	movw	r24, r10
    633a:	4e d1       	rcall	.+668    	; 0x65d8 <strnlen>
    633c:	4c 01       	movw	r8, r24
    633e:	82 01       	movw	r16, r4
    6340:	f3 2d       	mov	r31, r3
    6342:	ff 77       	andi	r31, 0x7F	; 127
    6344:	3f 2e       	mov	r3, r31
    6346:	15 c0       	rjmp	.+42     	; 0x6372 <vfprintf+0x1aa>
    6348:	28 01       	movw	r4, r16
    634a:	22 e0       	ldi	r18, 0x02	; 2
    634c:	42 0e       	add	r4, r18
    634e:	51 1c       	adc	r5, r1
    6350:	f8 01       	movw	r30, r16
    6352:	a0 80       	ld	r10, Z
    6354:	b1 80       	ldd	r11, Z+1	; 0x01
    6356:	36 fe       	sbrs	r3, 6
    6358:	03 c0       	rjmp	.+6      	; 0x6360 <vfprintf+0x198>
    635a:	69 2d       	mov	r22, r9
    635c:	70 e0       	ldi	r23, 0x00	; 0
    635e:	02 c0       	rjmp	.+4      	; 0x6364 <vfprintf+0x19c>
    6360:	6f ef       	ldi	r22, 0xFF	; 255
    6362:	7f ef       	ldi	r23, 0xFF	; 255
    6364:	c5 01       	movw	r24, r10
    6366:	2d d1       	rcall	.+602    	; 0x65c2 <strnlen_P>
    6368:	4c 01       	movw	r8, r24
    636a:	f3 2d       	mov	r31, r3
    636c:	f0 68       	ori	r31, 0x80	; 128
    636e:	3f 2e       	mov	r3, r31
    6370:	82 01       	movw	r16, r4
    6372:	33 fc       	sbrc	r3, 3
    6374:	19 c0       	rjmp	.+50     	; 0x63a8 <vfprintf+0x1e0>
    6376:	82 2d       	mov	r24, r2
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	88 16       	cp	r8, r24
    637c:	99 06       	cpc	r9, r25
    637e:	a0 f4       	brcc	.+40     	; 0x63a8 <vfprintf+0x1e0>
    6380:	b6 01       	movw	r22, r12
    6382:	80 e2       	ldi	r24, 0x20	; 32
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	33 d1       	rcall	.+614    	; 0x65ee <fputc>
    6388:	2a 94       	dec	r2
    638a:	f5 cf       	rjmp	.-22     	; 0x6376 <vfprintf+0x1ae>
    638c:	f5 01       	movw	r30, r10
    638e:	37 fc       	sbrc	r3, 7
    6390:	85 91       	lpm	r24, Z+
    6392:	37 fe       	sbrs	r3, 7
    6394:	81 91       	ld	r24, Z+
    6396:	5f 01       	movw	r10, r30
    6398:	b6 01       	movw	r22, r12
    639a:	90 e0       	ldi	r25, 0x00	; 0
    639c:	28 d1       	rcall	.+592    	; 0x65ee <fputc>
    639e:	21 10       	cpse	r2, r1
    63a0:	2a 94       	dec	r2
    63a2:	21 e0       	ldi	r18, 0x01	; 1
    63a4:	82 1a       	sub	r8, r18
    63a6:	91 08       	sbc	r9, r1
    63a8:	81 14       	cp	r8, r1
    63aa:	91 04       	cpc	r9, r1
    63ac:	79 f7       	brne	.-34     	; 0x638c <vfprintf+0x1c4>
    63ae:	e1 c0       	rjmp	.+450    	; 0x6572 <vfprintf+0x3aa>
    63b0:	84 36       	cpi	r24, 0x64	; 100
    63b2:	11 f0       	breq	.+4      	; 0x63b8 <vfprintf+0x1f0>
    63b4:	89 36       	cpi	r24, 0x69	; 105
    63b6:	39 f5       	brne	.+78     	; 0x6406 <vfprintf+0x23e>
    63b8:	f8 01       	movw	r30, r16
    63ba:	37 fe       	sbrs	r3, 7
    63bc:	07 c0       	rjmp	.+14     	; 0x63cc <vfprintf+0x204>
    63be:	60 81       	ld	r22, Z
    63c0:	71 81       	ldd	r23, Z+1	; 0x01
    63c2:	82 81       	ldd	r24, Z+2	; 0x02
    63c4:	93 81       	ldd	r25, Z+3	; 0x03
    63c6:	0c 5f       	subi	r16, 0xFC	; 252
    63c8:	1f 4f       	sbci	r17, 0xFF	; 255
    63ca:	08 c0       	rjmp	.+16     	; 0x63dc <vfprintf+0x214>
    63cc:	60 81       	ld	r22, Z
    63ce:	71 81       	ldd	r23, Z+1	; 0x01
    63d0:	07 2e       	mov	r0, r23
    63d2:	00 0c       	add	r0, r0
    63d4:	88 0b       	sbc	r24, r24
    63d6:	99 0b       	sbc	r25, r25
    63d8:	0e 5f       	subi	r16, 0xFE	; 254
    63da:	1f 4f       	sbci	r17, 0xFF	; 255
    63dc:	f3 2d       	mov	r31, r3
    63de:	ff 76       	andi	r31, 0x6F	; 111
    63e0:	3f 2e       	mov	r3, r31
    63e2:	97 ff       	sbrs	r25, 7
    63e4:	09 c0       	rjmp	.+18     	; 0x63f8 <vfprintf+0x230>
    63e6:	90 95       	com	r25
    63e8:	80 95       	com	r24
    63ea:	70 95       	com	r23
    63ec:	61 95       	neg	r22
    63ee:	7f 4f       	sbci	r23, 0xFF	; 255
    63f0:	8f 4f       	sbci	r24, 0xFF	; 255
    63f2:	9f 4f       	sbci	r25, 0xFF	; 255
    63f4:	f0 68       	ori	r31, 0x80	; 128
    63f6:	3f 2e       	mov	r3, r31
    63f8:	2a e0       	ldi	r18, 0x0A	; 10
    63fa:	30 e0       	ldi	r19, 0x00	; 0
    63fc:	a3 01       	movw	r20, r6
    63fe:	33 d1       	rcall	.+614    	; 0x6666 <__ultoa_invert>
    6400:	88 2e       	mov	r8, r24
    6402:	86 18       	sub	r8, r6
    6404:	44 c0       	rjmp	.+136    	; 0x648e <vfprintf+0x2c6>
    6406:	85 37       	cpi	r24, 0x75	; 117
    6408:	31 f4       	brne	.+12     	; 0x6416 <vfprintf+0x24e>
    640a:	23 2d       	mov	r18, r3
    640c:	2f 7e       	andi	r18, 0xEF	; 239
    640e:	b2 2e       	mov	r11, r18
    6410:	2a e0       	ldi	r18, 0x0A	; 10
    6412:	30 e0       	ldi	r19, 0x00	; 0
    6414:	25 c0       	rjmp	.+74     	; 0x6460 <vfprintf+0x298>
    6416:	93 2d       	mov	r25, r3
    6418:	99 7f       	andi	r25, 0xF9	; 249
    641a:	b9 2e       	mov	r11, r25
    641c:	8f 36       	cpi	r24, 0x6F	; 111
    641e:	c1 f0       	breq	.+48     	; 0x6450 <vfprintf+0x288>
    6420:	18 f4       	brcc	.+6      	; 0x6428 <vfprintf+0x260>
    6422:	88 35       	cpi	r24, 0x58	; 88
    6424:	79 f0       	breq	.+30     	; 0x6444 <vfprintf+0x27c>
    6426:	ae c0       	rjmp	.+348    	; 0x6584 <vfprintf+0x3bc>
    6428:	80 37       	cpi	r24, 0x70	; 112
    642a:	19 f0       	breq	.+6      	; 0x6432 <vfprintf+0x26a>
    642c:	88 37       	cpi	r24, 0x78	; 120
    642e:	21 f0       	breq	.+8      	; 0x6438 <vfprintf+0x270>
    6430:	a9 c0       	rjmp	.+338    	; 0x6584 <vfprintf+0x3bc>
    6432:	e9 2f       	mov	r30, r25
    6434:	e0 61       	ori	r30, 0x10	; 16
    6436:	be 2e       	mov	r11, r30
    6438:	b4 fe       	sbrs	r11, 4
    643a:	0d c0       	rjmp	.+26     	; 0x6456 <vfprintf+0x28e>
    643c:	fb 2d       	mov	r31, r11
    643e:	f4 60       	ori	r31, 0x04	; 4
    6440:	bf 2e       	mov	r11, r31
    6442:	09 c0       	rjmp	.+18     	; 0x6456 <vfprintf+0x28e>
    6444:	34 fe       	sbrs	r3, 4
    6446:	0a c0       	rjmp	.+20     	; 0x645c <vfprintf+0x294>
    6448:	29 2f       	mov	r18, r25
    644a:	26 60       	ori	r18, 0x06	; 6
    644c:	b2 2e       	mov	r11, r18
    644e:	06 c0       	rjmp	.+12     	; 0x645c <vfprintf+0x294>
    6450:	28 e0       	ldi	r18, 0x08	; 8
    6452:	30 e0       	ldi	r19, 0x00	; 0
    6454:	05 c0       	rjmp	.+10     	; 0x6460 <vfprintf+0x298>
    6456:	20 e1       	ldi	r18, 0x10	; 16
    6458:	30 e0       	ldi	r19, 0x00	; 0
    645a:	02 c0       	rjmp	.+4      	; 0x6460 <vfprintf+0x298>
    645c:	20 e1       	ldi	r18, 0x10	; 16
    645e:	32 e0       	ldi	r19, 0x02	; 2
    6460:	f8 01       	movw	r30, r16
    6462:	b7 fe       	sbrs	r11, 7
    6464:	07 c0       	rjmp	.+14     	; 0x6474 <vfprintf+0x2ac>
    6466:	60 81       	ld	r22, Z
    6468:	71 81       	ldd	r23, Z+1	; 0x01
    646a:	82 81       	ldd	r24, Z+2	; 0x02
    646c:	93 81       	ldd	r25, Z+3	; 0x03
    646e:	0c 5f       	subi	r16, 0xFC	; 252
    6470:	1f 4f       	sbci	r17, 0xFF	; 255
    6472:	06 c0       	rjmp	.+12     	; 0x6480 <vfprintf+0x2b8>
    6474:	60 81       	ld	r22, Z
    6476:	71 81       	ldd	r23, Z+1	; 0x01
    6478:	80 e0       	ldi	r24, 0x00	; 0
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	0e 5f       	subi	r16, 0xFE	; 254
    647e:	1f 4f       	sbci	r17, 0xFF	; 255
    6480:	a3 01       	movw	r20, r6
    6482:	f1 d0       	rcall	.+482    	; 0x6666 <__ultoa_invert>
    6484:	88 2e       	mov	r8, r24
    6486:	86 18       	sub	r8, r6
    6488:	fb 2d       	mov	r31, r11
    648a:	ff 77       	andi	r31, 0x7F	; 127
    648c:	3f 2e       	mov	r3, r31
    648e:	36 fe       	sbrs	r3, 6
    6490:	0d c0       	rjmp	.+26     	; 0x64ac <vfprintf+0x2e4>
    6492:	23 2d       	mov	r18, r3
    6494:	2e 7f       	andi	r18, 0xFE	; 254
    6496:	a2 2e       	mov	r10, r18
    6498:	89 14       	cp	r8, r9
    649a:	58 f4       	brcc	.+22     	; 0x64b2 <vfprintf+0x2ea>
    649c:	34 fe       	sbrs	r3, 4
    649e:	0b c0       	rjmp	.+22     	; 0x64b6 <vfprintf+0x2ee>
    64a0:	32 fc       	sbrc	r3, 2
    64a2:	09 c0       	rjmp	.+18     	; 0x64b6 <vfprintf+0x2ee>
    64a4:	83 2d       	mov	r24, r3
    64a6:	8e 7e       	andi	r24, 0xEE	; 238
    64a8:	a8 2e       	mov	r10, r24
    64aa:	05 c0       	rjmp	.+10     	; 0x64b6 <vfprintf+0x2ee>
    64ac:	b8 2c       	mov	r11, r8
    64ae:	a3 2c       	mov	r10, r3
    64b0:	03 c0       	rjmp	.+6      	; 0x64b8 <vfprintf+0x2f0>
    64b2:	b8 2c       	mov	r11, r8
    64b4:	01 c0       	rjmp	.+2      	; 0x64b8 <vfprintf+0x2f0>
    64b6:	b9 2c       	mov	r11, r9
    64b8:	a4 fe       	sbrs	r10, 4
    64ba:	0f c0       	rjmp	.+30     	; 0x64da <vfprintf+0x312>
    64bc:	fe 01       	movw	r30, r28
    64be:	e8 0d       	add	r30, r8
    64c0:	f1 1d       	adc	r31, r1
    64c2:	80 81       	ld	r24, Z
    64c4:	80 33       	cpi	r24, 0x30	; 48
    64c6:	21 f4       	brne	.+8      	; 0x64d0 <vfprintf+0x308>
    64c8:	9a 2d       	mov	r25, r10
    64ca:	99 7e       	andi	r25, 0xE9	; 233
    64cc:	a9 2e       	mov	r10, r25
    64ce:	09 c0       	rjmp	.+18     	; 0x64e2 <vfprintf+0x31a>
    64d0:	a2 fe       	sbrs	r10, 2
    64d2:	06 c0       	rjmp	.+12     	; 0x64e0 <vfprintf+0x318>
    64d4:	b3 94       	inc	r11
    64d6:	b3 94       	inc	r11
    64d8:	04 c0       	rjmp	.+8      	; 0x64e2 <vfprintf+0x31a>
    64da:	8a 2d       	mov	r24, r10
    64dc:	86 78       	andi	r24, 0x86	; 134
    64de:	09 f0       	breq	.+2      	; 0x64e2 <vfprintf+0x31a>
    64e0:	b3 94       	inc	r11
    64e2:	a3 fc       	sbrc	r10, 3
    64e4:	10 c0       	rjmp	.+32     	; 0x6506 <vfprintf+0x33e>
    64e6:	a0 fe       	sbrs	r10, 0
    64e8:	06 c0       	rjmp	.+12     	; 0x64f6 <vfprintf+0x32e>
    64ea:	b2 14       	cp	r11, r2
    64ec:	80 f4       	brcc	.+32     	; 0x650e <vfprintf+0x346>
    64ee:	28 0c       	add	r2, r8
    64f0:	92 2c       	mov	r9, r2
    64f2:	9b 18       	sub	r9, r11
    64f4:	0d c0       	rjmp	.+26     	; 0x6510 <vfprintf+0x348>
    64f6:	b2 14       	cp	r11, r2
    64f8:	58 f4       	brcc	.+22     	; 0x6510 <vfprintf+0x348>
    64fa:	b6 01       	movw	r22, r12
    64fc:	80 e2       	ldi	r24, 0x20	; 32
    64fe:	90 e0       	ldi	r25, 0x00	; 0
    6500:	76 d0       	rcall	.+236    	; 0x65ee <fputc>
    6502:	b3 94       	inc	r11
    6504:	f8 cf       	rjmp	.-16     	; 0x64f6 <vfprintf+0x32e>
    6506:	b2 14       	cp	r11, r2
    6508:	18 f4       	brcc	.+6      	; 0x6510 <vfprintf+0x348>
    650a:	2b 18       	sub	r2, r11
    650c:	02 c0       	rjmp	.+4      	; 0x6512 <vfprintf+0x34a>
    650e:	98 2c       	mov	r9, r8
    6510:	21 2c       	mov	r2, r1
    6512:	a4 fe       	sbrs	r10, 4
    6514:	0f c0       	rjmp	.+30     	; 0x6534 <vfprintf+0x36c>
    6516:	b6 01       	movw	r22, r12
    6518:	80 e3       	ldi	r24, 0x30	; 48
    651a:	90 e0       	ldi	r25, 0x00	; 0
    651c:	68 d0       	rcall	.+208    	; 0x65ee <fputc>
    651e:	a2 fe       	sbrs	r10, 2
    6520:	16 c0       	rjmp	.+44     	; 0x654e <vfprintf+0x386>
    6522:	a1 fc       	sbrc	r10, 1
    6524:	03 c0       	rjmp	.+6      	; 0x652c <vfprintf+0x364>
    6526:	88 e7       	ldi	r24, 0x78	; 120
    6528:	90 e0       	ldi	r25, 0x00	; 0
    652a:	02 c0       	rjmp	.+4      	; 0x6530 <vfprintf+0x368>
    652c:	88 e5       	ldi	r24, 0x58	; 88
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	b6 01       	movw	r22, r12
    6532:	0c c0       	rjmp	.+24     	; 0x654c <vfprintf+0x384>
    6534:	8a 2d       	mov	r24, r10
    6536:	86 78       	andi	r24, 0x86	; 134
    6538:	51 f0       	breq	.+20     	; 0x654e <vfprintf+0x386>
    653a:	a1 fe       	sbrs	r10, 1
    653c:	02 c0       	rjmp	.+4      	; 0x6542 <vfprintf+0x37a>
    653e:	8b e2       	ldi	r24, 0x2B	; 43
    6540:	01 c0       	rjmp	.+2      	; 0x6544 <vfprintf+0x37c>
    6542:	80 e2       	ldi	r24, 0x20	; 32
    6544:	a7 fc       	sbrc	r10, 7
    6546:	8d e2       	ldi	r24, 0x2D	; 45
    6548:	b6 01       	movw	r22, r12
    654a:	90 e0       	ldi	r25, 0x00	; 0
    654c:	50 d0       	rcall	.+160    	; 0x65ee <fputc>
    654e:	89 14       	cp	r8, r9
    6550:	30 f4       	brcc	.+12     	; 0x655e <vfprintf+0x396>
    6552:	b6 01       	movw	r22, r12
    6554:	80 e3       	ldi	r24, 0x30	; 48
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	4a d0       	rcall	.+148    	; 0x65ee <fputc>
    655a:	9a 94       	dec	r9
    655c:	f8 cf       	rjmp	.-16     	; 0x654e <vfprintf+0x386>
    655e:	8a 94       	dec	r8
    6560:	f3 01       	movw	r30, r6
    6562:	e8 0d       	add	r30, r8
    6564:	f1 1d       	adc	r31, r1
    6566:	80 81       	ld	r24, Z
    6568:	b6 01       	movw	r22, r12
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	40 d0       	rcall	.+128    	; 0x65ee <fputc>
    656e:	81 10       	cpse	r8, r1
    6570:	f6 cf       	rjmp	.-20     	; 0x655e <vfprintf+0x396>
    6572:	22 20       	and	r2, r2
    6574:	09 f4       	brne	.+2      	; 0x6578 <vfprintf+0x3b0>
    6576:	4e ce       	rjmp	.-868    	; 0x6214 <vfprintf+0x4c>
    6578:	b6 01       	movw	r22, r12
    657a:	80 e2       	ldi	r24, 0x20	; 32
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	37 d0       	rcall	.+110    	; 0x65ee <fputc>
    6580:	2a 94       	dec	r2
    6582:	f7 cf       	rjmp	.-18     	; 0x6572 <vfprintf+0x3aa>
    6584:	f6 01       	movw	r30, r12
    6586:	86 81       	ldd	r24, Z+6	; 0x06
    6588:	97 81       	ldd	r25, Z+7	; 0x07
    658a:	02 c0       	rjmp	.+4      	; 0x6590 <vfprintf+0x3c8>
    658c:	8f ef       	ldi	r24, 0xFF	; 255
    658e:	9f ef       	ldi	r25, 0xFF	; 255
    6590:	2b 96       	adiw	r28, 0x0b	; 11
    6592:	0f b6       	in	r0, 0x3f	; 63
    6594:	f8 94       	cli
    6596:	de bf       	out	0x3e, r29	; 62
    6598:	0f be       	out	0x3f, r0	; 63
    659a:	cd bf       	out	0x3d, r28	; 61
    659c:	df 91       	pop	r29
    659e:	cf 91       	pop	r28
    65a0:	1f 91       	pop	r17
    65a2:	0f 91       	pop	r16
    65a4:	ff 90       	pop	r15
    65a6:	ef 90       	pop	r14
    65a8:	df 90       	pop	r13
    65aa:	cf 90       	pop	r12
    65ac:	bf 90       	pop	r11
    65ae:	af 90       	pop	r10
    65b0:	9f 90       	pop	r9
    65b2:	8f 90       	pop	r8
    65b4:	7f 90       	pop	r7
    65b6:	6f 90       	pop	r6
    65b8:	5f 90       	pop	r5
    65ba:	4f 90       	pop	r4
    65bc:	3f 90       	pop	r3
    65be:	2f 90       	pop	r2
    65c0:	08 95       	ret

000065c2 <strnlen_P>:
    65c2:	fc 01       	movw	r30, r24
    65c4:	05 90       	lpm	r0, Z+
    65c6:	61 50       	subi	r22, 0x01	; 1
    65c8:	70 40       	sbci	r23, 0x00	; 0
    65ca:	01 10       	cpse	r0, r1
    65cc:	d8 f7       	brcc	.-10     	; 0x65c4 <strnlen_P+0x2>
    65ce:	80 95       	com	r24
    65d0:	90 95       	com	r25
    65d2:	8e 0f       	add	r24, r30
    65d4:	9f 1f       	adc	r25, r31
    65d6:	08 95       	ret

000065d8 <strnlen>:
    65d8:	fc 01       	movw	r30, r24
    65da:	61 50       	subi	r22, 0x01	; 1
    65dc:	70 40       	sbci	r23, 0x00	; 0
    65de:	01 90       	ld	r0, Z+
    65e0:	01 10       	cpse	r0, r1
    65e2:	d8 f7       	brcc	.-10     	; 0x65da <strnlen+0x2>
    65e4:	80 95       	com	r24
    65e6:	90 95       	com	r25
    65e8:	8e 0f       	add	r24, r30
    65ea:	9f 1f       	adc	r25, r31
    65ec:	08 95       	ret

000065ee <fputc>:
    65ee:	0f 93       	push	r16
    65f0:	1f 93       	push	r17
    65f2:	cf 93       	push	r28
    65f4:	df 93       	push	r29
    65f6:	fb 01       	movw	r30, r22
    65f8:	23 81       	ldd	r18, Z+3	; 0x03
    65fa:	21 fd       	sbrc	r18, 1
    65fc:	03 c0       	rjmp	.+6      	; 0x6604 <fputc+0x16>
    65fe:	8f ef       	ldi	r24, 0xFF	; 255
    6600:	9f ef       	ldi	r25, 0xFF	; 255
    6602:	2c c0       	rjmp	.+88     	; 0x665c <fputc+0x6e>
    6604:	22 ff       	sbrs	r18, 2
    6606:	16 c0       	rjmp	.+44     	; 0x6634 <fputc+0x46>
    6608:	46 81       	ldd	r20, Z+6	; 0x06
    660a:	57 81       	ldd	r21, Z+7	; 0x07
    660c:	24 81       	ldd	r18, Z+4	; 0x04
    660e:	35 81       	ldd	r19, Z+5	; 0x05
    6610:	42 17       	cp	r20, r18
    6612:	53 07       	cpc	r21, r19
    6614:	44 f4       	brge	.+16     	; 0x6626 <fputc+0x38>
    6616:	a0 81       	ld	r26, Z
    6618:	b1 81       	ldd	r27, Z+1	; 0x01
    661a:	9d 01       	movw	r18, r26
    661c:	2f 5f       	subi	r18, 0xFF	; 255
    661e:	3f 4f       	sbci	r19, 0xFF	; 255
    6620:	31 83       	std	Z+1, r19	; 0x01
    6622:	20 83       	st	Z, r18
    6624:	8c 93       	st	X, r24
    6626:	26 81       	ldd	r18, Z+6	; 0x06
    6628:	37 81       	ldd	r19, Z+7	; 0x07
    662a:	2f 5f       	subi	r18, 0xFF	; 255
    662c:	3f 4f       	sbci	r19, 0xFF	; 255
    662e:	37 83       	std	Z+7, r19	; 0x07
    6630:	26 83       	std	Z+6, r18	; 0x06
    6632:	14 c0       	rjmp	.+40     	; 0x665c <fputc+0x6e>
    6634:	8b 01       	movw	r16, r22
    6636:	ec 01       	movw	r28, r24
    6638:	fb 01       	movw	r30, r22
    663a:	00 84       	ldd	r0, Z+8	; 0x08
    663c:	f1 85       	ldd	r31, Z+9	; 0x09
    663e:	e0 2d       	mov	r30, r0
    6640:	19 95       	eicall
    6642:	89 2b       	or	r24, r25
    6644:	e1 f6       	brne	.-72     	; 0x65fe <fputc+0x10>
    6646:	d8 01       	movw	r26, r16
    6648:	16 96       	adiw	r26, 0x06	; 6
    664a:	8d 91       	ld	r24, X+
    664c:	9c 91       	ld	r25, X
    664e:	17 97       	sbiw	r26, 0x07	; 7
    6650:	01 96       	adiw	r24, 0x01	; 1
    6652:	17 96       	adiw	r26, 0x07	; 7
    6654:	9c 93       	st	X, r25
    6656:	8e 93       	st	-X, r24
    6658:	16 97       	sbiw	r26, 0x06	; 6
    665a:	ce 01       	movw	r24, r28
    665c:	df 91       	pop	r29
    665e:	cf 91       	pop	r28
    6660:	1f 91       	pop	r17
    6662:	0f 91       	pop	r16
    6664:	08 95       	ret

00006666 <__ultoa_invert>:
    6666:	fa 01       	movw	r30, r20
    6668:	aa 27       	eor	r26, r26
    666a:	28 30       	cpi	r18, 0x08	; 8
    666c:	51 f1       	breq	.+84     	; 0x66c2 <__ultoa_invert+0x5c>
    666e:	20 31       	cpi	r18, 0x10	; 16
    6670:	81 f1       	breq	.+96     	; 0x66d2 <__ultoa_invert+0x6c>
    6672:	e8 94       	clt
    6674:	6f 93       	push	r22
    6676:	6e 7f       	andi	r22, 0xFE	; 254
    6678:	6e 5f       	subi	r22, 0xFE	; 254
    667a:	7f 4f       	sbci	r23, 0xFF	; 255
    667c:	8f 4f       	sbci	r24, 0xFF	; 255
    667e:	9f 4f       	sbci	r25, 0xFF	; 255
    6680:	af 4f       	sbci	r26, 0xFF	; 255
    6682:	b1 e0       	ldi	r27, 0x01	; 1
    6684:	3e d0       	rcall	.+124    	; 0x6702 <__ultoa_invert+0x9c>
    6686:	b4 e0       	ldi	r27, 0x04	; 4
    6688:	3c d0       	rcall	.+120    	; 0x6702 <__ultoa_invert+0x9c>
    668a:	67 0f       	add	r22, r23
    668c:	78 1f       	adc	r23, r24
    668e:	89 1f       	adc	r24, r25
    6690:	9a 1f       	adc	r25, r26
    6692:	a1 1d       	adc	r26, r1
    6694:	68 0f       	add	r22, r24
    6696:	79 1f       	adc	r23, r25
    6698:	8a 1f       	adc	r24, r26
    669a:	91 1d       	adc	r25, r1
    669c:	a1 1d       	adc	r26, r1
    669e:	6a 0f       	add	r22, r26
    66a0:	71 1d       	adc	r23, r1
    66a2:	81 1d       	adc	r24, r1
    66a4:	91 1d       	adc	r25, r1
    66a6:	a1 1d       	adc	r26, r1
    66a8:	20 d0       	rcall	.+64     	; 0x66ea <__ultoa_invert+0x84>
    66aa:	09 f4       	brne	.+2      	; 0x66ae <__ultoa_invert+0x48>
    66ac:	68 94       	set
    66ae:	3f 91       	pop	r19
    66b0:	2a e0       	ldi	r18, 0x0A	; 10
    66b2:	26 9f       	mul	r18, r22
    66b4:	11 24       	eor	r1, r1
    66b6:	30 19       	sub	r19, r0
    66b8:	30 5d       	subi	r19, 0xD0	; 208
    66ba:	31 93       	st	Z+, r19
    66bc:	de f6       	brtc	.-74     	; 0x6674 <__ultoa_invert+0xe>
    66be:	cf 01       	movw	r24, r30
    66c0:	08 95       	ret
    66c2:	46 2f       	mov	r20, r22
    66c4:	47 70       	andi	r20, 0x07	; 7
    66c6:	40 5d       	subi	r20, 0xD0	; 208
    66c8:	41 93       	st	Z+, r20
    66ca:	b3 e0       	ldi	r27, 0x03	; 3
    66cc:	0f d0       	rcall	.+30     	; 0x66ec <__ultoa_invert+0x86>
    66ce:	c9 f7       	brne	.-14     	; 0x66c2 <__ultoa_invert+0x5c>
    66d0:	f6 cf       	rjmp	.-20     	; 0x66be <__ultoa_invert+0x58>
    66d2:	46 2f       	mov	r20, r22
    66d4:	4f 70       	andi	r20, 0x0F	; 15
    66d6:	40 5d       	subi	r20, 0xD0	; 208
    66d8:	4a 33       	cpi	r20, 0x3A	; 58
    66da:	18 f0       	brcs	.+6      	; 0x66e2 <__ultoa_invert+0x7c>
    66dc:	49 5d       	subi	r20, 0xD9	; 217
    66de:	31 fd       	sbrc	r19, 1
    66e0:	40 52       	subi	r20, 0x20	; 32
    66e2:	41 93       	st	Z+, r20
    66e4:	02 d0       	rcall	.+4      	; 0x66ea <__ultoa_invert+0x84>
    66e6:	a9 f7       	brne	.-22     	; 0x66d2 <__ultoa_invert+0x6c>
    66e8:	ea cf       	rjmp	.-44     	; 0x66be <__ultoa_invert+0x58>
    66ea:	b4 e0       	ldi	r27, 0x04	; 4
    66ec:	a6 95       	lsr	r26
    66ee:	97 95       	ror	r25
    66f0:	87 95       	ror	r24
    66f2:	77 95       	ror	r23
    66f4:	67 95       	ror	r22
    66f6:	ba 95       	dec	r27
    66f8:	c9 f7       	brne	.-14     	; 0x66ec <__ultoa_invert+0x86>
    66fa:	00 97       	sbiw	r24, 0x00	; 0
    66fc:	61 05       	cpc	r22, r1
    66fe:	71 05       	cpc	r23, r1
    6700:	08 95       	ret
    6702:	9b 01       	movw	r18, r22
    6704:	ac 01       	movw	r20, r24
    6706:	0a 2e       	mov	r0, r26
    6708:	06 94       	lsr	r0
    670a:	57 95       	ror	r21
    670c:	47 95       	ror	r20
    670e:	37 95       	ror	r19
    6710:	27 95       	ror	r18
    6712:	ba 95       	dec	r27
    6714:	c9 f7       	brne	.-14     	; 0x6708 <__ultoa_invert+0xa2>
    6716:	62 0f       	add	r22, r18
    6718:	73 1f       	adc	r23, r19
    671a:	84 1f       	adc	r24, r20
    671c:	95 1f       	adc	r25, r21
    671e:	a0 1d       	adc	r26, r0
    6720:	08 95       	ret

00006722 <_exit>:
    6722:	f8 94       	cli

00006724 <__stop_program>:
    6724:	ff cf       	rjmp	.-2      	; 0x6724 <__stop_program>
