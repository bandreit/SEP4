
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800200  000048fe  00004992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000afb  00800380  00800380  00004b12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000948  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b690  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f39  00000000  00000000  00010b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b57  00000000  00000000  00013ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002138  00000000  00000000  00019618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003892  00000000  00000000  0001b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a93b  00000000  00000000  0001efe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b0  00000000  00000000  0002991d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	3a c6       	rjmp	.+3188   	; 0xca6 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__vector_25>
      68:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__vector_36>
      94:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__vector_51>
      d0:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__vector_54>
      dc:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a0 15       	cp	r26, r0
      e6:	a0 15       	cp	r26, r0
      e8:	a0 15       	cp	r26, r0
      ea:	d7 15       	cp	r29, r7
      ec:	df 15       	cp	r29, r15
      ee:	f4 15       	cp	r31, r4
      f0:	a0 15       	cp	r26, r0
      f2:	a0 15       	cp	r26, r0
      f4:	d7 15       	cp	r29, r7
      f6:	df 15       	cp	r29, r15
      f8:	6e 1d       	adc	r22, r14
      fa:	de 1d       	adc	r29, r14
      fc:	de 1d       	adc	r29, r14
      fe:	de 1d       	adc	r29, r14
     100:	de 1d       	adc	r29, r14
     102:	de 1d       	adc	r29, r14
     104:	de 1d       	adc	r29, r14
     106:	de 1d       	adc	r29, r14
     108:	6e 1d       	adc	r22, r14
     10a:	de 1d       	adc	r29, r14
     10c:	de 1d       	adc	r29, r14
     10e:	de 1d       	adc	r29, r14
     110:	de 1d       	adc	r29, r14
     112:	de 1d       	adc	r29, r14
     114:	de 1d       	adc	r29, r14
     116:	de 1d       	adc	r29, r14
     118:	70 1d       	adc	r23, r0
     11a:	de 1d       	adc	r29, r14
     11c:	de 1d       	adc	r29, r14
     11e:	de 1d       	adc	r29, r14
     120:	de 1d       	adc	r29, r14
     122:	de 1d       	adc	r29, r14
     124:	de 1d       	adc	r29, r14
     126:	de 1d       	adc	r29, r14
     128:	de 1d       	adc	r29, r14
     12a:	de 1d       	adc	r29, r14
     12c:	de 1d       	adc	r29, r14
     12e:	de 1d       	adc	r29, r14
     130:	de 1d       	adc	r29, r14
     132:	de 1d       	adc	r29, r14
     134:	de 1d       	adc	r29, r14
     136:	de 1d       	adc	r29, r14
     138:	70 1d       	adc	r23, r0
     13a:	de 1d       	adc	r29, r14
     13c:	de 1d       	adc	r29, r14
     13e:	de 1d       	adc	r29, r14
     140:	de 1d       	adc	r29, r14
     142:	de 1d       	adc	r29, r14
     144:	de 1d       	adc	r29, r14
     146:	de 1d       	adc	r29, r14
     148:	de 1d       	adc	r29, r14
     14a:	de 1d       	adc	r29, r14
     14c:	de 1d       	adc	r29, r14
     14e:	de 1d       	adc	r29, r14
     150:	de 1d       	adc	r29, r14
     152:	de 1d       	adc	r29, r14
     154:	de 1d       	adc	r29, r14
     156:	de 1d       	adc	r29, r14
     158:	da 1d       	adc	r29, r10
     15a:	de 1d       	adc	r29, r14
     15c:	de 1d       	adc	r29, r14
     15e:	de 1d       	adc	r29, r14
     160:	de 1d       	adc	r29, r14
     162:	de 1d       	adc	r29, r14
     164:	de 1d       	adc	r29, r14
     166:	de 1d       	adc	r29, r14
     168:	a5 1d       	adc	r26, r5
     16a:	de 1d       	adc	r29, r14
     16c:	de 1d       	adc	r29, r14
     16e:	de 1d       	adc	r29, r14
     170:	de 1d       	adc	r29, r14
     172:	de 1d       	adc	r29, r14
     174:	de 1d       	adc	r29, r14
     176:	de 1d       	adc	r29, r14
     178:	de 1d       	adc	r29, r14
     17a:	de 1d       	adc	r29, r14
     17c:	de 1d       	adc	r29, r14
     17e:	de 1d       	adc	r29, r14
     180:	de 1d       	adc	r29, r14
     182:	de 1d       	adc	r29, r14
     184:	de 1d       	adc	r29, r14
     186:	de 1d       	adc	r29, r14
     188:	99 1d       	adc	r25, r9
     18a:	de 1d       	adc	r29, r14
     18c:	de 1d       	adc	r29, r14
     18e:	de 1d       	adc	r29, r14
     190:	de 1d       	adc	r29, r14
     192:	de 1d       	adc	r29, r14
     194:	de 1d       	adc	r29, r14
     196:	de 1d       	adc	r29, r14
     198:	bd 1d       	adc	r27, r13

0000019a <prvIdleTask>:
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = ( TaskHandle_t ) pxCurrentTCB;

        return xReturn;
    }
     19a:	0e 94 48 0b 	call	0x1690	; 0x1690 <prvCheckTasksWaitingTermination>
     19e:	80 91 a5 0d 	lds	r24, 0x0DA5	; 0x800da5 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	ba d4       	rcall	.+2420   	; 0xb1c <vPortYield>
     1a8:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 21 13 	call	0x2642	; 0x2642 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <prvProcessTimerOrBlockTask>
     1c6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	13 e0       	ldi	r17, 0x03	; 3
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee ef       	ldi	r30, 0xFE	; 254
     1e4:	f8 e4       	ldi	r31, 0x48	; 72
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a0 38       	cpi	r26, 0x80	; 128
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	2e e0       	ldi	r18, 0x0E	; 14
     1f8:	a0 e8       	ldi	r26, 0x80	; 128
     1fa:	b3 e0       	ldi	r27, 0x03	; 3
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ab 37       	cpi	r26, 0x7B	; 123
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 30 17 	call	0x2e60	; 0x2e60 <main>
     20a:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <setPackageHandler>:
#include "application.h"



void setPackageHandler()
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <setPackageHandler+0xa>
     21a:	00 d0       	rcall	.+0      	; 0x21c <setPackageHandler+0xc>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	uint16_t data[3];
	for(int i=0;i<3;i++)
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	13 c0       	rjmp	.+38     	; 0x24c <setPackageHandler+0x3c>
	{
		if(xQueueReceive(sensorDataQueue,&data[i],portMAX_DELAY)==pdPASS)
     226:	b8 01       	movw	r22, r16
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	8c 0f       	add	r24, r28
     232:	9d 1f       	adc	r25, r29
     234:	68 0f       	add	r22, r24
     236:	79 1f       	adc	r23, r25
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <sensorDataQueue>
     242:	90 91 68 0e 	lds	r25, 0x0E68	; 0x800e68 <sensorDataQueue+0x1>
     246:	48 d7       	rcall	.+3728   	; 0x10d8 <xQueueReceive>


void setPackageHandler()
{
	uint16_t data[3];
	for(int i=0;i<3;i++)
     248:	0f 5f       	subi	r16, 0xFF	; 255
     24a:	1f 4f       	sbci	r17, 0xFF	; 255
     24c:	03 30       	cpi	r16, 0x03	; 3
     24e:	11 05       	cpc	r17, r1
     250:	54 f3       	brlt	.-44     	; 0x226 <setPackageHandler+0x16>
			{
				//printf("Parameter[%i] : %d\n", i , data[i]);
			}
	}
	
	sensorDataPackageHandler_setTemp_value(data[0]);
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <sensorDataPackageHandler_setTemp_value>
	sensorDataPackageHandler_setHumidity_value(data[1]);
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04
     25e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <sensorDataPackageHandler_setHumidity_value>
	sensorDataPackageHandler_setCO2_value(data[2]);
     262:	8d 81       	ldd	r24, Y+5	; 0x05
     264:	9e 81       	ldd	r25, Y+6	; 0x06
     266:	0e 94 41 16 	call	0x2c82	; 0x2c82 <sensorDataPackageHandler_setCO2_value>
	xQueueReset(sensorDataQueue);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <sensorDataQueue>
     270:	90 91 68 0e 	lds	r25, 0x0E68	; 0x800e68 <sensorDataQueue+0x1>
     274:	f2 d5       	rcall	.+3044   	; 0xe5a <xQueueGenericReset>
	
}
     276:	26 96       	adiw	r28, 0x06	; 6
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <ApplicationTask>:
{
	for (;;)
	{
		
		//vTaskDelay(5000);
		EventBits_t eventBits = xEventGroupWaitBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,portMAX_DELAY);
     28c:	cc 24       	eor	r12, r12
     28e:	ca 94       	dec	r12
     290:	dc 2c       	mov	r13, r12
     292:	76 01       	movw	r14, r12
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	21 e0       	ldi	r18, 0x01	; 1
     298:	43 e0       	ldi	r20, 0x03	; 3
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <dataEventGroup>
     2a4:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <dataEventGroup+0x1>
     2a8:	e5 d0       	rcall	.+458    	; 0x474 <xEventGroupWaitBits>
		
		if((eventBits &(BIT_CO2 | BIT_HUMIDITY_TEMPERATURE))==(BIT_CO2|BIT_HUMIDITY_TEMPERATURE))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	b1 f4       	brne	.+44     	; 0x2ea <ApplicationTask+0x5e>
		{
			printf("ALL DATA COLLECTED\n");
     2be:	8f e4       	ldi	r24, 0x4F	; 79
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	0e 94 a0 21 	call	0x4340	; 0x4340 <puts>
			setPackageHandler();
     2c6:	a4 df       	rcall	.-184    	; 0x210 <setPackageHandler>
			vTaskDelay(pdMS_TO_TICKS(120000));
     2c8:	60 e1       	ldi	r22, 0x10	; 16
     2ca:	7d e1       	ldi	r23, 0x1D	; 29
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskDelay>
			xSemaphoreGive(tempHumSemaphore);
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 91 69 0e 	lds	r24, 0x0E69	; 0x800e69 <tempHumSemaphore>
     2e4:	90 91 6a 0e 	lds	r25, 0x0E6A	; 0x800e6a <tempHumSemaphore+0x1>
     2e8:	30 d6       	rcall	.+3168   	; 0xf4a <xQueueGenericSend>
			//vTaskDelay(pdMS_TO_TICKS(1000));
			
		}
		vTaskDelay(pdMS_TO_TICKS(50));
     2ea:	63 e0       	ldi	r22, 0x03	; 3
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskDelay>
		
	}
     2f6:	ca cf       	rjmp	.-108    	; 0x28c <ApplicationTask>

000002f8 <createApplicationTask>:
}

void createApplicationTask()
{
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16

	
	xTaskCreate(
     2fe:	e1 2c       	mov	r14, r1
     300:	f1 2c       	mov	r15, r1
     302:	01 e0       	ldi	r16, 0x01	; 1
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 ec       	ldi	r20, 0xC0	; 192
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	62 e6       	ldi	r22, 0x62	; 98
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	86 e4       	ldi	r24, 0x46	; 70
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 0b 0c 	call	0x1816	; 0x1816 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <myCo2CallBack>:
		vTaskDelay(30);
			
	}
}
void myCo2CallBack(uint16_t ppm)
{
     320:	0f 93       	push	r16
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	1f 92       	push	r1
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	89 83       	std	Y+1, r24	; 0x01
		printf("CO2 Value: %d\n",ppm);
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	8f 93       	push	r24
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	8f 93       	push	r24
     33a:	8a e6       	ldi	r24, 0x6A	; 106
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	0e 94 8d 21 	call	0x431a	; 0x431a <printf>
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     346:	00 e0       	ldi	r16, 0x00	; 0
     348:	2f ef       	ldi	r18, 0xFF	; 255
     34a:	3f ef       	ldi	r19, 0xFF	; 255
     34c:	a9 01       	movw	r20, r18
     34e:	be 01       	movw	r22, r28
     350:	6f 5f       	subi	r22, 0xFF	; 255
     352:	7f 4f       	sbci	r23, 0xFF	; 255
     354:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <sensorDataQueue>
     358:	90 91 68 0e 	lds	r25, 0x0E68	; 0x800e68 <sensorDataQueue+0x1>
     35c:	f6 d5       	rcall	.+3052   	; 0xf4a <xQueueGenericSend>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     35e:	41 e0       	ldi	r20, 0x01	; 1
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <dataEventGroup>
     36a:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <dataEventGroup+0x1>
     36e:	22 d1       	rcall	.+580    	; 0x5b4 <xEventGroupSetBits>
		//xSemaphoreGive(tempHumSemaphore);
		
		

}
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	0c 94 37 18 	jmp	0x306e	; 0x306e <mh_z19_initialise>
     38a:	08 95       	ret

0000038c <measureCO2>:
	
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     38c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <mh_z19_takeMeassuring>
     390:	80 93 5e 0e 	sts	0x0E5E, r24	; 0x800e5e <rc>
	if (rc != MHZ19_OK)
     394:	88 23       	and	r24, r24
     396:	21 f0       	breq	.+8      	; 0x3a0 <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     398:	89 e7       	ldi	r24, 0x79	; 121
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <puts>
     3a0:	08 95       	ret

000003a2 <CO2Task>:
void CO2Task()
{
	while(1)
	{

printf("CO2 Task\n");
     3a2:	80 e9       	ldi	r24, 0x90	; 144
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	0e 94 a0 21 	call	0x4340	; 0x4340 <puts>
EventBits_t dataEventBits = xEventGroupWaitBits
     3aa:	cc 24       	eor	r12, r12
     3ac:	ca 94       	dec	r12
     3ae:	dc 2c       	mov	r13, r12
     3b0:	76 01       	movw	r14, r12
     3b2:	01 e0       	ldi	r16, 0x01	; 1
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	42 e0       	ldi	r20, 0x02	; 2
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <dataEventGroup>
     3c2:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <dataEventGroup+0x1>
     3c6:	56 d0       	rcall	.+172    	; 0x474 <xEventGroupWaitBits>

		
		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
		{
			//printf("Measured\n");
			measureCO2();
     3c8:	61 fd       	sbrc	r22, 1
     3ca:	e0 df       	rcall	.-64     	; 0x38c <measureCO2>
		
		}
		vTaskDelay(30);
     3cc:	6e e1       	ldi	r22, 0x1E	; 30
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskDelay>
			
	}
     3d8:	e4 cf       	rjmp	.-56     	; 0x3a2 <CO2Task>

000003da <createCO2Task>:
		
		

}
void createCO2Task()
{
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
			initializeCO2Driver();
     3e0:	d1 df       	rcall	.-94     	; 0x384 <initializeCO2Driver>
			mh_z19_injectCallBack(myCo2CallBack);
     3e2:	80 e9       	ldi	r24, 0x90	; 144
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <mh_z19_injectCallBack>
			xTaskCreate(
     3ea:	e1 2c       	mov	r14, r1
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 e0       	ldi	r16, 0x01	; 1
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 ec       	ldi	r20, 0xC0	; 192
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	69 e9       	ldi	r22, 0x99	; 153
     3fa:	72 e0       	ldi	r23, 0x02	; 2
     3fc:	81 ed       	ldi	r24, 0xD1	; 209
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 0b 0c 	call	0x1816	; 0x1816 <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	08 95       	ret

0000040c <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     40c:	0f 93       	push	r16
     40e:	01 11       	cpse	r16, r1
     410:	0c c0       	rjmp	.+24     	; 0x42a <prvTestWaitCondition+0x1e>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	82 23       	and	r24, r18
     418:	93 23       	and	r25, r19
     41a:	a4 23       	and	r26, r20
     41c:	b5 23       	and	r27, r21
     41e:	89 2b       	or	r24, r25
     420:	8a 2b       	or	r24, r26
     422:	8b 2b       	or	r24, r27
     424:	79 f4       	brne	.+30     	; 0x444 <prvTestWaitCondition+0x38>
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	10 c0       	rjmp	.+32     	; 0x44a <prvTestWaitCondition+0x3e>
     42a:	dc 01       	movw	r26, r24
     42c:	cb 01       	movw	r24, r22
     42e:	82 23       	and	r24, r18
     430:	93 23       	and	r25, r19
     432:	a4 23       	and	r26, r20
     434:	b5 23       	and	r27, r21
     436:	28 17       	cp	r18, r24
     438:	39 07       	cpc	r19, r25
     43a:	4a 07       	cpc	r20, r26
     43c:	5b 07       	cpc	r21, r27
     43e:	21 f0       	breq	.+8      	; 0x448 <prvTestWaitCondition+0x3c>
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	03 c0       	rjmp	.+6      	; 0x44a <prvTestWaitCondition+0x3e>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	01 c0       	rjmp	.+2      	; 0x44a <prvTestWaitCondition+0x3e>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <xEventGroupCreate>:
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	8f e0       	ldi	r24, 0x0F	; 15
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	af d1       	rcall	.+862    	; 0x7b6 <pvPortMalloc>
     458:	ec 01       	movw	r28, r24
     45a:	00 97       	sbiw	r24, 0x00	; 0
     45c:	39 f0       	breq	.+14     	; 0x46c <xEventGroupCreate+0x1e>
     45e:	fc 01       	movw	r30, r24
     460:	11 92       	st	Z+, r1
     462:	11 92       	st	Z+, r1
     464:	11 92       	st	Z+, r1
     466:	11 92       	st	Z+, r1
     468:	cf 01       	movw	r24, r30
     46a:	8a d2       	rcall	.+1300   	; 0x980 <vListInitialise>
     46c:	ce 01       	movw	r24, r28
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <xEventGroupWaitBits>:
     474:	2f 92       	push	r2
     476:	3f 92       	push	r3
     478:	4f 92       	push	r4
     47a:	5f 92       	push	r5
     47c:	6f 92       	push	r6
     47e:	7f 92       	push	r7
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	ec 01       	movw	r28, r24
     49a:	4a 01       	movw	r8, r20
     49c:	5b 01       	movw	r10, r22
     49e:	62 2e       	mov	r6, r18
     4a0:	70 2e       	mov	r7, r16
     4a2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vTaskSuspendAll>
     4a6:	28 80       	ld	r2, Y
     4a8:	39 80       	ldd	r3, Y+1	; 0x01
     4aa:	4a 80       	ldd	r4, Y+2	; 0x02
     4ac:	5b 80       	ldd	r5, Y+3	; 0x03
     4ae:	a5 01       	movw	r20, r10
     4b0:	94 01       	movw	r18, r8
     4b2:	c2 01       	movw	r24, r4
     4b4:	b1 01       	movw	r22, r2
     4b6:	aa df       	rcall	.-172    	; 0x40c <prvTestWaitCondition>
     4b8:	88 23       	and	r24, r24
     4ba:	a1 f0       	breq	.+40     	; 0x4e4 <xEventGroupWaitBits+0x70>
     4bc:	66 20       	and	r6, r6
     4be:	89 f1       	breq	.+98     	; 0x522 <xEventGroupWaitBits+0xae>
     4c0:	d5 01       	movw	r26, r10
     4c2:	c4 01       	movw	r24, r8
     4c4:	80 95       	com	r24
     4c6:	90 95       	com	r25
     4c8:	a0 95       	com	r26
     4ca:	b0 95       	com	r27
     4cc:	82 21       	and	r24, r2
     4ce:	93 21       	and	r25, r3
     4d0:	a4 21       	and	r26, r4
     4d2:	b5 21       	and	r27, r5
     4d4:	88 83       	st	Y, r24
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	aa 83       	std	Y+2, r26	; 0x02
     4da:	bb 83       	std	Y+3, r27	; 0x03
     4dc:	c1 2c       	mov	r12, r1
     4de:	d1 2c       	mov	r13, r1
     4e0:	76 01       	movw	r14, r12
     4e2:	22 c0       	rjmp	.+68     	; 0x528 <xEventGroupWaitBits+0xb4>
     4e4:	c1 14       	cp	r12, r1
     4e6:	d1 04       	cpc	r13, r1
     4e8:	e1 04       	cpc	r14, r1
     4ea:	f1 04       	cpc	r15, r1
     4ec:	e9 f0       	breq	.+58     	; 0x528 <xEventGroupWaitBits+0xb4>
     4ee:	61 10       	cpse	r6, r1
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <xEventGroupWaitBits+0x86>
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	ba 01       	movw	r22, r20
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <xEventGroupWaitBits+0x8e>
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	71 10       	cpse	r7, r1
     504:	74 60       	ori	r23, 0x04	; 4
     506:	48 29       	or	r20, r8
     508:	59 29       	or	r21, r9
     50a:	6a 29       	or	r22, r10
     50c:	7b 29       	or	r23, r11
     50e:	97 01       	movw	r18, r14
     510:	86 01       	movw	r16, r12
     512:	ce 01       	movw	r24, r28
     514:	04 96       	adiw	r24, 0x04	; 4
     516:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vTaskPlaceOnUnorderedEventList>
     51a:	21 2c       	mov	r2, r1
     51c:	31 2c       	mov	r3, r1
     51e:	21 01       	movw	r4, r2
     520:	03 c0       	rjmp	.+6      	; 0x528 <xEventGroupWaitBits+0xb4>
     522:	c1 2c       	mov	r12, r1
     524:	d1 2c       	mov	r13, r1
     526:	76 01       	movw	r14, r12
     528:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <xTaskResumeAll>
     52c:	cd 28       	or	r12, r13
     52e:	ce 28       	or	r12, r14
     530:	cf 28       	or	r12, r15
     532:	59 f1       	breq	.+86     	; 0x58a <xEventGroupWaitBits+0x116>
     534:	81 11       	cpse	r24, r1
     536:	01 c0       	rjmp	.+2      	; 0x53a <xEventGroupWaitBits+0xc6>
     538:	f1 d2       	rcall	.+1506   	; 0xb1c <vPortYield>
     53a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <uxTaskResetEventItemValue>
     53e:	6b 01       	movw	r12, r22
     540:	7c 01       	movw	r14, r24
     542:	91 fd       	sbrc	r25, 1
     544:	1f c0       	rjmp	.+62     	; 0x584 <xEventGroupWaitBits+0x110>
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	0f 92       	push	r0
     54c:	c8 80       	ld	r12, Y
     54e:	d9 80       	ldd	r13, Y+1	; 0x01
     550:	ea 80       	ldd	r14, Y+2	; 0x02
     552:	fb 80       	ldd	r15, Y+3	; 0x03
     554:	07 2d       	mov	r16, r7
     556:	a5 01       	movw	r20, r10
     558:	94 01       	movw	r18, r8
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	56 df       	rcall	.-340    	; 0x40c <prvTestWaitCondition>
     560:	88 23       	and	r24, r24
     562:	71 f0       	breq	.+28     	; 0x580 <xEventGroupWaitBits+0x10c>
     564:	66 20       	and	r6, r6
     566:	61 f0       	breq	.+24     	; 0x580 <xEventGroupWaitBits+0x10c>
     568:	80 94       	com	r8
     56a:	90 94       	com	r9
     56c:	a0 94       	com	r10
     56e:	b0 94       	com	r11
     570:	8c 20       	and	r8, r12
     572:	9d 20       	and	r9, r13
     574:	ae 20       	and	r10, r14
     576:	bf 20       	and	r11, r15
     578:	88 82       	st	Y, r8
     57a:	99 82       	std	Y+1, r9	; 0x01
     57c:	aa 82       	std	Y+2, r10	; 0x02
     57e:	bb 82       	std	Y+3, r11	; 0x03
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	16 01       	movw	r2, r12
     586:	27 01       	movw	r4, r14
     588:	55 24       	eor	r5, r5
     58a:	c2 01       	movw	r24, r4
     58c:	b1 01       	movw	r22, r2
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
     59e:	bf 90       	pop	r11
     5a0:	af 90       	pop	r10
     5a2:	9f 90       	pop	r9
     5a4:	8f 90       	pop	r8
     5a6:	7f 90       	pop	r7
     5a8:	6f 90       	pop	r6
     5aa:	5f 90       	pop	r5
     5ac:	4f 90       	pop	r4
     5ae:	3f 90       	pop	r3
     5b0:	2f 90       	pop	r2
     5b2:	08 95       	ret

000005b4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     5b4:	4f 92       	push	r4
     5b6:	5f 92       	push	r5
     5b8:	6f 92       	push	r6
     5ba:	7f 92       	push	r7
     5bc:	af 92       	push	r10
     5be:	bf 92       	push	r11
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	6a 01       	movw	r12, r20
     5d4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5d6:	8c 01       	movw	r16, r24
     5d8:	09 5f       	subi	r16, 0xF9	; 249
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     5dc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     5e0:	eb 85       	ldd	r30, Y+11	; 0x0b
     5e2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     5e4:	88 81       	ld	r24, Y
     5e6:	99 81       	ldd	r25, Y+1	; 0x01
     5e8:	aa 81       	ldd	r26, Y+2	; 0x02
     5ea:	bb 81       	ldd	r27, Y+3	; 0x03
     5ec:	c8 2a       	or	r12, r24
     5ee:	d9 2a       	or	r13, r25
     5f0:	ea 2a       	or	r14, r26
     5f2:	fb 2a       	or	r15, r27
     5f4:	c8 82       	st	Y, r12
     5f6:	d9 82       	std	Y+1, r13	; 0x01
     5f8:	ea 82       	std	Y+2, r14	; 0x02
     5fa:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     5fc:	c1 2c       	mov	r12, r1
     5fe:	d1 2c       	mov	r13, r1
     600:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     602:	3d c0       	rjmp	.+122    	; 0x67e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     604:	a4 80       	ldd	r10, Z+4	; 0x04
     606:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	a2 81       	ldd	r26, Z+2	; 0x02
     60e:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     610:	ac 01       	movw	r20, r24
     612:	bd 01       	movw	r22, r26
     614:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     616:	b2 fd       	sbrc	r27, 2
     618:	0e c0       	rjmp	.+28     	; 0x636 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     61a:	48 80       	ld	r4, Y
     61c:	59 80       	ldd	r5, Y+1	; 0x01
     61e:	6a 80       	ldd	r6, Y+2	; 0x02
     620:	7b 80       	ldd	r7, Y+3	; 0x03
     622:	44 22       	and	r4, r20
     624:	55 22       	and	r5, r21
     626:	66 22       	and	r6, r22
     628:	77 22       	and	r7, r23
     62a:	45 28       	or	r4, r5
     62c:	46 28       	or	r4, r6
     62e:	47 28       	or	r4, r7
     630:	89 f4       	brne	.+34     	; 0x654 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	12 c0       	rjmp	.+36     	; 0x65a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     636:	48 80       	ld	r4, Y
     638:	59 80       	ldd	r5, Y+1	; 0x01
     63a:	6a 80       	ldd	r6, Y+2	; 0x02
     63c:	7b 80       	ldd	r7, Y+3	; 0x03
     63e:	44 22       	and	r4, r20
     640:	55 22       	and	r5, r21
     642:	66 22       	and	r6, r22
     644:	77 22       	and	r7, r23
     646:	44 15       	cp	r20, r4
     648:	55 05       	cpc	r21, r5
     64a:	66 05       	cpc	r22, r6
     64c:	77 05       	cpc	r23, r7
     64e:	21 f0       	breq	.+8      	; 0x658 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	03 c0       	rjmp	.+6      	; 0x65a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	01 c0       	rjmp	.+2      	; 0x65a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     658:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     65a:	22 23       	and	r18, r18
     65c:	71 f0       	breq	.+28     	; 0x67a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     65e:	b0 ff       	sbrs	r27, 0
     660:	04 c0       	rjmp	.+8      	; 0x66a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     662:	c4 2a       	or	r12, r20
     664:	d5 2a       	or	r13, r21
     666:	e6 2a       	or	r14, r22
     668:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     66a:	48 81       	ld	r20, Y
     66c:	59 81       	ldd	r21, Y+1	; 0x01
     66e:	6a 81       	ldd	r22, Y+2	; 0x02
     670:	7b 81       	ldd	r23, Y+3	; 0x03
     672:	72 60       	ori	r23, 0x02	; 2
     674:	cf 01       	movw	r24, r30
     676:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     67a:	ea 2d       	mov	r30, r10
     67c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     67e:	e0 17       	cp	r30, r16
     680:	f1 07       	cpc	r31, r17
     682:	09 f0       	breq	.+2      	; 0x686 <xEventGroupSetBits+0xd2>
     684:	bf cf       	rjmp	.-130    	; 0x604 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     686:	c0 94       	com	r12
     688:	d0 94       	com	r13
     68a:	e0 94       	com	r14
     68c:	f0 94       	com	r15
     68e:	88 81       	ld	r24, Y
     690:	99 81       	ldd	r25, Y+1	; 0x01
     692:	aa 81       	ldd	r26, Y+2	; 0x02
     694:	bb 81       	ldd	r27, Y+3	; 0x03
     696:	c8 22       	and	r12, r24
     698:	d9 22       	and	r13, r25
     69a:	ea 22       	and	r14, r26
     69c:	fb 22       	and	r15, r27
     69e:	c8 82       	st	Y, r12
     6a0:	d9 82       	std	Y+1, r13	; 0x01
     6a2:	ea 82       	std	Y+2, r14	; 0x02
     6a4:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6a6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6aa:	68 81       	ld	r22, Y
     6ac:	79 81       	ldd	r23, Y+1	; 0x01
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	7f 90       	pop	r7
     6c8:	6f 90       	pop	r6
     6ca:	5f 90       	pop	r5
     6cc:	4f 90       	pop	r4
     6ce:	08 95       	ret

000006d0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     6d0:	ec e8       	ldi	r30, 0x8C	; 140
     6d2:	f3 e0       	ldi	r31, 0x03	; 3
     6d4:	a0 e9       	ldi	r26, 0x90	; 144
     6d6:	b3 e0       	ldi	r27, 0x03	; 3
     6d8:	b1 83       	std	Z+1, r27	; 0x01
     6da:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     6dc:	13 82       	std	Z+3, r1	; 0x03
     6de:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     6e0:	e0 e5       	ldi	r30, 0x50	; 80
     6e2:	fd e0       	ldi	r31, 0x0D	; 13
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     6e4:	f0 93 8b 03 	sts	0x038B, r31	; 0x80038b <pxEnd+0x1>
     6e8:	e0 93 8a 03 	sts	0x038A, r30	; 0x80038a <pxEnd>
    pxEnd->xBlockSize = 0;
     6ec:	13 82       	std	Z+3, r1	; 0x03
     6ee:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     6f0:	11 82       	std	Z+1, r1	; 0x01
     6f2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     6f4:	80 ec       	ldi	r24, 0xC0	; 192
     6f6:	99 e0       	ldi	r25, 0x09	; 9
     6f8:	13 96       	adiw	r26, 0x03	; 3
     6fa:	9c 93       	st	X, r25
     6fc:	8e 93       	st	-X, r24
     6fe:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     700:	ed 93       	st	X+, r30
     702:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     704:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <xMinimumEverFreeBytesRemaining+0x1>
     708:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     70c:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <xFreeBytesRemaining+0x1>
     710:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e8       	ldi	r25, 0x80	; 128
     718:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__data_end+0x1>
     71c:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__data_end>
     720:	08 95       	ret

00000722 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     728:	ac e8       	ldi	r26, 0x8C	; 140
     72a:	b3 e0       	ldi	r27, 0x03	; 3
     72c:	01 c0       	rjmp	.+2      	; 0x730 <prvInsertBlockIntoFreeList+0xe>
     72e:	df 01       	movw	r26, r30
     730:	ed 91       	ld	r30, X+
     732:	fc 91       	ld	r31, X
     734:	11 97       	sbiw	r26, 0x01	; 1
     736:	ec 17       	cp	r30, r28
     738:	fd 07       	cpc	r31, r29
     73a:	c8 f3       	brcs	.-14     	; 0x72e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	8d 91       	ld	r24, X+
     740:	9c 91       	ld	r25, X
     742:	13 97       	sbiw	r26, 0x03	; 3
     744:	9d 01       	movw	r18, r26
     746:	28 0f       	add	r18, r24
     748:	39 1f       	adc	r19, r25
     74a:	c2 17       	cp	r28, r18
     74c:	d3 07       	cpc	r29, r19
     74e:	49 f4       	brne	.+18     	; 0x762 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     750:	2a 81       	ldd	r18, Y+2	; 0x02
     752:	3b 81       	ldd	r19, Y+3	; 0x03
     754:	82 0f       	add	r24, r18
     756:	93 1f       	adc	r25, r19
     758:	13 96       	adiw	r26, 0x03	; 3
     75a:	9c 93       	st	X, r25
     75c:	8e 93       	st	-X, r24
     75e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     760:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	9b 81       	ldd	r25, Y+3	; 0x03
     766:	9e 01       	movw	r18, r28
     768:	28 0f       	add	r18, r24
     76a:	39 1f       	adc	r19, r25
     76c:	e2 17       	cp	r30, r18
     76e:	f3 07       	cpc	r31, r19
     770:	c1 f4       	brne	.+48     	; 0x7a2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     772:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <pxEnd>
     776:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <pxEnd+0x1>
     77a:	e2 17       	cp	r30, r18
     77c:	f3 07       	cpc	r31, r19
     77e:	71 f0       	breq	.+28     	; 0x79c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     780:	22 81       	ldd	r18, Z+2	; 0x02
     782:	33 81       	ldd	r19, Z+3	; 0x03
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	9b 83       	std	Y+3, r25	; 0x03
     78a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     78c:	ed 91       	ld	r30, X+
     78e:	fc 91       	ld	r31, X
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	99 83       	std	Y+1, r25	; 0x01
     798:	88 83       	st	Y, r24
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     79c:	39 83       	std	Y+1, r19	; 0x01
     79e:	28 83       	st	Y, r18
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7a2:	f9 83       	std	Y+1, r31	; 0x01
     7a4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7a6:	ca 17       	cp	r28, r26
     7a8:	db 07       	cpc	r29, r27
     7aa:	11 f0       	breq	.+4      	; 0x7b0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7ac:	cd 93       	st	X+, r28
     7ae:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     7c4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     7c8:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <pxEnd>
     7cc:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <pxEnd+0x1>
     7d0:	89 2b       	or	r24, r25
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     7d4:	7d df       	rcall	.-262    	; 0x6d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     7d6:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <__data_end>
     7da:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <__data_end+0x1>
     7de:	80 23       	and	r24, r16
     7e0:	91 23       	and	r25, r17
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <pvPortMalloc+0x32>
     7e6:	76 c0       	rjmp	.+236    	; 0x8d4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     7e8:	01 15       	cp	r16, r1
     7ea:	11 05       	cpc	r17, r1
     7ec:	49 f0       	breq	.+18     	; 0x800 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     7ee:	c8 01       	movw	r24, r16
     7f0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     7f2:	08 17       	cp	r16, r24
     7f4:	19 07       	cpc	r17, r25
     7f6:	18 f0       	brcs	.+6      	; 0x7fe <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	10 e0       	ldi	r17, 0x00	; 0
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     7fe:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     800:	01 15       	cp	r16, r1
     802:	11 05       	cpc	r17, r1
     804:	09 f4       	brne	.+2      	; 0x808 <pvPortMalloc+0x52>
     806:	69 c0       	rjmp	.+210    	; 0x8da <pvPortMalloc+0x124>
     808:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <xFreeBytesRemaining>
     80c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <xFreeBytesRemaining+0x1>
     810:	80 17       	cp	r24, r16
     812:	91 07       	cpc	r25, r17
     814:	08 f4       	brcc	.+2      	; 0x818 <pvPortMalloc+0x62>
     816:	64 c0       	rjmp	.+200    	; 0x8e0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     818:	c0 91 8c 03 	lds	r28, 0x038C	; 0x80038c <xStart>
     81c:	d0 91 8d 03 	lds	r29, 0x038D	; 0x80038d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     820:	ec e8       	ldi	r30, 0x8C	; 140
     822:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     824:	02 c0       	rjmp	.+4      	; 0x82a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     826:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     828:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	9b 81       	ldd	r25, Y+3	; 0x03
     82e:	80 17       	cp	r24, r16
     830:	91 07       	cpc	r25, r17
     832:	20 f4       	brcc	.+8      	; 0x83c <pvPortMalloc+0x86>
     834:	88 81       	ld	r24, Y
     836:	99 81       	ldd	r25, Y+1	; 0x01
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	a9 f7       	brne	.-22     	; 0x826 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     83c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <pxEnd>
     840:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <pxEnd+0x1>
     844:	c8 17       	cp	r28, r24
     846:	d9 07       	cpc	r29, r25
     848:	09 f4       	brne	.+2      	; 0x84c <pvPortMalloc+0x96>
     84a:	4d c0       	rjmp	.+154    	; 0x8e6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     84c:	e0 80       	ld	r14, Z
     84e:	f1 80       	ldd	r15, Z+1	; 0x01
     850:	84 e0       	ldi	r24, 0x04	; 4
     852:	e8 0e       	add	r14, r24
     854:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     856:	88 81       	ld	r24, Y
     858:	99 81       	ldd	r25, Y+1	; 0x01
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     85e:	2a 81       	ldd	r18, Y+2	; 0x02
     860:	3b 81       	ldd	r19, Y+3	; 0x03
     862:	20 1b       	sub	r18, r16
     864:	31 0b       	sbc	r19, r17
     866:	29 30       	cpi	r18, 0x09	; 9
     868:	31 05       	cpc	r19, r1
     86a:	48 f0       	brcs	.+18     	; 0x87e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     86c:	ce 01       	movw	r24, r28
     86e:	80 0f       	add	r24, r16
     870:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     872:	fc 01       	movw	r30, r24
     874:	33 83       	std	Z+3, r19	; 0x03
     876:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     878:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     87a:	0a 83       	std	Y+2, r16	; 0x02
     87c:	52 df       	rcall	.-348    	; 0x722 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     87e:	2a 81       	ldd	r18, Y+2	; 0x02
     880:	3b 81       	ldd	r19, Y+3	; 0x03
     882:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <xFreeBytesRemaining>
     886:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <xFreeBytesRemaining+0x1>
     88a:	82 1b       	sub	r24, r18
     88c:	93 0b       	sbc	r25, r19
     88e:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <xFreeBytesRemaining+0x1>
     892:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     896:	40 91 86 03 	lds	r20, 0x0386	; 0x800386 <xMinimumEverFreeBytesRemaining>
     89a:	50 91 87 03 	lds	r21, 0x0387	; 0x800387 <xMinimumEverFreeBytesRemaining+0x1>
     89e:	84 17       	cp	r24, r20
     8a0:	95 07       	cpc	r25, r21
     8a2:	20 f4       	brcc	.+8      	; 0x8ac <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8a4:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <xMinimumEverFreeBytesRemaining+0x1>
     8a8:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8ac:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <__data_end>
     8b0:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <__data_end+0x1>
     8b4:	28 2b       	or	r18, r24
     8b6:	39 2b       	or	r19, r25
     8b8:	3b 83       	std	Y+3, r19	; 0x03
     8ba:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     8bc:	19 82       	std	Y+1, r1	; 0x01
     8be:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     8c0:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <xNumberOfSuccessfulAllocations>
     8c4:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <xNumberOfSuccessfulAllocations+0x1>
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <xNumberOfSuccessfulAllocations+0x1>
     8ce:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <xNumberOfSuccessfulAllocations>
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     8d4:	e1 2c       	mov	r14, r1
     8d6:	f1 2c       	mov	r15, r1
     8d8:	08 c0       	rjmp	.+16     	; 0x8ea <pvPortMalloc+0x134>
     8da:	e1 2c       	mov	r14, r1
     8dc:	f1 2c       	mov	r15, r1
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <pvPortMalloc+0x134>
     8e0:	e1 2c       	mov	r14, r1
     8e2:	f1 2c       	mov	r15, r1
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <pvPortMalloc+0x134>
     8e6:	e1 2c       	mov	r14, r1
     8e8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     8ea:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     8ee:	e1 14       	cp	r14, r1
     8f0:	f1 04       	cpc	r15, r1
     8f2:	11 f4       	brne	.+4      	; 0x8f8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     8f4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     8f8:	c7 01       	movw	r24, r14
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	89 f1       	breq	.+98     	; 0x976 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     914:	ec 01       	movw	r28, r24
     916:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     918:	4a 81       	ldd	r20, Y+2	; 0x02
     91a:	5b 81       	ldd	r21, Y+3	; 0x03
     91c:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <__data_end>
     920:	30 91 81 03 	lds	r19, 0x0381	; 0x800381 <__data_end+0x1>
     924:	ba 01       	movw	r22, r20
     926:	62 23       	and	r22, r18
     928:	73 23       	and	r23, r19
     92a:	67 2b       	or	r22, r23
     92c:	21 f1       	breq	.+72     	; 0x976 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     92e:	68 81       	ld	r22, Y
     930:	79 81       	ldd	r23, Y+1	; 0x01
     932:	67 2b       	or	r22, r23
     934:	01 f5       	brne	.+64     	; 0x976 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     936:	20 95       	com	r18
     938:	30 95       	com	r19
     93a:	24 23       	and	r18, r20
     93c:	35 23       	and	r19, r21
     93e:	3b 83       	std	Y+3, r19	; 0x03
     940:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     942:	ea d7       	rcall	.+4052   	; 0x1918 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	9b 81       	ldd	r25, Y+3	; 0x03
     948:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <xFreeBytesRemaining>
     94c:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <xFreeBytesRemaining+0x1>
     950:	82 0f       	add	r24, r18
     952:	93 1f       	adc	r25, r19
     954:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <xFreeBytesRemaining+0x1>
     958:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     95c:	ce 01       	movw	r24, r28
     95e:	e1 de       	rcall	.-574    	; 0x722 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     960:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <xNumberOfSuccessfulFrees>
     964:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <xNumberOfSuccessfulFrees+0x1>
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <xNumberOfSuccessfulFrees+0x1>
     96e:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     972:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     980:	fc 01       	movw	r30, r24
     982:	03 96       	adiw	r24, 0x03	; 3
     984:	92 83       	std	Z+2, r25	; 0x02
     986:	81 83       	std	Z+1, r24	; 0x01
     988:	4f ef       	ldi	r20, 0xFF	; 255
     98a:	5f ef       	ldi	r21, 0xFF	; 255
     98c:	ba 01       	movw	r22, r20
     98e:	43 83       	std	Z+3, r20	; 0x03
     990:	54 83       	std	Z+4, r21	; 0x04
     992:	65 83       	std	Z+5, r22	; 0x05
     994:	76 83       	std	Z+6, r23	; 0x06
     996:	90 87       	std	Z+8, r25	; 0x08
     998:	87 83       	std	Z+7, r24	; 0x07
     99a:	92 87       	std	Z+10, r25	; 0x0a
     99c:	81 87       	std	Z+9, r24	; 0x09
     99e:	10 82       	st	Z, r1
     9a0:	08 95       	ret

000009a2 <vListInitialiseItem>:
     9a2:	fc 01       	movw	r30, r24
     9a4:	13 86       	std	Z+11, r1	; 0x0b
     9a6:	12 86       	std	Z+10, r1	; 0x0a
     9a8:	08 95       	ret

000009aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9b4:	08 81       	ld	r16, Y
     9b6:	19 81       	ldd	r17, Y+1	; 0x01
     9b8:	2a 81       	ldd	r18, Y+2	; 0x02
     9ba:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9bc:	0f 3f       	cpi	r16, 0xFF	; 255
     9be:	4f ef       	ldi	r20, 0xFF	; 255
     9c0:	14 07       	cpc	r17, r20
     9c2:	24 07       	cpc	r18, r20
     9c4:	34 07       	cpc	r19, r20
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9c8:	fc 01       	movw	r30, r24
     9ca:	a1 85       	ldd	r26, Z+9	; 0x09
     9cc:	b2 85       	ldd	r27, Z+10	; 0x0a
     9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9d0:	dc 01       	movw	r26, r24
     9d2:	13 96       	adiw	r26, 0x03	; 3
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <vListInsert+0x2e>
     9d6:	df 01       	movw	r26, r30
     9d8:	14 96       	adiw	r26, 0x04	; 4
     9da:	ed 91       	ld	r30, X+
     9dc:	fc 91       	ld	r31, X
     9de:	15 97       	sbiw	r26, 0x05	; 5
     9e0:	40 81       	ld	r20, Z
     9e2:	51 81       	ldd	r21, Z+1	; 0x01
     9e4:	62 81       	ldd	r22, Z+2	; 0x02
     9e6:	73 81       	ldd	r23, Z+3	; 0x03
     9e8:	04 17       	cp	r16, r20
     9ea:	15 07       	cpc	r17, r21
     9ec:	26 07       	cpc	r18, r22
     9ee:	37 07       	cpc	r19, r23
     9f0:	90 f7       	brcc	.-28     	; 0x9d6 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     9f2:	14 96       	adiw	r26, 0x04	; 4
     9f4:	ed 91       	ld	r30, X+
     9f6:	fc 91       	ld	r31, X
     9f8:	15 97       	sbiw	r26, 0x05	; 5
     9fa:	fd 83       	std	Y+5, r31	; 0x05
     9fc:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     9fe:	d7 83       	std	Z+7, r29	; 0x07
     a00:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a02:	bf 83       	std	Y+7, r27	; 0x07
     a04:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a06:	15 96       	adiw	r26, 0x05	; 5
     a08:	dc 93       	st	X, r29
     a0a:	ce 93       	st	-X, r28
     a0c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a0e:	9b 87       	std	Y+11, r25	; 0x0b
     a10:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a12:	fc 01       	movw	r30, r24
     a14:	20 81       	ld	r18, Z
     a16:	2f 5f       	subi	r18, 0xFF	; 255
     a18:	20 83       	st	Z, r18
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	08 95       	ret

00000a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a2a:	a2 85       	ldd	r26, Z+10	; 0x0a
     a2c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a2e:	c4 81       	ldd	r28, Z+4	; 0x04
     a30:	d5 81       	ldd	r29, Z+5	; 0x05
     a32:	86 81       	ldd	r24, Z+6	; 0x06
     a34:	97 81       	ldd	r25, Z+7	; 0x07
     a36:	9f 83       	std	Y+7, r25	; 0x07
     a38:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a3a:	c6 81       	ldd	r28, Z+6	; 0x06
     a3c:	d7 81       	ldd	r29, Z+7	; 0x07
     a3e:	84 81       	ldd	r24, Z+4	; 0x04
     a40:	95 81       	ldd	r25, Z+5	; 0x05
     a42:	9d 83       	std	Y+5, r25	; 0x05
     a44:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a46:	11 96       	adiw	r26, 0x01	; 1
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	12 97       	sbiw	r26, 0x02	; 2
     a4e:	e8 17       	cp	r30, r24
     a50:	f9 07       	cpc	r31, r25
     a52:	31 f4       	brne	.+12     	; 0xa60 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a54:	86 81       	ldd	r24, Z+6	; 0x06
     a56:	97 81       	ldd	r25, Z+7	; 0x07
     a58:	12 96       	adiw	r26, 0x02	; 2
     a5a:	9c 93       	st	X, r25
     a5c:	8e 93       	st	-X, r24
     a5e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a60:	13 86       	std	Z+11, r1	; 0x0b
     a62:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a64:	8c 91       	ld	r24, X
     a66:	81 50       	subi	r24, 0x01	; 1
     a68:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a6a:	8c 91       	ld	r24, X
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     a72:	a8 95       	wdr
     a74:	90 ec       	ldi	r25, 0xC0	; 192
     a76:	88 e1       	ldi	r24, 0x18	; 24
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	a8 95       	wdr
     a7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a88:	08 95       	ret

00000a8a <pxPortInitialiseStack>:
     a8a:	fc 01       	movw	r30, r24
     a8c:	60 83       	st	Z, r22
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	70 83       	st	Z, r23
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	10 82       	st	Z, r1
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	10 82       	st	Z, r1
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	20 e8       	ldi	r18, 0x80	; 128
     a9e:	20 83       	st	Z, r18
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	10 82       	st	Z, r1
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	10 82       	st	Z, r1
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	10 82       	st	Z, r1
     aac:	77 97       	sbiw	r30, 0x17	; 23
     aae:	40 83       	st	Z, r20
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	50 83       	st	Z, r21
     ab4:	86 97       	sbiw	r24, 0x26	; 38
     ab6:	08 95       	ret

00000ab8 <xPortStartScheduler>:
     ab8:	dc df       	rcall	.-72     	; 0xa72 <prvSetupTimerInterrupt>
     aba:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
     abe:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
     ac2:	cd 91       	ld	r28, X+
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	dd 91       	ld	r29, X+
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	1f 90       	pop	r1
     b08:	0f 90       	pop	r0
     b0a:	0c be       	out	0x3c, r0	; 60
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	08 95       	ret
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 95       	ret

00000b1c <vPortYield>:
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	0f 92       	push	r0
     b24:	0b b6       	in	r0, 0x3b	; 59
     b26:	0f 92       	push	r0
     b28:	0c b6       	in	r0, 0x3c	; 60
     b2a:	0f 92       	push	r0
     b2c:	1f 92       	push	r1
     b2e:	11 24       	eor	r1, r1
     b30:	2f 92       	push	r2
     b32:	3f 92       	push	r3
     b34:	4f 92       	push	r4
     b36:	5f 92       	push	r5
     b38:	6f 92       	push	r6
     b3a:	7f 92       	push	r7
     b3c:	8f 92       	push	r8
     b3e:	9f 92       	push	r9
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ef 93       	push	r30
     b6a:	ff 93       	push	r31
     b6c:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
     b70:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
     b74:	0d b6       	in	r0, 0x3d	; 61
     b76:	0d 92       	st	X+, r0
     b78:	0e b6       	in	r0, 0x3e	; 62
     b7a:	0d 92       	st	X+, r0
     b7c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <vTaskSwitchContext>
     b80:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
     b84:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
     b88:	cd 91       	ld	r28, X+
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	dd 91       	ld	r29, X+
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	7f 90       	pop	r7
     bc2:	6f 90       	pop	r6
     bc4:	5f 90       	pop	r5
     bc6:	4f 90       	pop	r4
     bc8:	3f 90       	pop	r3
     bca:	2f 90       	pop	r2
     bcc:	1f 90       	pop	r1
     bce:	0f 90       	pop	r0
     bd0:	0c be       	out	0x3c, r0	; 60
     bd2:	0f 90       	pop	r0
     bd4:	0b be       	out	0x3b, r0	; 59
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	08 95       	ret

00000bde <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	0f 92       	push	r0
     be6:	0b b6       	in	r0, 0x3b	; 59
     be8:	0f 92       	push	r0
     bea:	0c b6       	in	r0, 0x3c	; 60
     bec:	0f 92       	push	r0
     bee:	1f 92       	push	r1
     bf0:	11 24       	eor	r1, r1
     bf2:	2f 92       	push	r2
     bf4:	3f 92       	push	r3
     bf6:	4f 92       	push	r4
     bf8:	5f 92       	push	r5
     bfa:	6f 92       	push	r6
     bfc:	7f 92       	push	r7
     bfe:	8f 92       	push	r8
     c00:	9f 92       	push	r9
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	2f 93       	push	r18
     c14:	3f 93       	push	r19
     c16:	4f 93       	push	r20
     c18:	5f 93       	push	r21
     c1a:	6f 93       	push	r22
     c1c:	7f 93       	push	r23
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	af 93       	push	r26
     c24:	bf 93       	push	r27
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
     c2e:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
     c32:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
     c36:	0d b6       	in	r0, 0x3d	; 61
     c38:	0d 92       	st	X+, r0
     c3a:	0e b6       	in	r0, 0x3e	; 62
     c3c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c3e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c40:	7f d6       	rcall	.+3326   	; 0x1940 <xTaskIncrementTick>
     c42:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c44:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c48:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
     c4c:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
     c50:	cd 91       	ld	r28, X+
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	dd 91       	ld	r29, X+
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
     c86:	8f 90       	pop	r8
     c88:	7f 90       	pop	r7
     c8a:	6f 90       	pop	r6
     c8c:	5f 90       	pop	r5
     c8e:	4f 90       	pop	r4
     c90:	3f 90       	pop	r3
     c92:	2f 90       	pop	r2
     c94:	1f 90       	pop	r1
     c96:	0f 90       	pop	r0
     c98:	0c be       	out	0x3c, r0	; 60
     c9a:	0f 90       	pop	r0
     c9c:	0b be       	out	0x3b, r0	; 59
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ca4:	08 95       	ret

00000ca6 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     ca6:	9b df       	rcall	.-202    	; 0xbde <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ca8:	18 95       	reti

00000caa <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     caa:	dc 01       	movw	r26, r24
     cac:	53 96       	adiw	r26, 0x13	; 19
     cae:	2c 91       	ld	r18, X
     cb0:	53 97       	sbiw	r26, 0x13	; 19
     cb2:	22 23       	and	r18, r18
     cb4:	41 f0       	breq	.+16     	; 0xcc6 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     cb6:	5a 96       	adiw	r26, 0x1a	; 26
     cb8:	ed 91       	ld	r30, X+
     cba:	fc 91       	ld	r31, X
     cbc:	5b 97       	sbiw	r26, 0x1b	; 27
     cbe:	90 81       	ld	r25, Z
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	89 1b       	sub	r24, r25
     cc4:	08 95       	ret
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	08 95       	ret

00000cca <prvIsQueueEmpty>:
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	0f 92       	push	r0
     cd0:	fc 01       	movw	r30, r24
     cd2:	86 8d       	ldd	r24, Z+30	; 0x1e
     cd4:	81 11       	cpse	r24, r1
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <prvIsQueueEmpty+0x12>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	01 c0       	rjmp	.+2      	; 0xcde <prvIsQueueEmpty+0x14>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	0f 90       	pop	r0
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	08 95       	ret

00000ce4 <prvIsQueueFull>:
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	0f 92       	push	r0
     cea:	fc 01       	movw	r30, r24
     cec:	26 8d       	ldd	r18, Z+30	; 0x1e
     cee:	87 8d       	ldd	r24, Z+31	; 0x1f
     cf0:	28 13       	cpse	r18, r24
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <prvIsQueueFull+0x14>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <prvIsQueueFull+0x16>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	08 95       	ret

00000d00 <prvCopyDataToQueue>:
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	ec 01       	movw	r28, r24
     d0a:	04 2f       	mov	r16, r20
     d0c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d0e:	48 a1       	ldd	r20, Y+32	; 0x20
     d10:	41 11       	cpse	r20, r1
     d12:	0c c0       	rjmp	.+24     	; 0xd2c <prvCopyDataToQueue+0x2c>
     d14:	88 81       	ld	r24, Y
     d16:	99 81       	ldd	r25, Y+1	; 0x01
     d18:	89 2b       	or	r24, r25
     d1a:	09 f0       	breq	.+2      	; 0xd1e <prvCopyDataToQueue+0x1e>
     d1c:	42 c0       	rjmp	.+132    	; 0xda2 <prvCopyDataToQueue+0xa2>
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	9d 81       	ldd	r25, Y+5	; 0x05
     d22:	0e 94 23 12 	call	0x2446	; 0x2446 <xTaskPriorityDisinherit>
     d26:	1d 82       	std	Y+5, r1	; 0x05
     d28:	1c 82       	std	Y+4, r1	; 0x04
     d2a:	42 c0       	rjmp	.+132    	; 0xdb0 <prvCopyDataToQueue+0xb0>
     d2c:	01 11       	cpse	r16, r1
     d2e:	17 c0       	rjmp	.+46     	; 0xd5e <prvCopyDataToQueue+0x5e>
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	9b 81       	ldd	r25, Y+3	; 0x03
     d36:	0e 94 7d 21 	call	0x42fa	; 0x42fa <memcpy>
     d3a:	28 a1       	ldd	r18, Y+32	; 0x20
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	82 0f       	add	r24, r18
     d42:	91 1d       	adc	r25, r1
     d44:	9b 83       	std	Y+3, r25	; 0x03
     d46:	8a 83       	std	Y+2, r24	; 0x02
     d48:	2c 81       	ldd	r18, Y+4	; 0x04
     d4a:	3d 81       	ldd	r19, Y+5	; 0x05
     d4c:	82 17       	cp	r24, r18
     d4e:	93 07       	cpc	r25, r19
     d50:	50 f1       	brcs	.+84     	; 0xda6 <prvCopyDataToQueue+0xa6>
     d52:	88 81       	ld	r24, Y
     d54:	99 81       	ldd	r25, Y+1	; 0x01
     d56:	9b 83       	std	Y+3, r25	; 0x03
     d58:	8a 83       	std	Y+2, r24	; 0x02
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	29 c0       	rjmp	.+82     	; 0xdb0 <prvCopyDataToQueue+0xb0>
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	8e 81       	ldd	r24, Y+6	; 0x06
     d62:	9f 81       	ldd	r25, Y+7	; 0x07
     d64:	0e 94 7d 21 	call	0x42fa	; 0x42fa <memcpy>
     d68:	88 a1       	ldd	r24, Y+32	; 0x20
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	91 95       	neg	r25
     d6e:	81 95       	neg	r24
     d70:	91 09       	sbc	r25, r1
     d72:	2e 81       	ldd	r18, Y+6	; 0x06
     d74:	3f 81       	ldd	r19, Y+7	; 0x07
     d76:	28 0f       	add	r18, r24
     d78:	39 1f       	adc	r19, r25
     d7a:	3f 83       	std	Y+7, r19	; 0x07
     d7c:	2e 83       	std	Y+6, r18	; 0x06
     d7e:	48 81       	ld	r20, Y
     d80:	59 81       	ldd	r21, Y+1	; 0x01
     d82:	24 17       	cp	r18, r20
     d84:	35 07       	cpc	r19, r21
     d86:	30 f4       	brcc	.+12     	; 0xd94 <prvCopyDataToQueue+0x94>
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	3d 81       	ldd	r19, Y+5	; 0x05
     d8c:	82 0f       	add	r24, r18
     d8e:	93 1f       	adc	r25, r19
     d90:	9f 83       	std	Y+7, r25	; 0x07
     d92:	8e 83       	std	Y+6, r24	; 0x06
     d94:	02 30       	cpi	r16, 0x02	; 2
     d96:	49 f4       	brne	.+18     	; 0xdaa <prvCopyDataToQueue+0xaa>
     d98:	11 23       	and	r17, r17
     d9a:	49 f0       	breq	.+18     	; 0xdae <prvCopyDataToQueue+0xae>
     d9c:	11 50       	subi	r17, 0x01	; 1
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	07 c0       	rjmp	.+14     	; 0xdb0 <prvCopyDataToQueue+0xb0>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <prvCopyDataToQueue+0xb0>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <prvCopyDataToQueue+0xb0>
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <prvCopyDataToQueue+0xb0>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	1f 5f       	subi	r17, 0xFF	; 255
     db2:	1e 8f       	std	Y+30, r17	; 0x1e
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	08 95       	ret

00000dbe <prvCopyDataFromQueue>:
     dbe:	fc 01       	movw	r30, r24
     dc0:	40 a1       	ldd	r20, Z+32	; 0x20
     dc2:	44 23       	and	r20, r20
     dc4:	a9 f0       	breq	.+42     	; 0xdf0 <prvCopyDataFromQueue+0x32>
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	26 81       	ldd	r18, Z+6	; 0x06
     dca:	37 81       	ldd	r19, Z+7	; 0x07
     dcc:	24 0f       	add	r18, r20
     dce:	35 1f       	adc	r19, r21
     dd0:	37 83       	std	Z+7, r19	; 0x07
     dd2:	26 83       	std	Z+6, r18	; 0x06
     dd4:	84 81       	ldd	r24, Z+4	; 0x04
     dd6:	95 81       	ldd	r25, Z+5	; 0x05
     dd8:	28 17       	cp	r18, r24
     dda:	39 07       	cpc	r19, r25
     ddc:	20 f0       	brcs	.+8      	; 0xde6 <prvCopyDataFromQueue+0x28>
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	97 83       	std	Z+7, r25	; 0x07
     de4:	86 83       	std	Z+6, r24	; 0x06
     de6:	cb 01       	movw	r24, r22
     de8:	66 81       	ldd	r22, Z+6	; 0x06
     dea:	77 81       	ldd	r23, Z+7	; 0x07
     dec:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <memcpy>
     df0:	08 95       	ret

00000df2 <prvUnlockQueue>:
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	ec 01       	movw	r28, r24
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	0f 92       	push	r0
     e00:	1a a1       	ldd	r17, Y+34	; 0x22
     e02:	0b c0       	rjmp	.+22     	; 0xe1a <prvUnlockQueue+0x28>
     e04:	8b 89       	ldd	r24, Y+19	; 0x13
     e06:	88 23       	and	r24, r24
     e08:	51 f0       	breq	.+20     	; 0xe1e <prvUnlockQueue+0x2c>
     e0a:	ce 01       	movw	r24, r28
     e0c:	43 96       	adiw	r24, 0x13	; 19
     e0e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     e12:	81 11       	cpse	r24, r1
     e14:	0e 94 8a 11 	call	0x2314	; 0x2314 <vTaskMissedYield>
     e18:	11 50       	subi	r17, 0x01	; 1
     e1a:	11 16       	cp	r1, r17
     e1c:	9c f3       	brlt	.-26     	; 0xe04 <prvUnlockQueue+0x12>
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	8a a3       	std	Y+34, r24	; 0x22
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	0f 92       	push	r0
     e2c:	19 a1       	ldd	r17, Y+33	; 0x21
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <prvUnlockQueue+0x54>
     e30:	88 85       	ldd	r24, Y+8	; 0x08
     e32:	88 23       	and	r24, r24
     e34:	51 f0       	breq	.+20     	; 0xe4a <prvUnlockQueue+0x58>
     e36:	ce 01       	movw	r24, r28
     e38:	08 96       	adiw	r24, 0x08	; 8
     e3a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     e3e:	81 11       	cpse	r24, r1
     e40:	0e 94 8a 11 	call	0x2314	; 0x2314 <vTaskMissedYield>
     e44:	11 50       	subi	r17, 0x01	; 1
     e46:	11 16       	cp	r1, r17
     e48:	9c f3       	brlt	.-26     	; 0xe30 <prvUnlockQueue+0x3e>
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	89 a3       	std	Y+33, r24	; 0x21
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	08 95       	ret

00000e5a <xQueueGenericReset>:
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ec 01       	movw	r28, r24
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	0f 92       	push	r0
     e66:	e8 81       	ld	r30, Y
     e68:	f9 81       	ldd	r31, Y+1	; 0x01
     e6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e6c:	28 a1       	ldd	r18, Y+32	; 0x20
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	82 9f       	mul	r24, r18
     e74:	a0 01       	movw	r20, r0
     e76:	83 9f       	mul	r24, r19
     e78:	50 0d       	add	r21, r0
     e7a:	92 9f       	mul	r25, r18
     e7c:	50 0d       	add	r21, r0
     e7e:	11 24       	eor	r1, r1
     e80:	4e 0f       	add	r20, r30
     e82:	5f 1f       	adc	r21, r31
     e84:	5d 83       	std	Y+5, r21	; 0x05
     e86:	4c 83       	std	Y+4, r20	; 0x04
     e88:	1e 8e       	std	Y+30, r1	; 0x1e
     e8a:	fb 83       	std	Y+3, r31	; 0x03
     e8c:	ea 83       	std	Y+2, r30	; 0x02
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	28 9f       	mul	r18, r24
     e92:	a0 01       	movw	r20, r0
     e94:	29 9f       	mul	r18, r25
     e96:	50 0d       	add	r21, r0
     e98:	38 9f       	mul	r19, r24
     e9a:	50 0d       	add	r21, r0
     e9c:	11 24       	eor	r1, r1
     e9e:	cf 01       	movw	r24, r30
     ea0:	84 0f       	add	r24, r20
     ea2:	95 1f       	adc	r25, r21
     ea4:	9f 83       	std	Y+7, r25	; 0x07
     ea6:	8e 83       	std	Y+6, r24	; 0x06
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	89 a3       	std	Y+33, r24	; 0x21
     eac:	8a a3       	std	Y+34, r24	; 0x22
     eae:	61 11       	cpse	r22, r1
     eb0:	0b c0       	rjmp	.+22     	; 0xec8 <xQueueGenericReset+0x6e>
     eb2:	88 85       	ldd	r24, Y+8	; 0x08
     eb4:	88 23       	and	r24, r24
     eb6:	71 f0       	breq	.+28     	; 0xed4 <xQueueGenericReset+0x7a>
     eb8:	ce 01       	movw	r24, r28
     eba:	08 96       	adiw	r24, 0x08	; 8
     ebc:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     ec0:	88 23       	and	r24, r24
     ec2:	41 f0       	breq	.+16     	; 0xed4 <xQueueGenericReset+0x7a>
     ec4:	2b de       	rcall	.-938    	; 0xb1c <vPortYield>
     ec6:	06 c0       	rjmp	.+12     	; 0xed4 <xQueueGenericReset+0x7a>
     ec8:	ce 01       	movw	r24, r28
     eca:	08 96       	adiw	r24, 0x08	; 8
     ecc:	59 dd       	rcall	.-1358   	; 0x980 <vListInitialise>
     ece:	ce 01       	movw	r24, r28
     ed0:	43 96       	adiw	r24, 0x13	; 19
     ed2:	56 dd       	rcall	.-1364   	; 0x980 <vListInitialise>
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <prvInitialiseNewQueue>:
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	f8 01       	movw	r30, r16
     ee6:	61 11       	cpse	r22, r1
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <prvInitialiseNewQueue+0x10>
     eea:	11 83       	std	Z+1, r17	; 0x01
     eec:	00 83       	st	Z, r16
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <prvInitialiseNewQueue+0x14>
     ef0:	51 83       	std	Z+1, r21	; 0x01
     ef2:	40 83       	st	Z, r20
     ef4:	87 8f       	std	Z+31, r24	; 0x1f
     ef6:	60 a3       	std	Z+32, r22	; 0x20
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	cf 01       	movw	r24, r30
     efc:	ae df       	rcall	.-164    	; 0xe5a <xQueueGenericReset>
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <xQueueGenericCreate>:
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	f8 2e       	mov	r15, r24
     f14:	e6 2e       	mov	r14, r22
     f16:	d4 2e       	mov	r13, r20
     f18:	86 9f       	mul	r24, r22
     f1a:	c0 01       	movw	r24, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	83 96       	adiw	r24, 0x23	; 35
     f20:	4a dc       	rcall	.-1900   	; 0x7b6 <pvPortMalloc>
     f22:	ec 01       	movw	r28, r24
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	41 f0       	breq	.+16     	; 0xf38 <xQueueGenericCreate+0x34>
     f28:	8c 01       	movw	r16, r24
     f2a:	2d 2d       	mov	r18, r13
     f2c:	ac 01       	movw	r20, r24
     f2e:	4d 5d       	subi	r20, 0xDD	; 221
     f30:	5f 4f       	sbci	r21, 0xFF	; 255
     f32:	6e 2d       	mov	r22, r14
     f34:	8f 2d       	mov	r24, r15
     f36:	d4 df       	rcall	.-88     	; 0xee0 <prvInitialiseNewQueue>
     f38:	ce 01       	movw	r24, r28
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	08 95       	ret

00000f4a <xQueueGenericSend>:
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	29 97       	sbiw	r28, 0x09	; 9
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	7c 01       	movw	r14, r24
     f6c:	6b 01       	movw	r12, r22
     f6e:	2e 83       	std	Y+6, r18	; 0x06
     f70:	3f 83       	std	Y+7, r19	; 0x07
     f72:	48 87       	std	Y+8, r20	; 0x08
     f74:	59 87       	std	Y+9, r21	; 0x09
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	0f 92       	push	r0
     f7e:	f7 01       	movw	r30, r14
     f80:	96 8d       	ldd	r25, Z+30	; 0x1e
     f82:	87 8d       	ldd	r24, Z+31	; 0x1f
     f84:	98 17       	cp	r25, r24
     f86:	10 f0       	brcs	.+4      	; 0xf8c <xQueueGenericSend+0x42>
     f88:	02 30       	cpi	r16, 0x02	; 2
     f8a:	a9 f4       	brne	.+42     	; 0xfb6 <xQueueGenericSend+0x6c>
     f8c:	40 2f       	mov	r20, r16
     f8e:	b6 01       	movw	r22, r12
     f90:	c7 01       	movw	r24, r14
     f92:	b6 de       	rcall	.-660    	; 0xd00 <prvCopyDataToQueue>
     f94:	f7 01       	movw	r30, r14
     f96:	93 89       	ldd	r25, Z+19	; 0x13
     f98:	99 23       	and	r25, r25
     f9a:	39 f0       	breq	.+14     	; 0xfaa <xQueueGenericSend+0x60>
     f9c:	c7 01       	movw	r24, r14
     f9e:	43 96       	adiw	r24, 0x13	; 19
     fa0:	f9 d7       	rcall	.+4082   	; 0x1f94 <xTaskRemoveFromEventList>
     fa2:	88 23       	and	r24, r24
     fa4:	21 f0       	breq	.+8      	; 0xfae <xQueueGenericSend+0x64>
     fa6:	ba dd       	rcall	.-1164   	; 0xb1c <vPortYield>
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <xQueueGenericSend+0x64>
     faa:	81 11       	cpse	r24, r1
     fac:	b7 dd       	rcall	.-1170   	; 0xb1c <vPortYield>
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	48 c0       	rjmp	.+144    	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
     fb6:	8e 81       	ldd	r24, Y+6	; 0x06
     fb8:	9f 81       	ldd	r25, Y+7	; 0x07
     fba:	a8 85       	ldd	r26, Y+8	; 0x08
     fbc:	b9 85       	ldd	r27, Y+9	; 0x09
     fbe:	89 2b       	or	r24, r25
     fc0:	8a 2b       	or	r24, r26
     fc2:	8b 2b       	or	r24, r27
     fc4:	21 f4       	brne	.+8      	; 0xfce <xQueueGenericSend+0x84>
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	3c c0       	rjmp	.+120    	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
     fce:	11 11       	cpse	r17, r1
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <xQueueGenericSend+0x92>
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	0e 94 13 11 	call	0x2226	; 0x2226 <vTaskInternalSetTimeOutState>
     fda:	11 e0       	ldi	r17, 0x01	; 1
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	9b d4       	rcall	.+2358   	; 0x1918 <vTaskSuspendAll>
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	0f 92       	push	r0
     fe8:	f7 01       	movw	r30, r14
     fea:	81 a1       	ldd	r24, Z+33	; 0x21
     fec:	8f 3f       	cpi	r24, 0xFF	; 255
     fee:	09 f4       	brne	.+2      	; 0xff2 <xQueueGenericSend+0xa8>
     ff0:	11 a2       	std	Z+33, r1	; 0x21
     ff2:	f7 01       	movw	r30, r14
     ff4:	82 a1       	ldd	r24, Z+34	; 0x22
     ff6:	8f 3f       	cpi	r24, 0xFF	; 255
     ff8:	09 f4       	brne	.+2      	; 0xffc <xQueueGenericSend+0xb2>
     ffa:	12 a2       	std	Z+34, r1	; 0x22
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	be 01       	movw	r22, r28
    1002:	6a 5f       	subi	r22, 0xFA	; 250
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskCheckForTimeOut>
    100e:	81 11       	cpse	r24, r1
    1010:	16 c0       	rjmp	.+44     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    1012:	c7 01       	movw	r24, r14
    1014:	67 de       	rcall	.-818    	; 0xce4 <prvIsQueueFull>
    1016:	88 23       	and	r24, r24
    1018:	71 f0       	breq	.+28     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    101a:	4e 81       	ldd	r20, Y+6	; 0x06
    101c:	5f 81       	ldd	r21, Y+7	; 0x07
    101e:	68 85       	ldd	r22, Y+8	; 0x08
    1020:	79 85       	ldd	r23, Y+9	; 0x09
    1022:	c7 01       	movw	r24, r14
    1024:	08 96       	adiw	r24, 0x08	; 8
    1026:	13 d7       	rcall	.+3622   	; 0x1e4e <vTaskPlaceOnEventList>
    1028:	c7 01       	movw	r24, r14
    102a:	e3 de       	rcall	.-570    	; 0xdf2 <prvUnlockQueue>
    102c:	b5 d5       	rcall	.+2922   	; 0x1b98 <xTaskResumeAll>
    102e:	81 11       	cpse	r24, r1
    1030:	a3 cf       	rjmp	.-186    	; 0xf78 <xQueueGenericSend+0x2e>
    1032:	74 dd       	rcall	.-1304   	; 0xb1c <vPortYield>
    1034:	a1 cf       	rjmp	.-190    	; 0xf78 <xQueueGenericSend+0x2e>
    1036:	c7 01       	movw	r24, r14
    1038:	dc de       	rcall	.-584    	; 0xdf2 <prvUnlockQueue>
    103a:	ae d5       	rcall	.+2908   	; 0x1b98 <xTaskResumeAll>
    103c:	9d cf       	rjmp	.-198    	; 0xf78 <xQueueGenericSend+0x2e>
    103e:	c7 01       	movw	r24, r14
    1040:	d8 de       	rcall	.-592    	; 0xdf2 <prvUnlockQueue>
    1042:	aa d5       	rcall	.+2900   	; 0x1b98 <xTaskResumeAll>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	29 96       	adiw	r28, 0x09	; 9
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	08 95       	ret

00001064 <xQueueGenericSendFromISR>:
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	8a 01       	movw	r16, r20
    1072:	fc 01       	movw	r30, r24
    1074:	56 8d       	ldd	r21, Z+30	; 0x1e
    1076:	37 8d       	ldd	r19, Z+31	; 0x1f
    1078:	53 17       	cp	r21, r19
    107a:	10 f0       	brcs	.+4      	; 0x1080 <xQueueGenericSendFromISR+0x1c>
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	f1 f4       	brne	.+60     	; 0x10bc <xQueueGenericSendFromISR+0x58>
    1080:	42 2f       	mov	r20, r18
    1082:	78 01       	movw	r14, r16
    1084:	ec 01       	movw	r28, r24
    1086:	1a a1       	ldd	r17, Y+34	; 0x22
    1088:	8e 8d       	ldd	r24, Y+30	; 0x1e
    108a:	ce 01       	movw	r24, r28
    108c:	39 de       	rcall	.-910    	; 0xd00 <prvCopyDataToQueue>
    108e:	1f 3f       	cpi	r17, 0xFF	; 255
    1090:	79 f4       	brne	.+30     	; 0x10b0 <xQueueGenericSendFromISR+0x4c>
    1092:	8b 89       	ldd	r24, Y+19	; 0x13
    1094:	88 23       	and	r24, r24
    1096:	a1 f0       	breq	.+40     	; 0x10c0 <xQueueGenericSendFromISR+0x5c>
    1098:	ce 01       	movw	r24, r28
    109a:	43 96       	adiw	r24, 0x13	; 19
    109c:	7b d7       	rcall	.+3830   	; 0x1f94 <xTaskRemoveFromEventList>
    109e:	88 23       	and	r24, r24
    10a0:	89 f0       	breq	.+34     	; 0x10c4 <xQueueGenericSendFromISR+0x60>
    10a2:	e1 14       	cp	r14, r1
    10a4:	f1 04       	cpc	r15, r1
    10a6:	81 f0       	breq	.+32     	; 0x10c8 <xQueueGenericSendFromISR+0x64>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	f7 01       	movw	r30, r14
    10ac:	80 83       	st	Z, r24
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <xQueueGenericSendFromISR+0x66>
    10b0:	ff 24       	eor	r15, r15
    10b2:	f3 94       	inc	r15
    10b4:	f1 0e       	add	r15, r17
    10b6:	fa a2       	std	Y+34, r15	; 0x22
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <xQueueGenericSendFromISR+0x66>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <xQueueGenericSendFromISR+0x66>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <xQueueGenericSendFromISR+0x66>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <xQueueGenericSendFromISR+0x66>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	08 95       	ret

000010d8 <xQueueReceive>:
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	29 97       	sbiw	r28, 0x09	; 9
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	8c 01       	movw	r16, r24
    10fa:	6b 01       	movw	r12, r22
    10fc:	2e 83       	std	Y+6, r18	; 0x06
    10fe:	3f 83       	std	Y+7, r19	; 0x07
    1100:	48 87       	std	Y+8, r20	; 0x08
    1102:	59 87       	std	Y+9, r21	; 0x09
    1104:	e1 2c       	mov	r14, r1
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	0f 92       	push	r0
    110c:	f8 01       	movw	r30, r16
    110e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1110:	ff 20       	and	r15, r15
    1112:	91 f0       	breq	.+36     	; 0x1138 <xQueueReceive+0x60>
    1114:	b6 01       	movw	r22, r12
    1116:	c8 01       	movw	r24, r16
    1118:	52 de       	rcall	.-860    	; 0xdbe <prvCopyDataFromQueue>
    111a:	fa 94       	dec	r15
    111c:	f8 01       	movw	r30, r16
    111e:	f6 8e       	std	Z+30, r15	; 0x1e
    1120:	80 85       	ldd	r24, Z+8	; 0x08
    1122:	88 23       	and	r24, r24
    1124:	29 f0       	breq	.+10     	; 0x1130 <xQueueReceive+0x58>
    1126:	c8 01       	movw	r24, r16
    1128:	08 96       	adiw	r24, 0x08	; 8
    112a:	34 d7       	rcall	.+3688   	; 0x1f94 <xTaskRemoveFromEventList>
    112c:	81 11       	cpse	r24, r1
    112e:	f6 dc       	rcall	.-1556   	; 0xb1c <vPortYield>
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	4e c0       	rjmp	.+156    	; 0x11d4 <xQueueReceive+0xfc>
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	a8 85       	ldd	r26, Y+8	; 0x08
    113e:	b9 85       	ldd	r27, Y+9	; 0x09
    1140:	89 2b       	or	r24, r25
    1142:	8a 2b       	or	r24, r26
    1144:	8b 2b       	or	r24, r27
    1146:	21 f4       	brne	.+8      	; 0x1150 <xQueueReceive+0x78>
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	42 c0       	rjmp	.+132    	; 0x11d4 <xQueueReceive+0xfc>
    1150:	e1 10       	cpse	r14, r1
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <xQueueReceive+0x88>
    1154:	ce 01       	movw	r24, r28
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	0e 94 13 11 	call	0x2226	; 0x2226 <vTaskInternalSetTimeOutState>
    115c:	ee 24       	eor	r14, r14
    115e:	e3 94       	inc	r14
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	d9 d3       	rcall	.+1970   	; 0x1918 <vTaskSuspendAll>
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	0f 92       	push	r0
    116c:	f8 01       	movw	r30, r16
    116e:	81 a1       	ldd	r24, Z+33	; 0x21
    1170:	8f 3f       	cpi	r24, 0xFF	; 255
    1172:	09 f4       	brne	.+2      	; 0x1176 <xQueueReceive+0x9e>
    1174:	11 a2       	std	Z+33, r1	; 0x21
    1176:	f8 01       	movw	r30, r16
    1178:	82 a1       	ldd	r24, Z+34	; 0x22
    117a:	8f 3f       	cpi	r24, 0xFF	; 255
    117c:	09 f4       	brne	.+2      	; 0x1180 <xQueueReceive+0xa8>
    117e:	12 a2       	std	Z+34, r1	; 0x22
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	be 01       	movw	r22, r28
    1186:	6a 5f       	subi	r22, 0xFA	; 250
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	ce 01       	movw	r24, r28
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskCheckForTimeOut>
    1192:	81 11       	cpse	r24, r1
    1194:	16 c0       	rjmp	.+44     	; 0x11c2 <xQueueReceive+0xea>
    1196:	c8 01       	movw	r24, r16
    1198:	98 dd       	rcall	.-1232   	; 0xcca <prvIsQueueEmpty>
    119a:	88 23       	and	r24, r24
    119c:	71 f0       	breq	.+28     	; 0x11ba <xQueueReceive+0xe2>
    119e:	4e 81       	ldd	r20, Y+6	; 0x06
    11a0:	5f 81       	ldd	r21, Y+7	; 0x07
    11a2:	68 85       	ldd	r22, Y+8	; 0x08
    11a4:	79 85       	ldd	r23, Y+9	; 0x09
    11a6:	c8 01       	movw	r24, r16
    11a8:	43 96       	adiw	r24, 0x13	; 19
    11aa:	51 d6       	rcall	.+3234   	; 0x1e4e <vTaskPlaceOnEventList>
    11ac:	c8 01       	movw	r24, r16
    11ae:	21 de       	rcall	.-958    	; 0xdf2 <prvUnlockQueue>
    11b0:	f3 d4       	rcall	.+2534   	; 0x1b98 <xTaskResumeAll>
    11b2:	81 11       	cpse	r24, r1
    11b4:	a8 cf       	rjmp	.-176    	; 0x1106 <xQueueReceive+0x2e>
    11b6:	b2 dc       	rcall	.-1692   	; 0xb1c <vPortYield>
    11b8:	a6 cf       	rjmp	.-180    	; 0x1106 <xQueueReceive+0x2e>
    11ba:	c8 01       	movw	r24, r16
    11bc:	1a de       	rcall	.-972    	; 0xdf2 <prvUnlockQueue>
    11be:	ec d4       	rcall	.+2520   	; 0x1b98 <xTaskResumeAll>
    11c0:	a2 cf       	rjmp	.-188    	; 0x1106 <xQueueReceive+0x2e>
    11c2:	c8 01       	movw	r24, r16
    11c4:	16 de       	rcall	.-980    	; 0xdf2 <prvUnlockQueue>
    11c6:	e8 d4       	rcall	.+2512   	; 0x1b98 <xTaskResumeAll>
    11c8:	c8 01       	movw	r24, r16
    11ca:	7f dd       	rcall	.-1282   	; 0xcca <prvIsQueueEmpty>
    11cc:	88 23       	and	r24, r24
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <xQueueReceive+0xfa>
    11d0:	9a cf       	rjmp	.-204    	; 0x1106 <xQueueReceive+0x2e>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	29 96       	adiw	r28, 0x09	; 9
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	08 95       	ret

000011f2 <xQueueSemaphoreTake>:
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	29 97       	sbiw	r28, 0x09	; 9
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	8c 01       	movw	r16, r24
    1210:	4e 83       	std	Y+6, r20	; 0x06
    1212:	5f 83       	std	Y+7, r21	; 0x07
    1214:	68 87       	std	Y+8, r22	; 0x08
    1216:	79 87       	std	Y+9, r23	; 0x09
    1218:	e1 2c       	mov	r14, r1
    121a:	f1 2c       	mov	r15, r1
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	0f 92       	push	r0
    1222:	f8 01       	movw	r30, r16
    1224:	86 8d       	ldd	r24, Z+30	; 0x1e
    1226:	88 23       	and	r24, r24
    1228:	c1 f0       	breq	.+48     	; 0x125a <xQueueSemaphoreTake+0x68>
    122a:	81 50       	subi	r24, 0x01	; 1
    122c:	86 8f       	std	Z+30, r24	; 0x1e
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	89 2b       	or	r24, r25
    1234:	29 f4       	brne	.+10     	; 0x1240 <xQueueSemaphoreTake+0x4e>
    1236:	0e 94 0f 13 	call	0x261e	; 0x261e <pvTaskIncrementMutexHeldCount>
    123a:	f8 01       	movw	r30, r16
    123c:	95 83       	std	Z+5, r25	; 0x05
    123e:	84 83       	std	Z+4, r24	; 0x04
    1240:	f8 01       	movw	r30, r16
    1242:	80 85       	ldd	r24, Z+8	; 0x08
    1244:	88 23       	and	r24, r24
    1246:	29 f0       	breq	.+10     	; 0x1252 <xQueueSemaphoreTake+0x60>
    1248:	c8 01       	movw	r24, r16
    124a:	08 96       	adiw	r24, 0x08	; 8
    124c:	a3 d6       	rcall	.+3398   	; 0x1f94 <xTaskRemoveFromEventList>
    124e:	81 11       	cpse	r24, r1
    1250:	65 dc       	rcall	.-1846   	; 0xb1c <vPortYield>
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	6c c0       	rjmp	.+216    	; 0x1332 <xQueueSemaphoreTake+0x140>
    125a:	8e 81       	ldd	r24, Y+6	; 0x06
    125c:	9f 81       	ldd	r25, Y+7	; 0x07
    125e:	a8 85       	ldd	r26, Y+8	; 0x08
    1260:	b9 85       	ldd	r27, Y+9	; 0x09
    1262:	89 2b       	or	r24, r25
    1264:	8a 2b       	or	r24, r26
    1266:	8b 2b       	or	r24, r27
    1268:	21 f4       	brne	.+8      	; 0x1272 <xQueueSemaphoreTake+0x80>
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	60 c0       	rjmp	.+192    	; 0x1332 <xQueueSemaphoreTake+0x140>
    1272:	f1 10       	cpse	r15, r1
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <xQueueSemaphoreTake+0x8e>
    1276:	ce 01       	movw	r24, r28
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	d5 d7       	rcall	.+4010   	; 0x2226 <vTaskInternalSetTimeOutState>
    127c:	ff 24       	eor	r15, r15
    127e:	f3 94       	inc	r15
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	49 d3       	rcall	.+1682   	; 0x1918 <vTaskSuspendAll>
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	0f 92       	push	r0
    128c:	f8 01       	movw	r30, r16
    128e:	81 a1       	ldd	r24, Z+33	; 0x21
    1290:	8f 3f       	cpi	r24, 0xFF	; 255
    1292:	09 f4       	brne	.+2      	; 0x1296 <xQueueSemaphoreTake+0xa4>
    1294:	11 a2       	std	Z+33, r1	; 0x21
    1296:	f8 01       	movw	r30, r16
    1298:	82 a1       	ldd	r24, Z+34	; 0x22
    129a:	8f 3f       	cpi	r24, 0xFF	; 255
    129c:	09 f4       	brne	.+2      	; 0x12a0 <xQueueSemaphoreTake+0xae>
    129e:	12 a2       	std	Z+34, r1	; 0x22
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	be 01       	movw	r22, r28
    12a6:	6a 5f       	subi	r22, 0xFA	; 250
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	ce 01       	movw	r24, r28
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	cc d7       	rcall	.+3992   	; 0x2248 <xTaskCheckForTimeOut>
    12b0:	81 11       	cpse	r24, r1
    12b2:	25 c0       	rjmp	.+74     	; 0x12fe <xQueueSemaphoreTake+0x10c>
    12b4:	c8 01       	movw	r24, r16
    12b6:	09 dd       	rcall	.-1518   	; 0xcca <prvIsQueueEmpty>
    12b8:	88 23       	and	r24, r24
    12ba:	e9 f0       	breq	.+58     	; 0x12f6 <xQueueSemaphoreTake+0x104>
    12bc:	f8 01       	movw	r30, r16
    12be:	80 81       	ld	r24, Z
    12c0:	91 81       	ldd	r25, Z+1	; 0x01
    12c2:	89 2b       	or	r24, r25
    12c4:	51 f4       	brne	.+20     	; 0x12da <xQueueSemaphoreTake+0xe8>
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	0f 92       	push	r0
    12cc:	84 81       	ldd	r24, Z+4	; 0x04
    12ce:	95 81       	ldd	r25, Z+5	; 0x05
    12d0:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskPriorityInherit>
    12d4:	e8 2e       	mov	r14, r24
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	4e 81       	ldd	r20, Y+6	; 0x06
    12dc:	5f 81       	ldd	r21, Y+7	; 0x07
    12de:	68 85       	ldd	r22, Y+8	; 0x08
    12e0:	79 85       	ldd	r23, Y+9	; 0x09
    12e2:	c8 01       	movw	r24, r16
    12e4:	43 96       	adiw	r24, 0x13	; 19
    12e6:	b3 d5       	rcall	.+2918   	; 0x1e4e <vTaskPlaceOnEventList>
    12e8:	c8 01       	movw	r24, r16
    12ea:	83 dd       	rcall	.-1274   	; 0xdf2 <prvUnlockQueue>
    12ec:	55 d4       	rcall	.+2218   	; 0x1b98 <xTaskResumeAll>
    12ee:	81 11       	cpse	r24, r1
    12f0:	95 cf       	rjmp	.-214    	; 0x121c <xQueueSemaphoreTake+0x2a>
    12f2:	14 dc       	rcall	.-2008   	; 0xb1c <vPortYield>
    12f4:	93 cf       	rjmp	.-218    	; 0x121c <xQueueSemaphoreTake+0x2a>
    12f6:	c8 01       	movw	r24, r16
    12f8:	7c dd       	rcall	.-1288   	; 0xdf2 <prvUnlockQueue>
    12fa:	4e d4       	rcall	.+2204   	; 0x1b98 <xTaskResumeAll>
    12fc:	8f cf       	rjmp	.-226    	; 0x121c <xQueueSemaphoreTake+0x2a>
    12fe:	c8 01       	movw	r24, r16
    1300:	78 dd       	rcall	.-1296   	; 0xdf2 <prvUnlockQueue>
    1302:	4a d4       	rcall	.+2196   	; 0x1b98 <xTaskResumeAll>
    1304:	c8 01       	movw	r24, r16
    1306:	e1 dc       	rcall	.-1598   	; 0xcca <prvIsQueueEmpty>
    1308:	88 23       	and	r24, r24
    130a:	09 f4       	brne	.+2      	; 0x130e <xQueueSemaphoreTake+0x11c>
    130c:	87 cf       	rjmp	.-242    	; 0x121c <xQueueSemaphoreTake+0x2a>
    130e:	ee 20       	and	r14, r14
    1310:	79 f0       	breq	.+30     	; 0x1330 <xQueueSemaphoreTake+0x13e>
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	0f 92       	push	r0
    1318:	c8 01       	movw	r24, r16
    131a:	c7 dc       	rcall	.-1650   	; 0xcaa <prvGetDisinheritPriorityAfterTimeout>
    131c:	68 2f       	mov	r22, r24
    131e:	f8 01       	movw	r30, r16
    1320:	84 81       	ldd	r24, Z+4	; 0x04
    1322:	95 81       	ldd	r25, Z+5	; 0x05
    1324:	0e 94 7e 12 	call	0x24fc	; 0x24fc <vTaskPriorityDisinheritAfterTimeout>
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <xQueueSemaphoreTake+0x140>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	29 96       	adiw	r28, 0x09	; 9
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	08 95       	ret

0000134c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	0f 92       	push	r0
    1358:	89 a1       	ldd	r24, Y+33	; 0x21
    135a:	8f 3f       	cpi	r24, 0xFF	; 255
    135c:	09 f4       	brne	.+2      	; 0x1360 <vQueueWaitForMessageRestricted+0x14>
    135e:	19 a2       	std	Y+33, r1	; 0x21
    1360:	8a a1       	ldd	r24, Y+34	; 0x22
    1362:	8f 3f       	cpi	r24, 0xFF	; 255
    1364:	09 f4       	brne	.+2      	; 0x1368 <vQueueWaitForMessageRestricted+0x1c>
    1366:	1a a2       	std	Y+34, r1	; 0x22
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    136c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    136e:	81 11       	cpse	r24, r1
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1372:	ce 01       	movw	r24, r28
    1374:	43 96       	adiw	r24, 0x13	; 19
    1376:	cc d5       	rcall	.+2968   	; 0x1f10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1378:	ce 01       	movw	r24, r28
    137a:	3b dd       	rcall	.-1418   	; 0xdf2 <prvUnlockQueue>
    }
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <prvInitialiseNewStreamBuffer>:

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */

    return xReceivedLength;
}
    1382:	0f 93       	push	r16
    1384:	fc 01       	movw	r30, r24
    1386:	8f e0       	ldi	r24, 0x0F	; 15
    1388:	df 01       	movw	r26, r30
    138a:	1d 92       	st	X+, r1
    138c:	8a 95       	dec	r24
    138e:	e9 f7       	brne	.-6      	; 0x138a <prvInitialiseNewStreamBuffer+0x8>
    1390:	75 87       	std	Z+13, r23	; 0x0d
    1392:	64 87       	std	Z+12, r22	; 0x0c
    1394:	55 83       	std	Z+5, r21	; 0x05
    1396:	44 83       	std	Z+4, r20	; 0x04
    1398:	37 83       	std	Z+7, r19	; 0x07
    139a:	26 83       	std	Z+6, r18	; 0x06
    139c:	06 87       	std	Z+14, r16	; 0x0e
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <xStreamBufferGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xIsMessageBuffer )
    {
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	ec 01       	movw	r28, r24
    13b2:	6b 01       	movw	r12, r22

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xIsMessageBuffer == pdTRUE )
    13b4:	41 30       	cpi	r20, 0x01	; 1
    13b6:	11 f4       	brne	.+4      	; 0x13bc <xStreamBufferGenericCreate+0x1a>
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    13b8:	01 e0       	ldi	r16, 0x01	; 1
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <xStreamBufferGenericCreate+0x1c>
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
    13bc:	00 e0       	ldi	r16, 0x00	; 0

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
    13be:	c1 14       	cp	r12, r1
    13c0:	d1 04       	cpc	r13, r1
    13c2:	19 f4       	brne	.+6      	; 0x13ca <xStreamBufferGenericCreate+0x28>
        {
            xTriggerLevelBytes = ( size_t ) 1;
    13c4:	cc 24       	eor	r12, r12
    13c6:	c3 94       	inc	r12
    13c8:	d1 2c       	mov	r13, r1
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
    13ca:	ce 01       	movw	r24, r28
    13cc:	40 96       	adiw	r24, 0x10	; 16
    13ce:	c8 17       	cp	r28, r24
    13d0:	d9 07       	cpc	r29, r25
    13d2:	20 f4       	brcc	.+8      	; 0x13dc <xStreamBufferGenericCreate+0x3a>
        {
            xBufferSizeBytes++;
    13d4:	21 96       	adiw	r28, 0x01	; 1
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
    13d6:	ef d9       	rcall	.-3106   	; 0x7b6 <pvPortMalloc>
    13d8:	7c 01       	movw	r14, r24
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <xStreamBufferGenericCreate+0x3e>
        }
        else
        {
            pucAllocatedMemory = NULL;
    13dc:	e1 2c       	mov	r14, r1
    13de:	f1 2c       	mov	r15, r1
        }
        

        if( pucAllocatedMemory != NULL )
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	39 f0       	breq	.+14     	; 0x13f4 <xStreamBufferGenericCreate+0x52>
        {
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
    13e6:	96 01       	movw	r18, r12
    13e8:	ae 01       	movw	r20, r28
    13ea:	b7 01       	movw	r22, r14
    13ec:	61 5f       	subi	r22, 0xF1	; 241
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	c7 01       	movw	r24, r14
    13f2:	c7 df       	rcall	.-114    	; 0x1382 <prvInitialiseNewStreamBuffer>
        {
            traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
        }

        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
    }
    13f4:	c7 01       	movw	r24, r14
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	08 95       	ret

00001406 <prvResetNextTaskUnblockTime>:
    1406:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxDelayedTaskList>
    140a:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxDelayedTaskList+0x1>
    140e:	80 81       	ld	r24, Z
    1410:	81 11       	cpse	r24, r1
    1412:	0c c0       	rjmp	.+24     	; 0x142c <prvResetNextTaskUnblockTime+0x26>
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	dc 01       	movw	r26, r24
    141a:	80 93 57 0d 	sts	0x0D57, r24	; 0x800d57 <xNextTaskUnblockTime>
    141e:	90 93 58 0d 	sts	0x0D58, r25	; 0x800d58 <xNextTaskUnblockTime+0x1>
    1422:	a0 93 59 0d 	sts	0x0D59, r26	; 0x800d59 <xNextTaskUnblockTime+0x2>
    1426:	b0 93 5a 0d 	sts	0x0D5A, r27	; 0x800d5a <xNextTaskUnblockTime+0x3>
    142a:	08 95       	ret
    142c:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxDelayedTaskList>
    1430:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxDelayedTaskList+0x1>
    1434:	07 80       	ldd	r0, Z+7	; 0x07
    1436:	f0 85       	ldd	r31, Z+8	; 0x08
    1438:	e0 2d       	mov	r30, r0
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	a2 81       	ldd	r26, Z+2	; 0x02
    1440:	b3 81       	ldd	r27, Z+3	; 0x03
    1442:	80 93 57 0d 	sts	0x0D57, r24	; 0x800d57 <xNextTaskUnblockTime>
    1446:	90 93 58 0d 	sts	0x0D58, r25	; 0x800d58 <xNextTaskUnblockTime+0x1>
    144a:	a0 93 59 0d 	sts	0x0D59, r26	; 0x800d59 <xNextTaskUnblockTime+0x2>
    144e:	b0 93 5a 0d 	sts	0x0D5A, r27	; 0x800d5a <xNextTaskUnblockTime+0x3>
    1452:	08 95       	ret

00001454 <prvDeleteTCB>:
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	ec 01       	movw	r28, r24
    145a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145e:	54 da       	rcall	.-2904   	; 0x908 <vPortFree>
    1460:	ce 01       	movw	r24, r28
    1462:	52 da       	rcall	.-2908   	; 0x908 <vPortFree>
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <prvInitialiseNewTask>:
    146a:	4f 92       	push	r4
    146c:	5f 92       	push	r5
    146e:	6f 92       	push	r6
    1470:	7f 92       	push	r7
    1472:	8f 92       	push	r8
    1474:	9f 92       	push	r9
    1476:	af 92       	push	r10
    1478:	bf 92       	push	r11
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	2c 01       	movw	r4, r24
    148a:	5b 01       	movw	r10, r22
    148c:	4a 01       	movw	r8, r20
    148e:	39 01       	movw	r6, r18
    1490:	e6 01       	movw	r28, r12
    1492:	65 ea       	ldi	r22, 0xA5	; 165
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    149a:	0e 94 86 21 	call	0x430c	; 0x430c <memset>
    149e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a2:	21 e0       	ldi	r18, 0x01	; 1
    14a4:	82 1a       	sub	r8, r18
    14a6:	91 08       	sbc	r9, r1
    14a8:	88 0e       	add	r8, r24
    14aa:	99 1e       	adc	r9, r25
    14ac:	a1 14       	cp	r10, r1
    14ae:	b1 04       	cpc	r11, r1
    14b0:	89 f4       	brne	.+34     	; 0x14d4 <prvInitialiseNewTask+0x6a>
    14b2:	15 c0       	rjmp	.+42     	; 0x14de <prvInitialiseNewTask+0x74>
    14b4:	82 2f       	mov	r24, r18
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	f5 01       	movw	r30, r10
    14ba:	e8 0f       	add	r30, r24
    14bc:	f9 1f       	adc	r31, r25
    14be:	30 81       	ld	r19, Z
    14c0:	de 01       	movw	r26, r28
    14c2:	a8 0f       	add	r26, r24
    14c4:	b9 1f       	adc	r27, r25
    14c6:	5d 96       	adiw	r26, 0x1d	; 29
    14c8:	3c 93       	st	X, r19
    14ca:	80 81       	ld	r24, Z
    14cc:	88 23       	and	r24, r24
    14ce:	29 f0       	breq	.+10     	; 0x14da <prvInitialiseNewTask+0x70>
    14d0:	2f 5f       	subi	r18, 0xFF	; 255
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <prvInitialiseNewTask+0x6c>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	20 31       	cpi	r18, 0x10	; 16
    14d8:	68 f3       	brcs	.-38     	; 0x14b4 <prvInitialiseNewTask+0x4a>
    14da:	1c a6       	std	Y+44, r1	; 0x2c
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <prvInitialiseNewTask+0x76>
    14de:	1d 8e       	std	Y+29, r1	; 0x1d
    14e0:	0a 30       	cpi	r16, 0x0A	; 10
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <prvInitialiseNewTask+0x7c>
    14e4:	09 e0       	ldi	r16, 0x09	; 9
    14e6:	0a 8f       	std	Y+26, r16	; 0x1a
    14e8:	0d a7       	std	Y+45, r16	; 0x2d
    14ea:	1e a6       	std	Y+46, r1	; 0x2e
    14ec:	ce 01       	movw	r24, r28
    14ee:	02 96       	adiw	r24, 0x02	; 2
    14f0:	58 da       	rcall	.-2896   	; 0x9a2 <vListInitialiseItem>
    14f2:	ce 01       	movw	r24, r28
    14f4:	0e 96       	adiw	r24, 0x0e	; 14
    14f6:	55 da       	rcall	.-2902   	; 0x9a2 <vListInitialiseItem>
    14f8:	db 87       	std	Y+11, r29	; 0x0b
    14fa:	ca 87       	std	Y+10, r28	; 0x0a
    14fc:	8a e0       	ldi	r24, 0x0A	; 10
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	80 1b       	sub	r24, r16
    1506:	91 09       	sbc	r25, r1
    1508:	a1 09       	sbc	r26, r1
    150a:	b1 09       	sbc	r27, r1
    150c:	8e 87       	std	Y+14, r24	; 0x0e
    150e:	9f 87       	std	Y+15, r25	; 0x0f
    1510:	a8 8b       	std	Y+16, r26	; 0x10
    1512:	b9 8b       	std	Y+17, r27	; 0x11
    1514:	df 8b       	std	Y+23, r29	; 0x17
    1516:	ce 8b       	std	Y+22, r28	; 0x16
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	fe 01       	movw	r30, r28
    151c:	bf 96       	adiw	r30, 0x2f	; 47
    151e:	df 01       	movw	r26, r30
    1520:	1d 92       	st	X+, r1
    1522:	8a 95       	dec	r24
    1524:	e9 f7       	brne	.-6      	; 0x1520 <prvInitialiseNewTask+0xb6>
    1526:	1b aa       	std	Y+51, r1	; 0x33
    1528:	a3 01       	movw	r20, r6
    152a:	b2 01       	movw	r22, r4
    152c:	c4 01       	movw	r24, r8
    152e:	ad da       	rcall	.-2726   	; 0xa8a <pxPortInitialiseStack>
    1530:	99 83       	std	Y+1, r25	; 0x01
    1532:	88 83       	st	Y, r24
    1534:	e1 14       	cp	r14, r1
    1536:	f1 04       	cpc	r15, r1
    1538:	19 f0       	breq	.+6      	; 0x1540 <prvInitialiseNewTask+0xd6>
    153a:	f7 01       	movw	r30, r14
    153c:	d1 83       	std	Z+1, r29	; 0x01
    153e:	c0 83       	st	Z, r28
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	bf 90       	pop	r11
    1550:	af 90       	pop	r10
    1552:	9f 90       	pop	r9
    1554:	8f 90       	pop	r8
    1556:	7f 90       	pop	r7
    1558:	6f 90       	pop	r6
    155a:	5f 90       	pop	r5
    155c:	4f 90       	pop	r4
    155e:	08 95       	ret

00001560 <prvInitialiseTaskLists>:
    1560:	cf 93       	push	r28
    1562:	c0 e0       	ldi	r28, 0x00	; 0
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <prvInitialiseTaskLists+0x16>
    1566:	2b e0       	ldi	r18, 0x0B	; 11
    1568:	c2 9f       	mul	r28, r18
    156a:	c0 01       	movw	r24, r0
    156c:	11 24       	eor	r1, r1
    156e:	8b 55       	subi	r24, 0x5B	; 91
    1570:	92 4f       	sbci	r25, 0xF2	; 242
    1572:	06 da       	rcall	.-3060   	; 0x980 <vListInitialise>
    1574:	cf 5f       	subi	r28, 0xFF	; 255
    1576:	ca 30       	cpi	r28, 0x0A	; 10
    1578:	b0 f3       	brcs	.-20     	; 0x1566 <prvInitialiseTaskLists+0x6>
    157a:	8a e9       	ldi	r24, 0x9A	; 154
    157c:	9d e0       	ldi	r25, 0x0D	; 13
    157e:	00 da       	rcall	.-3072   	; 0x980 <vListInitialise>
    1580:	8f e8       	ldi	r24, 0x8F	; 143
    1582:	9d e0       	ldi	r25, 0x0D	; 13
    1584:	fd d9       	rcall	.-3078   	; 0x980 <vListInitialise>
    1586:	80 e8       	ldi	r24, 0x80	; 128
    1588:	9d e0       	ldi	r25, 0x0D	; 13
    158a:	fa d9       	rcall	.-3084   	; 0x980 <vListInitialise>
    158c:	85 e7       	ldi	r24, 0x75	; 117
    158e:	9d e0       	ldi	r25, 0x0D	; 13
    1590:	f7 d9       	rcall	.-3090   	; 0x980 <vListInitialise>
    1592:	89 e6       	ldi	r24, 0x69	; 105
    1594:	9d e0       	ldi	r25, 0x0D	; 13
    1596:	f4 d9       	rcall	.-3096   	; 0x980 <vListInitialise>
    1598:	8a e9       	ldi	r24, 0x9A	; 154
    159a:	9d e0       	ldi	r25, 0x0D	; 13
    159c:	90 93 8e 0d 	sts	0x0D8E, r25	; 0x800d8e <pxDelayedTaskList+0x1>
    15a0:	80 93 8d 0d 	sts	0x0D8D, r24	; 0x800d8d <pxDelayedTaskList>
    15a4:	8f e8       	ldi	r24, 0x8F	; 143
    15a6:	9d e0       	ldi	r25, 0x0D	; 13
    15a8:	90 93 8c 0d 	sts	0x0D8C, r25	; 0x800d8c <pxOverflowDelayedTaskList+0x1>
    15ac:	80 93 8b 0d 	sts	0x0D8B, r24	; 0x800d8b <pxOverflowDelayedTaskList>
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <prvAddNewTaskToReadyList>:
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	ec 01       	movw	r28, r24
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	0f 92       	push	r0
    15c0:	80 91 68 0d 	lds	r24, 0x0D68	; 0x800d68 <uxCurrentNumberOfTasks>
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	80 93 68 0d 	sts	0x0D68, r24	; 0x800d68 <uxCurrentNumberOfTasks>
    15ca:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    15ce:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    15d2:	89 2b       	or	r24, r25
    15d4:	51 f4       	brne	.+20     	; 0x15ea <prvAddNewTaskToReadyList+0x36>
    15d6:	d0 93 14 0e 	sts	0x0E14, r29	; 0x800e14 <pxCurrentTCB+0x1>
    15da:	c0 93 13 0e 	sts	0x0E13, r28	; 0x800e13 <pxCurrentTCB>
    15de:	80 91 68 0d 	lds	r24, 0x0D68	; 0x800d68 <uxCurrentNumberOfTasks>
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	91 f4       	brne	.+36     	; 0x160a <prvAddNewTaskToReadyList+0x56>
    15e6:	bc df       	rcall	.-136    	; 0x1560 <prvInitialiseTaskLists>
    15e8:	10 c0       	rjmp	.+32     	; 0x160a <prvAddNewTaskToReadyList+0x56>
    15ea:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <xSchedulerRunning>
    15ee:	81 11       	cpse	r24, r1
    15f0:	0c c0       	rjmp	.+24     	; 0x160a <prvAddNewTaskToReadyList+0x56>
    15f2:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    15f6:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    15fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    15fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15fe:	89 17       	cp	r24, r25
    1600:	20 f0       	brcs	.+8      	; 0x160a <prvAddNewTaskToReadyList+0x56>
    1602:	d0 93 14 0e 	sts	0x0E14, r29	; 0x800e14 <pxCurrentTCB+0x1>
    1606:	c0 93 13 0e 	sts	0x0E13, r28	; 0x800e13 <pxCurrentTCB>
    160a:	80 91 5b 0d 	lds	r24, 0x0D5B	; 0x800d5b <uxTaskNumber>
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	80 93 5b 0d 	sts	0x0D5B, r24	; 0x800d5b <uxTaskNumber>
    1614:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1616:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    161a:	8e 17       	cp	r24, r30
    161c:	10 f4       	brcc	.+4      	; 0x1622 <prvAddNewTaskToReadyList+0x6e>
    161e:	e0 93 63 0d 	sts	0x0D63, r30	; 0x800d63 <uxTopReadyPriority>
    1622:	8b e0       	ldi	r24, 0x0B	; 11
    1624:	8e 9f       	mul	r24, r30
    1626:	f0 01       	movw	r30, r0
    1628:	11 24       	eor	r1, r1
    162a:	eb 55       	subi	r30, 0x5B	; 91
    162c:	f2 4f       	sbci	r31, 0xF2	; 242
    162e:	01 80       	ldd	r0, Z+1	; 0x01
    1630:	f2 81       	ldd	r31, Z+2	; 0x02
    1632:	e0 2d       	mov	r30, r0
    1634:	ff 83       	std	Y+7, r31	; 0x07
    1636:	ee 83       	std	Y+6, r30	; 0x06
    1638:	26 81       	ldd	r18, Z+6	; 0x06
    163a:	37 81       	ldd	r19, Z+7	; 0x07
    163c:	39 87       	std	Y+9, r19	; 0x09
    163e:	28 87       	std	Y+8, r18	; 0x08
    1640:	a6 81       	ldd	r26, Z+6	; 0x06
    1642:	b7 81       	ldd	r27, Z+7	; 0x07
    1644:	9e 01       	movw	r18, r28
    1646:	2e 5f       	subi	r18, 0xFE	; 254
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	15 96       	adiw	r26, 0x05	; 5
    164c:	3c 93       	st	X, r19
    164e:	2e 93       	st	-X, r18
    1650:	14 97       	sbiw	r26, 0x04	; 4
    1652:	37 83       	std	Z+7, r19	; 0x07
    1654:	26 83       	std	Z+6, r18	; 0x06
    1656:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1658:	8e 9f       	mul	r24, r30
    165a:	f0 01       	movw	r30, r0
    165c:	11 24       	eor	r1, r1
    165e:	eb 55       	subi	r30, 0x5B	; 91
    1660:	f2 4f       	sbci	r31, 0xF2	; 242
    1662:	fd 87       	std	Y+13, r31	; 0x0d
    1664:	ec 87       	std	Y+12, r30	; 0x0c
    1666:	80 81       	ld	r24, Z
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	80 83       	st	Z, r24
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <xSchedulerRunning>
    1674:	88 23       	and	r24, r24
    1676:	49 f0       	breq	.+18     	; 0x168a <prvAddNewTaskToReadyList+0xd6>
    1678:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    167c:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1680:	92 8d       	ldd	r25, Z+26	; 0x1a
    1682:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1684:	98 17       	cp	r25, r24
    1686:	08 f4       	brcc	.+2      	; 0x168a <prvAddNewTaskToReadyList+0xd6>
    1688:	49 da       	rcall	.-2926   	; 0xb1c <vPortYield>
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <prvCheckTasksWaitingTermination>:
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	1a c0       	rjmp	.+52     	; 0x16ca <prvCheckTasksWaitingTermination+0x3a>
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	0f 92       	push	r0
    169c:	e0 91 7c 0d 	lds	r30, 0x0D7C	; 0x800d7c <xTasksWaitingTermination+0x7>
    16a0:	f0 91 7d 0d 	lds	r31, 0x0D7D	; 0x800d7d <xTasksWaitingTermination+0x8>
    16a4:	c0 85       	ldd	r28, Z+8	; 0x08
    16a6:	d1 85       	ldd	r29, Z+9	; 0x09
    16a8:	ce 01       	movw	r24, r28
    16aa:	02 96       	adiw	r24, 0x02	; 2
    16ac:	bb d9       	rcall	.-3210   	; 0xa24 <uxListRemove>
    16ae:	80 91 68 0d 	lds	r24, 0x0D68	; 0x800d68 <uxCurrentNumberOfTasks>
    16b2:	81 50       	subi	r24, 0x01	; 1
    16b4:	80 93 68 0d 	sts	0x0D68, r24	; 0x800d68 <uxCurrentNumberOfTasks>
    16b8:	80 91 74 0d 	lds	r24, 0x0D74	; 0x800d74 <uxDeletedTasksWaitingCleanUp>
    16bc:	81 50       	subi	r24, 0x01	; 1
    16be:	80 93 74 0d 	sts	0x0D74, r24	; 0x800d74 <uxDeletedTasksWaitingCleanUp>
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	ce 01       	movw	r24, r28
    16c8:	c5 de       	rcall	.-630    	; 0x1454 <prvDeleteTCB>
    16ca:	80 91 74 0d 	lds	r24, 0x0D74	; 0x800d74 <uxDeletedTasksWaitingCleanUp>
    16ce:	81 11       	cpse	r24, r1
    16d0:	e2 cf       	rjmp	.-60     	; 0x1696 <prvCheckTasksWaitingTermination+0x6>
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <prvAddCurrentTaskToDelayedList>:
    16d8:	8f 92       	push	r8
    16da:	9f 92       	push	r9
    16dc:	af 92       	push	r10
    16de:	bf 92       	push	r11
    16e0:	cf 92       	push	r12
    16e2:	df 92       	push	r13
    16e4:	ef 92       	push	r14
    16e6:	ff 92       	push	r15
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	6b 01       	movw	r12, r22
    16ee:	7c 01       	movw	r14, r24
    16f0:	c4 2f       	mov	r28, r20
    16f2:	80 90 64 0d 	lds	r8, 0x0D64	; 0x800d64 <xTickCount>
    16f6:	90 90 65 0d 	lds	r9, 0x0D65	; 0x800d65 <xTickCount+0x1>
    16fa:	a0 90 66 0d 	lds	r10, 0x0D66	; 0x800d66 <xTickCount+0x2>
    16fe:	b0 90 67 0d 	lds	r11, 0x0D67	; 0x800d67 <xTickCount+0x3>
    1702:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1706:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    170a:	02 96       	adiw	r24, 0x02	; 2
    170c:	8b d9       	rcall	.-3306   	; 0xa24 <uxListRemove>
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	c8 16       	cp	r12, r24
    1712:	d8 06       	cpc	r13, r24
    1714:	e8 06       	cpc	r14, r24
    1716:	f8 06       	cpc	r15, r24
    1718:	b1 f5       	brne	.+108    	; 0x1786 <prvAddCurrentTaskToDelayedList+0xae>
    171a:	cc 23       	and	r28, r28
    171c:	a1 f1       	breq	.+104    	; 0x1786 <prvAddCurrentTaskToDelayedList+0xae>
    171e:	e9 e6       	ldi	r30, 0x69	; 105
    1720:	fd e0       	ldi	r31, 0x0D	; 13
    1722:	a1 81       	ldd	r26, Z+1	; 0x01
    1724:	b2 81       	ldd	r27, Z+2	; 0x02
    1726:	c0 91 13 0e 	lds	r28, 0x0E13	; 0x800e13 <pxCurrentTCB>
    172a:	d0 91 14 0e 	lds	r29, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    172e:	bf 83       	std	Y+7, r27	; 0x07
    1730:	ae 83       	std	Y+6, r26	; 0x06
    1732:	c0 91 13 0e 	lds	r28, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1736:	d0 91 14 0e 	lds	r29, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    173a:	16 96       	adiw	r26, 0x06	; 6
    173c:	8d 91       	ld	r24, X+
    173e:	9c 91       	ld	r25, X
    1740:	17 97       	sbiw	r26, 0x07	; 7
    1742:	99 87       	std	Y+9, r25	; 0x09
    1744:	88 87       	std	Y+8, r24	; 0x08
    1746:	16 96       	adiw	r26, 0x06	; 6
    1748:	cd 91       	ld	r28, X+
    174a:	dc 91       	ld	r29, X
    174c:	17 97       	sbiw	r26, 0x07	; 7
    174e:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1752:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1756:	02 96       	adiw	r24, 0x02	; 2
    1758:	9d 83       	std	Y+5, r25	; 0x05
    175a:	8c 83       	std	Y+4, r24	; 0x04
    175c:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1760:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1764:	02 96       	adiw	r24, 0x02	; 2
    1766:	17 96       	adiw	r26, 0x07	; 7
    1768:	9c 93       	st	X, r25
    176a:	8e 93       	st	-X, r24
    176c:	16 97       	sbiw	r26, 0x06	; 6
    176e:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1772:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1776:	1d 96       	adiw	r26, 0x0d	; 13
    1778:	fc 93       	st	X, r31
    177a:	ee 93       	st	-X, r30
    177c:	1c 97       	sbiw	r26, 0x0c	; 12
    177e:	80 81       	ld	r24, Z
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	80 83       	st	Z, r24
    1784:	3d c0       	rjmp	.+122    	; 0x1800 <prvAddCurrentTaskToDelayedList+0x128>
    1786:	c8 0c       	add	r12, r8
    1788:	d9 1c       	adc	r13, r9
    178a:	ea 1c       	adc	r14, r10
    178c:	fb 1c       	adc	r15, r11
    178e:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1792:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1796:	c2 82       	std	Z+2, r12	; 0x02
    1798:	d3 82       	std	Z+3, r13	; 0x03
    179a:	e4 82       	std	Z+4, r14	; 0x04
    179c:	f5 82       	std	Z+5, r15	; 0x05
    179e:	c8 14       	cp	r12, r8
    17a0:	d9 04       	cpc	r13, r9
    17a2:	ea 04       	cpc	r14, r10
    17a4:	fb 04       	cpc	r15, r11
    17a6:	60 f4       	brcc	.+24     	; 0x17c0 <prvAddCurrentTaskToDelayedList+0xe8>
    17a8:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <pxCurrentTCB>
    17ac:	70 91 14 0e 	lds	r23, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    17b0:	80 91 8b 0d 	lds	r24, 0x0D8B	; 0x800d8b <pxOverflowDelayedTaskList>
    17b4:	90 91 8c 0d 	lds	r25, 0x0D8C	; 0x800d8c <pxOverflowDelayedTaskList+0x1>
    17b8:	6e 5f       	subi	r22, 0xFE	; 254
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	f6 d8       	rcall	.-3604   	; 0x9aa <vListInsert>
    17be:	20 c0       	rjmp	.+64     	; 0x1800 <prvAddCurrentTaskToDelayedList+0x128>
    17c0:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <pxCurrentTCB>
    17c4:	70 91 14 0e 	lds	r23, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    17c8:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <pxDelayedTaskList>
    17cc:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <pxDelayedTaskList+0x1>
    17d0:	6e 5f       	subi	r22, 0xFE	; 254
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	ea d8       	rcall	.-3628   	; 0x9aa <vListInsert>
    17d6:	80 91 57 0d 	lds	r24, 0x0D57	; 0x800d57 <xNextTaskUnblockTime>
    17da:	90 91 58 0d 	lds	r25, 0x0D58	; 0x800d58 <xNextTaskUnblockTime+0x1>
    17de:	a0 91 59 0d 	lds	r26, 0x0D59	; 0x800d59 <xNextTaskUnblockTime+0x2>
    17e2:	b0 91 5a 0d 	lds	r27, 0x0D5A	; 0x800d5a <xNextTaskUnblockTime+0x3>
    17e6:	c8 16       	cp	r12, r24
    17e8:	d9 06       	cpc	r13, r25
    17ea:	ea 06       	cpc	r14, r26
    17ec:	fb 06       	cpc	r15, r27
    17ee:	40 f4       	brcc	.+16     	; 0x1800 <prvAddCurrentTaskToDelayedList+0x128>
    17f0:	c0 92 57 0d 	sts	0x0D57, r12	; 0x800d57 <xNextTaskUnblockTime>
    17f4:	d0 92 58 0d 	sts	0x0D58, r13	; 0x800d58 <xNextTaskUnblockTime+0x1>
    17f8:	e0 92 59 0d 	sts	0x0D59, r14	; 0x800d59 <xNextTaskUnblockTime+0x2>
    17fc:	f0 92 5a 0d 	sts	0x0D5A, r15	; 0x800d5a <xNextTaskUnblockTime+0x3>
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	bf 90       	pop	r11
    180e:	af 90       	pop	r10
    1810:	9f 90       	pop	r9
    1812:	8f 90       	pop	r8
    1814:	08 95       	ret

00001816 <xTaskCreate>:
    1816:	2f 92       	push	r2
    1818:	3f 92       	push	r3
    181a:	4f 92       	push	r4
    181c:	5f 92       	push	r5
    181e:	6f 92       	push	r6
    1820:	7f 92       	push	r7
    1822:	8f 92       	push	r8
    1824:	9f 92       	push	r9
    1826:	af 92       	push	r10
    1828:	bf 92       	push	r11
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	3c 01       	movw	r6, r24
    183a:	1b 01       	movw	r2, r22
    183c:	4a 01       	movw	r8, r20
    183e:	29 01       	movw	r4, r18
    1840:	ca 01       	movw	r24, r20
    1842:	0e 94 db 03 	call	0x7b6	; 0x7b6 <pvPortMalloc>
    1846:	6c 01       	movw	r12, r24
    1848:	89 2b       	or	r24, r25
    184a:	69 f0       	breq	.+26     	; 0x1866 <xTaskCreate+0x50>
    184c:	84 e3       	ldi	r24, 0x34	; 52
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 db 03 	call	0x7b6	; 0x7b6 <pvPortMalloc>
    1854:	ec 01       	movw	r28, r24
    1856:	89 2b       	or	r24, r25
    1858:	19 f0       	breq	.+6      	; 0x1860 <xTaskCreate+0x4a>
    185a:	dc 8e       	std	Y+28, r13	; 0x1c
    185c:	cb 8e       	std	Y+27, r12	; 0x1b
    185e:	05 c0       	rjmp	.+10     	; 0x186a <xTaskCreate+0x54>
    1860:	c6 01       	movw	r24, r12
    1862:	52 d8       	rcall	.-3932   	; 0x908 <vPortFree>
    1864:	02 c0       	rjmp	.+4      	; 0x186a <xTaskCreate+0x54>
    1866:	c0 e0       	ldi	r28, 0x00	; 0
    1868:	d0 e0       	ldi	r29, 0x00	; 0
    186a:	20 97       	sbiw	r28, 0x00	; 0
    186c:	61 f0       	breq	.+24     	; 0x1886 <xTaskCreate+0x70>
    186e:	a1 2c       	mov	r10, r1
    1870:	b1 2c       	mov	r11, r1
    1872:	6e 01       	movw	r12, r28
    1874:	92 01       	movw	r18, r4
    1876:	a4 01       	movw	r20, r8
    1878:	b1 01       	movw	r22, r2
    187a:	c3 01       	movw	r24, r6
    187c:	f6 dd       	rcall	.-1044   	; 0x146a <prvInitialiseNewTask>
    187e:	ce 01       	movw	r24, r28
    1880:	99 de       	rcall	.-718    	; 0x15b4 <prvAddNewTaskToReadyList>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <xTaskCreate+0x72>
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	cf 90       	pop	r12
    1896:	bf 90       	pop	r11
    1898:	af 90       	pop	r10
    189a:	9f 90       	pop	r9
    189c:	8f 90       	pop	r8
    189e:	7f 90       	pop	r7
    18a0:	6f 90       	pop	r6
    18a2:	5f 90       	pop	r5
    18a4:	4f 90       	pop	r4
    18a6:	3f 90       	pop	r3
    18a8:	2f 90       	pop	r2
    18aa:	08 95       	ret

000018ac <vTaskStartScheduler>:
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	0f 2e       	mov	r0, r31
    18b4:	f5 e5       	ldi	r31, 0x55	; 85
    18b6:	ef 2e       	mov	r14, r31
    18b8:	fd e0       	ldi	r31, 0x0D	; 13
    18ba:	ff 2e       	mov	r15, r31
    18bc:	f0 2d       	mov	r31, r0
    18be:	00 e0       	ldi	r16, 0x00	; 0
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 ec       	ldi	r20, 0xC0	; 192
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	61 ea       	ldi	r22, 0xA1	; 161
    18ca:	72 e0       	ldi	r23, 0x02	; 2
    18cc:	8d ec       	ldi	r24, 0xCD	; 205
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a2 df       	rcall	.-188    	; 0x1816 <xTaskCreate>
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <vTaskStartScheduler+0x2c>
    18d6:	3f d7       	rcall	.+3710   	; 0x2756 <xTimerCreateTimerTask>
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	c1 f4       	brne	.+48     	; 0x190c <vTaskStartScheduler+0x60>
    18dc:	f8 94       	cli
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	9f ef       	ldi	r25, 0xFF	; 255
    18e2:	dc 01       	movw	r26, r24
    18e4:	80 93 57 0d 	sts	0x0D57, r24	; 0x800d57 <xNextTaskUnblockTime>
    18e8:	90 93 58 0d 	sts	0x0D58, r25	; 0x800d58 <xNextTaskUnblockTime+0x1>
    18ec:	a0 93 59 0d 	sts	0x0D59, r26	; 0x800d59 <xNextTaskUnblockTime+0x2>
    18f0:	b0 93 5a 0d 	sts	0x0D5A, r27	; 0x800d5a <xNextTaskUnblockTime+0x3>
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	80 93 62 0d 	sts	0x0D62, r24	; 0x800d62 <xSchedulerRunning>
    18fa:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <xTickCount>
    18fe:	10 92 65 0d 	sts	0x0D65, r1	; 0x800d65 <xTickCount+0x1>
    1902:	10 92 66 0d 	sts	0x0D66, r1	; 0x800d66 <xTickCount+0x2>
    1906:	10 92 67 0d 	sts	0x0D67, r1	; 0x800d67 <xTickCount+0x3>
    190a:	d6 d8       	rcall	.-3668   	; 0xab8 <xPortStartScheduler>
    190c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1910:	0f 91       	pop	r16
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	08 95       	ret

00001918 <vTaskSuspendAll>:
    1918:	80 91 54 0d 	lds	r24, 0x0D54	; 0x800d54 <uxSchedulerSuspended>
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	80 93 54 0d 	sts	0x0D54, r24	; 0x800d54 <uxSchedulerSuspended>
    1922:	08 95       	ret

00001924 <xTaskGetTickCount>:
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	0f 92       	push	r0
    192a:	60 91 64 0d 	lds	r22, 0x0D64	; 0x800d64 <xTickCount>
    192e:	70 91 65 0d 	lds	r23, 0x0D65	; 0x800d65 <xTickCount+0x1>
    1932:	80 91 66 0d 	lds	r24, 0x0D66	; 0x800d66 <xTickCount+0x2>
    1936:	90 91 67 0d 	lds	r25, 0x0D67	; 0x800d67 <xTickCount+0x3>
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	08 95       	ret

00001940 <xTaskIncrementTick>:
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	80 91 54 0d 	lds	r24, 0x0D54	; 0x800d54 <uxSchedulerSuspended>
    1950:	81 11       	cpse	r24, r1
    1952:	05 c1       	rjmp	.+522    	; 0x1b5e <xTaskIncrementTick+0x21e>
    1954:	c0 90 64 0d 	lds	r12, 0x0D64	; 0x800d64 <xTickCount>
    1958:	d0 90 65 0d 	lds	r13, 0x0D65	; 0x800d65 <xTickCount+0x1>
    195c:	e0 90 66 0d 	lds	r14, 0x0D66	; 0x800d66 <xTickCount+0x2>
    1960:	f0 90 67 0d 	lds	r15, 0x0D67	; 0x800d67 <xTickCount+0x3>
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	c8 1a       	sub	r12, r24
    1968:	d8 0a       	sbc	r13, r24
    196a:	e8 0a       	sbc	r14, r24
    196c:	f8 0a       	sbc	r15, r24
    196e:	c0 92 64 0d 	sts	0x0D64, r12	; 0x800d64 <xTickCount>
    1972:	d0 92 65 0d 	sts	0x0D65, r13	; 0x800d65 <xTickCount+0x1>
    1976:	e0 92 66 0d 	sts	0x0D66, r14	; 0x800d66 <xTickCount+0x2>
    197a:	f0 92 67 0d 	sts	0x0D67, r15	; 0x800d67 <xTickCount+0x3>
    197e:	c1 14       	cp	r12, r1
    1980:	d1 04       	cpc	r13, r1
    1982:	e1 04       	cpc	r14, r1
    1984:	f1 04       	cpc	r15, r1
    1986:	b1 f4       	brne	.+44     	; 0x19b4 <xTaskIncrementTick+0x74>
    1988:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <pxDelayedTaskList>
    198c:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <pxDelayedTaskList+0x1>
    1990:	20 91 8b 0d 	lds	r18, 0x0D8B	; 0x800d8b <pxOverflowDelayedTaskList>
    1994:	30 91 8c 0d 	lds	r19, 0x0D8C	; 0x800d8c <pxOverflowDelayedTaskList+0x1>
    1998:	30 93 8e 0d 	sts	0x0D8E, r19	; 0x800d8e <pxDelayedTaskList+0x1>
    199c:	20 93 8d 0d 	sts	0x0D8D, r18	; 0x800d8d <pxDelayedTaskList>
    19a0:	90 93 8c 0d 	sts	0x0D8C, r25	; 0x800d8c <pxOverflowDelayedTaskList+0x1>
    19a4:	80 93 8b 0d 	sts	0x0D8B, r24	; 0x800d8b <pxOverflowDelayedTaskList>
    19a8:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <xNumOfOverflows>
    19ac:	8f 5f       	subi	r24, 0xFF	; 255
    19ae:	80 93 5c 0d 	sts	0x0D5C, r24	; 0x800d5c <xNumOfOverflows>
    19b2:	29 dd       	rcall	.-1454   	; 0x1406 <prvResetNextTaskUnblockTime>
    19b4:	80 91 57 0d 	lds	r24, 0x0D57	; 0x800d57 <xNextTaskUnblockTime>
    19b8:	90 91 58 0d 	lds	r25, 0x0D58	; 0x800d58 <xNextTaskUnblockTime+0x1>
    19bc:	a0 91 59 0d 	lds	r26, 0x0D59	; 0x800d59 <xNextTaskUnblockTime+0x2>
    19c0:	b0 91 5a 0d 	lds	r27, 0x0D5A	; 0x800d5a <xNextTaskUnblockTime+0x3>
    19c4:	c8 16       	cp	r12, r24
    19c6:	d9 06       	cpc	r13, r25
    19c8:	ea 06       	cpc	r14, r26
    19ca:	fb 06       	cpc	r15, r27
    19cc:	20 f4       	brcc	.+8      	; 0x19d6 <xTaskIncrementTick+0x96>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	b2 c0       	rjmp	.+356    	; 0x1b36 <xTaskIncrementTick+0x1f6>
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <xTaskIncrementTick+0x98>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxDelayedTaskList>
    19dc:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxDelayedTaskList+0x1>
    19e0:	90 81       	ld	r25, Z
    19e2:	91 11       	cpse	r25, r1
    19e4:	0c c0       	rjmp	.+24     	; 0x19fe <xTaskIncrementTick+0xbe>
    19e6:	4f ef       	ldi	r20, 0xFF	; 255
    19e8:	5f ef       	ldi	r21, 0xFF	; 255
    19ea:	ba 01       	movw	r22, r20
    19ec:	40 93 57 0d 	sts	0x0D57, r20	; 0x800d57 <xNextTaskUnblockTime>
    19f0:	50 93 58 0d 	sts	0x0D58, r21	; 0x800d58 <xNextTaskUnblockTime+0x1>
    19f4:	60 93 59 0d 	sts	0x0D59, r22	; 0x800d59 <xNextTaskUnblockTime+0x2>
    19f8:	70 93 5a 0d 	sts	0x0D5A, r23	; 0x800d5a <xNextTaskUnblockTime+0x3>
    19fc:	9c c0       	rjmp	.+312    	; 0x1b36 <xTaskIncrementTick+0x1f6>
    19fe:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxDelayedTaskList>
    1a02:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxDelayedTaskList+0x1>
    1a06:	07 80       	ldd	r0, Z+7	; 0x07
    1a08:	f0 85       	ldd	r31, Z+8	; 0x08
    1a0a:	e0 2d       	mov	r30, r0
    1a0c:	00 84       	ldd	r0, Z+8	; 0x08
    1a0e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a10:	e0 2d       	mov	r30, r0
    1a12:	42 81       	ldd	r20, Z+2	; 0x02
    1a14:	53 81       	ldd	r21, Z+3	; 0x03
    1a16:	64 81       	ldd	r22, Z+4	; 0x04
    1a18:	75 81       	ldd	r23, Z+5	; 0x05
    1a1a:	c4 16       	cp	r12, r20
    1a1c:	d5 06       	cpc	r13, r21
    1a1e:	e6 06       	cpc	r14, r22
    1a20:	f7 06       	cpc	r15, r23
    1a22:	48 f4       	brcc	.+18     	; 0x1a36 <xTaskIncrementTick+0xf6>
    1a24:	40 93 57 0d 	sts	0x0D57, r20	; 0x800d57 <xNextTaskUnblockTime>
    1a28:	50 93 58 0d 	sts	0x0D58, r21	; 0x800d58 <xNextTaskUnblockTime+0x1>
    1a2c:	60 93 59 0d 	sts	0x0D59, r22	; 0x800d59 <xNextTaskUnblockTime+0x2>
    1a30:	70 93 5a 0d 	sts	0x0D5A, r23	; 0x800d5a <xNextTaskUnblockTime+0x3>
    1a34:	80 c0       	rjmp	.+256    	; 0x1b36 <xTaskIncrementTick+0x1f6>
    1a36:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a38:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a3a:	c6 81       	ldd	r28, Z+6	; 0x06
    1a3c:	d7 81       	ldd	r29, Z+7	; 0x07
    1a3e:	20 85       	ldd	r18, Z+8	; 0x08
    1a40:	31 85       	ldd	r19, Z+9	; 0x09
    1a42:	3f 83       	std	Y+7, r19	; 0x07
    1a44:	2e 83       	std	Y+6, r18	; 0x06
    1a46:	c0 85       	ldd	r28, Z+8	; 0x08
    1a48:	d1 85       	ldd	r29, Z+9	; 0x09
    1a4a:	26 81       	ldd	r18, Z+6	; 0x06
    1a4c:	37 81       	ldd	r19, Z+7	; 0x07
    1a4e:	3d 83       	std	Y+5, r19	; 0x05
    1a50:	2c 83       	std	Y+4, r18	; 0x04
    1a52:	11 96       	adiw	r26, 0x01	; 1
    1a54:	4d 91       	ld	r20, X+
    1a56:	5c 91       	ld	r21, X
    1a58:	12 97       	sbiw	r26, 0x02	; 2
    1a5a:	9f 01       	movw	r18, r30
    1a5c:	2e 5f       	subi	r18, 0xFE	; 254
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	42 17       	cp	r20, r18
    1a62:	53 07       	cpc	r21, r19
    1a64:	31 f4       	brne	.+12     	; 0x1a72 <xTaskIncrementTick+0x132>
    1a66:	40 85       	ldd	r20, Z+8	; 0x08
    1a68:	51 85       	ldd	r21, Z+9	; 0x09
    1a6a:	12 96       	adiw	r26, 0x02	; 2
    1a6c:	5c 93       	st	X, r21
    1a6e:	4e 93       	st	-X, r20
    1a70:	11 97       	sbiw	r26, 0x01	; 1
    1a72:	15 86       	std	Z+13, r1	; 0x0d
    1a74:	14 86       	std	Z+12, r1	; 0x0c
    1a76:	9c 91       	ld	r25, X
    1a78:	91 50       	subi	r25, 0x01	; 1
    1a7a:	9c 93       	st	X, r25
    1a7c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a7e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a80:	10 97       	sbiw	r26, 0x00	; 0
    1a82:	09 f1       	breq	.+66     	; 0x1ac6 <xTaskIncrementTick+0x186>
    1a84:	c2 89       	ldd	r28, Z+18	; 0x12
    1a86:	d3 89       	ldd	r29, Z+19	; 0x13
    1a88:	44 89       	ldd	r20, Z+20	; 0x14
    1a8a:	55 89       	ldd	r21, Z+21	; 0x15
    1a8c:	5f 83       	std	Y+7, r21	; 0x07
    1a8e:	4e 83       	std	Y+6, r20	; 0x06
    1a90:	c4 89       	ldd	r28, Z+20	; 0x14
    1a92:	d5 89       	ldd	r29, Z+21	; 0x15
    1a94:	42 89       	ldd	r20, Z+18	; 0x12
    1a96:	53 89       	ldd	r21, Z+19	; 0x13
    1a98:	5d 83       	std	Y+5, r21	; 0x05
    1a9a:	4c 83       	std	Y+4, r20	; 0x04
    1a9c:	11 96       	adiw	r26, 0x01	; 1
    1a9e:	6d 91       	ld	r22, X+
    1aa0:	7c 91       	ld	r23, X
    1aa2:	12 97       	sbiw	r26, 0x02	; 2
    1aa4:	af 01       	movw	r20, r30
    1aa6:	42 5f       	subi	r20, 0xF2	; 242
    1aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aaa:	64 17       	cp	r22, r20
    1aac:	75 07       	cpc	r23, r21
    1aae:	31 f4       	brne	.+12     	; 0x1abc <xTaskIncrementTick+0x17c>
    1ab0:	44 89       	ldd	r20, Z+20	; 0x14
    1ab2:	55 89       	ldd	r21, Z+21	; 0x15
    1ab4:	12 96       	adiw	r26, 0x02	; 2
    1ab6:	5c 93       	st	X, r21
    1ab8:	4e 93       	st	-X, r20
    1aba:	11 97       	sbiw	r26, 0x01	; 1
    1abc:	11 8e       	std	Z+25, r1	; 0x19
    1abe:	10 8e       	std	Z+24, r1	; 0x18
    1ac0:	9c 91       	ld	r25, X
    1ac2:	91 50       	subi	r25, 0x01	; 1
    1ac4:	9c 93       	st	X, r25
    1ac6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ac8:	90 91 63 0d 	lds	r25, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    1acc:	9a 17       	cp	r25, r26
    1ace:	10 f4       	brcc	.+4      	; 0x1ad4 <xTaskIncrementTick+0x194>
    1ad0:	a0 93 63 0d 	sts	0x0D63, r26	; 0x800d63 <uxTopReadyPriority>
    1ad4:	9b e0       	ldi	r25, 0x0B	; 11
    1ad6:	9a 9f       	mul	r25, r26
    1ad8:	d0 01       	movw	r26, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	ab 55       	subi	r26, 0x5B	; 91
    1ade:	b2 4f       	sbci	r27, 0xF2	; 242
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	0d 90       	ld	r0, X+
    1ae4:	bc 91       	ld	r27, X
    1ae6:	a0 2d       	mov	r26, r0
    1ae8:	b7 83       	std	Z+7, r27	; 0x07
    1aea:	a6 83       	std	Z+6, r26	; 0x06
    1aec:	16 96       	adiw	r26, 0x06	; 6
    1aee:	4d 91       	ld	r20, X+
    1af0:	5c 91       	ld	r21, X
    1af2:	17 97       	sbiw	r26, 0x07	; 7
    1af4:	51 87       	std	Z+9, r21	; 0x09
    1af6:	40 87       	std	Z+8, r20	; 0x08
    1af8:	16 96       	adiw	r26, 0x06	; 6
    1afa:	cd 91       	ld	r28, X+
    1afc:	dc 91       	ld	r29, X
    1afe:	17 97       	sbiw	r26, 0x07	; 7
    1b00:	3d 83       	std	Y+5, r19	; 0x05
    1b02:	2c 83       	std	Y+4, r18	; 0x04
    1b04:	17 96       	adiw	r26, 0x07	; 7
    1b06:	3c 93       	st	X, r19
    1b08:	2e 93       	st	-X, r18
    1b0a:	16 97       	sbiw	r26, 0x06	; 6
    1b0c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b0e:	9a 9f       	mul	r25, r26
    1b10:	d0 01       	movw	r26, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	ab 55       	subi	r26, 0x5B	; 91
    1b16:	b2 4f       	sbci	r27, 0xF2	; 242
    1b18:	b5 87       	std	Z+13, r27	; 0x0d
    1b1a:	a4 87       	std	Z+12, r26	; 0x0c
    1b1c:	9c 91       	ld	r25, X
    1b1e:	9f 5f       	subi	r25, 0xFF	; 255
    1b20:	9c 93       	st	X, r25
    1b22:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b24:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1b28:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1b2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b2e:	29 17       	cp	r18, r25
    1b30:	08 f0       	brcs	.+2      	; 0x1b34 <xTaskIncrementTick+0x1f4>
    1b32:	4f cf       	rjmp	.-354    	; 0x19d2 <xTaskIncrementTick+0x92>
    1b34:	51 cf       	rjmp	.-350    	; 0x19d8 <xTaskIncrementTick+0x98>
    1b36:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1b3a:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1b3e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b40:	9b e0       	ldi	r25, 0x0B	; 11
    1b42:	e9 9f       	mul	r30, r25
    1b44:	f0 01       	movw	r30, r0
    1b46:	11 24       	eor	r1, r1
    1b48:	eb 55       	subi	r30, 0x5B	; 91
    1b4a:	f2 4f       	sbci	r31, 0xF2	; 242
    1b4c:	90 81       	ld	r25, Z
    1b4e:	92 30       	cpi	r25, 0x02	; 2
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <xTaskIncrementTick+0x214>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 91 5d 0d 	lds	r25, 0x0D5D	; 0x800d5d <xYieldPending>
    1b58:	91 11       	cpse	r25, r1
    1b5a:	16 c0       	rjmp	.+44     	; 0x1b88 <xTaskIncrementTick+0x248>
    1b5c:	16 c0       	rjmp	.+44     	; 0x1b8a <xTaskIncrementTick+0x24a>
    1b5e:	80 91 5e 0d 	lds	r24, 0x0D5E	; 0x800d5e <xPendedTicks>
    1b62:	90 91 5f 0d 	lds	r25, 0x0D5F	; 0x800d5f <xPendedTicks+0x1>
    1b66:	a0 91 60 0d 	lds	r26, 0x0D60	; 0x800d60 <xPendedTicks+0x2>
    1b6a:	b0 91 61 0d 	lds	r27, 0x0D61	; 0x800d61 <xPendedTicks+0x3>
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	a1 1d       	adc	r26, r1
    1b72:	b1 1d       	adc	r27, r1
    1b74:	80 93 5e 0d 	sts	0x0D5E, r24	; 0x800d5e <xPendedTicks>
    1b78:	90 93 5f 0d 	sts	0x0D5F, r25	; 0x800d5f <xPendedTicks+0x1>
    1b7c:	a0 93 60 0d 	sts	0x0D60, r26	; 0x800d60 <xPendedTicks+0x2>
    1b80:	b0 93 61 0d 	sts	0x0D61, r27	; 0x800d61 <xPendedTicks+0x3>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <xTaskIncrementTick+0x24a>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	08 95       	ret

00001b98 <xTaskResumeAll>:
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	0f 92       	push	r0
    1baa:	80 91 54 0d 	lds	r24, 0x0D54	; 0x800d54 <uxSchedulerSuspended>
    1bae:	81 50       	subi	r24, 0x01	; 1
    1bb0:	80 93 54 0d 	sts	0x0D54, r24	; 0x800d54 <uxSchedulerSuspended>
    1bb4:	80 91 54 0d 	lds	r24, 0x0D54	; 0x800d54 <uxSchedulerSuspended>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	be c0       	rjmp	.+380    	; 0x1d38 <xTaskResumeAll+0x1a0>
    1bbc:	80 91 68 0d 	lds	r24, 0x0D68	; 0x800d68 <uxCurrentNumberOfTasks>
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	88 c0       	rjmp	.+272    	; 0x1cd4 <xTaskResumeAll+0x13c>
    1bc4:	bc c0       	rjmp	.+376    	; 0x1d3e <xTaskResumeAll+0x1a6>
    1bc6:	e0 91 87 0d 	lds	r30, 0x0D87	; 0x800d87 <xPendingReadyList+0x7>
    1bca:	f0 91 88 0d 	lds	r31, 0x0D88	; 0x800d88 <xPendingReadyList+0x8>
    1bce:	00 84       	ldd	r0, Z+8	; 0x08
    1bd0:	f1 85       	ldd	r31, Z+9	; 0x09
    1bd2:	e0 2d       	mov	r30, r0
    1bd4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1bd6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1bd8:	c2 89       	ldd	r28, Z+18	; 0x12
    1bda:	d3 89       	ldd	r29, Z+19	; 0x13
    1bdc:	84 89       	ldd	r24, Z+20	; 0x14
    1bde:	95 89       	ldd	r25, Z+21	; 0x15
    1be0:	9f 83       	std	Y+7, r25	; 0x07
    1be2:	8e 83       	std	Y+6, r24	; 0x06
    1be4:	c4 89       	ldd	r28, Z+20	; 0x14
    1be6:	d5 89       	ldd	r29, Z+21	; 0x15
    1be8:	82 89       	ldd	r24, Z+18	; 0x12
    1bea:	93 89       	ldd	r25, Z+19	; 0x13
    1bec:	9d 83       	std	Y+5, r25	; 0x05
    1bee:	8c 83       	std	Y+4, r24	; 0x04
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	2d 91       	ld	r18, X+
    1bf4:	3c 91       	ld	r19, X
    1bf6:	12 97       	sbiw	r26, 0x02	; 2
    1bf8:	cf 01       	movw	r24, r30
    1bfa:	0e 96       	adiw	r24, 0x0e	; 14
    1bfc:	28 17       	cp	r18, r24
    1bfe:	39 07       	cpc	r19, r25
    1c00:	31 f4       	brne	.+12     	; 0x1c0e <xTaskResumeAll+0x76>
    1c02:	84 89       	ldd	r24, Z+20	; 0x14
    1c04:	95 89       	ldd	r25, Z+21	; 0x15
    1c06:	12 96       	adiw	r26, 0x02	; 2
    1c08:	9c 93       	st	X, r25
    1c0a:	8e 93       	st	-X, r24
    1c0c:	11 97       	sbiw	r26, 0x01	; 1
    1c0e:	11 8e       	std	Z+25, r1	; 0x19
    1c10:	10 8e       	std	Z+24, r1	; 0x18
    1c12:	8c 91       	ld	r24, X
    1c14:	81 50       	subi	r24, 0x01	; 1
    1c16:	8c 93       	st	X, r24
    1c18:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c1a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c1c:	c6 81       	ldd	r28, Z+6	; 0x06
    1c1e:	d7 81       	ldd	r29, Z+7	; 0x07
    1c20:	80 85       	ldd	r24, Z+8	; 0x08
    1c22:	91 85       	ldd	r25, Z+9	; 0x09
    1c24:	9f 83       	std	Y+7, r25	; 0x07
    1c26:	8e 83       	std	Y+6, r24	; 0x06
    1c28:	c0 85       	ldd	r28, Z+8	; 0x08
    1c2a:	d1 85       	ldd	r29, Z+9	; 0x09
    1c2c:	86 81       	ldd	r24, Z+6	; 0x06
    1c2e:	97 81       	ldd	r25, Z+7	; 0x07
    1c30:	9d 83       	std	Y+5, r25	; 0x05
    1c32:	8c 83       	std	Y+4, r24	; 0x04
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	8d 91       	ld	r24, X+
    1c38:	9c 91       	ld	r25, X
    1c3a:	12 97       	sbiw	r26, 0x02	; 2
    1c3c:	9f 01       	movw	r18, r30
    1c3e:	2e 5f       	subi	r18, 0xFE	; 254
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	82 17       	cp	r24, r18
    1c44:	93 07       	cpc	r25, r19
    1c46:	31 f4       	brne	.+12     	; 0x1c54 <xTaskResumeAll+0xbc>
    1c48:	80 85       	ldd	r24, Z+8	; 0x08
    1c4a:	91 85       	ldd	r25, Z+9	; 0x09
    1c4c:	12 96       	adiw	r26, 0x02	; 2
    1c4e:	9c 93       	st	X, r25
    1c50:	8e 93       	st	-X, r24
    1c52:	11 97       	sbiw	r26, 0x01	; 1
    1c54:	15 86       	std	Z+13, r1	; 0x0d
    1c56:	14 86       	std	Z+12, r1	; 0x0c
    1c58:	8c 91       	ld	r24, X
    1c5a:	81 50       	subi	r24, 0x01	; 1
    1c5c:	8c 93       	st	X, r24
    1c5e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c60:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    1c64:	8a 17       	cp	r24, r26
    1c66:	10 f4       	brcc	.+4      	; 0x1c6c <xTaskResumeAll+0xd4>
    1c68:	a0 93 63 0d 	sts	0x0D63, r26	; 0x800d63 <uxTopReadyPriority>
    1c6c:	8b e0       	ldi	r24, 0x0B	; 11
    1c6e:	8a 9f       	mul	r24, r26
    1c70:	d0 01       	movw	r26, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	ab 55       	subi	r26, 0x5B	; 91
    1c76:	b2 4f       	sbci	r27, 0xF2	; 242
    1c78:	11 96       	adiw	r26, 0x01	; 1
    1c7a:	0d 90       	ld	r0, X+
    1c7c:	bc 91       	ld	r27, X
    1c7e:	a0 2d       	mov	r26, r0
    1c80:	b7 83       	std	Z+7, r27	; 0x07
    1c82:	a6 83       	std	Z+6, r26	; 0x06
    1c84:	16 96       	adiw	r26, 0x06	; 6
    1c86:	4d 91       	ld	r20, X+
    1c88:	5c 91       	ld	r21, X
    1c8a:	17 97       	sbiw	r26, 0x07	; 7
    1c8c:	51 87       	std	Z+9, r21	; 0x09
    1c8e:	40 87       	std	Z+8, r20	; 0x08
    1c90:	16 96       	adiw	r26, 0x06	; 6
    1c92:	cd 91       	ld	r28, X+
    1c94:	dc 91       	ld	r29, X
    1c96:	17 97       	sbiw	r26, 0x07	; 7
    1c98:	3d 83       	std	Y+5, r19	; 0x05
    1c9a:	2c 83       	std	Y+4, r18	; 0x04
    1c9c:	17 96       	adiw	r26, 0x07	; 7
    1c9e:	3c 93       	st	X, r19
    1ca0:	2e 93       	st	-X, r18
    1ca2:	16 97       	sbiw	r26, 0x06	; 6
    1ca4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ca6:	8a 9f       	mul	r24, r26
    1ca8:	d0 01       	movw	r26, r0
    1caa:	11 24       	eor	r1, r1
    1cac:	ab 55       	subi	r26, 0x5B	; 91
    1cae:	b2 4f       	sbci	r27, 0xF2	; 242
    1cb0:	b5 87       	std	Z+13, r27	; 0x0d
    1cb2:	a4 87       	std	Z+12, r26	; 0x0c
    1cb4:	8c 91       	ld	r24, X
    1cb6:	8f 5f       	subi	r24, 0xFF	; 255
    1cb8:	8c 93       	st	X, r24
    1cba:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cbc:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1cc0:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1cc4:	5a 96       	adiw	r26, 0x1a	; 26
    1cc6:	8c 91       	ld	r24, X
    1cc8:	98 17       	cp	r25, r24
    1cca:	30 f0       	brcs	.+12     	; 0x1cd8 <xTaskResumeAll+0x140>
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <xYieldPending>
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <xTaskResumeAll+0x140>
    1cd4:	e0 e0       	ldi	r30, 0x00	; 0
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 91 80 0d 	lds	r24, 0x0D80	; 0x800d80 <xPendingReadyList>
    1cdc:	81 11       	cpse	r24, r1
    1cde:	73 cf       	rjmp	.-282    	; 0x1bc6 <xTaskResumeAll+0x2e>
    1ce0:	ef 2b       	or	r30, r31
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <xTaskResumeAll+0x14e>
    1ce4:	90 db       	rcall	.-2272   	; 0x1406 <prvResetNextTaskUnblockTime>
    1ce6:	c0 90 5e 0d 	lds	r12, 0x0D5E	; 0x800d5e <xPendedTicks>
    1cea:	d0 90 5f 0d 	lds	r13, 0x0D5F	; 0x800d5f <xPendedTicks+0x1>
    1cee:	e0 90 60 0d 	lds	r14, 0x0D60	; 0x800d60 <xPendedTicks+0x2>
    1cf2:	f0 90 61 0d 	lds	r15, 0x0D61	; 0x800d61 <xPendedTicks+0x3>
    1cf6:	c1 14       	cp	r12, r1
    1cf8:	d1 04       	cpc	r13, r1
    1cfa:	e1 04       	cpc	r14, r1
    1cfc:	f1 04       	cpc	r15, r1
    1cfe:	a1 f0       	breq	.+40     	; 0x1d28 <xTaskResumeAll+0x190>
    1d00:	1f de       	rcall	.-962    	; 0x1940 <xTaskIncrementTick>
    1d02:	88 23       	and	r24, r24
    1d04:	19 f0       	breq	.+6      	; 0x1d0c <xTaskResumeAll+0x174>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <xYieldPending>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	c8 1a       	sub	r12, r24
    1d10:	d1 08       	sbc	r13, r1
    1d12:	e1 08       	sbc	r14, r1
    1d14:	f1 08       	sbc	r15, r1
    1d16:	a1 f7       	brne	.-24     	; 0x1d00 <xTaskResumeAll+0x168>
    1d18:	10 92 5e 0d 	sts	0x0D5E, r1	; 0x800d5e <xPendedTicks>
    1d1c:	10 92 5f 0d 	sts	0x0D5F, r1	; 0x800d5f <xPendedTicks+0x1>
    1d20:	10 92 60 0d 	sts	0x0D60, r1	; 0x800d60 <xPendedTicks+0x2>
    1d24:	10 92 61 0d 	sts	0x0D61, r1	; 0x800d61 <xPendedTicks+0x3>
    1d28:	80 91 5d 0d 	lds	r24, 0x0D5D	; 0x800d5d <xYieldPending>
    1d2c:	88 23       	and	r24, r24
    1d2e:	31 f0       	breq	.+12     	; 0x1d3c <xTaskResumeAll+0x1a4>
    1d30:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <xTaskResumeAll+0x1a6>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <xTaskResumeAll+0x1a6>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	08 95       	ret

00001d50 <vTaskDelay>:
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	6b 01       	movw	r12, r22
    1d5a:	7c 01       	movw	r14, r24
    1d5c:	67 2b       	or	r22, r23
    1d5e:	68 2b       	or	r22, r24
    1d60:	69 2b       	or	r22, r25
    1d62:	39 f0       	breq	.+14     	; 0x1d72 <vTaskDelay+0x22>
    1d64:	d9 dd       	rcall	.-1102   	; 0x1918 <vTaskSuspendAll>
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	c7 01       	movw	r24, r14
    1d6a:	b6 01       	movw	r22, r12
    1d6c:	b5 dc       	rcall	.-1686   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    1d6e:	14 df       	rcall	.-472    	; 0x1b98 <xTaskResumeAll>
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <vTaskDelay+0x24>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	81 11       	cpse	r24, r1
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <vTaskDelay+0x2c>
    1d78:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	08 95       	ret

00001d86 <vTaskSwitchContext>:
    1d86:	80 91 54 0d 	lds	r24, 0x0D54	; 0x800d54 <uxSchedulerSuspended>
    1d8a:	88 23       	and	r24, r24
    1d8c:	21 f0       	breq	.+8      	; 0x1d96 <vTaskSwitchContext+0x10>
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <xYieldPending>
    1d94:	08 95       	ret
    1d96:	10 92 5d 0d 	sts	0x0D5D, r1	; 0x800d5d <xYieldPending>
    1d9a:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1d9e:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1da2:	20 81       	ld	r18, Z
    1da4:	31 81       	ldd	r19, Z+1	; 0x01
    1da6:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1daa:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1dae:	83 8d       	ldd	r24, Z+27	; 0x1b
    1db0:	94 8d       	ldd	r25, Z+28	; 0x1c
    1db2:	82 17       	cp	r24, r18
    1db4:	93 07       	cpc	r25, r19
    1db6:	58 f0       	brcs	.+22     	; 0x1dce <vTaskSwitchContext+0x48>
    1db8:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1dbc:	70 91 14 0e 	lds	r23, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1dc0:	63 5e       	subi	r22, 0xE3	; 227
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1dc8:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1dcc:	4e d7       	rcall	.+3740   	; 0x2c6a <vApplicationStackOverflowHook>
    1dce:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <vTaskSwitchContext+0x50>
    1dd4:	81 50       	subi	r24, 0x01	; 1
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	9b e0       	ldi	r25, 0x0B	; 11
    1ddc:	92 9f       	mul	r25, r18
    1dde:	f0 01       	movw	r30, r0
    1de0:	93 9f       	mul	r25, r19
    1de2:	f0 0d       	add	r31, r0
    1de4:	11 24       	eor	r1, r1
    1de6:	eb 55       	subi	r30, 0x5B	; 91
    1de8:	f2 4f       	sbci	r31, 0xF2	; 242
    1dea:	90 81       	ld	r25, Z
    1dec:	99 23       	and	r25, r25
    1dee:	91 f3       	breq	.-28     	; 0x1dd4 <vTaskSwitchContext+0x4e>
    1df0:	9b e0       	ldi	r25, 0x0B	; 11
    1df2:	92 9f       	mul	r25, r18
    1df4:	a0 01       	movw	r20, r0
    1df6:	93 9f       	mul	r25, r19
    1df8:	50 0d       	add	r21, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	df 01       	movw	r26, r30
    1dfe:	01 80       	ldd	r0, Z+1	; 0x01
    1e00:	f2 81       	ldd	r31, Z+2	; 0x02
    1e02:	e0 2d       	mov	r30, r0
    1e04:	04 80       	ldd	r0, Z+4	; 0x04
    1e06:	f5 81       	ldd	r31, Z+5	; 0x05
    1e08:	e0 2d       	mov	r30, r0
    1e0a:	12 96       	adiw	r26, 0x02	; 2
    1e0c:	fc 93       	st	X, r31
    1e0e:	ee 93       	st	-X, r30
    1e10:	11 97       	sbiw	r26, 0x01	; 1
    1e12:	48 55       	subi	r20, 0x58	; 88
    1e14:	52 4f       	sbci	r21, 0xF2	; 242
    1e16:	e4 17       	cp	r30, r20
    1e18:	f5 07       	cpc	r31, r21
    1e1a:	29 f4       	brne	.+10     	; 0x1e26 <vTaskSwitchContext+0xa0>
    1e1c:	44 81       	ldd	r20, Z+4	; 0x04
    1e1e:	55 81       	ldd	r21, Z+5	; 0x05
    1e20:	fd 01       	movw	r30, r26
    1e22:	52 83       	std	Z+2, r21	; 0x02
    1e24:	41 83       	std	Z+1, r20	; 0x01
    1e26:	9b e0       	ldi	r25, 0x0B	; 11
    1e28:	92 9f       	mul	r25, r18
    1e2a:	f0 01       	movw	r30, r0
    1e2c:	93 9f       	mul	r25, r19
    1e2e:	f0 0d       	add	r31, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	eb 55       	subi	r30, 0x5B	; 91
    1e34:	f2 4f       	sbci	r31, 0xF2	; 242
    1e36:	01 80       	ldd	r0, Z+1	; 0x01
    1e38:	f2 81       	ldd	r31, Z+2	; 0x02
    1e3a:	e0 2d       	mov	r30, r0
    1e3c:	20 85       	ldd	r18, Z+8	; 0x08
    1e3e:	31 85       	ldd	r19, Z+9	; 0x09
    1e40:	30 93 14 0e 	sts	0x0E14, r19	; 0x800e14 <pxCurrentTCB+0x1>
    1e44:	20 93 13 0e 	sts	0x0E13, r18	; 0x800e13 <pxCurrentTCB>
    1e48:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <uxTopReadyPriority>
    1e4c:	08 95       	ret

00001e4e <vTaskPlaceOnEventList>:
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	6a 01       	movw	r12, r20
    1e58:	7b 01       	movw	r14, r22
    1e5a:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1e5e:	70 91 14 0e 	lds	r23, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1e62:	62 5f       	subi	r22, 0xF2	; 242
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	0e 94 d5 04 	call	0x9aa	; 0x9aa <vListInsert>
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	c7 01       	movw	r24, r14
    1e6e:	b6 01       	movw	r22, r12
    1e70:	33 dc       	rcall	.-1946   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	df 90       	pop	r13
    1e78:	cf 90       	pop	r12
    1e7a:	08 95       	ret

00001e7c <vTaskPlaceOnUnorderedEventList>:
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	fc 01       	movw	r30, r24
    1e86:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1e8a:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1e8e:	70 68       	ori	r23, 0x80	; 128
    1e90:	1e 96       	adiw	r26, 0x0e	; 14
    1e92:	4d 93       	st	X+, r20
    1e94:	5d 93       	st	X+, r21
    1e96:	6d 93       	st	X+, r22
    1e98:	7c 93       	st	X, r23
    1e9a:	51 97       	sbiw	r26, 0x11	; 17
    1e9c:	a1 81       	ldd	r26, Z+1	; 0x01
    1e9e:	b2 81       	ldd	r27, Z+2	; 0x02
    1ea0:	c0 91 13 0e 	lds	r28, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1ea4:	d0 91 14 0e 	lds	r29, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1ea8:	bb 8b       	std	Y+19, r27	; 0x13
    1eaa:	aa 8b       	std	Y+18, r26	; 0x12
    1eac:	c0 91 13 0e 	lds	r28, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1eb0:	d0 91 14 0e 	lds	r29, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1eb4:	16 96       	adiw	r26, 0x06	; 6
    1eb6:	8d 91       	ld	r24, X+
    1eb8:	9c 91       	ld	r25, X
    1eba:	17 97       	sbiw	r26, 0x07	; 7
    1ebc:	9d 8b       	std	Y+21, r25	; 0x15
    1ebe:	8c 8b       	std	Y+20, r24	; 0x14
    1ec0:	16 96       	adiw	r26, 0x06	; 6
    1ec2:	cd 91       	ld	r28, X+
    1ec4:	dc 91       	ld	r29, X
    1ec6:	17 97       	sbiw	r26, 0x07	; 7
    1ec8:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1ecc:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1ed0:	0e 96       	adiw	r24, 0x0e	; 14
    1ed2:	9d 83       	std	Y+5, r25	; 0x05
    1ed4:	8c 83       	std	Y+4, r24	; 0x04
    1ed6:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1eda:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1ede:	0e 96       	adiw	r24, 0x0e	; 14
    1ee0:	17 96       	adiw	r26, 0x07	; 7
    1ee2:	9c 93       	st	X, r25
    1ee4:	8e 93       	st	-X, r24
    1ee6:	16 97       	sbiw	r26, 0x06	; 6
    1ee8:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1eec:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1ef0:	59 96       	adiw	r26, 0x19	; 25
    1ef2:	fc 93       	st	X, r31
    1ef4:	ee 93       	st	-X, r30
    1ef6:	58 97       	sbiw	r26, 0x18	; 24
    1ef8:	80 81       	ld	r24, Z
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	80 83       	st	Z, r24
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	c9 01       	movw	r24, r18
    1f02:	b8 01       	movw	r22, r16
    1f04:	e9 db       	rcall	.-2094   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	08 95       	ret

00001f10 <vTaskPlaceOnEventListRestricted>:
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	fc 01       	movw	r30, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	ba 01       	movw	r22, r20
    1f1a:	a1 81       	ldd	r26, Z+1	; 0x01
    1f1c:	b2 81       	ldd	r27, Z+2	; 0x02
    1f1e:	c0 91 13 0e 	lds	r28, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1f22:	d0 91 14 0e 	lds	r29, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1f26:	bb 8b       	std	Y+19, r27	; 0x13
    1f28:	aa 8b       	std	Y+18, r26	; 0x12
    1f2a:	c0 91 13 0e 	lds	r28, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1f2e:	d0 91 14 0e 	lds	r29, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1f32:	16 96       	adiw	r26, 0x06	; 6
    1f34:	4d 91       	ld	r20, X+
    1f36:	5c 91       	ld	r21, X
    1f38:	17 97       	sbiw	r26, 0x07	; 7
    1f3a:	5d 8b       	std	Y+21, r21	; 0x15
    1f3c:	4c 8b       	std	Y+20, r20	; 0x14
    1f3e:	16 96       	adiw	r26, 0x06	; 6
    1f40:	cd 91       	ld	r28, X+
    1f42:	dc 91       	ld	r29, X
    1f44:	17 97       	sbiw	r26, 0x07	; 7
    1f46:	40 91 13 0e 	lds	r20, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1f4a:	50 91 14 0e 	lds	r21, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1f4e:	42 5f       	subi	r20, 0xF2	; 242
    1f50:	5f 4f       	sbci	r21, 0xFF	; 255
    1f52:	5d 83       	std	Y+5, r21	; 0x05
    1f54:	4c 83       	std	Y+4, r20	; 0x04
    1f56:	40 91 13 0e 	lds	r20, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1f5a:	50 91 14 0e 	lds	r21, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1f5e:	42 5f       	subi	r20, 0xF2	; 242
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	17 96       	adiw	r26, 0x07	; 7
    1f64:	5c 93       	st	X, r21
    1f66:	4e 93       	st	-X, r20
    1f68:	16 97       	sbiw	r26, 0x06	; 6
    1f6a:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    1f6e:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    1f72:	59 96       	adiw	r26, 0x19	; 25
    1f74:	fc 93       	st	X, r31
    1f76:	ee 93       	st	-X, r30
    1f78:	58 97       	sbiw	r26, 0x18	; 24
    1f7a:	30 81       	ld	r19, Z
    1f7c:	3f 5f       	subi	r19, 0xFF	; 255
    1f7e:	30 83       	st	Z, r19
    1f80:	22 23       	and	r18, r18
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <vTaskPlaceOnEventListRestricted+0x7a>
    1f84:	6f ef       	ldi	r22, 0xFF	; 255
    1f86:	7f ef       	ldi	r23, 0xFF	; 255
    1f88:	cb 01       	movw	r24, r22
    1f8a:	42 2f       	mov	r20, r18
    1f8c:	a5 db       	rcall	.-2230   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <xTaskRemoveFromEventList>:
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	dc 01       	movw	r26, r24
    1f9a:	17 96       	adiw	r26, 0x07	; 7
    1f9c:	ed 91       	ld	r30, X+
    1f9e:	fc 91       	ld	r31, X
    1fa0:	18 97       	sbiw	r26, 0x08	; 8
    1fa2:	00 84       	ldd	r0, Z+8	; 0x08
    1fa4:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa6:	e0 2d       	mov	r30, r0
    1fa8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1faa:	b1 8d       	ldd	r27, Z+25	; 0x19
    1fac:	c2 89       	ldd	r28, Z+18	; 0x12
    1fae:	d3 89       	ldd	r29, Z+19	; 0x13
    1fb0:	84 89       	ldd	r24, Z+20	; 0x14
    1fb2:	95 89       	ldd	r25, Z+21	; 0x15
    1fb4:	9f 83       	std	Y+7, r25	; 0x07
    1fb6:	8e 83       	std	Y+6, r24	; 0x06
    1fb8:	c4 89       	ldd	r28, Z+20	; 0x14
    1fba:	d5 89       	ldd	r29, Z+21	; 0x15
    1fbc:	82 89       	ldd	r24, Z+18	; 0x12
    1fbe:	93 89       	ldd	r25, Z+19	; 0x13
    1fc0:	9d 83       	std	Y+5, r25	; 0x05
    1fc2:	8c 83       	std	Y+4, r24	; 0x04
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	8d 91       	ld	r24, X+
    1fc8:	9c 91       	ld	r25, X
    1fca:	12 97       	sbiw	r26, 0x02	; 2
    1fcc:	9f 01       	movw	r18, r30
    1fce:	22 5f       	subi	r18, 0xF2	; 242
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	82 17       	cp	r24, r18
    1fd4:	93 07       	cpc	r25, r19
    1fd6:	31 f4       	brne	.+12     	; 0x1fe4 <xTaskRemoveFromEventList+0x50>
    1fd8:	84 89       	ldd	r24, Z+20	; 0x14
    1fda:	95 89       	ldd	r25, Z+21	; 0x15
    1fdc:	12 96       	adiw	r26, 0x02	; 2
    1fde:	9c 93       	st	X, r25
    1fe0:	8e 93       	st	-X, r24
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	11 8e       	std	Z+25, r1	; 0x19
    1fe6:	10 8e       	std	Z+24, r1	; 0x18
    1fe8:	8c 91       	ld	r24, X
    1fea:	81 50       	subi	r24, 0x01	; 1
    1fec:	8c 93       	st	X, r24
    1fee:	80 91 54 0d 	lds	r24, 0x0D54	; 0x800d54 <uxSchedulerSuspended>
    1ff2:	81 11       	cpse	r24, r1
    1ff4:	52 c0       	rjmp	.+164    	; 0x209a <__DATA_REGION_LENGTH__+0x9a>
    1ff6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ff8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ffa:	c6 81       	ldd	r28, Z+6	; 0x06
    1ffc:	d7 81       	ldd	r29, Z+7	; 0x07
    1ffe:	80 85       	ldd	r24, Z+8	; 0x08
    2000:	91 85       	ldd	r25, Z+9	; 0x09
    2002:	9f 83       	std	Y+7, r25	; 0x07
    2004:	8e 83       	std	Y+6, r24	; 0x06
    2006:	c0 85       	ldd	r28, Z+8	; 0x08
    2008:	d1 85       	ldd	r29, Z+9	; 0x09
    200a:	86 81       	ldd	r24, Z+6	; 0x06
    200c:	97 81       	ldd	r25, Z+7	; 0x07
    200e:	9d 83       	std	Y+5, r25	; 0x05
    2010:	8c 83       	std	Y+4, r24	; 0x04
    2012:	11 96       	adiw	r26, 0x01	; 1
    2014:	8d 91       	ld	r24, X+
    2016:	9c 91       	ld	r25, X
    2018:	12 97       	sbiw	r26, 0x02	; 2
    201a:	9f 01       	movw	r18, r30
    201c:	2e 5f       	subi	r18, 0xFE	; 254
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	82 17       	cp	r24, r18
    2022:	93 07       	cpc	r25, r19
    2024:	31 f4       	brne	.+12     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2026:	80 85       	ldd	r24, Z+8	; 0x08
    2028:	91 85       	ldd	r25, Z+9	; 0x09
    202a:	12 96       	adiw	r26, 0x02	; 2
    202c:	9c 93       	st	X, r25
    202e:	8e 93       	st	-X, r24
    2030:	11 97       	sbiw	r26, 0x01	; 1
    2032:	15 86       	std	Z+13, r1	; 0x0d
    2034:	14 86       	std	Z+12, r1	; 0x0c
    2036:	8c 91       	ld	r24, X
    2038:	81 50       	subi	r24, 0x01	; 1
    203a:	8c 93       	st	X, r24
    203c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    203e:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    2042:	8a 17       	cp	r24, r26
    2044:	10 f4       	brcc	.+4      	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    2046:	a0 93 63 0d 	sts	0x0D63, r26	; 0x800d63 <uxTopReadyPriority>
    204a:	8b e0       	ldi	r24, 0x0B	; 11
    204c:	8a 9f       	mul	r24, r26
    204e:	d0 01       	movw	r26, r0
    2050:	11 24       	eor	r1, r1
    2052:	ab 55       	subi	r26, 0x5B	; 91
    2054:	b2 4f       	sbci	r27, 0xF2	; 242
    2056:	11 96       	adiw	r26, 0x01	; 1
    2058:	0d 90       	ld	r0, X+
    205a:	bc 91       	ld	r27, X
    205c:	a0 2d       	mov	r26, r0
    205e:	b7 83       	std	Z+7, r27	; 0x07
    2060:	a6 83       	std	Z+6, r26	; 0x06
    2062:	16 96       	adiw	r26, 0x06	; 6
    2064:	4d 91       	ld	r20, X+
    2066:	5c 91       	ld	r21, X
    2068:	17 97       	sbiw	r26, 0x07	; 7
    206a:	51 87       	std	Z+9, r21	; 0x09
    206c:	40 87       	std	Z+8, r20	; 0x08
    206e:	16 96       	adiw	r26, 0x06	; 6
    2070:	cd 91       	ld	r28, X+
    2072:	dc 91       	ld	r29, X
    2074:	17 97       	sbiw	r26, 0x07	; 7
    2076:	3d 83       	std	Y+5, r19	; 0x05
    2078:	2c 83       	std	Y+4, r18	; 0x04
    207a:	17 96       	adiw	r26, 0x07	; 7
    207c:	3c 93       	st	X, r19
    207e:	2e 93       	st	-X, r18
    2080:	16 97       	sbiw	r26, 0x06	; 6
    2082:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2084:	8a 9f       	mul	r24, r26
    2086:	d0 01       	movw	r26, r0
    2088:	11 24       	eor	r1, r1
    208a:	ab 55       	subi	r26, 0x5B	; 91
    208c:	b2 4f       	sbci	r27, 0xF2	; 242
    208e:	b5 87       	std	Z+13, r27	; 0x0d
    2090:	a4 87       	std	Z+12, r26	; 0x0c
    2092:	8c 91       	ld	r24, X
    2094:	8f 5f       	subi	r24, 0xFF	; 255
    2096:	8c 93       	st	X, r24
    2098:	1c c0       	rjmp	.+56     	; 0x20d2 <__DATA_REGION_LENGTH__+0xd2>
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5d e0       	ldi	r21, 0x0D	; 13
    209e:	da 01       	movw	r26, r20
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	cd 91       	ld	r28, X+
    20a4:	dc 91       	ld	r29, X
    20a6:	12 97       	sbiw	r26, 0x02	; 2
    20a8:	d3 8b       	std	Z+19, r29	; 0x13
    20aa:	c2 8b       	std	Z+18, r28	; 0x12
    20ac:	8e 81       	ldd	r24, Y+6	; 0x06
    20ae:	9f 81       	ldd	r25, Y+7	; 0x07
    20b0:	95 8b       	std	Z+21, r25	; 0x15
    20b2:	84 8b       	std	Z+20, r24	; 0x14
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	dc 01       	movw	r26, r24
    20ba:	15 96       	adiw	r26, 0x05	; 5
    20bc:	3c 93       	st	X, r19
    20be:	2e 93       	st	-X, r18
    20c0:	14 97       	sbiw	r26, 0x04	; 4
    20c2:	3f 83       	std	Y+7, r19	; 0x07
    20c4:	2e 83       	std	Y+6, r18	; 0x06
    20c6:	51 8f       	std	Z+25, r21	; 0x19
    20c8:	40 8f       	std	Z+24, r20	; 0x18
    20ca:	da 01       	movw	r26, r20
    20cc:	8c 91       	ld	r24, X
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	8c 93       	st	X, r24
    20d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    20d4:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    20d8:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    20dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    20de:	89 17       	cp	r24, r25
    20e0:	20 f4       	brcc	.+8      	; 0x20ea <__DATA_REGION_LENGTH__+0xea>
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <xYieldPending>
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <__DATA_REGION_LENGTH__+0xec>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <vTaskRemoveFromUnorderedEventList>:
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	dc 01       	movw	r26, r24
    20f8:	70 68       	ori	r23, 0x80	; 128
    20fa:	4d 93       	st	X+, r20
    20fc:	5d 93       	st	X+, r21
    20fe:	6d 93       	st	X+, r22
    2100:	7c 93       	st	X, r23
    2102:	13 97       	sbiw	r26, 0x03	; 3
    2104:	18 96       	adiw	r26, 0x08	; 8
    2106:	ed 91       	ld	r30, X+
    2108:	fc 91       	ld	r31, X
    210a:	19 97       	sbiw	r26, 0x09	; 9
    210c:	1a 96       	adiw	r26, 0x0a	; 10
    210e:	4d 91       	ld	r20, X+
    2110:	5c 91       	ld	r21, X
    2112:	1b 97       	sbiw	r26, 0x0b	; 11
    2114:	14 96       	adiw	r26, 0x04	; 4
    2116:	8d 91       	ld	r24, X+
    2118:	9c 91       	ld	r25, X
    211a:	15 97       	sbiw	r26, 0x05	; 5
    211c:	16 96       	adiw	r26, 0x06	; 6
    211e:	2d 91       	ld	r18, X+
    2120:	3c 91       	ld	r19, X
    2122:	17 97       	sbiw	r26, 0x07	; 7
    2124:	ec 01       	movw	r28, r24
    2126:	3f 83       	std	Y+7, r19	; 0x07
    2128:	2e 83       	std	Y+6, r18	; 0x06
    212a:	16 96       	adiw	r26, 0x06	; 6
    212c:	8d 91       	ld	r24, X+
    212e:	9c 91       	ld	r25, X
    2130:	17 97       	sbiw	r26, 0x07	; 7
    2132:	14 96       	adiw	r26, 0x04	; 4
    2134:	2d 91       	ld	r18, X+
    2136:	3c 91       	ld	r19, X
    2138:	15 97       	sbiw	r26, 0x05	; 5
    213a:	ec 01       	movw	r28, r24
    213c:	3d 83       	std	Y+5, r19	; 0x05
    213e:	2c 83       	std	Y+4, r18	; 0x04
    2140:	ea 01       	movw	r28, r20
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	a8 17       	cp	r26, r24
    2148:	b9 07       	cpc	r27, r25
    214a:	31 f4       	brne	.+12     	; 0x2158 <vTaskRemoveFromUnorderedEventList+0x66>
    214c:	16 96       	adiw	r26, 0x06	; 6
    214e:	8d 91       	ld	r24, X+
    2150:	9c 91       	ld	r25, X
    2152:	17 97       	sbiw	r26, 0x07	; 7
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	1b 96       	adiw	r26, 0x0b	; 11
    215a:	1c 92       	st	X, r1
    215c:	1e 92       	st	-X, r1
    215e:	1a 97       	sbiw	r26, 0x0a	; 10
    2160:	da 01       	movw	r26, r20
    2162:	8c 91       	ld	r24, X
    2164:	81 50       	subi	r24, 0x01	; 1
    2166:	8c 93       	st	X, r24
    2168:	a4 85       	ldd	r26, Z+12	; 0x0c
    216a:	b5 85       	ldd	r27, Z+13	; 0x0d
    216c:	c6 81       	ldd	r28, Z+6	; 0x06
    216e:	d7 81       	ldd	r29, Z+7	; 0x07
    2170:	80 85       	ldd	r24, Z+8	; 0x08
    2172:	91 85       	ldd	r25, Z+9	; 0x09
    2174:	9f 83       	std	Y+7, r25	; 0x07
    2176:	8e 83       	std	Y+6, r24	; 0x06
    2178:	c0 85       	ldd	r28, Z+8	; 0x08
    217a:	d1 85       	ldd	r29, Z+9	; 0x09
    217c:	86 81       	ldd	r24, Z+6	; 0x06
    217e:	97 81       	ldd	r25, Z+7	; 0x07
    2180:	9d 83       	std	Y+5, r25	; 0x05
    2182:	8c 83       	std	Y+4, r24	; 0x04
    2184:	11 96       	adiw	r26, 0x01	; 1
    2186:	8d 91       	ld	r24, X+
    2188:	9c 91       	ld	r25, X
    218a:	12 97       	sbiw	r26, 0x02	; 2
    218c:	9f 01       	movw	r18, r30
    218e:	2e 5f       	subi	r18, 0xFE	; 254
    2190:	3f 4f       	sbci	r19, 0xFF	; 255
    2192:	82 17       	cp	r24, r18
    2194:	93 07       	cpc	r25, r19
    2196:	31 f4       	brne	.+12     	; 0x21a4 <vTaskRemoveFromUnorderedEventList+0xb2>
    2198:	80 85       	ldd	r24, Z+8	; 0x08
    219a:	91 85       	ldd	r25, Z+9	; 0x09
    219c:	12 96       	adiw	r26, 0x02	; 2
    219e:	9c 93       	st	X, r25
    21a0:	8e 93       	st	-X, r24
    21a2:	11 97       	sbiw	r26, 0x01	; 1
    21a4:	15 86       	std	Z+13, r1	; 0x0d
    21a6:	14 86       	std	Z+12, r1	; 0x0c
    21a8:	8c 91       	ld	r24, X
    21aa:	81 50       	subi	r24, 0x01	; 1
    21ac:	8c 93       	st	X, r24
    21ae:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21b0:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    21b4:	8a 17       	cp	r24, r26
    21b6:	10 f4       	brcc	.+4      	; 0x21bc <vTaskRemoveFromUnorderedEventList+0xca>
    21b8:	a0 93 63 0d 	sts	0x0D63, r26	; 0x800d63 <uxTopReadyPriority>
    21bc:	8b e0       	ldi	r24, 0x0B	; 11
    21be:	8a 9f       	mul	r24, r26
    21c0:	d0 01       	movw	r26, r0
    21c2:	11 24       	eor	r1, r1
    21c4:	ab 55       	subi	r26, 0x5B	; 91
    21c6:	b2 4f       	sbci	r27, 0xF2	; 242
    21c8:	11 96       	adiw	r26, 0x01	; 1
    21ca:	0d 90       	ld	r0, X+
    21cc:	bc 91       	ld	r27, X
    21ce:	a0 2d       	mov	r26, r0
    21d0:	b7 83       	std	Z+7, r27	; 0x07
    21d2:	a6 83       	std	Z+6, r26	; 0x06
    21d4:	16 96       	adiw	r26, 0x06	; 6
    21d6:	4d 91       	ld	r20, X+
    21d8:	5c 91       	ld	r21, X
    21da:	17 97       	sbiw	r26, 0x07	; 7
    21dc:	51 87       	std	Z+9, r21	; 0x09
    21de:	40 87       	std	Z+8, r20	; 0x08
    21e0:	16 96       	adiw	r26, 0x06	; 6
    21e2:	cd 91       	ld	r28, X+
    21e4:	dc 91       	ld	r29, X
    21e6:	17 97       	sbiw	r26, 0x07	; 7
    21e8:	3d 83       	std	Y+5, r19	; 0x05
    21ea:	2c 83       	std	Y+4, r18	; 0x04
    21ec:	17 96       	adiw	r26, 0x07	; 7
    21ee:	3c 93       	st	X, r19
    21f0:	2e 93       	st	-X, r18
    21f2:	16 97       	sbiw	r26, 0x06	; 6
    21f4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21f6:	8a 9f       	mul	r24, r26
    21f8:	d0 01       	movw	r26, r0
    21fa:	11 24       	eor	r1, r1
    21fc:	ab 55       	subi	r26, 0x5B	; 91
    21fe:	b2 4f       	sbci	r27, 0xF2	; 242
    2200:	b5 87       	std	Z+13, r27	; 0x0d
    2202:	a4 87       	std	Z+12, r26	; 0x0c
    2204:	8c 91       	ld	r24, X
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	8c 93       	st	X, r24
    220a:	92 8d       	ldd	r25, Z+26	; 0x1a
    220c:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    2210:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    2214:	82 8d       	ldd	r24, Z+26	; 0x1a
    2216:	89 17       	cp	r24, r25
    2218:	18 f4       	brcc	.+6      	; 0x2220 <__stack+0x21>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <xYieldPending>
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <vTaskInternalSetTimeOutState>:
    2226:	20 91 5c 0d 	lds	r18, 0x0D5C	; 0x800d5c <xNumOfOverflows>
    222a:	fc 01       	movw	r30, r24
    222c:	20 83       	st	Z, r18
    222e:	40 91 64 0d 	lds	r20, 0x0D64	; 0x800d64 <xTickCount>
    2232:	50 91 65 0d 	lds	r21, 0x0D65	; 0x800d65 <xTickCount+0x1>
    2236:	60 91 66 0d 	lds	r22, 0x0D66	; 0x800d66 <xTickCount+0x2>
    223a:	70 91 67 0d 	lds	r23, 0x0D67	; 0x800d67 <xTickCount+0x3>
    223e:	41 83       	std	Z+1, r20	; 0x01
    2240:	52 83       	std	Z+2, r21	; 0x02
    2242:	63 83       	std	Z+3, r22	; 0x03
    2244:	74 83       	std	Z+4, r23	; 0x04
    2246:	08 95       	ret

00002248 <xTaskCheckForTimeOut>:
    2248:	8f 92       	push	r8
    224a:	9f 92       	push	r9
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	fb 01       	movw	r30, r22
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	0f 92       	push	r0
    2268:	c0 90 64 0d 	lds	r12, 0x0D64	; 0x800d64 <xTickCount>
    226c:	d0 90 65 0d 	lds	r13, 0x0D65	; 0x800d65 <xTickCount+0x1>
    2270:	e0 90 66 0d 	lds	r14, 0x0D66	; 0x800d66 <xTickCount+0x2>
    2274:	f0 90 67 0d 	lds	r15, 0x0D67	; 0x800d67 <xTickCount+0x3>
    2278:	dc 01       	movw	r26, r24
    227a:	11 96       	adiw	r26, 0x01	; 1
    227c:	0d 91       	ld	r16, X+
    227e:	1d 91       	ld	r17, X+
    2280:	2d 91       	ld	r18, X+
    2282:	3c 91       	ld	r19, X
    2284:	14 97       	sbiw	r26, 0x04	; 4
    2286:	46 01       	movw	r8, r12
    2288:	57 01       	movw	r10, r14
    228a:	80 1a       	sub	r8, r16
    228c:	91 0a       	sbc	r9, r17
    228e:	a2 0a       	sbc	r10, r18
    2290:	b3 0a       	sbc	r11, r19
    2292:	40 81       	ld	r20, Z
    2294:	51 81       	ldd	r21, Z+1	; 0x01
    2296:	62 81       	ldd	r22, Z+2	; 0x02
    2298:	73 81       	ldd	r23, Z+3	; 0x03
    229a:	4f 3f       	cpi	r20, 0xFF	; 255
    229c:	bf ef       	ldi	r27, 0xFF	; 255
    229e:	5b 07       	cpc	r21, r27
    22a0:	6b 07       	cpc	r22, r27
    22a2:	7b 07       	cpc	r23, r27
    22a4:	39 f1       	breq	.+78     	; 0x22f4 <xTaskCheckForTimeOut+0xac>
    22a6:	ec 01       	movw	r28, r24
    22a8:	b8 81       	ld	r27, Y
    22aa:	a0 91 5c 0d 	lds	r26, 0x0D5C	; 0x800d5c <xNumOfOverflows>
    22ae:	ba 17       	cp	r27, r26
    22b0:	59 f0       	breq	.+22     	; 0x22c8 <xTaskCheckForTimeOut+0x80>
    22b2:	c0 16       	cp	r12, r16
    22b4:	d1 06       	cpc	r13, r17
    22b6:	e2 06       	cpc	r14, r18
    22b8:	f3 06       	cpc	r15, r19
    22ba:	30 f0       	brcs	.+12     	; 0x22c8 <xTaskCheckForTimeOut+0x80>
    22bc:	10 82       	st	Z, r1
    22be:	11 82       	std	Z+1, r1	; 0x01
    22c0:	12 82       	std	Z+2, r1	; 0x02
    22c2:	13 82       	std	Z+3, r1	; 0x03
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	17 c0       	rjmp	.+46     	; 0x22f6 <xTaskCheckForTimeOut+0xae>
    22c8:	84 16       	cp	r8, r20
    22ca:	95 06       	cpc	r9, r21
    22cc:	a6 06       	cpc	r10, r22
    22ce:	b7 06       	cpc	r11, r23
    22d0:	58 f4       	brcc	.+22     	; 0x22e8 <xTaskCheckForTimeOut+0xa0>
    22d2:	48 19       	sub	r20, r8
    22d4:	59 09       	sbc	r21, r9
    22d6:	6a 09       	sbc	r22, r10
    22d8:	7b 09       	sbc	r23, r11
    22da:	40 83       	st	Z, r20
    22dc:	51 83       	std	Z+1, r21	; 0x01
    22de:	62 83       	std	Z+2, r22	; 0x02
    22e0:	73 83       	std	Z+3, r23	; 0x03
    22e2:	a1 df       	rcall	.-190    	; 0x2226 <vTaskInternalSetTimeOutState>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	07 c0       	rjmp	.+14     	; 0x22f6 <xTaskCheckForTimeOut+0xae>
    22e8:	10 82       	st	Z, r1
    22ea:	11 82       	std	Z+1, r1	; 0x01
    22ec:	12 82       	std	Z+2, r1	; 0x02
    22ee:	13 82       	std	Z+3, r1	; 0x03
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <xTaskCheckForTimeOut+0xae>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	0f 90       	pop	r0
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	df 90       	pop	r13
    2308:	cf 90       	pop	r12
    230a:	bf 90       	pop	r11
    230c:	af 90       	pop	r10
    230e:	9f 90       	pop	r9
    2310:	8f 90       	pop	r8
    2312:	08 95       	ret

00002314 <vTaskMissedYield>:
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <xYieldPending>
    231a:	08 95       	ret

0000231c <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    231c:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <xSchedulerRunning>
    2320:	88 23       	and	r24, r24
    2322:	31 f0       	breq	.+12     	; 0x2330 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2324:	80 91 54 0d 	lds	r24, 0x0D54	; 0x800d54 <uxSchedulerSuspended>
    2328:	81 11       	cpse	r24, r1
    232a:	04 c0       	rjmp	.+8      	; 0x2334 <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	08 95       	ret
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    2334:	80 e0       	ldi	r24, 0x00	; 0
            }
        }

        return xReturn;
    }
    2336:	08 95       	ret

00002338 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	fc 01       	movw	r30, r24
        BaseType_t xReturn = pdFALSE;

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
    2342:	89 2b       	or	r24, r25
    2344:	09 f4       	brne	.+2      	; 0x2348 <xTaskPriorityInherit+0x10>
    2346:	77 c0       	rjmp	.+238    	; 0x2436 <xTaskPriorityInherit+0xfe>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    2348:	82 8d       	ldd	r24, Z+26	; 0x1a
    234a:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    234e:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    2352:	5a 96       	adiw	r26, 0x1a	; 26
    2354:	9c 91       	ld	r25, X
    2356:	89 17       	cp	r24, r25
    2358:	08 f0       	brcs	.+2      	; 0x235c <xTaskPriorityInherit+0x24>
    235a:	63 c0       	rjmp	.+198    	; 0x2422 <xTaskPriorityInherit+0xea>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    235c:	46 85       	ldd	r20, Z+14	; 0x0e
    235e:	57 85       	ldd	r21, Z+15	; 0x0f
    2360:	60 89       	ldd	r22, Z+16	; 0x10
    2362:	71 89       	ldd	r23, Z+17	; 0x11
    2364:	77 23       	and	r23, r23
    2366:	94 f0       	brlt	.+36     	; 0x238c <xTaskPriorityInherit+0x54>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2368:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    236c:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    2370:	5a 96       	adiw	r26, 0x1a	; 26
    2372:	9c 91       	ld	r25, X
    2374:	4a e0       	ldi	r20, 0x0A	; 10
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	49 1b       	sub	r20, r25
    237e:	51 09       	sbc	r21, r1
    2380:	61 09       	sbc	r22, r1
    2382:	71 09       	sbc	r23, r1
    2384:	46 87       	std	Z+14, r20	; 0x0e
    2386:	57 87       	std	Z+15, r21	; 0x0f
    2388:	60 8b       	std	Z+16, r22	; 0x10
    238a:	71 8b       	std	Z+17, r23	; 0x11
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    238c:	24 85       	ldd	r18, Z+12	; 0x0c
    238e:	35 85       	ldd	r19, Z+13	; 0x0d
    2390:	4b e0       	ldi	r20, 0x0B	; 11
    2392:	84 9f       	mul	r24, r20
    2394:	c0 01       	movw	r24, r0
    2396:	11 24       	eor	r1, r1
    2398:	8b 55       	subi	r24, 0x5B	; 91
    239a:	92 4f       	sbci	r25, 0xF2	; 242
    239c:	28 17       	cp	r18, r24
    239e:	39 07       	cpc	r19, r25
    23a0:	b9 f5       	brne	.+110    	; 0x2410 <xTaskPriorityInherit+0xd8>
    23a2:	ef 01       	movw	r28, r30
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    23a4:	8f 01       	movw	r16, r30
    23a6:	0e 5f       	subi	r16, 0xFE	; 254
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	c8 01       	movw	r24, r16
    23ac:	0e 94 12 05 	call	0xa24	; 0xa24 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    23b0:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    23b4:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    23b8:	e2 8d       	ldd	r30, Z+26	; 0x1a
    23ba:	ea 8f       	std	Y+26, r30	; 0x1a
                    prvAddTaskToReadyList( pxMutexHolderTCB );
    23bc:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    23c0:	8e 17       	cp	r24, r30
    23c2:	10 f4       	brcc	.+4      	; 0x23c8 <xTaskPriorityInherit+0x90>
    23c4:	e0 93 63 0d 	sts	0x0D63, r30	; 0x800d63 <uxTopReadyPriority>
    23c8:	8b e0       	ldi	r24, 0x0B	; 11
    23ca:	8e 9f       	mul	r24, r30
    23cc:	f0 01       	movw	r30, r0
    23ce:	11 24       	eor	r1, r1
    23d0:	eb 55       	subi	r30, 0x5B	; 91
    23d2:	f2 4f       	sbci	r31, 0xF2	; 242
    23d4:	01 80       	ldd	r0, Z+1	; 0x01
    23d6:	f2 81       	ldd	r31, Z+2	; 0x02
    23d8:	e0 2d       	mov	r30, r0
    23da:	ff 83       	std	Y+7, r31	; 0x07
    23dc:	ee 83       	std	Y+6, r30	; 0x06
    23de:	26 81       	ldd	r18, Z+6	; 0x06
    23e0:	37 81       	ldd	r19, Z+7	; 0x07
    23e2:	39 87       	std	Y+9, r19	; 0x09
    23e4:	28 87       	std	Y+8, r18	; 0x08
    23e6:	a6 81       	ldd	r26, Z+6	; 0x06
    23e8:	b7 81       	ldd	r27, Z+7	; 0x07
    23ea:	15 96       	adiw	r26, 0x05	; 5
    23ec:	1c 93       	st	X, r17
    23ee:	0e 93       	st	-X, r16
    23f0:	14 97       	sbiw	r26, 0x04	; 4
    23f2:	17 83       	std	Z+7, r17	; 0x07
    23f4:	06 83       	std	Z+6, r16	; 0x06
    23f6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    23f8:	8e 9f       	mul	r24, r30
    23fa:	f0 01       	movw	r30, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	eb 55       	subi	r30, 0x5B	; 91
    2400:	f2 4f       	sbci	r31, 0xF2	; 242
    2402:	fd 87       	std	Y+13, r31	; 0x0d
    2404:	ec 87       	std	Y+12, r30	; 0x0c
    2406:	80 81       	ld	r24, Z
    2408:	8f 5f       	subi	r24, 0xFF	; 255
    240a:	80 83       	st	Z, r24
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	16 c0       	rjmp	.+44     	; 0x243c <xTaskPriorityInherit+0x104>
                    prvAddTaskToReadyList( pxMutexHolderTCB );
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2410:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    2414:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    2418:	5a 96       	adiw	r26, 0x1a	; 26
    241a:	8c 91       	ld	r24, X
    241c:	82 8f       	std	Z+26, r24	; 0x1a
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	0d c0       	rjmp	.+26     	; 0x243c <xTaskPriorityInherit+0x104>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    2422:	95 a5       	ldd	r25, Z+45	; 0x2d
    2424:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    2428:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    242c:	82 8d       	ldd	r24, Z+26	; 0x1a
    242e:	98 17       	cp	r25, r24
    2430:	20 f0       	brcs	.+8      	; 0x243a <xTaskPriorityInherit+0x102>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	03 c0       	rjmp	.+6      	; 0x243c <xTaskPriorityInherit+0x104>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	01 c0       	rjmp	.+2      	; 0x243c <xTaskPriorityInherit+0x104>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
    243a:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	08 95       	ret

00002446 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2450:	89 2b       	or	r24, r25
    2452:	09 f4       	brne	.+2      	; 0x2456 <xTaskPriorityDisinherit+0x10>
    2454:	49 c0       	rjmp	.+146    	; 0x24e8 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2456:	86 a5       	ldd	r24, Z+46	; 0x2e
    2458:	81 50       	subi	r24, 0x01	; 1
    245a:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    245c:	22 8d       	ldd	r18, Z+26	; 0x1a
    245e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2460:	29 17       	cp	r18, r25
    2462:	09 f4       	brne	.+2      	; 0x2466 <xTaskPriorityDisinherit+0x20>
    2464:	43 c0       	rjmp	.+134    	; 0x24ec <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2466:	81 11       	cpse	r24, r1
    2468:	43 c0       	rjmp	.+134    	; 0x24f0 <xTaskPriorityDisinherit+0xaa>
    246a:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    246c:	8f 01       	movw	r16, r30
    246e:	0e 5f       	subi	r16, 0xFE	; 254
    2470:	1f 4f       	sbci	r17, 0xFF	; 255
    2472:	c8 01       	movw	r24, r16
    2474:	0e 94 12 05 	call	0xa24	; 0xa24 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2478:	ed a5       	ldd	r30, Y+45	; 0x2d
    247a:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    247c:	8a e0       	ldi	r24, 0x0A	; 10
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e0       	ldi	r26, 0x00	; 0
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	8e 1b       	sub	r24, r30
    2486:	91 09       	sbc	r25, r1
    2488:	a1 09       	sbc	r26, r1
    248a:	b1 09       	sbc	r27, r1
    248c:	8e 87       	std	Y+14, r24	; 0x0e
    248e:	9f 87       	std	Y+15, r25	; 0x0f
    2490:	a8 8b       	std	Y+16, r26	; 0x10
    2492:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    2494:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    2498:	8e 17       	cp	r24, r30
    249a:	10 f4       	brcc	.+4      	; 0x24a0 <xTaskPriorityDisinherit+0x5a>
    249c:	e0 93 63 0d 	sts	0x0D63, r30	; 0x800d63 <uxTopReadyPriority>
    24a0:	8b e0       	ldi	r24, 0x0B	; 11
    24a2:	8e 9f       	mul	r24, r30
    24a4:	f0 01       	movw	r30, r0
    24a6:	11 24       	eor	r1, r1
    24a8:	eb 55       	subi	r30, 0x5B	; 91
    24aa:	f2 4f       	sbci	r31, 0xF2	; 242
    24ac:	01 80       	ldd	r0, Z+1	; 0x01
    24ae:	f2 81       	ldd	r31, Z+2	; 0x02
    24b0:	e0 2d       	mov	r30, r0
    24b2:	ff 83       	std	Y+7, r31	; 0x07
    24b4:	ee 83       	std	Y+6, r30	; 0x06
    24b6:	26 81       	ldd	r18, Z+6	; 0x06
    24b8:	37 81       	ldd	r19, Z+7	; 0x07
    24ba:	39 87       	std	Y+9, r19	; 0x09
    24bc:	28 87       	std	Y+8, r18	; 0x08
    24be:	a6 81       	ldd	r26, Z+6	; 0x06
    24c0:	b7 81       	ldd	r27, Z+7	; 0x07
    24c2:	15 96       	adiw	r26, 0x05	; 5
    24c4:	1c 93       	st	X, r17
    24c6:	0e 93       	st	-X, r16
    24c8:	14 97       	sbiw	r26, 0x04	; 4
    24ca:	17 83       	std	Z+7, r17	; 0x07
    24cc:	06 83       	std	Z+6, r16	; 0x06
    24ce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    24d0:	8e 9f       	mul	r24, r30
    24d2:	f0 01       	movw	r30, r0
    24d4:	11 24       	eor	r1, r1
    24d6:	eb 55       	subi	r30, 0x5B	; 91
    24d8:	f2 4f       	sbci	r31, 0xF2	; 242
    24da:	fd 87       	std	Y+13, r31	; 0x0d
    24dc:	ec 87       	std	Y+12, r30	; 0x0c
    24de:	80 81       	ld	r24, Z
    24e0:	8f 5f       	subi	r24, 0xFF	; 255
    24e2:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	05 c0       	rjmp	.+10     	; 0x24f2 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <xTaskPriorityDisinherit+0xac>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	01 c0       	rjmp	.+2      	; 0x24f2 <xTaskPriorityDisinherit+0xac>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	08 95       	ret

000024fc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

        if( pxMutexHolder != NULL )
    2506:	89 2b       	or	r24, r25
    2508:	09 f4       	brne	.+2      	; 0x250c <vTaskPriorityDisinheritAfterTimeout+0x10>
    250a:	5a c0       	rjmp	.+180    	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0xc4>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    250c:	85 a5       	ldd	r24, Z+45	; 0x2d
    250e:	86 17       	cp	r24, r22
    2510:	08 f4       	brcc	.+2      	; 0x2514 <vTaskPriorityDisinheritAfterTimeout+0x18>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
    2512:	86 2f       	mov	r24, r22
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
    2514:	92 8d       	ldd	r25, Z+26	; 0x1a
    2516:	89 17       	cp	r24, r25
    2518:	09 f4       	brne	.+2      	; 0x251c <vTaskPriorityDisinheritAfterTimeout+0x20>
    251a:	52 c0       	rjmp	.+164    	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0xc4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    251c:	26 a5       	ldd	r18, Z+46	; 0x2e
    251e:	21 30       	cpi	r18, 0x01	; 1
    2520:	09 f0       	breq	.+2      	; 0x2524 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2522:	4e c0       	rjmp	.+156    	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
                    pxTCB->uxPriority = uxPriorityToUse;
    2524:	82 8f       	std	Z+26, r24	; 0x1a

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2526:	46 85       	ldd	r20, Z+14	; 0x0e
    2528:	57 85       	ldd	r21, Z+15	; 0x0f
    252a:	60 89       	ldd	r22, Z+16	; 0x10
    252c:	71 89       	ldd	r23, Z+17	; 0x11
    252e:	77 23       	and	r23, r23
    2530:	64 f0       	brlt	.+24     	; 0x254a <vTaskPriorityDisinheritAfterTimeout+0x4e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2532:	4a e0       	ldi	r20, 0x0A	; 10
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	48 1b       	sub	r20, r24
    253c:	51 09       	sbc	r21, r1
    253e:	61 09       	sbc	r22, r1
    2540:	71 09       	sbc	r23, r1
    2542:	46 87       	std	Z+14, r20	; 0x0e
    2544:	57 87       	std	Z+15, r21	; 0x0f
    2546:	60 8b       	std	Z+16, r22	; 0x10
    2548:	71 8b       	std	Z+17, r23	; 0x11
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    254a:	24 85       	ldd	r18, Z+12	; 0x0c
    254c:	35 85       	ldd	r19, Z+13	; 0x0d
    254e:	4b e0       	ldi	r20, 0x0B	; 11
    2550:	94 9f       	mul	r25, r20
    2552:	c0 01       	movw	r24, r0
    2554:	11 24       	eor	r1, r1
    2556:	8b 55       	subi	r24, 0x5B	; 91
    2558:	92 4f       	sbci	r25, 0xF2	; 242
    255a:	28 17       	cp	r18, r24
    255c:	39 07       	cpc	r19, r25
    255e:	81 f5       	brne	.+96     	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2560:	ef 01       	movw	r28, r30
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2562:	8f 01       	movw	r16, r30
    2564:	0e 5f       	subi	r16, 0xFE	; 254
    2566:	1f 4f       	sbci	r17, 0xFF	; 255
    2568:	c8 01       	movw	r24, r16
    256a:	0e 94 12 05 	call	0xa24	; 0xa24 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
    256e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2570:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <uxTopReadyPriority>
    2574:	8e 17       	cp	r24, r30
    2576:	10 f4       	brcc	.+4      	; 0x257c <vTaskPriorityDisinheritAfterTimeout+0x80>
    2578:	e0 93 63 0d 	sts	0x0D63, r30	; 0x800d63 <uxTopReadyPriority>
    257c:	8b e0       	ldi	r24, 0x0B	; 11
    257e:	8e 9f       	mul	r24, r30
    2580:	f0 01       	movw	r30, r0
    2582:	11 24       	eor	r1, r1
    2584:	eb 55       	subi	r30, 0x5B	; 91
    2586:	f2 4f       	sbci	r31, 0xF2	; 242
    2588:	01 80       	ldd	r0, Z+1	; 0x01
    258a:	f2 81       	ldd	r31, Z+2	; 0x02
    258c:	e0 2d       	mov	r30, r0
    258e:	ff 83       	std	Y+7, r31	; 0x07
    2590:	ee 83       	std	Y+6, r30	; 0x06
    2592:	26 81       	ldd	r18, Z+6	; 0x06
    2594:	37 81       	ldd	r19, Z+7	; 0x07
    2596:	39 87       	std	Y+9, r19	; 0x09
    2598:	28 87       	std	Y+8, r18	; 0x08
    259a:	a6 81       	ldd	r26, Z+6	; 0x06
    259c:	b7 81       	ldd	r27, Z+7	; 0x07
    259e:	15 96       	adiw	r26, 0x05	; 5
    25a0:	1c 93       	st	X, r17
    25a2:	0e 93       	st	-X, r16
    25a4:	14 97       	sbiw	r26, 0x04	; 4
    25a6:	17 83       	std	Z+7, r17	; 0x07
    25a8:	06 83       	std	Z+6, r16	; 0x06
    25aa:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25ac:	8e 9f       	mul	r24, r30
    25ae:	f0 01       	movw	r30, r0
    25b0:	11 24       	eor	r1, r1
    25b2:	eb 55       	subi	r30, 0x5B	; 91
    25b4:	f2 4f       	sbci	r31, 0xF2	; 242
    25b6:	fd 87       	std	Y+13, r31	; 0x0d
    25b8:	ec 87       	std	Y+12, r30	; 0x0c
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 5f       	subi	r24, 0xFF	; 255
    25be:	80 83       	st	Z, r24
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	08 95       	ret

000025ca <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    25d2:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    25d6:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    25da:	66 85       	ldd	r22, Z+14	; 0x0e
    25dc:	77 85       	ldd	r23, Z+15	; 0x0f
    25de:	80 89       	ldd	r24, Z+16	; 0x10
    25e0:	91 89       	ldd	r25, Z+17	; 0x11

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25e2:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    25e6:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    25ea:	a0 91 13 0e 	lds	r26, 0x0E13	; 0x800e13 <pxCurrentTCB>
    25ee:	b0 91 14 0e 	lds	r27, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    25f2:	5a 96       	adiw	r26, 0x1a	; 26
    25f4:	2c 91       	ld	r18, X
    25f6:	0f 2e       	mov	r0, r31
    25f8:	fa e0       	ldi	r31, 0x0A	; 10
    25fa:	cf 2e       	mov	r12, r31
    25fc:	d1 2c       	mov	r13, r1
    25fe:	e1 2c       	mov	r14, r1
    2600:	f1 2c       	mov	r15, r1
    2602:	f0 2d       	mov	r31, r0
    2604:	c2 1a       	sub	r12, r18
    2606:	d1 08       	sbc	r13, r1
    2608:	e1 08       	sbc	r14, r1
    260a:	f1 08       	sbc	r15, r1
    260c:	c6 86       	std	Z+14, r12	; 0x0e
    260e:	d7 86       	std	Z+15, r13	; 0x0f
    2610:	e0 8a       	std	Z+16, r14	; 0x10
    2612:	f1 8a       	std	Z+17, r15	; 0x11

    return uxReturn;
}
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	08 95       	ret

0000261e <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    261e:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    2622:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    2626:	89 2b       	or	r24, r25
    2628:	39 f0       	breq	.+14     	; 0x2638 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    262a:	e0 91 13 0e 	lds	r30, 0x0E13	; 0x800e13 <pxCurrentTCB>
    262e:	f0 91 14 0e 	lds	r31, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    2632:	86 a5       	ldd	r24, Z+46	; 0x2e
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2638:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <pxCurrentTCB>
    263c:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <pxCurrentTCB+0x1>
    }
    2640:	08 95       	ret

00002642 <prvGetNextExpireTime>:
    2642:	dc 01       	movw	r26, r24
    2644:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <pxCurrentTimerList>
    2648:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <pxCurrentTimerList+0x1>
    264c:	80 81       	ld	r24, Z
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	81 11       	cpse	r24, r1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9c 93       	st	X, r25
    2656:	91 11       	cpse	r25, r1
    2658:	08 c0       	rjmp	.+16     	; 0x266a <prvGetNextExpireTime+0x28>
    265a:	07 80       	ldd	r0, Z+7	; 0x07
    265c:	f0 85       	ldd	r31, Z+8	; 0x08
    265e:	e0 2d       	mov	r30, r0
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	08 95       	ret
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	cb 01       	movw	r24, r22
    2670:	08 95       	ret

00002672 <prvInsertTimerInActiveList>:
    2672:	cf 92       	push	r12
    2674:	df 92       	push	r13
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	fc 01       	movw	r30, r24
    2680:	42 83       	std	Z+2, r20	; 0x02
    2682:	53 83       	std	Z+3, r21	; 0x03
    2684:	64 83       	std	Z+4, r22	; 0x04
    2686:	75 83       	std	Z+5, r23	; 0x05
    2688:	93 87       	std	Z+11, r25	; 0x0b
    268a:	82 87       	std	Z+10, r24	; 0x0a
    268c:	04 17       	cp	r16, r20
    268e:	15 07       	cpc	r17, r21
    2690:	26 07       	cpc	r18, r22
    2692:	37 07       	cpc	r19, r23
    2694:	c0 f0       	brcs	.+48     	; 0x26c6 <prvInsertTimerInActiveList+0x54>
    2696:	0c 19       	sub	r16, r12
    2698:	1d 09       	sbc	r17, r13
    269a:	2e 09       	sbc	r18, r14
    269c:	3f 09       	sbc	r19, r15
    269e:	86 85       	ldd	r24, Z+14	; 0x0e
    26a0:	97 85       	ldd	r25, Z+15	; 0x0f
    26a2:	a0 89       	ldd	r26, Z+16	; 0x10
    26a4:	b1 89       	ldd	r27, Z+17	; 0x11
    26a6:	08 17       	cp	r16, r24
    26a8:	19 07       	cpc	r17, r25
    26aa:	2a 07       	cpc	r18, r26
    26ac:	3b 07       	cpc	r19, r27
    26ae:	00 f5       	brcc	.+64     	; 0x26f0 <prvInsertTimerInActiveList+0x7e>
    26b0:	bf 01       	movw	r22, r30
    26b2:	6e 5f       	subi	r22, 0xFE	; 254
    26b4:	7f 4f       	sbci	r23, 0xFF	; 255
    26b6:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxOverflowTimerList>
    26ba:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxOverflowTimerList+0x1>
    26be:	0e 94 d5 04 	call	0x9aa	; 0x9aa <vListInsert>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	18 c0       	rjmp	.+48     	; 0x26f6 <prvInsertTimerInActiveList+0x84>
    26c6:	0c 15       	cp	r16, r12
    26c8:	1d 05       	cpc	r17, r13
    26ca:	2e 05       	cpc	r18, r14
    26cc:	3f 05       	cpc	r19, r15
    26ce:	28 f4       	brcc	.+10     	; 0x26da <prvInsertTimerInActiveList+0x68>
    26d0:	4c 15       	cp	r20, r12
    26d2:	5d 05       	cpc	r21, r13
    26d4:	6e 05       	cpc	r22, r14
    26d6:	7f 05       	cpc	r23, r15
    26d8:	68 f4       	brcc	.+26     	; 0x26f4 <prvInsertTimerInActiveList+0x82>
    26da:	bf 01       	movw	r22, r30
    26dc:	6e 5f       	subi	r22, 0xFE	; 254
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <pxCurrentTimerList>
    26e4:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <pxCurrentTimerList+0x1>
    26e8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <vListInsert>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <prvInsertTimerInActiveList+0x84>
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <prvInsertTimerInActiveList+0x84>
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	1f 91       	pop	r17
    26f8:	0f 91       	pop	r16
    26fa:	ff 90       	pop	r15
    26fc:	ef 90       	pop	r14
    26fe:	df 90       	pop	r13
    2700:	cf 90       	pop	r12
    2702:	08 95       	ret

00002704 <prvCheckForValidListAndQueue>:
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	0f 92       	push	r0
    270a:	80 91 1b 0e 	lds	r24, 0x0E1B	; 0x800e1b <xTimerQueue>
    270e:	90 91 1c 0e 	lds	r25, 0x0E1C	; 0x800e1c <xTimerQueue+0x1>
    2712:	89 2b       	or	r24, r25
    2714:	e9 f4       	brne	.+58     	; 0x2750 <prvCheckForValidListAndQueue+0x4c>
    2716:	8c e2       	ldi	r24, 0x2C	; 44
    2718:	9e e0       	ldi	r25, 0x0E	; 14
    271a:	0e 94 c0 04 	call	0x980	; 0x980 <vListInitialise>
    271e:	81 e2       	ldi	r24, 0x21	; 33
    2720:	9e e0       	ldi	r25, 0x0E	; 14
    2722:	0e 94 c0 04 	call	0x980	; 0x980 <vListInitialise>
    2726:	8c e2       	ldi	r24, 0x2C	; 44
    2728:	9e e0       	ldi	r25, 0x0E	; 14
    272a:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <pxCurrentTimerList+0x1>
    272e:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <pxCurrentTimerList>
    2732:	81 e2       	ldi	r24, 0x21	; 33
    2734:	9e e0       	ldi	r25, 0x0E	; 14
    2736:	90 93 1e 0e 	sts	0x0E1E, r25	; 0x800e1e <pxOverflowTimerList+0x1>
    273a:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <pxOverflowTimerList>
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	67 e0       	ldi	r22, 0x07	; 7
    2742:	8a e0       	ldi	r24, 0x0A	; 10
    2744:	0e 94 82 07 	call	0xf04	; 0xf04 <xQueueGenericCreate>
    2748:	90 93 1c 0e 	sts	0x0E1C, r25	; 0x800e1c <xTimerQueue+0x1>
    274c:	80 93 1b 0e 	sts	0x0E1B, r24	; 0x800e1b <xTimerQueue>
    2750:	0f 90       	pop	r0
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	08 95       	ret

00002756 <xTimerCreateTimerTask>:
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	d3 df       	rcall	.-90     	; 0x2704 <prvCheckForValidListAndQueue>
    275e:	80 91 1b 0e 	lds	r24, 0x0E1B	; 0x800e1b <xTimerQueue>
    2762:	90 91 1c 0e 	lds	r25, 0x0E1C	; 0x800e1c <xTimerQueue+0x1>
    2766:	89 2b       	or	r24, r25
    2768:	89 f0       	breq	.+34     	; 0x278c <xTimerCreateTimerTask+0x36>
    276a:	0f 2e       	mov	r0, r31
    276c:	f9 e1       	ldi	r31, 0x19	; 25
    276e:	ef 2e       	mov	r14, r31
    2770:	fe e0       	ldi	r31, 0x0E	; 14
    2772:	ff 2e       	mov	r15, r31
    2774:	f0 2d       	mov	r31, r0
    2776:	03 e0       	ldi	r16, 0x03	; 3
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 ec       	ldi	r20, 0xC0	; 192
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	66 ea       	ldi	r22, 0xA6	; 166
    2782:	72 e0       	ldi	r23, 0x02	; 2
    2784:	87 ed       	ldi	r24, 0xD7	; 215
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	46 d8       	rcall	.-3956   	; 0x1816 <xTaskCreate>
    278a:	01 c0       	rjmp	.+2      	; 0x278e <xTimerCreateTimerTask+0x38>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	0f 91       	pop	r16
    2790:	ff 90       	pop	r15
    2792:	ef 90       	pop	r14
    2794:	08 95       	ret

00002796 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2796:	8f 92       	push	r8
    2798:	9f 92       	push	r9
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	27 97       	sbiw	r28, 0x07	; 7
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    27be:	e0 91 1b 0e 	lds	r30, 0x0E1B	; 0x800e1b <xTimerQueue>
    27c2:	f0 91 1c 0e 	lds	r31, 0x0E1C	; 0x800e1c <xTimerQueue+0x1>
    27c6:	30 97       	sbiw	r30, 0x00	; 0
    27c8:	81 f1       	breq	.+96     	; 0x282a <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    27ca:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    27cc:	2a 83       	std	Y+2, r18	; 0x02
    27ce:	3b 83       	std	Y+3, r19	; 0x03
    27d0:	4c 83       	std	Y+4, r20	; 0x04
    27d2:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    27d4:	9f 83       	std	Y+7, r25	; 0x07
    27d6:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    27d8:	66 30       	cpi	r22, 0x06	; 6
    27da:	f4 f4       	brge	.+60     	; 0x2818 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    27dc:	9f dd       	rcall	.-1218   	; 0x231c <xTaskGetSchedulerState>
    27de:	82 30       	cpi	r24, 0x02	; 2
    27e0:	69 f4       	brne	.+26     	; 0x27fc <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    27e2:	00 e0       	ldi	r16, 0x00	; 0
    27e4:	a7 01       	movw	r20, r14
    27e6:	96 01       	movw	r18, r12
    27e8:	be 01       	movw	r22, r28
    27ea:	6f 5f       	subi	r22, 0xFF	; 255
    27ec:	7f 4f       	sbci	r23, 0xFF	; 255
    27ee:	80 91 1b 0e 	lds	r24, 0x0E1B	; 0x800e1b <xTimerQueue>
    27f2:	90 91 1c 0e 	lds	r25, 0x0E1C	; 0x800e1c <xTimerQueue+0x1>
    27f6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <xQueueGenericSend>
    27fa:	18 c0       	rjmp	.+48     	; 0x282c <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    27fc:	00 e0       	ldi	r16, 0x00	; 0
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	a9 01       	movw	r20, r18
    2804:	be 01       	movw	r22, r28
    2806:	6f 5f       	subi	r22, 0xFF	; 255
    2808:	7f 4f       	sbci	r23, 0xFF	; 255
    280a:	80 91 1b 0e 	lds	r24, 0x0E1B	; 0x800e1b <xTimerQueue>
    280e:	90 91 1c 0e 	lds	r25, 0x0E1C	; 0x800e1c <xTimerQueue+0x1>
    2812:	0e 94 a5 07 	call	0xf4a	; 0xf4a <xQueueGenericSend>
    2816:	0a c0       	rjmp	.+20     	; 0x282c <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	a8 01       	movw	r20, r16
    281c:	be 01       	movw	r22, r28
    281e:	6f 5f       	subi	r22, 0xFF	; 255
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	cf 01       	movw	r24, r30
    2824:	0e 94 32 08 	call	0x1064	; 0x1064 <xQueueGenericSendFromISR>
    2828:	01 c0       	rjmp	.+2      	; 0x282c <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    282a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    282c:	27 96       	adiw	r28, 0x07	; 7
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	df 90       	pop	r13
    2846:	cf 90       	pop	r12
    2848:	bf 90       	pop	r11
    284a:	af 90       	pop	r10
    284c:	9f 90       	pop	r9
    284e:	8f 90       	pop	r8
    2850:	08 95       	ret

00002852 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2852:	8f 92       	push	r8
    2854:	9f 92       	push	r9
    2856:	af 92       	push	r10
    2858:	bf 92       	push	r11
    285a:	cf 92       	push	r12
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    286a:	3b c0       	rjmp	.+118    	; 0x28e2 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    286c:	07 80       	ldd	r0, Z+7	; 0x07
    286e:	f0 85       	ldd	r31, Z+8	; 0x08
    2870:	e0 2d       	mov	r30, r0
    2872:	80 80       	ld	r8, Z
    2874:	91 80       	ldd	r9, Z+1	; 0x01
    2876:	a2 80       	ldd	r10, Z+2	; 0x02
    2878:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    287a:	c0 85       	ldd	r28, Z+8	; 0x08
    287c:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    287e:	8e 01       	movw	r16, r28
    2880:	0e 5f       	subi	r16, 0xFE	; 254
    2882:	1f 4f       	sbci	r17, 0xFF	; 255
    2884:	c8 01       	movw	r24, r16
    2886:	0e 94 12 05 	call	0xa24	; 0xa24 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    288a:	ec 89       	ldd	r30, Y+20	; 0x14
    288c:	fd 89       	ldd	r31, Y+21	; 0x15
    288e:	ce 01       	movw	r24, r28
    2890:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2892:	8e 89       	ldd	r24, Y+22	; 0x16
    2894:	82 ff       	sbrs	r24, 2
    2896:	25 c0       	rjmp	.+74     	; 0x28e2 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2898:	8e 85       	ldd	r24, Y+14	; 0x0e
    289a:	9f 85       	ldd	r25, Y+15	; 0x0f
    289c:	a8 89       	ldd	r26, Y+16	; 0x10
    289e:	b9 89       	ldd	r27, Y+17	; 0x11
    28a0:	88 0d       	add	r24, r8
    28a2:	99 1d       	adc	r25, r9
    28a4:	aa 1d       	adc	r26, r10
    28a6:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    28a8:	88 16       	cp	r8, r24
    28aa:	99 06       	cpc	r9, r25
    28ac:	aa 06       	cpc	r10, r26
    28ae:	bb 06       	cpc	r11, r27
    28b0:	70 f4       	brcc	.+28     	; 0x28ce <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    28b2:	8a 83       	std	Y+2, r24	; 0x02
    28b4:	9b 83       	std	Y+3, r25	; 0x03
    28b6:	ac 83       	std	Y+4, r26	; 0x04
    28b8:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    28ba:	db 87       	std	Y+11, r29	; 0x0b
    28bc:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    28be:	b8 01       	movw	r22, r16
    28c0:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <pxCurrentTimerList>
    28c4:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <pxCurrentTimerList+0x1>
    28c8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <vListInsert>
    28cc:	0a c0       	rjmp	.+20     	; 0x28e2 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    28ce:	c1 2c       	mov	r12, r1
    28d0:	d1 2c       	mov	r13, r1
    28d2:	76 01       	movw	r14, r12
    28d4:	00 e0       	ldi	r16, 0x00	; 0
    28d6:	10 e0       	ldi	r17, 0x00	; 0
    28d8:	a5 01       	movw	r20, r10
    28da:	94 01       	movw	r18, r8
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	ce 01       	movw	r24, r28
    28e0:	5a df       	rcall	.-332    	; 0x2796 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    28e2:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <pxCurrentTimerList>
    28e6:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <pxCurrentTimerList+0x1>
    28ea:	80 81       	ld	r24, Z
    28ec:	81 11       	cpse	r24, r1
    28ee:	be cf       	rjmp	.-132    	; 0x286c <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    28f0:	80 91 1d 0e 	lds	r24, 0x0E1D	; 0x800e1d <pxOverflowTimerList>
    28f4:	90 91 1e 0e 	lds	r25, 0x0E1E	; 0x800e1e <pxOverflowTimerList+0x1>
    28f8:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <pxCurrentTimerList+0x1>
    28fc:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2900:	f0 93 1e 0e 	sts	0x0E1E, r31	; 0x800e1e <pxOverflowTimerList+0x1>
    2904:	e0 93 1d 0e 	sts	0x0E1D, r30	; 0x800e1d <pxOverflowTimerList>
    }
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
    2918:	bf 90       	pop	r11
    291a:	af 90       	pop	r10
    291c:	9f 90       	pop	r9
    291e:	8f 90       	pop	r8
    2920:	08 95       	ret

00002922 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2922:	cf 92       	push	r12
    2924:	df 92       	push	r13
    2926:	ef 92       	push	r14
    2928:	ff 92       	push	r15
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2930:	0e 94 92 0c 	call	0x1924	; 0x1924 <xTaskGetTickCount>
    2934:	6b 01       	movw	r12, r22
    2936:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2938:	80 91 15 0e 	lds	r24, 0x0E15	; 0x800e15 <xLastTime.2436>
    293c:	90 91 16 0e 	lds	r25, 0x0E16	; 0x800e16 <xLastTime.2436+0x1>
    2940:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <xLastTime.2436+0x2>
    2944:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <xLastTime.2436+0x3>
    2948:	c8 16       	cp	r12, r24
    294a:	d9 06       	cpc	r13, r25
    294c:	ea 06       	cpc	r14, r26
    294e:	fb 06       	cpc	r15, r27
    2950:	20 f4       	brcc	.+8      	; 0x295a <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2952:	7f df       	rcall	.-258    	; 0x2852 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	88 83       	st	Y, r24
    2958:	01 c0       	rjmp	.+2      	; 0x295c <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    295a:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    295c:	c0 92 15 0e 	sts	0x0E15, r12	; 0x800e15 <xLastTime.2436>
    2960:	d0 92 16 0e 	sts	0x0E16, r13	; 0x800e16 <xLastTime.2436+0x1>
    2964:	e0 92 17 0e 	sts	0x0E17, r14	; 0x800e17 <xLastTime.2436+0x2>
    2968:	f0 92 18 0e 	sts	0x0E18, r15	; 0x800e18 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    296c:	c7 01       	movw	r24, r14
    296e:	b6 01       	movw	r22, r12
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	ff 90       	pop	r15
    2976:	ef 90       	pop	r14
    2978:	df 90       	pop	r13
    297a:	cf 90       	pop	r12
    297c:	08 95       	ret

0000297e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    297e:	4f 92       	push	r4
    2980:	5f 92       	push	r5
    2982:	6f 92       	push	r6
    2984:	7f 92       	push	r7
    2986:	8f 92       	push	r8
    2988:	9f 92       	push	r9
    298a:	af 92       	push	r10
    298c:	bf 92       	push	r11
    298e:	cf 92       	push	r12
    2990:	df 92       	push	r13
    2992:	ef 92       	push	r14
    2994:	ff 92       	push	r15
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	4b 01       	movw	r8, r22
    29a0:	5c 01       	movw	r10, r24
    29a2:	29 01       	movw	r4, r18
    29a4:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    29a6:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <pxCurrentTimerList>
    29aa:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <pxCurrentTimerList+0x1>
    29ae:	07 80       	ldd	r0, Z+7	; 0x07
    29b0:	f0 85       	ldd	r31, Z+8	; 0x08
    29b2:	e0 2d       	mov	r30, r0
    29b4:	c0 85       	ldd	r28, Z+8	; 0x08
    29b6:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29b8:	ce 01       	movw	r24, r28
    29ba:	02 96       	adiw	r24, 0x02	; 2
    29bc:	0e 94 12 05 	call	0xa24	; 0xa24 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29c0:	8e 89       	ldd	r24, Y+22	; 0x16
    29c2:	82 ff       	sbrs	r24, 2
    29c4:	1b c0       	rjmp	.+54     	; 0x29fc <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    29c6:	4e 85       	ldd	r20, Y+14	; 0x0e
    29c8:	5f 85       	ldd	r21, Y+15	; 0x0f
    29ca:	68 89       	ldd	r22, Y+16	; 0x10
    29cc:	79 89       	ldd	r23, Y+17	; 0x11
    29ce:	48 0d       	add	r20, r8
    29d0:	59 1d       	adc	r21, r9
    29d2:	6a 1d       	adc	r22, r10
    29d4:	7b 1d       	adc	r23, r11
    29d6:	75 01       	movw	r14, r10
    29d8:	64 01       	movw	r12, r8
    29da:	93 01       	movw	r18, r6
    29dc:	82 01       	movw	r16, r4
    29de:	ce 01       	movw	r24, r28
    29e0:	48 de       	rcall	.-880    	; 0x2672 <prvInsertTimerInActiveList>
    29e2:	88 23       	and	r24, r24
    29e4:	69 f0       	breq	.+26     	; 0x2a00 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    29e6:	c1 2c       	mov	r12, r1
    29e8:	d1 2c       	mov	r13, r1
    29ea:	76 01       	movw	r14, r12
    29ec:	00 e0       	ldi	r16, 0x00	; 0
    29ee:	10 e0       	ldi	r17, 0x00	; 0
    29f0:	a5 01       	movw	r20, r10
    29f2:	94 01       	movw	r18, r8
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	ce 01       	movw	r24, r28
    29f8:	ce de       	rcall	.-612    	; 0x2796 <xTimerGenericCommand>
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    29fc:	8e 7f       	andi	r24, 0xFE	; 254
    29fe:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a00:	ec 89       	ldd	r30, Y+20	; 0x14
    2a02:	fd 89       	ldd	r31, Y+21	; 0x15
    2a04:	ce 01       	movw	r24, r28
    2a06:	19 95       	eicall
    }
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
    2a18:	bf 90       	pop	r11
    2a1a:	af 90       	pop	r10
    2a1c:	9f 90       	pop	r9
    2a1e:	8f 90       	pop	r8
    2a20:	7f 90       	pop	r7
    2a22:	6f 90       	pop	r6
    2a24:	5f 90       	pop	r5
    2a26:	4f 90       	pop	r4
    2a28:	08 95       	ret

00002a2a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2a2a:	8f 92       	push	r8
    2a2c:	9f 92       	push	r9
    2a2e:	af 92       	push	r10
    2a30:	bf 92       	push	r11
    2a32:	cf 92       	push	r12
    2a34:	df 92       	push	r13
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	1f 93       	push	r17
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	1f 92       	push	r1
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	6b 01       	movw	r12, r22
    2a48:	7c 01       	movw	r14, r24
    2a4a:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2a4c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2a50:	ce 01       	movw	r24, r28
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	66 df       	rcall	.-308    	; 0x2922 <prvSampleTimeNow>
    2a56:	4b 01       	movw	r8, r22
    2a58:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	81 11       	cpse	r24, r1
    2a5e:	2b c0       	rjmp	.+86     	; 0x2ab6 <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2a60:	11 11       	cpse	r17, r1
    2a62:	0c c0       	rjmp	.+24     	; 0x2a7c <prvProcessTimerOrBlockTask+0x52>
    2a64:	8c 14       	cp	r8, r12
    2a66:	9d 04       	cpc	r9, r13
    2a68:	ae 04       	cpc	r10, r14
    2a6a:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2a6c:	38 f0       	brcs	.+14     	; 0x2a7c <prvProcessTimerOrBlockTask+0x52>
    2a6e:	94 d8       	rcall	.-3800   	; 0x1b98 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2a70:	a5 01       	movw	r20, r10
    2a72:	94 01       	movw	r18, r8
    2a74:	c7 01       	movw	r24, r14
    2a76:	b6 01       	movw	r22, r12
    2a78:	82 df       	rcall	.-252    	; 0x297e <prvProcessExpiredTimer>
    2a7a:	1e c0       	rjmp	.+60     	; 0x2ab8 <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2a7c:	11 23       	and	r17, r17
    2a7e:	41 f0       	breq	.+16     	; 0x2a90 <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2a80:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <pxOverflowTimerList>
    2a84:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <pxOverflowTimerList+0x1>
    2a88:	80 81       	ld	r24, Z
    2a8a:	11 e0       	ldi	r17, 0x01	; 1
    2a8c:	81 11       	cpse	r24, r1
    2a8e:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2a90:	b7 01       	movw	r22, r14
    2a92:	a6 01       	movw	r20, r12
    2a94:	48 19       	sub	r20, r8
    2a96:	59 09       	sbc	r21, r9
    2a98:	6a 09       	sbc	r22, r10
    2a9a:	7b 09       	sbc	r23, r11
    2a9c:	21 2f       	mov	r18, r17
    2a9e:	80 91 1b 0e 	lds	r24, 0x0E1B	; 0x800e1b <xTimerQueue>
    2aa2:	90 91 1c 0e 	lds	r25, 0x0E1C	; 0x800e1c <xTimerQueue+0x1>
    2aa6:	0e 94 a6 09 	call	0x134c	; 0x134c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2aaa:	76 d8       	rcall	.-3860   	; 0x1b98 <xTaskResumeAll>
    2aac:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2aae:	04 c0       	rjmp	.+8      	; 0x2ab8 <prvProcessTimerOrBlockTask+0x8e>
    2ab0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <prvProcessTimerOrBlockTask+0x8e>
    2ab6:	70 d8       	rcall	.-3872   	; 0x1b98 <xTaskResumeAll>
            }
        }
    }
    2ab8:	0f 90       	pop	r0
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	1f 91       	pop	r17
    2ac0:	ff 90       	pop	r15
    2ac2:	ef 90       	pop	r14
    2ac4:	df 90       	pop	r13
    2ac6:	cf 90       	pop	r12
    2ac8:	bf 90       	pop	r11
    2aca:	af 90       	pop	r10
    2acc:	9f 90       	pop	r9
    2ace:	8f 90       	pop	r8
    2ad0:	08 95       	ret

00002ad2 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2ad2:	af 92       	push	r10
    2ad4:	bf 92       	push	r11
    2ad6:	cf 92       	push	r12
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	28 97       	sbiw	r28, 0x08	; 8
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2af6:	82 c0       	rjmp	.+260    	; 0x2bfc <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	88 23       	and	r24, r24
    2afc:	0c f4       	brge	.+2      	; 0x2b00 <prvProcessReceivedCommands+0x2e>
    2afe:	7e c0       	rjmp	.+252    	; 0x2bfc <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2b00:	ae 80       	ldd	r10, Y+6	; 0x06
    2b02:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2b04:	d5 01       	movw	r26, r10
    2b06:	1c 96       	adiw	r26, 0x0c	; 12
    2b08:	8d 91       	ld	r24, X+
    2b0a:	9c 91       	ld	r25, X
    2b0c:	1d 97       	sbiw	r26, 0x0d	; 13
    2b0e:	89 2b       	or	r24, r25
    2b10:	21 f0       	breq	.+8      	; 0x2b1a <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b12:	c5 01       	movw	r24, r10
    2b14:	02 96       	adiw	r24, 0x02	; 2
    2b16:	0e 94 12 05 	call	0xa24	; 0xa24 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	08 96       	adiw	r24, 0x08	; 8
    2b1e:	01 df       	rcall	.-510    	; 0x2922 <prvSampleTimeNow>
    2b20:	8b 01       	movw	r16, r22
    2b22:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2b24:	e9 81       	ldd	r30, Y+1	; 0x01
    2b26:	0e 2e       	mov	r0, r30
    2b28:	00 0c       	add	r0, r0
    2b2a:	ff 0b       	sbc	r31, r31
    2b2c:	ea 30       	cpi	r30, 0x0A	; 10
    2b2e:	f1 05       	cpc	r31, r1
    2b30:	08 f0       	brcs	.+2      	; 0x2b34 <prvProcessReceivedCommands+0x62>
    2b32:	64 c0       	rjmp	.+200    	; 0x2bfc <prvProcessReceivedCommands+0x12a>
    2b34:	88 27       	eor	r24, r24
    2b36:	ee 58       	subi	r30, 0x8E	; 142
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b3c:	0c 94 36 20 	jmp	0x406c	; 0x406c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2b40:	f5 01       	movw	r30, r10
    2b42:	86 89       	ldd	r24, Z+22	; 0x16
    2b44:	81 60       	ori	r24, 0x01	; 1
    2b46:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2b48:	ca 80       	ldd	r12, Y+2	; 0x02
    2b4a:	db 80       	ldd	r13, Y+3	; 0x03
    2b4c:	ec 80       	ldd	r14, Y+4	; 0x04
    2b4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b50:	46 85       	ldd	r20, Z+14	; 0x0e
    2b52:	57 85       	ldd	r21, Z+15	; 0x0f
    2b54:	60 89       	ldd	r22, Z+16	; 0x10
    2b56:	71 89       	ldd	r23, Z+17	; 0x11
    2b58:	4c 0d       	add	r20, r12
    2b5a:	5d 1d       	adc	r21, r13
    2b5c:	6e 1d       	adc	r22, r14
    2b5e:	7f 1d       	adc	r23, r15
    2b60:	c5 01       	movw	r24, r10
    2b62:	87 dd       	rcall	.-1266   	; 0x2672 <prvInsertTimerInActiveList>
    2b64:	88 23       	and	r24, r24
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <prvProcessReceivedCommands+0x98>
    2b68:	49 c0       	rjmp	.+146    	; 0x2bfc <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b6a:	d5 01       	movw	r26, r10
    2b6c:	54 96       	adiw	r26, 0x14	; 20
    2b6e:	ed 91       	ld	r30, X+
    2b70:	fc 91       	ld	r31, X
    2b72:	55 97       	sbiw	r26, 0x15	; 21
    2b74:	c5 01       	movw	r24, r10
    2b76:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b78:	f5 01       	movw	r30, r10
    2b7a:	86 89       	ldd	r24, Z+22	; 0x16
    2b7c:	82 ff       	sbrs	r24, 2
    2b7e:	3e c0       	rjmp	.+124    	; 0x2bfc <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2b80:	4a 81       	ldd	r20, Y+2	; 0x02
    2b82:	5b 81       	ldd	r21, Y+3	; 0x03
    2b84:	6c 81       	ldd	r22, Y+4	; 0x04
    2b86:	7d 81       	ldd	r23, Y+5	; 0x05
    2b88:	86 85       	ldd	r24, Z+14	; 0x0e
    2b8a:	97 85       	ldd	r25, Z+15	; 0x0f
    2b8c:	a0 89       	ldd	r26, Z+16	; 0x10
    2b8e:	b1 89       	ldd	r27, Z+17	; 0x11
    2b90:	9a 01       	movw	r18, r20
    2b92:	ab 01       	movw	r20, r22
    2b94:	28 0f       	add	r18, r24
    2b96:	39 1f       	adc	r19, r25
    2b98:	4a 1f       	adc	r20, r26
    2b9a:	5b 1f       	adc	r21, r27
    2b9c:	c1 2c       	mov	r12, r1
    2b9e:	d1 2c       	mov	r13, r1
    2ba0:	76 01       	movw	r14, r12
    2ba2:	00 e0       	ldi	r16, 0x00	; 0
    2ba4:	10 e0       	ldi	r17, 0x00	; 0
    2ba6:	60 e0       	ldi	r22, 0x00	; 0
    2ba8:	c5 01       	movw	r24, r10
    2baa:	f5 dd       	rcall	.-1046   	; 0x2796 <xTimerGenericCommand>
    2bac:	27 c0       	rjmp	.+78     	; 0x2bfc <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2bae:	d5 01       	movw	r26, r10
    2bb0:	56 96       	adiw	r26, 0x16	; 22
    2bb2:	8c 91       	ld	r24, X
    2bb4:	56 97       	sbiw	r26, 0x16	; 22
    2bb6:	8e 7f       	andi	r24, 0xFE	; 254
    2bb8:	56 96       	adiw	r26, 0x16	; 22
    2bba:	8c 93       	st	X, r24
                        break;
    2bbc:	1f c0       	rjmp	.+62     	; 0x2bfc <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2bbe:	f5 01       	movw	r30, r10
    2bc0:	86 89       	ldd	r24, Z+22	; 0x16
    2bc2:	81 60       	ori	r24, 0x01	; 1
    2bc4:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2bc6:	4a 81       	ldd	r20, Y+2	; 0x02
    2bc8:	5b 81       	ldd	r21, Y+3	; 0x03
    2bca:	6c 81       	ldd	r22, Y+4	; 0x04
    2bcc:	7d 81       	ldd	r23, Y+5	; 0x05
    2bce:	46 87       	std	Z+14, r20	; 0x0e
    2bd0:	57 87       	std	Z+15, r21	; 0x0f
    2bd2:	60 8b       	std	Z+16, r22	; 0x10
    2bd4:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2bd6:	40 0f       	add	r20, r16
    2bd8:	51 1f       	adc	r21, r17
    2bda:	62 1f       	adc	r22, r18
    2bdc:	73 1f       	adc	r23, r19
    2bde:	68 01       	movw	r12, r16
    2be0:	79 01       	movw	r14, r18
    2be2:	c5 01       	movw	r24, r10
    2be4:	46 dd       	rcall	.-1396   	; 0x2672 <prvInsertTimerInActiveList>
                        break;
    2be6:	0a c0       	rjmp	.+20     	; 0x2bfc <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2be8:	f5 01       	movw	r30, r10
    2bea:	86 89       	ldd	r24, Z+22	; 0x16
    2bec:	81 fd       	sbrc	r24, 1
    2bee:	04 c0       	rjmp	.+8      	; 0x2bf8 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2bf0:	c5 01       	movw	r24, r10
    2bf2:	0e 94 84 04 	call	0x908	; 0x908 <vPortFree>
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2bf8:	8e 7f       	andi	r24, 0xFE	; 254
    2bfa:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	a9 01       	movw	r20, r18
    2c02:	be 01       	movw	r22, r28
    2c04:	6f 5f       	subi	r22, 0xFF	; 255
    2c06:	7f 4f       	sbci	r23, 0xFF	; 255
    2c08:	80 91 1b 0e 	lds	r24, 0x0E1B	; 0x800e1b <xTimerQueue>
    2c0c:	90 91 1c 0e 	lds	r25, 0x0E1C	; 0x800e1c <xTimerQueue+0x1>
    2c10:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <xQueueReceive>
    2c14:	81 11       	cpse	r24, r1
    2c16:	70 cf       	rjmp	.-288    	; 0x2af8 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2c18:	28 96       	adiw	r28, 0x08	; 8
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	1f 91       	pop	r17
    2c2a:	0f 91       	pop	r16
    2c2c:	ff 90       	pop	r15
    2c2e:	ef 90       	pop	r14
    2c30:	df 90       	pop	r13
    2c32:	cf 90       	pop	r12
    2c34:	bf 90       	pop	r11
    2c36:	af 90       	pop	r10
    2c38:	08 95       	ret

00002c3a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2c3a:	08 95       	ret

00002c3c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2c3c:	84 b1       	in	r24, 0x04	; 4
    2c3e:	80 68       	ori	r24, 0x80	; 128
    2c40:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2c42:	85 b1       	in	r24, 0x05	; 5
    2c44:	80 68       	ori	r24, 0x80	; 128
    2c46:	85 b9       	out	0x05, r24	; 5
    2c48:	08 95       	ret

00002c4a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2c4a:	83 b1       	in	r24, 0x03	; 3
    2c4c:	80 68       	ori	r24, 0x80	; 128
    2c4e:	83 b9       	out	0x03, r24	; 3
    2c50:	08 95       	ret

00002c52 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2c52:	f4 df       	rcall	.-24     	; 0x2c3c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c54:	2f ef       	ldi	r18, 0xFF	; 255
    2c56:	80 e7       	ldi	r24, 0x70	; 112
    2c58:	92 e0       	ldi	r25, 0x02	; 2
    2c5a:	21 50       	subi	r18, 0x01	; 1
    2c5c:	80 40       	sbci	r24, 0x00	; 0
    2c5e:	90 40       	sbci	r25, 0x00	; 0
    2c60:	e1 f7       	brne	.-8      	; 0x2c5a <vApplicationMallocFailedHook+0x8>
    2c62:	00 c0       	rjmp	.+0      	; 0x2c64 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2c64:	00 00       	nop
    2c66:	f1 df       	rcall	.-30     	; 0x2c4a <prvBlinkMainLed>
    2c68:	f5 cf       	rjmp	.-22     	; 0x2c54 <vApplicationMallocFailedHook+0x2>

00002c6a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2c6a:	e8 df       	rcall	.-48     	; 0x2c3c <prvSetMainLedOn>
    2c6c:	2f ef       	ldi	r18, 0xFF	; 255
    2c6e:	87 ea       	ldi	r24, 0xA7	; 167
    2c70:	91 e6       	ldi	r25, 0x61	; 97
    2c72:	21 50       	subi	r18, 0x01	; 1
    2c74:	80 40       	sbci	r24, 0x00	; 0
    2c76:	90 40       	sbci	r25, 0x00	; 0
    2c78:	e1 f7       	brne	.-8      	; 0x2c72 <vApplicationStackOverflowHook+0x8>
    2c7a:	00 c0       	rjmp	.+0      	; 0x2c7c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2c7c:	00 00       	nop
    2c7e:	e5 df       	rcall	.-54     	; 0x2c4a <prvBlinkMainLed>
    2c80:	f5 cf       	rjmp	.-22     	; 0x2c6c <vApplicationStackOverflowHook+0x2>

00002c82 <sensorDataPackageHandler_setCO2_value>:
    2c82:	90 93 65 0e 	sts	0x0E65, r25	; 0x800e65 <co2_value+0x1>
    2c86:	80 93 64 0e 	sts	0x0E64, r24	; 0x800e64 <co2_value>
    2c8a:	08 95       	ret

00002c8c <sensorDataPackageHandler_setTemp_value>:
    2c8c:	90 93 60 0e 	sts	0x0E60, r25	; 0x800e60 <temp_value+0x1>
    2c90:	80 93 5f 0e 	sts	0x0E5F, r24	; 0x800e5f <temp_value>
    2c94:	08 95       	ret

00002c96 <sensorDataPackageHandler_setHumidity_value>:
    2c96:	90 93 63 0e 	sts	0x0E63, r25	; 0x800e63 <hum_value+0x1>
    2c9a:	80 93 62 0e 	sts	0x0E62, r24	; 0x800e62 <hum_value>
    2c9e:	08 95       	ret

00002ca0 <initializeTempAndHumiditySemaphore>:
  EventGroupHandle_t dataEventGroup;
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
    2ca0:	0f 93       	push	r16
	tempHumSemaphore = xSemaphoreCreateBinary();
    2ca2:	43 e0       	ldi	r20, 0x03	; 3
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	0e 94 82 07 	call	0xf04	; 0xf04 <xQueueGenericCreate>
    2cac:	90 93 6a 0e 	sts	0x0E6A, r25	; 0x800e6a <tempHumSemaphore+0x1>
    2cb0:	80 93 69 0e 	sts	0x0E69, r24	; 0x800e69 <tempHumSemaphore>
	xSemaphoreGive(tempHumSemaphore);
    2cb4:	00 e0       	ldi	r16, 0x00	; 0
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	a9 01       	movw	r20, r18
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	70 e0       	ldi	r23, 0x00	; 0
    2cc0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <xQueueGenericSend>
}
    2cc4:	0f 91       	pop	r16
    2cc6:	08 95       	ret

00002cc8 <initializeQueue>:

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	62 e0       	ldi	r22, 0x02	; 2
    2ccc:	83 e0       	ldi	r24, 0x03	; 3
    2cce:	0e 94 82 07 	call	0xf04	; 0xf04 <xQueueGenericCreate>
    2cd2:	90 93 68 0e 	sts	0x0E68, r25	; 0x800e68 <sensorDataQueue+0x1>
    2cd6:	80 93 67 0e 	sts	0x0E67, r24	; 0x800e67 <sensorDataQueue>
    2cda:	08 95       	ret

00002cdc <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    2cdc:	0e 94 27 02 	call	0x44e	; 0x44e <xEventGroupCreate>
    2ce0:	90 93 6e 0e 	sts	0x0E6E, r25	; 0x800e6e <dataEventGroup+0x1>
    2ce4:	80 93 6d 0e 	sts	0x0E6D, r24	; 0x800e6d <dataEventGroup>
    2ce8:	08 95       	ret

00002cea <initializeUplinkMessageBuffer>:
}

void initializeUplinkMessageBuffer()
{
	uplinkMessageBuffer = xMessageBufferCreate(100);
    2cea:	41 e0       	ldi	r20, 0x01	; 1
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	84 e6       	ldi	r24, 0x64	; 100
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xStreamBufferGenericCreate>
    2cf8:	90 93 70 0e 	sts	0x0E70, r25	; 0x800e70 <uplinkMessageBuffer+0x1>
    2cfc:	80 93 6f 0e 	sts	0x0E6F, r24	; 0x800e6f <uplinkMessageBuffer>
    2d00:	08 95       	ret

00002d02 <initializeTempAndHumDriver>:
#include "TempAndHum.h"
#include "Setup.h"

void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    2d02:	e3 d0       	rcall	.+454    	; 0x2eca <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    2d04:	81 11       	cpse	r24, r1
    2d06:	05 c0       	rjmp	.+10     	; 0x2d12 <initializeTempAndHumDriver+0x10>
		{
			printf("Temp and Hum Driver Initialized ok\n");
    2d08:	8e ea       	ldi	r24, 0xAE	; 174
    2d0a:	92 e0       	ldi	r25, 0x02	; 2
    2d0c:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <puts>
    2d10:	08 95       	ret
		}
		
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    2d12:	81 ed       	ldi	r24, 0xD1	; 209
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <puts>
    2d1a:	08 95       	ret

00002d1c <measureTempAndHum>:
		}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    2d1c:	ed d0       	rcall	.+474    	; 0x2ef8 <hih8120_wakeup>
    2d1e:	88 23       	and	r24, r24
    2d20:	21 f0       	breq	.+8      	; 0x2d2a <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    2d22:	8b ee       	ldi	r24, 0xEB	; 235
    2d24:	92 e0       	ldi	r25, 0x02	; 2
    2d26:	0e 94 a0 21 	call	0x4340	; 0x4340 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    2d2a:	63 e0       	ldi	r22, 0x03	; 3
    2d2c:	70 e0       	ldi	r23, 0x00	; 0
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
	
	if ( HIH8120_OK !=  hih8120_measure() )
    2d32:	0e d8       	rcall	.-4068   	; 0x1d50 <vTaskDelay>
    2d34:	f5 d0       	rcall	.+490    	; 0x2f20 <hih8120_measure>
    2d36:	88 23       	and	r24, r24
    2d38:	21 f0       	breq	.+8      	; 0x2d42 <measureTempAndHum+0x26>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    2d3a:	8b e0       	ldi	r24, 0x0B	; 11
    2d3c:	93 e0       	ldi	r25, 0x03	; 3
    2d3e:	0e 94 a0 21 	call	0x4340	; 0x4340 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    2d42:	61 e0       	ldi	r22, 0x01	; 1
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	02 c8       	rjmp	.-4092   	; 0x1d50 <vTaskDelay>
    2d4c:	08 95       	ret

00002d4e <TempAndHumTask>:
	
}
void TempAndHumTask(void* pvpParameter)
{
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <TempAndHumTask+0x6>
    2d54:	1f 92       	push	r1
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	
	while(1)
	{
		uint16_t Temp = 0;
    2d5a:	1c 82       	std	Y+4, r1	; 0x04
    2d5c:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t Humidity = 0;
    2d5e:	1a 82       	std	Y+2, r1	; 0x02
    2d60:	19 82       	std	Y+1, r1	; 0x01
		printf("TEMP TASK \n");
    2d62:	80 e3       	ldi	r24, 0x30	; 48
    2d64:	93 e0       	ldi	r25, 0x03	; 3
    2d66:	0e 94 a0 21 	call	0x4340	; 0x4340 <puts>
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    2d6a:	4f ef       	ldi	r20, 0xFF	; 255
    2d6c:	5f ef       	ldi	r21, 0xFF	; 255
    2d6e:	ba 01       	movw	r22, r20
    2d70:	80 91 69 0e 	lds	r24, 0x0E69	; 0x800e69 <tempHumSemaphore>
    2d74:	90 91 6a 0e 	lds	r25, 0x0E6A	; 0x800e6a <tempHumSemaphore+0x1>
    2d78:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <xQueueSemaphoreTake>
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <TempAndHumTask+0x34>
    2d80:	43 c0       	rjmp	.+134    	; 0x2e08 <TempAndHumTask+0xba>
		{
			measureTempAndHum();
    2d82:	cc df       	rcall	.-104    	; 0x2d1c <measureTempAndHum>
			Temp = hih8120_getTemperature_x10();
    2d84:	10 d1       	rcall	.+544    	; 0x2fa6 <hih8120_getTemperature_x10>
    2d86:	9c 83       	std	Y+4, r25	; 0x04
    2d88:	8b 83       	std	Y+3, r24	; 0x03
			Humidity = hih8120_getHumidityPercent_x10();
    2d8a:	ed d0       	rcall	.+474    	; 0x2f66 <hih8120_getHumidityPercent_x10>
    2d8c:	9a 83       	std	Y+2, r25	; 0x02
    2d8e:	89 83       	std	Y+1, r24	; 0x01
    2d90:	8c 81       	ldd	r24, Y+4	; 0x04
			printf("Temperature: %d\n",Temp);
    2d92:	8f 93       	push	r24
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	8f 93       	push	r24
    2d98:	8b e3       	ldi	r24, 0x3B	; 59
    2d9a:	93 e0       	ldi	r25, 0x03	; 3
    2d9c:	9f 93       	push	r25
    2d9e:	8f 93       	push	r24
    2da0:	0e 94 8d 21 	call	0x431a	; 0x431a <printf>
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
			printf("Humidity: %d\n",Humidity);
    2da6:	8f 93       	push	r24
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	8f 93       	push	r24
    2dac:	8c e4       	ldi	r24, 0x4C	; 76
    2dae:	93 e0       	ldi	r25, 0x03	; 3
    2db0:	9f 93       	push	r25
    2db2:	8f 93       	push	r24
    2db4:	0e 94 8d 21 	call	0x431a	; 0x431a <printf>
    2db8:	00 e0       	ldi	r16, 0x00	; 0
			xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
    2dba:	2f ef       	ldi	r18, 0xFF	; 255
    2dbc:	3f ef       	ldi	r19, 0xFF	; 255
    2dbe:	a9 01       	movw	r20, r18
    2dc0:	be 01       	movw	r22, r28
    2dc2:	6d 5f       	subi	r22, 0xFD	; 253
    2dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc6:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <sensorDataQueue>
    2dca:	90 91 68 0e 	lds	r25, 0x0E68	; 0x800e68 <sensorDataQueue+0x1>
    2dce:	0e 94 a5 07 	call	0xf4a	; 0xf4a <xQueueGenericSend>
    2dd2:	2f ef       	ldi	r18, 0xFF	; 255
			xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
    2dd4:	3f ef       	ldi	r19, 0xFF	; 255
    2dd6:	a9 01       	movw	r20, r18
    2dd8:	be 01       	movw	r22, r28
    2dda:	6f 5f       	subi	r22, 0xFF	; 255
    2ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dde:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <sensorDataQueue>
    2de2:	90 91 68 0e 	lds	r25, 0x0E68	; 0x800e68 <sensorDataQueue+0x1>
    2de6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <xQueueGenericSend>
    2dea:	42 e0       	ldi	r20, 0x02	; 2
			//printf("TEMP DATA SENT\n");
			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	70 e0       	ldi	r23, 0x00	; 0
    2df2:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <dataEventGroup>
    2df6:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <dataEventGroup+0x1>
    2dfa:	0e 94 da 02 	call	0x5b4	; 0x5b4 <xEventGroupSetBits>
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	f8 94       	cli
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	cd bf       	out	0x3d, r28	; 61
    2e08:	6a e0       	ldi	r22, 0x0A	; 10
			//printf("BIT SET\n");
		}
		vTaskDelay(10);
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskDelay>
    2e14:	a2 cf       	rjmp	.-188    	; 0x2d5a <TempAndHumTask+0xc>

00002e16 <createTempAndHumTask>:
		
	}
    2e16:	ef 92       	push	r14
}

void createTempAndHumTask()
{
    2e18:	ff 92       	push	r15
    2e1a:	0f 93       	push	r16
	initializeTempAndHumDriver();
    2e1c:	72 df       	rcall	.-284    	; 0x2d02 <initializeTempAndHumDriver>
		xTaskCreate(
    2e1e:	e1 2c       	mov	r14, r1
    2e20:	f1 2c       	mov	r15, r1
    2e22:	01 e0       	ldi	r16, 0x01	; 1
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 ec       	ldi	r20, 0xC0	; 192
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	6a e5       	ldi	r22, 0x5A	; 90
    2e2e:	73 e0       	ldi	r23, 0x03	; 3
    2e30:	87 ea       	ldi	r24, 0xA7	; 167
    2e32:	96 e1       	ldi	r25, 0x16	; 22
    2e34:	0e 94 0b 0c 	call	0x1816	; 0x1816 <xTaskCreate>
		,  "TempAndHumTask"  // A name just for humans
		,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}
    2e38:	0f 91       	pop	r16
    2e3a:	ff 90       	pop	r15
    2e3c:	ef 90       	pop	r14
    2e3e:	08 95       	ret

00002e40 <initializeUsedData>:
#include <status_leds.h>


void initializeUsedData()
{
	initializeEventGroup();
    2e40:	4d df       	rcall	.-358    	; 0x2cdc <initializeEventGroup>
	initializeQueue();
    2e42:	42 df       	rcall	.-380    	; 0x2cc8 <initializeQueue>
	initializeTempAndHumiditySemaphore();
    2e44:	2d df       	rcall	.-422    	; 0x2ca0 <initializeTempAndHumiditySemaphore>
    2e46:	51 cf       	rjmp	.-350    	; 0x2cea <initializeUplinkMessageBuffer>
	initializeUplinkMessageBuffer();
    2e48:	08 95       	ret

00002e4a <create_tasks>:
    2e4a:	e5 df       	rcall	.-54     	; 0x2e16 <createTempAndHumTask>
    2e4c:	0e 94 ed 01 	call	0x3da	; 0x3da <createCO2Task>
/*-----------------------------------------------------------*/
void create_tasks(void)
{		
		createTempAndHumTask();
		createCO2Task();
		createApplicationTask();	
    2e50:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <createApplicationTask>
    2e54:	08 95       	ret

00002e56 <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	15 d5       	rcall	.+2602   	; 0x3884 <stdio_initialise>
	initializeUsedData();
    2e5a:	f2 df       	rcall	.-28     	; 0x2e40 <initializeUsedData>
	create_tasks();
    2e5c:	f6 cf       	rjmp	.-20     	; 0x2e4a <create_tasks>
    2e5e:	08 95       	ret

00002e60 <main>:
    2e60:	fa df       	rcall	.-12     	; 0x2e56 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Stttttarted!!\n");
    2e62:	89 e6       	ldi	r24, 0x69	; 105
    2e64:	93 e0       	ldi	r25, 0x03	; 3
    2e66:	0e 94 a0 21 	call	0x4340	; 0x4340 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2e6a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <vTaskStartScheduler>
    2e6e:	ff cf       	rjmp	.-2      	; 0x2e6e <main+0xe>

00002e70 <_hihTwiCallback>:
    2e70:	65 30       	cpi	r22, 0x05	; 5
    2e72:	f1 f4       	brne	.+60     	; 0x2eb0 <_hihTwiCallback+0x40>
    2e74:	fa 01       	movw	r30, r20
    2e76:	80 81       	ld	r24, Z
    2e78:	8f 73       	andi	r24, 0x3F	; 63
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	98 2f       	mov	r25, r24
    2e7e:	88 27       	eor	r24, r24
    2e80:	21 81       	ldd	r18, Z+1	; 0x01
    2e82:	82 2b       	or	r24, r18
    2e84:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2e88:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	f0 e4       	ldi	r31, 0x40	; 64
    2e90:	8f 9f       	mul	r24, r31
    2e92:	c0 01       	movw	r24, r0
    2e94:	11 24       	eor	r1, r1
    2e96:	fa 01       	movw	r30, r20
    2e98:	23 81       	ldd	r18, Z+3	; 0x03
    2e9a:	26 95       	lsr	r18
    2e9c:	26 95       	lsr	r18
    2e9e:	82 2b       	or	r24, r18
    2ea0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2ea4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	80 93 37 0e 	sts	0x0E37, r24	; 0x800e37 <_measuringIsReady>
    2eae:	08 95       	ret
    2eb0:	64 30       	cpi	r22, 0x04	; 4
    2eb2:	51 f0       	breq	.+20     	; 0x2ec8 <_hihTwiCallback+0x58>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e4       	ldi	r25, 0x40	; 64
    2eb8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2ebc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2ec0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2ec4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2ec8:	08 95       	ret

00002eca <hih8120_initialise>:
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    2ece:	08 e3       	ldi	r16, 0x38	; 56
    2ed0:	17 e1       	ldi	r17, 0x17	; 23
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	34 e2       	ldi	r19, 0x24	; 36
    2ed6:	44 ef       	ldi	r20, 0xF4	; 244
    2ed8:	50 e0       	ldi	r21, 0x00	; 0
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	87 e2       	ldi	r24, 0x27	; 39
    2ede:	0c d5       	rcall	.+2584   	; 0x38f8 <twiCreate>
    2ee0:	90 93 39 0e 	sts	0x0E39, r25	; 0x800e39 <_hih8120Handler+0x1>
    2ee4:	80 93 38 0e 	sts	0x0E38, r24	; 0x800e38 <_hih8120Handler>
    2ee8:	21 e0       	ldi	r18, 0x01	; 1
    2eea:	89 2b       	or	r24, r25
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <hih8120_initialise+0x26>
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	82 2f       	mov	r24, r18
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	08 95       	ret

00002ef8 <hih8120_wakeup>:
    2ef8:	80 91 38 0e 	lds	r24, 0x0E38	; 0x800e38 <_hih8120Handler>
    2efc:	90 91 39 0e 	lds	r25, 0x0E39	; 0x800e39 <_hih8120Handler+0x1>
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	51 f0       	breq	.+20     	; 0x2f18 <hih8120_wakeup+0x20>
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	47 d5       	rcall	.+2702   	; 0x399a <twiTransmit>
    2f0c:	84 30       	cpi	r24, 0x04	; 4
    2f0e:	31 f4       	brne	.+12     	; 0x2f1c <hih8120_wakeup+0x24>
    2f10:	10 92 37 0e 	sts	0x0E37, r1	; 0x800e37 <_measuringIsReady>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	08 95       	ret
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	08 95       	ret
    2f1c:	83 e0       	ldi	r24, 0x03	; 3
    2f1e:	08 95       	ret

00002f20 <hih8120_measure>:
    2f20:	80 91 38 0e 	lds	r24, 0x0E38	; 0x800e38 <_hih8120Handler>
    2f24:	90 91 39 0e 	lds	r25, 0x0E39	; 0x800e39 <_hih8120Handler+0x1>
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	31 f0       	breq	.+12     	; 0x2f38 <hih8120_measure+0x18>
    2f2c:	64 e0       	ldi	r22, 0x04	; 4
    2f2e:	81 d5       	rcall	.+2818   	; 0x3a32 <twiReceive>
    2f30:	85 30       	cpi	r24, 0x05	; 5
    2f32:	21 f0       	breq	.+8      	; 0x2f3c <hih8120_measure+0x1c>
    2f34:	83 e0       	ldi	r24, 0x03	; 3
    2f36:	08 95       	ret
    2f38:	82 e0       	ldi	r24, 0x02	; 2
    2f3a:	08 95       	ret
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	08 95       	ret

00002f40 <hih8120_getHumidity>:
    2f40:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    2f44:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	7c d7       	rcall	.+3832   	; 0x3e46 <__floatunsisf>
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	48 ec       	ldi	r20, 0xC8	; 200
    2f54:	52 e4       	ldi	r21, 0x42	; 66
    2f56:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__mulsf3>
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	38 ef       	ldi	r19, 0xF8	; 248
    2f5e:	4f e7       	ldi	r20, 0x7F	; 127
    2f60:	56 e4       	ldi	r21, 0x46	; 70
    2f62:	d8 c6       	rjmp	.+3504   	; 0x3d14 <__divsf3>
    2f64:	08 95       	ret

00002f66 <hih8120_getHumidityPercent_x10>:
    2f66:	ec df       	rcall	.-40     	; 0x2f40 <hih8120_getHumidity>
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e2       	ldi	r20, 0x20	; 32
    2f6e:	51 e4       	ldi	r21, 0x41	; 65
    2f70:	f8 d7       	rcall	.+4080   	; 0x3f62 <__mulsf3>
    2f72:	3d d7       	rcall	.+3706   	; 0x3dee <__fixunssfsi>
    2f74:	cb 01       	movw	r24, r22
    2f76:	08 95       	ret

00002f78 <hih8120_getTemperature>:
    2f78:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    2f7c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	60 d7       	rcall	.+3776   	; 0x3e46 <__floatunsisf>
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	45 e2       	ldi	r20, 0x25	; 37
    2f8c:	53 e4       	ldi	r21, 0x43	; 67
    2f8e:	e9 d7       	rcall	.+4050   	; 0x3f62 <__mulsf3>
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	38 ef       	ldi	r19, 0xF8	; 248
    2f94:	4f e7       	ldi	r20, 0x7F	; 127
    2f96:	56 e4       	ldi	r21, 0x46	; 70
    2f98:	bd d6       	rcall	.+3450   	; 0x3d14 <__divsf3>
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e2       	ldi	r20, 0x20	; 32
    2fa0:	52 e4       	ldi	r21, 0x42	; 66
    2fa2:	53 c6       	rjmp	.+3238   	; 0x3c4a <__subsf3>
    2fa4:	08 95       	ret

00002fa6 <hih8120_getTemperature_x10>:
    2fa6:	e8 df       	rcall	.-48     	; 0x2f78 <hih8120_getTemperature>
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e2       	ldi	r20, 0x20	; 32
    2fae:	51 e4       	ldi	r21, 0x41	; 65
    2fb0:	d8 d7       	rcall	.+4016   	; 0x3f62 <__mulsf3>
    2fb2:	18 d7       	rcall	.+3632   	; 0x3de4 <__fixsfsi>
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	08 95       	ret

00002fb8 <_serialCallBack>:
    2fb8:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <crc_sum.1945>
    2fbc:	86 0f       	add	r24, r22
    2fbe:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <crc_sum.1945>
    2fc2:	90 91 40 0e 	lds	r25, 0x0E40	; 0x800e40 <_mh_state>
    2fc6:	91 30       	cpi	r25, 0x01	; 1
    2fc8:	79 f0       	breq	.+30     	; 0x2fe8 <_serialCallBack+0x30>
    2fca:	28 f0       	brcs	.+10     	; 0x2fd6 <_serialCallBack+0x1e>
    2fcc:	92 30       	cpi	r25, 0x02	; 2
    2fce:	a9 f0       	breq	.+42     	; 0x2ffa <_serialCallBack+0x42>
    2fd0:	93 30       	cpi	r25, 0x03	; 3
    2fd2:	19 f1       	breq	.+70     	; 0x301a <_serialCallBack+0x62>
    2fd4:	08 95       	ret
    2fd6:	6f 3f       	cpi	r22, 0xFF	; 255
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <_serialCallBack+0x24>
    2fda:	48 c0       	rjmp	.+144    	; 0x306c <_serialCallBack+0xb4>
    2fdc:	10 92 3d 0e 	sts	0x0E3D, r1	; 0x800e3d <crc_sum.1945>
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	80 93 40 0e 	sts	0x0E40, r24	; 0x800e40 <_mh_state>
    2fe6:	08 95       	ret
    2fe8:	66 38       	cpi	r22, 0x86	; 134
    2fea:	09 f0       	breq	.+2      	; 0x2fee <_serialCallBack+0x36>
    2fec:	3f c0       	rjmp	.+126    	; 0x306c <_serialCallBack+0xb4>
    2fee:	10 92 3c 0e 	sts	0x0E3C, r1	; 0x800e3c <inDex.1943>
    2ff2:	82 e0       	ldi	r24, 0x02	; 2
    2ff4:	80 93 40 0e 	sts	0x0E40, r24	; 0x800e40 <_mh_state>
    2ff8:	08 95       	ret
    2ffa:	e0 91 3c 0e 	lds	r30, 0x0E3C	; 0x800e3c <inDex.1943>
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	8e 0f       	add	r24, r30
    3002:	80 93 3c 0e 	sts	0x0E3C, r24	; 0x800e3c <inDex.1943>
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	e6 5c       	subi	r30, 0xC6	; 198
    300a:	f1 4f       	sbci	r31, 0xF1	; 241
    300c:	60 83       	st	Z, r22
    300e:	82 30       	cpi	r24, 0x02	; 2
    3010:	69 f5       	brne	.+90     	; 0x306c <_serialCallBack+0xb4>
    3012:	83 e0       	ldi	r24, 0x03	; 3
    3014:	80 93 40 0e 	sts	0x0E40, r24	; 0x800e40 <_mh_state>
    3018:	08 95       	ret
    301a:	90 91 3c 0e 	lds	r25, 0x0E3C	; 0x800e3c <inDex.1943>
    301e:	21 e0       	ldi	r18, 0x01	; 1
    3020:	29 0f       	add	r18, r25
    3022:	20 93 3c 0e 	sts	0x0E3C, r18	; 0x800e3c <inDex.1943>
    3026:	96 30       	cpi	r25, 0x06	; 6
    3028:	09 f5       	brne	.+66     	; 0x306c <_serialCallBack+0xb4>
    302a:	81 11       	cpse	r24, r1
    302c:	0e c0       	rjmp	.+28     	; 0x304a <_serialCallBack+0x92>
    302e:	ea e3       	ldi	r30, 0x3A	; 58
    3030:	fe e0       	ldi	r31, 0x0E	; 14
    3032:	80 81       	ld	r24, Z
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	98 2f       	mov	r25, r24
    3038:	88 27       	eor	r24, r24
    303a:	21 81       	ldd	r18, Z+1	; 0x01
    303c:	82 0f       	add	r24, r18
    303e:	91 1d       	adc	r25, r1
    3040:	90 93 42 0e 	sts	0x0E42, r25	; 0x800e42 <_ppm+0x1>
    3044:	80 93 41 0e 	sts	0x0E41, r24	; 0x800e41 <_ppm>
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <_serialCallBack+0x9a>
    304a:	10 92 42 0e 	sts	0x0E42, r1	; 0x800e42 <_ppm+0x1>
    304e:	10 92 41 0e 	sts	0x0E41, r1	; 0x800e41 <_ppm>
    3052:	10 92 40 0e 	sts	0x0E40, r1	; 0x800e40 <_mh_state>
    3056:	e0 91 3e 0e 	lds	r30, 0x0E3E	; 0x800e3e <_appCallBack>
    305a:	f0 91 3f 0e 	lds	r31, 0x0E3F	; 0x800e3f <_appCallBack+0x1>
    305e:	30 97       	sbiw	r30, 0x00	; 0
    3060:	29 f0       	breq	.+10     	; 0x306c <_serialCallBack+0xb4>
    3062:	80 91 41 0e 	lds	r24, 0x0E41	; 0x800e41 <_ppm>
    3066:	90 91 42 0e 	lds	r25, 0x0E42	; 0x800e42 <_ppm+0x1>
    306a:	19 95       	eicall
    306c:	08 95       	ret

0000306e <mh_z19_initialise>:
    306e:	8f 92       	push	r8
    3070:	9f 92       	push	r9
    3072:	af 92       	push	r10
    3074:	cf 92       	push	r12
    3076:	ef 92       	push	r14
    3078:	0f 93       	push	r16
    307a:	0f 2e       	mov	r0, r31
    307c:	fc ed       	ldi	r31, 0xDC	; 220
    307e:	8f 2e       	mov	r8, r31
    3080:	f7 e1       	ldi	r31, 0x17	; 23
    3082:	9f 2e       	mov	r9, r31
    3084:	f0 2d       	mov	r31, r0
    3086:	68 94       	set
    3088:	aa 24       	eor	r10, r10
    308a:	a4 f8       	bld	r10, 4
    308c:	68 94       	set
    308e:	cc 24       	eor	r12, r12
    3090:	c4 f8       	bld	r12, 4
    3092:	e1 2c       	mov	r14, r1
    3094:	00 e0       	ldi	r16, 0x00	; 0
    3096:	23 e0       	ldi	r18, 0x03	; 3
    3098:	40 e8       	ldi	r20, 0x80	; 128
    309a:	55 e2       	ldi	r21, 0x25	; 37
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	3f d0       	rcall	.+126    	; 0x3120 <serial_create>
    30a2:	90 93 44 0e 	sts	0x0E44, r25	; 0x800e44 <_serial+0x1>
    30a6:	80 93 43 0e 	sts	0x0E43, r24	; 0x800e43 <_serial>
    30aa:	0f 91       	pop	r16
    30ac:	ef 90       	pop	r14
    30ae:	cf 90       	pop	r12
    30b0:	af 90       	pop	r10
    30b2:	9f 90       	pop	r9
    30b4:	8f 90       	pop	r8
    30b6:	08 95       	ret

000030b8 <mh_z19_injectCallBack>:
    30b8:	90 93 3f 0e 	sts	0x0E3F, r25	; 0x800e3f <_appCallBack+0x1>
    30bc:	80 93 3e 0e 	sts	0x0E3E, r24	; 0x800e3e <_appCallBack>
    30c0:	08 95       	ret

000030c2 <mh_z19_takeMeassuring>:
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	29 97       	sbiw	r28, 0x09	; 9
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	89 e0       	ldi	r24, 0x09	; 9
    30d8:	e2 e2       	ldi	r30, 0x22	; 34
    30da:	f2 e0       	ldi	r31, 0x02	; 2
    30dc:	9e 01       	movw	r18, r28
    30de:	2f 5f       	subi	r18, 0xFF	; 255
    30e0:	3f 4f       	sbci	r19, 0xFF	; 255
    30e2:	d9 01       	movw	r26, r18
    30e4:	01 90       	ld	r0, Z+
    30e6:	0d 92       	st	X+, r0
    30e8:	8a 95       	dec	r24
    30ea:	e1 f7       	brne	.-8      	; 0x30e4 <mh_z19_takeMeassuring+0x22>
    30ec:	10 92 42 0e 	sts	0x0E42, r1	; 0x800e42 <_ppm+0x1>
    30f0:	10 92 41 0e 	sts	0x0E41, r1	; 0x800e41 <_ppm>
    30f4:	80 91 43 0e 	lds	r24, 0x0E43	; 0x800e43 <_serial>
    30f8:	90 91 44 0e 	lds	r25, 0x0E44	; 0x800e44 <_serial+0x1>
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	31 f0       	breq	.+12     	; 0x310c <mh_z19_takeMeassuring+0x4a>
    3100:	42 2f       	mov	r20, r18
    3102:	53 2f       	mov	r21, r19
    3104:	69 e0       	ldi	r22, 0x09	; 9
    3106:	d3 d0       	rcall	.+422    	; 0x32ae <serial_sendBytes>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	01 c0       	rjmp	.+2      	; 0x310e <mh_z19_takeMeassuring+0x4c>
    310c:	82 e0       	ldi	r24, 0x02	; 2
    310e:	29 96       	adiw	r28, 0x09	; 9
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	08 95       	ret

00003120 <serial_create>:
    3120:	2f 92       	push	r2
    3122:	3f 92       	push	r3
    3124:	4f 92       	push	r4
    3126:	5f 92       	push	r5
    3128:	6f 92       	push	r6
    312a:	7f 92       	push	r7
    312c:	8f 92       	push	r8
    312e:	9f 92       	push	r9
    3130:	af 92       	push	r10
    3132:	cf 92       	push	r12
    3134:	ef 92       	push	r14
    3136:	ff 92       	push	r15
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	f8 2e       	mov	r15, r24
    3146:	2a 01       	movw	r4, r20
    3148:	3b 01       	movw	r6, r22
    314a:	88 e0       	ldi	r24, 0x08	; 8
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	b0 d7       	rcall	.+3936   	; 0x40b0 <malloc>
    3150:	8c 01       	movw	r16, r24
    3152:	8f 2d       	mov	r24, r15
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	fc 01       	movw	r30, r24
    3158:	ee 0f       	add	r30, r30
    315a:	ff 1f       	adc	r31, r31
    315c:	eb 5b       	subi	r30, 0xBB	; 187
    315e:	f1 4f       	sbci	r31, 0xF1	; 241
    3160:	11 83       	std	Z+1, r17	; 0x01
    3162:	00 83       	st	Z, r16
    3164:	01 15       	cp	r16, r1
    3166:	11 05       	cpc	r17, r1
    3168:	09 f4       	brne	.+2      	; 0x316c <serial_create+0x4c>
    316a:	64 c0       	rjmp	.+200    	; 0x3234 <serial_create+0x114>
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	fc 01       	movw	r30, r24
    3172:	e5 5f       	subi	r30, 0xF5	; 245
    3174:	fd 4f       	sbci	r31, 0xFD	; 253
    3176:	80 81       	ld	r24, Z
    3178:	91 81       	ldd	r25, Z+1	; 0x01
    317a:	d8 01       	movw	r26, r16
    317c:	8d 93       	st	X+, r24
    317e:	9c 93       	st	X, r25
    3180:	6c 2d       	mov	r22, r12
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	84 e0       	ldi	r24, 0x04	; 4
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	79 d7       	rcall	.+3826   	; 0x407c <calloc>
    318a:	1c 01       	movw	r2, r24
    318c:	61 e0       	ldi	r22, 0x01	; 1
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	86 e0       	ldi	r24, 0x06	; 6
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	73 d7       	rcall	.+3814   	; 0x407c <calloc>
    3196:	7c 01       	movw	r14, r24
    3198:	4c 2d       	mov	r20, r12
    319a:	b1 01       	movw	r22, r2
    319c:	3a d5       	rcall	.+2676   	; 0x3c12 <fifo_init>
    319e:	f8 01       	movw	r30, r16
    31a0:	f5 82       	std	Z+5, r15	; 0x05
    31a2:	e4 82       	std	Z+4, r14	; 0x04
    31a4:	6a 2d       	mov	r22, r10
    31a6:	70 e0       	ldi	r23, 0x00	; 0
    31a8:	84 e0       	ldi	r24, 0x04	; 4
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	67 d7       	rcall	.+3790   	; 0x407c <calloc>
    31ae:	1c 01       	movw	r2, r24
    31b0:	61 e0       	ldi	r22, 0x01	; 1
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	86 e0       	ldi	r24, 0x06	; 6
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	61 d7       	rcall	.+3778   	; 0x407c <calloc>
    31ba:	7c 01       	movw	r14, r24
    31bc:	4a 2d       	mov	r20, r10
    31be:	b1 01       	movw	r22, r2
    31c0:	28 d5       	rcall	.+2640   	; 0x3c12 <fifo_init>
    31c2:	d8 01       	movw	r26, r16
    31c4:	13 96       	adiw	r26, 0x03	; 3
    31c6:	fc 92       	st	X, r15
    31c8:	ee 92       	st	-X, r14
    31ca:	12 97       	sbiw	r26, 0x02	; 2
    31cc:	17 96       	adiw	r26, 0x07	; 7
    31ce:	9c 92       	st	X, r9
    31d0:	8e 92       	st	-X, r8
    31d2:	16 97       	sbiw	r26, 0x06	; 6
    31d4:	ff b6       	in	r15, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	ed 91       	ld	r30, X+
    31da:	fc 91       	ld	r31, X
    31dc:	11 97       	sbiw	r26, 0x01	; 1
    31de:	36 97       	sbiw	r30, 0x06	; 6
    31e0:	80 81       	ld	r24, Z
    31e2:	82 60       	ori	r24, 0x02	; 2
    31e4:	80 83       	st	Z, r24
    31e6:	8d 90       	ld	r8, X+
    31e8:	9c 90       	ld	r9, X
    31ea:	c3 01       	movw	r24, r6
    31ec:	b2 01       	movw	r22, r4
    31ee:	2b d6       	rcall	.+3158   	; 0x3e46 <__floatunsisf>
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e0       	ldi	r20, 0x00	; 0
    31f6:	51 e4       	ldi	r21, 0x41	; 65
    31f8:	b4 d6       	rcall	.+3432   	; 0x3f62 <__mulsf3>
    31fa:	9b 01       	movw	r18, r22
    31fc:	ac 01       	movw	r20, r24
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	74 e2       	ldi	r23, 0x24	; 36
    3202:	84 e7       	ldi	r24, 0x74	; 116
    3204:	9b e4       	ldi	r25, 0x4B	; 75
    3206:	86 d5       	rcall	.+2828   	; 0x3d14 <__divsf3>
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	1c d5       	rcall	.+2616   	; 0x3c4a <__subsf3>
    3212:	ed d5       	rcall	.+3034   	; 0x3dee <__fixunssfsi>
    3214:	f4 01       	movw	r30, r8
    3216:	32 97       	sbiw	r30, 0x02	; 2
    3218:	60 83       	st	Z, r22
    321a:	d8 01       	movw	r26, r16
    321c:	ed 91       	ld	r30, X+
    321e:	fc 91       	ld	r31, X
    3220:	11 97       	sbiw	r26, 0x01	; 1
    3222:	35 97       	sbiw	r30, 0x05	; 5
    3224:	88 e9       	ldi	r24, 0x98	; 152
    3226:	80 83       	st	Z, r24
    3228:	ed 91       	ld	r30, X+
    322a:	fc 91       	ld	r31, X
    322c:	34 97       	sbiw	r30, 0x04	; 4
    322e:	86 e0       	ldi	r24, 0x06	; 6
    3230:	80 83       	st	Z, r24
    3232:	ff be       	out	0x3f, r15	; 63
    3234:	c8 01       	movw	r24, r16
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	cf 90       	pop	r12
    3244:	af 90       	pop	r10
    3246:	9f 90       	pop	r9
    3248:	8f 90       	pop	r8
    324a:	7f 90       	pop	r7
    324c:	6f 90       	pop	r6
    324e:	5f 90       	pop	r5
    3250:	4f 90       	pop	r4
    3252:	3f 90       	pop	r3
    3254:	2f 90       	pop	r2
    3256:	08 95       	ret

00003258 <serial_sendByte>:
    3258:	cf 93       	push	r28
    325a:	df 93       	push	r29
    325c:	dc 01       	movw	r26, r24
    325e:	89 2b       	or	r24, r25
    3260:	01 f1       	breq	.+64     	; 0x32a2 <serial_sendByte+0x4a>
    3262:	12 96       	adiw	r26, 0x02	; 2
    3264:	ed 91       	ld	r30, X+
    3266:	fc 91       	ld	r31, X
    3268:	13 97       	sbiw	r26, 0x03	; 3
    326a:	93 81       	ldd	r25, Z+3	; 0x03
    326c:	82 81       	ldd	r24, Z+2	; 0x02
    326e:	25 81       	ldd	r18, Z+5	; 0x05
    3270:	98 1b       	sub	r25, r24
    3272:	92 23       	and	r25, r18
    3274:	84 81       	ldd	r24, Z+4	; 0x04
    3276:	98 17       	cp	r25, r24
    3278:	b1 f0       	breq	.+44     	; 0x32a6 <serial_sendByte+0x4e>
    327a:	83 81       	ldd	r24, Z+3	; 0x03
    327c:	26 95       	lsr	r18
    327e:	28 23       	and	r18, r24
    3280:	c0 81       	ld	r28, Z
    3282:	d1 81       	ldd	r29, Z+1	; 0x01
    3284:	c2 0f       	add	r28, r18
    3286:	d1 1d       	adc	r29, r1
    3288:	68 83       	st	Y, r22
    328a:	8f 5f       	subi	r24, 0xFF	; 255
    328c:	95 81       	ldd	r25, Z+5	; 0x05
    328e:	89 23       	and	r24, r25
    3290:	83 83       	std	Z+3, r24	; 0x03
    3292:	ed 91       	ld	r30, X+
    3294:	fc 91       	ld	r31, X
    3296:	35 97       	sbiw	r30, 0x05	; 5
    3298:	80 81       	ld	r24, Z
    329a:	80 62       	ori	r24, 0x20	; 32
    329c:	80 83       	st	Z, r24
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	03 c0       	rjmp	.+6      	; 0x32a8 <serial_sendByte+0x50>
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	01 c0       	rjmp	.+2      	; 0x32a8 <serial_sendByte+0x50>
    32a6:	82 e0       	ldi	r24, 0x02	; 2
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	08 95       	ret

000032ae <serial_sendBytes>:
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	7c 01       	movw	r14, r24
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	09 f4       	brne	.+2      	; 0x32c2 <serial_sendBytes+0x14>
    32c0:	41 c0       	rjmp	.+130    	; 0x3344 <serial_sendBytes+0x96>
    32c2:	dc 01       	movw	r26, r24
    32c4:	12 96       	adiw	r26, 0x02	; 2
    32c6:	ed 91       	ld	r30, X+
    32c8:	fc 91       	ld	r31, X
    32ca:	13 97       	sbiw	r26, 0x03	; 3
    32cc:	93 81       	ldd	r25, Z+3	; 0x03
    32ce:	82 81       	ldd	r24, Z+2	; 0x02
    32d0:	98 1b       	sub	r25, r24
    32d2:	85 81       	ldd	r24, Z+5	; 0x05
    32d4:	98 23       	and	r25, r24
    32d6:	84 81       	ldd	r24, Z+4	; 0x04
    32d8:	89 1b       	sub	r24, r25
    32da:	86 17       	cp	r24, r22
    32dc:	a8 f1       	brcs	.+106    	; 0x3348 <serial_sendBytes+0x9a>
    32de:	66 23       	and	r22, r22
    32e0:	41 f1       	breq	.+80     	; 0x3332 <serial_sendBytes+0x84>
    32e2:	84 2f       	mov	r24, r20
    32e4:	95 2f       	mov	r25, r21
    32e6:	dc 01       	movw	r26, r24
    32e8:	61 50       	subi	r22, 0x01	; 1
    32ea:	46 2f       	mov	r20, r22
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	4f 5f       	subi	r20, 0xFF	; 255
    32f0:	5f 4f       	sbci	r21, 0xFF	; 255
    32f2:	48 0f       	add	r20, r24
    32f4:	59 1f       	adc	r21, r25
    32f6:	e7 01       	movw	r28, r14
    32f8:	ea 81       	ldd	r30, Y+2	; 0x02
    32fa:	fb 81       	ldd	r31, Y+3	; 0x03
    32fc:	93 81       	ldd	r25, Z+3	; 0x03
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	25 81       	ldd	r18, Z+5	; 0x05
    3302:	98 1b       	sub	r25, r24
    3304:	92 23       	and	r25, r18
    3306:	84 81       	ldd	r24, Z+4	; 0x04
    3308:	98 17       	cp	r25, r24
    330a:	79 f0       	breq	.+30     	; 0x332a <serial_sendBytes+0x7c>
    330c:	8c 91       	ld	r24, X
    330e:	93 81       	ldd	r25, Z+3	; 0x03
    3310:	26 95       	lsr	r18
    3312:	29 23       	and	r18, r25
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	8b 01       	movw	r16, r22
    331a:	02 0f       	add	r16, r18
    331c:	11 1d       	adc	r17, r1
    331e:	e8 01       	movw	r28, r16
    3320:	88 83       	st	Y, r24
    3322:	9f 5f       	subi	r25, 0xFF	; 255
    3324:	85 81       	ldd	r24, Z+5	; 0x05
    3326:	98 23       	and	r25, r24
    3328:	93 83       	std	Z+3, r25	; 0x03
    332a:	11 96       	adiw	r26, 0x01	; 1
    332c:	a4 17       	cp	r26, r20
    332e:	b5 07       	cpc	r27, r21
    3330:	11 f7       	brne	.-60     	; 0x32f6 <serial_sendBytes+0x48>
    3332:	d7 01       	movw	r26, r14
    3334:	ed 91       	ld	r30, X+
    3336:	fc 91       	ld	r31, X
    3338:	35 97       	sbiw	r30, 0x05	; 5
    333a:	80 81       	ld	r24, Z
    333c:	80 62       	ori	r24, 0x20	; 32
    333e:	80 83       	st	Z, r24
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	03 c0       	rjmp	.+6      	; 0x334a <serial_sendBytes+0x9c>
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	01 c0       	rjmp	.+2      	; 0x334a <serial_sendBytes+0x9c>
    3348:	82 e0       	ldi	r24, 0x02	; 2
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ff 90       	pop	r15
    3354:	ef 90       	pop	r14
    3356:	08 95       	ret

00003358 <serial_getByte>:
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	d1 f0       	breq	.+52     	; 0x3390 <serial_getByte+0x38>
    335c:	dc 01       	movw	r26, r24
    335e:	14 96       	adiw	r26, 0x04	; 4
    3360:	ed 91       	ld	r30, X+
    3362:	fc 91       	ld	r31, X
    3364:	15 97       	sbiw	r26, 0x05	; 5
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	82 81       	ldd	r24, Z+2	; 0x02
    336a:	98 17       	cp	r25, r24
    336c:	99 f0       	breq	.+38     	; 0x3394 <serial_getByte+0x3c>
    336e:	92 81       	ldd	r25, Z+2	; 0x02
    3370:	85 81       	ldd	r24, Z+5	; 0x05
    3372:	86 95       	lsr	r24
    3374:	89 23       	and	r24, r25
    3376:	a0 81       	ld	r26, Z
    3378:	b1 81       	ldd	r27, Z+1	; 0x01
    337a:	a8 0f       	add	r26, r24
    337c:	b1 1d       	adc	r27, r1
    337e:	8c 91       	ld	r24, X
    3380:	db 01       	movw	r26, r22
    3382:	8c 93       	st	X, r24
    3384:	9f 5f       	subi	r25, 0xFF	; 255
    3386:	85 81       	ldd	r24, Z+5	; 0x05
    3388:	98 23       	and	r25, r24
    338a:	92 83       	std	Z+2, r25	; 0x02
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	08 95       	ret
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	08 95       	ret
    3394:	83 e0       	ldi	r24, 0x03	; 3
    3396:	08 95       	ret

00003398 <__vector_25>:
    3398:	1f 92       	push	r1
    339a:	0f 92       	push	r0
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	0f 92       	push	r0
    33a0:	11 24       	eor	r1, r1
    33a2:	0b b6       	in	r0, 0x3b	; 59
    33a4:	0f 92       	push	r0
    33a6:	2f 93       	push	r18
    33a8:	3f 93       	push	r19
    33aa:	4f 93       	push	r20
    33ac:	5f 93       	push	r21
    33ae:	6f 93       	push	r22
    33b0:	7f 93       	push	r23
    33b2:	8f 93       	push	r24
    33b4:	9f 93       	push	r25
    33b6:	af 93       	push	r26
    33b8:	bf 93       	push	r27
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	ef 93       	push	r30
    33c0:	ff 93       	push	r31
    33c2:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <_ser_handle>
    33c6:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <_ser_handle+0x1>
    33ca:	10 97       	sbiw	r26, 0x00	; 0
    33cc:	11 f1       	breq	.+68     	; 0x3412 <__vector_25+0x7a>
    33ce:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    33d2:	14 96       	adiw	r26, 0x04	; 4
    33d4:	ed 91       	ld	r30, X+
    33d6:	fc 91       	ld	r31, X
    33d8:	15 97       	sbiw	r26, 0x05	; 5
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	25 81       	ldd	r18, Z+5	; 0x05
    33e0:	98 1b       	sub	r25, r24
    33e2:	92 23       	and	r25, r18
    33e4:	84 81       	ldd	r24, Z+4	; 0x04
    33e6:	98 17       	cp	r25, r24
    33e8:	61 f0       	breq	.+24     	; 0x3402 <__vector_25+0x6a>
    33ea:	83 81       	ldd	r24, Z+3	; 0x03
    33ec:	26 95       	lsr	r18
    33ee:	28 23       	and	r18, r24
    33f0:	c0 81       	ld	r28, Z
    33f2:	d1 81       	ldd	r29, Z+1	; 0x01
    33f4:	c2 0f       	add	r28, r18
    33f6:	d1 1d       	adc	r29, r1
    33f8:	68 83       	st	Y, r22
    33fa:	8f 5f       	subi	r24, 0xFF	; 255
    33fc:	95 81       	ldd	r25, Z+5	; 0x05
    33fe:	89 23       	and	r24, r25
    3400:	83 83       	std	Z+3, r24	; 0x03
    3402:	16 96       	adiw	r26, 0x06	; 6
    3404:	ed 91       	ld	r30, X+
    3406:	fc 91       	ld	r31, X
    3408:	17 97       	sbiw	r26, 0x07	; 7
    340a:	30 97       	sbiw	r30, 0x00	; 0
    340c:	11 f0       	breq	.+4      	; 0x3412 <__vector_25+0x7a>
    340e:	cd 01       	movw	r24, r26
    3410:	19 95       	eicall
    3412:	ff 91       	pop	r31
    3414:	ef 91       	pop	r30
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	bf 91       	pop	r27
    341c:	af 91       	pop	r26
    341e:	9f 91       	pop	r25
    3420:	8f 91       	pop	r24
    3422:	7f 91       	pop	r23
    3424:	6f 91       	pop	r22
    3426:	5f 91       	pop	r21
    3428:	4f 91       	pop	r20
    342a:	3f 91       	pop	r19
    342c:	2f 91       	pop	r18
    342e:	0f 90       	pop	r0
    3430:	0b be       	out	0x3b, r0	; 59
    3432:	0f 90       	pop	r0
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	0f 90       	pop	r0
    3438:	1f 90       	pop	r1
    343a:	18 95       	reti

0000343c <__vector_26>:
    343c:	1f 92       	push	r1
    343e:	0f 92       	push	r0
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	0f 92       	push	r0
    3444:	11 24       	eor	r1, r1
    3446:	0b b6       	in	r0, 0x3b	; 59
    3448:	0f 92       	push	r0
    344a:	2f 93       	push	r18
    344c:	8f 93       	push	r24
    344e:	9f 93       	push	r25
    3450:	af 93       	push	r26
    3452:	bf 93       	push	r27
    3454:	ef 93       	push	r30
    3456:	ff 93       	push	r31
    3458:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <_ser_handle>
    345c:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <_ser_handle+0x1>
    3460:	30 97       	sbiw	r30, 0x00	; 0
    3462:	b9 f0       	breq	.+46     	; 0x3492 <__vector_26+0x56>
    3464:	02 80       	ldd	r0, Z+2	; 0x02
    3466:	f3 81       	ldd	r31, Z+3	; 0x03
    3468:	e0 2d       	mov	r30, r0
    346a:	93 81       	ldd	r25, Z+3	; 0x03
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	98 17       	cp	r25, r24
    3470:	b1 f0       	breq	.+44     	; 0x349e <__vector_26+0x62>
    3472:	92 81       	ldd	r25, Z+2	; 0x02
    3474:	85 81       	ldd	r24, Z+5	; 0x05
    3476:	28 2f       	mov	r18, r24
    3478:	26 95       	lsr	r18
    347a:	29 23       	and	r18, r25
    347c:	a0 81       	ld	r26, Z
    347e:	b1 81       	ldd	r27, Z+1	; 0x01
    3480:	a2 0f       	add	r26, r18
    3482:	b1 1d       	adc	r27, r1
    3484:	2c 91       	ld	r18, X
    3486:	9f 5f       	subi	r25, 0xFF	; 255
    3488:	89 23       	and	r24, r25
    348a:	82 83       	std	Z+2, r24	; 0x02
    348c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3490:	0b c0       	rjmp	.+22     	; 0x34a8 <__vector_26+0x6c>
    3492:	e1 ec       	ldi	r30, 0xC1	; 193
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	8f 7d       	andi	r24, 0xDF	; 223
    349a:	80 83       	st	Z, r24
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <__vector_26+0x6c>
    349e:	e1 ec       	ldi	r30, 0xC1	; 193
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	80 81       	ld	r24, Z
    34a4:	8f 7d       	andi	r24, 0xDF	; 223
    34a6:	80 83       	st	Z, r24
    34a8:	ff 91       	pop	r31
    34aa:	ef 91       	pop	r30
    34ac:	bf 91       	pop	r27
    34ae:	af 91       	pop	r26
    34b0:	9f 91       	pop	r25
    34b2:	8f 91       	pop	r24
    34b4:	2f 91       	pop	r18
    34b6:	0f 90       	pop	r0
    34b8:	0b be       	out	0x3b, r0	; 59
    34ba:	0f 90       	pop	r0
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	0f 90       	pop	r0
    34c0:	1f 90       	pop	r1
    34c2:	18 95       	reti

000034c4 <__vector_36>:
    34c4:	1f 92       	push	r1
    34c6:	0f 92       	push	r0
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	0f 92       	push	r0
    34cc:	11 24       	eor	r1, r1
    34ce:	0b b6       	in	r0, 0x3b	; 59
    34d0:	0f 92       	push	r0
    34d2:	2f 93       	push	r18
    34d4:	3f 93       	push	r19
    34d6:	4f 93       	push	r20
    34d8:	5f 93       	push	r21
    34da:	6f 93       	push	r22
    34dc:	7f 93       	push	r23
    34de:	8f 93       	push	r24
    34e0:	9f 93       	push	r25
    34e2:	af 93       	push	r26
    34e4:	bf 93       	push	r27
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	ef 93       	push	r30
    34ec:	ff 93       	push	r31
    34ee:	a0 91 47 0e 	lds	r26, 0x0E47	; 0x800e47 <_ser_handle+0x2>
    34f2:	b0 91 48 0e 	lds	r27, 0x0E48	; 0x800e48 <_ser_handle+0x3>
    34f6:	10 97       	sbiw	r26, 0x00	; 0
    34f8:	11 f1       	breq	.+68     	; 0x353e <__vector_36+0x7a>
    34fa:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    34fe:	14 96       	adiw	r26, 0x04	; 4
    3500:	ed 91       	ld	r30, X+
    3502:	fc 91       	ld	r31, X
    3504:	15 97       	sbiw	r26, 0x05	; 5
    3506:	93 81       	ldd	r25, Z+3	; 0x03
    3508:	82 81       	ldd	r24, Z+2	; 0x02
    350a:	25 81       	ldd	r18, Z+5	; 0x05
    350c:	98 1b       	sub	r25, r24
    350e:	92 23       	and	r25, r18
    3510:	84 81       	ldd	r24, Z+4	; 0x04
    3512:	98 17       	cp	r25, r24
    3514:	61 f0       	breq	.+24     	; 0x352e <__vector_36+0x6a>
    3516:	83 81       	ldd	r24, Z+3	; 0x03
    3518:	26 95       	lsr	r18
    351a:	28 23       	and	r18, r24
    351c:	c0 81       	ld	r28, Z
    351e:	d1 81       	ldd	r29, Z+1	; 0x01
    3520:	c2 0f       	add	r28, r18
    3522:	d1 1d       	adc	r29, r1
    3524:	68 83       	st	Y, r22
    3526:	8f 5f       	subi	r24, 0xFF	; 255
    3528:	95 81       	ldd	r25, Z+5	; 0x05
    352a:	89 23       	and	r24, r25
    352c:	83 83       	std	Z+3, r24	; 0x03
    352e:	16 96       	adiw	r26, 0x06	; 6
    3530:	ed 91       	ld	r30, X+
    3532:	fc 91       	ld	r31, X
    3534:	17 97       	sbiw	r26, 0x07	; 7
    3536:	30 97       	sbiw	r30, 0x00	; 0
    3538:	11 f0       	breq	.+4      	; 0x353e <__vector_36+0x7a>
    353a:	cd 01       	movw	r24, r26
    353c:	19 95       	eicall
    353e:	ff 91       	pop	r31
    3540:	ef 91       	pop	r30
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	bf 91       	pop	r27
    3548:	af 91       	pop	r26
    354a:	9f 91       	pop	r25
    354c:	8f 91       	pop	r24
    354e:	7f 91       	pop	r23
    3550:	6f 91       	pop	r22
    3552:	5f 91       	pop	r21
    3554:	4f 91       	pop	r20
    3556:	3f 91       	pop	r19
    3558:	2f 91       	pop	r18
    355a:	0f 90       	pop	r0
    355c:	0b be       	out	0x3b, r0	; 59
    355e:	0f 90       	pop	r0
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	0f 90       	pop	r0
    3564:	1f 90       	pop	r1
    3566:	18 95       	reti

00003568 <__vector_37>:
    3568:	1f 92       	push	r1
    356a:	0f 92       	push	r0
    356c:	0f b6       	in	r0, 0x3f	; 63
    356e:	0f 92       	push	r0
    3570:	11 24       	eor	r1, r1
    3572:	0b b6       	in	r0, 0x3b	; 59
    3574:	0f 92       	push	r0
    3576:	2f 93       	push	r18
    3578:	8f 93       	push	r24
    357a:	9f 93       	push	r25
    357c:	af 93       	push	r26
    357e:	bf 93       	push	r27
    3580:	ef 93       	push	r30
    3582:	ff 93       	push	r31
    3584:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <_ser_handle+0x2>
    3588:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <_ser_handle+0x3>
    358c:	30 97       	sbiw	r30, 0x00	; 0
    358e:	b9 f0       	breq	.+46     	; 0x35be <__vector_37+0x56>
    3590:	02 80       	ldd	r0, Z+2	; 0x02
    3592:	f3 81       	ldd	r31, Z+3	; 0x03
    3594:	e0 2d       	mov	r30, r0
    3596:	93 81       	ldd	r25, Z+3	; 0x03
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	98 17       	cp	r25, r24
    359c:	b1 f0       	breq	.+44     	; 0x35ca <__vector_37+0x62>
    359e:	92 81       	ldd	r25, Z+2	; 0x02
    35a0:	85 81       	ldd	r24, Z+5	; 0x05
    35a2:	28 2f       	mov	r18, r24
    35a4:	26 95       	lsr	r18
    35a6:	29 23       	and	r18, r25
    35a8:	a0 81       	ld	r26, Z
    35aa:	b1 81       	ldd	r27, Z+1	; 0x01
    35ac:	a2 0f       	add	r26, r18
    35ae:	b1 1d       	adc	r27, r1
    35b0:	2c 91       	ld	r18, X
    35b2:	9f 5f       	subi	r25, 0xFF	; 255
    35b4:	89 23       	and	r24, r25
    35b6:	82 83       	std	Z+2, r24	; 0x02
    35b8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    35bc:	0b c0       	rjmp	.+22     	; 0x35d4 <__vector_37+0x6c>
    35be:	e9 ec       	ldi	r30, 0xC9	; 201
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	8f 7d       	andi	r24, 0xDF	; 223
    35c6:	80 83       	st	Z, r24
    35c8:	05 c0       	rjmp	.+10     	; 0x35d4 <__vector_37+0x6c>
    35ca:	e9 ec       	ldi	r30, 0xC9	; 201
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	80 81       	ld	r24, Z
    35d0:	8f 7d       	andi	r24, 0xDF	; 223
    35d2:	80 83       	st	Z, r24
    35d4:	ff 91       	pop	r31
    35d6:	ef 91       	pop	r30
    35d8:	bf 91       	pop	r27
    35da:	af 91       	pop	r26
    35dc:	9f 91       	pop	r25
    35de:	8f 91       	pop	r24
    35e0:	2f 91       	pop	r18
    35e2:	0f 90       	pop	r0
    35e4:	0b be       	out	0x3b, r0	; 59
    35e6:	0f 90       	pop	r0
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	0f 90       	pop	r0
    35ec:	1f 90       	pop	r1
    35ee:	18 95       	reti

000035f0 <__vector_51>:
    35f0:	1f 92       	push	r1
    35f2:	0f 92       	push	r0
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	0f 92       	push	r0
    35f8:	11 24       	eor	r1, r1
    35fa:	0b b6       	in	r0, 0x3b	; 59
    35fc:	0f 92       	push	r0
    35fe:	2f 93       	push	r18
    3600:	3f 93       	push	r19
    3602:	4f 93       	push	r20
    3604:	5f 93       	push	r21
    3606:	6f 93       	push	r22
    3608:	7f 93       	push	r23
    360a:	8f 93       	push	r24
    360c:	9f 93       	push	r25
    360e:	af 93       	push	r26
    3610:	bf 93       	push	r27
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	ef 93       	push	r30
    3618:	ff 93       	push	r31
    361a:	a0 91 49 0e 	lds	r26, 0x0E49	; 0x800e49 <_ser_handle+0x4>
    361e:	b0 91 4a 0e 	lds	r27, 0x0E4A	; 0x800e4a <_ser_handle+0x5>
    3622:	10 97       	sbiw	r26, 0x00	; 0
    3624:	11 f1       	breq	.+68     	; 0x366a <__vector_51+0x7a>
    3626:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    362a:	14 96       	adiw	r26, 0x04	; 4
    362c:	ed 91       	ld	r30, X+
    362e:	fc 91       	ld	r31, X
    3630:	15 97       	sbiw	r26, 0x05	; 5
    3632:	93 81       	ldd	r25, Z+3	; 0x03
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	25 81       	ldd	r18, Z+5	; 0x05
    3638:	98 1b       	sub	r25, r24
    363a:	92 23       	and	r25, r18
    363c:	84 81       	ldd	r24, Z+4	; 0x04
    363e:	98 17       	cp	r25, r24
    3640:	61 f0       	breq	.+24     	; 0x365a <__vector_51+0x6a>
    3642:	83 81       	ldd	r24, Z+3	; 0x03
    3644:	26 95       	lsr	r18
    3646:	28 23       	and	r18, r24
    3648:	c0 81       	ld	r28, Z
    364a:	d1 81       	ldd	r29, Z+1	; 0x01
    364c:	c2 0f       	add	r28, r18
    364e:	d1 1d       	adc	r29, r1
    3650:	68 83       	st	Y, r22
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	95 81       	ldd	r25, Z+5	; 0x05
    3656:	89 23       	and	r24, r25
    3658:	83 83       	std	Z+3, r24	; 0x03
    365a:	16 96       	adiw	r26, 0x06	; 6
    365c:	ed 91       	ld	r30, X+
    365e:	fc 91       	ld	r31, X
    3660:	17 97       	sbiw	r26, 0x07	; 7
    3662:	30 97       	sbiw	r30, 0x00	; 0
    3664:	11 f0       	breq	.+4      	; 0x366a <__vector_51+0x7a>
    3666:	cd 01       	movw	r24, r26
    3668:	19 95       	eicall
    366a:	ff 91       	pop	r31
    366c:	ef 91       	pop	r30
    366e:	df 91       	pop	r29
    3670:	cf 91       	pop	r28
    3672:	bf 91       	pop	r27
    3674:	af 91       	pop	r26
    3676:	9f 91       	pop	r25
    3678:	8f 91       	pop	r24
    367a:	7f 91       	pop	r23
    367c:	6f 91       	pop	r22
    367e:	5f 91       	pop	r21
    3680:	4f 91       	pop	r20
    3682:	3f 91       	pop	r19
    3684:	2f 91       	pop	r18
    3686:	0f 90       	pop	r0
    3688:	0b be       	out	0x3b, r0	; 59
    368a:	0f 90       	pop	r0
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	0f 90       	pop	r0
    3690:	1f 90       	pop	r1
    3692:	18 95       	reti

00003694 <__vector_52>:
    3694:	1f 92       	push	r1
    3696:	0f 92       	push	r0
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	0f 92       	push	r0
    369c:	11 24       	eor	r1, r1
    369e:	0b b6       	in	r0, 0x3b	; 59
    36a0:	0f 92       	push	r0
    36a2:	2f 93       	push	r18
    36a4:	8f 93       	push	r24
    36a6:	9f 93       	push	r25
    36a8:	af 93       	push	r26
    36aa:	bf 93       	push	r27
    36ac:	ef 93       	push	r30
    36ae:	ff 93       	push	r31
    36b0:	e0 91 49 0e 	lds	r30, 0x0E49	; 0x800e49 <_ser_handle+0x4>
    36b4:	f0 91 4a 0e 	lds	r31, 0x0E4A	; 0x800e4a <_ser_handle+0x5>
    36b8:	30 97       	sbiw	r30, 0x00	; 0
    36ba:	b9 f0       	breq	.+46     	; 0x36ea <__vector_52+0x56>
    36bc:	02 80       	ldd	r0, Z+2	; 0x02
    36be:	f3 81       	ldd	r31, Z+3	; 0x03
    36c0:	e0 2d       	mov	r30, r0
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	98 17       	cp	r25, r24
    36c8:	b1 f0       	breq	.+44     	; 0x36f6 <__vector_52+0x62>
    36ca:	92 81       	ldd	r25, Z+2	; 0x02
    36cc:	85 81       	ldd	r24, Z+5	; 0x05
    36ce:	28 2f       	mov	r18, r24
    36d0:	26 95       	lsr	r18
    36d2:	29 23       	and	r18, r25
    36d4:	a0 81       	ld	r26, Z
    36d6:	b1 81       	ldd	r27, Z+1	; 0x01
    36d8:	a2 0f       	add	r26, r18
    36da:	b1 1d       	adc	r27, r1
    36dc:	2c 91       	ld	r18, X
    36de:	9f 5f       	subi	r25, 0xFF	; 255
    36e0:	89 23       	and	r24, r25
    36e2:	82 83       	std	Z+2, r24	; 0x02
    36e4:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    36e8:	0b c0       	rjmp	.+22     	; 0x3700 <__vector_52+0x6c>
    36ea:	e1 ed       	ldi	r30, 0xD1	; 209
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	8f 7d       	andi	r24, 0xDF	; 223
    36f2:	80 83       	st	Z, r24
    36f4:	05 c0       	rjmp	.+10     	; 0x3700 <__vector_52+0x6c>
    36f6:	e1 ed       	ldi	r30, 0xD1	; 209
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	8f 7d       	andi	r24, 0xDF	; 223
    36fe:	80 83       	st	Z, r24
    3700:	ff 91       	pop	r31
    3702:	ef 91       	pop	r30
    3704:	bf 91       	pop	r27
    3706:	af 91       	pop	r26
    3708:	9f 91       	pop	r25
    370a:	8f 91       	pop	r24
    370c:	2f 91       	pop	r18
    370e:	0f 90       	pop	r0
    3710:	0b be       	out	0x3b, r0	; 59
    3712:	0f 90       	pop	r0
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	0f 90       	pop	r0
    3718:	1f 90       	pop	r1
    371a:	18 95       	reti

0000371c <__vector_54>:
    371c:	1f 92       	push	r1
    371e:	0f 92       	push	r0
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	0f 92       	push	r0
    3724:	11 24       	eor	r1, r1
    3726:	0b b6       	in	r0, 0x3b	; 59
    3728:	0f 92       	push	r0
    372a:	2f 93       	push	r18
    372c:	3f 93       	push	r19
    372e:	4f 93       	push	r20
    3730:	5f 93       	push	r21
    3732:	6f 93       	push	r22
    3734:	7f 93       	push	r23
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	af 93       	push	r26
    373c:	bf 93       	push	r27
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	ef 93       	push	r30
    3744:	ff 93       	push	r31
    3746:	a0 91 4b 0e 	lds	r26, 0x0E4B	; 0x800e4b <_ser_handle+0x6>
    374a:	b0 91 4c 0e 	lds	r27, 0x0E4C	; 0x800e4c <_ser_handle+0x7>
    374e:	10 97       	sbiw	r26, 0x00	; 0
    3750:	11 f1       	breq	.+68     	; 0x3796 <__vector_54+0x7a>
    3752:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3756:	14 96       	adiw	r26, 0x04	; 4
    3758:	ed 91       	ld	r30, X+
    375a:	fc 91       	ld	r31, X
    375c:	15 97       	sbiw	r26, 0x05	; 5
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	82 81       	ldd	r24, Z+2	; 0x02
    3762:	25 81       	ldd	r18, Z+5	; 0x05
    3764:	98 1b       	sub	r25, r24
    3766:	92 23       	and	r25, r18
    3768:	84 81       	ldd	r24, Z+4	; 0x04
    376a:	98 17       	cp	r25, r24
    376c:	61 f0       	breq	.+24     	; 0x3786 <__vector_54+0x6a>
    376e:	83 81       	ldd	r24, Z+3	; 0x03
    3770:	26 95       	lsr	r18
    3772:	28 23       	and	r18, r24
    3774:	c0 81       	ld	r28, Z
    3776:	d1 81       	ldd	r29, Z+1	; 0x01
    3778:	c2 0f       	add	r28, r18
    377a:	d1 1d       	adc	r29, r1
    377c:	68 83       	st	Y, r22
    377e:	8f 5f       	subi	r24, 0xFF	; 255
    3780:	95 81       	ldd	r25, Z+5	; 0x05
    3782:	89 23       	and	r24, r25
    3784:	83 83       	std	Z+3, r24	; 0x03
    3786:	16 96       	adiw	r26, 0x06	; 6
    3788:	ed 91       	ld	r30, X+
    378a:	fc 91       	ld	r31, X
    378c:	17 97       	sbiw	r26, 0x07	; 7
    378e:	30 97       	sbiw	r30, 0x00	; 0
    3790:	11 f0       	breq	.+4      	; 0x3796 <__vector_54+0x7a>
    3792:	cd 01       	movw	r24, r26
    3794:	19 95       	eicall
    3796:	ff 91       	pop	r31
    3798:	ef 91       	pop	r30
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	bf 91       	pop	r27
    37a0:	af 91       	pop	r26
    37a2:	9f 91       	pop	r25
    37a4:	8f 91       	pop	r24
    37a6:	7f 91       	pop	r23
    37a8:	6f 91       	pop	r22
    37aa:	5f 91       	pop	r21
    37ac:	4f 91       	pop	r20
    37ae:	3f 91       	pop	r19
    37b0:	2f 91       	pop	r18
    37b2:	0f 90       	pop	r0
    37b4:	0b be       	out	0x3b, r0	; 59
    37b6:	0f 90       	pop	r0
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	0f 90       	pop	r0
    37bc:	1f 90       	pop	r1
    37be:	18 95       	reti

000037c0 <__vector_55>:
    37c0:	1f 92       	push	r1
    37c2:	0f 92       	push	r0
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	0f 92       	push	r0
    37c8:	11 24       	eor	r1, r1
    37ca:	0b b6       	in	r0, 0x3b	; 59
    37cc:	0f 92       	push	r0
    37ce:	2f 93       	push	r18
    37d0:	8f 93       	push	r24
    37d2:	9f 93       	push	r25
    37d4:	af 93       	push	r26
    37d6:	bf 93       	push	r27
    37d8:	ef 93       	push	r30
    37da:	ff 93       	push	r31
    37dc:	e0 91 4b 0e 	lds	r30, 0x0E4B	; 0x800e4b <_ser_handle+0x6>
    37e0:	f0 91 4c 0e 	lds	r31, 0x0E4C	; 0x800e4c <_ser_handle+0x7>
    37e4:	30 97       	sbiw	r30, 0x00	; 0
    37e6:	b9 f0       	breq	.+46     	; 0x3816 <__vector_55+0x56>
    37e8:	02 80       	ldd	r0, Z+2	; 0x02
    37ea:	f3 81       	ldd	r31, Z+3	; 0x03
    37ec:	e0 2d       	mov	r30, r0
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	82 81       	ldd	r24, Z+2	; 0x02
    37f2:	98 17       	cp	r25, r24
    37f4:	b1 f0       	breq	.+44     	; 0x3822 <__vector_55+0x62>
    37f6:	92 81       	ldd	r25, Z+2	; 0x02
    37f8:	85 81       	ldd	r24, Z+5	; 0x05
    37fa:	28 2f       	mov	r18, r24
    37fc:	26 95       	lsr	r18
    37fe:	29 23       	and	r18, r25
    3800:	a0 81       	ld	r26, Z
    3802:	b1 81       	ldd	r27, Z+1	; 0x01
    3804:	a2 0f       	add	r26, r18
    3806:	b1 1d       	adc	r27, r1
    3808:	2c 91       	ld	r18, X
    380a:	9f 5f       	subi	r25, 0xFF	; 255
    380c:	89 23       	and	r24, r25
    380e:	82 83       	std	Z+2, r24	; 0x02
    3810:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3814:	0b c0       	rjmp	.+22     	; 0x382c <__vector_55+0x6c>
    3816:	e1 e3       	ldi	r30, 0x31	; 49
    3818:	f1 e0       	ldi	r31, 0x01	; 1
    381a:	80 81       	ld	r24, Z
    381c:	8f 7d       	andi	r24, 0xDF	; 223
    381e:	80 83       	st	Z, r24
    3820:	05 c0       	rjmp	.+10     	; 0x382c <__vector_55+0x6c>
    3822:	e1 e3       	ldi	r30, 0x31	; 49
    3824:	f1 e0       	ldi	r31, 0x01	; 1
    3826:	80 81       	ld	r24, Z
    3828:	8f 7d       	andi	r24, 0xDF	; 223
    382a:	80 83       	st	Z, r24
    382c:	ff 91       	pop	r31
    382e:	ef 91       	pop	r30
    3830:	bf 91       	pop	r27
    3832:	af 91       	pop	r26
    3834:	9f 91       	pop	r25
    3836:	8f 91       	pop	r24
    3838:	2f 91       	pop	r18
    383a:	0f 90       	pop	r0
    383c:	0b be       	out	0x3b, r0	; 59
    383e:	0f 90       	pop	r0
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	0f 90       	pop	r0
    3844:	1f 90       	pop	r1
    3846:	18 95       	reti

00003848 <usart_getchar>:
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	1f 92       	push	r1
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	be 01       	movw	r22, r28
    3854:	6f 5f       	subi	r22, 0xFF	; 255
    3856:	7f 4f       	sbci	r23, 0xFF	; 255
    3858:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <_com_serial_instance>
    385c:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <_com_serial_instance+0x1>
    3860:	7b dd       	rcall	.-1290   	; 0x3358 <serial_getByte>
    3862:	81 11       	cpse	r24, r1
    3864:	f6 cf       	rjmp	.-20     	; 0x3852 <usart_getchar+0xa>
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0f 90       	pop	r0
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	08 95       	ret

00003872 <usart_putchar>:
    3872:	68 2f       	mov	r22, r24
    3874:	80 91 4d 0e 	lds	r24, 0x0E4D	; 0x800e4d <_com_serial_instance>
    3878:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <_com_serial_instance+0x1>
    387c:	ed dc       	rcall	.-1574   	; 0x3258 <serial_sendByte>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	08 95       	ret

00003884 <stdio_initialise>:
    3884:	8f 92       	push	r8
    3886:	9f 92       	push	r9
    3888:	af 92       	push	r10
    388a:	cf 92       	push	r12
    388c:	ef 92       	push	r14
    388e:	0f 93       	push	r16
    3890:	81 2c       	mov	r8, r1
    3892:	91 2c       	mov	r9, r1
    3894:	68 94       	set
    3896:	aa 24       	eor	r10, r10
    3898:	a7 f8       	bld	r10, 7
    389a:	68 94       	set
    389c:	cc 24       	eor	r12, r12
    389e:	c7 f8       	bld	r12, 7
    38a0:	e1 2c       	mov	r14, r1
    38a2:	00 e0       	ldi	r16, 0x00	; 0
    38a4:	23 e0       	ldi	r18, 0x03	; 3
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	51 ee       	ldi	r21, 0xE1	; 225
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	70 e0       	ldi	r23, 0x00	; 0
    38ae:	38 dc       	rcall	.-1936   	; 0x3120 <serial_create>
    38b0:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <_com_serial_instance+0x1>
    38b4:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <_com_serial_instance>
    38b8:	e5 e7       	ldi	r30, 0x75	; 117
    38ba:	fe e0       	ldi	r31, 0x0E	; 14
    38bc:	83 e1       	ldi	r24, 0x13	; 19
    38be:	92 e0       	ldi	r25, 0x02	; 2
    38c0:	91 83       	std	Z+1, r25	; 0x01
    38c2:	80 83       	st	Z, r24
    38c4:	93 83       	std	Z+3, r25	; 0x03
    38c6:	82 83       	std	Z+2, r24	; 0x02
    38c8:	0f 91       	pop	r16
    38ca:	ef 90       	pop	r14
    38cc:	cf 90       	pop	r12
    38ce:	af 90       	pop	r10
    38d0:	9f 90       	pop	r9
    38d2:	8f 90       	pop	r8
    38d4:	08 95       	ret

000038d6 <_initTwiInterface>:
    38d6:	80 91 5d 0e 	lds	r24, 0x0E5D	; 0x800e5d <_twiIsInitiated>
    38da:	81 11       	cpse	r24, r1
    38dc:	0c c0       	rjmp	.+24     	; 0x38f6 <_initTwiInterface+0x20>
    38de:	8c e0       	ldi	r24, 0x0C	; 12
    38e0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    38e4:	8f ef       	ldi	r24, 0xFF	; 255
    38e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    38ea:	84 e0       	ldi	r24, 0x04	; 4
    38ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	80 93 5d 0e 	sts	0x0E5D, r24	; 0x800e5d <_twiIsInitiated>
    38f6:	08 95       	ret

000038f8 <twiCreate>:
    38f8:	af 92       	push	r10
    38fa:	bf 92       	push	r11
    38fc:	cf 92       	push	r12
    38fe:	df 92       	push	r13
    3900:	ef 92       	push	r14
    3902:	ff 92       	push	r15
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	cf 93       	push	r28
    390a:	df 93       	push	r29
    390c:	a8 2e       	mov	r10, r24
    390e:	b6 2e       	mov	r11, r22
    3910:	69 01       	movw	r12, r18
    3912:	7a 01       	movw	r14, r20
    3914:	84 e0       	ldi	r24, 0x04	; 4
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	cb d3       	rcall	.+1942   	; 0x40b0 <malloc>
    391a:	ec 01       	movw	r28, r24
    391c:	89 2b       	or	r24, r25
    391e:	61 f1       	breq	.+88     	; 0x3978 <twiCreate+0x80>
    3920:	a8 82       	st	Y, r10
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	b8 12       	cpse	r11, r24
    3926:	12 c0       	rjmp	.+36     	; 0x394c <twiCreate+0x54>
    3928:	c7 01       	movw	r24, r14
    392a:	b6 01       	movw	r22, r12
    392c:	20 ea       	ldi	r18, 0xA0	; 160
    392e:	36 e8       	ldi	r19, 0x86	; 134
    3930:	41 e0       	ldi	r20, 0x01	; 1
    3932:	50 e0       	ldi	r21, 0x00	; 0
    3934:	79 d3       	rcall	.+1778   	; 0x4028 <__udivmodsi4>
    3936:	da 01       	movw	r26, r20
    3938:	c9 01       	movw	r24, r18
    393a:	40 97       	sbiw	r24, 0x10	; 16
    393c:	a1 09       	sbc	r26, r1
    393e:	b1 09       	sbc	r27, r1
    3940:	b6 95       	lsr	r27
    3942:	a7 95       	ror	r26
    3944:	97 95       	ror	r25
    3946:	87 95       	ror	r24
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	11 c0       	rjmp	.+34     	; 0x396e <twiCreate+0x76>
    394c:	c7 01       	movw	r24, r14
    394e:	b6 01       	movw	r22, r12
    3950:	20 e8       	ldi	r18, 0x80	; 128
    3952:	3a e1       	ldi	r19, 0x1A	; 26
    3954:	46 e0       	ldi	r20, 0x06	; 6
    3956:	50 e0       	ldi	r21, 0x00	; 0
    3958:	67 d3       	rcall	.+1742   	; 0x4028 <__udivmodsi4>
    395a:	da 01       	movw	r26, r20
    395c:	c9 01       	movw	r24, r18
    395e:	40 97       	sbiw	r24, 0x10	; 16
    3960:	a1 09       	sbc	r26, r1
    3962:	b1 09       	sbc	r27, r1
    3964:	b6 95       	lsr	r27
    3966:	a7 95       	ror	r26
    3968:	97 95       	ror	r25
    396a:	87 95       	ror	r24
    396c:	89 83       	std	Y+1, r24	; 0x01
    396e:	1b 83       	std	Y+3, r17	; 0x03
    3970:	0a 83       	std	Y+2, r16	; 0x02
    3972:	8c 2f       	mov	r24, r28
    3974:	9d 2f       	mov	r25, r29
    3976:	02 c0       	rjmp	.+4      	; 0x397c <twiCreate+0x84>
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	df 91       	pop	r29
    397e:	cf 91       	pop	r28
    3980:	1f 91       	pop	r17
    3982:	0f 91       	pop	r16
    3984:	ff 90       	pop	r15
    3986:	ef 90       	pop	r14
    3988:	df 90       	pop	r13
    398a:	cf 90       	pop	r12
    398c:	bf 90       	pop	r11
    398e:	af 90       	pop	r10
    3990:	08 95       	ret

00003992 <twiIsBusy>:
    3992:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3996:	81 70       	andi	r24, 0x01	; 1
    3998:	08 95       	ret

0000399a <twiTransmit>:
    399a:	ff 92       	push	r15
    399c:	0f 93       	push	r16
    399e:	1f 93       	push	r17
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	d1 f1       	breq	.+116    	; 0x3a1c <twiTransmit+0x82>
    39a8:	4a 30       	cpi	r20, 0x0A	; 10
    39aa:	d0 f5       	brcc	.+116    	; 0x3a20 <twiTransmit+0x86>
    39ac:	f4 2e       	mov	r15, r20
    39ae:	8b 01       	movw	r16, r22
    39b0:	ec 01       	movw	r28, r24
    39b2:	ef df       	rcall	.-34     	; 0x3992 <twiIsBusy>
    39b4:	81 11       	cpse	r24, r1
    39b6:	36 c0       	rjmp	.+108    	; 0x3a24 <twiTransmit+0x8a>
    39b8:	80 91 50 0e 	lds	r24, 0x0E50	; 0x800e50 <_twiCurrentHandler>
    39bc:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <_twiCurrentHandler+0x1>
    39c0:	c8 17       	cp	r28, r24
    39c2:	d9 07       	cpc	r29, r25
    39c4:	41 f0       	breq	.+16     	; 0x39d6 <twiTransmit+0x3c>
    39c6:	87 df       	rcall	.-242    	; 0x38d6 <_initTwiInterface>
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    39ce:	d0 93 51 0e 	sts	0x0E51, r29	; 0x800e51 <_twiCurrentHandler+0x1>
    39d2:	c0 93 50 0e 	sts	0x0E50, r28	; 0x800e50 <_twiCurrentHandler>
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	8f 0d       	add	r24, r15
    39da:	80 93 52 0e 	sts	0x0E52, r24	; 0x800e52 <_twiMessageLen>
    39de:	88 81       	ld	r24, Y
    39e0:	88 0f       	add	r24, r24
    39e2:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <_twiMessageBuffer>
    39e6:	ff 20       	and	r15, r15
    39e8:	89 f0       	breq	.+34     	; 0x3a0c <twiTransmit+0x72>
    39ea:	f8 01       	movw	r30, r16
    39ec:	a4 e5       	ldi	r26, 0x54	; 84
    39ee:	be e0       	ldi	r27, 0x0E	; 14
    39f0:	4f ef       	ldi	r20, 0xFF	; 255
    39f2:	4f 0d       	add	r20, r15
    39f4:	64 2f       	mov	r22, r20
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	cb 01       	movw	r24, r22
    39fa:	01 96       	adiw	r24, 0x01	; 1
    39fc:	b8 01       	movw	r22, r16
    39fe:	68 0f       	add	r22, r24
    3a00:	79 1f       	adc	r23, r25
    3a02:	81 91       	ld	r24, Z+
    3a04:	8d 93       	st	X+, r24
    3a06:	e6 17       	cp	r30, r22
    3a08:	f7 07       	cpc	r31, r23
    3a0a:	d9 f7       	brne	.-10     	; 0x3a02 <twiTransmit+0x68>
    3a0c:	88 ef       	ldi	r24, 0xF8	; 248
    3a0e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3a12:	85 ea       	ldi	r24, 0xA5	; 165
    3a14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a18:	84 e0       	ldi	r24, 0x04	; 4
    3a1a:	05 c0       	rjmp	.+10     	; 0x3a26 <twiTransmit+0x8c>
    3a1c:	86 e0       	ldi	r24, 0x06	; 6
    3a1e:	03 c0       	rjmp	.+6      	; 0x3a26 <twiTransmit+0x8c>
    3a20:	87 e0       	ldi	r24, 0x07	; 7
    3a22:	01 c0       	rjmp	.+2      	; 0x3a26 <twiTransmit+0x8c>
    3a24:	82 e0       	ldi	r24, 0x02	; 2
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	08 95       	ret

00003a32 <twiReceive>:
    3a32:	1f 93       	push	r17
    3a34:	cf 93       	push	r28
    3a36:	df 93       	push	r29
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	29 f1       	breq	.+74     	; 0x3a86 <twiReceive+0x54>
    3a3c:	6b 30       	cpi	r22, 0x0B	; 11
    3a3e:	28 f5       	brcc	.+74     	; 0x3a8a <twiReceive+0x58>
    3a40:	16 2f       	mov	r17, r22
    3a42:	ec 01       	movw	r28, r24
    3a44:	a6 df       	rcall	.-180    	; 0x3992 <twiIsBusy>
    3a46:	81 11       	cpse	r24, r1
    3a48:	22 c0       	rjmp	.+68     	; 0x3a8e <twiReceive+0x5c>
    3a4a:	80 91 50 0e 	lds	r24, 0x0E50	; 0x800e50 <_twiCurrentHandler>
    3a4e:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <_twiCurrentHandler+0x1>
    3a52:	c8 17       	cp	r28, r24
    3a54:	d9 07       	cpc	r29, r25
    3a56:	41 f0       	breq	.+16     	; 0x3a68 <twiReceive+0x36>
    3a58:	3e df       	rcall	.-388    	; 0x38d6 <_initTwiInterface>
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3a60:	d0 93 51 0e 	sts	0x0E51, r29	; 0x800e51 <_twiCurrentHandler+0x1>
    3a64:	c0 93 50 0e 	sts	0x0E50, r28	; 0x800e50 <_twiCurrentHandler>
    3a68:	10 93 52 0e 	sts	0x0E52, r17	; 0x800e52 <_twiMessageLen>
    3a6c:	88 81       	ld	r24, Y
    3a6e:	88 0f       	add	r24, r24
    3a70:	81 60       	ori	r24, 0x01	; 1
    3a72:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <_twiMessageBuffer>
    3a76:	88 ef       	ldi	r24, 0xF8	; 248
    3a78:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3a7c:	85 ea       	ldi	r24, 0xA5	; 165
    3a7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a82:	85 e0       	ldi	r24, 0x05	; 5
    3a84:	05 c0       	rjmp	.+10     	; 0x3a90 <twiReceive+0x5e>
    3a86:	86 e0       	ldi	r24, 0x06	; 6
    3a88:	03 c0       	rjmp	.+6      	; 0x3a90 <twiReceive+0x5e>
    3a8a:	87 e0       	ldi	r24, 0x07	; 7
    3a8c:	01 c0       	rjmp	.+2      	; 0x3a90 <twiReceive+0x5e>
    3a8e:	82 e0       	ldi	r24, 0x02	; 2
    3a90:	df 91       	pop	r29
    3a92:	cf 91       	pop	r28
    3a94:	1f 91       	pop	r17
    3a96:	08 95       	ret

00003a98 <__vector_39>:
    3a98:	1f 92       	push	r1
    3a9a:	0f 92       	push	r0
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	0f 92       	push	r0
    3aa0:	11 24       	eor	r1, r1
    3aa2:	0b b6       	in	r0, 0x3b	; 59
    3aa4:	0f 92       	push	r0
    3aa6:	2f 93       	push	r18
    3aa8:	3f 93       	push	r19
    3aaa:	4f 93       	push	r20
    3aac:	5f 93       	push	r21
    3aae:	6f 93       	push	r22
    3ab0:	7f 93       	push	r23
    3ab2:	8f 93       	push	r24
    3ab4:	9f 93       	push	r25
    3ab6:	af 93       	push	r26
    3ab8:	bf 93       	push	r27
    3aba:	ef 93       	push	r30
    3abc:	ff 93       	push	r31
    3abe:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3ac2:	8e 2f       	mov	r24, r30
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	38 97       	sbiw	r30, 0x08	; 8
    3aca:	e1 35       	cpi	r30, 0x51	; 81
    3acc:	f1 05       	cpc	r31, r1
    3ace:	08 f0       	brcs	.+2      	; 0x3ad2 <__vector_39+0x3a>
    3ad0:	75 c0       	rjmp	.+234    	; 0x3bbc <__vector_39+0x124>
    3ad2:	88 27       	eor	r24, r24
    3ad4:	e4 58       	subi	r30, 0x84	; 132
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    3ada:	c8 c2       	rjmp	.+1424   	; 0x406c <__tablejump2__>
    3adc:	10 92 4f 0e 	sts	0x0E4F, r1	; 0x800e4f <_index.1885>
    3ae0:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <_index.1885>
    3ae4:	80 91 52 0e 	lds	r24, 0x0E52	; 0x800e52 <_twiMessageLen>
    3ae8:	e8 17       	cp	r30, r24
    3aea:	70 f4       	brcc	.+28     	; 0x3b08 <__vector_39+0x70>
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	8e 0f       	add	r24, r30
    3af0:	80 93 4f 0e 	sts	0x0E4F, r24	; 0x800e4f <_index.1885>
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	ed 5a       	subi	r30, 0xAD	; 173
    3af8:	f1 4f       	sbci	r31, 0xF1	; 241
    3afa:	80 81       	ld	r24, Z
    3afc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3b00:	85 e8       	ldi	r24, 0x85	; 133
    3b02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b06:	72 c0       	rjmp	.+228    	; 0x3bec <__vector_39+0x154>
    3b08:	84 e9       	ldi	r24, 0x94	; 148
    3b0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b0e:	80 91 50 0e 	lds	r24, 0x0E50	; 0x800e50 <_twiCurrentHandler>
    3b12:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <_twiCurrentHandler+0x1>
    3b16:	dc 01       	movw	r26, r24
    3b18:	12 96       	adiw	r26, 0x02	; 2
    3b1a:	ed 91       	ld	r30, X+
    3b1c:	fc 91       	ld	r31, X
    3b1e:	13 97       	sbiw	r26, 0x03	; 3
    3b20:	30 97       	sbiw	r30, 0x00	; 0
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <__vector_39+0x8e>
    3b24:	63 c0       	rjmp	.+198    	; 0x3bec <__vector_39+0x154>
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	40 e0       	ldi	r20, 0x00	; 0
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	64 e0       	ldi	r22, 0x04	; 4
    3b2e:	19 95       	eicall
    3b30:	5d c0       	rjmp	.+186    	; 0x3bec <__vector_39+0x154>
    3b32:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <_index.1885>
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	8e 0f       	add	r24, r30
    3b3a:	80 93 4f 0e 	sts	0x0E4F, r24	; 0x800e4f <_index.1885>
    3b3e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	ed 5a       	subi	r30, 0xAD	; 173
    3b46:	f1 4f       	sbci	r31, 0xF1	; 241
    3b48:	80 83       	st	Z, r24
    3b4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3b4e:	80 34       	cpi	r24, 0x40	; 64
    3b50:	11 f4       	brne	.+4      	; 0x3b56 <__vector_39+0xbe>
    3b52:	10 92 4f 0e 	sts	0x0E4F, r1	; 0x800e4f <_index.1885>
    3b56:	20 91 4f 0e 	lds	r18, 0x0E4F	; 0x800e4f <_index.1885>
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	80 91 52 0e 	lds	r24, 0x0E52	; 0x800e52 <_twiMessageLen>
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	28 17       	cp	r18, r24
    3b66:	39 07       	cpc	r19, r25
    3b68:	24 f4       	brge	.+8      	; 0x3b72 <__vector_39+0xda>
    3b6a:	85 ec       	ldi	r24, 0xC5	; 197
    3b6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b70:	3d c0       	rjmp	.+122    	; 0x3bec <__vector_39+0x154>
    3b72:	85 e8       	ldi	r24, 0x85	; 133
    3b74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b78:	39 c0       	rjmp	.+114    	; 0x3bec <__vector_39+0x154>
    3b7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3b7e:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <_index.1885>
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	ed 5a       	subi	r30, 0xAD	; 173
    3b86:	f1 4f       	sbci	r31, 0xF1	; 241
    3b88:	80 83       	st	Z, r24
    3b8a:	84 e9       	ldi	r24, 0x94	; 148
    3b8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b90:	80 91 50 0e 	lds	r24, 0x0E50	; 0x800e50 <_twiCurrentHandler>
    3b94:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <_twiCurrentHandler+0x1>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	12 96       	adiw	r26, 0x02	; 2
    3b9c:	ed 91       	ld	r30, X+
    3b9e:	fc 91       	ld	r31, X
    3ba0:	13 97       	sbiw	r26, 0x03	; 3
    3ba2:	30 97       	sbiw	r30, 0x00	; 0
    3ba4:	19 f1       	breq	.+70     	; 0x3bec <__vector_39+0x154>
    3ba6:	20 91 52 0e 	lds	r18, 0x0E52	; 0x800e52 <_twiMessageLen>
    3baa:	43 e5       	ldi	r20, 0x53	; 83
    3bac:	5e e0       	ldi	r21, 0x0E	; 14
    3bae:	65 e0       	ldi	r22, 0x05	; 5
    3bb0:	19 95       	eicall
    3bb2:	1c c0       	rjmp	.+56     	; 0x3bec <__vector_39+0x154>
    3bb4:	85 ea       	ldi	r24, 0xA5	; 165
    3bb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3bba:	18 c0       	rjmp	.+48     	; 0x3bec <__vector_39+0x154>
    3bbc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3bc0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3bc4:	84 e0       	ldi	r24, 0x04	; 4
    3bc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3bca:	80 91 50 0e 	lds	r24, 0x0E50	; 0x800e50 <_twiCurrentHandler>
    3bce:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <_twiCurrentHandler+0x1>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	12 96       	adiw	r26, 0x02	; 2
    3bd6:	ed 91       	ld	r30, X+
    3bd8:	fc 91       	ld	r31, X
    3bda:	13 97       	sbiw	r26, 0x03	; 3
    3bdc:	30 97       	sbiw	r30, 0x00	; 0
    3bde:	31 f0       	breq	.+12     	; 0x3bec <__vector_39+0x154>
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    3bea:	19 95       	eicall
    3bec:	ff 91       	pop	r31
    3bee:	ef 91       	pop	r30
    3bf0:	bf 91       	pop	r27
    3bf2:	af 91       	pop	r26
    3bf4:	9f 91       	pop	r25
    3bf6:	8f 91       	pop	r24
    3bf8:	7f 91       	pop	r23
    3bfa:	6f 91       	pop	r22
    3bfc:	5f 91       	pop	r21
    3bfe:	4f 91       	pop	r20
    3c00:	3f 91       	pop	r19
    3c02:	2f 91       	pop	r18
    3c04:	0f 90       	pop	r0
    3c06:	0b be       	out	0x3b, r0	; 59
    3c08:	0f 90       	pop	r0
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	0f 90       	pop	r0
    3c0e:	1f 90       	pop	r1
    3c10:	18 95       	reti

00003c12 <fifo_init>:
    3c12:	fc 01       	movw	r30, r24
    3c14:	41 11       	cpse	r20, r1
    3c16:	01 c0       	rjmp	.+2      	; 0x3c1a <fifo_init+0x8>
    3c18:	6c d3       	rcall	.+1752   	; 0x42f2 <abort>
    3c1a:	84 2f       	mov	r24, r20
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	9c 01       	movw	r18, r24
    3c20:	21 50       	subi	r18, 0x01	; 1
    3c22:	31 09       	sbc	r19, r1
    3c24:	82 23       	and	r24, r18
    3c26:	93 23       	and	r25, r19
    3c28:	89 2b       	or	r24, r25
    3c2a:	09 f0       	breq	.+2      	; 0x3c2e <fifo_init+0x1c>
    3c2c:	62 d3       	rcall	.+1732   	; 0x42f2 <abort>
    3c2e:	41 38       	cpi	r20, 0x81	; 129
    3c30:	08 f0       	brcs	.+2      	; 0x3c34 <fifo_init+0x22>
    3c32:	5f d3       	rcall	.+1726   	; 0x42f2 <abort>
    3c34:	12 82       	std	Z+2, r1	; 0x02
    3c36:	13 82       	std	Z+3, r1	; 0x03
    3c38:	44 83       	std	Z+4, r20	; 0x04
    3c3a:	44 0f       	add	r20, r20
    3c3c:	41 50       	subi	r20, 0x01	; 1
    3c3e:	45 83       	std	Z+5, r20	; 0x05
    3c40:	71 83       	std	Z+1, r23	; 0x01
    3c42:	60 83       	st	Z, r22
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	08 95       	ret

00003c4a <__subsf3>:
    3c4a:	50 58       	subi	r21, 0x80	; 128

00003c4c <__addsf3>:
    3c4c:	bb 27       	eor	r27, r27
    3c4e:	aa 27       	eor	r26, r26
    3c50:	0e d0       	rcall	.+28     	; 0x3c6e <__addsf3x>
    3c52:	4d c1       	rjmp	.+666    	; 0x3eee <__fp_round>
    3c54:	3e d1       	rcall	.+636    	; 0x3ed2 <__fp_pscA>
    3c56:	30 f0       	brcs	.+12     	; 0x3c64 <__addsf3+0x18>
    3c58:	43 d1       	rcall	.+646    	; 0x3ee0 <__fp_pscB>
    3c5a:	20 f0       	brcs	.+8      	; 0x3c64 <__addsf3+0x18>
    3c5c:	31 f4       	brne	.+12     	; 0x3c6a <__addsf3+0x1e>
    3c5e:	9f 3f       	cpi	r25, 0xFF	; 255
    3c60:	11 f4       	brne	.+4      	; 0x3c66 <__addsf3+0x1a>
    3c62:	1e f4       	brtc	.+6      	; 0x3c6a <__addsf3+0x1e>
    3c64:	33 c1       	rjmp	.+614    	; 0x3ecc <__fp_nan>
    3c66:	0e f4       	brtc	.+2      	; 0x3c6a <__addsf3+0x1e>
    3c68:	e0 95       	com	r30
    3c6a:	e7 fb       	bst	r30, 7
    3c6c:	29 c1       	rjmp	.+594    	; 0x3ec0 <__fp_inf>

00003c6e <__addsf3x>:
    3c6e:	e9 2f       	mov	r30, r25
    3c70:	4f d1       	rcall	.+670    	; 0x3f10 <__fp_split3>
    3c72:	80 f3       	brcs	.-32     	; 0x3c54 <__addsf3+0x8>
    3c74:	ba 17       	cp	r27, r26
    3c76:	62 07       	cpc	r22, r18
    3c78:	73 07       	cpc	r23, r19
    3c7a:	84 07       	cpc	r24, r20
    3c7c:	95 07       	cpc	r25, r21
    3c7e:	18 f0       	brcs	.+6      	; 0x3c86 <__addsf3x+0x18>
    3c80:	71 f4       	brne	.+28     	; 0x3c9e <__addsf3x+0x30>
    3c82:	9e f5       	brtc	.+102    	; 0x3cea <__addsf3x+0x7c>
    3c84:	67 c1       	rjmp	.+718    	; 0x3f54 <__fp_zero>
    3c86:	0e f4       	brtc	.+2      	; 0x3c8a <__addsf3x+0x1c>
    3c88:	e0 95       	com	r30
    3c8a:	0b 2e       	mov	r0, r27
    3c8c:	ba 2f       	mov	r27, r26
    3c8e:	a0 2d       	mov	r26, r0
    3c90:	0b 01       	movw	r0, r22
    3c92:	b9 01       	movw	r22, r18
    3c94:	90 01       	movw	r18, r0
    3c96:	0c 01       	movw	r0, r24
    3c98:	ca 01       	movw	r24, r20
    3c9a:	a0 01       	movw	r20, r0
    3c9c:	11 24       	eor	r1, r1
    3c9e:	ff 27       	eor	r31, r31
    3ca0:	59 1b       	sub	r21, r25
    3ca2:	99 f0       	breq	.+38     	; 0x3cca <__addsf3x+0x5c>
    3ca4:	59 3f       	cpi	r21, 0xF9	; 249
    3ca6:	50 f4       	brcc	.+20     	; 0x3cbc <__addsf3x+0x4e>
    3ca8:	50 3e       	cpi	r21, 0xE0	; 224
    3caa:	68 f1       	brcs	.+90     	; 0x3d06 <__addsf3x+0x98>
    3cac:	1a 16       	cp	r1, r26
    3cae:	f0 40       	sbci	r31, 0x00	; 0
    3cb0:	a2 2f       	mov	r26, r18
    3cb2:	23 2f       	mov	r18, r19
    3cb4:	34 2f       	mov	r19, r20
    3cb6:	44 27       	eor	r20, r20
    3cb8:	58 5f       	subi	r21, 0xF8	; 248
    3cba:	f3 cf       	rjmp	.-26     	; 0x3ca2 <__addsf3x+0x34>
    3cbc:	46 95       	lsr	r20
    3cbe:	37 95       	ror	r19
    3cc0:	27 95       	ror	r18
    3cc2:	a7 95       	ror	r26
    3cc4:	f0 40       	sbci	r31, 0x00	; 0
    3cc6:	53 95       	inc	r21
    3cc8:	c9 f7       	brne	.-14     	; 0x3cbc <__addsf3x+0x4e>
    3cca:	7e f4       	brtc	.+30     	; 0x3cea <__addsf3x+0x7c>
    3ccc:	1f 16       	cp	r1, r31
    3cce:	ba 0b       	sbc	r27, r26
    3cd0:	62 0b       	sbc	r22, r18
    3cd2:	73 0b       	sbc	r23, r19
    3cd4:	84 0b       	sbc	r24, r20
    3cd6:	ba f0       	brmi	.+46     	; 0x3d06 <__addsf3x+0x98>
    3cd8:	91 50       	subi	r25, 0x01	; 1
    3cda:	a1 f0       	breq	.+40     	; 0x3d04 <__addsf3x+0x96>
    3cdc:	ff 0f       	add	r31, r31
    3cde:	bb 1f       	adc	r27, r27
    3ce0:	66 1f       	adc	r22, r22
    3ce2:	77 1f       	adc	r23, r23
    3ce4:	88 1f       	adc	r24, r24
    3ce6:	c2 f7       	brpl	.-16     	; 0x3cd8 <__addsf3x+0x6a>
    3ce8:	0e c0       	rjmp	.+28     	; 0x3d06 <__addsf3x+0x98>
    3cea:	ba 0f       	add	r27, r26
    3cec:	62 1f       	adc	r22, r18
    3cee:	73 1f       	adc	r23, r19
    3cf0:	84 1f       	adc	r24, r20
    3cf2:	48 f4       	brcc	.+18     	; 0x3d06 <__addsf3x+0x98>
    3cf4:	87 95       	ror	r24
    3cf6:	77 95       	ror	r23
    3cf8:	67 95       	ror	r22
    3cfa:	b7 95       	ror	r27
    3cfc:	f7 95       	ror	r31
    3cfe:	9e 3f       	cpi	r25, 0xFE	; 254
    3d00:	08 f0       	brcs	.+2      	; 0x3d04 <__addsf3x+0x96>
    3d02:	b3 cf       	rjmp	.-154    	; 0x3c6a <__addsf3+0x1e>
    3d04:	93 95       	inc	r25
    3d06:	88 0f       	add	r24, r24
    3d08:	08 f0       	brcs	.+2      	; 0x3d0c <__addsf3x+0x9e>
    3d0a:	99 27       	eor	r25, r25
    3d0c:	ee 0f       	add	r30, r30
    3d0e:	97 95       	ror	r25
    3d10:	87 95       	ror	r24
    3d12:	08 95       	ret

00003d14 <__divsf3>:
    3d14:	0c d0       	rcall	.+24     	; 0x3d2e <__divsf3x>
    3d16:	eb c0       	rjmp	.+470    	; 0x3eee <__fp_round>
    3d18:	e3 d0       	rcall	.+454    	; 0x3ee0 <__fp_pscB>
    3d1a:	40 f0       	brcs	.+16     	; 0x3d2c <__divsf3+0x18>
    3d1c:	da d0       	rcall	.+436    	; 0x3ed2 <__fp_pscA>
    3d1e:	30 f0       	brcs	.+12     	; 0x3d2c <__divsf3+0x18>
    3d20:	21 f4       	brne	.+8      	; 0x3d2a <__divsf3+0x16>
    3d22:	5f 3f       	cpi	r21, 0xFF	; 255
    3d24:	19 f0       	breq	.+6      	; 0x3d2c <__divsf3+0x18>
    3d26:	cc c0       	rjmp	.+408    	; 0x3ec0 <__fp_inf>
    3d28:	51 11       	cpse	r21, r1
    3d2a:	15 c1       	rjmp	.+554    	; 0x3f56 <__fp_szero>
    3d2c:	cf c0       	rjmp	.+414    	; 0x3ecc <__fp_nan>

00003d2e <__divsf3x>:
    3d2e:	f0 d0       	rcall	.+480    	; 0x3f10 <__fp_split3>
    3d30:	98 f3       	brcs	.-26     	; 0x3d18 <__divsf3+0x4>

00003d32 <__divsf3_pse>:
    3d32:	99 23       	and	r25, r25
    3d34:	c9 f3       	breq	.-14     	; 0x3d28 <__divsf3+0x14>
    3d36:	55 23       	and	r21, r21
    3d38:	b1 f3       	breq	.-20     	; 0x3d26 <__divsf3+0x12>
    3d3a:	95 1b       	sub	r25, r21
    3d3c:	55 0b       	sbc	r21, r21
    3d3e:	bb 27       	eor	r27, r27
    3d40:	aa 27       	eor	r26, r26
    3d42:	62 17       	cp	r22, r18
    3d44:	73 07       	cpc	r23, r19
    3d46:	84 07       	cpc	r24, r20
    3d48:	38 f0       	brcs	.+14     	; 0x3d58 <__divsf3_pse+0x26>
    3d4a:	9f 5f       	subi	r25, 0xFF	; 255
    3d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d4e:	22 0f       	add	r18, r18
    3d50:	33 1f       	adc	r19, r19
    3d52:	44 1f       	adc	r20, r20
    3d54:	aa 1f       	adc	r26, r26
    3d56:	a9 f3       	breq	.-22     	; 0x3d42 <__divsf3_pse+0x10>
    3d58:	33 d0       	rcall	.+102    	; 0x3dc0 <__divsf3_pse+0x8e>
    3d5a:	0e 2e       	mov	r0, r30
    3d5c:	3a f0       	brmi	.+14     	; 0x3d6c <__divsf3_pse+0x3a>
    3d5e:	e0 e8       	ldi	r30, 0x80	; 128
    3d60:	30 d0       	rcall	.+96     	; 0x3dc2 <__divsf3_pse+0x90>
    3d62:	91 50       	subi	r25, 0x01	; 1
    3d64:	50 40       	sbci	r21, 0x00	; 0
    3d66:	e6 95       	lsr	r30
    3d68:	00 1c       	adc	r0, r0
    3d6a:	ca f7       	brpl	.-14     	; 0x3d5e <__divsf3_pse+0x2c>
    3d6c:	29 d0       	rcall	.+82     	; 0x3dc0 <__divsf3_pse+0x8e>
    3d6e:	fe 2f       	mov	r31, r30
    3d70:	27 d0       	rcall	.+78     	; 0x3dc0 <__divsf3_pse+0x8e>
    3d72:	66 0f       	add	r22, r22
    3d74:	77 1f       	adc	r23, r23
    3d76:	88 1f       	adc	r24, r24
    3d78:	bb 1f       	adc	r27, r27
    3d7a:	26 17       	cp	r18, r22
    3d7c:	37 07       	cpc	r19, r23
    3d7e:	48 07       	cpc	r20, r24
    3d80:	ab 07       	cpc	r26, r27
    3d82:	b0 e8       	ldi	r27, 0x80	; 128
    3d84:	09 f0       	breq	.+2      	; 0x3d88 <__divsf3_pse+0x56>
    3d86:	bb 0b       	sbc	r27, r27
    3d88:	80 2d       	mov	r24, r0
    3d8a:	bf 01       	movw	r22, r30
    3d8c:	ff 27       	eor	r31, r31
    3d8e:	93 58       	subi	r25, 0x83	; 131
    3d90:	5f 4f       	sbci	r21, 0xFF	; 255
    3d92:	2a f0       	brmi	.+10     	; 0x3d9e <__divsf3_pse+0x6c>
    3d94:	9e 3f       	cpi	r25, 0xFE	; 254
    3d96:	51 05       	cpc	r21, r1
    3d98:	68 f0       	brcs	.+26     	; 0x3db4 <__divsf3_pse+0x82>
    3d9a:	92 c0       	rjmp	.+292    	; 0x3ec0 <__fp_inf>
    3d9c:	dc c0       	rjmp	.+440    	; 0x3f56 <__fp_szero>
    3d9e:	5f 3f       	cpi	r21, 0xFF	; 255
    3da0:	ec f3       	brlt	.-6      	; 0x3d9c <__divsf3_pse+0x6a>
    3da2:	98 3e       	cpi	r25, 0xE8	; 232
    3da4:	dc f3       	brlt	.-10     	; 0x3d9c <__divsf3_pse+0x6a>
    3da6:	86 95       	lsr	r24
    3da8:	77 95       	ror	r23
    3daa:	67 95       	ror	r22
    3dac:	b7 95       	ror	r27
    3dae:	f7 95       	ror	r31
    3db0:	9f 5f       	subi	r25, 0xFF	; 255
    3db2:	c9 f7       	brne	.-14     	; 0x3da6 <__divsf3_pse+0x74>
    3db4:	88 0f       	add	r24, r24
    3db6:	91 1d       	adc	r25, r1
    3db8:	96 95       	lsr	r25
    3dba:	87 95       	ror	r24
    3dbc:	97 f9       	bld	r25, 7
    3dbe:	08 95       	ret
    3dc0:	e1 e0       	ldi	r30, 0x01	; 1
    3dc2:	66 0f       	add	r22, r22
    3dc4:	77 1f       	adc	r23, r23
    3dc6:	88 1f       	adc	r24, r24
    3dc8:	bb 1f       	adc	r27, r27
    3dca:	62 17       	cp	r22, r18
    3dcc:	73 07       	cpc	r23, r19
    3dce:	84 07       	cpc	r24, r20
    3dd0:	ba 07       	cpc	r27, r26
    3dd2:	20 f0       	brcs	.+8      	; 0x3ddc <__divsf3_pse+0xaa>
    3dd4:	62 1b       	sub	r22, r18
    3dd6:	73 0b       	sbc	r23, r19
    3dd8:	84 0b       	sbc	r24, r20
    3dda:	ba 0b       	sbc	r27, r26
    3ddc:	ee 1f       	adc	r30, r30
    3dde:	88 f7       	brcc	.-30     	; 0x3dc2 <__divsf3_pse+0x90>
    3de0:	e0 95       	com	r30
    3de2:	08 95       	ret

00003de4 <__fixsfsi>:
    3de4:	04 d0       	rcall	.+8      	; 0x3dee <__fixunssfsi>
    3de6:	68 94       	set
    3de8:	b1 11       	cpse	r27, r1
    3dea:	b5 c0       	rjmp	.+362    	; 0x3f56 <__fp_szero>
    3dec:	08 95       	ret

00003dee <__fixunssfsi>:
    3dee:	98 d0       	rcall	.+304    	; 0x3f20 <__fp_splitA>
    3df0:	88 f0       	brcs	.+34     	; 0x3e14 <__fixunssfsi+0x26>
    3df2:	9f 57       	subi	r25, 0x7F	; 127
    3df4:	90 f0       	brcs	.+36     	; 0x3e1a <__fixunssfsi+0x2c>
    3df6:	b9 2f       	mov	r27, r25
    3df8:	99 27       	eor	r25, r25
    3dfa:	b7 51       	subi	r27, 0x17	; 23
    3dfc:	a0 f0       	brcs	.+40     	; 0x3e26 <__fixunssfsi+0x38>
    3dfe:	d1 f0       	breq	.+52     	; 0x3e34 <__fixunssfsi+0x46>
    3e00:	66 0f       	add	r22, r22
    3e02:	77 1f       	adc	r23, r23
    3e04:	88 1f       	adc	r24, r24
    3e06:	99 1f       	adc	r25, r25
    3e08:	1a f0       	brmi	.+6      	; 0x3e10 <__fixunssfsi+0x22>
    3e0a:	ba 95       	dec	r27
    3e0c:	c9 f7       	brne	.-14     	; 0x3e00 <__fixunssfsi+0x12>
    3e0e:	12 c0       	rjmp	.+36     	; 0x3e34 <__fixunssfsi+0x46>
    3e10:	b1 30       	cpi	r27, 0x01	; 1
    3e12:	81 f0       	breq	.+32     	; 0x3e34 <__fixunssfsi+0x46>
    3e14:	9f d0       	rcall	.+318    	; 0x3f54 <__fp_zero>
    3e16:	b1 e0       	ldi	r27, 0x01	; 1
    3e18:	08 95       	ret
    3e1a:	9c c0       	rjmp	.+312    	; 0x3f54 <__fp_zero>
    3e1c:	67 2f       	mov	r22, r23
    3e1e:	78 2f       	mov	r23, r24
    3e20:	88 27       	eor	r24, r24
    3e22:	b8 5f       	subi	r27, 0xF8	; 248
    3e24:	39 f0       	breq	.+14     	; 0x3e34 <__fixunssfsi+0x46>
    3e26:	b9 3f       	cpi	r27, 0xF9	; 249
    3e28:	cc f3       	brlt	.-14     	; 0x3e1c <__fixunssfsi+0x2e>
    3e2a:	86 95       	lsr	r24
    3e2c:	77 95       	ror	r23
    3e2e:	67 95       	ror	r22
    3e30:	b3 95       	inc	r27
    3e32:	d9 f7       	brne	.-10     	; 0x3e2a <__fixunssfsi+0x3c>
    3e34:	3e f4       	brtc	.+14     	; 0x3e44 <__fixunssfsi+0x56>
    3e36:	90 95       	com	r25
    3e38:	80 95       	com	r24
    3e3a:	70 95       	com	r23
    3e3c:	61 95       	neg	r22
    3e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e40:	8f 4f       	sbci	r24, 0xFF	; 255
    3e42:	9f 4f       	sbci	r25, 0xFF	; 255
    3e44:	08 95       	ret

00003e46 <__floatunsisf>:
    3e46:	e8 94       	clt
    3e48:	09 c0       	rjmp	.+18     	; 0x3e5c <__floatsisf+0x12>

00003e4a <__floatsisf>:
    3e4a:	97 fb       	bst	r25, 7
    3e4c:	3e f4       	brtc	.+14     	; 0x3e5c <__floatsisf+0x12>
    3e4e:	90 95       	com	r25
    3e50:	80 95       	com	r24
    3e52:	70 95       	com	r23
    3e54:	61 95       	neg	r22
    3e56:	7f 4f       	sbci	r23, 0xFF	; 255
    3e58:	8f 4f       	sbci	r24, 0xFF	; 255
    3e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5c:	99 23       	and	r25, r25
    3e5e:	a9 f0       	breq	.+42     	; 0x3e8a <__floatsisf+0x40>
    3e60:	f9 2f       	mov	r31, r25
    3e62:	96 e9       	ldi	r25, 0x96	; 150
    3e64:	bb 27       	eor	r27, r27
    3e66:	93 95       	inc	r25
    3e68:	f6 95       	lsr	r31
    3e6a:	87 95       	ror	r24
    3e6c:	77 95       	ror	r23
    3e6e:	67 95       	ror	r22
    3e70:	b7 95       	ror	r27
    3e72:	f1 11       	cpse	r31, r1
    3e74:	f8 cf       	rjmp	.-16     	; 0x3e66 <__floatsisf+0x1c>
    3e76:	fa f4       	brpl	.+62     	; 0x3eb6 <__floatsisf+0x6c>
    3e78:	bb 0f       	add	r27, r27
    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <__floatsisf+0x36>
    3e7c:	60 ff       	sbrs	r22, 0
    3e7e:	1b c0       	rjmp	.+54     	; 0x3eb6 <__floatsisf+0x6c>
    3e80:	6f 5f       	subi	r22, 0xFF	; 255
    3e82:	7f 4f       	sbci	r23, 0xFF	; 255
    3e84:	8f 4f       	sbci	r24, 0xFF	; 255
    3e86:	9f 4f       	sbci	r25, 0xFF	; 255
    3e88:	16 c0       	rjmp	.+44     	; 0x3eb6 <__floatsisf+0x6c>
    3e8a:	88 23       	and	r24, r24
    3e8c:	11 f0       	breq	.+4      	; 0x3e92 <__floatsisf+0x48>
    3e8e:	96 e9       	ldi	r25, 0x96	; 150
    3e90:	11 c0       	rjmp	.+34     	; 0x3eb4 <__floatsisf+0x6a>
    3e92:	77 23       	and	r23, r23
    3e94:	21 f0       	breq	.+8      	; 0x3e9e <__floatsisf+0x54>
    3e96:	9e e8       	ldi	r25, 0x8E	; 142
    3e98:	87 2f       	mov	r24, r23
    3e9a:	76 2f       	mov	r23, r22
    3e9c:	05 c0       	rjmp	.+10     	; 0x3ea8 <__floatsisf+0x5e>
    3e9e:	66 23       	and	r22, r22
    3ea0:	71 f0       	breq	.+28     	; 0x3ebe <__floatsisf+0x74>
    3ea2:	96 e8       	ldi	r25, 0x86	; 134
    3ea4:	86 2f       	mov	r24, r22
    3ea6:	70 e0       	ldi	r23, 0x00	; 0
    3ea8:	60 e0       	ldi	r22, 0x00	; 0
    3eaa:	2a f0       	brmi	.+10     	; 0x3eb6 <__floatsisf+0x6c>
    3eac:	9a 95       	dec	r25
    3eae:	66 0f       	add	r22, r22
    3eb0:	77 1f       	adc	r23, r23
    3eb2:	88 1f       	adc	r24, r24
    3eb4:	da f7       	brpl	.-10     	; 0x3eac <__floatsisf+0x62>
    3eb6:	88 0f       	add	r24, r24
    3eb8:	96 95       	lsr	r25
    3eba:	87 95       	ror	r24
    3ebc:	97 f9       	bld	r25, 7
    3ebe:	08 95       	ret

00003ec0 <__fp_inf>:
    3ec0:	97 f9       	bld	r25, 7
    3ec2:	9f 67       	ori	r25, 0x7F	; 127
    3ec4:	80 e8       	ldi	r24, 0x80	; 128
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	60 e0       	ldi	r22, 0x00	; 0
    3eca:	08 95       	ret

00003ecc <__fp_nan>:
    3ecc:	9f ef       	ldi	r25, 0xFF	; 255
    3ece:	80 ec       	ldi	r24, 0xC0	; 192
    3ed0:	08 95       	ret

00003ed2 <__fp_pscA>:
    3ed2:	00 24       	eor	r0, r0
    3ed4:	0a 94       	dec	r0
    3ed6:	16 16       	cp	r1, r22
    3ed8:	17 06       	cpc	r1, r23
    3eda:	18 06       	cpc	r1, r24
    3edc:	09 06       	cpc	r0, r25
    3ede:	08 95       	ret

00003ee0 <__fp_pscB>:
    3ee0:	00 24       	eor	r0, r0
    3ee2:	0a 94       	dec	r0
    3ee4:	12 16       	cp	r1, r18
    3ee6:	13 06       	cpc	r1, r19
    3ee8:	14 06       	cpc	r1, r20
    3eea:	05 06       	cpc	r0, r21
    3eec:	08 95       	ret

00003eee <__fp_round>:
    3eee:	09 2e       	mov	r0, r25
    3ef0:	03 94       	inc	r0
    3ef2:	00 0c       	add	r0, r0
    3ef4:	11 f4       	brne	.+4      	; 0x3efa <__fp_round+0xc>
    3ef6:	88 23       	and	r24, r24
    3ef8:	52 f0       	brmi	.+20     	; 0x3f0e <__fp_round+0x20>
    3efa:	bb 0f       	add	r27, r27
    3efc:	40 f4       	brcc	.+16     	; 0x3f0e <__fp_round+0x20>
    3efe:	bf 2b       	or	r27, r31
    3f00:	11 f4       	brne	.+4      	; 0x3f06 <__fp_round+0x18>
    3f02:	60 ff       	sbrs	r22, 0
    3f04:	04 c0       	rjmp	.+8      	; 0x3f0e <__fp_round+0x20>
    3f06:	6f 5f       	subi	r22, 0xFF	; 255
    3f08:	7f 4f       	sbci	r23, 0xFF	; 255
    3f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0e:	08 95       	ret

00003f10 <__fp_split3>:
    3f10:	57 fd       	sbrc	r21, 7
    3f12:	90 58       	subi	r25, 0x80	; 128
    3f14:	44 0f       	add	r20, r20
    3f16:	55 1f       	adc	r21, r21
    3f18:	59 f0       	breq	.+22     	; 0x3f30 <__fp_splitA+0x10>
    3f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    3f1c:	71 f0       	breq	.+28     	; 0x3f3a <__fp_splitA+0x1a>
    3f1e:	47 95       	ror	r20

00003f20 <__fp_splitA>:
    3f20:	88 0f       	add	r24, r24
    3f22:	97 fb       	bst	r25, 7
    3f24:	99 1f       	adc	r25, r25
    3f26:	61 f0       	breq	.+24     	; 0x3f40 <__fp_splitA+0x20>
    3f28:	9f 3f       	cpi	r25, 0xFF	; 255
    3f2a:	79 f0       	breq	.+30     	; 0x3f4a <__fp_splitA+0x2a>
    3f2c:	87 95       	ror	r24
    3f2e:	08 95       	ret
    3f30:	12 16       	cp	r1, r18
    3f32:	13 06       	cpc	r1, r19
    3f34:	14 06       	cpc	r1, r20
    3f36:	55 1f       	adc	r21, r21
    3f38:	f2 cf       	rjmp	.-28     	; 0x3f1e <__fp_split3+0xe>
    3f3a:	46 95       	lsr	r20
    3f3c:	f1 df       	rcall	.-30     	; 0x3f20 <__fp_splitA>
    3f3e:	08 c0       	rjmp	.+16     	; 0x3f50 <__fp_splitA+0x30>
    3f40:	16 16       	cp	r1, r22
    3f42:	17 06       	cpc	r1, r23
    3f44:	18 06       	cpc	r1, r24
    3f46:	99 1f       	adc	r25, r25
    3f48:	f1 cf       	rjmp	.-30     	; 0x3f2c <__fp_splitA+0xc>
    3f4a:	86 95       	lsr	r24
    3f4c:	71 05       	cpc	r23, r1
    3f4e:	61 05       	cpc	r22, r1
    3f50:	08 94       	sec
    3f52:	08 95       	ret

00003f54 <__fp_zero>:
    3f54:	e8 94       	clt

00003f56 <__fp_szero>:
    3f56:	bb 27       	eor	r27, r27
    3f58:	66 27       	eor	r22, r22
    3f5a:	77 27       	eor	r23, r23
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	97 f9       	bld	r25, 7
    3f60:	08 95       	ret

00003f62 <__mulsf3>:
    3f62:	0b d0       	rcall	.+22     	; 0x3f7a <__mulsf3x>
    3f64:	c4 cf       	rjmp	.-120    	; 0x3eee <__fp_round>
    3f66:	b5 df       	rcall	.-150    	; 0x3ed2 <__fp_pscA>
    3f68:	28 f0       	brcs	.+10     	; 0x3f74 <__mulsf3+0x12>
    3f6a:	ba df       	rcall	.-140    	; 0x3ee0 <__fp_pscB>
    3f6c:	18 f0       	brcs	.+6      	; 0x3f74 <__mulsf3+0x12>
    3f6e:	95 23       	and	r25, r21
    3f70:	09 f0       	breq	.+2      	; 0x3f74 <__mulsf3+0x12>
    3f72:	a6 cf       	rjmp	.-180    	; 0x3ec0 <__fp_inf>
    3f74:	ab cf       	rjmp	.-170    	; 0x3ecc <__fp_nan>
    3f76:	11 24       	eor	r1, r1
    3f78:	ee cf       	rjmp	.-36     	; 0x3f56 <__fp_szero>

00003f7a <__mulsf3x>:
    3f7a:	ca df       	rcall	.-108    	; 0x3f10 <__fp_split3>
    3f7c:	a0 f3       	brcs	.-24     	; 0x3f66 <__mulsf3+0x4>

00003f7e <__mulsf3_pse>:
    3f7e:	95 9f       	mul	r25, r21
    3f80:	d1 f3       	breq	.-12     	; 0x3f76 <__mulsf3+0x14>
    3f82:	95 0f       	add	r25, r21
    3f84:	50 e0       	ldi	r21, 0x00	; 0
    3f86:	55 1f       	adc	r21, r21
    3f88:	62 9f       	mul	r22, r18
    3f8a:	f0 01       	movw	r30, r0
    3f8c:	72 9f       	mul	r23, r18
    3f8e:	bb 27       	eor	r27, r27
    3f90:	f0 0d       	add	r31, r0
    3f92:	b1 1d       	adc	r27, r1
    3f94:	63 9f       	mul	r22, r19
    3f96:	aa 27       	eor	r26, r26
    3f98:	f0 0d       	add	r31, r0
    3f9a:	b1 1d       	adc	r27, r1
    3f9c:	aa 1f       	adc	r26, r26
    3f9e:	64 9f       	mul	r22, r20
    3fa0:	66 27       	eor	r22, r22
    3fa2:	b0 0d       	add	r27, r0
    3fa4:	a1 1d       	adc	r26, r1
    3fa6:	66 1f       	adc	r22, r22
    3fa8:	82 9f       	mul	r24, r18
    3faa:	22 27       	eor	r18, r18
    3fac:	b0 0d       	add	r27, r0
    3fae:	a1 1d       	adc	r26, r1
    3fb0:	62 1f       	adc	r22, r18
    3fb2:	73 9f       	mul	r23, r19
    3fb4:	b0 0d       	add	r27, r0
    3fb6:	a1 1d       	adc	r26, r1
    3fb8:	62 1f       	adc	r22, r18
    3fba:	83 9f       	mul	r24, r19
    3fbc:	a0 0d       	add	r26, r0
    3fbe:	61 1d       	adc	r22, r1
    3fc0:	22 1f       	adc	r18, r18
    3fc2:	74 9f       	mul	r23, r20
    3fc4:	33 27       	eor	r19, r19
    3fc6:	a0 0d       	add	r26, r0
    3fc8:	61 1d       	adc	r22, r1
    3fca:	23 1f       	adc	r18, r19
    3fcc:	84 9f       	mul	r24, r20
    3fce:	60 0d       	add	r22, r0
    3fd0:	21 1d       	adc	r18, r1
    3fd2:	82 2f       	mov	r24, r18
    3fd4:	76 2f       	mov	r23, r22
    3fd6:	6a 2f       	mov	r22, r26
    3fd8:	11 24       	eor	r1, r1
    3fda:	9f 57       	subi	r25, 0x7F	; 127
    3fdc:	50 40       	sbci	r21, 0x00	; 0
    3fde:	8a f0       	brmi	.+34     	; 0x4002 <__mulsf3_pse+0x84>
    3fe0:	e1 f0       	breq	.+56     	; 0x401a <__mulsf3_pse+0x9c>
    3fe2:	88 23       	and	r24, r24
    3fe4:	4a f0       	brmi	.+18     	; 0x3ff8 <__mulsf3_pse+0x7a>
    3fe6:	ee 0f       	add	r30, r30
    3fe8:	ff 1f       	adc	r31, r31
    3fea:	bb 1f       	adc	r27, r27
    3fec:	66 1f       	adc	r22, r22
    3fee:	77 1f       	adc	r23, r23
    3ff0:	88 1f       	adc	r24, r24
    3ff2:	91 50       	subi	r25, 0x01	; 1
    3ff4:	50 40       	sbci	r21, 0x00	; 0
    3ff6:	a9 f7       	brne	.-22     	; 0x3fe2 <__mulsf3_pse+0x64>
    3ff8:	9e 3f       	cpi	r25, 0xFE	; 254
    3ffa:	51 05       	cpc	r21, r1
    3ffc:	70 f0       	brcs	.+28     	; 0x401a <__mulsf3_pse+0x9c>
    3ffe:	60 cf       	rjmp	.-320    	; 0x3ec0 <__fp_inf>
    4000:	aa cf       	rjmp	.-172    	; 0x3f56 <__fp_szero>
    4002:	5f 3f       	cpi	r21, 0xFF	; 255
    4004:	ec f3       	brlt	.-6      	; 0x4000 <__mulsf3_pse+0x82>
    4006:	98 3e       	cpi	r25, 0xE8	; 232
    4008:	dc f3       	brlt	.-10     	; 0x4000 <__mulsf3_pse+0x82>
    400a:	86 95       	lsr	r24
    400c:	77 95       	ror	r23
    400e:	67 95       	ror	r22
    4010:	b7 95       	ror	r27
    4012:	f7 95       	ror	r31
    4014:	e7 95       	ror	r30
    4016:	9f 5f       	subi	r25, 0xFF	; 255
    4018:	c1 f7       	brne	.-16     	; 0x400a <__mulsf3_pse+0x8c>
    401a:	fe 2b       	or	r31, r30
    401c:	88 0f       	add	r24, r24
    401e:	91 1d       	adc	r25, r1
    4020:	96 95       	lsr	r25
    4022:	87 95       	ror	r24
    4024:	97 f9       	bld	r25, 7
    4026:	08 95       	ret

00004028 <__udivmodsi4>:
    4028:	a1 e2       	ldi	r26, 0x21	; 33
    402a:	1a 2e       	mov	r1, r26
    402c:	aa 1b       	sub	r26, r26
    402e:	bb 1b       	sub	r27, r27
    4030:	fd 01       	movw	r30, r26
    4032:	0d c0       	rjmp	.+26     	; 0x404e <__udivmodsi4_ep>

00004034 <__udivmodsi4_loop>:
    4034:	aa 1f       	adc	r26, r26
    4036:	bb 1f       	adc	r27, r27
    4038:	ee 1f       	adc	r30, r30
    403a:	ff 1f       	adc	r31, r31
    403c:	a2 17       	cp	r26, r18
    403e:	b3 07       	cpc	r27, r19
    4040:	e4 07       	cpc	r30, r20
    4042:	f5 07       	cpc	r31, r21
    4044:	20 f0       	brcs	.+8      	; 0x404e <__udivmodsi4_ep>
    4046:	a2 1b       	sub	r26, r18
    4048:	b3 0b       	sbc	r27, r19
    404a:	e4 0b       	sbc	r30, r20
    404c:	f5 0b       	sbc	r31, r21

0000404e <__udivmodsi4_ep>:
    404e:	66 1f       	adc	r22, r22
    4050:	77 1f       	adc	r23, r23
    4052:	88 1f       	adc	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	1a 94       	dec	r1
    4058:	69 f7       	brne	.-38     	; 0x4034 <__udivmodsi4_loop>
    405a:	60 95       	com	r22
    405c:	70 95       	com	r23
    405e:	80 95       	com	r24
    4060:	90 95       	com	r25
    4062:	9b 01       	movw	r18, r22
    4064:	ac 01       	movw	r20, r24
    4066:	bd 01       	movw	r22, r26
    4068:	cf 01       	movw	r24, r30
    406a:	08 95       	ret

0000406c <__tablejump2__>:
    406c:	ee 0f       	add	r30, r30
    406e:	ff 1f       	adc	r31, r31
    4070:	88 1f       	adc	r24, r24
    4072:	8b bf       	out	0x3b, r24	; 59
    4074:	07 90       	elpm	r0, Z+
    4076:	f6 91       	elpm	r31, Z
    4078:	e0 2d       	mov	r30, r0
    407a:	19 94       	eijmp

0000407c <calloc>:
    407c:	0f 93       	push	r16
    407e:	1f 93       	push	r17
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	86 9f       	mul	r24, r22
    4086:	80 01       	movw	r16, r0
    4088:	87 9f       	mul	r24, r23
    408a:	10 0d       	add	r17, r0
    408c:	96 9f       	mul	r25, r22
    408e:	10 0d       	add	r17, r0
    4090:	11 24       	eor	r1, r1
    4092:	c8 01       	movw	r24, r16
    4094:	0d d0       	rcall	.+26     	; 0x40b0 <malloc>
    4096:	ec 01       	movw	r28, r24
    4098:	00 97       	sbiw	r24, 0x00	; 0
    409a:	21 f0       	breq	.+8      	; 0x40a4 <calloc+0x28>
    409c:	a8 01       	movw	r20, r16
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	34 d1       	rcall	.+616    	; 0x430c <memset>
    40a4:	ce 01       	movw	r24, r28
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	1f 91       	pop	r17
    40ac:	0f 91       	pop	r16
    40ae:	08 95       	ret

000040b0 <malloc>:
    40b0:	0f 93       	push	r16
    40b2:	1f 93       	push	r17
    40b4:	cf 93       	push	r28
    40b6:	df 93       	push	r29
    40b8:	82 30       	cpi	r24, 0x02	; 2
    40ba:	91 05       	cpc	r25, r1
    40bc:	10 f4       	brcc	.+4      	; 0x40c2 <malloc+0x12>
    40be:	82 e0       	ldi	r24, 0x02	; 2
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <__flp>
    40c6:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <__flp+0x1>
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	a0 e0       	ldi	r26, 0x00	; 0
    40d0:	b0 e0       	ldi	r27, 0x00	; 0
    40d2:	30 97       	sbiw	r30, 0x00	; 0
    40d4:	19 f1       	breq	.+70     	; 0x411c <malloc+0x6c>
    40d6:	40 81       	ld	r20, Z
    40d8:	51 81       	ldd	r21, Z+1	; 0x01
    40da:	02 81       	ldd	r16, Z+2	; 0x02
    40dc:	13 81       	ldd	r17, Z+3	; 0x03
    40de:	48 17       	cp	r20, r24
    40e0:	59 07       	cpc	r21, r25
    40e2:	c8 f0       	brcs	.+50     	; 0x4116 <malloc+0x66>
    40e4:	84 17       	cp	r24, r20
    40e6:	95 07       	cpc	r25, r21
    40e8:	69 f4       	brne	.+26     	; 0x4104 <malloc+0x54>
    40ea:	10 97       	sbiw	r26, 0x00	; 0
    40ec:	31 f0       	breq	.+12     	; 0x40fa <malloc+0x4a>
    40ee:	12 96       	adiw	r26, 0x02	; 2
    40f0:	0c 93       	st	X, r16
    40f2:	12 97       	sbiw	r26, 0x02	; 2
    40f4:	13 96       	adiw	r26, 0x03	; 3
    40f6:	1c 93       	st	X, r17
    40f8:	27 c0       	rjmp	.+78     	; 0x4148 <malloc+0x98>
    40fa:	00 93 73 0e 	sts	0x0E73, r16	; 0x800e73 <__flp>
    40fe:	10 93 74 0e 	sts	0x0E74, r17	; 0x800e74 <__flp+0x1>
    4102:	22 c0       	rjmp	.+68     	; 0x4148 <malloc+0x98>
    4104:	21 15       	cp	r18, r1
    4106:	31 05       	cpc	r19, r1
    4108:	19 f0       	breq	.+6      	; 0x4110 <malloc+0x60>
    410a:	42 17       	cp	r20, r18
    410c:	53 07       	cpc	r21, r19
    410e:	18 f4       	brcc	.+6      	; 0x4116 <malloc+0x66>
    4110:	9a 01       	movw	r18, r20
    4112:	bd 01       	movw	r22, r26
    4114:	ef 01       	movw	r28, r30
    4116:	df 01       	movw	r26, r30
    4118:	f8 01       	movw	r30, r16
    411a:	db cf       	rjmp	.-74     	; 0x40d2 <malloc+0x22>
    411c:	21 15       	cp	r18, r1
    411e:	31 05       	cpc	r19, r1
    4120:	f9 f0       	breq	.+62     	; 0x4160 <malloc+0xb0>
    4122:	28 1b       	sub	r18, r24
    4124:	39 0b       	sbc	r19, r25
    4126:	24 30       	cpi	r18, 0x04	; 4
    4128:	31 05       	cpc	r19, r1
    412a:	80 f4       	brcc	.+32     	; 0x414c <malloc+0x9c>
    412c:	8a 81       	ldd	r24, Y+2	; 0x02
    412e:	9b 81       	ldd	r25, Y+3	; 0x03
    4130:	61 15       	cp	r22, r1
    4132:	71 05       	cpc	r23, r1
    4134:	21 f0       	breq	.+8      	; 0x413e <malloc+0x8e>
    4136:	fb 01       	movw	r30, r22
    4138:	93 83       	std	Z+3, r25	; 0x03
    413a:	82 83       	std	Z+2, r24	; 0x02
    413c:	04 c0       	rjmp	.+8      	; 0x4146 <malloc+0x96>
    413e:	90 93 74 0e 	sts	0x0E74, r25	; 0x800e74 <__flp+0x1>
    4142:	80 93 73 0e 	sts	0x0E73, r24	; 0x800e73 <__flp>
    4146:	fe 01       	movw	r30, r28
    4148:	32 96       	adiw	r30, 0x02	; 2
    414a:	44 c0       	rjmp	.+136    	; 0x41d4 <malloc+0x124>
    414c:	fe 01       	movw	r30, r28
    414e:	e2 0f       	add	r30, r18
    4150:	f3 1f       	adc	r31, r19
    4152:	81 93       	st	Z+, r24
    4154:	91 93       	st	Z+, r25
    4156:	22 50       	subi	r18, 0x02	; 2
    4158:	31 09       	sbc	r19, r1
    415a:	39 83       	std	Y+1, r19	; 0x01
    415c:	28 83       	st	Y, r18
    415e:	3a c0       	rjmp	.+116    	; 0x41d4 <malloc+0x124>
    4160:	20 91 71 0e 	lds	r18, 0x0E71	; 0x800e71 <__brkval>
    4164:	30 91 72 0e 	lds	r19, 0x0E72	; 0x800e72 <__brkval+0x1>
    4168:	23 2b       	or	r18, r19
    416a:	41 f4       	brne	.+16     	; 0x417c <malloc+0xcc>
    416c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4170:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4174:	30 93 72 0e 	sts	0x0E72, r19	; 0x800e72 <__brkval+0x1>
    4178:	20 93 71 0e 	sts	0x0E71, r18	; 0x800e71 <__brkval>
    417c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4180:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4184:	21 15       	cp	r18, r1
    4186:	31 05       	cpc	r19, r1
    4188:	41 f4       	brne	.+16     	; 0x419a <malloc+0xea>
    418a:	2d b7       	in	r18, 0x3d	; 61
    418c:	3e b7       	in	r19, 0x3e	; 62
    418e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4192:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4196:	24 1b       	sub	r18, r20
    4198:	35 0b       	sbc	r19, r21
    419a:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <__brkval>
    419e:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <__brkval+0x1>
    41a2:	e2 17       	cp	r30, r18
    41a4:	f3 07       	cpc	r31, r19
    41a6:	a0 f4       	brcc	.+40     	; 0x41d0 <malloc+0x120>
    41a8:	2e 1b       	sub	r18, r30
    41aa:	3f 0b       	sbc	r19, r31
    41ac:	28 17       	cp	r18, r24
    41ae:	39 07       	cpc	r19, r25
    41b0:	78 f0       	brcs	.+30     	; 0x41d0 <malloc+0x120>
    41b2:	ac 01       	movw	r20, r24
    41b4:	4e 5f       	subi	r20, 0xFE	; 254
    41b6:	5f 4f       	sbci	r21, 0xFF	; 255
    41b8:	24 17       	cp	r18, r20
    41ba:	35 07       	cpc	r19, r21
    41bc:	48 f0       	brcs	.+18     	; 0x41d0 <malloc+0x120>
    41be:	4e 0f       	add	r20, r30
    41c0:	5f 1f       	adc	r21, r31
    41c2:	50 93 72 0e 	sts	0x0E72, r21	; 0x800e72 <__brkval+0x1>
    41c6:	40 93 71 0e 	sts	0x0E71, r20	; 0x800e71 <__brkval>
    41ca:	81 93       	st	Z+, r24
    41cc:	91 93       	st	Z+, r25
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <malloc+0x124>
    41d0:	e0 e0       	ldi	r30, 0x00	; 0
    41d2:	f0 e0       	ldi	r31, 0x00	; 0
    41d4:	cf 01       	movw	r24, r30
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	1f 91       	pop	r17
    41dc:	0f 91       	pop	r16
    41de:	08 95       	ret

000041e0 <free>:
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
    41e4:	00 97       	sbiw	r24, 0x00	; 0
    41e6:	09 f4       	brne	.+2      	; 0x41ea <free+0xa>
    41e8:	81 c0       	rjmp	.+258    	; 0x42ec <free+0x10c>
    41ea:	fc 01       	movw	r30, r24
    41ec:	32 97       	sbiw	r30, 0x02	; 2
    41ee:	13 82       	std	Z+3, r1	; 0x03
    41f0:	12 82       	std	Z+2, r1	; 0x02
    41f2:	a0 91 73 0e 	lds	r26, 0x0E73	; 0x800e73 <__flp>
    41f6:	b0 91 74 0e 	lds	r27, 0x0E74	; 0x800e74 <__flp+0x1>
    41fa:	10 97       	sbiw	r26, 0x00	; 0
    41fc:	81 f4       	brne	.+32     	; 0x421e <free+0x3e>
    41fe:	20 81       	ld	r18, Z
    4200:	31 81       	ldd	r19, Z+1	; 0x01
    4202:	82 0f       	add	r24, r18
    4204:	93 1f       	adc	r25, r19
    4206:	20 91 71 0e 	lds	r18, 0x0E71	; 0x800e71 <__brkval>
    420a:	30 91 72 0e 	lds	r19, 0x0E72	; 0x800e72 <__brkval+0x1>
    420e:	28 17       	cp	r18, r24
    4210:	39 07       	cpc	r19, r25
    4212:	51 f5       	brne	.+84     	; 0x4268 <free+0x88>
    4214:	f0 93 72 0e 	sts	0x0E72, r31	; 0x800e72 <__brkval+0x1>
    4218:	e0 93 71 0e 	sts	0x0E71, r30	; 0x800e71 <__brkval>
    421c:	67 c0       	rjmp	.+206    	; 0x42ec <free+0x10c>
    421e:	ed 01       	movw	r28, r26
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	ce 17       	cp	r28, r30
    4226:	df 07       	cpc	r29, r31
    4228:	40 f4       	brcc	.+16     	; 0x423a <free+0x5a>
    422a:	4a 81       	ldd	r20, Y+2	; 0x02
    422c:	5b 81       	ldd	r21, Y+3	; 0x03
    422e:	9e 01       	movw	r18, r28
    4230:	41 15       	cp	r20, r1
    4232:	51 05       	cpc	r21, r1
    4234:	f1 f0       	breq	.+60     	; 0x4272 <free+0x92>
    4236:	ea 01       	movw	r28, r20
    4238:	f5 cf       	rjmp	.-22     	; 0x4224 <free+0x44>
    423a:	d3 83       	std	Z+3, r29	; 0x03
    423c:	c2 83       	std	Z+2, r28	; 0x02
    423e:	40 81       	ld	r20, Z
    4240:	51 81       	ldd	r21, Z+1	; 0x01
    4242:	84 0f       	add	r24, r20
    4244:	95 1f       	adc	r25, r21
    4246:	c8 17       	cp	r28, r24
    4248:	d9 07       	cpc	r29, r25
    424a:	59 f4       	brne	.+22     	; 0x4262 <free+0x82>
    424c:	88 81       	ld	r24, Y
    424e:	99 81       	ldd	r25, Y+1	; 0x01
    4250:	84 0f       	add	r24, r20
    4252:	95 1f       	adc	r25, r21
    4254:	02 96       	adiw	r24, 0x02	; 2
    4256:	91 83       	std	Z+1, r25	; 0x01
    4258:	80 83       	st	Z, r24
    425a:	8a 81       	ldd	r24, Y+2	; 0x02
    425c:	9b 81       	ldd	r25, Y+3	; 0x03
    425e:	93 83       	std	Z+3, r25	; 0x03
    4260:	82 83       	std	Z+2, r24	; 0x02
    4262:	21 15       	cp	r18, r1
    4264:	31 05       	cpc	r19, r1
    4266:	29 f4       	brne	.+10     	; 0x4272 <free+0x92>
    4268:	f0 93 74 0e 	sts	0x0E74, r31	; 0x800e74 <__flp+0x1>
    426c:	e0 93 73 0e 	sts	0x0E73, r30	; 0x800e73 <__flp>
    4270:	3d c0       	rjmp	.+122    	; 0x42ec <free+0x10c>
    4272:	e9 01       	movw	r28, r18
    4274:	fb 83       	std	Y+3, r31	; 0x03
    4276:	ea 83       	std	Y+2, r30	; 0x02
    4278:	49 91       	ld	r20, Y+
    427a:	59 91       	ld	r21, Y+
    427c:	c4 0f       	add	r28, r20
    427e:	d5 1f       	adc	r29, r21
    4280:	ec 17       	cp	r30, r28
    4282:	fd 07       	cpc	r31, r29
    4284:	61 f4       	brne	.+24     	; 0x429e <free+0xbe>
    4286:	80 81       	ld	r24, Z
    4288:	91 81       	ldd	r25, Z+1	; 0x01
    428a:	84 0f       	add	r24, r20
    428c:	95 1f       	adc	r25, r21
    428e:	02 96       	adiw	r24, 0x02	; 2
    4290:	e9 01       	movw	r28, r18
    4292:	99 83       	std	Y+1, r25	; 0x01
    4294:	88 83       	st	Y, r24
    4296:	82 81       	ldd	r24, Z+2	; 0x02
    4298:	93 81       	ldd	r25, Z+3	; 0x03
    429a:	9b 83       	std	Y+3, r25	; 0x03
    429c:	8a 83       	std	Y+2, r24	; 0x02
    429e:	e0 e0       	ldi	r30, 0x00	; 0
    42a0:	f0 e0       	ldi	r31, 0x00	; 0
    42a2:	12 96       	adiw	r26, 0x02	; 2
    42a4:	8d 91       	ld	r24, X+
    42a6:	9c 91       	ld	r25, X
    42a8:	13 97       	sbiw	r26, 0x03	; 3
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	19 f0       	breq	.+6      	; 0x42b4 <free+0xd4>
    42ae:	fd 01       	movw	r30, r26
    42b0:	dc 01       	movw	r26, r24
    42b2:	f7 cf       	rjmp	.-18     	; 0x42a2 <free+0xc2>
    42b4:	8d 91       	ld	r24, X+
    42b6:	9c 91       	ld	r25, X
    42b8:	11 97       	sbiw	r26, 0x01	; 1
    42ba:	9d 01       	movw	r18, r26
    42bc:	2e 5f       	subi	r18, 0xFE	; 254
    42be:	3f 4f       	sbci	r19, 0xFF	; 255
    42c0:	82 0f       	add	r24, r18
    42c2:	93 1f       	adc	r25, r19
    42c4:	20 91 71 0e 	lds	r18, 0x0E71	; 0x800e71 <__brkval>
    42c8:	30 91 72 0e 	lds	r19, 0x0E72	; 0x800e72 <__brkval+0x1>
    42cc:	28 17       	cp	r18, r24
    42ce:	39 07       	cpc	r19, r25
    42d0:	69 f4       	brne	.+26     	; 0x42ec <free+0x10c>
    42d2:	30 97       	sbiw	r30, 0x00	; 0
    42d4:	29 f4       	brne	.+10     	; 0x42e0 <free+0x100>
    42d6:	10 92 74 0e 	sts	0x0E74, r1	; 0x800e74 <__flp+0x1>
    42da:	10 92 73 0e 	sts	0x0E73, r1	; 0x800e73 <__flp>
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <free+0x104>
    42e0:	13 82       	std	Z+3, r1	; 0x03
    42e2:	12 82       	std	Z+2, r1	; 0x02
    42e4:	b0 93 72 0e 	sts	0x0E72, r27	; 0x800e72 <__brkval+0x1>
    42e8:	a0 93 71 0e 	sts	0x0E71, r26	; 0x800e71 <__brkval>
    42ec:	df 91       	pop	r29
    42ee:	cf 91       	pop	r28
    42f0:	08 95       	ret

000042f2 <abort>:
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	f8 94       	cli
    42f8:	00 c3       	rjmp	.+1536   	; 0x48fa <_exit>

000042fa <memcpy>:
    42fa:	fb 01       	movw	r30, r22
    42fc:	dc 01       	movw	r26, r24
    42fe:	02 c0       	rjmp	.+4      	; 0x4304 <memcpy+0xa>
    4300:	01 90       	ld	r0, Z+
    4302:	0d 92       	st	X+, r0
    4304:	41 50       	subi	r20, 0x01	; 1
    4306:	50 40       	sbci	r21, 0x00	; 0
    4308:	d8 f7       	brcc	.-10     	; 0x4300 <memcpy+0x6>
    430a:	08 95       	ret

0000430c <memset>:
    430c:	dc 01       	movw	r26, r24
    430e:	01 c0       	rjmp	.+2      	; 0x4312 <memset+0x6>
    4310:	6d 93       	st	X+, r22
    4312:	41 50       	subi	r20, 0x01	; 1
    4314:	50 40       	sbci	r21, 0x00	; 0
    4316:	e0 f7       	brcc	.-8      	; 0x4310 <memset+0x4>
    4318:	08 95       	ret

0000431a <printf>:
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
    4322:	ae 01       	movw	r20, r28
    4324:	4a 5f       	subi	r20, 0xFA	; 250
    4326:	5f 4f       	sbci	r21, 0xFF	; 255
    4328:	fa 01       	movw	r30, r20
    432a:	61 91       	ld	r22, Z+
    432c:	71 91       	ld	r23, Z+
    432e:	af 01       	movw	r20, r30
    4330:	80 91 77 0e 	lds	r24, 0x0E77	; 0x800e77 <__iob+0x2>
    4334:	90 91 78 0e 	lds	r25, 0x0E78	; 0x800e78 <__iob+0x3>
    4338:	33 d0       	rcall	.+102    	; 0x43a0 <vfprintf>
    433a:	df 91       	pop	r29
    433c:	cf 91       	pop	r28
    433e:	08 95       	ret

00004340 <puts>:
    4340:	0f 93       	push	r16
    4342:	1f 93       	push	r17
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <__iob+0x2>
    434c:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <__iob+0x3>
    4350:	23 81       	ldd	r18, Z+3	; 0x03
    4352:	21 ff       	sbrs	r18, 1
    4354:	1b c0       	rjmp	.+54     	; 0x438c <puts+0x4c>
    4356:	8c 01       	movw	r16, r24
    4358:	d0 e0       	ldi	r29, 0x00	; 0
    435a:	c0 e0       	ldi	r28, 0x00	; 0
    435c:	f8 01       	movw	r30, r16
    435e:	81 91       	ld	r24, Z+
    4360:	8f 01       	movw	r16, r30
    4362:	60 91 77 0e 	lds	r22, 0x0E77	; 0x800e77 <__iob+0x2>
    4366:	70 91 78 0e 	lds	r23, 0x0E78	; 0x800e78 <__iob+0x3>
    436a:	db 01       	movw	r26, r22
    436c:	18 96       	adiw	r26, 0x08	; 8
    436e:	ed 91       	ld	r30, X+
    4370:	fc 91       	ld	r31, X
    4372:	19 97       	sbiw	r26, 0x09	; 9
    4374:	88 23       	and	r24, r24
    4376:	31 f0       	breq	.+12     	; 0x4384 <puts+0x44>
    4378:	19 95       	eicall
    437a:	89 2b       	or	r24, r25
    437c:	79 f3       	breq	.-34     	; 0x435c <puts+0x1c>
    437e:	df ef       	ldi	r29, 0xFF	; 255
    4380:	cf ef       	ldi	r28, 0xFF	; 255
    4382:	ec cf       	rjmp	.-40     	; 0x435c <puts+0x1c>
    4384:	8a e0       	ldi	r24, 0x0A	; 10
    4386:	19 95       	eicall
    4388:	89 2b       	or	r24, r25
    438a:	19 f0       	breq	.+6      	; 0x4392 <puts+0x52>
    438c:	8f ef       	ldi	r24, 0xFF	; 255
    438e:	9f ef       	ldi	r25, 0xFF	; 255
    4390:	02 c0       	rjmp	.+4      	; 0x4396 <puts+0x56>
    4392:	8d 2f       	mov	r24, r29
    4394:	9c 2f       	mov	r25, r28
    4396:	df 91       	pop	r29
    4398:	cf 91       	pop	r28
    439a:	1f 91       	pop	r17
    439c:	0f 91       	pop	r16
    439e:	08 95       	ret

000043a0 <vfprintf>:
    43a0:	2f 92       	push	r2
    43a2:	3f 92       	push	r3
    43a4:	4f 92       	push	r4
    43a6:	5f 92       	push	r5
    43a8:	6f 92       	push	r6
    43aa:	7f 92       	push	r7
    43ac:	8f 92       	push	r8
    43ae:	9f 92       	push	r9
    43b0:	af 92       	push	r10
    43b2:	bf 92       	push	r11
    43b4:	cf 92       	push	r12
    43b6:	df 92       	push	r13
    43b8:	ef 92       	push	r14
    43ba:	ff 92       	push	r15
    43bc:	0f 93       	push	r16
    43be:	1f 93       	push	r17
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	cd b7       	in	r28, 0x3d	; 61
    43c6:	de b7       	in	r29, 0x3e	; 62
    43c8:	2b 97       	sbiw	r28, 0x0b	; 11
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	f8 94       	cli
    43ce:	de bf       	out	0x3e, r29	; 62
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	cd bf       	out	0x3d, r28	; 61
    43d4:	6c 01       	movw	r12, r24
    43d6:	7b 01       	movw	r14, r22
    43d8:	8a 01       	movw	r16, r20
    43da:	fc 01       	movw	r30, r24
    43dc:	17 82       	std	Z+7, r1	; 0x07
    43de:	16 82       	std	Z+6, r1	; 0x06
    43e0:	83 81       	ldd	r24, Z+3	; 0x03
    43e2:	81 ff       	sbrs	r24, 1
    43e4:	bf c1       	rjmp	.+894    	; 0x4764 <vfprintf+0x3c4>
    43e6:	ce 01       	movw	r24, r28
    43e8:	01 96       	adiw	r24, 0x01	; 1
    43ea:	3c 01       	movw	r6, r24
    43ec:	f6 01       	movw	r30, r12
    43ee:	93 81       	ldd	r25, Z+3	; 0x03
    43f0:	f7 01       	movw	r30, r14
    43f2:	93 fd       	sbrc	r25, 3
    43f4:	85 91       	lpm	r24, Z+
    43f6:	93 ff       	sbrs	r25, 3
    43f8:	81 91       	ld	r24, Z+
    43fa:	7f 01       	movw	r14, r30
    43fc:	88 23       	and	r24, r24
    43fe:	09 f4       	brne	.+2      	; 0x4402 <vfprintf+0x62>
    4400:	ad c1       	rjmp	.+858    	; 0x475c <vfprintf+0x3bc>
    4402:	85 32       	cpi	r24, 0x25	; 37
    4404:	39 f4       	brne	.+14     	; 0x4414 <vfprintf+0x74>
    4406:	93 fd       	sbrc	r25, 3
    4408:	85 91       	lpm	r24, Z+
    440a:	93 ff       	sbrs	r25, 3
    440c:	81 91       	ld	r24, Z+
    440e:	7f 01       	movw	r14, r30
    4410:	85 32       	cpi	r24, 0x25	; 37
    4412:	21 f4       	brne	.+8      	; 0x441c <vfprintf+0x7c>
    4414:	b6 01       	movw	r22, r12
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	d6 d1       	rcall	.+940    	; 0x47c6 <fputc>
    441a:	e8 cf       	rjmp	.-48     	; 0x43ec <vfprintf+0x4c>
    441c:	91 2c       	mov	r9, r1
    441e:	21 2c       	mov	r2, r1
    4420:	31 2c       	mov	r3, r1
    4422:	ff e1       	ldi	r31, 0x1F	; 31
    4424:	f3 15       	cp	r31, r3
    4426:	d8 f0       	brcs	.+54     	; 0x445e <vfprintf+0xbe>
    4428:	8b 32       	cpi	r24, 0x2B	; 43
    442a:	79 f0       	breq	.+30     	; 0x444a <vfprintf+0xaa>
    442c:	38 f4       	brcc	.+14     	; 0x443c <vfprintf+0x9c>
    442e:	80 32       	cpi	r24, 0x20	; 32
    4430:	79 f0       	breq	.+30     	; 0x4450 <vfprintf+0xb0>
    4432:	83 32       	cpi	r24, 0x23	; 35
    4434:	a1 f4       	brne	.+40     	; 0x445e <vfprintf+0xbe>
    4436:	23 2d       	mov	r18, r3
    4438:	20 61       	ori	r18, 0x10	; 16
    443a:	1d c0       	rjmp	.+58     	; 0x4476 <vfprintf+0xd6>
    443c:	8d 32       	cpi	r24, 0x2D	; 45
    443e:	61 f0       	breq	.+24     	; 0x4458 <vfprintf+0xb8>
    4440:	80 33       	cpi	r24, 0x30	; 48
    4442:	69 f4       	brne	.+26     	; 0x445e <vfprintf+0xbe>
    4444:	23 2d       	mov	r18, r3
    4446:	21 60       	ori	r18, 0x01	; 1
    4448:	16 c0       	rjmp	.+44     	; 0x4476 <vfprintf+0xd6>
    444a:	83 2d       	mov	r24, r3
    444c:	82 60       	ori	r24, 0x02	; 2
    444e:	38 2e       	mov	r3, r24
    4450:	e3 2d       	mov	r30, r3
    4452:	e4 60       	ori	r30, 0x04	; 4
    4454:	3e 2e       	mov	r3, r30
    4456:	2a c0       	rjmp	.+84     	; 0x44ac <vfprintf+0x10c>
    4458:	f3 2d       	mov	r31, r3
    445a:	f8 60       	ori	r31, 0x08	; 8
    445c:	1d c0       	rjmp	.+58     	; 0x4498 <vfprintf+0xf8>
    445e:	37 fc       	sbrc	r3, 7
    4460:	2d c0       	rjmp	.+90     	; 0x44bc <vfprintf+0x11c>
    4462:	20 ed       	ldi	r18, 0xD0	; 208
    4464:	28 0f       	add	r18, r24
    4466:	2a 30       	cpi	r18, 0x0A	; 10
    4468:	40 f0       	brcs	.+16     	; 0x447a <vfprintf+0xda>
    446a:	8e 32       	cpi	r24, 0x2E	; 46
    446c:	b9 f4       	brne	.+46     	; 0x449c <vfprintf+0xfc>
    446e:	36 fc       	sbrc	r3, 6
    4470:	75 c1       	rjmp	.+746    	; 0x475c <vfprintf+0x3bc>
    4472:	23 2d       	mov	r18, r3
    4474:	20 64       	ori	r18, 0x40	; 64
    4476:	32 2e       	mov	r3, r18
    4478:	19 c0       	rjmp	.+50     	; 0x44ac <vfprintf+0x10c>
    447a:	36 fe       	sbrs	r3, 6
    447c:	06 c0       	rjmp	.+12     	; 0x448a <vfprintf+0xea>
    447e:	8a e0       	ldi	r24, 0x0A	; 10
    4480:	98 9e       	mul	r9, r24
    4482:	20 0d       	add	r18, r0
    4484:	11 24       	eor	r1, r1
    4486:	92 2e       	mov	r9, r18
    4488:	11 c0       	rjmp	.+34     	; 0x44ac <vfprintf+0x10c>
    448a:	ea e0       	ldi	r30, 0x0A	; 10
    448c:	2e 9e       	mul	r2, r30
    448e:	20 0d       	add	r18, r0
    4490:	11 24       	eor	r1, r1
    4492:	22 2e       	mov	r2, r18
    4494:	f3 2d       	mov	r31, r3
    4496:	f0 62       	ori	r31, 0x20	; 32
    4498:	3f 2e       	mov	r3, r31
    449a:	08 c0       	rjmp	.+16     	; 0x44ac <vfprintf+0x10c>
    449c:	8c 36       	cpi	r24, 0x6C	; 108
    449e:	21 f4       	brne	.+8      	; 0x44a8 <vfprintf+0x108>
    44a0:	83 2d       	mov	r24, r3
    44a2:	80 68       	ori	r24, 0x80	; 128
    44a4:	38 2e       	mov	r3, r24
    44a6:	02 c0       	rjmp	.+4      	; 0x44ac <vfprintf+0x10c>
    44a8:	88 36       	cpi	r24, 0x68	; 104
    44aa:	41 f4       	brne	.+16     	; 0x44bc <vfprintf+0x11c>
    44ac:	f7 01       	movw	r30, r14
    44ae:	93 fd       	sbrc	r25, 3
    44b0:	85 91       	lpm	r24, Z+
    44b2:	93 ff       	sbrs	r25, 3
    44b4:	81 91       	ld	r24, Z+
    44b6:	7f 01       	movw	r14, r30
    44b8:	81 11       	cpse	r24, r1
    44ba:	b3 cf       	rjmp	.-154    	; 0x4422 <vfprintf+0x82>
    44bc:	98 2f       	mov	r25, r24
    44be:	9f 7d       	andi	r25, 0xDF	; 223
    44c0:	95 54       	subi	r25, 0x45	; 69
    44c2:	93 30       	cpi	r25, 0x03	; 3
    44c4:	28 f4       	brcc	.+10     	; 0x44d0 <vfprintf+0x130>
    44c6:	0c 5f       	subi	r16, 0xFC	; 252
    44c8:	1f 4f       	sbci	r17, 0xFF	; 255
    44ca:	9f e3       	ldi	r25, 0x3F	; 63
    44cc:	99 83       	std	Y+1, r25	; 0x01
    44ce:	0d c0       	rjmp	.+26     	; 0x44ea <vfprintf+0x14a>
    44d0:	83 36       	cpi	r24, 0x63	; 99
    44d2:	31 f0       	breq	.+12     	; 0x44e0 <vfprintf+0x140>
    44d4:	83 37       	cpi	r24, 0x73	; 115
    44d6:	71 f0       	breq	.+28     	; 0x44f4 <vfprintf+0x154>
    44d8:	83 35       	cpi	r24, 0x53	; 83
    44da:	09 f0       	breq	.+2      	; 0x44de <vfprintf+0x13e>
    44dc:	55 c0       	rjmp	.+170    	; 0x4588 <vfprintf+0x1e8>
    44de:	20 c0       	rjmp	.+64     	; 0x4520 <vfprintf+0x180>
    44e0:	f8 01       	movw	r30, r16
    44e2:	80 81       	ld	r24, Z
    44e4:	89 83       	std	Y+1, r24	; 0x01
    44e6:	0e 5f       	subi	r16, 0xFE	; 254
    44e8:	1f 4f       	sbci	r17, 0xFF	; 255
    44ea:	88 24       	eor	r8, r8
    44ec:	83 94       	inc	r8
    44ee:	91 2c       	mov	r9, r1
    44f0:	53 01       	movw	r10, r6
    44f2:	12 c0       	rjmp	.+36     	; 0x4518 <vfprintf+0x178>
    44f4:	28 01       	movw	r4, r16
    44f6:	f2 e0       	ldi	r31, 0x02	; 2
    44f8:	4f 0e       	add	r4, r31
    44fa:	51 1c       	adc	r5, r1
    44fc:	f8 01       	movw	r30, r16
    44fe:	a0 80       	ld	r10, Z
    4500:	b1 80       	ldd	r11, Z+1	; 0x01
    4502:	36 fe       	sbrs	r3, 6
    4504:	03 c0       	rjmp	.+6      	; 0x450c <vfprintf+0x16c>
    4506:	69 2d       	mov	r22, r9
    4508:	70 e0       	ldi	r23, 0x00	; 0
    450a:	02 c0       	rjmp	.+4      	; 0x4510 <vfprintf+0x170>
    450c:	6f ef       	ldi	r22, 0xFF	; 255
    450e:	7f ef       	ldi	r23, 0xFF	; 255
    4510:	c5 01       	movw	r24, r10
    4512:	4e d1       	rcall	.+668    	; 0x47b0 <strnlen>
    4514:	4c 01       	movw	r8, r24
    4516:	82 01       	movw	r16, r4
    4518:	f3 2d       	mov	r31, r3
    451a:	ff 77       	andi	r31, 0x7F	; 127
    451c:	3f 2e       	mov	r3, r31
    451e:	15 c0       	rjmp	.+42     	; 0x454a <vfprintf+0x1aa>
    4520:	28 01       	movw	r4, r16
    4522:	22 e0       	ldi	r18, 0x02	; 2
    4524:	42 0e       	add	r4, r18
    4526:	51 1c       	adc	r5, r1
    4528:	f8 01       	movw	r30, r16
    452a:	a0 80       	ld	r10, Z
    452c:	b1 80       	ldd	r11, Z+1	; 0x01
    452e:	36 fe       	sbrs	r3, 6
    4530:	03 c0       	rjmp	.+6      	; 0x4538 <vfprintf+0x198>
    4532:	69 2d       	mov	r22, r9
    4534:	70 e0       	ldi	r23, 0x00	; 0
    4536:	02 c0       	rjmp	.+4      	; 0x453c <vfprintf+0x19c>
    4538:	6f ef       	ldi	r22, 0xFF	; 255
    453a:	7f ef       	ldi	r23, 0xFF	; 255
    453c:	c5 01       	movw	r24, r10
    453e:	2d d1       	rcall	.+602    	; 0x479a <strnlen_P>
    4540:	4c 01       	movw	r8, r24
    4542:	f3 2d       	mov	r31, r3
    4544:	f0 68       	ori	r31, 0x80	; 128
    4546:	3f 2e       	mov	r3, r31
    4548:	82 01       	movw	r16, r4
    454a:	33 fc       	sbrc	r3, 3
    454c:	19 c0       	rjmp	.+50     	; 0x4580 <vfprintf+0x1e0>
    454e:	82 2d       	mov	r24, r2
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	88 16       	cp	r8, r24
    4554:	99 06       	cpc	r9, r25
    4556:	a0 f4       	brcc	.+40     	; 0x4580 <vfprintf+0x1e0>
    4558:	b6 01       	movw	r22, r12
    455a:	80 e2       	ldi	r24, 0x20	; 32
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	33 d1       	rcall	.+614    	; 0x47c6 <fputc>
    4560:	2a 94       	dec	r2
    4562:	f5 cf       	rjmp	.-22     	; 0x454e <vfprintf+0x1ae>
    4564:	f5 01       	movw	r30, r10
    4566:	37 fc       	sbrc	r3, 7
    4568:	85 91       	lpm	r24, Z+
    456a:	37 fe       	sbrs	r3, 7
    456c:	81 91       	ld	r24, Z+
    456e:	5f 01       	movw	r10, r30
    4570:	b6 01       	movw	r22, r12
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	28 d1       	rcall	.+592    	; 0x47c6 <fputc>
    4576:	21 10       	cpse	r2, r1
    4578:	2a 94       	dec	r2
    457a:	21 e0       	ldi	r18, 0x01	; 1
    457c:	82 1a       	sub	r8, r18
    457e:	91 08       	sbc	r9, r1
    4580:	81 14       	cp	r8, r1
    4582:	91 04       	cpc	r9, r1
    4584:	79 f7       	brne	.-34     	; 0x4564 <vfprintf+0x1c4>
    4586:	e1 c0       	rjmp	.+450    	; 0x474a <vfprintf+0x3aa>
    4588:	84 36       	cpi	r24, 0x64	; 100
    458a:	11 f0       	breq	.+4      	; 0x4590 <vfprintf+0x1f0>
    458c:	89 36       	cpi	r24, 0x69	; 105
    458e:	39 f5       	brne	.+78     	; 0x45de <vfprintf+0x23e>
    4590:	f8 01       	movw	r30, r16
    4592:	37 fe       	sbrs	r3, 7
    4594:	07 c0       	rjmp	.+14     	; 0x45a4 <vfprintf+0x204>
    4596:	60 81       	ld	r22, Z
    4598:	71 81       	ldd	r23, Z+1	; 0x01
    459a:	82 81       	ldd	r24, Z+2	; 0x02
    459c:	93 81       	ldd	r25, Z+3	; 0x03
    459e:	0c 5f       	subi	r16, 0xFC	; 252
    45a0:	1f 4f       	sbci	r17, 0xFF	; 255
    45a2:	08 c0       	rjmp	.+16     	; 0x45b4 <vfprintf+0x214>
    45a4:	60 81       	ld	r22, Z
    45a6:	71 81       	ldd	r23, Z+1	; 0x01
    45a8:	07 2e       	mov	r0, r23
    45aa:	00 0c       	add	r0, r0
    45ac:	88 0b       	sbc	r24, r24
    45ae:	99 0b       	sbc	r25, r25
    45b0:	0e 5f       	subi	r16, 0xFE	; 254
    45b2:	1f 4f       	sbci	r17, 0xFF	; 255
    45b4:	f3 2d       	mov	r31, r3
    45b6:	ff 76       	andi	r31, 0x6F	; 111
    45b8:	3f 2e       	mov	r3, r31
    45ba:	97 ff       	sbrs	r25, 7
    45bc:	09 c0       	rjmp	.+18     	; 0x45d0 <vfprintf+0x230>
    45be:	90 95       	com	r25
    45c0:	80 95       	com	r24
    45c2:	70 95       	com	r23
    45c4:	61 95       	neg	r22
    45c6:	7f 4f       	sbci	r23, 0xFF	; 255
    45c8:	8f 4f       	sbci	r24, 0xFF	; 255
    45ca:	9f 4f       	sbci	r25, 0xFF	; 255
    45cc:	f0 68       	ori	r31, 0x80	; 128
    45ce:	3f 2e       	mov	r3, r31
    45d0:	2a e0       	ldi	r18, 0x0A	; 10
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	a3 01       	movw	r20, r6
    45d6:	33 d1       	rcall	.+614    	; 0x483e <__ultoa_invert>
    45d8:	88 2e       	mov	r8, r24
    45da:	86 18       	sub	r8, r6
    45dc:	44 c0       	rjmp	.+136    	; 0x4666 <vfprintf+0x2c6>
    45de:	85 37       	cpi	r24, 0x75	; 117
    45e0:	31 f4       	brne	.+12     	; 0x45ee <vfprintf+0x24e>
    45e2:	23 2d       	mov	r18, r3
    45e4:	2f 7e       	andi	r18, 0xEF	; 239
    45e6:	b2 2e       	mov	r11, r18
    45e8:	2a e0       	ldi	r18, 0x0A	; 10
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	25 c0       	rjmp	.+74     	; 0x4638 <vfprintf+0x298>
    45ee:	93 2d       	mov	r25, r3
    45f0:	99 7f       	andi	r25, 0xF9	; 249
    45f2:	b9 2e       	mov	r11, r25
    45f4:	8f 36       	cpi	r24, 0x6F	; 111
    45f6:	c1 f0       	breq	.+48     	; 0x4628 <vfprintf+0x288>
    45f8:	18 f4       	brcc	.+6      	; 0x4600 <vfprintf+0x260>
    45fa:	88 35       	cpi	r24, 0x58	; 88
    45fc:	79 f0       	breq	.+30     	; 0x461c <vfprintf+0x27c>
    45fe:	ae c0       	rjmp	.+348    	; 0x475c <vfprintf+0x3bc>
    4600:	80 37       	cpi	r24, 0x70	; 112
    4602:	19 f0       	breq	.+6      	; 0x460a <vfprintf+0x26a>
    4604:	88 37       	cpi	r24, 0x78	; 120
    4606:	21 f0       	breq	.+8      	; 0x4610 <vfprintf+0x270>
    4608:	a9 c0       	rjmp	.+338    	; 0x475c <vfprintf+0x3bc>
    460a:	e9 2f       	mov	r30, r25
    460c:	e0 61       	ori	r30, 0x10	; 16
    460e:	be 2e       	mov	r11, r30
    4610:	b4 fe       	sbrs	r11, 4
    4612:	0d c0       	rjmp	.+26     	; 0x462e <vfprintf+0x28e>
    4614:	fb 2d       	mov	r31, r11
    4616:	f4 60       	ori	r31, 0x04	; 4
    4618:	bf 2e       	mov	r11, r31
    461a:	09 c0       	rjmp	.+18     	; 0x462e <vfprintf+0x28e>
    461c:	34 fe       	sbrs	r3, 4
    461e:	0a c0       	rjmp	.+20     	; 0x4634 <vfprintf+0x294>
    4620:	29 2f       	mov	r18, r25
    4622:	26 60       	ori	r18, 0x06	; 6
    4624:	b2 2e       	mov	r11, r18
    4626:	06 c0       	rjmp	.+12     	; 0x4634 <vfprintf+0x294>
    4628:	28 e0       	ldi	r18, 0x08	; 8
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	05 c0       	rjmp	.+10     	; 0x4638 <vfprintf+0x298>
    462e:	20 e1       	ldi	r18, 0x10	; 16
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	02 c0       	rjmp	.+4      	; 0x4638 <vfprintf+0x298>
    4634:	20 e1       	ldi	r18, 0x10	; 16
    4636:	32 e0       	ldi	r19, 0x02	; 2
    4638:	f8 01       	movw	r30, r16
    463a:	b7 fe       	sbrs	r11, 7
    463c:	07 c0       	rjmp	.+14     	; 0x464c <vfprintf+0x2ac>
    463e:	60 81       	ld	r22, Z
    4640:	71 81       	ldd	r23, Z+1	; 0x01
    4642:	82 81       	ldd	r24, Z+2	; 0x02
    4644:	93 81       	ldd	r25, Z+3	; 0x03
    4646:	0c 5f       	subi	r16, 0xFC	; 252
    4648:	1f 4f       	sbci	r17, 0xFF	; 255
    464a:	06 c0       	rjmp	.+12     	; 0x4658 <vfprintf+0x2b8>
    464c:	60 81       	ld	r22, Z
    464e:	71 81       	ldd	r23, Z+1	; 0x01
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0e 5f       	subi	r16, 0xFE	; 254
    4656:	1f 4f       	sbci	r17, 0xFF	; 255
    4658:	a3 01       	movw	r20, r6
    465a:	f1 d0       	rcall	.+482    	; 0x483e <__ultoa_invert>
    465c:	88 2e       	mov	r8, r24
    465e:	86 18       	sub	r8, r6
    4660:	fb 2d       	mov	r31, r11
    4662:	ff 77       	andi	r31, 0x7F	; 127
    4664:	3f 2e       	mov	r3, r31
    4666:	36 fe       	sbrs	r3, 6
    4668:	0d c0       	rjmp	.+26     	; 0x4684 <vfprintf+0x2e4>
    466a:	23 2d       	mov	r18, r3
    466c:	2e 7f       	andi	r18, 0xFE	; 254
    466e:	a2 2e       	mov	r10, r18
    4670:	89 14       	cp	r8, r9
    4672:	58 f4       	brcc	.+22     	; 0x468a <vfprintf+0x2ea>
    4674:	34 fe       	sbrs	r3, 4
    4676:	0b c0       	rjmp	.+22     	; 0x468e <vfprintf+0x2ee>
    4678:	32 fc       	sbrc	r3, 2
    467a:	09 c0       	rjmp	.+18     	; 0x468e <vfprintf+0x2ee>
    467c:	83 2d       	mov	r24, r3
    467e:	8e 7e       	andi	r24, 0xEE	; 238
    4680:	a8 2e       	mov	r10, r24
    4682:	05 c0       	rjmp	.+10     	; 0x468e <vfprintf+0x2ee>
    4684:	b8 2c       	mov	r11, r8
    4686:	a3 2c       	mov	r10, r3
    4688:	03 c0       	rjmp	.+6      	; 0x4690 <vfprintf+0x2f0>
    468a:	b8 2c       	mov	r11, r8
    468c:	01 c0       	rjmp	.+2      	; 0x4690 <vfprintf+0x2f0>
    468e:	b9 2c       	mov	r11, r9
    4690:	a4 fe       	sbrs	r10, 4
    4692:	0f c0       	rjmp	.+30     	; 0x46b2 <vfprintf+0x312>
    4694:	fe 01       	movw	r30, r28
    4696:	e8 0d       	add	r30, r8
    4698:	f1 1d       	adc	r31, r1
    469a:	80 81       	ld	r24, Z
    469c:	80 33       	cpi	r24, 0x30	; 48
    469e:	21 f4       	brne	.+8      	; 0x46a8 <vfprintf+0x308>
    46a0:	9a 2d       	mov	r25, r10
    46a2:	99 7e       	andi	r25, 0xE9	; 233
    46a4:	a9 2e       	mov	r10, r25
    46a6:	09 c0       	rjmp	.+18     	; 0x46ba <vfprintf+0x31a>
    46a8:	a2 fe       	sbrs	r10, 2
    46aa:	06 c0       	rjmp	.+12     	; 0x46b8 <vfprintf+0x318>
    46ac:	b3 94       	inc	r11
    46ae:	b3 94       	inc	r11
    46b0:	04 c0       	rjmp	.+8      	; 0x46ba <vfprintf+0x31a>
    46b2:	8a 2d       	mov	r24, r10
    46b4:	86 78       	andi	r24, 0x86	; 134
    46b6:	09 f0       	breq	.+2      	; 0x46ba <vfprintf+0x31a>
    46b8:	b3 94       	inc	r11
    46ba:	a3 fc       	sbrc	r10, 3
    46bc:	10 c0       	rjmp	.+32     	; 0x46de <vfprintf+0x33e>
    46be:	a0 fe       	sbrs	r10, 0
    46c0:	06 c0       	rjmp	.+12     	; 0x46ce <vfprintf+0x32e>
    46c2:	b2 14       	cp	r11, r2
    46c4:	80 f4       	brcc	.+32     	; 0x46e6 <vfprintf+0x346>
    46c6:	28 0c       	add	r2, r8
    46c8:	92 2c       	mov	r9, r2
    46ca:	9b 18       	sub	r9, r11
    46cc:	0d c0       	rjmp	.+26     	; 0x46e8 <vfprintf+0x348>
    46ce:	b2 14       	cp	r11, r2
    46d0:	58 f4       	brcc	.+22     	; 0x46e8 <vfprintf+0x348>
    46d2:	b6 01       	movw	r22, r12
    46d4:	80 e2       	ldi	r24, 0x20	; 32
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	76 d0       	rcall	.+236    	; 0x47c6 <fputc>
    46da:	b3 94       	inc	r11
    46dc:	f8 cf       	rjmp	.-16     	; 0x46ce <vfprintf+0x32e>
    46de:	b2 14       	cp	r11, r2
    46e0:	18 f4       	brcc	.+6      	; 0x46e8 <vfprintf+0x348>
    46e2:	2b 18       	sub	r2, r11
    46e4:	02 c0       	rjmp	.+4      	; 0x46ea <vfprintf+0x34a>
    46e6:	98 2c       	mov	r9, r8
    46e8:	21 2c       	mov	r2, r1
    46ea:	a4 fe       	sbrs	r10, 4
    46ec:	0f c0       	rjmp	.+30     	; 0x470c <vfprintf+0x36c>
    46ee:	b6 01       	movw	r22, r12
    46f0:	80 e3       	ldi	r24, 0x30	; 48
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	68 d0       	rcall	.+208    	; 0x47c6 <fputc>
    46f6:	a2 fe       	sbrs	r10, 2
    46f8:	16 c0       	rjmp	.+44     	; 0x4726 <vfprintf+0x386>
    46fa:	a1 fc       	sbrc	r10, 1
    46fc:	03 c0       	rjmp	.+6      	; 0x4704 <vfprintf+0x364>
    46fe:	88 e7       	ldi	r24, 0x78	; 120
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	02 c0       	rjmp	.+4      	; 0x4708 <vfprintf+0x368>
    4704:	88 e5       	ldi	r24, 0x58	; 88
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	b6 01       	movw	r22, r12
    470a:	0c c0       	rjmp	.+24     	; 0x4724 <vfprintf+0x384>
    470c:	8a 2d       	mov	r24, r10
    470e:	86 78       	andi	r24, 0x86	; 134
    4710:	51 f0       	breq	.+20     	; 0x4726 <vfprintf+0x386>
    4712:	a1 fe       	sbrs	r10, 1
    4714:	02 c0       	rjmp	.+4      	; 0x471a <vfprintf+0x37a>
    4716:	8b e2       	ldi	r24, 0x2B	; 43
    4718:	01 c0       	rjmp	.+2      	; 0x471c <vfprintf+0x37c>
    471a:	80 e2       	ldi	r24, 0x20	; 32
    471c:	a7 fc       	sbrc	r10, 7
    471e:	8d e2       	ldi	r24, 0x2D	; 45
    4720:	b6 01       	movw	r22, r12
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	50 d0       	rcall	.+160    	; 0x47c6 <fputc>
    4726:	89 14       	cp	r8, r9
    4728:	30 f4       	brcc	.+12     	; 0x4736 <vfprintf+0x396>
    472a:	b6 01       	movw	r22, r12
    472c:	80 e3       	ldi	r24, 0x30	; 48
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	4a d0       	rcall	.+148    	; 0x47c6 <fputc>
    4732:	9a 94       	dec	r9
    4734:	f8 cf       	rjmp	.-16     	; 0x4726 <vfprintf+0x386>
    4736:	8a 94       	dec	r8
    4738:	f3 01       	movw	r30, r6
    473a:	e8 0d       	add	r30, r8
    473c:	f1 1d       	adc	r31, r1
    473e:	80 81       	ld	r24, Z
    4740:	b6 01       	movw	r22, r12
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	40 d0       	rcall	.+128    	; 0x47c6 <fputc>
    4746:	81 10       	cpse	r8, r1
    4748:	f6 cf       	rjmp	.-20     	; 0x4736 <vfprintf+0x396>
    474a:	22 20       	and	r2, r2
    474c:	09 f4       	brne	.+2      	; 0x4750 <vfprintf+0x3b0>
    474e:	4e ce       	rjmp	.-868    	; 0x43ec <vfprintf+0x4c>
    4750:	b6 01       	movw	r22, r12
    4752:	80 e2       	ldi	r24, 0x20	; 32
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	37 d0       	rcall	.+110    	; 0x47c6 <fputc>
    4758:	2a 94       	dec	r2
    475a:	f7 cf       	rjmp	.-18     	; 0x474a <vfprintf+0x3aa>
    475c:	f6 01       	movw	r30, r12
    475e:	86 81       	ldd	r24, Z+6	; 0x06
    4760:	97 81       	ldd	r25, Z+7	; 0x07
    4762:	02 c0       	rjmp	.+4      	; 0x4768 <vfprintf+0x3c8>
    4764:	8f ef       	ldi	r24, 0xFF	; 255
    4766:	9f ef       	ldi	r25, 0xFF	; 255
    4768:	2b 96       	adiw	r28, 0x0b	; 11
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	f8 94       	cli
    476e:	de bf       	out	0x3e, r29	; 62
    4770:	0f be       	out	0x3f, r0	; 63
    4772:	cd bf       	out	0x3d, r28	; 61
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	1f 91       	pop	r17
    477a:	0f 91       	pop	r16
    477c:	ff 90       	pop	r15
    477e:	ef 90       	pop	r14
    4780:	df 90       	pop	r13
    4782:	cf 90       	pop	r12
    4784:	bf 90       	pop	r11
    4786:	af 90       	pop	r10
    4788:	9f 90       	pop	r9
    478a:	8f 90       	pop	r8
    478c:	7f 90       	pop	r7
    478e:	6f 90       	pop	r6
    4790:	5f 90       	pop	r5
    4792:	4f 90       	pop	r4
    4794:	3f 90       	pop	r3
    4796:	2f 90       	pop	r2
    4798:	08 95       	ret

0000479a <strnlen_P>:
    479a:	fc 01       	movw	r30, r24
    479c:	05 90       	lpm	r0, Z+
    479e:	61 50       	subi	r22, 0x01	; 1
    47a0:	70 40       	sbci	r23, 0x00	; 0
    47a2:	01 10       	cpse	r0, r1
    47a4:	d8 f7       	brcc	.-10     	; 0x479c <strnlen_P+0x2>
    47a6:	80 95       	com	r24
    47a8:	90 95       	com	r25
    47aa:	8e 0f       	add	r24, r30
    47ac:	9f 1f       	adc	r25, r31
    47ae:	08 95       	ret

000047b0 <strnlen>:
    47b0:	fc 01       	movw	r30, r24
    47b2:	61 50       	subi	r22, 0x01	; 1
    47b4:	70 40       	sbci	r23, 0x00	; 0
    47b6:	01 90       	ld	r0, Z+
    47b8:	01 10       	cpse	r0, r1
    47ba:	d8 f7       	brcc	.-10     	; 0x47b2 <strnlen+0x2>
    47bc:	80 95       	com	r24
    47be:	90 95       	com	r25
    47c0:	8e 0f       	add	r24, r30
    47c2:	9f 1f       	adc	r25, r31
    47c4:	08 95       	ret

000047c6 <fputc>:
    47c6:	0f 93       	push	r16
    47c8:	1f 93       	push	r17
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	fb 01       	movw	r30, r22
    47d0:	23 81       	ldd	r18, Z+3	; 0x03
    47d2:	21 fd       	sbrc	r18, 1
    47d4:	03 c0       	rjmp	.+6      	; 0x47dc <fputc+0x16>
    47d6:	8f ef       	ldi	r24, 0xFF	; 255
    47d8:	9f ef       	ldi	r25, 0xFF	; 255
    47da:	2c c0       	rjmp	.+88     	; 0x4834 <fputc+0x6e>
    47dc:	22 ff       	sbrs	r18, 2
    47de:	16 c0       	rjmp	.+44     	; 0x480c <fputc+0x46>
    47e0:	46 81       	ldd	r20, Z+6	; 0x06
    47e2:	57 81       	ldd	r21, Z+7	; 0x07
    47e4:	24 81       	ldd	r18, Z+4	; 0x04
    47e6:	35 81       	ldd	r19, Z+5	; 0x05
    47e8:	42 17       	cp	r20, r18
    47ea:	53 07       	cpc	r21, r19
    47ec:	44 f4       	brge	.+16     	; 0x47fe <fputc+0x38>
    47ee:	a0 81       	ld	r26, Z
    47f0:	b1 81       	ldd	r27, Z+1	; 0x01
    47f2:	9d 01       	movw	r18, r26
    47f4:	2f 5f       	subi	r18, 0xFF	; 255
    47f6:	3f 4f       	sbci	r19, 0xFF	; 255
    47f8:	31 83       	std	Z+1, r19	; 0x01
    47fa:	20 83       	st	Z, r18
    47fc:	8c 93       	st	X, r24
    47fe:	26 81       	ldd	r18, Z+6	; 0x06
    4800:	37 81       	ldd	r19, Z+7	; 0x07
    4802:	2f 5f       	subi	r18, 0xFF	; 255
    4804:	3f 4f       	sbci	r19, 0xFF	; 255
    4806:	37 83       	std	Z+7, r19	; 0x07
    4808:	26 83       	std	Z+6, r18	; 0x06
    480a:	14 c0       	rjmp	.+40     	; 0x4834 <fputc+0x6e>
    480c:	8b 01       	movw	r16, r22
    480e:	ec 01       	movw	r28, r24
    4810:	fb 01       	movw	r30, r22
    4812:	00 84       	ldd	r0, Z+8	; 0x08
    4814:	f1 85       	ldd	r31, Z+9	; 0x09
    4816:	e0 2d       	mov	r30, r0
    4818:	19 95       	eicall
    481a:	89 2b       	or	r24, r25
    481c:	e1 f6       	brne	.-72     	; 0x47d6 <fputc+0x10>
    481e:	d8 01       	movw	r26, r16
    4820:	16 96       	adiw	r26, 0x06	; 6
    4822:	8d 91       	ld	r24, X+
    4824:	9c 91       	ld	r25, X
    4826:	17 97       	sbiw	r26, 0x07	; 7
    4828:	01 96       	adiw	r24, 0x01	; 1
    482a:	17 96       	adiw	r26, 0x07	; 7
    482c:	9c 93       	st	X, r25
    482e:	8e 93       	st	-X, r24
    4830:	16 97       	sbiw	r26, 0x06	; 6
    4832:	ce 01       	movw	r24, r28
    4834:	df 91       	pop	r29
    4836:	cf 91       	pop	r28
    4838:	1f 91       	pop	r17
    483a:	0f 91       	pop	r16
    483c:	08 95       	ret

0000483e <__ultoa_invert>:
    483e:	fa 01       	movw	r30, r20
    4840:	aa 27       	eor	r26, r26
    4842:	28 30       	cpi	r18, 0x08	; 8
    4844:	51 f1       	breq	.+84     	; 0x489a <__ultoa_invert+0x5c>
    4846:	20 31       	cpi	r18, 0x10	; 16
    4848:	81 f1       	breq	.+96     	; 0x48aa <__ultoa_invert+0x6c>
    484a:	e8 94       	clt
    484c:	6f 93       	push	r22
    484e:	6e 7f       	andi	r22, 0xFE	; 254
    4850:	6e 5f       	subi	r22, 0xFE	; 254
    4852:	7f 4f       	sbci	r23, 0xFF	; 255
    4854:	8f 4f       	sbci	r24, 0xFF	; 255
    4856:	9f 4f       	sbci	r25, 0xFF	; 255
    4858:	af 4f       	sbci	r26, 0xFF	; 255
    485a:	b1 e0       	ldi	r27, 0x01	; 1
    485c:	3e d0       	rcall	.+124    	; 0x48da <__ultoa_invert+0x9c>
    485e:	b4 e0       	ldi	r27, 0x04	; 4
    4860:	3c d0       	rcall	.+120    	; 0x48da <__ultoa_invert+0x9c>
    4862:	67 0f       	add	r22, r23
    4864:	78 1f       	adc	r23, r24
    4866:	89 1f       	adc	r24, r25
    4868:	9a 1f       	adc	r25, r26
    486a:	a1 1d       	adc	r26, r1
    486c:	68 0f       	add	r22, r24
    486e:	79 1f       	adc	r23, r25
    4870:	8a 1f       	adc	r24, r26
    4872:	91 1d       	adc	r25, r1
    4874:	a1 1d       	adc	r26, r1
    4876:	6a 0f       	add	r22, r26
    4878:	71 1d       	adc	r23, r1
    487a:	81 1d       	adc	r24, r1
    487c:	91 1d       	adc	r25, r1
    487e:	a1 1d       	adc	r26, r1
    4880:	20 d0       	rcall	.+64     	; 0x48c2 <__ultoa_invert+0x84>
    4882:	09 f4       	brne	.+2      	; 0x4886 <__ultoa_invert+0x48>
    4884:	68 94       	set
    4886:	3f 91       	pop	r19
    4888:	2a e0       	ldi	r18, 0x0A	; 10
    488a:	26 9f       	mul	r18, r22
    488c:	11 24       	eor	r1, r1
    488e:	30 19       	sub	r19, r0
    4890:	30 5d       	subi	r19, 0xD0	; 208
    4892:	31 93       	st	Z+, r19
    4894:	de f6       	brtc	.-74     	; 0x484c <__ultoa_invert+0xe>
    4896:	cf 01       	movw	r24, r30
    4898:	08 95       	ret
    489a:	46 2f       	mov	r20, r22
    489c:	47 70       	andi	r20, 0x07	; 7
    489e:	40 5d       	subi	r20, 0xD0	; 208
    48a0:	41 93       	st	Z+, r20
    48a2:	b3 e0       	ldi	r27, 0x03	; 3
    48a4:	0f d0       	rcall	.+30     	; 0x48c4 <__ultoa_invert+0x86>
    48a6:	c9 f7       	brne	.-14     	; 0x489a <__ultoa_invert+0x5c>
    48a8:	f6 cf       	rjmp	.-20     	; 0x4896 <__ultoa_invert+0x58>
    48aa:	46 2f       	mov	r20, r22
    48ac:	4f 70       	andi	r20, 0x0F	; 15
    48ae:	40 5d       	subi	r20, 0xD0	; 208
    48b0:	4a 33       	cpi	r20, 0x3A	; 58
    48b2:	18 f0       	brcs	.+6      	; 0x48ba <__ultoa_invert+0x7c>
    48b4:	49 5d       	subi	r20, 0xD9	; 217
    48b6:	31 fd       	sbrc	r19, 1
    48b8:	40 52       	subi	r20, 0x20	; 32
    48ba:	41 93       	st	Z+, r20
    48bc:	02 d0       	rcall	.+4      	; 0x48c2 <__ultoa_invert+0x84>
    48be:	a9 f7       	brne	.-22     	; 0x48aa <__ultoa_invert+0x6c>
    48c0:	ea cf       	rjmp	.-44     	; 0x4896 <__ultoa_invert+0x58>
    48c2:	b4 e0       	ldi	r27, 0x04	; 4
    48c4:	a6 95       	lsr	r26
    48c6:	97 95       	ror	r25
    48c8:	87 95       	ror	r24
    48ca:	77 95       	ror	r23
    48cc:	67 95       	ror	r22
    48ce:	ba 95       	dec	r27
    48d0:	c9 f7       	brne	.-14     	; 0x48c4 <__ultoa_invert+0x86>
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	61 05       	cpc	r22, r1
    48d6:	71 05       	cpc	r23, r1
    48d8:	08 95       	ret
    48da:	9b 01       	movw	r18, r22
    48dc:	ac 01       	movw	r20, r24
    48de:	0a 2e       	mov	r0, r26
    48e0:	06 94       	lsr	r0
    48e2:	57 95       	ror	r21
    48e4:	47 95       	ror	r20
    48e6:	37 95       	ror	r19
    48e8:	27 95       	ror	r18
    48ea:	ba 95       	dec	r27
    48ec:	c9 f7       	brne	.-14     	; 0x48e0 <__ultoa_invert+0xa2>
    48ee:	62 0f       	add	r22, r18
    48f0:	73 1f       	adc	r23, r19
    48f2:	84 1f       	adc	r24, r20
    48f4:	95 1f       	adc	r25, r21
    48f6:	a0 1d       	adc	r26, r0
    48f8:	08 95       	ret

000048fa <_exit>:
    48fa:	f8 94       	cli

000048fc <__stop_program>:
    48fc:	ff cf       	rjmp	.-2      	; 0x48fc <__stop_program>
