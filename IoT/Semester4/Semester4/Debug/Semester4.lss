
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004e8  00800200  00005290  00005324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c7a  008006e8  008006e8  0000580c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000580c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a0  00000000  00000000  000058a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b4a4  00000000  00000000  00006148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000296d  00000000  00000000  000115ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000057a8  00000000  00000000  00013f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020f0  00000000  00000000  00019704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003632  00000000  00000000  0001b7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ab2c  00000000  00000000  0001ee26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000858  00000000  00000000  00029952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c3       	rjmp	.+1814   	; 0x748 <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__vector_25>
      68:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__vector_36>
      94:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__vector_51>
      d0:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__vector_54>
      dc:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	84 16       	cp	r8, r20
      e6:	84 16       	cp	r8, r20
      e8:	84 16       	cp	r8, r20
      ea:	bb 16       	cp	r11, r27
      ec:	c3 16       	cp	r12, r19
      ee:	d8 16       	cp	r13, r24
      f0:	84 16       	cp	r8, r20
      f2:	84 16       	cp	r8, r20
      f4:	bb 16       	cp	r11, r27
      f6:	c3 16       	cp	r12, r19

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <prvCheckTasksWaitingTermination>
      fc:	80 91 0d 11 	lds	r24, 0x110D	; 0x80110d <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	5b d2       	rcall	.+1206   	; 0x5bc <vPortYield>
     106:	0e 94 01 17 	call	0x2e02	; 0x2e02 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 01 14 	call	0x2802	; 0x2802 <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 f6 15 	call	0x2bec	; 0x2bec <prvProcessTimerOrBlockTask>
     124:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	16 e0       	ldi	r17, 0x06	; 6
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e0 e9       	ldi	r30, 0x90	; 144
     142:	f2 e5       	ldi	r31, 0x52	; 82
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a8 3e       	cpi	r26, 0xE8	; 232
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e1       	ldi	r18, 0x13	; 19
     156:	a8 ee       	ldi	r26, 0xE8	; 232
     158:	b6 e0       	ldi	r27, 0x06	; 6
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a2 36       	cpi	r26, 0x62	; 98
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <main>
     168:	0c 94 46 29 	jmp	0x528c	; 0x528c <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     16e:	e4 ef       	ldi	r30, 0xF4	; 244
     170:	f6 e0       	ldi	r31, 0x06	; 6
     172:	a8 ef       	ldi	r26, 0xF8	; 248
     174:	b6 e0       	ldi	r27, 0x06	; 6
     176:	b1 83       	std	Z+1, r27	; 0x01
     178:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     17a:	13 82       	std	Z+3, r1	; 0x03
     17c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     17e:	e8 eb       	ldi	r30, 0xB8	; 184
     180:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     182:	f0 93 f3 06 	sts	0x06F3, r31	; 0x8006f3 <pxEnd+0x1>
     186:	e0 93 f2 06 	sts	0x06F2, r30	; 0x8006f2 <pxEnd>
    pxEnd->xBlockSize = 0;
     18a:	13 82       	std	Z+3, r1	; 0x03
     18c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     18e:	11 82       	std	Z+1, r1	; 0x01
     190:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     192:	80 ec       	ldi	r24, 0xC0	; 192
     194:	99 e0       	ldi	r25, 0x09	; 9
     196:	13 96       	adiw	r26, 0x03	; 3
     198:	9c 93       	st	X, r25
     19a:	8e 93       	st	-X, r24
     19c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     19e:	ed 93       	st	X+, r30
     1a0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1a2:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <xMinimumEverFreeBytesRemaining+0x1>
     1a6:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1aa:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <xFreeBytesRemaining+0x1>
     1ae:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e8       	ldi	r25, 0x80	; 128
     1b6:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <__data_end+0x1>
     1ba:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <__data_end>
     1be:	08 95       	ret

000001c0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1c6:	a4 ef       	ldi	r26, 0xF4	; 244
     1c8:	b6 e0       	ldi	r27, 0x06	; 6
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <prvInsertBlockIntoFreeList+0xe>
     1cc:	df 01       	movw	r26, r30
     1ce:	ed 91       	ld	r30, X+
     1d0:	fc 91       	ld	r31, X
     1d2:	11 97       	sbiw	r26, 0x01	; 1
     1d4:	ec 17       	cp	r30, r28
     1d6:	fd 07       	cpc	r31, r29
     1d8:	c8 f3       	brcs	.-14     	; 0x1cc <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     1da:	12 96       	adiw	r26, 0x02	; 2
     1dc:	8d 91       	ld	r24, X+
     1de:	9c 91       	ld	r25, X
     1e0:	13 97       	sbiw	r26, 0x03	; 3
     1e2:	9d 01       	movw	r18, r26
     1e4:	28 0f       	add	r18, r24
     1e6:	39 1f       	adc	r19, r25
     1e8:	c2 17       	cp	r28, r18
     1ea:	d3 07       	cpc	r29, r19
     1ec:	49 f4       	brne	.+18     	; 0x200 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     1ee:	2a 81       	ldd	r18, Y+2	; 0x02
     1f0:	3b 81       	ldd	r19, Y+3	; 0x03
     1f2:	82 0f       	add	r24, r18
     1f4:	93 1f       	adc	r25, r19
     1f6:	13 96       	adiw	r26, 0x03	; 3
     1f8:	9c 93       	st	X, r25
     1fa:	8e 93       	st	-X, r24
     1fc:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     1fe:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     200:	8a 81       	ldd	r24, Y+2	; 0x02
     202:	9b 81       	ldd	r25, Y+3	; 0x03
     204:	9e 01       	movw	r18, r28
     206:	28 0f       	add	r18, r24
     208:	39 1f       	adc	r19, r25
     20a:	e2 17       	cp	r30, r18
     20c:	f3 07       	cpc	r31, r19
     20e:	c1 f4       	brne	.+48     	; 0x240 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     210:	20 91 f2 06 	lds	r18, 0x06F2	; 0x8006f2 <pxEnd>
     214:	30 91 f3 06 	lds	r19, 0x06F3	; 0x8006f3 <pxEnd+0x1>
     218:	e2 17       	cp	r30, r18
     21a:	f3 07       	cpc	r31, r19
     21c:	71 f0       	breq	.+28     	; 0x23a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     21e:	22 81       	ldd	r18, Z+2	; 0x02
     220:	33 81       	ldd	r19, Z+3	; 0x03
     222:	82 0f       	add	r24, r18
     224:	93 1f       	adc	r25, r19
     226:	9b 83       	std	Y+3, r25	; 0x03
     228:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     22a:	ed 91       	ld	r30, X+
     22c:	fc 91       	ld	r31, X
     22e:	11 97       	sbiw	r26, 0x01	; 1
     230:	80 81       	ld	r24, Z
     232:	91 81       	ldd	r25, Z+1	; 0x01
     234:	99 83       	std	Y+1, r25	; 0x01
     236:	88 83       	st	Y, r24
     238:	05 c0       	rjmp	.+10     	; 0x244 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     23a:	39 83       	std	Y+1, r19	; 0x01
     23c:	28 83       	st	Y, r18
     23e:	02 c0       	rjmp	.+4      	; 0x244 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     240:	f9 83       	std	Y+1, r31	; 0x01
     242:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     244:	ca 17       	cp	r28, r26
     246:	db 07       	cpc	r29, r27
     248:	11 f0       	breq	.+4      	; 0x24e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     24a:	cd 93       	st	X+, r28
     24c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     262:	0e 94 1f 0c 	call	0x183e	; 0x183e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     266:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxEnd>
     26a:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxEnd+0x1>
     26e:	89 2b       	or	r24, r25
     270:	09 f4       	brne	.+2      	; 0x274 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     272:	7d df       	rcall	.-262    	; 0x16e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     274:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__data_end>
     278:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <__data_end+0x1>
     27c:	80 23       	and	r24, r16
     27e:	91 23       	and	r25, r17
     280:	89 2b       	or	r24, r25
     282:	09 f0       	breq	.+2      	; 0x286 <pvPortMalloc+0x32>
     284:	76 c0       	rjmp	.+236    	; 0x372 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     286:	01 15       	cp	r16, r1
     288:	11 05       	cpc	r17, r1
     28a:	49 f0       	breq	.+18     	; 0x29e <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     28c:	c8 01       	movw	r24, r16
     28e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     290:	08 17       	cp	r16, r24
     292:	19 07       	cpc	r17, r25
     294:	18 f0       	brcs	.+6      	; 0x29c <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	01 c0       	rjmp	.+2      	; 0x29e <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     29c:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     29e:	01 15       	cp	r16, r1
     2a0:	11 05       	cpc	r17, r1
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <pvPortMalloc+0x52>
     2a4:	69 c0       	rjmp	.+210    	; 0x378 <pvPortMalloc+0x124>
     2a6:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <xFreeBytesRemaining>
     2aa:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <xFreeBytesRemaining+0x1>
     2ae:	80 17       	cp	r24, r16
     2b0:	91 07       	cpc	r25, r17
     2b2:	08 f4       	brcc	.+2      	; 0x2b6 <pvPortMalloc+0x62>
     2b4:	64 c0       	rjmp	.+200    	; 0x37e <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2b6:	c0 91 f4 06 	lds	r28, 0x06F4	; 0x8006f4 <xStart>
     2ba:	d0 91 f5 06 	lds	r29, 0x06F5	; 0x8006f5 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2be:	e4 ef       	ldi	r30, 0xF4	; 244
     2c0:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     2c4:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2c6:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	9b 81       	ldd	r25, Y+3	; 0x03
     2cc:	80 17       	cp	r24, r16
     2ce:	91 07       	cpc	r25, r17
     2d0:	20 f4       	brcc	.+8      	; 0x2da <pvPortMalloc+0x86>
     2d2:	88 81       	ld	r24, Y
     2d4:	99 81       	ldd	r25, Y+1	; 0x01
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	a9 f7       	brne	.-22     	; 0x2c4 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     2da:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxEnd>
     2de:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxEnd+0x1>
     2e2:	c8 17       	cp	r28, r24
     2e4:	d9 07       	cpc	r29, r25
     2e6:	09 f4       	brne	.+2      	; 0x2ea <pvPortMalloc+0x96>
     2e8:	4d c0       	rjmp	.+154    	; 0x384 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     2ea:	e0 80       	ld	r14, Z
     2ec:	f1 80       	ldd	r15, Z+1	; 0x01
     2ee:	84 e0       	ldi	r24, 0x04	; 4
     2f0:	e8 0e       	add	r14, r24
     2f2:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     2f4:	88 81       	ld	r24, Y
     2f6:	99 81       	ldd	r25, Y+1	; 0x01
     2f8:	91 83       	std	Z+1, r25	; 0x01
     2fa:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	20 1b       	sub	r18, r16
     302:	31 0b       	sbc	r19, r17
     304:	29 30       	cpi	r18, 0x09	; 9
     306:	31 05       	cpc	r19, r1
     308:	48 f0       	brcs	.+18     	; 0x31c <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     30a:	ce 01       	movw	r24, r28
     30c:	80 0f       	add	r24, r16
     30e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     310:	fc 01       	movw	r30, r24
     312:	33 83       	std	Z+3, r19	; 0x03
     314:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     316:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     318:	0a 83       	std	Y+2, r16	; 0x02
     31a:	52 df       	rcall	.-348    	; 0x1c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     31c:	2a 81       	ldd	r18, Y+2	; 0x02
     31e:	3b 81       	ldd	r19, Y+3	; 0x03
     320:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <xFreeBytesRemaining>
     324:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <xFreeBytesRemaining+0x1>
     328:	82 1b       	sub	r24, r18
     32a:	93 0b       	sbc	r25, r19
     32c:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <xFreeBytesRemaining+0x1>
     330:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     334:	40 91 ee 06 	lds	r20, 0x06EE	; 0x8006ee <xMinimumEverFreeBytesRemaining>
     338:	50 91 ef 06 	lds	r21, 0x06EF	; 0x8006ef <xMinimumEverFreeBytesRemaining+0x1>
     33c:	84 17       	cp	r24, r20
     33e:	95 07       	cpc	r25, r21
     340:	20 f4       	brcc	.+8      	; 0x34a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     342:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <xMinimumEverFreeBytesRemaining+0x1>
     346:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     34a:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__data_end>
     34e:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <__data_end+0x1>
     352:	28 2b       	or	r18, r24
     354:	39 2b       	or	r19, r25
     356:	3b 83       	std	Y+3, r19	; 0x03
     358:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     35a:	19 82       	std	Y+1, r1	; 0x01
     35c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     35e:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <xNumberOfSuccessfulAllocations>
     362:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <xNumberOfSuccessfulAllocations+0x1>
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <xNumberOfSuccessfulAllocations+0x1>
     36c:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <xNumberOfSuccessfulAllocations>
     370:	0b c0       	rjmp	.+22     	; 0x388 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     372:	e1 2c       	mov	r14, r1
     374:	f1 2c       	mov	r15, r1
     376:	08 c0       	rjmp	.+16     	; 0x388 <pvPortMalloc+0x134>
     378:	e1 2c       	mov	r14, r1
     37a:	f1 2c       	mov	r15, r1
     37c:	05 c0       	rjmp	.+10     	; 0x388 <pvPortMalloc+0x134>
     37e:	e1 2c       	mov	r14, r1
     380:	f1 2c       	mov	r15, r1
     382:	02 c0       	rjmp	.+4      	; 0x388 <pvPortMalloc+0x134>
     384:	e1 2c       	mov	r14, r1
     386:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     388:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     38c:	e1 14       	cp	r14, r1
     38e:	f1 04       	cpc	r15, r1
     390:	11 f4       	brne	.+4      	; 0x396 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     392:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     396:	c7 01       	movw	r24, r14
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	08 95       	ret

000003a6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3ae:	00 97       	sbiw	r24, 0x00	; 0
     3b0:	91 f1       	breq	.+100    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3b2:	ec 01       	movw	r28, r24
     3b4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3b6:	4a 81       	ldd	r20, Y+2	; 0x02
     3b8:	5b 81       	ldd	r21, Y+3	; 0x03
     3ba:	20 91 e8 06 	lds	r18, 0x06E8	; 0x8006e8 <__data_end>
     3be:	30 91 e9 06 	lds	r19, 0x06E9	; 0x8006e9 <__data_end+0x1>
     3c2:	ba 01       	movw	r22, r20
     3c4:	62 23       	and	r22, r18
     3c6:	73 23       	and	r23, r19
     3c8:	67 2b       	or	r22, r23
     3ca:	29 f1       	breq	.+74     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3cc:	68 81       	ld	r22, Y
     3ce:	79 81       	ldd	r23, Y+1	; 0x01
     3d0:	67 2b       	or	r22, r23
     3d2:	09 f5       	brne	.+66     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     3d4:	20 95       	com	r18
     3d6:	30 95       	com	r19
     3d8:	24 23       	and	r18, r20
     3da:	35 23       	and	r19, r21
     3dc:	3b 83       	std	Y+3, r19	; 0x03
     3de:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     3e0:	0e 94 1f 0c 	call	0x183e	; 0x183e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	9b 81       	ldd	r25, Y+3	; 0x03
     3e8:	20 91 f0 06 	lds	r18, 0x06F0	; 0x8006f0 <xFreeBytesRemaining>
     3ec:	30 91 f1 06 	lds	r19, 0x06F1	; 0x8006f1 <xFreeBytesRemaining+0x1>
     3f0:	82 0f       	add	r24, r18
     3f2:	93 1f       	adc	r25, r19
     3f4:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <xFreeBytesRemaining+0x1>
     3f8:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     3fc:	ce 01       	movw	r24, r28
     3fe:	e0 de       	rcall	.-576    	; 0x1c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     400:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <xNumberOfSuccessfulFrees>
     404:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <xNumberOfSuccessfulFrees+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 eb 06 	sts	0x06EB, r25	; 0x8006eb <xNumberOfSuccessfulFrees+0x1>
     40e:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     412:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     420:	fc 01       	movw	r30, r24
     422:	03 96       	adiw	r24, 0x03	; 3
     424:	92 83       	std	Z+2, r25	; 0x02
     426:	81 83       	std	Z+1, r24	; 0x01
     428:	4f ef       	ldi	r20, 0xFF	; 255
     42a:	5f ef       	ldi	r21, 0xFF	; 255
     42c:	ba 01       	movw	r22, r20
     42e:	43 83       	std	Z+3, r20	; 0x03
     430:	54 83       	std	Z+4, r21	; 0x04
     432:	65 83       	std	Z+5, r22	; 0x05
     434:	76 83       	std	Z+6, r23	; 0x06
     436:	90 87       	std	Z+8, r25	; 0x08
     438:	87 83       	std	Z+7, r24	; 0x07
     43a:	92 87       	std	Z+10, r25	; 0x0a
     43c:	81 87       	std	Z+9, r24	; 0x09
     43e:	10 82       	st	Z, r1
     440:	08 95       	ret

00000442 <vListInitialiseItem>:
     442:	fc 01       	movw	r30, r24
     444:	13 86       	std	Z+11, r1	; 0x0b
     446:	12 86       	std	Z+10, r1	; 0x0a
     448:	08 95       	ret

0000044a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     454:	08 81       	ld	r16, Y
     456:	19 81       	ldd	r17, Y+1	; 0x01
     458:	2a 81       	ldd	r18, Y+2	; 0x02
     45a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     45c:	0f 3f       	cpi	r16, 0xFF	; 255
     45e:	4f ef       	ldi	r20, 0xFF	; 255
     460:	14 07       	cpc	r17, r20
     462:	24 07       	cpc	r18, r20
     464:	34 07       	cpc	r19, r20
     466:	21 f4       	brne	.+8      	; 0x470 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     468:	fc 01       	movw	r30, r24
     46a:	a1 85       	ldd	r26, Z+9	; 0x09
     46c:	b2 85       	ldd	r27, Z+10	; 0x0a
     46e:	11 c0       	rjmp	.+34     	; 0x492 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     470:	dc 01       	movw	r26, r24
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	01 c0       	rjmp	.+2      	; 0x478 <vListInsert+0x2e>
     476:	df 01       	movw	r26, r30
     478:	14 96       	adiw	r26, 0x04	; 4
     47a:	ed 91       	ld	r30, X+
     47c:	fc 91       	ld	r31, X
     47e:	15 97       	sbiw	r26, 0x05	; 5
     480:	40 81       	ld	r20, Z
     482:	51 81       	ldd	r21, Z+1	; 0x01
     484:	62 81       	ldd	r22, Z+2	; 0x02
     486:	73 81       	ldd	r23, Z+3	; 0x03
     488:	04 17       	cp	r16, r20
     48a:	15 07       	cpc	r17, r21
     48c:	26 07       	cpc	r18, r22
     48e:	37 07       	cpc	r19, r23
     490:	90 f7       	brcc	.-28     	; 0x476 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     492:	14 96       	adiw	r26, 0x04	; 4
     494:	ed 91       	ld	r30, X+
     496:	fc 91       	ld	r31, X
     498:	15 97       	sbiw	r26, 0x05	; 5
     49a:	fd 83       	std	Y+5, r31	; 0x05
     49c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     49e:	d7 83       	std	Z+7, r29	; 0x07
     4a0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     4a2:	bf 83       	std	Y+7, r27	; 0x07
     4a4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4a6:	15 96       	adiw	r26, 0x05	; 5
     4a8:	dc 93       	st	X, r29
     4aa:	ce 93       	st	-X, r28
     4ac:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4ae:	9b 87       	std	Y+11, r25	; 0x0b
     4b0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 81       	ld	r18, Z
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	20 83       	st	Z, r18
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4ca:	a2 85       	ldd	r26, Z+10	; 0x0a
     4cc:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4ce:	c4 81       	ldd	r28, Z+4	; 0x04
     4d0:	d5 81       	ldd	r29, Z+5	; 0x05
     4d2:	86 81       	ldd	r24, Z+6	; 0x06
     4d4:	97 81       	ldd	r25, Z+7	; 0x07
     4d6:	9f 83       	std	Y+7, r25	; 0x07
     4d8:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4da:	c6 81       	ldd	r28, Z+6	; 0x06
     4dc:	d7 81       	ldd	r29, Z+7	; 0x07
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	95 81       	ldd	r25, Z+5	; 0x05
     4e2:	9d 83       	std	Y+5, r25	; 0x05
     4e4:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	8d 91       	ld	r24, X+
     4ea:	9c 91       	ld	r25, X
     4ec:	12 97       	sbiw	r26, 0x02	; 2
     4ee:	e8 17       	cp	r30, r24
     4f0:	f9 07       	cpc	r31, r25
     4f2:	31 f4       	brne	.+12     	; 0x500 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     4f4:	86 81       	ldd	r24, Z+6	; 0x06
     4f6:	97 81       	ldd	r25, Z+7	; 0x07
     4f8:	12 96       	adiw	r26, 0x02	; 2
     4fa:	9c 93       	st	X, r25
     4fc:	8e 93       	st	-X, r24
     4fe:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     500:	13 86       	std	Z+11, r1	; 0x0b
     502:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     504:	8c 91       	ld	r24, X
     506:	81 50       	subi	r24, 0x01	; 1
     508:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     50a:	8c 91       	ld	r24, X
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     512:	a8 95       	wdr
     514:	90 ec       	ldi	r25, 0xC0	; 192
     516:	88 e1       	ldi	r24, 0x18	; 24
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	a8 95       	wdr
     51e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     522:	0f be       	out	0x3f, r0	; 63
     524:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     528:	08 95       	ret

0000052a <pxPortInitialiseStack>:
     52a:	fc 01       	movw	r30, r24
     52c:	60 83       	st	Z, r22
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	70 83       	st	Z, r23
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	10 82       	st	Z, r1
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	10 82       	st	Z, r1
     53a:	31 97       	sbiw	r30, 0x01	; 1
     53c:	20 e8       	ldi	r18, 0x80	; 128
     53e:	20 83       	st	Z, r18
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	10 82       	st	Z, r1
     544:	31 97       	sbiw	r30, 0x01	; 1
     546:	10 82       	st	Z, r1
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	10 82       	st	Z, r1
     54c:	77 97       	sbiw	r30, 0x17	; 23
     54e:	40 83       	st	Z, r20
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	50 83       	st	Z, r21
     554:	86 97       	sbiw	r24, 0x26	; 38
     556:	08 95       	ret

00000558 <xPortStartScheduler>:
     558:	dc df       	rcall	.-72     	; 0x512 <prvSetupTimerInterrupt>
     55a:	a0 91 7b 11 	lds	r26, 0x117B	; 0x80117b <pxCurrentTCB>
     55e:	b0 91 7c 11 	lds	r27, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
     562:	cd 91       	ld	r28, X+
     564:	cd bf       	out	0x3d, r28	; 61
     566:	dd 91       	ld	r29, X+
     568:	de bf       	out	0x3e, r29	; 62
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	bf 91       	pop	r27
     574:	af 91       	pop	r26
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	7f 91       	pop	r23
     57c:	6f 91       	pop	r22
     57e:	5f 91       	pop	r21
     580:	4f 91       	pop	r20
     582:	3f 91       	pop	r19
     584:	2f 91       	pop	r18
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	9f 90       	pop	r9
     598:	8f 90       	pop	r8
     59a:	7f 90       	pop	r7
     59c:	6f 90       	pop	r6
     59e:	5f 90       	pop	r5
     5a0:	4f 90       	pop	r4
     5a2:	3f 90       	pop	r3
     5a4:	2f 90       	pop	r2
     5a6:	1f 90       	pop	r1
     5a8:	0f 90       	pop	r0
     5aa:	0c be       	out	0x3c, r0	; 60
     5ac:	0f 90       	pop	r0
     5ae:	0b be       	out	0x3b, r0	; 59
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	08 95       	ret
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	08 95       	ret

000005bc <vPortYield>:
     5bc:	0f 92       	push	r0
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	0f 92       	push	r0
     5c4:	0b b6       	in	r0, 0x3b	; 59
     5c6:	0f 92       	push	r0
     5c8:	0c b6       	in	r0, 0x3c	; 60
     5ca:	0f 92       	push	r0
     5cc:	1f 92       	push	r1
     5ce:	11 24       	eor	r1, r1
     5d0:	2f 92       	push	r2
     5d2:	3f 92       	push	r3
     5d4:	4f 92       	push	r4
     5d6:	5f 92       	push	r5
     5d8:	6f 92       	push	r6
     5da:	7f 92       	push	r7
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	2f 93       	push	r18
     5f2:	3f 93       	push	r19
     5f4:	4f 93       	push	r20
     5f6:	5f 93       	push	r21
     5f8:	6f 93       	push	r22
     5fa:	7f 93       	push	r23
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	af 93       	push	r26
     602:	bf 93       	push	r27
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31
     60c:	a0 91 7b 11 	lds	r26, 0x117B	; 0x80117b <pxCurrentTCB>
     610:	b0 91 7c 11 	lds	r27, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
     614:	0d b6       	in	r0, 0x3d	; 61
     616:	0d 92       	st	X+, r0
     618:	0e b6       	in	r0, 0x3e	; 62
     61a:	0d 92       	st	X+, r0
     61c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <vTaskSwitchContext>
     620:	a0 91 7b 11 	lds	r26, 0x117B	; 0x80117b <pxCurrentTCB>
     624:	b0 91 7c 11 	lds	r27, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
     628:	cd 91       	ld	r28, X+
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	dd 91       	ld	r29, X+
     62e:	de bf       	out	0x3e, r29	; 62
     630:	ff 91       	pop	r31
     632:	ef 91       	pop	r30
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	bf 91       	pop	r27
     63a:	af 91       	pop	r26
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	7f 91       	pop	r23
     642:	6f 91       	pop	r22
     644:	5f 91       	pop	r21
     646:	4f 91       	pop	r20
     648:	3f 91       	pop	r19
     64a:	2f 91       	pop	r18
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	bf 90       	pop	r11
     65a:	af 90       	pop	r10
     65c:	9f 90       	pop	r9
     65e:	8f 90       	pop	r8
     660:	7f 90       	pop	r7
     662:	6f 90       	pop	r6
     664:	5f 90       	pop	r5
     666:	4f 90       	pop	r4
     668:	3f 90       	pop	r3
     66a:	2f 90       	pop	r2
     66c:	1f 90       	pop	r1
     66e:	0f 90       	pop	r0
     670:	0c be       	out	0x3c, r0	; 60
     672:	0f 90       	pop	r0
     674:	0b be       	out	0x3b, r0	; 59
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	08 95       	ret

0000067e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	0f 92       	push	r0
     686:	0b b6       	in	r0, 0x3b	; 59
     688:	0f 92       	push	r0
     68a:	0c b6       	in	r0, 0x3c	; 60
     68c:	0f 92       	push	r0
     68e:	1f 92       	push	r1
     690:	11 24       	eor	r1, r1
     692:	2f 92       	push	r2
     694:	3f 92       	push	r3
     696:	4f 92       	push	r4
     698:	5f 92       	push	r5
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
     6ce:	a0 91 7b 11 	lds	r26, 0x117B	; 0x80117b <pxCurrentTCB>
     6d2:	b0 91 7c 11 	lds	r27, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
     6d6:	0d b6       	in	r0, 0x3d	; 61
     6d8:	0d 92       	st	X+, r0
     6da:	0e b6       	in	r0, 0x3e	; 62
     6dc:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     6de:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     6e0:	0e 94 33 0c 	call	0x1866	; 0x1866 <xTaskIncrementTick>
     6e4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     6e6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     6ea:	a0 91 7b 11 	lds	r26, 0x117B	; 0x80117b <pxCurrentTCB>
     6ee:	b0 91 7c 11 	lds	r27, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
     6f2:	cd 91       	ld	r28, X+
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	dd 91       	ld	r29, X+
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	ff 91       	pop	r31
     6fc:	ef 91       	pop	r30
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	7f 91       	pop	r23
     70c:	6f 91       	pop	r22
     70e:	5f 91       	pop	r21
     710:	4f 91       	pop	r20
     712:	3f 91       	pop	r19
     714:	2f 91       	pop	r18
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	cf 90       	pop	r12
     722:	bf 90       	pop	r11
     724:	af 90       	pop	r10
     726:	9f 90       	pop	r9
     728:	8f 90       	pop	r8
     72a:	7f 90       	pop	r7
     72c:	6f 90       	pop	r6
     72e:	5f 90       	pop	r5
     730:	4f 90       	pop	r4
     732:	3f 90       	pop	r3
     734:	2f 90       	pop	r2
     736:	1f 90       	pop	r1
     738:	0f 90       	pop	r0
     73a:	0c be       	out	0x3c, r0	; 60
     73c:	0f 90       	pop	r0
     73e:	0b be       	out	0x3b, r0	; 59
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     746:	08 95       	ret

00000748 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     748:	9a df       	rcall	.-204    	; 0x67e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     74a:	18 95       	reti

0000074c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	0f 92       	push	r0
     752:	fc 01       	movw	r30, r24
     754:	86 8d       	ldd	r24, Z+30	; 0x1e
     756:	81 11       	cpse	r24, r1
     758:	02 c0       	rjmp	.+4      	; 0x75e <prvIsQueueEmpty+0x12>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	01 c0       	rjmp	.+2      	; 0x760 <prvIsQueueEmpty+0x14>
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	08 95       	ret

00000766 <prvIsQueueFull>:
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	0f 92       	push	r0
     76c:	fc 01       	movw	r30, r24
     76e:	26 8d       	ldd	r18, Z+30	; 0x1e
     770:	87 8d       	ldd	r24, Z+31	; 0x1f
     772:	28 13       	cpse	r18, r24
     774:	02 c0       	rjmp	.+4      	; 0x77a <prvIsQueueFull+0x14>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	01 c0       	rjmp	.+2      	; 0x77c <prvIsQueueFull+0x16>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	08 95       	ret

00000782 <prvCopyDataToQueue>:
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
     78c:	04 2f       	mov	r16, r20
     78e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     790:	48 a1       	ldd	r20, Y+32	; 0x20
     792:	41 11       	cpse	r20, r1
     794:	0c c0       	rjmp	.+24     	; 0x7ae <prvCopyDataToQueue+0x2c>
     796:	88 81       	ld	r24, Y
     798:	99 81       	ldd	r25, Y+1	; 0x01
     79a:	89 2b       	or	r24, r25
     79c:	09 f0       	breq	.+2      	; 0x7a0 <prvCopyDataToQueue+0x1e>
     79e:	42 c0       	rjmp	.+132    	; 0x824 <prvCopyDataToQueue+0xa2>
     7a0:	8c 81       	ldd	r24, Y+4	; 0x04
     7a2:	9d 81       	ldd	r25, Y+5	; 0x05
     7a4:	0e 94 cc 10 	call	0x2198	; 0x2198 <xTaskPriorityDisinherit>
     7a8:	1d 82       	std	Y+5, r1	; 0x05
     7aa:	1c 82       	std	Y+4, r1	; 0x04
     7ac:	42 c0       	rjmp	.+132    	; 0x832 <prvCopyDataToQueue+0xb0>
     7ae:	01 11       	cpse	r16, r1
     7b0:	17 c0       	rjmp	.+46     	; 0x7e0 <prvCopyDataToQueue+0x5e>
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	8a 81       	ldd	r24, Y+2	; 0x02
     7b6:	9b 81       	ldd	r25, Y+3	; 0x03
     7b8:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <memcpy>
     7bc:	28 a1       	ldd	r18, Y+32	; 0x20
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	9b 81       	ldd	r25, Y+3	; 0x03
     7c2:	82 0f       	add	r24, r18
     7c4:	91 1d       	adc	r25, r1
     7c6:	9b 83       	std	Y+3, r25	; 0x03
     7c8:	8a 83       	std	Y+2, r24	; 0x02
     7ca:	2c 81       	ldd	r18, Y+4	; 0x04
     7cc:	3d 81       	ldd	r19, Y+5	; 0x05
     7ce:	82 17       	cp	r24, r18
     7d0:	93 07       	cpc	r25, r19
     7d2:	50 f1       	brcs	.+84     	; 0x828 <prvCopyDataToQueue+0xa6>
     7d4:	88 81       	ld	r24, Y
     7d6:	99 81       	ldd	r25, Y+1	; 0x01
     7d8:	9b 83       	std	Y+3, r25	; 0x03
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	29 c0       	rjmp	.+82     	; 0x832 <prvCopyDataToQueue+0xb0>
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	9f 81       	ldd	r25, Y+7	; 0x07
     7e6:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <memcpy>
     7ea:	88 a1       	ldd	r24, Y+32	; 0x20
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	91 95       	neg	r25
     7f0:	81 95       	neg	r24
     7f2:	91 09       	sbc	r25, r1
     7f4:	2e 81       	ldd	r18, Y+6	; 0x06
     7f6:	3f 81       	ldd	r19, Y+7	; 0x07
     7f8:	28 0f       	add	r18, r24
     7fa:	39 1f       	adc	r19, r25
     7fc:	3f 83       	std	Y+7, r19	; 0x07
     7fe:	2e 83       	std	Y+6, r18	; 0x06
     800:	48 81       	ld	r20, Y
     802:	59 81       	ldd	r21, Y+1	; 0x01
     804:	24 17       	cp	r18, r20
     806:	35 07       	cpc	r19, r21
     808:	30 f4       	brcc	.+12     	; 0x816 <prvCopyDataToQueue+0x94>
     80a:	2c 81       	ldd	r18, Y+4	; 0x04
     80c:	3d 81       	ldd	r19, Y+5	; 0x05
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	9f 83       	std	Y+7, r25	; 0x07
     814:	8e 83       	std	Y+6, r24	; 0x06
     816:	02 30       	cpi	r16, 0x02	; 2
     818:	49 f4       	brne	.+18     	; 0x82c <prvCopyDataToQueue+0xaa>
     81a:	11 23       	and	r17, r17
     81c:	49 f0       	breq	.+18     	; 0x830 <prvCopyDataToQueue+0xae>
     81e:	11 50       	subi	r17, 0x01	; 1
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	07 c0       	rjmp	.+14     	; 0x832 <prvCopyDataToQueue+0xb0>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	05 c0       	rjmp	.+10     	; 0x832 <prvCopyDataToQueue+0xb0>
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	03 c0       	rjmp	.+6      	; 0x832 <prvCopyDataToQueue+0xb0>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	01 c0       	rjmp	.+2      	; 0x832 <prvCopyDataToQueue+0xb0>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	1f 5f       	subi	r17, 0xFF	; 255
     834:	1e 8f       	std	Y+30, r17	; 0x1e
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <prvCopyDataFromQueue>:
     840:	fc 01       	movw	r30, r24
     842:	40 a1       	ldd	r20, Z+32	; 0x20
     844:	44 23       	and	r20, r20
     846:	a9 f0       	breq	.+42     	; 0x872 <prvCopyDataFromQueue+0x32>
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	26 81       	ldd	r18, Z+6	; 0x06
     84c:	37 81       	ldd	r19, Z+7	; 0x07
     84e:	24 0f       	add	r18, r20
     850:	35 1f       	adc	r19, r21
     852:	37 83       	std	Z+7, r19	; 0x07
     854:	26 83       	std	Z+6, r18	; 0x06
     856:	84 81       	ldd	r24, Z+4	; 0x04
     858:	95 81       	ldd	r25, Z+5	; 0x05
     85a:	28 17       	cp	r18, r24
     85c:	39 07       	cpc	r19, r25
     85e:	20 f0       	brcs	.+8      	; 0x868 <prvCopyDataFromQueue+0x28>
     860:	80 81       	ld	r24, Z
     862:	91 81       	ldd	r25, Z+1	; 0x01
     864:	97 83       	std	Z+7, r25	; 0x07
     866:	86 83       	std	Z+6, r24	; 0x06
     868:	cb 01       	movw	r24, r22
     86a:	66 81       	ldd	r22, Z+6	; 0x06
     86c:	77 81       	ldd	r23, Z+7	; 0x07
     86e:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <memcpy>
     872:	08 95       	ret

00000874 <prvUnlockQueue>:
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	0f 92       	push	r0
     882:	1a a1       	ldd	r17, Y+34	; 0x22
     884:	0b c0       	rjmp	.+22     	; 0x89c <prvUnlockQueue+0x28>
     886:	8b 89       	ldd	r24, Y+19	; 0x13
     888:	88 23       	and	r24, r24
     88a:	51 f0       	breq	.+20     	; 0x8a0 <prvUnlockQueue+0x2c>
     88c:	ce 01       	movw	r24, r28
     88e:	43 96       	adiw	r24, 0x13	; 19
     890:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskRemoveFromEventList>
     894:	81 11       	cpse	r24, r1
     896:	0e 94 b5 10 	call	0x216a	; 0x216a <vTaskMissedYield>
     89a:	11 50       	subi	r17, 0x01	; 1
     89c:	11 16       	cp	r1, r17
     89e:	9c f3       	brlt	.-26     	; 0x886 <prvUnlockQueue+0x12>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	8a a3       	std	Y+34, r24	; 0x22
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	0f 92       	push	r0
     8ae:	19 a1       	ldd	r17, Y+33	; 0x21
     8b0:	0b c0       	rjmp	.+22     	; 0x8c8 <prvUnlockQueue+0x54>
     8b2:	88 85       	ldd	r24, Y+8	; 0x08
     8b4:	88 23       	and	r24, r24
     8b6:	51 f0       	breq	.+20     	; 0x8cc <prvUnlockQueue+0x58>
     8b8:	ce 01       	movw	r24, r28
     8ba:	08 96       	adiw	r24, 0x08	; 8
     8bc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskRemoveFromEventList>
     8c0:	81 11       	cpse	r24, r1
     8c2:	0e 94 b5 10 	call	0x216a	; 0x216a <vTaskMissedYield>
     8c6:	11 50       	subi	r17, 0x01	; 1
     8c8:	11 16       	cp	r1, r17
     8ca:	9c f3       	brlt	.-26     	; 0x8b2 <prvUnlockQueue+0x3e>
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	89 a3       	std	Y+33, r24	; 0x21
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	08 95       	ret

000008dc <xQueueGenericReset>:
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	ec 01       	movw	r28, r24
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	0f 92       	push	r0
     8e8:	e8 81       	ld	r30, Y
     8ea:	f9 81       	ldd	r31, Y+1	; 0x01
     8ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ee:	28 a1       	ldd	r18, Y+32	; 0x20
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	82 9f       	mul	r24, r18
     8f6:	a0 01       	movw	r20, r0
     8f8:	83 9f       	mul	r24, r19
     8fa:	50 0d       	add	r21, r0
     8fc:	92 9f       	mul	r25, r18
     8fe:	50 0d       	add	r21, r0
     900:	11 24       	eor	r1, r1
     902:	4e 0f       	add	r20, r30
     904:	5f 1f       	adc	r21, r31
     906:	5d 83       	std	Y+5, r21	; 0x05
     908:	4c 83       	std	Y+4, r20	; 0x04
     90a:	1e 8e       	std	Y+30, r1	; 0x1e
     90c:	fb 83       	std	Y+3, r31	; 0x03
     90e:	ea 83       	std	Y+2, r30	; 0x02
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	28 9f       	mul	r18, r24
     914:	a0 01       	movw	r20, r0
     916:	29 9f       	mul	r18, r25
     918:	50 0d       	add	r21, r0
     91a:	38 9f       	mul	r19, r24
     91c:	50 0d       	add	r21, r0
     91e:	11 24       	eor	r1, r1
     920:	cf 01       	movw	r24, r30
     922:	84 0f       	add	r24, r20
     924:	95 1f       	adc	r25, r21
     926:	9f 83       	std	Y+7, r25	; 0x07
     928:	8e 83       	std	Y+6, r24	; 0x06
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	89 a3       	std	Y+33, r24	; 0x21
     92e:	8a a3       	std	Y+34, r24	; 0x22
     930:	61 11       	cpse	r22, r1
     932:	0b c0       	rjmp	.+22     	; 0x94a <xQueueGenericReset+0x6e>
     934:	88 85       	ldd	r24, Y+8	; 0x08
     936:	88 23       	and	r24, r24
     938:	71 f0       	breq	.+28     	; 0x956 <xQueueGenericReset+0x7a>
     93a:	ce 01       	movw	r24, r28
     93c:	08 96       	adiw	r24, 0x08	; 8
     93e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskRemoveFromEventList>
     942:	88 23       	and	r24, r24
     944:	41 f0       	breq	.+16     	; 0x956 <xQueueGenericReset+0x7a>
     946:	3a de       	rcall	.-908    	; 0x5bc <vPortYield>
     948:	06 c0       	rjmp	.+12     	; 0x956 <xQueueGenericReset+0x7a>
     94a:	ce 01       	movw	r24, r28
     94c:	08 96       	adiw	r24, 0x08	; 8
     94e:	68 dd       	rcall	.-1328   	; 0x420 <vListInitialise>
     950:	ce 01       	movw	r24, r28
     952:	43 96       	adiw	r24, 0x13	; 19
     954:	65 dd       	rcall	.-1334   	; 0x420 <vListInitialise>
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <prvInitialiseNewQueue>:
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	f8 01       	movw	r30, r16
     968:	61 11       	cpse	r22, r1
     96a:	03 c0       	rjmp	.+6      	; 0x972 <prvInitialiseNewQueue+0x10>
     96c:	11 83       	std	Z+1, r17	; 0x01
     96e:	00 83       	st	Z, r16
     970:	02 c0       	rjmp	.+4      	; 0x976 <prvInitialiseNewQueue+0x14>
     972:	51 83       	std	Z+1, r21	; 0x01
     974:	40 83       	st	Z, r20
     976:	87 8f       	std	Z+31, r24	; 0x1f
     978:	60 a3       	std	Z+32, r22	; 0x20
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	cf 01       	movw	r24, r30
     97e:	ae df       	rcall	.-164    	; 0x8dc <xQueueGenericReset>
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <xQueueGenericCreate>:
     986:	df 92       	push	r13
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	f8 2e       	mov	r15, r24
     996:	e6 2e       	mov	r14, r22
     998:	d4 2e       	mov	r13, r20
     99a:	86 9f       	mul	r24, r22
     99c:	c0 01       	movw	r24, r0
     99e:	11 24       	eor	r1, r1
     9a0:	83 96       	adiw	r24, 0x23	; 35
     9a2:	58 dc       	rcall	.-1872   	; 0x254 <pvPortMalloc>
     9a4:	ec 01       	movw	r28, r24
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	41 f0       	breq	.+16     	; 0x9ba <xQueueGenericCreate+0x34>
     9aa:	8c 01       	movw	r16, r24
     9ac:	2d 2d       	mov	r18, r13
     9ae:	ac 01       	movw	r20, r24
     9b0:	4d 5d       	subi	r20, 0xDD	; 221
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	6e 2d       	mov	r22, r14
     9b6:	8f 2d       	mov	r24, r15
     9b8:	d4 df       	rcall	.-88     	; 0x962 <prvInitialiseNewQueue>
     9ba:	ce 01       	movw	r24, r28
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	08 95       	ret

000009cc <xQueueGenericSend>:
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	29 97       	sbiw	r28, 0x09	; 9
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	7c 01       	movw	r14, r24
     9ee:	6b 01       	movw	r12, r22
     9f0:	2e 83       	std	Y+6, r18	; 0x06
     9f2:	3f 83       	std	Y+7, r19	; 0x07
     9f4:	48 87       	std	Y+8, r20	; 0x08
     9f6:	59 87       	std	Y+9, r21	; 0x09
     9f8:	10 e0       	ldi	r17, 0x00	; 0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	0f 92       	push	r0
     a00:	f7 01       	movw	r30, r14
     a02:	96 8d       	ldd	r25, Z+30	; 0x1e
     a04:	87 8d       	ldd	r24, Z+31	; 0x1f
     a06:	98 17       	cp	r25, r24
     a08:	10 f0       	brcs	.+4      	; 0xa0e <xQueueGenericSend+0x42>
     a0a:	02 30       	cpi	r16, 0x02	; 2
     a0c:	b1 f4       	brne	.+44     	; 0xa3a <xQueueGenericSend+0x6e>
     a0e:	40 2f       	mov	r20, r16
     a10:	b6 01       	movw	r22, r12
     a12:	c7 01       	movw	r24, r14
     a14:	b6 de       	rcall	.-660    	; 0x782 <prvCopyDataToQueue>
     a16:	f7 01       	movw	r30, r14
     a18:	93 89       	ldd	r25, Z+19	; 0x13
     a1a:	99 23       	and	r25, r25
     a1c:	41 f0       	breq	.+16     	; 0xa2e <xQueueGenericSend+0x62>
     a1e:	c7 01       	movw	r24, r14
     a20:	43 96       	adiw	r24, 0x13	; 19
     a22:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskRemoveFromEventList>
     a26:	88 23       	and	r24, r24
     a28:	21 f0       	breq	.+8      	; 0xa32 <xQueueGenericSend+0x66>
     a2a:	c8 dd       	rcall	.-1136   	; 0x5bc <vPortYield>
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <xQueueGenericSend+0x66>
     a2e:	81 11       	cpse	r24, r1
     a30:	c5 dd       	rcall	.-1142   	; 0x5bc <vPortYield>
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	4a c0       	rjmp	.+148    	; 0xace <xQueueGenericSend+0x102>
     a3a:	8e 81       	ldd	r24, Y+6	; 0x06
     a3c:	9f 81       	ldd	r25, Y+7	; 0x07
     a3e:	a8 85       	ldd	r26, Y+8	; 0x08
     a40:	b9 85       	ldd	r27, Y+9	; 0x09
     a42:	89 2b       	or	r24, r25
     a44:	8a 2b       	or	r24, r26
     a46:	8b 2b       	or	r24, r27
     a48:	21 f4       	brne	.+8      	; 0xa52 <xQueueGenericSend+0x86>
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	3e c0       	rjmp	.+124    	; 0xace <xQueueGenericSend+0x102>
     a52:	11 11       	cpse	r17, r1
     a54:	05 c0       	rjmp	.+10     	; 0xa60 <xQueueGenericSend+0x94>
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	0e 94 3e 10 	call	0x207c	; 0x207c <vTaskInternalSetTimeOutState>
     a5e:	11 e0       	ldi	r17, 0x01	; 1
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	ec d6       	rcall	.+3544   	; 0x183e <vTaskSuspendAll>
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	0f 92       	push	r0
     a6c:	f7 01       	movw	r30, r14
     a6e:	81 a1       	ldd	r24, Z+33	; 0x21
     a70:	8f 3f       	cpi	r24, 0xFF	; 255
     a72:	09 f4       	brne	.+2      	; 0xa76 <xQueueGenericSend+0xaa>
     a74:	11 a2       	std	Z+33, r1	; 0x21
     a76:	f7 01       	movw	r30, r14
     a78:	82 a1       	ldd	r24, Z+34	; 0x22
     a7a:	8f 3f       	cpi	r24, 0xFF	; 255
     a7c:	09 f4       	brne	.+2      	; 0xa80 <xQueueGenericSend+0xb4>
     a7e:	12 a2       	std	Z+34, r1	; 0x22
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	be 01       	movw	r22, r28
     a86:	6a 5f       	subi	r22, 0xFA	; 250
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	ce 01       	movw	r24, r28
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskCheckForTimeOut>
     a92:	81 11       	cpse	r24, r1
     a94:	18 c0       	rjmp	.+48     	; 0xac6 <xQueueGenericSend+0xfa>
     a96:	c7 01       	movw	r24, r14
     a98:	66 de       	rcall	.-820    	; 0x766 <prvIsQueueFull>
     a9a:	88 23       	and	r24, r24
     a9c:	81 f0       	breq	.+32     	; 0xabe <xQueueGenericSend+0xf2>
     a9e:	4e 81       	ldd	r20, Y+6	; 0x06
     aa0:	5f 81       	ldd	r21, Y+7	; 0x07
     aa2:	68 85       	ldd	r22, Y+8	; 0x08
     aa4:	79 85       	ldd	r23, Y+9	; 0x09
     aa6:	c7 01       	movw	r24, r14
     aa8:	08 96       	adiw	r24, 0x08	; 8
     aaa:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <vTaskPlaceOnEventList>
     aae:	c7 01       	movw	r24, r14
     ab0:	e1 de       	rcall	.-574    	; 0x874 <prvUnlockQueue>
     ab2:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskResumeAll>
     ab6:	81 11       	cpse	r24, r1
     ab8:	a0 cf       	rjmp	.-192    	; 0x9fa <xQueueGenericSend+0x2e>
     aba:	80 dd       	rcall	.-1280   	; 0x5bc <vPortYield>
     abc:	9e cf       	rjmp	.-196    	; 0x9fa <xQueueGenericSend+0x2e>
     abe:	c7 01       	movw	r24, r14
     ac0:	d9 de       	rcall	.-590    	; 0x874 <prvUnlockQueue>
     ac2:	fd d7       	rcall	.+4090   	; 0x1abe <xTaskResumeAll>
     ac4:	9a cf       	rjmp	.-204    	; 0x9fa <xQueueGenericSend+0x2e>
     ac6:	c7 01       	movw	r24, r14
     ac8:	d5 de       	rcall	.-598    	; 0x874 <prvUnlockQueue>
     aca:	f9 d7       	rcall	.+4082   	; 0x1abe <xTaskResumeAll>
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	29 96       	adiw	r28, 0x09	; 9
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	08 95       	ret

00000aec <xQueueGenericSendFromISR>:
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	8a 01       	movw	r16, r20
     afa:	fc 01       	movw	r30, r24
     afc:	56 8d       	ldd	r21, Z+30	; 0x1e
     afe:	37 8d       	ldd	r19, Z+31	; 0x1f
     b00:	53 17       	cp	r21, r19
     b02:	10 f0       	brcs	.+4      	; 0xb08 <xQueueGenericSendFromISR+0x1c>
     b04:	22 30       	cpi	r18, 0x02	; 2
     b06:	f9 f4       	brne	.+62     	; 0xb46 <xQueueGenericSendFromISR+0x5a>
     b08:	42 2f       	mov	r20, r18
     b0a:	78 01       	movw	r14, r16
     b0c:	ec 01       	movw	r28, r24
     b0e:	1a a1       	ldd	r17, Y+34	; 0x22
     b10:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b12:	ce 01       	movw	r24, r28
     b14:	36 de       	rcall	.-916    	; 0x782 <prvCopyDataToQueue>
     b16:	1f 3f       	cpi	r17, 0xFF	; 255
     b18:	81 f4       	brne	.+32     	; 0xb3a <xQueueGenericSendFromISR+0x4e>
     b1a:	8b 89       	ldd	r24, Y+19	; 0x13
     b1c:	88 23       	and	r24, r24
     b1e:	a9 f0       	breq	.+42     	; 0xb4a <xQueueGenericSendFromISR+0x5e>
     b20:	ce 01       	movw	r24, r28
     b22:	43 96       	adiw	r24, 0x13	; 19
     b24:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskRemoveFromEventList>
     b28:	88 23       	and	r24, r24
     b2a:	89 f0       	breq	.+34     	; 0xb4e <xQueueGenericSendFromISR+0x62>
     b2c:	e1 14       	cp	r14, r1
     b2e:	f1 04       	cpc	r15, r1
     b30:	81 f0       	breq	.+32     	; 0xb52 <xQueueGenericSendFromISR+0x66>
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	f7 01       	movw	r30, r14
     b36:	80 83       	st	Z, r24
     b38:	0d c0       	rjmp	.+26     	; 0xb54 <xQueueGenericSendFromISR+0x68>
     b3a:	ff 24       	eor	r15, r15
     b3c:	f3 94       	inc	r15
     b3e:	f1 0e       	add	r15, r17
     b40:	fa a2       	std	Y+34, r15	; 0x22
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <xQueueGenericSendFromISR+0x68>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	05 c0       	rjmp	.+10     	; 0xb54 <xQueueGenericSendFromISR+0x68>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <xQueueGenericSendFromISR+0x68>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <xQueueGenericSendFromISR+0x68>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	08 95       	ret

00000b62 <xQueueReceive>:
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	29 97       	sbiw	r28, 0x09	; 9
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	8c 01       	movw	r16, r24
     b84:	6b 01       	movw	r12, r22
     b86:	2e 83       	std	Y+6, r18	; 0x06
     b88:	3f 83       	std	Y+7, r19	; 0x07
     b8a:	48 87       	std	Y+8, r20	; 0x08
     b8c:	59 87       	std	Y+9, r21	; 0x09
     b8e:	e1 2c       	mov	r14, r1
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	0f 92       	push	r0
     b96:	f8 01       	movw	r30, r16
     b98:	f6 8c       	ldd	r15, Z+30	; 0x1e
     b9a:	ff 20       	and	r15, r15
     b9c:	99 f0       	breq	.+38     	; 0xbc4 <xQueueReceive+0x62>
     b9e:	b6 01       	movw	r22, r12
     ba0:	c8 01       	movw	r24, r16
     ba2:	4e de       	rcall	.-868    	; 0x840 <prvCopyDataFromQueue>
     ba4:	fa 94       	dec	r15
     ba6:	f8 01       	movw	r30, r16
     ba8:	f6 8e       	std	Z+30, r15	; 0x1e
     baa:	80 85       	ldd	r24, Z+8	; 0x08
     bac:	88 23       	and	r24, r24
     bae:	31 f0       	breq	.+12     	; 0xbbc <xQueueReceive+0x5a>
     bb0:	c8 01       	movw	r24, r16
     bb2:	08 96       	adiw	r24, 0x08	; 8
     bb4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskRemoveFromEventList>
     bb8:	81 11       	cpse	r24, r1
     bba:	00 dd       	rcall	.-1536   	; 0x5bc <vPortYield>
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	4f c0       	rjmp	.+158    	; 0xc62 <xQueueReceive+0x100>
     bc4:	8e 81       	ldd	r24, Y+6	; 0x06
     bc6:	9f 81       	ldd	r25, Y+7	; 0x07
     bc8:	a8 85       	ldd	r26, Y+8	; 0x08
     bca:	b9 85       	ldd	r27, Y+9	; 0x09
     bcc:	89 2b       	or	r24, r25
     bce:	8a 2b       	or	r24, r26
     bd0:	8b 2b       	or	r24, r27
     bd2:	21 f4       	brne	.+8      	; 0xbdc <xQueueReceive+0x7a>
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	43 c0       	rjmp	.+134    	; 0xc62 <xQueueReceive+0x100>
     bdc:	e1 10       	cpse	r14, r1
     bde:	06 c0       	rjmp	.+12     	; 0xbec <xQueueReceive+0x8a>
     be0:	ce 01       	movw	r24, r28
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	0e 94 3e 10 	call	0x207c	; 0x207c <vTaskInternalSetTimeOutState>
     be8:	ee 24       	eor	r14, r14
     bea:	e3 94       	inc	r14
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	26 d6       	rcall	.+3148   	; 0x183e <vTaskSuspendAll>
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	0f 92       	push	r0
     bf8:	f8 01       	movw	r30, r16
     bfa:	81 a1       	ldd	r24, Z+33	; 0x21
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	09 f4       	brne	.+2      	; 0xc02 <xQueueReceive+0xa0>
     c00:	11 a2       	std	Z+33, r1	; 0x21
     c02:	f8 01       	movw	r30, r16
     c04:	82 a1       	ldd	r24, Z+34	; 0x22
     c06:	8f 3f       	cpi	r24, 0xFF	; 255
     c08:	09 f4       	brne	.+2      	; 0xc0c <xQueueReceive+0xaa>
     c0a:	12 a2       	std	Z+34, r1	; 0x22
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	be 01       	movw	r22, r28
     c12:	6a 5f       	subi	r22, 0xFA	; 250
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	ce 01       	movw	r24, r28
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskCheckForTimeOut>
     c1e:	81 11       	cpse	r24, r1
     c20:	17 c0       	rjmp	.+46     	; 0xc50 <xQueueReceive+0xee>
     c22:	c8 01       	movw	r24, r16
     c24:	93 dd       	rcall	.-1242   	; 0x74c <prvIsQueueEmpty>
     c26:	88 23       	and	r24, r24
     c28:	79 f0       	breq	.+30     	; 0xc48 <xQueueReceive+0xe6>
     c2a:	4e 81       	ldd	r20, Y+6	; 0x06
     c2c:	5f 81       	ldd	r21, Y+7	; 0x07
     c2e:	68 85       	ldd	r22, Y+8	; 0x08
     c30:	79 85       	ldd	r23, Y+9	; 0x09
     c32:	c8 01       	movw	r24, r16
     c34:	43 96       	adiw	r24, 0x13	; 19
     c36:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <vTaskPlaceOnEventList>
     c3a:	c8 01       	movw	r24, r16
     c3c:	1b de       	rcall	.-970    	; 0x874 <prvUnlockQueue>
     c3e:	3f d7       	rcall	.+3710   	; 0x1abe <xTaskResumeAll>
     c40:	81 11       	cpse	r24, r1
     c42:	a6 cf       	rjmp	.-180    	; 0xb90 <xQueueReceive+0x2e>
     c44:	bb dc       	rcall	.-1674   	; 0x5bc <vPortYield>
     c46:	a4 cf       	rjmp	.-184    	; 0xb90 <xQueueReceive+0x2e>
     c48:	c8 01       	movw	r24, r16
     c4a:	14 de       	rcall	.-984    	; 0x874 <prvUnlockQueue>
     c4c:	38 d7       	rcall	.+3696   	; 0x1abe <xTaskResumeAll>
     c4e:	a0 cf       	rjmp	.-192    	; 0xb90 <xQueueReceive+0x2e>
     c50:	c8 01       	movw	r24, r16
     c52:	10 de       	rcall	.-992    	; 0x874 <prvUnlockQueue>
     c54:	34 d7       	rcall	.+3688   	; 0x1abe <xTaskResumeAll>
     c56:	c8 01       	movw	r24, r16
     c58:	79 dd       	rcall	.-1294   	; 0x74c <prvIsQueueEmpty>
     c5a:	88 23       	and	r24, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <xQueueReceive+0xfe>
     c5e:	98 cf       	rjmp	.-208    	; 0xb90 <xQueueReceive+0x2e>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	29 96       	adiw	r28, 0x09	; 9
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	08 95       	ret

00000c80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	0f 92       	push	r0
     c8c:	89 a1       	ldd	r24, Y+33	; 0x21
     c8e:	8f 3f       	cpi	r24, 0xFF	; 255
     c90:	09 f4       	brne	.+2      	; 0xc94 <vQueueWaitForMessageRestricted+0x14>
     c92:	19 a2       	std	Y+33, r1	; 0x21
     c94:	8a a1       	ldd	r24, Y+34	; 0x22
     c96:	8f 3f       	cpi	r24, 0xFF	; 255
     c98:	09 f4       	brne	.+2      	; 0xc9c <vQueueWaitForMessageRestricted+0x1c>
     c9a:	1a a2       	std	Y+34, r1	; 0x22
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     ca0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ca2:	81 11       	cpse	r24, r1
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     ca6:	ce 01       	movw	r24, r28
     ca8:	43 96       	adiw	r24, 0x13	; 19
     caa:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     cae:	ce 01       	movw	r24, r28
     cb0:	e1 dd       	rcall	.-1086   	; 0x874 <prvUnlockQueue>
    }
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     cb8:	fc 01       	movw	r30, r24
     cba:	44 81       	ldd	r20, Z+4	; 0x04
     cbc:	55 81       	ldd	r21, Z+5	; 0x05
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	33 81       	ldd	r19, Z+3	; 0x03
     cc2:	24 0f       	add	r18, r20
     cc4:	35 1f       	adc	r19, r21
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	b9 01       	movw	r22, r18
     ccc:	68 1b       	sub	r22, r24
     cce:	79 0b       	sbc	r23, r25
     cd0:	cb 01       	movw	r24, r22
     cd2:	64 17       	cp	r22, r20
     cd4:	75 07       	cpc	r23, r21
     cd6:	10 f0       	brcs	.+4      	; 0xcdc <prvBytesInBuffer+0x24>
     cd8:	84 1b       	sub	r24, r20
     cda:	95 0b       	sbc	r25, r21
     cdc:	08 95       	ret

00000cde <prvInitialiseNewStreamBuffer>:
     cde:	0f 93       	push	r16
     ce0:	fc 01       	movw	r30, r24
     ce2:	8f e0       	ldi	r24, 0x0F	; 15
     ce4:	df 01       	movw	r26, r30
     ce6:	1d 92       	st	X+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <prvInitialiseNewStreamBuffer+0x8>
     cec:	75 87       	std	Z+13, r23	; 0x0d
     cee:	64 87       	std	Z+12, r22	; 0x0c
     cf0:	55 83       	std	Z+5, r21	; 0x05
     cf2:	44 83       	std	Z+4, r20	; 0x04
     cf4:	37 83       	std	Z+7, r19	; 0x07
     cf6:	26 83       	std	Z+6, r18	; 0x06
     cf8:	06 87       	std	Z+14, r16	; 0x0e
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <prvWriteBytesToBuffer>:
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	6c 01       	movw	r12, r24
     d14:	5b 01       	movw	r10, r22
     d16:	7a 01       	movw	r14, r20
     d18:	fc 01       	movw	r30, r24
     d1a:	c2 81       	ldd	r28, Z+2	; 0x02
     d1c:	d3 81       	ldd	r29, Z+3	; 0x03
     d1e:	04 81       	ldd	r16, Z+4	; 0x04
     d20:	15 81       	ldd	r17, Z+5	; 0x05
     d22:	0c 1b       	sub	r16, r28
     d24:	1d 0b       	sbc	r17, r29
     d26:	40 17       	cp	r20, r16
     d28:	51 07       	cpc	r21, r17
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <prvWriteBytesToBuffer+0x30>
     d2c:	8a 01       	movw	r16, r20
     d2e:	f6 01       	movw	r30, r12
     d30:	84 85       	ldd	r24, Z+12	; 0x0c
     d32:	95 85       	ldd	r25, Z+13	; 0x0d
     d34:	a8 01       	movw	r20, r16
     d36:	b5 01       	movw	r22, r10
     d38:	8c 0f       	add	r24, r28
     d3a:	9d 1f       	adc	r25, r29
     d3c:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <memcpy>
     d40:	0e 15       	cp	r16, r14
     d42:	1f 05       	cpc	r17, r15
     d44:	58 f4       	brcc	.+22     	; 0xd5c <prvWriteBytesToBuffer+0x5e>
     d46:	a7 01       	movw	r20, r14
     d48:	40 1b       	sub	r20, r16
     d4a:	51 0b       	sbc	r21, r17
     d4c:	b5 01       	movw	r22, r10
     d4e:	60 0f       	add	r22, r16
     d50:	71 1f       	adc	r23, r17
     d52:	f6 01       	movw	r30, r12
     d54:	84 85       	ldd	r24, Z+12	; 0x0c
     d56:	95 85       	ldd	r25, Z+13	; 0x0d
     d58:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <memcpy>
     d5c:	ce 01       	movw	r24, r28
     d5e:	8e 0d       	add	r24, r14
     d60:	9f 1d       	adc	r25, r15
     d62:	f6 01       	movw	r30, r12
     d64:	24 81       	ldd	r18, Z+4	; 0x04
     d66:	35 81       	ldd	r19, Z+5	; 0x05
     d68:	82 17       	cp	r24, r18
     d6a:	93 07       	cpc	r25, r19
     d6c:	10 f0       	brcs	.+4      	; 0xd72 <prvWriteBytesToBuffer+0x74>
     d6e:	82 1b       	sub	r24, r18
     d70:	93 0b       	sbc	r25, r19
     d72:	f6 01       	movw	r30, r12
     d74:	93 83       	std	Z+3, r25	; 0x03
     d76:	82 83       	std	Z+2, r24	; 0x02
     d78:	c7 01       	movw	r24, r14
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	08 95       	ret

00000d90 <prvWriteMessageToBuffer>:
     d90:	cf 92       	push	r12
     d92:	df 92       	push	r13
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	1f 92       	push	r1
     da2:	1f 92       	push	r1
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	7c 01       	movw	r14, r24
     daa:	6b 01       	movw	r12, r22
     dac:	5a 83       	std	Y+2, r21	; 0x02
     dae:	49 83       	std	Y+1, r20	; 0x01
     db0:	21 15       	cp	r18, r1
     db2:	31 05       	cpc	r19, r1
     db4:	c1 f0       	breq	.+48     	; 0xde6 <prvWriteMessageToBuffer+0x56>
     db6:	fc 01       	movw	r30, r24
     db8:	86 85       	ldd	r24, Z+14	; 0x0e
     dba:	80 fd       	sbrc	r24, 0
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <prvWriteMessageToBuffer+0x3e>
     dbe:	42 17       	cp	r20, r18
     dc0:	53 07       	cpc	r21, r19
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <prvWriteMessageToBuffer+0x36>
     dc4:	9a 01       	movw	r18, r20
     dc6:	3a 83       	std	Y+2, r19	; 0x02
     dc8:	29 83       	std	Y+1, r18	; 0x01
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <prvWriteMessageToBuffer+0x5c>
     dce:	20 17       	cp	r18, r16
     dd0:	31 07       	cpc	r19, r17
     dd2:	58 f0       	brcs	.+22     	; 0xdea <prvWriteMessageToBuffer+0x5a>
     dd4:	42 e0       	ldi	r20, 0x02	; 2
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	be 01       	movw	r22, r28
     dda:	6f 5f       	subi	r22, 0xFF	; 255
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	c7 01       	movw	r24, r14
     de0:	8e df       	rcall	.-228    	; 0xcfe <prvWriteBytesToBuffer>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	03 c0       	rjmp	.+6      	; 0xdec <prvWriteMessageToBuffer+0x5c>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	01 c0       	rjmp	.+2      	; 0xdec <prvWriteMessageToBuffer+0x5c>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	88 23       	and	r24, r24
     dee:	31 f0       	breq	.+12     	; 0xdfc <prvWriteMessageToBuffer+0x6c>
     df0:	49 81       	ldd	r20, Y+1	; 0x01
     df2:	5a 81       	ldd	r21, Y+2	; 0x02
     df4:	b6 01       	movw	r22, r12
     df6:	c7 01       	movw	r24, r14
     df8:	82 df       	rcall	.-252    	; 0xcfe <prvWriteBytesToBuffer>
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <prvWriteMessageToBuffer+0x70>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	08 95       	ret

00000e16 <prvReadBytesFromBuffer>:
     e16:	af 92       	push	r10
     e18:	bf 92       	push	r11
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	7c 01       	movw	r14, r24
     e2c:	5b 01       	movw	r10, r22
     e2e:	e9 01       	movw	r28, r18
     e30:	42 17       	cp	r20, r18
     e32:	53 07       	cpc	r21, r19
     e34:	08 f4       	brcc	.+2      	; 0xe38 <prvReadBytesFromBuffer+0x22>
     e36:	ea 01       	movw	r28, r20
     e38:	20 97       	sbiw	r28, 0x00	; 0
     e3a:	81 f1       	breq	.+96     	; 0xe9c <prvReadBytesFromBuffer+0x86>
     e3c:	f7 01       	movw	r30, r14
     e3e:	00 81       	ld	r16, Z
     e40:	11 81       	ldd	r17, Z+1	; 0x01
     e42:	84 81       	ldd	r24, Z+4	; 0x04
     e44:	95 81       	ldd	r25, Z+5	; 0x05
     e46:	80 1b       	sub	r24, r16
     e48:	91 0b       	sbc	r25, r17
     e4a:	6e 01       	movw	r12, r28
     e4c:	8c 17       	cp	r24, r28
     e4e:	9d 07       	cpc	r25, r29
     e50:	08 f4       	brcc	.+2      	; 0xe54 <prvReadBytesFromBuffer+0x3e>
     e52:	6c 01       	movw	r12, r24
     e54:	f7 01       	movw	r30, r14
     e56:	64 85       	ldd	r22, Z+12	; 0x0c
     e58:	75 85       	ldd	r23, Z+13	; 0x0d
     e5a:	60 0f       	add	r22, r16
     e5c:	71 1f       	adc	r23, r17
     e5e:	a6 01       	movw	r20, r12
     e60:	c5 01       	movw	r24, r10
     e62:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <memcpy>
     e66:	cc 16       	cp	r12, r28
     e68:	dd 06       	cpc	r13, r29
     e6a:	58 f4       	brcc	.+22     	; 0xe82 <prvReadBytesFromBuffer+0x6c>
     e6c:	ae 01       	movw	r20, r28
     e6e:	4c 19       	sub	r20, r12
     e70:	5d 09       	sbc	r21, r13
     e72:	f7 01       	movw	r30, r14
     e74:	64 85       	ldd	r22, Z+12	; 0x0c
     e76:	75 85       	ldd	r23, Z+13	; 0x0d
     e78:	c5 01       	movw	r24, r10
     e7a:	8c 0d       	add	r24, r12
     e7c:	9d 1d       	adc	r25, r13
     e7e:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <memcpy>
     e82:	0c 0f       	add	r16, r28
     e84:	1d 1f       	adc	r17, r29
     e86:	f7 01       	movw	r30, r14
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	95 81       	ldd	r25, Z+5	; 0x05
     e8c:	08 17       	cp	r16, r24
     e8e:	19 07       	cpc	r17, r25
     e90:	10 f0       	brcs	.+4      	; 0xe96 <prvReadBytesFromBuffer+0x80>
     e92:	08 1b       	sub	r16, r24
     e94:	19 0b       	sbc	r17, r25
     e96:	f7 01       	movw	r30, r14
     e98:	11 83       	std	Z+1, r17	; 0x01
     e9a:	00 83       	st	Z, r16
     e9c:	ce 01       	movw	r24, r28
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	bf 90       	pop	r11
     eb0:	af 90       	pop	r10
     eb2:	08 95       	ret

00000eb4 <prvReadMessageFromBuffer>:
     eb4:	6f 92       	push	r6
     eb6:	7f 92       	push	r7
     eb8:	8f 92       	push	r8
     eba:	9f 92       	push	r9
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	1f 92       	push	r1
     ed2:	1f 92       	push	r1
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	6c 01       	movw	r12, r24
     eda:	4b 01       	movw	r8, r22
     edc:	5a 01       	movw	r10, r20
     ede:	79 01       	movw	r14, r18
     ee0:	01 15       	cp	r16, r1
     ee2:	11 05       	cpc	r17, r1
     ee4:	b1 f0       	breq	.+44     	; 0xf12 <prvReadMessageFromBuffer+0x5e>
     ee6:	fc 01       	movw	r30, r24
     ee8:	60 80       	ld	r6, Z
     eea:	71 80       	ldd	r7, Z+1	; 0x01
     eec:	a8 01       	movw	r20, r16
     eee:	be 01       	movw	r22, r28
     ef0:	6f 5f       	subi	r22, 0xFF	; 255
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	90 df       	rcall	.-224    	; 0xe16 <prvReadBytesFromBuffer>
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	e0 1a       	sub	r14, r16
     efc:	f1 0a       	sbc	r15, r17
     efe:	a8 16       	cp	r10, r24
     f00:	b9 06       	cpc	r11, r25
     f02:	30 f4       	brcc	.+12     	; 0xf10 <prvReadMessageFromBuffer+0x5c>
     f04:	f6 01       	movw	r30, r12
     f06:	71 82       	std	Z+1, r7	; 0x01
     f08:	60 82       	st	Z, r6
     f0a:	a1 2c       	mov	r10, r1
     f0c:	b1 2c       	mov	r11, r1
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <prvReadMessageFromBuffer+0x5e>
     f10:	5c 01       	movw	r10, r24
     f12:	97 01       	movw	r18, r14
     f14:	a5 01       	movw	r20, r10
     f16:	b4 01       	movw	r22, r8
     f18:	c6 01       	movw	r24, r12
     f1a:	7d df       	rcall	.-262    	; 0xe16 <prvReadBytesFromBuffer>
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	bf 90       	pop	r11
     f32:	af 90       	pop	r10
     f34:	9f 90       	pop	r9
     f36:	8f 90       	pop	r8
     f38:	7f 90       	pop	r7
     f3a:	6f 90       	pop	r6
     f3c:	08 95       	ret

00000f3e <xStreamBufferGenericCreate>:
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	ec 01       	movw	r28, r24
     f4e:	6b 01       	movw	r12, r22
     f50:	41 30       	cpi	r20, 0x01	; 1
     f52:	11 f4       	brne	.+4      	; 0xf58 <xStreamBufferGenericCreate+0x1a>
     f54:	01 e0       	ldi	r16, 0x01	; 1
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <xStreamBufferGenericCreate+0x1c>
     f58:	00 e0       	ldi	r16, 0x00	; 0
     f5a:	c1 14       	cp	r12, r1
     f5c:	d1 04       	cpc	r13, r1
     f5e:	19 f4       	brne	.+6      	; 0xf66 <xStreamBufferGenericCreate+0x28>
     f60:	cc 24       	eor	r12, r12
     f62:	c3 94       	inc	r12
     f64:	d1 2c       	mov	r13, r1
     f66:	ce 01       	movw	r24, r28
     f68:	40 96       	adiw	r24, 0x10	; 16
     f6a:	c8 17       	cp	r28, r24
     f6c:	d9 07       	cpc	r29, r25
     f6e:	20 f4       	brcc	.+8      	; 0xf78 <xStreamBufferGenericCreate+0x3a>
     f70:	21 96       	adiw	r28, 0x01	; 1
     f72:	70 d9       	rcall	.-3360   	; 0x254 <pvPortMalloc>
     f74:	7c 01       	movw	r14, r24
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <xStreamBufferGenericCreate+0x3e>
     f78:	e1 2c       	mov	r14, r1
     f7a:	f1 2c       	mov	r15, r1
     f7c:	e1 14       	cp	r14, r1
     f7e:	f1 04       	cpc	r15, r1
     f80:	39 f0       	breq	.+14     	; 0xf90 <xStreamBufferGenericCreate+0x52>
     f82:	96 01       	movw	r18, r12
     f84:	ae 01       	movw	r20, r28
     f86:	b7 01       	movw	r22, r14
     f88:	61 5f       	subi	r22, 0xF1	; 241
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	c7 01       	movw	r24, r14
     f8e:	a7 de       	rcall	.-690    	; 0xcde <prvInitialiseNewStreamBuffer>
     f90:	c7 01       	movw	r24, r14
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	08 95       	ret

00000fa2 <xStreamBufferReset>:
     fa2:	0f 93       	push	r16
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	0f 92       	push	r0
     faa:	fc 01       	movw	r30, r24
     fac:	20 85       	ldd	r18, Z+8	; 0x08
     fae:	31 85       	ldd	r19, Z+9	; 0x09
     fb0:	23 2b       	or	r18, r19
     fb2:	71 f4       	brne	.+28     	; 0xfd0 <xStreamBufferReset+0x2e>
     fb4:	22 85       	ldd	r18, Z+10	; 0x0a
     fb6:	33 85       	ldd	r19, Z+11	; 0x0b
     fb8:	23 2b       	or	r18, r19
     fba:	61 f4       	brne	.+24     	; 0xfd4 <xStreamBufferReset+0x32>
     fbc:	26 81       	ldd	r18, Z+6	; 0x06
     fbe:	37 81       	ldd	r19, Z+7	; 0x07
     fc0:	44 81       	ldd	r20, Z+4	; 0x04
     fc2:	55 81       	ldd	r21, Z+5	; 0x05
     fc4:	64 85       	ldd	r22, Z+12	; 0x0c
     fc6:	75 85       	ldd	r23, Z+13	; 0x0d
     fc8:	06 85       	ldd	r16, Z+14	; 0x0e
     fca:	89 de       	rcall	.-750    	; 0xcde <prvInitialiseNewStreamBuffer>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <xStreamBufferReset+0x34>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <xStreamBufferReset+0x34>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 91       	pop	r16
     fdc:	08 95       	ret

00000fde <xStreamBufferSpacesAvailable>:
     fde:	fc 01       	movw	r30, r24
     fe0:	24 81       	ldd	r18, Z+4	; 0x04
     fe2:	35 81       	ldd	r19, Z+5	; 0x05
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	82 0f       	add	r24, r18
     fea:	93 1f       	adc	r25, r19
     fec:	42 81       	ldd	r20, Z+2	; 0x02
     fee:	53 81       	ldd	r21, Z+3	; 0x03
     ff0:	84 1b       	sub	r24, r20
     ff2:	95 0b       	sbc	r25, r21
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	82 17       	cp	r24, r18
     ff8:	93 07       	cpc	r25, r19
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffc:	82 1b       	sub	r24, r18
     ffe:	93 0b       	sbc	r25, r19
    1000:	08 95       	ret

00001002 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1002:	2f 92       	push	r2
    1004:	3f 92       	push	r3
    1006:	4f 92       	push	r4
    1008:	5f 92       	push	r5
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	2b 97       	sbiw	r28, 0x0b	; 11
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	4c 01       	movw	r8, r24
    1038:	7b 87       	std	Y+11, r23	; 0x0b
    103a:	6a 87       	std	Y+10, r22	; 0x0a
    103c:	1a 01       	movw	r2, r20
    103e:	0e 83       	std	Y+6, r16	; 0x06
    1040:	1f 83       	std	Y+7, r17	; 0x07
    1042:	28 87       	std	Y+8, r18	; 0x08
    1044:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1046:	fc 01       	movw	r30, r24
    1048:	84 81       	ldd	r24, Z+4	; 0x04
    104a:	95 81       	ldd	r25, Z+5	; 0x05
    104c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    104e:	26 85       	ldd	r18, Z+14	; 0x0e
    1050:	20 ff       	sbrs	r18, 0
    1052:	0c c0       	rjmp	.+24     	; 0x106c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1054:	2a 01       	movw	r4, r20
    1056:	f2 e0       	ldi	r31, 0x02	; 2
    1058:	4f 0e       	add	r4, r31
    105a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    105c:	84 15       	cp	r24, r4
    105e:	95 05       	cpc	r25, r5
    1060:	58 f4       	brcc	.+22     	; 0x1078 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1062:	1e 82       	std	Y+6, r1	; 0x06
    1064:	1f 82       	std	Y+7, r1	; 0x07
    1066:	18 86       	std	Y+8, r1	; 0x08
    1068:	19 86       	std	Y+9, r1	; 0x09
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    106c:	84 17       	cp	r24, r20
    106e:	95 07       	cpc	r25, r21
    1070:	10 f0       	brcs	.+4      	; 0x1076 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1072:	2a 01       	movw	r4, r20
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1076:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	a8 85       	ldd	r26, Y+8	; 0x08
    107e:	b9 85       	ldd	r27, Y+9	; 0x09
    1080:	89 2b       	or	r24, r25
    1082:	8a 2b       	or	r24, r26
    1084:	8b 2b       	or	r24, r27
    1086:	09 f4       	brne	.+2      	; 0x108a <xStreamBufferSend+0x88>
    1088:	36 c0       	rjmp	.+108    	; 0x10f6 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	e0 d7       	rcall	.+4032   	; 0x2050 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1096:	c4 01       	movw	r24, r8
    1098:	a2 df       	rcall	.-188    	; 0xfde <xStreamBufferSpacesAvailable>
    109a:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    109c:	84 15       	cp	r24, r4
    109e:	95 05       	cpc	r25, r5
    10a0:	38 f5       	brcc	.+78     	; 0x10f0 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    10ac:	0e 94 b9 10 	call	0x2172	; 0x2172 <xTaskGetCurrentTaskHandle>
    10b0:	f4 01       	movw	r30, r8
    10b2:	93 87       	std	Z+11, r25	; 0x0b
    10b4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    10ba:	ae 80       	ldd	r10, Y+6	; 0x06
    10bc:	bf 80       	ldd	r11, Y+7	; 0x07
    10be:	c8 84       	ldd	r12, Y+8	; 0x08
    10c0:	d9 84       	ldd	r13, Y+9	; 0x09
    10c2:	e1 2c       	mov	r14, r1
    10c4:	f1 2c       	mov	r15, r1
    10c6:	00 e0       	ldi	r16, 0x00	; 0
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	98 01       	movw	r18, r16
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	ba 01       	movw	r22, r20
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	0e 94 27 11 	call	0x224e	; 0x224e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    10d8:	f4 01       	movw	r30, r8
    10da:	13 86       	std	Z+11, r1	; 0x0b
    10dc:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    10de:	be 01       	movw	r22, r28
    10e0:	6a 5f       	subi	r22, 0xFA	; 250
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	da d7       	rcall	.+4020   	; 0x209e <xTaskCheckForTimeOut>
    10ea:	88 23       	and	r24, r24
    10ec:	89 f2       	breq	.-94     	; 0x1090 <xStreamBufferSend+0x8e>
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
                    break;
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    10f6:	61 2c       	mov	r6, r1
    10f8:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    10fa:	61 14       	cp	r6, r1
    10fc:	71 04       	cpc	r7, r1
    10fe:	19 f4       	brne	.+6      	; 0x1106 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1100:	c4 01       	movw	r24, r8
    1102:	6d df       	rcall	.-294    	; 0xfde <xStreamBufferSpacesAvailable>
    1104:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1106:	82 01       	movw	r16, r4
    1108:	93 01       	movw	r18, r6
    110a:	a1 01       	movw	r20, r2
    110c:	6a 85       	ldd	r22, Y+10	; 0x0a
    110e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1110:	c4 01       	movw	r24, r8
    1112:	3e de       	rcall	.-900    	; 0xd90 <prvWriteMessageToBuffer>
    1114:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1116:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1118:	e9 f0       	breq	.+58     	; 0x1154 <xStreamBufferSend+0x152>
    111a:	c4 01       	movw	r24, r8
    111c:	cd dd       	rcall	.-1126   	; 0xcb8 <prvBytesInBuffer>
    111e:	f4 01       	movw	r30, r8
    1120:	26 81       	ldd	r18, Z+6	; 0x06
    1122:	37 81       	ldd	r19, Z+7	; 0x07
    1124:	82 17       	cp	r24, r18
    1126:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1128:	a8 f0       	brcs	.+42     	; 0x1154 <xStreamBufferSend+0x152>
    112a:	89 d3       	rcall	.+1810   	; 0x183e <vTaskSuspendAll>
    112c:	f4 01       	movw	r30, r8
    112e:	80 85       	ldd	r24, Z+8	; 0x08
    1130:	91 85       	ldd	r25, Z+9	; 0x09
    1132:	89 2b       	or	r24, r25
    1134:	71 f0       	breq	.+28     	; 0x1152 <xStreamBufferSend+0x150>
    1136:	80 85       	ldd	r24, Z+8	; 0x08
    1138:	91 85       	ldd	r25, Z+9	; 0x09
    113a:	e1 2c       	mov	r14, r1
    113c:	f1 2c       	mov	r15, r1
    113e:	00 e0       	ldi	r16, 0x00	; 0
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	a9 01       	movw	r20, r18
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	0e 94 ce 11 	call	0x239c	; 0x239c <xTaskGenericNotify>
    114c:	f4 01       	movw	r30, r8
    114e:	11 86       	std	Z+9, r1	; 0x09
    1150:	10 86       	std	Z+8, r1	; 0x08
    1152:	b5 d4       	rcall	.+2410   	; 0x1abe <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1154:	c6 01       	movw	r24, r12
    1156:	2b 96       	adiw	r28, 0x0b	; 11
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	df 90       	pop	r13
    1170:	cf 90       	pop	r12
    1172:	bf 90       	pop	r11
    1174:	af 90       	pop	r10
    1176:	9f 90       	pop	r9
    1178:	8f 90       	pop	r8
    117a:	7f 90       	pop	r7
    117c:	6f 90       	pop	r6
    117e:	5f 90       	pop	r5
    1180:	4f 90       	pop	r4
    1182:	3f 90       	pop	r3
    1184:	2f 90       	pop	r2
    1186:	08 95       	ret

00001188 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	ec 01       	movw	r28, r24
    119e:	7b 01       	movw	r14, r22
    11a0:	5a 01       	movw	r10, r20
    11a2:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    11a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    11a6:	80 ff       	sbrs	r24, 0
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    11aa:	8a 01       	movw	r16, r20
    11ac:	0e 5f       	subi	r16, 0xFE	; 254
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    11b2:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11b4:	ce 01       	movw	r24, r28
    11b6:	13 df       	rcall	.-474    	; 0xfde <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    11b8:	9c 01       	movw	r18, r24
    11ba:	a5 01       	movw	r20, r10
    11bc:	b7 01       	movw	r22, r14
    11be:	ce 01       	movw	r24, r28
    11c0:	e7 dd       	rcall	.-1074   	; 0xd90 <prvWriteMessageToBuffer>
    11c2:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    11c4:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    11c6:	c1 f0       	breq	.+48     	; 0x11f8 <xStreamBufferSendFromISR+0x70>
    11c8:	ce 01       	movw	r24, r28
    11ca:	76 dd       	rcall	.-1300   	; 0xcb8 <prvBytesInBuffer>
    11cc:	2e 81       	ldd	r18, Y+6	; 0x06
    11ce:	3f 81       	ldd	r19, Y+7	; 0x07
    11d0:	82 17       	cp	r24, r18
    11d2:	93 07       	cpc	r25, r19
    11d4:	88 f0       	brcs	.+34     	; 0x11f8 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    11d6:	88 85       	ldd	r24, Y+8	; 0x08
    11d8:	99 85       	ldd	r25, Y+9	; 0x09
    11da:	89 2b       	or	r24, r25
    11dc:	69 f0       	breq	.+26     	; 0x11f8 <xStreamBufferSendFromISR+0x70>
    11de:	88 85       	ldd	r24, Y+8	; 0x08
    11e0:	99 85       	ldd	r25, Y+9	; 0x09
    11e2:	e1 2c       	mov	r14, r1
    11e4:	f1 2c       	mov	r15, r1
    11e6:	00 e0       	ldi	r16, 0x00	; 0
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	a9 01       	movw	r20, r18
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	0e 94 c5 12 	call	0x258a	; 0x258a <xTaskGenericNotifyFromISR>
    11f4:	19 86       	std	Y+9, r1	; 0x09
    11f6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    11f8:	c5 01       	movw	r24, r10
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	08 95       	ret

00001210 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1210:	4f 92       	push	r4
    1212:	5f 92       	push	r5
    1214:	6f 92       	push	r6
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
    1232:	2b 01       	movw	r4, r22
    1234:	3a 01       	movw	r6, r20
    1236:	58 01       	movw	r10, r16
    1238:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    123a:	8e 85       	ldd	r24, Y+14	; 0x0e
    123c:	80 ff       	sbrs	r24, 0
    123e:	05 c0       	rjmp	.+10     	; 0x124a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1240:	68 94       	set
    1242:	88 24       	eor	r8, r8
    1244:	81 f8       	bld	r8, 1
    1246:	91 2c       	mov	r9, r1
    1248:	02 c0       	rjmp	.+4      	; 0x124e <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    124a:	81 2c       	mov	r8, r1
    124c:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    124e:	a1 14       	cp	r10, r1
    1250:	b1 04       	cpc	r11, r1
    1252:	c1 04       	cpc	r12, r1
    1254:	d1 04       	cpc	r13, r1
    1256:	31 f1       	breq	.+76     	; 0x12a4 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    125e:	ce 01       	movw	r24, r28
    1260:	2b dd       	rcall	.-1450   	; 0xcb8 <prvBytesInBuffer>
    1262:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1264:	88 16       	cp	r8, r24
    1266:	99 06       	cpc	r9, r25
    1268:	40 f0       	brcs	.+16     	; 0x127a <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 e7 13 	call	0x27ce	; 0x27ce <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1274:	7e d7       	rcall	.+3836   	; 0x2172 <xTaskGetCurrentTaskHandle>
    1276:	99 87       	std	Y+9, r25	; 0x09
    1278:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    127e:	8e 14       	cp	r8, r14
    1280:	9f 04       	cpc	r9, r15
    1282:	98 f0       	brcs	.+38     	; 0x12aa <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1284:	e1 2c       	mov	r14, r1
    1286:	f1 2c       	mov	r15, r1
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	98 01       	movw	r18, r16
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	ba 01       	movw	r22, r20
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	db d7       	rcall	.+4022   	; 0x224e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1298:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    129a:	18 86       	std	Y+8, r1	; 0x08
    129c:	ce 01       	movw	r24, r28
    129e:	0c dd       	rcall	.-1512   	; 0xcb8 <prvBytesInBuffer>
    12a0:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <xStreamBufferReceive+0x9a>
    12a4:	ce 01       	movw	r24, r28
    12a6:	08 dd       	rcall	.-1520   	; 0xcb8 <prvBytesInBuffer>
    12a8:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    12aa:	8e 14       	cp	r8, r14
    12ac:	9f 04       	cpc	r9, r15
    12ae:	e8 f4       	brcc	.+58     	; 0x12ea <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    12b0:	84 01       	movw	r16, r8
    12b2:	97 01       	movw	r18, r14
    12b4:	a3 01       	movw	r20, r6
    12b6:	b2 01       	movw	r22, r4
    12b8:	ce 01       	movw	r24, r28
    12ba:	fc dd       	rcall	.-1032   	; 0xeb4 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    12bc:	6c 01       	movw	r12, r24
    12be:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    12c0:	b1 f0       	breq	.+44     	; 0x12ee <xStreamBufferReceive+0xde>
    12c2:	bd d2       	rcall	.+1402   	; 0x183e <vTaskSuspendAll>
    12c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c8:	89 2b       	or	r24, r25
    12ca:	69 f0       	breq	.+26     	; 0x12e6 <xStreamBufferReceive+0xd6>
    12cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d0:	e1 2c       	mov	r14, r1
    12d2:	f1 2c       	mov	r15, r1
    12d4:	00 e0       	ldi	r16, 0x00	; 0
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	a9 01       	movw	r20, r18
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	0e 94 ce 11 	call	0x239c	; 0x239c <xTaskGenericNotify>
    12e2:	1b 86       	std	Y+11, r1	; 0x0b
    12e4:	1a 86       	std	Y+10, r1	; 0x0a
    12e6:	eb d3       	rcall	.+2006   	; 0x1abe <xTaskResumeAll>
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    12ea:	c1 2c       	mov	r12, r1
    12ec:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    12ee:	c6 01       	movw	r24, r12
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	bf 90       	pop	r11
    1302:	af 90       	pop	r10
    1304:	9f 90       	pop	r9
    1306:	8f 90       	pop	r8
    1308:	7f 90       	pop	r7
    130a:	6f 90       	pop	r6
    130c:	5f 90       	pop	r5
    130e:	4f 90       	pop	r4
    1310:	08 95       	ret

00001312 <prvResetNextTaskUnblockTime>:
    1312:	e0 91 f5 10 	lds	r30, 0x10F5	; 0x8010f5 <pxDelayedTaskList>
    1316:	f0 91 f6 10 	lds	r31, 0x10F6	; 0x8010f6 <pxDelayedTaskList+0x1>
    131a:	80 81       	ld	r24, Z
    131c:	81 11       	cpse	r24, r1
    131e:	0c c0       	rjmp	.+24     	; 0x1338 <prvResetNextTaskUnblockTime+0x26>
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	dc 01       	movw	r26, r24
    1326:	80 93 bf 10 	sts	0x10BF, r24	; 0x8010bf <xNextTaskUnblockTime>
    132a:	90 93 c0 10 	sts	0x10C0, r25	; 0x8010c0 <xNextTaskUnblockTime+0x1>
    132e:	a0 93 c1 10 	sts	0x10C1, r26	; 0x8010c1 <xNextTaskUnblockTime+0x2>
    1332:	b0 93 c2 10 	sts	0x10C2, r27	; 0x8010c2 <xNextTaskUnblockTime+0x3>
    1336:	08 95       	ret
    1338:	e0 91 f5 10 	lds	r30, 0x10F5	; 0x8010f5 <pxDelayedTaskList>
    133c:	f0 91 f6 10 	lds	r31, 0x10F6	; 0x8010f6 <pxDelayedTaskList+0x1>
    1340:	07 80       	ldd	r0, Z+7	; 0x07
    1342:	f0 85       	ldd	r31, Z+8	; 0x08
    1344:	e0 2d       	mov	r30, r0
    1346:	80 81       	ld	r24, Z
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	a2 81       	ldd	r26, Z+2	; 0x02
    134c:	b3 81       	ldd	r27, Z+3	; 0x03
    134e:	80 93 bf 10 	sts	0x10BF, r24	; 0x8010bf <xNextTaskUnblockTime>
    1352:	90 93 c0 10 	sts	0x10C0, r25	; 0x8010c0 <xNextTaskUnblockTime+0x1>
    1356:	a0 93 c1 10 	sts	0x10C1, r26	; 0x8010c1 <xNextTaskUnblockTime+0x2>
    135a:	b0 93 c2 10 	sts	0x10C2, r27	; 0x8010c2 <xNextTaskUnblockTime+0x3>
    135e:	08 95       	ret

00001360 <prvDeleteTCB>:
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
    1366:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1368:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136a:	1d d8       	rcall	.-4038   	; 0x3a6 <vPortFree>
    136c:	ce 01       	movw	r24, r28
    136e:	1b d8       	rcall	.-4042   	; 0x3a6 <vPortFree>
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <prvInitialiseNewTask>:
    1376:	4f 92       	push	r4
    1378:	5f 92       	push	r5
    137a:	6f 92       	push	r6
    137c:	7f 92       	push	r7
    137e:	8f 92       	push	r8
    1380:	9f 92       	push	r9
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	2c 01       	movw	r4, r24
    1396:	5b 01       	movw	r10, r22
    1398:	4a 01       	movw	r8, r20
    139a:	39 01       	movw	r6, r18
    139c:	e6 01       	movw	r28, r12
    139e:	65 ea       	ldi	r22, 0xA5	; 165
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a6:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <memset>
    13aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ae:	21 e0       	ldi	r18, 0x01	; 1
    13b0:	82 1a       	sub	r8, r18
    13b2:	91 08       	sbc	r9, r1
    13b4:	88 0e       	add	r8, r24
    13b6:	99 1e       	adc	r9, r25
    13b8:	a1 14       	cp	r10, r1
    13ba:	b1 04       	cpc	r11, r1
    13bc:	89 f4       	brne	.+34     	; 0x13e0 <prvInitialiseNewTask+0x6a>
    13be:	15 c0       	rjmp	.+42     	; 0x13ea <prvInitialiseNewTask+0x74>
    13c0:	82 2f       	mov	r24, r18
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	f5 01       	movw	r30, r10
    13c6:	e8 0f       	add	r30, r24
    13c8:	f9 1f       	adc	r31, r25
    13ca:	30 81       	ld	r19, Z
    13cc:	de 01       	movw	r26, r28
    13ce:	a8 0f       	add	r26, r24
    13d0:	b9 1f       	adc	r27, r25
    13d2:	5d 96       	adiw	r26, 0x1d	; 29
    13d4:	3c 93       	st	X, r19
    13d6:	80 81       	ld	r24, Z
    13d8:	88 23       	and	r24, r24
    13da:	29 f0       	breq	.+10     	; 0x13e6 <prvInitialiseNewTask+0x70>
    13dc:	2f 5f       	subi	r18, 0xFF	; 255
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <prvInitialiseNewTask+0x6c>
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	20 31       	cpi	r18, 0x10	; 16
    13e4:	68 f3       	brcs	.-38     	; 0x13c0 <prvInitialiseNewTask+0x4a>
    13e6:	1c a6       	std	Y+44, r1	; 0x2c
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <prvInitialiseNewTask+0x76>
    13ea:	1d 8e       	std	Y+29, r1	; 0x1d
    13ec:	0a 30       	cpi	r16, 0x0A	; 10
    13ee:	08 f0       	brcs	.+2      	; 0x13f2 <prvInitialiseNewTask+0x7c>
    13f0:	09 e0       	ldi	r16, 0x09	; 9
    13f2:	0a 8f       	std	Y+26, r16	; 0x1a
    13f4:	0d a7       	std	Y+45, r16	; 0x2d
    13f6:	1e a6       	std	Y+46, r1	; 0x2e
    13f8:	ce 01       	movw	r24, r28
    13fa:	02 96       	adiw	r24, 0x02	; 2
    13fc:	22 d8       	rcall	.-4028   	; 0x442 <vListInitialiseItem>
    13fe:	ce 01       	movw	r24, r28
    1400:	0e 96       	adiw	r24, 0x0e	; 14
    1402:	1f d8       	rcall	.-4034   	; 0x442 <vListInitialiseItem>
    1404:	db 87       	std	Y+11, r29	; 0x0b
    1406:	ca 87       	std	Y+10, r28	; 0x0a
    1408:	8a e0       	ldi	r24, 0x0A	; 10
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a0 e0       	ldi	r26, 0x00	; 0
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	80 1b       	sub	r24, r16
    1412:	91 09       	sbc	r25, r1
    1414:	a1 09       	sbc	r26, r1
    1416:	b1 09       	sbc	r27, r1
    1418:	8e 87       	std	Y+14, r24	; 0x0e
    141a:	9f 87       	std	Y+15, r25	; 0x0f
    141c:	a8 8b       	std	Y+16, r26	; 0x10
    141e:	b9 8b       	std	Y+17, r27	; 0x11
    1420:	df 8b       	std	Y+23, r29	; 0x17
    1422:	ce 8b       	std	Y+22, r28	; 0x16
    1424:	84 e0       	ldi	r24, 0x04	; 4
    1426:	fe 01       	movw	r30, r28
    1428:	bf 96       	adiw	r30, 0x2f	; 47
    142a:	df 01       	movw	r26, r30
    142c:	1d 92       	st	X+, r1
    142e:	8a 95       	dec	r24
    1430:	e9 f7       	brne	.-6      	; 0x142c <prvInitialiseNewTask+0xb6>
    1432:	1b aa       	std	Y+51, r1	; 0x33
    1434:	a3 01       	movw	r20, r6
    1436:	b2 01       	movw	r22, r4
    1438:	c4 01       	movw	r24, r8
    143a:	77 d8       	rcall	.-3858   	; 0x52a <pxPortInitialiseStack>
    143c:	99 83       	std	Y+1, r25	; 0x01
    143e:	88 83       	st	Y, r24
    1440:	e1 14       	cp	r14, r1
    1442:	f1 04       	cpc	r15, r1
    1444:	19 f0       	breq	.+6      	; 0x144c <prvInitialiseNewTask+0xd6>
    1446:	f7 01       	movw	r30, r14
    1448:	d1 83       	std	Z+1, r29	; 0x01
    144a:	c0 83       	st	Z, r28
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	bf 90       	pop	r11
    145c:	af 90       	pop	r10
    145e:	9f 90       	pop	r9
    1460:	8f 90       	pop	r8
    1462:	7f 90       	pop	r7
    1464:	6f 90       	pop	r6
    1466:	5f 90       	pop	r5
    1468:	4f 90       	pop	r4
    146a:	08 95       	ret

0000146c <prvInitialiseTaskLists>:
    146c:	cf 93       	push	r28
    146e:	c0 e0       	ldi	r28, 0x00	; 0
    1470:	09 c0       	rjmp	.+18     	; 0x1484 <prvInitialiseTaskLists+0x18>
    1472:	2b e0       	ldi	r18, 0x0B	; 11
    1474:	c2 9f       	mul	r28, r18
    1476:	c0 01       	movw	r24, r0
    1478:	11 24       	eor	r1, r1
    147a:	83 5f       	subi	r24, 0xF3	; 243
    147c:	9e 4e       	sbci	r25, 0xEE	; 238
    147e:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    1482:	cf 5f       	subi	r28, 0xFF	; 255
    1484:	ca 30       	cpi	r28, 0x0A	; 10
    1486:	a8 f3       	brcs	.-22     	; 0x1472 <prvInitialiseTaskLists+0x6>
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	91 e1       	ldi	r25, 0x11	; 17
    148c:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    1490:	87 ef       	ldi	r24, 0xF7	; 247
    1492:	90 e1       	ldi	r25, 0x10	; 16
    1494:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    1498:	88 ee       	ldi	r24, 0xE8	; 232
    149a:	90 e1       	ldi	r25, 0x10	; 16
    149c:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14a0:	8d ed       	ldi	r24, 0xDD	; 221
    14a2:	90 e1       	ldi	r25, 0x10	; 16
    14a4:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14a8:	81 ed       	ldi	r24, 0xD1	; 209
    14aa:	90 e1       	ldi	r25, 0x10	; 16
    14ac:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	91 e1       	ldi	r25, 0x11	; 17
    14b4:	90 93 f6 10 	sts	0x10F6, r25	; 0x8010f6 <pxDelayedTaskList+0x1>
    14b8:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <pxDelayedTaskList>
    14bc:	87 ef       	ldi	r24, 0xF7	; 247
    14be:	90 e1       	ldi	r25, 0x10	; 16
    14c0:	90 93 f4 10 	sts	0x10F4, r25	; 0x8010f4 <pxOverflowDelayedTaskList+0x1>
    14c4:	80 93 f3 10 	sts	0x10F3, r24	; 0x8010f3 <pxOverflowDelayedTaskList>
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <prvAddNewTaskToReadyList>:
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	ec 01       	movw	r28, r24
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	0f 92       	push	r0
    14d8:	80 91 d0 10 	lds	r24, 0x10D0	; 0x8010d0 <uxCurrentNumberOfTasks>
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	80 93 d0 10 	sts	0x10D0, r24	; 0x8010d0 <uxCurrentNumberOfTasks>
    14e2:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxCurrentTCB>
    14e6:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    14ea:	89 2b       	or	r24, r25
    14ec:	51 f4       	brne	.+20     	; 0x1502 <prvAddNewTaskToReadyList+0x36>
    14ee:	d0 93 7c 11 	sts	0x117C, r29	; 0x80117c <pxCurrentTCB+0x1>
    14f2:	c0 93 7b 11 	sts	0x117B, r28	; 0x80117b <pxCurrentTCB>
    14f6:	80 91 d0 10 	lds	r24, 0x10D0	; 0x8010d0 <uxCurrentNumberOfTasks>
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 f4       	brne	.+36     	; 0x1522 <prvAddNewTaskToReadyList+0x56>
    14fe:	b6 df       	rcall	.-148    	; 0x146c <prvInitialiseTaskLists>
    1500:	10 c0       	rjmp	.+32     	; 0x1522 <prvAddNewTaskToReadyList+0x56>
    1502:	80 91 ca 10 	lds	r24, 0x10CA	; 0x8010ca <xSchedulerRunning>
    1506:	81 11       	cpse	r24, r1
    1508:	0c c0       	rjmp	.+24     	; 0x1522 <prvAddNewTaskToReadyList+0x56>
    150a:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    150e:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1512:	92 8d       	ldd	r25, Z+26	; 0x1a
    1514:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1516:	89 17       	cp	r24, r25
    1518:	20 f0       	brcs	.+8      	; 0x1522 <prvAddNewTaskToReadyList+0x56>
    151a:	d0 93 7c 11 	sts	0x117C, r29	; 0x80117c <pxCurrentTCB+0x1>
    151e:	c0 93 7b 11 	sts	0x117B, r28	; 0x80117b <pxCurrentTCB>
    1522:	80 91 c3 10 	lds	r24, 0x10C3	; 0x8010c3 <uxTaskNumber>
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	80 93 c3 10 	sts	0x10C3, r24	; 0x8010c3 <uxTaskNumber>
    152c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    152e:	80 91 cb 10 	lds	r24, 0x10CB	; 0x8010cb <uxTopReadyPriority>
    1532:	8e 17       	cp	r24, r30
    1534:	10 f4       	brcc	.+4      	; 0x153a <prvAddNewTaskToReadyList+0x6e>
    1536:	e0 93 cb 10 	sts	0x10CB, r30	; 0x8010cb <uxTopReadyPriority>
    153a:	8b e0       	ldi	r24, 0x0B	; 11
    153c:	8e 9f       	mul	r24, r30
    153e:	f0 01       	movw	r30, r0
    1540:	11 24       	eor	r1, r1
    1542:	e3 5f       	subi	r30, 0xF3	; 243
    1544:	fe 4e       	sbci	r31, 0xEE	; 238
    1546:	01 80       	ldd	r0, Z+1	; 0x01
    1548:	f2 81       	ldd	r31, Z+2	; 0x02
    154a:	e0 2d       	mov	r30, r0
    154c:	ff 83       	std	Y+7, r31	; 0x07
    154e:	ee 83       	std	Y+6, r30	; 0x06
    1550:	26 81       	ldd	r18, Z+6	; 0x06
    1552:	37 81       	ldd	r19, Z+7	; 0x07
    1554:	39 87       	std	Y+9, r19	; 0x09
    1556:	28 87       	std	Y+8, r18	; 0x08
    1558:	a6 81       	ldd	r26, Z+6	; 0x06
    155a:	b7 81       	ldd	r27, Z+7	; 0x07
    155c:	9e 01       	movw	r18, r28
    155e:	2e 5f       	subi	r18, 0xFE	; 254
    1560:	3f 4f       	sbci	r19, 0xFF	; 255
    1562:	15 96       	adiw	r26, 0x05	; 5
    1564:	3c 93       	st	X, r19
    1566:	2e 93       	st	-X, r18
    1568:	14 97       	sbiw	r26, 0x04	; 4
    156a:	37 83       	std	Z+7, r19	; 0x07
    156c:	26 83       	std	Z+6, r18	; 0x06
    156e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1570:	8e 9f       	mul	r24, r30
    1572:	f0 01       	movw	r30, r0
    1574:	11 24       	eor	r1, r1
    1576:	e3 5f       	subi	r30, 0xF3	; 243
    1578:	fe 4e       	sbci	r31, 0xEE	; 238
    157a:	fd 87       	std	Y+13, r31	; 0x0d
    157c:	ec 87       	std	Y+12, r30	; 0x0c
    157e:	80 81       	ld	r24, Z
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	80 83       	st	Z, r24
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	80 91 ca 10 	lds	r24, 0x10CA	; 0x8010ca <xSchedulerRunning>
    158c:	88 23       	and	r24, r24
    158e:	49 f0       	breq	.+18     	; 0x15a2 <prvAddNewTaskToReadyList+0xd6>
    1590:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    1594:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1598:	92 8d       	ldd	r25, Z+26	; 0x1a
    159a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    159c:	98 17       	cp	r25, r24
    159e:	08 f4       	brcc	.+2      	; 0x15a2 <prvAddNewTaskToReadyList+0xd6>
    15a0:	0d d8       	rcall	.-4070   	; 0x5bc <vPortYield>
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <prvCheckTasksWaitingTermination>:
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	1b c0       	rjmp	.+54     	; 0x15e4 <prvCheckTasksWaitingTermination+0x3c>
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	0f 92       	push	r0
    15b4:	e0 91 e4 10 	lds	r30, 0x10E4	; 0x8010e4 <xTasksWaitingTermination+0x7>
    15b8:	f0 91 e5 10 	lds	r31, 0x10E5	; 0x8010e5 <xTasksWaitingTermination+0x8>
    15bc:	c0 85       	ldd	r28, Z+8	; 0x08
    15be:	d1 85       	ldd	r29, Z+9	; 0x09
    15c0:	ce 01       	movw	r24, r28
    15c2:	02 96       	adiw	r24, 0x02	; 2
    15c4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
    15c8:	80 91 d0 10 	lds	r24, 0x10D0	; 0x8010d0 <uxCurrentNumberOfTasks>
    15cc:	81 50       	subi	r24, 0x01	; 1
    15ce:	80 93 d0 10 	sts	0x10D0, r24	; 0x8010d0 <uxCurrentNumberOfTasks>
    15d2:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <uxDeletedTasksWaitingCleanUp>
    15d6:	81 50       	subi	r24, 0x01	; 1
    15d8:	80 93 dc 10 	sts	0x10DC, r24	; 0x8010dc <uxDeletedTasksWaitingCleanUp>
    15dc:	0f 90       	pop	r0
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	ce 01       	movw	r24, r28
    15e2:	be de       	rcall	.-644    	; 0x1360 <prvDeleteTCB>
    15e4:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <uxDeletedTasksWaitingCleanUp>
    15e8:	81 11       	cpse	r24, r1
    15ea:	e1 cf       	rjmp	.-62     	; 0x15ae <prvCheckTasksWaitingTermination+0x6>
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <prvAddCurrentTaskToDelayedList>:
    15f2:	8f 92       	push	r8
    15f4:	9f 92       	push	r9
    15f6:	af 92       	push	r10
    15f8:	bf 92       	push	r11
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	6b 01       	movw	r12, r22
    1608:	7c 01       	movw	r14, r24
    160a:	c4 2f       	mov	r28, r20
    160c:	80 90 cc 10 	lds	r8, 0x10CC	; 0x8010cc <xTickCount>
    1610:	90 90 cd 10 	lds	r9, 0x10CD	; 0x8010cd <xTickCount+0x1>
    1614:	a0 90 ce 10 	lds	r10, 0x10CE	; 0x8010ce <xTickCount+0x2>
    1618:	b0 90 cf 10 	lds	r11, 0x10CF	; 0x8010cf <xTickCount+0x3>
    161c:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxCurrentTCB>
    1620:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1624:	02 96       	adiw	r24, 0x02	; 2
    1626:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
    162a:	8f ef       	ldi	r24, 0xFF	; 255
    162c:	c8 16       	cp	r12, r24
    162e:	d8 06       	cpc	r13, r24
    1630:	e8 06       	cpc	r14, r24
    1632:	f8 06       	cpc	r15, r24
    1634:	b1 f5       	brne	.+108    	; 0x16a2 <prvAddCurrentTaskToDelayedList+0xb0>
    1636:	cc 23       	and	r28, r28
    1638:	a1 f1       	breq	.+104    	; 0x16a2 <prvAddCurrentTaskToDelayedList+0xb0>
    163a:	e1 ed       	ldi	r30, 0xD1	; 209
    163c:	f0 e1       	ldi	r31, 0x10	; 16
    163e:	a1 81       	ldd	r26, Z+1	; 0x01
    1640:	b2 81       	ldd	r27, Z+2	; 0x02
    1642:	c0 91 7b 11 	lds	r28, 0x117B	; 0x80117b <pxCurrentTCB>
    1646:	d0 91 7c 11 	lds	r29, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    164a:	bf 83       	std	Y+7, r27	; 0x07
    164c:	ae 83       	std	Y+6, r26	; 0x06
    164e:	c0 91 7b 11 	lds	r28, 0x117B	; 0x80117b <pxCurrentTCB>
    1652:	d0 91 7c 11 	lds	r29, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1656:	16 96       	adiw	r26, 0x06	; 6
    1658:	8d 91       	ld	r24, X+
    165a:	9c 91       	ld	r25, X
    165c:	17 97       	sbiw	r26, 0x07	; 7
    165e:	99 87       	std	Y+9, r25	; 0x09
    1660:	88 87       	std	Y+8, r24	; 0x08
    1662:	16 96       	adiw	r26, 0x06	; 6
    1664:	cd 91       	ld	r28, X+
    1666:	dc 91       	ld	r29, X
    1668:	17 97       	sbiw	r26, 0x07	; 7
    166a:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxCurrentTCB>
    166e:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1672:	02 96       	adiw	r24, 0x02	; 2
    1674:	9d 83       	std	Y+5, r25	; 0x05
    1676:	8c 83       	std	Y+4, r24	; 0x04
    1678:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxCurrentTCB>
    167c:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1680:	02 96       	adiw	r24, 0x02	; 2
    1682:	17 96       	adiw	r26, 0x07	; 7
    1684:	9c 93       	st	X, r25
    1686:	8e 93       	st	-X, r24
    1688:	16 97       	sbiw	r26, 0x06	; 6
    168a:	a0 91 7b 11 	lds	r26, 0x117B	; 0x80117b <pxCurrentTCB>
    168e:	b0 91 7c 11 	lds	r27, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1692:	1d 96       	adiw	r26, 0x0d	; 13
    1694:	fc 93       	st	X, r31
    1696:	ee 93       	st	-X, r30
    1698:	1c 97       	sbiw	r26, 0x0c	; 12
    169a:	80 81       	ld	r24, Z
    169c:	8f 5f       	subi	r24, 0xFF	; 255
    169e:	80 83       	st	Z, r24
    16a0:	3f c0       	rjmp	.+126    	; 0x1720 <prvAddCurrentTaskToDelayedList+0x12e>
    16a2:	c8 0c       	add	r12, r8
    16a4:	d9 1c       	adc	r13, r9
    16a6:	ea 1c       	adc	r14, r10
    16a8:	fb 1c       	adc	r15, r11
    16aa:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    16ae:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    16b2:	c2 82       	std	Z+2, r12	; 0x02
    16b4:	d3 82       	std	Z+3, r13	; 0x03
    16b6:	e4 82       	std	Z+4, r14	; 0x04
    16b8:	f5 82       	std	Z+5, r15	; 0x05
    16ba:	c8 14       	cp	r12, r8
    16bc:	d9 04       	cpc	r13, r9
    16be:	ea 04       	cpc	r14, r10
    16c0:	fb 04       	cpc	r15, r11
    16c2:	68 f4       	brcc	.+26     	; 0x16de <prvAddCurrentTaskToDelayedList+0xec>
    16c4:	60 91 7b 11 	lds	r22, 0x117B	; 0x80117b <pxCurrentTCB>
    16c8:	70 91 7c 11 	lds	r23, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    16cc:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <pxOverflowDelayedTaskList>
    16d0:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <pxOverflowDelayedTaskList+0x1>
    16d4:	6e 5f       	subi	r22, 0xFE	; 254
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    16dc:	21 c0       	rjmp	.+66     	; 0x1720 <prvAddCurrentTaskToDelayedList+0x12e>
    16de:	60 91 7b 11 	lds	r22, 0x117B	; 0x80117b <pxCurrentTCB>
    16e2:	70 91 7c 11 	lds	r23, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    16e6:	80 91 f5 10 	lds	r24, 0x10F5	; 0x8010f5 <pxDelayedTaskList>
    16ea:	90 91 f6 10 	lds	r25, 0x10F6	; 0x8010f6 <pxDelayedTaskList+0x1>
    16ee:	6e 5f       	subi	r22, 0xFE	; 254
    16f0:	7f 4f       	sbci	r23, 0xFF	; 255
    16f2:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    16f6:	80 91 bf 10 	lds	r24, 0x10BF	; 0x8010bf <xNextTaskUnblockTime>
    16fa:	90 91 c0 10 	lds	r25, 0x10C0	; 0x8010c0 <xNextTaskUnblockTime+0x1>
    16fe:	a0 91 c1 10 	lds	r26, 0x10C1	; 0x8010c1 <xNextTaskUnblockTime+0x2>
    1702:	b0 91 c2 10 	lds	r27, 0x10C2	; 0x8010c2 <xNextTaskUnblockTime+0x3>
    1706:	c8 16       	cp	r12, r24
    1708:	d9 06       	cpc	r13, r25
    170a:	ea 06       	cpc	r14, r26
    170c:	fb 06       	cpc	r15, r27
    170e:	40 f4       	brcc	.+16     	; 0x1720 <prvAddCurrentTaskToDelayedList+0x12e>
    1710:	c0 92 bf 10 	sts	0x10BF, r12	; 0x8010bf <xNextTaskUnblockTime>
    1714:	d0 92 c0 10 	sts	0x10C0, r13	; 0x8010c0 <xNextTaskUnblockTime+0x1>
    1718:	e0 92 c1 10 	sts	0x10C1, r14	; 0x8010c1 <xNextTaskUnblockTime+0x2>
    171c:	f0 92 c2 10 	sts	0x10C2, r15	; 0x8010c2 <xNextTaskUnblockTime+0x3>
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	cf 90       	pop	r12
    172c:	bf 90       	pop	r11
    172e:	af 90       	pop	r10
    1730:	9f 90       	pop	r9
    1732:	8f 90       	pop	r8
    1734:	08 95       	ret

00001736 <xTaskCreate>:
    1736:	2f 92       	push	r2
    1738:	3f 92       	push	r3
    173a:	4f 92       	push	r4
    173c:	5f 92       	push	r5
    173e:	6f 92       	push	r6
    1740:	7f 92       	push	r7
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	3c 01       	movw	r6, r24
    175a:	1b 01       	movw	r2, r22
    175c:	4a 01       	movw	r8, r20
    175e:	29 01       	movw	r4, r18
    1760:	ca 01       	movw	r24, r20
    1762:	0e 94 2a 01 	call	0x254	; 0x254 <pvPortMalloc>
    1766:	6c 01       	movw	r12, r24
    1768:	89 2b       	or	r24, r25
    176a:	71 f0       	breq	.+28     	; 0x1788 <xTaskCreate+0x52>
    176c:	84 e3       	ldi	r24, 0x34	; 52
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 2a 01 	call	0x254	; 0x254 <pvPortMalloc>
    1774:	ec 01       	movw	r28, r24
    1776:	89 2b       	or	r24, r25
    1778:	19 f0       	breq	.+6      	; 0x1780 <xTaskCreate+0x4a>
    177a:	dc 8e       	std	Y+28, r13	; 0x1c
    177c:	cb 8e       	std	Y+27, r12	; 0x1b
    177e:	06 c0       	rjmp	.+12     	; 0x178c <xTaskCreate+0x56>
    1780:	c6 01       	movw	r24, r12
    1782:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <vPortFree>
    1786:	02 c0       	rjmp	.+4      	; 0x178c <xTaskCreate+0x56>
    1788:	c0 e0       	ldi	r28, 0x00	; 0
    178a:	d0 e0       	ldi	r29, 0x00	; 0
    178c:	20 97       	sbiw	r28, 0x00	; 0
    178e:	61 f0       	breq	.+24     	; 0x17a8 <xTaskCreate+0x72>
    1790:	a1 2c       	mov	r10, r1
    1792:	b1 2c       	mov	r11, r1
    1794:	6e 01       	movw	r12, r28
    1796:	92 01       	movw	r18, r4
    1798:	a4 01       	movw	r20, r8
    179a:	b1 01       	movw	r22, r2
    179c:	c3 01       	movw	r24, r6
    179e:	eb dd       	rcall	.-1066   	; 0x1376 <prvInitialiseNewTask>
    17a0:	ce 01       	movw	r24, r28
    17a2:	94 de       	rcall	.-728    	; 0x14cc <prvAddNewTaskToReadyList>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <xTaskCreate+0x74>
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	9f 90       	pop	r9
    17be:	8f 90       	pop	r8
    17c0:	7f 90       	pop	r7
    17c2:	6f 90       	pop	r6
    17c4:	5f 90       	pop	r5
    17c6:	4f 90       	pop	r4
    17c8:	3f 90       	pop	r3
    17ca:	2f 90       	pop	r2
    17cc:	08 95       	ret

000017ce <vTaskStartScheduler>:
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	0f 2e       	mov	r0, r31
    17d6:	fd eb       	ldi	r31, 0xBD	; 189
    17d8:	ef 2e       	mov	r14, r31
    17da:	f0 e1       	ldi	r31, 0x10	; 16
    17dc:	ff 2e       	mov	r15, r31
    17de:	f0 2d       	mov	r31, r0
    17e0:	00 e0       	ldi	r16, 0x00	; 0
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 ec       	ldi	r20, 0xC0	; 192
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	6d e3       	ldi	r22, 0x3D	; 61
    17ec:	72 e0       	ldi	r23, 0x02	; 2
    17ee:	8c e7       	ldi	r24, 0x7C	; 124
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a1 df       	rcall	.-190    	; 0x1736 <xTaskCreate>
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	11 f4       	brne	.+4      	; 0x17fc <vTaskStartScheduler+0x2e>
    17f8:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTimerCreateTimerTask>
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	c9 f4       	brne	.+50     	; 0x1832 <vTaskStartScheduler+0x64>
    1800:	f8 94       	cli
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	9f ef       	ldi	r25, 0xFF	; 255
    1806:	dc 01       	movw	r26, r24
    1808:	80 93 bf 10 	sts	0x10BF, r24	; 0x8010bf <xNextTaskUnblockTime>
    180c:	90 93 c0 10 	sts	0x10C0, r25	; 0x8010c0 <xNextTaskUnblockTime+0x1>
    1810:	a0 93 c1 10 	sts	0x10C1, r26	; 0x8010c1 <xNextTaskUnblockTime+0x2>
    1814:	b0 93 c2 10 	sts	0x10C2, r27	; 0x8010c2 <xNextTaskUnblockTime+0x3>
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 ca 10 	sts	0x10CA, r24	; 0x8010ca <xSchedulerRunning>
    181e:	10 92 cc 10 	sts	0x10CC, r1	; 0x8010cc <xTickCount>
    1822:	10 92 cd 10 	sts	0x10CD, r1	; 0x8010cd <xTickCount+0x1>
    1826:	10 92 ce 10 	sts	0x10CE, r1	; 0x8010ce <xTickCount+0x2>
    182a:	10 92 cf 10 	sts	0x10CF, r1	; 0x8010cf <xTickCount+0x3>
    182e:	0e 94 ac 02 	call	0x558	; 0x558 <xPortStartScheduler>
    1832:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	08 95       	ret

0000183e <vTaskSuspendAll>:
    183e:	80 91 bc 10 	lds	r24, 0x10BC	; 0x8010bc <uxSchedulerSuspended>
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	80 93 bc 10 	sts	0x10BC, r24	; 0x8010bc <uxSchedulerSuspended>
    1848:	08 95       	ret

0000184a <xTaskGetTickCount>:
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	0f 92       	push	r0
    1850:	60 91 cc 10 	lds	r22, 0x10CC	; 0x8010cc <xTickCount>
    1854:	70 91 cd 10 	lds	r23, 0x10CD	; 0x8010cd <xTickCount+0x1>
    1858:	80 91 ce 10 	lds	r24, 0x10CE	; 0x8010ce <xTickCount+0x2>
    185c:	90 91 cf 10 	lds	r25, 0x10CF	; 0x8010cf <xTickCount+0x3>
    1860:	0f 90       	pop	r0
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	08 95       	ret

00001866 <xTaskIncrementTick>:
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	80 91 bc 10 	lds	r24, 0x10BC	; 0x8010bc <uxSchedulerSuspended>
    1876:	81 11       	cpse	r24, r1
    1878:	05 c1       	rjmp	.+522    	; 0x1a84 <xTaskIncrementTick+0x21e>
    187a:	c0 90 cc 10 	lds	r12, 0x10CC	; 0x8010cc <xTickCount>
    187e:	d0 90 cd 10 	lds	r13, 0x10CD	; 0x8010cd <xTickCount+0x1>
    1882:	e0 90 ce 10 	lds	r14, 0x10CE	; 0x8010ce <xTickCount+0x2>
    1886:	f0 90 cf 10 	lds	r15, 0x10CF	; 0x8010cf <xTickCount+0x3>
    188a:	8f ef       	ldi	r24, 0xFF	; 255
    188c:	c8 1a       	sub	r12, r24
    188e:	d8 0a       	sbc	r13, r24
    1890:	e8 0a       	sbc	r14, r24
    1892:	f8 0a       	sbc	r15, r24
    1894:	c0 92 cc 10 	sts	0x10CC, r12	; 0x8010cc <xTickCount>
    1898:	d0 92 cd 10 	sts	0x10CD, r13	; 0x8010cd <xTickCount+0x1>
    189c:	e0 92 ce 10 	sts	0x10CE, r14	; 0x8010ce <xTickCount+0x2>
    18a0:	f0 92 cf 10 	sts	0x10CF, r15	; 0x8010cf <xTickCount+0x3>
    18a4:	c1 14       	cp	r12, r1
    18a6:	d1 04       	cpc	r13, r1
    18a8:	e1 04       	cpc	r14, r1
    18aa:	f1 04       	cpc	r15, r1
    18ac:	b1 f4       	brne	.+44     	; 0x18da <xTaskIncrementTick+0x74>
    18ae:	80 91 f5 10 	lds	r24, 0x10F5	; 0x8010f5 <pxDelayedTaskList>
    18b2:	90 91 f6 10 	lds	r25, 0x10F6	; 0x8010f6 <pxDelayedTaskList+0x1>
    18b6:	20 91 f3 10 	lds	r18, 0x10F3	; 0x8010f3 <pxOverflowDelayedTaskList>
    18ba:	30 91 f4 10 	lds	r19, 0x10F4	; 0x8010f4 <pxOverflowDelayedTaskList+0x1>
    18be:	30 93 f6 10 	sts	0x10F6, r19	; 0x8010f6 <pxDelayedTaskList+0x1>
    18c2:	20 93 f5 10 	sts	0x10F5, r18	; 0x8010f5 <pxDelayedTaskList>
    18c6:	90 93 f4 10 	sts	0x10F4, r25	; 0x8010f4 <pxOverflowDelayedTaskList+0x1>
    18ca:	80 93 f3 10 	sts	0x10F3, r24	; 0x8010f3 <pxOverflowDelayedTaskList>
    18ce:	80 91 c4 10 	lds	r24, 0x10C4	; 0x8010c4 <xNumOfOverflows>
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	80 93 c4 10 	sts	0x10C4, r24	; 0x8010c4 <xNumOfOverflows>
    18d8:	1c dd       	rcall	.-1480   	; 0x1312 <prvResetNextTaskUnblockTime>
    18da:	80 91 bf 10 	lds	r24, 0x10BF	; 0x8010bf <xNextTaskUnblockTime>
    18de:	90 91 c0 10 	lds	r25, 0x10C0	; 0x8010c0 <xNextTaskUnblockTime+0x1>
    18e2:	a0 91 c1 10 	lds	r26, 0x10C1	; 0x8010c1 <xNextTaskUnblockTime+0x2>
    18e6:	b0 91 c2 10 	lds	r27, 0x10C2	; 0x8010c2 <xNextTaskUnblockTime+0x3>
    18ea:	c8 16       	cp	r12, r24
    18ec:	d9 06       	cpc	r13, r25
    18ee:	ea 06       	cpc	r14, r26
    18f0:	fb 06       	cpc	r15, r27
    18f2:	20 f4       	brcc	.+8      	; 0x18fc <xTaskIncrementTick+0x96>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	b2 c0       	rjmp	.+356    	; 0x1a5c <xTaskIncrementTick+0x1f6>
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <xTaskIncrementTick+0x98>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	e0 91 f5 10 	lds	r30, 0x10F5	; 0x8010f5 <pxDelayedTaskList>
    1902:	f0 91 f6 10 	lds	r31, 0x10F6	; 0x8010f6 <pxDelayedTaskList+0x1>
    1906:	90 81       	ld	r25, Z
    1908:	91 11       	cpse	r25, r1
    190a:	0c c0       	rjmp	.+24     	; 0x1924 <xTaskIncrementTick+0xbe>
    190c:	4f ef       	ldi	r20, 0xFF	; 255
    190e:	5f ef       	ldi	r21, 0xFF	; 255
    1910:	ba 01       	movw	r22, r20
    1912:	40 93 bf 10 	sts	0x10BF, r20	; 0x8010bf <xNextTaskUnblockTime>
    1916:	50 93 c0 10 	sts	0x10C0, r21	; 0x8010c0 <xNextTaskUnblockTime+0x1>
    191a:	60 93 c1 10 	sts	0x10C1, r22	; 0x8010c1 <xNextTaskUnblockTime+0x2>
    191e:	70 93 c2 10 	sts	0x10C2, r23	; 0x8010c2 <xNextTaskUnblockTime+0x3>
    1922:	9c c0       	rjmp	.+312    	; 0x1a5c <xTaskIncrementTick+0x1f6>
    1924:	e0 91 f5 10 	lds	r30, 0x10F5	; 0x8010f5 <pxDelayedTaskList>
    1928:	f0 91 f6 10 	lds	r31, 0x10F6	; 0x8010f6 <pxDelayedTaskList+0x1>
    192c:	07 80       	ldd	r0, Z+7	; 0x07
    192e:	f0 85       	ldd	r31, Z+8	; 0x08
    1930:	e0 2d       	mov	r30, r0
    1932:	00 84       	ldd	r0, Z+8	; 0x08
    1934:	f1 85       	ldd	r31, Z+9	; 0x09
    1936:	e0 2d       	mov	r30, r0
    1938:	42 81       	ldd	r20, Z+2	; 0x02
    193a:	53 81       	ldd	r21, Z+3	; 0x03
    193c:	64 81       	ldd	r22, Z+4	; 0x04
    193e:	75 81       	ldd	r23, Z+5	; 0x05
    1940:	c4 16       	cp	r12, r20
    1942:	d5 06       	cpc	r13, r21
    1944:	e6 06       	cpc	r14, r22
    1946:	f7 06       	cpc	r15, r23
    1948:	48 f4       	brcc	.+18     	; 0x195c <xTaskIncrementTick+0xf6>
    194a:	40 93 bf 10 	sts	0x10BF, r20	; 0x8010bf <xNextTaskUnblockTime>
    194e:	50 93 c0 10 	sts	0x10C0, r21	; 0x8010c0 <xNextTaskUnblockTime+0x1>
    1952:	60 93 c1 10 	sts	0x10C1, r22	; 0x8010c1 <xNextTaskUnblockTime+0x2>
    1956:	70 93 c2 10 	sts	0x10C2, r23	; 0x8010c2 <xNextTaskUnblockTime+0x3>
    195a:	80 c0       	rjmp	.+256    	; 0x1a5c <xTaskIncrementTick+0x1f6>
    195c:	a4 85       	ldd	r26, Z+12	; 0x0c
    195e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1960:	c6 81       	ldd	r28, Z+6	; 0x06
    1962:	d7 81       	ldd	r29, Z+7	; 0x07
    1964:	20 85       	ldd	r18, Z+8	; 0x08
    1966:	31 85       	ldd	r19, Z+9	; 0x09
    1968:	3f 83       	std	Y+7, r19	; 0x07
    196a:	2e 83       	std	Y+6, r18	; 0x06
    196c:	c0 85       	ldd	r28, Z+8	; 0x08
    196e:	d1 85       	ldd	r29, Z+9	; 0x09
    1970:	26 81       	ldd	r18, Z+6	; 0x06
    1972:	37 81       	ldd	r19, Z+7	; 0x07
    1974:	3d 83       	std	Y+5, r19	; 0x05
    1976:	2c 83       	std	Y+4, r18	; 0x04
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	4d 91       	ld	r20, X+
    197c:	5c 91       	ld	r21, X
    197e:	12 97       	sbiw	r26, 0x02	; 2
    1980:	9f 01       	movw	r18, r30
    1982:	2e 5f       	subi	r18, 0xFE	; 254
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	42 17       	cp	r20, r18
    1988:	53 07       	cpc	r21, r19
    198a:	31 f4       	brne	.+12     	; 0x1998 <xTaskIncrementTick+0x132>
    198c:	40 85       	ldd	r20, Z+8	; 0x08
    198e:	51 85       	ldd	r21, Z+9	; 0x09
    1990:	12 96       	adiw	r26, 0x02	; 2
    1992:	5c 93       	st	X, r21
    1994:	4e 93       	st	-X, r20
    1996:	11 97       	sbiw	r26, 0x01	; 1
    1998:	15 86       	std	Z+13, r1	; 0x0d
    199a:	14 86       	std	Z+12, r1	; 0x0c
    199c:	9c 91       	ld	r25, X
    199e:	91 50       	subi	r25, 0x01	; 1
    19a0:	9c 93       	st	X, r25
    19a2:	a0 8d       	ldd	r26, Z+24	; 0x18
    19a4:	b1 8d       	ldd	r27, Z+25	; 0x19
    19a6:	10 97       	sbiw	r26, 0x00	; 0
    19a8:	09 f1       	breq	.+66     	; 0x19ec <xTaskIncrementTick+0x186>
    19aa:	c2 89       	ldd	r28, Z+18	; 0x12
    19ac:	d3 89       	ldd	r29, Z+19	; 0x13
    19ae:	44 89       	ldd	r20, Z+20	; 0x14
    19b0:	55 89       	ldd	r21, Z+21	; 0x15
    19b2:	5f 83       	std	Y+7, r21	; 0x07
    19b4:	4e 83       	std	Y+6, r20	; 0x06
    19b6:	c4 89       	ldd	r28, Z+20	; 0x14
    19b8:	d5 89       	ldd	r29, Z+21	; 0x15
    19ba:	42 89       	ldd	r20, Z+18	; 0x12
    19bc:	53 89       	ldd	r21, Z+19	; 0x13
    19be:	5d 83       	std	Y+5, r21	; 0x05
    19c0:	4c 83       	std	Y+4, r20	; 0x04
    19c2:	11 96       	adiw	r26, 0x01	; 1
    19c4:	6d 91       	ld	r22, X+
    19c6:	7c 91       	ld	r23, X
    19c8:	12 97       	sbiw	r26, 0x02	; 2
    19ca:	af 01       	movw	r20, r30
    19cc:	42 5f       	subi	r20, 0xF2	; 242
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	64 17       	cp	r22, r20
    19d2:	75 07       	cpc	r23, r21
    19d4:	31 f4       	brne	.+12     	; 0x19e2 <xTaskIncrementTick+0x17c>
    19d6:	44 89       	ldd	r20, Z+20	; 0x14
    19d8:	55 89       	ldd	r21, Z+21	; 0x15
    19da:	12 96       	adiw	r26, 0x02	; 2
    19dc:	5c 93       	st	X, r21
    19de:	4e 93       	st	-X, r20
    19e0:	11 97       	sbiw	r26, 0x01	; 1
    19e2:	11 8e       	std	Z+25, r1	; 0x19
    19e4:	10 8e       	std	Z+24, r1	; 0x18
    19e6:	9c 91       	ld	r25, X
    19e8:	91 50       	subi	r25, 0x01	; 1
    19ea:	9c 93       	st	X, r25
    19ec:	a2 8d       	ldd	r26, Z+26	; 0x1a
    19ee:	90 91 cb 10 	lds	r25, 0x10CB	; 0x8010cb <uxTopReadyPriority>
    19f2:	9a 17       	cp	r25, r26
    19f4:	10 f4       	brcc	.+4      	; 0x19fa <xTaskIncrementTick+0x194>
    19f6:	a0 93 cb 10 	sts	0x10CB, r26	; 0x8010cb <uxTopReadyPriority>
    19fa:	9b e0       	ldi	r25, 0x0B	; 11
    19fc:	9a 9f       	mul	r25, r26
    19fe:	d0 01       	movw	r26, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	a3 5f       	subi	r26, 0xF3	; 243
    1a04:	be 4e       	sbci	r27, 0xEE	; 238
    1a06:	11 96       	adiw	r26, 0x01	; 1
    1a08:	0d 90       	ld	r0, X+
    1a0a:	bc 91       	ld	r27, X
    1a0c:	a0 2d       	mov	r26, r0
    1a0e:	b7 83       	std	Z+7, r27	; 0x07
    1a10:	a6 83       	std	Z+6, r26	; 0x06
    1a12:	16 96       	adiw	r26, 0x06	; 6
    1a14:	4d 91       	ld	r20, X+
    1a16:	5c 91       	ld	r21, X
    1a18:	17 97       	sbiw	r26, 0x07	; 7
    1a1a:	51 87       	std	Z+9, r21	; 0x09
    1a1c:	40 87       	std	Z+8, r20	; 0x08
    1a1e:	16 96       	adiw	r26, 0x06	; 6
    1a20:	cd 91       	ld	r28, X+
    1a22:	dc 91       	ld	r29, X
    1a24:	17 97       	sbiw	r26, 0x07	; 7
    1a26:	3d 83       	std	Y+5, r19	; 0x05
    1a28:	2c 83       	std	Y+4, r18	; 0x04
    1a2a:	17 96       	adiw	r26, 0x07	; 7
    1a2c:	3c 93       	st	X, r19
    1a2e:	2e 93       	st	-X, r18
    1a30:	16 97       	sbiw	r26, 0x06	; 6
    1a32:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a34:	9a 9f       	mul	r25, r26
    1a36:	d0 01       	movw	r26, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	a3 5f       	subi	r26, 0xF3	; 243
    1a3c:	be 4e       	sbci	r27, 0xEE	; 238
    1a3e:	b5 87       	std	Z+13, r27	; 0x0d
    1a40:	a4 87       	std	Z+12, r26	; 0x0c
    1a42:	9c 91       	ld	r25, X
    1a44:	9f 5f       	subi	r25, 0xFF	; 255
    1a46:	9c 93       	st	X, r25
    1a48:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a4a:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    1a4e:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1a52:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a54:	29 17       	cp	r18, r25
    1a56:	08 f0       	brcs	.+2      	; 0x1a5a <xTaskIncrementTick+0x1f4>
    1a58:	4f cf       	rjmp	.-354    	; 0x18f8 <xTaskIncrementTick+0x92>
    1a5a:	51 cf       	rjmp	.-350    	; 0x18fe <xTaskIncrementTick+0x98>
    1a5c:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    1a60:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1a64:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1a66:	9b e0       	ldi	r25, 0x0B	; 11
    1a68:	e9 9f       	mul	r30, r25
    1a6a:	f0 01       	movw	r30, r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	e3 5f       	subi	r30, 0xF3	; 243
    1a70:	fe 4e       	sbci	r31, 0xEE	; 238
    1a72:	90 81       	ld	r25, Z
    1a74:	92 30       	cpi	r25, 0x02	; 2
    1a76:	08 f0       	brcs	.+2      	; 0x1a7a <xTaskIncrementTick+0x214>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 91 c5 10 	lds	r25, 0x10C5	; 0x8010c5 <xYieldPending>
    1a7e:	91 11       	cpse	r25, r1
    1a80:	16 c0       	rjmp	.+44     	; 0x1aae <xTaskIncrementTick+0x248>
    1a82:	16 c0       	rjmp	.+44     	; 0x1ab0 <xTaskIncrementTick+0x24a>
    1a84:	80 91 c6 10 	lds	r24, 0x10C6	; 0x8010c6 <xPendedTicks>
    1a88:	90 91 c7 10 	lds	r25, 0x10C7	; 0x8010c7 <xPendedTicks+0x1>
    1a8c:	a0 91 c8 10 	lds	r26, 0x10C8	; 0x8010c8 <xPendedTicks+0x2>
    1a90:	b0 91 c9 10 	lds	r27, 0x10C9	; 0x8010c9 <xPendedTicks+0x3>
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	a1 1d       	adc	r26, r1
    1a98:	b1 1d       	adc	r27, r1
    1a9a:	80 93 c6 10 	sts	0x10C6, r24	; 0x8010c6 <xPendedTicks>
    1a9e:	90 93 c7 10 	sts	0x10C7, r25	; 0x8010c7 <xPendedTicks+0x1>
    1aa2:	a0 93 c8 10 	sts	0x10C8, r26	; 0x8010c8 <xPendedTicks+0x2>
    1aa6:	b0 93 c9 10 	sts	0x10C9, r27	; 0x8010c9 <xPendedTicks+0x3>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <xTaskIncrementTick+0x24a>
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	08 95       	ret

00001abe <xTaskResumeAll>:
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	0f 92       	push	r0
    1ad0:	80 91 bc 10 	lds	r24, 0x10BC	; 0x8010bc <uxSchedulerSuspended>
    1ad4:	81 50       	subi	r24, 0x01	; 1
    1ad6:	80 93 bc 10 	sts	0x10BC, r24	; 0x8010bc <uxSchedulerSuspended>
    1ada:	80 91 bc 10 	lds	r24, 0x10BC	; 0x8010bc <uxSchedulerSuspended>
    1ade:	81 11       	cpse	r24, r1
    1ae0:	be c0       	rjmp	.+380    	; 0x1c5e <xTaskResumeAll+0x1a0>
    1ae2:	80 91 d0 10 	lds	r24, 0x10D0	; 0x8010d0 <uxCurrentNumberOfTasks>
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	88 c0       	rjmp	.+272    	; 0x1bfa <xTaskResumeAll+0x13c>
    1aea:	bc c0       	rjmp	.+376    	; 0x1c64 <xTaskResumeAll+0x1a6>
    1aec:	e0 91 ef 10 	lds	r30, 0x10EF	; 0x8010ef <xPendingReadyList+0x7>
    1af0:	f0 91 f0 10 	lds	r31, 0x10F0	; 0x8010f0 <xPendingReadyList+0x8>
    1af4:	00 84       	ldd	r0, Z+8	; 0x08
    1af6:	f1 85       	ldd	r31, Z+9	; 0x09
    1af8:	e0 2d       	mov	r30, r0
    1afa:	a0 8d       	ldd	r26, Z+24	; 0x18
    1afc:	b1 8d       	ldd	r27, Z+25	; 0x19
    1afe:	c2 89       	ldd	r28, Z+18	; 0x12
    1b00:	d3 89       	ldd	r29, Z+19	; 0x13
    1b02:	84 89       	ldd	r24, Z+20	; 0x14
    1b04:	95 89       	ldd	r25, Z+21	; 0x15
    1b06:	9f 83       	std	Y+7, r25	; 0x07
    1b08:	8e 83       	std	Y+6, r24	; 0x06
    1b0a:	c4 89       	ldd	r28, Z+20	; 0x14
    1b0c:	d5 89       	ldd	r29, Z+21	; 0x15
    1b0e:	82 89       	ldd	r24, Z+18	; 0x12
    1b10:	93 89       	ldd	r25, Z+19	; 0x13
    1b12:	9d 83       	std	Y+5, r25	; 0x05
    1b14:	8c 83       	std	Y+4, r24	; 0x04
    1b16:	11 96       	adiw	r26, 0x01	; 1
    1b18:	2d 91       	ld	r18, X+
    1b1a:	3c 91       	ld	r19, X
    1b1c:	12 97       	sbiw	r26, 0x02	; 2
    1b1e:	cf 01       	movw	r24, r30
    1b20:	0e 96       	adiw	r24, 0x0e	; 14
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	31 f4       	brne	.+12     	; 0x1b34 <xTaskResumeAll+0x76>
    1b28:	84 89       	ldd	r24, Z+20	; 0x14
    1b2a:	95 89       	ldd	r25, Z+21	; 0x15
    1b2c:	12 96       	adiw	r26, 0x02	; 2
    1b2e:	9c 93       	st	X, r25
    1b30:	8e 93       	st	-X, r24
    1b32:	11 97       	sbiw	r26, 0x01	; 1
    1b34:	11 8e       	std	Z+25, r1	; 0x19
    1b36:	10 8e       	std	Z+24, r1	; 0x18
    1b38:	8c 91       	ld	r24, X
    1b3a:	81 50       	subi	r24, 0x01	; 1
    1b3c:	8c 93       	st	X, r24
    1b3e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b40:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b42:	c6 81       	ldd	r28, Z+6	; 0x06
    1b44:	d7 81       	ldd	r29, Z+7	; 0x07
    1b46:	80 85       	ldd	r24, Z+8	; 0x08
    1b48:	91 85       	ldd	r25, Z+9	; 0x09
    1b4a:	9f 83       	std	Y+7, r25	; 0x07
    1b4c:	8e 83       	std	Y+6, r24	; 0x06
    1b4e:	c0 85       	ldd	r28, Z+8	; 0x08
    1b50:	d1 85       	ldd	r29, Z+9	; 0x09
    1b52:	86 81       	ldd	r24, Z+6	; 0x06
    1b54:	97 81       	ldd	r25, Z+7	; 0x07
    1b56:	9d 83       	std	Y+5, r25	; 0x05
    1b58:	8c 83       	std	Y+4, r24	; 0x04
    1b5a:	11 96       	adiw	r26, 0x01	; 1
    1b5c:	8d 91       	ld	r24, X+
    1b5e:	9c 91       	ld	r25, X
    1b60:	12 97       	sbiw	r26, 0x02	; 2
    1b62:	9f 01       	movw	r18, r30
    1b64:	2e 5f       	subi	r18, 0xFE	; 254
    1b66:	3f 4f       	sbci	r19, 0xFF	; 255
    1b68:	82 17       	cp	r24, r18
    1b6a:	93 07       	cpc	r25, r19
    1b6c:	31 f4       	brne	.+12     	; 0x1b7a <xTaskResumeAll+0xbc>
    1b6e:	80 85       	ldd	r24, Z+8	; 0x08
    1b70:	91 85       	ldd	r25, Z+9	; 0x09
    1b72:	12 96       	adiw	r26, 0x02	; 2
    1b74:	9c 93       	st	X, r25
    1b76:	8e 93       	st	-X, r24
    1b78:	11 97       	sbiw	r26, 0x01	; 1
    1b7a:	15 86       	std	Z+13, r1	; 0x0d
    1b7c:	14 86       	std	Z+12, r1	; 0x0c
    1b7e:	8c 91       	ld	r24, X
    1b80:	81 50       	subi	r24, 0x01	; 1
    1b82:	8c 93       	st	X, r24
    1b84:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b86:	80 91 cb 10 	lds	r24, 0x10CB	; 0x8010cb <uxTopReadyPriority>
    1b8a:	8a 17       	cp	r24, r26
    1b8c:	10 f4       	brcc	.+4      	; 0x1b92 <xTaskResumeAll+0xd4>
    1b8e:	a0 93 cb 10 	sts	0x10CB, r26	; 0x8010cb <uxTopReadyPriority>
    1b92:	8b e0       	ldi	r24, 0x0B	; 11
    1b94:	8a 9f       	mul	r24, r26
    1b96:	d0 01       	movw	r26, r0
    1b98:	11 24       	eor	r1, r1
    1b9a:	a3 5f       	subi	r26, 0xF3	; 243
    1b9c:	be 4e       	sbci	r27, 0xEE	; 238
    1b9e:	11 96       	adiw	r26, 0x01	; 1
    1ba0:	0d 90       	ld	r0, X+
    1ba2:	bc 91       	ld	r27, X
    1ba4:	a0 2d       	mov	r26, r0
    1ba6:	b7 83       	std	Z+7, r27	; 0x07
    1ba8:	a6 83       	std	Z+6, r26	; 0x06
    1baa:	16 96       	adiw	r26, 0x06	; 6
    1bac:	4d 91       	ld	r20, X+
    1bae:	5c 91       	ld	r21, X
    1bb0:	17 97       	sbiw	r26, 0x07	; 7
    1bb2:	51 87       	std	Z+9, r21	; 0x09
    1bb4:	40 87       	std	Z+8, r20	; 0x08
    1bb6:	16 96       	adiw	r26, 0x06	; 6
    1bb8:	cd 91       	ld	r28, X+
    1bba:	dc 91       	ld	r29, X
    1bbc:	17 97       	sbiw	r26, 0x07	; 7
    1bbe:	3d 83       	std	Y+5, r19	; 0x05
    1bc0:	2c 83       	std	Y+4, r18	; 0x04
    1bc2:	17 96       	adiw	r26, 0x07	; 7
    1bc4:	3c 93       	st	X, r19
    1bc6:	2e 93       	st	-X, r18
    1bc8:	16 97       	sbiw	r26, 0x06	; 6
    1bca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bcc:	8a 9f       	mul	r24, r26
    1bce:	d0 01       	movw	r26, r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	a3 5f       	subi	r26, 0xF3	; 243
    1bd4:	be 4e       	sbci	r27, 0xEE	; 238
    1bd6:	b5 87       	std	Z+13, r27	; 0x0d
    1bd8:	a4 87       	std	Z+12, r26	; 0x0c
    1bda:	8c 91       	ld	r24, X
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	8c 93       	st	X, r24
    1be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1be2:	a0 91 7b 11 	lds	r26, 0x117B	; 0x80117b <pxCurrentTCB>
    1be6:	b0 91 7c 11 	lds	r27, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1bea:	5a 96       	adiw	r26, 0x1a	; 26
    1bec:	8c 91       	ld	r24, X
    1bee:	98 17       	cp	r25, r24
    1bf0:	30 f0       	brcs	.+12     	; 0x1bfe <xTaskResumeAll+0x140>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 93 c5 10 	sts	0x10C5, r24	; 0x8010c5 <xYieldPending>
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <xTaskResumeAll+0x140>
    1bfa:	e0 e0       	ldi	r30, 0x00	; 0
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <xPendingReadyList>
    1c02:	81 11       	cpse	r24, r1
    1c04:	73 cf       	rjmp	.-282    	; 0x1aec <xTaskResumeAll+0x2e>
    1c06:	ef 2b       	or	r30, r31
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <xTaskResumeAll+0x14e>
    1c0a:	83 db       	rcall	.-2298   	; 0x1312 <prvResetNextTaskUnblockTime>
    1c0c:	c0 90 c6 10 	lds	r12, 0x10C6	; 0x8010c6 <xPendedTicks>
    1c10:	d0 90 c7 10 	lds	r13, 0x10C7	; 0x8010c7 <xPendedTicks+0x1>
    1c14:	e0 90 c8 10 	lds	r14, 0x10C8	; 0x8010c8 <xPendedTicks+0x2>
    1c18:	f0 90 c9 10 	lds	r15, 0x10C9	; 0x8010c9 <xPendedTicks+0x3>
    1c1c:	c1 14       	cp	r12, r1
    1c1e:	d1 04       	cpc	r13, r1
    1c20:	e1 04       	cpc	r14, r1
    1c22:	f1 04       	cpc	r15, r1
    1c24:	a1 f0       	breq	.+40     	; 0x1c4e <xTaskResumeAll+0x190>
    1c26:	1f de       	rcall	.-962    	; 0x1866 <xTaskIncrementTick>
    1c28:	88 23       	and	r24, r24
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <xTaskResumeAll+0x174>
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	80 93 c5 10 	sts	0x10C5, r24	; 0x8010c5 <xYieldPending>
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	c8 1a       	sub	r12, r24
    1c36:	d1 08       	sbc	r13, r1
    1c38:	e1 08       	sbc	r14, r1
    1c3a:	f1 08       	sbc	r15, r1
    1c3c:	a1 f7       	brne	.-24     	; 0x1c26 <xTaskResumeAll+0x168>
    1c3e:	10 92 c6 10 	sts	0x10C6, r1	; 0x8010c6 <xPendedTicks>
    1c42:	10 92 c7 10 	sts	0x10C7, r1	; 0x8010c7 <xPendedTicks+0x1>
    1c46:	10 92 c8 10 	sts	0x10C8, r1	; 0x8010c8 <xPendedTicks+0x2>
    1c4a:	10 92 c9 10 	sts	0x10C9, r1	; 0x8010c9 <xPendedTicks+0x3>
    1c4e:	80 91 c5 10 	lds	r24, 0x10C5	; 0x8010c5 <xYieldPending>
    1c52:	88 23       	and	r24, r24
    1c54:	31 f0       	breq	.+12     	; 0x1c62 <xTaskResumeAll+0x1a4>
    1c56:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	03 c0       	rjmp	.+6      	; 0x1c64 <xTaskResumeAll+0x1a6>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <xTaskResumeAll+0x1a6>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	df 90       	pop	r13
    1c72:	cf 90       	pop	r12
    1c74:	08 95       	ret

00001c76 <xTaskDelayUntil>:
    1c76:	8f 92       	push	r8
    1c78:	9f 92       	push	r9
    1c7a:	af 92       	push	r10
    1c7c:	bf 92       	push	r11
    1c7e:	cf 92       	push	r12
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	ec 01       	movw	r28, r24
    1c8e:	6a 01       	movw	r12, r20
    1c90:	7b 01       	movw	r14, r22
    1c92:	d5 dd       	rcall	.-1110   	; 0x183e <vTaskSuspendAll>
    1c94:	80 90 cc 10 	lds	r8, 0x10CC	; 0x8010cc <xTickCount>
    1c98:	90 90 cd 10 	lds	r9, 0x10CD	; 0x8010cd <xTickCount+0x1>
    1c9c:	a0 90 ce 10 	lds	r10, 0x10CE	; 0x8010ce <xTickCount+0x2>
    1ca0:	b0 90 cf 10 	lds	r11, 0x10CF	; 0x8010cf <xTickCount+0x3>
    1ca4:	88 81       	ld	r24, Y
    1ca6:	99 81       	ldd	r25, Y+1	; 0x01
    1ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    1caa:	bb 81       	ldd	r27, Y+3	; 0x03
    1cac:	ac 01       	movw	r20, r24
    1cae:	bd 01       	movw	r22, r26
    1cb0:	4c 0d       	add	r20, r12
    1cb2:	5d 1d       	adc	r21, r13
    1cb4:	6e 1d       	adc	r22, r14
    1cb6:	7f 1d       	adc	r23, r15
    1cb8:	88 16       	cp	r8, r24
    1cba:	99 06       	cpc	r9, r25
    1cbc:	aa 06       	cpc	r10, r26
    1cbe:	bb 06       	cpc	r11, r27
    1cc0:	60 f4       	brcc	.+24     	; 0x1cda <xTaskDelayUntil+0x64>
    1cc2:	48 17       	cp	r20, r24
    1cc4:	59 07       	cpc	r21, r25
    1cc6:	6a 07       	cpc	r22, r26
    1cc8:	7b 07       	cpc	r23, r27
    1cca:	98 f4       	brcc	.+38     	; 0x1cf2 <xTaskDelayUntil+0x7c>
    1ccc:	84 16       	cp	r8, r20
    1cce:	95 06       	cpc	r9, r21
    1cd0:	a6 06       	cpc	r10, r22
    1cd2:	b7 06       	cpc	r11, r23
    1cd4:	80 f0       	brcs	.+32     	; 0x1cf6 <xTaskDelayUntil+0x80>
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	13 c0       	rjmp	.+38     	; 0x1d00 <xTaskDelayUntil+0x8a>
    1cda:	48 17       	cp	r20, r24
    1cdc:	59 07       	cpc	r21, r25
    1cde:	6a 07       	cpc	r22, r26
    1ce0:	7b 07       	cpc	r23, r27
    1ce2:	58 f0       	brcs	.+22     	; 0x1cfa <xTaskDelayUntil+0x84>
    1ce4:	84 16       	cp	r8, r20
    1ce6:	95 06       	cpc	r9, r21
    1ce8:	a6 06       	cpc	r10, r22
    1cea:	b7 06       	cpc	r11, r23
    1cec:	40 f0       	brcs	.+16     	; 0x1cfe <xTaskDelayUntil+0x88>
    1cee:	10 e0       	ldi	r17, 0x00	; 0
    1cf0:	07 c0       	rjmp	.+14     	; 0x1d00 <xTaskDelayUntil+0x8a>
    1cf2:	10 e0       	ldi	r17, 0x00	; 0
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <xTaskDelayUntil+0x8a>
    1cf6:	11 e0       	ldi	r17, 0x01	; 1
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <xTaskDelayUntil+0x8a>
    1cfa:	11 e0       	ldi	r17, 0x01	; 1
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <xTaskDelayUntil+0x8a>
    1cfe:	11 e0       	ldi	r17, 0x01	; 1
    1d00:	48 83       	st	Y, r20
    1d02:	59 83       	std	Y+1, r21	; 0x01
    1d04:	6a 83       	std	Y+2, r22	; 0x02
    1d06:	7b 83       	std	Y+3, r23	; 0x03
    1d08:	11 23       	and	r17, r17
    1d0a:	41 f0       	breq	.+16     	; 0x1d1c <xTaskDelayUntil+0xa6>
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	ba 01       	movw	r22, r20
    1d10:	68 19       	sub	r22, r8
    1d12:	79 09       	sbc	r23, r9
    1d14:	8a 09       	sbc	r24, r10
    1d16:	9b 09       	sbc	r25, r11
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	6b dc       	rcall	.-1834   	; 0x15f2 <prvAddCurrentTaskToDelayedList>
    1d1c:	d0 de       	rcall	.-608    	; 0x1abe <xTaskResumeAll>
    1d1e:	81 11       	cpse	r24, r1
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <xTaskDelayUntil+0xb0>
    1d22:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    1d26:	81 2f       	mov	r24, r17
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	df 90       	pop	r13
    1d34:	cf 90       	pop	r12
    1d36:	bf 90       	pop	r11
    1d38:	af 90       	pop	r10
    1d3a:	9f 90       	pop	r9
    1d3c:	8f 90       	pop	r8
    1d3e:	08 95       	ret

00001d40 <vTaskDelay>:
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	6b 01       	movw	r12, r22
    1d4a:	7c 01       	movw	r14, r24
    1d4c:	67 2b       	or	r22, r23
    1d4e:	68 2b       	or	r22, r24
    1d50:	69 2b       	or	r22, r25
    1d52:	39 f0       	breq	.+14     	; 0x1d62 <vTaskDelay+0x22>
    1d54:	74 dd       	rcall	.-1304   	; 0x183e <vTaskSuspendAll>
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	c7 01       	movw	r24, r14
    1d5a:	b6 01       	movw	r22, r12
    1d5c:	4a dc       	rcall	.-1900   	; 0x15f2 <prvAddCurrentTaskToDelayedList>
    1d5e:	af de       	rcall	.-674    	; 0x1abe <xTaskResumeAll>
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <vTaskDelay+0x24>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	81 11       	cpse	r24, r1
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <vTaskDelay+0x2c>
    1d68:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    1d6c:	ff 90       	pop	r15
    1d6e:	ef 90       	pop	r14
    1d70:	df 90       	pop	r13
    1d72:	cf 90       	pop	r12
    1d74:	08 95       	ret

00001d76 <vTaskSwitchContext>:
    1d76:	80 91 bc 10 	lds	r24, 0x10BC	; 0x8010bc <uxSchedulerSuspended>
    1d7a:	88 23       	and	r24, r24
    1d7c:	21 f0       	breq	.+8      	; 0x1d86 <vTaskSwitchContext+0x10>
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 c5 10 	sts	0x10C5, r24	; 0x8010c5 <xYieldPending>
    1d84:	08 95       	ret
    1d86:	10 92 c5 10 	sts	0x10C5, r1	; 0x8010c5 <xYieldPending>
    1d8a:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    1d8e:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1d92:	20 81       	ld	r18, Z
    1d94:	31 81       	ldd	r19, Z+1	; 0x01
    1d96:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    1d9a:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1d9e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1da0:	94 8d       	ldd	r25, Z+28	; 0x1c
    1da2:	82 17       	cp	r24, r18
    1da4:	93 07       	cpc	r25, r19
    1da6:	60 f0       	brcs	.+24     	; 0x1dc0 <vTaskSwitchContext+0x4a>
    1da8:	60 91 7b 11 	lds	r22, 0x117B	; 0x80117b <pxCurrentTCB>
    1dac:	70 91 7c 11 	lds	r23, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1db0:	63 5e       	subi	r22, 0xE3	; 227
    1db2:	7f 4f       	sbci	r23, 0xFF	; 255
    1db4:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxCurrentTCB>
    1db8:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1dbc:	0e 94 19 17 	call	0x2e32	; 0x2e32 <vApplicationStackOverflowHook>
    1dc0:	80 91 cb 10 	lds	r24, 0x10CB	; 0x8010cb <uxTopReadyPriority>
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <vTaskSwitchContext+0x52>
    1dc6:	81 50       	subi	r24, 0x01	; 1
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	9b e0       	ldi	r25, 0x0B	; 11
    1dce:	92 9f       	mul	r25, r18
    1dd0:	f0 01       	movw	r30, r0
    1dd2:	93 9f       	mul	r25, r19
    1dd4:	f0 0d       	add	r31, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	e3 5f       	subi	r30, 0xF3	; 243
    1dda:	fe 4e       	sbci	r31, 0xEE	; 238
    1ddc:	90 81       	ld	r25, Z
    1dde:	99 23       	and	r25, r25
    1de0:	91 f3       	breq	.-28     	; 0x1dc6 <vTaskSwitchContext+0x50>
    1de2:	9b e0       	ldi	r25, 0x0B	; 11
    1de4:	92 9f       	mul	r25, r18
    1de6:	a0 01       	movw	r20, r0
    1de8:	93 9f       	mul	r25, r19
    1dea:	50 0d       	add	r21, r0
    1dec:	11 24       	eor	r1, r1
    1dee:	df 01       	movw	r26, r30
    1df0:	01 80       	ldd	r0, Z+1	; 0x01
    1df2:	f2 81       	ldd	r31, Z+2	; 0x02
    1df4:	e0 2d       	mov	r30, r0
    1df6:	04 80       	ldd	r0, Z+4	; 0x04
    1df8:	f5 81       	ldd	r31, Z+5	; 0x05
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	12 96       	adiw	r26, 0x02	; 2
    1dfe:	fc 93       	st	X, r31
    1e00:	ee 93       	st	-X, r30
    1e02:	11 97       	sbiw	r26, 0x01	; 1
    1e04:	40 5f       	subi	r20, 0xF0	; 240
    1e06:	5e 4e       	sbci	r21, 0xEE	; 238
    1e08:	e4 17       	cp	r30, r20
    1e0a:	f5 07       	cpc	r31, r21
    1e0c:	29 f4       	brne	.+10     	; 0x1e18 <vTaskSwitchContext+0xa2>
    1e0e:	44 81       	ldd	r20, Z+4	; 0x04
    1e10:	55 81       	ldd	r21, Z+5	; 0x05
    1e12:	fd 01       	movw	r30, r26
    1e14:	52 83       	std	Z+2, r21	; 0x02
    1e16:	41 83       	std	Z+1, r20	; 0x01
    1e18:	9b e0       	ldi	r25, 0x0B	; 11
    1e1a:	92 9f       	mul	r25, r18
    1e1c:	f0 01       	movw	r30, r0
    1e1e:	93 9f       	mul	r25, r19
    1e20:	f0 0d       	add	r31, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	e3 5f       	subi	r30, 0xF3	; 243
    1e26:	fe 4e       	sbci	r31, 0xEE	; 238
    1e28:	01 80       	ldd	r0, Z+1	; 0x01
    1e2a:	f2 81       	ldd	r31, Z+2	; 0x02
    1e2c:	e0 2d       	mov	r30, r0
    1e2e:	20 85       	ldd	r18, Z+8	; 0x08
    1e30:	31 85       	ldd	r19, Z+9	; 0x09
    1e32:	30 93 7c 11 	sts	0x117C, r19	; 0x80117c <pxCurrentTCB+0x1>
    1e36:	20 93 7b 11 	sts	0x117B, r18	; 0x80117b <pxCurrentTCB>
    1e3a:	80 93 cb 10 	sts	0x10CB, r24	; 0x8010cb <uxTopReadyPriority>
    1e3e:	08 95       	ret

00001e40 <vTaskPlaceOnEventList>:
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	6a 01       	movw	r12, r20
    1e4a:	7b 01       	movw	r14, r22
    1e4c:	60 91 7b 11 	lds	r22, 0x117B	; 0x80117b <pxCurrentTCB>
    1e50:	70 91 7c 11 	lds	r23, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1e54:	62 5f       	subi	r22, 0xF2	; 242
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255
    1e58:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	c7 01       	movw	r24, r14
    1e60:	b6 01       	movw	r22, r12
    1e62:	c7 db       	rcall	.-2162   	; 0x15f2 <prvAddCurrentTaskToDelayedList>
    1e64:	ff 90       	pop	r15
    1e66:	ef 90       	pop	r14
    1e68:	df 90       	pop	r13
    1e6a:	cf 90       	pop	r12
    1e6c:	08 95       	ret

00001e6e <vTaskPlaceOnEventListRestricted>:
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	fc 01       	movw	r30, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	ba 01       	movw	r22, r20
    1e78:	a1 81       	ldd	r26, Z+1	; 0x01
    1e7a:	b2 81       	ldd	r27, Z+2	; 0x02
    1e7c:	c0 91 7b 11 	lds	r28, 0x117B	; 0x80117b <pxCurrentTCB>
    1e80:	d0 91 7c 11 	lds	r29, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1e84:	bb 8b       	std	Y+19, r27	; 0x13
    1e86:	aa 8b       	std	Y+18, r26	; 0x12
    1e88:	c0 91 7b 11 	lds	r28, 0x117B	; 0x80117b <pxCurrentTCB>
    1e8c:	d0 91 7c 11 	lds	r29, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1e90:	16 96       	adiw	r26, 0x06	; 6
    1e92:	4d 91       	ld	r20, X+
    1e94:	5c 91       	ld	r21, X
    1e96:	17 97       	sbiw	r26, 0x07	; 7
    1e98:	5d 8b       	std	Y+21, r21	; 0x15
    1e9a:	4c 8b       	std	Y+20, r20	; 0x14
    1e9c:	16 96       	adiw	r26, 0x06	; 6
    1e9e:	cd 91       	ld	r28, X+
    1ea0:	dc 91       	ld	r29, X
    1ea2:	17 97       	sbiw	r26, 0x07	; 7
    1ea4:	40 91 7b 11 	lds	r20, 0x117B	; 0x80117b <pxCurrentTCB>
    1ea8:	50 91 7c 11 	lds	r21, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1eac:	42 5f       	subi	r20, 0xF2	; 242
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	5d 83       	std	Y+5, r21	; 0x05
    1eb2:	4c 83       	std	Y+4, r20	; 0x04
    1eb4:	40 91 7b 11 	lds	r20, 0x117B	; 0x80117b <pxCurrentTCB>
    1eb8:	50 91 7c 11 	lds	r21, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1ebc:	42 5f       	subi	r20, 0xF2	; 242
    1ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec0:	17 96       	adiw	r26, 0x07	; 7
    1ec2:	5c 93       	st	X, r21
    1ec4:	4e 93       	st	-X, r20
    1ec6:	16 97       	sbiw	r26, 0x06	; 6
    1ec8:	a0 91 7b 11 	lds	r26, 0x117B	; 0x80117b <pxCurrentTCB>
    1ecc:	b0 91 7c 11 	lds	r27, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    1ed0:	59 96       	adiw	r26, 0x19	; 25
    1ed2:	fc 93       	st	X, r31
    1ed4:	ee 93       	st	-X, r30
    1ed6:	58 97       	sbiw	r26, 0x18	; 24
    1ed8:	30 81       	ld	r19, Z
    1eda:	3f 5f       	subi	r19, 0xFF	; 255
    1edc:	30 83       	st	Z, r19
    1ede:	22 23       	and	r18, r18
    1ee0:	19 f0       	breq	.+6      	; 0x1ee8 <vTaskPlaceOnEventListRestricted+0x7a>
    1ee2:	6f ef       	ldi	r22, 0xFF	; 255
    1ee4:	7f ef       	ldi	r23, 0xFF	; 255
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	42 2f       	mov	r20, r18
    1eea:	83 db       	rcall	.-2298   	; 0x15f2 <prvAddCurrentTaskToDelayedList>
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	08 95       	ret

00001ef2 <xTaskRemoveFromEventList>:
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	17 96       	adiw	r26, 0x07	; 7
    1efa:	ed 91       	ld	r30, X+
    1efc:	fc 91       	ld	r31, X
    1efe:	18 97       	sbiw	r26, 0x08	; 8
    1f00:	00 84       	ldd	r0, Z+8	; 0x08
    1f02:	f1 85       	ldd	r31, Z+9	; 0x09
    1f04:	e0 2d       	mov	r30, r0
    1f06:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f08:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f0a:	c2 89       	ldd	r28, Z+18	; 0x12
    1f0c:	d3 89       	ldd	r29, Z+19	; 0x13
    1f0e:	84 89       	ldd	r24, Z+20	; 0x14
    1f10:	95 89       	ldd	r25, Z+21	; 0x15
    1f12:	9f 83       	std	Y+7, r25	; 0x07
    1f14:	8e 83       	std	Y+6, r24	; 0x06
    1f16:	c4 89       	ldd	r28, Z+20	; 0x14
    1f18:	d5 89       	ldd	r29, Z+21	; 0x15
    1f1a:	82 89       	ldd	r24, Z+18	; 0x12
    1f1c:	93 89       	ldd	r25, Z+19	; 0x13
    1f1e:	9d 83       	std	Y+5, r25	; 0x05
    1f20:	8c 83       	std	Y+4, r24	; 0x04
    1f22:	11 96       	adiw	r26, 0x01	; 1
    1f24:	8d 91       	ld	r24, X+
    1f26:	9c 91       	ld	r25, X
    1f28:	12 97       	sbiw	r26, 0x02	; 2
    1f2a:	9f 01       	movw	r18, r30
    1f2c:	22 5f       	subi	r18, 0xF2	; 242
    1f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f30:	82 17       	cp	r24, r18
    1f32:	93 07       	cpc	r25, r19
    1f34:	31 f4       	brne	.+12     	; 0x1f42 <xTaskRemoveFromEventList+0x50>
    1f36:	84 89       	ldd	r24, Z+20	; 0x14
    1f38:	95 89       	ldd	r25, Z+21	; 0x15
    1f3a:	12 96       	adiw	r26, 0x02	; 2
    1f3c:	9c 93       	st	X, r25
    1f3e:	8e 93       	st	-X, r24
    1f40:	11 97       	sbiw	r26, 0x01	; 1
    1f42:	11 8e       	std	Z+25, r1	; 0x19
    1f44:	10 8e       	std	Z+24, r1	; 0x18
    1f46:	8c 91       	ld	r24, X
    1f48:	81 50       	subi	r24, 0x01	; 1
    1f4a:	8c 93       	st	X, r24
    1f4c:	80 91 bc 10 	lds	r24, 0x10BC	; 0x8010bc <uxSchedulerSuspended>
    1f50:	81 11       	cpse	r24, r1
    1f52:	52 c0       	rjmp	.+164    	; 0x1ff8 <xTaskRemoveFromEventList+0x106>
    1f54:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f56:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f58:	c6 81       	ldd	r28, Z+6	; 0x06
    1f5a:	d7 81       	ldd	r29, Z+7	; 0x07
    1f5c:	80 85       	ldd	r24, Z+8	; 0x08
    1f5e:	91 85       	ldd	r25, Z+9	; 0x09
    1f60:	9f 83       	std	Y+7, r25	; 0x07
    1f62:	8e 83       	std	Y+6, r24	; 0x06
    1f64:	c0 85       	ldd	r28, Z+8	; 0x08
    1f66:	d1 85       	ldd	r29, Z+9	; 0x09
    1f68:	86 81       	ldd	r24, Z+6	; 0x06
    1f6a:	97 81       	ldd	r25, Z+7	; 0x07
    1f6c:	9d 83       	std	Y+5, r25	; 0x05
    1f6e:	8c 83       	std	Y+4, r24	; 0x04
    1f70:	11 96       	adiw	r26, 0x01	; 1
    1f72:	8d 91       	ld	r24, X+
    1f74:	9c 91       	ld	r25, X
    1f76:	12 97       	sbiw	r26, 0x02	; 2
    1f78:	9f 01       	movw	r18, r30
    1f7a:	2e 5f       	subi	r18, 0xFE	; 254
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	82 17       	cp	r24, r18
    1f80:	93 07       	cpc	r25, r19
    1f82:	31 f4       	brne	.+12     	; 0x1f90 <xTaskRemoveFromEventList+0x9e>
    1f84:	80 85       	ldd	r24, Z+8	; 0x08
    1f86:	91 85       	ldd	r25, Z+9	; 0x09
    1f88:	12 96       	adiw	r26, 0x02	; 2
    1f8a:	9c 93       	st	X, r25
    1f8c:	8e 93       	st	-X, r24
    1f8e:	11 97       	sbiw	r26, 0x01	; 1
    1f90:	15 86       	std	Z+13, r1	; 0x0d
    1f92:	14 86       	std	Z+12, r1	; 0x0c
    1f94:	8c 91       	ld	r24, X
    1f96:	81 50       	subi	r24, 0x01	; 1
    1f98:	8c 93       	st	X, r24
    1f9a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f9c:	80 91 cb 10 	lds	r24, 0x10CB	; 0x8010cb <uxTopReadyPriority>
    1fa0:	8a 17       	cp	r24, r26
    1fa2:	10 f4       	brcc	.+4      	; 0x1fa8 <xTaskRemoveFromEventList+0xb6>
    1fa4:	a0 93 cb 10 	sts	0x10CB, r26	; 0x8010cb <uxTopReadyPriority>
    1fa8:	8b e0       	ldi	r24, 0x0B	; 11
    1faa:	8a 9f       	mul	r24, r26
    1fac:	d0 01       	movw	r26, r0
    1fae:	11 24       	eor	r1, r1
    1fb0:	a3 5f       	subi	r26, 0xF3	; 243
    1fb2:	be 4e       	sbci	r27, 0xEE	; 238
    1fb4:	11 96       	adiw	r26, 0x01	; 1
    1fb6:	0d 90       	ld	r0, X+
    1fb8:	bc 91       	ld	r27, X
    1fba:	a0 2d       	mov	r26, r0
    1fbc:	b7 83       	std	Z+7, r27	; 0x07
    1fbe:	a6 83       	std	Z+6, r26	; 0x06
    1fc0:	16 96       	adiw	r26, 0x06	; 6
    1fc2:	4d 91       	ld	r20, X+
    1fc4:	5c 91       	ld	r21, X
    1fc6:	17 97       	sbiw	r26, 0x07	; 7
    1fc8:	51 87       	std	Z+9, r21	; 0x09
    1fca:	40 87       	std	Z+8, r20	; 0x08
    1fcc:	16 96       	adiw	r26, 0x06	; 6
    1fce:	cd 91       	ld	r28, X+
    1fd0:	dc 91       	ld	r29, X
    1fd2:	17 97       	sbiw	r26, 0x07	; 7
    1fd4:	3d 83       	std	Y+5, r19	; 0x05
    1fd6:	2c 83       	std	Y+4, r18	; 0x04
    1fd8:	17 96       	adiw	r26, 0x07	; 7
    1fda:	3c 93       	st	X, r19
    1fdc:	2e 93       	st	-X, r18
    1fde:	16 97       	sbiw	r26, 0x06	; 6
    1fe0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fe2:	8a 9f       	mul	r24, r26
    1fe4:	d0 01       	movw	r26, r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	a3 5f       	subi	r26, 0xF3	; 243
    1fea:	be 4e       	sbci	r27, 0xEE	; 238
    1fec:	b5 87       	std	Z+13, r27	; 0x0d
    1fee:	a4 87       	std	Z+12, r26	; 0x0c
    1ff0:	8c 91       	ld	r24, X
    1ff2:	8f 5f       	subi	r24, 0xFF	; 255
    1ff4:	8c 93       	st	X, r24
    1ff6:	1c c0       	rjmp	.+56     	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    1ff8:	48 ee       	ldi	r20, 0xE8	; 232
    1ffa:	50 e1       	ldi	r21, 0x10	; 16
    1ffc:	da 01       	movw	r26, r20
    1ffe:	11 96       	adiw	r26, 0x01	; 1
    2000:	cd 91       	ld	r28, X+
    2002:	dc 91       	ld	r29, X
    2004:	12 97       	sbiw	r26, 0x02	; 2
    2006:	d3 8b       	std	Z+19, r29	; 0x13
    2008:	c2 8b       	std	Z+18, r28	; 0x12
    200a:	8e 81       	ldd	r24, Y+6	; 0x06
    200c:	9f 81       	ldd	r25, Y+7	; 0x07
    200e:	95 8b       	std	Z+21, r25	; 0x15
    2010:	84 8b       	std	Z+20, r24	; 0x14
    2012:	8e 81       	ldd	r24, Y+6	; 0x06
    2014:	9f 81       	ldd	r25, Y+7	; 0x07
    2016:	dc 01       	movw	r26, r24
    2018:	15 96       	adiw	r26, 0x05	; 5
    201a:	3c 93       	st	X, r19
    201c:	2e 93       	st	-X, r18
    201e:	14 97       	sbiw	r26, 0x04	; 4
    2020:	3f 83       	std	Y+7, r19	; 0x07
    2022:	2e 83       	std	Y+6, r18	; 0x06
    2024:	51 8f       	std	Z+25, r21	; 0x19
    2026:	40 8f       	std	Z+24, r20	; 0x18
    2028:	da 01       	movw	r26, r20
    202a:	8c 91       	ld	r24, X
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	8c 93       	st	X, r24
    2030:	92 8d       	ldd	r25, Z+26	; 0x1a
    2032:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    2036:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    203a:	82 8d       	ldd	r24, Z+26	; 0x1a
    203c:	89 17       	cp	r24, r25
    203e:	20 f4       	brcc	.+8      	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	80 93 c5 10 	sts	0x10C5, r24	; 0x8010c5 <xYieldPending>
    2046:	01 c0       	rjmp	.+2      	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	08 95       	ret

00002050 <vTaskSetTimeOutState>:
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	0f 92       	push	r0
    2056:	20 91 c4 10 	lds	r18, 0x10C4	; 0x8010c4 <xNumOfOverflows>
    205a:	fc 01       	movw	r30, r24
    205c:	20 83       	st	Z, r18
    205e:	40 91 cc 10 	lds	r20, 0x10CC	; 0x8010cc <xTickCount>
    2062:	50 91 cd 10 	lds	r21, 0x10CD	; 0x8010cd <xTickCount+0x1>
    2066:	60 91 ce 10 	lds	r22, 0x10CE	; 0x8010ce <xTickCount+0x2>
    206a:	70 91 cf 10 	lds	r23, 0x10CF	; 0x8010cf <xTickCount+0x3>
    206e:	41 83       	std	Z+1, r20	; 0x01
    2070:	52 83       	std	Z+2, r21	; 0x02
    2072:	63 83       	std	Z+3, r22	; 0x03
    2074:	74 83       	std	Z+4, r23	; 0x04
    2076:	0f 90       	pop	r0
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	08 95       	ret

0000207c <vTaskInternalSetTimeOutState>:
    207c:	20 91 c4 10 	lds	r18, 0x10C4	; 0x8010c4 <xNumOfOverflows>
    2080:	fc 01       	movw	r30, r24
    2082:	20 83       	st	Z, r18
    2084:	40 91 cc 10 	lds	r20, 0x10CC	; 0x8010cc <xTickCount>
    2088:	50 91 cd 10 	lds	r21, 0x10CD	; 0x8010cd <xTickCount+0x1>
    208c:	60 91 ce 10 	lds	r22, 0x10CE	; 0x8010ce <xTickCount+0x2>
    2090:	70 91 cf 10 	lds	r23, 0x10CF	; 0x8010cf <xTickCount+0x3>
    2094:	41 83       	std	Z+1, r20	; 0x01
    2096:	52 83       	std	Z+2, r21	; 0x02
    2098:	63 83       	std	Z+3, r22	; 0x03
    209a:	74 83       	std	Z+4, r23	; 0x04
    209c:	08 95       	ret

0000209e <xTaskCheckForTimeOut>:
    209e:	8f 92       	push	r8
    20a0:	9f 92       	push	r9
    20a2:	af 92       	push	r10
    20a4:	bf 92       	push	r11
    20a6:	cf 92       	push	r12
    20a8:	df 92       	push	r13
    20aa:	ef 92       	push	r14
    20ac:	ff 92       	push	r15
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	fb 01       	movw	r30, r22
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	0f 92       	push	r0
    20be:	c0 90 cc 10 	lds	r12, 0x10CC	; 0x8010cc <xTickCount>
    20c2:	d0 90 cd 10 	lds	r13, 0x10CD	; 0x8010cd <xTickCount+0x1>
    20c6:	e0 90 ce 10 	lds	r14, 0x10CE	; 0x8010ce <xTickCount+0x2>
    20ca:	f0 90 cf 10 	lds	r15, 0x10CF	; 0x8010cf <xTickCount+0x3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	11 96       	adiw	r26, 0x01	; 1
    20d2:	0d 91       	ld	r16, X+
    20d4:	1d 91       	ld	r17, X+
    20d6:	2d 91       	ld	r18, X+
    20d8:	3c 91       	ld	r19, X
    20da:	14 97       	sbiw	r26, 0x04	; 4
    20dc:	46 01       	movw	r8, r12
    20de:	57 01       	movw	r10, r14
    20e0:	80 1a       	sub	r8, r16
    20e2:	91 0a       	sbc	r9, r17
    20e4:	a2 0a       	sbc	r10, r18
    20e6:	b3 0a       	sbc	r11, r19
    20e8:	40 81       	ld	r20, Z
    20ea:	51 81       	ldd	r21, Z+1	; 0x01
    20ec:	62 81       	ldd	r22, Z+2	; 0x02
    20ee:	73 81       	ldd	r23, Z+3	; 0x03
    20f0:	4f 3f       	cpi	r20, 0xFF	; 255
    20f2:	bf ef       	ldi	r27, 0xFF	; 255
    20f4:	5b 07       	cpc	r21, r27
    20f6:	6b 07       	cpc	r22, r27
    20f8:	7b 07       	cpc	r23, r27
    20fa:	39 f1       	breq	.+78     	; 0x214a <xTaskCheckForTimeOut+0xac>
    20fc:	ec 01       	movw	r28, r24
    20fe:	b8 81       	ld	r27, Y
    2100:	a0 91 c4 10 	lds	r26, 0x10C4	; 0x8010c4 <xNumOfOverflows>
    2104:	ba 17       	cp	r27, r26
    2106:	59 f0       	breq	.+22     	; 0x211e <xTaskCheckForTimeOut+0x80>
    2108:	c0 16       	cp	r12, r16
    210a:	d1 06       	cpc	r13, r17
    210c:	e2 06       	cpc	r14, r18
    210e:	f3 06       	cpc	r15, r19
    2110:	30 f0       	brcs	.+12     	; 0x211e <xTaskCheckForTimeOut+0x80>
    2112:	10 82       	st	Z, r1
    2114:	11 82       	std	Z+1, r1	; 0x01
    2116:	12 82       	std	Z+2, r1	; 0x02
    2118:	13 82       	std	Z+3, r1	; 0x03
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	17 c0       	rjmp	.+46     	; 0x214c <xTaskCheckForTimeOut+0xae>
    211e:	84 16       	cp	r8, r20
    2120:	95 06       	cpc	r9, r21
    2122:	a6 06       	cpc	r10, r22
    2124:	b7 06       	cpc	r11, r23
    2126:	58 f4       	brcc	.+22     	; 0x213e <xTaskCheckForTimeOut+0xa0>
    2128:	48 19       	sub	r20, r8
    212a:	59 09       	sbc	r21, r9
    212c:	6a 09       	sbc	r22, r10
    212e:	7b 09       	sbc	r23, r11
    2130:	40 83       	st	Z, r20
    2132:	51 83       	std	Z+1, r21	; 0x01
    2134:	62 83       	std	Z+2, r22	; 0x02
    2136:	73 83       	std	Z+3, r23	; 0x03
    2138:	a1 df       	rcall	.-190    	; 0x207c <vTaskInternalSetTimeOutState>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	07 c0       	rjmp	.+14     	; 0x214c <xTaskCheckForTimeOut+0xae>
    213e:	10 82       	st	Z, r1
    2140:	11 82       	std	Z+1, r1	; 0x01
    2142:	12 82       	std	Z+2, r1	; 0x02
    2144:	13 82       	std	Z+3, r1	; 0x03
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	01 c0       	rjmp	.+2      	; 0x214c <xTaskCheckForTimeOut+0xae>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	0f 90       	pop	r0
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	df 90       	pop	r13
    215e:	cf 90       	pop	r12
    2160:	bf 90       	pop	r11
    2162:	af 90       	pop	r10
    2164:	9f 90       	pop	r9
    2166:	8f 90       	pop	r8
    2168:	08 95       	ret

0000216a <vTaskMissedYield>:
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	80 93 c5 10 	sts	0x10C5, r24	; 0x8010c5 <xYieldPending>
    2170:	08 95       	ret

00002172 <xTaskGetCurrentTaskHandle>:
    2172:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxCurrentTCB>
    2176:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    217a:	08 95       	ret

0000217c <xTaskGetSchedulerState>:
    217c:	80 91 ca 10 	lds	r24, 0x10CA	; 0x8010ca <xSchedulerRunning>
    2180:	88 23       	and	r24, r24
    2182:	31 f0       	breq	.+12     	; 0x2190 <xTaskGetSchedulerState+0x14>
    2184:	80 91 bc 10 	lds	r24, 0x10BC	; 0x8010bc <uxSchedulerSuspended>
    2188:	81 11       	cpse	r24, r1
    218a:	04 c0       	rjmp	.+8      	; 0x2194 <xTaskGetSchedulerState+0x18>
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	08 95       	ret
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	08 95       	ret
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	08 95       	ret

00002198 <xTaskPriorityDisinherit>:
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	fc 01       	movw	r30, r24
    21a2:	89 2b       	or	r24, r25
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <xTaskPriorityDisinherit+0x10>
    21a6:	49 c0       	rjmp	.+146    	; 0x223a <__stack+0x3b>
    21a8:	86 a5       	ldd	r24, Z+46	; 0x2e
    21aa:	81 50       	subi	r24, 0x01	; 1
    21ac:	86 a7       	std	Z+46, r24	; 0x2e
    21ae:	22 8d       	ldd	r18, Z+26	; 0x1a
    21b0:	95 a5       	ldd	r25, Z+45	; 0x2d
    21b2:	29 17       	cp	r18, r25
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <xTaskPriorityDisinherit+0x20>
    21b6:	43 c0       	rjmp	.+134    	; 0x223e <__stack+0x3f>
    21b8:	81 11       	cpse	r24, r1
    21ba:	43 c0       	rjmp	.+134    	; 0x2242 <__stack+0x43>
    21bc:	ef 01       	movw	r28, r30
    21be:	8f 01       	movw	r16, r30
    21c0:	0e 5f       	subi	r16, 0xFE	; 254
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	c8 01       	movw	r24, r16
    21c6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
    21ca:	ed a5       	ldd	r30, Y+45	; 0x2d
    21cc:	ea 8f       	std	Y+26, r30	; 0x1a
    21ce:	8a e0       	ldi	r24, 0x0A	; 10
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	a0 e0       	ldi	r26, 0x00	; 0
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	8e 1b       	sub	r24, r30
    21d8:	91 09       	sbc	r25, r1
    21da:	a1 09       	sbc	r26, r1
    21dc:	b1 09       	sbc	r27, r1
    21de:	8e 87       	std	Y+14, r24	; 0x0e
    21e0:	9f 87       	std	Y+15, r25	; 0x0f
    21e2:	a8 8b       	std	Y+16, r26	; 0x10
    21e4:	b9 8b       	std	Y+17, r27	; 0x11
    21e6:	80 91 cb 10 	lds	r24, 0x10CB	; 0x8010cb <uxTopReadyPriority>
    21ea:	8e 17       	cp	r24, r30
    21ec:	10 f4       	brcc	.+4      	; 0x21f2 <xTaskPriorityDisinherit+0x5a>
    21ee:	e0 93 cb 10 	sts	0x10CB, r30	; 0x8010cb <uxTopReadyPriority>
    21f2:	8b e0       	ldi	r24, 0x0B	; 11
    21f4:	8e 9f       	mul	r24, r30
    21f6:	f0 01       	movw	r30, r0
    21f8:	11 24       	eor	r1, r1
    21fa:	e3 5f       	subi	r30, 0xF3	; 243
    21fc:	fe 4e       	sbci	r31, 0xEE	; 238
    21fe:	01 80       	ldd	r0, Z+1	; 0x01
    2200:	f2 81       	ldd	r31, Z+2	; 0x02
    2202:	e0 2d       	mov	r30, r0
    2204:	ff 83       	std	Y+7, r31	; 0x07
    2206:	ee 83       	std	Y+6, r30	; 0x06
    2208:	26 81       	ldd	r18, Z+6	; 0x06
    220a:	37 81       	ldd	r19, Z+7	; 0x07
    220c:	39 87       	std	Y+9, r19	; 0x09
    220e:	28 87       	std	Y+8, r18	; 0x08
    2210:	a6 81       	ldd	r26, Z+6	; 0x06
    2212:	b7 81       	ldd	r27, Z+7	; 0x07
    2214:	15 96       	adiw	r26, 0x05	; 5
    2216:	1c 93       	st	X, r17
    2218:	0e 93       	st	-X, r16
    221a:	14 97       	sbiw	r26, 0x04	; 4
    221c:	17 83       	std	Z+7, r17	; 0x07
    221e:	06 83       	std	Z+6, r16	; 0x06
    2220:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2222:	8e 9f       	mul	r24, r30
    2224:	f0 01       	movw	r30, r0
    2226:	11 24       	eor	r1, r1
    2228:	e3 5f       	subi	r30, 0xF3	; 243
    222a:	fe 4e       	sbci	r31, 0xEE	; 238
    222c:	fd 87       	std	Y+13, r31	; 0x0d
    222e:	ec 87       	std	Y+12, r30	; 0x0c
    2230:	80 81       	ld	r24, Z
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	80 83       	st	Z, r24
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	05 c0       	rjmp	.+10     	; 0x2244 <__stack+0x45>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <__stack+0x45>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	01 c0       	rjmp	.+2      	; 0x2244 <__stack+0x45>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret

0000224e <xTaskGenericNotifyWait>:
    224e:	4f 92       	push	r4
    2250:	5f 92       	push	r5
    2252:	6f 92       	push	r6
    2254:	7f 92       	push	r7
    2256:	af 92       	push	r10
    2258:	bf 92       	push	r11
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	28 01       	movw	r4, r16
    226c:	39 01       	movw	r6, r18
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	0f 92       	push	r0
    2274:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    2278:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    227c:	c8 2f       	mov	r28, r24
    227e:	d0 e0       	ldi	r29, 0x00	; 0
    2280:	ec 0f       	add	r30, r28
    2282:	fd 1f       	adc	r31, r29
    2284:	83 a9       	ldd	r24, Z+51	; 0x33
    2286:	82 30       	cpi	r24, 0x02	; 2
    2288:	71 f1       	breq	.+92     	; 0x22e6 <xTaskGenericNotifyWait+0x98>
    228a:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    228e:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    2292:	ce 01       	movw	r24, r28
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	e8 0f       	add	r30, r24
    229e:	f9 1f       	adc	r31, r25
    22a0:	87 a5       	ldd	r24, Z+47	; 0x2f
    22a2:	90 a9       	ldd	r25, Z+48	; 0x30
    22a4:	a1 a9       	ldd	r26, Z+49	; 0x31
    22a6:	b2 a9       	ldd	r27, Z+50	; 0x32
    22a8:	40 95       	com	r20
    22aa:	50 95       	com	r21
    22ac:	60 95       	com	r22
    22ae:	70 95       	com	r23
    22b0:	48 23       	and	r20, r24
    22b2:	59 23       	and	r21, r25
    22b4:	6a 23       	and	r22, r26
    22b6:	7b 23       	and	r23, r27
    22b8:	47 a7       	std	Z+47, r20	; 0x2f
    22ba:	50 ab       	std	Z+48, r21	; 0x30
    22bc:	61 ab       	std	Z+49, r22	; 0x31
    22be:	72 ab       	std	Z+50, r23	; 0x32
    22c0:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    22c4:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    22c8:	ec 0f       	add	r30, r28
    22ca:	fd 1f       	adc	r31, r29
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	83 ab       	std	Z+51, r24	; 0x33
    22d0:	a1 14       	cp	r10, r1
    22d2:	b1 04       	cpc	r11, r1
    22d4:	c1 04       	cpc	r12, r1
    22d6:	d1 04       	cpc	r13, r1
    22d8:	31 f0       	breq	.+12     	; 0x22e6 <xTaskGenericNotifyWait+0x98>
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	c6 01       	movw	r24, r12
    22de:	b5 01       	movw	r22, r10
    22e0:	88 d9       	rcall	.-3312   	; 0x15f2 <prvAddCurrentTaskToDelayedList>
    22e2:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    22e6:	0f 90       	pop	r0
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	0f 92       	push	r0
    22f0:	e1 14       	cp	r14, r1
    22f2:	f1 04       	cpc	r15, r1
    22f4:	a1 f0       	breq	.+40     	; 0x231e <xTaskGenericNotifyWait+0xd0>
    22f6:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    22fa:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    22fe:	ce 01       	movw	r24, r28
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	e8 0f       	add	r30, r24
    230a:	f9 1f       	adc	r31, r25
    230c:	87 a5       	ldd	r24, Z+47	; 0x2f
    230e:	90 a9       	ldd	r25, Z+48	; 0x30
    2310:	a1 a9       	ldd	r26, Z+49	; 0x31
    2312:	b2 a9       	ldd	r27, Z+50	; 0x32
    2314:	f7 01       	movw	r30, r14
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03
    231e:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    2322:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    2326:	ec 0f       	add	r30, r28
    2328:	fd 1f       	adc	r31, r29
    232a:	83 a9       	ldd	r24, Z+51	; 0x33
    232c:	82 30       	cpi	r24, 0x02	; 2
    232e:	e9 f4       	brne	.+58     	; 0x236a <xTaskGenericNotifyWait+0x11c>
    2330:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    2334:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    2338:	ce 01       	movw	r24, r28
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	e8 0f       	add	r30, r24
    2344:	f9 1f       	adc	r31, r25
    2346:	87 a5       	ldd	r24, Z+47	; 0x2f
    2348:	90 a9       	ldd	r25, Z+48	; 0x30
    234a:	a1 a9       	ldd	r26, Z+49	; 0x31
    234c:	b2 a9       	ldd	r27, Z+50	; 0x32
    234e:	40 94       	com	r4
    2350:	50 94       	com	r5
    2352:	60 94       	com	r6
    2354:	70 94       	com	r7
    2356:	48 22       	and	r4, r24
    2358:	59 22       	and	r5, r25
    235a:	6a 22       	and	r6, r26
    235c:	7b 22       	and	r7, r27
    235e:	47 a6       	std	Z+47, r4	; 0x2f
    2360:	50 aa       	std	Z+48, r5	; 0x30
    2362:	61 aa       	std	Z+49, r6	; 0x31
    2364:	72 aa       	std	Z+50, r7	; 0x32
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	01 c0       	rjmp	.+2      	; 0x236c <xTaskGenericNotifyWait+0x11e>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	20 91 7b 11 	lds	r18, 0x117B	; 0x80117b <pxCurrentTCB>
    2370:	30 91 7c 11 	lds	r19, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    2374:	c2 0f       	add	r28, r18
    2376:	d3 1f       	adc	r29, r19
    2378:	1b aa       	std	Y+51, r1	; 0x33
    237a:	0f 90       	pop	r0
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	ff 90       	pop	r15
    2388:	ef 90       	pop	r14
    238a:	df 90       	pop	r13
    238c:	cf 90       	pop	r12
    238e:	bf 90       	pop	r11
    2390:	af 90       	pop	r10
    2392:	7f 90       	pop	r7
    2394:	6f 90       	pop	r6
    2396:	5f 90       	pop	r5
    2398:	4f 90       	pop	r4
    239a:	08 95       	ret

0000239c <xTaskGenericNotify>:
    239c:	8f 92       	push	r8
    239e:	9f 92       	push	r9
    23a0:	af 92       	push	r10
    23a2:	bf 92       	push	r11
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	dc 01       	movw	r26, r24
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	0f 92       	push	r0
    23b6:	e1 14       	cp	r14, r1
    23b8:	f1 04       	cpc	r15, r1
    23ba:	89 f0       	breq	.+34     	; 0x23de <xTaskGenericNotify+0x42>
    23bc:	e6 2f       	mov	r30, r22
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ee 0f       	add	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	e8 0f       	add	r30, r24
    23ca:	f9 1f       	adc	r31, r25
    23cc:	87 a4       	ldd	r8, Z+47	; 0x2f
    23ce:	90 a8       	ldd	r9, Z+48	; 0x30
    23d0:	a1 a8       	ldd	r10, Z+49	; 0x31
    23d2:	b2 a8       	ldd	r11, Z+50	; 0x32
    23d4:	f7 01       	movw	r30, r14
    23d6:	80 82       	st	Z, r8
    23d8:	91 82       	std	Z+1, r9	; 0x01
    23da:	a2 82       	std	Z+2, r10	; 0x02
    23dc:	b3 82       	std	Z+3, r11	; 0x03
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	fd 01       	movw	r30, r26
    23e2:	e6 0f       	add	r30, r22
    23e4:	f7 1f       	adc	r31, r23
    23e6:	83 a9       	ldd	r24, Z+51	; 0x33
    23e8:	92 e0       	ldi	r25, 0x02	; 2
    23ea:	93 ab       	std	Z+51, r25	; 0x33
    23ec:	02 30       	cpi	r16, 0x02	; 2
    23ee:	01 f1       	breq	.+64     	; 0x2430 <xTaskGenericNotify+0x94>
    23f0:	18 f4       	brcc	.+6      	; 0x23f8 <xTaskGenericNotify+0x5c>
    23f2:	01 30       	cpi	r16, 0x01	; 1
    23f4:	31 f0       	breq	.+12     	; 0x2402 <xTaskGenericNotify+0x66>
    23f6:	4d c0       	rjmp	.+154    	; 0x2492 <xTaskGenericNotify+0xf6>
    23f8:	03 30       	cpi	r16, 0x03	; 3
    23fa:	79 f1       	breq	.+94     	; 0x245a <xTaskGenericNotify+0xbe>
    23fc:	04 30       	cpi	r16, 0x04	; 4
    23fe:	d1 f1       	breq	.+116    	; 0x2474 <xTaskGenericNotify+0xd8>
    2400:	48 c0       	rjmp	.+144    	; 0x2492 <xTaskGenericNotify+0xf6>
    2402:	66 0f       	add	r22, r22
    2404:	77 1f       	adc	r23, r23
    2406:	66 0f       	add	r22, r22
    2408:	77 1f       	adc	r23, r23
    240a:	fd 01       	movw	r30, r26
    240c:	e6 0f       	add	r30, r22
    240e:	f7 1f       	adc	r31, r23
    2410:	87 a4       	ldd	r8, Z+47	; 0x2f
    2412:	90 a8       	ldd	r9, Z+48	; 0x30
    2414:	a1 a8       	ldd	r10, Z+49	; 0x31
    2416:	b2 a8       	ldd	r11, Z+50	; 0x32
    2418:	ba 01       	movw	r22, r20
    241a:	a9 01       	movw	r20, r18
    241c:	48 29       	or	r20, r8
    241e:	59 29       	or	r21, r9
    2420:	6a 29       	or	r22, r10
    2422:	7b 29       	or	r23, r11
    2424:	47 a7       	std	Z+47, r20	; 0x2f
    2426:	50 ab       	std	Z+48, r21	; 0x30
    2428:	61 ab       	std	Z+49, r22	; 0x31
    242a:	72 ab       	std	Z+50, r23	; 0x32
    242c:	01 e0       	ldi	r16, 0x01	; 1
    242e:	34 c0       	rjmp	.+104    	; 0x2498 <xTaskGenericNotify+0xfc>
    2430:	66 0f       	add	r22, r22
    2432:	77 1f       	adc	r23, r23
    2434:	66 0f       	add	r22, r22
    2436:	77 1f       	adc	r23, r23
    2438:	fd 01       	movw	r30, r26
    243a:	e6 0f       	add	r30, r22
    243c:	f7 1f       	adc	r31, r23
    243e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2440:	50 a9       	ldd	r21, Z+48	; 0x30
    2442:	61 a9       	ldd	r22, Z+49	; 0x31
    2444:	72 a9       	ldd	r23, Z+50	; 0x32
    2446:	4f 5f       	subi	r20, 0xFF	; 255
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    244a:	6f 4f       	sbci	r22, 0xFF	; 255
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	47 a7       	std	Z+47, r20	; 0x2f
    2450:	50 ab       	std	Z+48, r21	; 0x30
    2452:	61 ab       	std	Z+49, r22	; 0x31
    2454:	72 ab       	std	Z+50, r23	; 0x32
    2456:	01 e0       	ldi	r16, 0x01	; 1
    2458:	1f c0       	rjmp	.+62     	; 0x2498 <xTaskGenericNotify+0xfc>
    245a:	66 0f       	add	r22, r22
    245c:	77 1f       	adc	r23, r23
    245e:	66 0f       	add	r22, r22
    2460:	77 1f       	adc	r23, r23
    2462:	fd 01       	movw	r30, r26
    2464:	e6 0f       	add	r30, r22
    2466:	f7 1f       	adc	r31, r23
    2468:	27 a7       	std	Z+47, r18	; 0x2f
    246a:	30 ab       	std	Z+48, r19	; 0x30
    246c:	41 ab       	std	Z+49, r20	; 0x31
    246e:	52 ab       	std	Z+50, r21	; 0x32
    2470:	01 e0       	ldi	r16, 0x01	; 1
    2472:	12 c0       	rjmp	.+36     	; 0x2498 <xTaskGenericNotify+0xfc>
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	79 f0       	breq	.+30     	; 0x2496 <xTaskGenericNotify+0xfa>
    2478:	66 0f       	add	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	66 0f       	add	r22, r22
    247e:	77 1f       	adc	r23, r23
    2480:	fd 01       	movw	r30, r26
    2482:	e6 0f       	add	r30, r22
    2484:	f7 1f       	adc	r31, r23
    2486:	27 a7       	std	Z+47, r18	; 0x2f
    2488:	30 ab       	std	Z+48, r19	; 0x30
    248a:	41 ab       	std	Z+49, r20	; 0x31
    248c:	52 ab       	std	Z+50, r21	; 0x32
    248e:	01 e0       	ldi	r16, 0x01	; 1
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <xTaskGenericNotify+0xfc>
    2492:	01 e0       	ldi	r16, 0x01	; 1
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <xTaskGenericNotify+0xfc>
    2496:	00 e0       	ldi	r16, 0x00	; 0
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	09 f0       	breq	.+2      	; 0x249e <xTaskGenericNotify+0x102>
    249c:	69 c0       	rjmp	.+210    	; 0x2570 <xTaskGenericNotify+0x1d4>
    249e:	1c 96       	adiw	r26, 0x0c	; 12
    24a0:	ed 91       	ld	r30, X+
    24a2:	fc 91       	ld	r31, X
    24a4:	1d 97       	sbiw	r26, 0x0d	; 13
    24a6:	16 96       	adiw	r26, 0x06	; 6
    24a8:	cd 91       	ld	r28, X+
    24aa:	dc 91       	ld	r29, X
    24ac:	17 97       	sbiw	r26, 0x07	; 7
    24ae:	18 96       	adiw	r26, 0x08	; 8
    24b0:	8d 91       	ld	r24, X+
    24b2:	9c 91       	ld	r25, X
    24b4:	19 97       	sbiw	r26, 0x09	; 9
    24b6:	9f 83       	std	Y+7, r25	; 0x07
    24b8:	8e 83       	std	Y+6, r24	; 0x06
    24ba:	18 96       	adiw	r26, 0x08	; 8
    24bc:	cd 91       	ld	r28, X+
    24be:	dc 91       	ld	r29, X
    24c0:	19 97       	sbiw	r26, 0x09	; 9
    24c2:	16 96       	adiw	r26, 0x06	; 6
    24c4:	8d 91       	ld	r24, X+
    24c6:	9c 91       	ld	r25, X
    24c8:	17 97       	sbiw	r26, 0x07	; 7
    24ca:	9d 83       	std	Y+5, r25	; 0x05
    24cc:	8c 83       	std	Y+4, r24	; 0x04
    24ce:	81 81       	ldd	r24, Z+1	; 0x01
    24d0:	92 81       	ldd	r25, Z+2	; 0x02
    24d2:	9d 01       	movw	r18, r26
    24d4:	2e 5f       	subi	r18, 0xFE	; 254
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	82 17       	cp	r24, r18
    24da:	93 07       	cpc	r25, r19
    24dc:	31 f4       	brne	.+12     	; 0x24ea <xTaskGenericNotify+0x14e>
    24de:	18 96       	adiw	r26, 0x08	; 8
    24e0:	8d 91       	ld	r24, X+
    24e2:	9c 91       	ld	r25, X
    24e4:	19 97       	sbiw	r26, 0x09	; 9
    24e6:	92 83       	std	Z+2, r25	; 0x02
    24e8:	81 83       	std	Z+1, r24	; 0x01
    24ea:	1d 96       	adiw	r26, 0x0d	; 13
    24ec:	1c 92       	st	X, r1
    24ee:	1e 92       	st	-X, r1
    24f0:	1c 97       	sbiw	r26, 0x0c	; 12
    24f2:	80 81       	ld	r24, Z
    24f4:	81 50       	subi	r24, 0x01	; 1
    24f6:	80 83       	st	Z, r24
    24f8:	5a 96       	adiw	r26, 0x1a	; 26
    24fa:	ec 91       	ld	r30, X
    24fc:	5a 97       	sbiw	r26, 0x1a	; 26
    24fe:	80 91 cb 10 	lds	r24, 0x10CB	; 0x8010cb <uxTopReadyPriority>
    2502:	8e 17       	cp	r24, r30
    2504:	10 f4       	brcc	.+4      	; 0x250a <xTaskGenericNotify+0x16e>
    2506:	e0 93 cb 10 	sts	0x10CB, r30	; 0x8010cb <uxTopReadyPriority>
    250a:	8b e0       	ldi	r24, 0x0B	; 11
    250c:	8e 9f       	mul	r24, r30
    250e:	f0 01       	movw	r30, r0
    2510:	11 24       	eor	r1, r1
    2512:	e3 5f       	subi	r30, 0xF3	; 243
    2514:	fe 4e       	sbci	r31, 0xEE	; 238
    2516:	01 80       	ldd	r0, Z+1	; 0x01
    2518:	f2 81       	ldd	r31, Z+2	; 0x02
    251a:	e0 2d       	mov	r30, r0
    251c:	17 96       	adiw	r26, 0x07	; 7
    251e:	fc 93       	st	X, r31
    2520:	ee 93       	st	-X, r30
    2522:	16 97       	sbiw	r26, 0x06	; 6
    2524:	46 81       	ldd	r20, Z+6	; 0x06
    2526:	57 81       	ldd	r21, Z+7	; 0x07
    2528:	19 96       	adiw	r26, 0x09	; 9
    252a:	5c 93       	st	X, r21
    252c:	4e 93       	st	-X, r20
    252e:	18 97       	sbiw	r26, 0x08	; 8
    2530:	c6 81       	ldd	r28, Z+6	; 0x06
    2532:	d7 81       	ldd	r29, Z+7	; 0x07
    2534:	3d 83       	std	Y+5, r19	; 0x05
    2536:	2c 83       	std	Y+4, r18	; 0x04
    2538:	37 83       	std	Z+7, r19	; 0x07
    253a:	26 83       	std	Z+6, r18	; 0x06
    253c:	5a 96       	adiw	r26, 0x1a	; 26
    253e:	ec 91       	ld	r30, X
    2540:	5a 97       	sbiw	r26, 0x1a	; 26
    2542:	8e 9f       	mul	r24, r30
    2544:	f0 01       	movw	r30, r0
    2546:	11 24       	eor	r1, r1
    2548:	e3 5f       	subi	r30, 0xF3	; 243
    254a:	fe 4e       	sbci	r31, 0xEE	; 238
    254c:	1d 96       	adiw	r26, 0x0d	; 13
    254e:	fc 93       	st	X, r31
    2550:	ee 93       	st	-X, r30
    2552:	1c 97       	sbiw	r26, 0x0c	; 12
    2554:	80 81       	ld	r24, Z
    2556:	8f 5f       	subi	r24, 0xFF	; 255
    2558:	80 83       	st	Z, r24
    255a:	5a 96       	adiw	r26, 0x1a	; 26
    255c:	9c 91       	ld	r25, X
    255e:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    2562:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    2566:	82 8d       	ldd	r24, Z+26	; 0x1a
    2568:	89 17       	cp	r24, r25
    256a:	10 f4       	brcc	.+4      	; 0x2570 <xTaskGenericNotify+0x1d4>
    256c:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    2570:	0f 90       	pop	r0
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	80 2f       	mov	r24, r16
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	bf 90       	pop	r11
    2582:	af 90       	pop	r10
    2584:	9f 90       	pop	r9
    2586:	8f 90       	pop	r8
    2588:	08 95       	ret

0000258a <xTaskGenericNotifyFromISR>:
    258a:	8f 92       	push	r8
    258c:	9f 92       	push	r9
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	dc 01       	movw	r26, r24
    25a2:	e1 14       	cp	r14, r1
    25a4:	f1 04       	cpc	r15, r1
    25a6:	89 f0       	breq	.+34     	; 0x25ca <xTaskGenericNotifyFromISR+0x40>
    25a8:	e6 2f       	mov	r30, r22
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	ee 0f       	add	r30, r30
    25ae:	ff 1f       	adc	r31, r31
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	e8 0f       	add	r30, r24
    25b6:	f9 1f       	adc	r31, r25
    25b8:	87 a4       	ldd	r8, Z+47	; 0x2f
    25ba:	90 a8       	ldd	r9, Z+48	; 0x30
    25bc:	a1 a8       	ldd	r10, Z+49	; 0x31
    25be:	b2 a8       	ldd	r11, Z+50	; 0x32
    25c0:	f7 01       	movw	r30, r14
    25c2:	80 82       	st	Z, r8
    25c4:	91 82       	std	Z+1, r9	; 0x01
    25c6:	a2 82       	std	Z+2, r10	; 0x02
    25c8:	b3 82       	std	Z+3, r11	; 0x03
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	fd 01       	movw	r30, r26
    25ce:	e6 0f       	add	r30, r22
    25d0:	f7 1f       	adc	r31, r23
    25d2:	93 a9       	ldd	r25, Z+51	; 0x33
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	83 ab       	std	Z+51, r24	; 0x33
    25d8:	02 30       	cpi	r16, 0x02	; 2
    25da:	01 f1       	breq	.+64     	; 0x261c <xTaskGenericNotifyFromISR+0x92>
    25dc:	18 f4       	brcc	.+6      	; 0x25e4 <xTaskGenericNotifyFromISR+0x5a>
    25de:	01 30       	cpi	r16, 0x01	; 1
    25e0:	31 f0       	breq	.+12     	; 0x25ee <xTaskGenericNotifyFromISR+0x64>
    25e2:	4d c0       	rjmp	.+154    	; 0x267e <xTaskGenericNotifyFromISR+0xf4>
    25e4:	03 30       	cpi	r16, 0x03	; 3
    25e6:	79 f1       	breq	.+94     	; 0x2646 <xTaskGenericNotifyFromISR+0xbc>
    25e8:	04 30       	cpi	r16, 0x04	; 4
    25ea:	d1 f1       	breq	.+116    	; 0x2660 <xTaskGenericNotifyFromISR+0xd6>
    25ec:	48 c0       	rjmp	.+144    	; 0x267e <xTaskGenericNotifyFromISR+0xf4>
    25ee:	66 0f       	add	r22, r22
    25f0:	77 1f       	adc	r23, r23
    25f2:	66 0f       	add	r22, r22
    25f4:	77 1f       	adc	r23, r23
    25f6:	fd 01       	movw	r30, r26
    25f8:	e6 0f       	add	r30, r22
    25fa:	f7 1f       	adc	r31, r23
    25fc:	87 a4       	ldd	r8, Z+47	; 0x2f
    25fe:	90 a8       	ldd	r9, Z+48	; 0x30
    2600:	a1 a8       	ldd	r10, Z+49	; 0x31
    2602:	b2 a8       	ldd	r11, Z+50	; 0x32
    2604:	ba 01       	movw	r22, r20
    2606:	a9 01       	movw	r20, r18
    2608:	48 29       	or	r20, r8
    260a:	59 29       	or	r21, r9
    260c:	6a 29       	or	r22, r10
    260e:	7b 29       	or	r23, r11
    2610:	47 a7       	std	Z+47, r20	; 0x2f
    2612:	50 ab       	std	Z+48, r21	; 0x30
    2614:	61 ab       	std	Z+49, r22	; 0x31
    2616:	72 ab       	std	Z+50, r23	; 0x32
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	34 c0       	rjmp	.+104    	; 0x2684 <xTaskGenericNotifyFromISR+0xfa>
    261c:	66 0f       	add	r22, r22
    261e:	77 1f       	adc	r23, r23
    2620:	66 0f       	add	r22, r22
    2622:	77 1f       	adc	r23, r23
    2624:	fd 01       	movw	r30, r26
    2626:	e6 0f       	add	r30, r22
    2628:	f7 1f       	adc	r31, r23
    262a:	47 a5       	ldd	r20, Z+47	; 0x2f
    262c:	50 a9       	ldd	r21, Z+48	; 0x30
    262e:	61 a9       	ldd	r22, Z+49	; 0x31
    2630:	72 a9       	ldd	r23, Z+50	; 0x32
    2632:	4f 5f       	subi	r20, 0xFF	; 255
    2634:	5f 4f       	sbci	r21, 0xFF	; 255
    2636:	6f 4f       	sbci	r22, 0xFF	; 255
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	47 a7       	std	Z+47, r20	; 0x2f
    263c:	50 ab       	std	Z+48, r21	; 0x30
    263e:	61 ab       	std	Z+49, r22	; 0x31
    2640:	72 ab       	std	Z+50, r23	; 0x32
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	1f c0       	rjmp	.+62     	; 0x2684 <xTaskGenericNotifyFromISR+0xfa>
    2646:	66 0f       	add	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	66 0f       	add	r22, r22
    264c:	77 1f       	adc	r23, r23
    264e:	fd 01       	movw	r30, r26
    2650:	e6 0f       	add	r30, r22
    2652:	f7 1f       	adc	r31, r23
    2654:	27 a7       	std	Z+47, r18	; 0x2f
    2656:	30 ab       	std	Z+48, r19	; 0x30
    2658:	41 ab       	std	Z+49, r20	; 0x31
    265a:	52 ab       	std	Z+50, r21	; 0x32
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	12 c0       	rjmp	.+36     	; 0x2684 <xTaskGenericNotifyFromISR+0xfa>
    2660:	92 30       	cpi	r25, 0x02	; 2
    2662:	79 f0       	breq	.+30     	; 0x2682 <xTaskGenericNotifyFromISR+0xf8>
    2664:	66 0f       	add	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	66 0f       	add	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	fd 01       	movw	r30, r26
    266e:	e6 0f       	add	r30, r22
    2670:	f7 1f       	adc	r31, r23
    2672:	27 a7       	std	Z+47, r18	; 0x2f
    2674:	30 ab       	std	Z+48, r19	; 0x30
    2676:	41 ab       	std	Z+49, r20	; 0x31
    2678:	52 ab       	std	Z+50, r21	; 0x32
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <xTaskGenericNotifyFromISR+0xfa>
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <xTaskGenericNotifyFromISR+0xfa>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	91 30       	cpi	r25, 0x01	; 1
    2686:	09 f0       	breq	.+2      	; 0x268a <xTaskGenericNotifyFromISR+0x100>
    2688:	96 c0       	rjmp	.+300    	; 0x27b6 <xTaskGenericNotifyFromISR+0x22c>
    268a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <uxSchedulerSuspended>
    268e:	91 11       	cpse	r25, r1
    2690:	5f c0       	rjmp	.+190    	; 0x2750 <xTaskGenericNotifyFromISR+0x1c6>
    2692:	1c 96       	adiw	r26, 0x0c	; 12
    2694:	ed 91       	ld	r30, X+
    2696:	fc 91       	ld	r31, X
    2698:	1d 97       	sbiw	r26, 0x0d	; 13
    269a:	16 96       	adiw	r26, 0x06	; 6
    269c:	cd 91       	ld	r28, X+
    269e:	dc 91       	ld	r29, X
    26a0:	17 97       	sbiw	r26, 0x07	; 7
    26a2:	18 96       	adiw	r26, 0x08	; 8
    26a4:	2d 91       	ld	r18, X+
    26a6:	3c 91       	ld	r19, X
    26a8:	19 97       	sbiw	r26, 0x09	; 9
    26aa:	3f 83       	std	Y+7, r19	; 0x07
    26ac:	2e 83       	std	Y+6, r18	; 0x06
    26ae:	18 96       	adiw	r26, 0x08	; 8
    26b0:	cd 91       	ld	r28, X+
    26b2:	dc 91       	ld	r29, X
    26b4:	19 97       	sbiw	r26, 0x09	; 9
    26b6:	16 96       	adiw	r26, 0x06	; 6
    26b8:	2d 91       	ld	r18, X+
    26ba:	3c 91       	ld	r19, X
    26bc:	17 97       	sbiw	r26, 0x07	; 7
    26be:	3d 83       	std	Y+5, r19	; 0x05
    26c0:	2c 83       	std	Y+4, r18	; 0x04
    26c2:	41 81       	ldd	r20, Z+1	; 0x01
    26c4:	52 81       	ldd	r21, Z+2	; 0x02
    26c6:	9d 01       	movw	r18, r26
    26c8:	2e 5f       	subi	r18, 0xFE	; 254
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	42 17       	cp	r20, r18
    26ce:	53 07       	cpc	r21, r19
    26d0:	31 f4       	brne	.+12     	; 0x26de <xTaskGenericNotifyFromISR+0x154>
    26d2:	18 96       	adiw	r26, 0x08	; 8
    26d4:	4d 91       	ld	r20, X+
    26d6:	5c 91       	ld	r21, X
    26d8:	19 97       	sbiw	r26, 0x09	; 9
    26da:	52 83       	std	Z+2, r21	; 0x02
    26dc:	41 83       	std	Z+1, r20	; 0x01
    26de:	1d 96       	adiw	r26, 0x0d	; 13
    26e0:	1c 92       	st	X, r1
    26e2:	1e 92       	st	-X, r1
    26e4:	1c 97       	sbiw	r26, 0x0c	; 12
    26e6:	90 81       	ld	r25, Z
    26e8:	91 50       	subi	r25, 0x01	; 1
    26ea:	90 83       	st	Z, r25
    26ec:	5a 96       	adiw	r26, 0x1a	; 26
    26ee:	ec 91       	ld	r30, X
    26f0:	5a 97       	sbiw	r26, 0x1a	; 26
    26f2:	90 91 cb 10 	lds	r25, 0x10CB	; 0x8010cb <uxTopReadyPriority>
    26f6:	9e 17       	cp	r25, r30
    26f8:	10 f4       	brcc	.+4      	; 0x26fe <xTaskGenericNotifyFromISR+0x174>
    26fa:	e0 93 cb 10 	sts	0x10CB, r30	; 0x8010cb <uxTopReadyPriority>
    26fe:	9b e0       	ldi	r25, 0x0B	; 11
    2700:	9e 9f       	mul	r25, r30
    2702:	f0 01       	movw	r30, r0
    2704:	11 24       	eor	r1, r1
    2706:	e3 5f       	subi	r30, 0xF3	; 243
    2708:	fe 4e       	sbci	r31, 0xEE	; 238
    270a:	01 80       	ldd	r0, Z+1	; 0x01
    270c:	f2 81       	ldd	r31, Z+2	; 0x02
    270e:	e0 2d       	mov	r30, r0
    2710:	17 96       	adiw	r26, 0x07	; 7
    2712:	fc 93       	st	X, r31
    2714:	ee 93       	st	-X, r30
    2716:	16 97       	sbiw	r26, 0x06	; 6
    2718:	46 81       	ldd	r20, Z+6	; 0x06
    271a:	57 81       	ldd	r21, Z+7	; 0x07
    271c:	19 96       	adiw	r26, 0x09	; 9
    271e:	5c 93       	st	X, r21
    2720:	4e 93       	st	-X, r20
    2722:	18 97       	sbiw	r26, 0x08	; 8
    2724:	c6 81       	ldd	r28, Z+6	; 0x06
    2726:	d7 81       	ldd	r29, Z+7	; 0x07
    2728:	3d 83       	std	Y+5, r19	; 0x05
    272a:	2c 83       	std	Y+4, r18	; 0x04
    272c:	37 83       	std	Z+7, r19	; 0x07
    272e:	26 83       	std	Z+6, r18	; 0x06
    2730:	5a 96       	adiw	r26, 0x1a	; 26
    2732:	ec 91       	ld	r30, X
    2734:	5a 97       	sbiw	r26, 0x1a	; 26
    2736:	9e 9f       	mul	r25, r30
    2738:	f0 01       	movw	r30, r0
    273a:	11 24       	eor	r1, r1
    273c:	e3 5f       	subi	r30, 0xF3	; 243
    273e:	fe 4e       	sbci	r31, 0xEE	; 238
    2740:	1d 96       	adiw	r26, 0x0d	; 13
    2742:	fc 93       	st	X, r31
    2744:	ee 93       	st	-X, r30
    2746:	1c 97       	sbiw	r26, 0x0c	; 12
    2748:	90 81       	ld	r25, Z
    274a:	9f 5f       	subi	r25, 0xFF	; 255
    274c:	90 83       	st	Z, r25
    274e:	21 c0       	rjmp	.+66     	; 0x2792 <xTaskGenericNotifyFromISR+0x208>
    2750:	68 ee       	ldi	r22, 0xE8	; 232
    2752:	70 e1       	ldi	r23, 0x10	; 16
    2754:	fb 01       	movw	r30, r22
    2756:	c1 81       	ldd	r28, Z+1	; 0x01
    2758:	d2 81       	ldd	r29, Z+2	; 0x02
    275a:	53 96       	adiw	r26, 0x13	; 19
    275c:	dc 93       	st	X, r29
    275e:	ce 93       	st	-X, r28
    2760:	52 97       	sbiw	r26, 0x12	; 18
    2762:	2e 81       	ldd	r18, Y+6	; 0x06
    2764:	3f 81       	ldd	r19, Y+7	; 0x07
    2766:	55 96       	adiw	r26, 0x15	; 21
    2768:	3c 93       	st	X, r19
    276a:	2e 93       	st	-X, r18
    276c:	54 97       	sbiw	r26, 0x14	; 20
    276e:	4e 81       	ldd	r20, Y+6	; 0x06
    2770:	5f 81       	ldd	r21, Y+7	; 0x07
    2772:	9d 01       	movw	r18, r26
    2774:	22 5f       	subi	r18, 0xF2	; 242
    2776:	3f 4f       	sbci	r19, 0xFF	; 255
    2778:	fa 01       	movw	r30, r20
    277a:	35 83       	std	Z+5, r19	; 0x05
    277c:	24 83       	std	Z+4, r18	; 0x04
    277e:	3f 83       	std	Y+7, r19	; 0x07
    2780:	2e 83       	std	Y+6, r18	; 0x06
    2782:	59 96       	adiw	r26, 0x19	; 25
    2784:	7c 93       	st	X, r23
    2786:	6e 93       	st	-X, r22
    2788:	58 97       	sbiw	r26, 0x18	; 24
    278a:	fb 01       	movw	r30, r22
    278c:	90 81       	ld	r25, Z
    278e:	9f 5f       	subi	r25, 0xFF	; 255
    2790:	90 83       	st	Z, r25
    2792:	5a 96       	adiw	r26, 0x1a	; 26
    2794:	2c 91       	ld	r18, X
    2796:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxCurrentTCB>
    279a:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxCurrentTCB+0x1>
    279e:	92 8d       	ldd	r25, Z+26	; 0x1a
    27a0:	92 17       	cp	r25, r18
    27a2:	48 f4       	brcc	.+18     	; 0x27b6 <xTaskGenericNotifyFromISR+0x22c>
    27a4:	c1 14       	cp	r12, r1
    27a6:	d1 04       	cpc	r13, r1
    27a8:	19 f0       	breq	.+6      	; 0x27b0 <xTaskGenericNotifyFromISR+0x226>
    27aa:	91 e0       	ldi	r25, 0x01	; 1
    27ac:	f6 01       	movw	r30, r12
    27ae:	90 83       	st	Z, r25
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	90 93 c5 10 	sts	0x10C5, r25	; 0x8010c5 <xYieldPending>
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	cf 90       	pop	r12
    27c4:	bf 90       	pop	r11
    27c6:	af 90       	pop	r10
    27c8:	9f 90       	pop	r9
    27ca:	8f 90       	pop	r8
    27cc:	08 95       	ret

000027ce <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	21 f4       	brne	.+8      	; 0x27da <xTaskGenericNotifyStateClear+0xc>
    27d2:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxCurrentTCB>
    27d6:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	fc 01       	movw	r30, r24
    27e4:	e6 0f       	add	r30, r22
    27e6:	f7 1f       	adc	r31, r23
    27e8:	23 a9       	ldd	r18, Z+51	; 0x33
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 f4       	brne	.+12     	; 0x27fa <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    27ee:	fc 01       	movw	r30, r24
    27f0:	e6 0f       	add	r30, r22
    27f2:	f7 1f       	adc	r31, r23
    27f4:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	01 c0       	rjmp	.+2      	; 0x27fc <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    27fa:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    27fc:	0f 90       	pop	r0
    27fe:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2800:	08 95       	ret

00002802 <prvGetNextExpireTime>:
    2802:	dc 01       	movw	r26, r24
    2804:	e0 91 87 11 	lds	r30, 0x1187	; 0x801187 <pxCurrentTimerList>
    2808:	f0 91 88 11 	lds	r31, 0x1188	; 0x801188 <pxCurrentTimerList+0x1>
    280c:	80 81       	ld	r24, Z
    280e:	91 e0       	ldi	r25, 0x01	; 1
    2810:	81 11       	cpse	r24, r1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9c 93       	st	X, r25
    2816:	91 11       	cpse	r25, r1
    2818:	08 c0       	rjmp	.+16     	; 0x282a <prvGetNextExpireTime+0x28>
    281a:	07 80       	ldd	r0, Z+7	; 0x07
    281c:	f0 85       	ldd	r31, Z+8	; 0x08
    281e:	e0 2d       	mov	r30, r0
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	08 95       	ret
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	cb 01       	movw	r24, r22
    2830:	08 95       	ret

00002832 <prvInsertTimerInActiveList>:
    2832:	cf 92       	push	r12
    2834:	df 92       	push	r13
    2836:	ef 92       	push	r14
    2838:	ff 92       	push	r15
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	fc 01       	movw	r30, r24
    2840:	42 83       	std	Z+2, r20	; 0x02
    2842:	53 83       	std	Z+3, r21	; 0x03
    2844:	64 83       	std	Z+4, r22	; 0x04
    2846:	75 83       	std	Z+5, r23	; 0x05
    2848:	93 87       	std	Z+11, r25	; 0x0b
    284a:	82 87       	std	Z+10, r24	; 0x0a
    284c:	04 17       	cp	r16, r20
    284e:	15 07       	cpc	r17, r21
    2850:	26 07       	cpc	r18, r22
    2852:	37 07       	cpc	r19, r23
    2854:	c0 f0       	brcs	.+48     	; 0x2886 <prvInsertTimerInActiveList+0x54>
    2856:	0c 19       	sub	r16, r12
    2858:	1d 09       	sbc	r17, r13
    285a:	2e 09       	sbc	r18, r14
    285c:	3f 09       	sbc	r19, r15
    285e:	86 85       	ldd	r24, Z+14	; 0x0e
    2860:	97 85       	ldd	r25, Z+15	; 0x0f
    2862:	a0 89       	ldd	r26, Z+16	; 0x10
    2864:	b1 89       	ldd	r27, Z+17	; 0x11
    2866:	08 17       	cp	r16, r24
    2868:	19 07       	cpc	r17, r25
    286a:	2a 07       	cpc	r18, r26
    286c:	3b 07       	cpc	r19, r27
    286e:	00 f5       	brcc	.+64     	; 0x28b0 <prvInsertTimerInActiveList+0x7e>
    2870:	bf 01       	movw	r22, r30
    2872:	6e 5f       	subi	r22, 0xFE	; 254
    2874:	7f 4f       	sbci	r23, 0xFF	; 255
    2876:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <pxOverflowTimerList>
    287a:	90 91 86 11 	lds	r25, 0x1186	; 0x801186 <pxOverflowTimerList+0x1>
    287e:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	18 c0       	rjmp	.+48     	; 0x28b6 <prvInsertTimerInActiveList+0x84>
    2886:	0c 15       	cp	r16, r12
    2888:	1d 05       	cpc	r17, r13
    288a:	2e 05       	cpc	r18, r14
    288c:	3f 05       	cpc	r19, r15
    288e:	28 f4       	brcc	.+10     	; 0x289a <prvInsertTimerInActiveList+0x68>
    2890:	4c 15       	cp	r20, r12
    2892:	5d 05       	cpc	r21, r13
    2894:	6e 05       	cpc	r22, r14
    2896:	7f 05       	cpc	r23, r15
    2898:	68 f4       	brcc	.+26     	; 0x28b4 <prvInsertTimerInActiveList+0x82>
    289a:	bf 01       	movw	r22, r30
    289c:	6e 5f       	subi	r22, 0xFE	; 254
    289e:	7f 4f       	sbci	r23, 0xFF	; 255
    28a0:	80 91 87 11 	lds	r24, 0x1187	; 0x801187 <pxCurrentTimerList>
    28a4:	90 91 88 11 	lds	r25, 0x1188	; 0x801188 <pxCurrentTimerList+0x1>
    28a8:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	03 c0       	rjmp	.+6      	; 0x28b6 <prvInsertTimerInActiveList+0x84>
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	01 c0       	rjmp	.+2      	; 0x28b6 <prvInsertTimerInActiveList+0x84>
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	1f 91       	pop	r17
    28b8:	0f 91       	pop	r16
    28ba:	ff 90       	pop	r15
    28bc:	ef 90       	pop	r14
    28be:	df 90       	pop	r13
    28c0:	cf 90       	pop	r12
    28c2:	08 95       	ret

000028c4 <prvCheckForValidListAndQueue>:
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	0f 92       	push	r0
    28ca:	80 91 83 11 	lds	r24, 0x1183	; 0x801183 <xTimerQueue>
    28ce:	90 91 84 11 	lds	r25, 0x1184	; 0x801184 <xTimerQueue+0x1>
    28d2:	89 2b       	or	r24, r25
    28d4:	e9 f4       	brne	.+58     	; 0x2910 <prvCheckForValidListAndQueue+0x4c>
    28d6:	84 e9       	ldi	r24, 0x94	; 148
    28d8:	91 e1       	ldi	r25, 0x11	; 17
    28da:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    28de:	89 e8       	ldi	r24, 0x89	; 137
    28e0:	91 e1       	ldi	r25, 0x11	; 17
    28e2:	0e 94 10 02 	call	0x420	; 0x420 <vListInitialise>
    28e6:	84 e9       	ldi	r24, 0x94	; 148
    28e8:	91 e1       	ldi	r25, 0x11	; 17
    28ea:	90 93 88 11 	sts	0x1188, r25	; 0x801188 <pxCurrentTimerList+0x1>
    28ee:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <pxCurrentTimerList>
    28f2:	89 e8       	ldi	r24, 0x89	; 137
    28f4:	91 e1       	ldi	r25, 0x11	; 17
    28f6:	90 93 86 11 	sts	0x1186, r25	; 0x801186 <pxOverflowTimerList+0x1>
    28fa:	80 93 85 11 	sts	0x1185, r24	; 0x801185 <pxOverflowTimerList>
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	67 e0       	ldi	r22, 0x07	; 7
    2902:	8a e0       	ldi	r24, 0x0A	; 10
    2904:	0e 94 c3 04 	call	0x986	; 0x986 <xQueueGenericCreate>
    2908:	90 93 84 11 	sts	0x1184, r25	; 0x801184 <xTimerQueue+0x1>
    290c:	80 93 83 11 	sts	0x1183, r24	; 0x801183 <xTimerQueue>
    2910:	0f 90       	pop	r0
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	08 95       	ret

00002916 <xTimerCreateTimerTask>:
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	d3 df       	rcall	.-90     	; 0x28c4 <prvCheckForValidListAndQueue>
    291e:	80 91 83 11 	lds	r24, 0x1183	; 0x801183 <xTimerQueue>
    2922:	90 91 84 11 	lds	r25, 0x1184	; 0x801184 <xTimerQueue+0x1>
    2926:	89 2b       	or	r24, r25
    2928:	91 f0       	breq	.+36     	; 0x294e <xTimerCreateTimerTask+0x38>
    292a:	0f 2e       	mov	r0, r31
    292c:	f1 e8       	ldi	r31, 0x81	; 129
    292e:	ef 2e       	mov	r14, r31
    2930:	f1 e1       	ldi	r31, 0x11	; 17
    2932:	ff 2e       	mov	r15, r31
    2934:	f0 2d       	mov	r31, r0
    2936:	03 e0       	ldi	r16, 0x03	; 3
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 ec       	ldi	r20, 0xC0	; 192
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	62 e4       	ldi	r22, 0x42	; 66
    2942:	72 e0       	ldi	r23, 0x02	; 2
    2944:	86 e8       	ldi	r24, 0x86	; 134
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 9b 0b 	call	0x1736	; 0x1736 <xTaskCreate>
    294c:	01 c0       	rjmp	.+2      	; 0x2950 <xTimerCreateTimerTask+0x3a>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	0f 91       	pop	r16
    2952:	ff 90       	pop	r15
    2954:	ef 90       	pop	r14
    2956:	08 95       	ret

00002958 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2958:	8f 92       	push	r8
    295a:	9f 92       	push	r9
    295c:	af 92       	push	r10
    295e:	bf 92       	push	r11
    2960:	cf 92       	push	r12
    2962:	df 92       	push	r13
    2964:	ef 92       	push	r14
    2966:	ff 92       	push	r15
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	27 97       	sbiw	r28, 0x07	; 7
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2980:	e0 91 83 11 	lds	r30, 0x1183	; 0x801183 <xTimerQueue>
    2984:	f0 91 84 11 	lds	r31, 0x1184	; 0x801184 <xTimerQueue+0x1>
    2988:	30 97       	sbiw	r30, 0x00	; 0
    298a:	81 f1       	breq	.+96     	; 0x29ec <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    298c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    298e:	2a 83       	std	Y+2, r18	; 0x02
    2990:	3b 83       	std	Y+3, r19	; 0x03
    2992:	4c 83       	std	Y+4, r20	; 0x04
    2994:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2996:	9f 83       	std	Y+7, r25	; 0x07
    2998:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    299a:	66 30       	cpi	r22, 0x06	; 6
    299c:	f4 f4       	brge	.+60     	; 0x29da <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    299e:	ee db       	rcall	.-2084   	; 0x217c <xTaskGetSchedulerState>
    29a0:	82 30       	cpi	r24, 0x02	; 2
    29a2:	69 f4       	brne	.+26     	; 0x29be <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    29a4:	00 e0       	ldi	r16, 0x00	; 0
    29a6:	a7 01       	movw	r20, r14
    29a8:	96 01       	movw	r18, r12
    29aa:	be 01       	movw	r22, r28
    29ac:	6f 5f       	subi	r22, 0xFF	; 255
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	80 91 83 11 	lds	r24, 0x1183	; 0x801183 <xTimerQueue>
    29b4:	90 91 84 11 	lds	r25, 0x1184	; 0x801184 <xTimerQueue+0x1>
    29b8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <xQueueGenericSend>
    29bc:	18 c0       	rjmp	.+48     	; 0x29ee <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    29be:	00 e0       	ldi	r16, 0x00	; 0
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	a9 01       	movw	r20, r18
    29c6:	be 01       	movw	r22, r28
    29c8:	6f 5f       	subi	r22, 0xFF	; 255
    29ca:	7f 4f       	sbci	r23, 0xFF	; 255
    29cc:	80 91 83 11 	lds	r24, 0x1183	; 0x801183 <xTimerQueue>
    29d0:	90 91 84 11 	lds	r25, 0x1184	; 0x801184 <xTimerQueue+0x1>
    29d4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <xQueueGenericSend>
    29d8:	0a c0       	rjmp	.+20     	; 0x29ee <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	a8 01       	movw	r20, r16
    29de:	be 01       	movw	r22, r28
    29e0:	6f 5f       	subi	r22, 0xFF	; 255
    29e2:	7f 4f       	sbci	r23, 0xFF	; 255
    29e4:	cf 01       	movw	r24, r30
    29e6:	0e 94 76 05 	call	0xaec	; 0xaec <xQueueGenericSendFromISR>
    29ea:	01 c0       	rjmp	.+2      	; 0x29ee <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    29ec:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    29ee:	27 96       	adiw	r28, 0x07	; 7
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	1f 91       	pop	r17
    2a00:	0f 91       	pop	r16
    2a02:	ff 90       	pop	r15
    2a04:	ef 90       	pop	r14
    2a06:	df 90       	pop	r13
    2a08:	cf 90       	pop	r12
    2a0a:	bf 90       	pop	r11
    2a0c:	af 90       	pop	r10
    2a0e:	9f 90       	pop	r9
    2a10:	8f 90       	pop	r8
    2a12:	08 95       	ret

00002a14 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2a14:	8f 92       	push	r8
    2a16:	9f 92       	push	r9
    2a18:	af 92       	push	r10
    2a1a:	bf 92       	push	r11
    2a1c:	cf 92       	push	r12
    2a1e:	df 92       	push	r13
    2a20:	ef 92       	push	r14
    2a22:	ff 92       	push	r15
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a2c:	3b c0       	rjmp	.+118    	; 0x2aa4 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a2e:	07 80       	ldd	r0, Z+7	; 0x07
    2a30:	f0 85       	ldd	r31, Z+8	; 0x08
    2a32:	e0 2d       	mov	r30, r0
    2a34:	80 80       	ld	r8, Z
    2a36:	91 80       	ldd	r9, Z+1	; 0x01
    2a38:	a2 80       	ldd	r10, Z+2	; 0x02
    2a3a:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2a3c:	c0 85       	ldd	r28, Z+8	; 0x08
    2a3e:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a40:	8e 01       	movw	r16, r28
    2a42:	0e 5f       	subi	r16, 0xFE	; 254
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	c8 01       	movw	r24, r16
    2a48:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a4c:	ec 89       	ldd	r30, Y+20	; 0x14
    2a4e:	fd 89       	ldd	r31, Y+21	; 0x15
    2a50:	ce 01       	movw	r24, r28
    2a52:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a54:	8e 89       	ldd	r24, Y+22	; 0x16
    2a56:	82 ff       	sbrs	r24, 2
    2a58:	25 c0       	rjmp	.+74     	; 0x2aa4 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2a5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a5e:	a8 89       	ldd	r26, Y+16	; 0x10
    2a60:	b9 89       	ldd	r27, Y+17	; 0x11
    2a62:	88 0d       	add	r24, r8
    2a64:	99 1d       	adc	r25, r9
    2a66:	aa 1d       	adc	r26, r10
    2a68:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2a6a:	88 16       	cp	r8, r24
    2a6c:	99 06       	cpc	r9, r25
    2a6e:	aa 06       	cpc	r10, r26
    2a70:	bb 06       	cpc	r11, r27
    2a72:	70 f4       	brcc	.+28     	; 0x2a90 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a74:	8a 83       	std	Y+2, r24	; 0x02
    2a76:	9b 83       	std	Y+3, r25	; 0x03
    2a78:	ac 83       	std	Y+4, r26	; 0x04
    2a7a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a7c:	db 87       	std	Y+11, r29	; 0x0b
    2a7e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2a80:	b8 01       	movw	r22, r16
    2a82:	80 91 87 11 	lds	r24, 0x1187	; 0x801187 <pxCurrentTimerList>
    2a86:	90 91 88 11 	lds	r25, 0x1188	; 0x801188 <pxCurrentTimerList+0x1>
    2a8a:	0e 94 25 02 	call	0x44a	; 0x44a <vListInsert>
    2a8e:	0a c0       	rjmp	.+20     	; 0x2aa4 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a90:	c1 2c       	mov	r12, r1
    2a92:	d1 2c       	mov	r13, r1
    2a94:	76 01       	movw	r14, r12
    2a96:	00 e0       	ldi	r16, 0x00	; 0
    2a98:	10 e0       	ldi	r17, 0x00	; 0
    2a9a:	a5 01       	movw	r20, r10
    2a9c:	94 01       	movw	r18, r8
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	5a df       	rcall	.-332    	; 0x2958 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2aa4:	e0 91 87 11 	lds	r30, 0x1187	; 0x801187 <pxCurrentTimerList>
    2aa8:	f0 91 88 11 	lds	r31, 0x1188	; 0x801188 <pxCurrentTimerList+0x1>
    2aac:	80 81       	ld	r24, Z
    2aae:	81 11       	cpse	r24, r1
    2ab0:	be cf       	rjmp	.-132    	; 0x2a2e <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ab2:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <pxOverflowTimerList>
    2ab6:	90 91 86 11 	lds	r25, 0x1186	; 0x801186 <pxOverflowTimerList+0x1>
    2aba:	90 93 88 11 	sts	0x1188, r25	; 0x801188 <pxCurrentTimerList+0x1>
    2abe:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2ac2:	f0 93 86 11 	sts	0x1186, r31	; 0x801186 <pxOverflowTimerList+0x1>
    2ac6:	e0 93 85 11 	sts	0x1185, r30	; 0x801185 <pxOverflowTimerList>
    }
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
    2ada:	bf 90       	pop	r11
    2adc:	af 90       	pop	r10
    2ade:	9f 90       	pop	r9
    2ae0:	8f 90       	pop	r8
    2ae2:	08 95       	ret

00002ae4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2ae4:	cf 92       	push	r12
    2ae6:	df 92       	push	r13
    2ae8:	ef 92       	push	r14
    2aea:	ff 92       	push	r15
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2af2:	0e 94 25 0c 	call	0x184a	; 0x184a <xTaskGetTickCount>
    2af6:	6b 01       	movw	r12, r22
    2af8:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2afa:	80 91 7d 11 	lds	r24, 0x117D	; 0x80117d <xLastTime.2436>
    2afe:	90 91 7e 11 	lds	r25, 0x117E	; 0x80117e <xLastTime.2436+0x1>
    2b02:	a0 91 7f 11 	lds	r26, 0x117F	; 0x80117f <xLastTime.2436+0x2>
    2b06:	b0 91 80 11 	lds	r27, 0x1180	; 0x801180 <xLastTime.2436+0x3>
    2b0a:	c8 16       	cp	r12, r24
    2b0c:	d9 06       	cpc	r13, r25
    2b0e:	ea 06       	cpc	r14, r26
    2b10:	fb 06       	cpc	r15, r27
    2b12:	20 f4       	brcc	.+8      	; 0x2b1c <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2b14:	7f df       	rcall	.-258    	; 0x2a14 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	88 83       	st	Y, r24
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2b1c:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2b1e:	c0 92 7d 11 	sts	0x117D, r12	; 0x80117d <xLastTime.2436>
    2b22:	d0 92 7e 11 	sts	0x117E, r13	; 0x80117e <xLastTime.2436+0x1>
    2b26:	e0 92 7f 11 	sts	0x117F, r14	; 0x80117f <xLastTime.2436+0x2>
    2b2a:	f0 92 80 11 	sts	0x1180, r15	; 0x801180 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2b2e:	c7 01       	movw	r24, r14
    2b30:	b6 01       	movw	r22, r12
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	08 95       	ret

00002b40 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2b40:	4f 92       	push	r4
    2b42:	5f 92       	push	r5
    2b44:	6f 92       	push	r6
    2b46:	7f 92       	push	r7
    2b48:	8f 92       	push	r8
    2b4a:	9f 92       	push	r9
    2b4c:	af 92       	push	r10
    2b4e:	bf 92       	push	r11
    2b50:	cf 92       	push	r12
    2b52:	df 92       	push	r13
    2b54:	ef 92       	push	r14
    2b56:	ff 92       	push	r15
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	4b 01       	movw	r8, r22
    2b62:	5c 01       	movw	r10, r24
    2b64:	29 01       	movw	r4, r18
    2b66:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b68:	e0 91 87 11 	lds	r30, 0x1187	; 0x801187 <pxCurrentTimerList>
    2b6c:	f0 91 88 11 	lds	r31, 0x1188	; 0x801188 <pxCurrentTimerList+0x1>
    2b70:	07 80       	ldd	r0, Z+7	; 0x07
    2b72:	f0 85       	ldd	r31, Z+8	; 0x08
    2b74:	e0 2d       	mov	r30, r0
    2b76:	c0 85       	ldd	r28, Z+8	; 0x08
    2b78:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	02 96       	adiw	r24, 0x02	; 2
    2b7e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b82:	8e 89       	ldd	r24, Y+22	; 0x16
    2b84:	82 ff       	sbrs	r24, 2
    2b86:	1b c0       	rjmp	.+54     	; 0x2bbe <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2b88:	4e 85       	ldd	r20, Y+14	; 0x0e
    2b8a:	5f 85       	ldd	r21, Y+15	; 0x0f
    2b8c:	68 89       	ldd	r22, Y+16	; 0x10
    2b8e:	79 89       	ldd	r23, Y+17	; 0x11
    2b90:	48 0d       	add	r20, r8
    2b92:	59 1d       	adc	r21, r9
    2b94:	6a 1d       	adc	r22, r10
    2b96:	7b 1d       	adc	r23, r11
    2b98:	75 01       	movw	r14, r10
    2b9a:	64 01       	movw	r12, r8
    2b9c:	93 01       	movw	r18, r6
    2b9e:	82 01       	movw	r16, r4
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	47 de       	rcall	.-882    	; 0x2832 <prvInsertTimerInActiveList>
    2ba4:	88 23       	and	r24, r24
    2ba6:	69 f0       	breq	.+26     	; 0x2bc2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ba8:	c1 2c       	mov	r12, r1
    2baa:	d1 2c       	mov	r13, r1
    2bac:	76 01       	movw	r14, r12
    2bae:	00 e0       	ldi	r16, 0x00	; 0
    2bb0:	10 e0       	ldi	r17, 0x00	; 0
    2bb2:	a5 01       	movw	r20, r10
    2bb4:	94 01       	movw	r18, r8
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	ce 01       	movw	r24, r28
    2bba:	ce de       	rcall	.-612    	; 0x2958 <xTimerGenericCommand>
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2bbe:	8e 7f       	andi	r24, 0xFE	; 254
    2bc0:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2bc2:	ec 89       	ldd	r30, Y+20	; 0x14
    2bc4:	fd 89       	ldd	r31, Y+21	; 0x15
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	19 95       	eicall
    }
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	ff 90       	pop	r15
    2bd4:	ef 90       	pop	r14
    2bd6:	df 90       	pop	r13
    2bd8:	cf 90       	pop	r12
    2bda:	bf 90       	pop	r11
    2bdc:	af 90       	pop	r10
    2bde:	9f 90       	pop	r9
    2be0:	8f 90       	pop	r8
    2be2:	7f 90       	pop	r7
    2be4:	6f 90       	pop	r6
    2be6:	5f 90       	pop	r5
    2be8:	4f 90       	pop	r4
    2bea:	08 95       	ret

00002bec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2bec:	8f 92       	push	r8
    2bee:	9f 92       	push	r9
    2bf0:	af 92       	push	r10
    2bf2:	bf 92       	push	r11
    2bf4:	cf 92       	push	r12
    2bf6:	df 92       	push	r13
    2bf8:	ef 92       	push	r14
    2bfa:	ff 92       	push	r15
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	1f 92       	push	r1
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	6b 01       	movw	r12, r22
    2c0a:	7c 01       	movw	r14, r24
    2c0c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2c0e:	0e 94 1f 0c 	call	0x183e	; 0x183e <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c12:	ce 01       	movw	r24, r28
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	66 df       	rcall	.-308    	; 0x2ae4 <prvSampleTimeNow>
    2c18:	4b 01       	movw	r8, r22
    2c1a:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	81 11       	cpse	r24, r1
    2c20:	2d c0       	rjmp	.+90     	; 0x2c7c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2c22:	11 11       	cpse	r17, r1
    2c24:	0d c0       	rjmp	.+26     	; 0x2c40 <prvProcessTimerOrBlockTask+0x54>
    2c26:	8c 14       	cp	r8, r12
    2c28:	9d 04       	cpc	r9, r13
    2c2a:	ae 04       	cpc	r10, r14
    2c2c:	bf 04       	cpc	r11, r15
    2c2e:	40 f0       	brcs	.+16     	; 0x2c40 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2c30:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2c34:	a5 01       	movw	r20, r10
    2c36:	94 01       	movw	r18, r8
    2c38:	c7 01       	movw	r24, r14
    2c3a:	b6 01       	movw	r22, r12
    2c3c:	81 df       	rcall	.-254    	; 0x2b40 <prvProcessExpiredTimer>
    2c3e:	20 c0       	rjmp	.+64     	; 0x2c80 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2c40:	11 23       	and	r17, r17
    2c42:	41 f0       	breq	.+16     	; 0x2c54 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2c44:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxOverflowTimerList>
    2c48:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxOverflowTimerList+0x1>
    2c4c:	80 81       	ld	r24, Z
    2c4e:	11 e0       	ldi	r17, 0x01	; 1
    2c50:	81 11       	cpse	r24, r1
    2c52:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2c54:	b7 01       	movw	r22, r14
    2c56:	a6 01       	movw	r20, r12
    2c58:	48 19       	sub	r20, r8
    2c5a:	59 09       	sbc	r21, r9
    2c5c:	6a 09       	sbc	r22, r10
    2c5e:	7b 09       	sbc	r23, r11
    2c60:	21 2f       	mov	r18, r17
    2c62:	80 91 83 11 	lds	r24, 0x1183	; 0x801183 <xTimerQueue>
    2c66:	90 91 84 11 	lds	r25, 0x1184	; 0x801184 <xTimerQueue+0x1>
    2c6a:	0e 94 40 06 	call	0xc80	; 0xc80 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2c6e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskResumeAll>
    2c72:	81 11       	cpse	r24, r1
    2c74:	05 c0       	rjmp	.+10     	; 0x2c80 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2c76:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2c7c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <xTaskResumeAll>
            }
        }
    }
    2c80:	0f 90       	pop	r0
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	cf 90       	pop	r12
    2c90:	bf 90       	pop	r11
    2c92:	af 90       	pop	r10
    2c94:	9f 90       	pop	r9
    2c96:	8f 90       	pop	r8
    2c98:	08 95       	ret

00002c9a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2c9a:	af 92       	push	r10
    2c9c:	bf 92       	push	r11
    2c9e:	cf 92       	push	r12
    2ca0:	df 92       	push	r13
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	28 97       	sbiw	r28, 0x08	; 8
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2cbe:	82 c0       	rjmp	.+260    	; 0x2dc4 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	88 23       	and	r24, r24
    2cc4:	0c f4       	brge	.+2      	; 0x2cc8 <prvProcessReceivedCommands+0x2e>
    2cc6:	7e c0       	rjmp	.+252    	; 0x2dc4 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2cc8:	ae 80       	ldd	r10, Y+6	; 0x06
    2cca:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2ccc:	d5 01       	movw	r26, r10
    2cce:	1c 96       	adiw	r26, 0x0c	; 12
    2cd0:	8d 91       	ld	r24, X+
    2cd2:	9c 91       	ld	r25, X
    2cd4:	1d 97       	sbiw	r26, 0x0d	; 13
    2cd6:	89 2b       	or	r24, r25
    2cd8:	21 f0       	breq	.+8      	; 0x2ce2 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2cda:	c5 01       	movw	r24, r10
    2cdc:	02 96       	adiw	r24, 0x02	; 2
    2cde:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	08 96       	adiw	r24, 0x08	; 8
    2ce6:	fe de       	rcall	.-516    	; 0x2ae4 <prvSampleTimeNow>
    2ce8:	8b 01       	movw	r16, r22
    2cea:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2cec:	e9 81       	ldd	r30, Y+1	; 0x01
    2cee:	0e 2e       	mov	r0, r30
    2cf0:	00 0c       	add	r0, r0
    2cf2:	ff 0b       	sbc	r31, r31
    2cf4:	ea 30       	cpi	r30, 0x0A	; 10
    2cf6:	f1 05       	cpc	r31, r1
    2cf8:	08 f0       	brcs	.+2      	; 0x2cfc <prvProcessReceivedCommands+0x62>
    2cfa:	64 c0       	rjmp	.+200    	; 0x2dc4 <prvProcessReceivedCommands+0x12a>
    2cfc:	88 27       	eor	r24, r24
    2cfe:	ee 58       	subi	r30, 0x8E	; 142
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	8f 4f       	sbci	r24, 0xFF	; 255
    2d04:	0c 94 82 24 	jmp	0x4904	; 0x4904 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d08:	f5 01       	movw	r30, r10
    2d0a:	86 89       	ldd	r24, Z+22	; 0x16
    2d0c:	81 60       	ori	r24, 0x01	; 1
    2d0e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2d10:	ca 80       	ldd	r12, Y+2	; 0x02
    2d12:	db 80       	ldd	r13, Y+3	; 0x03
    2d14:	ec 80       	ldd	r14, Y+4	; 0x04
    2d16:	fd 80       	ldd	r15, Y+5	; 0x05
    2d18:	46 85       	ldd	r20, Z+14	; 0x0e
    2d1a:	57 85       	ldd	r21, Z+15	; 0x0f
    2d1c:	60 89       	ldd	r22, Z+16	; 0x10
    2d1e:	71 89       	ldd	r23, Z+17	; 0x11
    2d20:	4c 0d       	add	r20, r12
    2d22:	5d 1d       	adc	r21, r13
    2d24:	6e 1d       	adc	r22, r14
    2d26:	7f 1d       	adc	r23, r15
    2d28:	c5 01       	movw	r24, r10
    2d2a:	83 dd       	rcall	.-1274   	; 0x2832 <prvInsertTimerInActiveList>
    2d2c:	88 23       	and	r24, r24
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <prvProcessReceivedCommands+0x98>
    2d30:	49 c0       	rjmp	.+146    	; 0x2dc4 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d32:	d5 01       	movw	r26, r10
    2d34:	54 96       	adiw	r26, 0x14	; 20
    2d36:	ed 91       	ld	r30, X+
    2d38:	fc 91       	ld	r31, X
    2d3a:	55 97       	sbiw	r26, 0x15	; 21
    2d3c:	c5 01       	movw	r24, r10
    2d3e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d40:	f5 01       	movw	r30, r10
    2d42:	86 89       	ldd	r24, Z+22	; 0x16
    2d44:	82 ff       	sbrs	r24, 2
    2d46:	3e c0       	rjmp	.+124    	; 0x2dc4 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2d48:	4a 81       	ldd	r20, Y+2	; 0x02
    2d4a:	5b 81       	ldd	r21, Y+3	; 0x03
    2d4c:	6c 81       	ldd	r22, Y+4	; 0x04
    2d4e:	7d 81       	ldd	r23, Y+5	; 0x05
    2d50:	86 85       	ldd	r24, Z+14	; 0x0e
    2d52:	97 85       	ldd	r25, Z+15	; 0x0f
    2d54:	a0 89       	ldd	r26, Z+16	; 0x10
    2d56:	b1 89       	ldd	r27, Z+17	; 0x11
    2d58:	9a 01       	movw	r18, r20
    2d5a:	ab 01       	movw	r20, r22
    2d5c:	28 0f       	add	r18, r24
    2d5e:	39 1f       	adc	r19, r25
    2d60:	4a 1f       	adc	r20, r26
    2d62:	5b 1f       	adc	r21, r27
    2d64:	c1 2c       	mov	r12, r1
    2d66:	d1 2c       	mov	r13, r1
    2d68:	76 01       	movw	r14, r12
    2d6a:	00 e0       	ldi	r16, 0x00	; 0
    2d6c:	10 e0       	ldi	r17, 0x00	; 0
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	c5 01       	movw	r24, r10
    2d72:	f2 dd       	rcall	.-1052   	; 0x2958 <xTimerGenericCommand>
    2d74:	27 c0       	rjmp	.+78     	; 0x2dc4 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d76:	d5 01       	movw	r26, r10
    2d78:	56 96       	adiw	r26, 0x16	; 22
    2d7a:	8c 91       	ld	r24, X
    2d7c:	56 97       	sbiw	r26, 0x16	; 22
    2d7e:	8e 7f       	andi	r24, 0xFE	; 254
    2d80:	56 96       	adiw	r26, 0x16	; 22
    2d82:	8c 93       	st	X, r24
                        break;
    2d84:	1f c0       	rjmp	.+62     	; 0x2dc4 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d86:	f5 01       	movw	r30, r10
    2d88:	86 89       	ldd	r24, Z+22	; 0x16
    2d8a:	81 60       	ori	r24, 0x01	; 1
    2d8c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2d8e:	4a 81       	ldd	r20, Y+2	; 0x02
    2d90:	5b 81       	ldd	r21, Y+3	; 0x03
    2d92:	6c 81       	ldd	r22, Y+4	; 0x04
    2d94:	7d 81       	ldd	r23, Y+5	; 0x05
    2d96:	46 87       	std	Z+14, r20	; 0x0e
    2d98:	57 87       	std	Z+15, r21	; 0x0f
    2d9a:	60 8b       	std	Z+16, r22	; 0x10
    2d9c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2d9e:	40 0f       	add	r20, r16
    2da0:	51 1f       	adc	r21, r17
    2da2:	62 1f       	adc	r22, r18
    2da4:	73 1f       	adc	r23, r19
    2da6:	68 01       	movw	r12, r16
    2da8:	79 01       	movw	r14, r18
    2daa:	c5 01       	movw	r24, r10
    2dac:	42 dd       	rcall	.-1404   	; 0x2832 <prvInsertTimerInActiveList>
                        break;
    2dae:	0a c0       	rjmp	.+20     	; 0x2dc4 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2db0:	f5 01       	movw	r30, r10
    2db2:	86 89       	ldd	r24, Z+22	; 0x16
    2db4:	81 fd       	sbrc	r24, 1
    2db6:	04 c0       	rjmp	.+8      	; 0x2dc0 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2db8:	c5 01       	movw	r24, r10
    2dba:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <vPortFree>
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2dc0:	8e 7f       	andi	r24, 0xFE	; 254
    2dc2:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	a9 01       	movw	r20, r18
    2dca:	be 01       	movw	r22, r28
    2dcc:	6f 5f       	subi	r22, 0xFF	; 255
    2dce:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd0:	80 91 83 11 	lds	r24, 0x1183	; 0x801183 <xTimerQueue>
    2dd4:	90 91 84 11 	lds	r25, 0x1184	; 0x801184 <xTimerQueue+0x1>
    2dd8:	0e 94 b1 05 	call	0xb62	; 0xb62 <xQueueReceive>
    2ddc:	81 11       	cpse	r24, r1
    2dde:	70 cf       	rjmp	.-288    	; 0x2cc0 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2de0:	28 96       	adiw	r28, 0x08	; 8
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	ff 90       	pop	r15
    2df6:	ef 90       	pop	r14
    2df8:	df 90       	pop	r13
    2dfa:	cf 90       	pop	r12
    2dfc:	bf 90       	pop	r11
    2dfe:	af 90       	pop	r10
    2e00:	08 95       	ret

00002e02 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2e02:	08 95       	ret

00002e04 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2e04:	84 b1       	in	r24, 0x04	; 4
    2e06:	80 68       	ori	r24, 0x80	; 128
    2e08:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2e0a:	85 b1       	in	r24, 0x05	; 5
    2e0c:	80 68       	ori	r24, 0x80	; 128
    2e0e:	85 b9       	out	0x05, r24	; 5
    2e10:	08 95       	ret

00002e12 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2e12:	83 b1       	in	r24, 0x03	; 3
    2e14:	80 68       	ori	r24, 0x80	; 128
    2e16:	83 b9       	out	0x03, r24	; 3
    2e18:	08 95       	ret

00002e1a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2e1a:	f4 df       	rcall	.-24     	; 0x2e04 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e1c:	2f ef       	ldi	r18, 0xFF	; 255
    2e1e:	80 e7       	ldi	r24, 0x70	; 112
    2e20:	92 e0       	ldi	r25, 0x02	; 2
    2e22:	21 50       	subi	r18, 0x01	; 1
    2e24:	80 40       	sbci	r24, 0x00	; 0
    2e26:	90 40       	sbci	r25, 0x00	; 0
    2e28:	e1 f7       	brne	.-8      	; 0x2e22 <vApplicationMallocFailedHook+0x8>
    2e2a:	00 c0       	rjmp	.+0      	; 0x2e2c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2e2c:	00 00       	nop
    2e2e:	f1 df       	rcall	.-30     	; 0x2e12 <prvBlinkMainLed>
    2e30:	f5 cf       	rjmp	.-22     	; 0x2e1c <vApplicationMallocFailedHook+0x2>

00002e32 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2e32:	e8 df       	rcall	.-48     	; 0x2e04 <prvSetMainLedOn>
    2e34:	2f ef       	ldi	r18, 0xFF	; 255
    2e36:	87 ea       	ldi	r24, 0xA7	; 167
    2e38:	91 e6       	ldi	r25, 0x61	; 97
    2e3a:	21 50       	subi	r18, 0x01	; 1
    2e3c:	80 40       	sbci	r24, 0x00	; 0
    2e3e:	90 40       	sbci	r25, 0x00	; 0
    2e40:	e1 f7       	brne	.-8      	; 0x2e3a <vApplicationStackOverflowHook+0x8>
    2e42:	00 c0       	rjmp	.+0      	; 0x2e44 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2e44:	00 00       	nop
    2e46:	e5 df       	rcall	.-54     	; 0x2e12 <prvBlinkMainLed>
    2e48:	f5 cf       	rjmp	.-22     	; 0x2e34 <vApplicationStackOverflowHook+0x2>

00002e4a <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    2e54:	c4 d2       	rcall	.+1416   	; 0x33de <lora_driver_rn2483FactoryReset>
    2e56:	40 d5       	rcall	.+2688   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2e58:	9f 93       	push	r25
    2e5a:	8f 93       	push	r24
    2e5c:	8a e4       	ldi	r24, 0x4A	; 74
    2e5e:	92 e0       	ldi	r25, 0x02	; 2
    2e60:	9f 93       	push	r25
    2e62:	8f 93       	push	r24
    2e64:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    2e68:	38 d4       	rcall	.+2160   	; 0x36da <lora_driver_configureToEu868>
    2e6a:	36 d5       	rcall	.+2668   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2e6c:	9f 93       	push	r25
    2e6e:	8f 93       	push	r24
    2e70:	8d e5       	ldi	r24, 0x5D	; 93
    2e72:	92 e0       	ldi	r25, 0x02	; 2
    2e74:	9f 93       	push	r25
    2e76:	8f 93       	push	r24
    2e78:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2e7c:	85 eb       	ldi	r24, 0xB5	; 181

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    2e7e:	91 e1       	ldi	r25, 0x11	; 17
    2e80:	c0 d2       	rcall	.+1408   	; 0x3402 <lora_driver_getRn2483Hweui>
    2e82:	2a d5       	rcall	.+2644   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2e84:	c5 eb       	ldi	r28, 0xB5	; 181
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    2e86:	d1 e1       	ldi	r29, 0x11	; 17
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	9f 93       	push	r25
    2e8e:	8f 93       	push	r24
    2e90:	86 e7       	ldi	r24, 0x76	; 118
    2e92:	92 e0       	ldi	r25, 0x02	; 2
    2e94:	9f 93       	push	r25
    2e96:	8f 93       	push	r24
    2e98:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2e9c:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    2e9e:	cd d2       	rcall	.+1434   	; 0x343a <lora_driver_setDeviceIdentifier>
    2ea0:	1b d5       	rcall	.+2614   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2ea2:	9f 93       	push	r25
    2ea4:	8f 93       	push	r24
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	8a e8       	ldi	r24, 0x8A	; 138
    2eac:	92 e0       	ldi	r25, 0x02	; 2
    2eae:	9f 93       	push	r25
    2eb0:	8f 93       	push	r24
    2eb2:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2eb6:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    2eb8:	6f e9       	ldi	r22, 0x9F	; 159
    2eba:	72 e0       	ldi	r23, 0x02	; 2
    2ebc:	80 ec       	ldi	r24, 0xC0	; 192
    2ebe:	92 e0       	ldi	r25, 0x02	; 2
    2ec0:	ea d4       	rcall	.+2516   	; 0x3896 <lora_driver_setOtaaIdentity>
    2ec2:	0a d5       	rcall	.+2580   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2ec4:	9f 93       	push	r25
    2ec6:	8f 93       	push	r24
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	8f e9       	ldi	r24, 0x9F	; 159
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	9f 93       	push	r25
    2ed2:	8f 93       	push	r24
    2ed4:	80 ec       	ldi	r24, 0xC0	; 192
    2ed6:	92 e0       	ldi	r25, 0x02	; 2
    2ed8:	9f 93       	push	r25
    2eda:	8f 93       	push	r24
    2edc:	81 ed       	ldi	r24, 0xD1	; 209
    2ede:	92 e0       	ldi	r25, 0x02	; 2
    2ee0:	9f 93       	push	r25
    2ee2:	8f 93       	push	r24
    2ee4:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2ee8:	db d2       	rcall	.+1462   	; 0x34a0 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    2eea:	f6 d4       	rcall	.+2540   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2eec:	9f 93       	push	r25
    2eee:	8f 93       	push	r24
    2ef0:	87 e0       	ldi	r24, 0x07	; 7
    2ef2:	93 e0       	ldi	r25, 0x03	; 3
    2ef4:	9f 93       	push	r25
    2ef6:	8f 93       	push	r24
    2ef8:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2efc:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    2efe:	9e b7       	in	r25, 0x3e	; 62
    2f00:	82 96       	adiw	r24, 0x22	; 34
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	9e bf       	out	0x3e, r25	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	8d bf       	out	0x3d, r24	; 61
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	c2 d3       	rcall	.+1924   	; 0x3694 <lora_driver_setAdaptiveDataRate>
    2f10:	e3 d4       	rcall	.+2502   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2f12:	9f 93       	push	r25
    2f14:	8f 93       	push	r24
    2f16:	86 e1       	ldi	r24, 0x16	; 22
    2f18:	93 e0       	ldi	r25, 0x03	; 3
    2f1a:	9f 93       	push	r25
    2f1c:	8f 93       	push	r24
    2f1e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2f22:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    2f24:	91 e0       	ldi	r25, 0x01	; 1
    2f26:	c1 d3       	rcall	.+1922   	; 0x36aa <lora_driver_setReceiveDelay>
    2f28:	d7 d4       	rcall	.+2478   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2f2a:	9f 93       	push	r25
    2f2c:	8f 93       	push	r24
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	8f 93       	push	r24
    2f32:	84 ef       	ldi	r24, 0xF4	; 244
    2f34:	8f 93       	push	r24
    2f36:	87 e3       	ldi	r24, 0x37	; 55
    2f38:	93 e0       	ldi	r25, 0x03	; 3
    2f3a:	9f 93       	push	r25
    2f3c:	8f 93       	push	r24
    2f3e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2f42:	8d b7       	in	r24, 0x3d	; 61
    2f44:	9e b7       	in	r25, 0x3e	; 62
    2f46:	0a 96       	adiw	r24, 0x0a	; 10
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	9e bf       	out	0x3e, r25	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	8d bf       	out	0x3d, r24	; 61
    2f52:	da e0       	ldi	r29, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    2f54:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    2f56:	aa d2       	rcall	.+1364   	; 0x34ac <lora_driver_join>
    2f58:	c8 2f       	mov	r28, r24
    2f5a:	be d4       	rcall	.+2428   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    2f5c:	c8 30       	cpi	r28, 0x08	; 8
		
		("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    2f5e:	99 f0       	breq	.+38     	; 0x2f86 <_lora_setup+0x13c>
    2f60:	80 e0       	ldi	r24, 0x00	; 0

		if ( rc != LORA_ACCEPTED)
    2f62:	0e 94 58 22 	call	0x44b0	; 0x44b0 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    2f66:	87 e5       	ldi	r24, 0x57	; 87
    2f68:	93 e0       	ldi	r25, 0x03	; 3
    2f6a:	9f 93       	push	r25
			printf("huita");
    2f6c:	8f 93       	push	r24
    2f6e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2f72:	66 e3       	ldi	r22, 0x36	; 54
    2f74:	71 e0       	ldi	r23, 0x01	; 1
    2f76:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vTaskDelay>
    2f7e:	d1 50       	subi	r29, 0x01	; 1
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    2f84:	39 f7       	brne	.-50     	; 0x2f54 <_lora_setup+0x10a>
    2f86:	c8 30       	cpi	r28, 0x08	; 8
    2f88:	61 f4       	brne	.+24     	; 0x2fa2 <_lora_setup+0x158>
    2f8a:	8d e5       	ldi	r24, 0x5D	; 93

	if (rc == LORA_ACCEPTED)
    2f8c:	93 e0       	ldi	r25, 0x03	; 3
    2f8e:	9f 93       	push	r25
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("zaibisi");
    2f90:	8f 93       	push	r24
    2f92:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	0e 94 3a 22 	call	0x4474	; 0x4474 <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	09 c0       	rjmp	.+18     	; 0x2fb4 <_lora_setup+0x16a>
		while (1)
		{
			taskYIELD();
		}
	}
}
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	0e 94 49 22 	call	0x4492	; 0x4492 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	0e 94 17 22 	call	0x442e	; 0x442e <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    2fae:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    2fb2:	fd cf       	rjmp	.-6      	; 0x2fae <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	08 95       	ret

00002fba <lora_handler_task>:
		}
	}
}
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <lora_handler_task+0x6>

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    2fc0:	1f 92       	push	r1
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	fc d1       	rcall	.+1016   	; 0x33c2 <lora_driver_resetRn2483>
	vTaskDelay(2);
    2fca:	62 e0       	ldi	r22, 0x02	; 2
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vTaskDelay>
	lora_driver_resetRn2483(0);
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	f4 d1       	rcall	.+1000   	; 0x33c2 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    2fda:	66 e9       	ldi	r22, 0x96	; 150
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    2fe6:	a6 d1       	rcall	.+844    	; 0x3334 <lora_driver_flushBuffers>

	printf("inainte de setup");
    2fe8:	85 e6       	ldi	r24, 0x65	; 101
    2fea:	93 e0       	ldi	r25, 0x03	; 3
    2fec:	9f 93       	push	r25
    2fee:	8f 93       	push	r24
    2ff0:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
	_lora_setup();
    2ff4:	2a df       	rcall	.-428    	; 0x2e4a <_lora_setup>
	printf("dupa setup");
    2ff6:	86 e7       	ldi	r24, 0x76	; 118
    2ff8:	93 e0       	ldi	r25, 0x03	; 3
    2ffa:	9f 93       	push	r25
    2ffc:	8f 93       	push	r24
    2ffe:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>

	_uplink_payload.len = 6;
    3002:	ef e9       	ldi	r30, 0x9F	; 159
    3004:	f1 e1       	ldi	r31, 0x11	; 17
    3006:	86 e0       	ldi	r24, 0x06	; 6
    3008:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	80 83       	st	Z, r24

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(3000000UL); // Upload message every 5 minutes (300000 ms)
	printf("au trecut 30 secunde");
    300e:	81 e8       	ldi	r24, 0x81	; 129
    3010:	93 e0       	ldi	r25, 0x03	; 3
    3012:	9f 93       	push	r25
    3014:	8f 93       	push	r24
    3016:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
	xLastWakeTime = xTaskGetTickCount();
    301a:	0e 94 25 0c 	call	0x184a	; 0x184a <xTaskGetTickCount>
    301e:	69 83       	std	Y+1, r22	; 0x01
    3020:	7a 83       	std	Y+2, r23	; 0x02
    3022:	8b 83       	std	Y+3, r24	; 0x03
    3024:	9c 83       	std	Y+4, r25	; 0x04
	printf("duoa getticketcount");
    3026:	86 e9       	ldi	r24, 0x96	; 150
    3028:	93 e0       	ldi	r25, 0x03	; 3
    302a:	9f 93       	push	r25
    302c:	8f 93       	push	r24
    302e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
	
	for(;;)
	{
		printf("inainte de taskdelayuntull");
    303c:	8a ea       	ldi	r24, 0xAA	; 170
    303e:	93 e0       	ldi	r25, 0x03	; 3
    3040:	9f 93       	push	r25
    3042:	8f 93       	push	r24
    3044:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3048:	40 e9       	ldi	r20, 0x90	; 144
    304a:	56 ed       	ldi	r21, 0xD6	; 214
    304c:	62 e0       	ldi	r22, 0x02	; 2
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	ce 01       	movw	r24, r28
    3052:	01 96       	adiw	r24, 0x01	; 1
    3054:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xTaskDelayUntil>

		printf("dupa taskdelayuntull");
    3058:	85 ec       	ldi	r24, 0xC5	; 197
    305a:	93 e0       	ldi	r25, 0x03	; 3
    305c:	9f 93       	push	r25
    305e:	8f 93       	push	r24
    3060:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    3064:	ef e9       	ldi	r30, 0x9F	; 159
    3066:	f1 e1       	ldi	r31, 0x11	; 17
    3068:	80 e3       	ldi	r24, 0x30	; 48
    306a:	82 83       	std	Z+2, r24	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
    306c:	89 e3       	ldi	r24, 0x39	; 57
    306e:	83 83       	std	Z+3, r24	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	84 83       	std	Z+4, r24	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
    3074:	83 ea       	ldi	r24, 0xA3	; 163
    3076:	85 83       	std	Z+5, r24	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3078:	84 e0       	ldi	r24, 0x04	; 4
    307a:	86 83       	std	Z+6, r24	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    307c:	8a e1       	ldi	r24, 0x1A	; 26
    307e:	87 83       	std	Z+7, r24	; 0x07

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3080:	83 e0       	ldi	r24, 0x03	; 3
    3082:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3086:	6f e9       	ldi	r22, 0x9F	; 159
    3088:	71 e1       	ldi	r23, 0x11	; 17
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	38 d2       	rcall	.+1136   	; 0x34fe <lora_driver_sendUploadMessage>
    308e:	24 d4       	rcall	.+2120   	; 0x38d8 <lora_driver_mapReturnCodeToText>
    3090:	9f 93       	push	r25
    3092:	8f 93       	push	r24
    3094:	8a ed       	ldi	r24, 0xDA	; 218
    3096:	93 e0       	ldi	r25, 0x03	; 3
    3098:	9f 93       	push	r25
    309a:	8f 93       	push	r24
    309c:	0e 94 28 26 	call	0x4c50	; 0x4c50 <printf>
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	c8 cf       	rjmp	.-112    	; 0x303c <lora_handler_task+0x82>

000030ac <lora_handler_initialise>:
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    30ac:	ef 92       	push	r14
    30ae:	ff 92       	push	r15
    30b0:	0f 93       	push	r16
	xTaskCreate(
    30b2:	e1 2c       	mov	r14, r1
    30b4:	f1 2c       	mov	r15, r1
    30b6:	08 2f       	mov	r16, r24
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	48 e8       	ldi	r20, 0x88	; 136
    30be:	51 e0       	ldi	r21, 0x01	; 1
    30c0:	6f ee       	ldi	r22, 0xEF	; 239
    30c2:	73 e0       	ldi	r23, 0x03	; 3
    30c4:	8d ed       	ldi	r24, 0xDD	; 221
    30c6:	97 e1       	ldi	r25, 0x17	; 23
    30c8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    30cc:	0f 91       	pop	r16
    30ce:	ff 90       	pop	r15
    30d0:	ef 90       	pop	r14
    30d2:	08 95       	ret

000030d4 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    30d4:	81 b1       	in	r24, 0x01	; 1
    30d6:	81 68       	ori	r24, 0x81	; 129
    30d8:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	0e 94 9f 20 	call	0x413e	; 0x413e <stdio_initialise>
	// Let's create some tasks
	//create_tasks_and_semaphores();

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    30e0:	85 e0       	ldi	r24, 0x05	; 5
    30e2:	0e 94 a6 21 	call	0x434c	; 0x434c <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	2a d1       	rcall	.+596    	; 0x3342 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    30ee:	83 e0       	ldi	r24, 0x03	; 3
    30f0:	dd cf       	rjmp	.-70     	; 0x30ac <lora_handler_initialise>
    30f2:	08 95       	ret

000030f4 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    30f4:	ef df       	rcall	.-34     	; 0x30d4 <initialiseSystem>
	printf("Program Started!!\n");
    30f6:	82 e0       	ldi	r24, 0x02	; 2
    30f8:	94 e0       	ldi	r25, 0x04	; 4
    30fa:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    30fe:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <vTaskStartScheduler>
    3102:	ff cf       	rjmp	.-2      	; 0x3102 <main+0xe>

00003104 <_serialCallBack>:
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	1f 92       	push	r1
    310e:	1f 92       	push	r1
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	8c 01       	movw	r16, r24
    3116:	19 82       	std	Y+1, r1	; 0x01
    3118:	2d c0       	rjmp	.+90     	; 0x3174 <_serialCallBack+0x70>
    311a:	e0 91 7d 12 	lds	r30, 0x127D	; 0x80127d <rec_buf_inp.2878>
    311e:	ec 32       	cpi	r30, 0x2C	; 44
    3120:	50 f4       	brcc	.+20     	; 0x3136 <_serialCallBack+0x32>
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	8e 0f       	add	r24, r30
    3126:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <rec_buf_inp.2878>
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	e1 55       	subi	r30, 0x51	; 81
    312e:	fd 4e       	sbci	r31, 0xED	; 237
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	80 83       	st	Z, r24
    3134:	02 c0       	rjmp	.+4      	; 0x313a <_serialCallBack+0x36>
    3136:	10 92 7d 12 	sts	0x127D, r1	; 0x80127d <rec_buf_inp.2878>
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	8a 30       	cpi	r24, 0x0A	; 10
    313e:	d1 f4       	brne	.+52     	; 0x3174 <_serialCallBack+0x70>
    3140:	40 91 7d 12 	lds	r20, 0x127D	; 0x80127d <rec_buf_inp.2878>
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	fa 01       	movw	r30, r20
    3148:	e3 55       	subi	r30, 0x53	; 83
    314a:	fd 4e       	sbci	r31, 0xED	; 237
    314c:	10 82       	st	Z, r1
    314e:	41 50       	subi	r20, 0x01	; 1
    3150:	51 09       	sbc	r21, r1
    3152:	9e 01       	movw	r18, r28
    3154:	2f 5f       	subi	r18, 0xFF	; 255
    3156:	3f 4f       	sbci	r19, 0xFF	; 255
    3158:	6f ea       	ldi	r22, 0xAF	; 175
    315a:	72 e1       	ldi	r23, 0x12	; 18
    315c:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <_serialReplyBufferHandle>
    3160:	90 91 81 12 	lds	r25, 0x1281	; 0x801281 <_serialReplyBufferHandle+0x1>
    3164:	0e 94 c4 08 	call	0x1188	; 0x1188 <xStreamBufferSendFromISR>
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	81 11       	cpse	r24, r1
    316c:	0e 94 de 02 	call	0x5bc	; 0x5bc <vPortYield>
    3170:	10 92 7d 12 	sts	0x127D, r1	; 0x80127d <rec_buf_inp.2878>
    3174:	be 01       	movw	r22, r28
    3176:	6e 5f       	subi	r22, 0xFE	; 254
    3178:	7f 4f       	sbci	r23, 0xFF	; 255
    317a:	c8 01       	movw	r24, r16
    317c:	4a d5       	rcall	.+2708   	; 0x3c12 <serial_getByte>
    317e:	88 23       	and	r24, r24
    3180:	61 f2       	breq	.-104    	; 0x311a <_serialCallBack+0x16>
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	1f 91       	pop	r17
    318c:	0f 91       	pop	r16
    318e:	08 95       	ret

00003190 <_uploadMessage>:
    3190:	0f 93       	push	r16
    3192:	1f 93       	push	r17
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    3198:	8c 01       	movw	r16, r24
    319a:	eb 01       	movw	r28, r22
    319c:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <_serialReplyBufferHandle>
    31a0:	90 91 81 12 	lds	r25, 0x1281	; 0x801281 <_serialReplyBufferHandle+0x1>
    31a4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <xStreamBufferReset>
    31a8:	b8 01       	movw	r22, r16
    31aa:	89 e1       	ldi	r24, 0x19	; 25
    31ac:	92 e1       	ldi	r25, 0x12	; 18
    31ae:	0e 94 09 26 	call	0x4c12	; 0x4c12 <strcpy>
    31b2:	20 97       	sbiw	r28, 0x00	; 0
    31b4:	79 f0       	breq	.+30     	; 0x31d4 <_uploadMessage+0x44>
    31b6:	e9 e1       	ldi	r30, 0x19	; 25
    31b8:	f2 e1       	ldi	r31, 0x12	; 18
    31ba:	01 90       	ld	r0, Z+
    31bc:	00 20       	and	r0, r0
    31be:	e9 f7       	brne	.-6      	; 0x31ba <_uploadMessage+0x2a>
    31c0:	31 97       	sbiw	r30, 0x01	; 1
    31c2:	80 e2       	ldi	r24, 0x20	; 32
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	80 83       	st	Z, r24
    31ca:	be 01       	movw	r22, r28
    31cc:	89 e1       	ldi	r24, 0x19	; 25
    31ce:	92 e1       	ldi	r25, 0x12	; 18
    31d0:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <strcat>
    31d4:	e9 e1       	ldi	r30, 0x19	; 25
    31d6:	f2 e1       	ldi	r31, 0x12	; 18
    31d8:	df 01       	movw	r26, r30
    31da:	0d 90       	ld	r0, X+
    31dc:	00 20       	and	r0, r0
    31de:	e9 f7       	brne	.-6      	; 0x31da <_uploadMessage+0x4a>
    31e0:	11 97       	sbiw	r26, 0x01	; 1
    31e2:	8d e0       	ldi	r24, 0x0D	; 13
    31e4:	9a e0       	ldi	r25, 0x0A	; 10
    31e6:	11 96       	adiw	r26, 0x01	; 1
    31e8:	9c 93       	st	X, r25
    31ea:	8e 93       	st	-X, r24
    31ec:	12 96       	adiw	r26, 0x02	; 2
    31ee:	1c 92       	st	X, r1
    31f0:	01 90       	ld	r0, Z+
    31f2:	00 20       	and	r0, r0
    31f4:	e9 f7       	brne	.-6      	; 0x31f0 <_uploadMessage+0x60>
    31f6:	31 97       	sbiw	r30, 0x01	; 1
    31f8:	e9 51       	subi	r30, 0x19	; 25
    31fa:	f2 41       	sbci	r31, 0x12	; 18
    31fc:	ae 2f       	mov	r26, r30
    31fe:	89 e1       	ldi	r24, 0x19	; 25
    3200:	92 e1       	ldi	r25, 0x12	; 18
    3202:	ac 01       	movw	r20, r24
    3204:	6a 2f       	mov	r22, r26
    3206:	80 91 82 12 	lds	r24, 0x1282	; 0x801282 <_rn2483_serial>
    320a:	90 91 83 12 	lds	r25, 0x1283	; 0x801283 <_rn2483_serial+0x1>
    320e:	ac d4       	rcall	.+2392   	; 0x3b68 <serial_sendBytes>
    3210:	81 11       	cpse	r24, r1
    3212:	11 c0       	rjmp	.+34     	; 0x3236 <_uploadMessage+0xa6>
    3214:	08 e2       	ldi	r16, 0x28	; 40
    3216:	15 e0       	ldi	r17, 0x05	; 5
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	4d e2       	ldi	r20, 0x2D	; 45
    321e:	50 e0       	ldi	r21, 0x00	; 0
    3220:	69 e0       	ldi	r22, 0x09	; 9
    3222:	73 e1       	ldi	r23, 0x13	; 19
    3224:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <_serialReplyBufferHandle>
    3228:	90 91 81 12 	lds	r25, 0x1281	; 0x801281 <_serialReplyBufferHandle+0x1>
    322c:	0e 94 08 09 	call	0x1210	; 0x1210 <xStreamBufferReceive>
    3230:	89 e0       	ldi	r24, 0x09	; 9
    3232:	93 e1       	ldi	r25, 0x13	; 19
    3234:	02 c0       	rjmp	.+4      	; 0x323a <_uploadMessage+0xaa>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	08 95       	ret

00003244 <_reply2ReturnCode>:
    3244:	2f 92       	push	r2
    3246:	3f 92       	push	r3
    3248:	4f 92       	push	r4
    324a:	5f 92       	push	r5
    324c:	6f 92       	push	r6
    324e:	7f 92       	push	r7
    3250:	8f 92       	push	r8
    3252:	9f 92       	push	r9
    3254:	af 92       	push	r10
    3256:	bf 92       	push	r11
    3258:	cf 92       	push	r12
    325a:	df 92       	push	r13
    325c:	ef 92       	push	r14
    325e:	ff 92       	push	r15
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	cf 93       	push	r28
    3266:	df 93       	push	r29
    3268:	5c 01       	movw	r10, r24
    326a:	fc 01       	movw	r30, r24
    326c:	01 90       	ld	r0, Z+
    326e:	00 20       	and	r0, r0
    3270:	e9 f7       	brne	.-6      	; 0x326c <_reply2ReturnCode+0x28>
    3272:	31 97       	sbiw	r30, 0x01	; 1
    3274:	6f 01       	movw	r12, r30
    3276:	c8 1a       	sub	r12, r24
    3278:	d9 0a       	sbc	r13, r25
    327a:	5c 2c       	mov	r5, r12
    327c:	0f 2e       	mov	r0, r31
    327e:	fd ea       	ldi	r31, 0xAD	; 173
    3280:	8f 2e       	mov	r8, r31
    3282:	f6 e0       	ldi	r31, 0x06	; 6
    3284:	9f 2e       	mov	r9, r31
    3286:	f0 2d       	mov	r31, r0
    3288:	e1 2c       	mov	r14, r1
    328a:	f1 2c       	mov	r15, r1
    328c:	4c 2c       	mov	r4, r12
    328e:	37 01       	movw	r6, r14
    3290:	f4 01       	movw	r30, r8
    3292:	01 81       	ldd	r16, Z+1	; 0x01
    3294:	12 81       	ldd	r17, Z+2	; 0x02
    3296:	e8 01       	movw	r28, r16
    3298:	09 90       	ld	r0, Y+
    329a:	00 20       	and	r0, r0
    329c:	e9 f7       	brne	.-6      	; 0x3298 <_reply2ReturnCode+0x54>
    329e:	21 97       	sbiw	r28, 0x01	; 1
    32a0:	c0 1b       	sub	r28, r16
    32a2:	d1 0b       	sbc	r29, r17
    32a4:	3c 2e       	mov	r3, r28
    32a6:	f9 e0       	ldi	r31, 0x09	; 9
    32a8:	cf 16       	cp	r12, r31
    32aa:	d1 04       	cpc	r13, r1
    32ac:	58 f0       	brcs	.+22     	; 0x32c4 <_reply2ReturnCode+0x80>
    32ae:	f4 01       	movw	r30, r8
    32b0:	20 80       	ld	r2, Z
    32b2:	fe e0       	ldi	r31, 0x0E	; 14
    32b4:	2f 12       	cpse	r2, r31
    32b6:	06 c0       	rjmp	.+12     	; 0x32c4 <_reply2ReturnCode+0x80>
    32b8:	b8 01       	movw	r22, r16
    32ba:	c5 01       	movw	r24, r10
    32bc:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <strcasestr>
    32c0:	89 2b       	or	r24, r25
    32c2:	09 f5       	brne	.+66     	; 0x3306 <_reply2ReturnCode+0xc2>
    32c4:	44 2d       	mov	r20, r4
    32c6:	35 14       	cp	r3, r5
    32c8:	08 f4       	brcc	.+2      	; 0x32cc <_reply2ReturnCode+0x88>
    32ca:	4c 2f       	mov	r20, r28
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	b8 01       	movw	r22, r16
    32d0:	c5 01       	movw	r24, r10
    32d2:	0e 94 10 26 	call	0x4c20	; 0x4c20 <strncasecmp>
    32d6:	89 2b       	or	r24, r25
    32d8:	49 f4       	brne	.+18     	; 0x32ec <_reply2ReturnCode+0xa8>
    32da:	f3 01       	movw	r30, r6
    32dc:	ee 0f       	add	r30, r30
    32de:	ff 1f       	adc	r31, r31
    32e0:	e6 0d       	add	r30, r6
    32e2:	f7 1d       	adc	r31, r7
    32e4:	e3 55       	subi	r30, 0x53	; 83
    32e6:	f9 4f       	sbci	r31, 0xF9	; 249
    32e8:	20 80       	ld	r2, Z
    32ea:	0d c0       	rjmp	.+26     	; 0x3306 <_reply2ReturnCode+0xc2>
    32ec:	8f ef       	ldi	r24, 0xFF	; 255
    32ee:	e8 1a       	sub	r14, r24
    32f0:	f8 0a       	sbc	r15, r24
    32f2:	e3 e0       	ldi	r30, 0x03	; 3
    32f4:	8e 0e       	add	r8, r30
    32f6:	91 1c       	adc	r9, r1
    32f8:	f1 e1       	ldi	r31, 0x11	; 17
    32fa:	ef 16       	cp	r14, r31
    32fc:	f1 04       	cpc	r15, r1
    32fe:	39 f6       	brne	.-114    	; 0x328e <_reply2ReturnCode+0x4a>
    3300:	68 94       	set
    3302:	22 24       	eor	r2, r2
    3304:	24 f8       	bld	r2, 4
    3306:	82 2d       	mov	r24, r2
    3308:	df 91       	pop	r29
    330a:	cf 91       	pop	r28
    330c:	1f 91       	pop	r17
    330e:	0f 91       	pop	r16
    3310:	ff 90       	pop	r15
    3312:	ef 90       	pop	r14
    3314:	df 90       	pop	r13
    3316:	cf 90       	pop	r12
    3318:	bf 90       	pop	r11
    331a:	af 90       	pop	r10
    331c:	9f 90       	pop	r9
    331e:	8f 90       	pop	r8
    3320:	7f 90       	pop	r7
    3322:	6f 90       	pop	r6
    3324:	5f 90       	pop	r5
    3326:	4f 90       	pop	r4
    3328:	3f 90       	pop	r3
    332a:	2f 90       	pop	r2
    332c:	08 95       	ret

0000332e <_uploadMessageRc>:
    332e:	30 df       	rcall	.-416    	; 0x3190 <_uploadMessage>
    3330:	89 cf       	rjmp	.-238    	; 0x3244 <_reply2ReturnCode>
    3332:	08 95       	ret

00003334 <lora_driver_flushBuffers>:
    3334:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <_serialReplyBufferHandle>
    3338:	90 91 81 12 	lds	r25, 0x1281	; 0x801281 <_serialReplyBufferHandle+0x1>
    333c:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <xStreamBufferReset>
    3340:	08 95       	ret

00003342 <lora_driver_initialise>:
    3342:	8f 92       	push	r8
    3344:	9f 92       	push	r9
    3346:	af 92       	push	r10
    3348:	cf 92       	push	r12
    334a:	ef 92       	push	r14
    334c:	0f 93       	push	r16
    334e:	1f 93       	push	r17
    3350:	cf 93       	push	r28
    3352:	c8 2f       	mov	r28, r24
    3354:	8b 01       	movw	r16, r22
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	88 ec       	ldi	r24, 0xC8	; 200
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 9f 07 	call	0xf3e	; 0xf3e <xStreamBufferGenericCreate>
    3364:	90 93 81 12 	sts	0x1281, r25	; 0x801281 <_serialReplyBufferHandle+0x1>
    3368:	80 93 80 12 	sts	0x1280, r24	; 0x801280 <_serialReplyBufferHandle>
    336c:	10 93 7f 12 	sts	0x127F, r17	; 0x80127f <_downlinkMessageBuffer+0x1>
    3370:	00 93 7e 12 	sts	0x127E, r16	; 0x80127e <_downlinkMessageBuffer>
    3374:	0f 2e       	mov	r0, r31
    3376:	f2 e8       	ldi	r31, 0x82	; 130
    3378:	8f 2e       	mov	r8, r31
    337a:	f8 e1       	ldi	r31, 0x18	; 24
    337c:	9f 2e       	mov	r9, r31
    337e:	f0 2d       	mov	r31, r0
    3380:	68 94       	set
    3382:	aa 24       	eor	r10, r10
    3384:	a6 f8       	bld	r10, 6
    3386:	68 94       	set
    3388:	cc 24       	eor	r12, r12
    338a:	c6 f8       	bld	r12, 6
    338c:	e1 2c       	mov	r14, r1
    338e:	00 e0       	ldi	r16, 0x00	; 0
    3390:	23 e0       	ldi	r18, 0x03	; 3
    3392:	40 e0       	ldi	r20, 0x00	; 0
    3394:	51 ee       	ldi	r21, 0xE1	; 225
    3396:	60 e0       	ldi	r22, 0x00	; 0
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	8c 2f       	mov	r24, r28
    339c:	1e d3       	rcall	.+1596   	; 0x39da <serial_create>
    339e:	90 93 83 12 	sts	0x1283, r25	; 0x801283 <_rn2483_serial+0x1>
    33a2:	80 93 82 12 	sts	0x1282, r24	; 0x801282 <_rn2483_serial>
    33a6:	e7 e0       	ldi	r30, 0x07	; 7
    33a8:	f1 e0       	ldi	r31, 0x01	; 1
    33aa:	80 81       	ld	r24, Z
    33ac:	80 61       	ori	r24, 0x10	; 16
    33ae:	80 83       	st	Z, r24
    33b0:	cf 91       	pop	r28
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	ef 90       	pop	r14
    33b8:	cf 90       	pop	r12
    33ba:	af 90       	pop	r10
    33bc:	9f 90       	pop	r9
    33be:	8f 90       	pop	r8
    33c0:	08 95       	ret

000033c2 <lora_driver_resetRn2483>:
    33c2:	88 23       	and	r24, r24
    33c4:	31 f0       	breq	.+12     	; 0x33d2 <lora_driver_resetRn2483+0x10>
    33c6:	e8 e0       	ldi	r30, 0x08	; 8
    33c8:	f1 e0       	ldi	r31, 0x01	; 1
    33ca:	80 81       	ld	r24, Z
    33cc:	8f 7e       	andi	r24, 0xEF	; 239
    33ce:	80 83       	st	Z, r24
    33d0:	08 95       	ret
    33d2:	e8 e0       	ldi	r30, 0x08	; 8
    33d4:	f1 e0       	ldi	r31, 0x01	; 1
    33d6:	80 81       	ld	r24, Z
    33d8:	80 61       	ori	r24, 0x10	; 16
    33da:	80 83       	st	Z, r24
    33dc:	08 95       	ret

000033de <lora_driver_rn2483FactoryReset>:
    33de:	60 e0       	ldi	r22, 0x00	; 0
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	83 e3       	ldi	r24, 0x33	; 51
    33e4:	94 e0       	ldi	r25, 0x04	; 4
    33e6:	d4 de       	rcall	.-600    	; 0x3190 <_uploadMessage>
    33e8:	e9 e0       	ldi	r30, 0x09	; 9
    33ea:	f3 e1       	ldi	r31, 0x13	; 19
    33ec:	01 90       	ld	r0, Z+
    33ee:	00 20       	and	r0, r0
    33f0:	e9 f7       	brne	.-6      	; 0x33ec <lora_driver_rn2483FactoryReset+0xe>
    33f2:	31 97       	sbiw	r30, 0x01	; 1
    33f4:	e9 50       	subi	r30, 0x09	; 9
    33f6:	f3 41       	sbci	r31, 0x13	; 19
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	75 97       	sbiw	r30, 0x15	; 21
    33fc:	08 f0       	brcs	.+2      	; 0x3400 <lora_driver_rn2483FactoryReset+0x22>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	08 95       	ret

00003402 <lora_driver_getRn2483Hweui>:
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	ec 01       	movw	r28, r24
    3408:	60 e0       	ldi	r22, 0x00	; 0
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	84 e4       	ldi	r24, 0x44	; 68
    340e:	94 e0       	ldi	r25, 0x04	; 4
    3410:	bf de       	rcall	.-642    	; 0x3190 <_uploadMessage>
    3412:	e9 e0       	ldi	r30, 0x09	; 9
    3414:	f3 e1       	ldi	r31, 0x13	; 19
    3416:	01 90       	ld	r0, Z+
    3418:	00 20       	and	r0, r0
    341a:	e9 f7       	brne	.-6      	; 0x3416 <lora_driver_getRn2483Hweui+0x14>
    341c:	ea 51       	subi	r30, 0x1A	; 26
    341e:	f3 41       	sbci	r31, 0x13	; 19
    3420:	39 f4       	brne	.+14     	; 0x3430 <lora_driver_getRn2483Hweui+0x2e>
    3422:	69 e0       	ldi	r22, 0x09	; 9
    3424:	73 e1       	ldi	r23, 0x13	; 19
    3426:	ce 01       	movw	r24, r28
    3428:	0e 94 09 26 	call	0x4c12	; 0x4c12 <strcpy>
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <lora_driver_getRn2483Hweui+0x32>
    3430:	18 82       	st	Y, r1
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	08 95       	ret

0000343a <lora_driver_setDeviceIdentifier>:
    343a:	fc 01       	movw	r30, r24
    343c:	01 90       	ld	r0, Z+
    343e:	00 20       	and	r0, r0
    3440:	e9 f7       	brne	.-6      	; 0x343c <lora_driver_setDeviceIdentifier+0x2>
    3442:	9f 01       	movw	r18, r30
    3444:	21 51       	subi	r18, 0x11	; 17
    3446:	31 09       	sbc	r19, r1
    3448:	28 17       	cp	r18, r24
    344a:	39 07       	cpc	r19, r25
    344c:	29 f4       	brne	.+10     	; 0x3458 <lora_driver_setDeviceIdentifier+0x1e>
    344e:	bc 01       	movw	r22, r24
    3450:	82 e7       	ldi	r24, 0x72	; 114
    3452:	94 e0       	ldi	r25, 0x04	; 4
    3454:	6c cf       	rjmp	.-296    	; 0x332e <_uploadMessageRc>
    3456:	08 95       	ret
    3458:	89 e0       	ldi	r24, 0x09	; 9
    345a:	08 95       	ret

0000345c <lora_driver_setApplicationIdentifier>:
    345c:	fc 01       	movw	r30, r24
    345e:	01 90       	ld	r0, Z+
    3460:	00 20       	and	r0, r0
    3462:	e9 f7       	brne	.-6      	; 0x345e <lora_driver_setApplicationIdentifier+0x2>
    3464:	9f 01       	movw	r18, r30
    3466:	21 51       	subi	r18, 0x11	; 17
    3468:	31 09       	sbc	r19, r1
    346a:	28 17       	cp	r18, r24
    346c:	39 07       	cpc	r19, r25
    346e:	29 f4       	brne	.+10     	; 0x347a <lora_driver_setApplicationIdentifier+0x1e>
    3470:	bc 01       	movw	r22, r24
    3472:	81 e8       	ldi	r24, 0x81	; 129
    3474:	94 e0       	ldi	r25, 0x04	; 4
    3476:	5b cf       	rjmp	.-330    	; 0x332e <_uploadMessageRc>
    3478:	08 95       	ret
    347a:	89 e0       	ldi	r24, 0x09	; 9
    347c:	08 95       	ret

0000347e <lora_driver_setApplicationKey>:
    347e:	fc 01       	movw	r30, r24
    3480:	01 90       	ld	r0, Z+
    3482:	00 20       	and	r0, r0
    3484:	e9 f7       	brne	.-6      	; 0x3480 <lora_driver_setApplicationKey+0x2>
    3486:	9f 01       	movw	r18, r30
    3488:	21 52       	subi	r18, 0x21	; 33
    348a:	31 09       	sbc	r19, r1
    348c:	28 17       	cp	r18, r24
    348e:	39 07       	cpc	r19, r25
    3490:	29 f4       	brne	.+10     	; 0x349c <lora_driver_setApplicationKey+0x1e>
    3492:	bc 01       	movw	r22, r24
    3494:	80 e9       	ldi	r24, 0x90	; 144
    3496:	94 e0       	ldi	r25, 0x04	; 4
    3498:	4a cf       	rjmp	.-364    	; 0x332e <_uploadMessageRc>
    349a:	08 95       	ret
    349c:	89 e0       	ldi	r24, 0x09	; 9
    349e:	08 95       	ret

000034a0 <lora_driver_saveMac>:
    34a0:	60 e0       	ldi	r22, 0x00	; 0
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	8f ec       	ldi	r24, 0xCF	; 207
    34a6:	94 e0       	ldi	r25, 0x04	; 4
    34a8:	42 cf       	rjmp	.-380    	; 0x332e <_uploadMessageRc>
    34aa:	08 95       	ret

000034ac <lora_driver_join>:
    34ac:	0f 93       	push	r16
    34ae:	1f 93       	push	r17
    34b0:	e8 2f       	mov	r30, r24
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 1f       	adc	r31, r31
    34b8:	e7 55       	subi	r30, 0x57	; 87
    34ba:	f9 4f       	sbci	r31, 0xF9	; 249
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	88 ed       	ldi	r24, 0xD8	; 216
    34c2:	94 e0       	ldi	r25, 0x04	; 4
    34c4:	34 df       	rcall	.-408    	; 0x332e <_uploadMessageRc>
    34c6:	81 11       	cpse	r24, r1
    34c8:	14 c0       	rjmp	.+40     	; 0x34f2 <lora_driver_join+0x46>
    34ca:	08 e2       	ldi	r16, 0x28	; 40
    34cc:	15 e0       	ldi	r17, 0x05	; 5
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	4d e2       	ldi	r20, 0x2D	; 45
    34d4:	50 e0       	ldi	r21, 0x00	; 0
    34d6:	69 e0       	ldi	r22, 0x09	; 9
    34d8:	73 e1       	ldi	r23, 0x13	; 19
    34da:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <_serialReplyBufferHandle>
    34de:	90 91 81 12 	lds	r25, 0x1281	; 0x801281 <_serialReplyBufferHandle+0x1>
    34e2:	0e 94 08 09 	call	0x1210	; 0x1210 <xStreamBufferReceive>
    34e6:	88 23       	and	r24, r24
    34e8:	21 f0       	breq	.+8      	; 0x34f2 <lora_driver_join+0x46>
    34ea:	89 e0       	ldi	r24, 0x09	; 9
    34ec:	93 e1       	ldi	r25, 0x13	; 19
    34ee:	aa de       	rcall	.-684    	; 0x3244 <_reply2ReturnCode>
    34f0:	03 c0       	rjmp	.+6      	; 0x34f8 <lora_driver_join+0x4c>
    34f2:	89 e0       	ldi	r24, 0x09	; 9
    34f4:	93 e1       	ldi	r25, 0x13	; 19
    34f6:	a6 de       	rcall	.-692    	; 0x3244 <_reply2ReturnCode>
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	08 95       	ret

000034fe <lora_driver_sendUploadMessage>:
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	1f 92       	push	r1
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	db 01       	movw	r26, r22
    350e:	11 96       	adiw	r26, 0x01	; 1
    3510:	9c 91       	ld	r25, X
    3512:	11 97       	sbiw	r26, 0x01	; 1
    3514:	95 31       	cpi	r25, 0x15	; 21
    3516:	08 f0       	brcs	.+2      	; 0x351a <lora_driver_sendUploadMessage+0x1c>
    3518:	b4 c0       	rjmp	.+360    	; 0x3682 <lora_driver_sendUploadMessage+0x184>
    351a:	99 23       	and	r25, r25
    351c:	81 f1       	breq	.+96     	; 0x357e <lora_driver_sendUploadMessage+0x80>
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	27 2f       	mov	r18, r23
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	46 2f       	mov	r20, r22
    3528:	50 e0       	ldi	r21, 0x00	; 0
    352a:	fd 01       	movw	r30, r26
    352c:	e4 0f       	add	r30, r20
    352e:	f5 1f       	adc	r31, r21
    3530:	92 81       	ldd	r25, Z+2	; 0x02
    3532:	92 95       	swap	r25
    3534:	9f 70       	andi	r25, 0x0F	; 15
    3536:	9a 30       	cpi	r25, 0x0A	; 10
    3538:	10 f0       	brcs	.+4      	; 0x353e <lora_driver_sendUploadMessage+0x40>
    353a:	99 5c       	subi	r25, 0xC9	; 201
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <lora_driver_sendUploadMessage+0x42>
    353e:	90 5d       	subi	r25, 0xD0	; 208
    3540:	f9 01       	movw	r30, r18
    3542:	e6 56       	subi	r30, 0x66	; 102
    3544:	fd 4e       	sbci	r31, 0xED	; 237
    3546:	90 83       	st	Z, r25
    3548:	2f 5f       	subi	r18, 0xFF	; 255
    354a:	3f 4f       	sbci	r19, 0xFF	; 255
    354c:	fd 01       	movw	r30, r26
    354e:	e4 0f       	add	r30, r20
    3550:	f5 1f       	adc	r31, r21
    3552:	92 81       	ldd	r25, Z+2	; 0x02
    3554:	9f 70       	andi	r25, 0x0F	; 15
    3556:	49 2f       	mov	r20, r25
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	4a 30       	cpi	r20, 0x0A	; 10
    355c:	51 05       	cpc	r21, r1
    355e:	14 f0       	brlt	.+4      	; 0x3564 <lora_driver_sendUploadMessage+0x66>
    3560:	99 5c       	subi	r25, 0xC9	; 201
    3562:	01 c0       	rjmp	.+2      	; 0x3566 <lora_driver_sendUploadMessage+0x68>
    3564:	90 5d       	subi	r25, 0xD0	; 208
    3566:	f9 01       	movw	r30, r18
    3568:	e6 56       	subi	r30, 0x66	; 102
    356a:	fd 4e       	sbci	r31, 0xED	; 237
    356c:	90 83       	st	Z, r25
    356e:	7e 5f       	subi	r23, 0xFE	; 254
    3570:	6f 5f       	subi	r22, 0xFF	; 255
    3572:	11 96       	adiw	r26, 0x01	; 1
    3574:	9c 91       	ld	r25, X
    3576:	11 97       	sbiw	r26, 0x01	; 1
    3578:	69 17       	cp	r22, r25
    357a:	98 f2       	brcs	.-90     	; 0x3522 <lora_driver_sendUploadMessage+0x24>
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <lora_driver_sendUploadMessage+0x82>
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	e7 2f       	mov	r30, r23
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	e6 56       	subi	r30, 0x66	; 102
    3586:	fd 4e       	sbci	r31, 0xED	; 237
    3588:	10 82       	st	Z, r1
    358a:	4c 91       	ld	r20, X
    358c:	81 11       	cpse	r24, r1
    358e:	03 c0       	rjmp	.+6      	; 0x3596 <lora_driver_sendUploadMessage+0x98>
    3590:	81 ee       	ldi	r24, 0xE1	; 225
    3592:	94 e0       	ldi	r25, 0x04	; 4
    3594:	02 c0       	rjmp	.+4      	; 0x359a <lora_driver_sendUploadMessage+0x9c>
    3596:	83 ee       	ldi	r24, 0xE3	; 227
    3598:	94 e0       	ldi	r25, 0x04	; 4
    359a:	2a e9       	ldi	r18, 0x9A	; 154
    359c:	32 e1       	ldi	r19, 0x12	; 18
    359e:	3f 93       	push	r19
    35a0:	2f 93       	push	r18
    35a2:	1f 92       	push	r1
    35a4:	4f 93       	push	r20
    35a6:	9f 93       	push	r25
    35a8:	8f 93       	push	r24
    35aa:	87 ee       	ldi	r24, 0xE7	; 231
    35ac:	94 e0       	ldi	r25, 0x04	; 4
    35ae:	9f 93       	push	r25
    35b0:	8f 93       	push	r24
    35b2:	8c ed       	ldi	r24, 0xDC	; 220
    35b4:	92 e1       	ldi	r25, 0x12	; 18
    35b6:	9f 93       	push	r25
    35b8:	8f 93       	push	r24
    35ba:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf>
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	70 e0       	ldi	r23, 0x00	; 0
    35c2:	8c ed       	ldi	r24, 0xDC	; 220
    35c4:	92 e1       	ldi	r25, 0x12	; 18
    35c6:	b3 de       	rcall	.-666    	; 0x332e <_uploadMessageRc>
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	81 11       	cpse	r24, r1
    35d4:	59 c0       	rjmp	.+178    	; 0x3688 <lora_driver_sendUploadMessage+0x18a>
    35d6:	08 e2       	ldi	r16, 0x28	; 40
    35d8:	15 e0       	ldi	r17, 0x05	; 5
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	4d e2       	ldi	r20, 0x2D	; 45
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	69 e0       	ldi	r22, 0x09	; 9
    35e4:	73 e1       	ldi	r23, 0x13	; 19
    35e6:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <_serialReplyBufferHandle>
    35ea:	90 91 81 12 	lds	r25, 0x1281	; 0x801281 <_serialReplyBufferHandle+0x1>
    35ee:	0e 94 08 09 	call	0x1210	; 0x1210 <xStreamBufferReceive>
    35f2:	88 23       	and	r24, r24
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <lora_driver_sendUploadMessage+0xfa>
    35f6:	47 c0       	rjmp	.+142    	; 0x3686 <lora_driver_sendUploadMessage+0x188>
    35f8:	89 e0       	ldi	r24, 0x09	; 9
    35fa:	93 e1       	ldi	r25, 0x13	; 19
    35fc:	23 de       	rcall	.-954    	; 0x3244 <_reply2ReturnCode>
    35fe:	8e 30       	cpi	r24, 0x0E	; 14
    3600:	09 f0       	breq	.+2      	; 0x3604 <lora_driver_sendUploadMessage+0x106>
    3602:	42 c0       	rjmp	.+132    	; 0x3688 <lora_driver_sendUploadMessage+0x18a>
    3604:	87 e0       	ldi	r24, 0x07	; 7
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <_downlinkMessageBuffer>
    360c:	90 91 7f 12 	lds	r25, 0x127F	; 0x80127f <_downlinkMessageBuffer+0x1>
    3610:	89 2b       	or	r24, r25
    3612:	a9 f1       	breq	.+106    	; 0x367e <lora_driver_sendUploadMessage+0x180>
    3614:	be 01       	movw	r22, r28
    3616:	6f 5f       	subi	r22, 0xFF	; 255
    3618:	7f 4f       	sbci	r23, 0xFF	; 255
    361a:	89 e0       	ldi	r24, 0x09	; 9
    361c:	93 e1       	ldi	r25, 0x13	; 19
    361e:	68 d1       	rcall	.+720    	; 0x38f0 <decode_port_no>
    3620:	80 93 84 12 	sts	0x1284, r24	; 0x801284 <_downlinkPayload>
    3624:	e9 81       	ldd	r30, Y+1	; 0x01
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	e7 5f       	subi	r30, 0xF7	; 247
    362a:	fc 4e       	sbci	r31, 0xEC	; 236
    362c:	df 01       	movw	r26, r30
    362e:	0d 90       	ld	r0, X+
    3630:	00 20       	and	r0, r0
    3632:	e9 f7       	brne	.-6      	; 0x362e <lora_driver_sendUploadMessage+0x130>
    3634:	11 97       	sbiw	r26, 0x01	; 1
    3636:	ae 1b       	sub	r26, r30
    3638:	bf 0b       	sbc	r27, r31
    363a:	aa 23       	and	r26, r26
    363c:	91 f0       	breq	.+36     	; 0x3662 <lora_driver_sendUploadMessage+0x164>
    363e:	bb 27       	eor	r27, r27
    3640:	cd 01       	movw	r24, r26
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	9c 01       	movw	r18, r24
    3646:	12 f4       	brpl	.+4      	; 0x364c <lora_driver_sendUploadMessage+0x14e>
    3648:	2f 5f       	subi	r18, 0xFF	; 255
    364a:	3f 4f       	sbci	r19, 0xFF	; 255
    364c:	35 95       	asr	r19
    364e:	27 95       	ror	r18
    3650:	20 93 85 12 	sts	0x1285, r18	; 0x801285 <_downlinkPayload+0x1>
    3654:	af 01       	movw	r20, r30
    3656:	4f 5f       	subi	r20, 0xFF	; 255
    3658:	5f 4f       	sbci	r21, 0xFF	; 255
    365a:	64 e1       	ldi	r22, 0x14	; 20
    365c:	86 e8       	ldi	r24, 0x86	; 134
    365e:	92 e1       	ldi	r25, 0x12	; 18
    3660:	73 d1       	rcall	.+742    	; 0x3948 <decode_hexadecimal_string_bytes>
    3662:	01 e0       	ldi	r16, 0x01	; 1
    3664:	10 e0       	ldi	r17, 0x00	; 0
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	46 e1       	ldi	r20, 0x16	; 22
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	64 e8       	ldi	r22, 0x84	; 132
    3670:	72 e1       	ldi	r23, 0x12	; 18
    3672:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <_downlinkMessageBuffer>
    3676:	90 91 7f 12 	lds	r25, 0x127F	; 0x80127f <_downlinkMessageBuffer+0x1>
    367a:	0e 94 01 08 	call	0x1002	; 0x1002 <xStreamBufferSend>
    367e:	8e e0       	ldi	r24, 0x0E	; 14
    3680:	03 c0       	rjmp	.+6      	; 0x3688 <lora_driver_sendUploadMessage+0x18a>
    3682:	84 e1       	ldi	r24, 0x14	; 20
    3684:	01 c0       	rjmp	.+2      	; 0x3688 <lora_driver_sendUploadMessage+0x18a>
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	0f 90       	pop	r0
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	08 95       	ret

00003694 <lora_driver_setAdaptiveDataRate>:
    3694:	81 30       	cpi	r24, 0x01	; 1
    3696:	19 f0       	breq	.+6      	; 0x369e <lora_driver_setAdaptiveDataRate+0xa>
    3698:	67 ef       	ldi	r22, 0xF7	; 247
    369a:	74 e0       	ldi	r23, 0x04	; 4
    369c:	02 c0       	rjmp	.+4      	; 0x36a2 <lora_driver_setAdaptiveDataRate+0xe>
    369e:	60 ed       	ldi	r22, 0xD0	; 208
    36a0:	75 e0       	ldi	r23, 0x05	; 5
    36a2:	8b ef       	ldi	r24, 0xFB	; 251
    36a4:	94 e0       	ldi	r25, 0x04	; 4
    36a6:	43 ce       	rjmp	.-890    	; 0x332e <_uploadMessageRc>
    36a8:	08 95       	ret

000036aa <lora_driver_setReceiveDelay>:
    36aa:	9f 93       	push	r25
    36ac:	8f 93       	push	r24
    36ae:	8c e2       	ldi	r24, 0x2C	; 44
    36b0:	95 e0       	ldi	r25, 0x05	; 5
    36b2:	9f 93       	push	r25
    36b4:	8f 93       	push	r24
    36b6:	8c ed       	ldi	r24, 0xDC	; 220
    36b8:	92 e1       	ldi	r25, 0x12	; 18
    36ba:	9f 93       	push	r25
    36bc:	8f 93       	push	r24
    36be:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf>
    36c2:	60 e0       	ldi	r22, 0x00	; 0
    36c4:	70 e0       	ldi	r23, 0x00	; 0
    36c6:	8c ed       	ldi	r24, 0xDC	; 220
    36c8:	92 e1       	ldi	r25, 0x12	; 18
    36ca:	31 de       	rcall	.-926    	; 0x332e <_uploadMessageRc>
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	08 95       	ret

000036da <lora_driver_configureToEu868>:
    36da:	2f 92       	push	r2
    36dc:	3f 92       	push	r3
    36de:	4f 92       	push	r4
    36e0:	5f 92       	push	r5
    36e2:	6f 92       	push	r6
    36e4:	7f 92       	push	r7
    36e6:	8f 92       	push	r8
    36e8:	9f 92       	push	r9
    36ea:	af 92       	push	r10
    36ec:	bf 92       	push	r11
    36ee:	cf 92       	push	r12
    36f0:	df 92       	push	r13
    36f2:	ef 92       	push	r14
    36f4:	ff 92       	push	r15
    36f6:	0f 93       	push	r16
    36f8:	1f 93       	push	r17
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	a0 97       	sbiw	r28, 0x20	; 32
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	69 e5       	ldi	r22, 0x59	; 89
    3710:	75 e0       	ldi	r23, 0x05	; 5
    3712:	85 e6       	ldi	r24, 0x65	; 101
    3714:	95 e0       	ldi	r25, 0x05	; 5
    3716:	3c dd       	rcall	.-1416   	; 0x3190 <_uploadMessage>
    3718:	95 dd       	rcall	.-1238   	; 0x3244 <_reply2ReturnCode>
    371a:	81 11       	cpse	r24, r1
    371c:	a3 c0       	rjmp	.+326    	; 0x3864 <lora_driver_configureToEu868+0x18a>
    371e:	80 e2       	ldi	r24, 0x20	; 32
    3720:	ed e1       	ldi	r30, 0x1D	; 29
    3722:	f2 e0       	ldi	r31, 0x02	; 2
    3724:	de 01       	movw	r26, r28
    3726:	11 96       	adiw	r26, 0x01	; 1
    3728:	01 90       	ld	r0, Z+
    372a:	0d 92       	st	X+, r0
    372c:	8a 95       	dec	r24
    372e:	e1 f7       	brne	.-8      	; 0x3728 <lora_driver_configureToEu868+0x4e>
    3730:	9e 01       	movw	r18, r28
    3732:	2f 5f       	subi	r18, 0xFF	; 255
    3734:	3f 4f       	sbci	r19, 0xFF	; 255
    3736:	69 01       	movw	r12, r18
    3738:	e1 2c       	mov	r14, r1
    373a:	f1 2c       	mov	r15, r1
    373c:	0f 2e       	mov	r0, r31
    373e:	f1 e7       	ldi	r31, 0x71	; 113
    3740:	af 2e       	mov	r10, r31
    3742:	f5 e0       	ldi	r31, 0x05	; 5
    3744:	bf 2e       	mov	r11, r31
    3746:	f0 2d       	mov	r31, r0
    3748:	0c ed       	ldi	r16, 0xDC	; 220
    374a:	12 e1       	ldi	r17, 0x12	; 18
    374c:	0f 2e       	mov	r0, r31
    374e:	fa e8       	ldi	r31, 0x8A	; 138
    3750:	4f 2e       	mov	r4, r31
    3752:	f5 e0       	ldi	r31, 0x05	; 5
    3754:	5f 2e       	mov	r5, r31
    3756:	f0 2d       	mov	r31, r0
    3758:	0f 2e       	mov	r0, r31
    375a:	f1 ea       	ldi	r31, 0xA1	; 161
    375c:	8f 2e       	mov	r8, r31
    375e:	f5 e0       	ldi	r31, 0x05	; 5
    3760:	9f 2e       	mov	r9, r31
    3762:	f0 2d       	mov	r31, r0
    3764:	0f 2e       	mov	r0, r31
    3766:	fb eb       	ldi	r31, 0xBB	; 187
    3768:	6f 2e       	mov	r6, r31
    376a:	f5 e0       	ldi	r31, 0x05	; 5
    376c:	7f 2e       	mov	r7, r31
    376e:	f0 2d       	mov	r31, r0
    3770:	3e 2c       	mov	r3, r14
    3772:	2f 2c       	mov	r2, r15
    3774:	ff 92       	push	r15
    3776:	ef 92       	push	r14
    3778:	bf 92       	push	r11
    377a:	af 92       	push	r10
    377c:	1f 93       	push	r17
    377e:	0f 93       	push	r16
    3780:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf>
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	c8 01       	movw	r24, r16
    378a:	02 dd       	rcall	.-1532   	; 0x3190 <_uploadMessage>
    378c:	5b dd       	rcall	.-1354   	; 0x3244 <_reply2ReturnCode>
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	81 11       	cpse	r24, r1
    379c:	63 c0       	rjmp	.+198    	; 0x3864 <lora_driver_configureToEu868+0x18a>
    379e:	32 e0       	ldi	r19, 0x02	; 2
    37a0:	3e 15       	cp	r19, r14
    37a2:	e8 f4       	brcc	.+58     	; 0x37de <lora_driver_configureToEu868+0x104>
    37a4:	f6 01       	movw	r30, r12
    37a6:	83 81       	ldd	r24, Z+3	; 0x03
    37a8:	8f 93       	push	r24
    37aa:	82 81       	ldd	r24, Z+2	; 0x02
    37ac:	8f 93       	push	r24
    37ae:	81 81       	ldd	r24, Z+1	; 0x01
    37b0:	8f 93       	push	r24
    37b2:	80 81       	ld	r24, Z
    37b4:	8f 93       	push	r24
    37b6:	ff 92       	push	r15
    37b8:	ef 92       	push	r14
    37ba:	5f 92       	push	r5
    37bc:	4f 92       	push	r4
    37be:	1f 93       	push	r17
    37c0:	0f 93       	push	r16
    37c2:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf>
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	c8 01       	movw	r24, r16
    37cc:	e1 dc       	rcall	.-1598   	; 0x3190 <_uploadMessage>
    37ce:	3a dd       	rcall	.-1420   	; 0x3244 <_reply2ReturnCode>
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	81 11       	cpse	r24, r1
    37dc:	43 c0       	rjmp	.+134    	; 0x3864 <lora_driver_configureToEu868+0x18a>
    37de:	2f 92       	push	r2
    37e0:	3f 92       	push	r3
    37e2:	9f 92       	push	r9
    37e4:	8f 92       	push	r8
    37e6:	1f 93       	push	r17
    37e8:	0f 93       	push	r16
    37ea:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf>
    37ee:	60 e0       	ldi	r22, 0x00	; 0
    37f0:	70 e0       	ldi	r23, 0x00	; 0
    37f2:	c8 01       	movw	r24, r16
    37f4:	cd dc       	rcall	.-1638   	; 0x3190 <_uploadMessage>
    37f6:	26 dd       	rcall	.-1460   	; 0x3244 <_reply2ReturnCode>
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	81 11       	cpse	r24, r1
    3806:	2e c0       	rjmp	.+92     	; 0x3864 <lora_driver_configureToEu868+0x18a>
    3808:	2f 92       	push	r2
    380a:	3f 92       	push	r3
    380c:	7f 92       	push	r7
    380e:	6f 92       	push	r6
    3810:	1f 93       	push	r17
    3812:	0f 93       	push	r16
    3814:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <sprintf>
    3818:	60 e0       	ldi	r22, 0x00	; 0
    381a:	70 e0       	ldi	r23, 0x00	; 0
    381c:	c8 01       	movw	r24, r16
    381e:	b8 dc       	rcall	.-1680   	; 0x3190 <_uploadMessage>
    3820:	11 dd       	rcall	.-1502   	; 0x3244 <_reply2ReturnCode>
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	81 11       	cpse	r24, r1
    3830:	19 c0       	rjmp	.+50     	; 0x3864 <lora_driver_configureToEu868+0x18a>
    3832:	3f ef       	ldi	r19, 0xFF	; 255
    3834:	e3 1a       	sub	r14, r19
    3836:	f3 0a       	sbc	r15, r19
    3838:	84 e0       	ldi	r24, 0x04	; 4
    383a:	c8 0e       	add	r12, r24
    383c:	d1 1c       	adc	r13, r1
    383e:	98 e0       	ldi	r25, 0x08	; 8
    3840:	e9 16       	cp	r14, r25
    3842:	f1 04       	cpc	r15, r1
    3844:	09 f0       	breq	.+2      	; 0x3848 <lora_driver_configureToEu868+0x16e>
    3846:	94 cf       	rjmp	.-216    	; 0x3770 <lora_driver_configureToEu868+0x96>
    3848:	60 e0       	ldi	r22, 0x00	; 0
    384a:	70 e0       	ldi	r23, 0x00	; 0
    384c:	83 ed       	ldi	r24, 0xD3	; 211
    384e:	95 e0       	ldi	r25, 0x05	; 5
    3850:	9f dc       	rcall	.-1730   	; 0x3190 <_uploadMessage>
    3852:	f8 dc       	rcall	.-1552   	; 0x3244 <_reply2ReturnCode>
    3854:	81 11       	cpse	r24, r1
    3856:	06 c0       	rjmp	.+12     	; 0x3864 <lora_driver_configureToEu868+0x18a>
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	84 ee       	ldi	r24, 0xE4	; 228
    385e:	95 e0       	ldi	r25, 0x05	; 5
    3860:	97 dc       	rcall	.-1746   	; 0x3190 <_uploadMessage>
    3862:	f0 dc       	rcall	.-1568   	; 0x3244 <_reply2ReturnCode>
    3864:	a0 96       	adiw	r28, 0x20	; 32
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	f8 94       	cli
    386a:	de bf       	out	0x3e, r29	; 62
    386c:	0f be       	out	0x3f, r0	; 63
    386e:	cd bf       	out	0x3d, r28	; 61
    3870:	df 91       	pop	r29
    3872:	cf 91       	pop	r28
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	ff 90       	pop	r15
    387a:	ef 90       	pop	r14
    387c:	df 90       	pop	r13
    387e:	cf 90       	pop	r12
    3880:	bf 90       	pop	r11
    3882:	af 90       	pop	r10
    3884:	9f 90       	pop	r9
    3886:	8f 90       	pop	r8
    3888:	7f 90       	pop	r7
    388a:	6f 90       	pop	r6
    388c:	5f 90       	pop	r5
    388e:	4f 90       	pop	r4
    3890:	3f 90       	pop	r3
    3892:	2f 90       	pop	r2
    3894:	08 95       	ret

00003896 <lora_driver_setOtaaIdentity>:
    3896:	ef 92       	push	r14
    3898:	ff 92       	push	r15
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	ec 01       	movw	r28, r24
    38a4:	8b 01       	movw	r16, r22
    38a6:	7a 01       	movw	r14, r20
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	f4 de       	rcall	.-536    	; 0x3694 <lora_driver_setAdaptiveDataRate>
    38ac:	81 11       	cpse	r24, r1
    38ae:	0d c0       	rjmp	.+26     	; 0x38ca <lora_driver_setOtaaIdentity+0x34>
    38b0:	ce 01       	movw	r24, r28
    38b2:	d4 dd       	rcall	.-1112   	; 0x345c <lora_driver_setApplicationIdentifier>
    38b4:	81 11       	cpse	r24, r1
    38b6:	09 c0       	rjmp	.+18     	; 0x38ca <lora_driver_setOtaaIdentity+0x34>
    38b8:	c8 01       	movw	r24, r16
    38ba:	e1 dd       	rcall	.-1086   	; 0x347e <lora_driver_setApplicationKey>
    38bc:	81 11       	cpse	r24, r1
    38be:	05 c0       	rjmp	.+10     	; 0x38ca <lora_driver_setOtaaIdentity+0x34>
    38c0:	c7 01       	movw	r24, r14
    38c2:	bb dd       	rcall	.-1162   	; 0x343a <lora_driver_setDeviceIdentifier>
    38c4:	81 11       	cpse	r24, r1
    38c6:	01 c0       	rjmp	.+2      	; 0x38ca <lora_driver_setOtaaIdentity+0x34>
    38c8:	eb dd       	rcall	.-1066   	; 0x34a0 <lora_driver_saveMac>
    38ca:	df 91       	pop	r29
    38cc:	cf 91       	pop	r28
    38ce:	1f 91       	pop	r17
    38d0:	0f 91       	pop	r16
    38d2:	ff 90       	pop	r15
    38d4:	ef 90       	pop	r14
    38d6:	08 95       	ret

000038d8 <lora_driver_mapReturnCodeToText>:
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	fc 01       	movw	r30, r24
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	8e 0f       	add	r24, r30
    38e2:	9f 1f       	adc	r25, r31
    38e4:	fc 01       	movw	r30, r24
    38e6:	e3 55       	subi	r30, 0x53	; 83
    38e8:	f9 4f       	sbci	r31, 0xF9	; 249
    38ea:	81 81       	ldd	r24, Z+1	; 0x01
    38ec:	92 81       	ldd	r25, Z+2	; 0x02
    38ee:	08 95       	ret

000038f0 <decode_port_no>:
    38f0:	dc 01       	movw	r26, r24
    38f2:	00 97       	sbiw	r24, 0x00	; 0
    38f4:	29 f1       	breq	.+74     	; 0x3940 <decode_port_no+0x50>
    38f6:	fb 01       	movw	r30, r22
    38f8:	20 81       	ld	r18, Z
    38fa:	fc 01       	movw	r30, r24
    38fc:	01 90       	ld	r0, Z+
    38fe:	00 20       	and	r0, r0
    3900:	e9 f7       	brne	.-6      	; 0x38fc <decode_port_no+0xc>
    3902:	31 97       	sbiw	r30, 0x01	; 1
    3904:	e8 1b       	sub	r30, r24
    3906:	f9 0b       	sbc	r31, r25
    3908:	82 2f       	mov	r24, r18
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	e8 17       	cp	r30, r24
    390e:	f9 07       	cpc	r31, r25
    3910:	c8 f0       	brcs	.+50     	; 0x3944 <decode_port_no+0x54>
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	08 c0       	rjmp	.+16     	; 0x3926 <decode_port_no+0x36>
    3916:	88 0f       	add	r24, r24
    3918:	38 2f       	mov	r19, r24
    391a:	33 0f       	add	r19, r19
    391c:	33 0f       	add	r19, r19
    391e:	83 0f       	add	r24, r19
    3920:	80 53       	subi	r24, 0x30	; 48
    3922:	89 0f       	add	r24, r25
    3924:	2f 5f       	subi	r18, 0xFF	; 255
    3926:	fd 01       	movw	r30, r26
    3928:	e2 0f       	add	r30, r18
    392a:	f1 1d       	adc	r31, r1
    392c:	90 81       	ld	r25, Z
    392e:	30 ed       	ldi	r19, 0xD0	; 208
    3930:	39 0f       	add	r19, r25
    3932:	3a 30       	cpi	r19, 0x0A	; 10
    3934:	10 f4       	brcc	.+4      	; 0x393a <decode_port_no+0x4a>
    3936:	91 11       	cpse	r25, r1
    3938:	ee cf       	rjmp	.-36     	; 0x3916 <decode_port_no+0x26>
    393a:	fb 01       	movw	r30, r22
    393c:	20 83       	st	Z, r18
    393e:	08 95       	ret
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	08 95       	ret
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	08 95       	ret

00003948 <decode_hexadecimal_string_bytes>:
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	dc 01       	movw	r26, r24
    3952:	ea 01       	movw	r28, r20
    3954:	20 97       	sbiw	r28, 0x00	; 0
    3956:	e1 f1       	breq	.+120    	; 0x39d0 <decode_hexadecimal_string_bytes+0x88>
    3958:	fa 01       	movw	r30, r20
    395a:	01 90       	ld	r0, Z+
    395c:	00 20       	and	r0, r0
    395e:	e9 f7       	brne	.-6      	; 0x395a <decode_hexadecimal_string_bytes+0x12>
    3960:	31 97       	sbiw	r30, 0x01	; 1
    3962:	e4 1b       	sub	r30, r20
    3964:	f5 0b       	sbc	r31, r21
    3966:	32 97       	sbiw	r30, 0x02	; 2
    3968:	10 f5       	brcc	.+68     	; 0x39ae <decode_hexadecimal_string_bytes+0x66>
    396a:	32 c0       	rjmp	.+100    	; 0x39d0 <decode_hexadecimal_string_bytes+0x88>
    396c:	8d 01       	movw	r16, r26
    396e:	04 0f       	add	r16, r20
    3970:	15 1f       	adc	r17, r21
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	ae 01       	movw	r20, r28
    3976:	42 0f       	add	r20, r18
    3978:	53 1f       	adc	r21, r19
    397a:	fa 01       	movw	r30, r20
    397c:	90 81       	ld	r25, Z
    397e:	91 34       	cpi	r25, 0x41	; 65
    3980:	28 f0       	brcs	.+10     	; 0x398c <decode_hexadecimal_string_bytes+0x44>
    3982:	97 53       	subi	r25, 0x37	; 55
    3984:	59 2f       	mov	r21, r25
    3986:	52 95       	swap	r21
    3988:	50 7f       	andi	r21, 0xF0	; 240
    398a:	03 c0       	rjmp	.+6      	; 0x3992 <decode_hexadecimal_string_bytes+0x4a>
    398c:	59 2f       	mov	r21, r25
    398e:	52 95       	swap	r21
    3990:	50 7f       	andi	r21, 0xF0	; 240
    3992:	2c 0f       	add	r18, r28
    3994:	3d 1f       	adc	r19, r29
    3996:	f9 01       	movw	r30, r18
    3998:	91 81       	ldd	r25, Z+1	; 0x01
    399a:	91 34       	cpi	r25, 0x41	; 65
    399c:	10 f0       	brcs	.+4      	; 0x39a2 <decode_hexadecimal_string_bytes+0x5a>
    399e:	97 53       	subi	r25, 0x37	; 55
    39a0:	01 c0       	rjmp	.+2      	; 0x39a4 <decode_hexadecimal_string_bytes+0x5c>
    39a2:	90 53       	subi	r25, 0x30	; 48
    39a4:	95 0f       	add	r25, r21
    39a6:	f8 01       	movw	r30, r16
    39a8:	90 83       	st	Z, r25
    39aa:	8f 5f       	subi	r24, 0xFF	; 255
    39ac:	01 c0       	rjmp	.+2      	; 0x39b0 <decode_hexadecimal_string_bytes+0x68>
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	28 2f       	mov	r18, r24
    39b2:	22 0f       	add	r18, r18
    39b4:	48 2f       	mov	r20, r24
    39b6:	50 e0       	ldi	r21, 0x00	; 0
    39b8:	fe 01       	movw	r30, r28
    39ba:	01 90       	ld	r0, Z+
    39bc:	00 20       	and	r0, r0
    39be:	e9 f7       	brne	.-6      	; 0x39ba <decode_hexadecimal_string_bytes+0x72>
    39c0:	31 97       	sbiw	r30, 0x01	; 1
    39c2:	ec 1b       	sub	r30, r28
    39c4:	fd 0b       	sbc	r31, r29
    39c6:	4e 17       	cp	r20, r30
    39c8:	5f 07       	cpc	r21, r31
    39ca:	10 f4       	brcc	.+4      	; 0x39d0 <decode_hexadecimal_string_bytes+0x88>
    39cc:	86 13       	cpse	r24, r22
    39ce:	ce cf       	rjmp	.-100    	; 0x396c <decode_hexadecimal_string_bytes+0x24>
    39d0:	df 91       	pop	r29
    39d2:	cf 91       	pop	r28
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	08 95       	ret

000039da <serial_create>:
    39da:	2f 92       	push	r2
    39dc:	3f 92       	push	r3
    39de:	4f 92       	push	r4
    39e0:	5f 92       	push	r5
    39e2:	6f 92       	push	r6
    39e4:	7f 92       	push	r7
    39e6:	8f 92       	push	r8
    39e8:	9f 92       	push	r9
    39ea:	af 92       	push	r10
    39ec:	cf 92       	push	r12
    39ee:	ef 92       	push	r14
    39f0:	ff 92       	push	r15
    39f2:	0f 93       	push	r16
    39f4:	1f 93       	push	r17
    39f6:	cf 93       	push	r28
    39f8:	df 93       	push	r29
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	f8 2e       	mov	r15, r24
    3a00:	2a 01       	movw	r4, r20
    3a02:	3b 01       	movw	r6, r22
    3a04:	88 e0       	ldi	r24, 0x08	; 8
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9f d7       	rcall	.+3902   	; 0x4948 <malloc>
    3a0a:	8c 01       	movw	r16, r24
    3a0c:	8f 2d       	mov	r24, r15
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	fc 01       	movw	r30, r24
    3a12:	ee 0f       	add	r30, r30
    3a14:	ff 1f       	adc	r31, r31
    3a16:	ea 5c       	subi	r30, 0xCA	; 202
    3a18:	fc 4e       	sbci	r31, 0xEC	; 236
    3a1a:	11 83       	std	Z+1, r17	; 0x01
    3a1c:	00 83       	st	Z, r16
    3a1e:	01 15       	cp	r16, r1
    3a20:	11 05       	cpc	r17, r1
    3a22:	09 f4       	brne	.+2      	; 0x3a26 <serial_create+0x4c>
    3a24:	64 c0       	rjmp	.+200    	; 0x3aee <serial_create+0x114>
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	e9 5f       	subi	r30, 0xF9	; 249
    3a2e:	fd 4f       	sbci	r31, 0xFD	; 253
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	d8 01       	movw	r26, r16
    3a36:	8d 93       	st	X+, r24
    3a38:	9c 93       	st	X, r25
    3a3a:	6c 2d       	mov	r22, r12
    3a3c:	70 e0       	ldi	r23, 0x00	; 0
    3a3e:	84 e0       	ldi	r24, 0x04	; 4
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	68 d7       	rcall	.+3792   	; 0x4914 <calloc>
    3a44:	1c 01       	movw	r2, r24
    3a46:	61 e0       	ldi	r22, 0x01	; 1
    3a48:	70 e0       	ldi	r23, 0x00	; 0
    3a4a:	86 e0       	ldi	r24, 0x06	; 6
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	62 d7       	rcall	.+3780   	; 0x4914 <calloc>
    3a50:	7c 01       	movw	r14, r24
    3a52:	4c 2d       	mov	r20, r12
    3a54:	b1 01       	movw	r22, r2
    3a56:	50 d5       	rcall	.+2720   	; 0x44f8 <fifo_init>
    3a58:	f8 01       	movw	r30, r16
    3a5a:	f5 82       	std	Z+5, r15	; 0x05
    3a5c:	e4 82       	std	Z+4, r14	; 0x04
    3a5e:	6a 2d       	mov	r22, r10
    3a60:	70 e0       	ldi	r23, 0x00	; 0
    3a62:	84 e0       	ldi	r24, 0x04	; 4
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	56 d7       	rcall	.+3756   	; 0x4914 <calloc>
    3a68:	1c 01       	movw	r2, r24
    3a6a:	61 e0       	ldi	r22, 0x01	; 1
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	86 e0       	ldi	r24, 0x06	; 6
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	50 d7       	rcall	.+3744   	; 0x4914 <calloc>
    3a74:	7c 01       	movw	r14, r24
    3a76:	4a 2d       	mov	r20, r10
    3a78:	b1 01       	movw	r22, r2
    3a7a:	3e d5       	rcall	.+2684   	; 0x44f8 <fifo_init>
    3a7c:	d8 01       	movw	r26, r16
    3a7e:	13 96       	adiw	r26, 0x03	; 3
    3a80:	fc 92       	st	X, r15
    3a82:	ee 92       	st	-X, r14
    3a84:	12 97       	sbiw	r26, 0x02	; 2
    3a86:	17 96       	adiw	r26, 0x07	; 7
    3a88:	9c 92       	st	X, r9
    3a8a:	8e 92       	st	-X, r8
    3a8c:	16 97       	sbiw	r26, 0x06	; 6
    3a8e:	ff b6       	in	r15, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	ed 91       	ld	r30, X+
    3a94:	fc 91       	ld	r31, X
    3a96:	11 97       	sbiw	r26, 0x01	; 1
    3a98:	36 97       	sbiw	r30, 0x06	; 6
    3a9a:	80 81       	ld	r24, Z
    3a9c:	82 60       	ori	r24, 0x02	; 2
    3a9e:	80 83       	st	Z, r24
    3aa0:	8d 90       	ld	r8, X+
    3aa2:	9c 90       	ld	r9, X
    3aa4:	c3 01       	movw	r24, r6
    3aa6:	b2 01       	movw	r22, r4
    3aa8:	3c d6       	rcall	.+3192   	; 0x4722 <__floatunsisf>
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	51 e4       	ldi	r21, 0x41	; 65
    3ab2:	c5 d6       	rcall	.+3466   	; 0x483e <__mulsf3>
    3ab4:	9b 01       	movw	r18, r22
    3ab6:	ac 01       	movw	r20, r24
    3ab8:	60 e0       	ldi	r22, 0x00	; 0
    3aba:	74 e2       	ldi	r23, 0x24	; 36
    3abc:	84 e7       	ldi	r24, 0x74	; 116
    3abe:	9b e4       	ldi	r25, 0x4B	; 75
    3ac0:	9c d5       	rcall	.+2872   	; 0x45fa <__divsf3>
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	40 e8       	ldi	r20, 0x80	; 128
    3ac8:	5f e3       	ldi	r21, 0x3F	; 63
    3aca:	32 d5       	rcall	.+2660   	; 0x4530 <__subsf3>
    3acc:	fe d5       	rcall	.+3068   	; 0x46ca <__fixunssfsi>
    3ace:	f4 01       	movw	r30, r8
    3ad0:	32 97       	sbiw	r30, 0x02	; 2
    3ad2:	60 83       	st	Z, r22
    3ad4:	d8 01       	movw	r26, r16
    3ad6:	ed 91       	ld	r30, X+
    3ad8:	fc 91       	ld	r31, X
    3ada:	11 97       	sbiw	r26, 0x01	; 1
    3adc:	35 97       	sbiw	r30, 0x05	; 5
    3ade:	88 e9       	ldi	r24, 0x98	; 152
    3ae0:	80 83       	st	Z, r24
    3ae2:	ed 91       	ld	r30, X+
    3ae4:	fc 91       	ld	r31, X
    3ae6:	34 97       	sbiw	r30, 0x04	; 4
    3ae8:	86 e0       	ldi	r24, 0x06	; 6
    3aea:	80 83       	st	Z, r24
    3aec:	ff be       	out	0x3f, r15	; 63
    3aee:	c8 01       	movw	r24, r16
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	ff 90       	pop	r15
    3afa:	ef 90       	pop	r14
    3afc:	cf 90       	pop	r12
    3afe:	af 90       	pop	r10
    3b00:	9f 90       	pop	r9
    3b02:	8f 90       	pop	r8
    3b04:	7f 90       	pop	r7
    3b06:	6f 90       	pop	r6
    3b08:	5f 90       	pop	r5
    3b0a:	4f 90       	pop	r4
    3b0c:	3f 90       	pop	r3
    3b0e:	2f 90       	pop	r2
    3b10:	08 95       	ret

00003b12 <serial_sendByte>:
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	dc 01       	movw	r26, r24
    3b18:	89 2b       	or	r24, r25
    3b1a:	01 f1       	breq	.+64     	; 0x3b5c <serial_sendByte+0x4a>
    3b1c:	12 96       	adiw	r26, 0x02	; 2
    3b1e:	ed 91       	ld	r30, X+
    3b20:	fc 91       	ld	r31, X
    3b22:	13 97       	sbiw	r26, 0x03	; 3
    3b24:	93 81       	ldd	r25, Z+3	; 0x03
    3b26:	82 81       	ldd	r24, Z+2	; 0x02
    3b28:	25 81       	ldd	r18, Z+5	; 0x05
    3b2a:	98 1b       	sub	r25, r24
    3b2c:	92 23       	and	r25, r18
    3b2e:	84 81       	ldd	r24, Z+4	; 0x04
    3b30:	98 17       	cp	r25, r24
    3b32:	b1 f0       	breq	.+44     	; 0x3b60 <serial_sendByte+0x4e>
    3b34:	83 81       	ldd	r24, Z+3	; 0x03
    3b36:	26 95       	lsr	r18
    3b38:	28 23       	and	r18, r24
    3b3a:	c0 81       	ld	r28, Z
    3b3c:	d1 81       	ldd	r29, Z+1	; 0x01
    3b3e:	c2 0f       	add	r28, r18
    3b40:	d1 1d       	adc	r29, r1
    3b42:	68 83       	st	Y, r22
    3b44:	8f 5f       	subi	r24, 0xFF	; 255
    3b46:	95 81       	ldd	r25, Z+5	; 0x05
    3b48:	89 23       	and	r24, r25
    3b4a:	83 83       	std	Z+3, r24	; 0x03
    3b4c:	ed 91       	ld	r30, X+
    3b4e:	fc 91       	ld	r31, X
    3b50:	35 97       	sbiw	r30, 0x05	; 5
    3b52:	80 81       	ld	r24, Z
    3b54:	80 62       	ori	r24, 0x20	; 32
    3b56:	80 83       	st	Z, r24
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	03 c0       	rjmp	.+6      	; 0x3b62 <serial_sendByte+0x50>
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	01 c0       	rjmp	.+2      	; 0x3b62 <serial_sendByte+0x50>
    3b60:	82 e0       	ldi	r24, 0x02	; 2
    3b62:	df 91       	pop	r29
    3b64:	cf 91       	pop	r28
    3b66:	08 95       	ret

00003b68 <serial_sendBytes>:
    3b68:	ef 92       	push	r14
    3b6a:	ff 92       	push	r15
    3b6c:	0f 93       	push	r16
    3b6e:	1f 93       	push	r17
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	7c 01       	movw	r14, r24
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <serial_sendBytes+0x14>
    3b7a:	41 c0       	rjmp	.+130    	; 0x3bfe <serial_sendBytes+0x96>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	12 96       	adiw	r26, 0x02	; 2
    3b80:	ed 91       	ld	r30, X+
    3b82:	fc 91       	ld	r31, X
    3b84:	13 97       	sbiw	r26, 0x03	; 3
    3b86:	93 81       	ldd	r25, Z+3	; 0x03
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	98 1b       	sub	r25, r24
    3b8c:	85 81       	ldd	r24, Z+5	; 0x05
    3b8e:	98 23       	and	r25, r24
    3b90:	84 81       	ldd	r24, Z+4	; 0x04
    3b92:	89 1b       	sub	r24, r25
    3b94:	86 17       	cp	r24, r22
    3b96:	a8 f1       	brcs	.+106    	; 0x3c02 <serial_sendBytes+0x9a>
    3b98:	66 23       	and	r22, r22
    3b9a:	41 f1       	breq	.+80     	; 0x3bec <serial_sendBytes+0x84>
    3b9c:	84 2f       	mov	r24, r20
    3b9e:	95 2f       	mov	r25, r21
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	61 50       	subi	r22, 0x01	; 1
    3ba4:	46 2f       	mov	r20, r22
    3ba6:	50 e0       	ldi	r21, 0x00	; 0
    3ba8:	4f 5f       	subi	r20, 0xFF	; 255
    3baa:	5f 4f       	sbci	r21, 0xFF	; 255
    3bac:	48 0f       	add	r20, r24
    3bae:	59 1f       	adc	r21, r25
    3bb0:	e7 01       	movw	r28, r14
    3bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    3bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    3bb6:	93 81       	ldd	r25, Z+3	; 0x03
    3bb8:	82 81       	ldd	r24, Z+2	; 0x02
    3bba:	25 81       	ldd	r18, Z+5	; 0x05
    3bbc:	98 1b       	sub	r25, r24
    3bbe:	92 23       	and	r25, r18
    3bc0:	84 81       	ldd	r24, Z+4	; 0x04
    3bc2:	98 17       	cp	r25, r24
    3bc4:	79 f0       	breq	.+30     	; 0x3be4 <serial_sendBytes+0x7c>
    3bc6:	8c 91       	ld	r24, X
    3bc8:	93 81       	ldd	r25, Z+3	; 0x03
    3bca:	26 95       	lsr	r18
    3bcc:	29 23       	and	r18, r25
    3bce:	60 81       	ld	r22, Z
    3bd0:	71 81       	ldd	r23, Z+1	; 0x01
    3bd2:	8b 01       	movw	r16, r22
    3bd4:	02 0f       	add	r16, r18
    3bd6:	11 1d       	adc	r17, r1
    3bd8:	e8 01       	movw	r28, r16
    3bda:	88 83       	st	Y, r24
    3bdc:	9f 5f       	subi	r25, 0xFF	; 255
    3bde:	85 81       	ldd	r24, Z+5	; 0x05
    3be0:	98 23       	and	r25, r24
    3be2:	93 83       	std	Z+3, r25	; 0x03
    3be4:	11 96       	adiw	r26, 0x01	; 1
    3be6:	a4 17       	cp	r26, r20
    3be8:	b5 07       	cpc	r27, r21
    3bea:	11 f7       	brne	.-60     	; 0x3bb0 <serial_sendBytes+0x48>
    3bec:	d7 01       	movw	r26, r14
    3bee:	ed 91       	ld	r30, X+
    3bf0:	fc 91       	ld	r31, X
    3bf2:	35 97       	sbiw	r30, 0x05	; 5
    3bf4:	80 81       	ld	r24, Z
    3bf6:	80 62       	ori	r24, 0x20	; 32
    3bf8:	80 83       	st	Z, r24
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	03 c0       	rjmp	.+6      	; 0x3c04 <serial_sendBytes+0x9c>
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	01 c0       	rjmp	.+2      	; 0x3c04 <serial_sendBytes+0x9c>
    3c02:	82 e0       	ldi	r24, 0x02	; 2
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	ff 90       	pop	r15
    3c0e:	ef 90       	pop	r14
    3c10:	08 95       	ret

00003c12 <serial_getByte>:
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	d1 f0       	breq	.+52     	; 0x3c4a <serial_getByte+0x38>
    3c16:	dc 01       	movw	r26, r24
    3c18:	14 96       	adiw	r26, 0x04	; 4
    3c1a:	ed 91       	ld	r30, X+
    3c1c:	fc 91       	ld	r31, X
    3c1e:	15 97       	sbiw	r26, 0x05	; 5
    3c20:	93 81       	ldd	r25, Z+3	; 0x03
    3c22:	82 81       	ldd	r24, Z+2	; 0x02
    3c24:	98 17       	cp	r25, r24
    3c26:	99 f0       	breq	.+38     	; 0x3c4e <serial_getByte+0x3c>
    3c28:	92 81       	ldd	r25, Z+2	; 0x02
    3c2a:	85 81       	ldd	r24, Z+5	; 0x05
    3c2c:	86 95       	lsr	r24
    3c2e:	89 23       	and	r24, r25
    3c30:	a0 81       	ld	r26, Z
    3c32:	b1 81       	ldd	r27, Z+1	; 0x01
    3c34:	a8 0f       	add	r26, r24
    3c36:	b1 1d       	adc	r27, r1
    3c38:	8c 91       	ld	r24, X
    3c3a:	db 01       	movw	r26, r22
    3c3c:	8c 93       	st	X, r24
    3c3e:	9f 5f       	subi	r25, 0xFF	; 255
    3c40:	85 81       	ldd	r24, Z+5	; 0x05
    3c42:	98 23       	and	r25, r24
    3c44:	92 83       	std	Z+2, r25	; 0x02
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	08 95       	ret
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	08 95       	ret
    3c4e:	83 e0       	ldi	r24, 0x03	; 3
    3c50:	08 95       	ret

00003c52 <__vector_25>:
    3c52:	1f 92       	push	r1
    3c54:	0f 92       	push	r0
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	0f 92       	push	r0
    3c5a:	11 24       	eor	r1, r1
    3c5c:	0b b6       	in	r0, 0x3b	; 59
    3c5e:	0f 92       	push	r0
    3c60:	2f 93       	push	r18
    3c62:	3f 93       	push	r19
    3c64:	4f 93       	push	r20
    3c66:	5f 93       	push	r21
    3c68:	6f 93       	push	r22
    3c6a:	7f 93       	push	r23
    3c6c:	8f 93       	push	r24
    3c6e:	9f 93       	push	r25
    3c70:	af 93       	push	r26
    3c72:	bf 93       	push	r27
    3c74:	cf 93       	push	r28
    3c76:	df 93       	push	r29
    3c78:	ef 93       	push	r30
    3c7a:	ff 93       	push	r31
    3c7c:	a0 91 36 13 	lds	r26, 0x1336	; 0x801336 <_ser_handle>
    3c80:	b0 91 37 13 	lds	r27, 0x1337	; 0x801337 <_ser_handle+0x1>
    3c84:	10 97       	sbiw	r26, 0x00	; 0
    3c86:	11 f1       	breq	.+68     	; 0x3ccc <__vector_25+0x7a>
    3c88:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3c8c:	14 96       	adiw	r26, 0x04	; 4
    3c8e:	ed 91       	ld	r30, X+
    3c90:	fc 91       	ld	r31, X
    3c92:	15 97       	sbiw	r26, 0x05	; 5
    3c94:	93 81       	ldd	r25, Z+3	; 0x03
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	25 81       	ldd	r18, Z+5	; 0x05
    3c9a:	98 1b       	sub	r25, r24
    3c9c:	92 23       	and	r25, r18
    3c9e:	84 81       	ldd	r24, Z+4	; 0x04
    3ca0:	98 17       	cp	r25, r24
    3ca2:	61 f0       	breq	.+24     	; 0x3cbc <__vector_25+0x6a>
    3ca4:	83 81       	ldd	r24, Z+3	; 0x03
    3ca6:	26 95       	lsr	r18
    3ca8:	28 23       	and	r18, r24
    3caa:	c0 81       	ld	r28, Z
    3cac:	d1 81       	ldd	r29, Z+1	; 0x01
    3cae:	c2 0f       	add	r28, r18
    3cb0:	d1 1d       	adc	r29, r1
    3cb2:	68 83       	st	Y, r22
    3cb4:	8f 5f       	subi	r24, 0xFF	; 255
    3cb6:	95 81       	ldd	r25, Z+5	; 0x05
    3cb8:	89 23       	and	r24, r25
    3cba:	83 83       	std	Z+3, r24	; 0x03
    3cbc:	16 96       	adiw	r26, 0x06	; 6
    3cbe:	ed 91       	ld	r30, X+
    3cc0:	fc 91       	ld	r31, X
    3cc2:	17 97       	sbiw	r26, 0x07	; 7
    3cc4:	30 97       	sbiw	r30, 0x00	; 0
    3cc6:	11 f0       	breq	.+4      	; 0x3ccc <__vector_25+0x7a>
    3cc8:	cd 01       	movw	r24, r26
    3cca:	19 95       	eicall
    3ccc:	ff 91       	pop	r31
    3cce:	ef 91       	pop	r30
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	bf 91       	pop	r27
    3cd6:	af 91       	pop	r26
    3cd8:	9f 91       	pop	r25
    3cda:	8f 91       	pop	r24
    3cdc:	7f 91       	pop	r23
    3cde:	6f 91       	pop	r22
    3ce0:	5f 91       	pop	r21
    3ce2:	4f 91       	pop	r20
    3ce4:	3f 91       	pop	r19
    3ce6:	2f 91       	pop	r18
    3ce8:	0f 90       	pop	r0
    3cea:	0b be       	out	0x3b, r0	; 59
    3cec:	0f 90       	pop	r0
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	0f 90       	pop	r0
    3cf2:	1f 90       	pop	r1
    3cf4:	18 95       	reti

00003cf6 <__vector_26>:
    3cf6:	1f 92       	push	r1
    3cf8:	0f 92       	push	r0
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	0f 92       	push	r0
    3cfe:	11 24       	eor	r1, r1
    3d00:	0b b6       	in	r0, 0x3b	; 59
    3d02:	0f 92       	push	r0
    3d04:	2f 93       	push	r18
    3d06:	8f 93       	push	r24
    3d08:	9f 93       	push	r25
    3d0a:	af 93       	push	r26
    3d0c:	bf 93       	push	r27
    3d0e:	ef 93       	push	r30
    3d10:	ff 93       	push	r31
    3d12:	e0 91 36 13 	lds	r30, 0x1336	; 0x801336 <_ser_handle>
    3d16:	f0 91 37 13 	lds	r31, 0x1337	; 0x801337 <_ser_handle+0x1>
    3d1a:	30 97       	sbiw	r30, 0x00	; 0
    3d1c:	b9 f0       	breq	.+46     	; 0x3d4c <__vector_26+0x56>
    3d1e:	02 80       	ldd	r0, Z+2	; 0x02
    3d20:	f3 81       	ldd	r31, Z+3	; 0x03
    3d22:	e0 2d       	mov	r30, r0
    3d24:	93 81       	ldd	r25, Z+3	; 0x03
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	98 17       	cp	r25, r24
    3d2a:	b1 f0       	breq	.+44     	; 0x3d58 <__vector_26+0x62>
    3d2c:	92 81       	ldd	r25, Z+2	; 0x02
    3d2e:	85 81       	ldd	r24, Z+5	; 0x05
    3d30:	28 2f       	mov	r18, r24
    3d32:	26 95       	lsr	r18
    3d34:	29 23       	and	r18, r25
    3d36:	a0 81       	ld	r26, Z
    3d38:	b1 81       	ldd	r27, Z+1	; 0x01
    3d3a:	a2 0f       	add	r26, r18
    3d3c:	b1 1d       	adc	r27, r1
    3d3e:	2c 91       	ld	r18, X
    3d40:	9f 5f       	subi	r25, 0xFF	; 255
    3d42:	89 23       	and	r24, r25
    3d44:	82 83       	std	Z+2, r24	; 0x02
    3d46:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3d4a:	0b c0       	rjmp	.+22     	; 0x3d62 <__vector_26+0x6c>
    3d4c:	e1 ec       	ldi	r30, 0xC1	; 193
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	8f 7d       	andi	r24, 0xDF	; 223
    3d54:	80 83       	st	Z, r24
    3d56:	05 c0       	rjmp	.+10     	; 0x3d62 <__vector_26+0x6c>
    3d58:	e1 ec       	ldi	r30, 0xC1	; 193
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	80 81       	ld	r24, Z
    3d5e:	8f 7d       	andi	r24, 0xDF	; 223
    3d60:	80 83       	st	Z, r24
    3d62:	ff 91       	pop	r31
    3d64:	ef 91       	pop	r30
    3d66:	bf 91       	pop	r27
    3d68:	af 91       	pop	r26
    3d6a:	9f 91       	pop	r25
    3d6c:	8f 91       	pop	r24
    3d6e:	2f 91       	pop	r18
    3d70:	0f 90       	pop	r0
    3d72:	0b be       	out	0x3b, r0	; 59
    3d74:	0f 90       	pop	r0
    3d76:	0f be       	out	0x3f, r0	; 63
    3d78:	0f 90       	pop	r0
    3d7a:	1f 90       	pop	r1
    3d7c:	18 95       	reti

00003d7e <__vector_36>:
    3d7e:	1f 92       	push	r1
    3d80:	0f 92       	push	r0
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	0f 92       	push	r0
    3d86:	11 24       	eor	r1, r1
    3d88:	0b b6       	in	r0, 0x3b	; 59
    3d8a:	0f 92       	push	r0
    3d8c:	2f 93       	push	r18
    3d8e:	3f 93       	push	r19
    3d90:	4f 93       	push	r20
    3d92:	5f 93       	push	r21
    3d94:	6f 93       	push	r22
    3d96:	7f 93       	push	r23
    3d98:	8f 93       	push	r24
    3d9a:	9f 93       	push	r25
    3d9c:	af 93       	push	r26
    3d9e:	bf 93       	push	r27
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	ef 93       	push	r30
    3da6:	ff 93       	push	r31
    3da8:	a0 91 38 13 	lds	r26, 0x1338	; 0x801338 <_ser_handle+0x2>
    3dac:	b0 91 39 13 	lds	r27, 0x1339	; 0x801339 <_ser_handle+0x3>
    3db0:	10 97       	sbiw	r26, 0x00	; 0
    3db2:	11 f1       	breq	.+68     	; 0x3df8 <__vector_36+0x7a>
    3db4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3db8:	14 96       	adiw	r26, 0x04	; 4
    3dba:	ed 91       	ld	r30, X+
    3dbc:	fc 91       	ld	r31, X
    3dbe:	15 97       	sbiw	r26, 0x05	; 5
    3dc0:	93 81       	ldd	r25, Z+3	; 0x03
    3dc2:	82 81       	ldd	r24, Z+2	; 0x02
    3dc4:	25 81       	ldd	r18, Z+5	; 0x05
    3dc6:	98 1b       	sub	r25, r24
    3dc8:	92 23       	and	r25, r18
    3dca:	84 81       	ldd	r24, Z+4	; 0x04
    3dcc:	98 17       	cp	r25, r24
    3dce:	61 f0       	breq	.+24     	; 0x3de8 <__vector_36+0x6a>
    3dd0:	83 81       	ldd	r24, Z+3	; 0x03
    3dd2:	26 95       	lsr	r18
    3dd4:	28 23       	and	r18, r24
    3dd6:	c0 81       	ld	r28, Z
    3dd8:	d1 81       	ldd	r29, Z+1	; 0x01
    3dda:	c2 0f       	add	r28, r18
    3ddc:	d1 1d       	adc	r29, r1
    3dde:	68 83       	st	Y, r22
    3de0:	8f 5f       	subi	r24, 0xFF	; 255
    3de2:	95 81       	ldd	r25, Z+5	; 0x05
    3de4:	89 23       	and	r24, r25
    3de6:	83 83       	std	Z+3, r24	; 0x03
    3de8:	16 96       	adiw	r26, 0x06	; 6
    3dea:	ed 91       	ld	r30, X+
    3dec:	fc 91       	ld	r31, X
    3dee:	17 97       	sbiw	r26, 0x07	; 7
    3df0:	30 97       	sbiw	r30, 0x00	; 0
    3df2:	11 f0       	breq	.+4      	; 0x3df8 <__vector_36+0x7a>
    3df4:	cd 01       	movw	r24, r26
    3df6:	19 95       	eicall
    3df8:	ff 91       	pop	r31
    3dfa:	ef 91       	pop	r30
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	bf 91       	pop	r27
    3e02:	af 91       	pop	r26
    3e04:	9f 91       	pop	r25
    3e06:	8f 91       	pop	r24
    3e08:	7f 91       	pop	r23
    3e0a:	6f 91       	pop	r22
    3e0c:	5f 91       	pop	r21
    3e0e:	4f 91       	pop	r20
    3e10:	3f 91       	pop	r19
    3e12:	2f 91       	pop	r18
    3e14:	0f 90       	pop	r0
    3e16:	0b be       	out	0x3b, r0	; 59
    3e18:	0f 90       	pop	r0
    3e1a:	0f be       	out	0x3f, r0	; 63
    3e1c:	0f 90       	pop	r0
    3e1e:	1f 90       	pop	r1
    3e20:	18 95       	reti

00003e22 <__vector_37>:
    3e22:	1f 92       	push	r1
    3e24:	0f 92       	push	r0
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	0f 92       	push	r0
    3e2a:	11 24       	eor	r1, r1
    3e2c:	0b b6       	in	r0, 0x3b	; 59
    3e2e:	0f 92       	push	r0
    3e30:	2f 93       	push	r18
    3e32:	8f 93       	push	r24
    3e34:	9f 93       	push	r25
    3e36:	af 93       	push	r26
    3e38:	bf 93       	push	r27
    3e3a:	ef 93       	push	r30
    3e3c:	ff 93       	push	r31
    3e3e:	e0 91 38 13 	lds	r30, 0x1338	; 0x801338 <_ser_handle+0x2>
    3e42:	f0 91 39 13 	lds	r31, 0x1339	; 0x801339 <_ser_handle+0x3>
    3e46:	30 97       	sbiw	r30, 0x00	; 0
    3e48:	b9 f0       	breq	.+46     	; 0x3e78 <__vector_37+0x56>
    3e4a:	02 80       	ldd	r0, Z+2	; 0x02
    3e4c:	f3 81       	ldd	r31, Z+3	; 0x03
    3e4e:	e0 2d       	mov	r30, r0
    3e50:	93 81       	ldd	r25, Z+3	; 0x03
    3e52:	82 81       	ldd	r24, Z+2	; 0x02
    3e54:	98 17       	cp	r25, r24
    3e56:	b1 f0       	breq	.+44     	; 0x3e84 <__vector_37+0x62>
    3e58:	92 81       	ldd	r25, Z+2	; 0x02
    3e5a:	85 81       	ldd	r24, Z+5	; 0x05
    3e5c:	28 2f       	mov	r18, r24
    3e5e:	26 95       	lsr	r18
    3e60:	29 23       	and	r18, r25
    3e62:	a0 81       	ld	r26, Z
    3e64:	b1 81       	ldd	r27, Z+1	; 0x01
    3e66:	a2 0f       	add	r26, r18
    3e68:	b1 1d       	adc	r27, r1
    3e6a:	2c 91       	ld	r18, X
    3e6c:	9f 5f       	subi	r25, 0xFF	; 255
    3e6e:	89 23       	and	r24, r25
    3e70:	82 83       	std	Z+2, r24	; 0x02
    3e72:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3e76:	0b c0       	rjmp	.+22     	; 0x3e8e <__vector_37+0x6c>
    3e78:	e9 ec       	ldi	r30, 0xC9	; 201
    3e7a:	f0 e0       	ldi	r31, 0x00	; 0
    3e7c:	80 81       	ld	r24, Z
    3e7e:	8f 7d       	andi	r24, 0xDF	; 223
    3e80:	80 83       	st	Z, r24
    3e82:	05 c0       	rjmp	.+10     	; 0x3e8e <__vector_37+0x6c>
    3e84:	e9 ec       	ldi	r30, 0xC9	; 201
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	80 81       	ld	r24, Z
    3e8a:	8f 7d       	andi	r24, 0xDF	; 223
    3e8c:	80 83       	st	Z, r24
    3e8e:	ff 91       	pop	r31
    3e90:	ef 91       	pop	r30
    3e92:	bf 91       	pop	r27
    3e94:	af 91       	pop	r26
    3e96:	9f 91       	pop	r25
    3e98:	8f 91       	pop	r24
    3e9a:	2f 91       	pop	r18
    3e9c:	0f 90       	pop	r0
    3e9e:	0b be       	out	0x3b, r0	; 59
    3ea0:	0f 90       	pop	r0
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	0f 90       	pop	r0
    3ea6:	1f 90       	pop	r1
    3ea8:	18 95       	reti

00003eaa <__vector_51>:
    3eaa:	1f 92       	push	r1
    3eac:	0f 92       	push	r0
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	0f 92       	push	r0
    3eb2:	11 24       	eor	r1, r1
    3eb4:	0b b6       	in	r0, 0x3b	; 59
    3eb6:	0f 92       	push	r0
    3eb8:	2f 93       	push	r18
    3eba:	3f 93       	push	r19
    3ebc:	4f 93       	push	r20
    3ebe:	5f 93       	push	r21
    3ec0:	6f 93       	push	r22
    3ec2:	7f 93       	push	r23
    3ec4:	8f 93       	push	r24
    3ec6:	9f 93       	push	r25
    3ec8:	af 93       	push	r26
    3eca:	bf 93       	push	r27
    3ecc:	cf 93       	push	r28
    3ece:	df 93       	push	r29
    3ed0:	ef 93       	push	r30
    3ed2:	ff 93       	push	r31
    3ed4:	a0 91 3a 13 	lds	r26, 0x133A	; 0x80133a <_ser_handle+0x4>
    3ed8:	b0 91 3b 13 	lds	r27, 0x133B	; 0x80133b <_ser_handle+0x5>
    3edc:	10 97       	sbiw	r26, 0x00	; 0
    3ede:	11 f1       	breq	.+68     	; 0x3f24 <__vector_51+0x7a>
    3ee0:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3ee4:	14 96       	adiw	r26, 0x04	; 4
    3ee6:	ed 91       	ld	r30, X+
    3ee8:	fc 91       	ld	r31, X
    3eea:	15 97       	sbiw	r26, 0x05	; 5
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	82 81       	ldd	r24, Z+2	; 0x02
    3ef0:	25 81       	ldd	r18, Z+5	; 0x05
    3ef2:	98 1b       	sub	r25, r24
    3ef4:	92 23       	and	r25, r18
    3ef6:	84 81       	ldd	r24, Z+4	; 0x04
    3ef8:	98 17       	cp	r25, r24
    3efa:	61 f0       	breq	.+24     	; 0x3f14 <__vector_51+0x6a>
    3efc:	83 81       	ldd	r24, Z+3	; 0x03
    3efe:	26 95       	lsr	r18
    3f00:	28 23       	and	r18, r24
    3f02:	c0 81       	ld	r28, Z
    3f04:	d1 81       	ldd	r29, Z+1	; 0x01
    3f06:	c2 0f       	add	r28, r18
    3f08:	d1 1d       	adc	r29, r1
    3f0a:	68 83       	st	Y, r22
    3f0c:	8f 5f       	subi	r24, 0xFF	; 255
    3f0e:	95 81       	ldd	r25, Z+5	; 0x05
    3f10:	89 23       	and	r24, r25
    3f12:	83 83       	std	Z+3, r24	; 0x03
    3f14:	16 96       	adiw	r26, 0x06	; 6
    3f16:	ed 91       	ld	r30, X+
    3f18:	fc 91       	ld	r31, X
    3f1a:	17 97       	sbiw	r26, 0x07	; 7
    3f1c:	30 97       	sbiw	r30, 0x00	; 0
    3f1e:	11 f0       	breq	.+4      	; 0x3f24 <__vector_51+0x7a>
    3f20:	cd 01       	movw	r24, r26
    3f22:	19 95       	eicall
    3f24:	ff 91       	pop	r31
    3f26:	ef 91       	pop	r30
    3f28:	df 91       	pop	r29
    3f2a:	cf 91       	pop	r28
    3f2c:	bf 91       	pop	r27
    3f2e:	af 91       	pop	r26
    3f30:	9f 91       	pop	r25
    3f32:	8f 91       	pop	r24
    3f34:	7f 91       	pop	r23
    3f36:	6f 91       	pop	r22
    3f38:	5f 91       	pop	r21
    3f3a:	4f 91       	pop	r20
    3f3c:	3f 91       	pop	r19
    3f3e:	2f 91       	pop	r18
    3f40:	0f 90       	pop	r0
    3f42:	0b be       	out	0x3b, r0	; 59
    3f44:	0f 90       	pop	r0
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	0f 90       	pop	r0
    3f4a:	1f 90       	pop	r1
    3f4c:	18 95       	reti

00003f4e <__vector_52>:
    3f4e:	1f 92       	push	r1
    3f50:	0f 92       	push	r0
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	0f 92       	push	r0
    3f56:	11 24       	eor	r1, r1
    3f58:	0b b6       	in	r0, 0x3b	; 59
    3f5a:	0f 92       	push	r0
    3f5c:	2f 93       	push	r18
    3f5e:	8f 93       	push	r24
    3f60:	9f 93       	push	r25
    3f62:	af 93       	push	r26
    3f64:	bf 93       	push	r27
    3f66:	ef 93       	push	r30
    3f68:	ff 93       	push	r31
    3f6a:	e0 91 3a 13 	lds	r30, 0x133A	; 0x80133a <_ser_handle+0x4>
    3f6e:	f0 91 3b 13 	lds	r31, 0x133B	; 0x80133b <_ser_handle+0x5>
    3f72:	30 97       	sbiw	r30, 0x00	; 0
    3f74:	b9 f0       	breq	.+46     	; 0x3fa4 <__vector_52+0x56>
    3f76:	02 80       	ldd	r0, Z+2	; 0x02
    3f78:	f3 81       	ldd	r31, Z+3	; 0x03
    3f7a:	e0 2d       	mov	r30, r0
    3f7c:	93 81       	ldd	r25, Z+3	; 0x03
    3f7e:	82 81       	ldd	r24, Z+2	; 0x02
    3f80:	98 17       	cp	r25, r24
    3f82:	b1 f0       	breq	.+44     	; 0x3fb0 <__vector_52+0x62>
    3f84:	92 81       	ldd	r25, Z+2	; 0x02
    3f86:	85 81       	ldd	r24, Z+5	; 0x05
    3f88:	28 2f       	mov	r18, r24
    3f8a:	26 95       	lsr	r18
    3f8c:	29 23       	and	r18, r25
    3f8e:	a0 81       	ld	r26, Z
    3f90:	b1 81       	ldd	r27, Z+1	; 0x01
    3f92:	a2 0f       	add	r26, r18
    3f94:	b1 1d       	adc	r27, r1
    3f96:	2c 91       	ld	r18, X
    3f98:	9f 5f       	subi	r25, 0xFF	; 255
    3f9a:	89 23       	and	r24, r25
    3f9c:	82 83       	std	Z+2, r24	; 0x02
    3f9e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3fa2:	0b c0       	rjmp	.+22     	; 0x3fba <__vector_52+0x6c>
    3fa4:	e1 ed       	ldi	r30, 0xD1	; 209
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	80 81       	ld	r24, Z
    3faa:	8f 7d       	andi	r24, 0xDF	; 223
    3fac:	80 83       	st	Z, r24
    3fae:	05 c0       	rjmp	.+10     	; 0x3fba <__vector_52+0x6c>
    3fb0:	e1 ed       	ldi	r30, 0xD1	; 209
    3fb2:	f0 e0       	ldi	r31, 0x00	; 0
    3fb4:	80 81       	ld	r24, Z
    3fb6:	8f 7d       	andi	r24, 0xDF	; 223
    3fb8:	80 83       	st	Z, r24
    3fba:	ff 91       	pop	r31
    3fbc:	ef 91       	pop	r30
    3fbe:	bf 91       	pop	r27
    3fc0:	af 91       	pop	r26
    3fc2:	9f 91       	pop	r25
    3fc4:	8f 91       	pop	r24
    3fc6:	2f 91       	pop	r18
    3fc8:	0f 90       	pop	r0
    3fca:	0b be       	out	0x3b, r0	; 59
    3fcc:	0f 90       	pop	r0
    3fce:	0f be       	out	0x3f, r0	; 63
    3fd0:	0f 90       	pop	r0
    3fd2:	1f 90       	pop	r1
    3fd4:	18 95       	reti

00003fd6 <__vector_54>:
    3fd6:	1f 92       	push	r1
    3fd8:	0f 92       	push	r0
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	0f 92       	push	r0
    3fde:	11 24       	eor	r1, r1
    3fe0:	0b b6       	in	r0, 0x3b	; 59
    3fe2:	0f 92       	push	r0
    3fe4:	2f 93       	push	r18
    3fe6:	3f 93       	push	r19
    3fe8:	4f 93       	push	r20
    3fea:	5f 93       	push	r21
    3fec:	6f 93       	push	r22
    3fee:	7f 93       	push	r23
    3ff0:	8f 93       	push	r24
    3ff2:	9f 93       	push	r25
    3ff4:	af 93       	push	r26
    3ff6:	bf 93       	push	r27
    3ff8:	cf 93       	push	r28
    3ffa:	df 93       	push	r29
    3ffc:	ef 93       	push	r30
    3ffe:	ff 93       	push	r31
    4000:	a0 91 3c 13 	lds	r26, 0x133C	; 0x80133c <_ser_handle+0x6>
    4004:	b0 91 3d 13 	lds	r27, 0x133D	; 0x80133d <_ser_handle+0x7>
    4008:	10 97       	sbiw	r26, 0x00	; 0
    400a:	11 f1       	breq	.+68     	; 0x4050 <__vector_54+0x7a>
    400c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4010:	14 96       	adiw	r26, 0x04	; 4
    4012:	ed 91       	ld	r30, X+
    4014:	fc 91       	ld	r31, X
    4016:	15 97       	sbiw	r26, 0x05	; 5
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	82 81       	ldd	r24, Z+2	; 0x02
    401c:	25 81       	ldd	r18, Z+5	; 0x05
    401e:	98 1b       	sub	r25, r24
    4020:	92 23       	and	r25, r18
    4022:	84 81       	ldd	r24, Z+4	; 0x04
    4024:	98 17       	cp	r25, r24
    4026:	61 f0       	breq	.+24     	; 0x4040 <__vector_54+0x6a>
    4028:	83 81       	ldd	r24, Z+3	; 0x03
    402a:	26 95       	lsr	r18
    402c:	28 23       	and	r18, r24
    402e:	c0 81       	ld	r28, Z
    4030:	d1 81       	ldd	r29, Z+1	; 0x01
    4032:	c2 0f       	add	r28, r18
    4034:	d1 1d       	adc	r29, r1
    4036:	68 83       	st	Y, r22
    4038:	8f 5f       	subi	r24, 0xFF	; 255
    403a:	95 81       	ldd	r25, Z+5	; 0x05
    403c:	89 23       	and	r24, r25
    403e:	83 83       	std	Z+3, r24	; 0x03
    4040:	16 96       	adiw	r26, 0x06	; 6
    4042:	ed 91       	ld	r30, X+
    4044:	fc 91       	ld	r31, X
    4046:	17 97       	sbiw	r26, 0x07	; 7
    4048:	30 97       	sbiw	r30, 0x00	; 0
    404a:	11 f0       	breq	.+4      	; 0x4050 <__vector_54+0x7a>
    404c:	cd 01       	movw	r24, r26
    404e:	19 95       	eicall
    4050:	ff 91       	pop	r31
    4052:	ef 91       	pop	r30
    4054:	df 91       	pop	r29
    4056:	cf 91       	pop	r28
    4058:	bf 91       	pop	r27
    405a:	af 91       	pop	r26
    405c:	9f 91       	pop	r25
    405e:	8f 91       	pop	r24
    4060:	7f 91       	pop	r23
    4062:	6f 91       	pop	r22
    4064:	5f 91       	pop	r21
    4066:	4f 91       	pop	r20
    4068:	3f 91       	pop	r19
    406a:	2f 91       	pop	r18
    406c:	0f 90       	pop	r0
    406e:	0b be       	out	0x3b, r0	; 59
    4070:	0f 90       	pop	r0
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	0f 90       	pop	r0
    4076:	1f 90       	pop	r1
    4078:	18 95       	reti

0000407a <__vector_55>:
    407a:	1f 92       	push	r1
    407c:	0f 92       	push	r0
    407e:	0f b6       	in	r0, 0x3f	; 63
    4080:	0f 92       	push	r0
    4082:	11 24       	eor	r1, r1
    4084:	0b b6       	in	r0, 0x3b	; 59
    4086:	0f 92       	push	r0
    4088:	2f 93       	push	r18
    408a:	8f 93       	push	r24
    408c:	9f 93       	push	r25
    408e:	af 93       	push	r26
    4090:	bf 93       	push	r27
    4092:	ef 93       	push	r30
    4094:	ff 93       	push	r31
    4096:	e0 91 3c 13 	lds	r30, 0x133C	; 0x80133c <_ser_handle+0x6>
    409a:	f0 91 3d 13 	lds	r31, 0x133D	; 0x80133d <_ser_handle+0x7>
    409e:	30 97       	sbiw	r30, 0x00	; 0
    40a0:	b9 f0       	breq	.+46     	; 0x40d0 <__vector_55+0x56>
    40a2:	02 80       	ldd	r0, Z+2	; 0x02
    40a4:	f3 81       	ldd	r31, Z+3	; 0x03
    40a6:	e0 2d       	mov	r30, r0
    40a8:	93 81       	ldd	r25, Z+3	; 0x03
    40aa:	82 81       	ldd	r24, Z+2	; 0x02
    40ac:	98 17       	cp	r25, r24
    40ae:	b1 f0       	breq	.+44     	; 0x40dc <__vector_55+0x62>
    40b0:	92 81       	ldd	r25, Z+2	; 0x02
    40b2:	85 81       	ldd	r24, Z+5	; 0x05
    40b4:	28 2f       	mov	r18, r24
    40b6:	26 95       	lsr	r18
    40b8:	29 23       	and	r18, r25
    40ba:	a0 81       	ld	r26, Z
    40bc:	b1 81       	ldd	r27, Z+1	; 0x01
    40be:	a2 0f       	add	r26, r18
    40c0:	b1 1d       	adc	r27, r1
    40c2:	2c 91       	ld	r18, X
    40c4:	9f 5f       	subi	r25, 0xFF	; 255
    40c6:	89 23       	and	r24, r25
    40c8:	82 83       	std	Z+2, r24	; 0x02
    40ca:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    40ce:	0b c0       	rjmp	.+22     	; 0x40e6 <__vector_55+0x6c>
    40d0:	e1 e3       	ldi	r30, 0x31	; 49
    40d2:	f1 e0       	ldi	r31, 0x01	; 1
    40d4:	80 81       	ld	r24, Z
    40d6:	8f 7d       	andi	r24, 0xDF	; 223
    40d8:	80 83       	st	Z, r24
    40da:	05 c0       	rjmp	.+10     	; 0x40e6 <__vector_55+0x6c>
    40dc:	e1 e3       	ldi	r30, 0x31	; 49
    40de:	f1 e0       	ldi	r31, 0x01	; 1
    40e0:	80 81       	ld	r24, Z
    40e2:	8f 7d       	andi	r24, 0xDF	; 223
    40e4:	80 83       	st	Z, r24
    40e6:	ff 91       	pop	r31
    40e8:	ef 91       	pop	r30
    40ea:	bf 91       	pop	r27
    40ec:	af 91       	pop	r26
    40ee:	9f 91       	pop	r25
    40f0:	8f 91       	pop	r24
    40f2:	2f 91       	pop	r18
    40f4:	0f 90       	pop	r0
    40f6:	0b be       	out	0x3b, r0	; 59
    40f8:	0f 90       	pop	r0
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	0f 90       	pop	r0
    40fe:	1f 90       	pop	r1
    4100:	18 95       	reti

00004102 <usart_getchar>:
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	1f 92       	push	r1
    4108:	cd b7       	in	r28, 0x3d	; 61
    410a:	de b7       	in	r29, 0x3e	; 62
    410c:	be 01       	movw	r22, r28
    410e:	6f 5f       	subi	r22, 0xFF	; 255
    4110:	7f 4f       	sbci	r23, 0xFF	; 255
    4112:	80 91 3e 13 	lds	r24, 0x133E	; 0x80133e <_com_serial_instance>
    4116:	90 91 3f 13 	lds	r25, 0x133F	; 0x80133f <_com_serial_instance+0x1>
    411a:	7b dd       	rcall	.-1290   	; 0x3c12 <serial_getByte>
    411c:	81 11       	cpse	r24, r1
    411e:	f6 cf       	rjmp	.-20     	; 0x410c <usart_getchar+0xa>
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	0f 90       	pop	r0
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <usart_putchar>:
    412c:	68 2f       	mov	r22, r24
    412e:	80 91 3e 13 	lds	r24, 0x133E	; 0x80133e <_com_serial_instance>
    4132:	90 91 3f 13 	lds	r25, 0x133F	; 0x80133f <_com_serial_instance+0x1>
    4136:	ed dc       	rcall	.-1574   	; 0x3b12 <serial_sendByte>
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	08 95       	ret

0000413e <stdio_initialise>:
    413e:	8f 92       	push	r8
    4140:	9f 92       	push	r9
    4142:	af 92       	push	r10
    4144:	cf 92       	push	r12
    4146:	ef 92       	push	r14
    4148:	0f 93       	push	r16
    414a:	81 2c       	mov	r8, r1
    414c:	91 2c       	mov	r9, r1
    414e:	68 94       	set
    4150:	aa 24       	eor	r10, r10
    4152:	a7 f8       	bld	r10, 7
    4154:	68 94       	set
    4156:	cc 24       	eor	r12, r12
    4158:	c7 f8       	bld	r12, 7
    415a:	e1 2c       	mov	r14, r1
    415c:	00 e0       	ldi	r16, 0x00	; 0
    415e:	23 e0       	ldi	r18, 0x03	; 3
    4160:	40 e0       	ldi	r20, 0x00	; 0
    4162:	51 ee       	ldi	r21, 0xE1	; 225
    4164:	60 e0       	ldi	r22, 0x00	; 0
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	38 dc       	rcall	.-1936   	; 0x39da <serial_create>
    416a:	90 93 3f 13 	sts	0x133F, r25	; 0x80133f <_com_serial_instance+0x1>
    416e:	80 93 3e 13 	sts	0x133E, r24	; 0x80133e <_com_serial_instance>
    4172:	ec e5       	ldi	r30, 0x5C	; 92
    4174:	f3 e1       	ldi	r31, 0x13	; 19
    4176:	8f e0       	ldi	r24, 0x0F	; 15
    4178:	92 e0       	ldi	r25, 0x02	; 2
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	80 83       	st	Z, r24
    417e:	93 83       	std	Z+3, r25	; 0x03
    4180:	82 83       	std	Z+2, r24	; 0x02
    4182:	0f 91       	pop	r16
    4184:	ef 90       	pop	r14
    4186:	cf 90       	pop	r12
    4188:	af 90       	pop	r10
    418a:	9f 90       	pop	r9
    418c:	8f 90       	pop	r8
    418e:	08 95       	ret

00004190 <_turn_off>:
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	fc 01       	movw	r30, r24
    4194:	ee 0f       	add	r30, r30
    4196:	ff 1f       	adc	r31, r31
    4198:	e8 0f       	add	r30, r24
    419a:	f9 1f       	adc	r31, r25
    419c:	ee 0f       	add	r30, r30
    419e:	ff 1f       	adc	r31, r31
    41a0:	e0 5c       	subi	r30, 0xC0	; 192
    41a2:	fc 4e       	sbci	r31, 0xEC	; 236
    41a4:	23 81       	ldd	r18, Z+3	; 0x03
    41a6:	21 11       	cpse	r18, r1
    41a8:	1f c0       	rjmp	.+62     	; 0x41e8 <_turn_off+0x58>
    41aa:	9c 01       	movw	r18, r24
    41ac:	22 0f       	add	r18, r18
    41ae:	33 1f       	adc	r19, r19
    41b0:	f9 01       	movw	r30, r18
    41b2:	e8 0f       	add	r30, r24
    41b4:	f9 1f       	adc	r31, r25
    41b6:	ee 0f       	add	r30, r30
    41b8:	ff 1f       	adc	r31, r31
    41ba:	e0 5c       	subi	r30, 0xC0	; 192
    41bc:	fc 4e       	sbci	r31, 0xEC	; 236
    41be:	a0 81       	ld	r26, Z
    41c0:	b1 81       	ldd	r27, Z+1	; 0x01
    41c2:	4c 91       	ld	r20, X
    41c4:	f9 01       	movw	r30, r18
    41c6:	e8 0f       	add	r30, r24
    41c8:	f9 1f       	adc	r31, r25
    41ca:	ee 0f       	add	r30, r30
    41cc:	ff 1f       	adc	r31, r31
    41ce:	e0 5c       	subi	r30, 0xC0	; 192
    41d0:	fc 4e       	sbci	r31, 0xEC	; 236
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	02 80       	ldd	r0, Z+2	; 0x02
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <_turn_off+0x4e>
    41da:	88 0f       	add	r24, r24
    41dc:	99 1f       	adc	r25, r25
    41de:	0a 94       	dec	r0
    41e0:	e2 f7       	brpl	.-8      	; 0x41da <_turn_off+0x4a>
    41e2:	84 2b       	or	r24, r20
    41e4:	8c 93       	st	X, r24
    41e6:	08 95       	ret
    41e8:	fc 01       	movw	r30, r24
    41ea:	ee 0f       	add	r30, r30
    41ec:	ff 1f       	adc	r31, r31
    41ee:	df 01       	movw	r26, r30
    41f0:	a8 0f       	add	r26, r24
    41f2:	b9 1f       	adc	r27, r25
    41f4:	aa 0f       	add	r26, r26
    41f6:	bb 1f       	adc	r27, r27
    41f8:	a0 5c       	subi	r26, 0xC0	; 192
    41fa:	bc 4e       	sbci	r27, 0xEC	; 236
    41fc:	0d 90       	ld	r0, X+
    41fe:	bc 91       	ld	r27, X
    4200:	a0 2d       	mov	r26, r0
    4202:	2c 91       	ld	r18, X
    4204:	e8 0f       	add	r30, r24
    4206:	f9 1f       	adc	r31, r25
    4208:	ee 0f       	add	r30, r30
    420a:	ff 1f       	adc	r31, r31
    420c:	e0 5c       	subi	r30, 0xC0	; 192
    420e:	fc 4e       	sbci	r31, 0xEC	; 236
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	02 80       	ldd	r0, Z+2	; 0x02
    4216:	02 c0       	rjmp	.+4      	; 0x421c <_turn_off+0x8c>
    4218:	88 0f       	add	r24, r24
    421a:	99 1f       	adc	r25, r25
    421c:	0a 94       	dec	r0
    421e:	e2 f7       	brpl	.-8      	; 0x4218 <_turn_off+0x88>
    4220:	80 95       	com	r24
    4222:	82 23       	and	r24, r18
    4224:	8c 93       	st	X, r24
    4226:	08 95       	ret

00004228 <_turn_on>:
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	fc 01       	movw	r30, r24
    422c:	ee 0f       	add	r30, r30
    422e:	ff 1f       	adc	r31, r31
    4230:	e8 0f       	add	r30, r24
    4232:	f9 1f       	adc	r31, r25
    4234:	ee 0f       	add	r30, r30
    4236:	ff 1f       	adc	r31, r31
    4238:	e0 5c       	subi	r30, 0xC0	; 192
    423a:	fc 4e       	sbci	r31, 0xEC	; 236
    423c:	23 81       	ldd	r18, Z+3	; 0x03
    423e:	21 11       	cpse	r18, r1
    4240:	20 c0       	rjmp	.+64     	; 0x4282 <_turn_on+0x5a>
    4242:	9c 01       	movw	r18, r24
    4244:	22 0f       	add	r18, r18
    4246:	33 1f       	adc	r19, r19
    4248:	f9 01       	movw	r30, r18
    424a:	e8 0f       	add	r30, r24
    424c:	f9 1f       	adc	r31, r25
    424e:	ee 0f       	add	r30, r30
    4250:	ff 1f       	adc	r31, r31
    4252:	e0 5c       	subi	r30, 0xC0	; 192
    4254:	fc 4e       	sbci	r31, 0xEC	; 236
    4256:	a0 81       	ld	r26, Z
    4258:	b1 81       	ldd	r27, Z+1	; 0x01
    425a:	4c 91       	ld	r20, X
    425c:	f9 01       	movw	r30, r18
    425e:	e8 0f       	add	r30, r24
    4260:	f9 1f       	adc	r31, r25
    4262:	ee 0f       	add	r30, r30
    4264:	ff 1f       	adc	r31, r31
    4266:	e0 5c       	subi	r30, 0xC0	; 192
    4268:	fc 4e       	sbci	r31, 0xEC	; 236
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	02 80       	ldd	r0, Z+2	; 0x02
    4270:	02 c0       	rjmp	.+4      	; 0x4276 <_turn_on+0x4e>
    4272:	88 0f       	add	r24, r24
    4274:	99 1f       	adc	r25, r25
    4276:	0a 94       	dec	r0
    4278:	e2 f7       	brpl	.-8      	; 0x4272 <_turn_on+0x4a>
    427a:	80 95       	com	r24
    427c:	84 23       	and	r24, r20
    427e:	8c 93       	st	X, r24
    4280:	08 95       	ret
    4282:	fc 01       	movw	r30, r24
    4284:	ee 0f       	add	r30, r30
    4286:	ff 1f       	adc	r31, r31
    4288:	df 01       	movw	r26, r30
    428a:	a8 0f       	add	r26, r24
    428c:	b9 1f       	adc	r27, r25
    428e:	aa 0f       	add	r26, r26
    4290:	bb 1f       	adc	r27, r27
    4292:	a0 5c       	subi	r26, 0xC0	; 192
    4294:	bc 4e       	sbci	r27, 0xEC	; 236
    4296:	0d 90       	ld	r0, X+
    4298:	bc 91       	ld	r27, X
    429a:	a0 2d       	mov	r26, r0
    429c:	2c 91       	ld	r18, X
    429e:	e8 0f       	add	r30, r24
    42a0:	f9 1f       	adc	r31, r25
    42a2:	ee 0f       	add	r30, r30
    42a4:	ff 1f       	adc	r31, r31
    42a6:	e0 5c       	subi	r30, 0xC0	; 192
    42a8:	fc 4e       	sbci	r31, 0xEC	; 236
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	02 80       	ldd	r0, Z+2	; 0x02
    42b0:	02 c0       	rjmp	.+4      	; 0x42b6 <_turn_on+0x8e>
    42b2:	88 0f       	add	r24, r24
    42b4:	99 1f       	adc	r25, r25
    42b6:	0a 94       	dec	r0
    42b8:	e2 f7       	brpl	.-8      	; 0x42b2 <_turn_on+0x8a>
    42ba:	82 2b       	or	r24, r18
    42bc:	8c 93       	st	X, r24
    42be:	08 95       	ret

000042c0 <_hal_led_task>:
    42c0:	cc 24       	eor	r12, r12
    42c2:	c3 94       	inc	r12
    42c4:	d1 2c       	mov	r13, r1
    42c6:	68 94       	set
    42c8:	bb 24       	eor	r11, r11
    42ca:	b2 f8       	bld	r11, 2
    42cc:	c0 e4       	ldi	r28, 0x40	; 64
    42ce:	d3 e1       	ldi	r29, 0x13	; 19
    42d0:	10 e0       	ldi	r17, 0x00	; 0
    42d2:	8c 81       	ldd	r24, Y+4	; 0x04
    42d4:	81 30       	cpi	r24, 0x01	; 1
    42d6:	81 f0       	breq	.+32     	; 0x42f8 <_hal_led_task+0x38>
    42d8:	18 f1       	brcs	.+70     	; 0x4320 <_hal_led_task+0x60>
    42da:	82 30       	cpi	r24, 0x02	; 2
    42dc:	61 f5       	brne	.+88     	; 0x4336 <_hal_led_task+0x76>
    42de:	e8 81       	ld	r30, Y
    42e0:	f9 81       	ldd	r31, Y+1	; 0x01
    42e2:	20 81       	ld	r18, Z
    42e4:	c6 01       	movw	r24, r12
    42e6:	0a 80       	ldd	r0, Y+2	; 0x02
    42e8:	02 c0       	rjmp	.+4      	; 0x42ee <_hal_led_task+0x2e>
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	0a 94       	dec	r0
    42f0:	e2 f7       	brpl	.-8      	; 0x42ea <_hal_led_task+0x2a>
    42f2:	82 27       	eor	r24, r18
    42f4:	80 83       	st	Z, r24
    42f6:	1f c0       	rjmp	.+62     	; 0x4336 <_hal_led_task+0x76>
    42f8:	8d 81       	ldd	r24, Y+5	; 0x05
    42fa:	8f 5f       	subi	r24, 0xFF	; 255
    42fc:	8a 30       	cpi	r24, 0x0A	; 10
    42fe:	10 f4       	brcc	.+4      	; 0x4304 <_hal_led_task+0x44>
    4300:	8d 83       	std	Y+5, r24	; 0x05
    4302:	19 c0       	rjmp	.+50     	; 0x4336 <_hal_led_task+0x76>
    4304:	1d 82       	std	Y+5, r1	; 0x05
    4306:	e8 81       	ld	r30, Y
    4308:	f9 81       	ldd	r31, Y+1	; 0x01
    430a:	20 81       	ld	r18, Z
    430c:	c6 01       	movw	r24, r12
    430e:	0a 80       	ldd	r0, Y+2	; 0x02
    4310:	02 c0       	rjmp	.+4      	; 0x4316 <_hal_led_task+0x56>
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	0a 94       	dec	r0
    4318:	e2 f7       	brpl	.-8      	; 0x4312 <_hal_led_task+0x52>
    431a:	82 27       	eor	r24, r18
    431c:	80 83       	st	Z, r24
    431e:	0b c0       	rjmp	.+22     	; 0x4336 <_hal_led_task+0x76>
    4320:	0d 81       	ldd	r16, Y+5	; 0x05
    4322:	00 23       	and	r16, r16
    4324:	29 f0       	breq	.+10     	; 0x4330 <_hal_led_task+0x70>
    4326:	81 2f       	mov	r24, r17
    4328:	7f df       	rcall	.-258    	; 0x4228 <_turn_on>
    432a:	01 50       	subi	r16, 0x01	; 1
    432c:	0d 83       	std	Y+5, r16	; 0x05
    432e:	03 c0       	rjmp	.+6      	; 0x4336 <_hal_led_task+0x76>
    4330:	bc 82       	std	Y+4, r11	; 0x04
    4332:	81 2f       	mov	r24, r17
    4334:	2d df       	rcall	.-422    	; 0x4190 <_turn_off>
    4336:	1f 5f       	subi	r17, 0xFF	; 255
    4338:	26 96       	adiw	r28, 0x06	; 6
    433a:	14 30       	cpi	r17, 0x04	; 4
    433c:	51 f6       	brne	.-108    	; 0x42d2 <_hal_led_task+0x12>
    433e:	65 e0       	ldi	r22, 0x05	; 5
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vTaskDelay>
    434a:	c0 cf       	rjmp	.-128    	; 0x42cc <_hal_led_task+0xc>

0000434c <status_leds_initialise>:
    434c:	ef 92       	push	r14
    434e:	ff 92       	push	r15
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	08 2f       	mov	r16, r24
    435a:	80 e4       	ldi	r24, 0x40	; 64
    435c:	87 b9       	out	0x07, r24	; 7
    435e:	c0 e4       	ldi	r28, 0x40	; 64
    4360:	d3 e1       	ldi	r29, 0x13	; 19
    4362:	0f 2e       	mov	r0, r31
    4364:	f8 e2       	ldi	r31, 0x28	; 40
    4366:	ef 2e       	mov	r14, r31
    4368:	f1 2c       	mov	r15, r1
    436a:	f0 2d       	mov	r31, r0
    436c:	f9 82       	std	Y+1, r15	; 0x01
    436e:	e8 82       	st	Y, r14
    4370:	86 e0       	ldi	r24, 0x06	; 6
    4372:	8a 83       	std	Y+2, r24	; 0x02
    4374:	1b 82       	std	Y+3, r1	; 0x03
    4376:	14 e0       	ldi	r17, 0x04	; 4
    4378:	1c 83       	std	Y+4, r17	; 0x04
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	09 df       	rcall	.-494    	; 0x4190 <_turn_off>
    437e:	80 e8       	ldi	r24, 0x80	; 128
    4380:	87 b9       	out	0x07, r24	; 7
    4382:	ff 82       	std	Y+7, r15	; 0x07
    4384:	ee 82       	std	Y+6, r14	; 0x06
    4386:	87 e0       	ldi	r24, 0x07	; 7
    4388:	88 87       	std	Y+8, r24	; 0x08
    438a:	19 86       	std	Y+9, r1	; 0x09
    438c:	1a 87       	std	Y+10, r17	; 0x0a
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	ff de       	rcall	.-514    	; 0x4190 <_turn_off>
    4392:	80 e2       	ldi	r24, 0x20	; 32
    4394:	83 bb       	out	0x13, r24	; 19
    4396:	84 e3       	ldi	r24, 0x34	; 52
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	9d 87       	std	Y+13, r25	; 0x0d
    439c:	8c 87       	std	Y+12, r24	; 0x0c
    439e:	85 e0       	ldi	r24, 0x05	; 5
    43a0:	8e 87       	std	Y+14, r24	; 0x0e
    43a2:	1f 86       	std	Y+15, r1	; 0x0f
    43a4:	18 8b       	std	Y+16, r17	; 0x10
    43a6:	82 e0       	ldi	r24, 0x02	; 2
    43a8:	f3 de       	rcall	.-538    	; 0x4190 <_turn_off>
    43aa:	80 e1       	ldi	r24, 0x10	; 16
    43ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    43b0:	82 e0       	ldi	r24, 0x02	; 2
    43b2:	91 e0       	ldi	r25, 0x01	; 1
    43b4:	9b 8b       	std	Y+19, r25	; 0x13
    43b6:	8a 8b       	std	Y+18, r24	; 0x12
    43b8:	1c 8b       	std	Y+20, r17	; 0x14
    43ba:	1d 8a       	std	Y+21, r1	; 0x15
    43bc:	1e 8b       	std	Y+22, r17	; 0x16
    43be:	83 e0       	ldi	r24, 0x03	; 3
    43c0:	e7 de       	rcall	.-562    	; 0x4190 <_turn_off>
    43c2:	e1 2c       	mov	r14, r1
    43c4:	f1 2c       	mov	r15, r1
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	40 ec       	ldi	r20, 0xC0	; 192
    43cc:	50 e0       	ldi	r21, 0x00	; 0
    43ce:	60 ee       	ldi	r22, 0xE0	; 224
    43d0:	76 e0       	ldi	r23, 0x06	; 6
    43d2:	80 e6       	ldi	r24, 0x60	; 96
    43d4:	91 e2       	ldi	r25, 0x21	; 33
    43d6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <xTaskCreate>
    43da:	df 91       	pop	r29
    43dc:	cf 91       	pop	r28
    43de:	1f 91       	pop	r17
    43e0:	0f 91       	pop	r16
    43e2:	ff 90       	pop	r15
    43e4:	ef 90       	pop	r14
    43e6:	08 95       	ret

000043e8 <status_leds_slowBlink>:
    43e8:	cf 93       	push	r28
    43ea:	df 93       	push	r29
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	fc 01       	movw	r30, r24
    43f0:	ee 0f       	add	r30, r30
    43f2:	ff 1f       	adc	r31, r31
    43f4:	df 01       	movw	r26, r30
    43f6:	a8 0f       	add	r26, r24
    43f8:	b9 1f       	adc	r27, r25
    43fa:	aa 0f       	add	r26, r26
    43fc:	bb 1f       	adc	r27, r27
    43fe:	a0 5c       	subi	r26, 0xC0	; 192
    4400:	bc 4e       	sbci	r27, 0xEC	; 236
    4402:	cd 91       	ld	r28, X+
    4404:	dc 91       	ld	r29, X
    4406:	11 97       	sbiw	r26, 0x01	; 1
    4408:	48 81       	ld	r20, Y
    440a:	21 e0       	ldi	r18, 0x01	; 1
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	12 96       	adiw	r26, 0x02	; 2
    4410:	0c 90       	ld	r0, X
    4412:	12 97       	sbiw	r26, 0x02	; 2
    4414:	02 c0       	rjmp	.+4      	; 0x441a <status_leds_slowBlink+0x32>
    4416:	22 0f       	add	r18, r18
    4418:	33 1f       	adc	r19, r19
    441a:	0a 94       	dec	r0
    441c:	e2 f7       	brpl	.-8      	; 0x4416 <status_leds_slowBlink+0x2e>
    441e:	24 27       	eor	r18, r20
    4420:	28 83       	st	Y, r18
    4422:	fd 01       	movw	r30, r26
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	84 83       	std	Z+4, r24	; 0x04
    4428:	df 91       	pop	r29
    442a:	cf 91       	pop	r28
    442c:	08 95       	ret

0000442e <status_leds_fastBlink>:
    442e:	cf 93       	push	r28
    4430:	df 93       	push	r29
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	fc 01       	movw	r30, r24
    4436:	ee 0f       	add	r30, r30
    4438:	ff 1f       	adc	r31, r31
    443a:	df 01       	movw	r26, r30
    443c:	a8 0f       	add	r26, r24
    443e:	b9 1f       	adc	r27, r25
    4440:	aa 0f       	add	r26, r26
    4442:	bb 1f       	adc	r27, r27
    4444:	a0 5c       	subi	r26, 0xC0	; 192
    4446:	bc 4e       	sbci	r27, 0xEC	; 236
    4448:	cd 91       	ld	r28, X+
    444a:	dc 91       	ld	r29, X
    444c:	11 97       	sbiw	r26, 0x01	; 1
    444e:	48 81       	ld	r20, Y
    4450:	21 e0       	ldi	r18, 0x01	; 1
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	12 96       	adiw	r26, 0x02	; 2
    4456:	0c 90       	ld	r0, X
    4458:	12 97       	sbiw	r26, 0x02	; 2
    445a:	02 c0       	rjmp	.+4      	; 0x4460 <status_leds_fastBlink+0x32>
    445c:	22 0f       	add	r18, r18
    445e:	33 1f       	adc	r19, r19
    4460:	0a 94       	dec	r0
    4462:	e2 f7       	brpl	.-8      	; 0x445c <status_leds_fastBlink+0x2e>
    4464:	24 27       	eor	r18, r20
    4466:	28 83       	st	Y, r18
    4468:	fd 01       	movw	r30, r26
    446a:	82 e0       	ldi	r24, 0x02	; 2
    446c:	84 83       	std	Z+4, r24	; 0x04
    446e:	df 91       	pop	r29
    4470:	cf 91       	pop	r28
    4472:	08 95       	ret

00004474 <status_leds_ledOn>:
    4474:	28 2f       	mov	r18, r24
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	f9 01       	movw	r30, r18
    447a:	ee 0f       	add	r30, r30
    447c:	ff 1f       	adc	r31, r31
    447e:	e2 0f       	add	r30, r18
    4480:	f3 1f       	adc	r31, r19
    4482:	ee 0f       	add	r30, r30
    4484:	ff 1f       	adc	r31, r31
    4486:	e0 5c       	subi	r30, 0xC0	; 192
    4488:	fc 4e       	sbci	r31, 0xEC	; 236
    448a:	93 e0       	ldi	r25, 0x03	; 3
    448c:	94 83       	std	Z+4, r25	; 0x04
    448e:	cc ce       	rjmp	.-616    	; 0x4228 <_turn_on>
    4490:	08 95       	ret

00004492 <status_leds_ledOff>:
    4492:	28 2f       	mov	r18, r24
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	f9 01       	movw	r30, r18
    4498:	ee 0f       	add	r30, r30
    449a:	ff 1f       	adc	r31, r31
    449c:	e2 0f       	add	r30, r18
    449e:	f3 1f       	adc	r31, r19
    44a0:	ee 0f       	add	r30, r30
    44a2:	ff 1f       	adc	r31, r31
    44a4:	e0 5c       	subi	r30, 0xC0	; 192
    44a6:	fc 4e       	sbci	r31, 0xEC	; 236
    44a8:	94 e0       	ldi	r25, 0x04	; 4
    44aa:	94 83       	std	Z+4, r25	; 0x04
    44ac:	71 ce       	rjmp	.-798    	; 0x4190 <_turn_off>
    44ae:	08 95       	ret

000044b0 <status_leds_longPuls>:
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	fc 01       	movw	r30, r24
    44b4:	ee 0f       	add	r30, r30
    44b6:	ff 1f       	adc	r31, r31
    44b8:	df 01       	movw	r26, r30
    44ba:	a8 0f       	add	r26, r24
    44bc:	b9 1f       	adc	r27, r25
    44be:	aa 0f       	add	r26, r26
    44c0:	bb 1f       	adc	r27, r27
    44c2:	a0 5c       	subi	r26, 0xC0	; 192
    44c4:	bc 4e       	sbci	r27, 0xEC	; 236
    44c6:	24 e0       	ldi	r18, 0x04	; 4
    44c8:	15 96       	adiw	r26, 0x05	; 5
    44ca:	2c 93       	st	X, r18
    44cc:	15 97       	sbiw	r26, 0x05	; 5
    44ce:	fd 01       	movw	r30, r26
    44d0:	14 82       	std	Z+4, r1	; 0x04
    44d2:	08 95       	ret

000044d4 <status_leds_shortPuls>:
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	fc 01       	movw	r30, r24
    44d8:	ee 0f       	add	r30, r30
    44da:	ff 1f       	adc	r31, r31
    44dc:	df 01       	movw	r26, r30
    44de:	a8 0f       	add	r26, r24
    44e0:	b9 1f       	adc	r27, r25
    44e2:	aa 0f       	add	r26, r26
    44e4:	bb 1f       	adc	r27, r27
    44e6:	a0 5c       	subi	r26, 0xC0	; 192
    44e8:	bc 4e       	sbci	r27, 0xEC	; 236
    44ea:	21 e0       	ldi	r18, 0x01	; 1
    44ec:	15 96       	adiw	r26, 0x05	; 5
    44ee:	2c 93       	st	X, r18
    44f0:	15 97       	sbiw	r26, 0x05	; 5
    44f2:	fd 01       	movw	r30, r26
    44f4:	14 82       	std	Z+4, r1	; 0x04
    44f6:	08 95       	ret

000044f8 <fifo_init>:
    44f8:	fc 01       	movw	r30, r24
    44fa:	41 11       	cpse	r20, r1
    44fc:	01 c0       	rjmp	.+2      	; 0x4500 <fifo_init+0x8>
    44fe:	45 d3       	rcall	.+1674   	; 0x4b8a <abort>
    4500:	84 2f       	mov	r24, r20
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	9c 01       	movw	r18, r24
    4506:	21 50       	subi	r18, 0x01	; 1
    4508:	31 09       	sbc	r19, r1
    450a:	82 23       	and	r24, r18
    450c:	93 23       	and	r25, r19
    450e:	89 2b       	or	r24, r25
    4510:	09 f0       	breq	.+2      	; 0x4514 <fifo_init+0x1c>
    4512:	3b d3       	rcall	.+1654   	; 0x4b8a <abort>
    4514:	41 38       	cpi	r20, 0x81	; 129
    4516:	08 f0       	brcs	.+2      	; 0x451a <fifo_init+0x22>
    4518:	38 d3       	rcall	.+1648   	; 0x4b8a <abort>
    451a:	12 82       	std	Z+2, r1	; 0x02
    451c:	13 82       	std	Z+3, r1	; 0x03
    451e:	44 83       	std	Z+4, r20	; 0x04
    4520:	44 0f       	add	r20, r20
    4522:	41 50       	subi	r20, 0x01	; 1
    4524:	45 83       	std	Z+5, r20	; 0x05
    4526:	71 83       	std	Z+1, r23	; 0x01
    4528:	60 83       	st	Z, r22
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	08 95       	ret

00004530 <__subsf3>:
    4530:	50 58       	subi	r21, 0x80	; 128

00004532 <__addsf3>:
    4532:	bb 27       	eor	r27, r27
    4534:	aa 27       	eor	r26, r26
    4536:	0e d0       	rcall	.+28     	; 0x4554 <__addsf3x>
    4538:	48 c1       	rjmp	.+656    	; 0x47ca <__fp_round>
    453a:	39 d1       	rcall	.+626    	; 0x47ae <__fp_pscA>
    453c:	30 f0       	brcs	.+12     	; 0x454a <__addsf3+0x18>
    453e:	3e d1       	rcall	.+636    	; 0x47bc <__fp_pscB>
    4540:	20 f0       	brcs	.+8      	; 0x454a <__addsf3+0x18>
    4542:	31 f4       	brne	.+12     	; 0x4550 <__addsf3+0x1e>
    4544:	9f 3f       	cpi	r25, 0xFF	; 255
    4546:	11 f4       	brne	.+4      	; 0x454c <__addsf3+0x1a>
    4548:	1e f4       	brtc	.+6      	; 0x4550 <__addsf3+0x1e>
    454a:	2e c1       	rjmp	.+604    	; 0x47a8 <__fp_nan>
    454c:	0e f4       	brtc	.+2      	; 0x4550 <__addsf3+0x1e>
    454e:	e0 95       	com	r30
    4550:	e7 fb       	bst	r30, 7
    4552:	24 c1       	rjmp	.+584    	; 0x479c <__fp_inf>

00004554 <__addsf3x>:
    4554:	e9 2f       	mov	r30, r25
    4556:	4a d1       	rcall	.+660    	; 0x47ec <__fp_split3>
    4558:	80 f3       	brcs	.-32     	; 0x453a <__addsf3+0x8>
    455a:	ba 17       	cp	r27, r26
    455c:	62 07       	cpc	r22, r18
    455e:	73 07       	cpc	r23, r19
    4560:	84 07       	cpc	r24, r20
    4562:	95 07       	cpc	r25, r21
    4564:	18 f0       	brcs	.+6      	; 0x456c <__addsf3x+0x18>
    4566:	71 f4       	brne	.+28     	; 0x4584 <__addsf3x+0x30>
    4568:	9e f5       	brtc	.+102    	; 0x45d0 <__addsf3x+0x7c>
    456a:	62 c1       	rjmp	.+708    	; 0x4830 <__fp_zero>
    456c:	0e f4       	brtc	.+2      	; 0x4570 <__addsf3x+0x1c>
    456e:	e0 95       	com	r30
    4570:	0b 2e       	mov	r0, r27
    4572:	ba 2f       	mov	r27, r26
    4574:	a0 2d       	mov	r26, r0
    4576:	0b 01       	movw	r0, r22
    4578:	b9 01       	movw	r22, r18
    457a:	90 01       	movw	r18, r0
    457c:	0c 01       	movw	r0, r24
    457e:	ca 01       	movw	r24, r20
    4580:	a0 01       	movw	r20, r0
    4582:	11 24       	eor	r1, r1
    4584:	ff 27       	eor	r31, r31
    4586:	59 1b       	sub	r21, r25
    4588:	99 f0       	breq	.+38     	; 0x45b0 <__addsf3x+0x5c>
    458a:	59 3f       	cpi	r21, 0xF9	; 249
    458c:	50 f4       	brcc	.+20     	; 0x45a2 <__addsf3x+0x4e>
    458e:	50 3e       	cpi	r21, 0xE0	; 224
    4590:	68 f1       	brcs	.+90     	; 0x45ec <__addsf3x+0x98>
    4592:	1a 16       	cp	r1, r26
    4594:	f0 40       	sbci	r31, 0x00	; 0
    4596:	a2 2f       	mov	r26, r18
    4598:	23 2f       	mov	r18, r19
    459a:	34 2f       	mov	r19, r20
    459c:	44 27       	eor	r20, r20
    459e:	58 5f       	subi	r21, 0xF8	; 248
    45a0:	f3 cf       	rjmp	.-26     	; 0x4588 <__addsf3x+0x34>
    45a2:	46 95       	lsr	r20
    45a4:	37 95       	ror	r19
    45a6:	27 95       	ror	r18
    45a8:	a7 95       	ror	r26
    45aa:	f0 40       	sbci	r31, 0x00	; 0
    45ac:	53 95       	inc	r21
    45ae:	c9 f7       	brne	.-14     	; 0x45a2 <__addsf3x+0x4e>
    45b0:	7e f4       	brtc	.+30     	; 0x45d0 <__addsf3x+0x7c>
    45b2:	1f 16       	cp	r1, r31
    45b4:	ba 0b       	sbc	r27, r26
    45b6:	62 0b       	sbc	r22, r18
    45b8:	73 0b       	sbc	r23, r19
    45ba:	84 0b       	sbc	r24, r20
    45bc:	ba f0       	brmi	.+46     	; 0x45ec <__addsf3x+0x98>
    45be:	91 50       	subi	r25, 0x01	; 1
    45c0:	a1 f0       	breq	.+40     	; 0x45ea <__addsf3x+0x96>
    45c2:	ff 0f       	add	r31, r31
    45c4:	bb 1f       	adc	r27, r27
    45c6:	66 1f       	adc	r22, r22
    45c8:	77 1f       	adc	r23, r23
    45ca:	88 1f       	adc	r24, r24
    45cc:	c2 f7       	brpl	.-16     	; 0x45be <__addsf3x+0x6a>
    45ce:	0e c0       	rjmp	.+28     	; 0x45ec <__addsf3x+0x98>
    45d0:	ba 0f       	add	r27, r26
    45d2:	62 1f       	adc	r22, r18
    45d4:	73 1f       	adc	r23, r19
    45d6:	84 1f       	adc	r24, r20
    45d8:	48 f4       	brcc	.+18     	; 0x45ec <__addsf3x+0x98>
    45da:	87 95       	ror	r24
    45dc:	77 95       	ror	r23
    45de:	67 95       	ror	r22
    45e0:	b7 95       	ror	r27
    45e2:	f7 95       	ror	r31
    45e4:	9e 3f       	cpi	r25, 0xFE	; 254
    45e6:	08 f0       	brcs	.+2      	; 0x45ea <__addsf3x+0x96>
    45e8:	b3 cf       	rjmp	.-154    	; 0x4550 <__addsf3+0x1e>
    45ea:	93 95       	inc	r25
    45ec:	88 0f       	add	r24, r24
    45ee:	08 f0       	brcs	.+2      	; 0x45f2 <__addsf3x+0x9e>
    45f0:	99 27       	eor	r25, r25
    45f2:	ee 0f       	add	r30, r30
    45f4:	97 95       	ror	r25
    45f6:	87 95       	ror	r24
    45f8:	08 95       	ret

000045fa <__divsf3>:
    45fa:	0c d0       	rcall	.+24     	; 0x4614 <__divsf3x>
    45fc:	e6 c0       	rjmp	.+460    	; 0x47ca <__fp_round>
    45fe:	de d0       	rcall	.+444    	; 0x47bc <__fp_pscB>
    4600:	40 f0       	brcs	.+16     	; 0x4612 <__divsf3+0x18>
    4602:	d5 d0       	rcall	.+426    	; 0x47ae <__fp_pscA>
    4604:	30 f0       	brcs	.+12     	; 0x4612 <__divsf3+0x18>
    4606:	21 f4       	brne	.+8      	; 0x4610 <__divsf3+0x16>
    4608:	5f 3f       	cpi	r21, 0xFF	; 255
    460a:	19 f0       	breq	.+6      	; 0x4612 <__divsf3+0x18>
    460c:	c7 c0       	rjmp	.+398    	; 0x479c <__fp_inf>
    460e:	51 11       	cpse	r21, r1
    4610:	10 c1       	rjmp	.+544    	; 0x4832 <__fp_szero>
    4612:	ca c0       	rjmp	.+404    	; 0x47a8 <__fp_nan>

00004614 <__divsf3x>:
    4614:	eb d0       	rcall	.+470    	; 0x47ec <__fp_split3>
    4616:	98 f3       	brcs	.-26     	; 0x45fe <__divsf3+0x4>

00004618 <__divsf3_pse>:
    4618:	99 23       	and	r25, r25
    461a:	c9 f3       	breq	.-14     	; 0x460e <__divsf3+0x14>
    461c:	55 23       	and	r21, r21
    461e:	b1 f3       	breq	.-20     	; 0x460c <__divsf3+0x12>
    4620:	95 1b       	sub	r25, r21
    4622:	55 0b       	sbc	r21, r21
    4624:	bb 27       	eor	r27, r27
    4626:	aa 27       	eor	r26, r26
    4628:	62 17       	cp	r22, r18
    462a:	73 07       	cpc	r23, r19
    462c:	84 07       	cpc	r24, r20
    462e:	38 f0       	brcs	.+14     	; 0x463e <__divsf3_pse+0x26>
    4630:	9f 5f       	subi	r25, 0xFF	; 255
    4632:	5f 4f       	sbci	r21, 0xFF	; 255
    4634:	22 0f       	add	r18, r18
    4636:	33 1f       	adc	r19, r19
    4638:	44 1f       	adc	r20, r20
    463a:	aa 1f       	adc	r26, r26
    463c:	a9 f3       	breq	.-22     	; 0x4628 <__divsf3_pse+0x10>
    463e:	33 d0       	rcall	.+102    	; 0x46a6 <__divsf3_pse+0x8e>
    4640:	0e 2e       	mov	r0, r30
    4642:	3a f0       	brmi	.+14     	; 0x4652 <__divsf3_pse+0x3a>
    4644:	e0 e8       	ldi	r30, 0x80	; 128
    4646:	30 d0       	rcall	.+96     	; 0x46a8 <__divsf3_pse+0x90>
    4648:	91 50       	subi	r25, 0x01	; 1
    464a:	50 40       	sbci	r21, 0x00	; 0
    464c:	e6 95       	lsr	r30
    464e:	00 1c       	adc	r0, r0
    4650:	ca f7       	brpl	.-14     	; 0x4644 <__divsf3_pse+0x2c>
    4652:	29 d0       	rcall	.+82     	; 0x46a6 <__divsf3_pse+0x8e>
    4654:	fe 2f       	mov	r31, r30
    4656:	27 d0       	rcall	.+78     	; 0x46a6 <__divsf3_pse+0x8e>
    4658:	66 0f       	add	r22, r22
    465a:	77 1f       	adc	r23, r23
    465c:	88 1f       	adc	r24, r24
    465e:	bb 1f       	adc	r27, r27
    4660:	26 17       	cp	r18, r22
    4662:	37 07       	cpc	r19, r23
    4664:	48 07       	cpc	r20, r24
    4666:	ab 07       	cpc	r26, r27
    4668:	b0 e8       	ldi	r27, 0x80	; 128
    466a:	09 f0       	breq	.+2      	; 0x466e <__divsf3_pse+0x56>
    466c:	bb 0b       	sbc	r27, r27
    466e:	80 2d       	mov	r24, r0
    4670:	bf 01       	movw	r22, r30
    4672:	ff 27       	eor	r31, r31
    4674:	93 58       	subi	r25, 0x83	; 131
    4676:	5f 4f       	sbci	r21, 0xFF	; 255
    4678:	2a f0       	brmi	.+10     	; 0x4684 <__divsf3_pse+0x6c>
    467a:	9e 3f       	cpi	r25, 0xFE	; 254
    467c:	51 05       	cpc	r21, r1
    467e:	68 f0       	brcs	.+26     	; 0x469a <__divsf3_pse+0x82>
    4680:	8d c0       	rjmp	.+282    	; 0x479c <__fp_inf>
    4682:	d7 c0       	rjmp	.+430    	; 0x4832 <__fp_szero>
    4684:	5f 3f       	cpi	r21, 0xFF	; 255
    4686:	ec f3       	brlt	.-6      	; 0x4682 <__divsf3_pse+0x6a>
    4688:	98 3e       	cpi	r25, 0xE8	; 232
    468a:	dc f3       	brlt	.-10     	; 0x4682 <__divsf3_pse+0x6a>
    468c:	86 95       	lsr	r24
    468e:	77 95       	ror	r23
    4690:	67 95       	ror	r22
    4692:	b7 95       	ror	r27
    4694:	f7 95       	ror	r31
    4696:	9f 5f       	subi	r25, 0xFF	; 255
    4698:	c9 f7       	brne	.-14     	; 0x468c <__divsf3_pse+0x74>
    469a:	88 0f       	add	r24, r24
    469c:	91 1d       	adc	r25, r1
    469e:	96 95       	lsr	r25
    46a0:	87 95       	ror	r24
    46a2:	97 f9       	bld	r25, 7
    46a4:	08 95       	ret
    46a6:	e1 e0       	ldi	r30, 0x01	; 1
    46a8:	66 0f       	add	r22, r22
    46aa:	77 1f       	adc	r23, r23
    46ac:	88 1f       	adc	r24, r24
    46ae:	bb 1f       	adc	r27, r27
    46b0:	62 17       	cp	r22, r18
    46b2:	73 07       	cpc	r23, r19
    46b4:	84 07       	cpc	r24, r20
    46b6:	ba 07       	cpc	r27, r26
    46b8:	20 f0       	brcs	.+8      	; 0x46c2 <__divsf3_pse+0xaa>
    46ba:	62 1b       	sub	r22, r18
    46bc:	73 0b       	sbc	r23, r19
    46be:	84 0b       	sbc	r24, r20
    46c0:	ba 0b       	sbc	r27, r26
    46c2:	ee 1f       	adc	r30, r30
    46c4:	88 f7       	brcc	.-30     	; 0x46a8 <__divsf3_pse+0x90>
    46c6:	e0 95       	com	r30
    46c8:	08 95       	ret

000046ca <__fixunssfsi>:
    46ca:	98 d0       	rcall	.+304    	; 0x47fc <__fp_splitA>
    46cc:	88 f0       	brcs	.+34     	; 0x46f0 <__fixunssfsi+0x26>
    46ce:	9f 57       	subi	r25, 0x7F	; 127
    46d0:	90 f0       	brcs	.+36     	; 0x46f6 <__fixunssfsi+0x2c>
    46d2:	b9 2f       	mov	r27, r25
    46d4:	99 27       	eor	r25, r25
    46d6:	b7 51       	subi	r27, 0x17	; 23
    46d8:	a0 f0       	brcs	.+40     	; 0x4702 <__fixunssfsi+0x38>
    46da:	d1 f0       	breq	.+52     	; 0x4710 <__fixunssfsi+0x46>
    46dc:	66 0f       	add	r22, r22
    46de:	77 1f       	adc	r23, r23
    46e0:	88 1f       	adc	r24, r24
    46e2:	99 1f       	adc	r25, r25
    46e4:	1a f0       	brmi	.+6      	; 0x46ec <__fixunssfsi+0x22>
    46e6:	ba 95       	dec	r27
    46e8:	c9 f7       	brne	.-14     	; 0x46dc <__fixunssfsi+0x12>
    46ea:	12 c0       	rjmp	.+36     	; 0x4710 <__fixunssfsi+0x46>
    46ec:	b1 30       	cpi	r27, 0x01	; 1
    46ee:	81 f0       	breq	.+32     	; 0x4710 <__fixunssfsi+0x46>
    46f0:	9f d0       	rcall	.+318    	; 0x4830 <__fp_zero>
    46f2:	b1 e0       	ldi	r27, 0x01	; 1
    46f4:	08 95       	ret
    46f6:	9c c0       	rjmp	.+312    	; 0x4830 <__fp_zero>
    46f8:	67 2f       	mov	r22, r23
    46fa:	78 2f       	mov	r23, r24
    46fc:	88 27       	eor	r24, r24
    46fe:	b8 5f       	subi	r27, 0xF8	; 248
    4700:	39 f0       	breq	.+14     	; 0x4710 <__fixunssfsi+0x46>
    4702:	b9 3f       	cpi	r27, 0xF9	; 249
    4704:	cc f3       	brlt	.-14     	; 0x46f8 <__fixunssfsi+0x2e>
    4706:	86 95       	lsr	r24
    4708:	77 95       	ror	r23
    470a:	67 95       	ror	r22
    470c:	b3 95       	inc	r27
    470e:	d9 f7       	brne	.-10     	; 0x4706 <__fixunssfsi+0x3c>
    4710:	3e f4       	brtc	.+14     	; 0x4720 <__fixunssfsi+0x56>
    4712:	90 95       	com	r25
    4714:	80 95       	com	r24
    4716:	70 95       	com	r23
    4718:	61 95       	neg	r22
    471a:	7f 4f       	sbci	r23, 0xFF	; 255
    471c:	8f 4f       	sbci	r24, 0xFF	; 255
    471e:	9f 4f       	sbci	r25, 0xFF	; 255
    4720:	08 95       	ret

00004722 <__floatunsisf>:
    4722:	e8 94       	clt
    4724:	09 c0       	rjmp	.+18     	; 0x4738 <__floatsisf+0x12>

00004726 <__floatsisf>:
    4726:	97 fb       	bst	r25, 7
    4728:	3e f4       	brtc	.+14     	; 0x4738 <__floatsisf+0x12>
    472a:	90 95       	com	r25
    472c:	80 95       	com	r24
    472e:	70 95       	com	r23
    4730:	61 95       	neg	r22
    4732:	7f 4f       	sbci	r23, 0xFF	; 255
    4734:	8f 4f       	sbci	r24, 0xFF	; 255
    4736:	9f 4f       	sbci	r25, 0xFF	; 255
    4738:	99 23       	and	r25, r25
    473a:	a9 f0       	breq	.+42     	; 0x4766 <__floatsisf+0x40>
    473c:	f9 2f       	mov	r31, r25
    473e:	96 e9       	ldi	r25, 0x96	; 150
    4740:	bb 27       	eor	r27, r27
    4742:	93 95       	inc	r25
    4744:	f6 95       	lsr	r31
    4746:	87 95       	ror	r24
    4748:	77 95       	ror	r23
    474a:	67 95       	ror	r22
    474c:	b7 95       	ror	r27
    474e:	f1 11       	cpse	r31, r1
    4750:	f8 cf       	rjmp	.-16     	; 0x4742 <__floatsisf+0x1c>
    4752:	fa f4       	brpl	.+62     	; 0x4792 <__floatsisf+0x6c>
    4754:	bb 0f       	add	r27, r27
    4756:	11 f4       	brne	.+4      	; 0x475c <__floatsisf+0x36>
    4758:	60 ff       	sbrs	r22, 0
    475a:	1b c0       	rjmp	.+54     	; 0x4792 <__floatsisf+0x6c>
    475c:	6f 5f       	subi	r22, 0xFF	; 255
    475e:	7f 4f       	sbci	r23, 0xFF	; 255
    4760:	8f 4f       	sbci	r24, 0xFF	; 255
    4762:	9f 4f       	sbci	r25, 0xFF	; 255
    4764:	16 c0       	rjmp	.+44     	; 0x4792 <__floatsisf+0x6c>
    4766:	88 23       	and	r24, r24
    4768:	11 f0       	breq	.+4      	; 0x476e <__floatsisf+0x48>
    476a:	96 e9       	ldi	r25, 0x96	; 150
    476c:	11 c0       	rjmp	.+34     	; 0x4790 <__floatsisf+0x6a>
    476e:	77 23       	and	r23, r23
    4770:	21 f0       	breq	.+8      	; 0x477a <__floatsisf+0x54>
    4772:	9e e8       	ldi	r25, 0x8E	; 142
    4774:	87 2f       	mov	r24, r23
    4776:	76 2f       	mov	r23, r22
    4778:	05 c0       	rjmp	.+10     	; 0x4784 <__floatsisf+0x5e>
    477a:	66 23       	and	r22, r22
    477c:	71 f0       	breq	.+28     	; 0x479a <__floatsisf+0x74>
    477e:	96 e8       	ldi	r25, 0x86	; 134
    4780:	86 2f       	mov	r24, r22
    4782:	70 e0       	ldi	r23, 0x00	; 0
    4784:	60 e0       	ldi	r22, 0x00	; 0
    4786:	2a f0       	brmi	.+10     	; 0x4792 <__floatsisf+0x6c>
    4788:	9a 95       	dec	r25
    478a:	66 0f       	add	r22, r22
    478c:	77 1f       	adc	r23, r23
    478e:	88 1f       	adc	r24, r24
    4790:	da f7       	brpl	.-10     	; 0x4788 <__floatsisf+0x62>
    4792:	88 0f       	add	r24, r24
    4794:	96 95       	lsr	r25
    4796:	87 95       	ror	r24
    4798:	97 f9       	bld	r25, 7
    479a:	08 95       	ret

0000479c <__fp_inf>:
    479c:	97 f9       	bld	r25, 7
    479e:	9f 67       	ori	r25, 0x7F	; 127
    47a0:	80 e8       	ldi	r24, 0x80	; 128
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	60 e0       	ldi	r22, 0x00	; 0
    47a6:	08 95       	ret

000047a8 <__fp_nan>:
    47a8:	9f ef       	ldi	r25, 0xFF	; 255
    47aa:	80 ec       	ldi	r24, 0xC0	; 192
    47ac:	08 95       	ret

000047ae <__fp_pscA>:
    47ae:	00 24       	eor	r0, r0
    47b0:	0a 94       	dec	r0
    47b2:	16 16       	cp	r1, r22
    47b4:	17 06       	cpc	r1, r23
    47b6:	18 06       	cpc	r1, r24
    47b8:	09 06       	cpc	r0, r25
    47ba:	08 95       	ret

000047bc <__fp_pscB>:
    47bc:	00 24       	eor	r0, r0
    47be:	0a 94       	dec	r0
    47c0:	12 16       	cp	r1, r18
    47c2:	13 06       	cpc	r1, r19
    47c4:	14 06       	cpc	r1, r20
    47c6:	05 06       	cpc	r0, r21
    47c8:	08 95       	ret

000047ca <__fp_round>:
    47ca:	09 2e       	mov	r0, r25
    47cc:	03 94       	inc	r0
    47ce:	00 0c       	add	r0, r0
    47d0:	11 f4       	brne	.+4      	; 0x47d6 <__fp_round+0xc>
    47d2:	88 23       	and	r24, r24
    47d4:	52 f0       	brmi	.+20     	; 0x47ea <__fp_round+0x20>
    47d6:	bb 0f       	add	r27, r27
    47d8:	40 f4       	brcc	.+16     	; 0x47ea <__fp_round+0x20>
    47da:	bf 2b       	or	r27, r31
    47dc:	11 f4       	brne	.+4      	; 0x47e2 <__fp_round+0x18>
    47de:	60 ff       	sbrs	r22, 0
    47e0:	04 c0       	rjmp	.+8      	; 0x47ea <__fp_round+0x20>
    47e2:	6f 5f       	subi	r22, 0xFF	; 255
    47e4:	7f 4f       	sbci	r23, 0xFF	; 255
    47e6:	8f 4f       	sbci	r24, 0xFF	; 255
    47e8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ea:	08 95       	ret

000047ec <__fp_split3>:
    47ec:	57 fd       	sbrc	r21, 7
    47ee:	90 58       	subi	r25, 0x80	; 128
    47f0:	44 0f       	add	r20, r20
    47f2:	55 1f       	adc	r21, r21
    47f4:	59 f0       	breq	.+22     	; 0x480c <__fp_splitA+0x10>
    47f6:	5f 3f       	cpi	r21, 0xFF	; 255
    47f8:	71 f0       	breq	.+28     	; 0x4816 <__fp_splitA+0x1a>
    47fa:	47 95       	ror	r20

000047fc <__fp_splitA>:
    47fc:	88 0f       	add	r24, r24
    47fe:	97 fb       	bst	r25, 7
    4800:	99 1f       	adc	r25, r25
    4802:	61 f0       	breq	.+24     	; 0x481c <__fp_splitA+0x20>
    4804:	9f 3f       	cpi	r25, 0xFF	; 255
    4806:	79 f0       	breq	.+30     	; 0x4826 <__fp_splitA+0x2a>
    4808:	87 95       	ror	r24
    480a:	08 95       	ret
    480c:	12 16       	cp	r1, r18
    480e:	13 06       	cpc	r1, r19
    4810:	14 06       	cpc	r1, r20
    4812:	55 1f       	adc	r21, r21
    4814:	f2 cf       	rjmp	.-28     	; 0x47fa <__fp_split3+0xe>
    4816:	46 95       	lsr	r20
    4818:	f1 df       	rcall	.-30     	; 0x47fc <__fp_splitA>
    481a:	08 c0       	rjmp	.+16     	; 0x482c <__fp_splitA+0x30>
    481c:	16 16       	cp	r1, r22
    481e:	17 06       	cpc	r1, r23
    4820:	18 06       	cpc	r1, r24
    4822:	99 1f       	adc	r25, r25
    4824:	f1 cf       	rjmp	.-30     	; 0x4808 <__fp_splitA+0xc>
    4826:	86 95       	lsr	r24
    4828:	71 05       	cpc	r23, r1
    482a:	61 05       	cpc	r22, r1
    482c:	08 94       	sec
    482e:	08 95       	ret

00004830 <__fp_zero>:
    4830:	e8 94       	clt

00004832 <__fp_szero>:
    4832:	bb 27       	eor	r27, r27
    4834:	66 27       	eor	r22, r22
    4836:	77 27       	eor	r23, r23
    4838:	cb 01       	movw	r24, r22
    483a:	97 f9       	bld	r25, 7
    483c:	08 95       	ret

0000483e <__mulsf3>:
    483e:	0b d0       	rcall	.+22     	; 0x4856 <__mulsf3x>
    4840:	c4 cf       	rjmp	.-120    	; 0x47ca <__fp_round>
    4842:	b5 df       	rcall	.-150    	; 0x47ae <__fp_pscA>
    4844:	28 f0       	brcs	.+10     	; 0x4850 <__mulsf3+0x12>
    4846:	ba df       	rcall	.-140    	; 0x47bc <__fp_pscB>
    4848:	18 f0       	brcs	.+6      	; 0x4850 <__mulsf3+0x12>
    484a:	95 23       	and	r25, r21
    484c:	09 f0       	breq	.+2      	; 0x4850 <__mulsf3+0x12>
    484e:	a6 cf       	rjmp	.-180    	; 0x479c <__fp_inf>
    4850:	ab cf       	rjmp	.-170    	; 0x47a8 <__fp_nan>
    4852:	11 24       	eor	r1, r1
    4854:	ee cf       	rjmp	.-36     	; 0x4832 <__fp_szero>

00004856 <__mulsf3x>:
    4856:	ca df       	rcall	.-108    	; 0x47ec <__fp_split3>
    4858:	a0 f3       	brcs	.-24     	; 0x4842 <__mulsf3+0x4>

0000485a <__mulsf3_pse>:
    485a:	95 9f       	mul	r25, r21
    485c:	d1 f3       	breq	.-12     	; 0x4852 <__mulsf3+0x14>
    485e:	95 0f       	add	r25, r21
    4860:	50 e0       	ldi	r21, 0x00	; 0
    4862:	55 1f       	adc	r21, r21
    4864:	62 9f       	mul	r22, r18
    4866:	f0 01       	movw	r30, r0
    4868:	72 9f       	mul	r23, r18
    486a:	bb 27       	eor	r27, r27
    486c:	f0 0d       	add	r31, r0
    486e:	b1 1d       	adc	r27, r1
    4870:	63 9f       	mul	r22, r19
    4872:	aa 27       	eor	r26, r26
    4874:	f0 0d       	add	r31, r0
    4876:	b1 1d       	adc	r27, r1
    4878:	aa 1f       	adc	r26, r26
    487a:	64 9f       	mul	r22, r20
    487c:	66 27       	eor	r22, r22
    487e:	b0 0d       	add	r27, r0
    4880:	a1 1d       	adc	r26, r1
    4882:	66 1f       	adc	r22, r22
    4884:	82 9f       	mul	r24, r18
    4886:	22 27       	eor	r18, r18
    4888:	b0 0d       	add	r27, r0
    488a:	a1 1d       	adc	r26, r1
    488c:	62 1f       	adc	r22, r18
    488e:	73 9f       	mul	r23, r19
    4890:	b0 0d       	add	r27, r0
    4892:	a1 1d       	adc	r26, r1
    4894:	62 1f       	adc	r22, r18
    4896:	83 9f       	mul	r24, r19
    4898:	a0 0d       	add	r26, r0
    489a:	61 1d       	adc	r22, r1
    489c:	22 1f       	adc	r18, r18
    489e:	74 9f       	mul	r23, r20
    48a0:	33 27       	eor	r19, r19
    48a2:	a0 0d       	add	r26, r0
    48a4:	61 1d       	adc	r22, r1
    48a6:	23 1f       	adc	r18, r19
    48a8:	84 9f       	mul	r24, r20
    48aa:	60 0d       	add	r22, r0
    48ac:	21 1d       	adc	r18, r1
    48ae:	82 2f       	mov	r24, r18
    48b0:	76 2f       	mov	r23, r22
    48b2:	6a 2f       	mov	r22, r26
    48b4:	11 24       	eor	r1, r1
    48b6:	9f 57       	subi	r25, 0x7F	; 127
    48b8:	50 40       	sbci	r21, 0x00	; 0
    48ba:	8a f0       	brmi	.+34     	; 0x48de <__mulsf3_pse+0x84>
    48bc:	e1 f0       	breq	.+56     	; 0x48f6 <__mulsf3_pse+0x9c>
    48be:	88 23       	and	r24, r24
    48c0:	4a f0       	brmi	.+18     	; 0x48d4 <__mulsf3_pse+0x7a>
    48c2:	ee 0f       	add	r30, r30
    48c4:	ff 1f       	adc	r31, r31
    48c6:	bb 1f       	adc	r27, r27
    48c8:	66 1f       	adc	r22, r22
    48ca:	77 1f       	adc	r23, r23
    48cc:	88 1f       	adc	r24, r24
    48ce:	91 50       	subi	r25, 0x01	; 1
    48d0:	50 40       	sbci	r21, 0x00	; 0
    48d2:	a9 f7       	brne	.-22     	; 0x48be <__mulsf3_pse+0x64>
    48d4:	9e 3f       	cpi	r25, 0xFE	; 254
    48d6:	51 05       	cpc	r21, r1
    48d8:	70 f0       	brcs	.+28     	; 0x48f6 <__mulsf3_pse+0x9c>
    48da:	60 cf       	rjmp	.-320    	; 0x479c <__fp_inf>
    48dc:	aa cf       	rjmp	.-172    	; 0x4832 <__fp_szero>
    48de:	5f 3f       	cpi	r21, 0xFF	; 255
    48e0:	ec f3       	brlt	.-6      	; 0x48dc <__mulsf3_pse+0x82>
    48e2:	98 3e       	cpi	r25, 0xE8	; 232
    48e4:	dc f3       	brlt	.-10     	; 0x48dc <__mulsf3_pse+0x82>
    48e6:	86 95       	lsr	r24
    48e8:	77 95       	ror	r23
    48ea:	67 95       	ror	r22
    48ec:	b7 95       	ror	r27
    48ee:	f7 95       	ror	r31
    48f0:	e7 95       	ror	r30
    48f2:	9f 5f       	subi	r25, 0xFF	; 255
    48f4:	c1 f7       	brne	.-16     	; 0x48e6 <__mulsf3_pse+0x8c>
    48f6:	fe 2b       	or	r31, r30
    48f8:	88 0f       	add	r24, r24
    48fa:	91 1d       	adc	r25, r1
    48fc:	96 95       	lsr	r25
    48fe:	87 95       	ror	r24
    4900:	97 f9       	bld	r25, 7
    4902:	08 95       	ret

00004904 <__tablejump2__>:
    4904:	ee 0f       	add	r30, r30
    4906:	ff 1f       	adc	r31, r31
    4908:	88 1f       	adc	r24, r24
    490a:	8b bf       	out	0x3b, r24	; 59
    490c:	07 90       	elpm	r0, Z+
    490e:	f6 91       	elpm	r31, Z
    4910:	e0 2d       	mov	r30, r0
    4912:	19 94       	eijmp

00004914 <calloc>:
    4914:	0f 93       	push	r16
    4916:	1f 93       	push	r17
    4918:	cf 93       	push	r28
    491a:	df 93       	push	r29
    491c:	86 9f       	mul	r24, r22
    491e:	80 01       	movw	r16, r0
    4920:	87 9f       	mul	r24, r23
    4922:	10 0d       	add	r17, r0
    4924:	96 9f       	mul	r25, r22
    4926:	10 0d       	add	r17, r0
    4928:	11 24       	eor	r1, r1
    492a:	c8 01       	movw	r24, r16
    492c:	0d d0       	rcall	.+26     	; 0x4948 <malloc>
    492e:	ec 01       	movw	r28, r24
    4930:	00 97       	sbiw	r24, 0x00	; 0
    4932:	21 f0       	breq	.+8      	; 0x493c <calloc+0x28>
    4934:	a8 01       	movw	r20, r16
    4936:	60 e0       	ldi	r22, 0x00	; 0
    4938:	70 e0       	ldi	r23, 0x00	; 0
    493a:	34 d1       	rcall	.+616    	; 0x4ba4 <memset>
    493c:	ce 01       	movw	r24, r28
    493e:	df 91       	pop	r29
    4940:	cf 91       	pop	r28
    4942:	1f 91       	pop	r17
    4944:	0f 91       	pop	r16
    4946:	08 95       	ret

00004948 <malloc>:
    4948:	0f 93       	push	r16
    494a:	1f 93       	push	r17
    494c:	cf 93       	push	r28
    494e:	df 93       	push	r29
    4950:	82 30       	cpi	r24, 0x02	; 2
    4952:	91 05       	cpc	r25, r1
    4954:	10 f4       	brcc	.+4      	; 0x495a <malloc+0x12>
    4956:	82 e0       	ldi	r24, 0x02	; 2
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	e0 91 5a 13 	lds	r30, 0x135A	; 0x80135a <__flp>
    495e:	f0 91 5b 13 	lds	r31, 0x135B	; 0x80135b <__flp+0x1>
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	a0 e0       	ldi	r26, 0x00	; 0
    4968:	b0 e0       	ldi	r27, 0x00	; 0
    496a:	30 97       	sbiw	r30, 0x00	; 0
    496c:	19 f1       	breq	.+70     	; 0x49b4 <malloc+0x6c>
    496e:	40 81       	ld	r20, Z
    4970:	51 81       	ldd	r21, Z+1	; 0x01
    4972:	02 81       	ldd	r16, Z+2	; 0x02
    4974:	13 81       	ldd	r17, Z+3	; 0x03
    4976:	48 17       	cp	r20, r24
    4978:	59 07       	cpc	r21, r25
    497a:	c8 f0       	brcs	.+50     	; 0x49ae <malloc+0x66>
    497c:	84 17       	cp	r24, r20
    497e:	95 07       	cpc	r25, r21
    4980:	69 f4       	brne	.+26     	; 0x499c <malloc+0x54>
    4982:	10 97       	sbiw	r26, 0x00	; 0
    4984:	31 f0       	breq	.+12     	; 0x4992 <malloc+0x4a>
    4986:	12 96       	adiw	r26, 0x02	; 2
    4988:	0c 93       	st	X, r16
    498a:	12 97       	sbiw	r26, 0x02	; 2
    498c:	13 96       	adiw	r26, 0x03	; 3
    498e:	1c 93       	st	X, r17
    4990:	27 c0       	rjmp	.+78     	; 0x49e0 <malloc+0x98>
    4992:	00 93 5a 13 	sts	0x135A, r16	; 0x80135a <__flp>
    4996:	10 93 5b 13 	sts	0x135B, r17	; 0x80135b <__flp+0x1>
    499a:	22 c0       	rjmp	.+68     	; 0x49e0 <malloc+0x98>
    499c:	21 15       	cp	r18, r1
    499e:	31 05       	cpc	r19, r1
    49a0:	19 f0       	breq	.+6      	; 0x49a8 <malloc+0x60>
    49a2:	42 17       	cp	r20, r18
    49a4:	53 07       	cpc	r21, r19
    49a6:	18 f4       	brcc	.+6      	; 0x49ae <malloc+0x66>
    49a8:	9a 01       	movw	r18, r20
    49aa:	bd 01       	movw	r22, r26
    49ac:	ef 01       	movw	r28, r30
    49ae:	df 01       	movw	r26, r30
    49b0:	f8 01       	movw	r30, r16
    49b2:	db cf       	rjmp	.-74     	; 0x496a <malloc+0x22>
    49b4:	21 15       	cp	r18, r1
    49b6:	31 05       	cpc	r19, r1
    49b8:	f9 f0       	breq	.+62     	; 0x49f8 <malloc+0xb0>
    49ba:	28 1b       	sub	r18, r24
    49bc:	39 0b       	sbc	r19, r25
    49be:	24 30       	cpi	r18, 0x04	; 4
    49c0:	31 05       	cpc	r19, r1
    49c2:	80 f4       	brcc	.+32     	; 0x49e4 <malloc+0x9c>
    49c4:	8a 81       	ldd	r24, Y+2	; 0x02
    49c6:	9b 81       	ldd	r25, Y+3	; 0x03
    49c8:	61 15       	cp	r22, r1
    49ca:	71 05       	cpc	r23, r1
    49cc:	21 f0       	breq	.+8      	; 0x49d6 <malloc+0x8e>
    49ce:	fb 01       	movw	r30, r22
    49d0:	93 83       	std	Z+3, r25	; 0x03
    49d2:	82 83       	std	Z+2, r24	; 0x02
    49d4:	04 c0       	rjmp	.+8      	; 0x49de <malloc+0x96>
    49d6:	90 93 5b 13 	sts	0x135B, r25	; 0x80135b <__flp+0x1>
    49da:	80 93 5a 13 	sts	0x135A, r24	; 0x80135a <__flp>
    49de:	fe 01       	movw	r30, r28
    49e0:	32 96       	adiw	r30, 0x02	; 2
    49e2:	44 c0       	rjmp	.+136    	; 0x4a6c <malloc+0x124>
    49e4:	fe 01       	movw	r30, r28
    49e6:	e2 0f       	add	r30, r18
    49e8:	f3 1f       	adc	r31, r19
    49ea:	81 93       	st	Z+, r24
    49ec:	91 93       	st	Z+, r25
    49ee:	22 50       	subi	r18, 0x02	; 2
    49f0:	31 09       	sbc	r19, r1
    49f2:	39 83       	std	Y+1, r19	; 0x01
    49f4:	28 83       	st	Y, r18
    49f6:	3a c0       	rjmp	.+116    	; 0x4a6c <malloc+0x124>
    49f8:	20 91 58 13 	lds	r18, 0x1358	; 0x801358 <__brkval>
    49fc:	30 91 59 13 	lds	r19, 0x1359	; 0x801359 <__brkval+0x1>
    4a00:	23 2b       	or	r18, r19
    4a02:	41 f4       	brne	.+16     	; 0x4a14 <malloc+0xcc>
    4a04:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4a08:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4a0c:	30 93 59 13 	sts	0x1359, r19	; 0x801359 <__brkval+0x1>
    4a10:	20 93 58 13 	sts	0x1358, r18	; 0x801358 <__brkval>
    4a14:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4a18:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4a1c:	21 15       	cp	r18, r1
    4a1e:	31 05       	cpc	r19, r1
    4a20:	41 f4       	brne	.+16     	; 0x4a32 <malloc+0xea>
    4a22:	2d b7       	in	r18, 0x3d	; 61
    4a24:	3e b7       	in	r19, 0x3e	; 62
    4a26:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4a2a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4a2e:	24 1b       	sub	r18, r20
    4a30:	35 0b       	sbc	r19, r21
    4a32:	e0 91 58 13 	lds	r30, 0x1358	; 0x801358 <__brkval>
    4a36:	f0 91 59 13 	lds	r31, 0x1359	; 0x801359 <__brkval+0x1>
    4a3a:	e2 17       	cp	r30, r18
    4a3c:	f3 07       	cpc	r31, r19
    4a3e:	a0 f4       	brcc	.+40     	; 0x4a68 <malloc+0x120>
    4a40:	2e 1b       	sub	r18, r30
    4a42:	3f 0b       	sbc	r19, r31
    4a44:	28 17       	cp	r18, r24
    4a46:	39 07       	cpc	r19, r25
    4a48:	78 f0       	brcs	.+30     	; 0x4a68 <malloc+0x120>
    4a4a:	ac 01       	movw	r20, r24
    4a4c:	4e 5f       	subi	r20, 0xFE	; 254
    4a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a50:	24 17       	cp	r18, r20
    4a52:	35 07       	cpc	r19, r21
    4a54:	48 f0       	brcs	.+18     	; 0x4a68 <malloc+0x120>
    4a56:	4e 0f       	add	r20, r30
    4a58:	5f 1f       	adc	r21, r31
    4a5a:	50 93 59 13 	sts	0x1359, r21	; 0x801359 <__brkval+0x1>
    4a5e:	40 93 58 13 	sts	0x1358, r20	; 0x801358 <__brkval>
    4a62:	81 93       	st	Z+, r24
    4a64:	91 93       	st	Z+, r25
    4a66:	02 c0       	rjmp	.+4      	; 0x4a6c <malloc+0x124>
    4a68:	e0 e0       	ldi	r30, 0x00	; 0
    4a6a:	f0 e0       	ldi	r31, 0x00	; 0
    4a6c:	cf 01       	movw	r24, r30
    4a6e:	df 91       	pop	r29
    4a70:	cf 91       	pop	r28
    4a72:	1f 91       	pop	r17
    4a74:	0f 91       	pop	r16
    4a76:	08 95       	ret

00004a78 <free>:
    4a78:	cf 93       	push	r28
    4a7a:	df 93       	push	r29
    4a7c:	00 97       	sbiw	r24, 0x00	; 0
    4a7e:	09 f4       	brne	.+2      	; 0x4a82 <free+0xa>
    4a80:	81 c0       	rjmp	.+258    	; 0x4b84 <free+0x10c>
    4a82:	fc 01       	movw	r30, r24
    4a84:	32 97       	sbiw	r30, 0x02	; 2
    4a86:	13 82       	std	Z+3, r1	; 0x03
    4a88:	12 82       	std	Z+2, r1	; 0x02
    4a8a:	a0 91 5a 13 	lds	r26, 0x135A	; 0x80135a <__flp>
    4a8e:	b0 91 5b 13 	lds	r27, 0x135B	; 0x80135b <__flp+0x1>
    4a92:	10 97       	sbiw	r26, 0x00	; 0
    4a94:	81 f4       	brne	.+32     	; 0x4ab6 <free+0x3e>
    4a96:	20 81       	ld	r18, Z
    4a98:	31 81       	ldd	r19, Z+1	; 0x01
    4a9a:	82 0f       	add	r24, r18
    4a9c:	93 1f       	adc	r25, r19
    4a9e:	20 91 58 13 	lds	r18, 0x1358	; 0x801358 <__brkval>
    4aa2:	30 91 59 13 	lds	r19, 0x1359	; 0x801359 <__brkval+0x1>
    4aa6:	28 17       	cp	r18, r24
    4aa8:	39 07       	cpc	r19, r25
    4aaa:	51 f5       	brne	.+84     	; 0x4b00 <free+0x88>
    4aac:	f0 93 59 13 	sts	0x1359, r31	; 0x801359 <__brkval+0x1>
    4ab0:	e0 93 58 13 	sts	0x1358, r30	; 0x801358 <__brkval>
    4ab4:	67 c0       	rjmp	.+206    	; 0x4b84 <free+0x10c>
    4ab6:	ed 01       	movw	r28, r26
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	ce 17       	cp	r28, r30
    4abe:	df 07       	cpc	r29, r31
    4ac0:	40 f4       	brcc	.+16     	; 0x4ad2 <free+0x5a>
    4ac2:	4a 81       	ldd	r20, Y+2	; 0x02
    4ac4:	5b 81       	ldd	r21, Y+3	; 0x03
    4ac6:	9e 01       	movw	r18, r28
    4ac8:	41 15       	cp	r20, r1
    4aca:	51 05       	cpc	r21, r1
    4acc:	f1 f0       	breq	.+60     	; 0x4b0a <free+0x92>
    4ace:	ea 01       	movw	r28, r20
    4ad0:	f5 cf       	rjmp	.-22     	; 0x4abc <free+0x44>
    4ad2:	d3 83       	std	Z+3, r29	; 0x03
    4ad4:	c2 83       	std	Z+2, r28	; 0x02
    4ad6:	40 81       	ld	r20, Z
    4ad8:	51 81       	ldd	r21, Z+1	; 0x01
    4ada:	84 0f       	add	r24, r20
    4adc:	95 1f       	adc	r25, r21
    4ade:	c8 17       	cp	r28, r24
    4ae0:	d9 07       	cpc	r29, r25
    4ae2:	59 f4       	brne	.+22     	; 0x4afa <free+0x82>
    4ae4:	88 81       	ld	r24, Y
    4ae6:	99 81       	ldd	r25, Y+1	; 0x01
    4ae8:	84 0f       	add	r24, r20
    4aea:	95 1f       	adc	r25, r21
    4aec:	02 96       	adiw	r24, 0x02	; 2
    4aee:	91 83       	std	Z+1, r25	; 0x01
    4af0:	80 83       	st	Z, r24
    4af2:	8a 81       	ldd	r24, Y+2	; 0x02
    4af4:	9b 81       	ldd	r25, Y+3	; 0x03
    4af6:	93 83       	std	Z+3, r25	; 0x03
    4af8:	82 83       	std	Z+2, r24	; 0x02
    4afa:	21 15       	cp	r18, r1
    4afc:	31 05       	cpc	r19, r1
    4afe:	29 f4       	brne	.+10     	; 0x4b0a <free+0x92>
    4b00:	f0 93 5b 13 	sts	0x135B, r31	; 0x80135b <__flp+0x1>
    4b04:	e0 93 5a 13 	sts	0x135A, r30	; 0x80135a <__flp>
    4b08:	3d c0       	rjmp	.+122    	; 0x4b84 <free+0x10c>
    4b0a:	e9 01       	movw	r28, r18
    4b0c:	fb 83       	std	Y+3, r31	; 0x03
    4b0e:	ea 83       	std	Y+2, r30	; 0x02
    4b10:	49 91       	ld	r20, Y+
    4b12:	59 91       	ld	r21, Y+
    4b14:	c4 0f       	add	r28, r20
    4b16:	d5 1f       	adc	r29, r21
    4b18:	ec 17       	cp	r30, r28
    4b1a:	fd 07       	cpc	r31, r29
    4b1c:	61 f4       	brne	.+24     	; 0x4b36 <free+0xbe>
    4b1e:	80 81       	ld	r24, Z
    4b20:	91 81       	ldd	r25, Z+1	; 0x01
    4b22:	84 0f       	add	r24, r20
    4b24:	95 1f       	adc	r25, r21
    4b26:	02 96       	adiw	r24, 0x02	; 2
    4b28:	e9 01       	movw	r28, r18
    4b2a:	99 83       	std	Y+1, r25	; 0x01
    4b2c:	88 83       	st	Y, r24
    4b2e:	82 81       	ldd	r24, Z+2	; 0x02
    4b30:	93 81       	ldd	r25, Z+3	; 0x03
    4b32:	9b 83       	std	Y+3, r25	; 0x03
    4b34:	8a 83       	std	Y+2, r24	; 0x02
    4b36:	e0 e0       	ldi	r30, 0x00	; 0
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	12 96       	adiw	r26, 0x02	; 2
    4b3c:	8d 91       	ld	r24, X+
    4b3e:	9c 91       	ld	r25, X
    4b40:	13 97       	sbiw	r26, 0x03	; 3
    4b42:	00 97       	sbiw	r24, 0x00	; 0
    4b44:	19 f0       	breq	.+6      	; 0x4b4c <free+0xd4>
    4b46:	fd 01       	movw	r30, r26
    4b48:	dc 01       	movw	r26, r24
    4b4a:	f7 cf       	rjmp	.-18     	; 0x4b3a <free+0xc2>
    4b4c:	8d 91       	ld	r24, X+
    4b4e:	9c 91       	ld	r25, X
    4b50:	11 97       	sbiw	r26, 0x01	; 1
    4b52:	9d 01       	movw	r18, r26
    4b54:	2e 5f       	subi	r18, 0xFE	; 254
    4b56:	3f 4f       	sbci	r19, 0xFF	; 255
    4b58:	82 0f       	add	r24, r18
    4b5a:	93 1f       	adc	r25, r19
    4b5c:	20 91 58 13 	lds	r18, 0x1358	; 0x801358 <__brkval>
    4b60:	30 91 59 13 	lds	r19, 0x1359	; 0x801359 <__brkval+0x1>
    4b64:	28 17       	cp	r18, r24
    4b66:	39 07       	cpc	r19, r25
    4b68:	69 f4       	brne	.+26     	; 0x4b84 <free+0x10c>
    4b6a:	30 97       	sbiw	r30, 0x00	; 0
    4b6c:	29 f4       	brne	.+10     	; 0x4b78 <free+0x100>
    4b6e:	10 92 5b 13 	sts	0x135B, r1	; 0x80135b <__flp+0x1>
    4b72:	10 92 5a 13 	sts	0x135A, r1	; 0x80135a <__flp>
    4b76:	02 c0       	rjmp	.+4      	; 0x4b7c <free+0x104>
    4b78:	13 82       	std	Z+3, r1	; 0x03
    4b7a:	12 82       	std	Z+2, r1	; 0x02
    4b7c:	b0 93 59 13 	sts	0x1359, r27	; 0x801359 <__brkval+0x1>
    4b80:	a0 93 58 13 	sts	0x1358, r26	; 0x801358 <__brkval>
    4b84:	df 91       	pop	r29
    4b86:	cf 91       	pop	r28
    4b88:	08 95       	ret

00004b8a <abort>:
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	f8 94       	cli
    4b90:	7d c3       	rjmp	.+1786   	; 0x528c <_exit>

00004b92 <memcpy>:
    4b92:	fb 01       	movw	r30, r22
    4b94:	dc 01       	movw	r26, r24
    4b96:	02 c0       	rjmp	.+4      	; 0x4b9c <memcpy+0xa>
    4b98:	01 90       	ld	r0, Z+
    4b9a:	0d 92       	st	X+, r0
    4b9c:	41 50       	subi	r20, 0x01	; 1
    4b9e:	50 40       	sbci	r21, 0x00	; 0
    4ba0:	d8 f7       	brcc	.-10     	; 0x4b98 <memcpy+0x6>
    4ba2:	08 95       	ret

00004ba4 <memset>:
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	01 c0       	rjmp	.+2      	; 0x4baa <memset+0x6>
    4ba8:	6d 93       	st	X+, r22
    4baa:	41 50       	subi	r20, 0x01	; 1
    4bac:	50 40       	sbci	r21, 0x00	; 0
    4bae:	e0 f7       	brcc	.-8      	; 0x4ba8 <memset+0x4>
    4bb0:	08 95       	ret

00004bb2 <strcasestr>:
    4bb2:	fb 01       	movw	r30, r22
    4bb4:	51 91       	ld	r21, Z+
    4bb6:	55 23       	and	r21, r21
    4bb8:	b1 f0       	breq	.+44     	; 0x4be6 <strcasestr+0x34>
    4bba:	bf 01       	movw	r22, r30
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	05 2e       	mov	r0, r21
    4bc0:	4d 91       	ld	r20, X+
    4bc2:	44 23       	and	r20, r20
    4bc4:	69 f0       	breq	.+26     	; 0x4be0 <strcasestr+0x2e>
    4bc6:	10 d0       	rcall	.+32     	; 0x4be8 <strcasestr+0x36>
    4bc8:	d9 f7       	brne	.-10     	; 0x4bc0 <strcasestr+0xe>
    4bca:	cd 01       	movw	r24, r26
    4bcc:	01 90       	ld	r0, Z+
    4bce:	00 20       	and	r0, r0
    4bd0:	49 f0       	breq	.+18     	; 0x4be4 <strcasestr+0x32>
    4bd2:	4d 91       	ld	r20, X+
    4bd4:	41 11       	cpse	r20, r1
    4bd6:	08 d0       	rcall	.+16     	; 0x4be8 <strcasestr+0x36>
    4bd8:	c9 f3       	breq	.-14     	; 0x4bcc <strcasestr+0x1a>
    4bda:	fb 01       	movw	r30, r22
    4bdc:	41 11       	cpse	r20, r1
    4bde:	ee cf       	rjmp	.-36     	; 0x4bbc <strcasestr+0xa>
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	01 97       	sbiw	r24, 0x01	; 1
    4be6:	08 95       	ret
    4be8:	40 25       	eor	r20, r0
    4bea:	39 f0       	breq	.+14     	; 0x4bfa <strcasestr+0x48>
    4bec:	40 32       	cpi	r20, 0x20	; 32
    4bee:	29 f4       	brne	.+10     	; 0x4bfa <strcasestr+0x48>
    4bf0:	40 29       	or	r20, r0
    4bf2:	4b 57       	subi	r20, 0x7B	; 123
    4bf4:	46 5e       	subi	r20, 0xE6	; 230
    4bf6:	08 f0       	brcs	.+2      	; 0x4bfa <strcasestr+0x48>
    4bf8:	18 94       	sez
    4bfa:	08 95       	ret

00004bfc <strcat>:
    4bfc:	fb 01       	movw	r30, r22
    4bfe:	dc 01       	movw	r26, r24
    4c00:	0d 90       	ld	r0, X+
    4c02:	00 20       	and	r0, r0
    4c04:	e9 f7       	brne	.-6      	; 0x4c00 <strcat+0x4>
    4c06:	11 97       	sbiw	r26, 0x01	; 1
    4c08:	01 90       	ld	r0, Z+
    4c0a:	0d 92       	st	X+, r0
    4c0c:	00 20       	and	r0, r0
    4c0e:	e1 f7       	brne	.-8      	; 0x4c08 <strcat+0xc>
    4c10:	08 95       	ret

00004c12 <strcpy>:
    4c12:	fb 01       	movw	r30, r22
    4c14:	dc 01       	movw	r26, r24
    4c16:	01 90       	ld	r0, Z+
    4c18:	0d 92       	st	X+, r0
    4c1a:	00 20       	and	r0, r0
    4c1c:	e1 f7       	brne	.-8      	; 0x4c16 <strcpy+0x4>
    4c1e:	08 95       	ret

00004c20 <strncasecmp>:
    4c20:	fb 01       	movw	r30, r22
    4c22:	dc 01       	movw	r26, r24
    4c24:	41 50       	subi	r20, 0x01	; 1
    4c26:	50 40       	sbci	r21, 0x00	; 0
    4c28:	88 f0       	brcs	.+34     	; 0x4c4c <strncasecmp+0x2c>
    4c2a:	8d 91       	ld	r24, X+
    4c2c:	81 34       	cpi	r24, 0x41	; 65
    4c2e:	1c f0       	brlt	.+6      	; 0x4c36 <strncasecmp+0x16>
    4c30:	8b 35       	cpi	r24, 0x5B	; 91
    4c32:	0c f4       	brge	.+2      	; 0x4c36 <strncasecmp+0x16>
    4c34:	80 5e       	subi	r24, 0xE0	; 224
    4c36:	61 91       	ld	r22, Z+
    4c38:	61 34       	cpi	r22, 0x41	; 65
    4c3a:	1c f0       	brlt	.+6      	; 0x4c42 <strncasecmp+0x22>
    4c3c:	6b 35       	cpi	r22, 0x5B	; 91
    4c3e:	0c f4       	brge	.+2      	; 0x4c42 <strncasecmp+0x22>
    4c40:	60 5e       	subi	r22, 0xE0	; 224
    4c42:	86 1b       	sub	r24, r22
    4c44:	61 11       	cpse	r22, r1
    4c46:	71 f3       	breq	.-36     	; 0x4c24 <strncasecmp+0x4>
    4c48:	99 0b       	sbc	r25, r25
    4c4a:	08 95       	ret
    4c4c:	88 1b       	sub	r24, r24
    4c4e:	fc cf       	rjmp	.-8      	; 0x4c48 <strncasecmp+0x28>

00004c50 <printf>:
    4c50:	cf 93       	push	r28
    4c52:	df 93       	push	r29
    4c54:	cd b7       	in	r28, 0x3d	; 61
    4c56:	de b7       	in	r29, 0x3e	; 62
    4c58:	ae 01       	movw	r20, r28
    4c5a:	4a 5f       	subi	r20, 0xFA	; 250
    4c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c5e:	fa 01       	movw	r30, r20
    4c60:	61 91       	ld	r22, Z+
    4c62:	71 91       	ld	r23, Z+
    4c64:	af 01       	movw	r20, r30
    4c66:	80 91 5e 13 	lds	r24, 0x135E	; 0x80135e <__iob+0x2>
    4c6a:	90 91 5f 13 	lds	r25, 0x135F	; 0x80135f <__iob+0x3>
    4c6e:	61 d0       	rcall	.+194    	; 0x4d32 <vfprintf>
    4c70:	df 91       	pop	r29
    4c72:	cf 91       	pop	r28
    4c74:	08 95       	ret

00004c76 <puts>:
    4c76:	0f 93       	push	r16
    4c78:	1f 93       	push	r17
    4c7a:	cf 93       	push	r28
    4c7c:	df 93       	push	r29
    4c7e:	e0 91 5e 13 	lds	r30, 0x135E	; 0x80135e <__iob+0x2>
    4c82:	f0 91 5f 13 	lds	r31, 0x135F	; 0x80135f <__iob+0x3>
    4c86:	23 81       	ldd	r18, Z+3	; 0x03
    4c88:	21 ff       	sbrs	r18, 1
    4c8a:	1b c0       	rjmp	.+54     	; 0x4cc2 <puts+0x4c>
    4c8c:	8c 01       	movw	r16, r24
    4c8e:	d0 e0       	ldi	r29, 0x00	; 0
    4c90:	c0 e0       	ldi	r28, 0x00	; 0
    4c92:	f8 01       	movw	r30, r16
    4c94:	81 91       	ld	r24, Z+
    4c96:	8f 01       	movw	r16, r30
    4c98:	60 91 5e 13 	lds	r22, 0x135E	; 0x80135e <__iob+0x2>
    4c9c:	70 91 5f 13 	lds	r23, 0x135F	; 0x80135f <__iob+0x3>
    4ca0:	db 01       	movw	r26, r22
    4ca2:	18 96       	adiw	r26, 0x08	; 8
    4ca4:	ed 91       	ld	r30, X+
    4ca6:	fc 91       	ld	r31, X
    4ca8:	19 97       	sbiw	r26, 0x09	; 9
    4caa:	88 23       	and	r24, r24
    4cac:	31 f0       	breq	.+12     	; 0x4cba <puts+0x44>
    4cae:	19 95       	eicall
    4cb0:	89 2b       	or	r24, r25
    4cb2:	79 f3       	breq	.-34     	; 0x4c92 <puts+0x1c>
    4cb4:	df ef       	ldi	r29, 0xFF	; 255
    4cb6:	cf ef       	ldi	r28, 0xFF	; 255
    4cb8:	ec cf       	rjmp	.-40     	; 0x4c92 <puts+0x1c>
    4cba:	8a e0       	ldi	r24, 0x0A	; 10
    4cbc:	19 95       	eicall
    4cbe:	89 2b       	or	r24, r25
    4cc0:	19 f0       	breq	.+6      	; 0x4cc8 <puts+0x52>
    4cc2:	8f ef       	ldi	r24, 0xFF	; 255
    4cc4:	9f ef       	ldi	r25, 0xFF	; 255
    4cc6:	02 c0       	rjmp	.+4      	; 0x4ccc <puts+0x56>
    4cc8:	8d 2f       	mov	r24, r29
    4cca:	9c 2f       	mov	r25, r28
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	08 95       	ret

00004cd6 <sprintf>:
    4cd6:	0f 93       	push	r16
    4cd8:	1f 93       	push	r17
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62
    4ce2:	2e 97       	sbiw	r28, 0x0e	; 14
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	0e 89       	ldd	r16, Y+22	; 0x16
    4cf0:	1f 89       	ldd	r17, Y+23	; 0x17
    4cf2:	86 e0       	ldi	r24, 0x06	; 6
    4cf4:	8c 83       	std	Y+4, r24	; 0x04
    4cf6:	1a 83       	std	Y+2, r17	; 0x02
    4cf8:	09 83       	std	Y+1, r16	; 0x01
    4cfa:	8f ef       	ldi	r24, 0xFF	; 255
    4cfc:	9f e7       	ldi	r25, 0x7F	; 127
    4cfe:	9e 83       	std	Y+6, r25	; 0x06
    4d00:	8d 83       	std	Y+5, r24	; 0x05
    4d02:	ae 01       	movw	r20, r28
    4d04:	46 5e       	subi	r20, 0xE6	; 230
    4d06:	5f 4f       	sbci	r21, 0xFF	; 255
    4d08:	68 8d       	ldd	r22, Y+24	; 0x18
    4d0a:	79 8d       	ldd	r23, Y+25	; 0x19
    4d0c:	ce 01       	movw	r24, r28
    4d0e:	01 96       	adiw	r24, 0x01	; 1
    4d10:	10 d0       	rcall	.+32     	; 0x4d32 <vfprintf>
    4d12:	ef 81       	ldd	r30, Y+7	; 0x07
    4d14:	f8 85       	ldd	r31, Y+8	; 0x08
    4d16:	e0 0f       	add	r30, r16
    4d18:	f1 1f       	adc	r31, r17
    4d1a:	10 82       	st	Z, r1
    4d1c:	2e 96       	adiw	r28, 0x0e	; 14
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	08 95       	ret

00004d32 <vfprintf>:
    4d32:	2f 92       	push	r2
    4d34:	3f 92       	push	r3
    4d36:	4f 92       	push	r4
    4d38:	5f 92       	push	r5
    4d3a:	6f 92       	push	r6
    4d3c:	7f 92       	push	r7
    4d3e:	8f 92       	push	r8
    4d40:	9f 92       	push	r9
    4d42:	af 92       	push	r10
    4d44:	bf 92       	push	r11
    4d46:	cf 92       	push	r12
    4d48:	df 92       	push	r13
    4d4a:	ef 92       	push	r14
    4d4c:	ff 92       	push	r15
    4d4e:	0f 93       	push	r16
    4d50:	1f 93       	push	r17
    4d52:	cf 93       	push	r28
    4d54:	df 93       	push	r29
    4d56:	cd b7       	in	r28, 0x3d	; 61
    4d58:	de b7       	in	r29, 0x3e	; 62
    4d5a:	2b 97       	sbiw	r28, 0x0b	; 11
    4d5c:	0f b6       	in	r0, 0x3f	; 63
    4d5e:	f8 94       	cli
    4d60:	de bf       	out	0x3e, r29	; 62
    4d62:	0f be       	out	0x3f, r0	; 63
    4d64:	cd bf       	out	0x3d, r28	; 61
    4d66:	6c 01       	movw	r12, r24
    4d68:	7b 01       	movw	r14, r22
    4d6a:	8a 01       	movw	r16, r20
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	17 82       	std	Z+7, r1	; 0x07
    4d70:	16 82       	std	Z+6, r1	; 0x06
    4d72:	83 81       	ldd	r24, Z+3	; 0x03
    4d74:	81 ff       	sbrs	r24, 1
    4d76:	bf c1       	rjmp	.+894    	; 0x50f6 <vfprintf+0x3c4>
    4d78:	ce 01       	movw	r24, r28
    4d7a:	01 96       	adiw	r24, 0x01	; 1
    4d7c:	3c 01       	movw	r6, r24
    4d7e:	f6 01       	movw	r30, r12
    4d80:	93 81       	ldd	r25, Z+3	; 0x03
    4d82:	f7 01       	movw	r30, r14
    4d84:	93 fd       	sbrc	r25, 3
    4d86:	85 91       	lpm	r24, Z+
    4d88:	93 ff       	sbrs	r25, 3
    4d8a:	81 91       	ld	r24, Z+
    4d8c:	7f 01       	movw	r14, r30
    4d8e:	88 23       	and	r24, r24
    4d90:	09 f4       	brne	.+2      	; 0x4d94 <vfprintf+0x62>
    4d92:	ad c1       	rjmp	.+858    	; 0x50ee <vfprintf+0x3bc>
    4d94:	85 32       	cpi	r24, 0x25	; 37
    4d96:	39 f4       	brne	.+14     	; 0x4da6 <vfprintf+0x74>
    4d98:	93 fd       	sbrc	r25, 3
    4d9a:	85 91       	lpm	r24, Z+
    4d9c:	93 ff       	sbrs	r25, 3
    4d9e:	81 91       	ld	r24, Z+
    4da0:	7f 01       	movw	r14, r30
    4da2:	85 32       	cpi	r24, 0x25	; 37
    4da4:	21 f4       	brne	.+8      	; 0x4dae <vfprintf+0x7c>
    4da6:	b6 01       	movw	r22, r12
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	d6 d1       	rcall	.+940    	; 0x5158 <fputc>
    4dac:	e8 cf       	rjmp	.-48     	; 0x4d7e <vfprintf+0x4c>
    4dae:	91 2c       	mov	r9, r1
    4db0:	21 2c       	mov	r2, r1
    4db2:	31 2c       	mov	r3, r1
    4db4:	ff e1       	ldi	r31, 0x1F	; 31
    4db6:	f3 15       	cp	r31, r3
    4db8:	d8 f0       	brcs	.+54     	; 0x4df0 <vfprintf+0xbe>
    4dba:	8b 32       	cpi	r24, 0x2B	; 43
    4dbc:	79 f0       	breq	.+30     	; 0x4ddc <vfprintf+0xaa>
    4dbe:	38 f4       	brcc	.+14     	; 0x4dce <vfprintf+0x9c>
    4dc0:	80 32       	cpi	r24, 0x20	; 32
    4dc2:	79 f0       	breq	.+30     	; 0x4de2 <vfprintf+0xb0>
    4dc4:	83 32       	cpi	r24, 0x23	; 35
    4dc6:	a1 f4       	brne	.+40     	; 0x4df0 <vfprintf+0xbe>
    4dc8:	23 2d       	mov	r18, r3
    4dca:	20 61       	ori	r18, 0x10	; 16
    4dcc:	1d c0       	rjmp	.+58     	; 0x4e08 <vfprintf+0xd6>
    4dce:	8d 32       	cpi	r24, 0x2D	; 45
    4dd0:	61 f0       	breq	.+24     	; 0x4dea <vfprintf+0xb8>
    4dd2:	80 33       	cpi	r24, 0x30	; 48
    4dd4:	69 f4       	brne	.+26     	; 0x4df0 <vfprintf+0xbe>
    4dd6:	23 2d       	mov	r18, r3
    4dd8:	21 60       	ori	r18, 0x01	; 1
    4dda:	16 c0       	rjmp	.+44     	; 0x4e08 <vfprintf+0xd6>
    4ddc:	83 2d       	mov	r24, r3
    4dde:	82 60       	ori	r24, 0x02	; 2
    4de0:	38 2e       	mov	r3, r24
    4de2:	e3 2d       	mov	r30, r3
    4de4:	e4 60       	ori	r30, 0x04	; 4
    4de6:	3e 2e       	mov	r3, r30
    4de8:	2a c0       	rjmp	.+84     	; 0x4e3e <vfprintf+0x10c>
    4dea:	f3 2d       	mov	r31, r3
    4dec:	f8 60       	ori	r31, 0x08	; 8
    4dee:	1d c0       	rjmp	.+58     	; 0x4e2a <vfprintf+0xf8>
    4df0:	37 fc       	sbrc	r3, 7
    4df2:	2d c0       	rjmp	.+90     	; 0x4e4e <vfprintf+0x11c>
    4df4:	20 ed       	ldi	r18, 0xD0	; 208
    4df6:	28 0f       	add	r18, r24
    4df8:	2a 30       	cpi	r18, 0x0A	; 10
    4dfa:	40 f0       	brcs	.+16     	; 0x4e0c <vfprintf+0xda>
    4dfc:	8e 32       	cpi	r24, 0x2E	; 46
    4dfe:	b9 f4       	brne	.+46     	; 0x4e2e <vfprintf+0xfc>
    4e00:	36 fc       	sbrc	r3, 6
    4e02:	75 c1       	rjmp	.+746    	; 0x50ee <vfprintf+0x3bc>
    4e04:	23 2d       	mov	r18, r3
    4e06:	20 64       	ori	r18, 0x40	; 64
    4e08:	32 2e       	mov	r3, r18
    4e0a:	19 c0       	rjmp	.+50     	; 0x4e3e <vfprintf+0x10c>
    4e0c:	36 fe       	sbrs	r3, 6
    4e0e:	06 c0       	rjmp	.+12     	; 0x4e1c <vfprintf+0xea>
    4e10:	8a e0       	ldi	r24, 0x0A	; 10
    4e12:	98 9e       	mul	r9, r24
    4e14:	20 0d       	add	r18, r0
    4e16:	11 24       	eor	r1, r1
    4e18:	92 2e       	mov	r9, r18
    4e1a:	11 c0       	rjmp	.+34     	; 0x4e3e <vfprintf+0x10c>
    4e1c:	ea e0       	ldi	r30, 0x0A	; 10
    4e1e:	2e 9e       	mul	r2, r30
    4e20:	20 0d       	add	r18, r0
    4e22:	11 24       	eor	r1, r1
    4e24:	22 2e       	mov	r2, r18
    4e26:	f3 2d       	mov	r31, r3
    4e28:	f0 62       	ori	r31, 0x20	; 32
    4e2a:	3f 2e       	mov	r3, r31
    4e2c:	08 c0       	rjmp	.+16     	; 0x4e3e <vfprintf+0x10c>
    4e2e:	8c 36       	cpi	r24, 0x6C	; 108
    4e30:	21 f4       	brne	.+8      	; 0x4e3a <vfprintf+0x108>
    4e32:	83 2d       	mov	r24, r3
    4e34:	80 68       	ori	r24, 0x80	; 128
    4e36:	38 2e       	mov	r3, r24
    4e38:	02 c0       	rjmp	.+4      	; 0x4e3e <vfprintf+0x10c>
    4e3a:	88 36       	cpi	r24, 0x68	; 104
    4e3c:	41 f4       	brne	.+16     	; 0x4e4e <vfprintf+0x11c>
    4e3e:	f7 01       	movw	r30, r14
    4e40:	93 fd       	sbrc	r25, 3
    4e42:	85 91       	lpm	r24, Z+
    4e44:	93 ff       	sbrs	r25, 3
    4e46:	81 91       	ld	r24, Z+
    4e48:	7f 01       	movw	r14, r30
    4e4a:	81 11       	cpse	r24, r1
    4e4c:	b3 cf       	rjmp	.-154    	; 0x4db4 <vfprintf+0x82>
    4e4e:	98 2f       	mov	r25, r24
    4e50:	9f 7d       	andi	r25, 0xDF	; 223
    4e52:	95 54       	subi	r25, 0x45	; 69
    4e54:	93 30       	cpi	r25, 0x03	; 3
    4e56:	28 f4       	brcc	.+10     	; 0x4e62 <vfprintf+0x130>
    4e58:	0c 5f       	subi	r16, 0xFC	; 252
    4e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5c:	9f e3       	ldi	r25, 0x3F	; 63
    4e5e:	99 83       	std	Y+1, r25	; 0x01
    4e60:	0d c0       	rjmp	.+26     	; 0x4e7c <vfprintf+0x14a>
    4e62:	83 36       	cpi	r24, 0x63	; 99
    4e64:	31 f0       	breq	.+12     	; 0x4e72 <vfprintf+0x140>
    4e66:	83 37       	cpi	r24, 0x73	; 115
    4e68:	71 f0       	breq	.+28     	; 0x4e86 <vfprintf+0x154>
    4e6a:	83 35       	cpi	r24, 0x53	; 83
    4e6c:	09 f0       	breq	.+2      	; 0x4e70 <vfprintf+0x13e>
    4e6e:	55 c0       	rjmp	.+170    	; 0x4f1a <vfprintf+0x1e8>
    4e70:	20 c0       	rjmp	.+64     	; 0x4eb2 <vfprintf+0x180>
    4e72:	f8 01       	movw	r30, r16
    4e74:	80 81       	ld	r24, Z
    4e76:	89 83       	std	Y+1, r24	; 0x01
    4e78:	0e 5f       	subi	r16, 0xFE	; 254
    4e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e7c:	88 24       	eor	r8, r8
    4e7e:	83 94       	inc	r8
    4e80:	91 2c       	mov	r9, r1
    4e82:	53 01       	movw	r10, r6
    4e84:	12 c0       	rjmp	.+36     	; 0x4eaa <vfprintf+0x178>
    4e86:	28 01       	movw	r4, r16
    4e88:	f2 e0       	ldi	r31, 0x02	; 2
    4e8a:	4f 0e       	add	r4, r31
    4e8c:	51 1c       	adc	r5, r1
    4e8e:	f8 01       	movw	r30, r16
    4e90:	a0 80       	ld	r10, Z
    4e92:	b1 80       	ldd	r11, Z+1	; 0x01
    4e94:	36 fe       	sbrs	r3, 6
    4e96:	03 c0       	rjmp	.+6      	; 0x4e9e <vfprintf+0x16c>
    4e98:	69 2d       	mov	r22, r9
    4e9a:	70 e0       	ldi	r23, 0x00	; 0
    4e9c:	02 c0       	rjmp	.+4      	; 0x4ea2 <vfprintf+0x170>
    4e9e:	6f ef       	ldi	r22, 0xFF	; 255
    4ea0:	7f ef       	ldi	r23, 0xFF	; 255
    4ea2:	c5 01       	movw	r24, r10
    4ea4:	4e d1       	rcall	.+668    	; 0x5142 <strnlen>
    4ea6:	4c 01       	movw	r8, r24
    4ea8:	82 01       	movw	r16, r4
    4eaa:	f3 2d       	mov	r31, r3
    4eac:	ff 77       	andi	r31, 0x7F	; 127
    4eae:	3f 2e       	mov	r3, r31
    4eb0:	15 c0       	rjmp	.+42     	; 0x4edc <vfprintf+0x1aa>
    4eb2:	28 01       	movw	r4, r16
    4eb4:	22 e0       	ldi	r18, 0x02	; 2
    4eb6:	42 0e       	add	r4, r18
    4eb8:	51 1c       	adc	r5, r1
    4eba:	f8 01       	movw	r30, r16
    4ebc:	a0 80       	ld	r10, Z
    4ebe:	b1 80       	ldd	r11, Z+1	; 0x01
    4ec0:	36 fe       	sbrs	r3, 6
    4ec2:	03 c0       	rjmp	.+6      	; 0x4eca <vfprintf+0x198>
    4ec4:	69 2d       	mov	r22, r9
    4ec6:	70 e0       	ldi	r23, 0x00	; 0
    4ec8:	02 c0       	rjmp	.+4      	; 0x4ece <vfprintf+0x19c>
    4eca:	6f ef       	ldi	r22, 0xFF	; 255
    4ecc:	7f ef       	ldi	r23, 0xFF	; 255
    4ece:	c5 01       	movw	r24, r10
    4ed0:	2d d1       	rcall	.+602    	; 0x512c <strnlen_P>
    4ed2:	4c 01       	movw	r8, r24
    4ed4:	f3 2d       	mov	r31, r3
    4ed6:	f0 68       	ori	r31, 0x80	; 128
    4ed8:	3f 2e       	mov	r3, r31
    4eda:	82 01       	movw	r16, r4
    4edc:	33 fc       	sbrc	r3, 3
    4ede:	19 c0       	rjmp	.+50     	; 0x4f12 <vfprintf+0x1e0>
    4ee0:	82 2d       	mov	r24, r2
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	88 16       	cp	r8, r24
    4ee6:	99 06       	cpc	r9, r25
    4ee8:	a0 f4       	brcc	.+40     	; 0x4f12 <vfprintf+0x1e0>
    4eea:	b6 01       	movw	r22, r12
    4eec:	80 e2       	ldi	r24, 0x20	; 32
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	33 d1       	rcall	.+614    	; 0x5158 <fputc>
    4ef2:	2a 94       	dec	r2
    4ef4:	f5 cf       	rjmp	.-22     	; 0x4ee0 <vfprintf+0x1ae>
    4ef6:	f5 01       	movw	r30, r10
    4ef8:	37 fc       	sbrc	r3, 7
    4efa:	85 91       	lpm	r24, Z+
    4efc:	37 fe       	sbrs	r3, 7
    4efe:	81 91       	ld	r24, Z+
    4f00:	5f 01       	movw	r10, r30
    4f02:	b6 01       	movw	r22, r12
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	28 d1       	rcall	.+592    	; 0x5158 <fputc>
    4f08:	21 10       	cpse	r2, r1
    4f0a:	2a 94       	dec	r2
    4f0c:	21 e0       	ldi	r18, 0x01	; 1
    4f0e:	82 1a       	sub	r8, r18
    4f10:	91 08       	sbc	r9, r1
    4f12:	81 14       	cp	r8, r1
    4f14:	91 04       	cpc	r9, r1
    4f16:	79 f7       	brne	.-34     	; 0x4ef6 <vfprintf+0x1c4>
    4f18:	e1 c0       	rjmp	.+450    	; 0x50dc <vfprintf+0x3aa>
    4f1a:	84 36       	cpi	r24, 0x64	; 100
    4f1c:	11 f0       	breq	.+4      	; 0x4f22 <vfprintf+0x1f0>
    4f1e:	89 36       	cpi	r24, 0x69	; 105
    4f20:	39 f5       	brne	.+78     	; 0x4f70 <vfprintf+0x23e>
    4f22:	f8 01       	movw	r30, r16
    4f24:	37 fe       	sbrs	r3, 7
    4f26:	07 c0       	rjmp	.+14     	; 0x4f36 <vfprintf+0x204>
    4f28:	60 81       	ld	r22, Z
    4f2a:	71 81       	ldd	r23, Z+1	; 0x01
    4f2c:	82 81       	ldd	r24, Z+2	; 0x02
    4f2e:	93 81       	ldd	r25, Z+3	; 0x03
    4f30:	0c 5f       	subi	r16, 0xFC	; 252
    4f32:	1f 4f       	sbci	r17, 0xFF	; 255
    4f34:	08 c0       	rjmp	.+16     	; 0x4f46 <vfprintf+0x214>
    4f36:	60 81       	ld	r22, Z
    4f38:	71 81       	ldd	r23, Z+1	; 0x01
    4f3a:	07 2e       	mov	r0, r23
    4f3c:	00 0c       	add	r0, r0
    4f3e:	88 0b       	sbc	r24, r24
    4f40:	99 0b       	sbc	r25, r25
    4f42:	0e 5f       	subi	r16, 0xFE	; 254
    4f44:	1f 4f       	sbci	r17, 0xFF	; 255
    4f46:	f3 2d       	mov	r31, r3
    4f48:	ff 76       	andi	r31, 0x6F	; 111
    4f4a:	3f 2e       	mov	r3, r31
    4f4c:	97 ff       	sbrs	r25, 7
    4f4e:	09 c0       	rjmp	.+18     	; 0x4f62 <vfprintf+0x230>
    4f50:	90 95       	com	r25
    4f52:	80 95       	com	r24
    4f54:	70 95       	com	r23
    4f56:	61 95       	neg	r22
    4f58:	7f 4f       	sbci	r23, 0xFF	; 255
    4f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5e:	f0 68       	ori	r31, 0x80	; 128
    4f60:	3f 2e       	mov	r3, r31
    4f62:	2a e0       	ldi	r18, 0x0A	; 10
    4f64:	30 e0       	ldi	r19, 0x00	; 0
    4f66:	a3 01       	movw	r20, r6
    4f68:	33 d1       	rcall	.+614    	; 0x51d0 <__ultoa_invert>
    4f6a:	88 2e       	mov	r8, r24
    4f6c:	86 18       	sub	r8, r6
    4f6e:	44 c0       	rjmp	.+136    	; 0x4ff8 <vfprintf+0x2c6>
    4f70:	85 37       	cpi	r24, 0x75	; 117
    4f72:	31 f4       	brne	.+12     	; 0x4f80 <vfprintf+0x24e>
    4f74:	23 2d       	mov	r18, r3
    4f76:	2f 7e       	andi	r18, 0xEF	; 239
    4f78:	b2 2e       	mov	r11, r18
    4f7a:	2a e0       	ldi	r18, 0x0A	; 10
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	25 c0       	rjmp	.+74     	; 0x4fca <vfprintf+0x298>
    4f80:	93 2d       	mov	r25, r3
    4f82:	99 7f       	andi	r25, 0xF9	; 249
    4f84:	b9 2e       	mov	r11, r25
    4f86:	8f 36       	cpi	r24, 0x6F	; 111
    4f88:	c1 f0       	breq	.+48     	; 0x4fba <vfprintf+0x288>
    4f8a:	18 f4       	brcc	.+6      	; 0x4f92 <vfprintf+0x260>
    4f8c:	88 35       	cpi	r24, 0x58	; 88
    4f8e:	79 f0       	breq	.+30     	; 0x4fae <vfprintf+0x27c>
    4f90:	ae c0       	rjmp	.+348    	; 0x50ee <vfprintf+0x3bc>
    4f92:	80 37       	cpi	r24, 0x70	; 112
    4f94:	19 f0       	breq	.+6      	; 0x4f9c <vfprintf+0x26a>
    4f96:	88 37       	cpi	r24, 0x78	; 120
    4f98:	21 f0       	breq	.+8      	; 0x4fa2 <vfprintf+0x270>
    4f9a:	a9 c0       	rjmp	.+338    	; 0x50ee <vfprintf+0x3bc>
    4f9c:	e9 2f       	mov	r30, r25
    4f9e:	e0 61       	ori	r30, 0x10	; 16
    4fa0:	be 2e       	mov	r11, r30
    4fa2:	b4 fe       	sbrs	r11, 4
    4fa4:	0d c0       	rjmp	.+26     	; 0x4fc0 <vfprintf+0x28e>
    4fa6:	fb 2d       	mov	r31, r11
    4fa8:	f4 60       	ori	r31, 0x04	; 4
    4faa:	bf 2e       	mov	r11, r31
    4fac:	09 c0       	rjmp	.+18     	; 0x4fc0 <vfprintf+0x28e>
    4fae:	34 fe       	sbrs	r3, 4
    4fb0:	0a c0       	rjmp	.+20     	; 0x4fc6 <vfprintf+0x294>
    4fb2:	29 2f       	mov	r18, r25
    4fb4:	26 60       	ori	r18, 0x06	; 6
    4fb6:	b2 2e       	mov	r11, r18
    4fb8:	06 c0       	rjmp	.+12     	; 0x4fc6 <vfprintf+0x294>
    4fba:	28 e0       	ldi	r18, 0x08	; 8
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	05 c0       	rjmp	.+10     	; 0x4fca <vfprintf+0x298>
    4fc0:	20 e1       	ldi	r18, 0x10	; 16
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	02 c0       	rjmp	.+4      	; 0x4fca <vfprintf+0x298>
    4fc6:	20 e1       	ldi	r18, 0x10	; 16
    4fc8:	32 e0       	ldi	r19, 0x02	; 2
    4fca:	f8 01       	movw	r30, r16
    4fcc:	b7 fe       	sbrs	r11, 7
    4fce:	07 c0       	rjmp	.+14     	; 0x4fde <vfprintf+0x2ac>
    4fd0:	60 81       	ld	r22, Z
    4fd2:	71 81       	ldd	r23, Z+1	; 0x01
    4fd4:	82 81       	ldd	r24, Z+2	; 0x02
    4fd6:	93 81       	ldd	r25, Z+3	; 0x03
    4fd8:	0c 5f       	subi	r16, 0xFC	; 252
    4fda:	1f 4f       	sbci	r17, 0xFF	; 255
    4fdc:	06 c0       	rjmp	.+12     	; 0x4fea <vfprintf+0x2b8>
    4fde:	60 81       	ld	r22, Z
    4fe0:	71 81       	ldd	r23, Z+1	; 0x01
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	0e 5f       	subi	r16, 0xFE	; 254
    4fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fea:	a3 01       	movw	r20, r6
    4fec:	f1 d0       	rcall	.+482    	; 0x51d0 <__ultoa_invert>
    4fee:	88 2e       	mov	r8, r24
    4ff0:	86 18       	sub	r8, r6
    4ff2:	fb 2d       	mov	r31, r11
    4ff4:	ff 77       	andi	r31, 0x7F	; 127
    4ff6:	3f 2e       	mov	r3, r31
    4ff8:	36 fe       	sbrs	r3, 6
    4ffa:	0d c0       	rjmp	.+26     	; 0x5016 <vfprintf+0x2e4>
    4ffc:	23 2d       	mov	r18, r3
    4ffe:	2e 7f       	andi	r18, 0xFE	; 254
    5000:	a2 2e       	mov	r10, r18
    5002:	89 14       	cp	r8, r9
    5004:	58 f4       	brcc	.+22     	; 0x501c <vfprintf+0x2ea>
    5006:	34 fe       	sbrs	r3, 4
    5008:	0b c0       	rjmp	.+22     	; 0x5020 <vfprintf+0x2ee>
    500a:	32 fc       	sbrc	r3, 2
    500c:	09 c0       	rjmp	.+18     	; 0x5020 <vfprintf+0x2ee>
    500e:	83 2d       	mov	r24, r3
    5010:	8e 7e       	andi	r24, 0xEE	; 238
    5012:	a8 2e       	mov	r10, r24
    5014:	05 c0       	rjmp	.+10     	; 0x5020 <vfprintf+0x2ee>
    5016:	b8 2c       	mov	r11, r8
    5018:	a3 2c       	mov	r10, r3
    501a:	03 c0       	rjmp	.+6      	; 0x5022 <vfprintf+0x2f0>
    501c:	b8 2c       	mov	r11, r8
    501e:	01 c0       	rjmp	.+2      	; 0x5022 <vfprintf+0x2f0>
    5020:	b9 2c       	mov	r11, r9
    5022:	a4 fe       	sbrs	r10, 4
    5024:	0f c0       	rjmp	.+30     	; 0x5044 <vfprintf+0x312>
    5026:	fe 01       	movw	r30, r28
    5028:	e8 0d       	add	r30, r8
    502a:	f1 1d       	adc	r31, r1
    502c:	80 81       	ld	r24, Z
    502e:	80 33       	cpi	r24, 0x30	; 48
    5030:	21 f4       	brne	.+8      	; 0x503a <vfprintf+0x308>
    5032:	9a 2d       	mov	r25, r10
    5034:	99 7e       	andi	r25, 0xE9	; 233
    5036:	a9 2e       	mov	r10, r25
    5038:	09 c0       	rjmp	.+18     	; 0x504c <vfprintf+0x31a>
    503a:	a2 fe       	sbrs	r10, 2
    503c:	06 c0       	rjmp	.+12     	; 0x504a <vfprintf+0x318>
    503e:	b3 94       	inc	r11
    5040:	b3 94       	inc	r11
    5042:	04 c0       	rjmp	.+8      	; 0x504c <vfprintf+0x31a>
    5044:	8a 2d       	mov	r24, r10
    5046:	86 78       	andi	r24, 0x86	; 134
    5048:	09 f0       	breq	.+2      	; 0x504c <vfprintf+0x31a>
    504a:	b3 94       	inc	r11
    504c:	a3 fc       	sbrc	r10, 3
    504e:	10 c0       	rjmp	.+32     	; 0x5070 <vfprintf+0x33e>
    5050:	a0 fe       	sbrs	r10, 0
    5052:	06 c0       	rjmp	.+12     	; 0x5060 <vfprintf+0x32e>
    5054:	b2 14       	cp	r11, r2
    5056:	80 f4       	brcc	.+32     	; 0x5078 <vfprintf+0x346>
    5058:	28 0c       	add	r2, r8
    505a:	92 2c       	mov	r9, r2
    505c:	9b 18       	sub	r9, r11
    505e:	0d c0       	rjmp	.+26     	; 0x507a <vfprintf+0x348>
    5060:	b2 14       	cp	r11, r2
    5062:	58 f4       	brcc	.+22     	; 0x507a <vfprintf+0x348>
    5064:	b6 01       	movw	r22, r12
    5066:	80 e2       	ldi	r24, 0x20	; 32
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	76 d0       	rcall	.+236    	; 0x5158 <fputc>
    506c:	b3 94       	inc	r11
    506e:	f8 cf       	rjmp	.-16     	; 0x5060 <vfprintf+0x32e>
    5070:	b2 14       	cp	r11, r2
    5072:	18 f4       	brcc	.+6      	; 0x507a <vfprintf+0x348>
    5074:	2b 18       	sub	r2, r11
    5076:	02 c0       	rjmp	.+4      	; 0x507c <vfprintf+0x34a>
    5078:	98 2c       	mov	r9, r8
    507a:	21 2c       	mov	r2, r1
    507c:	a4 fe       	sbrs	r10, 4
    507e:	0f c0       	rjmp	.+30     	; 0x509e <vfprintf+0x36c>
    5080:	b6 01       	movw	r22, r12
    5082:	80 e3       	ldi	r24, 0x30	; 48
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	68 d0       	rcall	.+208    	; 0x5158 <fputc>
    5088:	a2 fe       	sbrs	r10, 2
    508a:	16 c0       	rjmp	.+44     	; 0x50b8 <vfprintf+0x386>
    508c:	a1 fc       	sbrc	r10, 1
    508e:	03 c0       	rjmp	.+6      	; 0x5096 <vfprintf+0x364>
    5090:	88 e7       	ldi	r24, 0x78	; 120
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	02 c0       	rjmp	.+4      	; 0x509a <vfprintf+0x368>
    5096:	88 e5       	ldi	r24, 0x58	; 88
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	b6 01       	movw	r22, r12
    509c:	0c c0       	rjmp	.+24     	; 0x50b6 <vfprintf+0x384>
    509e:	8a 2d       	mov	r24, r10
    50a0:	86 78       	andi	r24, 0x86	; 134
    50a2:	51 f0       	breq	.+20     	; 0x50b8 <vfprintf+0x386>
    50a4:	a1 fe       	sbrs	r10, 1
    50a6:	02 c0       	rjmp	.+4      	; 0x50ac <vfprintf+0x37a>
    50a8:	8b e2       	ldi	r24, 0x2B	; 43
    50aa:	01 c0       	rjmp	.+2      	; 0x50ae <vfprintf+0x37c>
    50ac:	80 e2       	ldi	r24, 0x20	; 32
    50ae:	a7 fc       	sbrc	r10, 7
    50b0:	8d e2       	ldi	r24, 0x2D	; 45
    50b2:	b6 01       	movw	r22, r12
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	50 d0       	rcall	.+160    	; 0x5158 <fputc>
    50b8:	89 14       	cp	r8, r9
    50ba:	30 f4       	brcc	.+12     	; 0x50c8 <vfprintf+0x396>
    50bc:	b6 01       	movw	r22, r12
    50be:	80 e3       	ldi	r24, 0x30	; 48
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	4a d0       	rcall	.+148    	; 0x5158 <fputc>
    50c4:	9a 94       	dec	r9
    50c6:	f8 cf       	rjmp	.-16     	; 0x50b8 <vfprintf+0x386>
    50c8:	8a 94       	dec	r8
    50ca:	f3 01       	movw	r30, r6
    50cc:	e8 0d       	add	r30, r8
    50ce:	f1 1d       	adc	r31, r1
    50d0:	80 81       	ld	r24, Z
    50d2:	b6 01       	movw	r22, r12
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	40 d0       	rcall	.+128    	; 0x5158 <fputc>
    50d8:	81 10       	cpse	r8, r1
    50da:	f6 cf       	rjmp	.-20     	; 0x50c8 <vfprintf+0x396>
    50dc:	22 20       	and	r2, r2
    50de:	09 f4       	brne	.+2      	; 0x50e2 <vfprintf+0x3b0>
    50e0:	4e ce       	rjmp	.-868    	; 0x4d7e <vfprintf+0x4c>
    50e2:	b6 01       	movw	r22, r12
    50e4:	80 e2       	ldi	r24, 0x20	; 32
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	37 d0       	rcall	.+110    	; 0x5158 <fputc>
    50ea:	2a 94       	dec	r2
    50ec:	f7 cf       	rjmp	.-18     	; 0x50dc <vfprintf+0x3aa>
    50ee:	f6 01       	movw	r30, r12
    50f0:	86 81       	ldd	r24, Z+6	; 0x06
    50f2:	97 81       	ldd	r25, Z+7	; 0x07
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <vfprintf+0x3c8>
    50f6:	8f ef       	ldi	r24, 0xFF	; 255
    50f8:	9f ef       	ldi	r25, 0xFF	; 255
    50fa:	2b 96       	adiw	r28, 0x0b	; 11
    50fc:	0f b6       	in	r0, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	de bf       	out	0x3e, r29	; 62
    5102:	0f be       	out	0x3f, r0	; 63
    5104:	cd bf       	out	0x3d, r28	; 61
    5106:	df 91       	pop	r29
    5108:	cf 91       	pop	r28
    510a:	1f 91       	pop	r17
    510c:	0f 91       	pop	r16
    510e:	ff 90       	pop	r15
    5110:	ef 90       	pop	r14
    5112:	df 90       	pop	r13
    5114:	cf 90       	pop	r12
    5116:	bf 90       	pop	r11
    5118:	af 90       	pop	r10
    511a:	9f 90       	pop	r9
    511c:	8f 90       	pop	r8
    511e:	7f 90       	pop	r7
    5120:	6f 90       	pop	r6
    5122:	5f 90       	pop	r5
    5124:	4f 90       	pop	r4
    5126:	3f 90       	pop	r3
    5128:	2f 90       	pop	r2
    512a:	08 95       	ret

0000512c <strnlen_P>:
    512c:	fc 01       	movw	r30, r24
    512e:	05 90       	lpm	r0, Z+
    5130:	61 50       	subi	r22, 0x01	; 1
    5132:	70 40       	sbci	r23, 0x00	; 0
    5134:	01 10       	cpse	r0, r1
    5136:	d8 f7       	brcc	.-10     	; 0x512e <strnlen_P+0x2>
    5138:	80 95       	com	r24
    513a:	90 95       	com	r25
    513c:	8e 0f       	add	r24, r30
    513e:	9f 1f       	adc	r25, r31
    5140:	08 95       	ret

00005142 <strnlen>:
    5142:	fc 01       	movw	r30, r24
    5144:	61 50       	subi	r22, 0x01	; 1
    5146:	70 40       	sbci	r23, 0x00	; 0
    5148:	01 90       	ld	r0, Z+
    514a:	01 10       	cpse	r0, r1
    514c:	d8 f7       	brcc	.-10     	; 0x5144 <strnlen+0x2>
    514e:	80 95       	com	r24
    5150:	90 95       	com	r25
    5152:	8e 0f       	add	r24, r30
    5154:	9f 1f       	adc	r25, r31
    5156:	08 95       	ret

00005158 <fputc>:
    5158:	0f 93       	push	r16
    515a:	1f 93       	push	r17
    515c:	cf 93       	push	r28
    515e:	df 93       	push	r29
    5160:	fb 01       	movw	r30, r22
    5162:	23 81       	ldd	r18, Z+3	; 0x03
    5164:	21 fd       	sbrc	r18, 1
    5166:	03 c0       	rjmp	.+6      	; 0x516e <fputc+0x16>
    5168:	8f ef       	ldi	r24, 0xFF	; 255
    516a:	9f ef       	ldi	r25, 0xFF	; 255
    516c:	2c c0       	rjmp	.+88     	; 0x51c6 <fputc+0x6e>
    516e:	22 ff       	sbrs	r18, 2
    5170:	16 c0       	rjmp	.+44     	; 0x519e <fputc+0x46>
    5172:	46 81       	ldd	r20, Z+6	; 0x06
    5174:	57 81       	ldd	r21, Z+7	; 0x07
    5176:	24 81       	ldd	r18, Z+4	; 0x04
    5178:	35 81       	ldd	r19, Z+5	; 0x05
    517a:	42 17       	cp	r20, r18
    517c:	53 07       	cpc	r21, r19
    517e:	44 f4       	brge	.+16     	; 0x5190 <fputc+0x38>
    5180:	a0 81       	ld	r26, Z
    5182:	b1 81       	ldd	r27, Z+1	; 0x01
    5184:	9d 01       	movw	r18, r26
    5186:	2f 5f       	subi	r18, 0xFF	; 255
    5188:	3f 4f       	sbci	r19, 0xFF	; 255
    518a:	31 83       	std	Z+1, r19	; 0x01
    518c:	20 83       	st	Z, r18
    518e:	8c 93       	st	X, r24
    5190:	26 81       	ldd	r18, Z+6	; 0x06
    5192:	37 81       	ldd	r19, Z+7	; 0x07
    5194:	2f 5f       	subi	r18, 0xFF	; 255
    5196:	3f 4f       	sbci	r19, 0xFF	; 255
    5198:	37 83       	std	Z+7, r19	; 0x07
    519a:	26 83       	std	Z+6, r18	; 0x06
    519c:	14 c0       	rjmp	.+40     	; 0x51c6 <fputc+0x6e>
    519e:	8b 01       	movw	r16, r22
    51a0:	ec 01       	movw	r28, r24
    51a2:	fb 01       	movw	r30, r22
    51a4:	00 84       	ldd	r0, Z+8	; 0x08
    51a6:	f1 85       	ldd	r31, Z+9	; 0x09
    51a8:	e0 2d       	mov	r30, r0
    51aa:	19 95       	eicall
    51ac:	89 2b       	or	r24, r25
    51ae:	e1 f6       	brne	.-72     	; 0x5168 <fputc+0x10>
    51b0:	d8 01       	movw	r26, r16
    51b2:	16 96       	adiw	r26, 0x06	; 6
    51b4:	8d 91       	ld	r24, X+
    51b6:	9c 91       	ld	r25, X
    51b8:	17 97       	sbiw	r26, 0x07	; 7
    51ba:	01 96       	adiw	r24, 0x01	; 1
    51bc:	17 96       	adiw	r26, 0x07	; 7
    51be:	9c 93       	st	X, r25
    51c0:	8e 93       	st	-X, r24
    51c2:	16 97       	sbiw	r26, 0x06	; 6
    51c4:	ce 01       	movw	r24, r28
    51c6:	df 91       	pop	r29
    51c8:	cf 91       	pop	r28
    51ca:	1f 91       	pop	r17
    51cc:	0f 91       	pop	r16
    51ce:	08 95       	ret

000051d0 <__ultoa_invert>:
    51d0:	fa 01       	movw	r30, r20
    51d2:	aa 27       	eor	r26, r26
    51d4:	28 30       	cpi	r18, 0x08	; 8
    51d6:	51 f1       	breq	.+84     	; 0x522c <__ultoa_invert+0x5c>
    51d8:	20 31       	cpi	r18, 0x10	; 16
    51da:	81 f1       	breq	.+96     	; 0x523c <__ultoa_invert+0x6c>
    51dc:	e8 94       	clt
    51de:	6f 93       	push	r22
    51e0:	6e 7f       	andi	r22, 0xFE	; 254
    51e2:	6e 5f       	subi	r22, 0xFE	; 254
    51e4:	7f 4f       	sbci	r23, 0xFF	; 255
    51e6:	8f 4f       	sbci	r24, 0xFF	; 255
    51e8:	9f 4f       	sbci	r25, 0xFF	; 255
    51ea:	af 4f       	sbci	r26, 0xFF	; 255
    51ec:	b1 e0       	ldi	r27, 0x01	; 1
    51ee:	3e d0       	rcall	.+124    	; 0x526c <__ultoa_invert+0x9c>
    51f0:	b4 e0       	ldi	r27, 0x04	; 4
    51f2:	3c d0       	rcall	.+120    	; 0x526c <__ultoa_invert+0x9c>
    51f4:	67 0f       	add	r22, r23
    51f6:	78 1f       	adc	r23, r24
    51f8:	89 1f       	adc	r24, r25
    51fa:	9a 1f       	adc	r25, r26
    51fc:	a1 1d       	adc	r26, r1
    51fe:	68 0f       	add	r22, r24
    5200:	79 1f       	adc	r23, r25
    5202:	8a 1f       	adc	r24, r26
    5204:	91 1d       	adc	r25, r1
    5206:	a1 1d       	adc	r26, r1
    5208:	6a 0f       	add	r22, r26
    520a:	71 1d       	adc	r23, r1
    520c:	81 1d       	adc	r24, r1
    520e:	91 1d       	adc	r25, r1
    5210:	a1 1d       	adc	r26, r1
    5212:	20 d0       	rcall	.+64     	; 0x5254 <__ultoa_invert+0x84>
    5214:	09 f4       	brne	.+2      	; 0x5218 <__ultoa_invert+0x48>
    5216:	68 94       	set
    5218:	3f 91       	pop	r19
    521a:	2a e0       	ldi	r18, 0x0A	; 10
    521c:	26 9f       	mul	r18, r22
    521e:	11 24       	eor	r1, r1
    5220:	30 19       	sub	r19, r0
    5222:	30 5d       	subi	r19, 0xD0	; 208
    5224:	31 93       	st	Z+, r19
    5226:	de f6       	brtc	.-74     	; 0x51de <__ultoa_invert+0xe>
    5228:	cf 01       	movw	r24, r30
    522a:	08 95       	ret
    522c:	46 2f       	mov	r20, r22
    522e:	47 70       	andi	r20, 0x07	; 7
    5230:	40 5d       	subi	r20, 0xD0	; 208
    5232:	41 93       	st	Z+, r20
    5234:	b3 e0       	ldi	r27, 0x03	; 3
    5236:	0f d0       	rcall	.+30     	; 0x5256 <__ultoa_invert+0x86>
    5238:	c9 f7       	brne	.-14     	; 0x522c <__ultoa_invert+0x5c>
    523a:	f6 cf       	rjmp	.-20     	; 0x5228 <__ultoa_invert+0x58>
    523c:	46 2f       	mov	r20, r22
    523e:	4f 70       	andi	r20, 0x0F	; 15
    5240:	40 5d       	subi	r20, 0xD0	; 208
    5242:	4a 33       	cpi	r20, 0x3A	; 58
    5244:	18 f0       	brcs	.+6      	; 0x524c <__ultoa_invert+0x7c>
    5246:	49 5d       	subi	r20, 0xD9	; 217
    5248:	31 fd       	sbrc	r19, 1
    524a:	40 52       	subi	r20, 0x20	; 32
    524c:	41 93       	st	Z+, r20
    524e:	02 d0       	rcall	.+4      	; 0x5254 <__ultoa_invert+0x84>
    5250:	a9 f7       	brne	.-22     	; 0x523c <__ultoa_invert+0x6c>
    5252:	ea cf       	rjmp	.-44     	; 0x5228 <__ultoa_invert+0x58>
    5254:	b4 e0       	ldi	r27, 0x04	; 4
    5256:	a6 95       	lsr	r26
    5258:	97 95       	ror	r25
    525a:	87 95       	ror	r24
    525c:	77 95       	ror	r23
    525e:	67 95       	ror	r22
    5260:	ba 95       	dec	r27
    5262:	c9 f7       	brne	.-14     	; 0x5256 <__ultoa_invert+0x86>
    5264:	00 97       	sbiw	r24, 0x00	; 0
    5266:	61 05       	cpc	r22, r1
    5268:	71 05       	cpc	r23, r1
    526a:	08 95       	ret
    526c:	9b 01       	movw	r18, r22
    526e:	ac 01       	movw	r20, r24
    5270:	0a 2e       	mov	r0, r26
    5272:	06 94       	lsr	r0
    5274:	57 95       	ror	r21
    5276:	47 95       	ror	r20
    5278:	37 95       	ror	r19
    527a:	27 95       	ror	r18
    527c:	ba 95       	dec	r27
    527e:	c9 f7       	brne	.-14     	; 0x5272 <__ultoa_invert+0xa2>
    5280:	62 0f       	add	r22, r18
    5282:	73 1f       	adc	r23, r19
    5284:	84 1f       	adc	r24, r20
    5286:	95 1f       	adc	r25, r21
    5288:	a0 1d       	adc	r26, r0
    528a:	08 95       	ret

0000528c <_exit>:
    528c:	f8 94       	cli

0000528e <__stop_program>:
    528e:	ff cf       	rjmp	.-2      	; 0x528e <__stop_program>
