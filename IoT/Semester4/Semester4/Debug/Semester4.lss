
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000184  00800200  0000487c  00004910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000487c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000afb  00800384  00800384  00004a94  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000888  00000000  00000000  00004b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a26c  00000000  00000000  000053b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cf3  00000000  00000000  0000f624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000053c6  00000000  00000000  00012317  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d2c  00000000  00000000  000176e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003440  00000000  00000000  0001940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008b8c  00000000  00000000  0001c84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000800  00000000  00000000  000253d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c6       	rjmp	.+3226   	; 0xccc <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__vector_25>
      68:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__vector_36>
      94:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__vector_51>
      d0:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__vector_54>
      dc:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	70 15       	cp	r23, r0
      e6:	70 15       	cp	r23, r0
      e8:	70 15       	cp	r23, r0
      ea:	a7 15       	cp	r26, r7
      ec:	af 15       	cp	r26, r15
      ee:	c4 15       	cp	r28, r4
      f0:	70 15       	cp	r23, r0
      f2:	70 15       	cp	r23, r0
      f4:	a7 15       	cp	r26, r7
      f6:	af 15       	cp	r26, r15
      f8:	2d 1d       	adc	r18, r13
      fa:	9d 1d       	adc	r25, r13
      fc:	9d 1d       	adc	r25, r13
      fe:	9d 1d       	adc	r25, r13
     100:	9d 1d       	adc	r25, r13
     102:	9d 1d       	adc	r25, r13
     104:	9d 1d       	adc	r25, r13
     106:	9d 1d       	adc	r25, r13
     108:	2d 1d       	adc	r18, r13
     10a:	9d 1d       	adc	r25, r13
     10c:	9d 1d       	adc	r25, r13
     10e:	9d 1d       	adc	r25, r13
     110:	9d 1d       	adc	r25, r13
     112:	9d 1d       	adc	r25, r13
     114:	9d 1d       	adc	r25, r13
     116:	9d 1d       	adc	r25, r13
     118:	2f 1d       	adc	r18, r15
     11a:	9d 1d       	adc	r25, r13
     11c:	9d 1d       	adc	r25, r13
     11e:	9d 1d       	adc	r25, r13
     120:	9d 1d       	adc	r25, r13
     122:	9d 1d       	adc	r25, r13
     124:	9d 1d       	adc	r25, r13
     126:	9d 1d       	adc	r25, r13
     128:	9d 1d       	adc	r25, r13
     12a:	9d 1d       	adc	r25, r13
     12c:	9d 1d       	adc	r25, r13
     12e:	9d 1d       	adc	r25, r13
     130:	9d 1d       	adc	r25, r13
     132:	9d 1d       	adc	r25, r13
     134:	9d 1d       	adc	r25, r13
     136:	9d 1d       	adc	r25, r13
     138:	2f 1d       	adc	r18, r15
     13a:	9d 1d       	adc	r25, r13
     13c:	9d 1d       	adc	r25, r13
     13e:	9d 1d       	adc	r25, r13
     140:	9d 1d       	adc	r25, r13
     142:	9d 1d       	adc	r25, r13
     144:	9d 1d       	adc	r25, r13
     146:	9d 1d       	adc	r25, r13
     148:	9d 1d       	adc	r25, r13
     14a:	9d 1d       	adc	r25, r13
     14c:	9d 1d       	adc	r25, r13
     14e:	9d 1d       	adc	r25, r13
     150:	9d 1d       	adc	r25, r13
     152:	9d 1d       	adc	r25, r13
     154:	9d 1d       	adc	r25, r13
     156:	9d 1d       	adc	r25, r13
     158:	99 1d       	adc	r25, r9
     15a:	9d 1d       	adc	r25, r13
     15c:	9d 1d       	adc	r25, r13
     15e:	9d 1d       	adc	r25, r13
     160:	9d 1d       	adc	r25, r13
     162:	9d 1d       	adc	r25, r13
     164:	9d 1d       	adc	r25, r13
     166:	9d 1d       	adc	r25, r13
     168:	64 1d       	adc	r22, r4
     16a:	9d 1d       	adc	r25, r13
     16c:	9d 1d       	adc	r25, r13
     16e:	9d 1d       	adc	r25, r13
     170:	9d 1d       	adc	r25, r13
     172:	9d 1d       	adc	r25, r13
     174:	9d 1d       	adc	r25, r13
     176:	9d 1d       	adc	r25, r13
     178:	9d 1d       	adc	r25, r13
     17a:	9d 1d       	adc	r25, r13
     17c:	9d 1d       	adc	r25, r13
     17e:	9d 1d       	adc	r25, r13
     180:	9d 1d       	adc	r25, r13
     182:	9d 1d       	adc	r25, r13
     184:	9d 1d       	adc	r25, r13
     186:	9d 1d       	adc	r25, r13
     188:	58 1d       	adc	r21, r8
     18a:	9d 1d       	adc	r25, r13
     18c:	9d 1d       	adc	r25, r13
     18e:	9d 1d       	adc	r25, r13
     190:	9d 1d       	adc	r25, r13
     192:	9d 1d       	adc	r25, r13
     194:	9d 1d       	adc	r25, r13
     196:	9d 1d       	adc	r25, r13
     198:	7c 1d       	adc	r23, r12

0000019a <prvIdleTask>:
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = ( TaskHandle_t ) pxCurrentTCB;

        return xReturn;
    }
     19a:	0e 94 18 0b 	call	0x1630	; 0x1630 <prvCheckTasksWaitingTermination>
     19e:	80 91 a9 0d 	lds	r24, 0x0DA9	; 0x800da9 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	cd d4       	rcall	.+2458   	; 0xb42 <vPortYield>
     1a8:	0e 94 ed 15 	call	0x2bda	; 0x2bda <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 e5 14 	call	0x29ca	; 0x29ca <prvProcessTimerOrBlockTask>
     1c6:	0e 94 39 15 	call	0x2a72	; 0x2a72 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	13 e0       	ldi	r17, 0x03	; 3
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ec e7       	ldi	r30, 0x7C	; 124
     1e4:	f8 e4       	ldi	r31, 0x48	; 72
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 38       	cpi	r26, 0x84	; 132
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	2e e0       	ldi	r18, 0x0E	; 14
     1f8:	a4 e8       	ldi	r26, 0x84	; 132
     1fa:	b3 e0       	ldi	r27, 0x03	; 3
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 37       	cpi	r26, 0x7F	; 127
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 ef 16 	call	0x2dde	; 0x2dde <main>
     20a:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <setPackageHandler>:
#include "application.h"



void setPackageHandler()
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <setPackageHandler+0xa>
     21a:	00 d0       	rcall	.+0      	; 0x21c <setPackageHandler+0xc>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	uint16_t data[3];
	for(int i=0;i<3;i++)
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	2c c0       	rjmp	.+88     	; 0x27e <setPackageHandler+0x6e>
	{
		if(xQueueReceive(sensorDataQueue,&data[i],portMAX_DELAY)==pdPASS)
     226:	b8 01       	movw	r22, r16
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	8c 0f       	add	r24, r28
     232:	9d 1f       	adc	r25, r29
     234:	68 0f       	add	r22, r24
     236:	79 1f       	adc	r23, r25
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <sensorDataQueue>
     242:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <sensorDataQueue+0x1>
     246:	5b d7       	rcall	.+3766   	; 0x10fe <xQueueReceive>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	b9 f4       	brne	.+46     	; 0x27a <setPackageHandler+0x6a>
			{
				printf("Parameter : %d\n",data[i]);
     24c:	f8 01       	movw	r30, r16
     24e:	ee 0f       	add	r30, r30
     250:	ff 1f       	adc	r31, r31
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	8c 0f       	add	r24, r28
     258:	9d 1f       	adc	r25, r29
     25a:	e8 0f       	add	r30, r24
     25c:	f9 1f       	adc	r31, r25
     25e:	81 81       	ldd	r24, Z+1	; 0x01
     260:	8f 93       	push	r24
     262:	80 81       	ld	r24, Z
     264:	8f 93       	push	r24
     266:	8f e4       	ldi	r24, 0x4F	; 79
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	9f 93       	push	r25
     26c:	8f 93       	push	r24
     26e:	0e 94 4c 21 	call	0x4298	; 0x4298 <printf>
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0


void setPackageHandler()
{
	uint16_t data[3];
	for(int i=0;i<3;i++)
     27a:	0f 5f       	subi	r16, 0xFF	; 255
     27c:	1f 4f       	sbci	r17, 0xFF	; 255
     27e:	03 30       	cpi	r16, 0x03	; 3
     280:	11 05       	cpc	r17, r1
     282:	8c f2       	brlt	.-94     	; 0x226 <setPackageHandler+0x16>
			{
				printf("Parameter : %d\n",data[i]);
			}
	}
	
	sensorDataPackageHandler_setTemp_value(data[0]);
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <sensorDataPackageHandler_setTemp_value>
	sensorDataPackageHandler_setHumidity_value(data[1]);
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	9c 81       	ldd	r25, Y+4	; 0x04
     290:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sensorDataPackageHandler_setHumidity_value>
	sensorDataPackageHandler_setCO2_value(data[2]);
     294:	8d 81       	ldd	r24, Y+5	; 0x05
     296:	9e 81       	ldd	r25, Y+6	; 0x06
     298:	0e 94 11 16 	call	0x2c22	; 0x2c22 <sensorDataPackageHandler_setCO2_value>
	xQueueReset(sensorDataQueue);
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <sensorDataQueue>
     2a2:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <sensorDataQueue+0x1>
     2a6:	ec d5       	rcall	.+3032   	; 0xe80 <xQueueGenericReset>
	
}
     2a8:	26 96       	adiw	r28, 0x06	; 6
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <ApplicationTask>:
void ApplicationTask(void *pvParameters)
{
	for (;;)
	{
		
		EventBits_t eventBits = xEventGroupWaitBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,portMAX_DELAY);
     2be:	cc 24       	eor	r12, r12
     2c0:	ca 94       	dec	r12
     2c2:	dc 2c       	mov	r13, r12
     2c4:	76 01       	movw	r14, r12
     2c6:	01 e0       	ldi	r16, 0x01	; 1
     2c8:	21 e0       	ldi	r18, 0x01	; 1
     2ca:	43 e0       	ldi	r20, 0x03	; 3
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 91 71 0e 	lds	r24, 0x0E71	; 0x800e71 <dataEventGroup>
     2d6:	90 91 72 0e 	lds	r25, 0x0E72	; 0x800e72 <dataEventGroup+0x1>
     2da:	df d0       	rcall	.+446    	; 0x49a <xEventGroupWaitBits>
		if((eventBits &(BIT_CO2 | BIT_HUMIDITY_TEMPERATURE))==(BIT_CO2|BIT_HUMIDITY_TEMPERATURE))
     2dc:	dc 01       	movw	r26, r24
     2de:	cb 01       	movw	r24, r22
     2e0:	83 70       	andi	r24, 0x03	; 3
     2e2:	99 27       	eor	r25, r25
     2e4:	aa 27       	eor	r26, r26
     2e6:	bb 27       	eor	r27, r27
     2e8:	03 97       	sbiw	r24, 0x03	; 3
     2ea:	a1 05       	cpc	r26, r1
     2ec:	b1 05       	cpc	r27, r1
     2ee:	29 f4       	brne	.+10     	; 0x2fa <ApplicationTask+0x3c>
		{
			printf("ALL DATA COLLECTED\n");
     2f0:	8f e5       	ldi	r24, 0x5F	; 95
     2f2:	92 e0       	ldi	r25, 0x02	; 2
     2f4:	0e 94 5f 21 	call	0x42be	; 0x42be <puts>
			setPackageHandler();
     2f8:	8b df       	rcall	.-234    	; 0x210 <setPackageHandler>
			//vTaskDelay(pdMS_TO_TICKS(1000));
			
		}
		vTaskDelay(pdMS_TO_TICKS(50));
     2fa:	63 e0       	ldi	r22, 0x03	; 3
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <vTaskDelay>
		
	}
     306:	db cf       	rjmp	.-74     	; 0x2be <ApplicationTask>

00000308 <createApplicationTask>:
}

void createApplicationTask()
{
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16

	
	xTaskCreate(
     30e:	e1 2c       	mov	r14, r1
     310:	f1 2c       	mov	r15, r1
     312:	01 e0       	ldi	r16, 0x01	; 1
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 ec       	ldi	r20, 0xC0	; 192
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	62 e7       	ldi	r22, 0x72	; 114
     31e:	72 e0       	ldi	r23, 0x02	; 2
     320:	8f e5       	ldi	r24, 0x5F	; 95
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     328:	0f 91       	pop	r16
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	08 95       	ret

00000330 <myCo2CallBack>:
		vTaskDelay(30);
			
	}
}
void myCo2CallBack(uint16_t ppm)
{
     330:	0f 93       	push	r16
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	1f 92       	push	r1
     338:	1f 92       	push	r1
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	9a 83       	std	Y+2, r25	; 0x02
     340:	89 83       	std	Y+1, r24	; 0x01
		printf("CO2 Value: %d\n",ppm);
     342:	8a 81       	ldd	r24, Y+2	; 0x02
     344:	8f 93       	push	r24
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	8f 93       	push	r24
     34a:	8a e7       	ldi	r24, 0x7A	; 122
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	9f 93       	push	r25
     350:	8f 93       	push	r24
     352:	0e 94 4c 21 	call	0x4298	; 0x4298 <printf>
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	2f ef       	ldi	r18, 0xFF	; 255
     35a:	3f ef       	ldi	r19, 0xFF	; 255
     35c:	a9 01       	movw	r20, r18
     35e:	be 01       	movw	r22, r28
     360:	6f 5f       	subi	r22, 0xFF	; 255
     362:	7f 4f       	sbci	r23, 0xFF	; 255
     364:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <sensorDataQueue>
     368:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <sensorDataQueue+0x1>
     36c:	01 d6       	rcall	.+3074   	; 0xf70 <xQueueGenericSend>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	80 91 71 0e 	lds	r24, 0x0E71	; 0x800e71 <dataEventGroup>
     37a:	90 91 72 0e 	lds	r25, 0x0E72	; 0x800e72 <dataEventGroup+0x1>
     37e:	2d d1       	rcall	.+602    	; 0x5da <xEventGroupSetBits>
		xSemaphoreGive(tempHumSemaphore);
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	a9 01       	movw	r20, r18
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <tempHumSemaphore>
     38e:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <tempHumSemaphore+0x1>
     392:	ee d5       	rcall	.+3036   	; 0xf70 <xQueueGenericSend>
		
		

}
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <mh_z19_initialise>
     3ae:	08 95       	ret

000003b0 <measureCO2>:
	
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     3b0:	0e 94 20 18 	call	0x3040	; 0x3040 <mh_z19_takeMeassuring>
     3b4:	80 93 62 0e 	sts	0x0E62, r24	; 0x800e62 <rc>
	if (rc != MHZ19_OK)
     3b8:	88 23       	and	r24, r24
     3ba:	21 f0       	breq	.+8      	; 0x3c4 <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     3bc:	89 e8       	ldi	r24, 0x89	; 137
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	0c 94 5f 21 	jmp	0x42be	; 0x42be <puts>
     3c4:	08 95       	ret

000003c6 <CO2Task>:
{
	while(1)
	{

//printf("CO2 Task\n");
EventBits_t dataEventBits = xEventGroupWaitBits
     3c6:	cc 24       	eor	r12, r12
     3c8:	ca 94       	dec	r12
     3ca:	dc 2c       	mov	r13, r12
     3cc:	76 01       	movw	r14, r12
     3ce:	01 e0       	ldi	r16, 0x01	; 1
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	42 e0       	ldi	r20, 0x02	; 2
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	80 91 71 0e 	lds	r24, 0x0E71	; 0x800e71 <dataEventGroup>
     3de:	90 91 72 0e 	lds	r25, 0x0E72	; 0x800e72 <dataEventGroup+0x1>
     3e2:	5b d0       	rcall	.+182    	; 0x49a <xEventGroupWaitBits>
(dataEventGroup,BIT_HUMIDITY_TEMPERATURE,pdFALSE,pdTRUE,portMAX_DELAY);


		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
     3e4:	61 ff       	sbrs	r22, 1
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <CO2Task+0x2c>
		{
			printf("Measured\n");
     3e8:	80 ea       	ldi	r24, 0xA0	; 160
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	0e 94 5f 21 	call	0x42be	; 0x42be <puts>
			measureCO2();
     3f0:	df df       	rcall	.-66     	; 0x3b0 <measureCO2>
		
		}
		vTaskDelay(30);
     3f2:	6e e1       	ldi	r22, 0x1E	; 30
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <vTaskDelay>
			
	}
     3fe:	e3 cf       	rjmp	.-58     	; 0x3c6 <CO2Task>

00000400 <createCO2Task>:
		
		

}
void createCO2Task()
{
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
			initializeCO2Driver();
     406:	d0 df       	rcall	.-96     	; 0x3a8 <initializeCO2Driver>
			mh_z19_injectCallBack(myCo2CallBack);
     408:	88 e9       	ldi	r24, 0x98	; 152
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 1b 18 	call	0x3036	; 0x3036 <mh_z19_injectCallBack>
			xTaskCreate(
     410:	e1 2c       	mov	r14, r1
     412:	f1 2c       	mov	r15, r1
     414:	01 e0       	ldi	r16, 0x01	; 1
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 ec       	ldi	r20, 0xC0	; 192
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	69 ea       	ldi	r22, 0xA9	; 169
     420:	72 e0       	ldi	r23, 0x02	; 2
     422:	83 ee       	ldi	r24, 0xE3	; 227
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     432:	0f 93       	push	r16
     434:	01 11       	cpse	r16, r1
     436:	0c c0       	rjmp	.+24     	; 0x450 <prvTestWaitCondition+0x1e>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	82 23       	and	r24, r18
     43e:	93 23       	and	r25, r19
     440:	a4 23       	and	r26, r20
     442:	b5 23       	and	r27, r21
     444:	89 2b       	or	r24, r25
     446:	8a 2b       	or	r24, r26
     448:	8b 2b       	or	r24, r27
     44a:	79 f4       	brne	.+30     	; 0x46a <prvTestWaitCondition+0x38>
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	10 c0       	rjmp	.+32     	; 0x470 <prvTestWaitCondition+0x3e>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	82 23       	and	r24, r18
     456:	93 23       	and	r25, r19
     458:	a4 23       	and	r26, r20
     45a:	b5 23       	and	r27, r21
     45c:	28 17       	cp	r18, r24
     45e:	39 07       	cpc	r19, r25
     460:	4a 07       	cpc	r20, r26
     462:	5b 07       	cpc	r21, r27
     464:	21 f0       	breq	.+8      	; 0x46e <prvTestWaitCondition+0x3c>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	03 c0       	rjmp	.+6      	; 0x470 <prvTestWaitCondition+0x3e>
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	01 c0       	rjmp	.+2      	; 0x470 <prvTestWaitCondition+0x3e>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <xEventGroupCreate>:
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	8f e0       	ldi	r24, 0x0F	; 15
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	af d1       	rcall	.+862    	; 0x7dc <pvPortMalloc>
     47e:	ec 01       	movw	r28, r24
     480:	00 97       	sbiw	r24, 0x00	; 0
     482:	39 f0       	breq	.+14     	; 0x492 <xEventGroupCreate+0x1e>
     484:	fc 01       	movw	r30, r24
     486:	11 92       	st	Z+, r1
     488:	11 92       	st	Z+, r1
     48a:	11 92       	st	Z+, r1
     48c:	11 92       	st	Z+, r1
     48e:	cf 01       	movw	r24, r30
     490:	8a d2       	rcall	.+1300   	; 0x9a6 <vListInitialise>
     492:	ce 01       	movw	r24, r28
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <xEventGroupWaitBits>:
     49a:	2f 92       	push	r2
     49c:	3f 92       	push	r3
     49e:	4f 92       	push	r4
     4a0:	5f 92       	push	r5
     4a2:	6f 92       	push	r6
     4a4:	7f 92       	push	r7
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
     4c0:	4a 01       	movw	r8, r20
     4c2:	5b 01       	movw	r10, r22
     4c4:	62 2e       	mov	r6, r18
     4c6:	70 2e       	mov	r7, r16
     4c8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vTaskSuspendAll>
     4cc:	28 80       	ld	r2, Y
     4ce:	39 80       	ldd	r3, Y+1	; 0x01
     4d0:	4a 80       	ldd	r4, Y+2	; 0x02
     4d2:	5b 80       	ldd	r5, Y+3	; 0x03
     4d4:	a5 01       	movw	r20, r10
     4d6:	94 01       	movw	r18, r8
     4d8:	c2 01       	movw	r24, r4
     4da:	b1 01       	movw	r22, r2
     4dc:	aa df       	rcall	.-172    	; 0x432 <prvTestWaitCondition>
     4de:	88 23       	and	r24, r24
     4e0:	a1 f0       	breq	.+40     	; 0x50a <xEventGroupWaitBits+0x70>
     4e2:	66 20       	and	r6, r6
     4e4:	89 f1       	breq	.+98     	; 0x548 <xEventGroupWaitBits+0xae>
     4e6:	d5 01       	movw	r26, r10
     4e8:	c4 01       	movw	r24, r8
     4ea:	80 95       	com	r24
     4ec:	90 95       	com	r25
     4ee:	a0 95       	com	r26
     4f0:	b0 95       	com	r27
     4f2:	82 21       	and	r24, r2
     4f4:	93 21       	and	r25, r3
     4f6:	a4 21       	and	r26, r4
     4f8:	b5 21       	and	r27, r5
     4fa:	88 83       	st	Y, r24
     4fc:	99 83       	std	Y+1, r25	; 0x01
     4fe:	aa 83       	std	Y+2, r26	; 0x02
     500:	bb 83       	std	Y+3, r27	; 0x03
     502:	c1 2c       	mov	r12, r1
     504:	d1 2c       	mov	r13, r1
     506:	76 01       	movw	r14, r12
     508:	22 c0       	rjmp	.+68     	; 0x54e <xEventGroupWaitBits+0xb4>
     50a:	c1 14       	cp	r12, r1
     50c:	d1 04       	cpc	r13, r1
     50e:	e1 04       	cpc	r14, r1
     510:	f1 04       	cpc	r15, r1
     512:	e9 f0       	breq	.+58     	; 0x54e <xEventGroupWaitBits+0xb4>
     514:	61 10       	cpse	r6, r1
     516:	04 c0       	rjmp	.+8      	; 0x520 <xEventGroupWaitBits+0x86>
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	ba 01       	movw	r22, r20
     51e:	04 c0       	rjmp	.+8      	; 0x528 <xEventGroupWaitBits+0x8e>
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	71 e0       	ldi	r23, 0x01	; 1
     528:	71 10       	cpse	r7, r1
     52a:	74 60       	ori	r23, 0x04	; 4
     52c:	48 29       	or	r20, r8
     52e:	59 29       	or	r21, r9
     530:	6a 29       	or	r22, r10
     532:	7b 29       	or	r23, r11
     534:	97 01       	movw	r18, r14
     536:	86 01       	movw	r16, r12
     538:	ce 01       	movw	r24, r28
     53a:	04 96       	adiw	r24, 0x04	; 4
     53c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <vTaskPlaceOnUnorderedEventList>
     540:	21 2c       	mov	r2, r1
     542:	31 2c       	mov	r3, r1
     544:	21 01       	movw	r4, r2
     546:	03 c0       	rjmp	.+6      	; 0x54e <xEventGroupWaitBits+0xb4>
     548:	c1 2c       	mov	r12, r1
     54a:	d1 2c       	mov	r13, r1
     54c:	76 01       	movw	r14, r12
     54e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <xTaskResumeAll>
     552:	cd 28       	or	r12, r13
     554:	ce 28       	or	r12, r14
     556:	cf 28       	or	r12, r15
     558:	59 f1       	breq	.+86     	; 0x5b0 <xEventGroupWaitBits+0x116>
     55a:	81 11       	cpse	r24, r1
     55c:	01 c0       	rjmp	.+2      	; 0x560 <xEventGroupWaitBits+0xc6>
     55e:	f1 d2       	rcall	.+1506   	; 0xb42 <vPortYield>
     560:	0e 94 b5 12 	call	0x256a	; 0x256a <uxTaskResetEventItemValue>
     564:	6b 01       	movw	r12, r22
     566:	7c 01       	movw	r14, r24
     568:	91 fd       	sbrc	r25, 1
     56a:	1f c0       	rjmp	.+62     	; 0x5aa <xEventGroupWaitBits+0x110>
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	0f 92       	push	r0
     572:	c8 80       	ld	r12, Y
     574:	d9 80       	ldd	r13, Y+1	; 0x01
     576:	ea 80       	ldd	r14, Y+2	; 0x02
     578:	fb 80       	ldd	r15, Y+3	; 0x03
     57a:	07 2d       	mov	r16, r7
     57c:	a5 01       	movw	r20, r10
     57e:	94 01       	movw	r18, r8
     580:	c7 01       	movw	r24, r14
     582:	b6 01       	movw	r22, r12
     584:	56 df       	rcall	.-340    	; 0x432 <prvTestWaitCondition>
     586:	88 23       	and	r24, r24
     588:	71 f0       	breq	.+28     	; 0x5a6 <xEventGroupWaitBits+0x10c>
     58a:	66 20       	and	r6, r6
     58c:	61 f0       	breq	.+24     	; 0x5a6 <xEventGroupWaitBits+0x10c>
     58e:	80 94       	com	r8
     590:	90 94       	com	r9
     592:	a0 94       	com	r10
     594:	b0 94       	com	r11
     596:	8c 20       	and	r8, r12
     598:	9d 20       	and	r9, r13
     59a:	ae 20       	and	r10, r14
     59c:	bf 20       	and	r11, r15
     59e:	88 82       	st	Y, r8
     5a0:	99 82       	std	Y+1, r9	; 0x01
     5a2:	aa 82       	std	Y+2, r10	; 0x02
     5a4:	bb 82       	std	Y+3, r11	; 0x03
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	16 01       	movw	r2, r12
     5ac:	27 01       	movw	r4, r14
     5ae:	55 24       	eor	r5, r5
     5b0:	c2 01       	movw	r24, r4
     5b2:	b1 01       	movw	r22, r2
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	bf 90       	pop	r11
     5c6:	af 90       	pop	r10
     5c8:	9f 90       	pop	r9
     5ca:	8f 90       	pop	r8
     5cc:	7f 90       	pop	r7
     5ce:	6f 90       	pop	r6
     5d0:	5f 90       	pop	r5
     5d2:	4f 90       	pop	r4
     5d4:	3f 90       	pop	r3
     5d6:	2f 90       	pop	r2
     5d8:	08 95       	ret

000005da <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     5da:	4f 92       	push	r4
     5dc:	5f 92       	push	r5
     5de:	6f 92       	push	r6
     5e0:	7f 92       	push	r7
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
     5f8:	6a 01       	movw	r12, r20
     5fa:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5fc:	8c 01       	movw	r16, r24
     5fe:	09 5f       	subi	r16, 0xF9	; 249
     600:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     602:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     606:	eb 85       	ldd	r30, Y+11	; 0x0b
     608:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     60a:	88 81       	ld	r24, Y
     60c:	99 81       	ldd	r25, Y+1	; 0x01
     60e:	aa 81       	ldd	r26, Y+2	; 0x02
     610:	bb 81       	ldd	r27, Y+3	; 0x03
     612:	c8 2a       	or	r12, r24
     614:	d9 2a       	or	r13, r25
     616:	ea 2a       	or	r14, r26
     618:	fb 2a       	or	r15, r27
     61a:	c8 82       	st	Y, r12
     61c:	d9 82       	std	Y+1, r13	; 0x01
     61e:	ea 82       	std	Y+2, r14	; 0x02
     620:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     622:	c1 2c       	mov	r12, r1
     624:	d1 2c       	mov	r13, r1
     626:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     628:	3d c0       	rjmp	.+122    	; 0x6a4 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     62a:	a4 80       	ldd	r10, Z+4	; 0x04
     62c:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     62e:	80 81       	ld	r24, Z
     630:	91 81       	ldd	r25, Z+1	; 0x01
     632:	a2 81       	ldd	r26, Z+2	; 0x02
     634:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     636:	ac 01       	movw	r20, r24
     638:	bd 01       	movw	r22, r26
     63a:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     63c:	b2 fd       	sbrc	r27, 2
     63e:	0e c0       	rjmp	.+28     	; 0x65c <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     640:	48 80       	ld	r4, Y
     642:	59 80       	ldd	r5, Y+1	; 0x01
     644:	6a 80       	ldd	r6, Y+2	; 0x02
     646:	7b 80       	ldd	r7, Y+3	; 0x03
     648:	44 22       	and	r4, r20
     64a:	55 22       	and	r5, r21
     64c:	66 22       	and	r6, r22
     64e:	77 22       	and	r7, r23
     650:	45 28       	or	r4, r5
     652:	46 28       	or	r4, r6
     654:	47 28       	or	r4, r7
     656:	89 f4       	brne	.+34     	; 0x67a <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	12 c0       	rjmp	.+36     	; 0x680 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     65c:	48 80       	ld	r4, Y
     65e:	59 80       	ldd	r5, Y+1	; 0x01
     660:	6a 80       	ldd	r6, Y+2	; 0x02
     662:	7b 80       	ldd	r7, Y+3	; 0x03
     664:	44 22       	and	r4, r20
     666:	55 22       	and	r5, r21
     668:	66 22       	and	r6, r22
     66a:	77 22       	and	r7, r23
     66c:	44 15       	cp	r20, r4
     66e:	55 05       	cpc	r21, r5
     670:	66 05       	cpc	r22, r6
     672:	77 05       	cpc	r23, r7
     674:	21 f0       	breq	.+8      	; 0x67e <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	03 c0       	rjmp	.+6      	; 0x680 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	01 c0       	rjmp	.+2      	; 0x680 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     67e:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     680:	22 23       	and	r18, r18
     682:	71 f0       	breq	.+28     	; 0x6a0 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     684:	b0 ff       	sbrs	r27, 0
     686:	04 c0       	rjmp	.+8      	; 0x690 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     688:	c4 2a       	or	r12, r20
     68a:	d5 2a       	or	r13, r21
     68c:	e6 2a       	or	r14, r22
     68e:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     690:	48 81       	ld	r20, Y
     692:	59 81       	ldd	r21, Y+1	; 0x01
     694:	6a 81       	ldd	r22, Y+2	; 0x02
     696:	7b 81       	ldd	r23, Y+3	; 0x03
     698:	72 60       	ori	r23, 0x02	; 2
     69a:	cf 01       	movw	r24, r30
     69c:	0e 94 49 10 	call	0x2092	; 0x2092 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6a0:	ea 2d       	mov	r30, r10
     6a2:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6a4:	e0 17       	cp	r30, r16
     6a6:	f1 07       	cpc	r31, r17
     6a8:	09 f0       	breq	.+2      	; 0x6ac <xEventGroupSetBits+0xd2>
     6aa:	bf cf       	rjmp	.-130    	; 0x62a <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     6ac:	c0 94       	com	r12
     6ae:	d0 94       	com	r13
     6b0:	e0 94       	com	r14
     6b2:	f0 94       	com	r15
     6b4:	88 81       	ld	r24, Y
     6b6:	99 81       	ldd	r25, Y+1	; 0x01
     6b8:	aa 81       	ldd	r26, Y+2	; 0x02
     6ba:	bb 81       	ldd	r27, Y+3	; 0x03
     6bc:	c8 22       	and	r12, r24
     6be:	d9 22       	and	r13, r25
     6c0:	ea 22       	and	r14, r26
     6c2:	fb 22       	and	r15, r27
     6c4:	c8 82       	st	Y, r12
     6c6:	d9 82       	std	Y+1, r13	; 0x01
     6c8:	ea 82       	std	Y+2, r14	; 0x02
     6ca:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6cc:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6d0:	68 81       	ld	r22, Y
     6d2:	79 81       	ldd	r23, Y+1	; 0x01
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	9b 81       	ldd	r25, Y+3	; 0x03
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	bf 90       	pop	r11
     6ea:	af 90       	pop	r10
     6ec:	7f 90       	pop	r7
     6ee:	6f 90       	pop	r6
     6f0:	5f 90       	pop	r5
     6f2:	4f 90       	pop	r4
     6f4:	08 95       	ret

000006f6 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     6f6:	e0 e9       	ldi	r30, 0x90	; 144
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	a4 e9       	ldi	r26, 0x94	; 148
     6fc:	b3 e0       	ldi	r27, 0x03	; 3
     6fe:	b1 83       	std	Z+1, r27	; 0x01
     700:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     702:	13 82       	std	Z+3, r1	; 0x03
     704:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     706:	e4 e5       	ldi	r30, 0x54	; 84
     708:	fd e0       	ldi	r31, 0x0D	; 13
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     70a:	f0 93 8f 03 	sts	0x038F, r31	; 0x80038f <pxEnd+0x1>
     70e:	e0 93 8e 03 	sts	0x038E, r30	; 0x80038e <pxEnd>
    pxEnd->xBlockSize = 0;
     712:	13 82       	std	Z+3, r1	; 0x03
     714:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     716:	11 82       	std	Z+1, r1	; 0x01
     718:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     71a:	80 ec       	ldi	r24, 0xC0	; 192
     71c:	99 e0       	ldi	r25, 0x09	; 9
     71e:	13 96       	adiw	r26, 0x03	; 3
     720:	9c 93       	st	X, r25
     722:	8e 93       	st	-X, r24
     724:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     726:	ed 93       	st	X+, r30
     728:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     72a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <xMinimumEverFreeBytesRemaining+0x1>
     72e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     732:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <xFreeBytesRemaining+0x1>
     736:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e8       	ldi	r25, 0x80	; 128
     73e:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <__data_end+0x1>
     742:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <__data_end>
     746:	08 95       	ret

00000748 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     74e:	a0 e9       	ldi	r26, 0x90	; 144
     750:	b3 e0       	ldi	r27, 0x03	; 3
     752:	01 c0       	rjmp	.+2      	; 0x756 <prvInsertBlockIntoFreeList+0xe>
     754:	df 01       	movw	r26, r30
     756:	ed 91       	ld	r30, X+
     758:	fc 91       	ld	r31, X
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	ec 17       	cp	r30, r28
     75e:	fd 07       	cpc	r31, r29
     760:	c8 f3       	brcs	.-14     	; 0x754 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     762:	12 96       	adiw	r26, 0x02	; 2
     764:	8d 91       	ld	r24, X+
     766:	9c 91       	ld	r25, X
     768:	13 97       	sbiw	r26, 0x03	; 3
     76a:	9d 01       	movw	r18, r26
     76c:	28 0f       	add	r18, r24
     76e:	39 1f       	adc	r19, r25
     770:	c2 17       	cp	r28, r18
     772:	d3 07       	cpc	r29, r19
     774:	49 f4       	brne	.+18     	; 0x788 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     776:	2a 81       	ldd	r18, Y+2	; 0x02
     778:	3b 81       	ldd	r19, Y+3	; 0x03
     77a:	82 0f       	add	r24, r18
     77c:	93 1f       	adc	r25, r19
     77e:	13 96       	adiw	r26, 0x03	; 3
     780:	9c 93       	st	X, r25
     782:	8e 93       	st	-X, r24
     784:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     786:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	9b 81       	ldd	r25, Y+3	; 0x03
     78c:	9e 01       	movw	r18, r28
     78e:	28 0f       	add	r18, r24
     790:	39 1f       	adc	r19, r25
     792:	e2 17       	cp	r30, r18
     794:	f3 07       	cpc	r31, r19
     796:	c1 f4       	brne	.+48     	; 0x7c8 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     798:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <pxEnd>
     79c:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <pxEnd+0x1>
     7a0:	e2 17       	cp	r30, r18
     7a2:	f3 07       	cpc	r31, r19
     7a4:	71 f0       	breq	.+28     	; 0x7c2 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7a6:	22 81       	ldd	r18, Z+2	; 0x02
     7a8:	33 81       	ldd	r19, Z+3	; 0x03
     7aa:	82 0f       	add	r24, r18
     7ac:	93 1f       	adc	r25, r19
     7ae:	9b 83       	std	Y+3, r25	; 0x03
     7b0:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     7b2:	ed 91       	ld	r30, X+
     7b4:	fc 91       	ld	r31, X
     7b6:	11 97       	sbiw	r26, 0x01	; 1
     7b8:	80 81       	ld	r24, Z
     7ba:	91 81       	ldd	r25, Z+1	; 0x01
     7bc:	99 83       	std	Y+1, r25	; 0x01
     7be:	88 83       	st	Y, r24
     7c0:	05 c0       	rjmp	.+10     	; 0x7cc <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7c2:	39 83       	std	Y+1, r19	; 0x01
     7c4:	28 83       	st	Y, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7c8:	f9 83       	std	Y+1, r31	; 0x01
     7ca:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7cc:	ca 17       	cp	r28, r26
     7ce:	db 07       	cpc	r29, r27
     7d0:	11 f0       	breq	.+4      	; 0x7d6 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7d2:	cd 93       	st	X+, r28
     7d4:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     7ea:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     7ee:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <pxEnd>
     7f2:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <pxEnd+0x1>
     7f6:	89 2b       	or	r24, r25
     7f8:	09 f4       	brne	.+2      	; 0x7fc <pvPortMalloc+0x20>
        {
            prvHeapInit();
     7fa:	7d df       	rcall	.-262    	; 0x6f6 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     7fc:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <__data_end>
     800:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <__data_end+0x1>
     804:	80 23       	and	r24, r16
     806:	91 23       	and	r25, r17
     808:	89 2b       	or	r24, r25
     80a:	09 f0       	breq	.+2      	; 0x80e <pvPortMalloc+0x32>
     80c:	76 c0       	rjmp	.+236    	; 0x8fa <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     80e:	01 15       	cp	r16, r1
     810:	11 05       	cpc	r17, r1
     812:	49 f0       	breq	.+18     	; 0x826 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     814:	c8 01       	movw	r24, r16
     816:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     818:	08 17       	cp	r16, r24
     81a:	19 07       	cpc	r17, r25
     81c:	18 f0       	brcs	.+6      	; 0x824 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     81e:	00 e0       	ldi	r16, 0x00	; 0
     820:	10 e0       	ldi	r17, 0x00	; 0
     822:	01 c0       	rjmp	.+2      	; 0x826 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     824:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     826:	01 15       	cp	r16, r1
     828:	11 05       	cpc	r17, r1
     82a:	09 f4       	brne	.+2      	; 0x82e <pvPortMalloc+0x52>
     82c:	69 c0       	rjmp	.+210    	; 0x900 <pvPortMalloc+0x124>
     82e:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <xFreeBytesRemaining>
     832:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <xFreeBytesRemaining+0x1>
     836:	80 17       	cp	r24, r16
     838:	91 07       	cpc	r25, r17
     83a:	08 f4       	brcc	.+2      	; 0x83e <pvPortMalloc+0x62>
     83c:	64 c0       	rjmp	.+200    	; 0x906 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     83e:	c0 91 90 03 	lds	r28, 0x0390	; 0x800390 <xStart>
     842:	d0 91 91 03 	lds	r29, 0x0391	; 0x800391 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     846:	e0 e9       	ldi	r30, 0x90	; 144
     848:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     84a:	02 c0       	rjmp	.+4      	; 0x850 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     84c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     84e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     850:	8a 81       	ldd	r24, Y+2	; 0x02
     852:	9b 81       	ldd	r25, Y+3	; 0x03
     854:	80 17       	cp	r24, r16
     856:	91 07       	cpc	r25, r17
     858:	20 f4       	brcc	.+8      	; 0x862 <pvPortMalloc+0x86>
     85a:	88 81       	ld	r24, Y
     85c:	99 81       	ldd	r25, Y+1	; 0x01
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	a9 f7       	brne	.-22     	; 0x84c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     862:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <pxEnd>
     866:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <pxEnd+0x1>
     86a:	c8 17       	cp	r28, r24
     86c:	d9 07       	cpc	r29, r25
     86e:	09 f4       	brne	.+2      	; 0x872 <pvPortMalloc+0x96>
     870:	4d c0       	rjmp	.+154    	; 0x90c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     872:	e0 80       	ld	r14, Z
     874:	f1 80       	ldd	r15, Z+1	; 0x01
     876:	84 e0       	ldi	r24, 0x04	; 4
     878:	e8 0e       	add	r14, r24
     87a:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     87c:	88 81       	ld	r24, Y
     87e:	99 81       	ldd	r25, Y+1	; 0x01
     880:	91 83       	std	Z+1, r25	; 0x01
     882:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     884:	2a 81       	ldd	r18, Y+2	; 0x02
     886:	3b 81       	ldd	r19, Y+3	; 0x03
     888:	20 1b       	sub	r18, r16
     88a:	31 0b       	sbc	r19, r17
     88c:	29 30       	cpi	r18, 0x09	; 9
     88e:	31 05       	cpc	r19, r1
     890:	48 f0       	brcs	.+18     	; 0x8a4 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     892:	ce 01       	movw	r24, r28
     894:	80 0f       	add	r24, r16
     896:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     898:	fc 01       	movw	r30, r24
     89a:	33 83       	std	Z+3, r19	; 0x03
     89c:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     89e:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     8a0:	0a 83       	std	Y+2, r16	; 0x02
     8a2:	52 df       	rcall	.-348    	; 0x748 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     8a4:	2a 81       	ldd	r18, Y+2	; 0x02
     8a6:	3b 81       	ldd	r19, Y+3	; 0x03
     8a8:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <xFreeBytesRemaining>
     8ac:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <xFreeBytesRemaining+0x1>
     8b0:	82 1b       	sub	r24, r18
     8b2:	93 0b       	sbc	r25, r19
     8b4:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <xFreeBytesRemaining+0x1>
     8b8:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     8bc:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <xMinimumEverFreeBytesRemaining>
     8c0:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <xMinimumEverFreeBytesRemaining+0x1>
     8c4:	84 17       	cp	r24, r20
     8c6:	95 07       	cpc	r25, r21
     8c8:	20 f4       	brcc	.+8      	; 0x8d2 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8ca:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <xMinimumEverFreeBytesRemaining+0x1>
     8ce:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8d2:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <__data_end>
     8d6:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <__data_end+0x1>
     8da:	28 2b       	or	r18, r24
     8dc:	39 2b       	or	r19, r25
     8de:	3b 83       	std	Y+3, r19	; 0x03
     8e0:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     8e2:	19 82       	std	Y+1, r1	; 0x01
     8e4:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     8e6:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <xNumberOfSuccessfulAllocations>
     8ea:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <xNumberOfSuccessfulAllocations+0x1>
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <xNumberOfSuccessfulAllocations+0x1>
     8f4:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <xNumberOfSuccessfulAllocations>
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     8fa:	e1 2c       	mov	r14, r1
     8fc:	f1 2c       	mov	r15, r1
     8fe:	08 c0       	rjmp	.+16     	; 0x910 <pvPortMalloc+0x134>
     900:	e1 2c       	mov	r14, r1
     902:	f1 2c       	mov	r15, r1
     904:	05 c0       	rjmp	.+10     	; 0x910 <pvPortMalloc+0x134>
     906:	e1 2c       	mov	r14, r1
     908:	f1 2c       	mov	r15, r1
     90a:	02 c0       	rjmp	.+4      	; 0x910 <pvPortMalloc+0x134>
     90c:	e1 2c       	mov	r14, r1
     90e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     910:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     914:	e1 14       	cp	r14, r1
     916:	f1 04       	cpc	r15, r1
     918:	11 f4       	brne	.+4      	; 0x91e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     91a:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     91e:	c7 01       	movw	r24, r14
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	08 95       	ret

0000092e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	89 f1       	breq	.+98     	; 0x99c <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     93a:	ec 01       	movw	r28, r24
     93c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     93e:	4a 81       	ldd	r20, Y+2	; 0x02
     940:	5b 81       	ldd	r21, Y+3	; 0x03
     942:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <__data_end>
     946:	30 91 85 03 	lds	r19, 0x0385	; 0x800385 <__data_end+0x1>
     94a:	ba 01       	movw	r22, r20
     94c:	62 23       	and	r22, r18
     94e:	73 23       	and	r23, r19
     950:	67 2b       	or	r22, r23
     952:	21 f1       	breq	.+72     	; 0x99c <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     954:	68 81       	ld	r22, Y
     956:	79 81       	ldd	r23, Y+1	; 0x01
     958:	67 2b       	or	r22, r23
     95a:	01 f5       	brne	.+64     	; 0x99c <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     95c:	20 95       	com	r18
     95e:	30 95       	com	r19
     960:	24 23       	and	r18, r20
     962:	35 23       	and	r19, r21
     964:	3b 83       	std	Y+3, r19	; 0x03
     966:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     968:	a7 d7       	rcall	.+3918   	; 0x18b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	9b 81       	ldd	r25, Y+3	; 0x03
     96e:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <xFreeBytesRemaining>
     972:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <xFreeBytesRemaining+0x1>
     976:	82 0f       	add	r24, r18
     978:	93 1f       	adc	r25, r19
     97a:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <xFreeBytesRemaining+0x1>
     97e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     982:	ce 01       	movw	r24, r28
     984:	e1 de       	rcall	.-574    	; 0x748 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     986:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <xNumberOfSuccessfulFrees>
     98a:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <xNumberOfSuccessfulFrees+0x1>
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <xNumberOfSuccessfulFrees+0x1>
     994:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     998:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	08 95       	ret

000009a6 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9a6:	fc 01       	movw	r30, r24
     9a8:	03 96       	adiw	r24, 0x03	; 3
     9aa:	92 83       	std	Z+2, r25	; 0x02
     9ac:	81 83       	std	Z+1, r24	; 0x01
     9ae:	4f ef       	ldi	r20, 0xFF	; 255
     9b0:	5f ef       	ldi	r21, 0xFF	; 255
     9b2:	ba 01       	movw	r22, r20
     9b4:	43 83       	std	Z+3, r20	; 0x03
     9b6:	54 83       	std	Z+4, r21	; 0x04
     9b8:	65 83       	std	Z+5, r22	; 0x05
     9ba:	76 83       	std	Z+6, r23	; 0x06
     9bc:	90 87       	std	Z+8, r25	; 0x08
     9be:	87 83       	std	Z+7, r24	; 0x07
     9c0:	92 87       	std	Z+10, r25	; 0x0a
     9c2:	81 87       	std	Z+9, r24	; 0x09
     9c4:	10 82       	st	Z, r1
     9c6:	08 95       	ret

000009c8 <vListInitialiseItem>:
     9c8:	fc 01       	movw	r30, r24
     9ca:	13 86       	std	Z+11, r1	; 0x0b
     9cc:	12 86       	std	Z+10, r1	; 0x0a
     9ce:	08 95       	ret

000009d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9da:	08 81       	ld	r16, Y
     9dc:	19 81       	ldd	r17, Y+1	; 0x01
     9de:	2a 81       	ldd	r18, Y+2	; 0x02
     9e0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9e2:	0f 3f       	cpi	r16, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	14 07       	cpc	r17, r20
     9e8:	24 07       	cpc	r18, r20
     9ea:	34 07       	cpc	r19, r20
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9ee:	fc 01       	movw	r30, r24
     9f0:	a1 85       	ldd	r26, Z+9	; 0x09
     9f2:	b2 85       	ldd	r27, Z+10	; 0x0a
     9f4:	11 c0       	rjmp	.+34     	; 0xa18 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9f6:	dc 01       	movw	r26, r24
     9f8:	13 96       	adiw	r26, 0x03	; 3
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <vListInsert+0x2e>
     9fc:	df 01       	movw	r26, r30
     9fe:	14 96       	adiw	r26, 0x04	; 4
     a00:	ed 91       	ld	r30, X+
     a02:	fc 91       	ld	r31, X
     a04:	15 97       	sbiw	r26, 0x05	; 5
     a06:	40 81       	ld	r20, Z
     a08:	51 81       	ldd	r21, Z+1	; 0x01
     a0a:	62 81       	ldd	r22, Z+2	; 0x02
     a0c:	73 81       	ldd	r23, Z+3	; 0x03
     a0e:	04 17       	cp	r16, r20
     a10:	15 07       	cpc	r17, r21
     a12:	26 07       	cpc	r18, r22
     a14:	37 07       	cpc	r19, r23
     a16:	90 f7       	brcc	.-28     	; 0x9fc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a18:	14 96       	adiw	r26, 0x04	; 4
     a1a:	ed 91       	ld	r30, X+
     a1c:	fc 91       	ld	r31, X
     a1e:	15 97       	sbiw	r26, 0x05	; 5
     a20:	fd 83       	std	Y+5, r31	; 0x05
     a22:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a24:	d7 83       	std	Z+7, r29	; 0x07
     a26:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a28:	bf 83       	std	Y+7, r27	; 0x07
     a2a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a2c:	15 96       	adiw	r26, 0x05	; 5
     a2e:	dc 93       	st	X, r29
     a30:	ce 93       	st	-X, r28
     a32:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a34:	9b 87       	std	Y+11, r25	; 0x0b
     a36:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a38:	fc 01       	movw	r30, r24
     a3a:	20 81       	ld	r18, Z
     a3c:	2f 5f       	subi	r18, 0xFF	; 255
     a3e:	20 83       	st	Z, r18
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a50:	a2 85       	ldd	r26, Z+10	; 0x0a
     a52:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a54:	c4 81       	ldd	r28, Z+4	; 0x04
     a56:	d5 81       	ldd	r29, Z+5	; 0x05
     a58:	86 81       	ldd	r24, Z+6	; 0x06
     a5a:	97 81       	ldd	r25, Z+7	; 0x07
     a5c:	9f 83       	std	Y+7, r25	; 0x07
     a5e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a60:	c6 81       	ldd	r28, Z+6	; 0x06
     a62:	d7 81       	ldd	r29, Z+7	; 0x07
     a64:	84 81       	ldd	r24, Z+4	; 0x04
     a66:	95 81       	ldd	r25, Z+5	; 0x05
     a68:	9d 83       	std	Y+5, r25	; 0x05
     a6a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a6c:	11 96       	adiw	r26, 0x01	; 1
     a6e:	8d 91       	ld	r24, X+
     a70:	9c 91       	ld	r25, X
     a72:	12 97       	sbiw	r26, 0x02	; 2
     a74:	e8 17       	cp	r30, r24
     a76:	f9 07       	cpc	r31, r25
     a78:	31 f4       	brne	.+12     	; 0xa86 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a7a:	86 81       	ldd	r24, Z+6	; 0x06
     a7c:	97 81       	ldd	r25, Z+7	; 0x07
     a7e:	12 96       	adiw	r26, 0x02	; 2
     a80:	9c 93       	st	X, r25
     a82:	8e 93       	st	-X, r24
     a84:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a86:	13 86       	std	Z+11, r1	; 0x0b
     a88:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a8a:	8c 91       	ld	r24, X
     a8c:	81 50       	subi	r24, 0x01	; 1
     a8e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a90:	8c 91       	ld	r24, X
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     a98:	a8 95       	wdr
     a9a:	90 ec       	ldi	r25, 0xC0	; 192
     a9c:	88 e1       	ldi	r24, 0x18	; 24
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	a8 95       	wdr
     aa4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     aae:	08 95       	ret

00000ab0 <pxPortInitialiseStack>:
     ab0:	fc 01       	movw	r30, r24
     ab2:	60 83       	st	Z, r22
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	70 83       	st	Z, r23
     ab8:	31 97       	sbiw	r30, 0x01	; 1
     aba:	10 82       	st	Z, r1
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	10 82       	st	Z, r1
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	20 e8       	ldi	r18, 0x80	; 128
     ac4:	20 83       	st	Z, r18
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	10 82       	st	Z, r1
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	10 82       	st	Z, r1
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	10 82       	st	Z, r1
     ad2:	77 97       	sbiw	r30, 0x17	; 23
     ad4:	40 83       	st	Z, r20
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	50 83       	st	Z, r21
     ada:	86 97       	sbiw	r24, 0x26	; 38
     adc:	08 95       	ret

00000ade <xPortStartScheduler>:
     ade:	dc df       	rcall	.-72     	; 0xa98 <prvSetupTimerInterrupt>
     ae0:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
     ae4:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
     ae8:	cd 91       	ld	r28, X+
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	dd 91       	ld	r29, X+
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	bf 90       	pop	r11
     b1a:	af 90       	pop	r10
     b1c:	9f 90       	pop	r9
     b1e:	8f 90       	pop	r8
     b20:	7f 90       	pop	r7
     b22:	6f 90       	pop	r6
     b24:	5f 90       	pop	r5
     b26:	4f 90       	pop	r4
     b28:	3f 90       	pop	r3
     b2a:	2f 90       	pop	r2
     b2c:	1f 90       	pop	r1
     b2e:	0f 90       	pop	r0
     b30:	0c be       	out	0x3c, r0	; 60
     b32:	0f 90       	pop	r0
     b34:	0b be       	out	0x3b, r0	; 59
     b36:	0f 90       	pop	r0
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	0f 90       	pop	r0
     b3c:	08 95       	ret
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	08 95       	ret

00000b42 <vPortYield>:
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	0f 92       	push	r0
     b4a:	0b b6       	in	r0, 0x3b	; 59
     b4c:	0f 92       	push	r0
     b4e:	0c b6       	in	r0, 0x3c	; 60
     b50:	0f 92       	push	r0
     b52:	1f 92       	push	r1
     b54:	11 24       	eor	r1, r1
     b56:	2f 92       	push	r2
     b58:	3f 92       	push	r3
     b5a:	4f 92       	push	r4
     b5c:	5f 92       	push	r5
     b5e:	6f 92       	push	r6
     b60:	7f 92       	push	r7
     b62:	8f 92       	push	r8
     b64:	9f 92       	push	r9
     b66:	af 92       	push	r10
     b68:	bf 92       	push	r11
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	2f 93       	push	r18
     b78:	3f 93       	push	r19
     b7a:	4f 93       	push	r20
     b7c:	5f 93       	push	r21
     b7e:	6f 93       	push	r22
     b80:	7f 93       	push	r23
     b82:	8f 93       	push	r24
     b84:	9f 93       	push	r25
     b86:	af 93       	push	r26
     b88:	bf 93       	push	r27
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	ef 93       	push	r30
     b90:	ff 93       	push	r31
     b92:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
     b96:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
     b9a:	0d b6       	in	r0, 0x3d	; 61
     b9c:	0d 92       	st	X+, r0
     b9e:	0e b6       	in	r0, 0x3e	; 62
     ba0:	0d 92       	st	X+, r0
     ba2:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <vTaskSwitchContext>
     ba6:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
     baa:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
     bae:	cd 91       	ld	r28, X+
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	dd 91       	ld	r29, X+
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	ff 91       	pop	r31
     bb8:	ef 91       	pop	r30
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	bf 91       	pop	r27
     bc0:	af 91       	pop	r26
     bc2:	9f 91       	pop	r25
     bc4:	8f 91       	pop	r24
     bc6:	7f 91       	pop	r23
     bc8:	6f 91       	pop	r22
     bca:	5f 91       	pop	r21
     bcc:	4f 91       	pop	r20
     bce:	3f 91       	pop	r19
     bd0:	2f 91       	pop	r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	bf 90       	pop	r11
     be0:	af 90       	pop	r10
     be2:	9f 90       	pop	r9
     be4:	8f 90       	pop	r8
     be6:	7f 90       	pop	r7
     be8:	6f 90       	pop	r6
     bea:	5f 90       	pop	r5
     bec:	4f 90       	pop	r4
     bee:	3f 90       	pop	r3
     bf0:	2f 90       	pop	r2
     bf2:	1f 90       	pop	r1
     bf4:	0f 90       	pop	r0
     bf6:	0c be       	out	0x3c, r0	; 60
     bf8:	0f 90       	pop	r0
     bfa:	0b be       	out	0x3b, r0	; 59
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	08 95       	ret

00000c04 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	0f 92       	push	r0
     c0c:	0b b6       	in	r0, 0x3b	; 59
     c0e:	0f 92       	push	r0
     c10:	0c b6       	in	r0, 0x3c	; 60
     c12:	0f 92       	push	r0
     c14:	1f 92       	push	r1
     c16:	11 24       	eor	r1, r1
     c18:	2f 92       	push	r2
     c1a:	3f 92       	push	r3
     c1c:	4f 92       	push	r4
     c1e:	5f 92       	push	r5
     c20:	6f 92       	push	r6
     c22:	7f 92       	push	r7
     c24:	8f 92       	push	r8
     c26:	9f 92       	push	r9
     c28:	af 92       	push	r10
     c2a:	bf 92       	push	r11
     c2c:	cf 92       	push	r12
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ef 93       	push	r30
     c52:	ff 93       	push	r31
     c54:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
     c58:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
     c5c:	0d b6       	in	r0, 0x3d	; 61
     c5e:	0d 92       	st	X+, r0
     c60:	0e b6       	in	r0, 0x3e	; 62
     c62:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c64:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c66:	3c d6       	rcall	.+3192   	; 0x18e0 <xTaskIncrementTick>
     c68:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c6a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c6e:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
     c72:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
     c76:	cd 91       	ld	r28, X+
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	dd 91       	ld	r29, X+
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	9f 90       	pop	r9
     cac:	8f 90       	pop	r8
     cae:	7f 90       	pop	r7
     cb0:	6f 90       	pop	r6
     cb2:	5f 90       	pop	r5
     cb4:	4f 90       	pop	r4
     cb6:	3f 90       	pop	r3
     cb8:	2f 90       	pop	r2
     cba:	1f 90       	pop	r1
     cbc:	0f 90       	pop	r0
     cbe:	0c be       	out	0x3c, r0	; 60
     cc0:	0f 90       	pop	r0
     cc2:	0b be       	out	0x3b, r0	; 59
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     cca:	08 95       	ret

00000ccc <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     ccc:	9b df       	rcall	.-202    	; 0xc04 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cce:	18 95       	reti

00000cd0 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cd0:	dc 01       	movw	r26, r24
     cd2:	53 96       	adiw	r26, 0x13	; 19
     cd4:	2c 91       	ld	r18, X
     cd6:	53 97       	sbiw	r26, 0x13	; 19
     cd8:	22 23       	and	r18, r18
     cda:	41 f0       	breq	.+16     	; 0xcec <prvGetDisinheritPriorityAfterTimeout+0x1c>
     cdc:	5a 96       	adiw	r26, 0x1a	; 26
     cde:	ed 91       	ld	r30, X+
     ce0:	fc 91       	ld	r31, X
     ce2:	5b 97       	sbiw	r26, 0x1b	; 27
     ce4:	90 81       	ld	r25, Z
     ce6:	8a e0       	ldi	r24, 0x0A	; 10
     ce8:	89 1b       	sub	r24, r25
     cea:	08 95       	ret
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 95       	ret

00000cf0 <prvIsQueueEmpty>:
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	0f 92       	push	r0
     cf6:	fc 01       	movw	r30, r24
     cf8:	86 8d       	ldd	r24, Z+30	; 0x1e
     cfa:	81 11       	cpse	r24, r1
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <prvIsQueueEmpty+0x12>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <prvIsQueueEmpty+0x14>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	08 95       	ret

00000d0a <prvIsQueueFull>:
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	0f 92       	push	r0
     d10:	fc 01       	movw	r30, r24
     d12:	26 8d       	ldd	r18, Z+30	; 0x1e
     d14:	87 8d       	ldd	r24, Z+31	; 0x1f
     d16:	28 13       	cpse	r18, r24
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <prvIsQueueFull+0x14>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <prvIsQueueFull+0x16>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	08 95       	ret

00000d26 <prvCopyDataToQueue>:
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ec 01       	movw	r28, r24
     d30:	04 2f       	mov	r16, r20
     d32:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d34:	48 a1       	ldd	r20, Y+32	; 0x20
     d36:	41 11       	cpse	r20, r1
     d38:	0c c0       	rjmp	.+24     	; 0xd52 <prvCopyDataToQueue+0x2c>
     d3a:	88 81       	ld	r24, Y
     d3c:	99 81       	ldd	r25, Y+1	; 0x01
     d3e:	89 2b       	or	r24, r25
     d40:	09 f0       	breq	.+2      	; 0xd44 <prvCopyDataToQueue+0x1e>
     d42:	42 c0       	rjmp	.+132    	; 0xdc8 <prvCopyDataToQueue+0xa2>
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	9d 81       	ldd	r25, Y+5	; 0x05
     d48:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <xTaskPriorityDisinherit>
     d4c:	1d 82       	std	Y+5, r1	; 0x05
     d4e:	1c 82       	std	Y+4, r1	; 0x04
     d50:	42 c0       	rjmp	.+132    	; 0xdd6 <prvCopyDataToQueue+0xb0>
     d52:	01 11       	cpse	r16, r1
     d54:	17 c0       	rjmp	.+46     	; 0xd84 <prvCopyDataToQueue+0x5e>
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	9b 81       	ldd	r25, Y+3	; 0x03
     d5c:	0e 94 3c 21 	call	0x4278	; 0x4278 <memcpy>
     d60:	28 a1       	ldd	r18, Y+32	; 0x20
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	9b 81       	ldd	r25, Y+3	; 0x03
     d66:	82 0f       	add	r24, r18
     d68:	91 1d       	adc	r25, r1
     d6a:	9b 83       	std	Y+3, r25	; 0x03
     d6c:	8a 83       	std	Y+2, r24	; 0x02
     d6e:	2c 81       	ldd	r18, Y+4	; 0x04
     d70:	3d 81       	ldd	r19, Y+5	; 0x05
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	50 f1       	brcs	.+84     	; 0xdcc <prvCopyDataToQueue+0xa6>
     d78:	88 81       	ld	r24, Y
     d7a:	99 81       	ldd	r25, Y+1	; 0x01
     d7c:	9b 83       	std	Y+3, r25	; 0x03
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	29 c0       	rjmp	.+82     	; 0xdd6 <prvCopyDataToQueue+0xb0>
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	0e 94 3c 21 	call	0x4278	; 0x4278 <memcpy>
     d8e:	88 a1       	ldd	r24, Y+32	; 0x20
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	91 95       	neg	r25
     d94:	81 95       	neg	r24
     d96:	91 09       	sbc	r25, r1
     d98:	2e 81       	ldd	r18, Y+6	; 0x06
     d9a:	3f 81       	ldd	r19, Y+7	; 0x07
     d9c:	28 0f       	add	r18, r24
     d9e:	39 1f       	adc	r19, r25
     da0:	3f 83       	std	Y+7, r19	; 0x07
     da2:	2e 83       	std	Y+6, r18	; 0x06
     da4:	48 81       	ld	r20, Y
     da6:	59 81       	ldd	r21, Y+1	; 0x01
     da8:	24 17       	cp	r18, r20
     daa:	35 07       	cpc	r19, r21
     dac:	30 f4       	brcc	.+12     	; 0xdba <prvCopyDataToQueue+0x94>
     dae:	2c 81       	ldd	r18, Y+4	; 0x04
     db0:	3d 81       	ldd	r19, Y+5	; 0x05
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	9f 83       	std	Y+7, r25	; 0x07
     db8:	8e 83       	std	Y+6, r24	; 0x06
     dba:	02 30       	cpi	r16, 0x02	; 2
     dbc:	49 f4       	brne	.+18     	; 0xdd0 <prvCopyDataToQueue+0xaa>
     dbe:	11 23       	and	r17, r17
     dc0:	49 f0       	breq	.+18     	; 0xdd4 <prvCopyDataToQueue+0xae>
     dc2:	11 50       	subi	r17, 0x01	; 1
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <prvCopyDataToQueue+0xb0>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <prvCopyDataToQueue+0xb0>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <prvCopyDataToQueue+0xb0>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <prvCopyDataToQueue+0xb0>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	1f 5f       	subi	r17, 0xFF	; 255
     dd8:	1e 8f       	std	Y+30, r17	; 0x1e
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	08 95       	ret

00000de4 <prvCopyDataFromQueue>:
     de4:	fc 01       	movw	r30, r24
     de6:	40 a1       	ldd	r20, Z+32	; 0x20
     de8:	44 23       	and	r20, r20
     dea:	a9 f0       	breq	.+42     	; 0xe16 <prvCopyDataFromQueue+0x32>
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	26 81       	ldd	r18, Z+6	; 0x06
     df0:	37 81       	ldd	r19, Z+7	; 0x07
     df2:	24 0f       	add	r18, r20
     df4:	35 1f       	adc	r19, r21
     df6:	37 83       	std	Z+7, r19	; 0x07
     df8:	26 83       	std	Z+6, r18	; 0x06
     dfa:	84 81       	ldd	r24, Z+4	; 0x04
     dfc:	95 81       	ldd	r25, Z+5	; 0x05
     dfe:	28 17       	cp	r18, r24
     e00:	39 07       	cpc	r19, r25
     e02:	20 f0       	brcs	.+8      	; 0xe0c <prvCopyDataFromQueue+0x28>
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	97 83       	std	Z+7, r25	; 0x07
     e0a:	86 83       	std	Z+6, r24	; 0x06
     e0c:	cb 01       	movw	r24, r22
     e0e:	66 81       	ldd	r22, Z+6	; 0x06
     e10:	77 81       	ldd	r23, Z+7	; 0x07
     e12:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <memcpy>
     e16:	08 95       	ret

00000e18 <prvUnlockQueue>:
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	0f 92       	push	r0
     e26:	1a a1       	ldd	r17, Y+34	; 0x22
     e28:	0b c0       	rjmp	.+22     	; 0xe40 <prvUnlockQueue+0x28>
     e2a:	8b 89       	ldd	r24, Y+19	; 0x13
     e2c:	88 23       	and	r24, r24
     e2e:	51 f0       	breq	.+20     	; 0xe44 <prvUnlockQueue+0x2c>
     e30:	ce 01       	movw	r24, r28
     e32:	43 96       	adiw	r24, 0x13	; 19
     e34:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <xTaskRemoveFromEventList>
     e38:	81 11       	cpse	r24, r1
     e3a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <vTaskMissedYield>
     e3e:	11 50       	subi	r17, 0x01	; 1
     e40:	11 16       	cp	r1, r17
     e42:	9c f3       	brlt	.-26     	; 0xe2a <prvUnlockQueue+0x12>
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	8a a3       	std	Y+34, r24	; 0x22
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	0f 92       	push	r0
     e52:	19 a1       	ldd	r17, Y+33	; 0x21
     e54:	0b c0       	rjmp	.+22     	; 0xe6c <prvUnlockQueue+0x54>
     e56:	88 85       	ldd	r24, Y+8	; 0x08
     e58:	88 23       	and	r24, r24
     e5a:	51 f0       	breq	.+20     	; 0xe70 <prvUnlockQueue+0x58>
     e5c:	ce 01       	movw	r24, r28
     e5e:	08 96       	adiw	r24, 0x08	; 8
     e60:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <xTaskRemoveFromEventList>
     e64:	81 11       	cpse	r24, r1
     e66:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <vTaskMissedYield>
     e6a:	11 50       	subi	r17, 0x01	; 1
     e6c:	11 16       	cp	r1, r17
     e6e:	9c f3       	brlt	.-26     	; 0xe56 <prvUnlockQueue+0x3e>
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	89 a3       	std	Y+33, r24	; 0x21
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	08 95       	ret

00000e80 <xQueueGenericReset>:
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	ec 01       	movw	r28, r24
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	0f 92       	push	r0
     e8c:	e8 81       	ld	r30, Y
     e8e:	f9 81       	ldd	r31, Y+1	; 0x01
     e90:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e92:	28 a1       	ldd	r18, Y+32	; 0x20
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	82 9f       	mul	r24, r18
     e9a:	a0 01       	movw	r20, r0
     e9c:	83 9f       	mul	r24, r19
     e9e:	50 0d       	add	r21, r0
     ea0:	92 9f       	mul	r25, r18
     ea2:	50 0d       	add	r21, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	4e 0f       	add	r20, r30
     ea8:	5f 1f       	adc	r21, r31
     eaa:	5d 83       	std	Y+5, r21	; 0x05
     eac:	4c 83       	std	Y+4, r20	; 0x04
     eae:	1e 8e       	std	Y+30, r1	; 0x1e
     eb0:	fb 83       	std	Y+3, r31	; 0x03
     eb2:	ea 83       	std	Y+2, r30	; 0x02
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	28 9f       	mul	r18, r24
     eb8:	a0 01       	movw	r20, r0
     eba:	29 9f       	mul	r18, r25
     ebc:	50 0d       	add	r21, r0
     ebe:	38 9f       	mul	r19, r24
     ec0:	50 0d       	add	r21, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	cf 01       	movw	r24, r30
     ec6:	84 0f       	add	r24, r20
     ec8:	95 1f       	adc	r25, r21
     eca:	9f 83       	std	Y+7, r25	; 0x07
     ecc:	8e 83       	std	Y+6, r24	; 0x06
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	89 a3       	std	Y+33, r24	; 0x21
     ed2:	8a a3       	std	Y+34, r24	; 0x22
     ed4:	61 11       	cpse	r22, r1
     ed6:	0b c0       	rjmp	.+22     	; 0xeee <xQueueGenericReset+0x6e>
     ed8:	88 85       	ldd	r24, Y+8	; 0x08
     eda:	88 23       	and	r24, r24
     edc:	71 f0       	breq	.+28     	; 0xefa <xQueueGenericReset+0x7a>
     ede:	ce 01       	movw	r24, r28
     ee0:	08 96       	adiw	r24, 0x08	; 8
     ee2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <xTaskRemoveFromEventList>
     ee6:	88 23       	and	r24, r24
     ee8:	41 f0       	breq	.+16     	; 0xefa <xQueueGenericReset+0x7a>
     eea:	2b de       	rcall	.-938    	; 0xb42 <vPortYield>
     eec:	06 c0       	rjmp	.+12     	; 0xefa <xQueueGenericReset+0x7a>
     eee:	ce 01       	movw	r24, r28
     ef0:	08 96       	adiw	r24, 0x08	; 8
     ef2:	59 dd       	rcall	.-1358   	; 0x9a6 <vListInitialise>
     ef4:	ce 01       	movw	r24, r28
     ef6:	43 96       	adiw	r24, 0x13	; 19
     ef8:	56 dd       	rcall	.-1364   	; 0x9a6 <vListInitialise>
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <prvInitialiseNewQueue>:
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	f8 01       	movw	r30, r16
     f0c:	61 11       	cpse	r22, r1
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <prvInitialiseNewQueue+0x10>
     f10:	11 83       	std	Z+1, r17	; 0x01
     f12:	00 83       	st	Z, r16
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <prvInitialiseNewQueue+0x14>
     f16:	51 83       	std	Z+1, r21	; 0x01
     f18:	40 83       	st	Z, r20
     f1a:	87 8f       	std	Z+31, r24	; 0x1f
     f1c:	60 a3       	std	Z+32, r22	; 0x20
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	cf 01       	movw	r24, r30
     f22:	ae df       	rcall	.-164    	; 0xe80 <xQueueGenericReset>
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <xQueueGenericCreate>:
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	f8 2e       	mov	r15, r24
     f3a:	e6 2e       	mov	r14, r22
     f3c:	d4 2e       	mov	r13, r20
     f3e:	86 9f       	mul	r24, r22
     f40:	c0 01       	movw	r24, r0
     f42:	11 24       	eor	r1, r1
     f44:	83 96       	adiw	r24, 0x23	; 35
     f46:	4a dc       	rcall	.-1900   	; 0x7dc <pvPortMalloc>
     f48:	ec 01       	movw	r28, r24
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	41 f0       	breq	.+16     	; 0xf5e <xQueueGenericCreate+0x34>
     f4e:	8c 01       	movw	r16, r24
     f50:	2d 2d       	mov	r18, r13
     f52:	ac 01       	movw	r20, r24
     f54:	4d 5d       	subi	r20, 0xDD	; 221
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	6e 2d       	mov	r22, r14
     f5a:	8f 2d       	mov	r24, r15
     f5c:	d4 df       	rcall	.-88     	; 0xf06 <prvInitialiseNewQueue>
     f5e:	ce 01       	movw	r24, r28
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	08 95       	ret

00000f70 <xQueueGenericSend>:
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	29 97       	sbiw	r28, 0x09	; 9
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	7c 01       	movw	r14, r24
     f92:	6b 01       	movw	r12, r22
     f94:	2e 83       	std	Y+6, r18	; 0x06
     f96:	3f 83       	std	Y+7, r19	; 0x07
     f98:	48 87       	std	Y+8, r20	; 0x08
     f9a:	59 87       	std	Y+9, r21	; 0x09
     f9c:	10 e0       	ldi	r17, 0x00	; 0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	0f 92       	push	r0
     fa4:	f7 01       	movw	r30, r14
     fa6:	96 8d       	ldd	r25, Z+30	; 0x1e
     fa8:	87 8d       	ldd	r24, Z+31	; 0x1f
     faa:	98 17       	cp	r25, r24
     fac:	10 f0       	brcs	.+4      	; 0xfb2 <xQueueGenericSend+0x42>
     fae:	02 30       	cpi	r16, 0x02	; 2
     fb0:	a9 f4       	brne	.+42     	; 0xfdc <xQueueGenericSend+0x6c>
     fb2:	40 2f       	mov	r20, r16
     fb4:	b6 01       	movw	r22, r12
     fb6:	c7 01       	movw	r24, r14
     fb8:	b6 de       	rcall	.-660    	; 0xd26 <prvCopyDataToQueue>
     fba:	f7 01       	movw	r30, r14
     fbc:	93 89       	ldd	r25, Z+19	; 0x13
     fbe:	99 23       	and	r25, r25
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <xQueueGenericSend+0x60>
     fc2:	c7 01       	movw	r24, r14
     fc4:	43 96       	adiw	r24, 0x13	; 19
     fc6:	b6 d7       	rcall	.+3948   	; 0x1f34 <xTaskRemoveFromEventList>
     fc8:	88 23       	and	r24, r24
     fca:	21 f0       	breq	.+8      	; 0xfd4 <xQueueGenericSend+0x64>
     fcc:	ba dd       	rcall	.-1164   	; 0xb42 <vPortYield>
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <xQueueGenericSend+0x64>
     fd0:	81 11       	cpse	r24, r1
     fd2:	b7 dd       	rcall	.-1170   	; 0xb42 <vPortYield>
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	48 c0       	rjmp	.+144    	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
     fdc:	8e 81       	ldd	r24, Y+6	; 0x06
     fde:	9f 81       	ldd	r25, Y+7	; 0x07
     fe0:	a8 85       	ldd	r26, Y+8	; 0x08
     fe2:	b9 85       	ldd	r27, Y+9	; 0x09
     fe4:	89 2b       	or	r24, r25
     fe6:	8a 2b       	or	r24, r26
     fe8:	8b 2b       	or	r24, r27
     fea:	21 f4       	brne	.+8      	; 0xff4 <xQueueGenericSend+0x84>
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	3c c0       	rjmp	.+120    	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
     ff4:	11 11       	cpse	r17, r1
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <vTaskInternalSetTimeOutState>
    1000:	11 e0       	ldi	r17, 0x01	; 1
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	58 d4       	rcall	.+2224   	; 0x18b8 <vTaskSuspendAll>
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	0f 92       	push	r0
    100e:	f7 01       	movw	r30, r14
    1010:	81 a1       	ldd	r24, Z+33	; 0x21
    1012:	8f 3f       	cpi	r24, 0xFF	; 255
    1014:	09 f4       	brne	.+2      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1016:	11 a2       	std	Z+33, r1	; 0x21
    1018:	f7 01       	movw	r30, r14
    101a:	82 a1       	ldd	r24, Z+34	; 0x22
    101c:	8f 3f       	cpi	r24, 0xFF	; 255
    101e:	09 f4       	brne	.+2      	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    1020:	12 a2       	std	Z+34, r1	; 0x22
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	be 01       	movw	r22, r28
    1028:	6a 5f       	subi	r22, 0xFA	; 250
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCheckForTimeOut>
    1034:	81 11       	cpse	r24, r1
    1036:	16 c0       	rjmp	.+44     	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    1038:	c7 01       	movw	r24, r14
    103a:	67 de       	rcall	.-818    	; 0xd0a <prvIsQueueFull>
    103c:	88 23       	and	r24, r24
    103e:	71 f0       	breq	.+28     	; 0x105c <__EEPROM_REGION_LENGTH__+0x5c>
    1040:	4e 81       	ldd	r20, Y+6	; 0x06
    1042:	5f 81       	ldd	r21, Y+7	; 0x07
    1044:	68 85       	ldd	r22, Y+8	; 0x08
    1046:	79 85       	ldd	r23, Y+9	; 0x09
    1048:	c7 01       	movw	r24, r14
    104a:	08 96       	adiw	r24, 0x08	; 8
    104c:	d0 d6       	rcall	.+3488   	; 0x1dee <vTaskPlaceOnEventList>
    104e:	c7 01       	movw	r24, r14
    1050:	e3 de       	rcall	.-570    	; 0xe18 <prvUnlockQueue>
    1052:	72 d5       	rcall	.+2788   	; 0x1b38 <xTaskResumeAll>
    1054:	81 11       	cpse	r24, r1
    1056:	a3 cf       	rjmp	.-186    	; 0xf9e <xQueueGenericSend+0x2e>
    1058:	74 dd       	rcall	.-1304   	; 0xb42 <vPortYield>
    105a:	a1 cf       	rjmp	.-190    	; 0xf9e <xQueueGenericSend+0x2e>
    105c:	c7 01       	movw	r24, r14
    105e:	dc de       	rcall	.-584    	; 0xe18 <prvUnlockQueue>
    1060:	6b d5       	rcall	.+2774   	; 0x1b38 <xTaskResumeAll>
    1062:	9d cf       	rjmp	.-198    	; 0xf9e <xQueueGenericSend+0x2e>
    1064:	c7 01       	movw	r24, r14
    1066:	d8 de       	rcall	.-592    	; 0xe18 <prvUnlockQueue>
    1068:	67 d5       	rcall	.+2766   	; 0x1b38 <xTaskResumeAll>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	29 96       	adiw	r28, 0x09	; 9
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	08 95       	ret

0000108a <xQueueGenericSendFromISR>:
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	8a 01       	movw	r16, r20
    1098:	fc 01       	movw	r30, r24
    109a:	56 8d       	ldd	r21, Z+30	; 0x1e
    109c:	37 8d       	ldd	r19, Z+31	; 0x1f
    109e:	53 17       	cp	r21, r19
    10a0:	10 f0       	brcs	.+4      	; 0x10a6 <xQueueGenericSendFromISR+0x1c>
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	f1 f4       	brne	.+60     	; 0x10e2 <xQueueGenericSendFromISR+0x58>
    10a6:	42 2f       	mov	r20, r18
    10a8:	78 01       	movw	r14, r16
    10aa:	ec 01       	movw	r28, r24
    10ac:	1a a1       	ldd	r17, Y+34	; 0x22
    10ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b0:	ce 01       	movw	r24, r28
    10b2:	39 de       	rcall	.-910    	; 0xd26 <prvCopyDataToQueue>
    10b4:	1f 3f       	cpi	r17, 0xFF	; 255
    10b6:	79 f4       	brne	.+30     	; 0x10d6 <xQueueGenericSendFromISR+0x4c>
    10b8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ba:	88 23       	and	r24, r24
    10bc:	a1 f0       	breq	.+40     	; 0x10e6 <xQueueGenericSendFromISR+0x5c>
    10be:	ce 01       	movw	r24, r28
    10c0:	43 96       	adiw	r24, 0x13	; 19
    10c2:	38 d7       	rcall	.+3696   	; 0x1f34 <xTaskRemoveFromEventList>
    10c4:	88 23       	and	r24, r24
    10c6:	89 f0       	breq	.+34     	; 0x10ea <xQueueGenericSendFromISR+0x60>
    10c8:	e1 14       	cp	r14, r1
    10ca:	f1 04       	cpc	r15, r1
    10cc:	81 f0       	breq	.+32     	; 0x10ee <xQueueGenericSendFromISR+0x64>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	f7 01       	movw	r30, r14
    10d2:	80 83       	st	Z, r24
    10d4:	0d c0       	rjmp	.+26     	; 0x10f0 <xQueueGenericSendFromISR+0x66>
    10d6:	ff 24       	eor	r15, r15
    10d8:	f3 94       	inc	r15
    10da:	f1 0e       	add	r15, r17
    10dc:	fa a2       	std	Y+34, r15	; 0x22
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <xQueueGenericSendFromISR+0x66>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <xQueueGenericSendFromISR+0x66>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	03 c0       	rjmp	.+6      	; 0x10f0 <xQueueGenericSendFromISR+0x66>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <xQueueGenericSendFromISR+0x66>
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	08 95       	ret

000010fe <xQueueReceive>:
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	29 97       	sbiw	r28, 0x09	; 9
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	8c 01       	movw	r16, r24
    1120:	6b 01       	movw	r12, r22
    1122:	2e 83       	std	Y+6, r18	; 0x06
    1124:	3f 83       	std	Y+7, r19	; 0x07
    1126:	48 87       	std	Y+8, r20	; 0x08
    1128:	59 87       	std	Y+9, r21	; 0x09
    112a:	e1 2c       	mov	r14, r1
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	0f 92       	push	r0
    1132:	f8 01       	movw	r30, r16
    1134:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1136:	ff 20       	and	r15, r15
    1138:	91 f0       	breq	.+36     	; 0x115e <xQueueReceive+0x60>
    113a:	b6 01       	movw	r22, r12
    113c:	c8 01       	movw	r24, r16
    113e:	52 de       	rcall	.-860    	; 0xde4 <prvCopyDataFromQueue>
    1140:	fa 94       	dec	r15
    1142:	f8 01       	movw	r30, r16
    1144:	f6 8e       	std	Z+30, r15	; 0x1e
    1146:	80 85       	ldd	r24, Z+8	; 0x08
    1148:	88 23       	and	r24, r24
    114a:	29 f0       	breq	.+10     	; 0x1156 <xQueueReceive+0x58>
    114c:	c8 01       	movw	r24, r16
    114e:	08 96       	adiw	r24, 0x08	; 8
    1150:	f1 d6       	rcall	.+3554   	; 0x1f34 <xTaskRemoveFromEventList>
    1152:	81 11       	cpse	r24, r1
    1154:	f6 dc       	rcall	.-1556   	; 0xb42 <vPortYield>
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	4e c0       	rjmp	.+156    	; 0x11fa <xQueueReceive+0xfc>
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	9f 81       	ldd	r25, Y+7	; 0x07
    1162:	a8 85       	ldd	r26, Y+8	; 0x08
    1164:	b9 85       	ldd	r27, Y+9	; 0x09
    1166:	89 2b       	or	r24, r25
    1168:	8a 2b       	or	r24, r26
    116a:	8b 2b       	or	r24, r27
    116c:	21 f4       	brne	.+8      	; 0x1176 <xQueueReceive+0x78>
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	42 c0       	rjmp	.+132    	; 0x11fa <xQueueReceive+0xfc>
    1176:	e1 10       	cpse	r14, r1
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <xQueueReceive+0x88>
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <vTaskInternalSetTimeOutState>
    1182:	ee 24       	eor	r14, r14
    1184:	e3 94       	inc	r14
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	96 d3       	rcall	.+1836   	; 0x18b8 <vTaskSuspendAll>
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	0f 92       	push	r0
    1192:	f8 01       	movw	r30, r16
    1194:	81 a1       	ldd	r24, Z+33	; 0x21
    1196:	8f 3f       	cpi	r24, 0xFF	; 255
    1198:	09 f4       	brne	.+2      	; 0x119c <xQueueReceive+0x9e>
    119a:	11 a2       	std	Z+33, r1	; 0x21
    119c:	f8 01       	movw	r30, r16
    119e:	82 a1       	ldd	r24, Z+34	; 0x22
    11a0:	8f 3f       	cpi	r24, 0xFF	; 255
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <xQueueReceive+0xa8>
    11a4:	12 a2       	std	Z+34, r1	; 0x22
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	be 01       	movw	r22, r28
    11ac:	6a 5f       	subi	r22, 0xFA	; 250
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskCheckForTimeOut>
    11b8:	81 11       	cpse	r24, r1
    11ba:	16 c0       	rjmp	.+44     	; 0x11e8 <xQueueReceive+0xea>
    11bc:	c8 01       	movw	r24, r16
    11be:	98 dd       	rcall	.-1232   	; 0xcf0 <prvIsQueueEmpty>
    11c0:	88 23       	and	r24, r24
    11c2:	71 f0       	breq	.+28     	; 0x11e0 <xQueueReceive+0xe2>
    11c4:	4e 81       	ldd	r20, Y+6	; 0x06
    11c6:	5f 81       	ldd	r21, Y+7	; 0x07
    11c8:	68 85       	ldd	r22, Y+8	; 0x08
    11ca:	79 85       	ldd	r23, Y+9	; 0x09
    11cc:	c8 01       	movw	r24, r16
    11ce:	43 96       	adiw	r24, 0x13	; 19
    11d0:	0e d6       	rcall	.+3100   	; 0x1dee <vTaskPlaceOnEventList>
    11d2:	c8 01       	movw	r24, r16
    11d4:	21 de       	rcall	.-958    	; 0xe18 <prvUnlockQueue>
    11d6:	b0 d4       	rcall	.+2400   	; 0x1b38 <xTaskResumeAll>
    11d8:	81 11       	cpse	r24, r1
    11da:	a8 cf       	rjmp	.-176    	; 0x112c <xQueueReceive+0x2e>
    11dc:	b2 dc       	rcall	.-1692   	; 0xb42 <vPortYield>
    11de:	a6 cf       	rjmp	.-180    	; 0x112c <xQueueReceive+0x2e>
    11e0:	c8 01       	movw	r24, r16
    11e2:	1a de       	rcall	.-972    	; 0xe18 <prvUnlockQueue>
    11e4:	a9 d4       	rcall	.+2386   	; 0x1b38 <xTaskResumeAll>
    11e6:	a2 cf       	rjmp	.-188    	; 0x112c <xQueueReceive+0x2e>
    11e8:	c8 01       	movw	r24, r16
    11ea:	16 de       	rcall	.-980    	; 0xe18 <prvUnlockQueue>
    11ec:	a5 d4       	rcall	.+2378   	; 0x1b38 <xTaskResumeAll>
    11ee:	c8 01       	movw	r24, r16
    11f0:	7f dd       	rcall	.-1282   	; 0xcf0 <prvIsQueueEmpty>
    11f2:	88 23       	and	r24, r24
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <xQueueReceive+0xfa>
    11f6:	9a cf       	rjmp	.-204    	; 0x112c <xQueueReceive+0x2e>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	29 96       	adiw	r28, 0x09	; 9
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	08 95       	ret

00001218 <xQueueSemaphoreTake>:
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	29 97       	sbiw	r28, 0x09	; 9
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	8c 01       	movw	r16, r24
    1236:	4e 83       	std	Y+6, r20	; 0x06
    1238:	5f 83       	std	Y+7, r21	; 0x07
    123a:	68 87       	std	Y+8, r22	; 0x08
    123c:	79 87       	std	Y+9, r23	; 0x09
    123e:	e1 2c       	mov	r14, r1
    1240:	f1 2c       	mov	r15, r1
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	0f 92       	push	r0
    1248:	f8 01       	movw	r30, r16
    124a:	86 8d       	ldd	r24, Z+30	; 0x1e
    124c:	88 23       	and	r24, r24
    124e:	c1 f0       	breq	.+48     	; 0x1280 <xQueueSemaphoreTake+0x68>
    1250:	81 50       	subi	r24, 0x01	; 1
    1252:	86 8f       	std	Z+30, r24	; 0x1e
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	89 2b       	or	r24, r25
    125a:	29 f4       	brne	.+10     	; 0x1266 <xQueueSemaphoreTake+0x4e>
    125c:	0e 94 df 12 	call	0x25be	; 0x25be <pvTaskIncrementMutexHeldCount>
    1260:	f8 01       	movw	r30, r16
    1262:	95 83       	std	Z+5, r25	; 0x05
    1264:	84 83       	std	Z+4, r24	; 0x04
    1266:	f8 01       	movw	r30, r16
    1268:	80 85       	ldd	r24, Z+8	; 0x08
    126a:	88 23       	and	r24, r24
    126c:	29 f0       	breq	.+10     	; 0x1278 <xQueueSemaphoreTake+0x60>
    126e:	c8 01       	movw	r24, r16
    1270:	08 96       	adiw	r24, 0x08	; 8
    1272:	60 d6       	rcall	.+3264   	; 0x1f34 <xTaskRemoveFromEventList>
    1274:	81 11       	cpse	r24, r1
    1276:	65 dc       	rcall	.-1846   	; 0xb42 <vPortYield>
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	6b c0       	rjmp	.+214    	; 0x1356 <xQueueSemaphoreTake+0x13e>
    1280:	8e 81       	ldd	r24, Y+6	; 0x06
    1282:	9f 81       	ldd	r25, Y+7	; 0x07
    1284:	a8 85       	ldd	r26, Y+8	; 0x08
    1286:	b9 85       	ldd	r27, Y+9	; 0x09
    1288:	89 2b       	or	r24, r25
    128a:	8a 2b       	or	r24, r26
    128c:	8b 2b       	or	r24, r27
    128e:	21 f4       	brne	.+8      	; 0x1298 <xQueueSemaphoreTake+0x80>
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	5f c0       	rjmp	.+190    	; 0x1356 <xQueueSemaphoreTake+0x13e>
    1298:	f1 10       	cpse	r15, r1
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <xQueueSemaphoreTake+0x8e>
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	92 d7       	rcall	.+3876   	; 0x21c6 <vTaskInternalSetTimeOutState>
    12a2:	ff 24       	eor	r15, r15
    12a4:	f3 94       	inc	r15
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	06 d3       	rcall	.+1548   	; 0x18b8 <vTaskSuspendAll>
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	0f 92       	push	r0
    12b2:	f8 01       	movw	r30, r16
    12b4:	81 a1       	ldd	r24, Z+33	; 0x21
    12b6:	8f 3f       	cpi	r24, 0xFF	; 255
    12b8:	09 f4       	brne	.+2      	; 0x12bc <xQueueSemaphoreTake+0xa4>
    12ba:	11 a2       	std	Z+33, r1	; 0x21
    12bc:	f8 01       	movw	r30, r16
    12be:	82 a1       	ldd	r24, Z+34	; 0x22
    12c0:	8f 3f       	cpi	r24, 0xFF	; 255
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <xQueueSemaphoreTake+0xae>
    12c4:	12 a2       	std	Z+34, r1	; 0x22
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	be 01       	movw	r22, r28
    12cc:	6a 5f       	subi	r22, 0xFA	; 250
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	ce 01       	movw	r24, r28
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	89 d7       	rcall	.+3858   	; 0x21e8 <xTaskCheckForTimeOut>
    12d6:	81 11       	cpse	r24, r1
    12d8:	24 c0       	rjmp	.+72     	; 0x1322 <xQueueSemaphoreTake+0x10a>
    12da:	c8 01       	movw	r24, r16
    12dc:	09 dd       	rcall	.-1518   	; 0xcf0 <prvIsQueueEmpty>
    12de:	88 23       	and	r24, r24
    12e0:	e1 f0       	breq	.+56     	; 0x131a <xQueueSemaphoreTake+0x102>
    12e2:	f8 01       	movw	r30, r16
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	89 2b       	or	r24, r25
    12ea:	49 f4       	brne	.+18     	; 0x12fe <xQueueSemaphoreTake+0xe6>
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	0f 92       	push	r0
    12f2:	84 81       	ldd	r24, Z+4	; 0x04
    12f4:	95 81       	ldd	r25, Z+5	; 0x05
    12f6:	f0 d7       	rcall	.+4064   	; 0x22d8 <xTaskPriorityInherit>
    12f8:	e8 2e       	mov	r14, r24
    12fa:	0f 90       	pop	r0
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1300:	5f 81       	ldd	r21, Y+7	; 0x07
    1302:	68 85       	ldd	r22, Y+8	; 0x08
    1304:	79 85       	ldd	r23, Y+9	; 0x09
    1306:	c8 01       	movw	r24, r16
    1308:	43 96       	adiw	r24, 0x13	; 19
    130a:	71 d5       	rcall	.+2786   	; 0x1dee <vTaskPlaceOnEventList>
    130c:	c8 01       	movw	r24, r16
    130e:	84 dd       	rcall	.-1272   	; 0xe18 <prvUnlockQueue>
    1310:	13 d4       	rcall	.+2086   	; 0x1b38 <xTaskResumeAll>
    1312:	81 11       	cpse	r24, r1
    1314:	96 cf       	rjmp	.-212    	; 0x1242 <xQueueSemaphoreTake+0x2a>
    1316:	15 dc       	rcall	.-2006   	; 0xb42 <vPortYield>
    1318:	94 cf       	rjmp	.-216    	; 0x1242 <xQueueSemaphoreTake+0x2a>
    131a:	c8 01       	movw	r24, r16
    131c:	7d dd       	rcall	.-1286   	; 0xe18 <prvUnlockQueue>
    131e:	0c d4       	rcall	.+2072   	; 0x1b38 <xTaskResumeAll>
    1320:	90 cf       	rjmp	.-224    	; 0x1242 <xQueueSemaphoreTake+0x2a>
    1322:	c8 01       	movw	r24, r16
    1324:	79 dd       	rcall	.-1294   	; 0xe18 <prvUnlockQueue>
    1326:	08 d4       	rcall	.+2064   	; 0x1b38 <xTaskResumeAll>
    1328:	c8 01       	movw	r24, r16
    132a:	e2 dc       	rcall	.-1596   	; 0xcf0 <prvIsQueueEmpty>
    132c:	88 23       	and	r24, r24
    132e:	09 f4       	brne	.+2      	; 0x1332 <xQueueSemaphoreTake+0x11a>
    1330:	88 cf       	rjmp	.-240    	; 0x1242 <xQueueSemaphoreTake+0x2a>
    1332:	ee 20       	and	r14, r14
    1334:	79 f0       	breq	.+30     	; 0x1354 <xQueueSemaphoreTake+0x13c>
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	0f 92       	push	r0
    133c:	c8 01       	movw	r24, r16
    133e:	c8 dc       	rcall	.-1648   	; 0xcd0 <prvGetDisinheritPriorityAfterTimeout>
    1340:	68 2f       	mov	r22, r24
    1342:	f8 01       	movw	r30, r16
    1344:	84 81       	ldd	r24, Z+4	; 0x04
    1346:	95 81       	ldd	r25, Z+5	; 0x05
    1348:	0e 94 4e 12 	call	0x249c	; 0x249c <vTaskPriorityDisinheritAfterTimeout>
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <xQueueSemaphoreTake+0x13e>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	29 96       	adiw	r28, 0x09	; 9
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	08 95       	ret

00001370 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	0f 92       	push	r0
    137c:	89 a1       	ldd	r24, Y+33	; 0x21
    137e:	8f 3f       	cpi	r24, 0xFF	; 255
    1380:	09 f4       	brne	.+2      	; 0x1384 <vQueueWaitForMessageRestricted+0x14>
    1382:	19 a2       	std	Y+33, r1	; 0x21
    1384:	8a a1       	ldd	r24, Y+34	; 0x22
    1386:	8f 3f       	cpi	r24, 0xFF	; 255
    1388:	09 f4       	brne	.+2      	; 0x138c <vQueueWaitForMessageRestricted+0x1c>
    138a:	1a a2       	std	Y+34, r1	; 0x22
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1390:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1392:	81 11       	cpse	r24, r1
    1394:	03 c0       	rjmp	.+6      	; 0x139c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1396:	ce 01       	movw	r24, r28
    1398:	43 96       	adiw	r24, 0x13	; 19
    139a:	8a d5       	rcall	.+2836   	; 0x1eb0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    139c:	ce 01       	movw	r24, r28
    139e:	3c dd       	rcall	.-1416   	; 0xe18 <prvUnlockQueue>
    }
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <prvResetNextTaskUnblockTime>:
    13a6:	e0 91 91 0d 	lds	r30, 0x0D91	; 0x800d91 <pxDelayedTaskList>
    13aa:	f0 91 92 0d 	lds	r31, 0x0D92	; 0x800d92 <pxDelayedTaskList+0x1>
    13ae:	80 81       	ld	r24, Z
    13b0:	81 11       	cpse	r24, r1
    13b2:	0c c0       	rjmp	.+24     	; 0x13cc <prvResetNextTaskUnblockTime+0x26>
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	9f ef       	ldi	r25, 0xFF	; 255
    13b8:	dc 01       	movw	r26, r24
    13ba:	80 93 5b 0d 	sts	0x0D5B, r24	; 0x800d5b <xNextTaskUnblockTime>
    13be:	90 93 5c 0d 	sts	0x0D5C, r25	; 0x800d5c <xNextTaskUnblockTime+0x1>
    13c2:	a0 93 5d 0d 	sts	0x0D5D, r26	; 0x800d5d <xNextTaskUnblockTime+0x2>
    13c6:	b0 93 5e 0d 	sts	0x0D5E, r27	; 0x800d5e <xNextTaskUnblockTime+0x3>
    13ca:	08 95       	ret
    13cc:	e0 91 91 0d 	lds	r30, 0x0D91	; 0x800d91 <pxDelayedTaskList>
    13d0:	f0 91 92 0d 	lds	r31, 0x0D92	; 0x800d92 <pxDelayedTaskList+0x1>
    13d4:	07 80       	ldd	r0, Z+7	; 0x07
    13d6:	f0 85       	ldd	r31, Z+8	; 0x08
    13d8:	e0 2d       	mov	r30, r0
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	a2 81       	ldd	r26, Z+2	; 0x02
    13e0:	b3 81       	ldd	r27, Z+3	; 0x03
    13e2:	80 93 5b 0d 	sts	0x0D5B, r24	; 0x800d5b <xNextTaskUnblockTime>
    13e6:	90 93 5c 0d 	sts	0x0D5C, r25	; 0x800d5c <xNextTaskUnblockTime+0x1>
    13ea:	a0 93 5d 0d 	sts	0x0D5D, r26	; 0x800d5d <xNextTaskUnblockTime+0x2>
    13ee:	b0 93 5e 0d 	sts	0x0D5E, r27	; 0x800d5e <xNextTaskUnblockTime+0x3>
    13f2:	08 95       	ret

000013f4 <prvDeleteTCB>:
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
    13fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fe:	97 da       	rcall	.-2770   	; 0x92e <vPortFree>
    1400:	ce 01       	movw	r24, r28
    1402:	95 da       	rcall	.-2774   	; 0x92e <vPortFree>
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <prvInitialiseNewTask>:
    140a:	4f 92       	push	r4
    140c:	5f 92       	push	r5
    140e:	6f 92       	push	r6
    1410:	7f 92       	push	r7
    1412:	8f 92       	push	r8
    1414:	9f 92       	push	r9
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	2c 01       	movw	r4, r24
    142a:	5b 01       	movw	r10, r22
    142c:	4a 01       	movw	r8, r20
    142e:	39 01       	movw	r6, r18
    1430:	e6 01       	movw	r28, r12
    1432:	65 ea       	ldi	r22, 0xA5	; 165
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143a:	0e 94 45 21 	call	0x428a	; 0x428a <memset>
    143e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1440:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1442:	21 e0       	ldi	r18, 0x01	; 1
    1444:	82 1a       	sub	r8, r18
    1446:	91 08       	sbc	r9, r1
    1448:	88 0e       	add	r8, r24
    144a:	99 1e       	adc	r9, r25
    144c:	a1 14       	cp	r10, r1
    144e:	b1 04       	cpc	r11, r1
    1450:	89 f4       	brne	.+34     	; 0x1474 <prvInitialiseNewTask+0x6a>
    1452:	15 c0       	rjmp	.+42     	; 0x147e <prvInitialiseNewTask+0x74>
    1454:	82 2f       	mov	r24, r18
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	f5 01       	movw	r30, r10
    145a:	e8 0f       	add	r30, r24
    145c:	f9 1f       	adc	r31, r25
    145e:	30 81       	ld	r19, Z
    1460:	de 01       	movw	r26, r28
    1462:	a8 0f       	add	r26, r24
    1464:	b9 1f       	adc	r27, r25
    1466:	5d 96       	adiw	r26, 0x1d	; 29
    1468:	3c 93       	st	X, r19
    146a:	80 81       	ld	r24, Z
    146c:	88 23       	and	r24, r24
    146e:	29 f0       	breq	.+10     	; 0x147a <prvInitialiseNewTask+0x70>
    1470:	2f 5f       	subi	r18, 0xFF	; 255
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <prvInitialiseNewTask+0x6c>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	20 31       	cpi	r18, 0x10	; 16
    1478:	68 f3       	brcs	.-38     	; 0x1454 <prvInitialiseNewTask+0x4a>
    147a:	1c a6       	std	Y+44, r1	; 0x2c
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <prvInitialiseNewTask+0x76>
    147e:	1d 8e       	std	Y+29, r1	; 0x1d
    1480:	0a 30       	cpi	r16, 0x0A	; 10
    1482:	08 f0       	brcs	.+2      	; 0x1486 <prvInitialiseNewTask+0x7c>
    1484:	09 e0       	ldi	r16, 0x09	; 9
    1486:	0a 8f       	std	Y+26, r16	; 0x1a
    1488:	0d a7       	std	Y+45, r16	; 0x2d
    148a:	1e a6       	std	Y+46, r1	; 0x2e
    148c:	ce 01       	movw	r24, r28
    148e:	02 96       	adiw	r24, 0x02	; 2
    1490:	9b da       	rcall	.-2762   	; 0x9c8 <vListInitialiseItem>
    1492:	ce 01       	movw	r24, r28
    1494:	0e 96       	adiw	r24, 0x0e	; 14
    1496:	98 da       	rcall	.-2768   	; 0x9c8 <vListInitialiseItem>
    1498:	db 87       	std	Y+11, r29	; 0x0b
    149a:	ca 87       	std	Y+10, r28	; 0x0a
    149c:	8a e0       	ldi	r24, 0x0A	; 10
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 e0       	ldi	r26, 0x00	; 0
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	80 1b       	sub	r24, r16
    14a6:	91 09       	sbc	r25, r1
    14a8:	a1 09       	sbc	r26, r1
    14aa:	b1 09       	sbc	r27, r1
    14ac:	8e 87       	std	Y+14, r24	; 0x0e
    14ae:	9f 87       	std	Y+15, r25	; 0x0f
    14b0:	a8 8b       	std	Y+16, r26	; 0x10
    14b2:	b9 8b       	std	Y+17, r27	; 0x11
    14b4:	df 8b       	std	Y+23, r29	; 0x17
    14b6:	ce 8b       	std	Y+22, r28	; 0x16
    14b8:	84 e0       	ldi	r24, 0x04	; 4
    14ba:	fe 01       	movw	r30, r28
    14bc:	bf 96       	adiw	r30, 0x2f	; 47
    14be:	df 01       	movw	r26, r30
    14c0:	1d 92       	st	X+, r1
    14c2:	8a 95       	dec	r24
    14c4:	e9 f7       	brne	.-6      	; 0x14c0 <prvInitialiseNewTask+0xb6>
    14c6:	1b aa       	std	Y+51, r1	; 0x33
    14c8:	a3 01       	movw	r20, r6
    14ca:	b2 01       	movw	r22, r4
    14cc:	c4 01       	movw	r24, r8
    14ce:	f0 da       	rcall	.-2592   	; 0xab0 <pxPortInitialiseStack>
    14d0:	99 83       	std	Y+1, r25	; 0x01
    14d2:	88 83       	st	Y, r24
    14d4:	e1 14       	cp	r14, r1
    14d6:	f1 04       	cpc	r15, r1
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <prvInitialiseNewTask+0xd6>
    14da:	f7 01       	movw	r30, r14
    14dc:	d1 83       	std	Z+1, r29	; 0x01
    14de:	c0 83       	st	Z, r28
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	af 90       	pop	r10
    14f2:	9f 90       	pop	r9
    14f4:	8f 90       	pop	r8
    14f6:	7f 90       	pop	r7
    14f8:	6f 90       	pop	r6
    14fa:	5f 90       	pop	r5
    14fc:	4f 90       	pop	r4
    14fe:	08 95       	ret

00001500 <prvInitialiseTaskLists>:
    1500:	cf 93       	push	r28
    1502:	c0 e0       	ldi	r28, 0x00	; 0
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <prvInitialiseTaskLists+0x16>
    1506:	2b e0       	ldi	r18, 0x0B	; 11
    1508:	c2 9f       	mul	r28, r18
    150a:	c0 01       	movw	r24, r0
    150c:	11 24       	eor	r1, r1
    150e:	87 55       	subi	r24, 0x57	; 87
    1510:	92 4f       	sbci	r25, 0xF2	; 242
    1512:	49 da       	rcall	.-2926   	; 0x9a6 <vListInitialise>
    1514:	cf 5f       	subi	r28, 0xFF	; 255
    1516:	ca 30       	cpi	r28, 0x0A	; 10
    1518:	b0 f3       	brcs	.-20     	; 0x1506 <prvInitialiseTaskLists+0x6>
    151a:	8e e9       	ldi	r24, 0x9E	; 158
    151c:	9d e0       	ldi	r25, 0x0D	; 13
    151e:	43 da       	rcall	.-2938   	; 0x9a6 <vListInitialise>
    1520:	83 e9       	ldi	r24, 0x93	; 147
    1522:	9d e0       	ldi	r25, 0x0D	; 13
    1524:	40 da       	rcall	.-2944   	; 0x9a6 <vListInitialise>
    1526:	84 e8       	ldi	r24, 0x84	; 132
    1528:	9d e0       	ldi	r25, 0x0D	; 13
    152a:	3d da       	rcall	.-2950   	; 0x9a6 <vListInitialise>
    152c:	89 e7       	ldi	r24, 0x79	; 121
    152e:	9d e0       	ldi	r25, 0x0D	; 13
    1530:	3a da       	rcall	.-2956   	; 0x9a6 <vListInitialise>
    1532:	8d e6       	ldi	r24, 0x6D	; 109
    1534:	9d e0       	ldi	r25, 0x0D	; 13
    1536:	37 da       	rcall	.-2962   	; 0x9a6 <vListInitialise>
    1538:	8e e9       	ldi	r24, 0x9E	; 158
    153a:	9d e0       	ldi	r25, 0x0D	; 13
    153c:	90 93 92 0d 	sts	0x0D92, r25	; 0x800d92 <pxDelayedTaskList+0x1>
    1540:	80 93 91 0d 	sts	0x0D91, r24	; 0x800d91 <pxDelayedTaskList>
    1544:	83 e9       	ldi	r24, 0x93	; 147
    1546:	9d e0       	ldi	r25, 0x0D	; 13
    1548:	90 93 90 0d 	sts	0x0D90, r25	; 0x800d90 <pxOverflowDelayedTaskList+0x1>
    154c:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <pxOverflowDelayedTaskList>
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <prvAddNewTaskToReadyList>:
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	ec 01       	movw	r28, r24
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	0f 92       	push	r0
    1560:	80 91 6c 0d 	lds	r24, 0x0D6C	; 0x800d6c <uxCurrentNumberOfTasks>
    1564:	8f 5f       	subi	r24, 0xFF	; 255
    1566:	80 93 6c 0d 	sts	0x0D6C, r24	; 0x800d6c <uxCurrentNumberOfTasks>
    156a:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    156e:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1572:	89 2b       	or	r24, r25
    1574:	51 f4       	brne	.+20     	; 0x158a <prvAddNewTaskToReadyList+0x36>
    1576:	d0 93 18 0e 	sts	0x0E18, r29	; 0x800e18 <pxCurrentTCB+0x1>
    157a:	c0 93 17 0e 	sts	0x0E17, r28	; 0x800e17 <pxCurrentTCB>
    157e:	80 91 6c 0d 	lds	r24, 0x0D6C	; 0x800d6c <uxCurrentNumberOfTasks>
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 f4       	brne	.+36     	; 0x15aa <prvAddNewTaskToReadyList+0x56>
    1586:	bc df       	rcall	.-136    	; 0x1500 <prvInitialiseTaskLists>
    1588:	10 c0       	rjmp	.+32     	; 0x15aa <prvAddNewTaskToReadyList+0x56>
    158a:	80 91 66 0d 	lds	r24, 0x0D66	; 0x800d66 <xSchedulerRunning>
    158e:	81 11       	cpse	r24, r1
    1590:	0c c0       	rjmp	.+24     	; 0x15aa <prvAddNewTaskToReadyList+0x56>
    1592:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1596:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    159a:	92 8d       	ldd	r25, Z+26	; 0x1a
    159c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    159e:	89 17       	cp	r24, r25
    15a0:	20 f0       	brcs	.+8      	; 0x15aa <prvAddNewTaskToReadyList+0x56>
    15a2:	d0 93 18 0e 	sts	0x0E18, r29	; 0x800e18 <pxCurrentTCB+0x1>
    15a6:	c0 93 17 0e 	sts	0x0E17, r28	; 0x800e17 <pxCurrentTCB>
    15aa:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <uxTaskNumber>
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <uxTaskNumber>
    15b4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15b6:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    15ba:	8e 17       	cp	r24, r30
    15bc:	10 f4       	brcc	.+4      	; 0x15c2 <prvAddNewTaskToReadyList+0x6e>
    15be:	e0 93 67 0d 	sts	0x0D67, r30	; 0x800d67 <uxTopReadyPriority>
    15c2:	8b e0       	ldi	r24, 0x0B	; 11
    15c4:	8e 9f       	mul	r24, r30
    15c6:	f0 01       	movw	r30, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	e7 55       	subi	r30, 0x57	; 87
    15cc:	f2 4f       	sbci	r31, 0xF2	; 242
    15ce:	01 80       	ldd	r0, Z+1	; 0x01
    15d0:	f2 81       	ldd	r31, Z+2	; 0x02
    15d2:	e0 2d       	mov	r30, r0
    15d4:	ff 83       	std	Y+7, r31	; 0x07
    15d6:	ee 83       	std	Y+6, r30	; 0x06
    15d8:	26 81       	ldd	r18, Z+6	; 0x06
    15da:	37 81       	ldd	r19, Z+7	; 0x07
    15dc:	39 87       	std	Y+9, r19	; 0x09
    15de:	28 87       	std	Y+8, r18	; 0x08
    15e0:	a6 81       	ldd	r26, Z+6	; 0x06
    15e2:	b7 81       	ldd	r27, Z+7	; 0x07
    15e4:	9e 01       	movw	r18, r28
    15e6:	2e 5f       	subi	r18, 0xFE	; 254
    15e8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ea:	15 96       	adiw	r26, 0x05	; 5
    15ec:	3c 93       	st	X, r19
    15ee:	2e 93       	st	-X, r18
    15f0:	14 97       	sbiw	r26, 0x04	; 4
    15f2:	37 83       	std	Z+7, r19	; 0x07
    15f4:	26 83       	std	Z+6, r18	; 0x06
    15f6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15f8:	8e 9f       	mul	r24, r30
    15fa:	f0 01       	movw	r30, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	e7 55       	subi	r30, 0x57	; 87
    1600:	f2 4f       	sbci	r31, 0xF2	; 242
    1602:	fd 87       	std	Y+13, r31	; 0x0d
    1604:	ec 87       	std	Y+12, r30	; 0x0c
    1606:	80 81       	ld	r24, Z
    1608:	8f 5f       	subi	r24, 0xFF	; 255
    160a:	80 83       	st	Z, r24
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	80 91 66 0d 	lds	r24, 0x0D66	; 0x800d66 <xSchedulerRunning>
    1614:	88 23       	and	r24, r24
    1616:	49 f0       	breq	.+18     	; 0x162a <prvAddNewTaskToReadyList+0xd6>
    1618:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    161c:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1620:	92 8d       	ldd	r25, Z+26	; 0x1a
    1622:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1624:	98 17       	cp	r25, r24
    1626:	08 f4       	brcc	.+2      	; 0x162a <prvAddNewTaskToReadyList+0xd6>
    1628:	8c da       	rcall	.-2792   	; 0xb42 <vPortYield>
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <prvCheckTasksWaitingTermination>:
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	1a c0       	rjmp	.+52     	; 0x166a <prvCheckTasksWaitingTermination+0x3a>
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	0f 92       	push	r0
    163c:	e0 91 80 0d 	lds	r30, 0x0D80	; 0x800d80 <xTasksWaitingTermination+0x7>
    1640:	f0 91 81 0d 	lds	r31, 0x0D81	; 0x800d81 <xTasksWaitingTermination+0x8>
    1644:	c0 85       	ldd	r28, Z+8	; 0x08
    1646:	d1 85       	ldd	r29, Z+9	; 0x09
    1648:	ce 01       	movw	r24, r28
    164a:	02 96       	adiw	r24, 0x02	; 2
    164c:	fe d9       	rcall	.-3076   	; 0xa4a <uxListRemove>
    164e:	80 91 6c 0d 	lds	r24, 0x0D6C	; 0x800d6c <uxCurrentNumberOfTasks>
    1652:	81 50       	subi	r24, 0x01	; 1
    1654:	80 93 6c 0d 	sts	0x0D6C, r24	; 0x800d6c <uxCurrentNumberOfTasks>
    1658:	80 91 78 0d 	lds	r24, 0x0D78	; 0x800d78 <uxDeletedTasksWaitingCleanUp>
    165c:	81 50       	subi	r24, 0x01	; 1
    165e:	80 93 78 0d 	sts	0x0D78, r24	; 0x800d78 <uxDeletedTasksWaitingCleanUp>
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	ce 01       	movw	r24, r28
    1668:	c5 de       	rcall	.-630    	; 0x13f4 <prvDeleteTCB>
    166a:	80 91 78 0d 	lds	r24, 0x0D78	; 0x800d78 <uxDeletedTasksWaitingCleanUp>
    166e:	81 11       	cpse	r24, r1
    1670:	e2 cf       	rjmp	.-60     	; 0x1636 <prvCheckTasksWaitingTermination+0x6>
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <prvAddCurrentTaskToDelayedList>:
    1678:	8f 92       	push	r8
    167a:	9f 92       	push	r9
    167c:	af 92       	push	r10
    167e:	bf 92       	push	r11
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	6b 01       	movw	r12, r22
    168e:	7c 01       	movw	r14, r24
    1690:	c4 2f       	mov	r28, r20
    1692:	80 90 68 0d 	lds	r8, 0x0D68	; 0x800d68 <xTickCount>
    1696:	90 90 69 0d 	lds	r9, 0x0D69	; 0x800d69 <xTickCount+0x1>
    169a:	a0 90 6a 0d 	lds	r10, 0x0D6A	; 0x800d6a <xTickCount+0x2>
    169e:	b0 90 6b 0d 	lds	r11, 0x0D6B	; 0x800d6b <xTickCount+0x3>
    16a2:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    16a6:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    16aa:	02 96       	adiw	r24, 0x02	; 2
    16ac:	ce d9       	rcall	.-3172   	; 0xa4a <uxListRemove>
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	c8 16       	cp	r12, r24
    16b2:	d8 06       	cpc	r13, r24
    16b4:	e8 06       	cpc	r14, r24
    16b6:	f8 06       	cpc	r15, r24
    16b8:	b1 f5       	brne	.+108    	; 0x1726 <prvAddCurrentTaskToDelayedList+0xae>
    16ba:	cc 23       	and	r28, r28
    16bc:	a1 f1       	breq	.+104    	; 0x1726 <prvAddCurrentTaskToDelayedList+0xae>
    16be:	ed e6       	ldi	r30, 0x6D	; 109
    16c0:	fd e0       	ldi	r31, 0x0D	; 13
    16c2:	a1 81       	ldd	r26, Z+1	; 0x01
    16c4:	b2 81       	ldd	r27, Z+2	; 0x02
    16c6:	c0 91 17 0e 	lds	r28, 0x0E17	; 0x800e17 <pxCurrentTCB>
    16ca:	d0 91 18 0e 	lds	r29, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    16ce:	bf 83       	std	Y+7, r27	; 0x07
    16d0:	ae 83       	std	Y+6, r26	; 0x06
    16d2:	c0 91 17 0e 	lds	r28, 0x0E17	; 0x800e17 <pxCurrentTCB>
    16d6:	d0 91 18 0e 	lds	r29, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    16da:	16 96       	adiw	r26, 0x06	; 6
    16dc:	8d 91       	ld	r24, X+
    16de:	9c 91       	ld	r25, X
    16e0:	17 97       	sbiw	r26, 0x07	; 7
    16e2:	99 87       	std	Y+9, r25	; 0x09
    16e4:	88 87       	std	Y+8, r24	; 0x08
    16e6:	16 96       	adiw	r26, 0x06	; 6
    16e8:	cd 91       	ld	r28, X+
    16ea:	dc 91       	ld	r29, X
    16ec:	17 97       	sbiw	r26, 0x07	; 7
    16ee:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    16f2:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    16f6:	02 96       	adiw	r24, 0x02	; 2
    16f8:	9d 83       	std	Y+5, r25	; 0x05
    16fa:	8c 83       	std	Y+4, r24	; 0x04
    16fc:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1700:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1704:	02 96       	adiw	r24, 0x02	; 2
    1706:	17 96       	adiw	r26, 0x07	; 7
    1708:	9c 93       	st	X, r25
    170a:	8e 93       	st	-X, r24
    170c:	16 97       	sbiw	r26, 0x06	; 6
    170e:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1712:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1716:	1d 96       	adiw	r26, 0x0d	; 13
    1718:	fc 93       	st	X, r31
    171a:	ee 93       	st	-X, r30
    171c:	1c 97       	sbiw	r26, 0x0c	; 12
    171e:	80 81       	ld	r24, Z
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	80 83       	st	Z, r24
    1724:	3d c0       	rjmp	.+122    	; 0x17a0 <prvAddCurrentTaskToDelayedList+0x128>
    1726:	c8 0c       	add	r12, r8
    1728:	d9 1c       	adc	r13, r9
    172a:	ea 1c       	adc	r14, r10
    172c:	fb 1c       	adc	r15, r11
    172e:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1732:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1736:	c2 82       	std	Z+2, r12	; 0x02
    1738:	d3 82       	std	Z+3, r13	; 0x03
    173a:	e4 82       	std	Z+4, r14	; 0x04
    173c:	f5 82       	std	Z+5, r15	; 0x05
    173e:	c8 14       	cp	r12, r8
    1740:	d9 04       	cpc	r13, r9
    1742:	ea 04       	cpc	r14, r10
    1744:	fb 04       	cpc	r15, r11
    1746:	60 f4       	brcc	.+24     	; 0x1760 <prvAddCurrentTaskToDelayedList+0xe8>
    1748:	60 91 17 0e 	lds	r22, 0x0E17	; 0x800e17 <pxCurrentTCB>
    174c:	70 91 18 0e 	lds	r23, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1750:	80 91 8f 0d 	lds	r24, 0x0D8F	; 0x800d8f <pxOverflowDelayedTaskList>
    1754:	90 91 90 0d 	lds	r25, 0x0D90	; 0x800d90 <pxOverflowDelayedTaskList+0x1>
    1758:	6e 5f       	subi	r22, 0xFE	; 254
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	39 d9       	rcall	.-3470   	; 0x9d0 <vListInsert>
    175e:	20 c0       	rjmp	.+64     	; 0x17a0 <prvAddCurrentTaskToDelayedList+0x128>
    1760:	60 91 17 0e 	lds	r22, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1764:	70 91 18 0e 	lds	r23, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1768:	80 91 91 0d 	lds	r24, 0x0D91	; 0x800d91 <pxDelayedTaskList>
    176c:	90 91 92 0d 	lds	r25, 0x0D92	; 0x800d92 <pxDelayedTaskList+0x1>
    1770:	6e 5f       	subi	r22, 0xFE	; 254
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	2d d9       	rcall	.-3494   	; 0x9d0 <vListInsert>
    1776:	80 91 5b 0d 	lds	r24, 0x0D5B	; 0x800d5b <xNextTaskUnblockTime>
    177a:	90 91 5c 0d 	lds	r25, 0x0D5C	; 0x800d5c <xNextTaskUnblockTime+0x1>
    177e:	a0 91 5d 0d 	lds	r26, 0x0D5D	; 0x800d5d <xNextTaskUnblockTime+0x2>
    1782:	b0 91 5e 0d 	lds	r27, 0x0D5E	; 0x800d5e <xNextTaskUnblockTime+0x3>
    1786:	c8 16       	cp	r12, r24
    1788:	d9 06       	cpc	r13, r25
    178a:	ea 06       	cpc	r14, r26
    178c:	fb 06       	cpc	r15, r27
    178e:	40 f4       	brcc	.+16     	; 0x17a0 <prvAddCurrentTaskToDelayedList+0x128>
    1790:	c0 92 5b 0d 	sts	0x0D5B, r12	; 0x800d5b <xNextTaskUnblockTime>
    1794:	d0 92 5c 0d 	sts	0x0D5C, r13	; 0x800d5c <xNextTaskUnblockTime+0x1>
    1798:	e0 92 5d 0d 	sts	0x0D5D, r14	; 0x800d5d <xNextTaskUnblockTime+0x2>
    179c:	f0 92 5e 0d 	sts	0x0D5E, r15	; 0x800d5e <xNextTaskUnblockTime+0x3>
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	bf 90       	pop	r11
    17ae:	af 90       	pop	r10
    17b0:	9f 90       	pop	r9
    17b2:	8f 90       	pop	r8
    17b4:	08 95       	ret

000017b6 <xTaskCreate>:
    17b6:	2f 92       	push	r2
    17b8:	3f 92       	push	r3
    17ba:	4f 92       	push	r4
    17bc:	5f 92       	push	r5
    17be:	6f 92       	push	r6
    17c0:	7f 92       	push	r7
    17c2:	8f 92       	push	r8
    17c4:	9f 92       	push	r9
    17c6:	af 92       	push	r10
    17c8:	bf 92       	push	r11
    17ca:	cf 92       	push	r12
    17cc:	df 92       	push	r13
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	3c 01       	movw	r6, r24
    17da:	1b 01       	movw	r2, r22
    17dc:	4a 01       	movw	r8, r20
    17de:	29 01       	movw	r4, r18
    17e0:	ca 01       	movw	r24, r20
    17e2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <pvPortMalloc>
    17e6:	6c 01       	movw	r12, r24
    17e8:	89 2b       	or	r24, r25
    17ea:	69 f0       	breq	.+26     	; 0x1806 <xTaskCreate+0x50>
    17ec:	84 e3       	ldi	r24, 0x34	; 52
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <pvPortMalloc>
    17f4:	ec 01       	movw	r28, r24
    17f6:	89 2b       	or	r24, r25
    17f8:	19 f0       	breq	.+6      	; 0x1800 <xTaskCreate+0x4a>
    17fa:	dc 8e       	std	Y+28, r13	; 0x1c
    17fc:	cb 8e       	std	Y+27, r12	; 0x1b
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <xTaskCreate+0x54>
    1800:	c6 01       	movw	r24, r12
    1802:	95 d8       	rcall	.-3798   	; 0x92e <vPortFree>
    1804:	02 c0       	rjmp	.+4      	; 0x180a <xTaskCreate+0x54>
    1806:	c0 e0       	ldi	r28, 0x00	; 0
    1808:	d0 e0       	ldi	r29, 0x00	; 0
    180a:	20 97       	sbiw	r28, 0x00	; 0
    180c:	61 f0       	breq	.+24     	; 0x1826 <xTaskCreate+0x70>
    180e:	a1 2c       	mov	r10, r1
    1810:	b1 2c       	mov	r11, r1
    1812:	6e 01       	movw	r12, r28
    1814:	92 01       	movw	r18, r4
    1816:	a4 01       	movw	r20, r8
    1818:	b1 01       	movw	r22, r2
    181a:	c3 01       	movw	r24, r6
    181c:	f6 dd       	rcall	.-1044   	; 0x140a <prvInitialiseNewTask>
    181e:	ce 01       	movw	r24, r28
    1820:	99 de       	rcall	.-718    	; 0x1554 <prvAddNewTaskToReadyList>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <xTaskCreate+0x72>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	9f 90       	pop	r9
    183c:	8f 90       	pop	r8
    183e:	7f 90       	pop	r7
    1840:	6f 90       	pop	r6
    1842:	5f 90       	pop	r5
    1844:	4f 90       	pop	r4
    1846:	3f 90       	pop	r3
    1848:	2f 90       	pop	r2
    184a:	08 95       	ret

0000184c <vTaskStartScheduler>:
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	0f 2e       	mov	r0, r31
    1854:	f9 e5       	ldi	r31, 0x59	; 89
    1856:	ef 2e       	mov	r14, r31
    1858:	fd e0       	ldi	r31, 0x0D	; 13
    185a:	ff 2e       	mov	r15, r31
    185c:	f0 2d       	mov	r31, r0
    185e:	00 e0       	ldi	r16, 0x00	; 0
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 ec       	ldi	r20, 0xC0	; 192
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	61 eb       	ldi	r22, 0xB1	; 177
    186a:	72 e0       	ldi	r23, 0x02	; 2
    186c:	8d ec       	ldi	r24, 0xCD	; 205
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a2 df       	rcall	.-188    	; 0x17b6 <xTaskCreate>
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	09 f4       	brne	.+2      	; 0x1878 <vTaskStartScheduler+0x2c>
    1876:	3f d7       	rcall	.+3710   	; 0x26f6 <xTimerCreateTimerTask>
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	c1 f4       	brne	.+48     	; 0x18ac <vTaskStartScheduler+0x60>
    187c:	f8 94       	cli
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	9f ef       	ldi	r25, 0xFF	; 255
    1882:	dc 01       	movw	r26, r24
    1884:	80 93 5b 0d 	sts	0x0D5B, r24	; 0x800d5b <xNextTaskUnblockTime>
    1888:	90 93 5c 0d 	sts	0x0D5C, r25	; 0x800d5c <xNextTaskUnblockTime+0x1>
    188c:	a0 93 5d 0d 	sts	0x0D5D, r26	; 0x800d5d <xNextTaskUnblockTime+0x2>
    1890:	b0 93 5e 0d 	sts	0x0D5E, r27	; 0x800d5e <xNextTaskUnblockTime+0x3>
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <xSchedulerRunning>
    189a:	10 92 68 0d 	sts	0x0D68, r1	; 0x800d68 <xTickCount>
    189e:	10 92 69 0d 	sts	0x0D69, r1	; 0x800d69 <xTickCount+0x1>
    18a2:	10 92 6a 0d 	sts	0x0D6A, r1	; 0x800d6a <xTickCount+0x2>
    18a6:	10 92 6b 0d 	sts	0x0D6B, r1	; 0x800d6b <xTickCount+0x3>
    18aa:	19 d9       	rcall	.-3534   	; 0xade <xPortStartScheduler>
    18ac:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    18b0:	0f 91       	pop	r16
    18b2:	ff 90       	pop	r15
    18b4:	ef 90       	pop	r14
    18b6:	08 95       	ret

000018b8 <vTaskSuspendAll>:
    18b8:	80 91 58 0d 	lds	r24, 0x0D58	; 0x800d58 <uxSchedulerSuspended>
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	80 93 58 0d 	sts	0x0D58, r24	; 0x800d58 <uxSchedulerSuspended>
    18c2:	08 95       	ret

000018c4 <xTaskGetTickCount>:
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	0f 92       	push	r0
    18ca:	60 91 68 0d 	lds	r22, 0x0D68	; 0x800d68 <xTickCount>
    18ce:	70 91 69 0d 	lds	r23, 0x0D69	; 0x800d69 <xTickCount+0x1>
    18d2:	80 91 6a 0d 	lds	r24, 0x0D6A	; 0x800d6a <xTickCount+0x2>
    18d6:	90 91 6b 0d 	lds	r25, 0x0D6B	; 0x800d6b <xTickCount+0x3>
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	08 95       	ret

000018e0 <xTaskIncrementTick>:
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	80 91 58 0d 	lds	r24, 0x0D58	; 0x800d58 <uxSchedulerSuspended>
    18f0:	81 11       	cpse	r24, r1
    18f2:	05 c1       	rjmp	.+522    	; 0x1afe <xTaskIncrementTick+0x21e>
    18f4:	c0 90 68 0d 	lds	r12, 0x0D68	; 0x800d68 <xTickCount>
    18f8:	d0 90 69 0d 	lds	r13, 0x0D69	; 0x800d69 <xTickCount+0x1>
    18fc:	e0 90 6a 0d 	lds	r14, 0x0D6A	; 0x800d6a <xTickCount+0x2>
    1900:	f0 90 6b 0d 	lds	r15, 0x0D6B	; 0x800d6b <xTickCount+0x3>
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	c8 1a       	sub	r12, r24
    1908:	d8 0a       	sbc	r13, r24
    190a:	e8 0a       	sbc	r14, r24
    190c:	f8 0a       	sbc	r15, r24
    190e:	c0 92 68 0d 	sts	0x0D68, r12	; 0x800d68 <xTickCount>
    1912:	d0 92 69 0d 	sts	0x0D69, r13	; 0x800d69 <xTickCount+0x1>
    1916:	e0 92 6a 0d 	sts	0x0D6A, r14	; 0x800d6a <xTickCount+0x2>
    191a:	f0 92 6b 0d 	sts	0x0D6B, r15	; 0x800d6b <xTickCount+0x3>
    191e:	c1 14       	cp	r12, r1
    1920:	d1 04       	cpc	r13, r1
    1922:	e1 04       	cpc	r14, r1
    1924:	f1 04       	cpc	r15, r1
    1926:	b1 f4       	brne	.+44     	; 0x1954 <xTaskIncrementTick+0x74>
    1928:	80 91 91 0d 	lds	r24, 0x0D91	; 0x800d91 <pxDelayedTaskList>
    192c:	90 91 92 0d 	lds	r25, 0x0D92	; 0x800d92 <pxDelayedTaskList+0x1>
    1930:	20 91 8f 0d 	lds	r18, 0x0D8F	; 0x800d8f <pxOverflowDelayedTaskList>
    1934:	30 91 90 0d 	lds	r19, 0x0D90	; 0x800d90 <pxOverflowDelayedTaskList+0x1>
    1938:	30 93 92 0d 	sts	0x0D92, r19	; 0x800d92 <pxDelayedTaskList+0x1>
    193c:	20 93 91 0d 	sts	0x0D91, r18	; 0x800d91 <pxDelayedTaskList>
    1940:	90 93 90 0d 	sts	0x0D90, r25	; 0x800d90 <pxOverflowDelayedTaskList+0x1>
    1944:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <pxOverflowDelayedTaskList>
    1948:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <xNumOfOverflows>
    194c:	8f 5f       	subi	r24, 0xFF	; 255
    194e:	80 93 60 0d 	sts	0x0D60, r24	; 0x800d60 <xNumOfOverflows>
    1952:	29 dd       	rcall	.-1454   	; 0x13a6 <prvResetNextTaskUnblockTime>
    1954:	80 91 5b 0d 	lds	r24, 0x0D5B	; 0x800d5b <xNextTaskUnblockTime>
    1958:	90 91 5c 0d 	lds	r25, 0x0D5C	; 0x800d5c <xNextTaskUnblockTime+0x1>
    195c:	a0 91 5d 0d 	lds	r26, 0x0D5D	; 0x800d5d <xNextTaskUnblockTime+0x2>
    1960:	b0 91 5e 0d 	lds	r27, 0x0D5E	; 0x800d5e <xNextTaskUnblockTime+0x3>
    1964:	c8 16       	cp	r12, r24
    1966:	d9 06       	cpc	r13, r25
    1968:	ea 06       	cpc	r14, r26
    196a:	fb 06       	cpc	r15, r27
    196c:	20 f4       	brcc	.+8      	; 0x1976 <xTaskIncrementTick+0x96>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	b2 c0       	rjmp	.+356    	; 0x1ad6 <xTaskIncrementTick+0x1f6>
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <xTaskIncrementTick+0x98>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	e0 91 91 0d 	lds	r30, 0x0D91	; 0x800d91 <pxDelayedTaskList>
    197c:	f0 91 92 0d 	lds	r31, 0x0D92	; 0x800d92 <pxDelayedTaskList+0x1>
    1980:	90 81       	ld	r25, Z
    1982:	91 11       	cpse	r25, r1
    1984:	0c c0       	rjmp	.+24     	; 0x199e <xTaskIncrementTick+0xbe>
    1986:	4f ef       	ldi	r20, 0xFF	; 255
    1988:	5f ef       	ldi	r21, 0xFF	; 255
    198a:	ba 01       	movw	r22, r20
    198c:	40 93 5b 0d 	sts	0x0D5B, r20	; 0x800d5b <xNextTaskUnblockTime>
    1990:	50 93 5c 0d 	sts	0x0D5C, r21	; 0x800d5c <xNextTaskUnblockTime+0x1>
    1994:	60 93 5d 0d 	sts	0x0D5D, r22	; 0x800d5d <xNextTaskUnblockTime+0x2>
    1998:	70 93 5e 0d 	sts	0x0D5E, r23	; 0x800d5e <xNextTaskUnblockTime+0x3>
    199c:	9c c0       	rjmp	.+312    	; 0x1ad6 <xTaskIncrementTick+0x1f6>
    199e:	e0 91 91 0d 	lds	r30, 0x0D91	; 0x800d91 <pxDelayedTaskList>
    19a2:	f0 91 92 0d 	lds	r31, 0x0D92	; 0x800d92 <pxDelayedTaskList+0x1>
    19a6:	07 80       	ldd	r0, Z+7	; 0x07
    19a8:	f0 85       	ldd	r31, Z+8	; 0x08
    19aa:	e0 2d       	mov	r30, r0
    19ac:	00 84       	ldd	r0, Z+8	; 0x08
    19ae:	f1 85       	ldd	r31, Z+9	; 0x09
    19b0:	e0 2d       	mov	r30, r0
    19b2:	42 81       	ldd	r20, Z+2	; 0x02
    19b4:	53 81       	ldd	r21, Z+3	; 0x03
    19b6:	64 81       	ldd	r22, Z+4	; 0x04
    19b8:	75 81       	ldd	r23, Z+5	; 0x05
    19ba:	c4 16       	cp	r12, r20
    19bc:	d5 06       	cpc	r13, r21
    19be:	e6 06       	cpc	r14, r22
    19c0:	f7 06       	cpc	r15, r23
    19c2:	48 f4       	brcc	.+18     	; 0x19d6 <xTaskIncrementTick+0xf6>
    19c4:	40 93 5b 0d 	sts	0x0D5B, r20	; 0x800d5b <xNextTaskUnblockTime>
    19c8:	50 93 5c 0d 	sts	0x0D5C, r21	; 0x800d5c <xNextTaskUnblockTime+0x1>
    19cc:	60 93 5d 0d 	sts	0x0D5D, r22	; 0x800d5d <xNextTaskUnblockTime+0x2>
    19d0:	70 93 5e 0d 	sts	0x0D5E, r23	; 0x800d5e <xNextTaskUnblockTime+0x3>
    19d4:	80 c0       	rjmp	.+256    	; 0x1ad6 <xTaskIncrementTick+0x1f6>
    19d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    19d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    19da:	c6 81       	ldd	r28, Z+6	; 0x06
    19dc:	d7 81       	ldd	r29, Z+7	; 0x07
    19de:	20 85       	ldd	r18, Z+8	; 0x08
    19e0:	31 85       	ldd	r19, Z+9	; 0x09
    19e2:	3f 83       	std	Y+7, r19	; 0x07
    19e4:	2e 83       	std	Y+6, r18	; 0x06
    19e6:	c0 85       	ldd	r28, Z+8	; 0x08
    19e8:	d1 85       	ldd	r29, Z+9	; 0x09
    19ea:	26 81       	ldd	r18, Z+6	; 0x06
    19ec:	37 81       	ldd	r19, Z+7	; 0x07
    19ee:	3d 83       	std	Y+5, r19	; 0x05
    19f0:	2c 83       	std	Y+4, r18	; 0x04
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	4d 91       	ld	r20, X+
    19f6:	5c 91       	ld	r21, X
    19f8:	12 97       	sbiw	r26, 0x02	; 2
    19fa:	9f 01       	movw	r18, r30
    19fc:	2e 5f       	subi	r18, 0xFE	; 254
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	42 17       	cp	r20, r18
    1a02:	53 07       	cpc	r21, r19
    1a04:	31 f4       	brne	.+12     	; 0x1a12 <xTaskIncrementTick+0x132>
    1a06:	40 85       	ldd	r20, Z+8	; 0x08
    1a08:	51 85       	ldd	r21, Z+9	; 0x09
    1a0a:	12 96       	adiw	r26, 0x02	; 2
    1a0c:	5c 93       	st	X, r21
    1a0e:	4e 93       	st	-X, r20
    1a10:	11 97       	sbiw	r26, 0x01	; 1
    1a12:	15 86       	std	Z+13, r1	; 0x0d
    1a14:	14 86       	std	Z+12, r1	; 0x0c
    1a16:	9c 91       	ld	r25, X
    1a18:	91 50       	subi	r25, 0x01	; 1
    1a1a:	9c 93       	st	X, r25
    1a1c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a1e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a20:	10 97       	sbiw	r26, 0x00	; 0
    1a22:	09 f1       	breq	.+66     	; 0x1a66 <xTaskIncrementTick+0x186>
    1a24:	c2 89       	ldd	r28, Z+18	; 0x12
    1a26:	d3 89       	ldd	r29, Z+19	; 0x13
    1a28:	44 89       	ldd	r20, Z+20	; 0x14
    1a2a:	55 89       	ldd	r21, Z+21	; 0x15
    1a2c:	5f 83       	std	Y+7, r21	; 0x07
    1a2e:	4e 83       	std	Y+6, r20	; 0x06
    1a30:	c4 89       	ldd	r28, Z+20	; 0x14
    1a32:	d5 89       	ldd	r29, Z+21	; 0x15
    1a34:	42 89       	ldd	r20, Z+18	; 0x12
    1a36:	53 89       	ldd	r21, Z+19	; 0x13
    1a38:	5d 83       	std	Y+5, r21	; 0x05
    1a3a:	4c 83       	std	Y+4, r20	; 0x04
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	6d 91       	ld	r22, X+
    1a40:	7c 91       	ld	r23, X
    1a42:	12 97       	sbiw	r26, 0x02	; 2
    1a44:	af 01       	movw	r20, r30
    1a46:	42 5f       	subi	r20, 0xF2	; 242
    1a48:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4a:	64 17       	cp	r22, r20
    1a4c:	75 07       	cpc	r23, r21
    1a4e:	31 f4       	brne	.+12     	; 0x1a5c <xTaskIncrementTick+0x17c>
    1a50:	44 89       	ldd	r20, Z+20	; 0x14
    1a52:	55 89       	ldd	r21, Z+21	; 0x15
    1a54:	12 96       	adiw	r26, 0x02	; 2
    1a56:	5c 93       	st	X, r21
    1a58:	4e 93       	st	-X, r20
    1a5a:	11 97       	sbiw	r26, 0x01	; 1
    1a5c:	11 8e       	std	Z+25, r1	; 0x19
    1a5e:	10 8e       	std	Z+24, r1	; 0x18
    1a60:	9c 91       	ld	r25, X
    1a62:	91 50       	subi	r25, 0x01	; 1
    1a64:	9c 93       	st	X, r25
    1a66:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a68:	90 91 67 0d 	lds	r25, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    1a6c:	9a 17       	cp	r25, r26
    1a6e:	10 f4       	brcc	.+4      	; 0x1a74 <xTaskIncrementTick+0x194>
    1a70:	a0 93 67 0d 	sts	0x0D67, r26	; 0x800d67 <uxTopReadyPriority>
    1a74:	9b e0       	ldi	r25, 0x0B	; 11
    1a76:	9a 9f       	mul	r25, r26
    1a78:	d0 01       	movw	r26, r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	a7 55       	subi	r26, 0x57	; 87
    1a7e:	b2 4f       	sbci	r27, 0xF2	; 242
    1a80:	11 96       	adiw	r26, 0x01	; 1
    1a82:	0d 90       	ld	r0, X+
    1a84:	bc 91       	ld	r27, X
    1a86:	a0 2d       	mov	r26, r0
    1a88:	b7 83       	std	Z+7, r27	; 0x07
    1a8a:	a6 83       	std	Z+6, r26	; 0x06
    1a8c:	16 96       	adiw	r26, 0x06	; 6
    1a8e:	4d 91       	ld	r20, X+
    1a90:	5c 91       	ld	r21, X
    1a92:	17 97       	sbiw	r26, 0x07	; 7
    1a94:	51 87       	std	Z+9, r21	; 0x09
    1a96:	40 87       	std	Z+8, r20	; 0x08
    1a98:	16 96       	adiw	r26, 0x06	; 6
    1a9a:	cd 91       	ld	r28, X+
    1a9c:	dc 91       	ld	r29, X
    1a9e:	17 97       	sbiw	r26, 0x07	; 7
    1aa0:	3d 83       	std	Y+5, r19	; 0x05
    1aa2:	2c 83       	std	Y+4, r18	; 0x04
    1aa4:	17 96       	adiw	r26, 0x07	; 7
    1aa6:	3c 93       	st	X, r19
    1aa8:	2e 93       	st	-X, r18
    1aaa:	16 97       	sbiw	r26, 0x06	; 6
    1aac:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1aae:	9a 9f       	mul	r25, r26
    1ab0:	d0 01       	movw	r26, r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	a7 55       	subi	r26, 0x57	; 87
    1ab6:	b2 4f       	sbci	r27, 0xF2	; 242
    1ab8:	b5 87       	std	Z+13, r27	; 0x0d
    1aba:	a4 87       	std	Z+12, r26	; 0x0c
    1abc:	9c 91       	ld	r25, X
    1abe:	9f 5f       	subi	r25, 0xFF	; 255
    1ac0:	9c 93       	st	X, r25
    1ac2:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ac4:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1ac8:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1acc:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ace:	29 17       	cp	r18, r25
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <xTaskIncrementTick+0x1f4>
    1ad2:	4f cf       	rjmp	.-354    	; 0x1972 <xTaskIncrementTick+0x92>
    1ad4:	51 cf       	rjmp	.-350    	; 0x1978 <xTaskIncrementTick+0x98>
    1ad6:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1ada:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1ade:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1ae0:	9b e0       	ldi	r25, 0x0B	; 11
    1ae2:	e9 9f       	mul	r30, r25
    1ae4:	f0 01       	movw	r30, r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	e7 55       	subi	r30, 0x57	; 87
    1aea:	f2 4f       	sbci	r31, 0xF2	; 242
    1aec:	90 81       	ld	r25, Z
    1aee:	92 30       	cpi	r25, 0x02	; 2
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <xTaskIncrementTick+0x214>
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <xYieldPending>
    1af8:	91 11       	cpse	r25, r1
    1afa:	16 c0       	rjmp	.+44     	; 0x1b28 <xTaskIncrementTick+0x248>
    1afc:	16 c0       	rjmp	.+44     	; 0x1b2a <xTaskIncrementTick+0x24a>
    1afe:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <xPendedTicks>
    1b02:	90 91 63 0d 	lds	r25, 0x0D63	; 0x800d63 <xPendedTicks+0x1>
    1b06:	a0 91 64 0d 	lds	r26, 0x0D64	; 0x800d64 <xPendedTicks+0x2>
    1b0a:	b0 91 65 0d 	lds	r27, 0x0D65	; 0x800d65 <xPendedTicks+0x3>
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	a1 1d       	adc	r26, r1
    1b12:	b1 1d       	adc	r27, r1
    1b14:	80 93 62 0d 	sts	0x0D62, r24	; 0x800d62 <xPendedTicks>
    1b18:	90 93 63 0d 	sts	0x0D63, r25	; 0x800d63 <xPendedTicks+0x1>
    1b1c:	a0 93 64 0d 	sts	0x0D64, r26	; 0x800d64 <xPendedTicks+0x2>
    1b20:	b0 93 65 0d 	sts	0x0D65, r27	; 0x800d65 <xPendedTicks+0x3>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <xTaskIncrementTick+0x24a>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	08 95       	ret

00001b38 <xTaskResumeAll>:
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	0f 92       	push	r0
    1b4a:	80 91 58 0d 	lds	r24, 0x0D58	; 0x800d58 <uxSchedulerSuspended>
    1b4e:	81 50       	subi	r24, 0x01	; 1
    1b50:	80 93 58 0d 	sts	0x0D58, r24	; 0x800d58 <uxSchedulerSuspended>
    1b54:	80 91 58 0d 	lds	r24, 0x0D58	; 0x800d58 <uxSchedulerSuspended>
    1b58:	81 11       	cpse	r24, r1
    1b5a:	be c0       	rjmp	.+380    	; 0x1cd8 <xTaskResumeAll+0x1a0>
    1b5c:	80 91 6c 0d 	lds	r24, 0x0D6C	; 0x800d6c <uxCurrentNumberOfTasks>
    1b60:	81 11       	cpse	r24, r1
    1b62:	88 c0       	rjmp	.+272    	; 0x1c74 <xTaskResumeAll+0x13c>
    1b64:	bc c0       	rjmp	.+376    	; 0x1cde <xTaskResumeAll+0x1a6>
    1b66:	e0 91 8b 0d 	lds	r30, 0x0D8B	; 0x800d8b <xPendingReadyList+0x7>
    1b6a:	f0 91 8c 0d 	lds	r31, 0x0D8C	; 0x800d8c <xPendingReadyList+0x8>
    1b6e:	00 84       	ldd	r0, Z+8	; 0x08
    1b70:	f1 85       	ldd	r31, Z+9	; 0x09
    1b72:	e0 2d       	mov	r30, r0
    1b74:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b76:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b78:	c2 89       	ldd	r28, Z+18	; 0x12
    1b7a:	d3 89       	ldd	r29, Z+19	; 0x13
    1b7c:	84 89       	ldd	r24, Z+20	; 0x14
    1b7e:	95 89       	ldd	r25, Z+21	; 0x15
    1b80:	9f 83       	std	Y+7, r25	; 0x07
    1b82:	8e 83       	std	Y+6, r24	; 0x06
    1b84:	c4 89       	ldd	r28, Z+20	; 0x14
    1b86:	d5 89       	ldd	r29, Z+21	; 0x15
    1b88:	82 89       	ldd	r24, Z+18	; 0x12
    1b8a:	93 89       	ldd	r25, Z+19	; 0x13
    1b8c:	9d 83       	std	Y+5, r25	; 0x05
    1b8e:	8c 83       	std	Y+4, r24	; 0x04
    1b90:	11 96       	adiw	r26, 0x01	; 1
    1b92:	2d 91       	ld	r18, X+
    1b94:	3c 91       	ld	r19, X
    1b96:	12 97       	sbiw	r26, 0x02	; 2
    1b98:	cf 01       	movw	r24, r30
    1b9a:	0e 96       	adiw	r24, 0x0e	; 14
    1b9c:	28 17       	cp	r18, r24
    1b9e:	39 07       	cpc	r19, r25
    1ba0:	31 f4       	brne	.+12     	; 0x1bae <xTaskResumeAll+0x76>
    1ba2:	84 89       	ldd	r24, Z+20	; 0x14
    1ba4:	95 89       	ldd	r25, Z+21	; 0x15
    1ba6:	12 96       	adiw	r26, 0x02	; 2
    1ba8:	9c 93       	st	X, r25
    1baa:	8e 93       	st	-X, r24
    1bac:	11 97       	sbiw	r26, 0x01	; 1
    1bae:	11 8e       	std	Z+25, r1	; 0x19
    1bb0:	10 8e       	std	Z+24, r1	; 0x18
    1bb2:	8c 91       	ld	r24, X
    1bb4:	81 50       	subi	r24, 0x01	; 1
    1bb6:	8c 93       	st	X, r24
    1bb8:	a4 85       	ldd	r26, Z+12	; 0x0c
    1bba:	b5 85       	ldd	r27, Z+13	; 0x0d
    1bbc:	c6 81       	ldd	r28, Z+6	; 0x06
    1bbe:	d7 81       	ldd	r29, Z+7	; 0x07
    1bc0:	80 85       	ldd	r24, Z+8	; 0x08
    1bc2:	91 85       	ldd	r25, Z+9	; 0x09
    1bc4:	9f 83       	std	Y+7, r25	; 0x07
    1bc6:	8e 83       	std	Y+6, r24	; 0x06
    1bc8:	c0 85       	ldd	r28, Z+8	; 0x08
    1bca:	d1 85       	ldd	r29, Z+9	; 0x09
    1bcc:	86 81       	ldd	r24, Z+6	; 0x06
    1bce:	97 81       	ldd	r25, Z+7	; 0x07
    1bd0:	9d 83       	std	Y+5, r25	; 0x05
    1bd2:	8c 83       	std	Y+4, r24	; 0x04
    1bd4:	11 96       	adiw	r26, 0x01	; 1
    1bd6:	8d 91       	ld	r24, X+
    1bd8:	9c 91       	ld	r25, X
    1bda:	12 97       	sbiw	r26, 0x02	; 2
    1bdc:	9f 01       	movw	r18, r30
    1bde:	2e 5f       	subi	r18, 0xFE	; 254
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	82 17       	cp	r24, r18
    1be4:	93 07       	cpc	r25, r19
    1be6:	31 f4       	brne	.+12     	; 0x1bf4 <xTaskResumeAll+0xbc>
    1be8:	80 85       	ldd	r24, Z+8	; 0x08
    1bea:	91 85       	ldd	r25, Z+9	; 0x09
    1bec:	12 96       	adiw	r26, 0x02	; 2
    1bee:	9c 93       	st	X, r25
    1bf0:	8e 93       	st	-X, r24
    1bf2:	11 97       	sbiw	r26, 0x01	; 1
    1bf4:	15 86       	std	Z+13, r1	; 0x0d
    1bf6:	14 86       	std	Z+12, r1	; 0x0c
    1bf8:	8c 91       	ld	r24, X
    1bfa:	81 50       	subi	r24, 0x01	; 1
    1bfc:	8c 93       	st	X, r24
    1bfe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c00:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    1c04:	8a 17       	cp	r24, r26
    1c06:	10 f4       	brcc	.+4      	; 0x1c0c <xTaskResumeAll+0xd4>
    1c08:	a0 93 67 0d 	sts	0x0D67, r26	; 0x800d67 <uxTopReadyPriority>
    1c0c:	8b e0       	ldi	r24, 0x0B	; 11
    1c0e:	8a 9f       	mul	r24, r26
    1c10:	d0 01       	movw	r26, r0
    1c12:	11 24       	eor	r1, r1
    1c14:	a7 55       	subi	r26, 0x57	; 87
    1c16:	b2 4f       	sbci	r27, 0xF2	; 242
    1c18:	11 96       	adiw	r26, 0x01	; 1
    1c1a:	0d 90       	ld	r0, X+
    1c1c:	bc 91       	ld	r27, X
    1c1e:	a0 2d       	mov	r26, r0
    1c20:	b7 83       	std	Z+7, r27	; 0x07
    1c22:	a6 83       	std	Z+6, r26	; 0x06
    1c24:	16 96       	adiw	r26, 0x06	; 6
    1c26:	4d 91       	ld	r20, X+
    1c28:	5c 91       	ld	r21, X
    1c2a:	17 97       	sbiw	r26, 0x07	; 7
    1c2c:	51 87       	std	Z+9, r21	; 0x09
    1c2e:	40 87       	std	Z+8, r20	; 0x08
    1c30:	16 96       	adiw	r26, 0x06	; 6
    1c32:	cd 91       	ld	r28, X+
    1c34:	dc 91       	ld	r29, X
    1c36:	17 97       	sbiw	r26, 0x07	; 7
    1c38:	3d 83       	std	Y+5, r19	; 0x05
    1c3a:	2c 83       	std	Y+4, r18	; 0x04
    1c3c:	17 96       	adiw	r26, 0x07	; 7
    1c3e:	3c 93       	st	X, r19
    1c40:	2e 93       	st	-X, r18
    1c42:	16 97       	sbiw	r26, 0x06	; 6
    1c44:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c46:	8a 9f       	mul	r24, r26
    1c48:	d0 01       	movw	r26, r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	a7 55       	subi	r26, 0x57	; 87
    1c4e:	b2 4f       	sbci	r27, 0xF2	; 242
    1c50:	b5 87       	std	Z+13, r27	; 0x0d
    1c52:	a4 87       	std	Z+12, r26	; 0x0c
    1c54:	8c 91       	ld	r24, X
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	8c 93       	st	X, r24
    1c5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c5c:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1c60:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1c64:	5a 96       	adiw	r26, 0x1a	; 26
    1c66:	8c 91       	ld	r24, X
    1c68:	98 17       	cp	r25, r24
    1c6a:	30 f0       	brcs	.+12     	; 0x1c78 <xTaskResumeAll+0x140>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <xYieldPending>
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <xTaskResumeAll+0x140>
    1c74:	e0 e0       	ldi	r30, 0x00	; 0
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 91 84 0d 	lds	r24, 0x0D84	; 0x800d84 <xPendingReadyList>
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	73 cf       	rjmp	.-282    	; 0x1b66 <xTaskResumeAll+0x2e>
    1c80:	ef 2b       	or	r30, r31
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <xTaskResumeAll+0x14e>
    1c84:	90 db       	rcall	.-2272   	; 0x13a6 <prvResetNextTaskUnblockTime>
    1c86:	c0 90 62 0d 	lds	r12, 0x0D62	; 0x800d62 <xPendedTicks>
    1c8a:	d0 90 63 0d 	lds	r13, 0x0D63	; 0x800d63 <xPendedTicks+0x1>
    1c8e:	e0 90 64 0d 	lds	r14, 0x0D64	; 0x800d64 <xPendedTicks+0x2>
    1c92:	f0 90 65 0d 	lds	r15, 0x0D65	; 0x800d65 <xPendedTicks+0x3>
    1c96:	c1 14       	cp	r12, r1
    1c98:	d1 04       	cpc	r13, r1
    1c9a:	e1 04       	cpc	r14, r1
    1c9c:	f1 04       	cpc	r15, r1
    1c9e:	a1 f0       	breq	.+40     	; 0x1cc8 <xTaskResumeAll+0x190>
    1ca0:	1f de       	rcall	.-962    	; 0x18e0 <xTaskIncrementTick>
    1ca2:	88 23       	and	r24, r24
    1ca4:	19 f0       	breq	.+6      	; 0x1cac <xTaskResumeAll+0x174>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <xYieldPending>
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	c8 1a       	sub	r12, r24
    1cb0:	d1 08       	sbc	r13, r1
    1cb2:	e1 08       	sbc	r14, r1
    1cb4:	f1 08       	sbc	r15, r1
    1cb6:	a1 f7       	brne	.-24     	; 0x1ca0 <xTaskResumeAll+0x168>
    1cb8:	10 92 62 0d 	sts	0x0D62, r1	; 0x800d62 <xPendedTicks>
    1cbc:	10 92 63 0d 	sts	0x0D63, r1	; 0x800d63 <xPendedTicks+0x1>
    1cc0:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <xPendedTicks+0x2>
    1cc4:	10 92 65 0d 	sts	0x0D65, r1	; 0x800d65 <xPendedTicks+0x3>
    1cc8:	80 91 61 0d 	lds	r24, 0x0D61	; 0x800d61 <xYieldPending>
    1ccc:	88 23       	and	r24, r24
    1cce:	31 f0       	breq	.+12     	; 0x1cdc <xTaskResumeAll+0x1a4>
    1cd0:	0e 94 a1 05 	call	0xb42	; 0xb42 <vPortYield>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	03 c0       	rjmp	.+6      	; 0x1cde <xTaskResumeAll+0x1a6>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <xTaskResumeAll+0x1a6>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	08 95       	ret

00001cf0 <vTaskDelay>:
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	6b 01       	movw	r12, r22
    1cfa:	7c 01       	movw	r14, r24
    1cfc:	67 2b       	or	r22, r23
    1cfe:	68 2b       	or	r22, r24
    1d00:	69 2b       	or	r22, r25
    1d02:	39 f0       	breq	.+14     	; 0x1d12 <vTaskDelay+0x22>
    1d04:	d9 dd       	rcall	.-1102   	; 0x18b8 <vTaskSuspendAll>
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	c7 01       	movw	r24, r14
    1d0a:	b6 01       	movw	r22, r12
    1d0c:	b5 dc       	rcall	.-1686   	; 0x1678 <prvAddCurrentTaskToDelayedList>
    1d0e:	14 df       	rcall	.-472    	; 0x1b38 <xTaskResumeAll>
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <vTaskDelay+0x24>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	81 11       	cpse	r24, r1
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vTaskDelay+0x2c>
    1d18:	0e 94 a1 05 	call	0xb42	; 0xb42 <vPortYield>
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	08 95       	ret

00001d26 <vTaskSwitchContext>:
    1d26:	80 91 58 0d 	lds	r24, 0x0D58	; 0x800d58 <uxSchedulerSuspended>
    1d2a:	88 23       	and	r24, r24
    1d2c:	21 f0       	breq	.+8      	; 0x1d36 <vTaskSwitchContext+0x10>
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <xYieldPending>
    1d34:	08 95       	ret
    1d36:	10 92 61 0d 	sts	0x0D61, r1	; 0x800d61 <xYieldPending>
    1d3a:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1d3e:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1d42:	20 81       	ld	r18, Z
    1d44:	31 81       	ldd	r19, Z+1	; 0x01
    1d46:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1d4a:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1d4e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d50:	94 8d       	ldd	r25, Z+28	; 0x1c
    1d52:	82 17       	cp	r24, r18
    1d54:	93 07       	cpc	r25, r19
    1d56:	58 f0       	brcs	.+22     	; 0x1d6e <vTaskSwitchContext+0x48>
    1d58:	60 91 17 0e 	lds	r22, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1d5c:	70 91 18 0e 	lds	r23, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1d60:	63 5e       	subi	r22, 0xE3	; 227
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1d68:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1d6c:	4e d7       	rcall	.+3740   	; 0x2c0a <vApplicationStackOverflowHook>
    1d6e:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    1d72:	01 c0       	rjmp	.+2      	; 0x1d76 <vTaskSwitchContext+0x50>
    1d74:	81 50       	subi	r24, 0x01	; 1
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	9b e0       	ldi	r25, 0x0B	; 11
    1d7c:	92 9f       	mul	r25, r18
    1d7e:	f0 01       	movw	r30, r0
    1d80:	93 9f       	mul	r25, r19
    1d82:	f0 0d       	add	r31, r0
    1d84:	11 24       	eor	r1, r1
    1d86:	e7 55       	subi	r30, 0x57	; 87
    1d88:	f2 4f       	sbci	r31, 0xF2	; 242
    1d8a:	90 81       	ld	r25, Z
    1d8c:	99 23       	and	r25, r25
    1d8e:	91 f3       	breq	.-28     	; 0x1d74 <vTaskSwitchContext+0x4e>
    1d90:	9b e0       	ldi	r25, 0x0B	; 11
    1d92:	92 9f       	mul	r25, r18
    1d94:	a0 01       	movw	r20, r0
    1d96:	93 9f       	mul	r25, r19
    1d98:	50 0d       	add	r21, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	df 01       	movw	r26, r30
    1d9e:	01 80       	ldd	r0, Z+1	; 0x01
    1da0:	f2 81       	ldd	r31, Z+2	; 0x02
    1da2:	e0 2d       	mov	r30, r0
    1da4:	04 80       	ldd	r0, Z+4	; 0x04
    1da6:	f5 81       	ldd	r31, Z+5	; 0x05
    1da8:	e0 2d       	mov	r30, r0
    1daa:	12 96       	adiw	r26, 0x02	; 2
    1dac:	fc 93       	st	X, r31
    1dae:	ee 93       	st	-X, r30
    1db0:	11 97       	sbiw	r26, 0x01	; 1
    1db2:	44 55       	subi	r20, 0x54	; 84
    1db4:	52 4f       	sbci	r21, 0xF2	; 242
    1db6:	e4 17       	cp	r30, r20
    1db8:	f5 07       	cpc	r31, r21
    1dba:	29 f4       	brne	.+10     	; 0x1dc6 <vTaskSwitchContext+0xa0>
    1dbc:	44 81       	ldd	r20, Z+4	; 0x04
    1dbe:	55 81       	ldd	r21, Z+5	; 0x05
    1dc0:	fd 01       	movw	r30, r26
    1dc2:	52 83       	std	Z+2, r21	; 0x02
    1dc4:	41 83       	std	Z+1, r20	; 0x01
    1dc6:	9b e0       	ldi	r25, 0x0B	; 11
    1dc8:	92 9f       	mul	r25, r18
    1dca:	f0 01       	movw	r30, r0
    1dcc:	93 9f       	mul	r25, r19
    1dce:	f0 0d       	add	r31, r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	e7 55       	subi	r30, 0x57	; 87
    1dd4:	f2 4f       	sbci	r31, 0xF2	; 242
    1dd6:	01 80       	ldd	r0, Z+1	; 0x01
    1dd8:	f2 81       	ldd	r31, Z+2	; 0x02
    1dda:	e0 2d       	mov	r30, r0
    1ddc:	20 85       	ldd	r18, Z+8	; 0x08
    1dde:	31 85       	ldd	r19, Z+9	; 0x09
    1de0:	30 93 18 0e 	sts	0x0E18, r19	; 0x800e18 <pxCurrentTCB+0x1>
    1de4:	20 93 17 0e 	sts	0x0E17, r18	; 0x800e17 <pxCurrentTCB>
    1de8:	80 93 67 0d 	sts	0x0D67, r24	; 0x800d67 <uxTopReadyPriority>
    1dec:	08 95       	ret

00001dee <vTaskPlaceOnEventList>:
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	6a 01       	movw	r12, r20
    1df8:	7b 01       	movw	r14, r22
    1dfa:	60 91 17 0e 	lds	r22, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1dfe:	70 91 18 0e 	lds	r23, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1e02:	62 5f       	subi	r22, 0xF2	; 242
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <vListInsert>
    1e0a:	41 e0       	ldi	r20, 0x01	; 1
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	b6 01       	movw	r22, r12
    1e10:	33 dc       	rcall	.-1946   	; 0x1678 <prvAddCurrentTaskToDelayedList>
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	df 90       	pop	r13
    1e18:	cf 90       	pop	r12
    1e1a:	08 95       	ret

00001e1c <vTaskPlaceOnUnorderedEventList>:
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	fc 01       	movw	r30, r24
    1e26:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1e2a:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1e2e:	70 68       	ori	r23, 0x80	; 128
    1e30:	1e 96       	adiw	r26, 0x0e	; 14
    1e32:	4d 93       	st	X+, r20
    1e34:	5d 93       	st	X+, r21
    1e36:	6d 93       	st	X+, r22
    1e38:	7c 93       	st	X, r23
    1e3a:	51 97       	sbiw	r26, 0x11	; 17
    1e3c:	a1 81       	ldd	r26, Z+1	; 0x01
    1e3e:	b2 81       	ldd	r27, Z+2	; 0x02
    1e40:	c0 91 17 0e 	lds	r28, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1e44:	d0 91 18 0e 	lds	r29, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1e48:	bb 8b       	std	Y+19, r27	; 0x13
    1e4a:	aa 8b       	std	Y+18, r26	; 0x12
    1e4c:	c0 91 17 0e 	lds	r28, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1e50:	d0 91 18 0e 	lds	r29, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1e54:	16 96       	adiw	r26, 0x06	; 6
    1e56:	8d 91       	ld	r24, X+
    1e58:	9c 91       	ld	r25, X
    1e5a:	17 97       	sbiw	r26, 0x07	; 7
    1e5c:	9d 8b       	std	Y+21, r25	; 0x15
    1e5e:	8c 8b       	std	Y+20, r24	; 0x14
    1e60:	16 96       	adiw	r26, 0x06	; 6
    1e62:	cd 91       	ld	r28, X+
    1e64:	dc 91       	ld	r29, X
    1e66:	17 97       	sbiw	r26, 0x07	; 7
    1e68:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1e6c:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1e70:	0e 96       	adiw	r24, 0x0e	; 14
    1e72:	9d 83       	std	Y+5, r25	; 0x05
    1e74:	8c 83       	std	Y+4, r24	; 0x04
    1e76:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1e7a:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1e7e:	0e 96       	adiw	r24, 0x0e	; 14
    1e80:	17 96       	adiw	r26, 0x07	; 7
    1e82:	9c 93       	st	X, r25
    1e84:	8e 93       	st	-X, r24
    1e86:	16 97       	sbiw	r26, 0x06	; 6
    1e88:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1e8c:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1e90:	59 96       	adiw	r26, 0x19	; 25
    1e92:	fc 93       	st	X, r31
    1e94:	ee 93       	st	-X, r30
    1e96:	58 97       	sbiw	r26, 0x18	; 24
    1e98:	80 81       	ld	r24, Z
    1e9a:	8f 5f       	subi	r24, 0xFF	; 255
    1e9c:	80 83       	st	Z, r24
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	c9 01       	movw	r24, r18
    1ea2:	b8 01       	movw	r22, r16
    1ea4:	e9 db       	rcall	.-2094   	; 0x1678 <prvAddCurrentTaskToDelayedList>
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	08 95       	ret

00001eb0 <vTaskPlaceOnEventListRestricted>:
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	ba 01       	movw	r22, r20
    1eba:	a1 81       	ldd	r26, Z+1	; 0x01
    1ebc:	b2 81       	ldd	r27, Z+2	; 0x02
    1ebe:	c0 91 17 0e 	lds	r28, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1ec2:	d0 91 18 0e 	lds	r29, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1ec6:	bb 8b       	std	Y+19, r27	; 0x13
    1ec8:	aa 8b       	std	Y+18, r26	; 0x12
    1eca:	c0 91 17 0e 	lds	r28, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1ece:	d0 91 18 0e 	lds	r29, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1ed2:	16 96       	adiw	r26, 0x06	; 6
    1ed4:	4d 91       	ld	r20, X+
    1ed6:	5c 91       	ld	r21, X
    1ed8:	17 97       	sbiw	r26, 0x07	; 7
    1eda:	5d 8b       	std	Y+21, r21	; 0x15
    1edc:	4c 8b       	std	Y+20, r20	; 0x14
    1ede:	16 96       	adiw	r26, 0x06	; 6
    1ee0:	cd 91       	ld	r28, X+
    1ee2:	dc 91       	ld	r29, X
    1ee4:	17 97       	sbiw	r26, 0x07	; 7
    1ee6:	40 91 17 0e 	lds	r20, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1eea:	50 91 18 0e 	lds	r21, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1eee:	42 5f       	subi	r20, 0xF2	; 242
    1ef0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef2:	5d 83       	std	Y+5, r21	; 0x05
    1ef4:	4c 83       	std	Y+4, r20	; 0x04
    1ef6:	40 91 17 0e 	lds	r20, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1efa:	50 91 18 0e 	lds	r21, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1efe:	42 5f       	subi	r20, 0xF2	; 242
    1f00:	5f 4f       	sbci	r21, 0xFF	; 255
    1f02:	17 96       	adiw	r26, 0x07	; 7
    1f04:	5c 93       	st	X, r21
    1f06:	4e 93       	st	-X, r20
    1f08:	16 97       	sbiw	r26, 0x06	; 6
    1f0a:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    1f0e:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    1f12:	59 96       	adiw	r26, 0x19	; 25
    1f14:	fc 93       	st	X, r31
    1f16:	ee 93       	st	-X, r30
    1f18:	58 97       	sbiw	r26, 0x18	; 24
    1f1a:	30 81       	ld	r19, Z
    1f1c:	3f 5f       	subi	r19, 0xFF	; 255
    1f1e:	30 83       	st	Z, r19
    1f20:	22 23       	and	r18, r18
    1f22:	19 f0       	breq	.+6      	; 0x1f2a <vTaskPlaceOnEventListRestricted+0x7a>
    1f24:	6f ef       	ldi	r22, 0xFF	; 255
    1f26:	7f ef       	ldi	r23, 0xFF	; 255
    1f28:	cb 01       	movw	r24, r22
    1f2a:	42 2f       	mov	r20, r18
    1f2c:	a5 db       	rcall	.-2230   	; 0x1678 <prvAddCurrentTaskToDelayedList>
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	08 95       	ret

00001f34 <xTaskRemoveFromEventList>:
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	dc 01       	movw	r26, r24
    1f3a:	17 96       	adiw	r26, 0x07	; 7
    1f3c:	ed 91       	ld	r30, X+
    1f3e:	fc 91       	ld	r31, X
    1f40:	18 97       	sbiw	r26, 0x08	; 8
    1f42:	00 84       	ldd	r0, Z+8	; 0x08
    1f44:	f1 85       	ldd	r31, Z+9	; 0x09
    1f46:	e0 2d       	mov	r30, r0
    1f48:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f4a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f4c:	c2 89       	ldd	r28, Z+18	; 0x12
    1f4e:	d3 89       	ldd	r29, Z+19	; 0x13
    1f50:	84 89       	ldd	r24, Z+20	; 0x14
    1f52:	95 89       	ldd	r25, Z+21	; 0x15
    1f54:	9f 83       	std	Y+7, r25	; 0x07
    1f56:	8e 83       	std	Y+6, r24	; 0x06
    1f58:	c4 89       	ldd	r28, Z+20	; 0x14
    1f5a:	d5 89       	ldd	r29, Z+21	; 0x15
    1f5c:	82 89       	ldd	r24, Z+18	; 0x12
    1f5e:	93 89       	ldd	r25, Z+19	; 0x13
    1f60:	9d 83       	std	Y+5, r25	; 0x05
    1f62:	8c 83       	std	Y+4, r24	; 0x04
    1f64:	11 96       	adiw	r26, 0x01	; 1
    1f66:	8d 91       	ld	r24, X+
    1f68:	9c 91       	ld	r25, X
    1f6a:	12 97       	sbiw	r26, 0x02	; 2
    1f6c:	9f 01       	movw	r18, r30
    1f6e:	22 5f       	subi	r18, 0xF2	; 242
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
    1f72:	82 17       	cp	r24, r18
    1f74:	93 07       	cpc	r25, r19
    1f76:	31 f4       	brne	.+12     	; 0x1f84 <xTaskRemoveFromEventList+0x50>
    1f78:	84 89       	ldd	r24, Z+20	; 0x14
    1f7a:	95 89       	ldd	r25, Z+21	; 0x15
    1f7c:	12 96       	adiw	r26, 0x02	; 2
    1f7e:	9c 93       	st	X, r25
    1f80:	8e 93       	st	-X, r24
    1f82:	11 97       	sbiw	r26, 0x01	; 1
    1f84:	11 8e       	std	Z+25, r1	; 0x19
    1f86:	10 8e       	std	Z+24, r1	; 0x18
    1f88:	8c 91       	ld	r24, X
    1f8a:	81 50       	subi	r24, 0x01	; 1
    1f8c:	8c 93       	st	X, r24
    1f8e:	80 91 58 0d 	lds	r24, 0x0D58	; 0x800d58 <uxSchedulerSuspended>
    1f92:	81 11       	cpse	r24, r1
    1f94:	52 c0       	rjmp	.+164    	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    1f96:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f98:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f9a:	c6 81       	ldd	r28, Z+6	; 0x06
    1f9c:	d7 81       	ldd	r29, Z+7	; 0x07
    1f9e:	80 85       	ldd	r24, Z+8	; 0x08
    1fa0:	91 85       	ldd	r25, Z+9	; 0x09
    1fa2:	9f 83       	std	Y+7, r25	; 0x07
    1fa4:	8e 83       	std	Y+6, r24	; 0x06
    1fa6:	c0 85       	ldd	r28, Z+8	; 0x08
    1fa8:	d1 85       	ldd	r29, Z+9	; 0x09
    1faa:	86 81       	ldd	r24, Z+6	; 0x06
    1fac:	97 81       	ldd	r25, Z+7	; 0x07
    1fae:	9d 83       	std	Y+5, r25	; 0x05
    1fb0:	8c 83       	std	Y+4, r24	; 0x04
    1fb2:	11 96       	adiw	r26, 0x01	; 1
    1fb4:	8d 91       	ld	r24, X+
    1fb6:	9c 91       	ld	r25, X
    1fb8:	12 97       	sbiw	r26, 0x02	; 2
    1fba:	9f 01       	movw	r18, r30
    1fbc:	2e 5f       	subi	r18, 0xFE	; 254
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	82 17       	cp	r24, r18
    1fc2:	93 07       	cpc	r25, r19
    1fc4:	31 f4       	brne	.+12     	; 0x1fd2 <xTaskRemoveFromEventList+0x9e>
    1fc6:	80 85       	ldd	r24, Z+8	; 0x08
    1fc8:	91 85       	ldd	r25, Z+9	; 0x09
    1fca:	12 96       	adiw	r26, 0x02	; 2
    1fcc:	9c 93       	st	X, r25
    1fce:	8e 93       	st	-X, r24
    1fd0:	11 97       	sbiw	r26, 0x01	; 1
    1fd2:	15 86       	std	Z+13, r1	; 0x0d
    1fd4:	14 86       	std	Z+12, r1	; 0x0c
    1fd6:	8c 91       	ld	r24, X
    1fd8:	81 50       	subi	r24, 0x01	; 1
    1fda:	8c 93       	st	X, r24
    1fdc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fde:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    1fe2:	8a 17       	cp	r24, r26
    1fe4:	10 f4       	brcc	.+4      	; 0x1fea <xTaskRemoveFromEventList+0xb6>
    1fe6:	a0 93 67 0d 	sts	0x0D67, r26	; 0x800d67 <uxTopReadyPriority>
    1fea:	8b e0       	ldi	r24, 0x0B	; 11
    1fec:	8a 9f       	mul	r24, r26
    1fee:	d0 01       	movw	r26, r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	a7 55       	subi	r26, 0x57	; 87
    1ff4:	b2 4f       	sbci	r27, 0xF2	; 242
    1ff6:	11 96       	adiw	r26, 0x01	; 1
    1ff8:	0d 90       	ld	r0, X+
    1ffa:	bc 91       	ld	r27, X
    1ffc:	a0 2d       	mov	r26, r0
    1ffe:	b7 83       	std	Z+7, r27	; 0x07
    2000:	a6 83       	std	Z+6, r26	; 0x06
    2002:	16 96       	adiw	r26, 0x06	; 6
    2004:	4d 91       	ld	r20, X+
    2006:	5c 91       	ld	r21, X
    2008:	17 97       	sbiw	r26, 0x07	; 7
    200a:	51 87       	std	Z+9, r21	; 0x09
    200c:	40 87       	std	Z+8, r20	; 0x08
    200e:	16 96       	adiw	r26, 0x06	; 6
    2010:	cd 91       	ld	r28, X+
    2012:	dc 91       	ld	r29, X
    2014:	17 97       	sbiw	r26, 0x07	; 7
    2016:	3d 83       	std	Y+5, r19	; 0x05
    2018:	2c 83       	std	Y+4, r18	; 0x04
    201a:	17 96       	adiw	r26, 0x07	; 7
    201c:	3c 93       	st	X, r19
    201e:	2e 93       	st	-X, r18
    2020:	16 97       	sbiw	r26, 0x06	; 6
    2022:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2024:	8a 9f       	mul	r24, r26
    2026:	d0 01       	movw	r26, r0
    2028:	11 24       	eor	r1, r1
    202a:	a7 55       	subi	r26, 0x57	; 87
    202c:	b2 4f       	sbci	r27, 0xF2	; 242
    202e:	b5 87       	std	Z+13, r27	; 0x0d
    2030:	a4 87       	std	Z+12, r26	; 0x0c
    2032:	8c 91       	ld	r24, X
    2034:	8f 5f       	subi	r24, 0xFF	; 255
    2036:	8c 93       	st	X, r24
    2038:	1c c0       	rjmp	.+56     	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
    203a:	44 e8       	ldi	r20, 0x84	; 132
    203c:	5d e0       	ldi	r21, 0x0D	; 13
    203e:	da 01       	movw	r26, r20
    2040:	11 96       	adiw	r26, 0x01	; 1
    2042:	cd 91       	ld	r28, X+
    2044:	dc 91       	ld	r29, X
    2046:	12 97       	sbiw	r26, 0x02	; 2
    2048:	d3 8b       	std	Z+19, r29	; 0x13
    204a:	c2 8b       	std	Z+18, r28	; 0x12
    204c:	8e 81       	ldd	r24, Y+6	; 0x06
    204e:	9f 81       	ldd	r25, Y+7	; 0x07
    2050:	95 8b       	std	Z+21, r25	; 0x15
    2052:	84 8b       	std	Z+20, r24	; 0x14
    2054:	8e 81       	ldd	r24, Y+6	; 0x06
    2056:	9f 81       	ldd	r25, Y+7	; 0x07
    2058:	dc 01       	movw	r26, r24
    205a:	15 96       	adiw	r26, 0x05	; 5
    205c:	3c 93       	st	X, r19
    205e:	2e 93       	st	-X, r18
    2060:	14 97       	sbiw	r26, 0x04	; 4
    2062:	3f 83       	std	Y+7, r19	; 0x07
    2064:	2e 83       	std	Y+6, r18	; 0x06
    2066:	51 8f       	std	Z+25, r21	; 0x19
    2068:	40 8f       	std	Z+24, r20	; 0x18
    206a:	da 01       	movw	r26, r20
    206c:	8c 91       	ld	r24, X
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	8c 93       	st	X, r24
    2072:	92 8d       	ldd	r25, Z+26	; 0x1a
    2074:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    2078:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    207c:	82 8d       	ldd	r24, Z+26	; 0x1a
    207e:	89 17       	cp	r24, r25
    2080:	20 f4       	brcc	.+8      	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <xYieldPending>
    2088:	01 c0       	rjmp	.+2      	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	08 95       	ret

00002092 <vTaskRemoveFromUnorderedEventList>:
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	dc 01       	movw	r26, r24
    2098:	70 68       	ori	r23, 0x80	; 128
    209a:	4d 93       	st	X+, r20
    209c:	5d 93       	st	X+, r21
    209e:	6d 93       	st	X+, r22
    20a0:	7c 93       	st	X, r23
    20a2:	13 97       	sbiw	r26, 0x03	; 3
    20a4:	18 96       	adiw	r26, 0x08	; 8
    20a6:	ed 91       	ld	r30, X+
    20a8:	fc 91       	ld	r31, X
    20aa:	19 97       	sbiw	r26, 0x09	; 9
    20ac:	1a 96       	adiw	r26, 0x0a	; 10
    20ae:	4d 91       	ld	r20, X+
    20b0:	5c 91       	ld	r21, X
    20b2:	1b 97       	sbiw	r26, 0x0b	; 11
    20b4:	14 96       	adiw	r26, 0x04	; 4
    20b6:	8d 91       	ld	r24, X+
    20b8:	9c 91       	ld	r25, X
    20ba:	15 97       	sbiw	r26, 0x05	; 5
    20bc:	16 96       	adiw	r26, 0x06	; 6
    20be:	2d 91       	ld	r18, X+
    20c0:	3c 91       	ld	r19, X
    20c2:	17 97       	sbiw	r26, 0x07	; 7
    20c4:	ec 01       	movw	r28, r24
    20c6:	3f 83       	std	Y+7, r19	; 0x07
    20c8:	2e 83       	std	Y+6, r18	; 0x06
    20ca:	16 96       	adiw	r26, 0x06	; 6
    20cc:	8d 91       	ld	r24, X+
    20ce:	9c 91       	ld	r25, X
    20d0:	17 97       	sbiw	r26, 0x07	; 7
    20d2:	14 96       	adiw	r26, 0x04	; 4
    20d4:	2d 91       	ld	r18, X+
    20d6:	3c 91       	ld	r19, X
    20d8:	15 97       	sbiw	r26, 0x05	; 5
    20da:	ec 01       	movw	r28, r24
    20dc:	3d 83       	std	Y+5, r19	; 0x05
    20de:	2c 83       	std	Y+4, r18	; 0x04
    20e0:	ea 01       	movw	r28, r20
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	a8 17       	cp	r26, r24
    20e8:	b9 07       	cpc	r27, r25
    20ea:	31 f4       	brne	.+12     	; 0x20f8 <vTaskRemoveFromUnorderedEventList+0x66>
    20ec:	16 96       	adiw	r26, 0x06	; 6
    20ee:	8d 91       	ld	r24, X+
    20f0:	9c 91       	ld	r25, X
    20f2:	17 97       	sbiw	r26, 0x07	; 7
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	1b 96       	adiw	r26, 0x0b	; 11
    20fa:	1c 92       	st	X, r1
    20fc:	1e 92       	st	-X, r1
    20fe:	1a 97       	sbiw	r26, 0x0a	; 10
    2100:	da 01       	movw	r26, r20
    2102:	8c 91       	ld	r24, X
    2104:	81 50       	subi	r24, 0x01	; 1
    2106:	8c 93       	st	X, r24
    2108:	a4 85       	ldd	r26, Z+12	; 0x0c
    210a:	b5 85       	ldd	r27, Z+13	; 0x0d
    210c:	c6 81       	ldd	r28, Z+6	; 0x06
    210e:	d7 81       	ldd	r29, Z+7	; 0x07
    2110:	80 85       	ldd	r24, Z+8	; 0x08
    2112:	91 85       	ldd	r25, Z+9	; 0x09
    2114:	9f 83       	std	Y+7, r25	; 0x07
    2116:	8e 83       	std	Y+6, r24	; 0x06
    2118:	c0 85       	ldd	r28, Z+8	; 0x08
    211a:	d1 85       	ldd	r29, Z+9	; 0x09
    211c:	86 81       	ldd	r24, Z+6	; 0x06
    211e:	97 81       	ldd	r25, Z+7	; 0x07
    2120:	9d 83       	std	Y+5, r25	; 0x05
    2122:	8c 83       	std	Y+4, r24	; 0x04
    2124:	11 96       	adiw	r26, 0x01	; 1
    2126:	8d 91       	ld	r24, X+
    2128:	9c 91       	ld	r25, X
    212a:	12 97       	sbiw	r26, 0x02	; 2
    212c:	9f 01       	movw	r18, r30
    212e:	2e 5f       	subi	r18, 0xFE	; 254
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	82 17       	cp	r24, r18
    2134:	93 07       	cpc	r25, r19
    2136:	31 f4       	brne	.+12     	; 0x2144 <vTaskRemoveFromUnorderedEventList+0xb2>
    2138:	80 85       	ldd	r24, Z+8	; 0x08
    213a:	91 85       	ldd	r25, Z+9	; 0x09
    213c:	12 96       	adiw	r26, 0x02	; 2
    213e:	9c 93       	st	X, r25
    2140:	8e 93       	st	-X, r24
    2142:	11 97       	sbiw	r26, 0x01	; 1
    2144:	15 86       	std	Z+13, r1	; 0x0d
    2146:	14 86       	std	Z+12, r1	; 0x0c
    2148:	8c 91       	ld	r24, X
    214a:	81 50       	subi	r24, 0x01	; 1
    214c:	8c 93       	st	X, r24
    214e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2150:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    2154:	8a 17       	cp	r24, r26
    2156:	10 f4       	brcc	.+4      	; 0x215c <vTaskRemoveFromUnorderedEventList+0xca>
    2158:	a0 93 67 0d 	sts	0x0D67, r26	; 0x800d67 <uxTopReadyPriority>
    215c:	8b e0       	ldi	r24, 0x0B	; 11
    215e:	8a 9f       	mul	r24, r26
    2160:	d0 01       	movw	r26, r0
    2162:	11 24       	eor	r1, r1
    2164:	a7 55       	subi	r26, 0x57	; 87
    2166:	b2 4f       	sbci	r27, 0xF2	; 242
    2168:	11 96       	adiw	r26, 0x01	; 1
    216a:	0d 90       	ld	r0, X+
    216c:	bc 91       	ld	r27, X
    216e:	a0 2d       	mov	r26, r0
    2170:	b7 83       	std	Z+7, r27	; 0x07
    2172:	a6 83       	std	Z+6, r26	; 0x06
    2174:	16 96       	adiw	r26, 0x06	; 6
    2176:	4d 91       	ld	r20, X+
    2178:	5c 91       	ld	r21, X
    217a:	17 97       	sbiw	r26, 0x07	; 7
    217c:	51 87       	std	Z+9, r21	; 0x09
    217e:	40 87       	std	Z+8, r20	; 0x08
    2180:	16 96       	adiw	r26, 0x06	; 6
    2182:	cd 91       	ld	r28, X+
    2184:	dc 91       	ld	r29, X
    2186:	17 97       	sbiw	r26, 0x07	; 7
    2188:	3d 83       	std	Y+5, r19	; 0x05
    218a:	2c 83       	std	Y+4, r18	; 0x04
    218c:	17 96       	adiw	r26, 0x07	; 7
    218e:	3c 93       	st	X, r19
    2190:	2e 93       	st	-X, r18
    2192:	16 97       	sbiw	r26, 0x06	; 6
    2194:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2196:	8a 9f       	mul	r24, r26
    2198:	d0 01       	movw	r26, r0
    219a:	11 24       	eor	r1, r1
    219c:	a7 55       	subi	r26, 0x57	; 87
    219e:	b2 4f       	sbci	r27, 0xF2	; 242
    21a0:	b5 87       	std	Z+13, r27	; 0x0d
    21a2:	a4 87       	std	Z+12, r26	; 0x0c
    21a4:	8c 91       	ld	r24, X
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	8c 93       	st	X, r24
    21aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    21ac:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    21b0:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    21b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    21b6:	89 17       	cp	r24, r25
    21b8:	18 f4       	brcc	.+6      	; 0x21c0 <vTaskRemoveFromUnorderedEventList+0x12e>
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <xYieldPending>
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	08 95       	ret

000021c6 <vTaskInternalSetTimeOutState>:
    21c6:	20 91 60 0d 	lds	r18, 0x0D60	; 0x800d60 <xNumOfOverflows>
    21ca:	fc 01       	movw	r30, r24
    21cc:	20 83       	st	Z, r18
    21ce:	40 91 68 0d 	lds	r20, 0x0D68	; 0x800d68 <xTickCount>
    21d2:	50 91 69 0d 	lds	r21, 0x0D69	; 0x800d69 <xTickCount+0x1>
    21d6:	60 91 6a 0d 	lds	r22, 0x0D6A	; 0x800d6a <xTickCount+0x2>
    21da:	70 91 6b 0d 	lds	r23, 0x0D6B	; 0x800d6b <xTickCount+0x3>
    21de:	41 83       	std	Z+1, r20	; 0x01
    21e0:	52 83       	std	Z+2, r21	; 0x02
    21e2:	63 83       	std	Z+3, r22	; 0x03
    21e4:	74 83       	std	Z+4, r23	; 0x04
    21e6:	08 95       	ret

000021e8 <xTaskCheckForTimeOut>:
    21e8:	8f 92       	push	r8
    21ea:	9f 92       	push	r9
    21ec:	af 92       	push	r10
    21ee:	bf 92       	push	r11
    21f0:	cf 92       	push	r12
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	fb 01       	movw	r30, r22
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	0f 92       	push	r0
    2208:	c0 90 68 0d 	lds	r12, 0x0D68	; 0x800d68 <xTickCount>
    220c:	d0 90 69 0d 	lds	r13, 0x0D69	; 0x800d69 <xTickCount+0x1>
    2210:	e0 90 6a 0d 	lds	r14, 0x0D6A	; 0x800d6a <xTickCount+0x2>
    2214:	f0 90 6b 0d 	lds	r15, 0x0D6B	; 0x800d6b <xTickCount+0x3>
    2218:	dc 01       	movw	r26, r24
    221a:	11 96       	adiw	r26, 0x01	; 1
    221c:	0d 91       	ld	r16, X+
    221e:	1d 91       	ld	r17, X+
    2220:	2d 91       	ld	r18, X+
    2222:	3c 91       	ld	r19, X
    2224:	14 97       	sbiw	r26, 0x04	; 4
    2226:	46 01       	movw	r8, r12
    2228:	57 01       	movw	r10, r14
    222a:	80 1a       	sub	r8, r16
    222c:	91 0a       	sbc	r9, r17
    222e:	a2 0a       	sbc	r10, r18
    2230:	b3 0a       	sbc	r11, r19
    2232:	40 81       	ld	r20, Z
    2234:	51 81       	ldd	r21, Z+1	; 0x01
    2236:	62 81       	ldd	r22, Z+2	; 0x02
    2238:	73 81       	ldd	r23, Z+3	; 0x03
    223a:	4f 3f       	cpi	r20, 0xFF	; 255
    223c:	bf ef       	ldi	r27, 0xFF	; 255
    223e:	5b 07       	cpc	r21, r27
    2240:	6b 07       	cpc	r22, r27
    2242:	7b 07       	cpc	r23, r27
    2244:	39 f1       	breq	.+78     	; 0x2294 <__stack+0x95>
    2246:	ec 01       	movw	r28, r24
    2248:	b8 81       	ld	r27, Y
    224a:	a0 91 60 0d 	lds	r26, 0x0D60	; 0x800d60 <xNumOfOverflows>
    224e:	ba 17       	cp	r27, r26
    2250:	59 f0       	breq	.+22     	; 0x2268 <__stack+0x69>
    2252:	c0 16       	cp	r12, r16
    2254:	d1 06       	cpc	r13, r17
    2256:	e2 06       	cpc	r14, r18
    2258:	f3 06       	cpc	r15, r19
    225a:	30 f0       	brcs	.+12     	; 0x2268 <__stack+0x69>
    225c:	10 82       	st	Z, r1
    225e:	11 82       	std	Z+1, r1	; 0x01
    2260:	12 82       	std	Z+2, r1	; 0x02
    2262:	13 82       	std	Z+3, r1	; 0x03
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	17 c0       	rjmp	.+46     	; 0x2296 <__stack+0x97>
    2268:	84 16       	cp	r8, r20
    226a:	95 06       	cpc	r9, r21
    226c:	a6 06       	cpc	r10, r22
    226e:	b7 06       	cpc	r11, r23
    2270:	58 f4       	brcc	.+22     	; 0x2288 <__stack+0x89>
    2272:	48 19       	sub	r20, r8
    2274:	59 09       	sbc	r21, r9
    2276:	6a 09       	sbc	r22, r10
    2278:	7b 09       	sbc	r23, r11
    227a:	40 83       	st	Z, r20
    227c:	51 83       	std	Z+1, r21	; 0x01
    227e:	62 83       	std	Z+2, r22	; 0x02
    2280:	73 83       	std	Z+3, r23	; 0x03
    2282:	a1 df       	rcall	.-190    	; 0x21c6 <vTaskInternalSetTimeOutState>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	07 c0       	rjmp	.+14     	; 0x2296 <__stack+0x97>
    2288:	10 82       	st	Z, r1
    228a:	11 82       	std	Z+1, r1	; 0x01
    228c:	12 82       	std	Z+2, r1	; 0x02
    228e:	13 82       	std	Z+3, r1	; 0x03
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	01 c0       	rjmp	.+2      	; 0x2296 <__stack+0x97>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	0f 90       	pop	r0
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	ef 90       	pop	r14
    22a6:	df 90       	pop	r13
    22a8:	cf 90       	pop	r12
    22aa:	bf 90       	pop	r11
    22ac:	af 90       	pop	r10
    22ae:	9f 90       	pop	r9
    22b0:	8f 90       	pop	r8
    22b2:	08 95       	ret

000022b4 <vTaskMissedYield>:
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <xYieldPending>
    22ba:	08 95       	ret

000022bc <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    22bc:	80 91 66 0d 	lds	r24, 0x0D66	; 0x800d66 <xSchedulerRunning>
    22c0:	88 23       	and	r24, r24
    22c2:	31 f0       	breq	.+12     	; 0x22d0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    22c4:	80 91 58 0d 	lds	r24, 0x0D58	; 0x800d58 <uxSchedulerSuspended>
    22c8:	81 11       	cpse	r24, r1
    22ca:	04 c0       	rjmp	.+8      	; 0x22d4 <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	08 95       	ret
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    22d4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }

        return xReturn;
    }
    22d6:	08 95       	ret

000022d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	fc 01       	movw	r30, r24
        BaseType_t xReturn = pdFALSE;

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
    22e2:	89 2b       	or	r24, r25
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <xTaskPriorityInherit+0x10>
    22e6:	77 c0       	rjmp	.+238    	; 0x23d6 <xTaskPriorityInherit+0xfe>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    22e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    22ea:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    22ee:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    22f2:	5a 96       	adiw	r26, 0x1a	; 26
    22f4:	9c 91       	ld	r25, X
    22f6:	89 17       	cp	r24, r25
    22f8:	08 f0       	brcs	.+2      	; 0x22fc <xTaskPriorityInherit+0x24>
    22fa:	63 c0       	rjmp	.+198    	; 0x23c2 <xTaskPriorityInherit+0xea>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    22fc:	46 85       	ldd	r20, Z+14	; 0x0e
    22fe:	57 85       	ldd	r21, Z+15	; 0x0f
    2300:	60 89       	ldd	r22, Z+16	; 0x10
    2302:	71 89       	ldd	r23, Z+17	; 0x11
    2304:	77 23       	and	r23, r23
    2306:	94 f0       	brlt	.+36     	; 0x232c <xTaskPriorityInherit+0x54>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2308:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    230c:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    2310:	5a 96       	adiw	r26, 0x1a	; 26
    2312:	9c 91       	ld	r25, X
    2314:	4a e0       	ldi	r20, 0x0A	; 10
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	49 1b       	sub	r20, r25
    231e:	51 09       	sbc	r21, r1
    2320:	61 09       	sbc	r22, r1
    2322:	71 09       	sbc	r23, r1
    2324:	46 87       	std	Z+14, r20	; 0x0e
    2326:	57 87       	std	Z+15, r21	; 0x0f
    2328:	60 8b       	std	Z+16, r22	; 0x10
    232a:	71 8b       	std	Z+17, r23	; 0x11
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    232c:	24 85       	ldd	r18, Z+12	; 0x0c
    232e:	35 85       	ldd	r19, Z+13	; 0x0d
    2330:	4b e0       	ldi	r20, 0x0B	; 11
    2332:	84 9f       	mul	r24, r20
    2334:	c0 01       	movw	r24, r0
    2336:	11 24       	eor	r1, r1
    2338:	87 55       	subi	r24, 0x57	; 87
    233a:	92 4f       	sbci	r25, 0xF2	; 242
    233c:	28 17       	cp	r18, r24
    233e:	39 07       	cpc	r19, r25
    2340:	b9 f5       	brne	.+110    	; 0x23b0 <xTaskPriorityInherit+0xd8>
    2342:	ef 01       	movw	r28, r30
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2344:	8f 01       	movw	r16, r30
    2346:	0e 5f       	subi	r16, 0xFE	; 254
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	c8 01       	movw	r24, r16
    234c:	0e 94 25 05 	call	0xa4a	; 0xa4a <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2350:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    2354:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    2358:	e2 8d       	ldd	r30, Z+26	; 0x1a
    235a:	ea 8f       	std	Y+26, r30	; 0x1a
                    prvAddTaskToReadyList( pxMutexHolderTCB );
    235c:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    2360:	8e 17       	cp	r24, r30
    2362:	10 f4       	brcc	.+4      	; 0x2368 <xTaskPriorityInherit+0x90>
    2364:	e0 93 67 0d 	sts	0x0D67, r30	; 0x800d67 <uxTopReadyPriority>
    2368:	8b e0       	ldi	r24, 0x0B	; 11
    236a:	8e 9f       	mul	r24, r30
    236c:	f0 01       	movw	r30, r0
    236e:	11 24       	eor	r1, r1
    2370:	e7 55       	subi	r30, 0x57	; 87
    2372:	f2 4f       	sbci	r31, 0xF2	; 242
    2374:	01 80       	ldd	r0, Z+1	; 0x01
    2376:	f2 81       	ldd	r31, Z+2	; 0x02
    2378:	e0 2d       	mov	r30, r0
    237a:	ff 83       	std	Y+7, r31	; 0x07
    237c:	ee 83       	std	Y+6, r30	; 0x06
    237e:	26 81       	ldd	r18, Z+6	; 0x06
    2380:	37 81       	ldd	r19, Z+7	; 0x07
    2382:	39 87       	std	Y+9, r19	; 0x09
    2384:	28 87       	std	Y+8, r18	; 0x08
    2386:	a6 81       	ldd	r26, Z+6	; 0x06
    2388:	b7 81       	ldd	r27, Z+7	; 0x07
    238a:	15 96       	adiw	r26, 0x05	; 5
    238c:	1c 93       	st	X, r17
    238e:	0e 93       	st	-X, r16
    2390:	14 97       	sbiw	r26, 0x04	; 4
    2392:	17 83       	std	Z+7, r17	; 0x07
    2394:	06 83       	std	Z+6, r16	; 0x06
    2396:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2398:	8e 9f       	mul	r24, r30
    239a:	f0 01       	movw	r30, r0
    239c:	11 24       	eor	r1, r1
    239e:	e7 55       	subi	r30, 0x57	; 87
    23a0:	f2 4f       	sbci	r31, 0xF2	; 242
    23a2:	fd 87       	std	Y+13, r31	; 0x0d
    23a4:	ec 87       	std	Y+12, r30	; 0x0c
    23a6:	80 81       	ld	r24, Z
    23a8:	8f 5f       	subi	r24, 0xFF	; 255
    23aa:	80 83       	st	Z, r24
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	16 c0       	rjmp	.+44     	; 0x23dc <xTaskPriorityInherit+0x104>
                    prvAddTaskToReadyList( pxMutexHolderTCB );
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    23b0:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    23b4:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    23b8:	5a 96       	adiw	r26, 0x1a	; 26
    23ba:	8c 91       	ld	r24, X
    23bc:	82 8f       	std	Z+26, r24	; 0x1a
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	0d c0       	rjmp	.+26     	; 0x23dc <xTaskPriorityInherit+0x104>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    23c2:	95 a5       	ldd	r25, Z+45	; 0x2d
    23c4:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    23c8:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    23cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    23ce:	98 17       	cp	r25, r24
    23d0:	20 f0       	brcs	.+8      	; 0x23da <xTaskPriorityInherit+0x102>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	03 c0       	rjmp	.+6      	; 0x23dc <xTaskPriorityInherit+0x104>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	01 c0       	rjmp	.+2      	; 0x23dc <xTaskPriorityInherit+0x104>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
    23da:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	08 95       	ret

000023e6 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    23f0:	89 2b       	or	r24, r25
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <xTaskPriorityDisinherit+0x10>
    23f4:	49 c0       	rjmp	.+146    	; 0x2488 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    23f6:	86 a5       	ldd	r24, Z+46	; 0x2e
    23f8:	81 50       	subi	r24, 0x01	; 1
    23fa:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    23fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    23fe:	95 a5       	ldd	r25, Z+45	; 0x2d
    2400:	29 17       	cp	r18, r25
    2402:	09 f4       	brne	.+2      	; 0x2406 <xTaskPriorityDisinherit+0x20>
    2404:	43 c0       	rjmp	.+134    	; 0x248c <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2406:	81 11       	cpse	r24, r1
    2408:	43 c0       	rjmp	.+134    	; 0x2490 <xTaskPriorityDisinherit+0xaa>
    240a:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    240c:	8f 01       	movw	r16, r30
    240e:	0e 5f       	subi	r16, 0xFE	; 254
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	c8 01       	movw	r24, r16
    2414:	0e 94 25 05 	call	0xa4a	; 0xa4a <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2418:	ed a5       	ldd	r30, Y+45	; 0x2d
    241a:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    241c:	8a e0       	ldi	r24, 0x0A	; 10
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a0 e0       	ldi	r26, 0x00	; 0
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	8e 1b       	sub	r24, r30
    2426:	91 09       	sbc	r25, r1
    2428:	a1 09       	sbc	r26, r1
    242a:	b1 09       	sbc	r27, r1
    242c:	8e 87       	std	Y+14, r24	; 0x0e
    242e:	9f 87       	std	Y+15, r25	; 0x0f
    2430:	a8 8b       	std	Y+16, r26	; 0x10
    2432:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    2434:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    2438:	8e 17       	cp	r24, r30
    243a:	10 f4       	brcc	.+4      	; 0x2440 <xTaskPriorityDisinherit+0x5a>
    243c:	e0 93 67 0d 	sts	0x0D67, r30	; 0x800d67 <uxTopReadyPriority>
    2440:	8b e0       	ldi	r24, 0x0B	; 11
    2442:	8e 9f       	mul	r24, r30
    2444:	f0 01       	movw	r30, r0
    2446:	11 24       	eor	r1, r1
    2448:	e7 55       	subi	r30, 0x57	; 87
    244a:	f2 4f       	sbci	r31, 0xF2	; 242
    244c:	01 80       	ldd	r0, Z+1	; 0x01
    244e:	f2 81       	ldd	r31, Z+2	; 0x02
    2450:	e0 2d       	mov	r30, r0
    2452:	ff 83       	std	Y+7, r31	; 0x07
    2454:	ee 83       	std	Y+6, r30	; 0x06
    2456:	26 81       	ldd	r18, Z+6	; 0x06
    2458:	37 81       	ldd	r19, Z+7	; 0x07
    245a:	39 87       	std	Y+9, r19	; 0x09
    245c:	28 87       	std	Y+8, r18	; 0x08
    245e:	a6 81       	ldd	r26, Z+6	; 0x06
    2460:	b7 81       	ldd	r27, Z+7	; 0x07
    2462:	15 96       	adiw	r26, 0x05	; 5
    2464:	1c 93       	st	X, r17
    2466:	0e 93       	st	-X, r16
    2468:	14 97       	sbiw	r26, 0x04	; 4
    246a:	17 83       	std	Z+7, r17	; 0x07
    246c:	06 83       	std	Z+6, r16	; 0x06
    246e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2470:	8e 9f       	mul	r24, r30
    2472:	f0 01       	movw	r30, r0
    2474:	11 24       	eor	r1, r1
    2476:	e7 55       	subi	r30, 0x57	; 87
    2478:	f2 4f       	sbci	r31, 0xF2	; 242
    247a:	fd 87       	std	Y+13, r31	; 0x0d
    247c:	ec 87       	std	Y+12, r30	; 0x0c
    247e:	80 81       	ld	r24, Z
    2480:	8f 5f       	subi	r24, 0xFF	; 255
    2482:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	03 c0       	rjmp	.+6      	; 0x2492 <xTaskPriorityDisinherit+0xac>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <xTaskPriorityDisinherit+0xac>
    2490:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	08 95       	ret

0000249c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

        if( pxMutexHolder != NULL )
    24a6:	89 2b       	or	r24, r25
    24a8:	09 f4       	brne	.+2      	; 0x24ac <vTaskPriorityDisinheritAfterTimeout+0x10>
    24aa:	5a c0       	rjmp	.+180    	; 0x2560 <vTaskPriorityDisinheritAfterTimeout+0xc4>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    24ac:	85 a5       	ldd	r24, Z+45	; 0x2d
    24ae:	86 17       	cp	r24, r22
    24b0:	08 f4       	brcc	.+2      	; 0x24b4 <vTaskPriorityDisinheritAfterTimeout+0x18>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
    24b2:	86 2f       	mov	r24, r22
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
    24b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    24b6:	89 17       	cp	r24, r25
    24b8:	09 f4       	brne	.+2      	; 0x24bc <vTaskPriorityDisinheritAfterTimeout+0x20>
    24ba:	52 c0       	rjmp	.+164    	; 0x2560 <vTaskPriorityDisinheritAfterTimeout+0xc4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    24bc:	26 a5       	ldd	r18, Z+46	; 0x2e
    24be:	21 30       	cpi	r18, 0x01	; 1
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <vTaskPriorityDisinheritAfterTimeout+0x28>
    24c2:	4e c0       	rjmp	.+156    	; 0x2560 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
                    pxTCB->uxPriority = uxPriorityToUse;
    24c4:	82 8f       	std	Z+26, r24	; 0x1a

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    24c6:	46 85       	ldd	r20, Z+14	; 0x0e
    24c8:	57 85       	ldd	r21, Z+15	; 0x0f
    24ca:	60 89       	ldd	r22, Z+16	; 0x10
    24cc:	71 89       	ldd	r23, Z+17	; 0x11
    24ce:	77 23       	and	r23, r23
    24d0:	64 f0       	brlt	.+24     	; 0x24ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24d2:	4a e0       	ldi	r20, 0x0A	; 10
    24d4:	50 e0       	ldi	r21, 0x00	; 0
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	48 1b       	sub	r20, r24
    24dc:	51 09       	sbc	r21, r1
    24de:	61 09       	sbc	r22, r1
    24e0:	71 09       	sbc	r23, r1
    24e2:	46 87       	std	Z+14, r20	; 0x0e
    24e4:	57 87       	std	Z+15, r21	; 0x0f
    24e6:	60 8b       	std	Z+16, r22	; 0x10
    24e8:	71 8b       	std	Z+17, r23	; 0x11
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    24ea:	24 85       	ldd	r18, Z+12	; 0x0c
    24ec:	35 85       	ldd	r19, Z+13	; 0x0d
    24ee:	4b e0       	ldi	r20, 0x0B	; 11
    24f0:	94 9f       	mul	r25, r20
    24f2:	c0 01       	movw	r24, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	87 55       	subi	r24, 0x57	; 87
    24f8:	92 4f       	sbci	r25, 0xF2	; 242
    24fa:	28 17       	cp	r18, r24
    24fc:	39 07       	cpc	r19, r25
    24fe:	81 f5       	brne	.+96     	; 0x2560 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2500:	ef 01       	movw	r28, r30
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2502:	8f 01       	movw	r16, r30
    2504:	0e 5f       	subi	r16, 0xFE	; 254
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	c8 01       	movw	r24, r16
    250a:	0e 94 25 05 	call	0xa4a	; 0xa4a <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
    250e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2510:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <uxTopReadyPriority>
    2514:	8e 17       	cp	r24, r30
    2516:	10 f4       	brcc	.+4      	; 0x251c <vTaskPriorityDisinheritAfterTimeout+0x80>
    2518:	e0 93 67 0d 	sts	0x0D67, r30	; 0x800d67 <uxTopReadyPriority>
    251c:	8b e0       	ldi	r24, 0x0B	; 11
    251e:	8e 9f       	mul	r24, r30
    2520:	f0 01       	movw	r30, r0
    2522:	11 24       	eor	r1, r1
    2524:	e7 55       	subi	r30, 0x57	; 87
    2526:	f2 4f       	sbci	r31, 0xF2	; 242
    2528:	01 80       	ldd	r0, Z+1	; 0x01
    252a:	f2 81       	ldd	r31, Z+2	; 0x02
    252c:	e0 2d       	mov	r30, r0
    252e:	ff 83       	std	Y+7, r31	; 0x07
    2530:	ee 83       	std	Y+6, r30	; 0x06
    2532:	26 81       	ldd	r18, Z+6	; 0x06
    2534:	37 81       	ldd	r19, Z+7	; 0x07
    2536:	39 87       	std	Y+9, r19	; 0x09
    2538:	28 87       	std	Y+8, r18	; 0x08
    253a:	a6 81       	ldd	r26, Z+6	; 0x06
    253c:	b7 81       	ldd	r27, Z+7	; 0x07
    253e:	15 96       	adiw	r26, 0x05	; 5
    2540:	1c 93       	st	X, r17
    2542:	0e 93       	st	-X, r16
    2544:	14 97       	sbiw	r26, 0x04	; 4
    2546:	17 83       	std	Z+7, r17	; 0x07
    2548:	06 83       	std	Z+6, r16	; 0x06
    254a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    254c:	8e 9f       	mul	r24, r30
    254e:	f0 01       	movw	r30, r0
    2550:	11 24       	eor	r1, r1
    2552:	e7 55       	subi	r30, 0x57	; 87
    2554:	f2 4f       	sbci	r31, 0xF2	; 242
    2556:	fd 87       	std	Y+13, r31	; 0x0d
    2558:	ec 87       	std	Y+12, r30	; 0x0c
    255a:	80 81       	ld	r24, Z
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	80 83       	st	Z, r24
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    256a:	cf 92       	push	r12
    256c:	df 92       	push	r13
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    2572:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    2576:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    257a:	66 85       	ldd	r22, Z+14	; 0x0e
    257c:	77 85       	ldd	r23, Z+15	; 0x0f
    257e:	80 89       	ldd	r24, Z+16	; 0x10
    2580:	91 89       	ldd	r25, Z+17	; 0x11

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2582:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    2586:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    258a:	a0 91 17 0e 	lds	r26, 0x0E17	; 0x800e17 <pxCurrentTCB>
    258e:	b0 91 18 0e 	lds	r27, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    2592:	5a 96       	adiw	r26, 0x1a	; 26
    2594:	2c 91       	ld	r18, X
    2596:	0f 2e       	mov	r0, r31
    2598:	fa e0       	ldi	r31, 0x0A	; 10
    259a:	cf 2e       	mov	r12, r31
    259c:	d1 2c       	mov	r13, r1
    259e:	e1 2c       	mov	r14, r1
    25a0:	f1 2c       	mov	r15, r1
    25a2:	f0 2d       	mov	r31, r0
    25a4:	c2 1a       	sub	r12, r18
    25a6:	d1 08       	sbc	r13, r1
    25a8:	e1 08       	sbc	r14, r1
    25aa:	f1 08       	sbc	r15, r1
    25ac:	c6 86       	std	Z+14, r12	; 0x0e
    25ae:	d7 86       	std	Z+15, r13	; 0x0f
    25b0:	e0 8a       	std	Z+16, r14	; 0x10
    25b2:	f1 8a       	std	Z+17, r15	; 0x11

    return uxReturn;
}
    25b4:	ff 90       	pop	r15
    25b6:	ef 90       	pop	r14
    25b8:	df 90       	pop	r13
    25ba:	cf 90       	pop	r12
    25bc:	08 95       	ret

000025be <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    25be:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    25c2:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    25c6:	89 2b       	or	r24, r25
    25c8:	39 f0       	breq	.+14     	; 0x25d8 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    25ca:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <pxCurrentTCB>
    25ce:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    25d2:	86 a5       	ldd	r24, Z+46	; 0x2e
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
    25d6:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    25d8:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <pxCurrentTCB>
    25dc:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <pxCurrentTCB+0x1>
    }
    25e0:	08 95       	ret

000025e2 <prvGetNextExpireTime>:
    25e2:	dc 01       	movw	r26, r24
    25e4:	e0 91 23 0e 	lds	r30, 0x0E23	; 0x800e23 <pxCurrentTimerList>
    25e8:	f0 91 24 0e 	lds	r31, 0x0E24	; 0x800e24 <pxCurrentTimerList+0x1>
    25ec:	80 81       	ld	r24, Z
    25ee:	91 e0       	ldi	r25, 0x01	; 1
    25f0:	81 11       	cpse	r24, r1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9c 93       	st	X, r25
    25f6:	91 11       	cpse	r25, r1
    25f8:	08 c0       	rjmp	.+16     	; 0x260a <prvGetNextExpireTime+0x28>
    25fa:	07 80       	ldd	r0, Z+7	; 0x07
    25fc:	f0 85       	ldd	r31, Z+8	; 0x08
    25fe:	e0 2d       	mov	r30, r0
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	08 95       	ret
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	70 e0       	ldi	r23, 0x00	; 0
    260e:	cb 01       	movw	r24, r22
    2610:	08 95       	ret

00002612 <prvInsertTimerInActiveList>:
    2612:	cf 92       	push	r12
    2614:	df 92       	push	r13
    2616:	ef 92       	push	r14
    2618:	ff 92       	push	r15
    261a:	0f 93       	push	r16
    261c:	1f 93       	push	r17
    261e:	fc 01       	movw	r30, r24
    2620:	42 83       	std	Z+2, r20	; 0x02
    2622:	53 83       	std	Z+3, r21	; 0x03
    2624:	64 83       	std	Z+4, r22	; 0x04
    2626:	75 83       	std	Z+5, r23	; 0x05
    2628:	93 87       	std	Z+11, r25	; 0x0b
    262a:	82 87       	std	Z+10, r24	; 0x0a
    262c:	04 17       	cp	r16, r20
    262e:	15 07       	cpc	r17, r21
    2630:	26 07       	cpc	r18, r22
    2632:	37 07       	cpc	r19, r23
    2634:	c0 f0       	brcs	.+48     	; 0x2666 <prvInsertTimerInActiveList+0x54>
    2636:	0c 19       	sub	r16, r12
    2638:	1d 09       	sbc	r17, r13
    263a:	2e 09       	sbc	r18, r14
    263c:	3f 09       	sbc	r19, r15
    263e:	86 85       	ldd	r24, Z+14	; 0x0e
    2640:	97 85       	ldd	r25, Z+15	; 0x0f
    2642:	a0 89       	ldd	r26, Z+16	; 0x10
    2644:	b1 89       	ldd	r27, Z+17	; 0x11
    2646:	08 17       	cp	r16, r24
    2648:	19 07       	cpc	r17, r25
    264a:	2a 07       	cpc	r18, r26
    264c:	3b 07       	cpc	r19, r27
    264e:	00 f5       	brcc	.+64     	; 0x2690 <prvInsertTimerInActiveList+0x7e>
    2650:	bf 01       	movw	r22, r30
    2652:	6e 5f       	subi	r22, 0xFE	; 254
    2654:	7f 4f       	sbci	r23, 0xFF	; 255
    2656:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <pxOverflowTimerList>
    265a:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <pxOverflowTimerList+0x1>
    265e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <vListInsert>
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	18 c0       	rjmp	.+48     	; 0x2696 <prvInsertTimerInActiveList+0x84>
    2666:	0c 15       	cp	r16, r12
    2668:	1d 05       	cpc	r17, r13
    266a:	2e 05       	cpc	r18, r14
    266c:	3f 05       	cpc	r19, r15
    266e:	28 f4       	brcc	.+10     	; 0x267a <prvInsertTimerInActiveList+0x68>
    2670:	4c 15       	cp	r20, r12
    2672:	5d 05       	cpc	r21, r13
    2674:	6e 05       	cpc	r22, r14
    2676:	7f 05       	cpc	r23, r15
    2678:	68 f4       	brcc	.+26     	; 0x2694 <prvInsertTimerInActiveList+0x82>
    267a:	bf 01       	movw	r22, r30
    267c:	6e 5f       	subi	r22, 0xFE	; 254
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <pxCurrentTimerList>
    2684:	90 91 24 0e 	lds	r25, 0x0E24	; 0x800e24 <pxCurrentTimerList+0x1>
    2688:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <vListInsert>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	03 c0       	rjmp	.+6      	; 0x2696 <prvInsertTimerInActiveList+0x84>
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	01 c0       	rjmp	.+2      	; 0x2696 <prvInsertTimerInActiveList+0x84>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	ff 90       	pop	r15
    269c:	ef 90       	pop	r14
    269e:	df 90       	pop	r13
    26a0:	cf 90       	pop	r12
    26a2:	08 95       	ret

000026a4 <prvCheckForValidListAndQueue>:
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	0f 92       	push	r0
    26aa:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <xTimerQueue>
    26ae:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <xTimerQueue+0x1>
    26b2:	89 2b       	or	r24, r25
    26b4:	e9 f4       	brne	.+58     	; 0x26f0 <prvCheckForValidListAndQueue+0x4c>
    26b6:	80 e3       	ldi	r24, 0x30	; 48
    26b8:	9e e0       	ldi	r25, 0x0E	; 14
    26ba:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <vListInitialise>
    26be:	85 e2       	ldi	r24, 0x25	; 37
    26c0:	9e e0       	ldi	r25, 0x0E	; 14
    26c2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <vListInitialise>
    26c6:	80 e3       	ldi	r24, 0x30	; 48
    26c8:	9e e0       	ldi	r25, 0x0E	; 14
    26ca:	90 93 24 0e 	sts	0x0E24, r25	; 0x800e24 <pxCurrentTimerList+0x1>
    26ce:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <pxCurrentTimerList>
    26d2:	85 e2       	ldi	r24, 0x25	; 37
    26d4:	9e e0       	ldi	r25, 0x0E	; 14
    26d6:	90 93 22 0e 	sts	0x0E22, r25	; 0x800e22 <pxOverflowTimerList+0x1>
    26da:	80 93 21 0e 	sts	0x0E21, r24	; 0x800e21 <pxOverflowTimerList>
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	67 e0       	ldi	r22, 0x07	; 7
    26e2:	8a e0       	ldi	r24, 0x0A	; 10
    26e4:	0e 94 95 07 	call	0xf2a	; 0xf2a <xQueueGenericCreate>
    26e8:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <xTimerQueue+0x1>
    26ec:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <xTimerQueue>
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	08 95       	ret

000026f6 <xTimerCreateTimerTask>:
    26f6:	ef 92       	push	r14
    26f8:	ff 92       	push	r15
    26fa:	0f 93       	push	r16
    26fc:	d3 df       	rcall	.-90     	; 0x26a4 <prvCheckForValidListAndQueue>
    26fe:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <xTimerQueue>
    2702:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <xTimerQueue+0x1>
    2706:	89 2b       	or	r24, r25
    2708:	89 f0       	breq	.+34     	; 0x272c <xTimerCreateTimerTask+0x36>
    270a:	0f 2e       	mov	r0, r31
    270c:	fd e1       	ldi	r31, 0x1D	; 29
    270e:	ef 2e       	mov	r14, r31
    2710:	fe e0       	ldi	r31, 0x0E	; 14
    2712:	ff 2e       	mov	r15, r31
    2714:	f0 2d       	mov	r31, r0
    2716:	03 e0       	ldi	r16, 0x03	; 3
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 ec       	ldi	r20, 0xC0	; 192
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	66 eb       	ldi	r22, 0xB6	; 182
    2722:	72 e0       	ldi	r23, 0x02	; 2
    2724:	87 ed       	ldi	r24, 0xD7	; 215
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	46 d8       	rcall	.-3956   	; 0x17b6 <xTaskCreate>
    272a:	01 c0       	rjmp	.+2      	; 0x272e <xTimerCreateTimerTask+0x38>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	0f 91       	pop	r16
    2730:	ff 90       	pop	r15
    2732:	ef 90       	pop	r14
    2734:	08 95       	ret

00002736 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2736:	8f 92       	push	r8
    2738:	9f 92       	push	r9
    273a:	af 92       	push	r10
    273c:	bf 92       	push	r11
    273e:	cf 92       	push	r12
    2740:	df 92       	push	r13
    2742:	ef 92       	push	r14
    2744:	ff 92       	push	r15
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	27 97       	sbiw	r28, 0x07	; 7
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    275e:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <xTimerQueue>
    2762:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <xTimerQueue+0x1>
    2766:	30 97       	sbiw	r30, 0x00	; 0
    2768:	81 f1       	breq	.+96     	; 0x27ca <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    276a:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    276c:	2a 83       	std	Y+2, r18	; 0x02
    276e:	3b 83       	std	Y+3, r19	; 0x03
    2770:	4c 83       	std	Y+4, r20	; 0x04
    2772:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2774:	9f 83       	std	Y+7, r25	; 0x07
    2776:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2778:	66 30       	cpi	r22, 0x06	; 6
    277a:	f4 f4       	brge	.+60     	; 0x27b8 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    277c:	9f dd       	rcall	.-1218   	; 0x22bc <xTaskGetSchedulerState>
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	69 f4       	brne	.+26     	; 0x279c <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2782:	00 e0       	ldi	r16, 0x00	; 0
    2784:	a7 01       	movw	r20, r14
    2786:	96 01       	movw	r18, r12
    2788:	be 01       	movw	r22, r28
    278a:	6f 5f       	subi	r22, 0xFF	; 255
    278c:	7f 4f       	sbci	r23, 0xFF	; 255
    278e:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <xTimerQueue>
    2792:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <xTimerQueue+0x1>
    2796:	0e 94 b8 07 	call	0xf70	; 0xf70 <xQueueGenericSend>
    279a:	18 c0       	rjmp	.+48     	; 0x27cc <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    279c:	00 e0       	ldi	r16, 0x00	; 0
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	a9 01       	movw	r20, r18
    27a4:	be 01       	movw	r22, r28
    27a6:	6f 5f       	subi	r22, 0xFF	; 255
    27a8:	7f 4f       	sbci	r23, 0xFF	; 255
    27aa:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <xTimerQueue>
    27ae:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <xTimerQueue+0x1>
    27b2:	0e 94 b8 07 	call	0xf70	; 0xf70 <xQueueGenericSend>
    27b6:	0a c0       	rjmp	.+20     	; 0x27cc <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	a8 01       	movw	r20, r16
    27bc:	be 01       	movw	r22, r28
    27be:	6f 5f       	subi	r22, 0xFF	; 255
    27c0:	7f 4f       	sbci	r23, 0xFF	; 255
    27c2:	cf 01       	movw	r24, r30
    27c4:	0e 94 45 08 	call	0x108a	; 0x108a <xQueueGenericSendFromISR>
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    27ca:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    27cc:	27 96       	adiw	r28, 0x07	; 7
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	ff 90       	pop	r15
    27e2:	ef 90       	pop	r14
    27e4:	df 90       	pop	r13
    27e6:	cf 90       	pop	r12
    27e8:	bf 90       	pop	r11
    27ea:	af 90       	pop	r10
    27ec:	9f 90       	pop	r9
    27ee:	8f 90       	pop	r8
    27f0:	08 95       	ret

000027f2 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    27f2:	8f 92       	push	r8
    27f4:	9f 92       	push	r9
    27f6:	af 92       	push	r10
    27f8:	bf 92       	push	r11
    27fa:	cf 92       	push	r12
    27fc:	df 92       	push	r13
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    280a:	3b c0       	rjmp	.+118    	; 0x2882 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    280c:	07 80       	ldd	r0, Z+7	; 0x07
    280e:	f0 85       	ldd	r31, Z+8	; 0x08
    2810:	e0 2d       	mov	r30, r0
    2812:	80 80       	ld	r8, Z
    2814:	91 80       	ldd	r9, Z+1	; 0x01
    2816:	a2 80       	ldd	r10, Z+2	; 0x02
    2818:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    281a:	c0 85       	ldd	r28, Z+8	; 0x08
    281c:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    281e:	8e 01       	movw	r16, r28
    2820:	0e 5f       	subi	r16, 0xFE	; 254
    2822:	1f 4f       	sbci	r17, 0xFF	; 255
    2824:	c8 01       	movw	r24, r16
    2826:	0e 94 25 05 	call	0xa4a	; 0xa4a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    282a:	ec 89       	ldd	r30, Y+20	; 0x14
    282c:	fd 89       	ldd	r31, Y+21	; 0x15
    282e:	ce 01       	movw	r24, r28
    2830:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2832:	8e 89       	ldd	r24, Y+22	; 0x16
    2834:	82 ff       	sbrs	r24, 2
    2836:	25 c0       	rjmp	.+74     	; 0x2882 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2838:	8e 85       	ldd	r24, Y+14	; 0x0e
    283a:	9f 85       	ldd	r25, Y+15	; 0x0f
    283c:	a8 89       	ldd	r26, Y+16	; 0x10
    283e:	b9 89       	ldd	r27, Y+17	; 0x11
    2840:	88 0d       	add	r24, r8
    2842:	99 1d       	adc	r25, r9
    2844:	aa 1d       	adc	r26, r10
    2846:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2848:	88 16       	cp	r8, r24
    284a:	99 06       	cpc	r9, r25
    284c:	aa 06       	cpc	r10, r26
    284e:	bb 06       	cpc	r11, r27
    2850:	70 f4       	brcc	.+28     	; 0x286e <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2852:	8a 83       	std	Y+2, r24	; 0x02
    2854:	9b 83       	std	Y+3, r25	; 0x03
    2856:	ac 83       	std	Y+4, r26	; 0x04
    2858:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    285a:	db 87       	std	Y+11, r29	; 0x0b
    285c:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    285e:	b8 01       	movw	r22, r16
    2860:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <pxCurrentTimerList>
    2864:	90 91 24 0e 	lds	r25, 0x0E24	; 0x800e24 <pxCurrentTimerList+0x1>
    2868:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <vListInsert>
    286c:	0a c0       	rjmp	.+20     	; 0x2882 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    286e:	c1 2c       	mov	r12, r1
    2870:	d1 2c       	mov	r13, r1
    2872:	76 01       	movw	r14, r12
    2874:	00 e0       	ldi	r16, 0x00	; 0
    2876:	10 e0       	ldi	r17, 0x00	; 0
    2878:	a5 01       	movw	r20, r10
    287a:	94 01       	movw	r18, r8
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	ce 01       	movw	r24, r28
    2880:	5a df       	rcall	.-332    	; 0x2736 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2882:	e0 91 23 0e 	lds	r30, 0x0E23	; 0x800e23 <pxCurrentTimerList>
    2886:	f0 91 24 0e 	lds	r31, 0x0E24	; 0x800e24 <pxCurrentTimerList+0x1>
    288a:	80 81       	ld	r24, Z
    288c:	81 11       	cpse	r24, r1
    288e:	be cf       	rjmp	.-132    	; 0x280c <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2890:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <pxOverflowTimerList>
    2894:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <pxOverflowTimerList+0x1>
    2898:	90 93 24 0e 	sts	0x0E24, r25	; 0x800e24 <pxCurrentTimerList+0x1>
    289c:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    28a0:	f0 93 22 0e 	sts	0x0E22, r31	; 0x800e22 <pxOverflowTimerList+0x1>
    28a4:	e0 93 21 0e 	sts	0x0E21, r30	; 0x800e21 <pxOverflowTimerList>
    }
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	cf 90       	pop	r12
    28b8:	bf 90       	pop	r11
    28ba:	af 90       	pop	r10
    28bc:	9f 90       	pop	r9
    28be:	8f 90       	pop	r8
    28c0:	08 95       	ret

000028c2 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    28c2:	cf 92       	push	r12
    28c4:	df 92       	push	r13
    28c6:	ef 92       	push	r14
    28c8:	ff 92       	push	r15
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    28d0:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <xTaskGetTickCount>
    28d4:	6b 01       	movw	r12, r22
    28d6:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    28d8:	80 91 19 0e 	lds	r24, 0x0E19	; 0x800e19 <xLastTime.2436>
    28dc:	90 91 1a 0e 	lds	r25, 0x0E1A	; 0x800e1a <xLastTime.2436+0x1>
    28e0:	a0 91 1b 0e 	lds	r26, 0x0E1B	; 0x800e1b <xLastTime.2436+0x2>
    28e4:	b0 91 1c 0e 	lds	r27, 0x0E1C	; 0x800e1c <xLastTime.2436+0x3>
    28e8:	c8 16       	cp	r12, r24
    28ea:	d9 06       	cpc	r13, r25
    28ec:	ea 06       	cpc	r14, r26
    28ee:	fb 06       	cpc	r15, r27
    28f0:	20 f4       	brcc	.+8      	; 0x28fa <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    28f2:	7f df       	rcall	.-258    	; 0x27f2 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	88 83       	st	Y, r24
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    28fa:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    28fc:	c0 92 19 0e 	sts	0x0E19, r12	; 0x800e19 <xLastTime.2436>
    2900:	d0 92 1a 0e 	sts	0x0E1A, r13	; 0x800e1a <xLastTime.2436+0x1>
    2904:	e0 92 1b 0e 	sts	0x0E1B, r14	; 0x800e1b <xLastTime.2436+0x2>
    2908:	f0 92 1c 0e 	sts	0x0E1C, r15	; 0x800e1c <xLastTime.2436+0x3>

        return xTimeNow;
    }
    290c:	c7 01       	movw	r24, r14
    290e:	b6 01       	movw	r22, r12
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	ff 90       	pop	r15
    2916:	ef 90       	pop	r14
    2918:	df 90       	pop	r13
    291a:	cf 90       	pop	r12
    291c:	08 95       	ret

0000291e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    291e:	4f 92       	push	r4
    2920:	5f 92       	push	r5
    2922:	6f 92       	push	r6
    2924:	7f 92       	push	r7
    2926:	8f 92       	push	r8
    2928:	9f 92       	push	r9
    292a:	af 92       	push	r10
    292c:	bf 92       	push	r11
    292e:	cf 92       	push	r12
    2930:	df 92       	push	r13
    2932:	ef 92       	push	r14
    2934:	ff 92       	push	r15
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	4b 01       	movw	r8, r22
    2940:	5c 01       	movw	r10, r24
    2942:	29 01       	movw	r4, r18
    2944:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2946:	e0 91 23 0e 	lds	r30, 0x0E23	; 0x800e23 <pxCurrentTimerList>
    294a:	f0 91 24 0e 	lds	r31, 0x0E24	; 0x800e24 <pxCurrentTimerList+0x1>
    294e:	07 80       	ldd	r0, Z+7	; 0x07
    2950:	f0 85       	ldd	r31, Z+8	; 0x08
    2952:	e0 2d       	mov	r30, r0
    2954:	c0 85       	ldd	r28, Z+8	; 0x08
    2956:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2958:	ce 01       	movw	r24, r28
    295a:	02 96       	adiw	r24, 0x02	; 2
    295c:	0e 94 25 05 	call	0xa4a	; 0xa4a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2960:	8e 89       	ldd	r24, Y+22	; 0x16
    2962:	82 ff       	sbrs	r24, 2
    2964:	1b c0       	rjmp	.+54     	; 0x299c <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2966:	4e 85       	ldd	r20, Y+14	; 0x0e
    2968:	5f 85       	ldd	r21, Y+15	; 0x0f
    296a:	68 89       	ldd	r22, Y+16	; 0x10
    296c:	79 89       	ldd	r23, Y+17	; 0x11
    296e:	48 0d       	add	r20, r8
    2970:	59 1d       	adc	r21, r9
    2972:	6a 1d       	adc	r22, r10
    2974:	7b 1d       	adc	r23, r11
    2976:	75 01       	movw	r14, r10
    2978:	64 01       	movw	r12, r8
    297a:	93 01       	movw	r18, r6
    297c:	82 01       	movw	r16, r4
    297e:	ce 01       	movw	r24, r28
    2980:	48 de       	rcall	.-880    	; 0x2612 <prvInsertTimerInActiveList>
    2982:	88 23       	and	r24, r24
    2984:	69 f0       	breq	.+26     	; 0x29a0 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2986:	c1 2c       	mov	r12, r1
    2988:	d1 2c       	mov	r13, r1
    298a:	76 01       	movw	r14, r12
    298c:	00 e0       	ldi	r16, 0x00	; 0
    298e:	10 e0       	ldi	r17, 0x00	; 0
    2990:	a5 01       	movw	r20, r10
    2992:	94 01       	movw	r18, r8
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	ce 01       	movw	r24, r28
    2998:	ce de       	rcall	.-612    	; 0x2736 <xTimerGenericCommand>
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    299c:	8e 7f       	andi	r24, 0xFE	; 254
    299e:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29a0:	ec 89       	ldd	r30, Y+20	; 0x14
    29a2:	fd 89       	ldd	r31, Y+21	; 0x15
    29a4:	ce 01       	movw	r24, r28
    29a6:	19 95       	eicall
    }
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	ff 90       	pop	r15
    29b2:	ef 90       	pop	r14
    29b4:	df 90       	pop	r13
    29b6:	cf 90       	pop	r12
    29b8:	bf 90       	pop	r11
    29ba:	af 90       	pop	r10
    29bc:	9f 90       	pop	r9
    29be:	8f 90       	pop	r8
    29c0:	7f 90       	pop	r7
    29c2:	6f 90       	pop	r6
    29c4:	5f 90       	pop	r5
    29c6:	4f 90       	pop	r4
    29c8:	08 95       	ret

000029ca <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    29ca:	8f 92       	push	r8
    29cc:	9f 92       	push	r9
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	cf 92       	push	r12
    29d4:	df 92       	push	r13
    29d6:	ef 92       	push	r14
    29d8:	ff 92       	push	r15
    29da:	1f 93       	push	r17
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	1f 92       	push	r1
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	6b 01       	movw	r12, r22
    29e8:	7c 01       	movw	r14, r24
    29ea:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    29ec:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    29f0:	ce 01       	movw	r24, r28
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	66 df       	rcall	.-308    	; 0x28c2 <prvSampleTimeNow>
    29f6:	4b 01       	movw	r8, r22
    29f8:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	81 11       	cpse	r24, r1
    29fe:	2b c0       	rjmp	.+86     	; 0x2a56 <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2a00:	11 11       	cpse	r17, r1
    2a02:	0c c0       	rjmp	.+24     	; 0x2a1c <prvProcessTimerOrBlockTask+0x52>
    2a04:	8c 14       	cp	r8, r12
    2a06:	9d 04       	cpc	r9, r13
    2a08:	ae 04       	cpc	r10, r14
    2a0a:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2a0c:	38 f0       	brcs	.+14     	; 0x2a1c <prvProcessTimerOrBlockTask+0x52>
    2a0e:	94 d8       	rcall	.-3800   	; 0x1b38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2a10:	a5 01       	movw	r20, r10
    2a12:	94 01       	movw	r18, r8
    2a14:	c7 01       	movw	r24, r14
    2a16:	b6 01       	movw	r22, r12
    2a18:	82 df       	rcall	.-252    	; 0x291e <prvProcessExpiredTimer>
    2a1a:	1e c0       	rjmp	.+60     	; 0x2a58 <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2a1c:	11 23       	and	r17, r17
    2a1e:	41 f0       	breq	.+16     	; 0x2a30 <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2a20:	e0 91 21 0e 	lds	r30, 0x0E21	; 0x800e21 <pxOverflowTimerList>
    2a24:	f0 91 22 0e 	lds	r31, 0x0E22	; 0x800e22 <pxOverflowTimerList+0x1>
    2a28:	80 81       	ld	r24, Z
    2a2a:	11 e0       	ldi	r17, 0x01	; 1
    2a2c:	81 11       	cpse	r24, r1
    2a2e:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2a30:	b7 01       	movw	r22, r14
    2a32:	a6 01       	movw	r20, r12
    2a34:	48 19       	sub	r20, r8
    2a36:	59 09       	sbc	r21, r9
    2a38:	6a 09       	sbc	r22, r10
    2a3a:	7b 09       	sbc	r23, r11
    2a3c:	21 2f       	mov	r18, r17
    2a3e:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <xTimerQueue>
    2a42:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <xTimerQueue+0x1>
    2a46:	0e 94 b8 09 	call	0x1370	; 0x1370 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2a4a:	76 d8       	rcall	.-3860   	; 0x1b38 <xTaskResumeAll>
    2a4c:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2a4e:	04 c0       	rjmp	.+8      	; 0x2a58 <prvProcessTimerOrBlockTask+0x8e>
    2a50:	0e 94 a1 05 	call	0xb42	; 0xb42 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2a54:	01 c0       	rjmp	.+2      	; 0x2a58 <prvProcessTimerOrBlockTask+0x8e>
    2a56:	70 d8       	rcall	.-3872   	; 0x1b38 <xTaskResumeAll>
            }
        }
    }
    2a58:	0f 90       	pop	r0
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	1f 91       	pop	r17
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	cf 90       	pop	r12
    2a68:	bf 90       	pop	r11
    2a6a:	af 90       	pop	r10
    2a6c:	9f 90       	pop	r9
    2a6e:	8f 90       	pop	r8
    2a70:	08 95       	ret

00002a72 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2a72:	af 92       	push	r10
    2a74:	bf 92       	push	r11
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	28 97       	sbiw	r28, 0x08	; 8
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2a96:	82 c0       	rjmp	.+260    	; 0x2b9c <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	88 23       	and	r24, r24
    2a9c:	0c f4       	brge	.+2      	; 0x2aa0 <prvProcessReceivedCommands+0x2e>
    2a9e:	7e c0       	rjmp	.+252    	; 0x2b9c <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2aa0:	ae 80       	ldd	r10, Y+6	; 0x06
    2aa2:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2aa4:	d5 01       	movw	r26, r10
    2aa6:	1c 96       	adiw	r26, 0x0c	; 12
    2aa8:	8d 91       	ld	r24, X+
    2aaa:	9c 91       	ld	r25, X
    2aac:	1d 97       	sbiw	r26, 0x0d	; 13
    2aae:	89 2b       	or	r24, r25
    2ab0:	21 f0       	breq	.+8      	; 0x2aba <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ab2:	c5 01       	movw	r24, r10
    2ab4:	02 96       	adiw	r24, 0x02	; 2
    2ab6:	0e 94 25 05 	call	0xa4a	; 0xa4a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2aba:	ce 01       	movw	r24, r28
    2abc:	08 96       	adiw	r24, 0x08	; 8
    2abe:	01 df       	rcall	.-510    	; 0x28c2 <prvSampleTimeNow>
    2ac0:	8b 01       	movw	r16, r22
    2ac2:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac6:	0e 2e       	mov	r0, r30
    2ac8:	00 0c       	add	r0, r0
    2aca:	ff 0b       	sbc	r31, r31
    2acc:	ea 30       	cpi	r30, 0x0A	; 10
    2ace:	f1 05       	cpc	r31, r1
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <prvProcessReceivedCommands+0x62>
    2ad2:	64 c0       	rjmp	.+200    	; 0x2b9c <prvProcessReceivedCommands+0x12a>
    2ad4:	88 27       	eor	r24, r24
    2ad6:	ee 58       	subi	r30, 0x8E	; 142
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	8f 4f       	sbci	r24, 0xFF	; 255
    2adc:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2ae0:	f5 01       	movw	r30, r10
    2ae2:	86 89       	ldd	r24, Z+22	; 0x16
    2ae4:	81 60       	ori	r24, 0x01	; 1
    2ae6:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2ae8:	ca 80       	ldd	r12, Y+2	; 0x02
    2aea:	db 80       	ldd	r13, Y+3	; 0x03
    2aec:	ec 80       	ldd	r14, Y+4	; 0x04
    2aee:	fd 80       	ldd	r15, Y+5	; 0x05
    2af0:	46 85       	ldd	r20, Z+14	; 0x0e
    2af2:	57 85       	ldd	r21, Z+15	; 0x0f
    2af4:	60 89       	ldd	r22, Z+16	; 0x10
    2af6:	71 89       	ldd	r23, Z+17	; 0x11
    2af8:	4c 0d       	add	r20, r12
    2afa:	5d 1d       	adc	r21, r13
    2afc:	6e 1d       	adc	r22, r14
    2afe:	7f 1d       	adc	r23, r15
    2b00:	c5 01       	movw	r24, r10
    2b02:	87 dd       	rcall	.-1266   	; 0x2612 <prvInsertTimerInActiveList>
    2b04:	88 23       	and	r24, r24
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <prvProcessReceivedCommands+0x98>
    2b08:	49 c0       	rjmp	.+146    	; 0x2b9c <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b0a:	d5 01       	movw	r26, r10
    2b0c:	54 96       	adiw	r26, 0x14	; 20
    2b0e:	ed 91       	ld	r30, X+
    2b10:	fc 91       	ld	r31, X
    2b12:	55 97       	sbiw	r26, 0x15	; 21
    2b14:	c5 01       	movw	r24, r10
    2b16:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b18:	f5 01       	movw	r30, r10
    2b1a:	86 89       	ldd	r24, Z+22	; 0x16
    2b1c:	82 ff       	sbrs	r24, 2
    2b1e:	3e c0       	rjmp	.+124    	; 0x2b9c <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2b20:	4a 81       	ldd	r20, Y+2	; 0x02
    2b22:	5b 81       	ldd	r21, Y+3	; 0x03
    2b24:	6c 81       	ldd	r22, Y+4	; 0x04
    2b26:	7d 81       	ldd	r23, Y+5	; 0x05
    2b28:	86 85       	ldd	r24, Z+14	; 0x0e
    2b2a:	97 85       	ldd	r25, Z+15	; 0x0f
    2b2c:	a0 89       	ldd	r26, Z+16	; 0x10
    2b2e:	b1 89       	ldd	r27, Z+17	; 0x11
    2b30:	9a 01       	movw	r18, r20
    2b32:	ab 01       	movw	r20, r22
    2b34:	28 0f       	add	r18, r24
    2b36:	39 1f       	adc	r19, r25
    2b38:	4a 1f       	adc	r20, r26
    2b3a:	5b 1f       	adc	r21, r27
    2b3c:	c1 2c       	mov	r12, r1
    2b3e:	d1 2c       	mov	r13, r1
    2b40:	76 01       	movw	r14, r12
    2b42:	00 e0       	ldi	r16, 0x00	; 0
    2b44:	10 e0       	ldi	r17, 0x00	; 0
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	c5 01       	movw	r24, r10
    2b4a:	f5 dd       	rcall	.-1046   	; 0x2736 <xTimerGenericCommand>
    2b4c:	27 c0       	rjmp	.+78     	; 0x2b9c <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2b4e:	d5 01       	movw	r26, r10
    2b50:	56 96       	adiw	r26, 0x16	; 22
    2b52:	8c 91       	ld	r24, X
    2b54:	56 97       	sbiw	r26, 0x16	; 22
    2b56:	8e 7f       	andi	r24, 0xFE	; 254
    2b58:	56 96       	adiw	r26, 0x16	; 22
    2b5a:	8c 93       	st	X, r24
                        break;
    2b5c:	1f c0       	rjmp	.+62     	; 0x2b9c <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2b5e:	f5 01       	movw	r30, r10
    2b60:	86 89       	ldd	r24, Z+22	; 0x16
    2b62:	81 60       	ori	r24, 0x01	; 1
    2b64:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2b66:	4a 81       	ldd	r20, Y+2	; 0x02
    2b68:	5b 81       	ldd	r21, Y+3	; 0x03
    2b6a:	6c 81       	ldd	r22, Y+4	; 0x04
    2b6c:	7d 81       	ldd	r23, Y+5	; 0x05
    2b6e:	46 87       	std	Z+14, r20	; 0x0e
    2b70:	57 87       	std	Z+15, r21	; 0x0f
    2b72:	60 8b       	std	Z+16, r22	; 0x10
    2b74:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2b76:	40 0f       	add	r20, r16
    2b78:	51 1f       	adc	r21, r17
    2b7a:	62 1f       	adc	r22, r18
    2b7c:	73 1f       	adc	r23, r19
    2b7e:	68 01       	movw	r12, r16
    2b80:	79 01       	movw	r14, r18
    2b82:	c5 01       	movw	r24, r10
    2b84:	46 dd       	rcall	.-1396   	; 0x2612 <prvInsertTimerInActiveList>
                        break;
    2b86:	0a c0       	rjmp	.+20     	; 0x2b9c <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2b88:	f5 01       	movw	r30, r10
    2b8a:	86 89       	ldd	r24, Z+22	; 0x16
    2b8c:	81 fd       	sbrc	r24, 1
    2b8e:	04 c0       	rjmp	.+8      	; 0x2b98 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2b90:	c5 01       	movw	r24, r10
    2b92:	0e 94 97 04 	call	0x92e	; 0x92e <vPortFree>
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2b98:	8e 7f       	andi	r24, 0xFE	; 254
    2b9a:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	a9 01       	movw	r20, r18
    2ba2:	be 01       	movw	r22, r28
    2ba4:	6f 5f       	subi	r22, 0xFF	; 255
    2ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba8:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <xTimerQueue>
    2bac:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <xTimerQueue+0x1>
    2bb0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <xQueueReceive>
    2bb4:	81 11       	cpse	r24, r1
    2bb6:	70 cf       	rjmp	.-288    	; 0x2a98 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2bb8:	28 96       	adiw	r28, 0x08	; 8
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	ff 90       	pop	r15
    2bce:	ef 90       	pop	r14
    2bd0:	df 90       	pop	r13
    2bd2:	cf 90       	pop	r12
    2bd4:	bf 90       	pop	r11
    2bd6:	af 90       	pop	r10
    2bd8:	08 95       	ret

00002bda <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2bda:	08 95       	ret

00002bdc <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2bdc:	84 b1       	in	r24, 0x04	; 4
    2bde:	80 68       	ori	r24, 0x80	; 128
    2be0:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2be2:	85 b1       	in	r24, 0x05	; 5
    2be4:	80 68       	ori	r24, 0x80	; 128
    2be6:	85 b9       	out	0x05, r24	; 5
    2be8:	08 95       	ret

00002bea <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2bea:	83 b1       	in	r24, 0x03	; 3
    2bec:	80 68       	ori	r24, 0x80	; 128
    2bee:	83 b9       	out	0x03, r24	; 3
    2bf0:	08 95       	ret

00002bf2 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2bf2:	f4 df       	rcall	.-24     	; 0x2bdc <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2bf4:	2f ef       	ldi	r18, 0xFF	; 255
    2bf6:	80 e7       	ldi	r24, 0x70	; 112
    2bf8:	92 e0       	ldi	r25, 0x02	; 2
    2bfa:	21 50       	subi	r18, 0x01	; 1
    2bfc:	80 40       	sbci	r24, 0x00	; 0
    2bfe:	90 40       	sbci	r25, 0x00	; 0
    2c00:	e1 f7       	brne	.-8      	; 0x2bfa <vApplicationMallocFailedHook+0x8>
    2c02:	00 c0       	rjmp	.+0      	; 0x2c04 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2c04:	00 00       	nop
    2c06:	f1 df       	rcall	.-30     	; 0x2bea <prvBlinkMainLed>
    2c08:	f5 cf       	rjmp	.-22     	; 0x2bf4 <vApplicationMallocFailedHook+0x2>

00002c0a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2c0a:	e8 df       	rcall	.-48     	; 0x2bdc <prvSetMainLedOn>
    2c0c:	2f ef       	ldi	r18, 0xFF	; 255
    2c0e:	87 ea       	ldi	r24, 0xA7	; 167
    2c10:	91 e6       	ldi	r25, 0x61	; 97
    2c12:	21 50       	subi	r18, 0x01	; 1
    2c14:	80 40       	sbci	r24, 0x00	; 0
    2c16:	90 40       	sbci	r25, 0x00	; 0
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <vApplicationStackOverflowHook+0x8>
    2c1a:	00 c0       	rjmp	.+0      	; 0x2c1c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2c1c:	00 00       	nop
    2c1e:	e5 df       	rcall	.-54     	; 0x2bea <prvBlinkMainLed>
    2c20:	f5 cf       	rjmp	.-22     	; 0x2c0c <vApplicationStackOverflowHook+0x2>

00002c22 <sensorDataPackageHandler_setCO2_value>:
	package_lenght=lenght;
}

void sensorDataPackageHandler_setCO2_value(uint16_t value)
{
	co2_value=value;
    2c22:	90 93 69 0e 	sts	0x0E69, r25	; 0x800e69 <co2_value+0x1>
    2c26:	80 93 68 0e 	sts	0x0E68, r24	; 0x800e68 <co2_value>
    2c2a:	08 95       	ret

00002c2c <sensorDataPackageHandler_setTemp_value>:
}

void sensorDataPackageHandler_setTemp_value(uint16_t value)
{
	temp_value=value;
    2c2c:	90 93 64 0e 	sts	0x0E64, r25	; 0x800e64 <temp_value+0x1>
    2c30:	80 93 63 0e 	sts	0x0E63, r24	; 0x800e63 <temp_value>
    2c34:	08 95       	ret

00002c36 <sensorDataPackageHandler_setHumidity_value>:
}

void sensorDataPackageHandler_setHumidity_value(uint16_t value)
{
	hum_value=value;
    2c36:	90 93 67 0e 	sts	0x0E67, r25	; 0x800e67 <hum_value+0x1>
    2c3a:	80 93 66 0e 	sts	0x0E66, r24	; 0x800e66 <hum_value>
    2c3e:	08 95       	ret

00002c40 <initializeTempAndHumiditySemaphore>:
  EventGroupHandle_t dataEventGroup;
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
    2c40:	0f 93       	push	r16
	tempHumSemaphore = xSemaphoreCreateBinary();
    2c42:	43 e0       	ldi	r20, 0x03	; 3
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	0e 94 95 07 	call	0xf2a	; 0xf2a <xQueueGenericCreate>
    2c4c:	90 93 6e 0e 	sts	0x0E6E, r25	; 0x800e6e <tempHumSemaphore+0x1>
    2c50:	80 93 6d 0e 	sts	0x0E6D, r24	; 0x800e6d <tempHumSemaphore>
	xSemaphoreGive(tempHumSemaphore);
    2c54:	00 e0       	ldi	r16, 0x00	; 0
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	a9 01       	movw	r20, r18
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	70 e0       	ldi	r23, 0x00	; 0
    2c60:	0e 94 b8 07 	call	0xf70	; 0xf70 <xQueueGenericSend>
}
    2c64:	0f 91       	pop	r16
    2c66:	08 95       	ret

00002c68 <initializeQueue>:

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	62 e0       	ldi	r22, 0x02	; 2
    2c6c:	83 e0       	ldi	r24, 0x03	; 3
    2c6e:	0e 94 95 07 	call	0xf2a	; 0xf2a <xQueueGenericCreate>
    2c72:	90 93 6c 0e 	sts	0x0E6C, r25	; 0x800e6c <sensorDataQueue+0x1>
    2c76:	80 93 6b 0e 	sts	0x0E6B, r24	; 0x800e6b <sensorDataQueue>
    2c7a:	08 95       	ret

00002c7c <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    2c7c:	0e 94 3a 02 	call	0x474	; 0x474 <xEventGroupCreate>
    2c80:	90 93 72 0e 	sts	0x0E72, r25	; 0x800e72 <dataEventGroup+0x1>
    2c84:	80 93 71 0e 	sts	0x0E71, r24	; 0x800e71 <dataEventGroup>
    2c88:	08 95       	ret

00002c8a <initializeTempAndHumDriver>:
#include "TempAndHum.h"
#include "Setup.h"

void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    2c8a:	de d0       	rcall	.+444    	; 0x2e48 <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    2c8c:	81 11       	cpse	r24, r1
    2c8e:	05 c0       	rjmp	.+10     	; 0x2c9a <initializeTempAndHumDriver+0x10>
		{
			printf("Temp and Hum Driver Initialized ok\n");
    2c90:	8e eb       	ldi	r24, 0xBE	; 190
    2c92:	92 e0       	ldi	r25, 0x02	; 2
    2c94:	0c 94 5f 21 	jmp	0x42be	; 0x42be <puts>
    2c98:	08 95       	ret
		}
		
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    2c9a:	81 ee       	ldi	r24, 0xE1	; 225
    2c9c:	92 e0       	ldi	r25, 0x02	; 2
    2c9e:	0c 94 5f 21 	jmp	0x42be	; 0x42be <puts>
    2ca2:	08 95       	ret

00002ca4 <measureTempAndHum>:
		}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    2ca4:	e8 d0       	rcall	.+464    	; 0x2e76 <hih8120_wakeup>
    2ca6:	88 23       	and	r24, r24
    2ca8:	21 f0       	breq	.+8      	; 0x2cb2 <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    2caa:	8b ef       	ldi	r24, 0xFB	; 251
    2cac:	92 e0       	ldi	r25, 0x02	; 2
    2cae:	0e 94 5f 21 	call	0x42be	; 0x42be <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    2cb2:	63 e0       	ldi	r22, 0x03	; 3
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
	
	if ( HIH8120_OK !=  hih8120_measure() )
    2cba:	1a d8       	rcall	.-4044   	; 0x1cf0 <vTaskDelay>
    2cbc:	f0 d0       	rcall	.+480    	; 0x2e9e <hih8120_measure>
    2cbe:	88 23       	and	r24, r24
    2cc0:	21 f0       	breq	.+8      	; 0x2cca <measureTempAndHum+0x26>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    2cc2:	8b e1       	ldi	r24, 0x1B	; 27
    2cc4:	93 e0       	ldi	r25, 0x03	; 3
    2cc6:	0e 94 5f 21 	call	0x42be	; 0x42be <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    2cca:	61 e0       	ldi	r22, 0x01	; 1
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	0e c8       	rjmp	.-4068   	; 0x1cf0 <vTaskDelay>
    2cd4:	08 95       	ret

00002cd6 <TempAndHumTask>:
	
}
void TempAndHumTask(void* pvpParameter)
{
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	00 d0       	rcall	.+0      	; 0x2cdc <TempAndHumTask+0x6>
    2cdc:	1f 92       	push	r1
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
	
	while(1)
	{
		uint16_t Temp = 0;
    2ce2:	1c 82       	std	Y+4, r1	; 0x04
    2ce4:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t Humidity = 0;
    2ce6:	1a 82       	std	Y+2, r1	; 0x02
    2ce8:	19 82       	std	Y+1, r1	; 0x01
		
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    2cea:	4f ef       	ldi	r20, 0xFF	; 255
    2cec:	5f ef       	ldi	r21, 0xFF	; 255
    2cee:	ba 01       	movw	r22, r20
    2cf0:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <tempHumSemaphore>
    2cf4:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <tempHumSemaphore+0x1>
    2cf8:	0e 94 0c 09 	call	0x1218	; 0x1218 <xQueueSemaphoreTake>
    2cfc:	81 30       	cpi	r24, 0x01	; 1
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <TempAndHumTask+0x2c>
    2d00:	43 c0       	rjmp	.+134    	; 0x2d88 <TempAndHumTask+0xb2>
		{
			measureTempAndHum();
    2d02:	d0 df       	rcall	.-96     	; 0x2ca4 <measureTempAndHum>
			Temp = hih8120_getTemperature_x10();
    2d04:	0f d1       	rcall	.+542    	; 0x2f24 <hih8120_getTemperature_x10>
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
			Humidity = hih8120_getHumidityPercent_x10();
    2d0a:	ec d0       	rcall	.+472    	; 0x2ee4 <hih8120_getHumidityPercent_x10>
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	8c 81       	ldd	r24, Y+4	; 0x04
			printf("Temperature: %d\n",Temp);
    2d12:	8f 93       	push	r24
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	8f 93       	push	r24
    2d18:	80 e4       	ldi	r24, 0x40	; 64
    2d1a:	93 e0       	ldi	r25, 0x03	; 3
    2d1c:	9f 93       	push	r25
    2d1e:	8f 93       	push	r24
    2d20:	0e 94 4c 21 	call	0x4298	; 0x4298 <printf>
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
			printf("Humidity: %d\n",Humidity);
    2d26:	8f 93       	push	r24
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	8f 93       	push	r24
    2d2c:	81 e5       	ldi	r24, 0x51	; 81
    2d2e:	93 e0       	ldi	r25, 0x03	; 3
    2d30:	9f 93       	push	r25
    2d32:	8f 93       	push	r24
    2d34:	0e 94 4c 21 	call	0x4298	; 0x4298 <printf>
    2d38:	00 e0       	ldi	r16, 0x00	; 0
			xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
    2d3a:	2f ef       	ldi	r18, 0xFF	; 255
    2d3c:	3f ef       	ldi	r19, 0xFF	; 255
    2d3e:	a9 01       	movw	r20, r18
    2d40:	be 01       	movw	r22, r28
    2d42:	6d 5f       	subi	r22, 0xFD	; 253
    2d44:	7f 4f       	sbci	r23, 0xFF	; 255
    2d46:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <sensorDataQueue>
    2d4a:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <sensorDataQueue+0x1>
    2d4e:	0e 94 b8 07 	call	0xf70	; 0xf70 <xQueueGenericSend>
    2d52:	2f ef       	ldi	r18, 0xFF	; 255
			xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
    2d54:	3f ef       	ldi	r19, 0xFF	; 255
    2d56:	a9 01       	movw	r20, r18
    2d58:	be 01       	movw	r22, r28
    2d5a:	6f 5f       	subi	r22, 0xFF	; 255
    2d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5e:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <sensorDataQueue>
    2d62:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <sensorDataQueue+0x1>
    2d66:	0e 94 b8 07 	call	0xf70	; 0xf70 <xQueueGenericSend>
    2d6a:	42 e0       	ldi	r20, 0x02	; 2
			//printf("TEMP DATA SENT\n");
			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	80 91 71 0e 	lds	r24, 0x0E71	; 0x800e71 <dataEventGroup>
    2d76:	90 91 72 0e 	lds	r25, 0x0E72	; 0x800e72 <dataEventGroup+0x1>
    2d7a:	0e 94 ed 02 	call	0x5da	; 0x5da <xEventGroupSetBits>
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	6a e0       	ldi	r22, 0x0A	; 10
			//printf("BIT SET\n");
		}
		vTaskDelay(10);
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <vTaskDelay>
    2d94:	a6 cf       	rjmp	.-180    	; 0x2ce2 <TempAndHumTask+0xc>

00002d96 <createTempAndHumTask>:
		
	}
    2d96:	ef 92       	push	r14
}

void createTempAndHumTask()
{
    2d98:	ff 92       	push	r15
    2d9a:	0f 93       	push	r16
	initializeTempAndHumDriver();
    2d9c:	76 df       	rcall	.-276    	; 0x2c8a <initializeTempAndHumDriver>
		xTaskCreate(
    2d9e:	e1 2c       	mov	r14, r1
    2da0:	f1 2c       	mov	r15, r1
    2da2:	01 e0       	ldi	r16, 0x01	; 1
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 ec       	ldi	r20, 0xC0	; 192
    2daa:	50 e0       	ldi	r21, 0x00	; 0
    2dac:	6f e5       	ldi	r22, 0x5F	; 95
    2dae:	73 e0       	ldi	r23, 0x03	; 3
    2db0:	8b e6       	ldi	r24, 0x6B	; 107
    2db2:	96 e1       	ldi	r25, 0x16	; 22
    2db4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <xTaskCreate>
		,  "TempAndHumTask"  // A name just for humans
		,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	08 95       	ret

00002dc0 <initializeUsedData>:
#include <status_leds.h>


void initializeUsedData()
{
	initializeEventGroup();
    2dc0:	5d df       	rcall	.-326    	; 0x2c7c <initializeEventGroup>
	initializeQueue();
    2dc2:	52 df       	rcall	.-348    	; 0x2c68 <initializeQueue>
	initializeTempAndHumiditySemaphore();
    2dc4:	3d cf       	rjmp	.-390    	; 0x2c40 <initializeTempAndHumiditySemaphore>
    2dc6:	08 95       	ret

00002dc8 <create_tasks>:
    2dc8:	e6 df       	rcall	.-52     	; 0x2d96 <createTempAndHumTask>
}
/*-----------------------------------------------------------*/
void create_tasks(void)
{		
		createTempAndHumTask();
		createCO2Task();
    2dca:	0e 94 00 02 	call	0x400	; 0x400 <createCO2Task>
		createApplicationTask();	
    2dce:	0c 94 84 01 	jmp	0x308	; 0x308 <createApplicationTask>
    2dd2:	08 95       	ret

00002dd4 <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	15 d5       	rcall	.+2602   	; 0x3802 <stdio_initialise>
	initializeUsedData();
    2dd8:	f3 df       	rcall	.-26     	; 0x2dc0 <initializeUsedData>
	create_tasks();
    2dda:	f6 cf       	rjmp	.-20     	; 0x2dc8 <create_tasks>
    2ddc:	08 95       	ret

00002dde <main>:
    2dde:	fa df       	rcall	.-12     	; 0x2dd4 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Stttttarted!!\n");
    2de0:	8e e6       	ldi	r24, 0x6E	; 110
    2de2:	93 e0       	ldi	r25, 0x03	; 3
    2de4:	0e 94 5f 21 	call	0x42be	; 0x42be <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2de8:	0e 94 26 0c 	call	0x184c	; 0x184c <vTaskStartScheduler>
    2dec:	ff cf       	rjmp	.-2      	; 0x2dec <main+0xe>

00002dee <_hihTwiCallback>:
    2dee:	65 30       	cpi	r22, 0x05	; 5
    2df0:	f1 f4       	brne	.+60     	; 0x2e2e <_hihTwiCallback+0x40>
    2df2:	fa 01       	movw	r30, r20
    2df4:	80 81       	ld	r24, Z
    2df6:	8f 73       	andi	r24, 0x3F	; 63
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	98 2f       	mov	r25, r24
    2dfc:	88 27       	eor	r24, r24
    2dfe:	21 81       	ldd	r18, Z+1	; 0x01
    2e00:	82 2b       	or	r24, r18
    2e02:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2e06:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2e0a:	82 81       	ldd	r24, Z+2	; 0x02
    2e0c:	f0 e4       	ldi	r31, 0x40	; 64
    2e0e:	8f 9f       	mul	r24, r31
    2e10:	c0 01       	movw	r24, r0
    2e12:	11 24       	eor	r1, r1
    2e14:	fa 01       	movw	r30, r20
    2e16:	23 81       	ldd	r18, Z+3	; 0x03
    2e18:	26 95       	lsr	r18
    2e1a:	26 95       	lsr	r18
    2e1c:	82 2b       	or	r24, r18
    2e1e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2e22:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <_measuringIsReady>
    2e2c:	08 95       	ret
    2e2e:	64 30       	cpi	r22, 0x04	; 4
    2e30:	51 f0       	breq	.+20     	; 0x2e46 <_hihTwiCallback+0x58>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e4       	ldi	r25, 0x40	; 64
    2e36:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2e3a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2e3e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2e42:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2e46:	08 95       	ret

00002e48 <hih8120_initialise>:
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	07 ef       	ldi	r16, 0xF7	; 247
    2e4e:	16 e1       	ldi	r17, 0x16	; 22
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	34 e2       	ldi	r19, 0x24	; 36
    2e54:	44 ef       	ldi	r20, 0xF4	; 244
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	87 e2       	ldi	r24, 0x27	; 39
    2e5c:	0c d5       	rcall	.+2584   	; 0x3876 <twiCreate>
    2e5e:	90 93 3d 0e 	sts	0x0E3D, r25	; 0x800e3d <_hih8120Handler+0x1>
    2e62:	80 93 3c 0e 	sts	0x0E3C, r24	; 0x800e3c <_hih8120Handler>
    2e66:	21 e0       	ldi	r18, 0x01	; 1
    2e68:	89 2b       	or	r24, r25
    2e6a:	09 f0       	breq	.+2      	; 0x2e6e <hih8120_initialise+0x26>
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	82 2f       	mov	r24, r18
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	08 95       	ret

00002e76 <hih8120_wakeup>:
    2e76:	80 91 3c 0e 	lds	r24, 0x0E3C	; 0x800e3c <_hih8120Handler>
    2e7a:	90 91 3d 0e 	lds	r25, 0x0E3D	; 0x800e3d <_hih8120Handler+0x1>
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	51 f0       	breq	.+20     	; 0x2e96 <hih8120_wakeup+0x20>
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	60 e0       	ldi	r22, 0x00	; 0
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	47 d5       	rcall	.+2702   	; 0x3918 <twiTransmit>
    2e8a:	84 30       	cpi	r24, 0x04	; 4
    2e8c:	31 f4       	brne	.+12     	; 0x2e9a <hih8120_wakeup+0x24>
    2e8e:	10 92 3b 0e 	sts	0x0E3B, r1	; 0x800e3b <_measuringIsReady>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	08 95       	ret
    2e96:	82 e0       	ldi	r24, 0x02	; 2
    2e98:	08 95       	ret
    2e9a:	83 e0       	ldi	r24, 0x03	; 3
    2e9c:	08 95       	ret

00002e9e <hih8120_measure>:
    2e9e:	80 91 3c 0e 	lds	r24, 0x0E3C	; 0x800e3c <_hih8120Handler>
    2ea2:	90 91 3d 0e 	lds	r25, 0x0E3D	; 0x800e3d <_hih8120Handler+0x1>
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	31 f0       	breq	.+12     	; 0x2eb6 <hih8120_measure+0x18>
    2eaa:	64 e0       	ldi	r22, 0x04	; 4
    2eac:	81 d5       	rcall	.+2818   	; 0x39b0 <twiReceive>
    2eae:	85 30       	cpi	r24, 0x05	; 5
    2eb0:	21 f0       	breq	.+8      	; 0x2eba <hih8120_measure+0x1c>
    2eb2:	83 e0       	ldi	r24, 0x03	; 3
    2eb4:	08 95       	ret
    2eb6:	82 e0       	ldi	r24, 0x02	; 2
    2eb8:	08 95       	ret
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	08 95       	ret

00002ebe <hih8120_getHumidity>:
    2ebe:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    2ec2:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	7c d7       	rcall	.+3832   	; 0x3dc4 <__floatunsisf>
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	48 ec       	ldi	r20, 0xC8	; 200
    2ed2:	52 e4       	ldi	r21, 0x42	; 66
    2ed4:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__mulsf3>
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	38 ef       	ldi	r19, 0xF8	; 248
    2edc:	4f e7       	ldi	r20, 0x7F	; 127
    2ede:	56 e4       	ldi	r21, 0x46	; 70
    2ee0:	d8 c6       	rjmp	.+3504   	; 0x3c92 <__divsf3>
    2ee2:	08 95       	ret

00002ee4 <hih8120_getHumidityPercent_x10>:
    2ee4:	ec df       	rcall	.-40     	; 0x2ebe <hih8120_getHumidity>
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e2       	ldi	r20, 0x20	; 32
    2eec:	51 e4       	ldi	r21, 0x41	; 65
    2eee:	f8 d7       	rcall	.+4080   	; 0x3ee0 <__mulsf3>
    2ef0:	3d d7       	rcall	.+3706   	; 0x3d6c <__fixunssfsi>
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	08 95       	ret

00002ef6 <hih8120_getTemperature>:
    2ef6:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    2efa:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	60 d7       	rcall	.+3776   	; 0x3dc4 <__floatunsisf>
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	45 e2       	ldi	r20, 0x25	; 37
    2f0a:	53 e4       	ldi	r21, 0x43	; 67
    2f0c:	e9 d7       	rcall	.+4050   	; 0x3ee0 <__mulsf3>
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	38 ef       	ldi	r19, 0xF8	; 248
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	56 e4       	ldi	r21, 0x46	; 70
    2f16:	bd d6       	rcall	.+3450   	; 0x3c92 <__divsf3>
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	40 e2       	ldi	r20, 0x20	; 32
    2f1e:	52 e4       	ldi	r21, 0x42	; 66
    2f20:	53 c6       	rjmp	.+3238   	; 0x3bc8 <__subsf3>
    2f22:	08 95       	ret

00002f24 <hih8120_getTemperature_x10>:
    2f24:	e8 df       	rcall	.-48     	; 0x2ef6 <hih8120_getTemperature>
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
    2f2c:	51 e4       	ldi	r21, 0x41	; 65
    2f2e:	d8 d7       	rcall	.+4016   	; 0x3ee0 <__mulsf3>
    2f30:	18 d7       	rcall	.+3632   	; 0x3d62 <__fixsfsi>
    2f32:	cb 01       	movw	r24, r22
    2f34:	08 95       	ret

00002f36 <_serialCallBack>:
    2f36:	80 91 41 0e 	lds	r24, 0x0E41	; 0x800e41 <crc_sum.1945>
    2f3a:	86 0f       	add	r24, r22
    2f3c:	80 93 41 0e 	sts	0x0E41, r24	; 0x800e41 <crc_sum.1945>
    2f40:	90 91 44 0e 	lds	r25, 0x0E44	; 0x800e44 <_mh_state>
    2f44:	91 30       	cpi	r25, 0x01	; 1
    2f46:	79 f0       	breq	.+30     	; 0x2f66 <_serialCallBack+0x30>
    2f48:	28 f0       	brcs	.+10     	; 0x2f54 <_serialCallBack+0x1e>
    2f4a:	92 30       	cpi	r25, 0x02	; 2
    2f4c:	a9 f0       	breq	.+42     	; 0x2f78 <_serialCallBack+0x42>
    2f4e:	93 30       	cpi	r25, 0x03	; 3
    2f50:	19 f1       	breq	.+70     	; 0x2f98 <_serialCallBack+0x62>
    2f52:	08 95       	ret
    2f54:	6f 3f       	cpi	r22, 0xFF	; 255
    2f56:	09 f0       	breq	.+2      	; 0x2f5a <_serialCallBack+0x24>
    2f58:	48 c0       	rjmp	.+144    	; 0x2fea <_serialCallBack+0xb4>
    2f5a:	10 92 41 0e 	sts	0x0E41, r1	; 0x800e41 <crc_sum.1945>
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	80 93 44 0e 	sts	0x0E44, r24	; 0x800e44 <_mh_state>
    2f64:	08 95       	ret
    2f66:	66 38       	cpi	r22, 0x86	; 134
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <_serialCallBack+0x36>
    2f6a:	3f c0       	rjmp	.+126    	; 0x2fea <_serialCallBack+0xb4>
    2f6c:	10 92 40 0e 	sts	0x0E40, r1	; 0x800e40 <inDex.1943>
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	80 93 44 0e 	sts	0x0E44, r24	; 0x800e44 <_mh_state>
    2f76:	08 95       	ret
    2f78:	e0 91 40 0e 	lds	r30, 0x0E40	; 0x800e40 <inDex.1943>
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	8e 0f       	add	r24, r30
    2f80:	80 93 40 0e 	sts	0x0E40, r24	; 0x800e40 <inDex.1943>
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	e2 5c       	subi	r30, 0xC2	; 194
    2f88:	f1 4f       	sbci	r31, 0xF1	; 241
    2f8a:	60 83       	st	Z, r22
    2f8c:	82 30       	cpi	r24, 0x02	; 2
    2f8e:	69 f5       	brne	.+90     	; 0x2fea <_serialCallBack+0xb4>
    2f90:	83 e0       	ldi	r24, 0x03	; 3
    2f92:	80 93 44 0e 	sts	0x0E44, r24	; 0x800e44 <_mh_state>
    2f96:	08 95       	ret
    2f98:	90 91 40 0e 	lds	r25, 0x0E40	; 0x800e40 <inDex.1943>
    2f9c:	21 e0       	ldi	r18, 0x01	; 1
    2f9e:	29 0f       	add	r18, r25
    2fa0:	20 93 40 0e 	sts	0x0E40, r18	; 0x800e40 <inDex.1943>
    2fa4:	96 30       	cpi	r25, 0x06	; 6
    2fa6:	09 f5       	brne	.+66     	; 0x2fea <_serialCallBack+0xb4>
    2fa8:	81 11       	cpse	r24, r1
    2faa:	0e c0       	rjmp	.+28     	; 0x2fc8 <_serialCallBack+0x92>
    2fac:	ee e3       	ldi	r30, 0x3E	; 62
    2fae:	fe e0       	ldi	r31, 0x0E	; 14
    2fb0:	80 81       	ld	r24, Z
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	98 2f       	mov	r25, r24
    2fb6:	88 27       	eor	r24, r24
    2fb8:	21 81       	ldd	r18, Z+1	; 0x01
    2fba:	82 0f       	add	r24, r18
    2fbc:	91 1d       	adc	r25, r1
    2fbe:	90 93 46 0e 	sts	0x0E46, r25	; 0x800e46 <_ppm+0x1>
    2fc2:	80 93 45 0e 	sts	0x0E45, r24	; 0x800e45 <_ppm>
    2fc6:	04 c0       	rjmp	.+8      	; 0x2fd0 <_serialCallBack+0x9a>
    2fc8:	10 92 46 0e 	sts	0x0E46, r1	; 0x800e46 <_ppm+0x1>
    2fcc:	10 92 45 0e 	sts	0x0E45, r1	; 0x800e45 <_ppm>
    2fd0:	10 92 44 0e 	sts	0x0E44, r1	; 0x800e44 <_mh_state>
    2fd4:	e0 91 42 0e 	lds	r30, 0x0E42	; 0x800e42 <_appCallBack>
    2fd8:	f0 91 43 0e 	lds	r31, 0x0E43	; 0x800e43 <_appCallBack+0x1>
    2fdc:	30 97       	sbiw	r30, 0x00	; 0
    2fde:	29 f0       	breq	.+10     	; 0x2fea <_serialCallBack+0xb4>
    2fe0:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <_ppm>
    2fe4:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <_ppm+0x1>
    2fe8:	19 95       	eicall
    2fea:	08 95       	ret

00002fec <mh_z19_initialise>:
    2fec:	8f 92       	push	r8
    2fee:	9f 92       	push	r9
    2ff0:	af 92       	push	r10
    2ff2:	cf 92       	push	r12
    2ff4:	ef 92       	push	r14
    2ff6:	0f 93       	push	r16
    2ff8:	0f 2e       	mov	r0, r31
    2ffa:	fb e9       	ldi	r31, 0x9B	; 155
    2ffc:	8f 2e       	mov	r8, r31
    2ffe:	f7 e1       	ldi	r31, 0x17	; 23
    3000:	9f 2e       	mov	r9, r31
    3002:	f0 2d       	mov	r31, r0
    3004:	68 94       	set
    3006:	aa 24       	eor	r10, r10
    3008:	a4 f8       	bld	r10, 4
    300a:	68 94       	set
    300c:	cc 24       	eor	r12, r12
    300e:	c4 f8       	bld	r12, 4
    3010:	e1 2c       	mov	r14, r1
    3012:	00 e0       	ldi	r16, 0x00	; 0
    3014:	23 e0       	ldi	r18, 0x03	; 3
    3016:	40 e8       	ldi	r20, 0x80	; 128
    3018:	55 e2       	ldi	r21, 0x25	; 37
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	3f d0       	rcall	.+126    	; 0x309e <serial_create>
    3020:	90 93 48 0e 	sts	0x0E48, r25	; 0x800e48 <_serial+0x1>
    3024:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <_serial>
    3028:	0f 91       	pop	r16
    302a:	ef 90       	pop	r14
    302c:	cf 90       	pop	r12
    302e:	af 90       	pop	r10
    3030:	9f 90       	pop	r9
    3032:	8f 90       	pop	r8
    3034:	08 95       	ret

00003036 <mh_z19_injectCallBack>:
    3036:	90 93 43 0e 	sts	0x0E43, r25	; 0x800e43 <_appCallBack+0x1>
    303a:	80 93 42 0e 	sts	0x0E42, r24	; 0x800e42 <_appCallBack>
    303e:	08 95       	ret

00003040 <mh_z19_takeMeassuring>:
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	29 97       	sbiw	r28, 0x09	; 9
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	89 e0       	ldi	r24, 0x09	; 9
    3056:	e2 e2       	ldi	r30, 0x22	; 34
    3058:	f2 e0       	ldi	r31, 0x02	; 2
    305a:	9e 01       	movw	r18, r28
    305c:	2f 5f       	subi	r18, 0xFF	; 255
    305e:	3f 4f       	sbci	r19, 0xFF	; 255
    3060:	d9 01       	movw	r26, r18
    3062:	01 90       	ld	r0, Z+
    3064:	0d 92       	st	X+, r0
    3066:	8a 95       	dec	r24
    3068:	e1 f7       	brne	.-8      	; 0x3062 <mh_z19_takeMeassuring+0x22>
    306a:	10 92 46 0e 	sts	0x0E46, r1	; 0x800e46 <_ppm+0x1>
    306e:	10 92 45 0e 	sts	0x0E45, r1	; 0x800e45 <_ppm>
    3072:	80 91 47 0e 	lds	r24, 0x0E47	; 0x800e47 <_serial>
    3076:	90 91 48 0e 	lds	r25, 0x0E48	; 0x800e48 <_serial+0x1>
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	31 f0       	breq	.+12     	; 0x308a <mh_z19_takeMeassuring+0x4a>
    307e:	42 2f       	mov	r20, r18
    3080:	53 2f       	mov	r21, r19
    3082:	69 e0       	ldi	r22, 0x09	; 9
    3084:	d3 d0       	rcall	.+422    	; 0x322c <serial_sendBytes>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	01 c0       	rjmp	.+2      	; 0x308c <mh_z19_takeMeassuring+0x4c>
    308a:	82 e0       	ldi	r24, 0x02	; 2
    308c:	29 96       	adiw	r28, 0x09	; 9
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	08 95       	ret

0000309e <serial_create>:
    309e:	2f 92       	push	r2
    30a0:	3f 92       	push	r3
    30a2:	4f 92       	push	r4
    30a4:	5f 92       	push	r5
    30a6:	6f 92       	push	r6
    30a8:	7f 92       	push	r7
    30aa:	8f 92       	push	r8
    30ac:	9f 92       	push	r9
    30ae:	af 92       	push	r10
    30b0:	cf 92       	push	r12
    30b2:	ef 92       	push	r14
    30b4:	ff 92       	push	r15
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	f8 2e       	mov	r15, r24
    30c4:	2a 01       	movw	r4, r20
    30c6:	3b 01       	movw	r6, r22
    30c8:	88 e0       	ldi	r24, 0x08	; 8
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	b0 d7       	rcall	.+3936   	; 0x402e <malloc>
    30ce:	8c 01       	movw	r16, r24
    30d0:	8f 2d       	mov	r24, r15
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	fc 01       	movw	r30, r24
    30d6:	ee 0f       	add	r30, r30
    30d8:	ff 1f       	adc	r31, r31
    30da:	e7 5b       	subi	r30, 0xB7	; 183
    30dc:	f1 4f       	sbci	r31, 0xF1	; 241
    30de:	11 83       	std	Z+1, r17	; 0x01
    30e0:	00 83       	st	Z, r16
    30e2:	01 15       	cp	r16, r1
    30e4:	11 05       	cpc	r17, r1
    30e6:	09 f4       	brne	.+2      	; 0x30ea <serial_create+0x4c>
    30e8:	64 c0       	rjmp	.+200    	; 0x31b2 <serial_create+0x114>
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	fc 01       	movw	r30, r24
    30f0:	e5 5f       	subi	r30, 0xF5	; 245
    30f2:	fd 4f       	sbci	r31, 0xFD	; 253
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	d8 01       	movw	r26, r16
    30fa:	8d 93       	st	X+, r24
    30fc:	9c 93       	st	X, r25
    30fe:	6c 2d       	mov	r22, r12
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	84 e0       	ldi	r24, 0x04	; 4
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	79 d7       	rcall	.+3826   	; 0x3ffa <calloc>
    3108:	1c 01       	movw	r2, r24
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	86 e0       	ldi	r24, 0x06	; 6
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	73 d7       	rcall	.+3814   	; 0x3ffa <calloc>
    3114:	7c 01       	movw	r14, r24
    3116:	4c 2d       	mov	r20, r12
    3118:	b1 01       	movw	r22, r2
    311a:	3a d5       	rcall	.+2676   	; 0x3b90 <fifo_init>
    311c:	f8 01       	movw	r30, r16
    311e:	f5 82       	std	Z+5, r15	; 0x05
    3120:	e4 82       	std	Z+4, r14	; 0x04
    3122:	6a 2d       	mov	r22, r10
    3124:	70 e0       	ldi	r23, 0x00	; 0
    3126:	84 e0       	ldi	r24, 0x04	; 4
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	67 d7       	rcall	.+3790   	; 0x3ffa <calloc>
    312c:	1c 01       	movw	r2, r24
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	70 e0       	ldi	r23, 0x00	; 0
    3132:	86 e0       	ldi	r24, 0x06	; 6
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	61 d7       	rcall	.+3778   	; 0x3ffa <calloc>
    3138:	7c 01       	movw	r14, r24
    313a:	4a 2d       	mov	r20, r10
    313c:	b1 01       	movw	r22, r2
    313e:	28 d5       	rcall	.+2640   	; 0x3b90 <fifo_init>
    3140:	d8 01       	movw	r26, r16
    3142:	13 96       	adiw	r26, 0x03	; 3
    3144:	fc 92       	st	X, r15
    3146:	ee 92       	st	-X, r14
    3148:	12 97       	sbiw	r26, 0x02	; 2
    314a:	17 96       	adiw	r26, 0x07	; 7
    314c:	9c 92       	st	X, r9
    314e:	8e 92       	st	-X, r8
    3150:	16 97       	sbiw	r26, 0x06	; 6
    3152:	ff b6       	in	r15, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	ed 91       	ld	r30, X+
    3158:	fc 91       	ld	r31, X
    315a:	11 97       	sbiw	r26, 0x01	; 1
    315c:	36 97       	sbiw	r30, 0x06	; 6
    315e:	80 81       	ld	r24, Z
    3160:	82 60       	ori	r24, 0x02	; 2
    3162:	80 83       	st	Z, r24
    3164:	8d 90       	ld	r8, X+
    3166:	9c 90       	ld	r9, X
    3168:	c3 01       	movw	r24, r6
    316a:	b2 01       	movw	r22, r4
    316c:	2b d6       	rcall	.+3158   	; 0x3dc4 <__floatunsisf>
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e0       	ldi	r20, 0x00	; 0
    3174:	51 e4       	ldi	r21, 0x41	; 65
    3176:	b4 d6       	rcall	.+3432   	; 0x3ee0 <__mulsf3>
    3178:	9b 01       	movw	r18, r22
    317a:	ac 01       	movw	r20, r24
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	74 e2       	ldi	r23, 0x24	; 36
    3180:	84 e7       	ldi	r24, 0x74	; 116
    3182:	9b e4       	ldi	r25, 0x4B	; 75
    3184:	86 d5       	rcall	.+2828   	; 0x3c92 <__divsf3>
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e8       	ldi	r20, 0x80	; 128
    318c:	5f e3       	ldi	r21, 0x3F	; 63
    318e:	1c d5       	rcall	.+2616   	; 0x3bc8 <__subsf3>
    3190:	ed d5       	rcall	.+3034   	; 0x3d6c <__fixunssfsi>
    3192:	f4 01       	movw	r30, r8
    3194:	32 97       	sbiw	r30, 0x02	; 2
    3196:	60 83       	st	Z, r22
    3198:	d8 01       	movw	r26, r16
    319a:	ed 91       	ld	r30, X+
    319c:	fc 91       	ld	r31, X
    319e:	11 97       	sbiw	r26, 0x01	; 1
    31a0:	35 97       	sbiw	r30, 0x05	; 5
    31a2:	88 e9       	ldi	r24, 0x98	; 152
    31a4:	80 83       	st	Z, r24
    31a6:	ed 91       	ld	r30, X+
    31a8:	fc 91       	ld	r31, X
    31aa:	34 97       	sbiw	r30, 0x04	; 4
    31ac:	86 e0       	ldi	r24, 0x06	; 6
    31ae:	80 83       	st	Z, r24
    31b0:	ff be       	out	0x3f, r15	; 63
    31b2:	c8 01       	movw	r24, r16
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	cf 90       	pop	r12
    31c2:	af 90       	pop	r10
    31c4:	9f 90       	pop	r9
    31c6:	8f 90       	pop	r8
    31c8:	7f 90       	pop	r7
    31ca:	6f 90       	pop	r6
    31cc:	5f 90       	pop	r5
    31ce:	4f 90       	pop	r4
    31d0:	3f 90       	pop	r3
    31d2:	2f 90       	pop	r2
    31d4:	08 95       	ret

000031d6 <serial_sendByte>:
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	dc 01       	movw	r26, r24
    31dc:	89 2b       	or	r24, r25
    31de:	01 f1       	breq	.+64     	; 0x3220 <serial_sendByte+0x4a>
    31e0:	12 96       	adiw	r26, 0x02	; 2
    31e2:	ed 91       	ld	r30, X+
    31e4:	fc 91       	ld	r31, X
    31e6:	13 97       	sbiw	r26, 0x03	; 3
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	25 81       	ldd	r18, Z+5	; 0x05
    31ee:	98 1b       	sub	r25, r24
    31f0:	92 23       	and	r25, r18
    31f2:	84 81       	ldd	r24, Z+4	; 0x04
    31f4:	98 17       	cp	r25, r24
    31f6:	b1 f0       	breq	.+44     	; 0x3224 <serial_sendByte+0x4e>
    31f8:	83 81       	ldd	r24, Z+3	; 0x03
    31fa:	26 95       	lsr	r18
    31fc:	28 23       	and	r18, r24
    31fe:	c0 81       	ld	r28, Z
    3200:	d1 81       	ldd	r29, Z+1	; 0x01
    3202:	c2 0f       	add	r28, r18
    3204:	d1 1d       	adc	r29, r1
    3206:	68 83       	st	Y, r22
    3208:	8f 5f       	subi	r24, 0xFF	; 255
    320a:	95 81       	ldd	r25, Z+5	; 0x05
    320c:	89 23       	and	r24, r25
    320e:	83 83       	std	Z+3, r24	; 0x03
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	35 97       	sbiw	r30, 0x05	; 5
    3216:	80 81       	ld	r24, Z
    3218:	80 62       	ori	r24, 0x20	; 32
    321a:	80 83       	st	Z, r24
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	03 c0       	rjmp	.+6      	; 0x3226 <serial_sendByte+0x50>
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	01 c0       	rjmp	.+2      	; 0x3226 <serial_sendByte+0x50>
    3224:	82 e0       	ldi	r24, 0x02	; 2
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	08 95       	ret

0000322c <serial_sendBytes>:
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	7c 01       	movw	r14, r24
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	09 f4       	brne	.+2      	; 0x3240 <serial_sendBytes+0x14>
    323e:	41 c0       	rjmp	.+130    	; 0x32c2 <serial_sendBytes+0x96>
    3240:	dc 01       	movw	r26, r24
    3242:	12 96       	adiw	r26, 0x02	; 2
    3244:	ed 91       	ld	r30, X+
    3246:	fc 91       	ld	r31, X
    3248:	13 97       	sbiw	r26, 0x03	; 3
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	98 1b       	sub	r25, r24
    3250:	85 81       	ldd	r24, Z+5	; 0x05
    3252:	98 23       	and	r25, r24
    3254:	84 81       	ldd	r24, Z+4	; 0x04
    3256:	89 1b       	sub	r24, r25
    3258:	86 17       	cp	r24, r22
    325a:	a8 f1       	brcs	.+106    	; 0x32c6 <serial_sendBytes+0x9a>
    325c:	66 23       	and	r22, r22
    325e:	41 f1       	breq	.+80     	; 0x32b0 <serial_sendBytes+0x84>
    3260:	84 2f       	mov	r24, r20
    3262:	95 2f       	mov	r25, r21
    3264:	dc 01       	movw	r26, r24
    3266:	61 50       	subi	r22, 0x01	; 1
    3268:	46 2f       	mov	r20, r22
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	4f 5f       	subi	r20, 0xFF	; 255
    326e:	5f 4f       	sbci	r21, 0xFF	; 255
    3270:	48 0f       	add	r20, r24
    3272:	59 1f       	adc	r21, r25
    3274:	e7 01       	movw	r28, r14
    3276:	ea 81       	ldd	r30, Y+2	; 0x02
    3278:	fb 81       	ldd	r31, Y+3	; 0x03
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	82 81       	ldd	r24, Z+2	; 0x02
    327e:	25 81       	ldd	r18, Z+5	; 0x05
    3280:	98 1b       	sub	r25, r24
    3282:	92 23       	and	r25, r18
    3284:	84 81       	ldd	r24, Z+4	; 0x04
    3286:	98 17       	cp	r25, r24
    3288:	79 f0       	breq	.+30     	; 0x32a8 <serial_sendBytes+0x7c>
    328a:	8c 91       	ld	r24, X
    328c:	93 81       	ldd	r25, Z+3	; 0x03
    328e:	26 95       	lsr	r18
    3290:	29 23       	and	r18, r25
    3292:	60 81       	ld	r22, Z
    3294:	71 81       	ldd	r23, Z+1	; 0x01
    3296:	8b 01       	movw	r16, r22
    3298:	02 0f       	add	r16, r18
    329a:	11 1d       	adc	r17, r1
    329c:	e8 01       	movw	r28, r16
    329e:	88 83       	st	Y, r24
    32a0:	9f 5f       	subi	r25, 0xFF	; 255
    32a2:	85 81       	ldd	r24, Z+5	; 0x05
    32a4:	98 23       	and	r25, r24
    32a6:	93 83       	std	Z+3, r25	; 0x03
    32a8:	11 96       	adiw	r26, 0x01	; 1
    32aa:	a4 17       	cp	r26, r20
    32ac:	b5 07       	cpc	r27, r21
    32ae:	11 f7       	brne	.-60     	; 0x3274 <serial_sendBytes+0x48>
    32b0:	d7 01       	movw	r26, r14
    32b2:	ed 91       	ld	r30, X+
    32b4:	fc 91       	ld	r31, X
    32b6:	35 97       	sbiw	r30, 0x05	; 5
    32b8:	80 81       	ld	r24, Z
    32ba:	80 62       	ori	r24, 0x20	; 32
    32bc:	80 83       	st	Z, r24
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	03 c0       	rjmp	.+6      	; 0x32c8 <serial_sendBytes+0x9c>
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	01 c0       	rjmp	.+2      	; 0x32c8 <serial_sendBytes+0x9c>
    32c6:	82 e0       	ldi	r24, 0x02	; 2
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	1f 91       	pop	r17
    32ce:	0f 91       	pop	r16
    32d0:	ff 90       	pop	r15
    32d2:	ef 90       	pop	r14
    32d4:	08 95       	ret

000032d6 <serial_getByte>:
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	d1 f0       	breq	.+52     	; 0x330e <serial_getByte+0x38>
    32da:	dc 01       	movw	r26, r24
    32dc:	14 96       	adiw	r26, 0x04	; 4
    32de:	ed 91       	ld	r30, X+
    32e0:	fc 91       	ld	r31, X
    32e2:	15 97       	sbiw	r26, 0x05	; 5
    32e4:	93 81       	ldd	r25, Z+3	; 0x03
    32e6:	82 81       	ldd	r24, Z+2	; 0x02
    32e8:	98 17       	cp	r25, r24
    32ea:	99 f0       	breq	.+38     	; 0x3312 <serial_getByte+0x3c>
    32ec:	92 81       	ldd	r25, Z+2	; 0x02
    32ee:	85 81       	ldd	r24, Z+5	; 0x05
    32f0:	86 95       	lsr	r24
    32f2:	89 23       	and	r24, r25
    32f4:	a0 81       	ld	r26, Z
    32f6:	b1 81       	ldd	r27, Z+1	; 0x01
    32f8:	a8 0f       	add	r26, r24
    32fa:	b1 1d       	adc	r27, r1
    32fc:	8c 91       	ld	r24, X
    32fe:	db 01       	movw	r26, r22
    3300:	8c 93       	st	X, r24
    3302:	9f 5f       	subi	r25, 0xFF	; 255
    3304:	85 81       	ldd	r24, Z+5	; 0x05
    3306:	98 23       	and	r25, r24
    3308:	92 83       	std	Z+2, r25	; 0x02
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	08 95       	ret
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	08 95       	ret
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	08 95       	ret

00003316 <__vector_25>:
    3316:	1f 92       	push	r1
    3318:	0f 92       	push	r0
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	0f 92       	push	r0
    331e:	11 24       	eor	r1, r1
    3320:	0b b6       	in	r0, 0x3b	; 59
    3322:	0f 92       	push	r0
    3324:	2f 93       	push	r18
    3326:	3f 93       	push	r19
    3328:	4f 93       	push	r20
    332a:	5f 93       	push	r21
    332c:	6f 93       	push	r22
    332e:	7f 93       	push	r23
    3330:	8f 93       	push	r24
    3332:	9f 93       	push	r25
    3334:	af 93       	push	r26
    3336:	bf 93       	push	r27
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	ef 93       	push	r30
    333e:	ff 93       	push	r31
    3340:	a0 91 49 0e 	lds	r26, 0x0E49	; 0x800e49 <_ser_handle>
    3344:	b0 91 4a 0e 	lds	r27, 0x0E4A	; 0x800e4a <_ser_handle+0x1>
    3348:	10 97       	sbiw	r26, 0x00	; 0
    334a:	11 f1       	breq	.+68     	; 0x3390 <__vector_25+0x7a>
    334c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3350:	14 96       	adiw	r26, 0x04	; 4
    3352:	ed 91       	ld	r30, X+
    3354:	fc 91       	ld	r31, X
    3356:	15 97       	sbiw	r26, 0x05	; 5
    3358:	93 81       	ldd	r25, Z+3	; 0x03
    335a:	82 81       	ldd	r24, Z+2	; 0x02
    335c:	25 81       	ldd	r18, Z+5	; 0x05
    335e:	98 1b       	sub	r25, r24
    3360:	92 23       	and	r25, r18
    3362:	84 81       	ldd	r24, Z+4	; 0x04
    3364:	98 17       	cp	r25, r24
    3366:	61 f0       	breq	.+24     	; 0x3380 <__vector_25+0x6a>
    3368:	83 81       	ldd	r24, Z+3	; 0x03
    336a:	26 95       	lsr	r18
    336c:	28 23       	and	r18, r24
    336e:	c0 81       	ld	r28, Z
    3370:	d1 81       	ldd	r29, Z+1	; 0x01
    3372:	c2 0f       	add	r28, r18
    3374:	d1 1d       	adc	r29, r1
    3376:	68 83       	st	Y, r22
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	95 81       	ldd	r25, Z+5	; 0x05
    337c:	89 23       	and	r24, r25
    337e:	83 83       	std	Z+3, r24	; 0x03
    3380:	16 96       	adiw	r26, 0x06	; 6
    3382:	ed 91       	ld	r30, X+
    3384:	fc 91       	ld	r31, X
    3386:	17 97       	sbiw	r26, 0x07	; 7
    3388:	30 97       	sbiw	r30, 0x00	; 0
    338a:	11 f0       	breq	.+4      	; 0x3390 <__vector_25+0x7a>
    338c:	cd 01       	movw	r24, r26
    338e:	19 95       	eicall
    3390:	ff 91       	pop	r31
    3392:	ef 91       	pop	r30
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	bf 91       	pop	r27
    339a:	af 91       	pop	r26
    339c:	9f 91       	pop	r25
    339e:	8f 91       	pop	r24
    33a0:	7f 91       	pop	r23
    33a2:	6f 91       	pop	r22
    33a4:	5f 91       	pop	r21
    33a6:	4f 91       	pop	r20
    33a8:	3f 91       	pop	r19
    33aa:	2f 91       	pop	r18
    33ac:	0f 90       	pop	r0
    33ae:	0b be       	out	0x3b, r0	; 59
    33b0:	0f 90       	pop	r0
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	0f 90       	pop	r0
    33b6:	1f 90       	pop	r1
    33b8:	18 95       	reti

000033ba <__vector_26>:
    33ba:	1f 92       	push	r1
    33bc:	0f 92       	push	r0
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	0f 92       	push	r0
    33c2:	11 24       	eor	r1, r1
    33c4:	0b b6       	in	r0, 0x3b	; 59
    33c6:	0f 92       	push	r0
    33c8:	2f 93       	push	r18
    33ca:	8f 93       	push	r24
    33cc:	9f 93       	push	r25
    33ce:	af 93       	push	r26
    33d0:	bf 93       	push	r27
    33d2:	ef 93       	push	r30
    33d4:	ff 93       	push	r31
    33d6:	e0 91 49 0e 	lds	r30, 0x0E49	; 0x800e49 <_ser_handle>
    33da:	f0 91 4a 0e 	lds	r31, 0x0E4A	; 0x800e4a <_ser_handle+0x1>
    33de:	30 97       	sbiw	r30, 0x00	; 0
    33e0:	b9 f0       	breq	.+46     	; 0x3410 <__vector_26+0x56>
    33e2:	02 80       	ldd	r0, Z+2	; 0x02
    33e4:	f3 81       	ldd	r31, Z+3	; 0x03
    33e6:	e0 2d       	mov	r30, r0
    33e8:	93 81       	ldd	r25, Z+3	; 0x03
    33ea:	82 81       	ldd	r24, Z+2	; 0x02
    33ec:	98 17       	cp	r25, r24
    33ee:	b1 f0       	breq	.+44     	; 0x341c <__vector_26+0x62>
    33f0:	92 81       	ldd	r25, Z+2	; 0x02
    33f2:	85 81       	ldd	r24, Z+5	; 0x05
    33f4:	28 2f       	mov	r18, r24
    33f6:	26 95       	lsr	r18
    33f8:	29 23       	and	r18, r25
    33fa:	a0 81       	ld	r26, Z
    33fc:	b1 81       	ldd	r27, Z+1	; 0x01
    33fe:	a2 0f       	add	r26, r18
    3400:	b1 1d       	adc	r27, r1
    3402:	2c 91       	ld	r18, X
    3404:	9f 5f       	subi	r25, 0xFF	; 255
    3406:	89 23       	and	r24, r25
    3408:	82 83       	std	Z+2, r24	; 0x02
    340a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    340e:	0b c0       	rjmp	.+22     	; 0x3426 <__vector_26+0x6c>
    3410:	e1 ec       	ldi	r30, 0xC1	; 193
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	8f 7d       	andi	r24, 0xDF	; 223
    3418:	80 83       	st	Z, r24
    341a:	05 c0       	rjmp	.+10     	; 0x3426 <__vector_26+0x6c>
    341c:	e1 ec       	ldi	r30, 0xC1	; 193
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 81       	ld	r24, Z
    3422:	8f 7d       	andi	r24, 0xDF	; 223
    3424:	80 83       	st	Z, r24
    3426:	ff 91       	pop	r31
    3428:	ef 91       	pop	r30
    342a:	bf 91       	pop	r27
    342c:	af 91       	pop	r26
    342e:	9f 91       	pop	r25
    3430:	8f 91       	pop	r24
    3432:	2f 91       	pop	r18
    3434:	0f 90       	pop	r0
    3436:	0b be       	out	0x3b, r0	; 59
    3438:	0f 90       	pop	r0
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	0f 90       	pop	r0
    343e:	1f 90       	pop	r1
    3440:	18 95       	reti

00003442 <__vector_36>:
    3442:	1f 92       	push	r1
    3444:	0f 92       	push	r0
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	0f 92       	push	r0
    344a:	11 24       	eor	r1, r1
    344c:	0b b6       	in	r0, 0x3b	; 59
    344e:	0f 92       	push	r0
    3450:	2f 93       	push	r18
    3452:	3f 93       	push	r19
    3454:	4f 93       	push	r20
    3456:	5f 93       	push	r21
    3458:	6f 93       	push	r22
    345a:	7f 93       	push	r23
    345c:	8f 93       	push	r24
    345e:	9f 93       	push	r25
    3460:	af 93       	push	r26
    3462:	bf 93       	push	r27
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	ef 93       	push	r30
    346a:	ff 93       	push	r31
    346c:	a0 91 4b 0e 	lds	r26, 0x0E4B	; 0x800e4b <_ser_handle+0x2>
    3470:	b0 91 4c 0e 	lds	r27, 0x0E4C	; 0x800e4c <_ser_handle+0x3>
    3474:	10 97       	sbiw	r26, 0x00	; 0
    3476:	11 f1       	breq	.+68     	; 0x34bc <__vector_36+0x7a>
    3478:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    347c:	14 96       	adiw	r26, 0x04	; 4
    347e:	ed 91       	ld	r30, X+
    3480:	fc 91       	ld	r31, X
    3482:	15 97       	sbiw	r26, 0x05	; 5
    3484:	93 81       	ldd	r25, Z+3	; 0x03
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	25 81       	ldd	r18, Z+5	; 0x05
    348a:	98 1b       	sub	r25, r24
    348c:	92 23       	and	r25, r18
    348e:	84 81       	ldd	r24, Z+4	; 0x04
    3490:	98 17       	cp	r25, r24
    3492:	61 f0       	breq	.+24     	; 0x34ac <__vector_36+0x6a>
    3494:	83 81       	ldd	r24, Z+3	; 0x03
    3496:	26 95       	lsr	r18
    3498:	28 23       	and	r18, r24
    349a:	c0 81       	ld	r28, Z
    349c:	d1 81       	ldd	r29, Z+1	; 0x01
    349e:	c2 0f       	add	r28, r18
    34a0:	d1 1d       	adc	r29, r1
    34a2:	68 83       	st	Y, r22
    34a4:	8f 5f       	subi	r24, 0xFF	; 255
    34a6:	95 81       	ldd	r25, Z+5	; 0x05
    34a8:	89 23       	and	r24, r25
    34aa:	83 83       	std	Z+3, r24	; 0x03
    34ac:	16 96       	adiw	r26, 0x06	; 6
    34ae:	ed 91       	ld	r30, X+
    34b0:	fc 91       	ld	r31, X
    34b2:	17 97       	sbiw	r26, 0x07	; 7
    34b4:	30 97       	sbiw	r30, 0x00	; 0
    34b6:	11 f0       	breq	.+4      	; 0x34bc <__vector_36+0x7a>
    34b8:	cd 01       	movw	r24, r26
    34ba:	19 95       	eicall
    34bc:	ff 91       	pop	r31
    34be:	ef 91       	pop	r30
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	bf 91       	pop	r27
    34c6:	af 91       	pop	r26
    34c8:	9f 91       	pop	r25
    34ca:	8f 91       	pop	r24
    34cc:	7f 91       	pop	r23
    34ce:	6f 91       	pop	r22
    34d0:	5f 91       	pop	r21
    34d2:	4f 91       	pop	r20
    34d4:	3f 91       	pop	r19
    34d6:	2f 91       	pop	r18
    34d8:	0f 90       	pop	r0
    34da:	0b be       	out	0x3b, r0	; 59
    34dc:	0f 90       	pop	r0
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	0f 90       	pop	r0
    34e2:	1f 90       	pop	r1
    34e4:	18 95       	reti

000034e6 <__vector_37>:
    34e6:	1f 92       	push	r1
    34e8:	0f 92       	push	r0
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	0f 92       	push	r0
    34ee:	11 24       	eor	r1, r1
    34f0:	0b b6       	in	r0, 0x3b	; 59
    34f2:	0f 92       	push	r0
    34f4:	2f 93       	push	r18
    34f6:	8f 93       	push	r24
    34f8:	9f 93       	push	r25
    34fa:	af 93       	push	r26
    34fc:	bf 93       	push	r27
    34fe:	ef 93       	push	r30
    3500:	ff 93       	push	r31
    3502:	e0 91 4b 0e 	lds	r30, 0x0E4B	; 0x800e4b <_ser_handle+0x2>
    3506:	f0 91 4c 0e 	lds	r31, 0x0E4C	; 0x800e4c <_ser_handle+0x3>
    350a:	30 97       	sbiw	r30, 0x00	; 0
    350c:	b9 f0       	breq	.+46     	; 0x353c <__vector_37+0x56>
    350e:	02 80       	ldd	r0, Z+2	; 0x02
    3510:	f3 81       	ldd	r31, Z+3	; 0x03
    3512:	e0 2d       	mov	r30, r0
    3514:	93 81       	ldd	r25, Z+3	; 0x03
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	98 17       	cp	r25, r24
    351a:	b1 f0       	breq	.+44     	; 0x3548 <__vector_37+0x62>
    351c:	92 81       	ldd	r25, Z+2	; 0x02
    351e:	85 81       	ldd	r24, Z+5	; 0x05
    3520:	28 2f       	mov	r18, r24
    3522:	26 95       	lsr	r18
    3524:	29 23       	and	r18, r25
    3526:	a0 81       	ld	r26, Z
    3528:	b1 81       	ldd	r27, Z+1	; 0x01
    352a:	a2 0f       	add	r26, r18
    352c:	b1 1d       	adc	r27, r1
    352e:	2c 91       	ld	r18, X
    3530:	9f 5f       	subi	r25, 0xFF	; 255
    3532:	89 23       	and	r24, r25
    3534:	82 83       	std	Z+2, r24	; 0x02
    3536:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    353a:	0b c0       	rjmp	.+22     	; 0x3552 <__vector_37+0x6c>
    353c:	e9 ec       	ldi	r30, 0xC9	; 201
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	8f 7d       	andi	r24, 0xDF	; 223
    3544:	80 83       	st	Z, r24
    3546:	05 c0       	rjmp	.+10     	; 0x3552 <__vector_37+0x6c>
    3548:	e9 ec       	ldi	r30, 0xC9	; 201
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	8f 7d       	andi	r24, 0xDF	; 223
    3550:	80 83       	st	Z, r24
    3552:	ff 91       	pop	r31
    3554:	ef 91       	pop	r30
    3556:	bf 91       	pop	r27
    3558:	af 91       	pop	r26
    355a:	9f 91       	pop	r25
    355c:	8f 91       	pop	r24
    355e:	2f 91       	pop	r18
    3560:	0f 90       	pop	r0
    3562:	0b be       	out	0x3b, r0	; 59
    3564:	0f 90       	pop	r0
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	0f 90       	pop	r0
    356a:	1f 90       	pop	r1
    356c:	18 95       	reti

0000356e <__vector_51>:
    356e:	1f 92       	push	r1
    3570:	0f 92       	push	r0
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	0f 92       	push	r0
    3576:	11 24       	eor	r1, r1
    3578:	0b b6       	in	r0, 0x3b	; 59
    357a:	0f 92       	push	r0
    357c:	2f 93       	push	r18
    357e:	3f 93       	push	r19
    3580:	4f 93       	push	r20
    3582:	5f 93       	push	r21
    3584:	6f 93       	push	r22
    3586:	7f 93       	push	r23
    3588:	8f 93       	push	r24
    358a:	9f 93       	push	r25
    358c:	af 93       	push	r26
    358e:	bf 93       	push	r27
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	ef 93       	push	r30
    3596:	ff 93       	push	r31
    3598:	a0 91 4d 0e 	lds	r26, 0x0E4D	; 0x800e4d <_ser_handle+0x4>
    359c:	b0 91 4e 0e 	lds	r27, 0x0E4E	; 0x800e4e <_ser_handle+0x5>
    35a0:	10 97       	sbiw	r26, 0x00	; 0
    35a2:	11 f1       	breq	.+68     	; 0x35e8 <__vector_51+0x7a>
    35a4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    35a8:	14 96       	adiw	r26, 0x04	; 4
    35aa:	ed 91       	ld	r30, X+
    35ac:	fc 91       	ld	r31, X
    35ae:	15 97       	sbiw	r26, 0x05	; 5
    35b0:	93 81       	ldd	r25, Z+3	; 0x03
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	25 81       	ldd	r18, Z+5	; 0x05
    35b6:	98 1b       	sub	r25, r24
    35b8:	92 23       	and	r25, r18
    35ba:	84 81       	ldd	r24, Z+4	; 0x04
    35bc:	98 17       	cp	r25, r24
    35be:	61 f0       	breq	.+24     	; 0x35d8 <__vector_51+0x6a>
    35c0:	83 81       	ldd	r24, Z+3	; 0x03
    35c2:	26 95       	lsr	r18
    35c4:	28 23       	and	r18, r24
    35c6:	c0 81       	ld	r28, Z
    35c8:	d1 81       	ldd	r29, Z+1	; 0x01
    35ca:	c2 0f       	add	r28, r18
    35cc:	d1 1d       	adc	r29, r1
    35ce:	68 83       	st	Y, r22
    35d0:	8f 5f       	subi	r24, 0xFF	; 255
    35d2:	95 81       	ldd	r25, Z+5	; 0x05
    35d4:	89 23       	and	r24, r25
    35d6:	83 83       	std	Z+3, r24	; 0x03
    35d8:	16 96       	adiw	r26, 0x06	; 6
    35da:	ed 91       	ld	r30, X+
    35dc:	fc 91       	ld	r31, X
    35de:	17 97       	sbiw	r26, 0x07	; 7
    35e0:	30 97       	sbiw	r30, 0x00	; 0
    35e2:	11 f0       	breq	.+4      	; 0x35e8 <__vector_51+0x7a>
    35e4:	cd 01       	movw	r24, r26
    35e6:	19 95       	eicall
    35e8:	ff 91       	pop	r31
    35ea:	ef 91       	pop	r30
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	bf 91       	pop	r27
    35f2:	af 91       	pop	r26
    35f4:	9f 91       	pop	r25
    35f6:	8f 91       	pop	r24
    35f8:	7f 91       	pop	r23
    35fa:	6f 91       	pop	r22
    35fc:	5f 91       	pop	r21
    35fe:	4f 91       	pop	r20
    3600:	3f 91       	pop	r19
    3602:	2f 91       	pop	r18
    3604:	0f 90       	pop	r0
    3606:	0b be       	out	0x3b, r0	; 59
    3608:	0f 90       	pop	r0
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	0f 90       	pop	r0
    360e:	1f 90       	pop	r1
    3610:	18 95       	reti

00003612 <__vector_52>:
    3612:	1f 92       	push	r1
    3614:	0f 92       	push	r0
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	0f 92       	push	r0
    361a:	11 24       	eor	r1, r1
    361c:	0b b6       	in	r0, 0x3b	; 59
    361e:	0f 92       	push	r0
    3620:	2f 93       	push	r18
    3622:	8f 93       	push	r24
    3624:	9f 93       	push	r25
    3626:	af 93       	push	r26
    3628:	bf 93       	push	r27
    362a:	ef 93       	push	r30
    362c:	ff 93       	push	r31
    362e:	e0 91 4d 0e 	lds	r30, 0x0E4D	; 0x800e4d <_ser_handle+0x4>
    3632:	f0 91 4e 0e 	lds	r31, 0x0E4E	; 0x800e4e <_ser_handle+0x5>
    3636:	30 97       	sbiw	r30, 0x00	; 0
    3638:	b9 f0       	breq	.+46     	; 0x3668 <__vector_52+0x56>
    363a:	02 80       	ldd	r0, Z+2	; 0x02
    363c:	f3 81       	ldd	r31, Z+3	; 0x03
    363e:	e0 2d       	mov	r30, r0
    3640:	93 81       	ldd	r25, Z+3	; 0x03
    3642:	82 81       	ldd	r24, Z+2	; 0x02
    3644:	98 17       	cp	r25, r24
    3646:	b1 f0       	breq	.+44     	; 0x3674 <__vector_52+0x62>
    3648:	92 81       	ldd	r25, Z+2	; 0x02
    364a:	85 81       	ldd	r24, Z+5	; 0x05
    364c:	28 2f       	mov	r18, r24
    364e:	26 95       	lsr	r18
    3650:	29 23       	and	r18, r25
    3652:	a0 81       	ld	r26, Z
    3654:	b1 81       	ldd	r27, Z+1	; 0x01
    3656:	a2 0f       	add	r26, r18
    3658:	b1 1d       	adc	r27, r1
    365a:	2c 91       	ld	r18, X
    365c:	9f 5f       	subi	r25, 0xFF	; 255
    365e:	89 23       	and	r24, r25
    3660:	82 83       	std	Z+2, r24	; 0x02
    3662:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3666:	0b c0       	rjmp	.+22     	; 0x367e <__vector_52+0x6c>
    3668:	e1 ed       	ldi	r30, 0xD1	; 209
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	8f 7d       	andi	r24, 0xDF	; 223
    3670:	80 83       	st	Z, r24
    3672:	05 c0       	rjmp	.+10     	; 0x367e <__vector_52+0x6c>
    3674:	e1 ed       	ldi	r30, 0xD1	; 209
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	8f 7d       	andi	r24, 0xDF	; 223
    367c:	80 83       	st	Z, r24
    367e:	ff 91       	pop	r31
    3680:	ef 91       	pop	r30
    3682:	bf 91       	pop	r27
    3684:	af 91       	pop	r26
    3686:	9f 91       	pop	r25
    3688:	8f 91       	pop	r24
    368a:	2f 91       	pop	r18
    368c:	0f 90       	pop	r0
    368e:	0b be       	out	0x3b, r0	; 59
    3690:	0f 90       	pop	r0
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	0f 90       	pop	r0
    3696:	1f 90       	pop	r1
    3698:	18 95       	reti

0000369a <__vector_54>:
    369a:	1f 92       	push	r1
    369c:	0f 92       	push	r0
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	0f 92       	push	r0
    36a2:	11 24       	eor	r1, r1
    36a4:	0b b6       	in	r0, 0x3b	; 59
    36a6:	0f 92       	push	r0
    36a8:	2f 93       	push	r18
    36aa:	3f 93       	push	r19
    36ac:	4f 93       	push	r20
    36ae:	5f 93       	push	r21
    36b0:	6f 93       	push	r22
    36b2:	7f 93       	push	r23
    36b4:	8f 93       	push	r24
    36b6:	9f 93       	push	r25
    36b8:	af 93       	push	r26
    36ba:	bf 93       	push	r27
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	ef 93       	push	r30
    36c2:	ff 93       	push	r31
    36c4:	a0 91 4f 0e 	lds	r26, 0x0E4F	; 0x800e4f <_ser_handle+0x6>
    36c8:	b0 91 50 0e 	lds	r27, 0x0E50	; 0x800e50 <_ser_handle+0x7>
    36cc:	10 97       	sbiw	r26, 0x00	; 0
    36ce:	11 f1       	breq	.+68     	; 0x3714 <__vector_54+0x7a>
    36d0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    36d4:	14 96       	adiw	r26, 0x04	; 4
    36d6:	ed 91       	ld	r30, X+
    36d8:	fc 91       	ld	r31, X
    36da:	15 97       	sbiw	r26, 0x05	; 5
    36dc:	93 81       	ldd	r25, Z+3	; 0x03
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	25 81       	ldd	r18, Z+5	; 0x05
    36e2:	98 1b       	sub	r25, r24
    36e4:	92 23       	and	r25, r18
    36e6:	84 81       	ldd	r24, Z+4	; 0x04
    36e8:	98 17       	cp	r25, r24
    36ea:	61 f0       	breq	.+24     	; 0x3704 <__vector_54+0x6a>
    36ec:	83 81       	ldd	r24, Z+3	; 0x03
    36ee:	26 95       	lsr	r18
    36f0:	28 23       	and	r18, r24
    36f2:	c0 81       	ld	r28, Z
    36f4:	d1 81       	ldd	r29, Z+1	; 0x01
    36f6:	c2 0f       	add	r28, r18
    36f8:	d1 1d       	adc	r29, r1
    36fa:	68 83       	st	Y, r22
    36fc:	8f 5f       	subi	r24, 0xFF	; 255
    36fe:	95 81       	ldd	r25, Z+5	; 0x05
    3700:	89 23       	and	r24, r25
    3702:	83 83       	std	Z+3, r24	; 0x03
    3704:	16 96       	adiw	r26, 0x06	; 6
    3706:	ed 91       	ld	r30, X+
    3708:	fc 91       	ld	r31, X
    370a:	17 97       	sbiw	r26, 0x07	; 7
    370c:	30 97       	sbiw	r30, 0x00	; 0
    370e:	11 f0       	breq	.+4      	; 0x3714 <__vector_54+0x7a>
    3710:	cd 01       	movw	r24, r26
    3712:	19 95       	eicall
    3714:	ff 91       	pop	r31
    3716:	ef 91       	pop	r30
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	bf 91       	pop	r27
    371e:	af 91       	pop	r26
    3720:	9f 91       	pop	r25
    3722:	8f 91       	pop	r24
    3724:	7f 91       	pop	r23
    3726:	6f 91       	pop	r22
    3728:	5f 91       	pop	r21
    372a:	4f 91       	pop	r20
    372c:	3f 91       	pop	r19
    372e:	2f 91       	pop	r18
    3730:	0f 90       	pop	r0
    3732:	0b be       	out	0x3b, r0	; 59
    3734:	0f 90       	pop	r0
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	0f 90       	pop	r0
    373a:	1f 90       	pop	r1
    373c:	18 95       	reti

0000373e <__vector_55>:
    373e:	1f 92       	push	r1
    3740:	0f 92       	push	r0
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	0f 92       	push	r0
    3746:	11 24       	eor	r1, r1
    3748:	0b b6       	in	r0, 0x3b	; 59
    374a:	0f 92       	push	r0
    374c:	2f 93       	push	r18
    374e:	8f 93       	push	r24
    3750:	9f 93       	push	r25
    3752:	af 93       	push	r26
    3754:	bf 93       	push	r27
    3756:	ef 93       	push	r30
    3758:	ff 93       	push	r31
    375a:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <_ser_handle+0x6>
    375e:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <_ser_handle+0x7>
    3762:	30 97       	sbiw	r30, 0x00	; 0
    3764:	b9 f0       	breq	.+46     	; 0x3794 <__vector_55+0x56>
    3766:	02 80       	ldd	r0, Z+2	; 0x02
    3768:	f3 81       	ldd	r31, Z+3	; 0x03
    376a:	e0 2d       	mov	r30, r0
    376c:	93 81       	ldd	r25, Z+3	; 0x03
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	98 17       	cp	r25, r24
    3772:	b1 f0       	breq	.+44     	; 0x37a0 <__vector_55+0x62>
    3774:	92 81       	ldd	r25, Z+2	; 0x02
    3776:	85 81       	ldd	r24, Z+5	; 0x05
    3778:	28 2f       	mov	r18, r24
    377a:	26 95       	lsr	r18
    377c:	29 23       	and	r18, r25
    377e:	a0 81       	ld	r26, Z
    3780:	b1 81       	ldd	r27, Z+1	; 0x01
    3782:	a2 0f       	add	r26, r18
    3784:	b1 1d       	adc	r27, r1
    3786:	2c 91       	ld	r18, X
    3788:	9f 5f       	subi	r25, 0xFF	; 255
    378a:	89 23       	and	r24, r25
    378c:	82 83       	std	Z+2, r24	; 0x02
    378e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3792:	0b c0       	rjmp	.+22     	; 0x37aa <__vector_55+0x6c>
    3794:	e1 e3       	ldi	r30, 0x31	; 49
    3796:	f1 e0       	ldi	r31, 0x01	; 1
    3798:	80 81       	ld	r24, Z
    379a:	8f 7d       	andi	r24, 0xDF	; 223
    379c:	80 83       	st	Z, r24
    379e:	05 c0       	rjmp	.+10     	; 0x37aa <__vector_55+0x6c>
    37a0:	e1 e3       	ldi	r30, 0x31	; 49
    37a2:	f1 e0       	ldi	r31, 0x01	; 1
    37a4:	80 81       	ld	r24, Z
    37a6:	8f 7d       	andi	r24, 0xDF	; 223
    37a8:	80 83       	st	Z, r24
    37aa:	ff 91       	pop	r31
    37ac:	ef 91       	pop	r30
    37ae:	bf 91       	pop	r27
    37b0:	af 91       	pop	r26
    37b2:	9f 91       	pop	r25
    37b4:	8f 91       	pop	r24
    37b6:	2f 91       	pop	r18
    37b8:	0f 90       	pop	r0
    37ba:	0b be       	out	0x3b, r0	; 59
    37bc:	0f 90       	pop	r0
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	0f 90       	pop	r0
    37c2:	1f 90       	pop	r1
    37c4:	18 95       	reti

000037c6 <usart_getchar>:
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	1f 92       	push	r1
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	be 01       	movw	r22, r28
    37d2:	6f 5f       	subi	r22, 0xFF	; 255
    37d4:	7f 4f       	sbci	r23, 0xFF	; 255
    37d6:	80 91 51 0e 	lds	r24, 0x0E51	; 0x800e51 <_com_serial_instance>
    37da:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <_com_serial_instance+0x1>
    37de:	7b dd       	rcall	.-1290   	; 0x32d6 <serial_getByte>
    37e0:	81 11       	cpse	r24, r1
    37e2:	f6 cf       	rjmp	.-20     	; 0x37d0 <usart_getchar+0xa>
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0f 90       	pop	r0
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	08 95       	ret

000037f0 <usart_putchar>:
    37f0:	68 2f       	mov	r22, r24
    37f2:	80 91 51 0e 	lds	r24, 0x0E51	; 0x800e51 <_com_serial_instance>
    37f6:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <_com_serial_instance+0x1>
    37fa:	ed dc       	rcall	.-1574   	; 0x31d6 <serial_sendByte>
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	08 95       	ret

00003802 <stdio_initialise>:
    3802:	8f 92       	push	r8
    3804:	9f 92       	push	r9
    3806:	af 92       	push	r10
    3808:	cf 92       	push	r12
    380a:	ef 92       	push	r14
    380c:	0f 93       	push	r16
    380e:	81 2c       	mov	r8, r1
    3810:	91 2c       	mov	r9, r1
    3812:	68 94       	set
    3814:	aa 24       	eor	r10, r10
    3816:	a7 f8       	bld	r10, 7
    3818:	68 94       	set
    381a:	cc 24       	eor	r12, r12
    381c:	c7 f8       	bld	r12, 7
    381e:	e1 2c       	mov	r14, r1
    3820:	00 e0       	ldi	r16, 0x00	; 0
    3822:	23 e0       	ldi	r18, 0x03	; 3
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	51 ee       	ldi	r21, 0xE1	; 225
    3828:	60 e0       	ldi	r22, 0x00	; 0
    382a:	70 e0       	ldi	r23, 0x00	; 0
    382c:	38 dc       	rcall	.-1936   	; 0x309e <serial_create>
    382e:	90 93 52 0e 	sts	0x0E52, r25	; 0x800e52 <_com_serial_instance+0x1>
    3832:	80 93 51 0e 	sts	0x0E51, r24	; 0x800e51 <_com_serial_instance>
    3836:	e9 e7       	ldi	r30, 0x79	; 121
    3838:	fe e0       	ldi	r31, 0x0E	; 14
    383a:	83 e1       	ldi	r24, 0x13	; 19
    383c:	92 e0       	ldi	r25, 0x02	; 2
    383e:	91 83       	std	Z+1, r25	; 0x01
    3840:	80 83       	st	Z, r24
    3842:	93 83       	std	Z+3, r25	; 0x03
    3844:	82 83       	std	Z+2, r24	; 0x02
    3846:	0f 91       	pop	r16
    3848:	ef 90       	pop	r14
    384a:	cf 90       	pop	r12
    384c:	af 90       	pop	r10
    384e:	9f 90       	pop	r9
    3850:	8f 90       	pop	r8
    3852:	08 95       	ret

00003854 <_initTwiInterface>:
    3854:	80 91 61 0e 	lds	r24, 0x0E61	; 0x800e61 <_twiIsInitiated>
    3858:	81 11       	cpse	r24, r1
    385a:	0c c0       	rjmp	.+24     	; 0x3874 <_initTwiInterface+0x20>
    385c:	8c e0       	ldi	r24, 0x0C	; 12
    385e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3862:	8f ef       	ldi	r24, 0xFF	; 255
    3864:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3868:	84 e0       	ldi	r24, 0x04	; 4
    386a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	80 93 61 0e 	sts	0x0E61, r24	; 0x800e61 <_twiIsInitiated>
    3874:	08 95       	ret

00003876 <twiCreate>:
    3876:	af 92       	push	r10
    3878:	bf 92       	push	r11
    387a:	cf 92       	push	r12
    387c:	df 92       	push	r13
    387e:	ef 92       	push	r14
    3880:	ff 92       	push	r15
    3882:	0f 93       	push	r16
    3884:	1f 93       	push	r17
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	a8 2e       	mov	r10, r24
    388c:	b6 2e       	mov	r11, r22
    388e:	69 01       	movw	r12, r18
    3890:	7a 01       	movw	r14, r20
    3892:	84 e0       	ldi	r24, 0x04	; 4
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	cb d3       	rcall	.+1942   	; 0x402e <malloc>
    3898:	ec 01       	movw	r28, r24
    389a:	89 2b       	or	r24, r25
    389c:	61 f1       	breq	.+88     	; 0x38f6 <twiCreate+0x80>
    389e:	a8 82       	st	Y, r10
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	b8 12       	cpse	r11, r24
    38a4:	12 c0       	rjmp	.+36     	; 0x38ca <twiCreate+0x54>
    38a6:	c7 01       	movw	r24, r14
    38a8:	b6 01       	movw	r22, r12
    38aa:	20 ea       	ldi	r18, 0xA0	; 160
    38ac:	36 e8       	ldi	r19, 0x86	; 134
    38ae:	41 e0       	ldi	r20, 0x01	; 1
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	79 d3       	rcall	.+1778   	; 0x3fa6 <__udivmodsi4>
    38b4:	da 01       	movw	r26, r20
    38b6:	c9 01       	movw	r24, r18
    38b8:	40 97       	sbiw	r24, 0x10	; 16
    38ba:	a1 09       	sbc	r26, r1
    38bc:	b1 09       	sbc	r27, r1
    38be:	b6 95       	lsr	r27
    38c0:	a7 95       	ror	r26
    38c2:	97 95       	ror	r25
    38c4:	87 95       	ror	r24
    38c6:	89 83       	std	Y+1, r24	; 0x01
    38c8:	11 c0       	rjmp	.+34     	; 0x38ec <twiCreate+0x76>
    38ca:	c7 01       	movw	r24, r14
    38cc:	b6 01       	movw	r22, r12
    38ce:	20 e8       	ldi	r18, 0x80	; 128
    38d0:	3a e1       	ldi	r19, 0x1A	; 26
    38d2:	46 e0       	ldi	r20, 0x06	; 6
    38d4:	50 e0       	ldi	r21, 0x00	; 0
    38d6:	67 d3       	rcall	.+1742   	; 0x3fa6 <__udivmodsi4>
    38d8:	da 01       	movw	r26, r20
    38da:	c9 01       	movw	r24, r18
    38dc:	40 97       	sbiw	r24, 0x10	; 16
    38de:	a1 09       	sbc	r26, r1
    38e0:	b1 09       	sbc	r27, r1
    38e2:	b6 95       	lsr	r27
    38e4:	a7 95       	ror	r26
    38e6:	97 95       	ror	r25
    38e8:	87 95       	ror	r24
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	1b 83       	std	Y+3, r17	; 0x03
    38ee:	0a 83       	std	Y+2, r16	; 0x02
    38f0:	8c 2f       	mov	r24, r28
    38f2:	9d 2f       	mov	r25, r29
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <twiCreate+0x84>
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	1f 91       	pop	r17
    3900:	0f 91       	pop	r16
    3902:	ff 90       	pop	r15
    3904:	ef 90       	pop	r14
    3906:	df 90       	pop	r13
    3908:	cf 90       	pop	r12
    390a:	bf 90       	pop	r11
    390c:	af 90       	pop	r10
    390e:	08 95       	ret

00003910 <twiIsBusy>:
    3910:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3914:	81 70       	andi	r24, 0x01	; 1
    3916:	08 95       	ret

00003918 <twiTransmit>:
    3918:	ff 92       	push	r15
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	d1 f1       	breq	.+116    	; 0x399a <twiTransmit+0x82>
    3926:	4a 30       	cpi	r20, 0x0A	; 10
    3928:	d0 f5       	brcc	.+116    	; 0x399e <twiTransmit+0x86>
    392a:	f4 2e       	mov	r15, r20
    392c:	8b 01       	movw	r16, r22
    392e:	ec 01       	movw	r28, r24
    3930:	ef df       	rcall	.-34     	; 0x3910 <twiIsBusy>
    3932:	81 11       	cpse	r24, r1
    3934:	36 c0       	rjmp	.+108    	; 0x39a2 <twiTransmit+0x8a>
    3936:	80 91 54 0e 	lds	r24, 0x0E54	; 0x800e54 <_twiCurrentHandler>
    393a:	90 91 55 0e 	lds	r25, 0x0E55	; 0x800e55 <_twiCurrentHandler+0x1>
    393e:	c8 17       	cp	r28, r24
    3940:	d9 07       	cpc	r29, r25
    3942:	41 f0       	breq	.+16     	; 0x3954 <twiTransmit+0x3c>
    3944:	87 df       	rcall	.-242    	; 0x3854 <_initTwiInterface>
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    394c:	d0 93 55 0e 	sts	0x0E55, r29	; 0x800e55 <_twiCurrentHandler+0x1>
    3950:	c0 93 54 0e 	sts	0x0E54, r28	; 0x800e54 <_twiCurrentHandler>
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	8f 0d       	add	r24, r15
    3958:	80 93 56 0e 	sts	0x0E56, r24	; 0x800e56 <_twiMessageLen>
    395c:	88 81       	ld	r24, Y
    395e:	88 0f       	add	r24, r24
    3960:	80 93 57 0e 	sts	0x0E57, r24	; 0x800e57 <_twiMessageBuffer>
    3964:	ff 20       	and	r15, r15
    3966:	89 f0       	breq	.+34     	; 0x398a <twiTransmit+0x72>
    3968:	f8 01       	movw	r30, r16
    396a:	a8 e5       	ldi	r26, 0x58	; 88
    396c:	be e0       	ldi	r27, 0x0E	; 14
    396e:	4f ef       	ldi	r20, 0xFF	; 255
    3970:	4f 0d       	add	r20, r15
    3972:	64 2f       	mov	r22, r20
    3974:	70 e0       	ldi	r23, 0x00	; 0
    3976:	cb 01       	movw	r24, r22
    3978:	01 96       	adiw	r24, 0x01	; 1
    397a:	b8 01       	movw	r22, r16
    397c:	68 0f       	add	r22, r24
    397e:	79 1f       	adc	r23, r25
    3980:	81 91       	ld	r24, Z+
    3982:	8d 93       	st	X+, r24
    3984:	e6 17       	cp	r30, r22
    3986:	f7 07       	cpc	r31, r23
    3988:	d9 f7       	brne	.-10     	; 0x3980 <twiTransmit+0x68>
    398a:	88 ef       	ldi	r24, 0xF8	; 248
    398c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3990:	85 ea       	ldi	r24, 0xA5	; 165
    3992:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3996:	84 e0       	ldi	r24, 0x04	; 4
    3998:	05 c0       	rjmp	.+10     	; 0x39a4 <twiTransmit+0x8c>
    399a:	86 e0       	ldi	r24, 0x06	; 6
    399c:	03 c0       	rjmp	.+6      	; 0x39a4 <twiTransmit+0x8c>
    399e:	87 e0       	ldi	r24, 0x07	; 7
    39a0:	01 c0       	rjmp	.+2      	; 0x39a4 <twiTransmit+0x8c>
    39a2:	82 e0       	ldi	r24, 0x02	; 2
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	ff 90       	pop	r15
    39ae:	08 95       	ret

000039b0 <twiReceive>:
    39b0:	1f 93       	push	r17
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	29 f1       	breq	.+74     	; 0x3a04 <twiReceive+0x54>
    39ba:	6b 30       	cpi	r22, 0x0B	; 11
    39bc:	28 f5       	brcc	.+74     	; 0x3a08 <twiReceive+0x58>
    39be:	16 2f       	mov	r17, r22
    39c0:	ec 01       	movw	r28, r24
    39c2:	a6 df       	rcall	.-180    	; 0x3910 <twiIsBusy>
    39c4:	81 11       	cpse	r24, r1
    39c6:	22 c0       	rjmp	.+68     	; 0x3a0c <twiReceive+0x5c>
    39c8:	80 91 54 0e 	lds	r24, 0x0E54	; 0x800e54 <_twiCurrentHandler>
    39cc:	90 91 55 0e 	lds	r25, 0x0E55	; 0x800e55 <_twiCurrentHandler+0x1>
    39d0:	c8 17       	cp	r28, r24
    39d2:	d9 07       	cpc	r29, r25
    39d4:	41 f0       	breq	.+16     	; 0x39e6 <twiReceive+0x36>
    39d6:	3e df       	rcall	.-388    	; 0x3854 <_initTwiInterface>
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    39de:	d0 93 55 0e 	sts	0x0E55, r29	; 0x800e55 <_twiCurrentHandler+0x1>
    39e2:	c0 93 54 0e 	sts	0x0E54, r28	; 0x800e54 <_twiCurrentHandler>
    39e6:	10 93 56 0e 	sts	0x0E56, r17	; 0x800e56 <_twiMessageLen>
    39ea:	88 81       	ld	r24, Y
    39ec:	88 0f       	add	r24, r24
    39ee:	81 60       	ori	r24, 0x01	; 1
    39f0:	80 93 57 0e 	sts	0x0E57, r24	; 0x800e57 <_twiMessageBuffer>
    39f4:	88 ef       	ldi	r24, 0xF8	; 248
    39f6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    39fa:	85 ea       	ldi	r24, 0xA5	; 165
    39fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a00:	85 e0       	ldi	r24, 0x05	; 5
    3a02:	05 c0       	rjmp	.+10     	; 0x3a0e <twiReceive+0x5e>
    3a04:	86 e0       	ldi	r24, 0x06	; 6
    3a06:	03 c0       	rjmp	.+6      	; 0x3a0e <twiReceive+0x5e>
    3a08:	87 e0       	ldi	r24, 0x07	; 7
    3a0a:	01 c0       	rjmp	.+2      	; 0x3a0e <twiReceive+0x5e>
    3a0c:	82 e0       	ldi	r24, 0x02	; 2
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	1f 91       	pop	r17
    3a14:	08 95       	ret

00003a16 <__vector_39>:
    3a16:	1f 92       	push	r1
    3a18:	0f 92       	push	r0
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	0f 92       	push	r0
    3a1e:	11 24       	eor	r1, r1
    3a20:	0b b6       	in	r0, 0x3b	; 59
    3a22:	0f 92       	push	r0
    3a24:	2f 93       	push	r18
    3a26:	3f 93       	push	r19
    3a28:	4f 93       	push	r20
    3a2a:	5f 93       	push	r21
    3a2c:	6f 93       	push	r22
    3a2e:	7f 93       	push	r23
    3a30:	8f 93       	push	r24
    3a32:	9f 93       	push	r25
    3a34:	af 93       	push	r26
    3a36:	bf 93       	push	r27
    3a38:	ef 93       	push	r30
    3a3a:	ff 93       	push	r31
    3a3c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3a40:	8e 2f       	mov	r24, r30
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	fc 01       	movw	r30, r24
    3a46:	38 97       	sbiw	r30, 0x08	; 8
    3a48:	e1 35       	cpi	r30, 0x51	; 81
    3a4a:	f1 05       	cpc	r31, r1
    3a4c:	08 f0       	brcs	.+2      	; 0x3a50 <__vector_39+0x3a>
    3a4e:	75 c0       	rjmp	.+234    	; 0x3b3a <__vector_39+0x124>
    3a50:	88 27       	eor	r24, r24
    3a52:	e4 58       	subi	r30, 0x84	; 132
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	8f 4f       	sbci	r24, 0xFF	; 255
    3a58:	c8 c2       	rjmp	.+1424   	; 0x3fea <__tablejump2__>
    3a5a:	10 92 53 0e 	sts	0x0E53, r1	; 0x800e53 <_index.1885>
    3a5e:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <_index.1885>
    3a62:	80 91 56 0e 	lds	r24, 0x0E56	; 0x800e56 <_twiMessageLen>
    3a66:	e8 17       	cp	r30, r24
    3a68:	70 f4       	brcc	.+28     	; 0x3a86 <__vector_39+0x70>
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	8e 0f       	add	r24, r30
    3a6e:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <_index.1885>
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	e9 5a       	subi	r30, 0xA9	; 169
    3a76:	f1 4f       	sbci	r31, 0xF1	; 241
    3a78:	80 81       	ld	r24, Z
    3a7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3a7e:	85 e8       	ldi	r24, 0x85	; 133
    3a80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a84:	72 c0       	rjmp	.+228    	; 0x3b6a <__vector_39+0x154>
    3a86:	84 e9       	ldi	r24, 0x94	; 148
    3a88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3a8c:	80 91 54 0e 	lds	r24, 0x0E54	; 0x800e54 <_twiCurrentHandler>
    3a90:	90 91 55 0e 	lds	r25, 0x0E55	; 0x800e55 <_twiCurrentHandler+0x1>
    3a94:	dc 01       	movw	r26, r24
    3a96:	12 96       	adiw	r26, 0x02	; 2
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	13 97       	sbiw	r26, 0x03	; 3
    3a9e:	30 97       	sbiw	r30, 0x00	; 0
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <__vector_39+0x8e>
    3aa2:	63 c0       	rjmp	.+198    	; 0x3b6a <__vector_39+0x154>
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	64 e0       	ldi	r22, 0x04	; 4
    3aac:	19 95       	eicall
    3aae:	5d c0       	rjmp	.+186    	; 0x3b6a <__vector_39+0x154>
    3ab0:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <_index.1885>
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	8e 0f       	add	r24, r30
    3ab8:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <_index.1885>
    3abc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	e9 5a       	subi	r30, 0xA9	; 169
    3ac4:	f1 4f       	sbci	r31, 0xF1	; 241
    3ac6:	80 83       	st	Z, r24
    3ac8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3acc:	80 34       	cpi	r24, 0x40	; 64
    3ace:	11 f4       	brne	.+4      	; 0x3ad4 <__vector_39+0xbe>
    3ad0:	10 92 53 0e 	sts	0x0E53, r1	; 0x800e53 <_index.1885>
    3ad4:	20 91 53 0e 	lds	r18, 0x0E53	; 0x800e53 <_index.1885>
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	80 91 56 0e 	lds	r24, 0x0E56	; 0x800e56 <_twiMessageLen>
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	28 17       	cp	r18, r24
    3ae4:	39 07       	cpc	r19, r25
    3ae6:	24 f4       	brge	.+8      	; 0x3af0 <__vector_39+0xda>
    3ae8:	85 ec       	ldi	r24, 0xC5	; 197
    3aea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3aee:	3d c0       	rjmp	.+122    	; 0x3b6a <__vector_39+0x154>
    3af0:	85 e8       	ldi	r24, 0x85	; 133
    3af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3af6:	39 c0       	rjmp	.+114    	; 0x3b6a <__vector_39+0x154>
    3af8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3afc:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <_index.1885>
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	e9 5a       	subi	r30, 0xA9	; 169
    3b04:	f1 4f       	sbci	r31, 0xF1	; 241
    3b06:	80 83       	st	Z, r24
    3b08:	84 e9       	ldi	r24, 0x94	; 148
    3b0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b0e:	80 91 54 0e 	lds	r24, 0x0E54	; 0x800e54 <_twiCurrentHandler>
    3b12:	90 91 55 0e 	lds	r25, 0x0E55	; 0x800e55 <_twiCurrentHandler+0x1>
    3b16:	dc 01       	movw	r26, r24
    3b18:	12 96       	adiw	r26, 0x02	; 2
    3b1a:	ed 91       	ld	r30, X+
    3b1c:	fc 91       	ld	r31, X
    3b1e:	13 97       	sbiw	r26, 0x03	; 3
    3b20:	30 97       	sbiw	r30, 0x00	; 0
    3b22:	19 f1       	breq	.+70     	; 0x3b6a <__vector_39+0x154>
    3b24:	20 91 56 0e 	lds	r18, 0x0E56	; 0x800e56 <_twiMessageLen>
    3b28:	47 e5       	ldi	r20, 0x57	; 87
    3b2a:	5e e0       	ldi	r21, 0x0E	; 14
    3b2c:	65 e0       	ldi	r22, 0x05	; 5
    3b2e:	19 95       	eicall
    3b30:	1c c0       	rjmp	.+56     	; 0x3b6a <__vector_39+0x154>
    3b32:	85 ea       	ldi	r24, 0xA5	; 165
    3b34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b38:	18 c0       	rjmp	.+48     	; 0x3b6a <__vector_39+0x154>
    3b3a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3b3e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3b42:	84 e0       	ldi	r24, 0x04	; 4
    3b44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3b48:	80 91 54 0e 	lds	r24, 0x0E54	; 0x800e54 <_twiCurrentHandler>
    3b4c:	90 91 55 0e 	lds	r25, 0x0E55	; 0x800e55 <_twiCurrentHandler+0x1>
    3b50:	dc 01       	movw	r26, r24
    3b52:	12 96       	adiw	r26, 0x02	; 2
    3b54:	ed 91       	ld	r30, X+
    3b56:	fc 91       	ld	r31, X
    3b58:	13 97       	sbiw	r26, 0x03	; 3
    3b5a:	30 97       	sbiw	r30, 0x00	; 0
    3b5c:	31 f0       	breq	.+12     	; 0x3b6a <__vector_39+0x154>
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	40 e0       	ldi	r20, 0x00	; 0
    3b62:	50 e0       	ldi	r21, 0x00	; 0
    3b64:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    3b68:	19 95       	eicall
    3b6a:	ff 91       	pop	r31
    3b6c:	ef 91       	pop	r30
    3b6e:	bf 91       	pop	r27
    3b70:	af 91       	pop	r26
    3b72:	9f 91       	pop	r25
    3b74:	8f 91       	pop	r24
    3b76:	7f 91       	pop	r23
    3b78:	6f 91       	pop	r22
    3b7a:	5f 91       	pop	r21
    3b7c:	4f 91       	pop	r20
    3b7e:	3f 91       	pop	r19
    3b80:	2f 91       	pop	r18
    3b82:	0f 90       	pop	r0
    3b84:	0b be       	out	0x3b, r0	; 59
    3b86:	0f 90       	pop	r0
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	0f 90       	pop	r0
    3b8c:	1f 90       	pop	r1
    3b8e:	18 95       	reti

00003b90 <fifo_init>:
    3b90:	fc 01       	movw	r30, r24
    3b92:	41 11       	cpse	r20, r1
    3b94:	01 c0       	rjmp	.+2      	; 0x3b98 <fifo_init+0x8>
    3b96:	6c d3       	rcall	.+1752   	; 0x4270 <abort>
    3b98:	84 2f       	mov	r24, r20
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	9c 01       	movw	r18, r24
    3b9e:	21 50       	subi	r18, 0x01	; 1
    3ba0:	31 09       	sbc	r19, r1
    3ba2:	82 23       	and	r24, r18
    3ba4:	93 23       	and	r25, r19
    3ba6:	89 2b       	or	r24, r25
    3ba8:	09 f0       	breq	.+2      	; 0x3bac <fifo_init+0x1c>
    3baa:	62 d3       	rcall	.+1732   	; 0x4270 <abort>
    3bac:	41 38       	cpi	r20, 0x81	; 129
    3bae:	08 f0       	brcs	.+2      	; 0x3bb2 <fifo_init+0x22>
    3bb0:	5f d3       	rcall	.+1726   	; 0x4270 <abort>
    3bb2:	12 82       	std	Z+2, r1	; 0x02
    3bb4:	13 82       	std	Z+3, r1	; 0x03
    3bb6:	44 83       	std	Z+4, r20	; 0x04
    3bb8:	44 0f       	add	r20, r20
    3bba:	41 50       	subi	r20, 0x01	; 1
    3bbc:	45 83       	std	Z+5, r20	; 0x05
    3bbe:	71 83       	std	Z+1, r23	; 0x01
    3bc0:	60 83       	st	Z, r22
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	08 95       	ret

00003bc8 <__subsf3>:
    3bc8:	50 58       	subi	r21, 0x80	; 128

00003bca <__addsf3>:
    3bca:	bb 27       	eor	r27, r27
    3bcc:	aa 27       	eor	r26, r26
    3bce:	0e d0       	rcall	.+28     	; 0x3bec <__addsf3x>
    3bd0:	4d c1       	rjmp	.+666    	; 0x3e6c <__fp_round>
    3bd2:	3e d1       	rcall	.+636    	; 0x3e50 <__fp_pscA>
    3bd4:	30 f0       	brcs	.+12     	; 0x3be2 <__addsf3+0x18>
    3bd6:	43 d1       	rcall	.+646    	; 0x3e5e <__fp_pscB>
    3bd8:	20 f0       	brcs	.+8      	; 0x3be2 <__addsf3+0x18>
    3bda:	31 f4       	brne	.+12     	; 0x3be8 <__addsf3+0x1e>
    3bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    3bde:	11 f4       	brne	.+4      	; 0x3be4 <__addsf3+0x1a>
    3be0:	1e f4       	brtc	.+6      	; 0x3be8 <__addsf3+0x1e>
    3be2:	33 c1       	rjmp	.+614    	; 0x3e4a <__fp_nan>
    3be4:	0e f4       	brtc	.+2      	; 0x3be8 <__addsf3+0x1e>
    3be6:	e0 95       	com	r30
    3be8:	e7 fb       	bst	r30, 7
    3bea:	29 c1       	rjmp	.+594    	; 0x3e3e <__fp_inf>

00003bec <__addsf3x>:
    3bec:	e9 2f       	mov	r30, r25
    3bee:	4f d1       	rcall	.+670    	; 0x3e8e <__fp_split3>
    3bf0:	80 f3       	brcs	.-32     	; 0x3bd2 <__addsf3+0x8>
    3bf2:	ba 17       	cp	r27, r26
    3bf4:	62 07       	cpc	r22, r18
    3bf6:	73 07       	cpc	r23, r19
    3bf8:	84 07       	cpc	r24, r20
    3bfa:	95 07       	cpc	r25, r21
    3bfc:	18 f0       	brcs	.+6      	; 0x3c04 <__addsf3x+0x18>
    3bfe:	71 f4       	brne	.+28     	; 0x3c1c <__addsf3x+0x30>
    3c00:	9e f5       	brtc	.+102    	; 0x3c68 <__addsf3x+0x7c>
    3c02:	67 c1       	rjmp	.+718    	; 0x3ed2 <__fp_zero>
    3c04:	0e f4       	brtc	.+2      	; 0x3c08 <__addsf3x+0x1c>
    3c06:	e0 95       	com	r30
    3c08:	0b 2e       	mov	r0, r27
    3c0a:	ba 2f       	mov	r27, r26
    3c0c:	a0 2d       	mov	r26, r0
    3c0e:	0b 01       	movw	r0, r22
    3c10:	b9 01       	movw	r22, r18
    3c12:	90 01       	movw	r18, r0
    3c14:	0c 01       	movw	r0, r24
    3c16:	ca 01       	movw	r24, r20
    3c18:	a0 01       	movw	r20, r0
    3c1a:	11 24       	eor	r1, r1
    3c1c:	ff 27       	eor	r31, r31
    3c1e:	59 1b       	sub	r21, r25
    3c20:	99 f0       	breq	.+38     	; 0x3c48 <__addsf3x+0x5c>
    3c22:	59 3f       	cpi	r21, 0xF9	; 249
    3c24:	50 f4       	brcc	.+20     	; 0x3c3a <__addsf3x+0x4e>
    3c26:	50 3e       	cpi	r21, 0xE0	; 224
    3c28:	68 f1       	brcs	.+90     	; 0x3c84 <__addsf3x+0x98>
    3c2a:	1a 16       	cp	r1, r26
    3c2c:	f0 40       	sbci	r31, 0x00	; 0
    3c2e:	a2 2f       	mov	r26, r18
    3c30:	23 2f       	mov	r18, r19
    3c32:	34 2f       	mov	r19, r20
    3c34:	44 27       	eor	r20, r20
    3c36:	58 5f       	subi	r21, 0xF8	; 248
    3c38:	f3 cf       	rjmp	.-26     	; 0x3c20 <__addsf3x+0x34>
    3c3a:	46 95       	lsr	r20
    3c3c:	37 95       	ror	r19
    3c3e:	27 95       	ror	r18
    3c40:	a7 95       	ror	r26
    3c42:	f0 40       	sbci	r31, 0x00	; 0
    3c44:	53 95       	inc	r21
    3c46:	c9 f7       	brne	.-14     	; 0x3c3a <__addsf3x+0x4e>
    3c48:	7e f4       	brtc	.+30     	; 0x3c68 <__addsf3x+0x7c>
    3c4a:	1f 16       	cp	r1, r31
    3c4c:	ba 0b       	sbc	r27, r26
    3c4e:	62 0b       	sbc	r22, r18
    3c50:	73 0b       	sbc	r23, r19
    3c52:	84 0b       	sbc	r24, r20
    3c54:	ba f0       	brmi	.+46     	; 0x3c84 <__addsf3x+0x98>
    3c56:	91 50       	subi	r25, 0x01	; 1
    3c58:	a1 f0       	breq	.+40     	; 0x3c82 <__addsf3x+0x96>
    3c5a:	ff 0f       	add	r31, r31
    3c5c:	bb 1f       	adc	r27, r27
    3c5e:	66 1f       	adc	r22, r22
    3c60:	77 1f       	adc	r23, r23
    3c62:	88 1f       	adc	r24, r24
    3c64:	c2 f7       	brpl	.-16     	; 0x3c56 <__addsf3x+0x6a>
    3c66:	0e c0       	rjmp	.+28     	; 0x3c84 <__addsf3x+0x98>
    3c68:	ba 0f       	add	r27, r26
    3c6a:	62 1f       	adc	r22, r18
    3c6c:	73 1f       	adc	r23, r19
    3c6e:	84 1f       	adc	r24, r20
    3c70:	48 f4       	brcc	.+18     	; 0x3c84 <__addsf3x+0x98>
    3c72:	87 95       	ror	r24
    3c74:	77 95       	ror	r23
    3c76:	67 95       	ror	r22
    3c78:	b7 95       	ror	r27
    3c7a:	f7 95       	ror	r31
    3c7c:	9e 3f       	cpi	r25, 0xFE	; 254
    3c7e:	08 f0       	brcs	.+2      	; 0x3c82 <__addsf3x+0x96>
    3c80:	b3 cf       	rjmp	.-154    	; 0x3be8 <__addsf3+0x1e>
    3c82:	93 95       	inc	r25
    3c84:	88 0f       	add	r24, r24
    3c86:	08 f0       	brcs	.+2      	; 0x3c8a <__addsf3x+0x9e>
    3c88:	99 27       	eor	r25, r25
    3c8a:	ee 0f       	add	r30, r30
    3c8c:	97 95       	ror	r25
    3c8e:	87 95       	ror	r24
    3c90:	08 95       	ret

00003c92 <__divsf3>:
    3c92:	0c d0       	rcall	.+24     	; 0x3cac <__divsf3x>
    3c94:	eb c0       	rjmp	.+470    	; 0x3e6c <__fp_round>
    3c96:	e3 d0       	rcall	.+454    	; 0x3e5e <__fp_pscB>
    3c98:	40 f0       	brcs	.+16     	; 0x3caa <__divsf3+0x18>
    3c9a:	da d0       	rcall	.+436    	; 0x3e50 <__fp_pscA>
    3c9c:	30 f0       	brcs	.+12     	; 0x3caa <__divsf3+0x18>
    3c9e:	21 f4       	brne	.+8      	; 0x3ca8 <__divsf3+0x16>
    3ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ca2:	19 f0       	breq	.+6      	; 0x3caa <__divsf3+0x18>
    3ca4:	cc c0       	rjmp	.+408    	; 0x3e3e <__fp_inf>
    3ca6:	51 11       	cpse	r21, r1
    3ca8:	15 c1       	rjmp	.+554    	; 0x3ed4 <__fp_szero>
    3caa:	cf c0       	rjmp	.+414    	; 0x3e4a <__fp_nan>

00003cac <__divsf3x>:
    3cac:	f0 d0       	rcall	.+480    	; 0x3e8e <__fp_split3>
    3cae:	98 f3       	brcs	.-26     	; 0x3c96 <__divsf3+0x4>

00003cb0 <__divsf3_pse>:
    3cb0:	99 23       	and	r25, r25
    3cb2:	c9 f3       	breq	.-14     	; 0x3ca6 <__divsf3+0x14>
    3cb4:	55 23       	and	r21, r21
    3cb6:	b1 f3       	breq	.-20     	; 0x3ca4 <__divsf3+0x12>
    3cb8:	95 1b       	sub	r25, r21
    3cba:	55 0b       	sbc	r21, r21
    3cbc:	bb 27       	eor	r27, r27
    3cbe:	aa 27       	eor	r26, r26
    3cc0:	62 17       	cp	r22, r18
    3cc2:	73 07       	cpc	r23, r19
    3cc4:	84 07       	cpc	r24, r20
    3cc6:	38 f0       	brcs	.+14     	; 0x3cd6 <__divsf3_pse+0x26>
    3cc8:	9f 5f       	subi	r25, 0xFF	; 255
    3cca:	5f 4f       	sbci	r21, 0xFF	; 255
    3ccc:	22 0f       	add	r18, r18
    3cce:	33 1f       	adc	r19, r19
    3cd0:	44 1f       	adc	r20, r20
    3cd2:	aa 1f       	adc	r26, r26
    3cd4:	a9 f3       	breq	.-22     	; 0x3cc0 <__divsf3_pse+0x10>
    3cd6:	33 d0       	rcall	.+102    	; 0x3d3e <__divsf3_pse+0x8e>
    3cd8:	0e 2e       	mov	r0, r30
    3cda:	3a f0       	brmi	.+14     	; 0x3cea <__divsf3_pse+0x3a>
    3cdc:	e0 e8       	ldi	r30, 0x80	; 128
    3cde:	30 d0       	rcall	.+96     	; 0x3d40 <__divsf3_pse+0x90>
    3ce0:	91 50       	subi	r25, 0x01	; 1
    3ce2:	50 40       	sbci	r21, 0x00	; 0
    3ce4:	e6 95       	lsr	r30
    3ce6:	00 1c       	adc	r0, r0
    3ce8:	ca f7       	brpl	.-14     	; 0x3cdc <__divsf3_pse+0x2c>
    3cea:	29 d0       	rcall	.+82     	; 0x3d3e <__divsf3_pse+0x8e>
    3cec:	fe 2f       	mov	r31, r30
    3cee:	27 d0       	rcall	.+78     	; 0x3d3e <__divsf3_pse+0x8e>
    3cf0:	66 0f       	add	r22, r22
    3cf2:	77 1f       	adc	r23, r23
    3cf4:	88 1f       	adc	r24, r24
    3cf6:	bb 1f       	adc	r27, r27
    3cf8:	26 17       	cp	r18, r22
    3cfa:	37 07       	cpc	r19, r23
    3cfc:	48 07       	cpc	r20, r24
    3cfe:	ab 07       	cpc	r26, r27
    3d00:	b0 e8       	ldi	r27, 0x80	; 128
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <__divsf3_pse+0x56>
    3d04:	bb 0b       	sbc	r27, r27
    3d06:	80 2d       	mov	r24, r0
    3d08:	bf 01       	movw	r22, r30
    3d0a:	ff 27       	eor	r31, r31
    3d0c:	93 58       	subi	r25, 0x83	; 131
    3d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d10:	2a f0       	brmi	.+10     	; 0x3d1c <__divsf3_pse+0x6c>
    3d12:	9e 3f       	cpi	r25, 0xFE	; 254
    3d14:	51 05       	cpc	r21, r1
    3d16:	68 f0       	brcs	.+26     	; 0x3d32 <__divsf3_pse+0x82>
    3d18:	92 c0       	rjmp	.+292    	; 0x3e3e <__fp_inf>
    3d1a:	dc c0       	rjmp	.+440    	; 0x3ed4 <__fp_szero>
    3d1c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d1e:	ec f3       	brlt	.-6      	; 0x3d1a <__divsf3_pse+0x6a>
    3d20:	98 3e       	cpi	r25, 0xE8	; 232
    3d22:	dc f3       	brlt	.-10     	; 0x3d1a <__divsf3_pse+0x6a>
    3d24:	86 95       	lsr	r24
    3d26:	77 95       	ror	r23
    3d28:	67 95       	ror	r22
    3d2a:	b7 95       	ror	r27
    3d2c:	f7 95       	ror	r31
    3d2e:	9f 5f       	subi	r25, 0xFF	; 255
    3d30:	c9 f7       	brne	.-14     	; 0x3d24 <__divsf3_pse+0x74>
    3d32:	88 0f       	add	r24, r24
    3d34:	91 1d       	adc	r25, r1
    3d36:	96 95       	lsr	r25
    3d38:	87 95       	ror	r24
    3d3a:	97 f9       	bld	r25, 7
    3d3c:	08 95       	ret
    3d3e:	e1 e0       	ldi	r30, 0x01	; 1
    3d40:	66 0f       	add	r22, r22
    3d42:	77 1f       	adc	r23, r23
    3d44:	88 1f       	adc	r24, r24
    3d46:	bb 1f       	adc	r27, r27
    3d48:	62 17       	cp	r22, r18
    3d4a:	73 07       	cpc	r23, r19
    3d4c:	84 07       	cpc	r24, r20
    3d4e:	ba 07       	cpc	r27, r26
    3d50:	20 f0       	brcs	.+8      	; 0x3d5a <__divsf3_pse+0xaa>
    3d52:	62 1b       	sub	r22, r18
    3d54:	73 0b       	sbc	r23, r19
    3d56:	84 0b       	sbc	r24, r20
    3d58:	ba 0b       	sbc	r27, r26
    3d5a:	ee 1f       	adc	r30, r30
    3d5c:	88 f7       	brcc	.-30     	; 0x3d40 <__divsf3_pse+0x90>
    3d5e:	e0 95       	com	r30
    3d60:	08 95       	ret

00003d62 <__fixsfsi>:
    3d62:	04 d0       	rcall	.+8      	; 0x3d6c <__fixunssfsi>
    3d64:	68 94       	set
    3d66:	b1 11       	cpse	r27, r1
    3d68:	b5 c0       	rjmp	.+362    	; 0x3ed4 <__fp_szero>
    3d6a:	08 95       	ret

00003d6c <__fixunssfsi>:
    3d6c:	98 d0       	rcall	.+304    	; 0x3e9e <__fp_splitA>
    3d6e:	88 f0       	brcs	.+34     	; 0x3d92 <__fixunssfsi+0x26>
    3d70:	9f 57       	subi	r25, 0x7F	; 127
    3d72:	90 f0       	brcs	.+36     	; 0x3d98 <__fixunssfsi+0x2c>
    3d74:	b9 2f       	mov	r27, r25
    3d76:	99 27       	eor	r25, r25
    3d78:	b7 51       	subi	r27, 0x17	; 23
    3d7a:	a0 f0       	brcs	.+40     	; 0x3da4 <__fixunssfsi+0x38>
    3d7c:	d1 f0       	breq	.+52     	; 0x3db2 <__fixunssfsi+0x46>
    3d7e:	66 0f       	add	r22, r22
    3d80:	77 1f       	adc	r23, r23
    3d82:	88 1f       	adc	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	1a f0       	brmi	.+6      	; 0x3d8e <__fixunssfsi+0x22>
    3d88:	ba 95       	dec	r27
    3d8a:	c9 f7       	brne	.-14     	; 0x3d7e <__fixunssfsi+0x12>
    3d8c:	12 c0       	rjmp	.+36     	; 0x3db2 <__fixunssfsi+0x46>
    3d8e:	b1 30       	cpi	r27, 0x01	; 1
    3d90:	81 f0       	breq	.+32     	; 0x3db2 <__fixunssfsi+0x46>
    3d92:	9f d0       	rcall	.+318    	; 0x3ed2 <__fp_zero>
    3d94:	b1 e0       	ldi	r27, 0x01	; 1
    3d96:	08 95       	ret
    3d98:	9c c0       	rjmp	.+312    	; 0x3ed2 <__fp_zero>
    3d9a:	67 2f       	mov	r22, r23
    3d9c:	78 2f       	mov	r23, r24
    3d9e:	88 27       	eor	r24, r24
    3da0:	b8 5f       	subi	r27, 0xF8	; 248
    3da2:	39 f0       	breq	.+14     	; 0x3db2 <__fixunssfsi+0x46>
    3da4:	b9 3f       	cpi	r27, 0xF9	; 249
    3da6:	cc f3       	brlt	.-14     	; 0x3d9a <__fixunssfsi+0x2e>
    3da8:	86 95       	lsr	r24
    3daa:	77 95       	ror	r23
    3dac:	67 95       	ror	r22
    3dae:	b3 95       	inc	r27
    3db0:	d9 f7       	brne	.-10     	; 0x3da8 <__fixunssfsi+0x3c>
    3db2:	3e f4       	brtc	.+14     	; 0x3dc2 <__fixunssfsi+0x56>
    3db4:	90 95       	com	r25
    3db6:	80 95       	com	r24
    3db8:	70 95       	com	r23
    3dba:	61 95       	neg	r22
    3dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc2:	08 95       	ret

00003dc4 <__floatunsisf>:
    3dc4:	e8 94       	clt
    3dc6:	09 c0       	rjmp	.+18     	; 0x3dda <__floatsisf+0x12>

00003dc8 <__floatsisf>:
    3dc8:	97 fb       	bst	r25, 7
    3dca:	3e f4       	brtc	.+14     	; 0x3dda <__floatsisf+0x12>
    3dcc:	90 95       	com	r25
    3dce:	80 95       	com	r24
    3dd0:	70 95       	com	r23
    3dd2:	61 95       	neg	r22
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	99 23       	and	r25, r25
    3ddc:	a9 f0       	breq	.+42     	; 0x3e08 <__floatsisf+0x40>
    3dde:	f9 2f       	mov	r31, r25
    3de0:	96 e9       	ldi	r25, 0x96	; 150
    3de2:	bb 27       	eor	r27, r27
    3de4:	93 95       	inc	r25
    3de6:	f6 95       	lsr	r31
    3de8:	87 95       	ror	r24
    3dea:	77 95       	ror	r23
    3dec:	67 95       	ror	r22
    3dee:	b7 95       	ror	r27
    3df0:	f1 11       	cpse	r31, r1
    3df2:	f8 cf       	rjmp	.-16     	; 0x3de4 <__floatsisf+0x1c>
    3df4:	fa f4       	brpl	.+62     	; 0x3e34 <__floatsisf+0x6c>
    3df6:	bb 0f       	add	r27, r27
    3df8:	11 f4       	brne	.+4      	; 0x3dfe <__floatsisf+0x36>
    3dfa:	60 ff       	sbrs	r22, 0
    3dfc:	1b c0       	rjmp	.+54     	; 0x3e34 <__floatsisf+0x6c>
    3dfe:	6f 5f       	subi	r22, 0xFF	; 255
    3e00:	7f 4f       	sbci	r23, 0xFF	; 255
    3e02:	8f 4f       	sbci	r24, 0xFF	; 255
    3e04:	9f 4f       	sbci	r25, 0xFF	; 255
    3e06:	16 c0       	rjmp	.+44     	; 0x3e34 <__floatsisf+0x6c>
    3e08:	88 23       	and	r24, r24
    3e0a:	11 f0       	breq	.+4      	; 0x3e10 <__floatsisf+0x48>
    3e0c:	96 e9       	ldi	r25, 0x96	; 150
    3e0e:	11 c0       	rjmp	.+34     	; 0x3e32 <__floatsisf+0x6a>
    3e10:	77 23       	and	r23, r23
    3e12:	21 f0       	breq	.+8      	; 0x3e1c <__floatsisf+0x54>
    3e14:	9e e8       	ldi	r25, 0x8E	; 142
    3e16:	87 2f       	mov	r24, r23
    3e18:	76 2f       	mov	r23, r22
    3e1a:	05 c0       	rjmp	.+10     	; 0x3e26 <__floatsisf+0x5e>
    3e1c:	66 23       	and	r22, r22
    3e1e:	71 f0       	breq	.+28     	; 0x3e3c <__floatsisf+0x74>
    3e20:	96 e8       	ldi	r25, 0x86	; 134
    3e22:	86 2f       	mov	r24, r22
    3e24:	70 e0       	ldi	r23, 0x00	; 0
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	2a f0       	brmi	.+10     	; 0x3e34 <__floatsisf+0x6c>
    3e2a:	9a 95       	dec	r25
    3e2c:	66 0f       	add	r22, r22
    3e2e:	77 1f       	adc	r23, r23
    3e30:	88 1f       	adc	r24, r24
    3e32:	da f7       	brpl	.-10     	; 0x3e2a <__floatsisf+0x62>
    3e34:	88 0f       	add	r24, r24
    3e36:	96 95       	lsr	r25
    3e38:	87 95       	ror	r24
    3e3a:	97 f9       	bld	r25, 7
    3e3c:	08 95       	ret

00003e3e <__fp_inf>:
    3e3e:	97 f9       	bld	r25, 7
    3e40:	9f 67       	ori	r25, 0x7F	; 127
    3e42:	80 e8       	ldi	r24, 0x80	; 128
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	60 e0       	ldi	r22, 0x00	; 0
    3e48:	08 95       	ret

00003e4a <__fp_nan>:
    3e4a:	9f ef       	ldi	r25, 0xFF	; 255
    3e4c:	80 ec       	ldi	r24, 0xC0	; 192
    3e4e:	08 95       	ret

00003e50 <__fp_pscA>:
    3e50:	00 24       	eor	r0, r0
    3e52:	0a 94       	dec	r0
    3e54:	16 16       	cp	r1, r22
    3e56:	17 06       	cpc	r1, r23
    3e58:	18 06       	cpc	r1, r24
    3e5a:	09 06       	cpc	r0, r25
    3e5c:	08 95       	ret

00003e5e <__fp_pscB>:
    3e5e:	00 24       	eor	r0, r0
    3e60:	0a 94       	dec	r0
    3e62:	12 16       	cp	r1, r18
    3e64:	13 06       	cpc	r1, r19
    3e66:	14 06       	cpc	r1, r20
    3e68:	05 06       	cpc	r0, r21
    3e6a:	08 95       	ret

00003e6c <__fp_round>:
    3e6c:	09 2e       	mov	r0, r25
    3e6e:	03 94       	inc	r0
    3e70:	00 0c       	add	r0, r0
    3e72:	11 f4       	brne	.+4      	; 0x3e78 <__fp_round+0xc>
    3e74:	88 23       	and	r24, r24
    3e76:	52 f0       	brmi	.+20     	; 0x3e8c <__fp_round+0x20>
    3e78:	bb 0f       	add	r27, r27
    3e7a:	40 f4       	brcc	.+16     	; 0x3e8c <__fp_round+0x20>
    3e7c:	bf 2b       	or	r27, r31
    3e7e:	11 f4       	brne	.+4      	; 0x3e84 <__fp_round+0x18>
    3e80:	60 ff       	sbrs	r22, 0
    3e82:	04 c0       	rjmp	.+8      	; 0x3e8c <__fp_round+0x20>
    3e84:	6f 5f       	subi	r22, 0xFF	; 255
    3e86:	7f 4f       	sbci	r23, 0xFF	; 255
    3e88:	8f 4f       	sbci	r24, 0xFF	; 255
    3e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8c:	08 95       	ret

00003e8e <__fp_split3>:
    3e8e:	57 fd       	sbrc	r21, 7
    3e90:	90 58       	subi	r25, 0x80	; 128
    3e92:	44 0f       	add	r20, r20
    3e94:	55 1f       	adc	r21, r21
    3e96:	59 f0       	breq	.+22     	; 0x3eae <__fp_splitA+0x10>
    3e98:	5f 3f       	cpi	r21, 0xFF	; 255
    3e9a:	71 f0       	breq	.+28     	; 0x3eb8 <__fp_splitA+0x1a>
    3e9c:	47 95       	ror	r20

00003e9e <__fp_splitA>:
    3e9e:	88 0f       	add	r24, r24
    3ea0:	97 fb       	bst	r25, 7
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	61 f0       	breq	.+24     	; 0x3ebe <__fp_splitA+0x20>
    3ea6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ea8:	79 f0       	breq	.+30     	; 0x3ec8 <__fp_splitA+0x2a>
    3eaa:	87 95       	ror	r24
    3eac:	08 95       	ret
    3eae:	12 16       	cp	r1, r18
    3eb0:	13 06       	cpc	r1, r19
    3eb2:	14 06       	cpc	r1, r20
    3eb4:	55 1f       	adc	r21, r21
    3eb6:	f2 cf       	rjmp	.-28     	; 0x3e9c <__fp_split3+0xe>
    3eb8:	46 95       	lsr	r20
    3eba:	f1 df       	rcall	.-30     	; 0x3e9e <__fp_splitA>
    3ebc:	08 c0       	rjmp	.+16     	; 0x3ece <__fp_splitA+0x30>
    3ebe:	16 16       	cp	r1, r22
    3ec0:	17 06       	cpc	r1, r23
    3ec2:	18 06       	cpc	r1, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	f1 cf       	rjmp	.-30     	; 0x3eaa <__fp_splitA+0xc>
    3ec8:	86 95       	lsr	r24
    3eca:	71 05       	cpc	r23, r1
    3ecc:	61 05       	cpc	r22, r1
    3ece:	08 94       	sec
    3ed0:	08 95       	ret

00003ed2 <__fp_zero>:
    3ed2:	e8 94       	clt

00003ed4 <__fp_szero>:
    3ed4:	bb 27       	eor	r27, r27
    3ed6:	66 27       	eor	r22, r22
    3ed8:	77 27       	eor	r23, r23
    3eda:	cb 01       	movw	r24, r22
    3edc:	97 f9       	bld	r25, 7
    3ede:	08 95       	ret

00003ee0 <__mulsf3>:
    3ee0:	0b d0       	rcall	.+22     	; 0x3ef8 <__mulsf3x>
    3ee2:	c4 cf       	rjmp	.-120    	; 0x3e6c <__fp_round>
    3ee4:	b5 df       	rcall	.-150    	; 0x3e50 <__fp_pscA>
    3ee6:	28 f0       	brcs	.+10     	; 0x3ef2 <__mulsf3+0x12>
    3ee8:	ba df       	rcall	.-140    	; 0x3e5e <__fp_pscB>
    3eea:	18 f0       	brcs	.+6      	; 0x3ef2 <__mulsf3+0x12>
    3eec:	95 23       	and	r25, r21
    3eee:	09 f0       	breq	.+2      	; 0x3ef2 <__mulsf3+0x12>
    3ef0:	a6 cf       	rjmp	.-180    	; 0x3e3e <__fp_inf>
    3ef2:	ab cf       	rjmp	.-170    	; 0x3e4a <__fp_nan>
    3ef4:	11 24       	eor	r1, r1
    3ef6:	ee cf       	rjmp	.-36     	; 0x3ed4 <__fp_szero>

00003ef8 <__mulsf3x>:
    3ef8:	ca df       	rcall	.-108    	; 0x3e8e <__fp_split3>
    3efa:	a0 f3       	brcs	.-24     	; 0x3ee4 <__mulsf3+0x4>

00003efc <__mulsf3_pse>:
    3efc:	95 9f       	mul	r25, r21
    3efe:	d1 f3       	breq	.-12     	; 0x3ef4 <__mulsf3+0x14>
    3f00:	95 0f       	add	r25, r21
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	55 1f       	adc	r21, r21
    3f06:	62 9f       	mul	r22, r18
    3f08:	f0 01       	movw	r30, r0
    3f0a:	72 9f       	mul	r23, r18
    3f0c:	bb 27       	eor	r27, r27
    3f0e:	f0 0d       	add	r31, r0
    3f10:	b1 1d       	adc	r27, r1
    3f12:	63 9f       	mul	r22, r19
    3f14:	aa 27       	eor	r26, r26
    3f16:	f0 0d       	add	r31, r0
    3f18:	b1 1d       	adc	r27, r1
    3f1a:	aa 1f       	adc	r26, r26
    3f1c:	64 9f       	mul	r22, r20
    3f1e:	66 27       	eor	r22, r22
    3f20:	b0 0d       	add	r27, r0
    3f22:	a1 1d       	adc	r26, r1
    3f24:	66 1f       	adc	r22, r22
    3f26:	82 9f       	mul	r24, r18
    3f28:	22 27       	eor	r18, r18
    3f2a:	b0 0d       	add	r27, r0
    3f2c:	a1 1d       	adc	r26, r1
    3f2e:	62 1f       	adc	r22, r18
    3f30:	73 9f       	mul	r23, r19
    3f32:	b0 0d       	add	r27, r0
    3f34:	a1 1d       	adc	r26, r1
    3f36:	62 1f       	adc	r22, r18
    3f38:	83 9f       	mul	r24, r19
    3f3a:	a0 0d       	add	r26, r0
    3f3c:	61 1d       	adc	r22, r1
    3f3e:	22 1f       	adc	r18, r18
    3f40:	74 9f       	mul	r23, r20
    3f42:	33 27       	eor	r19, r19
    3f44:	a0 0d       	add	r26, r0
    3f46:	61 1d       	adc	r22, r1
    3f48:	23 1f       	adc	r18, r19
    3f4a:	84 9f       	mul	r24, r20
    3f4c:	60 0d       	add	r22, r0
    3f4e:	21 1d       	adc	r18, r1
    3f50:	82 2f       	mov	r24, r18
    3f52:	76 2f       	mov	r23, r22
    3f54:	6a 2f       	mov	r22, r26
    3f56:	11 24       	eor	r1, r1
    3f58:	9f 57       	subi	r25, 0x7F	; 127
    3f5a:	50 40       	sbci	r21, 0x00	; 0
    3f5c:	8a f0       	brmi	.+34     	; 0x3f80 <__mulsf3_pse+0x84>
    3f5e:	e1 f0       	breq	.+56     	; 0x3f98 <__mulsf3_pse+0x9c>
    3f60:	88 23       	and	r24, r24
    3f62:	4a f0       	brmi	.+18     	; 0x3f76 <__mulsf3_pse+0x7a>
    3f64:	ee 0f       	add	r30, r30
    3f66:	ff 1f       	adc	r31, r31
    3f68:	bb 1f       	adc	r27, r27
    3f6a:	66 1f       	adc	r22, r22
    3f6c:	77 1f       	adc	r23, r23
    3f6e:	88 1f       	adc	r24, r24
    3f70:	91 50       	subi	r25, 0x01	; 1
    3f72:	50 40       	sbci	r21, 0x00	; 0
    3f74:	a9 f7       	brne	.-22     	; 0x3f60 <__mulsf3_pse+0x64>
    3f76:	9e 3f       	cpi	r25, 0xFE	; 254
    3f78:	51 05       	cpc	r21, r1
    3f7a:	70 f0       	brcs	.+28     	; 0x3f98 <__mulsf3_pse+0x9c>
    3f7c:	60 cf       	rjmp	.-320    	; 0x3e3e <__fp_inf>
    3f7e:	aa cf       	rjmp	.-172    	; 0x3ed4 <__fp_szero>
    3f80:	5f 3f       	cpi	r21, 0xFF	; 255
    3f82:	ec f3       	brlt	.-6      	; 0x3f7e <__mulsf3_pse+0x82>
    3f84:	98 3e       	cpi	r25, 0xE8	; 232
    3f86:	dc f3       	brlt	.-10     	; 0x3f7e <__mulsf3_pse+0x82>
    3f88:	86 95       	lsr	r24
    3f8a:	77 95       	ror	r23
    3f8c:	67 95       	ror	r22
    3f8e:	b7 95       	ror	r27
    3f90:	f7 95       	ror	r31
    3f92:	e7 95       	ror	r30
    3f94:	9f 5f       	subi	r25, 0xFF	; 255
    3f96:	c1 f7       	brne	.-16     	; 0x3f88 <__mulsf3_pse+0x8c>
    3f98:	fe 2b       	or	r31, r30
    3f9a:	88 0f       	add	r24, r24
    3f9c:	91 1d       	adc	r25, r1
    3f9e:	96 95       	lsr	r25
    3fa0:	87 95       	ror	r24
    3fa2:	97 f9       	bld	r25, 7
    3fa4:	08 95       	ret

00003fa6 <__udivmodsi4>:
    3fa6:	a1 e2       	ldi	r26, 0x21	; 33
    3fa8:	1a 2e       	mov	r1, r26
    3faa:	aa 1b       	sub	r26, r26
    3fac:	bb 1b       	sub	r27, r27
    3fae:	fd 01       	movw	r30, r26
    3fb0:	0d c0       	rjmp	.+26     	; 0x3fcc <__udivmodsi4_ep>

00003fb2 <__udivmodsi4_loop>:
    3fb2:	aa 1f       	adc	r26, r26
    3fb4:	bb 1f       	adc	r27, r27
    3fb6:	ee 1f       	adc	r30, r30
    3fb8:	ff 1f       	adc	r31, r31
    3fba:	a2 17       	cp	r26, r18
    3fbc:	b3 07       	cpc	r27, r19
    3fbe:	e4 07       	cpc	r30, r20
    3fc0:	f5 07       	cpc	r31, r21
    3fc2:	20 f0       	brcs	.+8      	; 0x3fcc <__udivmodsi4_ep>
    3fc4:	a2 1b       	sub	r26, r18
    3fc6:	b3 0b       	sbc	r27, r19
    3fc8:	e4 0b       	sbc	r30, r20
    3fca:	f5 0b       	sbc	r31, r21

00003fcc <__udivmodsi4_ep>:
    3fcc:	66 1f       	adc	r22, r22
    3fce:	77 1f       	adc	r23, r23
    3fd0:	88 1f       	adc	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	1a 94       	dec	r1
    3fd6:	69 f7       	brne	.-38     	; 0x3fb2 <__udivmodsi4_loop>
    3fd8:	60 95       	com	r22
    3fda:	70 95       	com	r23
    3fdc:	80 95       	com	r24
    3fde:	90 95       	com	r25
    3fe0:	9b 01       	movw	r18, r22
    3fe2:	ac 01       	movw	r20, r24
    3fe4:	bd 01       	movw	r22, r26
    3fe6:	cf 01       	movw	r24, r30
    3fe8:	08 95       	ret

00003fea <__tablejump2__>:
    3fea:	ee 0f       	add	r30, r30
    3fec:	ff 1f       	adc	r31, r31
    3fee:	88 1f       	adc	r24, r24
    3ff0:	8b bf       	out	0x3b, r24	; 59
    3ff2:	07 90       	elpm	r0, Z+
    3ff4:	f6 91       	elpm	r31, Z
    3ff6:	e0 2d       	mov	r30, r0
    3ff8:	19 94       	eijmp

00003ffa <calloc>:
    3ffa:	0f 93       	push	r16
    3ffc:	1f 93       	push	r17
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	86 9f       	mul	r24, r22
    4004:	80 01       	movw	r16, r0
    4006:	87 9f       	mul	r24, r23
    4008:	10 0d       	add	r17, r0
    400a:	96 9f       	mul	r25, r22
    400c:	10 0d       	add	r17, r0
    400e:	11 24       	eor	r1, r1
    4010:	c8 01       	movw	r24, r16
    4012:	0d d0       	rcall	.+26     	; 0x402e <malloc>
    4014:	ec 01       	movw	r28, r24
    4016:	00 97       	sbiw	r24, 0x00	; 0
    4018:	21 f0       	breq	.+8      	; 0x4022 <calloc+0x28>
    401a:	a8 01       	movw	r20, r16
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	34 d1       	rcall	.+616    	; 0x428a <memset>
    4022:	ce 01       	movw	r24, r28
    4024:	df 91       	pop	r29
    4026:	cf 91       	pop	r28
    4028:	1f 91       	pop	r17
    402a:	0f 91       	pop	r16
    402c:	08 95       	ret

0000402e <malloc>:
    402e:	0f 93       	push	r16
    4030:	1f 93       	push	r17
    4032:	cf 93       	push	r28
    4034:	df 93       	push	r29
    4036:	82 30       	cpi	r24, 0x02	; 2
    4038:	91 05       	cpc	r25, r1
    403a:	10 f4       	brcc	.+4      	; 0x4040 <malloc+0x12>
    403c:	82 e0       	ldi	r24, 0x02	; 2
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <__flp>
    4044:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <__flp+0x1>
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	a0 e0       	ldi	r26, 0x00	; 0
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	30 97       	sbiw	r30, 0x00	; 0
    4052:	19 f1       	breq	.+70     	; 0x409a <malloc+0x6c>
    4054:	40 81       	ld	r20, Z
    4056:	51 81       	ldd	r21, Z+1	; 0x01
    4058:	02 81       	ldd	r16, Z+2	; 0x02
    405a:	13 81       	ldd	r17, Z+3	; 0x03
    405c:	48 17       	cp	r20, r24
    405e:	59 07       	cpc	r21, r25
    4060:	c8 f0       	brcs	.+50     	; 0x4094 <malloc+0x66>
    4062:	84 17       	cp	r24, r20
    4064:	95 07       	cpc	r25, r21
    4066:	69 f4       	brne	.+26     	; 0x4082 <malloc+0x54>
    4068:	10 97       	sbiw	r26, 0x00	; 0
    406a:	31 f0       	breq	.+12     	; 0x4078 <malloc+0x4a>
    406c:	12 96       	adiw	r26, 0x02	; 2
    406e:	0c 93       	st	X, r16
    4070:	12 97       	sbiw	r26, 0x02	; 2
    4072:	13 96       	adiw	r26, 0x03	; 3
    4074:	1c 93       	st	X, r17
    4076:	27 c0       	rjmp	.+78     	; 0x40c6 <malloc+0x98>
    4078:	00 93 77 0e 	sts	0x0E77, r16	; 0x800e77 <__flp>
    407c:	10 93 78 0e 	sts	0x0E78, r17	; 0x800e78 <__flp+0x1>
    4080:	22 c0       	rjmp	.+68     	; 0x40c6 <malloc+0x98>
    4082:	21 15       	cp	r18, r1
    4084:	31 05       	cpc	r19, r1
    4086:	19 f0       	breq	.+6      	; 0x408e <malloc+0x60>
    4088:	42 17       	cp	r20, r18
    408a:	53 07       	cpc	r21, r19
    408c:	18 f4       	brcc	.+6      	; 0x4094 <malloc+0x66>
    408e:	9a 01       	movw	r18, r20
    4090:	bd 01       	movw	r22, r26
    4092:	ef 01       	movw	r28, r30
    4094:	df 01       	movw	r26, r30
    4096:	f8 01       	movw	r30, r16
    4098:	db cf       	rjmp	.-74     	; 0x4050 <malloc+0x22>
    409a:	21 15       	cp	r18, r1
    409c:	31 05       	cpc	r19, r1
    409e:	f9 f0       	breq	.+62     	; 0x40de <malloc+0xb0>
    40a0:	28 1b       	sub	r18, r24
    40a2:	39 0b       	sbc	r19, r25
    40a4:	24 30       	cpi	r18, 0x04	; 4
    40a6:	31 05       	cpc	r19, r1
    40a8:	80 f4       	brcc	.+32     	; 0x40ca <malloc+0x9c>
    40aa:	8a 81       	ldd	r24, Y+2	; 0x02
    40ac:	9b 81       	ldd	r25, Y+3	; 0x03
    40ae:	61 15       	cp	r22, r1
    40b0:	71 05       	cpc	r23, r1
    40b2:	21 f0       	breq	.+8      	; 0x40bc <malloc+0x8e>
    40b4:	fb 01       	movw	r30, r22
    40b6:	93 83       	std	Z+3, r25	; 0x03
    40b8:	82 83       	std	Z+2, r24	; 0x02
    40ba:	04 c0       	rjmp	.+8      	; 0x40c4 <malloc+0x96>
    40bc:	90 93 78 0e 	sts	0x0E78, r25	; 0x800e78 <__flp+0x1>
    40c0:	80 93 77 0e 	sts	0x0E77, r24	; 0x800e77 <__flp>
    40c4:	fe 01       	movw	r30, r28
    40c6:	32 96       	adiw	r30, 0x02	; 2
    40c8:	44 c0       	rjmp	.+136    	; 0x4152 <malloc+0x124>
    40ca:	fe 01       	movw	r30, r28
    40cc:	e2 0f       	add	r30, r18
    40ce:	f3 1f       	adc	r31, r19
    40d0:	81 93       	st	Z+, r24
    40d2:	91 93       	st	Z+, r25
    40d4:	22 50       	subi	r18, 0x02	; 2
    40d6:	31 09       	sbc	r19, r1
    40d8:	39 83       	std	Y+1, r19	; 0x01
    40da:	28 83       	st	Y, r18
    40dc:	3a c0       	rjmp	.+116    	; 0x4152 <malloc+0x124>
    40de:	20 91 75 0e 	lds	r18, 0x0E75	; 0x800e75 <__brkval>
    40e2:	30 91 76 0e 	lds	r19, 0x0E76	; 0x800e76 <__brkval+0x1>
    40e6:	23 2b       	or	r18, r19
    40e8:	41 f4       	brne	.+16     	; 0x40fa <malloc+0xcc>
    40ea:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    40ee:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    40f2:	30 93 76 0e 	sts	0x0E76, r19	; 0x800e76 <__brkval+0x1>
    40f6:	20 93 75 0e 	sts	0x0E75, r18	; 0x800e75 <__brkval>
    40fa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    40fe:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4102:	21 15       	cp	r18, r1
    4104:	31 05       	cpc	r19, r1
    4106:	41 f4       	brne	.+16     	; 0x4118 <malloc+0xea>
    4108:	2d b7       	in	r18, 0x3d	; 61
    410a:	3e b7       	in	r19, 0x3e	; 62
    410c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4110:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4114:	24 1b       	sub	r18, r20
    4116:	35 0b       	sbc	r19, r21
    4118:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <__brkval>
    411c:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <__brkval+0x1>
    4120:	e2 17       	cp	r30, r18
    4122:	f3 07       	cpc	r31, r19
    4124:	a0 f4       	brcc	.+40     	; 0x414e <malloc+0x120>
    4126:	2e 1b       	sub	r18, r30
    4128:	3f 0b       	sbc	r19, r31
    412a:	28 17       	cp	r18, r24
    412c:	39 07       	cpc	r19, r25
    412e:	78 f0       	brcs	.+30     	; 0x414e <malloc+0x120>
    4130:	ac 01       	movw	r20, r24
    4132:	4e 5f       	subi	r20, 0xFE	; 254
    4134:	5f 4f       	sbci	r21, 0xFF	; 255
    4136:	24 17       	cp	r18, r20
    4138:	35 07       	cpc	r19, r21
    413a:	48 f0       	brcs	.+18     	; 0x414e <malloc+0x120>
    413c:	4e 0f       	add	r20, r30
    413e:	5f 1f       	adc	r21, r31
    4140:	50 93 76 0e 	sts	0x0E76, r21	; 0x800e76 <__brkval+0x1>
    4144:	40 93 75 0e 	sts	0x0E75, r20	; 0x800e75 <__brkval>
    4148:	81 93       	st	Z+, r24
    414a:	91 93       	st	Z+, r25
    414c:	02 c0       	rjmp	.+4      	; 0x4152 <malloc+0x124>
    414e:	e0 e0       	ldi	r30, 0x00	; 0
    4150:	f0 e0       	ldi	r31, 0x00	; 0
    4152:	cf 01       	movw	r24, r30
    4154:	df 91       	pop	r29
    4156:	cf 91       	pop	r28
    4158:	1f 91       	pop	r17
    415a:	0f 91       	pop	r16
    415c:	08 95       	ret

0000415e <free>:
    415e:	cf 93       	push	r28
    4160:	df 93       	push	r29
    4162:	00 97       	sbiw	r24, 0x00	; 0
    4164:	09 f4       	brne	.+2      	; 0x4168 <free+0xa>
    4166:	81 c0       	rjmp	.+258    	; 0x426a <free+0x10c>
    4168:	fc 01       	movw	r30, r24
    416a:	32 97       	sbiw	r30, 0x02	; 2
    416c:	13 82       	std	Z+3, r1	; 0x03
    416e:	12 82       	std	Z+2, r1	; 0x02
    4170:	a0 91 77 0e 	lds	r26, 0x0E77	; 0x800e77 <__flp>
    4174:	b0 91 78 0e 	lds	r27, 0x0E78	; 0x800e78 <__flp+0x1>
    4178:	10 97       	sbiw	r26, 0x00	; 0
    417a:	81 f4       	brne	.+32     	; 0x419c <free+0x3e>
    417c:	20 81       	ld	r18, Z
    417e:	31 81       	ldd	r19, Z+1	; 0x01
    4180:	82 0f       	add	r24, r18
    4182:	93 1f       	adc	r25, r19
    4184:	20 91 75 0e 	lds	r18, 0x0E75	; 0x800e75 <__brkval>
    4188:	30 91 76 0e 	lds	r19, 0x0E76	; 0x800e76 <__brkval+0x1>
    418c:	28 17       	cp	r18, r24
    418e:	39 07       	cpc	r19, r25
    4190:	51 f5       	brne	.+84     	; 0x41e6 <free+0x88>
    4192:	f0 93 76 0e 	sts	0x0E76, r31	; 0x800e76 <__brkval+0x1>
    4196:	e0 93 75 0e 	sts	0x0E75, r30	; 0x800e75 <__brkval>
    419a:	67 c0       	rjmp	.+206    	; 0x426a <free+0x10c>
    419c:	ed 01       	movw	r28, r26
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	ce 17       	cp	r28, r30
    41a4:	df 07       	cpc	r29, r31
    41a6:	40 f4       	brcc	.+16     	; 0x41b8 <free+0x5a>
    41a8:	4a 81       	ldd	r20, Y+2	; 0x02
    41aa:	5b 81       	ldd	r21, Y+3	; 0x03
    41ac:	9e 01       	movw	r18, r28
    41ae:	41 15       	cp	r20, r1
    41b0:	51 05       	cpc	r21, r1
    41b2:	f1 f0       	breq	.+60     	; 0x41f0 <free+0x92>
    41b4:	ea 01       	movw	r28, r20
    41b6:	f5 cf       	rjmp	.-22     	; 0x41a2 <free+0x44>
    41b8:	d3 83       	std	Z+3, r29	; 0x03
    41ba:	c2 83       	std	Z+2, r28	; 0x02
    41bc:	40 81       	ld	r20, Z
    41be:	51 81       	ldd	r21, Z+1	; 0x01
    41c0:	84 0f       	add	r24, r20
    41c2:	95 1f       	adc	r25, r21
    41c4:	c8 17       	cp	r28, r24
    41c6:	d9 07       	cpc	r29, r25
    41c8:	59 f4       	brne	.+22     	; 0x41e0 <free+0x82>
    41ca:	88 81       	ld	r24, Y
    41cc:	99 81       	ldd	r25, Y+1	; 0x01
    41ce:	84 0f       	add	r24, r20
    41d0:	95 1f       	adc	r25, r21
    41d2:	02 96       	adiw	r24, 0x02	; 2
    41d4:	91 83       	std	Z+1, r25	; 0x01
    41d6:	80 83       	st	Z, r24
    41d8:	8a 81       	ldd	r24, Y+2	; 0x02
    41da:	9b 81       	ldd	r25, Y+3	; 0x03
    41dc:	93 83       	std	Z+3, r25	; 0x03
    41de:	82 83       	std	Z+2, r24	; 0x02
    41e0:	21 15       	cp	r18, r1
    41e2:	31 05       	cpc	r19, r1
    41e4:	29 f4       	brne	.+10     	; 0x41f0 <free+0x92>
    41e6:	f0 93 78 0e 	sts	0x0E78, r31	; 0x800e78 <__flp+0x1>
    41ea:	e0 93 77 0e 	sts	0x0E77, r30	; 0x800e77 <__flp>
    41ee:	3d c0       	rjmp	.+122    	; 0x426a <free+0x10c>
    41f0:	e9 01       	movw	r28, r18
    41f2:	fb 83       	std	Y+3, r31	; 0x03
    41f4:	ea 83       	std	Y+2, r30	; 0x02
    41f6:	49 91       	ld	r20, Y+
    41f8:	59 91       	ld	r21, Y+
    41fa:	c4 0f       	add	r28, r20
    41fc:	d5 1f       	adc	r29, r21
    41fe:	ec 17       	cp	r30, r28
    4200:	fd 07       	cpc	r31, r29
    4202:	61 f4       	brne	.+24     	; 0x421c <free+0xbe>
    4204:	80 81       	ld	r24, Z
    4206:	91 81       	ldd	r25, Z+1	; 0x01
    4208:	84 0f       	add	r24, r20
    420a:	95 1f       	adc	r25, r21
    420c:	02 96       	adiw	r24, 0x02	; 2
    420e:	e9 01       	movw	r28, r18
    4210:	99 83       	std	Y+1, r25	; 0x01
    4212:	88 83       	st	Y, r24
    4214:	82 81       	ldd	r24, Z+2	; 0x02
    4216:	93 81       	ldd	r25, Z+3	; 0x03
    4218:	9b 83       	std	Y+3, r25	; 0x03
    421a:	8a 83       	std	Y+2, r24	; 0x02
    421c:	e0 e0       	ldi	r30, 0x00	; 0
    421e:	f0 e0       	ldi	r31, 0x00	; 0
    4220:	12 96       	adiw	r26, 0x02	; 2
    4222:	8d 91       	ld	r24, X+
    4224:	9c 91       	ld	r25, X
    4226:	13 97       	sbiw	r26, 0x03	; 3
    4228:	00 97       	sbiw	r24, 0x00	; 0
    422a:	19 f0       	breq	.+6      	; 0x4232 <free+0xd4>
    422c:	fd 01       	movw	r30, r26
    422e:	dc 01       	movw	r26, r24
    4230:	f7 cf       	rjmp	.-18     	; 0x4220 <free+0xc2>
    4232:	8d 91       	ld	r24, X+
    4234:	9c 91       	ld	r25, X
    4236:	11 97       	sbiw	r26, 0x01	; 1
    4238:	9d 01       	movw	r18, r26
    423a:	2e 5f       	subi	r18, 0xFE	; 254
    423c:	3f 4f       	sbci	r19, 0xFF	; 255
    423e:	82 0f       	add	r24, r18
    4240:	93 1f       	adc	r25, r19
    4242:	20 91 75 0e 	lds	r18, 0x0E75	; 0x800e75 <__brkval>
    4246:	30 91 76 0e 	lds	r19, 0x0E76	; 0x800e76 <__brkval+0x1>
    424a:	28 17       	cp	r18, r24
    424c:	39 07       	cpc	r19, r25
    424e:	69 f4       	brne	.+26     	; 0x426a <free+0x10c>
    4250:	30 97       	sbiw	r30, 0x00	; 0
    4252:	29 f4       	brne	.+10     	; 0x425e <free+0x100>
    4254:	10 92 78 0e 	sts	0x0E78, r1	; 0x800e78 <__flp+0x1>
    4258:	10 92 77 0e 	sts	0x0E77, r1	; 0x800e77 <__flp>
    425c:	02 c0       	rjmp	.+4      	; 0x4262 <free+0x104>
    425e:	13 82       	std	Z+3, r1	; 0x03
    4260:	12 82       	std	Z+2, r1	; 0x02
    4262:	b0 93 76 0e 	sts	0x0E76, r27	; 0x800e76 <__brkval+0x1>
    4266:	a0 93 75 0e 	sts	0x0E75, r26	; 0x800e75 <__brkval>
    426a:	df 91       	pop	r29
    426c:	cf 91       	pop	r28
    426e:	08 95       	ret

00004270 <abort>:
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	f8 94       	cli
    4276:	00 c3       	rjmp	.+1536   	; 0x4878 <_exit>

00004278 <memcpy>:
    4278:	fb 01       	movw	r30, r22
    427a:	dc 01       	movw	r26, r24
    427c:	02 c0       	rjmp	.+4      	; 0x4282 <memcpy+0xa>
    427e:	01 90       	ld	r0, Z+
    4280:	0d 92       	st	X+, r0
    4282:	41 50       	subi	r20, 0x01	; 1
    4284:	50 40       	sbci	r21, 0x00	; 0
    4286:	d8 f7       	brcc	.-10     	; 0x427e <memcpy+0x6>
    4288:	08 95       	ret

0000428a <memset>:
    428a:	dc 01       	movw	r26, r24
    428c:	01 c0       	rjmp	.+2      	; 0x4290 <memset+0x6>
    428e:	6d 93       	st	X+, r22
    4290:	41 50       	subi	r20, 0x01	; 1
    4292:	50 40       	sbci	r21, 0x00	; 0
    4294:	e0 f7       	brcc	.-8      	; 0x428e <memset+0x4>
    4296:	08 95       	ret

00004298 <printf>:
    4298:	cf 93       	push	r28
    429a:	df 93       	push	r29
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	ae 01       	movw	r20, r28
    42a2:	4a 5f       	subi	r20, 0xFA	; 250
    42a4:	5f 4f       	sbci	r21, 0xFF	; 255
    42a6:	fa 01       	movw	r30, r20
    42a8:	61 91       	ld	r22, Z+
    42aa:	71 91       	ld	r23, Z+
    42ac:	af 01       	movw	r20, r30
    42ae:	80 91 7b 0e 	lds	r24, 0x0E7B	; 0x800e7b <__iob+0x2>
    42b2:	90 91 7c 0e 	lds	r25, 0x0E7C	; 0x800e7c <__iob+0x3>
    42b6:	33 d0       	rcall	.+102    	; 0x431e <vfprintf>
    42b8:	df 91       	pop	r29
    42ba:	cf 91       	pop	r28
    42bc:	08 95       	ret

000042be <puts>:
    42be:	0f 93       	push	r16
    42c0:	1f 93       	push	r17
    42c2:	cf 93       	push	r28
    42c4:	df 93       	push	r29
    42c6:	e0 91 7b 0e 	lds	r30, 0x0E7B	; 0x800e7b <__iob+0x2>
    42ca:	f0 91 7c 0e 	lds	r31, 0x0E7C	; 0x800e7c <__iob+0x3>
    42ce:	23 81       	ldd	r18, Z+3	; 0x03
    42d0:	21 ff       	sbrs	r18, 1
    42d2:	1b c0       	rjmp	.+54     	; 0x430a <puts+0x4c>
    42d4:	8c 01       	movw	r16, r24
    42d6:	d0 e0       	ldi	r29, 0x00	; 0
    42d8:	c0 e0       	ldi	r28, 0x00	; 0
    42da:	f8 01       	movw	r30, r16
    42dc:	81 91       	ld	r24, Z+
    42de:	8f 01       	movw	r16, r30
    42e0:	60 91 7b 0e 	lds	r22, 0x0E7B	; 0x800e7b <__iob+0x2>
    42e4:	70 91 7c 0e 	lds	r23, 0x0E7C	; 0x800e7c <__iob+0x3>
    42e8:	db 01       	movw	r26, r22
    42ea:	18 96       	adiw	r26, 0x08	; 8
    42ec:	ed 91       	ld	r30, X+
    42ee:	fc 91       	ld	r31, X
    42f0:	19 97       	sbiw	r26, 0x09	; 9
    42f2:	88 23       	and	r24, r24
    42f4:	31 f0       	breq	.+12     	; 0x4302 <puts+0x44>
    42f6:	19 95       	eicall
    42f8:	89 2b       	or	r24, r25
    42fa:	79 f3       	breq	.-34     	; 0x42da <puts+0x1c>
    42fc:	df ef       	ldi	r29, 0xFF	; 255
    42fe:	cf ef       	ldi	r28, 0xFF	; 255
    4300:	ec cf       	rjmp	.-40     	; 0x42da <puts+0x1c>
    4302:	8a e0       	ldi	r24, 0x0A	; 10
    4304:	19 95       	eicall
    4306:	89 2b       	or	r24, r25
    4308:	19 f0       	breq	.+6      	; 0x4310 <puts+0x52>
    430a:	8f ef       	ldi	r24, 0xFF	; 255
    430c:	9f ef       	ldi	r25, 0xFF	; 255
    430e:	02 c0       	rjmp	.+4      	; 0x4314 <puts+0x56>
    4310:	8d 2f       	mov	r24, r29
    4312:	9c 2f       	mov	r25, r28
    4314:	df 91       	pop	r29
    4316:	cf 91       	pop	r28
    4318:	1f 91       	pop	r17
    431a:	0f 91       	pop	r16
    431c:	08 95       	ret

0000431e <vfprintf>:
    431e:	2f 92       	push	r2
    4320:	3f 92       	push	r3
    4322:	4f 92       	push	r4
    4324:	5f 92       	push	r5
    4326:	6f 92       	push	r6
    4328:	7f 92       	push	r7
    432a:	8f 92       	push	r8
    432c:	9f 92       	push	r9
    432e:	af 92       	push	r10
    4330:	bf 92       	push	r11
    4332:	cf 92       	push	r12
    4334:	df 92       	push	r13
    4336:	ef 92       	push	r14
    4338:	ff 92       	push	r15
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
    4346:	2b 97       	sbiw	r28, 0x0b	; 11
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	f8 94       	cli
    434c:	de bf       	out	0x3e, r29	; 62
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	cd bf       	out	0x3d, r28	; 61
    4352:	6c 01       	movw	r12, r24
    4354:	7b 01       	movw	r14, r22
    4356:	8a 01       	movw	r16, r20
    4358:	fc 01       	movw	r30, r24
    435a:	17 82       	std	Z+7, r1	; 0x07
    435c:	16 82       	std	Z+6, r1	; 0x06
    435e:	83 81       	ldd	r24, Z+3	; 0x03
    4360:	81 ff       	sbrs	r24, 1
    4362:	bf c1       	rjmp	.+894    	; 0x46e2 <vfprintf+0x3c4>
    4364:	ce 01       	movw	r24, r28
    4366:	01 96       	adiw	r24, 0x01	; 1
    4368:	3c 01       	movw	r6, r24
    436a:	f6 01       	movw	r30, r12
    436c:	93 81       	ldd	r25, Z+3	; 0x03
    436e:	f7 01       	movw	r30, r14
    4370:	93 fd       	sbrc	r25, 3
    4372:	85 91       	lpm	r24, Z+
    4374:	93 ff       	sbrs	r25, 3
    4376:	81 91       	ld	r24, Z+
    4378:	7f 01       	movw	r14, r30
    437a:	88 23       	and	r24, r24
    437c:	09 f4       	brne	.+2      	; 0x4380 <vfprintf+0x62>
    437e:	ad c1       	rjmp	.+858    	; 0x46da <vfprintf+0x3bc>
    4380:	85 32       	cpi	r24, 0x25	; 37
    4382:	39 f4       	brne	.+14     	; 0x4392 <vfprintf+0x74>
    4384:	93 fd       	sbrc	r25, 3
    4386:	85 91       	lpm	r24, Z+
    4388:	93 ff       	sbrs	r25, 3
    438a:	81 91       	ld	r24, Z+
    438c:	7f 01       	movw	r14, r30
    438e:	85 32       	cpi	r24, 0x25	; 37
    4390:	21 f4       	brne	.+8      	; 0x439a <vfprintf+0x7c>
    4392:	b6 01       	movw	r22, r12
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	d6 d1       	rcall	.+940    	; 0x4744 <fputc>
    4398:	e8 cf       	rjmp	.-48     	; 0x436a <vfprintf+0x4c>
    439a:	91 2c       	mov	r9, r1
    439c:	21 2c       	mov	r2, r1
    439e:	31 2c       	mov	r3, r1
    43a0:	ff e1       	ldi	r31, 0x1F	; 31
    43a2:	f3 15       	cp	r31, r3
    43a4:	d8 f0       	brcs	.+54     	; 0x43dc <vfprintf+0xbe>
    43a6:	8b 32       	cpi	r24, 0x2B	; 43
    43a8:	79 f0       	breq	.+30     	; 0x43c8 <vfprintf+0xaa>
    43aa:	38 f4       	brcc	.+14     	; 0x43ba <vfprintf+0x9c>
    43ac:	80 32       	cpi	r24, 0x20	; 32
    43ae:	79 f0       	breq	.+30     	; 0x43ce <vfprintf+0xb0>
    43b0:	83 32       	cpi	r24, 0x23	; 35
    43b2:	a1 f4       	brne	.+40     	; 0x43dc <vfprintf+0xbe>
    43b4:	23 2d       	mov	r18, r3
    43b6:	20 61       	ori	r18, 0x10	; 16
    43b8:	1d c0       	rjmp	.+58     	; 0x43f4 <vfprintf+0xd6>
    43ba:	8d 32       	cpi	r24, 0x2D	; 45
    43bc:	61 f0       	breq	.+24     	; 0x43d6 <vfprintf+0xb8>
    43be:	80 33       	cpi	r24, 0x30	; 48
    43c0:	69 f4       	brne	.+26     	; 0x43dc <vfprintf+0xbe>
    43c2:	23 2d       	mov	r18, r3
    43c4:	21 60       	ori	r18, 0x01	; 1
    43c6:	16 c0       	rjmp	.+44     	; 0x43f4 <vfprintf+0xd6>
    43c8:	83 2d       	mov	r24, r3
    43ca:	82 60       	ori	r24, 0x02	; 2
    43cc:	38 2e       	mov	r3, r24
    43ce:	e3 2d       	mov	r30, r3
    43d0:	e4 60       	ori	r30, 0x04	; 4
    43d2:	3e 2e       	mov	r3, r30
    43d4:	2a c0       	rjmp	.+84     	; 0x442a <vfprintf+0x10c>
    43d6:	f3 2d       	mov	r31, r3
    43d8:	f8 60       	ori	r31, 0x08	; 8
    43da:	1d c0       	rjmp	.+58     	; 0x4416 <vfprintf+0xf8>
    43dc:	37 fc       	sbrc	r3, 7
    43de:	2d c0       	rjmp	.+90     	; 0x443a <vfprintf+0x11c>
    43e0:	20 ed       	ldi	r18, 0xD0	; 208
    43e2:	28 0f       	add	r18, r24
    43e4:	2a 30       	cpi	r18, 0x0A	; 10
    43e6:	40 f0       	brcs	.+16     	; 0x43f8 <vfprintf+0xda>
    43e8:	8e 32       	cpi	r24, 0x2E	; 46
    43ea:	b9 f4       	brne	.+46     	; 0x441a <vfprintf+0xfc>
    43ec:	36 fc       	sbrc	r3, 6
    43ee:	75 c1       	rjmp	.+746    	; 0x46da <vfprintf+0x3bc>
    43f0:	23 2d       	mov	r18, r3
    43f2:	20 64       	ori	r18, 0x40	; 64
    43f4:	32 2e       	mov	r3, r18
    43f6:	19 c0       	rjmp	.+50     	; 0x442a <vfprintf+0x10c>
    43f8:	36 fe       	sbrs	r3, 6
    43fa:	06 c0       	rjmp	.+12     	; 0x4408 <vfprintf+0xea>
    43fc:	8a e0       	ldi	r24, 0x0A	; 10
    43fe:	98 9e       	mul	r9, r24
    4400:	20 0d       	add	r18, r0
    4402:	11 24       	eor	r1, r1
    4404:	92 2e       	mov	r9, r18
    4406:	11 c0       	rjmp	.+34     	; 0x442a <vfprintf+0x10c>
    4408:	ea e0       	ldi	r30, 0x0A	; 10
    440a:	2e 9e       	mul	r2, r30
    440c:	20 0d       	add	r18, r0
    440e:	11 24       	eor	r1, r1
    4410:	22 2e       	mov	r2, r18
    4412:	f3 2d       	mov	r31, r3
    4414:	f0 62       	ori	r31, 0x20	; 32
    4416:	3f 2e       	mov	r3, r31
    4418:	08 c0       	rjmp	.+16     	; 0x442a <vfprintf+0x10c>
    441a:	8c 36       	cpi	r24, 0x6C	; 108
    441c:	21 f4       	brne	.+8      	; 0x4426 <vfprintf+0x108>
    441e:	83 2d       	mov	r24, r3
    4420:	80 68       	ori	r24, 0x80	; 128
    4422:	38 2e       	mov	r3, r24
    4424:	02 c0       	rjmp	.+4      	; 0x442a <vfprintf+0x10c>
    4426:	88 36       	cpi	r24, 0x68	; 104
    4428:	41 f4       	brne	.+16     	; 0x443a <vfprintf+0x11c>
    442a:	f7 01       	movw	r30, r14
    442c:	93 fd       	sbrc	r25, 3
    442e:	85 91       	lpm	r24, Z+
    4430:	93 ff       	sbrs	r25, 3
    4432:	81 91       	ld	r24, Z+
    4434:	7f 01       	movw	r14, r30
    4436:	81 11       	cpse	r24, r1
    4438:	b3 cf       	rjmp	.-154    	; 0x43a0 <vfprintf+0x82>
    443a:	98 2f       	mov	r25, r24
    443c:	9f 7d       	andi	r25, 0xDF	; 223
    443e:	95 54       	subi	r25, 0x45	; 69
    4440:	93 30       	cpi	r25, 0x03	; 3
    4442:	28 f4       	brcc	.+10     	; 0x444e <vfprintf+0x130>
    4444:	0c 5f       	subi	r16, 0xFC	; 252
    4446:	1f 4f       	sbci	r17, 0xFF	; 255
    4448:	9f e3       	ldi	r25, 0x3F	; 63
    444a:	99 83       	std	Y+1, r25	; 0x01
    444c:	0d c0       	rjmp	.+26     	; 0x4468 <vfprintf+0x14a>
    444e:	83 36       	cpi	r24, 0x63	; 99
    4450:	31 f0       	breq	.+12     	; 0x445e <vfprintf+0x140>
    4452:	83 37       	cpi	r24, 0x73	; 115
    4454:	71 f0       	breq	.+28     	; 0x4472 <vfprintf+0x154>
    4456:	83 35       	cpi	r24, 0x53	; 83
    4458:	09 f0       	breq	.+2      	; 0x445c <vfprintf+0x13e>
    445a:	55 c0       	rjmp	.+170    	; 0x4506 <vfprintf+0x1e8>
    445c:	20 c0       	rjmp	.+64     	; 0x449e <vfprintf+0x180>
    445e:	f8 01       	movw	r30, r16
    4460:	80 81       	ld	r24, Z
    4462:	89 83       	std	Y+1, r24	; 0x01
    4464:	0e 5f       	subi	r16, 0xFE	; 254
    4466:	1f 4f       	sbci	r17, 0xFF	; 255
    4468:	88 24       	eor	r8, r8
    446a:	83 94       	inc	r8
    446c:	91 2c       	mov	r9, r1
    446e:	53 01       	movw	r10, r6
    4470:	12 c0       	rjmp	.+36     	; 0x4496 <vfprintf+0x178>
    4472:	28 01       	movw	r4, r16
    4474:	f2 e0       	ldi	r31, 0x02	; 2
    4476:	4f 0e       	add	r4, r31
    4478:	51 1c       	adc	r5, r1
    447a:	f8 01       	movw	r30, r16
    447c:	a0 80       	ld	r10, Z
    447e:	b1 80       	ldd	r11, Z+1	; 0x01
    4480:	36 fe       	sbrs	r3, 6
    4482:	03 c0       	rjmp	.+6      	; 0x448a <vfprintf+0x16c>
    4484:	69 2d       	mov	r22, r9
    4486:	70 e0       	ldi	r23, 0x00	; 0
    4488:	02 c0       	rjmp	.+4      	; 0x448e <vfprintf+0x170>
    448a:	6f ef       	ldi	r22, 0xFF	; 255
    448c:	7f ef       	ldi	r23, 0xFF	; 255
    448e:	c5 01       	movw	r24, r10
    4490:	4e d1       	rcall	.+668    	; 0x472e <strnlen>
    4492:	4c 01       	movw	r8, r24
    4494:	82 01       	movw	r16, r4
    4496:	f3 2d       	mov	r31, r3
    4498:	ff 77       	andi	r31, 0x7F	; 127
    449a:	3f 2e       	mov	r3, r31
    449c:	15 c0       	rjmp	.+42     	; 0x44c8 <vfprintf+0x1aa>
    449e:	28 01       	movw	r4, r16
    44a0:	22 e0       	ldi	r18, 0x02	; 2
    44a2:	42 0e       	add	r4, r18
    44a4:	51 1c       	adc	r5, r1
    44a6:	f8 01       	movw	r30, r16
    44a8:	a0 80       	ld	r10, Z
    44aa:	b1 80       	ldd	r11, Z+1	; 0x01
    44ac:	36 fe       	sbrs	r3, 6
    44ae:	03 c0       	rjmp	.+6      	; 0x44b6 <vfprintf+0x198>
    44b0:	69 2d       	mov	r22, r9
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	02 c0       	rjmp	.+4      	; 0x44ba <vfprintf+0x19c>
    44b6:	6f ef       	ldi	r22, 0xFF	; 255
    44b8:	7f ef       	ldi	r23, 0xFF	; 255
    44ba:	c5 01       	movw	r24, r10
    44bc:	2d d1       	rcall	.+602    	; 0x4718 <strnlen_P>
    44be:	4c 01       	movw	r8, r24
    44c0:	f3 2d       	mov	r31, r3
    44c2:	f0 68       	ori	r31, 0x80	; 128
    44c4:	3f 2e       	mov	r3, r31
    44c6:	82 01       	movw	r16, r4
    44c8:	33 fc       	sbrc	r3, 3
    44ca:	19 c0       	rjmp	.+50     	; 0x44fe <vfprintf+0x1e0>
    44cc:	82 2d       	mov	r24, r2
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	88 16       	cp	r8, r24
    44d2:	99 06       	cpc	r9, r25
    44d4:	a0 f4       	brcc	.+40     	; 0x44fe <vfprintf+0x1e0>
    44d6:	b6 01       	movw	r22, r12
    44d8:	80 e2       	ldi	r24, 0x20	; 32
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	33 d1       	rcall	.+614    	; 0x4744 <fputc>
    44de:	2a 94       	dec	r2
    44e0:	f5 cf       	rjmp	.-22     	; 0x44cc <vfprintf+0x1ae>
    44e2:	f5 01       	movw	r30, r10
    44e4:	37 fc       	sbrc	r3, 7
    44e6:	85 91       	lpm	r24, Z+
    44e8:	37 fe       	sbrs	r3, 7
    44ea:	81 91       	ld	r24, Z+
    44ec:	5f 01       	movw	r10, r30
    44ee:	b6 01       	movw	r22, r12
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	28 d1       	rcall	.+592    	; 0x4744 <fputc>
    44f4:	21 10       	cpse	r2, r1
    44f6:	2a 94       	dec	r2
    44f8:	21 e0       	ldi	r18, 0x01	; 1
    44fa:	82 1a       	sub	r8, r18
    44fc:	91 08       	sbc	r9, r1
    44fe:	81 14       	cp	r8, r1
    4500:	91 04       	cpc	r9, r1
    4502:	79 f7       	brne	.-34     	; 0x44e2 <vfprintf+0x1c4>
    4504:	e1 c0       	rjmp	.+450    	; 0x46c8 <vfprintf+0x3aa>
    4506:	84 36       	cpi	r24, 0x64	; 100
    4508:	11 f0       	breq	.+4      	; 0x450e <vfprintf+0x1f0>
    450a:	89 36       	cpi	r24, 0x69	; 105
    450c:	39 f5       	brne	.+78     	; 0x455c <vfprintf+0x23e>
    450e:	f8 01       	movw	r30, r16
    4510:	37 fe       	sbrs	r3, 7
    4512:	07 c0       	rjmp	.+14     	; 0x4522 <vfprintf+0x204>
    4514:	60 81       	ld	r22, Z
    4516:	71 81       	ldd	r23, Z+1	; 0x01
    4518:	82 81       	ldd	r24, Z+2	; 0x02
    451a:	93 81       	ldd	r25, Z+3	; 0x03
    451c:	0c 5f       	subi	r16, 0xFC	; 252
    451e:	1f 4f       	sbci	r17, 0xFF	; 255
    4520:	08 c0       	rjmp	.+16     	; 0x4532 <vfprintf+0x214>
    4522:	60 81       	ld	r22, Z
    4524:	71 81       	ldd	r23, Z+1	; 0x01
    4526:	07 2e       	mov	r0, r23
    4528:	00 0c       	add	r0, r0
    452a:	88 0b       	sbc	r24, r24
    452c:	99 0b       	sbc	r25, r25
    452e:	0e 5f       	subi	r16, 0xFE	; 254
    4530:	1f 4f       	sbci	r17, 0xFF	; 255
    4532:	f3 2d       	mov	r31, r3
    4534:	ff 76       	andi	r31, 0x6F	; 111
    4536:	3f 2e       	mov	r3, r31
    4538:	97 ff       	sbrs	r25, 7
    453a:	09 c0       	rjmp	.+18     	; 0x454e <vfprintf+0x230>
    453c:	90 95       	com	r25
    453e:	80 95       	com	r24
    4540:	70 95       	com	r23
    4542:	61 95       	neg	r22
    4544:	7f 4f       	sbci	r23, 0xFF	; 255
    4546:	8f 4f       	sbci	r24, 0xFF	; 255
    4548:	9f 4f       	sbci	r25, 0xFF	; 255
    454a:	f0 68       	ori	r31, 0x80	; 128
    454c:	3f 2e       	mov	r3, r31
    454e:	2a e0       	ldi	r18, 0x0A	; 10
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	a3 01       	movw	r20, r6
    4554:	33 d1       	rcall	.+614    	; 0x47bc <__ultoa_invert>
    4556:	88 2e       	mov	r8, r24
    4558:	86 18       	sub	r8, r6
    455a:	44 c0       	rjmp	.+136    	; 0x45e4 <vfprintf+0x2c6>
    455c:	85 37       	cpi	r24, 0x75	; 117
    455e:	31 f4       	brne	.+12     	; 0x456c <vfprintf+0x24e>
    4560:	23 2d       	mov	r18, r3
    4562:	2f 7e       	andi	r18, 0xEF	; 239
    4564:	b2 2e       	mov	r11, r18
    4566:	2a e0       	ldi	r18, 0x0A	; 10
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	25 c0       	rjmp	.+74     	; 0x45b6 <vfprintf+0x298>
    456c:	93 2d       	mov	r25, r3
    456e:	99 7f       	andi	r25, 0xF9	; 249
    4570:	b9 2e       	mov	r11, r25
    4572:	8f 36       	cpi	r24, 0x6F	; 111
    4574:	c1 f0       	breq	.+48     	; 0x45a6 <vfprintf+0x288>
    4576:	18 f4       	brcc	.+6      	; 0x457e <vfprintf+0x260>
    4578:	88 35       	cpi	r24, 0x58	; 88
    457a:	79 f0       	breq	.+30     	; 0x459a <vfprintf+0x27c>
    457c:	ae c0       	rjmp	.+348    	; 0x46da <vfprintf+0x3bc>
    457e:	80 37       	cpi	r24, 0x70	; 112
    4580:	19 f0       	breq	.+6      	; 0x4588 <vfprintf+0x26a>
    4582:	88 37       	cpi	r24, 0x78	; 120
    4584:	21 f0       	breq	.+8      	; 0x458e <vfprintf+0x270>
    4586:	a9 c0       	rjmp	.+338    	; 0x46da <vfprintf+0x3bc>
    4588:	e9 2f       	mov	r30, r25
    458a:	e0 61       	ori	r30, 0x10	; 16
    458c:	be 2e       	mov	r11, r30
    458e:	b4 fe       	sbrs	r11, 4
    4590:	0d c0       	rjmp	.+26     	; 0x45ac <vfprintf+0x28e>
    4592:	fb 2d       	mov	r31, r11
    4594:	f4 60       	ori	r31, 0x04	; 4
    4596:	bf 2e       	mov	r11, r31
    4598:	09 c0       	rjmp	.+18     	; 0x45ac <vfprintf+0x28e>
    459a:	34 fe       	sbrs	r3, 4
    459c:	0a c0       	rjmp	.+20     	; 0x45b2 <vfprintf+0x294>
    459e:	29 2f       	mov	r18, r25
    45a0:	26 60       	ori	r18, 0x06	; 6
    45a2:	b2 2e       	mov	r11, r18
    45a4:	06 c0       	rjmp	.+12     	; 0x45b2 <vfprintf+0x294>
    45a6:	28 e0       	ldi	r18, 0x08	; 8
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	05 c0       	rjmp	.+10     	; 0x45b6 <vfprintf+0x298>
    45ac:	20 e1       	ldi	r18, 0x10	; 16
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <vfprintf+0x298>
    45b2:	20 e1       	ldi	r18, 0x10	; 16
    45b4:	32 e0       	ldi	r19, 0x02	; 2
    45b6:	f8 01       	movw	r30, r16
    45b8:	b7 fe       	sbrs	r11, 7
    45ba:	07 c0       	rjmp	.+14     	; 0x45ca <vfprintf+0x2ac>
    45bc:	60 81       	ld	r22, Z
    45be:	71 81       	ldd	r23, Z+1	; 0x01
    45c0:	82 81       	ldd	r24, Z+2	; 0x02
    45c2:	93 81       	ldd	r25, Z+3	; 0x03
    45c4:	0c 5f       	subi	r16, 0xFC	; 252
    45c6:	1f 4f       	sbci	r17, 0xFF	; 255
    45c8:	06 c0       	rjmp	.+12     	; 0x45d6 <vfprintf+0x2b8>
    45ca:	60 81       	ld	r22, Z
    45cc:	71 81       	ldd	r23, Z+1	; 0x01
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	0e 5f       	subi	r16, 0xFE	; 254
    45d4:	1f 4f       	sbci	r17, 0xFF	; 255
    45d6:	a3 01       	movw	r20, r6
    45d8:	f1 d0       	rcall	.+482    	; 0x47bc <__ultoa_invert>
    45da:	88 2e       	mov	r8, r24
    45dc:	86 18       	sub	r8, r6
    45de:	fb 2d       	mov	r31, r11
    45e0:	ff 77       	andi	r31, 0x7F	; 127
    45e2:	3f 2e       	mov	r3, r31
    45e4:	36 fe       	sbrs	r3, 6
    45e6:	0d c0       	rjmp	.+26     	; 0x4602 <vfprintf+0x2e4>
    45e8:	23 2d       	mov	r18, r3
    45ea:	2e 7f       	andi	r18, 0xFE	; 254
    45ec:	a2 2e       	mov	r10, r18
    45ee:	89 14       	cp	r8, r9
    45f0:	58 f4       	brcc	.+22     	; 0x4608 <vfprintf+0x2ea>
    45f2:	34 fe       	sbrs	r3, 4
    45f4:	0b c0       	rjmp	.+22     	; 0x460c <vfprintf+0x2ee>
    45f6:	32 fc       	sbrc	r3, 2
    45f8:	09 c0       	rjmp	.+18     	; 0x460c <vfprintf+0x2ee>
    45fa:	83 2d       	mov	r24, r3
    45fc:	8e 7e       	andi	r24, 0xEE	; 238
    45fe:	a8 2e       	mov	r10, r24
    4600:	05 c0       	rjmp	.+10     	; 0x460c <vfprintf+0x2ee>
    4602:	b8 2c       	mov	r11, r8
    4604:	a3 2c       	mov	r10, r3
    4606:	03 c0       	rjmp	.+6      	; 0x460e <vfprintf+0x2f0>
    4608:	b8 2c       	mov	r11, r8
    460a:	01 c0       	rjmp	.+2      	; 0x460e <vfprintf+0x2f0>
    460c:	b9 2c       	mov	r11, r9
    460e:	a4 fe       	sbrs	r10, 4
    4610:	0f c0       	rjmp	.+30     	; 0x4630 <vfprintf+0x312>
    4612:	fe 01       	movw	r30, r28
    4614:	e8 0d       	add	r30, r8
    4616:	f1 1d       	adc	r31, r1
    4618:	80 81       	ld	r24, Z
    461a:	80 33       	cpi	r24, 0x30	; 48
    461c:	21 f4       	brne	.+8      	; 0x4626 <vfprintf+0x308>
    461e:	9a 2d       	mov	r25, r10
    4620:	99 7e       	andi	r25, 0xE9	; 233
    4622:	a9 2e       	mov	r10, r25
    4624:	09 c0       	rjmp	.+18     	; 0x4638 <vfprintf+0x31a>
    4626:	a2 fe       	sbrs	r10, 2
    4628:	06 c0       	rjmp	.+12     	; 0x4636 <vfprintf+0x318>
    462a:	b3 94       	inc	r11
    462c:	b3 94       	inc	r11
    462e:	04 c0       	rjmp	.+8      	; 0x4638 <vfprintf+0x31a>
    4630:	8a 2d       	mov	r24, r10
    4632:	86 78       	andi	r24, 0x86	; 134
    4634:	09 f0       	breq	.+2      	; 0x4638 <vfprintf+0x31a>
    4636:	b3 94       	inc	r11
    4638:	a3 fc       	sbrc	r10, 3
    463a:	10 c0       	rjmp	.+32     	; 0x465c <vfprintf+0x33e>
    463c:	a0 fe       	sbrs	r10, 0
    463e:	06 c0       	rjmp	.+12     	; 0x464c <vfprintf+0x32e>
    4640:	b2 14       	cp	r11, r2
    4642:	80 f4       	brcc	.+32     	; 0x4664 <vfprintf+0x346>
    4644:	28 0c       	add	r2, r8
    4646:	92 2c       	mov	r9, r2
    4648:	9b 18       	sub	r9, r11
    464a:	0d c0       	rjmp	.+26     	; 0x4666 <vfprintf+0x348>
    464c:	b2 14       	cp	r11, r2
    464e:	58 f4       	brcc	.+22     	; 0x4666 <vfprintf+0x348>
    4650:	b6 01       	movw	r22, r12
    4652:	80 e2       	ldi	r24, 0x20	; 32
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	76 d0       	rcall	.+236    	; 0x4744 <fputc>
    4658:	b3 94       	inc	r11
    465a:	f8 cf       	rjmp	.-16     	; 0x464c <vfprintf+0x32e>
    465c:	b2 14       	cp	r11, r2
    465e:	18 f4       	brcc	.+6      	; 0x4666 <vfprintf+0x348>
    4660:	2b 18       	sub	r2, r11
    4662:	02 c0       	rjmp	.+4      	; 0x4668 <vfprintf+0x34a>
    4664:	98 2c       	mov	r9, r8
    4666:	21 2c       	mov	r2, r1
    4668:	a4 fe       	sbrs	r10, 4
    466a:	0f c0       	rjmp	.+30     	; 0x468a <vfprintf+0x36c>
    466c:	b6 01       	movw	r22, r12
    466e:	80 e3       	ldi	r24, 0x30	; 48
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	68 d0       	rcall	.+208    	; 0x4744 <fputc>
    4674:	a2 fe       	sbrs	r10, 2
    4676:	16 c0       	rjmp	.+44     	; 0x46a4 <vfprintf+0x386>
    4678:	a1 fc       	sbrc	r10, 1
    467a:	03 c0       	rjmp	.+6      	; 0x4682 <vfprintf+0x364>
    467c:	88 e7       	ldi	r24, 0x78	; 120
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	02 c0       	rjmp	.+4      	; 0x4686 <vfprintf+0x368>
    4682:	88 e5       	ldi	r24, 0x58	; 88
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	b6 01       	movw	r22, r12
    4688:	0c c0       	rjmp	.+24     	; 0x46a2 <vfprintf+0x384>
    468a:	8a 2d       	mov	r24, r10
    468c:	86 78       	andi	r24, 0x86	; 134
    468e:	51 f0       	breq	.+20     	; 0x46a4 <vfprintf+0x386>
    4690:	a1 fe       	sbrs	r10, 1
    4692:	02 c0       	rjmp	.+4      	; 0x4698 <vfprintf+0x37a>
    4694:	8b e2       	ldi	r24, 0x2B	; 43
    4696:	01 c0       	rjmp	.+2      	; 0x469a <vfprintf+0x37c>
    4698:	80 e2       	ldi	r24, 0x20	; 32
    469a:	a7 fc       	sbrc	r10, 7
    469c:	8d e2       	ldi	r24, 0x2D	; 45
    469e:	b6 01       	movw	r22, r12
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	50 d0       	rcall	.+160    	; 0x4744 <fputc>
    46a4:	89 14       	cp	r8, r9
    46a6:	30 f4       	brcc	.+12     	; 0x46b4 <vfprintf+0x396>
    46a8:	b6 01       	movw	r22, r12
    46aa:	80 e3       	ldi	r24, 0x30	; 48
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	4a d0       	rcall	.+148    	; 0x4744 <fputc>
    46b0:	9a 94       	dec	r9
    46b2:	f8 cf       	rjmp	.-16     	; 0x46a4 <vfprintf+0x386>
    46b4:	8a 94       	dec	r8
    46b6:	f3 01       	movw	r30, r6
    46b8:	e8 0d       	add	r30, r8
    46ba:	f1 1d       	adc	r31, r1
    46bc:	80 81       	ld	r24, Z
    46be:	b6 01       	movw	r22, r12
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	40 d0       	rcall	.+128    	; 0x4744 <fputc>
    46c4:	81 10       	cpse	r8, r1
    46c6:	f6 cf       	rjmp	.-20     	; 0x46b4 <vfprintf+0x396>
    46c8:	22 20       	and	r2, r2
    46ca:	09 f4       	brne	.+2      	; 0x46ce <vfprintf+0x3b0>
    46cc:	4e ce       	rjmp	.-868    	; 0x436a <vfprintf+0x4c>
    46ce:	b6 01       	movw	r22, r12
    46d0:	80 e2       	ldi	r24, 0x20	; 32
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	37 d0       	rcall	.+110    	; 0x4744 <fputc>
    46d6:	2a 94       	dec	r2
    46d8:	f7 cf       	rjmp	.-18     	; 0x46c8 <vfprintf+0x3aa>
    46da:	f6 01       	movw	r30, r12
    46dc:	86 81       	ldd	r24, Z+6	; 0x06
    46de:	97 81       	ldd	r25, Z+7	; 0x07
    46e0:	02 c0       	rjmp	.+4      	; 0x46e6 <vfprintf+0x3c8>
    46e2:	8f ef       	ldi	r24, 0xFF	; 255
    46e4:	9f ef       	ldi	r25, 0xFF	; 255
    46e6:	2b 96       	adiw	r28, 0x0b	; 11
    46e8:	0f b6       	in	r0, 0x3f	; 63
    46ea:	f8 94       	cli
    46ec:	de bf       	out	0x3e, r29	; 62
    46ee:	0f be       	out	0x3f, r0	; 63
    46f0:	cd bf       	out	0x3d, r28	; 61
    46f2:	df 91       	pop	r29
    46f4:	cf 91       	pop	r28
    46f6:	1f 91       	pop	r17
    46f8:	0f 91       	pop	r16
    46fa:	ff 90       	pop	r15
    46fc:	ef 90       	pop	r14
    46fe:	df 90       	pop	r13
    4700:	cf 90       	pop	r12
    4702:	bf 90       	pop	r11
    4704:	af 90       	pop	r10
    4706:	9f 90       	pop	r9
    4708:	8f 90       	pop	r8
    470a:	7f 90       	pop	r7
    470c:	6f 90       	pop	r6
    470e:	5f 90       	pop	r5
    4710:	4f 90       	pop	r4
    4712:	3f 90       	pop	r3
    4714:	2f 90       	pop	r2
    4716:	08 95       	ret

00004718 <strnlen_P>:
    4718:	fc 01       	movw	r30, r24
    471a:	05 90       	lpm	r0, Z+
    471c:	61 50       	subi	r22, 0x01	; 1
    471e:	70 40       	sbci	r23, 0x00	; 0
    4720:	01 10       	cpse	r0, r1
    4722:	d8 f7       	brcc	.-10     	; 0x471a <strnlen_P+0x2>
    4724:	80 95       	com	r24
    4726:	90 95       	com	r25
    4728:	8e 0f       	add	r24, r30
    472a:	9f 1f       	adc	r25, r31
    472c:	08 95       	ret

0000472e <strnlen>:
    472e:	fc 01       	movw	r30, r24
    4730:	61 50       	subi	r22, 0x01	; 1
    4732:	70 40       	sbci	r23, 0x00	; 0
    4734:	01 90       	ld	r0, Z+
    4736:	01 10       	cpse	r0, r1
    4738:	d8 f7       	brcc	.-10     	; 0x4730 <strnlen+0x2>
    473a:	80 95       	com	r24
    473c:	90 95       	com	r25
    473e:	8e 0f       	add	r24, r30
    4740:	9f 1f       	adc	r25, r31
    4742:	08 95       	ret

00004744 <fputc>:
    4744:	0f 93       	push	r16
    4746:	1f 93       	push	r17
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
    474c:	fb 01       	movw	r30, r22
    474e:	23 81       	ldd	r18, Z+3	; 0x03
    4750:	21 fd       	sbrc	r18, 1
    4752:	03 c0       	rjmp	.+6      	; 0x475a <fputc+0x16>
    4754:	8f ef       	ldi	r24, 0xFF	; 255
    4756:	9f ef       	ldi	r25, 0xFF	; 255
    4758:	2c c0       	rjmp	.+88     	; 0x47b2 <fputc+0x6e>
    475a:	22 ff       	sbrs	r18, 2
    475c:	16 c0       	rjmp	.+44     	; 0x478a <fputc+0x46>
    475e:	46 81       	ldd	r20, Z+6	; 0x06
    4760:	57 81       	ldd	r21, Z+7	; 0x07
    4762:	24 81       	ldd	r18, Z+4	; 0x04
    4764:	35 81       	ldd	r19, Z+5	; 0x05
    4766:	42 17       	cp	r20, r18
    4768:	53 07       	cpc	r21, r19
    476a:	44 f4       	brge	.+16     	; 0x477c <fputc+0x38>
    476c:	a0 81       	ld	r26, Z
    476e:	b1 81       	ldd	r27, Z+1	; 0x01
    4770:	9d 01       	movw	r18, r26
    4772:	2f 5f       	subi	r18, 0xFF	; 255
    4774:	3f 4f       	sbci	r19, 0xFF	; 255
    4776:	31 83       	std	Z+1, r19	; 0x01
    4778:	20 83       	st	Z, r18
    477a:	8c 93       	st	X, r24
    477c:	26 81       	ldd	r18, Z+6	; 0x06
    477e:	37 81       	ldd	r19, Z+7	; 0x07
    4780:	2f 5f       	subi	r18, 0xFF	; 255
    4782:	3f 4f       	sbci	r19, 0xFF	; 255
    4784:	37 83       	std	Z+7, r19	; 0x07
    4786:	26 83       	std	Z+6, r18	; 0x06
    4788:	14 c0       	rjmp	.+40     	; 0x47b2 <fputc+0x6e>
    478a:	8b 01       	movw	r16, r22
    478c:	ec 01       	movw	r28, r24
    478e:	fb 01       	movw	r30, r22
    4790:	00 84       	ldd	r0, Z+8	; 0x08
    4792:	f1 85       	ldd	r31, Z+9	; 0x09
    4794:	e0 2d       	mov	r30, r0
    4796:	19 95       	eicall
    4798:	89 2b       	or	r24, r25
    479a:	e1 f6       	brne	.-72     	; 0x4754 <fputc+0x10>
    479c:	d8 01       	movw	r26, r16
    479e:	16 96       	adiw	r26, 0x06	; 6
    47a0:	8d 91       	ld	r24, X+
    47a2:	9c 91       	ld	r25, X
    47a4:	17 97       	sbiw	r26, 0x07	; 7
    47a6:	01 96       	adiw	r24, 0x01	; 1
    47a8:	17 96       	adiw	r26, 0x07	; 7
    47aa:	9c 93       	st	X, r25
    47ac:	8e 93       	st	-X, r24
    47ae:	16 97       	sbiw	r26, 0x06	; 6
    47b0:	ce 01       	movw	r24, r28
    47b2:	df 91       	pop	r29
    47b4:	cf 91       	pop	r28
    47b6:	1f 91       	pop	r17
    47b8:	0f 91       	pop	r16
    47ba:	08 95       	ret

000047bc <__ultoa_invert>:
    47bc:	fa 01       	movw	r30, r20
    47be:	aa 27       	eor	r26, r26
    47c0:	28 30       	cpi	r18, 0x08	; 8
    47c2:	51 f1       	breq	.+84     	; 0x4818 <__ultoa_invert+0x5c>
    47c4:	20 31       	cpi	r18, 0x10	; 16
    47c6:	81 f1       	breq	.+96     	; 0x4828 <__ultoa_invert+0x6c>
    47c8:	e8 94       	clt
    47ca:	6f 93       	push	r22
    47cc:	6e 7f       	andi	r22, 0xFE	; 254
    47ce:	6e 5f       	subi	r22, 0xFE	; 254
    47d0:	7f 4f       	sbci	r23, 0xFF	; 255
    47d2:	8f 4f       	sbci	r24, 0xFF	; 255
    47d4:	9f 4f       	sbci	r25, 0xFF	; 255
    47d6:	af 4f       	sbci	r26, 0xFF	; 255
    47d8:	b1 e0       	ldi	r27, 0x01	; 1
    47da:	3e d0       	rcall	.+124    	; 0x4858 <__ultoa_invert+0x9c>
    47dc:	b4 e0       	ldi	r27, 0x04	; 4
    47de:	3c d0       	rcall	.+120    	; 0x4858 <__ultoa_invert+0x9c>
    47e0:	67 0f       	add	r22, r23
    47e2:	78 1f       	adc	r23, r24
    47e4:	89 1f       	adc	r24, r25
    47e6:	9a 1f       	adc	r25, r26
    47e8:	a1 1d       	adc	r26, r1
    47ea:	68 0f       	add	r22, r24
    47ec:	79 1f       	adc	r23, r25
    47ee:	8a 1f       	adc	r24, r26
    47f0:	91 1d       	adc	r25, r1
    47f2:	a1 1d       	adc	r26, r1
    47f4:	6a 0f       	add	r22, r26
    47f6:	71 1d       	adc	r23, r1
    47f8:	81 1d       	adc	r24, r1
    47fa:	91 1d       	adc	r25, r1
    47fc:	a1 1d       	adc	r26, r1
    47fe:	20 d0       	rcall	.+64     	; 0x4840 <__ultoa_invert+0x84>
    4800:	09 f4       	brne	.+2      	; 0x4804 <__ultoa_invert+0x48>
    4802:	68 94       	set
    4804:	3f 91       	pop	r19
    4806:	2a e0       	ldi	r18, 0x0A	; 10
    4808:	26 9f       	mul	r18, r22
    480a:	11 24       	eor	r1, r1
    480c:	30 19       	sub	r19, r0
    480e:	30 5d       	subi	r19, 0xD0	; 208
    4810:	31 93       	st	Z+, r19
    4812:	de f6       	brtc	.-74     	; 0x47ca <__ultoa_invert+0xe>
    4814:	cf 01       	movw	r24, r30
    4816:	08 95       	ret
    4818:	46 2f       	mov	r20, r22
    481a:	47 70       	andi	r20, 0x07	; 7
    481c:	40 5d       	subi	r20, 0xD0	; 208
    481e:	41 93       	st	Z+, r20
    4820:	b3 e0       	ldi	r27, 0x03	; 3
    4822:	0f d0       	rcall	.+30     	; 0x4842 <__ultoa_invert+0x86>
    4824:	c9 f7       	brne	.-14     	; 0x4818 <__ultoa_invert+0x5c>
    4826:	f6 cf       	rjmp	.-20     	; 0x4814 <__ultoa_invert+0x58>
    4828:	46 2f       	mov	r20, r22
    482a:	4f 70       	andi	r20, 0x0F	; 15
    482c:	40 5d       	subi	r20, 0xD0	; 208
    482e:	4a 33       	cpi	r20, 0x3A	; 58
    4830:	18 f0       	brcs	.+6      	; 0x4838 <__ultoa_invert+0x7c>
    4832:	49 5d       	subi	r20, 0xD9	; 217
    4834:	31 fd       	sbrc	r19, 1
    4836:	40 52       	subi	r20, 0x20	; 32
    4838:	41 93       	st	Z+, r20
    483a:	02 d0       	rcall	.+4      	; 0x4840 <__ultoa_invert+0x84>
    483c:	a9 f7       	brne	.-22     	; 0x4828 <__ultoa_invert+0x6c>
    483e:	ea cf       	rjmp	.-44     	; 0x4814 <__ultoa_invert+0x58>
    4840:	b4 e0       	ldi	r27, 0x04	; 4
    4842:	a6 95       	lsr	r26
    4844:	97 95       	ror	r25
    4846:	87 95       	ror	r24
    4848:	77 95       	ror	r23
    484a:	67 95       	ror	r22
    484c:	ba 95       	dec	r27
    484e:	c9 f7       	brne	.-14     	; 0x4842 <__ultoa_invert+0x86>
    4850:	00 97       	sbiw	r24, 0x00	; 0
    4852:	61 05       	cpc	r22, r1
    4854:	71 05       	cpc	r23, r1
    4856:	08 95       	ret
    4858:	9b 01       	movw	r18, r22
    485a:	ac 01       	movw	r20, r24
    485c:	0a 2e       	mov	r0, r26
    485e:	06 94       	lsr	r0
    4860:	57 95       	ror	r21
    4862:	47 95       	ror	r20
    4864:	37 95       	ror	r19
    4866:	27 95       	ror	r18
    4868:	ba 95       	dec	r27
    486a:	c9 f7       	brne	.-14     	; 0x485e <__ultoa_invert+0xa2>
    486c:	62 0f       	add	r22, r18
    486e:	73 1f       	adc	r23, r19
    4870:	84 1f       	adc	r24, r20
    4872:	95 1f       	adc	r25, r21
    4874:	a0 1d       	adc	r26, r0
    4876:	08 95       	ret

00004878 <_exit>:
    4878:	f8 94       	cli

0000487a <__stop_program>:
    487a:	ff cf       	rjmp	.-2      	; 0x487a <__stop_program>
