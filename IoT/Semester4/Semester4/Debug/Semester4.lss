
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800200  00003d2a  00003dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ad0  00800350  00800350  00003f0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000778  00000000  00000000  00003fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000090c8  00000000  00000000  00004724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029c3  00000000  00000000  0000d7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004cf4  00000000  00000000  000101af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000190c  00000000  00000000  00014ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002fae  00000000  00000000  000167b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b97  00000000  00000000  0001975e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  000212f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e1 c0       	rjmp	.+450    	; 0x1c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	df c0       	rjmp	.+446    	; 0x1c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	dd c0       	rjmp	.+442    	; 0x1c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	db c0       	rjmp	.+438    	; 0x1c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	d9 c0       	rjmp	.+434    	; 0x1c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	d7 c0       	rjmp	.+430    	; 0x1c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d5 c0       	rjmp	.+426    	; 0x1c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d3 c0       	rjmp	.+422    	; 0x1c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d1 c0       	rjmp	.+418    	; 0x1c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	cf c0       	rjmp	.+414    	; 0x1c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cd c0       	rjmp	.+410    	; 0x1c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c5       	rjmp	.+2724   	; 0xad6 <__vector_12>
      32:	00 00       	nop
      34:	c9 c0       	rjmp	.+402    	; 0x1c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	c7 c0       	rjmp	.+398    	; 0x1c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c5 c0       	rjmp	.+394    	; 0x1c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c3 c0       	rjmp	.+390    	; 0x1c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c1 c0       	rjmp	.+386    	; 0x1c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	bf c0       	rjmp	.+382    	; 0x1c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bd c0       	rjmp	.+378    	; 0x1c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	bb c0       	rjmp	.+374    	; 0x1c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	b9 c0       	rjmp	.+370    	; 0x1c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	b7 c0       	rjmp	.+366    	; 0x1c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b5 c0       	rjmp	.+362    	; 0x1c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b3 c0       	rjmp	.+358    	; 0x1c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__vector_25>
      68:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__vector_26>
      6c:	ad c0       	rjmp	.+346    	; 0x1c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ab c0       	rjmp	.+342    	; 0x1c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	a9 c0       	rjmp	.+338    	; 0x1c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	a7 c0       	rjmp	.+334    	; 0x1c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a5 c0       	rjmp	.+330    	; 0x1c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a3 c0       	rjmp	.+326    	; 0x1c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a1 c0       	rjmp	.+322    	; 0x1c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	9f c0       	rjmp	.+318    	; 0x1c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9d c0       	rjmp	.+314    	; 0x1c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__vector_36>
      94:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__vector_37>
      98:	97 c0       	rjmp	.+302    	; 0x1c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__vector_39>
      a0:	93 c0       	rjmp	.+294    	; 0x1c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	91 c0       	rjmp	.+290    	; 0x1c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8f c0       	rjmp	.+286    	; 0x1c8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8d c0       	rjmp	.+282    	; 0x1c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8b c0       	rjmp	.+278    	; 0x1c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	89 c0       	rjmp	.+274    	; 0x1c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	87 c0       	rjmp	.+270    	; 0x1c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	85 c0       	rjmp	.+266    	; 0x1c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	83 c0       	rjmp	.+262    	; 0x1c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	81 c0       	rjmp	.+258    	; 0x1c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7f c0       	rjmp	.+254    	; 0x1c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__vector_51>
      d0:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__vector_52>
      d4:	79 c0       	rjmp	.+242    	; 0x1c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__vector_54>
      dc:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_55>
      e0:	73 c0       	rjmp	.+230    	; 0x1c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	84 17       	cp	r24, r20
      e6:	f4 17       	cp	r31, r20
      e8:	f4 17       	cp	r31, r20
      ea:	f4 17       	cp	r31, r20
      ec:	f4 17       	cp	r31, r20
      ee:	f4 17       	cp	r31, r20
      f0:	f4 17       	cp	r31, r20
      f2:	f4 17       	cp	r31, r20
      f4:	84 17       	cp	r24, r20
      f6:	f4 17       	cp	r31, r20
      f8:	f4 17       	cp	r31, r20
      fa:	f4 17       	cp	r31, r20
      fc:	f4 17       	cp	r31, r20
      fe:	f4 17       	cp	r31, r20
     100:	f4 17       	cp	r31, r20
     102:	f4 17       	cp	r31, r20
     104:	86 17       	cp	r24, r22
     106:	f4 17       	cp	r31, r20
     108:	f4 17       	cp	r31, r20
     10a:	f4 17       	cp	r31, r20
     10c:	f4 17       	cp	r31, r20
     10e:	f4 17       	cp	r31, r20
     110:	f4 17       	cp	r31, r20
     112:	f4 17       	cp	r31, r20
     114:	f4 17       	cp	r31, r20
     116:	f4 17       	cp	r31, r20
     118:	f4 17       	cp	r31, r20
     11a:	f4 17       	cp	r31, r20
     11c:	f4 17       	cp	r31, r20
     11e:	f4 17       	cp	r31, r20
     120:	f4 17       	cp	r31, r20
     122:	f4 17       	cp	r31, r20
     124:	86 17       	cp	r24, r22
     126:	f4 17       	cp	r31, r20
     128:	f4 17       	cp	r31, r20
     12a:	f4 17       	cp	r31, r20
     12c:	f4 17       	cp	r31, r20
     12e:	f4 17       	cp	r31, r20
     130:	f4 17       	cp	r31, r20
     132:	f4 17       	cp	r31, r20
     134:	f4 17       	cp	r31, r20
     136:	f4 17       	cp	r31, r20
     138:	f4 17       	cp	r31, r20
     13a:	f4 17       	cp	r31, r20
     13c:	f4 17       	cp	r31, r20
     13e:	f4 17       	cp	r31, r20
     140:	f4 17       	cp	r31, r20
     142:	f4 17       	cp	r31, r20
     144:	f0 17       	cp	r31, r16
     146:	f4 17       	cp	r31, r20
     148:	f4 17       	cp	r31, r20
     14a:	f4 17       	cp	r31, r20
     14c:	f4 17       	cp	r31, r20
     14e:	f4 17       	cp	r31, r20
     150:	f4 17       	cp	r31, r20
     152:	f4 17       	cp	r31, r20
     154:	bb 17       	cp	r27, r27
     156:	f4 17       	cp	r31, r20
     158:	f4 17       	cp	r31, r20
     15a:	f4 17       	cp	r31, r20
     15c:	f4 17       	cp	r31, r20
     15e:	f4 17       	cp	r31, r20
     160:	f4 17       	cp	r31, r20
     162:	f4 17       	cp	r31, r20
     164:	f4 17       	cp	r31, r20
     166:	f4 17       	cp	r31, r20
     168:	f4 17       	cp	r31, r20
     16a:	f4 17       	cp	r31, r20
     16c:	f4 17       	cp	r31, r20
     16e:	f4 17       	cp	r31, r20
     170:	f4 17       	cp	r31, r20
     172:	f4 17       	cp	r31, r20
     174:	af 17       	cp	r26, r31
     176:	f4 17       	cp	r31, r20
     178:	f4 17       	cp	r31, r20
     17a:	f4 17       	cp	r31, r20
     17c:	f4 17       	cp	r31, r20
     17e:	f4 17       	cp	r31, r20
     180:	f4 17       	cp	r31, r20
     182:	f4 17       	cp	r31, r20
     184:	d3 17       	cp	r29, r19

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	13 e0       	ldi	r17, 0x03	; 3
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ea e2       	ldi	r30, 0x2A	; 42
     19e:	fd e3       	ldi	r31, 0x3D	; 61
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a0 35       	cpi	r26, 0x50	; 80
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	2e e0       	ldi	r18, 0x0E	; 14
     1b2:	a0 e5       	ldi	r26, 0x50	; 80
     1b4:	b3 e0       	ldi	r27, 0x03	; 3
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a0 32       	cpi	r26, 0x20	; 32
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	0e 94 4d 11 	call	0x229a	; 0x229a <main>
     1c4:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <_exit>

000001c8 <__bad_interrupt>:
     1c8:	1b cf       	rjmp	.-458    	; 0x0 <__vectors>

000001ca <myCo2CallBack>:
		
		
	}
}
void myCo2CallBack(uint16_t ppm)
{
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	1f 92       	push	r1
     1da:	1f 92       	push	r1
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	9a 83       	std	Y+2, r25	; 0x02
     1e2:	89 83       	std	Y+1, r24	; 0x01
		EventBits_t dataEventBits = xEventGroupWaitBits
     1e4:	cc 24       	eor	r12, r12
     1e6:	ca 94       	dec	r12
     1e8:	dc 2c       	mov	r13, r12
     1ea:	76 01       	movw	r14, r12
     1ec:	01 e0       	ldi	r16, 0x01	; 1
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	42 e0       	ldi	r20, 0x02	; 2
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	80 91 0d 0e 	lds	r24, 0x0E0D	; 0x800e0d <dataEventGroup>
     1fc:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <dataEventGroup+0x1>
     200:	95 d0       	rcall	.+298    	; 0x32c <xEventGroupWaitBits>
		(dataEventGroup,BIT_HUMIDITY_TEMPERATURE,pdFALSE,pdTRUE,portMAX_DELAY);
		//printf("Now it is in callBack\n");
		if(dataEventBits==2)
     202:	62 30       	cpi	r22, 0x02	; 2
     204:	71 05       	cpc	r23, r1
     206:	81 05       	cpc	r24, r1
     208:	91 05       	cpc	r25, r1
     20a:	d1 f4       	brne	.+52     	; 0x240 <myCo2CallBack+0x76>
		{
		printf("CO2 level: %d/n",ppm);
     20c:	8a 81       	ldd	r24, Y+2	; 0x02
     20e:	8f 93       	push	r24
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	8f 93       	push	r24
     214:	8e e4       	ldi	r24, 0x4E	; 78
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	9f 93       	push	r25
     21a:	8f 93       	push	r24
     21c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <printf>
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	2f ef       	ldi	r18, 0xFF	; 255
     224:	3f ef       	ldi	r19, 0xFF	; 255
     226:	a9 01       	movw	r20, r18
     228:	be 01       	movw	r22, r28
     22a:	6f 5f       	subi	r22, 0xFF	; 255
     22c:	7f 4f       	sbci	r23, 0xFF	; 255
     22e:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <sensorDataQueue>
     232:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <sensorDataQueue+0x1>
     236:	84 d5       	rcall	.+2824   	; 0xd40 <xQueueGenericSend>
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
		}
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 91 0d 0e 	lds	r24, 0x0E0D	; 0x800e0d <dataEventGroup>
     24c:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <dataEventGroup+0x1>
     250:	0d d1       	rcall	.+538    	; 0x46c <xEventGroupSetBits>

}
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	08 95       	ret

00000266 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	0e 94 4d 12 	call	0x249a	; 0x249a <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
     26c:	85 ee       	ldi	r24, 0xE5	; 229
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <mh_z19_injectCallBack>
     274:	08 95       	ret

00000276 <measureCO2>:
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     276:	0e 94 77 12 	call	0x24ee	; 0x24ee <mh_z19_takeMeassuring>
     27a:	80 93 11 0e 	sts	0x0E11, r24	; 0x800e11 <rc>
	if (rc != MHZ19_OK)
     27e:	88 23       	and	r24, r24
     280:	21 f0       	breq	.+8      	; 0x28a <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     282:	8e e5       	ldi	r24, 0x5E	; 94
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <puts>
     28a:	08 95       	ret

0000028c <CO2Task>:
void CO2Task()
{
	while(1)
	{

		measureCO2();
     28c:	f4 df       	rcall	.-24     	; 0x276 <measureCO2>
		//printf("Measured\n");
		vTaskDelay(30);
     28e:	6e e1       	ldi	r22, 0x1E	; 30
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 05 0c 	call	0x180a	; 0x180a <vTaskDelay>
     29a:	f8 cf       	rjmp	.-16     	; 0x28c <CO2Task>

0000029c <createCO2Task>:
		}
		xEventGroupSetBits(dataEventGroup,BIT_CO2);

}
void createCO2Task(void *pvpParameter)
{
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
			
			xTaskCreate(
     2a2:	e1 2c       	mov	r14, r1
     2a4:	f1 2c       	mov	r15, r1
     2a6:	01 e0       	ldi	r16, 0x01	; 1
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 ec       	ldi	r20, 0xC0	; 192
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	65 e7       	ldi	r22, 0x75	; 117
     2b2:	72 e0       	ldi	r23, 0x02	; 2
     2b4:	86 e4       	ldi	r24, 0x46	; 70
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 af 09 	call	0x135e	; 0x135e <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	08 95       	ret

000002c4 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     2c4:	0f 93       	push	r16
     2c6:	01 11       	cpse	r16, r1
     2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <prvTestWaitCondition+0x1e>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	82 23       	and	r24, r18
     2d0:	93 23       	and	r25, r19
     2d2:	a4 23       	and	r26, r20
     2d4:	b5 23       	and	r27, r21
     2d6:	89 2b       	or	r24, r25
     2d8:	8a 2b       	or	r24, r26
     2da:	8b 2b       	or	r24, r27
     2dc:	79 f4       	brne	.+30     	; 0x2fc <prvTestWaitCondition+0x38>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	10 c0       	rjmp	.+32     	; 0x302 <prvTestWaitCondition+0x3e>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	82 23       	and	r24, r18
     2e8:	93 23       	and	r25, r19
     2ea:	a4 23       	and	r26, r20
     2ec:	b5 23       	and	r27, r21
     2ee:	28 17       	cp	r18, r24
     2f0:	39 07       	cpc	r19, r25
     2f2:	4a 07       	cpc	r20, r26
     2f4:	5b 07       	cpc	r21, r27
     2f6:	21 f0       	breq	.+8      	; 0x300 <prvTestWaitCondition+0x3c>
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	03 c0       	rjmp	.+6      	; 0x302 <prvTestWaitCondition+0x3e>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <prvTestWaitCondition+0x3e>
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <xEventGroupCreate>:
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	ae d1       	rcall	.+860    	; 0x66c <pvPortMalloc>
     310:	ec 01       	movw	r28, r24
     312:	00 97       	sbiw	r24, 0x00	; 0
     314:	39 f0       	breq	.+14     	; 0x324 <xEventGroupCreate+0x1e>
     316:	fc 01       	movw	r30, r24
     318:	11 92       	st	Z+, r1
     31a:	11 92       	st	Z+, r1
     31c:	11 92       	st	Z+, r1
     31e:	11 92       	st	Z+, r1
     320:	cf 01       	movw	r24, r30
     322:	86 d2       	rcall	.+1292   	; 0x830 <vListInitialise>
     324:	ce 01       	movw	r24, r28
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <xEventGroupWaitBits>:
     32c:	2f 92       	push	r2
     32e:	3f 92       	push	r3
     330:	4f 92       	push	r4
     332:	5f 92       	push	r5
     334:	6f 92       	push	r6
     336:	7f 92       	push	r7
     338:	8f 92       	push	r8
     33a:	9f 92       	push	r9
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ec 01       	movw	r28, r24
     352:	4a 01       	movw	r8, r20
     354:	5b 01       	movw	r10, r22
     356:	62 2e       	mov	r6, r18
     358:	70 2e       	mov	r7, r16
     35a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <vTaskSuspendAll>
     35e:	28 80       	ld	r2, Y
     360:	39 80       	ldd	r3, Y+1	; 0x01
     362:	4a 80       	ldd	r4, Y+2	; 0x02
     364:	5b 80       	ldd	r5, Y+3	; 0x03
     366:	a5 01       	movw	r20, r10
     368:	94 01       	movw	r18, r8
     36a:	c2 01       	movw	r24, r4
     36c:	b1 01       	movw	r22, r2
     36e:	aa df       	rcall	.-172    	; 0x2c4 <prvTestWaitCondition>
     370:	88 23       	and	r24, r24
     372:	a1 f0       	breq	.+40     	; 0x39c <xEventGroupWaitBits+0x70>
     374:	66 20       	and	r6, r6
     376:	89 f1       	breq	.+98     	; 0x3da <xEventGroupWaitBits+0xae>
     378:	d5 01       	movw	r26, r10
     37a:	c4 01       	movw	r24, r8
     37c:	80 95       	com	r24
     37e:	90 95       	com	r25
     380:	a0 95       	com	r26
     382:	b0 95       	com	r27
     384:	82 21       	and	r24, r2
     386:	93 21       	and	r25, r3
     388:	a4 21       	and	r26, r4
     38a:	b5 21       	and	r27, r5
     38c:	88 83       	st	Y, r24
     38e:	99 83       	std	Y+1, r25	; 0x01
     390:	aa 83       	std	Y+2, r26	; 0x02
     392:	bb 83       	std	Y+3, r27	; 0x03
     394:	c1 2c       	mov	r12, r1
     396:	d1 2c       	mov	r13, r1
     398:	76 01       	movw	r14, r12
     39a:	22 c0       	rjmp	.+68     	; 0x3e0 <xEventGroupWaitBits+0xb4>
     39c:	c1 14       	cp	r12, r1
     39e:	d1 04       	cpc	r13, r1
     3a0:	e1 04       	cpc	r14, r1
     3a2:	f1 04       	cpc	r15, r1
     3a4:	e9 f0       	breq	.+58     	; 0x3e0 <xEventGroupWaitBits+0xb4>
     3a6:	61 10       	cpse	r6, r1
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <xEventGroupWaitBits+0x86>
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	ba 01       	movw	r22, r20
     3b0:	04 c0       	rjmp	.+8      	; 0x3ba <xEventGroupWaitBits+0x8e>
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	71 10       	cpse	r7, r1
     3bc:	74 60       	ori	r23, 0x04	; 4
     3be:	48 29       	or	r20, r8
     3c0:	59 29       	or	r21, r9
     3c2:	6a 29       	or	r22, r10
     3c4:	7b 29       	or	r23, r11
     3c6:	97 01       	movw	r18, r14
     3c8:	86 01       	movw	r16, r12
     3ca:	ce 01       	movw	r24, r28
     3cc:	04 96       	adiw	r24, 0x04	; 4
     3ce:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vTaskPlaceOnUnorderedEventList>
     3d2:	21 2c       	mov	r2, r1
     3d4:	31 2c       	mov	r3, r1
     3d6:	21 01       	movw	r4, r2
     3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <xEventGroupWaitBits+0xb4>
     3da:	c1 2c       	mov	r12, r1
     3dc:	d1 2c       	mov	r13, r1
     3de:	76 01       	movw	r14, r12
     3e0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <xTaskResumeAll>
     3e4:	cd 28       	or	r12, r13
     3e6:	ce 28       	or	r12, r14
     3e8:	cf 28       	or	r12, r15
     3ea:	59 f1       	breq	.+86     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3ec:	81 11       	cpse	r24, r1
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <xEventGroupWaitBits+0xc6>
     3f0:	af d2       	rcall	.+1374   	; 0x950 <vPortYield>
     3f2:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uxTaskResetEventItemValue>
     3f6:	6b 01       	movw	r12, r22
     3f8:	7c 01       	movw	r14, r24
     3fa:	91 fd       	sbrc	r25, 1
     3fc:	1f c0       	rjmp	.+62     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	0f 92       	push	r0
     404:	c8 80       	ld	r12, Y
     406:	d9 80       	ldd	r13, Y+1	; 0x01
     408:	ea 80       	ldd	r14, Y+2	; 0x02
     40a:	fb 80       	ldd	r15, Y+3	; 0x03
     40c:	07 2d       	mov	r16, r7
     40e:	a5 01       	movw	r20, r10
     410:	94 01       	movw	r18, r8
     412:	c7 01       	movw	r24, r14
     414:	b6 01       	movw	r22, r12
     416:	56 df       	rcall	.-340    	; 0x2c4 <prvTestWaitCondition>
     418:	88 23       	and	r24, r24
     41a:	71 f0       	breq	.+28     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     41c:	66 20       	and	r6, r6
     41e:	61 f0       	breq	.+24     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     420:	80 94       	com	r8
     422:	90 94       	com	r9
     424:	a0 94       	com	r10
     426:	b0 94       	com	r11
     428:	8c 20       	and	r8, r12
     42a:	9d 20       	and	r9, r13
     42c:	ae 20       	and	r10, r14
     42e:	bf 20       	and	r11, r15
     430:	88 82       	st	Y, r8
     432:	99 82       	std	Y+1, r9	; 0x01
     434:	aa 82       	std	Y+2, r10	; 0x02
     436:	bb 82       	std	Y+3, r11	; 0x03
     438:	0f 90       	pop	r0
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	16 01       	movw	r2, r12
     43e:	27 01       	movw	r4, r14
     440:	55 24       	eor	r5, r5
     442:	c2 01       	movw	r24, r4
     444:	b1 01       	movw	r22, r2
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	bf 90       	pop	r11
     458:	af 90       	pop	r10
     45a:	9f 90       	pop	r9
     45c:	8f 90       	pop	r8
     45e:	7f 90       	pop	r7
     460:	6f 90       	pop	r6
     462:	5f 90       	pop	r5
     464:	4f 90       	pop	r4
     466:	3f 90       	pop	r3
     468:	2f 90       	pop	r2
     46a:	08 95       	ret

0000046c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     46c:	4f 92       	push	r4
     46e:	5f 92       	push	r5
     470:	6f 92       	push	r6
     472:	7f 92       	push	r7
     474:	af 92       	push	r10
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	ec 01       	movw	r28, r24
     48a:	6a 01       	movw	r12, r20
     48c:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     48e:	8c 01       	movw	r16, r24
     490:	09 5f       	subi	r16, 0xF9	; 249
     492:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     494:	ad d7       	rcall	.+3930   	; 0x13f0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     496:	eb 85       	ldd	r30, Y+11	; 0x0b
     498:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     49a:	88 81       	ld	r24, Y
     49c:	99 81       	ldd	r25, Y+1	; 0x01
     49e:	aa 81       	ldd	r26, Y+2	; 0x02
     4a0:	bb 81       	ldd	r27, Y+3	; 0x03
     4a2:	c8 2a       	or	r12, r24
     4a4:	d9 2a       	or	r13, r25
     4a6:	ea 2a       	or	r14, r26
     4a8:	fb 2a       	or	r15, r27
     4aa:	c8 82       	st	Y, r12
     4ac:	d9 82       	std	Y+1, r13	; 0x01
     4ae:	ea 82       	std	Y+2, r14	; 0x02
     4b0:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     4b2:	c1 2c       	mov	r12, r1
     4b4:	d1 2c       	mov	r13, r1
     4b6:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     4b8:	3d c0       	rjmp	.+122    	; 0x534 <xEventGroupSetBits+0xc8>
        {
            pxNext = listGET_NEXT( pxListItem );
     4ba:	a4 80       	ldd	r10, Z+4	; 0x04
     4bc:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     4be:	80 81       	ld	r24, Z
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
     4c2:	a2 81       	ldd	r26, Z+2	; 0x02
     4c4:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     4c6:	ac 01       	movw	r20, r24
     4c8:	bd 01       	movw	r22, r26
     4ca:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     4cc:	b2 fd       	sbrc	r27, 2
     4ce:	0e c0       	rjmp	.+28     	; 0x4ec <xEventGroupSetBits+0x80>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     4d0:	48 80       	ld	r4, Y
     4d2:	59 80       	ldd	r5, Y+1	; 0x01
     4d4:	6a 80       	ldd	r6, Y+2	; 0x02
     4d6:	7b 80       	ldd	r7, Y+3	; 0x03
     4d8:	44 22       	and	r4, r20
     4da:	55 22       	and	r5, r21
     4dc:	66 22       	and	r6, r22
     4de:	77 22       	and	r7, r23
     4e0:	45 28       	or	r4, r5
     4e2:	46 28       	or	r4, r6
     4e4:	47 28       	or	r4, r7
     4e6:	89 f4       	brne	.+34     	; 0x50a <xEventGroupSetBits+0x9e>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	12 c0       	rjmp	.+36     	; 0x510 <xEventGroupSetBits+0xa4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     4ec:	48 80       	ld	r4, Y
     4ee:	59 80       	ldd	r5, Y+1	; 0x01
     4f0:	6a 80       	ldd	r6, Y+2	; 0x02
     4f2:	7b 80       	ldd	r7, Y+3	; 0x03
     4f4:	44 22       	and	r4, r20
     4f6:	55 22       	and	r5, r21
     4f8:	66 22       	and	r6, r22
     4fa:	77 22       	and	r7, r23
     4fc:	44 15       	cp	r20, r4
     4fe:	55 05       	cpc	r21, r5
     500:	66 05       	cpc	r22, r6
     502:	77 05       	cpc	r23, r7
     504:	21 f0       	breq	.+8      	; 0x50e <xEventGroupSetBits+0xa2>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	03 c0       	rjmp	.+6      	; 0x510 <xEventGroupSetBits+0xa4>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     50a:	21 e0       	ldi	r18, 0x01	; 1
     50c:	01 c0       	rjmp	.+2      	; 0x510 <xEventGroupSetBits+0xa4>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     50e:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     510:	22 23       	and	r18, r18
     512:	71 f0       	breq	.+28     	; 0x530 <xEventGroupSetBits+0xc4>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     514:	b0 ff       	sbrs	r27, 0
     516:	04 c0       	rjmp	.+8      	; 0x520 <xEventGroupSetBits+0xb4>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     518:	c4 2a       	or	r12, r20
     51a:	d5 2a       	or	r13, r21
     51c:	e6 2a       	or	r14, r22
     51e:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     520:	48 81       	ld	r20, Y
     522:	59 81       	ldd	r21, Y+1	; 0x01
     524:	6a 81       	ldd	r22, Y+2	; 0x02
     526:	7b 81       	ldd	r23, Y+3	; 0x03
     528:	72 60       	ori	r23, 0x02	; 2
     52a:	cf 01       	movw	r24, r30
     52c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     530:	ea 2d       	mov	r30, r10
     532:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     534:	e0 17       	cp	r30, r16
     536:	f1 07       	cpc	r31, r17
     538:	09 f0       	breq	.+2      	; 0x53c <xEventGroupSetBits+0xd0>
     53a:	bf cf       	rjmp	.-130    	; 0x4ba <xEventGroupSetBits+0x4e>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     53c:	c0 94       	com	r12
     53e:	d0 94       	com	r13
     540:	e0 94       	com	r14
     542:	f0 94       	com	r15
     544:	88 81       	ld	r24, Y
     546:	99 81       	ldd	r25, Y+1	; 0x01
     548:	aa 81       	ldd	r26, Y+2	; 0x02
     54a:	bb 81       	ldd	r27, Y+3	; 0x03
     54c:	c8 22       	and	r12, r24
     54e:	d9 22       	and	r13, r25
     550:	ea 22       	and	r14, r26
     552:	fb 22       	and	r15, r27
     554:	c8 82       	st	Y, r12
     556:	d9 82       	std	Y+1, r13	; 0x01
     558:	ea 82       	std	Y+2, r14	; 0x02
     55a:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     55c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     560:	68 81       	ld	r22, Y
     562:	79 81       	ldd	r23, Y+1	; 0x01
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	9b 81       	ldd	r25, Y+3	; 0x03
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	bf 90       	pop	r11
     57a:	af 90       	pop	r10
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	5f 90       	pop	r5
     582:	4f 90       	pop	r4
     584:	08 95       	ret

00000586 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     586:	ec e5       	ldi	r30, 0x5C	; 92
     588:	f3 e0       	ldi	r31, 0x03	; 3
     58a:	a0 e6       	ldi	r26, 0x60	; 96
     58c:	b3 e0       	ldi	r27, 0x03	; 3
     58e:	b1 83       	std	Z+1, r27	; 0x01
     590:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     592:	13 82       	std	Z+3, r1	; 0x03
     594:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     596:	e0 e2       	ldi	r30, 0x20	; 32
     598:	fd e0       	ldi	r31, 0x0D	; 13
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     59a:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <pxEnd+0x1>
     59e:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <pxEnd>
    pxEnd->xBlockSize = 0;
     5a2:	13 82       	std	Z+3, r1	; 0x03
     5a4:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     5a6:	11 82       	std	Z+1, r1	; 0x01
     5a8:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     5aa:	80 ec       	ldi	r24, 0xC0	; 192
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	9c 93       	st	X, r25
     5b2:	8e 93       	st	-X, r24
     5b4:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     5b6:	ed 93       	st	X+, r30
     5b8:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5ba:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <xMinimumEverFreeBytesRemaining+0x1>
     5be:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5c2:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <xFreeBytesRemaining+0x1>
     5c6:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e8       	ldi	r25, 0x80	; 128
     5ce:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <__data_end+0x1>
     5d2:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <__data_end>
     5d6:	08 95       	ret

000005d8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     5de:	ac e5       	ldi	r26, 0x5C	; 92
     5e0:	b3 e0       	ldi	r27, 0x03	; 3
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <prvInsertBlockIntoFreeList+0xe>
     5e4:	df 01       	movw	r26, r30
     5e6:	ed 91       	ld	r30, X+
     5e8:	fc 91       	ld	r31, X
     5ea:	11 97       	sbiw	r26, 0x01	; 1
     5ec:	ec 17       	cp	r30, r28
     5ee:	fd 07       	cpc	r31, r29
     5f0:	c8 f3       	brcs	.-14     	; 0x5e4 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	8d 91       	ld	r24, X+
     5f6:	9c 91       	ld	r25, X
     5f8:	13 97       	sbiw	r26, 0x03	; 3
     5fa:	9d 01       	movw	r18, r26
     5fc:	28 0f       	add	r18, r24
     5fe:	39 1f       	adc	r19, r25
     600:	c2 17       	cp	r28, r18
     602:	d3 07       	cpc	r29, r19
     604:	49 f4       	brne	.+18     	; 0x618 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     606:	2a 81       	ldd	r18, Y+2	; 0x02
     608:	3b 81       	ldd	r19, Y+3	; 0x03
     60a:	82 0f       	add	r24, r18
     60c:	93 1f       	adc	r25, r19
     60e:	13 96       	adiw	r26, 0x03	; 3
     610:	9c 93       	st	X, r25
     612:	8e 93       	st	-X, r24
     614:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     616:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	9b 81       	ldd	r25, Y+3	; 0x03
     61c:	9e 01       	movw	r18, r28
     61e:	28 0f       	add	r18, r24
     620:	39 1f       	adc	r19, r25
     622:	e2 17       	cp	r30, r18
     624:	f3 07       	cpc	r31, r19
     626:	c1 f4       	brne	.+48     	; 0x658 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     628:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <pxEnd>
     62c:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <pxEnd+0x1>
     630:	e2 17       	cp	r30, r18
     632:	f3 07       	cpc	r31, r19
     634:	71 f0       	breq	.+28     	; 0x652 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     636:	22 81       	ldd	r18, Z+2	; 0x02
     638:	33 81       	ldd	r19, Z+3	; 0x03
     63a:	82 0f       	add	r24, r18
     63c:	93 1f       	adc	r25, r19
     63e:	9b 83       	std	Y+3, r25	; 0x03
     640:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     642:	ed 91       	ld	r30, X+
     644:	fc 91       	ld	r31, X
     646:	11 97       	sbiw	r26, 0x01	; 1
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	99 83       	std	Y+1, r25	; 0x01
     64e:	88 83       	st	Y, r24
     650:	05 c0       	rjmp	.+10     	; 0x65c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     652:	39 83       	std	Y+1, r19	; 0x01
     654:	28 83       	st	Y, r18
     656:	02 c0       	rjmp	.+4      	; 0x65c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     658:	f9 83       	std	Y+1, r31	; 0x01
     65a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     65c:	ca 17       	cp	r28, r26
     65e:	db 07       	cpc	r29, r27
     660:	11 f0       	breq	.+4      	; 0x666 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     662:	cd 93       	st	X+, r28
     664:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     67a:	ba d6       	rcall	.+3444   	; 0x13f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     67c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <pxEnd>
     680:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <pxEnd+0x1>
     684:	89 2b       	or	r24, r25
        {
            prvHeapInit();
     686:	09 f4       	brne	.+2      	; 0x68a <pvPortMalloc+0x1e>
     688:	7e df       	rcall	.-260    	; 0x586 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     68a:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__data_end>
     68e:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__data_end+0x1>
     692:	80 23       	and	r24, r16
     694:	91 23       	and	r25, r17
     696:	89 2b       	or	r24, r25
     698:	09 f0       	breq	.+2      	; 0x69c <pvPortMalloc+0x30>
     69a:	76 c0       	rjmp	.+236    	; 0x788 <pvPortMalloc+0x11c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     69c:	01 15       	cp	r16, r1
     69e:	11 05       	cpc	r17, r1
     6a0:	49 f0       	breq	.+18     	; 0x6b4 <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     6a2:	c8 01       	movw	r24, r16
     6a4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     6a6:	08 17       	cp	r16, r24
     6a8:	19 07       	cpc	r17, r25
     6aa:	18 f0       	brcs	.+6      	; 0x6b2 <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     6ac:	00 e0       	ldi	r16, 0x00	; 0
     6ae:	10 e0       	ldi	r17, 0x00	; 0
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     6b2:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     6b4:	01 15       	cp	r16, r1
     6b6:	11 05       	cpc	r17, r1
     6b8:	09 f4       	brne	.+2      	; 0x6bc <pvPortMalloc+0x50>
     6ba:	69 c0       	rjmp	.+210    	; 0x78e <pvPortMalloc+0x122>
     6bc:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <xFreeBytesRemaining>
     6c0:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <xFreeBytesRemaining+0x1>
     6c4:	80 17       	cp	r24, r16
     6c6:	91 07       	cpc	r25, r17
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <pvPortMalloc+0x60>
     6ca:	64 c0       	rjmp	.+200    	; 0x794 <pvPortMalloc+0x128>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     6cc:	c0 91 5c 03 	lds	r28, 0x035C	; 0x80035c <xStart>
     6d0:	d0 91 5d 03 	lds	r29, 0x035D	; 0x80035d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     6d4:	ec e5       	ldi	r30, 0x5C	; 92
     6d6:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     6da:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     6dc:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	9b 81       	ldd	r25, Y+3	; 0x03
     6e2:	80 17       	cp	r24, r16
     6e4:	91 07       	cpc	r25, r17
     6e6:	20 f4       	brcc	.+8      	; 0x6f0 <pvPortMalloc+0x84>
     6e8:	88 81       	ld	r24, Y
     6ea:	99 81       	ldd	r25, Y+1	; 0x01
     6ec:	00 97       	sbiw	r24, 0x00	; 0
     6ee:	a9 f7       	brne	.-22     	; 0x6da <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     6f0:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <pxEnd>
     6f4:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <pxEnd+0x1>
     6f8:	c8 17       	cp	r28, r24
     6fa:	d9 07       	cpc	r29, r25
     6fc:	09 f4       	brne	.+2      	; 0x700 <pvPortMalloc+0x94>
     6fe:	4d c0       	rjmp	.+154    	; 0x79a <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     700:	e0 80       	ld	r14, Z
     702:	f1 80       	ldd	r15, Z+1	; 0x01
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	e8 0e       	add	r14, r24
     708:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     70a:	88 81       	ld	r24, Y
     70c:	99 81       	ldd	r25, Y+1	; 0x01
     70e:	91 83       	std	Z+1, r25	; 0x01
     710:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     712:	2a 81       	ldd	r18, Y+2	; 0x02
     714:	3b 81       	ldd	r19, Y+3	; 0x03
     716:	20 1b       	sub	r18, r16
     718:	31 0b       	sbc	r19, r17
     71a:	29 30       	cpi	r18, 0x09	; 9
     71c:	31 05       	cpc	r19, r1
     71e:	48 f0       	brcs	.+18     	; 0x732 <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     720:	ce 01       	movw	r24, r28
     722:	80 0f       	add	r24, r16
     724:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     726:	fc 01       	movw	r30, r24
     728:	33 83       	std	Z+3, r19	; 0x03
     72a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     72c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     72e:	0a 83       	std	Y+2, r16	; 0x02
     730:	53 df       	rcall	.-346    	; 0x5d8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     732:	2a 81       	ldd	r18, Y+2	; 0x02
     734:	3b 81       	ldd	r19, Y+3	; 0x03
     736:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <xFreeBytesRemaining>
     73a:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <xFreeBytesRemaining+0x1>
     73e:	82 1b       	sub	r24, r18
     740:	93 0b       	sbc	r25, r19
     742:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <xFreeBytesRemaining+0x1>
     746:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     74a:	40 91 56 03 	lds	r20, 0x0356	; 0x800356 <xMinimumEverFreeBytesRemaining>
     74e:	50 91 57 03 	lds	r21, 0x0357	; 0x800357 <xMinimumEverFreeBytesRemaining+0x1>
     752:	84 17       	cp	r24, r20
     754:	95 07       	cpc	r25, r21
     756:	20 f4       	brcc	.+8      	; 0x760 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     758:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <xMinimumEverFreeBytesRemaining+0x1>
     75c:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     760:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__data_end>
     764:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__data_end+0x1>
     768:	28 2b       	or	r18, r24
     76a:	39 2b       	or	r19, r25
     76c:	3b 83       	std	Y+3, r19	; 0x03
     76e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     770:	19 82       	std	Y+1, r1	; 0x01
     772:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     774:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <xNumberOfSuccessfulAllocations>
     778:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <xNumberOfSuccessfulAllocations+0x1>
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <xNumberOfSuccessfulAllocations+0x1>
     782:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <xNumberOfSuccessfulAllocations>
     786:	0b c0       	rjmp	.+22     	; 0x79e <pvPortMalloc+0x132>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     788:	e1 2c       	mov	r14, r1
     78a:	f1 2c       	mov	r15, r1
     78c:	08 c0       	rjmp	.+16     	; 0x79e <pvPortMalloc+0x132>
     78e:	e1 2c       	mov	r14, r1
     790:	f1 2c       	mov	r15, r1
     792:	05 c0       	rjmp	.+10     	; 0x79e <pvPortMalloc+0x132>
     794:	e1 2c       	mov	r14, r1
     796:	f1 2c       	mov	r15, r1
     798:	02 c0       	rjmp	.+4      	; 0x79e <pvPortMalloc+0x132>
     79a:	e1 2c       	mov	r14, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     79c:	f1 2c       	mov	r15, r1
     79e:	5a d7       	rcall	.+3764   	; 0x1654 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     7a0:	e1 14       	cp	r14, r1
     7a2:	f1 04       	cpc	r15, r1
     7a4:	11 f4       	brne	.+4      	; 0x7aa <pvPortMalloc+0x13e>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     7a6:	0e 94 38 10 	call	0x2070	; 0x2070 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     7aa:	c7 01       	movw	r24, r14
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	08 95       	ret

000007ba <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     7c2:	00 97       	sbiw	r24, 0x00	; 0
     7c4:	81 f1       	breq	.+96     	; 0x826 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     7c6:	ec 01       	movw	r28, r24
     7c8:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     7ca:	4a 81       	ldd	r20, Y+2	; 0x02
     7cc:	5b 81       	ldd	r21, Y+3	; 0x03
     7ce:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__data_end>
     7d2:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__data_end+0x1>
     7d6:	ba 01       	movw	r22, r20
     7d8:	62 23       	and	r22, r18
     7da:	73 23       	and	r23, r19
     7dc:	67 2b       	or	r22, r23
     7de:	19 f1       	breq	.+70     	; 0x826 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     7e0:	68 81       	ld	r22, Y
     7e2:	79 81       	ldd	r23, Y+1	; 0x01
     7e4:	67 2b       	or	r22, r23
     7e6:	f9 f4       	brne	.+62     	; 0x826 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     7e8:	20 95       	com	r18
     7ea:	30 95       	com	r19
     7ec:	24 23       	and	r18, r20
     7ee:	35 23       	and	r19, r21
     7f0:	3b 83       	std	Y+3, r19	; 0x03
     7f2:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     7f4:	fd d5       	rcall	.+3066   	; 0x13f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	9b 81       	ldd	r25, Y+3	; 0x03
     7fa:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <xFreeBytesRemaining>
     7fe:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <xFreeBytesRemaining+0x1>
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <xFreeBytesRemaining+0x1>
     80a:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     80e:	ce 01       	movw	r24, r28
     810:	e3 de       	rcall	.-570    	; 0x5d8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     812:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <xNumberOfSuccessfulFrees>
     816:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <xNumberOfSuccessfulFrees+0x1>
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <xNumberOfSuccessfulFrees+0x1>
     820:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     824:	17 d7       	rcall	.+3630   	; 0x1654 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     830:	fc 01       	movw	r30, r24
     832:	03 96       	adiw	r24, 0x03	; 3
     834:	92 83       	std	Z+2, r25	; 0x02
     836:	81 83       	std	Z+1, r24	; 0x01
     838:	4f ef       	ldi	r20, 0xFF	; 255
     83a:	5f ef       	ldi	r21, 0xFF	; 255
     83c:	ba 01       	movw	r22, r20
     83e:	43 83       	std	Z+3, r20	; 0x03
     840:	54 83       	std	Z+4, r21	; 0x04
     842:	65 83       	std	Z+5, r22	; 0x05
     844:	76 83       	std	Z+6, r23	; 0x06
     846:	90 87       	std	Z+8, r25	; 0x08
     848:	87 83       	std	Z+7, r24	; 0x07
     84a:	92 87       	std	Z+10, r25	; 0x0a
     84c:	81 87       	std	Z+9, r24	; 0x09
     84e:	10 82       	st	Z, r1
     850:	08 95       	ret

00000852 <vListInitialiseItem>:
     852:	fc 01       	movw	r30, r24
     854:	13 86       	std	Z+11, r1	; 0x0b
     856:	12 86       	std	Z+10, r1	; 0x0a
     858:	08 95       	ret

0000085a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     864:	08 81       	ld	r16, Y
     866:	19 81       	ldd	r17, Y+1	; 0x01
     868:	2a 81       	ldd	r18, Y+2	; 0x02
     86a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     86c:	0f 3f       	cpi	r16, 0xFF	; 255
     86e:	4f ef       	ldi	r20, 0xFF	; 255
     870:	14 07       	cpc	r17, r20
     872:	24 07       	cpc	r18, r20
     874:	34 07       	cpc	r19, r20
     876:	21 f4       	brne	.+8      	; 0x880 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     878:	fc 01       	movw	r30, r24
     87a:	a1 85       	ldd	r26, Z+9	; 0x09
     87c:	b2 85       	ldd	r27, Z+10	; 0x0a
     87e:	11 c0       	rjmp	.+34     	; 0x8a2 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     880:	dc 01       	movw	r26, r24
     882:	13 96       	adiw	r26, 0x03	; 3
     884:	01 c0       	rjmp	.+2      	; 0x888 <vListInsert+0x2e>
     886:	df 01       	movw	r26, r30
     888:	14 96       	adiw	r26, 0x04	; 4
     88a:	ed 91       	ld	r30, X+
     88c:	fc 91       	ld	r31, X
     88e:	15 97       	sbiw	r26, 0x05	; 5
     890:	40 81       	ld	r20, Z
     892:	51 81       	ldd	r21, Z+1	; 0x01
     894:	62 81       	ldd	r22, Z+2	; 0x02
     896:	73 81       	ldd	r23, Z+3	; 0x03
     898:	04 17       	cp	r16, r20
     89a:	15 07       	cpc	r17, r21
     89c:	26 07       	cpc	r18, r22
     89e:	37 07       	cpc	r19, r23
     8a0:	90 f7       	brcc	.-28     	; 0x886 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     8a2:	14 96       	adiw	r26, 0x04	; 4
     8a4:	ed 91       	ld	r30, X+
     8a6:	fc 91       	ld	r31, X
     8a8:	15 97       	sbiw	r26, 0x05	; 5
     8aa:	fd 83       	std	Y+5, r31	; 0x05
     8ac:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     8ae:	d7 83       	std	Z+7, r29	; 0x07
     8b0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     8b2:	bf 83       	std	Y+7, r27	; 0x07
     8b4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     8b6:	15 96       	adiw	r26, 0x05	; 5
     8b8:	dc 93       	st	X, r29
     8ba:	ce 93       	st	-X, r28
     8bc:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     8be:	9b 87       	std	Y+11, r25	; 0x0b
     8c0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 81       	ld	r18, Z
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	20 83       	st	Z, r18
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	08 95       	ret

000008d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     8da:	a2 85       	ldd	r26, Z+10	; 0x0a
     8dc:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8de:	c4 81       	ldd	r28, Z+4	; 0x04
     8e0:	d5 81       	ldd	r29, Z+5	; 0x05
     8e2:	86 81       	ldd	r24, Z+6	; 0x06
     8e4:	97 81       	ldd	r25, Z+7	; 0x07
     8e6:	9f 83       	std	Y+7, r25	; 0x07
     8e8:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8ea:	c6 81       	ldd	r28, Z+6	; 0x06
     8ec:	d7 81       	ldd	r29, Z+7	; 0x07
     8ee:	84 81       	ldd	r24, Z+4	; 0x04
     8f0:	95 81       	ldd	r25, Z+5	; 0x05
     8f2:	9d 83       	std	Y+5, r25	; 0x05
     8f4:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     8f6:	11 96       	adiw	r26, 0x01	; 1
     8f8:	8d 91       	ld	r24, X+
     8fa:	9c 91       	ld	r25, X
     8fc:	12 97       	sbiw	r26, 0x02	; 2
     8fe:	e8 17       	cp	r30, r24
     900:	f9 07       	cpc	r31, r25
     902:	31 f4       	brne	.+12     	; 0x910 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     904:	86 81       	ldd	r24, Z+6	; 0x06
     906:	97 81       	ldd	r25, Z+7	; 0x07
     908:	12 96       	adiw	r26, 0x02	; 2
     90a:	9c 93       	st	X, r25
     90c:	8e 93       	st	-X, r24
     90e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     910:	13 86       	std	Z+11, r1	; 0x0b
     912:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     914:	8c 91       	ld	r24, X
     916:	81 50       	subi	r24, 0x01	; 1
     918:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     91a:	8c 91       	ld	r24, X
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     922:	fc 01       	movw	r30, r24
     924:	60 83       	st	Z, r22
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	70 83       	st	Z, r23
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	10 82       	st	Z, r1
     92e:	31 97       	sbiw	r30, 0x01	; 1
     930:	10 82       	st	Z, r1
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	20 e8       	ldi	r18, 0x80	; 128
     936:	20 83       	st	Z, r18
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	10 82       	st	Z, r1
     93c:	31 97       	sbiw	r30, 0x01	; 1
     93e:	10 82       	st	Z, r1
     940:	31 97       	sbiw	r30, 0x01	; 1
     942:	10 82       	st	Z, r1
     944:	77 97       	sbiw	r30, 0x17	; 23
     946:	40 83       	st	Z, r20
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	50 83       	st	Z, r21
     94c:	86 97       	sbiw	r24, 0x26	; 38
     94e:	08 95       	ret

00000950 <vPortYield>:
     950:	0f 92       	push	r0
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	0f 92       	push	r0
     958:	0b b6       	in	r0, 0x3b	; 59
     95a:	0f 92       	push	r0
     95c:	0c b6       	in	r0, 0x3c	; 60
     95e:	0f 92       	push	r0
     960:	1f 92       	push	r1
     962:	11 24       	eor	r1, r1
     964:	2f 92       	push	r2
     966:	3f 92       	push	r3
     968:	4f 92       	push	r4
     96a:	5f 92       	push	r5
     96c:	6f 92       	push	r6
     96e:	7f 92       	push	r7
     970:	8f 92       	push	r8
     972:	9f 92       	push	r9
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	2f 93       	push	r18
     986:	3f 93       	push	r19
     988:	4f 93       	push	r20
     98a:	5f 93       	push	r21
     98c:	6f 93       	push	r22
     98e:	7f 93       	push	r23
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	af 93       	push	r26
     996:	bf 93       	push	r27
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	ef 93       	push	r30
     99e:	ff 93       	push	r31
     9a0:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
     9a4:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
     9a8:	0d b6       	in	r0, 0x3d	; 61
     9aa:	0d 92       	st	X+, r0
     9ac:	0e b6       	in	r0, 0x3e	; 62
     9ae:	0d 92       	st	X+, r0
     9b0:	46 d7       	rcall	.+3724   	; 0x183e <vTaskSwitchContext>
     9b2:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
     9b6:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
     9ba:	cd 91       	ld	r28, X+
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	dd 91       	ld	r29, X+
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	bf 90       	pop	r11
     9ec:	af 90       	pop	r10
     9ee:	9f 90       	pop	r9
     9f0:	8f 90       	pop	r8
     9f2:	7f 90       	pop	r7
     9f4:	6f 90       	pop	r6
     9f6:	5f 90       	pop	r5
     9f8:	4f 90       	pop	r4
     9fa:	3f 90       	pop	r3
     9fc:	2f 90       	pop	r2
     9fe:	1f 90       	pop	r1
     a00:	0f 90       	pop	r0
     a02:	0c be       	out	0x3c, r0	; 60
     a04:	0f 90       	pop	r0
     a06:	0b be       	out	0x3b, r0	; 59
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	08 95       	ret

00000a10 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	0f 92       	push	r0
     a18:	0b b6       	in	r0, 0x3b	; 59
     a1a:	0f 92       	push	r0
     a1c:	0c b6       	in	r0, 0x3c	; 60
     a1e:	0f 92       	push	r0
     a20:	1f 92       	push	r1
     a22:	11 24       	eor	r1, r1
     a24:	2f 92       	push	r2
     a26:	3f 92       	push	r3
     a28:	4f 92       	push	r4
     a2a:	5f 92       	push	r5
     a2c:	6f 92       	push	r6
     a2e:	7f 92       	push	r7
     a30:	8f 92       	push	r8
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ef 93       	push	r30
     a5e:	ff 93       	push	r31
     a60:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
     a64:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
     a68:	0d b6       	in	r0, 0x3d	; 61
     a6a:	0d 92       	st	X+, r0
     a6c:	0e b6       	in	r0, 0x3e	; 62
     a6e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a70:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a72:	c4 d4       	rcall	.+2440   	; 0x13fc <xTaskIncrementTick>
     a74:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a76:	e3 d6       	rcall	.+3526   	; 0x183e <vTaskSwitchContext>
     a78:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     a7c:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
     a80:	cd 91       	ld	r28, X+
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	dd 91       	ld	r29, X+
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	bf 91       	pop	r27
     a92:	af 91       	pop	r26
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	7f 91       	pop	r23
     a9a:	6f 91       	pop	r22
     a9c:	5f 91       	pop	r21
     a9e:	4f 91       	pop	r20
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	bf 90       	pop	r11
     ab2:	af 90       	pop	r10
     ab4:	9f 90       	pop	r9
     ab6:	8f 90       	pop	r8
     ab8:	7f 90       	pop	r7
     aba:	6f 90       	pop	r6
     abc:	5f 90       	pop	r5
     abe:	4f 90       	pop	r4
     ac0:	3f 90       	pop	r3
     ac2:	2f 90       	pop	r2
     ac4:	1f 90       	pop	r1
     ac6:	0f 90       	pop	r0
     ac8:	0c be       	out	0x3c, r0	; 60
     aca:	0f 90       	pop	r0
     acc:	0b be       	out	0x3b, r0	; 59
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	08 95       	ret

00000ad6 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     ad6:	9c df       	rcall	.-200    	; 0xa10 <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     ad8:	18 95       	reti

00000ada <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     ada:	dc 01       	movw	r26, r24
     adc:	53 96       	adiw	r26, 0x13	; 19
     ade:	2c 91       	ld	r18, X
     ae0:	53 97       	sbiw	r26, 0x13	; 19
     ae2:	22 23       	and	r18, r18
     ae4:	41 f0       	breq	.+16     	; 0xaf6 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     ae6:	5a 96       	adiw	r26, 0x1a	; 26
     ae8:	ed 91       	ld	r30, X+
     aea:	fc 91       	ld	r31, X
     aec:	5b 97       	sbiw	r26, 0x1b	; 27
     aee:	90 81       	ld	r25, Z
     af0:	8a e0       	ldi	r24, 0x0A	; 10
     af2:	89 1b       	sub	r24, r25
     af4:	08 95       	ret
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	08 95       	ret

00000afa <prvIsQueueEmpty>:
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	0f 92       	push	r0
     b00:	fc 01       	movw	r30, r24
     b02:	86 8d       	ldd	r24, Z+30	; 0x1e
     b04:	81 11       	cpse	r24, r1
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <prvIsQueueEmpty+0x12>
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <prvIsQueueEmpty+0x14>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	08 95       	ret

00000b14 <prvIsQueueFull>:
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	0f 92       	push	r0
     b1a:	fc 01       	movw	r30, r24
     b1c:	26 8d       	ldd	r18, Z+30	; 0x1e
     b1e:	87 8d       	ldd	r24, Z+31	; 0x1f
     b20:	28 13       	cpse	r18, r24
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <prvIsQueueFull+0x14>
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <prvIsQueueFull+0x16>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	08 95       	ret

00000b30 <prvCopyDataToQueue>:
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	04 2f       	mov	r16, r20
     b3c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b3e:	48 a1       	ldd	r20, Y+32	; 0x20
     b40:	41 11       	cpse	r20, r1
     b42:	0c c0       	rjmp	.+24     	; 0xb5c <prvCopyDataToQueue+0x2c>
     b44:	88 81       	ld	r24, Y
     b46:	99 81       	ldd	r25, Y+1	; 0x01
     b48:	89 2b       	or	r24, r25
     b4a:	09 f0       	breq	.+2      	; 0xb4e <prvCopyDataToQueue+0x1e>
     b4c:	42 c0       	rjmp	.+132    	; 0xbd2 <prvCopyDataToQueue+0xa2>
     b4e:	8c 81       	ldd	r24, Y+4	; 0x04
     b50:	9d 81       	ldd	r25, Y+5	; 0x05
     b52:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <xTaskPriorityDisinherit>
     b56:	1d 82       	std	Y+5, r1	; 0x05
     b58:	1c 82       	std	Y+4, r1	; 0x04
     b5a:	42 c0       	rjmp	.+132    	; 0xbe0 <prvCopyDataToQueue+0xb0>
     b5c:	01 11       	cpse	r16, r1
     b5e:	17 c0       	rjmp	.+46     	; 0xb8e <prvCopyDataToQueue+0x5e>
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	9b 81       	ldd	r25, Y+3	; 0x03
     b66:	0e 94 93 1b 	call	0x3726	; 0x3726 <memcpy>
     b6a:	28 a1       	ldd	r18, Y+32	; 0x20
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	9b 81       	ldd	r25, Y+3	; 0x03
     b70:	82 0f       	add	r24, r18
     b72:	91 1d       	adc	r25, r1
     b74:	9b 83       	std	Y+3, r25	; 0x03
     b76:	8a 83       	std	Y+2, r24	; 0x02
     b78:	2c 81       	ldd	r18, Y+4	; 0x04
     b7a:	3d 81       	ldd	r19, Y+5	; 0x05
     b7c:	82 17       	cp	r24, r18
     b7e:	93 07       	cpc	r25, r19
     b80:	50 f1       	brcs	.+84     	; 0xbd6 <prvCopyDataToQueue+0xa6>
     b82:	88 81       	ld	r24, Y
     b84:	99 81       	ldd	r25, Y+1	; 0x01
     b86:	9b 83       	std	Y+3, r25	; 0x03
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	29 c0       	rjmp	.+82     	; 0xbe0 <prvCopyDataToQueue+0xb0>
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	8e 81       	ldd	r24, Y+6	; 0x06
     b92:	9f 81       	ldd	r25, Y+7	; 0x07
     b94:	0e 94 93 1b 	call	0x3726	; 0x3726 <memcpy>
     b98:	88 a1       	ldd	r24, Y+32	; 0x20
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	91 95       	neg	r25
     b9e:	81 95       	neg	r24
     ba0:	91 09       	sbc	r25, r1
     ba2:	2e 81       	ldd	r18, Y+6	; 0x06
     ba4:	3f 81       	ldd	r19, Y+7	; 0x07
     ba6:	28 0f       	add	r18, r24
     ba8:	39 1f       	adc	r19, r25
     baa:	3f 83       	std	Y+7, r19	; 0x07
     bac:	2e 83       	std	Y+6, r18	; 0x06
     bae:	48 81       	ld	r20, Y
     bb0:	59 81       	ldd	r21, Y+1	; 0x01
     bb2:	24 17       	cp	r18, r20
     bb4:	35 07       	cpc	r19, r21
     bb6:	30 f4       	brcc	.+12     	; 0xbc4 <prvCopyDataToQueue+0x94>
     bb8:	2c 81       	ldd	r18, Y+4	; 0x04
     bba:	3d 81       	ldd	r19, Y+5	; 0x05
     bbc:	82 0f       	add	r24, r18
     bbe:	93 1f       	adc	r25, r19
     bc0:	9f 83       	std	Y+7, r25	; 0x07
     bc2:	8e 83       	std	Y+6, r24	; 0x06
     bc4:	02 30       	cpi	r16, 0x02	; 2
     bc6:	49 f4       	brne	.+18     	; 0xbda <prvCopyDataToQueue+0xaa>
     bc8:	11 23       	and	r17, r17
     bca:	49 f0       	breq	.+18     	; 0xbde <prvCopyDataToQueue+0xae>
     bcc:	11 50       	subi	r17, 0x01	; 1
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <prvCopyDataToQueue+0xb0>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <prvCopyDataToQueue+0xb0>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <prvCopyDataToQueue+0xb0>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <prvCopyDataToQueue+0xb0>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	1f 5f       	subi	r17, 0xFF	; 255
     be2:	1e 8f       	std	Y+30, r17	; 0x1e
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	08 95       	ret

00000bee <prvUnlockQueue>:
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ec 01       	movw	r28, r24
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	0f 92       	push	r0
     bfc:	1a a1       	ldd	r17, Y+34	; 0x22
     bfe:	0a c0       	rjmp	.+20     	; 0xc14 <prvUnlockQueue+0x26>
     c00:	8b 89       	ldd	r24, Y+19	; 0x13
     c02:	88 23       	and	r24, r24
     c04:	49 f0       	breq	.+18     	; 0xc18 <prvUnlockQueue+0x2a>
     c06:	ce 01       	movw	r24, r28
     c08:	43 96       	adiw	r24, 0x13	; 19
     c0a:	de d6       	rcall	.+3516   	; 0x19c8 <xTaskRemoveFromEventList>
     c0c:	81 11       	cpse	r24, r1
     c0e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <vTaskMissedYield>
     c12:	11 50       	subi	r17, 0x01	; 1
     c14:	11 16       	cp	r1, r17
     c16:	a4 f3       	brlt	.-24     	; 0xc00 <prvUnlockQueue+0x12>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	8a a3       	std	Y+34, r24	; 0x22
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	0f 92       	push	r0
     c26:	19 a1       	ldd	r17, Y+33	; 0x21
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <prvUnlockQueue+0x50>
     c2a:	88 85       	ldd	r24, Y+8	; 0x08
     c2c:	88 23       	and	r24, r24
     c2e:	49 f0       	breq	.+18     	; 0xc42 <prvUnlockQueue+0x54>
     c30:	ce 01       	movw	r24, r28
     c32:	08 96       	adiw	r24, 0x08	; 8
     c34:	c9 d6       	rcall	.+3474   	; 0x19c8 <xTaskRemoveFromEventList>
     c36:	81 11       	cpse	r24, r1
     c38:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <vTaskMissedYield>
     c3c:	11 50       	subi	r17, 0x01	; 1
     c3e:	11 16       	cp	r1, r17
     c40:	a4 f3       	brlt	.-24     	; 0xc2a <prvUnlockQueue+0x3c>
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	89 a3       	std	Y+33, r24	; 0x21
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	08 95       	ret

00000c52 <xQueueGenericReset>:
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	0f 92       	push	r0
     c5e:	e8 81       	ld	r30, Y
     c60:	f9 81       	ldd	r31, Y+1	; 0x01
     c62:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c64:	28 a1       	ldd	r18, Y+32	; 0x20
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	82 9f       	mul	r24, r18
     c6c:	a0 01       	movw	r20, r0
     c6e:	83 9f       	mul	r24, r19
     c70:	50 0d       	add	r21, r0
     c72:	92 9f       	mul	r25, r18
     c74:	50 0d       	add	r21, r0
     c76:	11 24       	eor	r1, r1
     c78:	4e 0f       	add	r20, r30
     c7a:	5f 1f       	adc	r21, r31
     c7c:	5d 83       	std	Y+5, r21	; 0x05
     c7e:	4c 83       	std	Y+4, r20	; 0x04
     c80:	1e 8e       	std	Y+30, r1	; 0x1e
     c82:	fb 83       	std	Y+3, r31	; 0x03
     c84:	ea 83       	std	Y+2, r30	; 0x02
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	28 9f       	mul	r18, r24
     c8a:	a0 01       	movw	r20, r0
     c8c:	29 9f       	mul	r18, r25
     c8e:	50 0d       	add	r21, r0
     c90:	38 9f       	mul	r19, r24
     c92:	50 0d       	add	r21, r0
     c94:	11 24       	eor	r1, r1
     c96:	cf 01       	movw	r24, r30
     c98:	84 0f       	add	r24, r20
     c9a:	95 1f       	adc	r25, r21
     c9c:	9f 83       	std	Y+7, r25	; 0x07
     c9e:	8e 83       	std	Y+6, r24	; 0x06
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	89 a3       	std	Y+33, r24	; 0x21
     ca4:	8a a3       	std	Y+34, r24	; 0x22
     ca6:	61 11       	cpse	r22, r1
     ca8:	0a c0       	rjmp	.+20     	; 0xcbe <xQueueGenericReset+0x6c>
     caa:	88 85       	ldd	r24, Y+8	; 0x08
     cac:	88 23       	and	r24, r24
     cae:	69 f0       	breq	.+26     	; 0xcca <xQueueGenericReset+0x78>
     cb0:	ce 01       	movw	r24, r28
     cb2:	08 96       	adiw	r24, 0x08	; 8
     cb4:	89 d6       	rcall	.+3346   	; 0x19c8 <xTaskRemoveFromEventList>
     cb6:	88 23       	and	r24, r24
     cb8:	41 f0       	breq	.+16     	; 0xcca <xQueueGenericReset+0x78>
     cba:	4a de       	rcall	.-876    	; 0x950 <vPortYield>
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <xQueueGenericReset+0x78>
     cbe:	ce 01       	movw	r24, r28
     cc0:	08 96       	adiw	r24, 0x08	; 8
     cc2:	b6 dd       	rcall	.-1172   	; 0x830 <vListInitialise>
     cc4:	ce 01       	movw	r24, r28
     cc6:	43 96       	adiw	r24, 0x13	; 19
     cc8:	b3 dd       	rcall	.-1178   	; 0x830 <vListInitialise>
     cca:	0f 90       	pop	r0
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <prvInitialiseNewQueue>:
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	f8 01       	movw	r30, r16
     cdc:	61 11       	cpse	r22, r1
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <prvInitialiseNewQueue+0x10>
     ce0:	11 83       	std	Z+1, r17	; 0x01
     ce2:	00 83       	st	Z, r16
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <prvInitialiseNewQueue+0x14>
     ce6:	51 83       	std	Z+1, r21	; 0x01
     ce8:	40 83       	st	Z, r20
     cea:	87 8f       	std	Z+31, r24	; 0x1f
     cec:	60 a3       	std	Z+32, r22	; 0x20
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	cf 01       	movw	r24, r30
     cf2:	af df       	rcall	.-162    	; 0xc52 <xQueueGenericReset>
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <xQueueGenericCreate>:
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	f8 2e       	mov	r15, r24
     d0a:	e6 2e       	mov	r14, r22
     d0c:	d4 2e       	mov	r13, r20
     d0e:	86 9f       	mul	r24, r22
     d10:	c0 01       	movw	r24, r0
     d12:	11 24       	eor	r1, r1
     d14:	83 96       	adiw	r24, 0x23	; 35
     d16:	aa dc       	rcall	.-1708   	; 0x66c <pvPortMalloc>
     d18:	ec 01       	movw	r28, r24
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	41 f0       	breq	.+16     	; 0xd2e <xQueueGenericCreate+0x34>
     d1e:	8c 01       	movw	r16, r24
     d20:	2d 2d       	mov	r18, r13
     d22:	ac 01       	movw	r20, r24
     d24:	4d 5d       	subi	r20, 0xDD	; 221
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	6e 2d       	mov	r22, r14
     d2a:	8f 2d       	mov	r24, r15
     d2c:	d4 df       	rcall	.-88     	; 0xcd6 <prvInitialiseNewQueue>
     d2e:	ce 01       	movw	r24, r28
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	08 95       	ret

00000d40 <xQueueGenericSend>:
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	29 97       	sbiw	r28, 0x09	; 9
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	7c 01       	movw	r14, r24
     d62:	6b 01       	movw	r12, r22
     d64:	2e 83       	std	Y+6, r18	; 0x06
     d66:	3f 83       	std	Y+7, r19	; 0x07
     d68:	48 87       	std	Y+8, r20	; 0x08
     d6a:	59 87       	std	Y+9, r21	; 0x09
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	0f 92       	push	r0
     d74:	f7 01       	movw	r30, r14
     d76:	96 8d       	ldd	r25, Z+30	; 0x1e
     d78:	87 8d       	ldd	r24, Z+31	; 0x1f
     d7a:	98 17       	cp	r25, r24
     d7c:	10 f0       	brcs	.+4      	; 0xd82 <xQueueGenericSend+0x42>
     d7e:	02 30       	cpi	r16, 0x02	; 2
     d80:	a9 f4       	brne	.+42     	; 0xdac <xQueueGenericSend+0x6c>
     d82:	40 2f       	mov	r20, r16
     d84:	b6 01       	movw	r22, r12
     d86:	c7 01       	movw	r24, r14
     d88:	d3 de       	rcall	.-602    	; 0xb30 <prvCopyDataToQueue>
     d8a:	f7 01       	movw	r30, r14
     d8c:	93 89       	ldd	r25, Z+19	; 0x13
     d8e:	99 23       	and	r25, r25
     d90:	39 f0       	breq	.+14     	; 0xda0 <xQueueGenericSend+0x60>
     d92:	c7 01       	movw	r24, r14
     d94:	43 96       	adiw	r24, 0x13	; 19
     d96:	18 d6       	rcall	.+3120   	; 0x19c8 <xTaskRemoveFromEventList>
     d98:	88 23       	and	r24, r24
     d9a:	21 f0       	breq	.+8      	; 0xda4 <xQueueGenericSend+0x64>
     d9c:	d9 dd       	rcall	.-1102   	; 0x950 <vPortYield>
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <xQueueGenericSend+0x64>
     da0:	81 11       	cpse	r24, r1
     da2:	d6 dd       	rcall	.-1108   	; 0x950 <vPortYield>
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	46 c0       	rjmp	.+140    	; 0xe38 <xQueueGenericSend+0xf8>
     dac:	8e 81       	ldd	r24, Y+6	; 0x06
     dae:	9f 81       	ldd	r25, Y+7	; 0x07
     db0:	a8 85       	ldd	r26, Y+8	; 0x08
     db2:	b9 85       	ldd	r27, Y+9	; 0x09
     db4:	89 2b       	or	r24, r25
     db6:	8a 2b       	or	r24, r26
     db8:	8b 2b       	or	r24, r27
     dba:	21 f4       	brne	.+8      	; 0xdc4 <xQueueGenericSend+0x84>
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	3a c0       	rjmp	.+116    	; 0xe38 <xQueueGenericSend+0xf8>
     dc4:	11 11       	cpse	r17, r1
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <xQueueGenericSend+0x90>
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	46 d7       	rcall	.+3724   	; 0x1c5a <vTaskInternalSetTimeOutState>
     dce:	11 e0       	ldi	r17, 0x01	; 1
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0d d3       	rcall	.+1562   	; 0x13f0 <vTaskSuspendAll>
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	0f 92       	push	r0
     ddc:	f7 01       	movw	r30, r14
     dde:	81 a1       	ldd	r24, Z+33	; 0x21
     de0:	8f 3f       	cpi	r24, 0xFF	; 255
     de2:	09 f4       	brne	.+2      	; 0xde6 <xQueueGenericSend+0xa6>
     de4:	11 a2       	std	Z+33, r1	; 0x21
     de6:	f7 01       	movw	r30, r14
     de8:	82 a1       	ldd	r24, Z+34	; 0x22
     dea:	8f 3f       	cpi	r24, 0xFF	; 255
     dec:	09 f4       	brne	.+2      	; 0xdf0 <xQueueGenericSend+0xb0>
     dee:	12 a2       	std	Z+34, r1	; 0x22
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	be 01       	movw	r22, r28
     df6:	6a 5f       	subi	r22, 0xFA	; 250
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	ce 01       	movw	r24, r28
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	3e d7       	rcall	.+3708   	; 0x1c7c <xTaskCheckForTimeOut>
     e00:	81 11       	cpse	r24, r1
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <xQueueGenericSend+0xf0>
     e04:	c7 01       	movw	r24, r14
     e06:	86 de       	rcall	.-756    	; 0xb14 <prvIsQueueFull>
     e08:	88 23       	and	r24, r24
     e0a:	71 f0       	breq	.+28     	; 0xe28 <xQueueGenericSend+0xe8>
     e0c:	4e 81       	ldd	r20, Y+6	; 0x06
     e0e:	5f 81       	ldd	r21, Y+7	; 0x07
     e10:	68 85       	ldd	r22, Y+8	; 0x08
     e12:	79 85       	ldd	r23, Y+9	; 0x09
     e14:	c7 01       	movw	r24, r14
     e16:	08 96       	adiw	r24, 0x08	; 8
     e18:	76 d5       	rcall	.+2796   	; 0x1906 <vTaskPlaceOnEventList>
     e1a:	c7 01       	movw	r24, r14
     e1c:	e8 de       	rcall	.-560    	; 0xbee <prvUnlockQueue>
     e1e:	1a d4       	rcall	.+2100   	; 0x1654 <xTaskResumeAll>
     e20:	81 11       	cpse	r24, r1
     e22:	a5 cf       	rjmp	.-182    	; 0xd6e <xQueueGenericSend+0x2e>
     e24:	95 dd       	rcall	.-1238   	; 0x950 <vPortYield>
     e26:	a3 cf       	rjmp	.-186    	; 0xd6e <xQueueGenericSend+0x2e>
     e28:	c7 01       	movw	r24, r14
     e2a:	e1 de       	rcall	.-574    	; 0xbee <prvUnlockQueue>
     e2c:	13 d4       	rcall	.+2086   	; 0x1654 <xTaskResumeAll>
     e2e:	9f cf       	rjmp	.-194    	; 0xd6e <xQueueGenericSend+0x2e>
     e30:	c7 01       	movw	r24, r14
     e32:	dd de       	rcall	.-582    	; 0xbee <prvUnlockQueue>
     e34:	0f d4       	rcall	.+2078   	; 0x1654 <xTaskResumeAll>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	29 96       	adiw	r28, 0x09	; 9
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	08 95       	ret

00000e56 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	29 97       	sbiw	r28, 0x09	; 9
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	8c 01       	movw	r16, r24
     e74:	4e 83       	std	Y+6, r20	; 0x06
     e76:	5f 83       	std	Y+7, r21	; 0x07
     e78:	68 87       	std	Y+8, r22	; 0x08
     e7a:	79 87       	std	Y+9, r23	; 0x09
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     e7c:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     e7e:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     e86:	f8 01       	movw	r30, r16
     e88:	86 8d       	ldd	r24, Z+30	; 0x1e

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     e8a:	88 23       	and	r24, r24
     e8c:	c1 f0       	breq	.+48     	; 0xebe <xQueueSemaphoreTake+0x68>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     e8e:	81 50       	subi	r24, 0x01	; 1
     e90:	86 8f       	std	Z+30, r24	; 0x1e

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	89 2b       	or	r24, r25
     e98:	29 f4       	brne	.+10     	; 0xea4 <xQueueSemaphoreTake+0x4e>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     e9a:	0e 94 1b 10 	call	0x2036	; 0x2036 <pvTaskIncrementMutexHeldCount>
     e9e:	f8 01       	movw	r30, r16
     ea0:	95 83       	std	Z+5, r25	; 0x05
     ea2:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     ea4:	f8 01       	movw	r30, r16
     ea6:	80 85       	ldd	r24, Z+8	; 0x08
     ea8:	88 23       	and	r24, r24
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <xQueueSemaphoreTake+0x60>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     eac:	c8 01       	movw	r24, r16
     eae:	08 96       	adiw	r24, 0x08	; 8
     eb0:	8b d5       	rcall	.+2838   	; 0x19c8 <xTaskRemoveFromEventList>
     eb2:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     eb4:	4d dd       	rcall	.-1382   	; 0x950 <vPortYield>
     eb6:	0f 90       	pop	r0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	81 e0       	ldi	r24, 0x01	; 1
                return pdPASS;
     ebc:	6a c0       	rjmp	.+212    	; 0xf92 <xQueueSemaphoreTake+0x13c>
     ebe:	8e 81       	ldd	r24, Y+6	; 0x06
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     ec0:	9f 81       	ldd	r25, Y+7	; 0x07
     ec2:	a8 85       	ldd	r26, Y+8	; 0x08
     ec4:	b9 85       	ldd	r27, Y+9	; 0x09
     ec6:	89 2b       	or	r24, r25
     ec8:	8a 2b       	or	r24, r26
     eca:	8b 2b       	or	r24, r27
     ecc:	21 f4       	brne	.+8      	; 0xed6 <xQueueSemaphoreTake+0x80>
     ece:	0f 90       	pop	r0
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	80 e0       	ldi	r24, 0x00	; 0
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     ed4:	5e c0       	rjmp	.+188    	; 0xf92 <xQueueSemaphoreTake+0x13c>
     ed6:	f1 10       	cpse	r15, r1
                }
                else if( xEntryTimeSet == pdFALSE )
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <xQueueSemaphoreTake+0x8e>
     eda:	ce 01       	movw	r24, r28
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	bd d6       	rcall	.+3450   	; 0x1c5a <vTaskInternalSetTimeOutState>
     ee0:	ff 24       	eor	r15, r15
                    xEntryTimeSet = pdTRUE;
     ee2:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     ee8:	83 d2       	rcall	.+1286   	; 0x13f0 <vTaskSuspendAll>
     eea:	0f b6       	in	r0, 0x3f	; 63
        prvLockQueue( pxQueue );
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
     ef0:	f8 01       	movw	r30, r16
     ef2:	81 a1       	ldd	r24, Z+33	; 0x21
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <xQueueSemaphoreTake+0xa4>
     ef8:	11 a2       	std	Z+33, r1	; 0x21
     efa:	f8 01       	movw	r30, r16
     efc:	82 a1       	ldd	r24, Z+34	; 0x22
     efe:	8f 3f       	cpi	r24, 0xFF	; 255
     f00:	09 f4       	brne	.+2      	; 0xf04 <xQueueSemaphoreTake+0xae>
     f02:	12 a2       	std	Z+34, r1	; 0x22
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	be 01       	movw	r22, r28

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f0a:	6a 5f       	subi	r22, 0xFA	; 250
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	b4 d6       	rcall	.+3432   	; 0x1c7c <xTaskCheckForTimeOut>
     f14:	81 11       	cpse	r24, r1
     f16:	24 c0       	rjmp	.+72     	; 0xf60 <xQueueSemaphoreTake+0x10a>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     f18:	c8 01       	movw	r24, r16
     f1a:	ef dd       	rcall	.-1058   	; 0xafa <prvIsQueueEmpty>
     f1c:	88 23       	and	r24, r24
     f1e:	e1 f0       	breq	.+56     	; 0xf58 <xQueueSemaphoreTake+0x102>
     f20:	f8 01       	movw	r30, r16
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     f22:	80 81       	ld	r24, Z
     f24:	91 81       	ldd	r25, Z+1	; 0x01
     f26:	89 2b       	or	r24, r25
     f28:	49 f4       	brne	.+18     	; 0xf3c <xQueueSemaphoreTake+0xe6>
                        {
                            taskENTER_CRITICAL();
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     f30:	84 81       	ldd	r24, Z+4	; 0x04
     f32:	95 81       	ldd	r25, Z+5	; 0x05
     f34:	0d d7       	rcall	.+3610   	; 0x1d50 <xTaskPriorityInherit>
     f36:	e8 2e       	mov	r14, r24
     f38:	0f 90       	pop	r0
                            }
                            taskEXIT_CRITICAL();
     f3a:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     f3c:	4e 81       	ldd	r20, Y+6	; 0x06
     f3e:	5f 81       	ldd	r21, Y+7	; 0x07
     f40:	68 85       	ldd	r22, Y+8	; 0x08
     f42:	79 85       	ldd	r23, Y+9	; 0x09
     f44:	c8 01       	movw	r24, r16
                prvUnlockQueue( pxQueue );
     f46:	43 96       	adiw	r24, 0x13	; 19

                if( xTaskResumeAll() == pdFALSE )
     f48:	de d4       	rcall	.+2492   	; 0x1906 <vTaskPlaceOnEventList>
     f4a:	c8 01       	movw	r24, r16
                {
                    portYIELD_WITHIN_API();
     f4c:	50 de       	rcall	.-864    	; 0xbee <prvUnlockQueue>
     f4e:	82 d3       	rcall	.+1796   	; 0x1654 <xTaskResumeAll>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     f50:	81 11       	cpse	r24, r1
     f52:	96 cf       	rjmp	.-212    	; 0xe80 <xQueueSemaphoreTake+0x2a>
     f54:	fd dc       	rcall	.-1542   	; 0x950 <vPortYield>
                ( void ) xTaskResumeAll();
     f56:	94 cf       	rjmp	.-216    	; 0xe80 <xQueueSemaphoreTake+0x2a>
     f58:	c8 01       	movw	r24, r16
     f5a:	49 de       	rcall	.-878    	; 0xbee <prvUnlockQueue>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     f5c:	7b d3       	rcall	.+1782   	; 0x1654 <xTaskResumeAll>
     f5e:	90 cf       	rjmp	.-224    	; 0xe80 <xQueueSemaphoreTake+0x2a>
            ( void ) xTaskResumeAll();
     f60:	c8 01       	movw	r24, r16
     f62:	45 de       	rcall	.-886    	; 0xbee <prvUnlockQueue>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     f64:	77 d3       	rcall	.+1774   	; 0x1654 <xTaskResumeAll>
     f66:	c8 01       	movw	r24, r16
     f68:	c8 dd       	rcall	.-1136   	; 0xafa <prvIsQueueEmpty>
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <xQueueSemaphoreTake+0x11a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     f6e:	88 cf       	rjmp	.-240    	; 0xe80 <xQueueSemaphoreTake+0x2a>
     f70:	ee 20       	and	r14, r14
                        {
                            taskENTER_CRITICAL();
     f72:	71 f0       	breq	.+28     	; 0xf90 <xQueueSemaphoreTake+0x13a>
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     f78:	0f 92       	push	r0
     f7a:	c8 01       	movw	r24, r16
     f7c:	ae dd       	rcall	.-1188   	; 0xada <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     f7e:	68 2f       	mov	r22, r24
     f80:	f8 01       	movw	r30, r16
     f82:	84 81       	ldd	r24, Z+4	; 0x04
     f84:	95 81       	ldd	r25, Z+5	; 0x05
     f86:	c6 d7       	rcall	.+3980   	; 0x1f14 <vTaskPriorityDisinheritAfterTimeout>
     f88:	0f 90       	pop	r0
                            }
                            taskEXIT_CRITICAL();
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	80 e0       	ldi	r24, 0x00	; 0
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <xQueueSemaphoreTake+0x13c>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	29 96       	adiw	r28, 0x09	; 9
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	08 95       	ret

00000fac <prvResetNextTaskUnblockTime>:
     fac:	e0 91 5a 0d 	lds	r30, 0x0D5A	; 0x800d5a <pxDelayedTaskList>
                xReturn = taskSCHEDULER_SUSPENDED;
            }
        }

        return xReturn;
    }
     fb0:	f0 91 5b 0d 	lds	r31, 0x0D5B	; 0x800d5b <pxDelayedTaskList+0x1>
     fb4:	80 81       	ld	r24, Z
     fb6:	81 11       	cpse	r24, r1
     fb8:	0c c0       	rjmp	.+24     	; 0xfd2 <prvResetNextTaskUnblockTime+0x26>
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
     fbe:	dc 01       	movw	r26, r24
     fc0:	80 93 25 0d 	sts	0x0D25, r24	; 0x800d25 <xNextTaskUnblockTime>
     fc4:	90 93 26 0d 	sts	0x0D26, r25	; 0x800d26 <xNextTaskUnblockTime+0x1>
     fc8:	a0 93 27 0d 	sts	0x0D27, r26	; 0x800d27 <xNextTaskUnblockTime+0x2>
     fcc:	b0 93 28 0d 	sts	0x0D28, r27	; 0x800d28 <xNextTaskUnblockTime+0x3>
     fd0:	08 95       	ret
     fd2:	e0 91 5a 0d 	lds	r30, 0x0D5A	; 0x800d5a <pxDelayedTaskList>
     fd6:	f0 91 5b 0d 	lds	r31, 0x0D5B	; 0x800d5b <pxDelayedTaskList+0x1>
     fda:	07 80       	ldd	r0, Z+7	; 0x07
     fdc:	f0 85       	ldd	r31, Z+8	; 0x08
     fde:	e0 2d       	mov	r30, r0
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	a2 81       	ldd	r26, Z+2	; 0x02
     fe6:	b3 81       	ldd	r27, Z+3	; 0x03
     fe8:	80 93 25 0d 	sts	0x0D25, r24	; 0x800d25 <xNextTaskUnblockTime>
     fec:	90 93 26 0d 	sts	0x0D26, r25	; 0x800d26 <xNextTaskUnblockTime+0x1>
     ff0:	a0 93 27 0d 	sts	0x0D27, r26	; 0x800d27 <xNextTaskUnblockTime+0x2>
     ff4:	b0 93 28 0d 	sts	0x0D28, r27	; 0x800d28 <xNextTaskUnblockTime+0x3>
     ff8:	08 95       	ret

00000ffa <prvInitialiseNewTask>:
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	2c 01       	movw	r4, r24
    101a:	5b 01       	movw	r10, r22
    101c:	4a 01       	movw	r8, r20
    101e:	39 01       	movw	r6, r18
    1020:	e6 01       	movw	r28, r12
    1022:	65 ea       	ldi	r22, 0xA5	; 165
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <memset>
    102e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	82 1a       	sub	r8, r18
    1036:	91 08       	sbc	r9, r1
    1038:	88 0e       	add	r8, r24
    103a:	99 1e       	adc	r9, r25
    103c:	a1 14       	cp	r10, r1
    103e:	b1 04       	cpc	r11, r1
    1040:	89 f4       	brne	.+34     	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    1042:	15 c0       	rjmp	.+42     	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
    1044:	82 2f       	mov	r24, r18
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	f5 01       	movw	r30, r10
    104a:	e8 0f       	add	r30, r24
    104c:	f9 1f       	adc	r31, r25
    104e:	30 81       	ld	r19, Z
    1050:	de 01       	movw	r26, r28
    1052:	a8 0f       	add	r26, r24
    1054:	b9 1f       	adc	r27, r25
    1056:	5d 96       	adiw	r26, 0x1d	; 29
    1058:	3c 93       	st	X, r19
    105a:	80 81       	ld	r24, Z
    105c:	88 23       	and	r24, r24
    105e:	29 f0       	breq	.+10     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1060:	2f 5f       	subi	r18, 0xFF	; 255
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <__EEPROM_REGION_LENGTH__+0x66>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	20 31       	cpi	r18, 0x10	; 16
    1068:	68 f3       	brcs	.-38     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    106a:	1c a6       	std	Y+44, r1	; 0x2c
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <__EEPROM_REGION_LENGTH__+0x70>
    106e:	1d 8e       	std	Y+29, r1	; 0x1d
    1070:	0a 30       	cpi	r16, 0x0A	; 10
    1072:	08 f0       	brcs	.+2      	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
    1074:	09 e0       	ldi	r16, 0x09	; 9
    1076:	0a 8f       	std	Y+26, r16	; 0x1a
    1078:	0d a7       	std	Y+45, r16	; 0x2d
    107a:	1e a6       	std	Y+46, r1	; 0x2e
    107c:	ce 01       	movw	r24, r28
    107e:	02 96       	adiw	r24, 0x02	; 2
    1080:	e8 db       	rcall	.-2096   	; 0x852 <vListInitialiseItem>
    1082:	ce 01       	movw	r24, r28
    1084:	0e 96       	adiw	r24, 0x0e	; 14
    1086:	e5 db       	rcall	.-2102   	; 0x852 <vListInitialiseItem>
    1088:	db 87       	std	Y+11, r29	; 0x0b
    108a:	ca 87       	std	Y+10, r28	; 0x0a
    108c:	8a e0       	ldi	r24, 0x0A	; 10
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	80 1b       	sub	r24, r16
    1096:	91 09       	sbc	r25, r1
    1098:	a1 09       	sbc	r26, r1
    109a:	b1 09       	sbc	r27, r1
    109c:	8e 87       	std	Y+14, r24	; 0x0e
    109e:	9f 87       	std	Y+15, r25	; 0x0f
    10a0:	a8 8b       	std	Y+16, r26	; 0x10
    10a2:	b9 8b       	std	Y+17, r27	; 0x11
    10a4:	df 8b       	std	Y+23, r29	; 0x17
    10a6:	ce 8b       	std	Y+22, r28	; 0x16
    10a8:	84 e0       	ldi	r24, 0x04	; 4
    10aa:	fe 01       	movw	r30, r28
    10ac:	bf 96       	adiw	r30, 0x2f	; 47
    10ae:	df 01       	movw	r26, r30
    10b0:	1d 92       	st	X+, r1
    10b2:	8a 95       	dec	r24
    10b4:	e9 f7       	brne	.-6      	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
    10b6:	1b aa       	std	Y+51, r1	; 0x33
    10b8:	a3 01       	movw	r20, r6
    10ba:	b2 01       	movw	r22, r4
    10bc:	c4 01       	movw	r24, r8
    10be:	31 dc       	rcall	.-1950   	; 0x922 <pxPortInitialiseStack>
    10c0:	99 83       	std	Y+1, r25	; 0x01
    10c2:	88 83       	st	Y, r24
    10c4:	e1 14       	cp	r14, r1
    10c6:	f1 04       	cpc	r15, r1
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    10ca:	f7 01       	movw	r30, r14
    10cc:	d1 83       	std	Z+1, r29	; 0x01
    10ce:	c0 83       	st	Z, r28
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	df 90       	pop	r13
    10dc:	cf 90       	pop	r12
    10de:	bf 90       	pop	r11
    10e0:	af 90       	pop	r10
    10e2:	9f 90       	pop	r9
    10e4:	8f 90       	pop	r8
    10e6:	7f 90       	pop	r7
    10e8:	6f 90       	pop	r6
    10ea:	5f 90       	pop	r5
    10ec:	4f 90       	pop	r4
    10ee:	08 95       	ret

000010f0 <prvInitialiseTaskLists>:
    10f0:	cf 93       	push	r28
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
    10f4:	08 c0       	rjmp	.+16     	; 0x1106 <prvInitialiseTaskLists+0x16>
    10f6:	2b e0       	ldi	r18, 0x0B	; 11
    10f8:	c2 9f       	mul	r28, r18
    10fa:	c0 01       	movw	r24, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	8e 58       	subi	r24, 0x8E	; 142
    1100:	92 4f       	sbci	r25, 0xF2	; 242
    1102:	96 db       	rcall	.-2260   	; 0x830 <vListInitialise>
    1104:	cf 5f       	subi	r28, 0xFF	; 255
    1106:	ca 30       	cpi	r28, 0x0A	; 10
    1108:	b0 f3       	brcs	.-20     	; 0x10f6 <prvInitialiseTaskLists+0x6>
    110a:	87 e6       	ldi	r24, 0x67	; 103
    110c:	9d e0       	ldi	r25, 0x0D	; 13
    110e:	90 db       	rcall	.-2272   	; 0x830 <vListInitialise>
    1110:	8c e5       	ldi	r24, 0x5C	; 92
    1112:	9d e0       	ldi	r25, 0x0D	; 13
    1114:	8d db       	rcall	.-2278   	; 0x830 <vListInitialise>
    1116:	8d e4       	ldi	r24, 0x4D	; 77
    1118:	9d e0       	ldi	r25, 0x0D	; 13
    111a:	8a db       	rcall	.-2284   	; 0x830 <vListInitialise>
    111c:	82 e4       	ldi	r24, 0x42	; 66
    111e:	9d e0       	ldi	r25, 0x0D	; 13
    1120:	87 db       	rcall	.-2290   	; 0x830 <vListInitialise>
    1122:	87 e3       	ldi	r24, 0x37	; 55
    1124:	9d e0       	ldi	r25, 0x0D	; 13
    1126:	84 db       	rcall	.-2296   	; 0x830 <vListInitialise>
    1128:	87 e6       	ldi	r24, 0x67	; 103
    112a:	9d e0       	ldi	r25, 0x0D	; 13
    112c:	90 93 5b 0d 	sts	0x0D5B, r25	; 0x800d5b <pxDelayedTaskList+0x1>
    1130:	80 93 5a 0d 	sts	0x0D5A, r24	; 0x800d5a <pxDelayedTaskList>
    1134:	8c e5       	ldi	r24, 0x5C	; 92
    1136:	9d e0       	ldi	r25, 0x0D	; 13
    1138:	90 93 59 0d 	sts	0x0D59, r25	; 0x800d59 <pxOverflowDelayedTaskList+0x1>
    113c:	80 93 58 0d 	sts	0x0D58, r24	; 0x800d58 <pxOverflowDelayedTaskList>
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <prvAddNewTaskToReadyList>:
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ec 01       	movw	r28, r24
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	0f 92       	push	r0
    1150:	80 91 36 0d 	lds	r24, 0x0D36	; 0x800d36 <uxCurrentNumberOfTasks>
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	80 93 36 0d 	sts	0x0D36, r24	; 0x800d36 <uxCurrentNumberOfTasks>
    115a:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    115e:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1162:	89 2b       	or	r24, r25
    1164:	51 f4       	brne	.+20     	; 0x117a <prvAddNewTaskToReadyList+0x36>
    1166:	d0 93 e1 0d 	sts	0x0DE1, r29	; 0x800de1 <pxCurrentTCB+0x1>
    116a:	c0 93 e0 0d 	sts	0x0DE0, r28	; 0x800de0 <pxCurrentTCB>
    116e:	80 91 36 0d 	lds	r24, 0x0D36	; 0x800d36 <uxCurrentNumberOfTasks>
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 f4       	brne	.+36     	; 0x119a <prvAddNewTaskToReadyList+0x56>
    1176:	bc df       	rcall	.-136    	; 0x10f0 <prvInitialiseTaskLists>
    1178:	10 c0       	rjmp	.+32     	; 0x119a <prvAddNewTaskToReadyList+0x56>
    117a:	80 91 30 0d 	lds	r24, 0x0D30	; 0x800d30 <xSchedulerRunning>
    117e:	81 11       	cpse	r24, r1
    1180:	0c c0       	rjmp	.+24     	; 0x119a <prvAddNewTaskToReadyList+0x56>
    1182:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1186:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    118a:	92 8d       	ldd	r25, Z+26	; 0x1a
    118c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    118e:	89 17       	cp	r24, r25
    1190:	20 f0       	brcs	.+8      	; 0x119a <prvAddNewTaskToReadyList+0x56>
    1192:	d0 93 e1 0d 	sts	0x0DE1, r29	; 0x800de1 <pxCurrentTCB+0x1>
    1196:	c0 93 e0 0d 	sts	0x0DE0, r28	; 0x800de0 <pxCurrentTCB>
    119a:	80 91 29 0d 	lds	r24, 0x0D29	; 0x800d29 <uxTaskNumber>
    119e:	8f 5f       	subi	r24, 0xFF	; 255
    11a0:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <uxTaskNumber>
    11a4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    11a6:	80 91 31 0d 	lds	r24, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    11aa:	8e 17       	cp	r24, r30
    11ac:	10 f4       	brcc	.+4      	; 0x11b2 <prvAddNewTaskToReadyList+0x6e>
    11ae:	e0 93 31 0d 	sts	0x0D31, r30	; 0x800d31 <uxTopReadyPriority>
    11b2:	8b e0       	ldi	r24, 0x0B	; 11
    11b4:	8e 9f       	mul	r24, r30
    11b6:	f0 01       	movw	r30, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	ee 58       	subi	r30, 0x8E	; 142
    11bc:	f2 4f       	sbci	r31, 0xF2	; 242
    11be:	01 80       	ldd	r0, Z+1	; 0x01
    11c0:	f2 81       	ldd	r31, Z+2	; 0x02
    11c2:	e0 2d       	mov	r30, r0
    11c4:	ff 83       	std	Y+7, r31	; 0x07
    11c6:	ee 83       	std	Y+6, r30	; 0x06
    11c8:	26 81       	ldd	r18, Z+6	; 0x06
    11ca:	37 81       	ldd	r19, Z+7	; 0x07
    11cc:	39 87       	std	Y+9, r19	; 0x09
    11ce:	28 87       	std	Y+8, r18	; 0x08
    11d0:	a6 81       	ldd	r26, Z+6	; 0x06
    11d2:	b7 81       	ldd	r27, Z+7	; 0x07
    11d4:	9e 01       	movw	r18, r28
    11d6:	2e 5f       	subi	r18, 0xFE	; 254
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	15 96       	adiw	r26, 0x05	; 5
    11dc:	3c 93       	st	X, r19
    11de:	2e 93       	st	-X, r18
    11e0:	14 97       	sbiw	r26, 0x04	; 4
    11e2:	37 83       	std	Z+7, r19	; 0x07
    11e4:	26 83       	std	Z+6, r18	; 0x06
    11e6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    11e8:	8e 9f       	mul	r24, r30
    11ea:	f0 01       	movw	r30, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	ee 58       	subi	r30, 0x8E	; 142
    11f0:	f2 4f       	sbci	r31, 0xF2	; 242
    11f2:	fd 87       	std	Y+13, r31	; 0x0d
    11f4:	ec 87       	std	Y+12, r30	; 0x0c
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	80 83       	st	Z, r24
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	80 91 30 0d 	lds	r24, 0x0D30	; 0x800d30 <xSchedulerRunning>
    1204:	88 23       	and	r24, r24
    1206:	49 f0       	breq	.+18     	; 0x121a <prvAddNewTaskToReadyList+0xd6>
    1208:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    120c:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1210:	92 8d       	ldd	r25, Z+26	; 0x1a
    1212:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1214:	98 17       	cp	r25, r24
    1216:	08 f4       	brcc	.+2      	; 0x121a <prvAddNewTaskToReadyList+0xd6>
    1218:	9b db       	rcall	.-2250   	; 0x950 <vPortYield>
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <prvAddCurrentTaskToDelayedList>:
    1220:	8f 92       	push	r8
    1222:	9f 92       	push	r9
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	6b 01       	movw	r12, r22
    1236:	7c 01       	movw	r14, r24
    1238:	c4 2f       	mov	r28, r20
    123a:	80 90 32 0d 	lds	r8, 0x0D32	; 0x800d32 <xTickCount>
    123e:	90 90 33 0d 	lds	r9, 0x0D33	; 0x800d33 <xTickCount+0x1>
    1242:	a0 90 34 0d 	lds	r10, 0x0D34	; 0x800d34 <xTickCount+0x2>
    1246:	b0 90 35 0d 	lds	r11, 0x0D35	; 0x800d35 <xTickCount+0x3>
    124a:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    124e:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1252:	02 96       	adiw	r24, 0x02	; 2
    1254:	3f db       	rcall	.-2434   	; 0x8d4 <uxListRemove>
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	c8 16       	cp	r12, r24
    125a:	d8 06       	cpc	r13, r24
    125c:	e8 06       	cpc	r14, r24
    125e:	f8 06       	cpc	r15, r24
    1260:	b1 f5       	brne	.+108    	; 0x12ce <prvAddCurrentTaskToDelayedList+0xae>
    1262:	cc 23       	and	r28, r28
    1264:	a1 f1       	breq	.+104    	; 0x12ce <prvAddCurrentTaskToDelayedList+0xae>
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	fd e0       	ldi	r31, 0x0D	; 13
    126a:	a1 81       	ldd	r26, Z+1	; 0x01
    126c:	b2 81       	ldd	r27, Z+2	; 0x02
    126e:	c0 91 e0 0d 	lds	r28, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1272:	d0 91 e1 0d 	lds	r29, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1276:	bf 83       	std	Y+7, r27	; 0x07
    1278:	ae 83       	std	Y+6, r26	; 0x06
    127a:	c0 91 e0 0d 	lds	r28, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    127e:	d0 91 e1 0d 	lds	r29, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1282:	16 96       	adiw	r26, 0x06	; 6
    1284:	8d 91       	ld	r24, X+
    1286:	9c 91       	ld	r25, X
    1288:	17 97       	sbiw	r26, 0x07	; 7
    128a:	99 87       	std	Y+9, r25	; 0x09
    128c:	88 87       	std	Y+8, r24	; 0x08
    128e:	16 96       	adiw	r26, 0x06	; 6
    1290:	cd 91       	ld	r28, X+
    1292:	dc 91       	ld	r29, X
    1294:	17 97       	sbiw	r26, 0x07	; 7
    1296:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    129a:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    129e:	02 96       	adiw	r24, 0x02	; 2
    12a0:	9d 83       	std	Y+5, r25	; 0x05
    12a2:	8c 83       	std	Y+4, r24	; 0x04
    12a4:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    12a8:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    12ac:	02 96       	adiw	r24, 0x02	; 2
    12ae:	17 96       	adiw	r26, 0x07	; 7
    12b0:	9c 93       	st	X, r25
    12b2:	8e 93       	st	-X, r24
    12b4:	16 97       	sbiw	r26, 0x06	; 6
    12b6:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    12ba:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    12be:	1d 96       	adiw	r26, 0x0d	; 13
    12c0:	fc 93       	st	X, r31
    12c2:	ee 93       	st	-X, r30
    12c4:	1c 97       	sbiw	r26, 0x0c	; 12
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	80 83       	st	Z, r24
    12cc:	3d c0       	rjmp	.+122    	; 0x1348 <prvAddCurrentTaskToDelayedList+0x128>
    12ce:	c8 0c       	add	r12, r8
    12d0:	d9 1c       	adc	r13, r9
    12d2:	ea 1c       	adc	r14, r10
    12d4:	fb 1c       	adc	r15, r11
    12d6:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    12da:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    12de:	c2 82       	std	Z+2, r12	; 0x02
    12e0:	d3 82       	std	Z+3, r13	; 0x03
    12e2:	e4 82       	std	Z+4, r14	; 0x04
    12e4:	f5 82       	std	Z+5, r15	; 0x05
    12e6:	c8 14       	cp	r12, r8
    12e8:	d9 04       	cpc	r13, r9
    12ea:	ea 04       	cpc	r14, r10
    12ec:	fb 04       	cpc	r15, r11
    12ee:	60 f4       	brcc	.+24     	; 0x1308 <prvAddCurrentTaskToDelayedList+0xe8>
    12f0:	60 91 e0 0d 	lds	r22, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    12f4:	70 91 e1 0d 	lds	r23, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    12f8:	80 91 58 0d 	lds	r24, 0x0D58	; 0x800d58 <pxOverflowDelayedTaskList>
    12fc:	90 91 59 0d 	lds	r25, 0x0D59	; 0x800d59 <pxOverflowDelayedTaskList+0x1>
    1300:	6e 5f       	subi	r22, 0xFE	; 254
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	aa da       	rcall	.-2732   	; 0x85a <vListInsert>
    1306:	20 c0       	rjmp	.+64     	; 0x1348 <prvAddCurrentTaskToDelayedList+0x128>
    1308:	60 91 e0 0d 	lds	r22, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    130c:	70 91 e1 0d 	lds	r23, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1310:	80 91 5a 0d 	lds	r24, 0x0D5A	; 0x800d5a <pxDelayedTaskList>
    1314:	90 91 5b 0d 	lds	r25, 0x0D5B	; 0x800d5b <pxDelayedTaskList+0x1>
    1318:	6e 5f       	subi	r22, 0xFE	; 254
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	9e da       	rcall	.-2756   	; 0x85a <vListInsert>
    131e:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <xNextTaskUnblockTime>
    1322:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <xNextTaskUnblockTime+0x1>
    1326:	a0 91 27 0d 	lds	r26, 0x0D27	; 0x800d27 <xNextTaskUnblockTime+0x2>
    132a:	b0 91 28 0d 	lds	r27, 0x0D28	; 0x800d28 <xNextTaskUnblockTime+0x3>
    132e:	c8 16       	cp	r12, r24
    1330:	d9 06       	cpc	r13, r25
    1332:	ea 06       	cpc	r14, r26
    1334:	fb 06       	cpc	r15, r27
    1336:	40 f4       	brcc	.+16     	; 0x1348 <prvAddCurrentTaskToDelayedList+0x128>
    1338:	c0 92 25 0d 	sts	0x0D25, r12	; 0x800d25 <xNextTaskUnblockTime>
    133c:	d0 92 26 0d 	sts	0x0D26, r13	; 0x800d26 <xNextTaskUnblockTime+0x1>
    1340:	e0 92 27 0d 	sts	0x0D27, r14	; 0x800d27 <xNextTaskUnblockTime+0x2>
    1344:	f0 92 28 0d 	sts	0x0D28, r15	; 0x800d28 <xNextTaskUnblockTime+0x3>
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	9f 90       	pop	r9
    135a:	8f 90       	pop	r8
    135c:	08 95       	ret

0000135e <xTaskCreate>:
    135e:	2f 92       	push	r2
    1360:	3f 92       	push	r3
    1362:	4f 92       	push	r4
    1364:	5f 92       	push	r5
    1366:	6f 92       	push	r6
    1368:	7f 92       	push	r7
    136a:	8f 92       	push	r8
    136c:	9f 92       	push	r9
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	3c 01       	movw	r6, r24
    1382:	1b 01       	movw	r2, r22
    1384:	4a 01       	movw	r8, r20
    1386:	29 01       	movw	r4, r18
    1388:	ca 01       	movw	r24, r20
    138a:	70 d9       	rcall	.-3360   	; 0x66c <pvPortMalloc>
    138c:	6c 01       	movw	r12, r24
    138e:	89 2b       	or	r24, r25
    1390:	61 f0       	breq	.+24     	; 0x13aa <xTaskCreate+0x4c>
    1392:	84 e3       	ldi	r24, 0x34	; 52
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	6a d9       	rcall	.-3372   	; 0x66c <pvPortMalloc>
    1398:	ec 01       	movw	r28, r24
    139a:	89 2b       	or	r24, r25
    139c:	19 f0       	breq	.+6      	; 0x13a4 <xTaskCreate+0x46>
    139e:	dc 8e       	std	Y+28, r13	; 0x1c
    13a0:	cb 8e       	std	Y+27, r12	; 0x1b
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <xTaskCreate+0x50>
    13a4:	c6 01       	movw	r24, r12
    13a6:	09 da       	rcall	.-3054   	; 0x7ba <vPortFree>
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <xTaskCreate+0x50>
    13aa:	c0 e0       	ldi	r28, 0x00	; 0
    13ac:	d0 e0       	ldi	r29, 0x00	; 0
    13ae:	20 97       	sbiw	r28, 0x00	; 0
    13b0:	61 f0       	breq	.+24     	; 0x13ca <xTaskCreate+0x6c>
    13b2:	a1 2c       	mov	r10, r1
    13b4:	b1 2c       	mov	r11, r1
    13b6:	6e 01       	movw	r12, r28
    13b8:	92 01       	movw	r18, r4
    13ba:	a4 01       	movw	r20, r8
    13bc:	b1 01       	movw	r22, r2
    13be:	c3 01       	movw	r24, r6
    13c0:	1c de       	rcall	.-968    	; 0xffa <prvInitialiseNewTask>
    13c2:	ce 01       	movw	r24, r28
    13c4:	bf de       	rcall	.-642    	; 0x1144 <prvAddNewTaskToReadyList>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <xTaskCreate+0x6e>
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	bf 90       	pop	r11
    13dc:	af 90       	pop	r10
    13de:	9f 90       	pop	r9
    13e0:	8f 90       	pop	r8
    13e2:	7f 90       	pop	r7
    13e4:	6f 90       	pop	r6
    13e6:	5f 90       	pop	r5
    13e8:	4f 90       	pop	r4
    13ea:	3f 90       	pop	r3
    13ec:	2f 90       	pop	r2
    13ee:	08 95       	ret

000013f0 <vTaskSuspendAll>:
    13f0:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <uxSchedulerSuspended>
    13f4:	8f 5f       	subi	r24, 0xFF	; 255
    13f6:	80 93 24 0d 	sts	0x0D24, r24	; 0x800d24 <uxSchedulerSuspended>
    13fa:	08 95       	ret

000013fc <xTaskIncrementTick>:
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <uxSchedulerSuspended>
    140c:	81 11       	cpse	r24, r1
    140e:	05 c1       	rjmp	.+522    	; 0x161a <xTaskIncrementTick+0x21e>
    1410:	c0 90 32 0d 	lds	r12, 0x0D32	; 0x800d32 <xTickCount>
    1414:	d0 90 33 0d 	lds	r13, 0x0D33	; 0x800d33 <xTickCount+0x1>
    1418:	e0 90 34 0d 	lds	r14, 0x0D34	; 0x800d34 <xTickCount+0x2>
    141c:	f0 90 35 0d 	lds	r15, 0x0D35	; 0x800d35 <xTickCount+0x3>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	c8 1a       	sub	r12, r24
    1424:	d8 0a       	sbc	r13, r24
    1426:	e8 0a       	sbc	r14, r24
    1428:	f8 0a       	sbc	r15, r24
    142a:	c0 92 32 0d 	sts	0x0D32, r12	; 0x800d32 <xTickCount>
    142e:	d0 92 33 0d 	sts	0x0D33, r13	; 0x800d33 <xTickCount+0x1>
    1432:	e0 92 34 0d 	sts	0x0D34, r14	; 0x800d34 <xTickCount+0x2>
    1436:	f0 92 35 0d 	sts	0x0D35, r15	; 0x800d35 <xTickCount+0x3>
    143a:	c1 14       	cp	r12, r1
    143c:	d1 04       	cpc	r13, r1
    143e:	e1 04       	cpc	r14, r1
    1440:	f1 04       	cpc	r15, r1
    1442:	b1 f4       	brne	.+44     	; 0x1470 <xTaskIncrementTick+0x74>
    1444:	80 91 5a 0d 	lds	r24, 0x0D5A	; 0x800d5a <pxDelayedTaskList>
    1448:	90 91 5b 0d 	lds	r25, 0x0D5B	; 0x800d5b <pxDelayedTaskList+0x1>
    144c:	20 91 58 0d 	lds	r18, 0x0D58	; 0x800d58 <pxOverflowDelayedTaskList>
    1450:	30 91 59 0d 	lds	r19, 0x0D59	; 0x800d59 <pxOverflowDelayedTaskList+0x1>
    1454:	30 93 5b 0d 	sts	0x0D5B, r19	; 0x800d5b <pxDelayedTaskList+0x1>
    1458:	20 93 5a 0d 	sts	0x0D5A, r18	; 0x800d5a <pxDelayedTaskList>
    145c:	90 93 59 0d 	sts	0x0D59, r25	; 0x800d59 <pxOverflowDelayedTaskList+0x1>
    1460:	80 93 58 0d 	sts	0x0D58, r24	; 0x800d58 <pxOverflowDelayedTaskList>
    1464:	80 91 2a 0d 	lds	r24, 0x0D2A	; 0x800d2a <xNumOfOverflows>
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <xNumOfOverflows>
    146e:	9e dd       	rcall	.-1220   	; 0xfac <prvResetNextTaskUnblockTime>
    1470:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <xNextTaskUnblockTime>
    1474:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <xNextTaskUnblockTime+0x1>
    1478:	a0 91 27 0d 	lds	r26, 0x0D27	; 0x800d27 <xNextTaskUnblockTime+0x2>
    147c:	b0 91 28 0d 	lds	r27, 0x0D28	; 0x800d28 <xNextTaskUnblockTime+0x3>
    1480:	c8 16       	cp	r12, r24
    1482:	d9 06       	cpc	r13, r25
    1484:	ea 06       	cpc	r14, r26
    1486:	fb 06       	cpc	r15, r27
    1488:	20 f4       	brcc	.+8      	; 0x1492 <xTaskIncrementTick+0x96>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	b2 c0       	rjmp	.+356    	; 0x15f2 <xTaskIncrementTick+0x1f6>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <xTaskIncrementTick+0x98>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	e0 91 5a 0d 	lds	r30, 0x0D5A	; 0x800d5a <pxDelayedTaskList>
    1498:	f0 91 5b 0d 	lds	r31, 0x0D5B	; 0x800d5b <pxDelayedTaskList+0x1>
    149c:	90 81       	ld	r25, Z
    149e:	91 11       	cpse	r25, r1
    14a0:	0c c0       	rjmp	.+24     	; 0x14ba <xTaskIncrementTick+0xbe>
    14a2:	4f ef       	ldi	r20, 0xFF	; 255
    14a4:	5f ef       	ldi	r21, 0xFF	; 255
    14a6:	ba 01       	movw	r22, r20
    14a8:	40 93 25 0d 	sts	0x0D25, r20	; 0x800d25 <xNextTaskUnblockTime>
    14ac:	50 93 26 0d 	sts	0x0D26, r21	; 0x800d26 <xNextTaskUnblockTime+0x1>
    14b0:	60 93 27 0d 	sts	0x0D27, r22	; 0x800d27 <xNextTaskUnblockTime+0x2>
    14b4:	70 93 28 0d 	sts	0x0D28, r23	; 0x800d28 <xNextTaskUnblockTime+0x3>
    14b8:	9c c0       	rjmp	.+312    	; 0x15f2 <xTaskIncrementTick+0x1f6>
    14ba:	e0 91 5a 0d 	lds	r30, 0x0D5A	; 0x800d5a <pxDelayedTaskList>
    14be:	f0 91 5b 0d 	lds	r31, 0x0D5B	; 0x800d5b <pxDelayedTaskList+0x1>
    14c2:	07 80       	ldd	r0, Z+7	; 0x07
    14c4:	f0 85       	ldd	r31, Z+8	; 0x08
    14c6:	e0 2d       	mov	r30, r0
    14c8:	00 84       	ldd	r0, Z+8	; 0x08
    14ca:	f1 85       	ldd	r31, Z+9	; 0x09
    14cc:	e0 2d       	mov	r30, r0
    14ce:	42 81       	ldd	r20, Z+2	; 0x02
    14d0:	53 81       	ldd	r21, Z+3	; 0x03
    14d2:	64 81       	ldd	r22, Z+4	; 0x04
    14d4:	75 81       	ldd	r23, Z+5	; 0x05
    14d6:	c4 16       	cp	r12, r20
    14d8:	d5 06       	cpc	r13, r21
    14da:	e6 06       	cpc	r14, r22
    14dc:	f7 06       	cpc	r15, r23
    14de:	48 f4       	brcc	.+18     	; 0x14f2 <xTaskIncrementTick+0xf6>
    14e0:	40 93 25 0d 	sts	0x0D25, r20	; 0x800d25 <xNextTaskUnblockTime>
    14e4:	50 93 26 0d 	sts	0x0D26, r21	; 0x800d26 <xNextTaskUnblockTime+0x1>
    14e8:	60 93 27 0d 	sts	0x0D27, r22	; 0x800d27 <xNextTaskUnblockTime+0x2>
    14ec:	70 93 28 0d 	sts	0x0D28, r23	; 0x800d28 <xNextTaskUnblockTime+0x3>
    14f0:	80 c0       	rjmp	.+256    	; 0x15f2 <xTaskIncrementTick+0x1f6>
    14f2:	a4 85       	ldd	r26, Z+12	; 0x0c
    14f4:	b5 85       	ldd	r27, Z+13	; 0x0d
    14f6:	c6 81       	ldd	r28, Z+6	; 0x06
    14f8:	d7 81       	ldd	r29, Z+7	; 0x07
    14fa:	20 85       	ldd	r18, Z+8	; 0x08
    14fc:	31 85       	ldd	r19, Z+9	; 0x09
    14fe:	3f 83       	std	Y+7, r19	; 0x07
    1500:	2e 83       	std	Y+6, r18	; 0x06
    1502:	c0 85       	ldd	r28, Z+8	; 0x08
    1504:	d1 85       	ldd	r29, Z+9	; 0x09
    1506:	26 81       	ldd	r18, Z+6	; 0x06
    1508:	37 81       	ldd	r19, Z+7	; 0x07
    150a:	3d 83       	std	Y+5, r19	; 0x05
    150c:	2c 83       	std	Y+4, r18	; 0x04
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	4d 91       	ld	r20, X+
    1512:	5c 91       	ld	r21, X
    1514:	12 97       	sbiw	r26, 0x02	; 2
    1516:	9f 01       	movw	r18, r30
    1518:	2e 5f       	subi	r18, 0xFE	; 254
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	42 17       	cp	r20, r18
    151e:	53 07       	cpc	r21, r19
    1520:	31 f4       	brne	.+12     	; 0x152e <xTaskIncrementTick+0x132>
    1522:	40 85       	ldd	r20, Z+8	; 0x08
    1524:	51 85       	ldd	r21, Z+9	; 0x09
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	5c 93       	st	X, r21
    152a:	4e 93       	st	-X, r20
    152c:	11 97       	sbiw	r26, 0x01	; 1
    152e:	15 86       	std	Z+13, r1	; 0x0d
    1530:	14 86       	std	Z+12, r1	; 0x0c
    1532:	9c 91       	ld	r25, X
    1534:	91 50       	subi	r25, 0x01	; 1
    1536:	9c 93       	st	X, r25
    1538:	a0 8d       	ldd	r26, Z+24	; 0x18
    153a:	b1 8d       	ldd	r27, Z+25	; 0x19
    153c:	10 97       	sbiw	r26, 0x00	; 0
    153e:	09 f1       	breq	.+66     	; 0x1582 <xTaskIncrementTick+0x186>
    1540:	c2 89       	ldd	r28, Z+18	; 0x12
    1542:	d3 89       	ldd	r29, Z+19	; 0x13
    1544:	44 89       	ldd	r20, Z+20	; 0x14
    1546:	55 89       	ldd	r21, Z+21	; 0x15
    1548:	5f 83       	std	Y+7, r21	; 0x07
    154a:	4e 83       	std	Y+6, r20	; 0x06
    154c:	c4 89       	ldd	r28, Z+20	; 0x14
    154e:	d5 89       	ldd	r29, Z+21	; 0x15
    1550:	42 89       	ldd	r20, Z+18	; 0x12
    1552:	53 89       	ldd	r21, Z+19	; 0x13
    1554:	5d 83       	std	Y+5, r21	; 0x05
    1556:	4c 83       	std	Y+4, r20	; 0x04
    1558:	11 96       	adiw	r26, 0x01	; 1
    155a:	6d 91       	ld	r22, X+
    155c:	7c 91       	ld	r23, X
    155e:	12 97       	sbiw	r26, 0x02	; 2
    1560:	af 01       	movw	r20, r30
    1562:	42 5f       	subi	r20, 0xF2	; 242
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
    1566:	64 17       	cp	r22, r20
    1568:	75 07       	cpc	r23, r21
    156a:	31 f4       	brne	.+12     	; 0x1578 <xTaskIncrementTick+0x17c>
    156c:	44 89       	ldd	r20, Z+20	; 0x14
    156e:	55 89       	ldd	r21, Z+21	; 0x15
    1570:	12 96       	adiw	r26, 0x02	; 2
    1572:	5c 93       	st	X, r21
    1574:	4e 93       	st	-X, r20
    1576:	11 97       	sbiw	r26, 0x01	; 1
    1578:	11 8e       	std	Z+25, r1	; 0x19
    157a:	10 8e       	std	Z+24, r1	; 0x18
    157c:	9c 91       	ld	r25, X
    157e:	91 50       	subi	r25, 0x01	; 1
    1580:	9c 93       	st	X, r25
    1582:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1584:	90 91 31 0d 	lds	r25, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    1588:	9a 17       	cp	r25, r26
    158a:	10 f4       	brcc	.+4      	; 0x1590 <xTaskIncrementTick+0x194>
    158c:	a0 93 31 0d 	sts	0x0D31, r26	; 0x800d31 <uxTopReadyPriority>
    1590:	9b e0       	ldi	r25, 0x0B	; 11
    1592:	9a 9f       	mul	r25, r26
    1594:	d0 01       	movw	r26, r0
    1596:	11 24       	eor	r1, r1
    1598:	ae 58       	subi	r26, 0x8E	; 142
    159a:	b2 4f       	sbci	r27, 0xF2	; 242
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	0d 90       	ld	r0, X+
    15a0:	bc 91       	ld	r27, X
    15a2:	a0 2d       	mov	r26, r0
    15a4:	b7 83       	std	Z+7, r27	; 0x07
    15a6:	a6 83       	std	Z+6, r26	; 0x06
    15a8:	16 96       	adiw	r26, 0x06	; 6
    15aa:	4d 91       	ld	r20, X+
    15ac:	5c 91       	ld	r21, X
    15ae:	17 97       	sbiw	r26, 0x07	; 7
    15b0:	51 87       	std	Z+9, r21	; 0x09
    15b2:	40 87       	std	Z+8, r20	; 0x08
    15b4:	16 96       	adiw	r26, 0x06	; 6
    15b6:	cd 91       	ld	r28, X+
    15b8:	dc 91       	ld	r29, X
    15ba:	17 97       	sbiw	r26, 0x07	; 7
    15bc:	3d 83       	std	Y+5, r19	; 0x05
    15be:	2c 83       	std	Y+4, r18	; 0x04
    15c0:	17 96       	adiw	r26, 0x07	; 7
    15c2:	3c 93       	st	X, r19
    15c4:	2e 93       	st	-X, r18
    15c6:	16 97       	sbiw	r26, 0x06	; 6
    15c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    15ca:	9a 9f       	mul	r25, r26
    15cc:	d0 01       	movw	r26, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	ae 58       	subi	r26, 0x8E	; 142
    15d2:	b2 4f       	sbci	r27, 0xF2	; 242
    15d4:	b5 87       	std	Z+13, r27	; 0x0d
    15d6:	a4 87       	std	Z+12, r26	; 0x0c
    15d8:	9c 91       	ld	r25, X
    15da:	9f 5f       	subi	r25, 0xFF	; 255
    15dc:	9c 93       	st	X, r25
    15de:	22 8d       	ldd	r18, Z+26	; 0x1a
    15e0:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    15e4:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    15e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    15ea:	29 17       	cp	r18, r25
    15ec:	08 f0       	brcs	.+2      	; 0x15f0 <xTaskIncrementTick+0x1f4>
    15ee:	4f cf       	rjmp	.-354    	; 0x148e <xTaskIncrementTick+0x92>
    15f0:	51 cf       	rjmp	.-350    	; 0x1494 <xTaskIncrementTick+0x98>
    15f2:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    15f6:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    15fa:	e2 8d       	ldd	r30, Z+26	; 0x1a
    15fc:	9b e0       	ldi	r25, 0x0B	; 11
    15fe:	e9 9f       	mul	r30, r25
    1600:	f0 01       	movw	r30, r0
    1602:	11 24       	eor	r1, r1
    1604:	ee 58       	subi	r30, 0x8E	; 142
    1606:	f2 4f       	sbci	r31, 0xF2	; 242
    1608:	90 81       	ld	r25, Z
    160a:	92 30       	cpi	r25, 0x02	; 2
    160c:	08 f0       	brcs	.+2      	; 0x1610 <xTaskIncrementTick+0x214>
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 91 2b 0d 	lds	r25, 0x0D2B	; 0x800d2b <xYieldPending>
    1614:	91 11       	cpse	r25, r1
    1616:	16 c0       	rjmp	.+44     	; 0x1644 <xTaskIncrementTick+0x248>
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <xTaskIncrementTick+0x24a>
    161a:	80 91 2c 0d 	lds	r24, 0x0D2C	; 0x800d2c <xPendedTicks>
    161e:	90 91 2d 0d 	lds	r25, 0x0D2D	; 0x800d2d <xPendedTicks+0x1>
    1622:	a0 91 2e 0d 	lds	r26, 0x0D2E	; 0x800d2e <xPendedTicks+0x2>
    1626:	b0 91 2f 0d 	lds	r27, 0x0D2F	; 0x800d2f <xPendedTicks+0x3>
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	a1 1d       	adc	r26, r1
    162e:	b1 1d       	adc	r27, r1
    1630:	80 93 2c 0d 	sts	0x0D2C, r24	; 0x800d2c <xPendedTicks>
    1634:	90 93 2d 0d 	sts	0x0D2D, r25	; 0x800d2d <xPendedTicks+0x1>
    1638:	a0 93 2e 0d 	sts	0x0D2E, r26	; 0x800d2e <xPendedTicks+0x2>
    163c:	b0 93 2f 0d 	sts	0x0D2F, r27	; 0x800d2f <xPendedTicks+0x3>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <xTaskIncrementTick+0x24a>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	08 95       	ret

00001654 <xTaskResumeAll>:
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	0f 92       	push	r0
    1666:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <uxSchedulerSuspended>
    166a:	81 50       	subi	r24, 0x01	; 1
    166c:	80 93 24 0d 	sts	0x0D24, r24	; 0x800d24 <uxSchedulerSuspended>
    1670:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <uxSchedulerSuspended>
    1674:	81 11       	cpse	r24, r1
    1676:	bd c0       	rjmp	.+378    	; 0x17f2 <xTaskResumeAll+0x19e>
    1678:	80 91 36 0d 	lds	r24, 0x0D36	; 0x800d36 <uxCurrentNumberOfTasks>
    167c:	81 11       	cpse	r24, r1
    167e:	88 c0       	rjmp	.+272    	; 0x1790 <xTaskResumeAll+0x13c>
    1680:	bb c0       	rjmp	.+374    	; 0x17f8 <xTaskResumeAll+0x1a4>
    1682:	e0 91 54 0d 	lds	r30, 0x0D54	; 0x800d54 <xPendingReadyList+0x7>
    1686:	f0 91 55 0d 	lds	r31, 0x0D55	; 0x800d55 <xPendingReadyList+0x8>
    168a:	00 84       	ldd	r0, Z+8	; 0x08
    168c:	f1 85       	ldd	r31, Z+9	; 0x09
    168e:	e0 2d       	mov	r30, r0
    1690:	a0 8d       	ldd	r26, Z+24	; 0x18
    1692:	b1 8d       	ldd	r27, Z+25	; 0x19
    1694:	c2 89       	ldd	r28, Z+18	; 0x12
    1696:	d3 89       	ldd	r29, Z+19	; 0x13
    1698:	84 89       	ldd	r24, Z+20	; 0x14
    169a:	95 89       	ldd	r25, Z+21	; 0x15
    169c:	9f 83       	std	Y+7, r25	; 0x07
    169e:	8e 83       	std	Y+6, r24	; 0x06
    16a0:	c4 89       	ldd	r28, Z+20	; 0x14
    16a2:	d5 89       	ldd	r29, Z+21	; 0x15
    16a4:	82 89       	ldd	r24, Z+18	; 0x12
    16a6:	93 89       	ldd	r25, Z+19	; 0x13
    16a8:	9d 83       	std	Y+5, r25	; 0x05
    16aa:	8c 83       	std	Y+4, r24	; 0x04
    16ac:	11 96       	adiw	r26, 0x01	; 1
    16ae:	2d 91       	ld	r18, X+
    16b0:	3c 91       	ld	r19, X
    16b2:	12 97       	sbiw	r26, 0x02	; 2
    16b4:	cf 01       	movw	r24, r30
    16b6:	0e 96       	adiw	r24, 0x0e	; 14
    16b8:	28 17       	cp	r18, r24
    16ba:	39 07       	cpc	r19, r25
    16bc:	31 f4       	brne	.+12     	; 0x16ca <xTaskResumeAll+0x76>
    16be:	84 89       	ldd	r24, Z+20	; 0x14
    16c0:	95 89       	ldd	r25, Z+21	; 0x15
    16c2:	12 96       	adiw	r26, 0x02	; 2
    16c4:	9c 93       	st	X, r25
    16c6:	8e 93       	st	-X, r24
    16c8:	11 97       	sbiw	r26, 0x01	; 1
    16ca:	11 8e       	std	Z+25, r1	; 0x19
    16cc:	10 8e       	std	Z+24, r1	; 0x18
    16ce:	8c 91       	ld	r24, X
    16d0:	81 50       	subi	r24, 0x01	; 1
    16d2:	8c 93       	st	X, r24
    16d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    16d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    16d8:	c6 81       	ldd	r28, Z+6	; 0x06
    16da:	d7 81       	ldd	r29, Z+7	; 0x07
    16dc:	80 85       	ldd	r24, Z+8	; 0x08
    16de:	91 85       	ldd	r25, Z+9	; 0x09
    16e0:	9f 83       	std	Y+7, r25	; 0x07
    16e2:	8e 83       	std	Y+6, r24	; 0x06
    16e4:	c0 85       	ldd	r28, Z+8	; 0x08
    16e6:	d1 85       	ldd	r29, Z+9	; 0x09
    16e8:	86 81       	ldd	r24, Z+6	; 0x06
    16ea:	97 81       	ldd	r25, Z+7	; 0x07
    16ec:	9d 83       	std	Y+5, r25	; 0x05
    16ee:	8c 83       	std	Y+4, r24	; 0x04
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	8d 91       	ld	r24, X+
    16f4:	9c 91       	ld	r25, X
    16f6:	12 97       	sbiw	r26, 0x02	; 2
    16f8:	9f 01       	movw	r18, r30
    16fa:	2e 5f       	subi	r18, 0xFE	; 254
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	82 17       	cp	r24, r18
    1700:	93 07       	cpc	r25, r19
    1702:	31 f4       	brne	.+12     	; 0x1710 <xTaskResumeAll+0xbc>
    1704:	80 85       	ldd	r24, Z+8	; 0x08
    1706:	91 85       	ldd	r25, Z+9	; 0x09
    1708:	12 96       	adiw	r26, 0x02	; 2
    170a:	9c 93       	st	X, r25
    170c:	8e 93       	st	-X, r24
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	15 86       	std	Z+13, r1	; 0x0d
    1712:	14 86       	std	Z+12, r1	; 0x0c
    1714:	8c 91       	ld	r24, X
    1716:	81 50       	subi	r24, 0x01	; 1
    1718:	8c 93       	st	X, r24
    171a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    171c:	80 91 31 0d 	lds	r24, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    1720:	8a 17       	cp	r24, r26
    1722:	10 f4       	brcc	.+4      	; 0x1728 <xTaskResumeAll+0xd4>
    1724:	a0 93 31 0d 	sts	0x0D31, r26	; 0x800d31 <uxTopReadyPriority>
    1728:	8b e0       	ldi	r24, 0x0B	; 11
    172a:	8a 9f       	mul	r24, r26
    172c:	d0 01       	movw	r26, r0
    172e:	11 24       	eor	r1, r1
    1730:	ae 58       	subi	r26, 0x8E	; 142
    1732:	b2 4f       	sbci	r27, 0xF2	; 242
    1734:	11 96       	adiw	r26, 0x01	; 1
    1736:	0d 90       	ld	r0, X+
    1738:	bc 91       	ld	r27, X
    173a:	a0 2d       	mov	r26, r0
    173c:	b7 83       	std	Z+7, r27	; 0x07
    173e:	a6 83       	std	Z+6, r26	; 0x06
    1740:	16 96       	adiw	r26, 0x06	; 6
    1742:	4d 91       	ld	r20, X+
    1744:	5c 91       	ld	r21, X
    1746:	17 97       	sbiw	r26, 0x07	; 7
    1748:	51 87       	std	Z+9, r21	; 0x09
    174a:	40 87       	std	Z+8, r20	; 0x08
    174c:	16 96       	adiw	r26, 0x06	; 6
    174e:	cd 91       	ld	r28, X+
    1750:	dc 91       	ld	r29, X
    1752:	17 97       	sbiw	r26, 0x07	; 7
    1754:	3d 83       	std	Y+5, r19	; 0x05
    1756:	2c 83       	std	Y+4, r18	; 0x04
    1758:	17 96       	adiw	r26, 0x07	; 7
    175a:	3c 93       	st	X, r19
    175c:	2e 93       	st	-X, r18
    175e:	16 97       	sbiw	r26, 0x06	; 6
    1760:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1762:	8a 9f       	mul	r24, r26
    1764:	d0 01       	movw	r26, r0
    1766:	11 24       	eor	r1, r1
    1768:	ae 58       	subi	r26, 0x8E	; 142
    176a:	b2 4f       	sbci	r27, 0xF2	; 242
    176c:	b5 87       	std	Z+13, r27	; 0x0d
    176e:	a4 87       	std	Z+12, r26	; 0x0c
    1770:	8c 91       	ld	r24, X
    1772:	8f 5f       	subi	r24, 0xFF	; 255
    1774:	8c 93       	st	X, r24
    1776:	92 8d       	ldd	r25, Z+26	; 0x1a
    1778:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    177c:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1780:	5a 96       	adiw	r26, 0x1a	; 26
    1782:	8c 91       	ld	r24, X
    1784:	98 17       	cp	r25, r24
    1786:	30 f0       	brcs	.+12     	; 0x1794 <xTaskResumeAll+0x140>
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	80 93 2b 0d 	sts	0x0D2B, r24	; 0x800d2b <xYieldPending>
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <xTaskResumeAll+0x140>
    1790:	e0 e0       	ldi	r30, 0x00	; 0
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 91 4d 0d 	lds	r24, 0x0D4D	; 0x800d4d <xPendingReadyList>
    1798:	81 11       	cpse	r24, r1
    179a:	73 cf       	rjmp	.-282    	; 0x1682 <xTaskResumeAll+0x2e>
    179c:	ef 2b       	or	r30, r31
    179e:	09 f0       	breq	.+2      	; 0x17a2 <xTaskResumeAll+0x14e>
    17a0:	05 dc       	rcall	.-2038   	; 0xfac <prvResetNextTaskUnblockTime>
    17a2:	c0 90 2c 0d 	lds	r12, 0x0D2C	; 0x800d2c <xPendedTicks>
    17a6:	d0 90 2d 0d 	lds	r13, 0x0D2D	; 0x800d2d <xPendedTicks+0x1>
    17aa:	e0 90 2e 0d 	lds	r14, 0x0D2E	; 0x800d2e <xPendedTicks+0x2>
    17ae:	f0 90 2f 0d 	lds	r15, 0x0D2F	; 0x800d2f <xPendedTicks+0x3>
    17b2:	c1 14       	cp	r12, r1
    17b4:	d1 04       	cpc	r13, r1
    17b6:	e1 04       	cpc	r14, r1
    17b8:	f1 04       	cpc	r15, r1
    17ba:	a1 f0       	breq	.+40     	; 0x17e4 <xTaskResumeAll+0x190>
    17bc:	1f de       	rcall	.-962    	; 0x13fc <xTaskIncrementTick>
    17be:	88 23       	and	r24, r24
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <xTaskResumeAll+0x174>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	80 93 2b 0d 	sts	0x0D2B, r24	; 0x800d2b <xYieldPending>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	c8 1a       	sub	r12, r24
    17cc:	d1 08       	sbc	r13, r1
    17ce:	e1 08       	sbc	r14, r1
    17d0:	f1 08       	sbc	r15, r1
    17d2:	a1 f7       	brne	.-24     	; 0x17bc <xTaskResumeAll+0x168>
    17d4:	10 92 2c 0d 	sts	0x0D2C, r1	; 0x800d2c <xPendedTicks>
    17d8:	10 92 2d 0d 	sts	0x0D2D, r1	; 0x800d2d <xPendedTicks+0x1>
    17dc:	10 92 2e 0d 	sts	0x0D2E, r1	; 0x800d2e <xPendedTicks+0x2>
    17e0:	10 92 2f 0d 	sts	0x0D2F, r1	; 0x800d2f <xPendedTicks+0x3>
    17e4:	80 91 2b 0d 	lds	r24, 0x0D2B	; 0x800d2b <xYieldPending>
    17e8:	88 23       	and	r24, r24
    17ea:	29 f0       	breq	.+10     	; 0x17f6 <xTaskResumeAll+0x1a2>
    17ec:	b1 d8       	rcall	.-3742   	; 0x950 <vPortYield>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <xTaskResumeAll+0x1a4>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <xTaskResumeAll+0x1a4>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0f 90       	pop	r0
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	08 95       	ret

0000180a <vTaskDelay>:
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	6b 01       	movw	r12, r22
    1814:	7c 01       	movw	r14, r24
    1816:	67 2b       	or	r22, r23
    1818:	68 2b       	or	r22, r24
    181a:	69 2b       	or	r22, r25
    181c:	39 f0       	breq	.+14     	; 0x182c <vTaskDelay+0x22>
    181e:	e8 dd       	rcall	.-1072   	; 0x13f0 <vTaskSuspendAll>
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	c7 01       	movw	r24, r14
    1824:	b6 01       	movw	r22, r12
    1826:	fc dc       	rcall	.-1544   	; 0x1220 <prvAddCurrentTaskToDelayedList>
    1828:	15 df       	rcall	.-470    	; 0x1654 <xTaskResumeAll>
    182a:	01 c0       	rjmp	.+2      	; 0x182e <vTaskDelay+0x24>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	81 11       	cpse	r24, r1
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <vTaskDelay+0x2a>
    1832:	8e d8       	rcall	.-3812   	; 0x950 <vPortYield>
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	08 95       	ret

0000183e <vTaskSwitchContext>:
    183e:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <uxSchedulerSuspended>
    1842:	88 23       	and	r24, r24
    1844:	21 f0       	breq	.+8      	; 0x184e <vTaskSwitchContext+0x10>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 2b 0d 	sts	0x0D2B, r24	; 0x800d2b <xYieldPending>
    184c:	08 95       	ret
    184e:	10 92 2b 0d 	sts	0x0D2B, r1	; 0x800d2b <xYieldPending>
    1852:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1856:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    185a:	20 81       	ld	r18, Z
    185c:	31 81       	ldd	r19, Z+1	; 0x01
    185e:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1862:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1866:	83 8d       	ldd	r24, Z+27	; 0x1b
    1868:	94 8d       	ldd	r25, Z+28	; 0x1c
    186a:	82 17       	cp	r24, r18
    186c:	93 07       	cpc	r25, r19
    186e:	58 f0       	brcs	.+22     	; 0x1886 <vTaskSwitchContext+0x48>
    1870:	60 91 e0 0d 	lds	r22, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1874:	70 91 e1 0d 	lds	r23, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1878:	63 5e       	subi	r22, 0xE3	; 227
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1880:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1884:	01 d4       	rcall	.+2050   	; 0x2088 <vApplicationStackOverflowHook>
    1886:	80 91 31 0d 	lds	r24, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    188a:	01 c0       	rjmp	.+2      	; 0x188e <vTaskSwitchContext+0x50>
    188c:	81 50       	subi	r24, 0x01	; 1
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	9b e0       	ldi	r25, 0x0B	; 11
    1894:	92 9f       	mul	r25, r18
    1896:	f0 01       	movw	r30, r0
    1898:	93 9f       	mul	r25, r19
    189a:	f0 0d       	add	r31, r0
    189c:	11 24       	eor	r1, r1
    189e:	ee 58       	subi	r30, 0x8E	; 142
    18a0:	f2 4f       	sbci	r31, 0xF2	; 242
    18a2:	90 81       	ld	r25, Z
    18a4:	99 23       	and	r25, r25
    18a6:	91 f3       	breq	.-28     	; 0x188c <vTaskSwitchContext+0x4e>
    18a8:	9b e0       	ldi	r25, 0x0B	; 11
    18aa:	92 9f       	mul	r25, r18
    18ac:	a0 01       	movw	r20, r0
    18ae:	93 9f       	mul	r25, r19
    18b0:	50 0d       	add	r21, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	df 01       	movw	r26, r30
    18b6:	01 80       	ldd	r0, Z+1	; 0x01
    18b8:	f2 81       	ldd	r31, Z+2	; 0x02
    18ba:	e0 2d       	mov	r30, r0
    18bc:	04 80       	ldd	r0, Z+4	; 0x04
    18be:	f5 81       	ldd	r31, Z+5	; 0x05
    18c0:	e0 2d       	mov	r30, r0
    18c2:	12 96       	adiw	r26, 0x02	; 2
    18c4:	fc 93       	st	X, r31
    18c6:	ee 93       	st	-X, r30
    18c8:	11 97       	sbiw	r26, 0x01	; 1
    18ca:	4b 58       	subi	r20, 0x8B	; 139
    18cc:	52 4f       	sbci	r21, 0xF2	; 242
    18ce:	e4 17       	cp	r30, r20
    18d0:	f5 07       	cpc	r31, r21
    18d2:	29 f4       	brne	.+10     	; 0x18de <vTaskSwitchContext+0xa0>
    18d4:	44 81       	ldd	r20, Z+4	; 0x04
    18d6:	55 81       	ldd	r21, Z+5	; 0x05
    18d8:	fd 01       	movw	r30, r26
    18da:	52 83       	std	Z+2, r21	; 0x02
    18dc:	41 83       	std	Z+1, r20	; 0x01
    18de:	9b e0       	ldi	r25, 0x0B	; 11
    18e0:	92 9f       	mul	r25, r18
    18e2:	f0 01       	movw	r30, r0
    18e4:	93 9f       	mul	r25, r19
    18e6:	f0 0d       	add	r31, r0
    18e8:	11 24       	eor	r1, r1
    18ea:	ee 58       	subi	r30, 0x8E	; 142
    18ec:	f2 4f       	sbci	r31, 0xF2	; 242
    18ee:	01 80       	ldd	r0, Z+1	; 0x01
    18f0:	f2 81       	ldd	r31, Z+2	; 0x02
    18f2:	e0 2d       	mov	r30, r0
    18f4:	20 85       	ldd	r18, Z+8	; 0x08
    18f6:	31 85       	ldd	r19, Z+9	; 0x09
    18f8:	30 93 e1 0d 	sts	0x0DE1, r19	; 0x800de1 <pxCurrentTCB+0x1>
    18fc:	20 93 e0 0d 	sts	0x0DE0, r18	; 0x800de0 <pxCurrentTCB>
    1900:	80 93 31 0d 	sts	0x0D31, r24	; 0x800d31 <uxTopReadyPriority>
    1904:	08 95       	ret

00001906 <vTaskPlaceOnEventList>:
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	6a 01       	movw	r12, r20
    1910:	7b 01       	movw	r14, r22
    1912:	60 91 e0 0d 	lds	r22, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1916:	70 91 e1 0d 	lds	r23, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    191a:	62 5f       	subi	r22, 0xF2	; 242
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	0e 94 2d 04 	call	0x85a	; 0x85a <vListInsert>
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	c7 01       	movw	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	7b dc       	rcall	.-1802   	; 0x1220 <prvAddCurrentTaskToDelayedList>
    192a:	ff 90       	pop	r15
    192c:	ef 90       	pop	r14
    192e:	df 90       	pop	r13
    1930:	cf 90       	pop	r12
    1932:	08 95       	ret

00001934 <vTaskPlaceOnUnorderedEventList>:
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	fc 01       	movw	r30, r24
    193e:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1942:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1946:	70 68       	ori	r23, 0x80	; 128
    1948:	1e 96       	adiw	r26, 0x0e	; 14
    194a:	4d 93       	st	X+, r20
    194c:	5d 93       	st	X+, r21
    194e:	6d 93       	st	X+, r22
    1950:	7c 93       	st	X, r23
    1952:	51 97       	sbiw	r26, 0x11	; 17
    1954:	a1 81       	ldd	r26, Z+1	; 0x01
    1956:	b2 81       	ldd	r27, Z+2	; 0x02
    1958:	c0 91 e0 0d 	lds	r28, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    195c:	d0 91 e1 0d 	lds	r29, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1960:	bb 8b       	std	Y+19, r27	; 0x13
    1962:	aa 8b       	std	Y+18, r26	; 0x12
    1964:	c0 91 e0 0d 	lds	r28, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1968:	d0 91 e1 0d 	lds	r29, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    196c:	16 96       	adiw	r26, 0x06	; 6
    196e:	8d 91       	ld	r24, X+
    1970:	9c 91       	ld	r25, X
    1972:	17 97       	sbiw	r26, 0x07	; 7
    1974:	9d 8b       	std	Y+21, r25	; 0x15
    1976:	8c 8b       	std	Y+20, r24	; 0x14
    1978:	16 96       	adiw	r26, 0x06	; 6
    197a:	cd 91       	ld	r28, X+
    197c:	dc 91       	ld	r29, X
    197e:	17 97       	sbiw	r26, 0x07	; 7
    1980:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1984:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1988:	0e 96       	adiw	r24, 0x0e	; 14
    198a:	9d 83       	std	Y+5, r25	; 0x05
    198c:	8c 83       	std	Y+4, r24	; 0x04
    198e:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1992:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1996:	0e 96       	adiw	r24, 0x0e	; 14
    1998:	17 96       	adiw	r26, 0x07	; 7
    199a:	9c 93       	st	X, r25
    199c:	8e 93       	st	-X, r24
    199e:	16 97       	sbiw	r26, 0x06	; 6
    19a0:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    19a4:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    19a8:	59 96       	adiw	r26, 0x19	; 25
    19aa:	fc 93       	st	X, r31
    19ac:	ee 93       	st	-X, r30
    19ae:	58 97       	sbiw	r26, 0x18	; 24
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	80 83       	st	Z, r24
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	c9 01       	movw	r24, r18
    19ba:	b8 01       	movw	r22, r16
    19bc:	31 dc       	rcall	.-1950   	; 0x1220 <prvAddCurrentTaskToDelayedList>
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	08 95       	ret

000019c8 <xTaskRemoveFromEventList>:
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	dc 01       	movw	r26, r24
    19ce:	17 96       	adiw	r26, 0x07	; 7
    19d0:	ed 91       	ld	r30, X+
    19d2:	fc 91       	ld	r31, X
    19d4:	18 97       	sbiw	r26, 0x08	; 8
    19d6:	00 84       	ldd	r0, Z+8	; 0x08
    19d8:	f1 85       	ldd	r31, Z+9	; 0x09
    19da:	e0 2d       	mov	r30, r0
    19dc:	a0 8d       	ldd	r26, Z+24	; 0x18
    19de:	b1 8d       	ldd	r27, Z+25	; 0x19
    19e0:	c2 89       	ldd	r28, Z+18	; 0x12
    19e2:	d3 89       	ldd	r29, Z+19	; 0x13
    19e4:	84 89       	ldd	r24, Z+20	; 0x14
    19e6:	95 89       	ldd	r25, Z+21	; 0x15
    19e8:	9f 83       	std	Y+7, r25	; 0x07
    19ea:	8e 83       	std	Y+6, r24	; 0x06
    19ec:	c4 89       	ldd	r28, Z+20	; 0x14
    19ee:	d5 89       	ldd	r29, Z+21	; 0x15
    19f0:	82 89       	ldd	r24, Z+18	; 0x12
    19f2:	93 89       	ldd	r25, Z+19	; 0x13
    19f4:	9d 83       	std	Y+5, r25	; 0x05
    19f6:	8c 83       	std	Y+4, r24	; 0x04
    19f8:	11 96       	adiw	r26, 0x01	; 1
    19fa:	8d 91       	ld	r24, X+
    19fc:	9c 91       	ld	r25, X
    19fe:	12 97       	sbiw	r26, 0x02	; 2
    1a00:	9f 01       	movw	r18, r30
    1a02:	22 5f       	subi	r18, 0xF2	; 242
    1a04:	3f 4f       	sbci	r19, 0xFF	; 255
    1a06:	82 17       	cp	r24, r18
    1a08:	93 07       	cpc	r25, r19
    1a0a:	31 f4       	brne	.+12     	; 0x1a18 <xTaskRemoveFromEventList+0x50>
    1a0c:	84 89       	ldd	r24, Z+20	; 0x14
    1a0e:	95 89       	ldd	r25, Z+21	; 0x15
    1a10:	12 96       	adiw	r26, 0x02	; 2
    1a12:	9c 93       	st	X, r25
    1a14:	8e 93       	st	-X, r24
    1a16:	11 97       	sbiw	r26, 0x01	; 1
    1a18:	11 8e       	std	Z+25, r1	; 0x19
    1a1a:	10 8e       	std	Z+24, r1	; 0x18
    1a1c:	8c 91       	ld	r24, X
    1a1e:	81 50       	subi	r24, 0x01	; 1
    1a20:	8c 93       	st	X, r24
    1a22:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <uxSchedulerSuspended>
    1a26:	81 11       	cpse	r24, r1
    1a28:	52 c0       	rjmp	.+164    	; 0x1ace <xTaskRemoveFromEventList+0x106>
    1a2a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a2c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a2e:	c6 81       	ldd	r28, Z+6	; 0x06
    1a30:	d7 81       	ldd	r29, Z+7	; 0x07
    1a32:	80 85       	ldd	r24, Z+8	; 0x08
    1a34:	91 85       	ldd	r25, Z+9	; 0x09
    1a36:	9f 83       	std	Y+7, r25	; 0x07
    1a38:	8e 83       	std	Y+6, r24	; 0x06
    1a3a:	c0 85       	ldd	r28, Z+8	; 0x08
    1a3c:	d1 85       	ldd	r29, Z+9	; 0x09
    1a3e:	86 81       	ldd	r24, Z+6	; 0x06
    1a40:	97 81       	ldd	r25, Z+7	; 0x07
    1a42:	9d 83       	std	Y+5, r25	; 0x05
    1a44:	8c 83       	std	Y+4, r24	; 0x04
    1a46:	11 96       	adiw	r26, 0x01	; 1
    1a48:	8d 91       	ld	r24, X+
    1a4a:	9c 91       	ld	r25, X
    1a4c:	12 97       	sbiw	r26, 0x02	; 2
    1a4e:	9f 01       	movw	r18, r30
    1a50:	2e 5f       	subi	r18, 0xFE	; 254
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	82 17       	cp	r24, r18
    1a56:	93 07       	cpc	r25, r19
    1a58:	31 f4       	brne	.+12     	; 0x1a66 <xTaskRemoveFromEventList+0x9e>
    1a5a:	80 85       	ldd	r24, Z+8	; 0x08
    1a5c:	91 85       	ldd	r25, Z+9	; 0x09
    1a5e:	12 96       	adiw	r26, 0x02	; 2
    1a60:	9c 93       	st	X, r25
    1a62:	8e 93       	st	-X, r24
    1a64:	11 97       	sbiw	r26, 0x01	; 1
    1a66:	15 86       	std	Z+13, r1	; 0x0d
    1a68:	14 86       	std	Z+12, r1	; 0x0c
    1a6a:	8c 91       	ld	r24, X
    1a6c:	81 50       	subi	r24, 0x01	; 1
    1a6e:	8c 93       	st	X, r24
    1a70:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a72:	80 91 31 0d 	lds	r24, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    1a76:	8a 17       	cp	r24, r26
    1a78:	10 f4       	brcc	.+4      	; 0x1a7e <xTaskRemoveFromEventList+0xb6>
    1a7a:	a0 93 31 0d 	sts	0x0D31, r26	; 0x800d31 <uxTopReadyPriority>
    1a7e:	8b e0       	ldi	r24, 0x0B	; 11
    1a80:	8a 9f       	mul	r24, r26
    1a82:	d0 01       	movw	r26, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	ae 58       	subi	r26, 0x8E	; 142
    1a88:	b2 4f       	sbci	r27, 0xF2	; 242
    1a8a:	11 96       	adiw	r26, 0x01	; 1
    1a8c:	0d 90       	ld	r0, X+
    1a8e:	bc 91       	ld	r27, X
    1a90:	a0 2d       	mov	r26, r0
    1a92:	b7 83       	std	Z+7, r27	; 0x07
    1a94:	a6 83       	std	Z+6, r26	; 0x06
    1a96:	16 96       	adiw	r26, 0x06	; 6
    1a98:	4d 91       	ld	r20, X+
    1a9a:	5c 91       	ld	r21, X
    1a9c:	17 97       	sbiw	r26, 0x07	; 7
    1a9e:	51 87       	std	Z+9, r21	; 0x09
    1aa0:	40 87       	std	Z+8, r20	; 0x08
    1aa2:	16 96       	adiw	r26, 0x06	; 6
    1aa4:	cd 91       	ld	r28, X+
    1aa6:	dc 91       	ld	r29, X
    1aa8:	17 97       	sbiw	r26, 0x07	; 7
    1aaa:	3d 83       	std	Y+5, r19	; 0x05
    1aac:	2c 83       	std	Y+4, r18	; 0x04
    1aae:	17 96       	adiw	r26, 0x07	; 7
    1ab0:	3c 93       	st	X, r19
    1ab2:	2e 93       	st	-X, r18
    1ab4:	16 97       	sbiw	r26, 0x06	; 6
    1ab6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ab8:	8a 9f       	mul	r24, r26
    1aba:	d0 01       	movw	r26, r0
    1abc:	11 24       	eor	r1, r1
    1abe:	ae 58       	subi	r26, 0x8E	; 142
    1ac0:	b2 4f       	sbci	r27, 0xF2	; 242
    1ac2:	b5 87       	std	Z+13, r27	; 0x0d
    1ac4:	a4 87       	std	Z+12, r26	; 0x0c
    1ac6:	8c 91       	ld	r24, X
    1ac8:	8f 5f       	subi	r24, 0xFF	; 255
    1aca:	8c 93       	st	X, r24
    1acc:	1c c0       	rjmp	.+56     	; 0x1b06 <xTaskRemoveFromEventList+0x13e>
    1ace:	4d e4       	ldi	r20, 0x4D	; 77
    1ad0:	5d e0       	ldi	r21, 0x0D	; 13
    1ad2:	da 01       	movw	r26, r20
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	cd 91       	ld	r28, X+
    1ad8:	dc 91       	ld	r29, X
    1ada:	12 97       	sbiw	r26, 0x02	; 2
    1adc:	d3 8b       	std	Z+19, r29	; 0x13
    1ade:	c2 8b       	std	Z+18, r28	; 0x12
    1ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae4:	95 8b       	std	Z+21, r25	; 0x15
    1ae6:	84 8b       	std	Z+20, r24	; 0x14
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	dc 01       	movw	r26, r24
    1aee:	15 96       	adiw	r26, 0x05	; 5
    1af0:	3c 93       	st	X, r19
    1af2:	2e 93       	st	-X, r18
    1af4:	14 97       	sbiw	r26, 0x04	; 4
    1af6:	3f 83       	std	Y+7, r19	; 0x07
    1af8:	2e 83       	std	Y+6, r18	; 0x06
    1afa:	51 8f       	std	Z+25, r21	; 0x19
    1afc:	40 8f       	std	Z+24, r20	; 0x18
    1afe:	da 01       	movw	r26, r20
    1b00:	8c 91       	ld	r24, X
    1b02:	8f 5f       	subi	r24, 0xFF	; 255
    1b04:	8c 93       	st	X, r24
    1b06:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b08:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1b0c:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1b10:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b12:	89 17       	cp	r24, r25
    1b14:	20 f4       	brcc	.+8      	; 0x1b1e <xTaskRemoveFromEventList+0x156>
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 2b 0d 	sts	0x0D2B, r24	; 0x800d2b <xYieldPending>
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <xTaskRemoveFromEventList+0x158>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

00001b26 <vTaskRemoveFromUnorderedEventList>:
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	70 68       	ori	r23, 0x80	; 128
    1b2e:	4d 93       	st	X+, r20
    1b30:	5d 93       	st	X+, r21
    1b32:	6d 93       	st	X+, r22
    1b34:	7c 93       	st	X, r23
    1b36:	13 97       	sbiw	r26, 0x03	; 3
    1b38:	18 96       	adiw	r26, 0x08	; 8
    1b3a:	ed 91       	ld	r30, X+
    1b3c:	fc 91       	ld	r31, X
    1b3e:	19 97       	sbiw	r26, 0x09	; 9
    1b40:	1a 96       	adiw	r26, 0x0a	; 10
    1b42:	4d 91       	ld	r20, X+
    1b44:	5c 91       	ld	r21, X
    1b46:	1b 97       	sbiw	r26, 0x0b	; 11
    1b48:	14 96       	adiw	r26, 0x04	; 4
    1b4a:	8d 91       	ld	r24, X+
    1b4c:	9c 91       	ld	r25, X
    1b4e:	15 97       	sbiw	r26, 0x05	; 5
    1b50:	16 96       	adiw	r26, 0x06	; 6
    1b52:	2d 91       	ld	r18, X+
    1b54:	3c 91       	ld	r19, X
    1b56:	17 97       	sbiw	r26, 0x07	; 7
    1b58:	ec 01       	movw	r28, r24
    1b5a:	3f 83       	std	Y+7, r19	; 0x07
    1b5c:	2e 83       	std	Y+6, r18	; 0x06
    1b5e:	16 96       	adiw	r26, 0x06	; 6
    1b60:	8d 91       	ld	r24, X+
    1b62:	9c 91       	ld	r25, X
    1b64:	17 97       	sbiw	r26, 0x07	; 7
    1b66:	14 96       	adiw	r26, 0x04	; 4
    1b68:	2d 91       	ld	r18, X+
    1b6a:	3c 91       	ld	r19, X
    1b6c:	15 97       	sbiw	r26, 0x05	; 5
    1b6e:	ec 01       	movw	r28, r24
    1b70:	3d 83       	std	Y+5, r19	; 0x05
    1b72:	2c 83       	std	Y+4, r18	; 0x04
    1b74:	ea 01       	movw	r28, r20
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	a8 17       	cp	r26, r24
    1b7c:	b9 07       	cpc	r27, r25
    1b7e:	31 f4       	brne	.+12     	; 0x1b8c <vTaskRemoveFromUnorderedEventList+0x66>
    1b80:	16 96       	adiw	r26, 0x06	; 6
    1b82:	8d 91       	ld	r24, X+
    1b84:	9c 91       	ld	r25, X
    1b86:	17 97       	sbiw	r26, 0x07	; 7
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	1b 96       	adiw	r26, 0x0b	; 11
    1b8e:	1c 92       	st	X, r1
    1b90:	1e 92       	st	-X, r1
    1b92:	1a 97       	sbiw	r26, 0x0a	; 10
    1b94:	da 01       	movw	r26, r20
    1b96:	8c 91       	ld	r24, X
    1b98:	81 50       	subi	r24, 0x01	; 1
    1b9a:	8c 93       	st	X, r24
    1b9c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b9e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ba0:	c6 81       	ldd	r28, Z+6	; 0x06
    1ba2:	d7 81       	ldd	r29, Z+7	; 0x07
    1ba4:	80 85       	ldd	r24, Z+8	; 0x08
    1ba6:	91 85       	ldd	r25, Z+9	; 0x09
    1ba8:	9f 83       	std	Y+7, r25	; 0x07
    1baa:	8e 83       	std	Y+6, r24	; 0x06
    1bac:	c0 85       	ldd	r28, Z+8	; 0x08
    1bae:	d1 85       	ldd	r29, Z+9	; 0x09
    1bb0:	86 81       	ldd	r24, Z+6	; 0x06
    1bb2:	97 81       	ldd	r25, Z+7	; 0x07
    1bb4:	9d 83       	std	Y+5, r25	; 0x05
    1bb6:	8c 83       	std	Y+4, r24	; 0x04
    1bb8:	11 96       	adiw	r26, 0x01	; 1
    1bba:	8d 91       	ld	r24, X+
    1bbc:	9c 91       	ld	r25, X
    1bbe:	12 97       	sbiw	r26, 0x02	; 2
    1bc0:	9f 01       	movw	r18, r30
    1bc2:	2e 5f       	subi	r18, 0xFE	; 254
    1bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc6:	82 17       	cp	r24, r18
    1bc8:	93 07       	cpc	r25, r19
    1bca:	31 f4       	brne	.+12     	; 0x1bd8 <vTaskRemoveFromUnorderedEventList+0xb2>
    1bcc:	80 85       	ldd	r24, Z+8	; 0x08
    1bce:	91 85       	ldd	r25, Z+9	; 0x09
    1bd0:	12 96       	adiw	r26, 0x02	; 2
    1bd2:	9c 93       	st	X, r25
    1bd4:	8e 93       	st	-X, r24
    1bd6:	11 97       	sbiw	r26, 0x01	; 1
    1bd8:	15 86       	std	Z+13, r1	; 0x0d
    1bda:	14 86       	std	Z+12, r1	; 0x0c
    1bdc:	8c 91       	ld	r24, X
    1bde:	81 50       	subi	r24, 0x01	; 1
    1be0:	8c 93       	st	X, r24
    1be2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1be4:	80 91 31 0d 	lds	r24, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    1be8:	8a 17       	cp	r24, r26
    1bea:	10 f4       	brcc	.+4      	; 0x1bf0 <vTaskRemoveFromUnorderedEventList+0xca>
    1bec:	a0 93 31 0d 	sts	0x0D31, r26	; 0x800d31 <uxTopReadyPriority>
    1bf0:	8b e0       	ldi	r24, 0x0B	; 11
    1bf2:	8a 9f       	mul	r24, r26
    1bf4:	d0 01       	movw	r26, r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	ae 58       	subi	r26, 0x8E	; 142
    1bfa:	b2 4f       	sbci	r27, 0xF2	; 242
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	0d 90       	ld	r0, X+
    1c00:	bc 91       	ld	r27, X
    1c02:	a0 2d       	mov	r26, r0
    1c04:	b7 83       	std	Z+7, r27	; 0x07
    1c06:	a6 83       	std	Z+6, r26	; 0x06
    1c08:	16 96       	adiw	r26, 0x06	; 6
    1c0a:	4d 91       	ld	r20, X+
    1c0c:	5c 91       	ld	r21, X
    1c0e:	17 97       	sbiw	r26, 0x07	; 7
    1c10:	51 87       	std	Z+9, r21	; 0x09
    1c12:	40 87       	std	Z+8, r20	; 0x08
    1c14:	16 96       	adiw	r26, 0x06	; 6
    1c16:	cd 91       	ld	r28, X+
    1c18:	dc 91       	ld	r29, X
    1c1a:	17 97       	sbiw	r26, 0x07	; 7
    1c1c:	3d 83       	std	Y+5, r19	; 0x05
    1c1e:	2c 83       	std	Y+4, r18	; 0x04
    1c20:	17 96       	adiw	r26, 0x07	; 7
    1c22:	3c 93       	st	X, r19
    1c24:	2e 93       	st	-X, r18
    1c26:	16 97       	sbiw	r26, 0x06	; 6
    1c28:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c2a:	8a 9f       	mul	r24, r26
    1c2c:	d0 01       	movw	r26, r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	ae 58       	subi	r26, 0x8E	; 142
    1c32:	b2 4f       	sbci	r27, 0xF2	; 242
    1c34:	b5 87       	std	Z+13, r27	; 0x0d
    1c36:	a4 87       	std	Z+12, r26	; 0x0c
    1c38:	8c 91       	ld	r24, X
    1c3a:	8f 5f       	subi	r24, 0xFF	; 255
    1c3c:	8c 93       	st	X, r24
    1c3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c40:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1c44:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1c48:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c4a:	89 17       	cp	r24, r25
    1c4c:	18 f4       	brcc	.+6      	; 0x1c54 <vTaskRemoveFromUnorderedEventList+0x12e>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	80 93 2b 0d 	sts	0x0D2B, r24	; 0x800d2b <xYieldPending>
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <vTaskInternalSetTimeOutState>:
    1c5a:	20 91 2a 0d 	lds	r18, 0x0D2A	; 0x800d2a <xNumOfOverflows>
    1c5e:	fc 01       	movw	r30, r24
    1c60:	20 83       	st	Z, r18
    1c62:	40 91 32 0d 	lds	r20, 0x0D32	; 0x800d32 <xTickCount>
    1c66:	50 91 33 0d 	lds	r21, 0x0D33	; 0x800d33 <xTickCount+0x1>
    1c6a:	60 91 34 0d 	lds	r22, 0x0D34	; 0x800d34 <xTickCount+0x2>
    1c6e:	70 91 35 0d 	lds	r23, 0x0D35	; 0x800d35 <xTickCount+0x3>
    1c72:	41 83       	std	Z+1, r20	; 0x01
    1c74:	52 83       	std	Z+2, r21	; 0x02
    1c76:	63 83       	std	Z+3, r22	; 0x03
    1c78:	74 83       	std	Z+4, r23	; 0x04
    1c7a:	08 95       	ret

00001c7c <xTaskCheckForTimeOut>:
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	af 92       	push	r10
    1c82:	bf 92       	push	r11
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	fb 01       	movw	r30, r22
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	0f 92       	push	r0
    1c9c:	c0 90 32 0d 	lds	r12, 0x0D32	; 0x800d32 <xTickCount>
    1ca0:	d0 90 33 0d 	lds	r13, 0x0D33	; 0x800d33 <xTickCount+0x1>
    1ca4:	e0 90 34 0d 	lds	r14, 0x0D34	; 0x800d34 <xTickCount+0x2>
    1ca8:	f0 90 35 0d 	lds	r15, 0x0D35	; 0x800d35 <xTickCount+0x3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	11 96       	adiw	r26, 0x01	; 1
    1cb0:	0d 91       	ld	r16, X+
    1cb2:	1d 91       	ld	r17, X+
    1cb4:	2d 91       	ld	r18, X+
    1cb6:	3c 91       	ld	r19, X
    1cb8:	14 97       	sbiw	r26, 0x04	; 4
    1cba:	46 01       	movw	r8, r12
    1cbc:	57 01       	movw	r10, r14
    1cbe:	80 1a       	sub	r8, r16
    1cc0:	91 0a       	sbc	r9, r17
    1cc2:	a2 0a       	sbc	r10, r18
    1cc4:	b3 0a       	sbc	r11, r19
    1cc6:	40 81       	ld	r20, Z
    1cc8:	51 81       	ldd	r21, Z+1	; 0x01
    1cca:	62 81       	ldd	r22, Z+2	; 0x02
    1ccc:	73 81       	ldd	r23, Z+3	; 0x03
    1cce:	4f 3f       	cpi	r20, 0xFF	; 255
    1cd0:	bf ef       	ldi	r27, 0xFF	; 255
    1cd2:	5b 07       	cpc	r21, r27
    1cd4:	6b 07       	cpc	r22, r27
    1cd6:	7b 07       	cpc	r23, r27
    1cd8:	39 f1       	breq	.+78     	; 0x1d28 <xTaskCheckForTimeOut+0xac>
    1cda:	ec 01       	movw	r28, r24
    1cdc:	b8 81       	ld	r27, Y
    1cde:	a0 91 2a 0d 	lds	r26, 0x0D2A	; 0x800d2a <xNumOfOverflows>
    1ce2:	ba 17       	cp	r27, r26
    1ce4:	59 f0       	breq	.+22     	; 0x1cfc <xTaskCheckForTimeOut+0x80>
    1ce6:	c0 16       	cp	r12, r16
    1ce8:	d1 06       	cpc	r13, r17
    1cea:	e2 06       	cpc	r14, r18
    1cec:	f3 06       	cpc	r15, r19
    1cee:	30 f0       	brcs	.+12     	; 0x1cfc <xTaskCheckForTimeOut+0x80>
    1cf0:	10 82       	st	Z, r1
    1cf2:	11 82       	std	Z+1, r1	; 0x01
    1cf4:	12 82       	std	Z+2, r1	; 0x02
    1cf6:	13 82       	std	Z+3, r1	; 0x03
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	17 c0       	rjmp	.+46     	; 0x1d2a <xTaskCheckForTimeOut+0xae>
    1cfc:	84 16       	cp	r8, r20
    1cfe:	95 06       	cpc	r9, r21
    1d00:	a6 06       	cpc	r10, r22
    1d02:	b7 06       	cpc	r11, r23
    1d04:	58 f4       	brcc	.+22     	; 0x1d1c <xTaskCheckForTimeOut+0xa0>
    1d06:	48 19       	sub	r20, r8
    1d08:	59 09       	sbc	r21, r9
    1d0a:	6a 09       	sbc	r22, r10
    1d0c:	7b 09       	sbc	r23, r11
    1d0e:	40 83       	st	Z, r20
    1d10:	51 83       	std	Z+1, r21	; 0x01
    1d12:	62 83       	std	Z+2, r22	; 0x02
    1d14:	73 83       	std	Z+3, r23	; 0x03
    1d16:	a1 df       	rcall	.-190    	; 0x1c5a <vTaskInternalSetTimeOutState>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <xTaskCheckForTimeOut+0xae>
    1d1c:	10 82       	st	Z, r1
    1d1e:	11 82       	std	Z+1, r1	; 0x01
    1d20:	12 82       	std	Z+2, r1	; 0x02
    1d22:	13 82       	std	Z+3, r1	; 0x03
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <xTaskCheckForTimeOut+0xae>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	ff 90       	pop	r15
    1d38:	ef 90       	pop	r14
    1d3a:	df 90       	pop	r13
    1d3c:	cf 90       	pop	r12
    1d3e:	bf 90       	pop	r11
    1d40:	af 90       	pop	r10
    1d42:	9f 90       	pop	r9
    1d44:	8f 90       	pop	r8
    1d46:	08 95       	ret

00001d48 <vTaskMissedYield>:
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 93 2b 0d 	sts	0x0D2B, r24	; 0x800d2b <xYieldPending>
    1d4e:	08 95       	ret

00001d50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	fc 01       	movw	r30, r24
        BaseType_t xReturn = pdFALSE;

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
    1d5a:	89 2b       	or	r24, r25
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <xTaskPriorityInherit+0x10>
    1d5e:	77 c0       	rjmp	.+238    	; 0x1e4e <xTaskPriorityInherit+0xfe>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    1d60:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d62:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1d66:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1d6a:	5a 96       	adiw	r26, 0x1a	; 26
    1d6c:	9c 91       	ld	r25, X
    1d6e:	89 17       	cp	r24, r25
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <xTaskPriorityInherit+0x24>
    1d72:	63 c0       	rjmp	.+198    	; 0x1e3a <xTaskPriorityInherit+0xea>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1d74:	46 85       	ldd	r20, Z+14	; 0x0e
    1d76:	57 85       	ldd	r21, Z+15	; 0x0f
    1d78:	60 89       	ldd	r22, Z+16	; 0x10
    1d7a:	71 89       	ldd	r23, Z+17	; 0x11
    1d7c:	77 23       	and	r23, r23
    1d7e:	94 f0       	brlt	.+36     	; 0x1da4 <xTaskPriorityInherit+0x54>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d80:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1d84:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1d88:	5a 96       	adiw	r26, 0x1a	; 26
    1d8a:	9c 91       	ld	r25, X
    1d8c:	4a e0       	ldi	r20, 0x0A	; 10
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	49 1b       	sub	r20, r25
    1d96:	51 09       	sbc	r21, r1
    1d98:	61 09       	sbc	r22, r1
    1d9a:	71 09       	sbc	r23, r1
    1d9c:	46 87       	std	Z+14, r20	; 0x0e
    1d9e:	57 87       	std	Z+15, r21	; 0x0f
    1da0:	60 8b       	std	Z+16, r22	; 0x10
    1da2:	71 8b       	std	Z+17, r23	; 0x11
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    1da4:	24 85       	ldd	r18, Z+12	; 0x0c
    1da6:	35 85       	ldd	r19, Z+13	; 0x0d
    1da8:	4b e0       	ldi	r20, 0x0B	; 11
    1daa:	84 9f       	mul	r24, r20
    1dac:	c0 01       	movw	r24, r0
    1dae:	11 24       	eor	r1, r1
    1db0:	8e 58       	subi	r24, 0x8E	; 142
    1db2:	92 4f       	sbci	r25, 0xF2	; 242
    1db4:	28 17       	cp	r18, r24
    1db6:	39 07       	cpc	r19, r25
    1db8:	b9 f5       	brne	.+110    	; 0x1e28 <xTaskPriorityInherit+0xd8>
    1dba:	ef 01       	movw	r28, r30
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1dbc:	8f 01       	movw	r16, r30
    1dbe:	0e 5f       	subi	r16, 0xFE	; 254
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    1dc8:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1dcc:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1dd0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1dd2:	ea 8f       	std	Y+26, r30	; 0x1a
                    prvAddTaskToReadyList( pxMutexHolderTCB );
    1dd4:	80 91 31 0d 	lds	r24, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    1dd8:	8e 17       	cp	r24, r30
    1dda:	10 f4       	brcc	.+4      	; 0x1de0 <xTaskPriorityInherit+0x90>
    1ddc:	e0 93 31 0d 	sts	0x0D31, r30	; 0x800d31 <uxTopReadyPriority>
    1de0:	8b e0       	ldi	r24, 0x0B	; 11
    1de2:	8e 9f       	mul	r24, r30
    1de4:	f0 01       	movw	r30, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	ee 58       	subi	r30, 0x8E	; 142
    1dea:	f2 4f       	sbci	r31, 0xF2	; 242
    1dec:	01 80       	ldd	r0, Z+1	; 0x01
    1dee:	f2 81       	ldd	r31, Z+2	; 0x02
    1df0:	e0 2d       	mov	r30, r0
    1df2:	ff 83       	std	Y+7, r31	; 0x07
    1df4:	ee 83       	std	Y+6, r30	; 0x06
    1df6:	26 81       	ldd	r18, Z+6	; 0x06
    1df8:	37 81       	ldd	r19, Z+7	; 0x07
    1dfa:	39 87       	std	Y+9, r19	; 0x09
    1dfc:	28 87       	std	Y+8, r18	; 0x08
    1dfe:	a6 81       	ldd	r26, Z+6	; 0x06
    1e00:	b7 81       	ldd	r27, Z+7	; 0x07
    1e02:	15 96       	adiw	r26, 0x05	; 5
    1e04:	1c 93       	st	X, r17
    1e06:	0e 93       	st	-X, r16
    1e08:	14 97       	sbiw	r26, 0x04	; 4
    1e0a:	17 83       	std	Z+7, r17	; 0x07
    1e0c:	06 83       	std	Z+6, r16	; 0x06
    1e0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e10:	8e 9f       	mul	r24, r30
    1e12:	f0 01       	movw	r30, r0
    1e14:	11 24       	eor	r1, r1
    1e16:	ee 58       	subi	r30, 0x8E	; 142
    1e18:	f2 4f       	sbci	r31, 0xF2	; 242
    1e1a:	fd 87       	std	Y+13, r31	; 0x0d
    1e1c:	ec 87       	std	Y+12, r30	; 0x0c
    1e1e:	80 81       	ld	r24, Z
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	80 83       	st	Z, r24
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	16 c0       	rjmp	.+44     	; 0x1e54 <xTaskPriorityInherit+0x104>
                    prvAddTaskToReadyList( pxMutexHolderTCB );
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    1e28:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1e2c:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1e30:	5a 96       	adiw	r26, 0x1a	; 26
    1e32:	8c 91       	ld	r24, X
    1e34:	82 8f       	std	Z+26, r24	; 0x1a
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <xTaskPriorityInherit+0x104>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    1e3a:	95 a5       	ldd	r25, Z+45	; 0x2d
    1e3c:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1e40:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1e44:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e46:	98 17       	cp	r25, r24
    1e48:	20 f0       	brcs	.+8      	; 0x1e52 <xTaskPriorityInherit+0x102>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	03 c0       	rjmp	.+6      	; 0x1e54 <xTaskPriorityInherit+0x104>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <xTaskPriorityInherit+0x104>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	08 95       	ret

00001e5e <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1e68:	89 2b       	or	r24, r25
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <xTaskPriorityDisinherit+0x10>
    1e6c:	49 c0       	rjmp	.+146    	; 0x1f00 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1e6e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e70:	81 50       	subi	r24, 0x01	; 1
    1e72:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1e74:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e76:	95 a5       	ldd	r25, Z+45	; 0x2d
    1e78:	29 17       	cp	r18, r25
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <xTaskPriorityDisinherit+0x20>
    1e7c:	43 c0       	rjmp	.+134    	; 0x1f04 <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1e7e:	81 11       	cpse	r24, r1
    1e80:	43 c0       	rjmp	.+134    	; 0x1f08 <xTaskPriorityDisinherit+0xaa>
    1e82:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1e84:	8f 01       	movw	r16, r30
    1e86:	0e 5f       	subi	r16, 0xFE	; 254
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	c8 01       	movw	r24, r16
    1e8c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1e90:	ed a5       	ldd	r30, Y+45	; 0x2d
    1e92:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e94:	8a e0       	ldi	r24, 0x0A	; 10
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e0       	ldi	r26, 0x00	; 0
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	8e 1b       	sub	r24, r30
    1e9e:	91 09       	sbc	r25, r1
    1ea0:	a1 09       	sbc	r26, r1
    1ea2:	b1 09       	sbc	r27, r1
    1ea4:	8e 87       	std	Y+14, r24	; 0x0e
    1ea6:	9f 87       	std	Y+15, r25	; 0x0f
    1ea8:	a8 8b       	std	Y+16, r26	; 0x10
    1eaa:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1eac:	80 91 31 0d 	lds	r24, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    1eb0:	8e 17       	cp	r24, r30
    1eb2:	10 f4       	brcc	.+4      	; 0x1eb8 <xTaskPriorityDisinherit+0x5a>
    1eb4:	e0 93 31 0d 	sts	0x0D31, r30	; 0x800d31 <uxTopReadyPriority>
    1eb8:	8b e0       	ldi	r24, 0x0B	; 11
    1eba:	8e 9f       	mul	r24, r30
    1ebc:	f0 01       	movw	r30, r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	ee 58       	subi	r30, 0x8E	; 142
    1ec2:	f2 4f       	sbci	r31, 0xF2	; 242
    1ec4:	01 80       	ldd	r0, Z+1	; 0x01
    1ec6:	f2 81       	ldd	r31, Z+2	; 0x02
    1ec8:	e0 2d       	mov	r30, r0
    1eca:	ff 83       	std	Y+7, r31	; 0x07
    1ecc:	ee 83       	std	Y+6, r30	; 0x06
    1ece:	26 81       	ldd	r18, Z+6	; 0x06
    1ed0:	37 81       	ldd	r19, Z+7	; 0x07
    1ed2:	39 87       	std	Y+9, r19	; 0x09
    1ed4:	28 87       	std	Y+8, r18	; 0x08
    1ed6:	a6 81       	ldd	r26, Z+6	; 0x06
    1ed8:	b7 81       	ldd	r27, Z+7	; 0x07
    1eda:	15 96       	adiw	r26, 0x05	; 5
    1edc:	1c 93       	st	X, r17
    1ede:	0e 93       	st	-X, r16
    1ee0:	14 97       	sbiw	r26, 0x04	; 4
    1ee2:	17 83       	std	Z+7, r17	; 0x07
    1ee4:	06 83       	std	Z+6, r16	; 0x06
    1ee6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ee8:	8e 9f       	mul	r24, r30
    1eea:	f0 01       	movw	r30, r0
    1eec:	11 24       	eor	r1, r1
    1eee:	ee 58       	subi	r30, 0x8E	; 142
    1ef0:	f2 4f       	sbci	r31, 0xF2	; 242
    1ef2:	fd 87       	std	Y+13, r31	; 0x0d
    1ef4:	ec 87       	std	Y+12, r30	; 0x0c
    1ef6:	80 81       	ld	r24, Z
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	05 c0       	rjmp	.+10     	; 0x1f0a <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	03 c0       	rjmp	.+6      	; 0x1f0a <xTaskPriorityDisinherit+0xac>
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	01 c0       	rjmp	.+2      	; 0x1f0a <xTaskPriorityDisinherit+0xac>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	08 95       	ret

00001f14 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

        if( pxMutexHolder != NULL )
    1f1e:	89 2b       	or	r24, r25
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1f22:	5a c0       	rjmp	.+180    	; 0x1fd8 <vTaskPriorityDisinheritAfterTimeout+0xc4>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    1f24:	85 a5       	ldd	r24, Z+45	; 0x2d
    1f26:	86 17       	cp	r24, r22
    1f28:	08 f4       	brcc	.+2      	; 0x1f2c <vTaskPriorityDisinheritAfterTimeout+0x18>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
    1f2a:	86 2f       	mov	r24, r22
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
    1f2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f2e:	89 17       	cp	r24, r25
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <vTaskPriorityDisinheritAfterTimeout+0x20>
    1f32:	52 c0       	rjmp	.+164    	; 0x1fd8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    1f34:	26 a5       	ldd	r18, Z+46	; 0x2e
    1f36:	21 30       	cpi	r18, 0x01	; 1
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x28>
    1f3a:	4e c0       	rjmp	.+156    	; 0x1fd8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
                    pxTCB->uxPriority = uxPriorityToUse;
    1f3c:	82 8f       	std	Z+26, r24	; 0x1a

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1f3e:	46 85       	ldd	r20, Z+14	; 0x0e
    1f40:	57 85       	ldd	r21, Z+15	; 0x0f
    1f42:	60 89       	ldd	r22, Z+16	; 0x10
    1f44:	71 89       	ldd	r23, Z+17	; 0x11
    1f46:	77 23       	and	r23, r23
    1f48:	64 f0       	brlt	.+24     	; 0x1f62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f4a:	4a e0       	ldi	r20, 0x0A	; 10
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	48 1b       	sub	r20, r24
    1f54:	51 09       	sbc	r21, r1
    1f56:	61 09       	sbc	r22, r1
    1f58:	71 09       	sbc	r23, r1
    1f5a:	46 87       	std	Z+14, r20	; 0x0e
    1f5c:	57 87       	std	Z+15, r21	; 0x0f
    1f5e:	60 8b       	std	Z+16, r22	; 0x10
    1f60:	71 8b       	std	Z+17, r23	; 0x11
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1f62:	24 85       	ldd	r18, Z+12	; 0x0c
    1f64:	35 85       	ldd	r19, Z+13	; 0x0d
    1f66:	4b e0       	ldi	r20, 0x0B	; 11
    1f68:	94 9f       	mul	r25, r20
    1f6a:	c0 01       	movw	r24, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	8e 58       	subi	r24, 0x8E	; 142
    1f70:	92 4f       	sbci	r25, 0xF2	; 242
    1f72:	28 17       	cp	r18, r24
    1f74:	39 07       	cpc	r19, r25
    1f76:	81 f5       	brne	.+96     	; 0x1fd8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1f78:	ef 01       	movw	r28, r30
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1f7a:	8f 01       	movw	r16, r30
    1f7c:	0e 5f       	subi	r16, 0xFE	; 254
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	c8 01       	movw	r24, r16
    1f82:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
    1f86:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f88:	80 91 31 0d 	lds	r24, 0x0D31	; 0x800d31 <uxTopReadyPriority>
    1f8c:	8e 17       	cp	r24, r30
    1f8e:	10 f4       	brcc	.+4      	; 0x1f94 <vTaskPriorityDisinheritAfterTimeout+0x80>
    1f90:	e0 93 31 0d 	sts	0x0D31, r30	; 0x800d31 <uxTopReadyPriority>
    1f94:	8b e0       	ldi	r24, 0x0B	; 11
    1f96:	8e 9f       	mul	r24, r30
    1f98:	f0 01       	movw	r30, r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	ee 58       	subi	r30, 0x8E	; 142
    1f9e:	f2 4f       	sbci	r31, 0xF2	; 242
    1fa0:	01 80       	ldd	r0, Z+1	; 0x01
    1fa2:	f2 81       	ldd	r31, Z+2	; 0x02
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	ff 83       	std	Y+7, r31	; 0x07
    1fa8:	ee 83       	std	Y+6, r30	; 0x06
    1faa:	26 81       	ldd	r18, Z+6	; 0x06
    1fac:	37 81       	ldd	r19, Z+7	; 0x07
    1fae:	39 87       	std	Y+9, r19	; 0x09
    1fb0:	28 87       	std	Y+8, r18	; 0x08
    1fb2:	a6 81       	ldd	r26, Z+6	; 0x06
    1fb4:	b7 81       	ldd	r27, Z+7	; 0x07
    1fb6:	15 96       	adiw	r26, 0x05	; 5
    1fb8:	1c 93       	st	X, r17
    1fba:	0e 93       	st	-X, r16
    1fbc:	14 97       	sbiw	r26, 0x04	; 4
    1fbe:	17 83       	std	Z+7, r17	; 0x07
    1fc0:	06 83       	std	Z+6, r16	; 0x06
    1fc2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1fc4:	8e 9f       	mul	r24, r30
    1fc6:	f0 01       	movw	r30, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	ee 58       	subi	r30, 0x8E	; 142
    1fcc:	f2 4f       	sbci	r31, 0xF2	; 242
    1fce:	fd 87       	std	Y+13, r31	; 0x0d
    1fd0:	ec 87       	std	Y+12, r30	; 0x0c
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8f 5f       	subi	r24, 0xFF	; 255
    1fd6:	80 83       	st	Z, r24
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	08 95       	ret

00001fe2 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1fe2:	cf 92       	push	r12
    1fe4:	df 92       	push	r13
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1fea:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1fee:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    1ff2:	66 85       	ldd	r22, Z+14	; 0x0e
    1ff4:	77 85       	ldd	r23, Z+15	; 0x0f
    1ff6:	80 89       	ldd	r24, Z+16	; 0x10
    1ff8:	91 89       	ldd	r25, Z+17	; 0x11

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ffa:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    1ffe:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    2002:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    2006:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    200a:	5a 96       	adiw	r26, 0x1a	; 26
    200c:	2c 91       	ld	r18, X
    200e:	0f 2e       	mov	r0, r31
    2010:	fa e0       	ldi	r31, 0x0A	; 10
    2012:	cf 2e       	mov	r12, r31
    2014:	d1 2c       	mov	r13, r1
    2016:	e1 2c       	mov	r14, r1
    2018:	f1 2c       	mov	r15, r1
    201a:	f0 2d       	mov	r31, r0
    201c:	c2 1a       	sub	r12, r18
    201e:	d1 08       	sbc	r13, r1
    2020:	e1 08       	sbc	r14, r1
    2022:	f1 08       	sbc	r15, r1
    2024:	c6 86       	std	Z+14, r12	; 0x0e
    2026:	d7 86       	std	Z+15, r13	; 0x0f
    2028:	e0 8a       	std	Z+16, r14	; 0x10
    202a:	f1 8a       	std	Z+17, r15	; 0x11

    return uxReturn;
}
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	df 90       	pop	r13
    2032:	cf 90       	pop	r12
    2034:	08 95       	ret

00002036 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2036:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    203a:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    203e:	89 2b       	or	r24, r25
    2040:	39 f0       	breq	.+14     	; 0x2050 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2042:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    2046:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    204a:	86 a5       	ldd	r24, Z+46	; 0x2e
    204c:	8f 5f       	subi	r24, 0xFF	; 255
    204e:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2050:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <pxCurrentTCB>
    2054:	90 91 e1 0d 	lds	r25, 0x0DE1	; 0x800de1 <pxCurrentTCB+0x1>
    }
    2058:	08 95       	ret

0000205a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    205a:	84 b1       	in	r24, 0x04	; 4
    205c:	80 68       	ori	r24, 0x80	; 128
    205e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2060:	85 b1       	in	r24, 0x05	; 5
    2062:	80 68       	ori	r24, 0x80	; 128
    2064:	85 b9       	out	0x05, r24	; 5
    2066:	08 95       	ret

00002068 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2068:	83 b1       	in	r24, 0x03	; 3
    206a:	80 68       	ori	r24, 0x80	; 128
    206c:	83 b9       	out	0x03, r24	; 3
    206e:	08 95       	ret

00002070 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2070:	f4 df       	rcall	.-24     	; 0x205a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2072:	2f ef       	ldi	r18, 0xFF	; 255
    2074:	80 e7       	ldi	r24, 0x70	; 112
    2076:	92 e0       	ldi	r25, 0x02	; 2
    2078:	21 50       	subi	r18, 0x01	; 1
    207a:	80 40       	sbci	r24, 0x00	; 0
    207c:	90 40       	sbci	r25, 0x00	; 0
    207e:	e1 f7       	brne	.-8      	; 0x2078 <vApplicationMallocFailedHook+0x8>
    2080:	00 c0       	rjmp	.+0      	; 0x2082 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2082:	00 00       	nop
    2084:	f1 df       	rcall	.-30     	; 0x2068 <prvBlinkMainLed>
    2086:	f5 cf       	rjmp	.-22     	; 0x2072 <vApplicationMallocFailedHook+0x2>

00002088 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2088:	e8 df       	rcall	.-48     	; 0x205a <prvSetMainLedOn>
    208a:	2f ef       	ldi	r18, 0xFF	; 255
    208c:	87 ea       	ldi	r24, 0xA7	; 167
    208e:	91 e6       	ldi	r25, 0x61	; 97
    2090:	21 50       	subi	r18, 0x01	; 1
    2092:	80 40       	sbci	r24, 0x00	; 0
    2094:	90 40       	sbci	r25, 0x00	; 0
    2096:	e1 f7       	brne	.-8      	; 0x2090 <vApplicationStackOverflowHook+0x8>
    2098:	00 c0       	rjmp	.+0      	; 0x209a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    209a:	00 00       	nop
    209c:	e5 df       	rcall	.-54     	; 0x2068 <prvBlinkMainLed>
    209e:	f5 cf       	rjmp	.-22     	; 0x208a <vApplicationStackOverflowHook+0x2>

000020a0 <initializeTempAndHumiditySemaphore>:
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
	tempHumSemaphore = xSemaphoreCreateBinary();
    20a0:	43 e0       	ldi	r20, 0x03	; 3
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xQueueGenericCreate>
    20aa:	90 93 0c 0e 	sts	0x0E0C, r25	; 0x800e0c <tempHumSemaphore+0x1>
    20ae:	80 93 0b 0e 	sts	0x0E0B, r24	; 0x800e0b <tempHumSemaphore>
    20b2:	08 95       	ret

000020b4 <initializeQueue>:
}

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	62 e0       	ldi	r22, 0x02	; 2
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xQueueGenericCreate>
    20be:	90 93 13 0e 	sts	0x0E13, r25	; 0x800e13 <sensorDataQueue+0x1>
    20c2:	80 93 12 0e 	sts	0x0E12, r24	; 0x800e12 <sensorDataQueue>
    20c6:	08 95       	ret

000020c8 <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    20c8:	0e 94 83 01 	call	0x306	; 0x306 <xEventGroupCreate>
    20cc:	90 93 0e 0e 	sts	0x0E0E, r25	; 0x800e0e <dataEventGroup+0x1>
    20d0:	80 93 0d 0e 	sts	0x0E0D, r24	; 0x800e0d <dataEventGroup>
    20d4:	08 95       	ret

000020d6 <initializeTempAndHumDriver>:
#include "TempAndHum.h"
#include "Setup.h"

void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    20d6:	0f d1       	rcall	.+542    	; 0x22f6 <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    20d8:	81 11       	cpse	r24, r1
    20da:	05 c0       	rjmp	.+10     	; 0x20e6 <initializeTempAndHumDriver+0x10>
		{
			printf("Temp and Hum Driver Initialized ok\n");
    20dc:	8d e7       	ldi	r24, 0x7D	; 125
    20de:	92 e0       	ldi	r25, 0x02	; 2
    20e0:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <puts>
    20e4:	08 95       	ret
		}
		
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    20e6:	80 ea       	ldi	r24, 0xA0	; 160
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <puts>
    20ee:	08 95       	ret

000020f0 <measureTempAndHum>:
		}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    20f0:	19 d1       	rcall	.+562    	; 0x2324 <hih8120_wakeup>
    20f2:	88 23       	and	r24, r24
    20f4:	21 f0       	breq	.+8      	; 0x20fe <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    20f6:	8a eb       	ldi	r24, 0xBA	; 186
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	0e 94 b6 1b 	call	0x376c	; 0x376c <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    20fe:	63 e0       	ldi	r22, 0x03	; 3
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
	
	if ( HIH8120_OK !=  hih8120_measure() )
    2106:	81 db       	rcall	.-2302   	; 0x180a <vTaskDelay>
    2108:	21 d1       	rcall	.+578    	; 0x234c <hih8120_measure>
    210a:	88 23       	and	r24, r24
    210c:	21 f0       	breq	.+8      	; 0x2116 <measureTempAndHum+0x26>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    210e:	8a ed       	ldi	r24, 0xDA	; 218
    2110:	92 e0       	ldi	r25, 0x02	; 2
    2112:	0e 94 b6 1b 	call	0x376c	; 0x376c <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	75 cb       	rjmp	.-2326   	; 0x180a <vTaskDelay>
    2120:	08 95       	ret

00002122 <TempAndHumTask>:
	
}
void TempAndHumTask(void* pvpParameter)
{
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	00 d0       	rcall	.+0      	; 0x2128 <TempAndHumTask+0x6>
    2128:	1f 92       	push	r1
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	
	while(1)
	{
		uint16_t Temp = 0;
    212e:	1c 82       	std	Y+4, r1	; 0x04
    2130:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t Humidity = 0;
    2132:	1a 82       	std	Y+2, r1	; 0x02
    2134:	19 82       	std	Y+1, r1	; 0x01
		measureTempAndHum();
    2136:	dc df       	rcall	.-72     	; 0x20f0 <measureTempAndHum>
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    2138:	4f ef       	ldi	r20, 0xFF	; 255
    213a:	5f ef       	ldi	r21, 0xFF	; 255
    213c:	ba 01       	movw	r22, r20
    213e:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <tempHumSemaphore>
    2142:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <tempHumSemaphore+0x1>
    2146:	0e 94 2b 07 	call	0xe56	; 0xe56 <xQueueSemaphoreTake>
    214a:	81 30       	cpi	r24, 0x01	; 1
		{
			Temp = hih8120_getTemperature_x10();
    214c:	81 f7       	brne	.-32     	; 0x212e <TempAndHumTask+0xc>
    214e:	41 d1       	rcall	.+642    	; 0x23d2 <hih8120_getTemperature_x10>
    2150:	9c 83       	std	Y+4, r25	; 0x04
			Humidity = hih8120_getHumidityPercent_x10();
    2152:	8b 83       	std	Y+3, r24	; 0x03
    2154:	1e d1       	rcall	.+572    	; 0x2392 <hih8120_getHumidityPercent_x10>
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
			printf("Temperature: %d\n",Temp);
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	8f 93       	push	r24
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	8f 93       	push	r24
    2162:	8f ef       	ldi	r24, 0xFF	; 255
    2164:	92 e0       	ldi	r25, 0x02	; 2
    2166:	9f 93       	push	r25
    2168:	8f 93       	push	r24
    216a:	0e 94 a3 1b 	call	0x3746	; 0x3746 <printf>
			printf("Humidity: %d\n",Humidity);
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	8f 93       	push	r24
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	8f 93       	push	r24
    2176:	80 e1       	ldi	r24, 0x10	; 16
    2178:	93 e0       	ldi	r25, 0x03	; 3
    217a:	9f 93       	push	r25
    217c:	8f 93       	push	r24
    217e:	0e 94 a3 1b 	call	0x3746	; 0x3746 <printf>
			xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
    2182:	00 e0       	ldi	r16, 0x00	; 0
    2184:	2f ef       	ldi	r18, 0xFF	; 255
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	a9 01       	movw	r20, r18
    218a:	be 01       	movw	r22, r28
    218c:	6d 5f       	subi	r22, 0xFD	; 253
    218e:	7f 4f       	sbci	r23, 0xFF	; 255
    2190:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <sensorDataQueue>
    2194:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <sensorDataQueue+0x1>
    2198:	0e 94 a0 06 	call	0xd40	; 0xd40 <xQueueGenericSend>
			xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
    219c:	2f ef       	ldi	r18, 0xFF	; 255
    219e:	3f ef       	ldi	r19, 0xFF	; 255
    21a0:	a9 01       	movw	r20, r18
    21a2:	be 01       	movw	r22, r28
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <sensorDataQueue>
    21ac:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <sensorDataQueue+0x1>
    21b0:	0e 94 a0 06 	call	0xd40	; 0xd40 <xQueueGenericSend>
			xSemaphoreGive(tempHumSemaphore);
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	a9 01       	movw	r20, r18
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <tempHumSemaphore>
    21c2:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <tempHumSemaphore+0x1>
    21c6:	0e 94 a0 06 	call	0xd40	; 0xd40 <xQueueGenericSend>
			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    21ca:	42 e0       	ldi	r20, 0x02	; 2
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	80 91 0d 0e 	lds	r24, 0x0E0D	; 0x800e0d <dataEventGroup>
    21d6:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <dataEventGroup+0x1>
    21da:	0e 94 36 02 	call	0x46c	; 0x46c <xEventGroupSetBits>
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
		}
		
		
	}
    21e8:	a2 cf       	rjmp	.-188    	; 0x212e <TempAndHumTask+0xc>

000021ea <createTempAndHumTask>:
}

void createTempAndHumTask(void* pvpParameter)
{
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
		xTaskCreate(
    21f0:	e1 2c       	mov	r14, r1
    21f2:	f1 2c       	mov	r15, r1
    21f4:	02 e0       	ldi	r16, 0x02	; 2
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 ec       	ldi	r20, 0xC0	; 192
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	6e e1       	ldi	r22, 0x1E	; 30
    2200:	73 e0       	ldi	r23, 0x03	; 3
    2202:	81 e9       	ldi	r24, 0x91	; 145
    2204:	90 e1       	ldi	r25, 0x10	; 16
    2206:	ab d8       	rcall	.-3754   	; 0x135e <xTaskCreate>
		,  "TempAndHumTask"  // A name just for humans
		,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}
    2208:	0f 91       	pop	r16
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	08 95       	ret

00002210 <initializeDrivers>:
// Prototype for LoRaWAN handler
//void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

void initializeDrivers()
{
	initializeCO2Driver();
    2210:	0e 94 33 01 	call	0x266	; 0x266 <initializeCO2Driver>
	initializeTempAndHumDriver();
    2214:	60 cf       	rjmp	.-320    	; 0x20d6 <initializeTempAndHumDriver>
    2216:	08 95       	ret

00002218 <ApplicationTask>:

void ApplicationTask()
{
	for (;;)
	{
		xSemaphoreGive(tempHumSemaphore);
    2218:	00 e0       	ldi	r16, 0x00	; 0
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	a9 01       	movw	r20, r18
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <tempHumSemaphore>
    2228:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <tempHumSemaphore+0x1>
    222c:	0e 94 a0 06 	call	0xd40	; 0xd40 <xQueueGenericSend>
		//vTaskDelay(10);
		//printf("Application Task\n");
		//vTaskDelay(30);
		EventBits_t dataEventBits = xEventGroupWaitBits
    2230:	cc 24       	eor	r12, r12
    2232:	ca 94       	dec	r12
    2234:	dc 2c       	mov	r13, r12
    2236:	76 01       	movw	r14, r12
    2238:	01 e0       	ldi	r16, 0x01	; 1
    223a:	21 e0       	ldi	r18, 0x01	; 1
    223c:	43 e0       	ldi	r20, 0x03	; 3
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	80 91 0d 0e 	lds	r24, 0x0E0D	; 0x800e0d <dataEventGroup>
    2248:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <dataEventGroup+0x1>
    224c:	0e 94 96 01 	call	0x32c	; 0x32c <xEventGroupWaitBits>
    2250:	6b 01       	movw	r12, r22
    2252:	7c 01       	movw	r14, r24
		(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,portMAX_DELAY);
		printf("Data Event Bit\n");
    2254:	8d e2       	ldi	r24, 0x2D	; 45
    2256:	93 e0       	ldi	r25, 0x03	; 3
    2258:	0e 94 b6 1b 	call	0x376c	; 0x376c <puts>
		if(dataEventBits == 3)
    225c:	83 e0       	ldi	r24, 0x03	; 3
    225e:	c8 16       	cp	r12, r24
    2260:	d1 04       	cpc	r13, r1
    2262:	e1 04       	cpc	r14, r1
    2264:	f1 04       	cpc	r15, r1
    2266:	c1 f6       	brne	.-80     	; 0x2218 <ApplicationTask>
		{
			printf("All Data Colected;");
    2268:	8c e3       	ldi	r24, 0x3C	; 60
    226a:	93 e0       	ldi	r25, 0x03	; 3
    226c:	9f 93       	push	r25
    226e:	8f 93       	push	r24
    2270:	0e 94 a3 1b 	call	0x3746	; 0x3746 <printf>
			vTaskDelay(3000);
    2274:	68 eb       	ldi	r22, 0xB8	; 184
    2276:	7b e0       	ldi	r23, 0x0B	; 11
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	c6 da       	rcall	.-2676   	; 0x180a <vTaskDelay>
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	ca cf       	rjmp	.-108    	; 0x2218 <ApplicationTask>

00002284 <create_tasks_and_semaphores>:
	initializeTempAndHumDriver();
}
/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
		initializeEventGroup();
    2284:	21 df       	rcall	.-446    	; 0x20c8 <initializeEventGroup>
		initializeQueue();
    2286:	16 df       	rcall	.-468    	; 0x20b4 <initializeQueue>
		initializeTempAndHumiditySemaphore();
    2288:	0b df       	rcall	.-490    	; 0x20a0 <initializeTempAndHumiditySemaphore>
    228a:	af df       	rcall	.-162    	; 0x21ea <createTempAndHumTask>
		createTempAndHumTask();
    228c:	0e 94 4e 01 	call	0x29c	; 0x29c <createCO2Task>
		createCO2Task();
    2290:	c3 df       	rcall	.-122    	; 0x2218 <ApplicationTask>

00002292 <initialiseSystem>:
					xTaskCreate(
					ApplicationTask()
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	0d d5       	rcall	.+2586   	; 0x2cb0 <stdio_initialise>

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
	// Let's create some tasks
//	initializeDriver()
	initializeDrivers();
    2296:	bc df       	rcall	.-136    	; 0x2210 <initializeDrivers>
	create_tasks_and_semaphores();
    2298:	f5 df       	rcall	.-22     	; 0x2284 <create_tasks_and_semaphores>

0000229a <main>:
    229a:	fb df       	rcall	.-10     	; 0x2292 <initialiseSystem>

0000229c <_hihTwiCallback>:
    229c:	65 30       	cpi	r22, 0x05	; 5
    229e:	f1 f4       	brne	.+60     	; 0x22dc <_hihTwiCallback+0x40>
    22a0:	fa 01       	movw	r30, r20
    22a2:	80 81       	ld	r24, Z
    22a4:	8f 73       	andi	r24, 0x3F	; 63
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	98 2f       	mov	r25, r24
    22aa:	88 27       	eor	r24, r24
    22ac:	21 81       	ldd	r18, Z+1	; 0x01
    22ae:	82 2b       	or	r24, r18
    22b0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    22b4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	f0 e4       	ldi	r31, 0x40	; 64
    22bc:	8f 9f       	mul	r24, r31
    22be:	c0 01       	movw	r24, r0
    22c0:	11 24       	eor	r1, r1
    22c2:	fa 01       	movw	r30, r20
    22c4:	23 81       	ldd	r18, Z+3	; 0x03
    22c6:	26 95       	lsr	r18
    22c8:	26 95       	lsr	r18
    22ca:	82 2b       	or	r24, r18
    22cc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    22d0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	80 93 e2 0d 	sts	0x0DE2, r24	; 0x800de2 <_measuringIsReady>
    22da:	08 95       	ret
    22dc:	64 30       	cpi	r22, 0x04	; 4
    22de:	51 f0       	breq	.+20     	; 0x22f4 <_hihTwiCallback+0x58>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e4       	ldi	r25, 0x40	; 64
    22e4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    22e8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    22ec:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    22f0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    22f4:	08 95       	ret

000022f6 <hih8120_initialise>:
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	0e e4       	ldi	r16, 0x4E	; 78
    22fc:	11 e1       	ldi	r17, 0x11	; 17
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	34 e2       	ldi	r19, 0x24	; 36
    2302:	44 ef       	ldi	r20, 0xF4	; 244
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	87 e2       	ldi	r24, 0x27	; 39
    230a:	0c d5       	rcall	.+2584   	; 0x2d24 <twiCreate>
    230c:	90 93 e4 0d 	sts	0x0DE4, r25	; 0x800de4 <_hih8120Handler+0x1>
    2310:	80 93 e3 0d 	sts	0x0DE3, r24	; 0x800de3 <_hih8120Handler>
    2314:	21 e0       	ldi	r18, 0x01	; 1
    2316:	89 2b       	or	r24, r25
    2318:	09 f0       	breq	.+2      	; 0x231c <hih8120_initialise+0x26>
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	82 2f       	mov	r24, r18
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	08 95       	ret

00002324 <hih8120_wakeup>:
    2324:	80 91 e3 0d 	lds	r24, 0x0DE3	; 0x800de3 <_hih8120Handler>
    2328:	90 91 e4 0d 	lds	r25, 0x0DE4	; 0x800de4 <_hih8120Handler+0x1>
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	51 f0       	breq	.+20     	; 0x2344 <hih8120_wakeup+0x20>
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	47 d5       	rcall	.+2702   	; 0x2dc6 <twiTransmit>
    2338:	84 30       	cpi	r24, 0x04	; 4
    233a:	31 f4       	brne	.+12     	; 0x2348 <hih8120_wakeup+0x24>
    233c:	10 92 e2 0d 	sts	0x0DE2, r1	; 0x800de2 <_measuringIsReady>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	08 95       	ret
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	08 95       	ret
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	08 95       	ret

0000234c <hih8120_measure>:
    234c:	80 91 e3 0d 	lds	r24, 0x0DE3	; 0x800de3 <_hih8120Handler>
    2350:	90 91 e4 0d 	lds	r25, 0x0DE4	; 0x800de4 <_hih8120Handler+0x1>
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	31 f0       	breq	.+12     	; 0x2364 <hih8120_measure+0x18>
    2358:	64 e0       	ldi	r22, 0x04	; 4
    235a:	81 d5       	rcall	.+2818   	; 0x2e5e <twiReceive>
    235c:	85 30       	cpi	r24, 0x05	; 5
    235e:	21 f0       	breq	.+8      	; 0x2368 <hih8120_measure+0x1c>
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	08 95       	ret
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	08 95       	ret
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	08 95       	ret

0000236c <hih8120_getHumidity>:
    236c:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2370:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	7c d7       	rcall	.+3832   	; 0x3272 <__floatunsisf>
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	48 ec       	ldi	r20, 0xC8	; 200
    2380:	52 e4       	ldi	r21, 0x42	; 66
    2382:	0e 94 c7 19 	call	0x338e	; 0x338e <__mulsf3>
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	38 ef       	ldi	r19, 0xF8	; 248
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	56 e4       	ldi	r21, 0x46	; 70
    238e:	d8 c6       	rjmp	.+3504   	; 0x3140 <__divsf3>
    2390:	08 95       	ret

00002392 <hih8120_getHumidityPercent_x10>:
    2392:	ec df       	rcall	.-40     	; 0x236c <hih8120_getHumidity>
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	f8 d7       	rcall	.+4080   	; 0x338e <__mulsf3>
    239e:	3d d7       	rcall	.+3706   	; 0x321a <__fixunssfsi>
    23a0:	cb 01       	movw	r24, r22
    23a2:	08 95       	ret

000023a4 <hih8120_getTemperature>:
    23a4:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    23a8:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	60 d7       	rcall	.+3776   	; 0x3272 <__floatunsisf>
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	45 e2       	ldi	r20, 0x25	; 37
    23b8:	53 e4       	ldi	r21, 0x43	; 67
    23ba:	e9 d7       	rcall	.+4050   	; 0x338e <__mulsf3>
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	38 ef       	ldi	r19, 0xF8	; 248
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	56 e4       	ldi	r21, 0x46	; 70
    23c4:	bd d6       	rcall	.+3450   	; 0x3140 <__divsf3>
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	52 e4       	ldi	r21, 0x42	; 66
    23ce:	53 c6       	rjmp	.+3238   	; 0x3076 <__subsf3>
    23d0:	08 95       	ret

000023d2 <hih8120_getTemperature_x10>:
    23d2:	e8 df       	rcall	.-48     	; 0x23a4 <hih8120_getTemperature>
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	d8 d7       	rcall	.+4016   	; 0x338e <__mulsf3>
    23de:	18 d7       	rcall	.+3632   	; 0x3210 <__fixsfsi>
    23e0:	cb 01       	movw	r24, r22
    23e2:	08 95       	ret

000023e4 <_serialCallBack>:
    23e4:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <crc_sum.1945>
    23e8:	86 0f       	add	r24, r22
    23ea:	80 93 e8 0d 	sts	0x0DE8, r24	; 0x800de8 <crc_sum.1945>
    23ee:	90 91 eb 0d 	lds	r25, 0x0DEB	; 0x800deb <_mh_state>
    23f2:	91 30       	cpi	r25, 0x01	; 1
    23f4:	79 f0       	breq	.+30     	; 0x2414 <_serialCallBack+0x30>
    23f6:	28 f0       	brcs	.+10     	; 0x2402 <_serialCallBack+0x1e>
    23f8:	92 30       	cpi	r25, 0x02	; 2
    23fa:	a9 f0       	breq	.+42     	; 0x2426 <_serialCallBack+0x42>
    23fc:	93 30       	cpi	r25, 0x03	; 3
    23fe:	19 f1       	breq	.+70     	; 0x2446 <_serialCallBack+0x62>
    2400:	08 95       	ret
    2402:	6f 3f       	cpi	r22, 0xFF	; 255
    2404:	09 f0       	breq	.+2      	; 0x2408 <_serialCallBack+0x24>
    2406:	48 c0       	rjmp	.+144    	; 0x2498 <_serialCallBack+0xb4>
    2408:	10 92 e8 0d 	sts	0x0DE8, r1	; 0x800de8 <crc_sum.1945>
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <_mh_state>
    2412:	08 95       	ret
    2414:	66 38       	cpi	r22, 0x86	; 134
    2416:	09 f0       	breq	.+2      	; 0x241a <_serialCallBack+0x36>
    2418:	3f c0       	rjmp	.+126    	; 0x2498 <_serialCallBack+0xb4>
    241a:	10 92 e7 0d 	sts	0x0DE7, r1	; 0x800de7 <inDex.1943>
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <_mh_state>
    2424:	08 95       	ret
    2426:	e0 91 e7 0d 	lds	r30, 0x0DE7	; 0x800de7 <inDex.1943>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	8e 0f       	add	r24, r30
    242e:	80 93 e7 0d 	sts	0x0DE7, r24	; 0x800de7 <inDex.1943>
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	eb 51       	subi	r30, 0x1B	; 27
    2436:	f2 4f       	sbci	r31, 0xF2	; 242
    2438:	60 83       	st	Z, r22
    243a:	82 30       	cpi	r24, 0x02	; 2
    243c:	69 f5       	brne	.+90     	; 0x2498 <_serialCallBack+0xb4>
    243e:	83 e0       	ldi	r24, 0x03	; 3
    2440:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <_mh_state>
    2444:	08 95       	ret
    2446:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <inDex.1943>
    244a:	21 e0       	ldi	r18, 0x01	; 1
    244c:	29 0f       	add	r18, r25
    244e:	20 93 e7 0d 	sts	0x0DE7, r18	; 0x800de7 <inDex.1943>
    2452:	96 30       	cpi	r25, 0x06	; 6
    2454:	09 f5       	brne	.+66     	; 0x2498 <_serialCallBack+0xb4>
    2456:	81 11       	cpse	r24, r1
    2458:	0e c0       	rjmp	.+28     	; 0x2476 <_serialCallBack+0x92>
    245a:	e5 ee       	ldi	r30, 0xE5	; 229
    245c:	fd e0       	ldi	r31, 0x0D	; 13
    245e:	80 81       	ld	r24, Z
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	98 2f       	mov	r25, r24
    2464:	88 27       	eor	r24, r24
    2466:	21 81       	ldd	r18, Z+1	; 0x01
    2468:	82 0f       	add	r24, r18
    246a:	91 1d       	adc	r25, r1
    246c:	90 93 ed 0d 	sts	0x0DED, r25	; 0x800ded <_ppm+0x1>
    2470:	80 93 ec 0d 	sts	0x0DEC, r24	; 0x800dec <_ppm>
    2474:	04 c0       	rjmp	.+8      	; 0x247e <_serialCallBack+0x9a>
    2476:	10 92 ed 0d 	sts	0x0DED, r1	; 0x800ded <_ppm+0x1>
    247a:	10 92 ec 0d 	sts	0x0DEC, r1	; 0x800dec <_ppm>
    247e:	10 92 eb 0d 	sts	0x0DEB, r1	; 0x800deb <_mh_state>
    2482:	e0 91 e9 0d 	lds	r30, 0x0DE9	; 0x800de9 <_appCallBack>
    2486:	f0 91 ea 0d 	lds	r31, 0x0DEA	; 0x800dea <_appCallBack+0x1>
    248a:	30 97       	sbiw	r30, 0x00	; 0
    248c:	29 f0       	breq	.+10     	; 0x2498 <_serialCallBack+0xb4>
    248e:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <_ppm>
    2492:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <_ppm+0x1>
    2496:	19 95       	eicall
    2498:	08 95       	ret

0000249a <mh_z19_initialise>:
    249a:	8f 92       	push	r8
    249c:	9f 92       	push	r9
    249e:	af 92       	push	r10
    24a0:	cf 92       	push	r12
    24a2:	ef 92       	push	r14
    24a4:	0f 93       	push	r16
    24a6:	0f 2e       	mov	r0, r31
    24a8:	f2 ef       	ldi	r31, 0xF2	; 242
    24aa:	8f 2e       	mov	r8, r31
    24ac:	f1 e1       	ldi	r31, 0x11	; 17
    24ae:	9f 2e       	mov	r9, r31
    24b0:	f0 2d       	mov	r31, r0
    24b2:	68 94       	set
    24b4:	aa 24       	eor	r10, r10
    24b6:	a4 f8       	bld	r10, 4
    24b8:	68 94       	set
    24ba:	cc 24       	eor	r12, r12
    24bc:	c4 f8       	bld	r12, 4
    24be:	e1 2c       	mov	r14, r1
    24c0:	00 e0       	ldi	r16, 0x00	; 0
    24c2:	23 e0       	ldi	r18, 0x03	; 3
    24c4:	40 e8       	ldi	r20, 0x80	; 128
    24c6:	55 e2       	ldi	r21, 0x25	; 37
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	3f d0       	rcall	.+126    	; 0x254c <serial_create>
    24ce:	90 93 ef 0d 	sts	0x0DEF, r25	; 0x800def <_serial+0x1>
    24d2:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <_serial>
    24d6:	0f 91       	pop	r16
    24d8:	ef 90       	pop	r14
    24da:	cf 90       	pop	r12
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	8f 90       	pop	r8
    24e2:	08 95       	ret

000024e4 <mh_z19_injectCallBack>:
    24e4:	90 93 ea 0d 	sts	0x0DEA, r25	; 0x800dea <_appCallBack+0x1>
    24e8:	80 93 e9 0d 	sts	0x0DE9, r24	; 0x800de9 <_appCallBack>
    24ec:	08 95       	ret

000024ee <mh_z19_takeMeassuring>:
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	29 97       	sbiw	r28, 0x09	; 9
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	89 e0       	ldi	r24, 0x09	; 9
    2504:	e1 e2       	ldi	r30, 0x21	; 33
    2506:	f2 e0       	ldi	r31, 0x02	; 2
    2508:	9e 01       	movw	r18, r28
    250a:	2f 5f       	subi	r18, 0xFF	; 255
    250c:	3f 4f       	sbci	r19, 0xFF	; 255
    250e:	d9 01       	movw	r26, r18
    2510:	01 90       	ld	r0, Z+
    2512:	0d 92       	st	X+, r0
    2514:	8a 95       	dec	r24
    2516:	e1 f7       	brne	.-8      	; 0x2510 <mh_z19_takeMeassuring+0x22>
    2518:	10 92 ed 0d 	sts	0x0DED, r1	; 0x800ded <_ppm+0x1>
    251c:	10 92 ec 0d 	sts	0x0DEC, r1	; 0x800dec <_ppm>
    2520:	80 91 ee 0d 	lds	r24, 0x0DEE	; 0x800dee <_serial>
    2524:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <_serial+0x1>
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	31 f0       	breq	.+12     	; 0x2538 <mh_z19_takeMeassuring+0x4a>
    252c:	42 2f       	mov	r20, r18
    252e:	53 2f       	mov	r21, r19
    2530:	69 e0       	ldi	r22, 0x09	; 9
    2532:	d3 d0       	rcall	.+422    	; 0x26da <serial_sendBytes>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	01 c0       	rjmp	.+2      	; 0x253a <mh_z19_takeMeassuring+0x4c>
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	29 96       	adiw	r28, 0x09	; 9
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	08 95       	ret

0000254c <serial_create>:
    254c:	2f 92       	push	r2
    254e:	3f 92       	push	r3
    2550:	4f 92       	push	r4
    2552:	5f 92       	push	r5
    2554:	6f 92       	push	r6
    2556:	7f 92       	push	r7
    2558:	8f 92       	push	r8
    255a:	9f 92       	push	r9
    255c:	af 92       	push	r10
    255e:	cf 92       	push	r12
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	f8 2e       	mov	r15, r24
    2572:	2a 01       	movw	r4, r20
    2574:	3b 01       	movw	r6, r22
    2576:	88 e0       	ldi	r24, 0x08	; 8
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	b0 d7       	rcall	.+3936   	; 0x34dc <malloc>
    257c:	8c 01       	movw	r16, r24
    257e:	8f 2d       	mov	r24, r15
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	fc 01       	movw	r30, r24
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	e0 51       	subi	r30, 0x10	; 16
    258a:	f2 4f       	sbci	r31, 0xF2	; 242
    258c:	11 83       	std	Z+1, r17	; 0x01
    258e:	00 83       	st	Z, r16
    2590:	01 15       	cp	r16, r1
    2592:	11 05       	cpc	r17, r1
    2594:	09 f4       	brne	.+2      	; 0x2598 <serial_create+0x4c>
    2596:	64 c0       	rjmp	.+200    	; 0x2660 <serial_create+0x114>
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	fc 01       	movw	r30, r24
    259e:	e6 5f       	subi	r30, 0xF6	; 246
    25a0:	fd 4f       	sbci	r31, 0xFD	; 253
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	d8 01       	movw	r26, r16
    25a8:	8d 93       	st	X+, r24
    25aa:	9c 93       	st	X, r25
    25ac:	6c 2d       	mov	r22, r12
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	84 e0       	ldi	r24, 0x04	; 4
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	79 d7       	rcall	.+3826   	; 0x34a8 <calloc>
    25b6:	1c 01       	movw	r2, r24
    25b8:	61 e0       	ldi	r22, 0x01	; 1
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	86 e0       	ldi	r24, 0x06	; 6
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	73 d7       	rcall	.+3814   	; 0x34a8 <calloc>
    25c2:	7c 01       	movw	r14, r24
    25c4:	4c 2d       	mov	r20, r12
    25c6:	b1 01       	movw	r22, r2
    25c8:	3a d5       	rcall	.+2676   	; 0x303e <fifo_init>
    25ca:	f8 01       	movw	r30, r16
    25cc:	f5 82       	std	Z+5, r15	; 0x05
    25ce:	e4 82       	std	Z+4, r14	; 0x04
    25d0:	6a 2d       	mov	r22, r10
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	84 e0       	ldi	r24, 0x04	; 4
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	67 d7       	rcall	.+3790   	; 0x34a8 <calloc>
    25da:	1c 01       	movw	r2, r24
    25dc:	61 e0       	ldi	r22, 0x01	; 1
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	86 e0       	ldi	r24, 0x06	; 6
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	61 d7       	rcall	.+3778   	; 0x34a8 <calloc>
    25e6:	7c 01       	movw	r14, r24
    25e8:	4a 2d       	mov	r20, r10
    25ea:	b1 01       	movw	r22, r2
    25ec:	28 d5       	rcall	.+2640   	; 0x303e <fifo_init>
    25ee:	d8 01       	movw	r26, r16
    25f0:	13 96       	adiw	r26, 0x03	; 3
    25f2:	fc 92       	st	X, r15
    25f4:	ee 92       	st	-X, r14
    25f6:	12 97       	sbiw	r26, 0x02	; 2
    25f8:	17 96       	adiw	r26, 0x07	; 7
    25fa:	9c 92       	st	X, r9
    25fc:	8e 92       	st	-X, r8
    25fe:	16 97       	sbiw	r26, 0x06	; 6
    2600:	ff b6       	in	r15, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	ed 91       	ld	r30, X+
    2606:	fc 91       	ld	r31, X
    2608:	11 97       	sbiw	r26, 0x01	; 1
    260a:	36 97       	sbiw	r30, 0x06	; 6
    260c:	80 81       	ld	r24, Z
    260e:	82 60       	ori	r24, 0x02	; 2
    2610:	80 83       	st	Z, r24
    2612:	8d 90       	ld	r8, X+
    2614:	9c 90       	ld	r9, X
    2616:	c3 01       	movw	r24, r6
    2618:	b2 01       	movw	r22, r4
    261a:	2b d6       	rcall	.+3158   	; 0x3272 <__floatunsisf>
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	51 e4       	ldi	r21, 0x41	; 65
    2624:	b4 d6       	rcall	.+3432   	; 0x338e <__mulsf3>
    2626:	9b 01       	movw	r18, r22
    2628:	ac 01       	movw	r20, r24
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	74 e2       	ldi	r23, 0x24	; 36
    262e:	84 e7       	ldi	r24, 0x74	; 116
    2630:	9b e4       	ldi	r25, 0x4B	; 75
    2632:	86 d5       	rcall	.+2828   	; 0x3140 <__divsf3>
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e8       	ldi	r20, 0x80	; 128
    263a:	5f e3       	ldi	r21, 0x3F	; 63
    263c:	1c d5       	rcall	.+2616   	; 0x3076 <__subsf3>
    263e:	ed d5       	rcall	.+3034   	; 0x321a <__fixunssfsi>
    2640:	f4 01       	movw	r30, r8
    2642:	32 97       	sbiw	r30, 0x02	; 2
    2644:	60 83       	st	Z, r22
    2646:	d8 01       	movw	r26, r16
    2648:	ed 91       	ld	r30, X+
    264a:	fc 91       	ld	r31, X
    264c:	11 97       	sbiw	r26, 0x01	; 1
    264e:	35 97       	sbiw	r30, 0x05	; 5
    2650:	88 e9       	ldi	r24, 0x98	; 152
    2652:	80 83       	st	Z, r24
    2654:	ed 91       	ld	r30, X+
    2656:	fc 91       	ld	r31, X
    2658:	34 97       	sbiw	r30, 0x04	; 4
    265a:	86 e0       	ldi	r24, 0x06	; 6
    265c:	80 83       	st	Z, r24
    265e:	ff be       	out	0x3f, r15	; 63
    2660:	c8 01       	movw	r24, r16
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	ff 90       	pop	r15
    266c:	ef 90       	pop	r14
    266e:	cf 90       	pop	r12
    2670:	af 90       	pop	r10
    2672:	9f 90       	pop	r9
    2674:	8f 90       	pop	r8
    2676:	7f 90       	pop	r7
    2678:	6f 90       	pop	r6
    267a:	5f 90       	pop	r5
    267c:	4f 90       	pop	r4
    267e:	3f 90       	pop	r3
    2680:	2f 90       	pop	r2
    2682:	08 95       	ret

00002684 <serial_sendByte>:
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	dc 01       	movw	r26, r24
    268a:	89 2b       	or	r24, r25
    268c:	01 f1       	breq	.+64     	; 0x26ce <serial_sendByte+0x4a>
    268e:	12 96       	adiw	r26, 0x02	; 2
    2690:	ed 91       	ld	r30, X+
    2692:	fc 91       	ld	r31, X
    2694:	13 97       	sbiw	r26, 0x03	; 3
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	25 81       	ldd	r18, Z+5	; 0x05
    269c:	98 1b       	sub	r25, r24
    269e:	92 23       	and	r25, r18
    26a0:	84 81       	ldd	r24, Z+4	; 0x04
    26a2:	98 17       	cp	r25, r24
    26a4:	b1 f0       	breq	.+44     	; 0x26d2 <serial_sendByte+0x4e>
    26a6:	83 81       	ldd	r24, Z+3	; 0x03
    26a8:	26 95       	lsr	r18
    26aa:	28 23       	and	r18, r24
    26ac:	c0 81       	ld	r28, Z
    26ae:	d1 81       	ldd	r29, Z+1	; 0x01
    26b0:	c2 0f       	add	r28, r18
    26b2:	d1 1d       	adc	r29, r1
    26b4:	68 83       	st	Y, r22
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	95 81       	ldd	r25, Z+5	; 0x05
    26ba:	89 23       	and	r24, r25
    26bc:	83 83       	std	Z+3, r24	; 0x03
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	35 97       	sbiw	r30, 0x05	; 5
    26c4:	80 81       	ld	r24, Z
    26c6:	80 62       	ori	r24, 0x20	; 32
    26c8:	80 83       	st	Z, r24
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <serial_sendByte+0x50>
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <serial_sendByte+0x50>
    26d2:	82 e0       	ldi	r24, 0x02	; 2
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	08 95       	ret

000026da <serial_sendBytes>:
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	7c 01       	movw	r14, r24
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	09 f4       	brne	.+2      	; 0x26ee <serial_sendBytes+0x14>
    26ec:	41 c0       	rjmp	.+130    	; 0x2770 <serial_sendBytes+0x96>
    26ee:	dc 01       	movw	r26, r24
    26f0:	12 96       	adiw	r26, 0x02	; 2
    26f2:	ed 91       	ld	r30, X+
    26f4:	fc 91       	ld	r31, X
    26f6:	13 97       	sbiw	r26, 0x03	; 3
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	82 81       	ldd	r24, Z+2	; 0x02
    26fc:	98 1b       	sub	r25, r24
    26fe:	85 81       	ldd	r24, Z+5	; 0x05
    2700:	98 23       	and	r25, r24
    2702:	84 81       	ldd	r24, Z+4	; 0x04
    2704:	89 1b       	sub	r24, r25
    2706:	86 17       	cp	r24, r22
    2708:	a8 f1       	brcs	.+106    	; 0x2774 <serial_sendBytes+0x9a>
    270a:	66 23       	and	r22, r22
    270c:	41 f1       	breq	.+80     	; 0x275e <serial_sendBytes+0x84>
    270e:	84 2f       	mov	r24, r20
    2710:	95 2f       	mov	r25, r21
    2712:	dc 01       	movw	r26, r24
    2714:	61 50       	subi	r22, 0x01	; 1
    2716:	46 2f       	mov	r20, r22
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	4f 5f       	subi	r20, 0xFF	; 255
    271c:	5f 4f       	sbci	r21, 0xFF	; 255
    271e:	48 0f       	add	r20, r24
    2720:	59 1f       	adc	r21, r25
    2722:	e7 01       	movw	r28, r14
    2724:	ea 81       	ldd	r30, Y+2	; 0x02
    2726:	fb 81       	ldd	r31, Y+3	; 0x03
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	25 81       	ldd	r18, Z+5	; 0x05
    272e:	98 1b       	sub	r25, r24
    2730:	92 23       	and	r25, r18
    2732:	84 81       	ldd	r24, Z+4	; 0x04
    2734:	98 17       	cp	r25, r24
    2736:	79 f0       	breq	.+30     	; 0x2756 <serial_sendBytes+0x7c>
    2738:	8c 91       	ld	r24, X
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	26 95       	lsr	r18
    273e:	29 23       	and	r18, r25
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	8b 01       	movw	r16, r22
    2746:	02 0f       	add	r16, r18
    2748:	11 1d       	adc	r17, r1
    274a:	e8 01       	movw	r28, r16
    274c:	88 83       	st	Y, r24
    274e:	9f 5f       	subi	r25, 0xFF	; 255
    2750:	85 81       	ldd	r24, Z+5	; 0x05
    2752:	98 23       	and	r25, r24
    2754:	93 83       	std	Z+3, r25	; 0x03
    2756:	11 96       	adiw	r26, 0x01	; 1
    2758:	a4 17       	cp	r26, r20
    275a:	b5 07       	cpc	r27, r21
    275c:	11 f7       	brne	.-60     	; 0x2722 <serial_sendBytes+0x48>
    275e:	d7 01       	movw	r26, r14
    2760:	ed 91       	ld	r30, X+
    2762:	fc 91       	ld	r31, X
    2764:	35 97       	sbiw	r30, 0x05	; 5
    2766:	80 81       	ld	r24, Z
    2768:	80 62       	ori	r24, 0x20	; 32
    276a:	80 83       	st	Z, r24
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <serial_sendBytes+0x9c>
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	01 c0       	rjmp	.+2      	; 0x2776 <serial_sendBytes+0x9c>
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	08 95       	ret

00002784 <serial_getByte>:
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	d1 f0       	breq	.+52     	; 0x27bc <serial_getByte+0x38>
    2788:	dc 01       	movw	r26, r24
    278a:	14 96       	adiw	r26, 0x04	; 4
    278c:	ed 91       	ld	r30, X+
    278e:	fc 91       	ld	r31, X
    2790:	15 97       	sbiw	r26, 0x05	; 5
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	98 17       	cp	r25, r24
    2798:	99 f0       	breq	.+38     	; 0x27c0 <serial_getByte+0x3c>
    279a:	92 81       	ldd	r25, Z+2	; 0x02
    279c:	85 81       	ldd	r24, Z+5	; 0x05
    279e:	86 95       	lsr	r24
    27a0:	89 23       	and	r24, r25
    27a2:	a0 81       	ld	r26, Z
    27a4:	b1 81       	ldd	r27, Z+1	; 0x01
    27a6:	a8 0f       	add	r26, r24
    27a8:	b1 1d       	adc	r27, r1
    27aa:	8c 91       	ld	r24, X
    27ac:	db 01       	movw	r26, r22
    27ae:	8c 93       	st	X, r24
    27b0:	9f 5f       	subi	r25, 0xFF	; 255
    27b2:	85 81       	ldd	r24, Z+5	; 0x05
    27b4:	98 23       	and	r25, r24
    27b6:	92 83       	std	Z+2, r25	; 0x02
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	08 95       	ret
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	08 95       	ret
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	08 95       	ret

000027c4 <__vector_25>:
    27c4:	1f 92       	push	r1
    27c6:	0f 92       	push	r0
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	0f 92       	push	r0
    27cc:	11 24       	eor	r1, r1
    27ce:	0b b6       	in	r0, 0x3b	; 59
    27d0:	0f 92       	push	r0
    27d2:	2f 93       	push	r18
    27d4:	3f 93       	push	r19
    27d6:	4f 93       	push	r20
    27d8:	5f 93       	push	r21
    27da:	6f 93       	push	r22
    27dc:	7f 93       	push	r23
    27de:	8f 93       	push	r24
    27e0:	9f 93       	push	r25
    27e2:	af 93       	push	r26
    27e4:	bf 93       	push	r27
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	ef 93       	push	r30
    27ec:	ff 93       	push	r31
    27ee:	a0 91 f0 0d 	lds	r26, 0x0DF0	; 0x800df0 <_ser_handle>
    27f2:	b0 91 f1 0d 	lds	r27, 0x0DF1	; 0x800df1 <_ser_handle+0x1>
    27f6:	10 97       	sbiw	r26, 0x00	; 0
    27f8:	11 f1       	breq	.+68     	; 0x283e <__vector_25+0x7a>
    27fa:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    27fe:	14 96       	adiw	r26, 0x04	; 4
    2800:	ed 91       	ld	r30, X+
    2802:	fc 91       	ld	r31, X
    2804:	15 97       	sbiw	r26, 0x05	; 5
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	25 81       	ldd	r18, Z+5	; 0x05
    280c:	98 1b       	sub	r25, r24
    280e:	92 23       	and	r25, r18
    2810:	84 81       	ldd	r24, Z+4	; 0x04
    2812:	98 17       	cp	r25, r24
    2814:	61 f0       	breq	.+24     	; 0x282e <__vector_25+0x6a>
    2816:	83 81       	ldd	r24, Z+3	; 0x03
    2818:	26 95       	lsr	r18
    281a:	28 23       	and	r18, r24
    281c:	c0 81       	ld	r28, Z
    281e:	d1 81       	ldd	r29, Z+1	; 0x01
    2820:	c2 0f       	add	r28, r18
    2822:	d1 1d       	adc	r29, r1
    2824:	68 83       	st	Y, r22
    2826:	8f 5f       	subi	r24, 0xFF	; 255
    2828:	95 81       	ldd	r25, Z+5	; 0x05
    282a:	89 23       	and	r24, r25
    282c:	83 83       	std	Z+3, r24	; 0x03
    282e:	16 96       	adiw	r26, 0x06	; 6
    2830:	ed 91       	ld	r30, X+
    2832:	fc 91       	ld	r31, X
    2834:	17 97       	sbiw	r26, 0x07	; 7
    2836:	30 97       	sbiw	r30, 0x00	; 0
    2838:	11 f0       	breq	.+4      	; 0x283e <__vector_25+0x7a>
    283a:	cd 01       	movw	r24, r26
    283c:	19 95       	eicall
    283e:	ff 91       	pop	r31
    2840:	ef 91       	pop	r30
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	bf 91       	pop	r27
    2848:	af 91       	pop	r26
    284a:	9f 91       	pop	r25
    284c:	8f 91       	pop	r24
    284e:	7f 91       	pop	r23
    2850:	6f 91       	pop	r22
    2852:	5f 91       	pop	r21
    2854:	4f 91       	pop	r20
    2856:	3f 91       	pop	r19
    2858:	2f 91       	pop	r18
    285a:	0f 90       	pop	r0
    285c:	0b be       	out	0x3b, r0	; 59
    285e:	0f 90       	pop	r0
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	0f 90       	pop	r0
    2864:	1f 90       	pop	r1
    2866:	18 95       	reti

00002868 <__vector_26>:
    2868:	1f 92       	push	r1
    286a:	0f 92       	push	r0
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	0f 92       	push	r0
    2870:	11 24       	eor	r1, r1
    2872:	0b b6       	in	r0, 0x3b	; 59
    2874:	0f 92       	push	r0
    2876:	2f 93       	push	r18
    2878:	8f 93       	push	r24
    287a:	9f 93       	push	r25
    287c:	af 93       	push	r26
    287e:	bf 93       	push	r27
    2880:	ef 93       	push	r30
    2882:	ff 93       	push	r31
    2884:	e0 91 f0 0d 	lds	r30, 0x0DF0	; 0x800df0 <_ser_handle>
    2888:	f0 91 f1 0d 	lds	r31, 0x0DF1	; 0x800df1 <_ser_handle+0x1>
    288c:	30 97       	sbiw	r30, 0x00	; 0
    288e:	b9 f0       	breq	.+46     	; 0x28be <__vector_26+0x56>
    2890:	02 80       	ldd	r0, Z+2	; 0x02
    2892:	f3 81       	ldd	r31, Z+3	; 0x03
    2894:	e0 2d       	mov	r30, r0
    2896:	93 81       	ldd	r25, Z+3	; 0x03
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	98 17       	cp	r25, r24
    289c:	b1 f0       	breq	.+44     	; 0x28ca <__vector_26+0x62>
    289e:	92 81       	ldd	r25, Z+2	; 0x02
    28a0:	85 81       	ldd	r24, Z+5	; 0x05
    28a2:	28 2f       	mov	r18, r24
    28a4:	26 95       	lsr	r18
    28a6:	29 23       	and	r18, r25
    28a8:	a0 81       	ld	r26, Z
    28aa:	b1 81       	ldd	r27, Z+1	; 0x01
    28ac:	a2 0f       	add	r26, r18
    28ae:	b1 1d       	adc	r27, r1
    28b0:	2c 91       	ld	r18, X
    28b2:	9f 5f       	subi	r25, 0xFF	; 255
    28b4:	89 23       	and	r24, r25
    28b6:	82 83       	std	Z+2, r24	; 0x02
    28b8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    28bc:	0b c0       	rjmp	.+22     	; 0x28d4 <__vector_26+0x6c>
    28be:	e1 ec       	ldi	r30, 0xC1	; 193
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	8f 7d       	andi	r24, 0xDF	; 223
    28c6:	80 83       	st	Z, r24
    28c8:	05 c0       	rjmp	.+10     	; 0x28d4 <__vector_26+0x6c>
    28ca:	e1 ec       	ldi	r30, 0xC1	; 193
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8f 7d       	andi	r24, 0xDF	; 223
    28d2:	80 83       	st	Z, r24
    28d4:	ff 91       	pop	r31
    28d6:	ef 91       	pop	r30
    28d8:	bf 91       	pop	r27
    28da:	af 91       	pop	r26
    28dc:	9f 91       	pop	r25
    28de:	8f 91       	pop	r24
    28e0:	2f 91       	pop	r18
    28e2:	0f 90       	pop	r0
    28e4:	0b be       	out	0x3b, r0	; 59
    28e6:	0f 90       	pop	r0
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	0f 90       	pop	r0
    28ec:	1f 90       	pop	r1
    28ee:	18 95       	reti

000028f0 <__vector_36>:
    28f0:	1f 92       	push	r1
    28f2:	0f 92       	push	r0
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	0f 92       	push	r0
    28f8:	11 24       	eor	r1, r1
    28fa:	0b b6       	in	r0, 0x3b	; 59
    28fc:	0f 92       	push	r0
    28fe:	2f 93       	push	r18
    2900:	3f 93       	push	r19
    2902:	4f 93       	push	r20
    2904:	5f 93       	push	r21
    2906:	6f 93       	push	r22
    2908:	7f 93       	push	r23
    290a:	8f 93       	push	r24
    290c:	9f 93       	push	r25
    290e:	af 93       	push	r26
    2910:	bf 93       	push	r27
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	ef 93       	push	r30
    2918:	ff 93       	push	r31
    291a:	a0 91 f2 0d 	lds	r26, 0x0DF2	; 0x800df2 <_ser_handle+0x2>
    291e:	b0 91 f3 0d 	lds	r27, 0x0DF3	; 0x800df3 <_ser_handle+0x3>
    2922:	10 97       	sbiw	r26, 0x00	; 0
    2924:	11 f1       	breq	.+68     	; 0x296a <__vector_36+0x7a>
    2926:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    292a:	14 96       	adiw	r26, 0x04	; 4
    292c:	ed 91       	ld	r30, X+
    292e:	fc 91       	ld	r31, X
    2930:	15 97       	sbiw	r26, 0x05	; 5
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	25 81       	ldd	r18, Z+5	; 0x05
    2938:	98 1b       	sub	r25, r24
    293a:	92 23       	and	r25, r18
    293c:	84 81       	ldd	r24, Z+4	; 0x04
    293e:	98 17       	cp	r25, r24
    2940:	61 f0       	breq	.+24     	; 0x295a <__vector_36+0x6a>
    2942:	83 81       	ldd	r24, Z+3	; 0x03
    2944:	26 95       	lsr	r18
    2946:	28 23       	and	r18, r24
    2948:	c0 81       	ld	r28, Z
    294a:	d1 81       	ldd	r29, Z+1	; 0x01
    294c:	c2 0f       	add	r28, r18
    294e:	d1 1d       	adc	r29, r1
    2950:	68 83       	st	Y, r22
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	95 81       	ldd	r25, Z+5	; 0x05
    2956:	89 23       	and	r24, r25
    2958:	83 83       	std	Z+3, r24	; 0x03
    295a:	16 96       	adiw	r26, 0x06	; 6
    295c:	ed 91       	ld	r30, X+
    295e:	fc 91       	ld	r31, X
    2960:	17 97       	sbiw	r26, 0x07	; 7
    2962:	30 97       	sbiw	r30, 0x00	; 0
    2964:	11 f0       	breq	.+4      	; 0x296a <__vector_36+0x7a>
    2966:	cd 01       	movw	r24, r26
    2968:	19 95       	eicall
    296a:	ff 91       	pop	r31
    296c:	ef 91       	pop	r30
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	bf 91       	pop	r27
    2974:	af 91       	pop	r26
    2976:	9f 91       	pop	r25
    2978:	8f 91       	pop	r24
    297a:	7f 91       	pop	r23
    297c:	6f 91       	pop	r22
    297e:	5f 91       	pop	r21
    2980:	4f 91       	pop	r20
    2982:	3f 91       	pop	r19
    2984:	2f 91       	pop	r18
    2986:	0f 90       	pop	r0
    2988:	0b be       	out	0x3b, r0	; 59
    298a:	0f 90       	pop	r0
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	0f 90       	pop	r0
    2990:	1f 90       	pop	r1
    2992:	18 95       	reti

00002994 <__vector_37>:
    2994:	1f 92       	push	r1
    2996:	0f 92       	push	r0
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	0f 92       	push	r0
    299c:	11 24       	eor	r1, r1
    299e:	0b b6       	in	r0, 0x3b	; 59
    29a0:	0f 92       	push	r0
    29a2:	2f 93       	push	r18
    29a4:	8f 93       	push	r24
    29a6:	9f 93       	push	r25
    29a8:	af 93       	push	r26
    29aa:	bf 93       	push	r27
    29ac:	ef 93       	push	r30
    29ae:	ff 93       	push	r31
    29b0:	e0 91 f2 0d 	lds	r30, 0x0DF2	; 0x800df2 <_ser_handle+0x2>
    29b4:	f0 91 f3 0d 	lds	r31, 0x0DF3	; 0x800df3 <_ser_handle+0x3>
    29b8:	30 97       	sbiw	r30, 0x00	; 0
    29ba:	b9 f0       	breq	.+46     	; 0x29ea <__vector_37+0x56>
    29bc:	02 80       	ldd	r0, Z+2	; 0x02
    29be:	f3 81       	ldd	r31, Z+3	; 0x03
    29c0:	e0 2d       	mov	r30, r0
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	98 17       	cp	r25, r24
    29c8:	b1 f0       	breq	.+44     	; 0x29f6 <__vector_37+0x62>
    29ca:	92 81       	ldd	r25, Z+2	; 0x02
    29cc:	85 81       	ldd	r24, Z+5	; 0x05
    29ce:	28 2f       	mov	r18, r24
    29d0:	26 95       	lsr	r18
    29d2:	29 23       	and	r18, r25
    29d4:	a0 81       	ld	r26, Z
    29d6:	b1 81       	ldd	r27, Z+1	; 0x01
    29d8:	a2 0f       	add	r26, r18
    29da:	b1 1d       	adc	r27, r1
    29dc:	2c 91       	ld	r18, X
    29de:	9f 5f       	subi	r25, 0xFF	; 255
    29e0:	89 23       	and	r24, r25
    29e2:	82 83       	std	Z+2, r24	; 0x02
    29e4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    29e8:	0b c0       	rjmp	.+22     	; 0x2a00 <__vector_37+0x6c>
    29ea:	e9 ec       	ldi	r30, 0xC9	; 201
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	8f 7d       	andi	r24, 0xDF	; 223
    29f2:	80 83       	st	Z, r24
    29f4:	05 c0       	rjmp	.+10     	; 0x2a00 <__vector_37+0x6c>
    29f6:	e9 ec       	ldi	r30, 0xC9	; 201
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	8f 7d       	andi	r24, 0xDF	; 223
    29fe:	80 83       	st	Z, r24
    2a00:	ff 91       	pop	r31
    2a02:	ef 91       	pop	r30
    2a04:	bf 91       	pop	r27
    2a06:	af 91       	pop	r26
    2a08:	9f 91       	pop	r25
    2a0a:	8f 91       	pop	r24
    2a0c:	2f 91       	pop	r18
    2a0e:	0f 90       	pop	r0
    2a10:	0b be       	out	0x3b, r0	; 59
    2a12:	0f 90       	pop	r0
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	0f 90       	pop	r0
    2a18:	1f 90       	pop	r1
    2a1a:	18 95       	reti

00002a1c <__vector_51>:
    2a1c:	1f 92       	push	r1
    2a1e:	0f 92       	push	r0
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	0f 92       	push	r0
    2a24:	11 24       	eor	r1, r1
    2a26:	0b b6       	in	r0, 0x3b	; 59
    2a28:	0f 92       	push	r0
    2a2a:	2f 93       	push	r18
    2a2c:	3f 93       	push	r19
    2a2e:	4f 93       	push	r20
    2a30:	5f 93       	push	r21
    2a32:	6f 93       	push	r22
    2a34:	7f 93       	push	r23
    2a36:	8f 93       	push	r24
    2a38:	9f 93       	push	r25
    2a3a:	af 93       	push	r26
    2a3c:	bf 93       	push	r27
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	ef 93       	push	r30
    2a44:	ff 93       	push	r31
    2a46:	a0 91 f4 0d 	lds	r26, 0x0DF4	; 0x800df4 <_ser_handle+0x4>
    2a4a:	b0 91 f5 0d 	lds	r27, 0x0DF5	; 0x800df5 <_ser_handle+0x5>
    2a4e:	10 97       	sbiw	r26, 0x00	; 0
    2a50:	11 f1       	breq	.+68     	; 0x2a96 <__vector_51+0x7a>
    2a52:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2a56:	14 96       	adiw	r26, 0x04	; 4
    2a58:	ed 91       	ld	r30, X+
    2a5a:	fc 91       	ld	r31, X
    2a5c:	15 97       	sbiw	r26, 0x05	; 5
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	25 81       	ldd	r18, Z+5	; 0x05
    2a64:	98 1b       	sub	r25, r24
    2a66:	92 23       	and	r25, r18
    2a68:	84 81       	ldd	r24, Z+4	; 0x04
    2a6a:	98 17       	cp	r25, r24
    2a6c:	61 f0       	breq	.+24     	; 0x2a86 <__vector_51+0x6a>
    2a6e:	83 81       	ldd	r24, Z+3	; 0x03
    2a70:	26 95       	lsr	r18
    2a72:	28 23       	and	r18, r24
    2a74:	c0 81       	ld	r28, Z
    2a76:	d1 81       	ldd	r29, Z+1	; 0x01
    2a78:	c2 0f       	add	r28, r18
    2a7a:	d1 1d       	adc	r29, r1
    2a7c:	68 83       	st	Y, r22
    2a7e:	8f 5f       	subi	r24, 0xFF	; 255
    2a80:	95 81       	ldd	r25, Z+5	; 0x05
    2a82:	89 23       	and	r24, r25
    2a84:	83 83       	std	Z+3, r24	; 0x03
    2a86:	16 96       	adiw	r26, 0x06	; 6
    2a88:	ed 91       	ld	r30, X+
    2a8a:	fc 91       	ld	r31, X
    2a8c:	17 97       	sbiw	r26, 0x07	; 7
    2a8e:	30 97       	sbiw	r30, 0x00	; 0
    2a90:	11 f0       	breq	.+4      	; 0x2a96 <__vector_51+0x7a>
    2a92:	cd 01       	movw	r24, r26
    2a94:	19 95       	eicall
    2a96:	ff 91       	pop	r31
    2a98:	ef 91       	pop	r30
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	bf 91       	pop	r27
    2aa0:	af 91       	pop	r26
    2aa2:	9f 91       	pop	r25
    2aa4:	8f 91       	pop	r24
    2aa6:	7f 91       	pop	r23
    2aa8:	6f 91       	pop	r22
    2aaa:	5f 91       	pop	r21
    2aac:	4f 91       	pop	r20
    2aae:	3f 91       	pop	r19
    2ab0:	2f 91       	pop	r18
    2ab2:	0f 90       	pop	r0
    2ab4:	0b be       	out	0x3b, r0	; 59
    2ab6:	0f 90       	pop	r0
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	0f 90       	pop	r0
    2abc:	1f 90       	pop	r1
    2abe:	18 95       	reti

00002ac0 <__vector_52>:
    2ac0:	1f 92       	push	r1
    2ac2:	0f 92       	push	r0
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	0f 92       	push	r0
    2ac8:	11 24       	eor	r1, r1
    2aca:	0b b6       	in	r0, 0x3b	; 59
    2acc:	0f 92       	push	r0
    2ace:	2f 93       	push	r18
    2ad0:	8f 93       	push	r24
    2ad2:	9f 93       	push	r25
    2ad4:	af 93       	push	r26
    2ad6:	bf 93       	push	r27
    2ad8:	ef 93       	push	r30
    2ada:	ff 93       	push	r31
    2adc:	e0 91 f4 0d 	lds	r30, 0x0DF4	; 0x800df4 <_ser_handle+0x4>
    2ae0:	f0 91 f5 0d 	lds	r31, 0x0DF5	; 0x800df5 <_ser_handle+0x5>
    2ae4:	30 97       	sbiw	r30, 0x00	; 0
    2ae6:	b9 f0       	breq	.+46     	; 0x2b16 <__vector_52+0x56>
    2ae8:	02 80       	ldd	r0, Z+2	; 0x02
    2aea:	f3 81       	ldd	r31, Z+3	; 0x03
    2aec:	e0 2d       	mov	r30, r0
    2aee:	93 81       	ldd	r25, Z+3	; 0x03
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
    2af2:	98 17       	cp	r25, r24
    2af4:	b1 f0       	breq	.+44     	; 0x2b22 <__vector_52+0x62>
    2af6:	92 81       	ldd	r25, Z+2	; 0x02
    2af8:	85 81       	ldd	r24, Z+5	; 0x05
    2afa:	28 2f       	mov	r18, r24
    2afc:	26 95       	lsr	r18
    2afe:	29 23       	and	r18, r25
    2b00:	a0 81       	ld	r26, Z
    2b02:	b1 81       	ldd	r27, Z+1	; 0x01
    2b04:	a2 0f       	add	r26, r18
    2b06:	b1 1d       	adc	r27, r1
    2b08:	2c 91       	ld	r18, X
    2b0a:	9f 5f       	subi	r25, 0xFF	; 255
    2b0c:	89 23       	and	r24, r25
    2b0e:	82 83       	std	Z+2, r24	; 0x02
    2b10:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2b14:	0b c0       	rjmp	.+22     	; 0x2b2c <__vector_52+0x6c>
    2b16:	e1 ed       	ldi	r30, 0xD1	; 209
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	8f 7d       	andi	r24, 0xDF	; 223
    2b1e:	80 83       	st	Z, r24
    2b20:	05 c0       	rjmp	.+10     	; 0x2b2c <__vector_52+0x6c>
    2b22:	e1 ed       	ldi	r30, 0xD1	; 209
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	8f 7d       	andi	r24, 0xDF	; 223
    2b2a:	80 83       	st	Z, r24
    2b2c:	ff 91       	pop	r31
    2b2e:	ef 91       	pop	r30
    2b30:	bf 91       	pop	r27
    2b32:	af 91       	pop	r26
    2b34:	9f 91       	pop	r25
    2b36:	8f 91       	pop	r24
    2b38:	2f 91       	pop	r18
    2b3a:	0f 90       	pop	r0
    2b3c:	0b be       	out	0x3b, r0	; 59
    2b3e:	0f 90       	pop	r0
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	0f 90       	pop	r0
    2b44:	1f 90       	pop	r1
    2b46:	18 95       	reti

00002b48 <__vector_54>:
    2b48:	1f 92       	push	r1
    2b4a:	0f 92       	push	r0
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	0f 92       	push	r0
    2b50:	11 24       	eor	r1, r1
    2b52:	0b b6       	in	r0, 0x3b	; 59
    2b54:	0f 92       	push	r0
    2b56:	2f 93       	push	r18
    2b58:	3f 93       	push	r19
    2b5a:	4f 93       	push	r20
    2b5c:	5f 93       	push	r21
    2b5e:	6f 93       	push	r22
    2b60:	7f 93       	push	r23
    2b62:	8f 93       	push	r24
    2b64:	9f 93       	push	r25
    2b66:	af 93       	push	r26
    2b68:	bf 93       	push	r27
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	ef 93       	push	r30
    2b70:	ff 93       	push	r31
    2b72:	a0 91 f6 0d 	lds	r26, 0x0DF6	; 0x800df6 <_ser_handle+0x6>
    2b76:	b0 91 f7 0d 	lds	r27, 0x0DF7	; 0x800df7 <_ser_handle+0x7>
    2b7a:	10 97       	sbiw	r26, 0x00	; 0
    2b7c:	11 f1       	breq	.+68     	; 0x2bc2 <__vector_54+0x7a>
    2b7e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2b82:	14 96       	adiw	r26, 0x04	; 4
    2b84:	ed 91       	ld	r30, X+
    2b86:	fc 91       	ld	r31, X
    2b88:	15 97       	sbiw	r26, 0x05	; 5
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	25 81       	ldd	r18, Z+5	; 0x05
    2b90:	98 1b       	sub	r25, r24
    2b92:	92 23       	and	r25, r18
    2b94:	84 81       	ldd	r24, Z+4	; 0x04
    2b96:	98 17       	cp	r25, r24
    2b98:	61 f0       	breq	.+24     	; 0x2bb2 <__vector_54+0x6a>
    2b9a:	83 81       	ldd	r24, Z+3	; 0x03
    2b9c:	26 95       	lsr	r18
    2b9e:	28 23       	and	r18, r24
    2ba0:	c0 81       	ld	r28, Z
    2ba2:	d1 81       	ldd	r29, Z+1	; 0x01
    2ba4:	c2 0f       	add	r28, r18
    2ba6:	d1 1d       	adc	r29, r1
    2ba8:	68 83       	st	Y, r22
    2baa:	8f 5f       	subi	r24, 0xFF	; 255
    2bac:	95 81       	ldd	r25, Z+5	; 0x05
    2bae:	89 23       	and	r24, r25
    2bb0:	83 83       	std	Z+3, r24	; 0x03
    2bb2:	16 96       	adiw	r26, 0x06	; 6
    2bb4:	ed 91       	ld	r30, X+
    2bb6:	fc 91       	ld	r31, X
    2bb8:	17 97       	sbiw	r26, 0x07	; 7
    2bba:	30 97       	sbiw	r30, 0x00	; 0
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <__vector_54+0x7a>
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	19 95       	eicall
    2bc2:	ff 91       	pop	r31
    2bc4:	ef 91       	pop	r30
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	bf 91       	pop	r27
    2bcc:	af 91       	pop	r26
    2bce:	9f 91       	pop	r25
    2bd0:	8f 91       	pop	r24
    2bd2:	7f 91       	pop	r23
    2bd4:	6f 91       	pop	r22
    2bd6:	5f 91       	pop	r21
    2bd8:	4f 91       	pop	r20
    2bda:	3f 91       	pop	r19
    2bdc:	2f 91       	pop	r18
    2bde:	0f 90       	pop	r0
    2be0:	0b be       	out	0x3b, r0	; 59
    2be2:	0f 90       	pop	r0
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	0f 90       	pop	r0
    2be8:	1f 90       	pop	r1
    2bea:	18 95       	reti

00002bec <__vector_55>:
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	0b b6       	in	r0, 0x3b	; 59
    2bf8:	0f 92       	push	r0
    2bfa:	2f 93       	push	r18
    2bfc:	8f 93       	push	r24
    2bfe:	9f 93       	push	r25
    2c00:	af 93       	push	r26
    2c02:	bf 93       	push	r27
    2c04:	ef 93       	push	r30
    2c06:	ff 93       	push	r31
    2c08:	e0 91 f6 0d 	lds	r30, 0x0DF6	; 0x800df6 <_ser_handle+0x6>
    2c0c:	f0 91 f7 0d 	lds	r31, 0x0DF7	; 0x800df7 <_ser_handle+0x7>
    2c10:	30 97       	sbiw	r30, 0x00	; 0
    2c12:	b9 f0       	breq	.+46     	; 0x2c42 <__vector_55+0x56>
    2c14:	02 80       	ldd	r0, Z+2	; 0x02
    2c16:	f3 81       	ldd	r31, Z+3	; 0x03
    2c18:	e0 2d       	mov	r30, r0
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	98 17       	cp	r25, r24
    2c20:	b1 f0       	breq	.+44     	; 0x2c4e <__vector_55+0x62>
    2c22:	92 81       	ldd	r25, Z+2	; 0x02
    2c24:	85 81       	ldd	r24, Z+5	; 0x05
    2c26:	28 2f       	mov	r18, r24
    2c28:	26 95       	lsr	r18
    2c2a:	29 23       	and	r18, r25
    2c2c:	a0 81       	ld	r26, Z
    2c2e:	b1 81       	ldd	r27, Z+1	; 0x01
    2c30:	a2 0f       	add	r26, r18
    2c32:	b1 1d       	adc	r27, r1
    2c34:	2c 91       	ld	r18, X
    2c36:	9f 5f       	subi	r25, 0xFF	; 255
    2c38:	89 23       	and	r24, r25
    2c3a:	82 83       	std	Z+2, r24	; 0x02
    2c3c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2c40:	0b c0       	rjmp	.+22     	; 0x2c58 <__vector_55+0x6c>
    2c42:	e1 e3       	ldi	r30, 0x31	; 49
    2c44:	f1 e0       	ldi	r31, 0x01	; 1
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 7d       	andi	r24, 0xDF	; 223
    2c4a:	80 83       	st	Z, r24
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <__vector_55+0x6c>
    2c4e:	e1 e3       	ldi	r30, 0x31	; 49
    2c50:	f1 e0       	ldi	r31, 0x01	; 1
    2c52:	80 81       	ld	r24, Z
    2c54:	8f 7d       	andi	r24, 0xDF	; 223
    2c56:	80 83       	st	Z, r24
    2c58:	ff 91       	pop	r31
    2c5a:	ef 91       	pop	r30
    2c5c:	bf 91       	pop	r27
    2c5e:	af 91       	pop	r26
    2c60:	9f 91       	pop	r25
    2c62:	8f 91       	pop	r24
    2c64:	2f 91       	pop	r18
    2c66:	0f 90       	pop	r0
    2c68:	0b be       	out	0x3b, r0	; 59
    2c6a:	0f 90       	pop	r0
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	0f 90       	pop	r0
    2c70:	1f 90       	pop	r1
    2c72:	18 95       	reti

00002c74 <usart_getchar>:
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	1f 92       	push	r1
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	be 01       	movw	r22, r28
    2c80:	6f 5f       	subi	r22, 0xFF	; 255
    2c82:	7f 4f       	sbci	r23, 0xFF	; 255
    2c84:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <_com_serial_instance>
    2c88:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <_com_serial_instance+0x1>
    2c8c:	7b dd       	rcall	.-1290   	; 0x2784 <serial_getByte>
    2c8e:	81 11       	cpse	r24, r1
    2c90:	f6 cf       	rjmp	.-20     	; 0x2c7e <usart_getchar+0xa>
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0f 90       	pop	r0
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	08 95       	ret

00002c9e <usart_putchar>:
    2c9e:	68 2f       	mov	r22, r24
    2ca0:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <_com_serial_instance>
    2ca4:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <_com_serial_instance+0x1>
    2ca8:	ed dc       	rcall	.-1574   	; 0x2684 <serial_sendByte>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	08 95       	ret

00002cb0 <stdio_initialise>:
    2cb0:	8f 92       	push	r8
    2cb2:	9f 92       	push	r9
    2cb4:	af 92       	push	r10
    2cb6:	cf 92       	push	r12
    2cb8:	ef 92       	push	r14
    2cba:	0f 93       	push	r16
    2cbc:	81 2c       	mov	r8, r1
    2cbe:	91 2c       	mov	r9, r1
    2cc0:	68 94       	set
    2cc2:	aa 24       	eor	r10, r10
    2cc4:	a7 f8       	bld	r10, 7
    2cc6:	68 94       	set
    2cc8:	cc 24       	eor	r12, r12
    2cca:	c7 f8       	bld	r12, 7
    2ccc:	e1 2c       	mov	r14, r1
    2cce:	00 e0       	ldi	r16, 0x00	; 0
    2cd0:	23 e0       	ldi	r18, 0x03	; 3
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	51 ee       	ldi	r21, 0xE1	; 225
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	38 dc       	rcall	.-1936   	; 0x254c <serial_create>
    2cdc:	90 93 f9 0d 	sts	0x0DF9, r25	; 0x800df9 <_com_serial_instance+0x1>
    2ce0:	80 93 f8 0d 	sts	0x0DF8, r24	; 0x800df8 <_com_serial_instance>
    2ce4:	ea e1       	ldi	r30, 0x1A	; 26
    2ce6:	fe e0       	ldi	r31, 0x0E	; 14
    2ce8:	82 e1       	ldi	r24, 0x12	; 18
    2cea:	92 e0       	ldi	r25, 0x02	; 2
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
    2cf0:	93 83       	std	Z+3, r25	; 0x03
    2cf2:	82 83       	std	Z+2, r24	; 0x02
    2cf4:	0f 91       	pop	r16
    2cf6:	ef 90       	pop	r14
    2cf8:	cf 90       	pop	r12
    2cfa:	af 90       	pop	r10
    2cfc:	9f 90       	pop	r9
    2cfe:	8f 90       	pop	r8
    2d00:	08 95       	ret

00002d02 <_initTwiInterface>:
    2d02:	80 91 08 0e 	lds	r24, 0x0E08	; 0x800e08 <_twiIsInitiated>
    2d06:	81 11       	cpse	r24, r1
    2d08:	0c c0       	rjmp	.+24     	; 0x2d22 <_initTwiInterface+0x20>
    2d0a:	8c e0       	ldi	r24, 0x0C	; 12
    2d0c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2d16:	84 e0       	ldi	r24, 0x04	; 4
    2d18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <_twiIsInitiated>
    2d22:	08 95       	ret

00002d24 <twiCreate>:
    2d24:	af 92       	push	r10
    2d26:	bf 92       	push	r11
    2d28:	cf 92       	push	r12
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	a8 2e       	mov	r10, r24
    2d3a:	b6 2e       	mov	r11, r22
    2d3c:	69 01       	movw	r12, r18
    2d3e:	7a 01       	movw	r14, r20
    2d40:	84 e0       	ldi	r24, 0x04	; 4
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	cb d3       	rcall	.+1942   	; 0x34dc <malloc>
    2d46:	ec 01       	movw	r28, r24
    2d48:	89 2b       	or	r24, r25
    2d4a:	61 f1       	breq	.+88     	; 0x2da4 <twiCreate+0x80>
    2d4c:	a8 82       	st	Y, r10
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	b8 12       	cpse	r11, r24
    2d52:	12 c0       	rjmp	.+36     	; 0x2d78 <twiCreate+0x54>
    2d54:	c7 01       	movw	r24, r14
    2d56:	b6 01       	movw	r22, r12
    2d58:	20 ea       	ldi	r18, 0xA0	; 160
    2d5a:	36 e8       	ldi	r19, 0x86	; 134
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	50 e0       	ldi	r21, 0x00	; 0
    2d60:	79 d3       	rcall	.+1778   	; 0x3454 <__udivmodsi4>
    2d62:	da 01       	movw	r26, r20
    2d64:	c9 01       	movw	r24, r18
    2d66:	40 97       	sbiw	r24, 0x10	; 16
    2d68:	a1 09       	sbc	r26, r1
    2d6a:	b1 09       	sbc	r27, r1
    2d6c:	b6 95       	lsr	r27
    2d6e:	a7 95       	ror	r26
    2d70:	97 95       	ror	r25
    2d72:	87 95       	ror	r24
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	11 c0       	rjmp	.+34     	; 0x2d9a <twiCreate+0x76>
    2d78:	c7 01       	movw	r24, r14
    2d7a:	b6 01       	movw	r22, r12
    2d7c:	20 e8       	ldi	r18, 0x80	; 128
    2d7e:	3a e1       	ldi	r19, 0x1A	; 26
    2d80:	46 e0       	ldi	r20, 0x06	; 6
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	67 d3       	rcall	.+1742   	; 0x3454 <__udivmodsi4>
    2d86:	da 01       	movw	r26, r20
    2d88:	c9 01       	movw	r24, r18
    2d8a:	40 97       	sbiw	r24, 0x10	; 16
    2d8c:	a1 09       	sbc	r26, r1
    2d8e:	b1 09       	sbc	r27, r1
    2d90:	b6 95       	lsr	r27
    2d92:	a7 95       	ror	r26
    2d94:	97 95       	ror	r25
    2d96:	87 95       	ror	r24
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	1b 83       	std	Y+3, r17	; 0x03
    2d9c:	0a 83       	std	Y+2, r16	; 0x02
    2d9e:	8c 2f       	mov	r24, r28
    2da0:	9d 2f       	mov	r25, r29
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <twiCreate+0x84>
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	ef 90       	pop	r14
    2db4:	df 90       	pop	r13
    2db6:	cf 90       	pop	r12
    2db8:	bf 90       	pop	r11
    2dba:	af 90       	pop	r10
    2dbc:	08 95       	ret

00002dbe <twiIsBusy>:
    2dbe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2dc2:	81 70       	andi	r24, 0x01	; 1
    2dc4:	08 95       	ret

00002dc6 <twiTransmit>:
    2dc6:	ff 92       	push	r15
    2dc8:	0f 93       	push	r16
    2dca:	1f 93       	push	r17
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	d1 f1       	breq	.+116    	; 0x2e48 <twiTransmit+0x82>
    2dd4:	4a 30       	cpi	r20, 0x0A	; 10
    2dd6:	d0 f5       	brcc	.+116    	; 0x2e4c <twiTransmit+0x86>
    2dd8:	f4 2e       	mov	r15, r20
    2dda:	8b 01       	movw	r16, r22
    2ddc:	ec 01       	movw	r28, r24
    2dde:	ef df       	rcall	.-34     	; 0x2dbe <twiIsBusy>
    2de0:	81 11       	cpse	r24, r1
    2de2:	36 c0       	rjmp	.+108    	; 0x2e50 <twiTransmit+0x8a>
    2de4:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <_twiCurrentHandler>
    2de8:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <_twiCurrentHandler+0x1>
    2dec:	c8 17       	cp	r28, r24
    2dee:	d9 07       	cpc	r29, r25
    2df0:	41 f0       	breq	.+16     	; 0x2e02 <twiTransmit+0x3c>
    2df2:	87 df       	rcall	.-242    	; 0x2d02 <_initTwiInterface>
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2dfa:	d0 93 fc 0d 	sts	0x0DFC, r29	; 0x800dfc <_twiCurrentHandler+0x1>
    2dfe:	c0 93 fb 0d 	sts	0x0DFB, r28	; 0x800dfb <_twiCurrentHandler>
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	8f 0d       	add	r24, r15
    2e06:	80 93 fd 0d 	sts	0x0DFD, r24	; 0x800dfd <_twiMessageLen>
    2e0a:	88 81       	ld	r24, Y
    2e0c:	88 0f       	add	r24, r24
    2e0e:	80 93 fe 0d 	sts	0x0DFE, r24	; 0x800dfe <_twiMessageBuffer>
    2e12:	ff 20       	and	r15, r15
    2e14:	89 f0       	breq	.+34     	; 0x2e38 <twiTransmit+0x72>
    2e16:	f8 01       	movw	r30, r16
    2e18:	af ef       	ldi	r26, 0xFF	; 255
    2e1a:	bd e0       	ldi	r27, 0x0D	; 13
    2e1c:	4f ef       	ldi	r20, 0xFF	; 255
    2e1e:	4f 0d       	add	r20, r15
    2e20:	64 2f       	mov	r22, r20
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	cb 01       	movw	r24, r22
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	b8 01       	movw	r22, r16
    2e2a:	68 0f       	add	r22, r24
    2e2c:	79 1f       	adc	r23, r25
    2e2e:	81 91       	ld	r24, Z+
    2e30:	8d 93       	st	X+, r24
    2e32:	e6 17       	cp	r30, r22
    2e34:	f7 07       	cpc	r31, r23
    2e36:	d9 f7       	brne	.-10     	; 0x2e2e <twiTransmit+0x68>
    2e38:	88 ef       	ldi	r24, 0xF8	; 248
    2e3a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    2e3e:	85 ea       	ldi	r24, 0xA5	; 165
    2e40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2e44:	84 e0       	ldi	r24, 0x04	; 4
    2e46:	05 c0       	rjmp	.+10     	; 0x2e52 <twiTransmit+0x8c>
    2e48:	86 e0       	ldi	r24, 0x06	; 6
    2e4a:	03 c0       	rjmp	.+6      	; 0x2e52 <twiTransmit+0x8c>
    2e4c:	87 e0       	ldi	r24, 0x07	; 7
    2e4e:	01 c0       	rjmp	.+2      	; 0x2e52 <twiTransmit+0x8c>
    2e50:	82 e0       	ldi	r24, 0x02	; 2
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	08 95       	ret

00002e5e <twiReceive>:
    2e5e:	1f 93       	push	r17
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	29 f1       	breq	.+74     	; 0x2eb2 <twiReceive+0x54>
    2e68:	6b 30       	cpi	r22, 0x0B	; 11
    2e6a:	28 f5       	brcc	.+74     	; 0x2eb6 <twiReceive+0x58>
    2e6c:	16 2f       	mov	r17, r22
    2e6e:	ec 01       	movw	r28, r24
    2e70:	a6 df       	rcall	.-180    	; 0x2dbe <twiIsBusy>
    2e72:	81 11       	cpse	r24, r1
    2e74:	22 c0       	rjmp	.+68     	; 0x2eba <twiReceive+0x5c>
    2e76:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <_twiCurrentHandler>
    2e7a:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <_twiCurrentHandler+0x1>
    2e7e:	c8 17       	cp	r28, r24
    2e80:	d9 07       	cpc	r29, r25
    2e82:	41 f0       	breq	.+16     	; 0x2e94 <twiReceive+0x36>
    2e84:	3e df       	rcall	.-388    	; 0x2d02 <_initTwiInterface>
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2e8c:	d0 93 fc 0d 	sts	0x0DFC, r29	; 0x800dfc <_twiCurrentHandler+0x1>
    2e90:	c0 93 fb 0d 	sts	0x0DFB, r28	; 0x800dfb <_twiCurrentHandler>
    2e94:	10 93 fd 0d 	sts	0x0DFD, r17	; 0x800dfd <_twiMessageLen>
    2e98:	88 81       	ld	r24, Y
    2e9a:	88 0f       	add	r24, r24
    2e9c:	81 60       	ori	r24, 0x01	; 1
    2e9e:	80 93 fe 0d 	sts	0x0DFE, r24	; 0x800dfe <_twiMessageBuffer>
    2ea2:	88 ef       	ldi	r24, 0xF8	; 248
    2ea4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    2ea8:	85 ea       	ldi	r24, 0xA5	; 165
    2eaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2eae:	85 e0       	ldi	r24, 0x05	; 5
    2eb0:	05 c0       	rjmp	.+10     	; 0x2ebc <twiReceive+0x5e>
    2eb2:	86 e0       	ldi	r24, 0x06	; 6
    2eb4:	03 c0       	rjmp	.+6      	; 0x2ebc <twiReceive+0x5e>
    2eb6:	87 e0       	ldi	r24, 0x07	; 7
    2eb8:	01 c0       	rjmp	.+2      	; 0x2ebc <twiReceive+0x5e>
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	1f 91       	pop	r17
    2ec2:	08 95       	ret

00002ec4 <__vector_39>:
    2ec4:	1f 92       	push	r1
    2ec6:	0f 92       	push	r0
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	0f 92       	push	r0
    2ecc:	11 24       	eor	r1, r1
    2ece:	0b b6       	in	r0, 0x3b	; 59
    2ed0:	0f 92       	push	r0
    2ed2:	2f 93       	push	r18
    2ed4:	3f 93       	push	r19
    2ed6:	4f 93       	push	r20
    2ed8:	5f 93       	push	r21
    2eda:	6f 93       	push	r22
    2edc:	7f 93       	push	r23
    2ede:	8f 93       	push	r24
    2ee0:	9f 93       	push	r25
    2ee2:	af 93       	push	r26
    2ee4:	bf 93       	push	r27
    2ee6:	ef 93       	push	r30
    2ee8:	ff 93       	push	r31
    2eea:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2eee:	8e 2f       	mov	r24, r30
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	38 97       	sbiw	r30, 0x08	; 8
    2ef6:	e1 35       	cpi	r30, 0x51	; 81
    2ef8:	f1 05       	cpc	r31, r1
    2efa:	08 f0       	brcs	.+2      	; 0x2efe <__vector_39+0x3a>
    2efc:	75 c0       	rjmp	.+234    	; 0x2fe8 <__vector_39+0x124>
    2efe:	88 27       	eor	r24, r24
    2f00:	ee 58       	subi	r30, 0x8E	; 142
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	8f 4f       	sbci	r24, 0xFF	; 255
    2f06:	c8 c2       	rjmp	.+1424   	; 0x3498 <__tablejump2__>
    2f08:	10 92 fa 0d 	sts	0x0DFA, r1	; 0x800dfa <_index.1885>
    2f0c:	e0 91 fa 0d 	lds	r30, 0x0DFA	; 0x800dfa <_index.1885>
    2f10:	80 91 fd 0d 	lds	r24, 0x0DFD	; 0x800dfd <_twiMessageLen>
    2f14:	e8 17       	cp	r30, r24
    2f16:	70 f4       	brcc	.+28     	; 0x2f34 <__vector_39+0x70>
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	8e 0f       	add	r24, r30
    2f1c:	80 93 fa 0d 	sts	0x0DFA, r24	; 0x800dfa <_index.1885>
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	e2 50       	subi	r30, 0x02	; 2
    2f24:	f2 4f       	sbci	r31, 0xF2	; 242
    2f26:	80 81       	ld	r24, Z
    2f28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2f2c:	85 e8       	ldi	r24, 0x85	; 133
    2f2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2f32:	72 c0       	rjmp	.+228    	; 0x3018 <__vector_39+0x154>
    2f34:	84 e9       	ldi	r24, 0x94	; 148
    2f36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2f3a:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <_twiCurrentHandler>
    2f3e:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <_twiCurrentHandler+0x1>
    2f42:	dc 01       	movw	r26, r24
    2f44:	12 96       	adiw	r26, 0x02	; 2
    2f46:	ed 91       	ld	r30, X+
    2f48:	fc 91       	ld	r31, X
    2f4a:	13 97       	sbiw	r26, 0x03	; 3
    2f4c:	30 97       	sbiw	r30, 0x00	; 0
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <__vector_39+0x8e>
    2f50:	63 c0       	rjmp	.+198    	; 0x3018 <__vector_39+0x154>
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	40 e0       	ldi	r20, 0x00	; 0
    2f56:	50 e0       	ldi	r21, 0x00	; 0
    2f58:	64 e0       	ldi	r22, 0x04	; 4
    2f5a:	19 95       	eicall
    2f5c:	5d c0       	rjmp	.+186    	; 0x3018 <__vector_39+0x154>
    2f5e:	e0 91 fa 0d 	lds	r30, 0x0DFA	; 0x800dfa <_index.1885>
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	8e 0f       	add	r24, r30
    2f66:	80 93 fa 0d 	sts	0x0DFA, r24	; 0x800dfa <_index.1885>
    2f6a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	e2 50       	subi	r30, 0x02	; 2
    2f72:	f2 4f       	sbci	r31, 0xF2	; 242
    2f74:	80 83       	st	Z, r24
    2f76:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2f7a:	80 34       	cpi	r24, 0x40	; 64
    2f7c:	11 f4       	brne	.+4      	; 0x2f82 <__vector_39+0xbe>
    2f7e:	10 92 fa 0d 	sts	0x0DFA, r1	; 0x800dfa <_index.1885>
    2f82:	20 91 fa 0d 	lds	r18, 0x0DFA	; 0x800dfa <_index.1885>
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	80 91 fd 0d 	lds	r24, 0x0DFD	; 0x800dfd <_twiMessageLen>
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	28 17       	cp	r18, r24
    2f92:	39 07       	cpc	r19, r25
    2f94:	24 f4       	brge	.+8      	; 0x2f9e <__vector_39+0xda>
    2f96:	85 ec       	ldi	r24, 0xC5	; 197
    2f98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2f9c:	3d c0       	rjmp	.+122    	; 0x3018 <__vector_39+0x154>
    2f9e:	85 e8       	ldi	r24, 0x85	; 133
    2fa0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2fa4:	39 c0       	rjmp	.+114    	; 0x3018 <__vector_39+0x154>
    2fa6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2faa:	e0 91 fa 0d 	lds	r30, 0x0DFA	; 0x800dfa <_index.1885>
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	e2 50       	subi	r30, 0x02	; 2
    2fb2:	f2 4f       	sbci	r31, 0xF2	; 242
    2fb4:	80 83       	st	Z, r24
    2fb6:	84 e9       	ldi	r24, 0x94	; 148
    2fb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2fbc:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <_twiCurrentHandler>
    2fc0:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <_twiCurrentHandler+0x1>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	12 96       	adiw	r26, 0x02	; 2
    2fc8:	ed 91       	ld	r30, X+
    2fca:	fc 91       	ld	r31, X
    2fcc:	13 97       	sbiw	r26, 0x03	; 3
    2fce:	30 97       	sbiw	r30, 0x00	; 0
    2fd0:	19 f1       	breq	.+70     	; 0x3018 <__vector_39+0x154>
    2fd2:	20 91 fd 0d 	lds	r18, 0x0DFD	; 0x800dfd <_twiMessageLen>
    2fd6:	4e ef       	ldi	r20, 0xFE	; 254
    2fd8:	5d e0       	ldi	r21, 0x0D	; 13
    2fda:	65 e0       	ldi	r22, 0x05	; 5
    2fdc:	19 95       	eicall
    2fde:	1c c0       	rjmp	.+56     	; 0x3018 <__vector_39+0x154>
    2fe0:	85 ea       	ldi	r24, 0xA5	; 165
    2fe2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2fe6:	18 c0       	rjmp	.+48     	; 0x3018 <__vector_39+0x154>
    2fe8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2fec:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    2ff0:	84 e0       	ldi	r24, 0x04	; 4
    2ff2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2ff6:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <_twiCurrentHandler>
    2ffa:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <_twiCurrentHandler+0x1>
    2ffe:	dc 01       	movw	r26, r24
    3000:	12 96       	adiw	r26, 0x02	; 2
    3002:	ed 91       	ld	r30, X+
    3004:	fc 91       	ld	r31, X
    3006:	13 97       	sbiw	r26, 0x03	; 3
    3008:	30 97       	sbiw	r30, 0x00	; 0
    300a:	31 f0       	breq	.+12     	; 0x3018 <__vector_39+0x154>
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    3016:	19 95       	eicall
    3018:	ff 91       	pop	r31
    301a:	ef 91       	pop	r30
    301c:	bf 91       	pop	r27
    301e:	af 91       	pop	r26
    3020:	9f 91       	pop	r25
    3022:	8f 91       	pop	r24
    3024:	7f 91       	pop	r23
    3026:	6f 91       	pop	r22
    3028:	5f 91       	pop	r21
    302a:	4f 91       	pop	r20
    302c:	3f 91       	pop	r19
    302e:	2f 91       	pop	r18
    3030:	0f 90       	pop	r0
    3032:	0b be       	out	0x3b, r0	; 59
    3034:	0f 90       	pop	r0
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	0f 90       	pop	r0
    303a:	1f 90       	pop	r1
    303c:	18 95       	reti

0000303e <fifo_init>:
    303e:	fc 01       	movw	r30, r24
    3040:	41 11       	cpse	r20, r1
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <fifo_init+0x8>
    3044:	6c d3       	rcall	.+1752   	; 0x371e <abort>
    3046:	84 2f       	mov	r24, r20
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	9c 01       	movw	r18, r24
    304c:	21 50       	subi	r18, 0x01	; 1
    304e:	31 09       	sbc	r19, r1
    3050:	82 23       	and	r24, r18
    3052:	93 23       	and	r25, r19
    3054:	89 2b       	or	r24, r25
    3056:	09 f0       	breq	.+2      	; 0x305a <fifo_init+0x1c>
    3058:	62 d3       	rcall	.+1732   	; 0x371e <abort>
    305a:	41 38       	cpi	r20, 0x81	; 129
    305c:	08 f0       	brcs	.+2      	; 0x3060 <fifo_init+0x22>
    305e:	5f d3       	rcall	.+1726   	; 0x371e <abort>
    3060:	12 82       	std	Z+2, r1	; 0x02
    3062:	13 82       	std	Z+3, r1	; 0x03
    3064:	44 83       	std	Z+4, r20	; 0x04
    3066:	44 0f       	add	r20, r20
    3068:	41 50       	subi	r20, 0x01	; 1
    306a:	45 83       	std	Z+5, r20	; 0x05
    306c:	71 83       	std	Z+1, r23	; 0x01
    306e:	60 83       	st	Z, r22
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	08 95       	ret

00003076 <__subsf3>:
    3076:	50 58       	subi	r21, 0x80	; 128

00003078 <__addsf3>:
    3078:	bb 27       	eor	r27, r27
    307a:	aa 27       	eor	r26, r26
    307c:	0e d0       	rcall	.+28     	; 0x309a <__addsf3x>
    307e:	4d c1       	rjmp	.+666    	; 0x331a <__fp_round>
    3080:	3e d1       	rcall	.+636    	; 0x32fe <__fp_pscA>
    3082:	30 f0       	brcs	.+12     	; 0x3090 <__addsf3+0x18>
    3084:	43 d1       	rcall	.+646    	; 0x330c <__fp_pscB>
    3086:	20 f0       	brcs	.+8      	; 0x3090 <__addsf3+0x18>
    3088:	31 f4       	brne	.+12     	; 0x3096 <__addsf3+0x1e>
    308a:	9f 3f       	cpi	r25, 0xFF	; 255
    308c:	11 f4       	brne	.+4      	; 0x3092 <__addsf3+0x1a>
    308e:	1e f4       	brtc	.+6      	; 0x3096 <__addsf3+0x1e>
    3090:	33 c1       	rjmp	.+614    	; 0x32f8 <__fp_nan>
    3092:	0e f4       	brtc	.+2      	; 0x3096 <__addsf3+0x1e>
    3094:	e0 95       	com	r30
    3096:	e7 fb       	bst	r30, 7
    3098:	29 c1       	rjmp	.+594    	; 0x32ec <__fp_inf>

0000309a <__addsf3x>:
    309a:	e9 2f       	mov	r30, r25
    309c:	4f d1       	rcall	.+670    	; 0x333c <__fp_split3>
    309e:	80 f3       	brcs	.-32     	; 0x3080 <__addsf3+0x8>
    30a0:	ba 17       	cp	r27, r26
    30a2:	62 07       	cpc	r22, r18
    30a4:	73 07       	cpc	r23, r19
    30a6:	84 07       	cpc	r24, r20
    30a8:	95 07       	cpc	r25, r21
    30aa:	18 f0       	brcs	.+6      	; 0x30b2 <__addsf3x+0x18>
    30ac:	71 f4       	brne	.+28     	; 0x30ca <__addsf3x+0x30>
    30ae:	9e f5       	brtc	.+102    	; 0x3116 <__addsf3x+0x7c>
    30b0:	67 c1       	rjmp	.+718    	; 0x3380 <__fp_zero>
    30b2:	0e f4       	brtc	.+2      	; 0x30b6 <__addsf3x+0x1c>
    30b4:	e0 95       	com	r30
    30b6:	0b 2e       	mov	r0, r27
    30b8:	ba 2f       	mov	r27, r26
    30ba:	a0 2d       	mov	r26, r0
    30bc:	0b 01       	movw	r0, r22
    30be:	b9 01       	movw	r22, r18
    30c0:	90 01       	movw	r18, r0
    30c2:	0c 01       	movw	r0, r24
    30c4:	ca 01       	movw	r24, r20
    30c6:	a0 01       	movw	r20, r0
    30c8:	11 24       	eor	r1, r1
    30ca:	ff 27       	eor	r31, r31
    30cc:	59 1b       	sub	r21, r25
    30ce:	99 f0       	breq	.+38     	; 0x30f6 <__addsf3x+0x5c>
    30d0:	59 3f       	cpi	r21, 0xF9	; 249
    30d2:	50 f4       	brcc	.+20     	; 0x30e8 <__addsf3x+0x4e>
    30d4:	50 3e       	cpi	r21, 0xE0	; 224
    30d6:	68 f1       	brcs	.+90     	; 0x3132 <__addsf3x+0x98>
    30d8:	1a 16       	cp	r1, r26
    30da:	f0 40       	sbci	r31, 0x00	; 0
    30dc:	a2 2f       	mov	r26, r18
    30de:	23 2f       	mov	r18, r19
    30e0:	34 2f       	mov	r19, r20
    30e2:	44 27       	eor	r20, r20
    30e4:	58 5f       	subi	r21, 0xF8	; 248
    30e6:	f3 cf       	rjmp	.-26     	; 0x30ce <__addsf3x+0x34>
    30e8:	46 95       	lsr	r20
    30ea:	37 95       	ror	r19
    30ec:	27 95       	ror	r18
    30ee:	a7 95       	ror	r26
    30f0:	f0 40       	sbci	r31, 0x00	; 0
    30f2:	53 95       	inc	r21
    30f4:	c9 f7       	brne	.-14     	; 0x30e8 <__addsf3x+0x4e>
    30f6:	7e f4       	brtc	.+30     	; 0x3116 <__addsf3x+0x7c>
    30f8:	1f 16       	cp	r1, r31
    30fa:	ba 0b       	sbc	r27, r26
    30fc:	62 0b       	sbc	r22, r18
    30fe:	73 0b       	sbc	r23, r19
    3100:	84 0b       	sbc	r24, r20
    3102:	ba f0       	brmi	.+46     	; 0x3132 <__addsf3x+0x98>
    3104:	91 50       	subi	r25, 0x01	; 1
    3106:	a1 f0       	breq	.+40     	; 0x3130 <__addsf3x+0x96>
    3108:	ff 0f       	add	r31, r31
    310a:	bb 1f       	adc	r27, r27
    310c:	66 1f       	adc	r22, r22
    310e:	77 1f       	adc	r23, r23
    3110:	88 1f       	adc	r24, r24
    3112:	c2 f7       	brpl	.-16     	; 0x3104 <__addsf3x+0x6a>
    3114:	0e c0       	rjmp	.+28     	; 0x3132 <__addsf3x+0x98>
    3116:	ba 0f       	add	r27, r26
    3118:	62 1f       	adc	r22, r18
    311a:	73 1f       	adc	r23, r19
    311c:	84 1f       	adc	r24, r20
    311e:	48 f4       	brcc	.+18     	; 0x3132 <__addsf3x+0x98>
    3120:	87 95       	ror	r24
    3122:	77 95       	ror	r23
    3124:	67 95       	ror	r22
    3126:	b7 95       	ror	r27
    3128:	f7 95       	ror	r31
    312a:	9e 3f       	cpi	r25, 0xFE	; 254
    312c:	08 f0       	brcs	.+2      	; 0x3130 <__addsf3x+0x96>
    312e:	b3 cf       	rjmp	.-154    	; 0x3096 <__addsf3+0x1e>
    3130:	93 95       	inc	r25
    3132:	88 0f       	add	r24, r24
    3134:	08 f0       	brcs	.+2      	; 0x3138 <__addsf3x+0x9e>
    3136:	99 27       	eor	r25, r25
    3138:	ee 0f       	add	r30, r30
    313a:	97 95       	ror	r25
    313c:	87 95       	ror	r24
    313e:	08 95       	ret

00003140 <__divsf3>:
    3140:	0c d0       	rcall	.+24     	; 0x315a <__divsf3x>
    3142:	eb c0       	rjmp	.+470    	; 0x331a <__fp_round>
    3144:	e3 d0       	rcall	.+454    	; 0x330c <__fp_pscB>
    3146:	40 f0       	brcs	.+16     	; 0x3158 <__divsf3+0x18>
    3148:	da d0       	rcall	.+436    	; 0x32fe <__fp_pscA>
    314a:	30 f0       	brcs	.+12     	; 0x3158 <__divsf3+0x18>
    314c:	21 f4       	brne	.+8      	; 0x3156 <__divsf3+0x16>
    314e:	5f 3f       	cpi	r21, 0xFF	; 255
    3150:	19 f0       	breq	.+6      	; 0x3158 <__divsf3+0x18>
    3152:	cc c0       	rjmp	.+408    	; 0x32ec <__fp_inf>
    3154:	51 11       	cpse	r21, r1
    3156:	15 c1       	rjmp	.+554    	; 0x3382 <__fp_szero>
    3158:	cf c0       	rjmp	.+414    	; 0x32f8 <__fp_nan>

0000315a <__divsf3x>:
    315a:	f0 d0       	rcall	.+480    	; 0x333c <__fp_split3>
    315c:	98 f3       	brcs	.-26     	; 0x3144 <__divsf3+0x4>

0000315e <__divsf3_pse>:
    315e:	99 23       	and	r25, r25
    3160:	c9 f3       	breq	.-14     	; 0x3154 <__divsf3+0x14>
    3162:	55 23       	and	r21, r21
    3164:	b1 f3       	breq	.-20     	; 0x3152 <__divsf3+0x12>
    3166:	95 1b       	sub	r25, r21
    3168:	55 0b       	sbc	r21, r21
    316a:	bb 27       	eor	r27, r27
    316c:	aa 27       	eor	r26, r26
    316e:	62 17       	cp	r22, r18
    3170:	73 07       	cpc	r23, r19
    3172:	84 07       	cpc	r24, r20
    3174:	38 f0       	brcs	.+14     	; 0x3184 <__divsf3_pse+0x26>
    3176:	9f 5f       	subi	r25, 0xFF	; 255
    3178:	5f 4f       	sbci	r21, 0xFF	; 255
    317a:	22 0f       	add	r18, r18
    317c:	33 1f       	adc	r19, r19
    317e:	44 1f       	adc	r20, r20
    3180:	aa 1f       	adc	r26, r26
    3182:	a9 f3       	breq	.-22     	; 0x316e <__divsf3_pse+0x10>
    3184:	33 d0       	rcall	.+102    	; 0x31ec <__divsf3_pse+0x8e>
    3186:	0e 2e       	mov	r0, r30
    3188:	3a f0       	brmi	.+14     	; 0x3198 <__divsf3_pse+0x3a>
    318a:	e0 e8       	ldi	r30, 0x80	; 128
    318c:	30 d0       	rcall	.+96     	; 0x31ee <__divsf3_pse+0x90>
    318e:	91 50       	subi	r25, 0x01	; 1
    3190:	50 40       	sbci	r21, 0x00	; 0
    3192:	e6 95       	lsr	r30
    3194:	00 1c       	adc	r0, r0
    3196:	ca f7       	brpl	.-14     	; 0x318a <__divsf3_pse+0x2c>
    3198:	29 d0       	rcall	.+82     	; 0x31ec <__divsf3_pse+0x8e>
    319a:	fe 2f       	mov	r31, r30
    319c:	27 d0       	rcall	.+78     	; 0x31ec <__divsf3_pse+0x8e>
    319e:	66 0f       	add	r22, r22
    31a0:	77 1f       	adc	r23, r23
    31a2:	88 1f       	adc	r24, r24
    31a4:	bb 1f       	adc	r27, r27
    31a6:	26 17       	cp	r18, r22
    31a8:	37 07       	cpc	r19, r23
    31aa:	48 07       	cpc	r20, r24
    31ac:	ab 07       	cpc	r26, r27
    31ae:	b0 e8       	ldi	r27, 0x80	; 128
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <__divsf3_pse+0x56>
    31b2:	bb 0b       	sbc	r27, r27
    31b4:	80 2d       	mov	r24, r0
    31b6:	bf 01       	movw	r22, r30
    31b8:	ff 27       	eor	r31, r31
    31ba:	93 58       	subi	r25, 0x83	; 131
    31bc:	5f 4f       	sbci	r21, 0xFF	; 255
    31be:	2a f0       	brmi	.+10     	; 0x31ca <__divsf3_pse+0x6c>
    31c0:	9e 3f       	cpi	r25, 0xFE	; 254
    31c2:	51 05       	cpc	r21, r1
    31c4:	68 f0       	brcs	.+26     	; 0x31e0 <__divsf3_pse+0x82>
    31c6:	92 c0       	rjmp	.+292    	; 0x32ec <__fp_inf>
    31c8:	dc c0       	rjmp	.+440    	; 0x3382 <__fp_szero>
    31ca:	5f 3f       	cpi	r21, 0xFF	; 255
    31cc:	ec f3       	brlt	.-6      	; 0x31c8 <__divsf3_pse+0x6a>
    31ce:	98 3e       	cpi	r25, 0xE8	; 232
    31d0:	dc f3       	brlt	.-10     	; 0x31c8 <__divsf3_pse+0x6a>
    31d2:	86 95       	lsr	r24
    31d4:	77 95       	ror	r23
    31d6:	67 95       	ror	r22
    31d8:	b7 95       	ror	r27
    31da:	f7 95       	ror	r31
    31dc:	9f 5f       	subi	r25, 0xFF	; 255
    31de:	c9 f7       	brne	.-14     	; 0x31d2 <__divsf3_pse+0x74>
    31e0:	88 0f       	add	r24, r24
    31e2:	91 1d       	adc	r25, r1
    31e4:	96 95       	lsr	r25
    31e6:	87 95       	ror	r24
    31e8:	97 f9       	bld	r25, 7
    31ea:	08 95       	ret
    31ec:	e1 e0       	ldi	r30, 0x01	; 1
    31ee:	66 0f       	add	r22, r22
    31f0:	77 1f       	adc	r23, r23
    31f2:	88 1f       	adc	r24, r24
    31f4:	bb 1f       	adc	r27, r27
    31f6:	62 17       	cp	r22, r18
    31f8:	73 07       	cpc	r23, r19
    31fa:	84 07       	cpc	r24, r20
    31fc:	ba 07       	cpc	r27, r26
    31fe:	20 f0       	brcs	.+8      	; 0x3208 <__divsf3_pse+0xaa>
    3200:	62 1b       	sub	r22, r18
    3202:	73 0b       	sbc	r23, r19
    3204:	84 0b       	sbc	r24, r20
    3206:	ba 0b       	sbc	r27, r26
    3208:	ee 1f       	adc	r30, r30
    320a:	88 f7       	brcc	.-30     	; 0x31ee <__divsf3_pse+0x90>
    320c:	e0 95       	com	r30
    320e:	08 95       	ret

00003210 <__fixsfsi>:
    3210:	04 d0       	rcall	.+8      	; 0x321a <__fixunssfsi>
    3212:	68 94       	set
    3214:	b1 11       	cpse	r27, r1
    3216:	b5 c0       	rjmp	.+362    	; 0x3382 <__fp_szero>
    3218:	08 95       	ret

0000321a <__fixunssfsi>:
    321a:	98 d0       	rcall	.+304    	; 0x334c <__fp_splitA>
    321c:	88 f0       	brcs	.+34     	; 0x3240 <__fixunssfsi+0x26>
    321e:	9f 57       	subi	r25, 0x7F	; 127
    3220:	90 f0       	brcs	.+36     	; 0x3246 <__fixunssfsi+0x2c>
    3222:	b9 2f       	mov	r27, r25
    3224:	99 27       	eor	r25, r25
    3226:	b7 51       	subi	r27, 0x17	; 23
    3228:	a0 f0       	brcs	.+40     	; 0x3252 <__fixunssfsi+0x38>
    322a:	d1 f0       	breq	.+52     	; 0x3260 <__fixunssfsi+0x46>
    322c:	66 0f       	add	r22, r22
    322e:	77 1f       	adc	r23, r23
    3230:	88 1f       	adc	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	1a f0       	brmi	.+6      	; 0x323c <__fixunssfsi+0x22>
    3236:	ba 95       	dec	r27
    3238:	c9 f7       	brne	.-14     	; 0x322c <__fixunssfsi+0x12>
    323a:	12 c0       	rjmp	.+36     	; 0x3260 <__fixunssfsi+0x46>
    323c:	b1 30       	cpi	r27, 0x01	; 1
    323e:	81 f0       	breq	.+32     	; 0x3260 <__fixunssfsi+0x46>
    3240:	9f d0       	rcall	.+318    	; 0x3380 <__fp_zero>
    3242:	b1 e0       	ldi	r27, 0x01	; 1
    3244:	08 95       	ret
    3246:	9c c0       	rjmp	.+312    	; 0x3380 <__fp_zero>
    3248:	67 2f       	mov	r22, r23
    324a:	78 2f       	mov	r23, r24
    324c:	88 27       	eor	r24, r24
    324e:	b8 5f       	subi	r27, 0xF8	; 248
    3250:	39 f0       	breq	.+14     	; 0x3260 <__fixunssfsi+0x46>
    3252:	b9 3f       	cpi	r27, 0xF9	; 249
    3254:	cc f3       	brlt	.-14     	; 0x3248 <__fixunssfsi+0x2e>
    3256:	86 95       	lsr	r24
    3258:	77 95       	ror	r23
    325a:	67 95       	ror	r22
    325c:	b3 95       	inc	r27
    325e:	d9 f7       	brne	.-10     	; 0x3256 <__fixunssfsi+0x3c>
    3260:	3e f4       	brtc	.+14     	; 0x3270 <__fixunssfsi+0x56>
    3262:	90 95       	com	r25
    3264:	80 95       	com	r24
    3266:	70 95       	com	r23
    3268:	61 95       	neg	r22
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	8f 4f       	sbci	r24, 0xFF	; 255
    326e:	9f 4f       	sbci	r25, 0xFF	; 255
    3270:	08 95       	ret

00003272 <__floatunsisf>:
    3272:	e8 94       	clt
    3274:	09 c0       	rjmp	.+18     	; 0x3288 <__floatsisf+0x12>

00003276 <__floatsisf>:
    3276:	97 fb       	bst	r25, 7
    3278:	3e f4       	brtc	.+14     	; 0x3288 <__floatsisf+0x12>
    327a:	90 95       	com	r25
    327c:	80 95       	com	r24
    327e:	70 95       	com	r23
    3280:	61 95       	neg	r22
    3282:	7f 4f       	sbci	r23, 0xFF	; 255
    3284:	8f 4f       	sbci	r24, 0xFF	; 255
    3286:	9f 4f       	sbci	r25, 0xFF	; 255
    3288:	99 23       	and	r25, r25
    328a:	a9 f0       	breq	.+42     	; 0x32b6 <__floatsisf+0x40>
    328c:	f9 2f       	mov	r31, r25
    328e:	96 e9       	ldi	r25, 0x96	; 150
    3290:	bb 27       	eor	r27, r27
    3292:	93 95       	inc	r25
    3294:	f6 95       	lsr	r31
    3296:	87 95       	ror	r24
    3298:	77 95       	ror	r23
    329a:	67 95       	ror	r22
    329c:	b7 95       	ror	r27
    329e:	f1 11       	cpse	r31, r1
    32a0:	f8 cf       	rjmp	.-16     	; 0x3292 <__floatsisf+0x1c>
    32a2:	fa f4       	brpl	.+62     	; 0x32e2 <__floatsisf+0x6c>
    32a4:	bb 0f       	add	r27, r27
    32a6:	11 f4       	brne	.+4      	; 0x32ac <__floatsisf+0x36>
    32a8:	60 ff       	sbrs	r22, 0
    32aa:	1b c0       	rjmp	.+54     	; 0x32e2 <__floatsisf+0x6c>
    32ac:	6f 5f       	subi	r22, 0xFF	; 255
    32ae:	7f 4f       	sbci	r23, 0xFF	; 255
    32b0:	8f 4f       	sbci	r24, 0xFF	; 255
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	16 c0       	rjmp	.+44     	; 0x32e2 <__floatsisf+0x6c>
    32b6:	88 23       	and	r24, r24
    32b8:	11 f0       	breq	.+4      	; 0x32be <__floatsisf+0x48>
    32ba:	96 e9       	ldi	r25, 0x96	; 150
    32bc:	11 c0       	rjmp	.+34     	; 0x32e0 <__floatsisf+0x6a>
    32be:	77 23       	and	r23, r23
    32c0:	21 f0       	breq	.+8      	; 0x32ca <__floatsisf+0x54>
    32c2:	9e e8       	ldi	r25, 0x8E	; 142
    32c4:	87 2f       	mov	r24, r23
    32c6:	76 2f       	mov	r23, r22
    32c8:	05 c0       	rjmp	.+10     	; 0x32d4 <__floatsisf+0x5e>
    32ca:	66 23       	and	r22, r22
    32cc:	71 f0       	breq	.+28     	; 0x32ea <__floatsisf+0x74>
    32ce:	96 e8       	ldi	r25, 0x86	; 134
    32d0:	86 2f       	mov	r24, r22
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	60 e0       	ldi	r22, 0x00	; 0
    32d6:	2a f0       	brmi	.+10     	; 0x32e2 <__floatsisf+0x6c>
    32d8:	9a 95       	dec	r25
    32da:	66 0f       	add	r22, r22
    32dc:	77 1f       	adc	r23, r23
    32de:	88 1f       	adc	r24, r24
    32e0:	da f7       	brpl	.-10     	; 0x32d8 <__floatsisf+0x62>
    32e2:	88 0f       	add	r24, r24
    32e4:	96 95       	lsr	r25
    32e6:	87 95       	ror	r24
    32e8:	97 f9       	bld	r25, 7
    32ea:	08 95       	ret

000032ec <__fp_inf>:
    32ec:	97 f9       	bld	r25, 7
    32ee:	9f 67       	ori	r25, 0x7F	; 127
    32f0:	80 e8       	ldi	r24, 0x80	; 128
    32f2:	70 e0       	ldi	r23, 0x00	; 0
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	08 95       	ret

000032f8 <__fp_nan>:
    32f8:	9f ef       	ldi	r25, 0xFF	; 255
    32fa:	80 ec       	ldi	r24, 0xC0	; 192
    32fc:	08 95       	ret

000032fe <__fp_pscA>:
    32fe:	00 24       	eor	r0, r0
    3300:	0a 94       	dec	r0
    3302:	16 16       	cp	r1, r22
    3304:	17 06       	cpc	r1, r23
    3306:	18 06       	cpc	r1, r24
    3308:	09 06       	cpc	r0, r25
    330a:	08 95       	ret

0000330c <__fp_pscB>:
    330c:	00 24       	eor	r0, r0
    330e:	0a 94       	dec	r0
    3310:	12 16       	cp	r1, r18
    3312:	13 06       	cpc	r1, r19
    3314:	14 06       	cpc	r1, r20
    3316:	05 06       	cpc	r0, r21
    3318:	08 95       	ret

0000331a <__fp_round>:
    331a:	09 2e       	mov	r0, r25
    331c:	03 94       	inc	r0
    331e:	00 0c       	add	r0, r0
    3320:	11 f4       	brne	.+4      	; 0x3326 <__fp_round+0xc>
    3322:	88 23       	and	r24, r24
    3324:	52 f0       	brmi	.+20     	; 0x333a <__fp_round+0x20>
    3326:	bb 0f       	add	r27, r27
    3328:	40 f4       	brcc	.+16     	; 0x333a <__fp_round+0x20>
    332a:	bf 2b       	or	r27, r31
    332c:	11 f4       	brne	.+4      	; 0x3332 <__fp_round+0x18>
    332e:	60 ff       	sbrs	r22, 0
    3330:	04 c0       	rjmp	.+8      	; 0x333a <__fp_round+0x20>
    3332:	6f 5f       	subi	r22, 0xFF	; 255
    3334:	7f 4f       	sbci	r23, 0xFF	; 255
    3336:	8f 4f       	sbci	r24, 0xFF	; 255
    3338:	9f 4f       	sbci	r25, 0xFF	; 255
    333a:	08 95       	ret

0000333c <__fp_split3>:
    333c:	57 fd       	sbrc	r21, 7
    333e:	90 58       	subi	r25, 0x80	; 128
    3340:	44 0f       	add	r20, r20
    3342:	55 1f       	adc	r21, r21
    3344:	59 f0       	breq	.+22     	; 0x335c <__fp_splitA+0x10>
    3346:	5f 3f       	cpi	r21, 0xFF	; 255
    3348:	71 f0       	breq	.+28     	; 0x3366 <__fp_splitA+0x1a>
    334a:	47 95       	ror	r20

0000334c <__fp_splitA>:
    334c:	88 0f       	add	r24, r24
    334e:	97 fb       	bst	r25, 7
    3350:	99 1f       	adc	r25, r25
    3352:	61 f0       	breq	.+24     	; 0x336c <__fp_splitA+0x20>
    3354:	9f 3f       	cpi	r25, 0xFF	; 255
    3356:	79 f0       	breq	.+30     	; 0x3376 <__fp_splitA+0x2a>
    3358:	87 95       	ror	r24
    335a:	08 95       	ret
    335c:	12 16       	cp	r1, r18
    335e:	13 06       	cpc	r1, r19
    3360:	14 06       	cpc	r1, r20
    3362:	55 1f       	adc	r21, r21
    3364:	f2 cf       	rjmp	.-28     	; 0x334a <__fp_split3+0xe>
    3366:	46 95       	lsr	r20
    3368:	f1 df       	rcall	.-30     	; 0x334c <__fp_splitA>
    336a:	08 c0       	rjmp	.+16     	; 0x337c <__fp_splitA+0x30>
    336c:	16 16       	cp	r1, r22
    336e:	17 06       	cpc	r1, r23
    3370:	18 06       	cpc	r1, r24
    3372:	99 1f       	adc	r25, r25
    3374:	f1 cf       	rjmp	.-30     	; 0x3358 <__fp_splitA+0xc>
    3376:	86 95       	lsr	r24
    3378:	71 05       	cpc	r23, r1
    337a:	61 05       	cpc	r22, r1
    337c:	08 94       	sec
    337e:	08 95       	ret

00003380 <__fp_zero>:
    3380:	e8 94       	clt

00003382 <__fp_szero>:
    3382:	bb 27       	eor	r27, r27
    3384:	66 27       	eor	r22, r22
    3386:	77 27       	eor	r23, r23
    3388:	cb 01       	movw	r24, r22
    338a:	97 f9       	bld	r25, 7
    338c:	08 95       	ret

0000338e <__mulsf3>:
    338e:	0b d0       	rcall	.+22     	; 0x33a6 <__mulsf3x>
    3390:	c4 cf       	rjmp	.-120    	; 0x331a <__fp_round>
    3392:	b5 df       	rcall	.-150    	; 0x32fe <__fp_pscA>
    3394:	28 f0       	brcs	.+10     	; 0x33a0 <__mulsf3+0x12>
    3396:	ba df       	rcall	.-140    	; 0x330c <__fp_pscB>
    3398:	18 f0       	brcs	.+6      	; 0x33a0 <__mulsf3+0x12>
    339a:	95 23       	and	r25, r21
    339c:	09 f0       	breq	.+2      	; 0x33a0 <__mulsf3+0x12>
    339e:	a6 cf       	rjmp	.-180    	; 0x32ec <__fp_inf>
    33a0:	ab cf       	rjmp	.-170    	; 0x32f8 <__fp_nan>
    33a2:	11 24       	eor	r1, r1
    33a4:	ee cf       	rjmp	.-36     	; 0x3382 <__fp_szero>

000033a6 <__mulsf3x>:
    33a6:	ca df       	rcall	.-108    	; 0x333c <__fp_split3>
    33a8:	a0 f3       	brcs	.-24     	; 0x3392 <__mulsf3+0x4>

000033aa <__mulsf3_pse>:
    33aa:	95 9f       	mul	r25, r21
    33ac:	d1 f3       	breq	.-12     	; 0x33a2 <__mulsf3+0x14>
    33ae:	95 0f       	add	r25, r21
    33b0:	50 e0       	ldi	r21, 0x00	; 0
    33b2:	55 1f       	adc	r21, r21
    33b4:	62 9f       	mul	r22, r18
    33b6:	f0 01       	movw	r30, r0
    33b8:	72 9f       	mul	r23, r18
    33ba:	bb 27       	eor	r27, r27
    33bc:	f0 0d       	add	r31, r0
    33be:	b1 1d       	adc	r27, r1
    33c0:	63 9f       	mul	r22, r19
    33c2:	aa 27       	eor	r26, r26
    33c4:	f0 0d       	add	r31, r0
    33c6:	b1 1d       	adc	r27, r1
    33c8:	aa 1f       	adc	r26, r26
    33ca:	64 9f       	mul	r22, r20
    33cc:	66 27       	eor	r22, r22
    33ce:	b0 0d       	add	r27, r0
    33d0:	a1 1d       	adc	r26, r1
    33d2:	66 1f       	adc	r22, r22
    33d4:	82 9f       	mul	r24, r18
    33d6:	22 27       	eor	r18, r18
    33d8:	b0 0d       	add	r27, r0
    33da:	a1 1d       	adc	r26, r1
    33dc:	62 1f       	adc	r22, r18
    33de:	73 9f       	mul	r23, r19
    33e0:	b0 0d       	add	r27, r0
    33e2:	a1 1d       	adc	r26, r1
    33e4:	62 1f       	adc	r22, r18
    33e6:	83 9f       	mul	r24, r19
    33e8:	a0 0d       	add	r26, r0
    33ea:	61 1d       	adc	r22, r1
    33ec:	22 1f       	adc	r18, r18
    33ee:	74 9f       	mul	r23, r20
    33f0:	33 27       	eor	r19, r19
    33f2:	a0 0d       	add	r26, r0
    33f4:	61 1d       	adc	r22, r1
    33f6:	23 1f       	adc	r18, r19
    33f8:	84 9f       	mul	r24, r20
    33fa:	60 0d       	add	r22, r0
    33fc:	21 1d       	adc	r18, r1
    33fe:	82 2f       	mov	r24, r18
    3400:	76 2f       	mov	r23, r22
    3402:	6a 2f       	mov	r22, r26
    3404:	11 24       	eor	r1, r1
    3406:	9f 57       	subi	r25, 0x7F	; 127
    3408:	50 40       	sbci	r21, 0x00	; 0
    340a:	8a f0       	brmi	.+34     	; 0x342e <__mulsf3_pse+0x84>
    340c:	e1 f0       	breq	.+56     	; 0x3446 <__mulsf3_pse+0x9c>
    340e:	88 23       	and	r24, r24
    3410:	4a f0       	brmi	.+18     	; 0x3424 <__mulsf3_pse+0x7a>
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	bb 1f       	adc	r27, r27
    3418:	66 1f       	adc	r22, r22
    341a:	77 1f       	adc	r23, r23
    341c:	88 1f       	adc	r24, r24
    341e:	91 50       	subi	r25, 0x01	; 1
    3420:	50 40       	sbci	r21, 0x00	; 0
    3422:	a9 f7       	brne	.-22     	; 0x340e <__mulsf3_pse+0x64>
    3424:	9e 3f       	cpi	r25, 0xFE	; 254
    3426:	51 05       	cpc	r21, r1
    3428:	70 f0       	brcs	.+28     	; 0x3446 <__mulsf3_pse+0x9c>
    342a:	60 cf       	rjmp	.-320    	; 0x32ec <__fp_inf>
    342c:	aa cf       	rjmp	.-172    	; 0x3382 <__fp_szero>
    342e:	5f 3f       	cpi	r21, 0xFF	; 255
    3430:	ec f3       	brlt	.-6      	; 0x342c <__mulsf3_pse+0x82>
    3432:	98 3e       	cpi	r25, 0xE8	; 232
    3434:	dc f3       	brlt	.-10     	; 0x342c <__mulsf3_pse+0x82>
    3436:	86 95       	lsr	r24
    3438:	77 95       	ror	r23
    343a:	67 95       	ror	r22
    343c:	b7 95       	ror	r27
    343e:	f7 95       	ror	r31
    3440:	e7 95       	ror	r30
    3442:	9f 5f       	subi	r25, 0xFF	; 255
    3444:	c1 f7       	brne	.-16     	; 0x3436 <__mulsf3_pse+0x8c>
    3446:	fe 2b       	or	r31, r30
    3448:	88 0f       	add	r24, r24
    344a:	91 1d       	adc	r25, r1
    344c:	96 95       	lsr	r25
    344e:	87 95       	ror	r24
    3450:	97 f9       	bld	r25, 7
    3452:	08 95       	ret

00003454 <__udivmodsi4>:
    3454:	a1 e2       	ldi	r26, 0x21	; 33
    3456:	1a 2e       	mov	r1, r26
    3458:	aa 1b       	sub	r26, r26
    345a:	bb 1b       	sub	r27, r27
    345c:	fd 01       	movw	r30, r26
    345e:	0d c0       	rjmp	.+26     	; 0x347a <__udivmodsi4_ep>

00003460 <__udivmodsi4_loop>:
    3460:	aa 1f       	adc	r26, r26
    3462:	bb 1f       	adc	r27, r27
    3464:	ee 1f       	adc	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	a2 17       	cp	r26, r18
    346a:	b3 07       	cpc	r27, r19
    346c:	e4 07       	cpc	r30, r20
    346e:	f5 07       	cpc	r31, r21
    3470:	20 f0       	brcs	.+8      	; 0x347a <__udivmodsi4_ep>
    3472:	a2 1b       	sub	r26, r18
    3474:	b3 0b       	sbc	r27, r19
    3476:	e4 0b       	sbc	r30, r20
    3478:	f5 0b       	sbc	r31, r21

0000347a <__udivmodsi4_ep>:
    347a:	66 1f       	adc	r22, r22
    347c:	77 1f       	adc	r23, r23
    347e:	88 1f       	adc	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	1a 94       	dec	r1
    3484:	69 f7       	brne	.-38     	; 0x3460 <__udivmodsi4_loop>
    3486:	60 95       	com	r22
    3488:	70 95       	com	r23
    348a:	80 95       	com	r24
    348c:	90 95       	com	r25
    348e:	9b 01       	movw	r18, r22
    3490:	ac 01       	movw	r20, r24
    3492:	bd 01       	movw	r22, r26
    3494:	cf 01       	movw	r24, r30
    3496:	08 95       	ret

00003498 <__tablejump2__>:
    3498:	ee 0f       	add	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	88 1f       	adc	r24, r24
    349e:	8b bf       	out	0x3b, r24	; 59
    34a0:	07 90       	elpm	r0, Z+
    34a2:	f6 91       	elpm	r31, Z
    34a4:	e0 2d       	mov	r30, r0
    34a6:	19 94       	eijmp

000034a8 <calloc>:
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	86 9f       	mul	r24, r22
    34b2:	80 01       	movw	r16, r0
    34b4:	87 9f       	mul	r24, r23
    34b6:	10 0d       	add	r17, r0
    34b8:	96 9f       	mul	r25, r22
    34ba:	10 0d       	add	r17, r0
    34bc:	11 24       	eor	r1, r1
    34be:	c8 01       	movw	r24, r16
    34c0:	0d d0       	rcall	.+26     	; 0x34dc <malloc>
    34c2:	ec 01       	movw	r28, r24
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	21 f0       	breq	.+8      	; 0x34d0 <calloc+0x28>
    34c8:	a8 01       	movw	r20, r16
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	34 d1       	rcall	.+616    	; 0x3738 <memset>
    34d0:	ce 01       	movw	r24, r28
    34d2:	df 91       	pop	r29
    34d4:	cf 91       	pop	r28
    34d6:	1f 91       	pop	r17
    34d8:	0f 91       	pop	r16
    34da:	08 95       	ret

000034dc <malloc>:
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	82 30       	cpi	r24, 0x02	; 2
    34e6:	91 05       	cpc	r25, r1
    34e8:	10 f4       	brcc	.+4      	; 0x34ee <malloc+0x12>
    34ea:	82 e0       	ldi	r24, 0x02	; 2
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	e0 91 18 0e 	lds	r30, 0x0E18	; 0x800e18 <__flp>
    34f2:	f0 91 19 0e 	lds	r31, 0x0E19	; 0x800e19 <__flp+0x1>
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	a0 e0       	ldi	r26, 0x00	; 0
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	30 97       	sbiw	r30, 0x00	; 0
    3500:	19 f1       	breq	.+70     	; 0x3548 <malloc+0x6c>
    3502:	40 81       	ld	r20, Z
    3504:	51 81       	ldd	r21, Z+1	; 0x01
    3506:	02 81       	ldd	r16, Z+2	; 0x02
    3508:	13 81       	ldd	r17, Z+3	; 0x03
    350a:	48 17       	cp	r20, r24
    350c:	59 07       	cpc	r21, r25
    350e:	c8 f0       	brcs	.+50     	; 0x3542 <malloc+0x66>
    3510:	84 17       	cp	r24, r20
    3512:	95 07       	cpc	r25, r21
    3514:	69 f4       	brne	.+26     	; 0x3530 <malloc+0x54>
    3516:	10 97       	sbiw	r26, 0x00	; 0
    3518:	31 f0       	breq	.+12     	; 0x3526 <malloc+0x4a>
    351a:	12 96       	adiw	r26, 0x02	; 2
    351c:	0c 93       	st	X, r16
    351e:	12 97       	sbiw	r26, 0x02	; 2
    3520:	13 96       	adiw	r26, 0x03	; 3
    3522:	1c 93       	st	X, r17
    3524:	27 c0       	rjmp	.+78     	; 0x3574 <malloc+0x98>
    3526:	00 93 18 0e 	sts	0x0E18, r16	; 0x800e18 <__flp>
    352a:	10 93 19 0e 	sts	0x0E19, r17	; 0x800e19 <__flp+0x1>
    352e:	22 c0       	rjmp	.+68     	; 0x3574 <malloc+0x98>
    3530:	21 15       	cp	r18, r1
    3532:	31 05       	cpc	r19, r1
    3534:	19 f0       	breq	.+6      	; 0x353c <malloc+0x60>
    3536:	42 17       	cp	r20, r18
    3538:	53 07       	cpc	r21, r19
    353a:	18 f4       	brcc	.+6      	; 0x3542 <malloc+0x66>
    353c:	9a 01       	movw	r18, r20
    353e:	bd 01       	movw	r22, r26
    3540:	ef 01       	movw	r28, r30
    3542:	df 01       	movw	r26, r30
    3544:	f8 01       	movw	r30, r16
    3546:	db cf       	rjmp	.-74     	; 0x34fe <malloc+0x22>
    3548:	21 15       	cp	r18, r1
    354a:	31 05       	cpc	r19, r1
    354c:	f9 f0       	breq	.+62     	; 0x358c <malloc+0xb0>
    354e:	28 1b       	sub	r18, r24
    3550:	39 0b       	sbc	r19, r25
    3552:	24 30       	cpi	r18, 0x04	; 4
    3554:	31 05       	cpc	r19, r1
    3556:	80 f4       	brcc	.+32     	; 0x3578 <malloc+0x9c>
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	9b 81       	ldd	r25, Y+3	; 0x03
    355c:	61 15       	cp	r22, r1
    355e:	71 05       	cpc	r23, r1
    3560:	21 f0       	breq	.+8      	; 0x356a <malloc+0x8e>
    3562:	fb 01       	movw	r30, r22
    3564:	93 83       	std	Z+3, r25	; 0x03
    3566:	82 83       	std	Z+2, r24	; 0x02
    3568:	04 c0       	rjmp	.+8      	; 0x3572 <malloc+0x96>
    356a:	90 93 19 0e 	sts	0x0E19, r25	; 0x800e19 <__flp+0x1>
    356e:	80 93 18 0e 	sts	0x0E18, r24	; 0x800e18 <__flp>
    3572:	fe 01       	movw	r30, r28
    3574:	32 96       	adiw	r30, 0x02	; 2
    3576:	44 c0       	rjmp	.+136    	; 0x3600 <malloc+0x124>
    3578:	fe 01       	movw	r30, r28
    357a:	e2 0f       	add	r30, r18
    357c:	f3 1f       	adc	r31, r19
    357e:	81 93       	st	Z+, r24
    3580:	91 93       	st	Z+, r25
    3582:	22 50       	subi	r18, 0x02	; 2
    3584:	31 09       	sbc	r19, r1
    3586:	39 83       	std	Y+1, r19	; 0x01
    3588:	28 83       	st	Y, r18
    358a:	3a c0       	rjmp	.+116    	; 0x3600 <malloc+0x124>
    358c:	20 91 16 0e 	lds	r18, 0x0E16	; 0x800e16 <__brkval>
    3590:	30 91 17 0e 	lds	r19, 0x0E17	; 0x800e17 <__brkval+0x1>
    3594:	23 2b       	or	r18, r19
    3596:	41 f4       	brne	.+16     	; 0x35a8 <malloc+0xcc>
    3598:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    359c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    35a0:	30 93 17 0e 	sts	0x0E17, r19	; 0x800e17 <__brkval+0x1>
    35a4:	20 93 16 0e 	sts	0x0E16, r18	; 0x800e16 <__brkval>
    35a8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    35ac:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    35b0:	21 15       	cp	r18, r1
    35b2:	31 05       	cpc	r19, r1
    35b4:	41 f4       	brne	.+16     	; 0x35c6 <malloc+0xea>
    35b6:	2d b7       	in	r18, 0x3d	; 61
    35b8:	3e b7       	in	r19, 0x3e	; 62
    35ba:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    35be:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    35c2:	24 1b       	sub	r18, r20
    35c4:	35 0b       	sbc	r19, r21
    35c6:	e0 91 16 0e 	lds	r30, 0x0E16	; 0x800e16 <__brkval>
    35ca:	f0 91 17 0e 	lds	r31, 0x0E17	; 0x800e17 <__brkval+0x1>
    35ce:	e2 17       	cp	r30, r18
    35d0:	f3 07       	cpc	r31, r19
    35d2:	a0 f4       	brcc	.+40     	; 0x35fc <malloc+0x120>
    35d4:	2e 1b       	sub	r18, r30
    35d6:	3f 0b       	sbc	r19, r31
    35d8:	28 17       	cp	r18, r24
    35da:	39 07       	cpc	r19, r25
    35dc:	78 f0       	brcs	.+30     	; 0x35fc <malloc+0x120>
    35de:	ac 01       	movw	r20, r24
    35e0:	4e 5f       	subi	r20, 0xFE	; 254
    35e2:	5f 4f       	sbci	r21, 0xFF	; 255
    35e4:	24 17       	cp	r18, r20
    35e6:	35 07       	cpc	r19, r21
    35e8:	48 f0       	brcs	.+18     	; 0x35fc <malloc+0x120>
    35ea:	4e 0f       	add	r20, r30
    35ec:	5f 1f       	adc	r21, r31
    35ee:	50 93 17 0e 	sts	0x0E17, r21	; 0x800e17 <__brkval+0x1>
    35f2:	40 93 16 0e 	sts	0x0E16, r20	; 0x800e16 <__brkval>
    35f6:	81 93       	st	Z+, r24
    35f8:	91 93       	st	Z+, r25
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <malloc+0x124>
    35fc:	e0 e0       	ldi	r30, 0x00	; 0
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	cf 01       	movw	r24, r30
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	08 95       	ret

0000360c <free>:
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	00 97       	sbiw	r24, 0x00	; 0
    3612:	09 f4       	brne	.+2      	; 0x3616 <free+0xa>
    3614:	81 c0       	rjmp	.+258    	; 0x3718 <free+0x10c>
    3616:	fc 01       	movw	r30, r24
    3618:	32 97       	sbiw	r30, 0x02	; 2
    361a:	13 82       	std	Z+3, r1	; 0x03
    361c:	12 82       	std	Z+2, r1	; 0x02
    361e:	a0 91 18 0e 	lds	r26, 0x0E18	; 0x800e18 <__flp>
    3622:	b0 91 19 0e 	lds	r27, 0x0E19	; 0x800e19 <__flp+0x1>
    3626:	10 97       	sbiw	r26, 0x00	; 0
    3628:	81 f4       	brne	.+32     	; 0x364a <free+0x3e>
    362a:	20 81       	ld	r18, Z
    362c:	31 81       	ldd	r19, Z+1	; 0x01
    362e:	82 0f       	add	r24, r18
    3630:	93 1f       	adc	r25, r19
    3632:	20 91 16 0e 	lds	r18, 0x0E16	; 0x800e16 <__brkval>
    3636:	30 91 17 0e 	lds	r19, 0x0E17	; 0x800e17 <__brkval+0x1>
    363a:	28 17       	cp	r18, r24
    363c:	39 07       	cpc	r19, r25
    363e:	51 f5       	brne	.+84     	; 0x3694 <free+0x88>
    3640:	f0 93 17 0e 	sts	0x0E17, r31	; 0x800e17 <__brkval+0x1>
    3644:	e0 93 16 0e 	sts	0x0E16, r30	; 0x800e16 <__brkval>
    3648:	67 c0       	rjmp	.+206    	; 0x3718 <free+0x10c>
    364a:	ed 01       	movw	r28, r26
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	ce 17       	cp	r28, r30
    3652:	df 07       	cpc	r29, r31
    3654:	40 f4       	brcc	.+16     	; 0x3666 <free+0x5a>
    3656:	4a 81       	ldd	r20, Y+2	; 0x02
    3658:	5b 81       	ldd	r21, Y+3	; 0x03
    365a:	9e 01       	movw	r18, r28
    365c:	41 15       	cp	r20, r1
    365e:	51 05       	cpc	r21, r1
    3660:	f1 f0       	breq	.+60     	; 0x369e <free+0x92>
    3662:	ea 01       	movw	r28, r20
    3664:	f5 cf       	rjmp	.-22     	; 0x3650 <free+0x44>
    3666:	d3 83       	std	Z+3, r29	; 0x03
    3668:	c2 83       	std	Z+2, r28	; 0x02
    366a:	40 81       	ld	r20, Z
    366c:	51 81       	ldd	r21, Z+1	; 0x01
    366e:	84 0f       	add	r24, r20
    3670:	95 1f       	adc	r25, r21
    3672:	c8 17       	cp	r28, r24
    3674:	d9 07       	cpc	r29, r25
    3676:	59 f4       	brne	.+22     	; 0x368e <free+0x82>
    3678:	88 81       	ld	r24, Y
    367a:	99 81       	ldd	r25, Y+1	; 0x01
    367c:	84 0f       	add	r24, r20
    367e:	95 1f       	adc	r25, r21
    3680:	02 96       	adiw	r24, 0x02	; 2
    3682:	91 83       	std	Z+1, r25	; 0x01
    3684:	80 83       	st	Z, r24
    3686:	8a 81       	ldd	r24, Y+2	; 0x02
    3688:	9b 81       	ldd	r25, Y+3	; 0x03
    368a:	93 83       	std	Z+3, r25	; 0x03
    368c:	82 83       	std	Z+2, r24	; 0x02
    368e:	21 15       	cp	r18, r1
    3690:	31 05       	cpc	r19, r1
    3692:	29 f4       	brne	.+10     	; 0x369e <free+0x92>
    3694:	f0 93 19 0e 	sts	0x0E19, r31	; 0x800e19 <__flp+0x1>
    3698:	e0 93 18 0e 	sts	0x0E18, r30	; 0x800e18 <__flp>
    369c:	3d c0       	rjmp	.+122    	; 0x3718 <free+0x10c>
    369e:	e9 01       	movw	r28, r18
    36a0:	fb 83       	std	Y+3, r31	; 0x03
    36a2:	ea 83       	std	Y+2, r30	; 0x02
    36a4:	49 91       	ld	r20, Y+
    36a6:	59 91       	ld	r21, Y+
    36a8:	c4 0f       	add	r28, r20
    36aa:	d5 1f       	adc	r29, r21
    36ac:	ec 17       	cp	r30, r28
    36ae:	fd 07       	cpc	r31, r29
    36b0:	61 f4       	brne	.+24     	; 0x36ca <free+0xbe>
    36b2:	80 81       	ld	r24, Z
    36b4:	91 81       	ldd	r25, Z+1	; 0x01
    36b6:	84 0f       	add	r24, r20
    36b8:	95 1f       	adc	r25, r21
    36ba:	02 96       	adiw	r24, 0x02	; 2
    36bc:	e9 01       	movw	r28, r18
    36be:	99 83       	std	Y+1, r25	; 0x01
    36c0:	88 83       	st	Y, r24
    36c2:	82 81       	ldd	r24, Z+2	; 0x02
    36c4:	93 81       	ldd	r25, Z+3	; 0x03
    36c6:	9b 83       	std	Y+3, r25	; 0x03
    36c8:	8a 83       	std	Y+2, r24	; 0x02
    36ca:	e0 e0       	ldi	r30, 0x00	; 0
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	12 96       	adiw	r26, 0x02	; 2
    36d0:	8d 91       	ld	r24, X+
    36d2:	9c 91       	ld	r25, X
    36d4:	13 97       	sbiw	r26, 0x03	; 3
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	19 f0       	breq	.+6      	; 0x36e0 <free+0xd4>
    36da:	fd 01       	movw	r30, r26
    36dc:	dc 01       	movw	r26, r24
    36de:	f7 cf       	rjmp	.-18     	; 0x36ce <free+0xc2>
    36e0:	8d 91       	ld	r24, X+
    36e2:	9c 91       	ld	r25, X
    36e4:	11 97       	sbiw	r26, 0x01	; 1
    36e6:	9d 01       	movw	r18, r26
    36e8:	2e 5f       	subi	r18, 0xFE	; 254
    36ea:	3f 4f       	sbci	r19, 0xFF	; 255
    36ec:	82 0f       	add	r24, r18
    36ee:	93 1f       	adc	r25, r19
    36f0:	20 91 16 0e 	lds	r18, 0x0E16	; 0x800e16 <__brkval>
    36f4:	30 91 17 0e 	lds	r19, 0x0E17	; 0x800e17 <__brkval+0x1>
    36f8:	28 17       	cp	r18, r24
    36fa:	39 07       	cpc	r19, r25
    36fc:	69 f4       	brne	.+26     	; 0x3718 <free+0x10c>
    36fe:	30 97       	sbiw	r30, 0x00	; 0
    3700:	29 f4       	brne	.+10     	; 0x370c <free+0x100>
    3702:	10 92 19 0e 	sts	0x0E19, r1	; 0x800e19 <__flp+0x1>
    3706:	10 92 18 0e 	sts	0x0E18, r1	; 0x800e18 <__flp>
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <free+0x104>
    370c:	13 82       	std	Z+3, r1	; 0x03
    370e:	12 82       	std	Z+2, r1	; 0x02
    3710:	b0 93 17 0e 	sts	0x0E17, r27	; 0x800e17 <__brkval+0x1>
    3714:	a0 93 16 0e 	sts	0x0E16, r26	; 0x800e16 <__brkval>
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	08 95       	ret

0000371e <abort>:
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	f8 94       	cli
    3724:	00 c3       	rjmp	.+1536   	; 0x3d26 <_exit>

00003726 <memcpy>:
    3726:	fb 01       	movw	r30, r22
    3728:	dc 01       	movw	r26, r24
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <memcpy+0xa>
    372c:	01 90       	ld	r0, Z+
    372e:	0d 92       	st	X+, r0
    3730:	41 50       	subi	r20, 0x01	; 1
    3732:	50 40       	sbci	r21, 0x00	; 0
    3734:	d8 f7       	brcc	.-10     	; 0x372c <memcpy+0x6>
    3736:	08 95       	ret

00003738 <memset>:
    3738:	dc 01       	movw	r26, r24
    373a:	01 c0       	rjmp	.+2      	; 0x373e <memset+0x6>
    373c:	6d 93       	st	X+, r22
    373e:	41 50       	subi	r20, 0x01	; 1
    3740:	50 40       	sbci	r21, 0x00	; 0
    3742:	e0 f7       	brcc	.-8      	; 0x373c <memset+0x4>
    3744:	08 95       	ret

00003746 <printf>:
    3746:	cf 93       	push	r28
    3748:	df 93       	push	r29
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	ae 01       	movw	r20, r28
    3750:	4a 5f       	subi	r20, 0xFA	; 250
    3752:	5f 4f       	sbci	r21, 0xFF	; 255
    3754:	fa 01       	movw	r30, r20
    3756:	61 91       	ld	r22, Z+
    3758:	71 91       	ld	r23, Z+
    375a:	af 01       	movw	r20, r30
    375c:	80 91 1c 0e 	lds	r24, 0x0E1C	; 0x800e1c <__iob+0x2>
    3760:	90 91 1d 0e 	lds	r25, 0x0E1D	; 0x800e1d <__iob+0x3>
    3764:	33 d0       	rcall	.+102    	; 0x37cc <vfprintf>
    3766:	df 91       	pop	r29
    3768:	cf 91       	pop	r28
    376a:	08 95       	ret

0000376c <puts>:
    376c:	0f 93       	push	r16
    376e:	1f 93       	push	r17
    3770:	cf 93       	push	r28
    3772:	df 93       	push	r29
    3774:	e0 91 1c 0e 	lds	r30, 0x0E1C	; 0x800e1c <__iob+0x2>
    3778:	f0 91 1d 0e 	lds	r31, 0x0E1D	; 0x800e1d <__iob+0x3>
    377c:	23 81       	ldd	r18, Z+3	; 0x03
    377e:	21 ff       	sbrs	r18, 1
    3780:	1b c0       	rjmp	.+54     	; 0x37b8 <puts+0x4c>
    3782:	8c 01       	movw	r16, r24
    3784:	d0 e0       	ldi	r29, 0x00	; 0
    3786:	c0 e0       	ldi	r28, 0x00	; 0
    3788:	f8 01       	movw	r30, r16
    378a:	81 91       	ld	r24, Z+
    378c:	8f 01       	movw	r16, r30
    378e:	60 91 1c 0e 	lds	r22, 0x0E1C	; 0x800e1c <__iob+0x2>
    3792:	70 91 1d 0e 	lds	r23, 0x0E1D	; 0x800e1d <__iob+0x3>
    3796:	db 01       	movw	r26, r22
    3798:	18 96       	adiw	r26, 0x08	; 8
    379a:	ed 91       	ld	r30, X+
    379c:	fc 91       	ld	r31, X
    379e:	19 97       	sbiw	r26, 0x09	; 9
    37a0:	88 23       	and	r24, r24
    37a2:	31 f0       	breq	.+12     	; 0x37b0 <puts+0x44>
    37a4:	19 95       	eicall
    37a6:	89 2b       	or	r24, r25
    37a8:	79 f3       	breq	.-34     	; 0x3788 <puts+0x1c>
    37aa:	df ef       	ldi	r29, 0xFF	; 255
    37ac:	cf ef       	ldi	r28, 0xFF	; 255
    37ae:	ec cf       	rjmp	.-40     	; 0x3788 <puts+0x1c>
    37b0:	8a e0       	ldi	r24, 0x0A	; 10
    37b2:	19 95       	eicall
    37b4:	89 2b       	or	r24, r25
    37b6:	19 f0       	breq	.+6      	; 0x37be <puts+0x52>
    37b8:	8f ef       	ldi	r24, 0xFF	; 255
    37ba:	9f ef       	ldi	r25, 0xFF	; 255
    37bc:	02 c0       	rjmp	.+4      	; 0x37c2 <puts+0x56>
    37be:	8d 2f       	mov	r24, r29
    37c0:	9c 2f       	mov	r25, r28
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	1f 91       	pop	r17
    37c8:	0f 91       	pop	r16
    37ca:	08 95       	ret

000037cc <vfprintf>:
    37cc:	2f 92       	push	r2
    37ce:	3f 92       	push	r3
    37d0:	4f 92       	push	r4
    37d2:	5f 92       	push	r5
    37d4:	6f 92       	push	r6
    37d6:	7f 92       	push	r7
    37d8:	8f 92       	push	r8
    37da:	9f 92       	push	r9
    37dc:	af 92       	push	r10
    37de:	bf 92       	push	r11
    37e0:	cf 92       	push	r12
    37e2:	df 92       	push	r13
    37e4:	ef 92       	push	r14
    37e6:	ff 92       	push	r15
    37e8:	0f 93       	push	r16
    37ea:	1f 93       	push	r17
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
    37f4:	2b 97       	sbiw	r28, 0x0b	; 11
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	6c 01       	movw	r12, r24
    3802:	7b 01       	movw	r14, r22
    3804:	8a 01       	movw	r16, r20
    3806:	fc 01       	movw	r30, r24
    3808:	17 82       	std	Z+7, r1	; 0x07
    380a:	16 82       	std	Z+6, r1	; 0x06
    380c:	83 81       	ldd	r24, Z+3	; 0x03
    380e:	81 ff       	sbrs	r24, 1
    3810:	bf c1       	rjmp	.+894    	; 0x3b90 <vfprintf+0x3c4>
    3812:	ce 01       	movw	r24, r28
    3814:	01 96       	adiw	r24, 0x01	; 1
    3816:	3c 01       	movw	r6, r24
    3818:	f6 01       	movw	r30, r12
    381a:	93 81       	ldd	r25, Z+3	; 0x03
    381c:	f7 01       	movw	r30, r14
    381e:	93 fd       	sbrc	r25, 3
    3820:	85 91       	lpm	r24, Z+
    3822:	93 ff       	sbrs	r25, 3
    3824:	81 91       	ld	r24, Z+
    3826:	7f 01       	movw	r14, r30
    3828:	88 23       	and	r24, r24
    382a:	09 f4       	brne	.+2      	; 0x382e <vfprintf+0x62>
    382c:	ad c1       	rjmp	.+858    	; 0x3b88 <vfprintf+0x3bc>
    382e:	85 32       	cpi	r24, 0x25	; 37
    3830:	39 f4       	brne	.+14     	; 0x3840 <vfprintf+0x74>
    3832:	93 fd       	sbrc	r25, 3
    3834:	85 91       	lpm	r24, Z+
    3836:	93 ff       	sbrs	r25, 3
    3838:	81 91       	ld	r24, Z+
    383a:	7f 01       	movw	r14, r30
    383c:	85 32       	cpi	r24, 0x25	; 37
    383e:	21 f4       	brne	.+8      	; 0x3848 <vfprintf+0x7c>
    3840:	b6 01       	movw	r22, r12
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	d6 d1       	rcall	.+940    	; 0x3bf2 <fputc>
    3846:	e8 cf       	rjmp	.-48     	; 0x3818 <vfprintf+0x4c>
    3848:	91 2c       	mov	r9, r1
    384a:	21 2c       	mov	r2, r1
    384c:	31 2c       	mov	r3, r1
    384e:	ff e1       	ldi	r31, 0x1F	; 31
    3850:	f3 15       	cp	r31, r3
    3852:	d8 f0       	brcs	.+54     	; 0x388a <vfprintf+0xbe>
    3854:	8b 32       	cpi	r24, 0x2B	; 43
    3856:	79 f0       	breq	.+30     	; 0x3876 <vfprintf+0xaa>
    3858:	38 f4       	brcc	.+14     	; 0x3868 <vfprintf+0x9c>
    385a:	80 32       	cpi	r24, 0x20	; 32
    385c:	79 f0       	breq	.+30     	; 0x387c <vfprintf+0xb0>
    385e:	83 32       	cpi	r24, 0x23	; 35
    3860:	a1 f4       	brne	.+40     	; 0x388a <vfprintf+0xbe>
    3862:	23 2d       	mov	r18, r3
    3864:	20 61       	ori	r18, 0x10	; 16
    3866:	1d c0       	rjmp	.+58     	; 0x38a2 <vfprintf+0xd6>
    3868:	8d 32       	cpi	r24, 0x2D	; 45
    386a:	61 f0       	breq	.+24     	; 0x3884 <vfprintf+0xb8>
    386c:	80 33       	cpi	r24, 0x30	; 48
    386e:	69 f4       	brne	.+26     	; 0x388a <vfprintf+0xbe>
    3870:	23 2d       	mov	r18, r3
    3872:	21 60       	ori	r18, 0x01	; 1
    3874:	16 c0       	rjmp	.+44     	; 0x38a2 <vfprintf+0xd6>
    3876:	83 2d       	mov	r24, r3
    3878:	82 60       	ori	r24, 0x02	; 2
    387a:	38 2e       	mov	r3, r24
    387c:	e3 2d       	mov	r30, r3
    387e:	e4 60       	ori	r30, 0x04	; 4
    3880:	3e 2e       	mov	r3, r30
    3882:	2a c0       	rjmp	.+84     	; 0x38d8 <vfprintf+0x10c>
    3884:	f3 2d       	mov	r31, r3
    3886:	f8 60       	ori	r31, 0x08	; 8
    3888:	1d c0       	rjmp	.+58     	; 0x38c4 <vfprintf+0xf8>
    388a:	37 fc       	sbrc	r3, 7
    388c:	2d c0       	rjmp	.+90     	; 0x38e8 <vfprintf+0x11c>
    388e:	20 ed       	ldi	r18, 0xD0	; 208
    3890:	28 0f       	add	r18, r24
    3892:	2a 30       	cpi	r18, 0x0A	; 10
    3894:	40 f0       	brcs	.+16     	; 0x38a6 <vfprintf+0xda>
    3896:	8e 32       	cpi	r24, 0x2E	; 46
    3898:	b9 f4       	brne	.+46     	; 0x38c8 <vfprintf+0xfc>
    389a:	36 fc       	sbrc	r3, 6
    389c:	75 c1       	rjmp	.+746    	; 0x3b88 <vfprintf+0x3bc>
    389e:	23 2d       	mov	r18, r3
    38a0:	20 64       	ori	r18, 0x40	; 64
    38a2:	32 2e       	mov	r3, r18
    38a4:	19 c0       	rjmp	.+50     	; 0x38d8 <vfprintf+0x10c>
    38a6:	36 fe       	sbrs	r3, 6
    38a8:	06 c0       	rjmp	.+12     	; 0x38b6 <vfprintf+0xea>
    38aa:	8a e0       	ldi	r24, 0x0A	; 10
    38ac:	98 9e       	mul	r9, r24
    38ae:	20 0d       	add	r18, r0
    38b0:	11 24       	eor	r1, r1
    38b2:	92 2e       	mov	r9, r18
    38b4:	11 c0       	rjmp	.+34     	; 0x38d8 <vfprintf+0x10c>
    38b6:	ea e0       	ldi	r30, 0x0A	; 10
    38b8:	2e 9e       	mul	r2, r30
    38ba:	20 0d       	add	r18, r0
    38bc:	11 24       	eor	r1, r1
    38be:	22 2e       	mov	r2, r18
    38c0:	f3 2d       	mov	r31, r3
    38c2:	f0 62       	ori	r31, 0x20	; 32
    38c4:	3f 2e       	mov	r3, r31
    38c6:	08 c0       	rjmp	.+16     	; 0x38d8 <vfprintf+0x10c>
    38c8:	8c 36       	cpi	r24, 0x6C	; 108
    38ca:	21 f4       	brne	.+8      	; 0x38d4 <vfprintf+0x108>
    38cc:	83 2d       	mov	r24, r3
    38ce:	80 68       	ori	r24, 0x80	; 128
    38d0:	38 2e       	mov	r3, r24
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <vfprintf+0x10c>
    38d4:	88 36       	cpi	r24, 0x68	; 104
    38d6:	41 f4       	brne	.+16     	; 0x38e8 <vfprintf+0x11c>
    38d8:	f7 01       	movw	r30, r14
    38da:	93 fd       	sbrc	r25, 3
    38dc:	85 91       	lpm	r24, Z+
    38de:	93 ff       	sbrs	r25, 3
    38e0:	81 91       	ld	r24, Z+
    38e2:	7f 01       	movw	r14, r30
    38e4:	81 11       	cpse	r24, r1
    38e6:	b3 cf       	rjmp	.-154    	; 0x384e <vfprintf+0x82>
    38e8:	98 2f       	mov	r25, r24
    38ea:	9f 7d       	andi	r25, 0xDF	; 223
    38ec:	95 54       	subi	r25, 0x45	; 69
    38ee:	93 30       	cpi	r25, 0x03	; 3
    38f0:	28 f4       	brcc	.+10     	; 0x38fc <vfprintf+0x130>
    38f2:	0c 5f       	subi	r16, 0xFC	; 252
    38f4:	1f 4f       	sbci	r17, 0xFF	; 255
    38f6:	9f e3       	ldi	r25, 0x3F	; 63
    38f8:	99 83       	std	Y+1, r25	; 0x01
    38fa:	0d c0       	rjmp	.+26     	; 0x3916 <vfprintf+0x14a>
    38fc:	83 36       	cpi	r24, 0x63	; 99
    38fe:	31 f0       	breq	.+12     	; 0x390c <vfprintf+0x140>
    3900:	83 37       	cpi	r24, 0x73	; 115
    3902:	71 f0       	breq	.+28     	; 0x3920 <vfprintf+0x154>
    3904:	83 35       	cpi	r24, 0x53	; 83
    3906:	09 f0       	breq	.+2      	; 0x390a <vfprintf+0x13e>
    3908:	55 c0       	rjmp	.+170    	; 0x39b4 <vfprintf+0x1e8>
    390a:	20 c0       	rjmp	.+64     	; 0x394c <vfprintf+0x180>
    390c:	f8 01       	movw	r30, r16
    390e:	80 81       	ld	r24, Z
    3910:	89 83       	std	Y+1, r24	; 0x01
    3912:	0e 5f       	subi	r16, 0xFE	; 254
    3914:	1f 4f       	sbci	r17, 0xFF	; 255
    3916:	88 24       	eor	r8, r8
    3918:	83 94       	inc	r8
    391a:	91 2c       	mov	r9, r1
    391c:	53 01       	movw	r10, r6
    391e:	12 c0       	rjmp	.+36     	; 0x3944 <vfprintf+0x178>
    3920:	28 01       	movw	r4, r16
    3922:	f2 e0       	ldi	r31, 0x02	; 2
    3924:	4f 0e       	add	r4, r31
    3926:	51 1c       	adc	r5, r1
    3928:	f8 01       	movw	r30, r16
    392a:	a0 80       	ld	r10, Z
    392c:	b1 80       	ldd	r11, Z+1	; 0x01
    392e:	36 fe       	sbrs	r3, 6
    3930:	03 c0       	rjmp	.+6      	; 0x3938 <vfprintf+0x16c>
    3932:	69 2d       	mov	r22, r9
    3934:	70 e0       	ldi	r23, 0x00	; 0
    3936:	02 c0       	rjmp	.+4      	; 0x393c <vfprintf+0x170>
    3938:	6f ef       	ldi	r22, 0xFF	; 255
    393a:	7f ef       	ldi	r23, 0xFF	; 255
    393c:	c5 01       	movw	r24, r10
    393e:	4e d1       	rcall	.+668    	; 0x3bdc <strnlen>
    3940:	4c 01       	movw	r8, r24
    3942:	82 01       	movw	r16, r4
    3944:	f3 2d       	mov	r31, r3
    3946:	ff 77       	andi	r31, 0x7F	; 127
    3948:	3f 2e       	mov	r3, r31
    394a:	15 c0       	rjmp	.+42     	; 0x3976 <vfprintf+0x1aa>
    394c:	28 01       	movw	r4, r16
    394e:	22 e0       	ldi	r18, 0x02	; 2
    3950:	42 0e       	add	r4, r18
    3952:	51 1c       	adc	r5, r1
    3954:	f8 01       	movw	r30, r16
    3956:	a0 80       	ld	r10, Z
    3958:	b1 80       	ldd	r11, Z+1	; 0x01
    395a:	36 fe       	sbrs	r3, 6
    395c:	03 c0       	rjmp	.+6      	; 0x3964 <vfprintf+0x198>
    395e:	69 2d       	mov	r22, r9
    3960:	70 e0       	ldi	r23, 0x00	; 0
    3962:	02 c0       	rjmp	.+4      	; 0x3968 <vfprintf+0x19c>
    3964:	6f ef       	ldi	r22, 0xFF	; 255
    3966:	7f ef       	ldi	r23, 0xFF	; 255
    3968:	c5 01       	movw	r24, r10
    396a:	2d d1       	rcall	.+602    	; 0x3bc6 <strnlen_P>
    396c:	4c 01       	movw	r8, r24
    396e:	f3 2d       	mov	r31, r3
    3970:	f0 68       	ori	r31, 0x80	; 128
    3972:	3f 2e       	mov	r3, r31
    3974:	82 01       	movw	r16, r4
    3976:	33 fc       	sbrc	r3, 3
    3978:	19 c0       	rjmp	.+50     	; 0x39ac <vfprintf+0x1e0>
    397a:	82 2d       	mov	r24, r2
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	88 16       	cp	r8, r24
    3980:	99 06       	cpc	r9, r25
    3982:	a0 f4       	brcc	.+40     	; 0x39ac <vfprintf+0x1e0>
    3984:	b6 01       	movw	r22, r12
    3986:	80 e2       	ldi	r24, 0x20	; 32
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	33 d1       	rcall	.+614    	; 0x3bf2 <fputc>
    398c:	2a 94       	dec	r2
    398e:	f5 cf       	rjmp	.-22     	; 0x397a <vfprintf+0x1ae>
    3990:	f5 01       	movw	r30, r10
    3992:	37 fc       	sbrc	r3, 7
    3994:	85 91       	lpm	r24, Z+
    3996:	37 fe       	sbrs	r3, 7
    3998:	81 91       	ld	r24, Z+
    399a:	5f 01       	movw	r10, r30
    399c:	b6 01       	movw	r22, r12
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	28 d1       	rcall	.+592    	; 0x3bf2 <fputc>
    39a2:	21 10       	cpse	r2, r1
    39a4:	2a 94       	dec	r2
    39a6:	21 e0       	ldi	r18, 0x01	; 1
    39a8:	82 1a       	sub	r8, r18
    39aa:	91 08       	sbc	r9, r1
    39ac:	81 14       	cp	r8, r1
    39ae:	91 04       	cpc	r9, r1
    39b0:	79 f7       	brne	.-34     	; 0x3990 <vfprintf+0x1c4>
    39b2:	e1 c0       	rjmp	.+450    	; 0x3b76 <vfprintf+0x3aa>
    39b4:	84 36       	cpi	r24, 0x64	; 100
    39b6:	11 f0       	breq	.+4      	; 0x39bc <vfprintf+0x1f0>
    39b8:	89 36       	cpi	r24, 0x69	; 105
    39ba:	39 f5       	brne	.+78     	; 0x3a0a <vfprintf+0x23e>
    39bc:	f8 01       	movw	r30, r16
    39be:	37 fe       	sbrs	r3, 7
    39c0:	07 c0       	rjmp	.+14     	; 0x39d0 <vfprintf+0x204>
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	0c 5f       	subi	r16, 0xFC	; 252
    39cc:	1f 4f       	sbci	r17, 0xFF	; 255
    39ce:	08 c0       	rjmp	.+16     	; 0x39e0 <vfprintf+0x214>
    39d0:	60 81       	ld	r22, Z
    39d2:	71 81       	ldd	r23, Z+1	; 0x01
    39d4:	07 2e       	mov	r0, r23
    39d6:	00 0c       	add	r0, r0
    39d8:	88 0b       	sbc	r24, r24
    39da:	99 0b       	sbc	r25, r25
    39dc:	0e 5f       	subi	r16, 0xFE	; 254
    39de:	1f 4f       	sbci	r17, 0xFF	; 255
    39e0:	f3 2d       	mov	r31, r3
    39e2:	ff 76       	andi	r31, 0x6F	; 111
    39e4:	3f 2e       	mov	r3, r31
    39e6:	97 ff       	sbrs	r25, 7
    39e8:	09 c0       	rjmp	.+18     	; 0x39fc <vfprintf+0x230>
    39ea:	90 95       	com	r25
    39ec:	80 95       	com	r24
    39ee:	70 95       	com	r23
    39f0:	61 95       	neg	r22
    39f2:	7f 4f       	sbci	r23, 0xFF	; 255
    39f4:	8f 4f       	sbci	r24, 0xFF	; 255
    39f6:	9f 4f       	sbci	r25, 0xFF	; 255
    39f8:	f0 68       	ori	r31, 0x80	; 128
    39fa:	3f 2e       	mov	r3, r31
    39fc:	2a e0       	ldi	r18, 0x0A	; 10
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	a3 01       	movw	r20, r6
    3a02:	33 d1       	rcall	.+614    	; 0x3c6a <__ultoa_invert>
    3a04:	88 2e       	mov	r8, r24
    3a06:	86 18       	sub	r8, r6
    3a08:	44 c0       	rjmp	.+136    	; 0x3a92 <vfprintf+0x2c6>
    3a0a:	85 37       	cpi	r24, 0x75	; 117
    3a0c:	31 f4       	brne	.+12     	; 0x3a1a <vfprintf+0x24e>
    3a0e:	23 2d       	mov	r18, r3
    3a10:	2f 7e       	andi	r18, 0xEF	; 239
    3a12:	b2 2e       	mov	r11, r18
    3a14:	2a e0       	ldi	r18, 0x0A	; 10
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	25 c0       	rjmp	.+74     	; 0x3a64 <vfprintf+0x298>
    3a1a:	93 2d       	mov	r25, r3
    3a1c:	99 7f       	andi	r25, 0xF9	; 249
    3a1e:	b9 2e       	mov	r11, r25
    3a20:	8f 36       	cpi	r24, 0x6F	; 111
    3a22:	c1 f0       	breq	.+48     	; 0x3a54 <vfprintf+0x288>
    3a24:	18 f4       	brcc	.+6      	; 0x3a2c <vfprintf+0x260>
    3a26:	88 35       	cpi	r24, 0x58	; 88
    3a28:	79 f0       	breq	.+30     	; 0x3a48 <vfprintf+0x27c>
    3a2a:	ae c0       	rjmp	.+348    	; 0x3b88 <vfprintf+0x3bc>
    3a2c:	80 37       	cpi	r24, 0x70	; 112
    3a2e:	19 f0       	breq	.+6      	; 0x3a36 <vfprintf+0x26a>
    3a30:	88 37       	cpi	r24, 0x78	; 120
    3a32:	21 f0       	breq	.+8      	; 0x3a3c <vfprintf+0x270>
    3a34:	a9 c0       	rjmp	.+338    	; 0x3b88 <vfprintf+0x3bc>
    3a36:	e9 2f       	mov	r30, r25
    3a38:	e0 61       	ori	r30, 0x10	; 16
    3a3a:	be 2e       	mov	r11, r30
    3a3c:	b4 fe       	sbrs	r11, 4
    3a3e:	0d c0       	rjmp	.+26     	; 0x3a5a <vfprintf+0x28e>
    3a40:	fb 2d       	mov	r31, r11
    3a42:	f4 60       	ori	r31, 0x04	; 4
    3a44:	bf 2e       	mov	r11, r31
    3a46:	09 c0       	rjmp	.+18     	; 0x3a5a <vfprintf+0x28e>
    3a48:	34 fe       	sbrs	r3, 4
    3a4a:	0a c0       	rjmp	.+20     	; 0x3a60 <vfprintf+0x294>
    3a4c:	29 2f       	mov	r18, r25
    3a4e:	26 60       	ori	r18, 0x06	; 6
    3a50:	b2 2e       	mov	r11, r18
    3a52:	06 c0       	rjmp	.+12     	; 0x3a60 <vfprintf+0x294>
    3a54:	28 e0       	ldi	r18, 0x08	; 8
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	05 c0       	rjmp	.+10     	; 0x3a64 <vfprintf+0x298>
    3a5a:	20 e1       	ldi	r18, 0x10	; 16
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	02 c0       	rjmp	.+4      	; 0x3a64 <vfprintf+0x298>
    3a60:	20 e1       	ldi	r18, 0x10	; 16
    3a62:	32 e0       	ldi	r19, 0x02	; 2
    3a64:	f8 01       	movw	r30, r16
    3a66:	b7 fe       	sbrs	r11, 7
    3a68:	07 c0       	rjmp	.+14     	; 0x3a78 <vfprintf+0x2ac>
    3a6a:	60 81       	ld	r22, Z
    3a6c:	71 81       	ldd	r23, Z+1	; 0x01
    3a6e:	82 81       	ldd	r24, Z+2	; 0x02
    3a70:	93 81       	ldd	r25, Z+3	; 0x03
    3a72:	0c 5f       	subi	r16, 0xFC	; 252
    3a74:	1f 4f       	sbci	r17, 0xFF	; 255
    3a76:	06 c0       	rjmp	.+12     	; 0x3a84 <vfprintf+0x2b8>
    3a78:	60 81       	ld	r22, Z
    3a7a:	71 81       	ldd	r23, Z+1	; 0x01
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	0e 5f       	subi	r16, 0xFE	; 254
    3a82:	1f 4f       	sbci	r17, 0xFF	; 255
    3a84:	a3 01       	movw	r20, r6
    3a86:	f1 d0       	rcall	.+482    	; 0x3c6a <__ultoa_invert>
    3a88:	88 2e       	mov	r8, r24
    3a8a:	86 18       	sub	r8, r6
    3a8c:	fb 2d       	mov	r31, r11
    3a8e:	ff 77       	andi	r31, 0x7F	; 127
    3a90:	3f 2e       	mov	r3, r31
    3a92:	36 fe       	sbrs	r3, 6
    3a94:	0d c0       	rjmp	.+26     	; 0x3ab0 <vfprintf+0x2e4>
    3a96:	23 2d       	mov	r18, r3
    3a98:	2e 7f       	andi	r18, 0xFE	; 254
    3a9a:	a2 2e       	mov	r10, r18
    3a9c:	89 14       	cp	r8, r9
    3a9e:	58 f4       	brcc	.+22     	; 0x3ab6 <vfprintf+0x2ea>
    3aa0:	34 fe       	sbrs	r3, 4
    3aa2:	0b c0       	rjmp	.+22     	; 0x3aba <vfprintf+0x2ee>
    3aa4:	32 fc       	sbrc	r3, 2
    3aa6:	09 c0       	rjmp	.+18     	; 0x3aba <vfprintf+0x2ee>
    3aa8:	83 2d       	mov	r24, r3
    3aaa:	8e 7e       	andi	r24, 0xEE	; 238
    3aac:	a8 2e       	mov	r10, r24
    3aae:	05 c0       	rjmp	.+10     	; 0x3aba <vfprintf+0x2ee>
    3ab0:	b8 2c       	mov	r11, r8
    3ab2:	a3 2c       	mov	r10, r3
    3ab4:	03 c0       	rjmp	.+6      	; 0x3abc <vfprintf+0x2f0>
    3ab6:	b8 2c       	mov	r11, r8
    3ab8:	01 c0       	rjmp	.+2      	; 0x3abc <vfprintf+0x2f0>
    3aba:	b9 2c       	mov	r11, r9
    3abc:	a4 fe       	sbrs	r10, 4
    3abe:	0f c0       	rjmp	.+30     	; 0x3ade <vfprintf+0x312>
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	e8 0d       	add	r30, r8
    3ac4:	f1 1d       	adc	r31, r1
    3ac6:	80 81       	ld	r24, Z
    3ac8:	80 33       	cpi	r24, 0x30	; 48
    3aca:	21 f4       	brne	.+8      	; 0x3ad4 <vfprintf+0x308>
    3acc:	9a 2d       	mov	r25, r10
    3ace:	99 7e       	andi	r25, 0xE9	; 233
    3ad0:	a9 2e       	mov	r10, r25
    3ad2:	09 c0       	rjmp	.+18     	; 0x3ae6 <vfprintf+0x31a>
    3ad4:	a2 fe       	sbrs	r10, 2
    3ad6:	06 c0       	rjmp	.+12     	; 0x3ae4 <vfprintf+0x318>
    3ad8:	b3 94       	inc	r11
    3ada:	b3 94       	inc	r11
    3adc:	04 c0       	rjmp	.+8      	; 0x3ae6 <vfprintf+0x31a>
    3ade:	8a 2d       	mov	r24, r10
    3ae0:	86 78       	andi	r24, 0x86	; 134
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <vfprintf+0x31a>
    3ae4:	b3 94       	inc	r11
    3ae6:	a3 fc       	sbrc	r10, 3
    3ae8:	10 c0       	rjmp	.+32     	; 0x3b0a <vfprintf+0x33e>
    3aea:	a0 fe       	sbrs	r10, 0
    3aec:	06 c0       	rjmp	.+12     	; 0x3afa <vfprintf+0x32e>
    3aee:	b2 14       	cp	r11, r2
    3af0:	80 f4       	brcc	.+32     	; 0x3b12 <vfprintf+0x346>
    3af2:	28 0c       	add	r2, r8
    3af4:	92 2c       	mov	r9, r2
    3af6:	9b 18       	sub	r9, r11
    3af8:	0d c0       	rjmp	.+26     	; 0x3b14 <vfprintf+0x348>
    3afa:	b2 14       	cp	r11, r2
    3afc:	58 f4       	brcc	.+22     	; 0x3b14 <vfprintf+0x348>
    3afe:	b6 01       	movw	r22, r12
    3b00:	80 e2       	ldi	r24, 0x20	; 32
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	76 d0       	rcall	.+236    	; 0x3bf2 <fputc>
    3b06:	b3 94       	inc	r11
    3b08:	f8 cf       	rjmp	.-16     	; 0x3afa <vfprintf+0x32e>
    3b0a:	b2 14       	cp	r11, r2
    3b0c:	18 f4       	brcc	.+6      	; 0x3b14 <vfprintf+0x348>
    3b0e:	2b 18       	sub	r2, r11
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <vfprintf+0x34a>
    3b12:	98 2c       	mov	r9, r8
    3b14:	21 2c       	mov	r2, r1
    3b16:	a4 fe       	sbrs	r10, 4
    3b18:	0f c0       	rjmp	.+30     	; 0x3b38 <vfprintf+0x36c>
    3b1a:	b6 01       	movw	r22, r12
    3b1c:	80 e3       	ldi	r24, 0x30	; 48
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	68 d0       	rcall	.+208    	; 0x3bf2 <fputc>
    3b22:	a2 fe       	sbrs	r10, 2
    3b24:	16 c0       	rjmp	.+44     	; 0x3b52 <vfprintf+0x386>
    3b26:	a1 fc       	sbrc	r10, 1
    3b28:	03 c0       	rjmp	.+6      	; 0x3b30 <vfprintf+0x364>
    3b2a:	88 e7       	ldi	r24, 0x78	; 120
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	02 c0       	rjmp	.+4      	; 0x3b34 <vfprintf+0x368>
    3b30:	88 e5       	ldi	r24, 0x58	; 88
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	b6 01       	movw	r22, r12
    3b36:	0c c0       	rjmp	.+24     	; 0x3b50 <vfprintf+0x384>
    3b38:	8a 2d       	mov	r24, r10
    3b3a:	86 78       	andi	r24, 0x86	; 134
    3b3c:	51 f0       	breq	.+20     	; 0x3b52 <vfprintf+0x386>
    3b3e:	a1 fe       	sbrs	r10, 1
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <vfprintf+0x37a>
    3b42:	8b e2       	ldi	r24, 0x2B	; 43
    3b44:	01 c0       	rjmp	.+2      	; 0x3b48 <vfprintf+0x37c>
    3b46:	80 e2       	ldi	r24, 0x20	; 32
    3b48:	a7 fc       	sbrc	r10, 7
    3b4a:	8d e2       	ldi	r24, 0x2D	; 45
    3b4c:	b6 01       	movw	r22, r12
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	50 d0       	rcall	.+160    	; 0x3bf2 <fputc>
    3b52:	89 14       	cp	r8, r9
    3b54:	30 f4       	brcc	.+12     	; 0x3b62 <vfprintf+0x396>
    3b56:	b6 01       	movw	r22, r12
    3b58:	80 e3       	ldi	r24, 0x30	; 48
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	4a d0       	rcall	.+148    	; 0x3bf2 <fputc>
    3b5e:	9a 94       	dec	r9
    3b60:	f8 cf       	rjmp	.-16     	; 0x3b52 <vfprintf+0x386>
    3b62:	8a 94       	dec	r8
    3b64:	f3 01       	movw	r30, r6
    3b66:	e8 0d       	add	r30, r8
    3b68:	f1 1d       	adc	r31, r1
    3b6a:	80 81       	ld	r24, Z
    3b6c:	b6 01       	movw	r22, r12
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	40 d0       	rcall	.+128    	; 0x3bf2 <fputc>
    3b72:	81 10       	cpse	r8, r1
    3b74:	f6 cf       	rjmp	.-20     	; 0x3b62 <vfprintf+0x396>
    3b76:	22 20       	and	r2, r2
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <vfprintf+0x3b0>
    3b7a:	4e ce       	rjmp	.-868    	; 0x3818 <vfprintf+0x4c>
    3b7c:	b6 01       	movw	r22, r12
    3b7e:	80 e2       	ldi	r24, 0x20	; 32
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	37 d0       	rcall	.+110    	; 0x3bf2 <fputc>
    3b84:	2a 94       	dec	r2
    3b86:	f7 cf       	rjmp	.-18     	; 0x3b76 <vfprintf+0x3aa>
    3b88:	f6 01       	movw	r30, r12
    3b8a:	86 81       	ldd	r24, Z+6	; 0x06
    3b8c:	97 81       	ldd	r25, Z+7	; 0x07
    3b8e:	02 c0       	rjmp	.+4      	; 0x3b94 <vfprintf+0x3c8>
    3b90:	8f ef       	ldi	r24, 0xFF	; 255
    3b92:	9f ef       	ldi	r25, 0xFF	; 255
    3b94:	2b 96       	adiw	r28, 0x0b	; 11
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	1f 91       	pop	r17
    3ba6:	0f 91       	pop	r16
    3ba8:	ff 90       	pop	r15
    3baa:	ef 90       	pop	r14
    3bac:	df 90       	pop	r13
    3bae:	cf 90       	pop	r12
    3bb0:	bf 90       	pop	r11
    3bb2:	af 90       	pop	r10
    3bb4:	9f 90       	pop	r9
    3bb6:	8f 90       	pop	r8
    3bb8:	7f 90       	pop	r7
    3bba:	6f 90       	pop	r6
    3bbc:	5f 90       	pop	r5
    3bbe:	4f 90       	pop	r4
    3bc0:	3f 90       	pop	r3
    3bc2:	2f 90       	pop	r2
    3bc4:	08 95       	ret

00003bc6 <strnlen_P>:
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	05 90       	lpm	r0, Z+
    3bca:	61 50       	subi	r22, 0x01	; 1
    3bcc:	70 40       	sbci	r23, 0x00	; 0
    3bce:	01 10       	cpse	r0, r1
    3bd0:	d8 f7       	brcc	.-10     	; 0x3bc8 <strnlen_P+0x2>
    3bd2:	80 95       	com	r24
    3bd4:	90 95       	com	r25
    3bd6:	8e 0f       	add	r24, r30
    3bd8:	9f 1f       	adc	r25, r31
    3bda:	08 95       	ret

00003bdc <strnlen>:
    3bdc:	fc 01       	movw	r30, r24
    3bde:	61 50       	subi	r22, 0x01	; 1
    3be0:	70 40       	sbci	r23, 0x00	; 0
    3be2:	01 90       	ld	r0, Z+
    3be4:	01 10       	cpse	r0, r1
    3be6:	d8 f7       	brcc	.-10     	; 0x3bde <strnlen+0x2>
    3be8:	80 95       	com	r24
    3bea:	90 95       	com	r25
    3bec:	8e 0f       	add	r24, r30
    3bee:	9f 1f       	adc	r25, r31
    3bf0:	08 95       	ret

00003bf2 <fputc>:
    3bf2:	0f 93       	push	r16
    3bf4:	1f 93       	push	r17
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	fb 01       	movw	r30, r22
    3bfc:	23 81       	ldd	r18, Z+3	; 0x03
    3bfe:	21 fd       	sbrc	r18, 1
    3c00:	03 c0       	rjmp	.+6      	; 0x3c08 <fputc+0x16>
    3c02:	8f ef       	ldi	r24, 0xFF	; 255
    3c04:	9f ef       	ldi	r25, 0xFF	; 255
    3c06:	2c c0       	rjmp	.+88     	; 0x3c60 <fputc+0x6e>
    3c08:	22 ff       	sbrs	r18, 2
    3c0a:	16 c0       	rjmp	.+44     	; 0x3c38 <fputc+0x46>
    3c0c:	46 81       	ldd	r20, Z+6	; 0x06
    3c0e:	57 81       	ldd	r21, Z+7	; 0x07
    3c10:	24 81       	ldd	r18, Z+4	; 0x04
    3c12:	35 81       	ldd	r19, Z+5	; 0x05
    3c14:	42 17       	cp	r20, r18
    3c16:	53 07       	cpc	r21, r19
    3c18:	44 f4       	brge	.+16     	; 0x3c2a <fputc+0x38>
    3c1a:	a0 81       	ld	r26, Z
    3c1c:	b1 81       	ldd	r27, Z+1	; 0x01
    3c1e:	9d 01       	movw	r18, r26
    3c20:	2f 5f       	subi	r18, 0xFF	; 255
    3c22:	3f 4f       	sbci	r19, 0xFF	; 255
    3c24:	31 83       	std	Z+1, r19	; 0x01
    3c26:	20 83       	st	Z, r18
    3c28:	8c 93       	st	X, r24
    3c2a:	26 81       	ldd	r18, Z+6	; 0x06
    3c2c:	37 81       	ldd	r19, Z+7	; 0x07
    3c2e:	2f 5f       	subi	r18, 0xFF	; 255
    3c30:	3f 4f       	sbci	r19, 0xFF	; 255
    3c32:	37 83       	std	Z+7, r19	; 0x07
    3c34:	26 83       	std	Z+6, r18	; 0x06
    3c36:	14 c0       	rjmp	.+40     	; 0x3c60 <fputc+0x6e>
    3c38:	8b 01       	movw	r16, r22
    3c3a:	ec 01       	movw	r28, r24
    3c3c:	fb 01       	movw	r30, r22
    3c3e:	00 84       	ldd	r0, Z+8	; 0x08
    3c40:	f1 85       	ldd	r31, Z+9	; 0x09
    3c42:	e0 2d       	mov	r30, r0
    3c44:	19 95       	eicall
    3c46:	89 2b       	or	r24, r25
    3c48:	e1 f6       	brne	.-72     	; 0x3c02 <fputc+0x10>
    3c4a:	d8 01       	movw	r26, r16
    3c4c:	16 96       	adiw	r26, 0x06	; 6
    3c4e:	8d 91       	ld	r24, X+
    3c50:	9c 91       	ld	r25, X
    3c52:	17 97       	sbiw	r26, 0x07	; 7
    3c54:	01 96       	adiw	r24, 0x01	; 1
    3c56:	17 96       	adiw	r26, 0x07	; 7
    3c58:	9c 93       	st	X, r25
    3c5a:	8e 93       	st	-X, r24
    3c5c:	16 97       	sbiw	r26, 0x06	; 6
    3c5e:	ce 01       	movw	r24, r28
    3c60:	df 91       	pop	r29
    3c62:	cf 91       	pop	r28
    3c64:	1f 91       	pop	r17
    3c66:	0f 91       	pop	r16
    3c68:	08 95       	ret

00003c6a <__ultoa_invert>:
    3c6a:	fa 01       	movw	r30, r20
    3c6c:	aa 27       	eor	r26, r26
    3c6e:	28 30       	cpi	r18, 0x08	; 8
    3c70:	51 f1       	breq	.+84     	; 0x3cc6 <__ultoa_invert+0x5c>
    3c72:	20 31       	cpi	r18, 0x10	; 16
    3c74:	81 f1       	breq	.+96     	; 0x3cd6 <__ultoa_invert+0x6c>
    3c76:	e8 94       	clt
    3c78:	6f 93       	push	r22
    3c7a:	6e 7f       	andi	r22, 0xFE	; 254
    3c7c:	6e 5f       	subi	r22, 0xFE	; 254
    3c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c80:	8f 4f       	sbci	r24, 0xFF	; 255
    3c82:	9f 4f       	sbci	r25, 0xFF	; 255
    3c84:	af 4f       	sbci	r26, 0xFF	; 255
    3c86:	b1 e0       	ldi	r27, 0x01	; 1
    3c88:	3e d0       	rcall	.+124    	; 0x3d06 <__ultoa_invert+0x9c>
    3c8a:	b4 e0       	ldi	r27, 0x04	; 4
    3c8c:	3c d0       	rcall	.+120    	; 0x3d06 <__ultoa_invert+0x9c>
    3c8e:	67 0f       	add	r22, r23
    3c90:	78 1f       	adc	r23, r24
    3c92:	89 1f       	adc	r24, r25
    3c94:	9a 1f       	adc	r25, r26
    3c96:	a1 1d       	adc	r26, r1
    3c98:	68 0f       	add	r22, r24
    3c9a:	79 1f       	adc	r23, r25
    3c9c:	8a 1f       	adc	r24, r26
    3c9e:	91 1d       	adc	r25, r1
    3ca0:	a1 1d       	adc	r26, r1
    3ca2:	6a 0f       	add	r22, r26
    3ca4:	71 1d       	adc	r23, r1
    3ca6:	81 1d       	adc	r24, r1
    3ca8:	91 1d       	adc	r25, r1
    3caa:	a1 1d       	adc	r26, r1
    3cac:	20 d0       	rcall	.+64     	; 0x3cee <__ultoa_invert+0x84>
    3cae:	09 f4       	brne	.+2      	; 0x3cb2 <__ultoa_invert+0x48>
    3cb0:	68 94       	set
    3cb2:	3f 91       	pop	r19
    3cb4:	2a e0       	ldi	r18, 0x0A	; 10
    3cb6:	26 9f       	mul	r18, r22
    3cb8:	11 24       	eor	r1, r1
    3cba:	30 19       	sub	r19, r0
    3cbc:	30 5d       	subi	r19, 0xD0	; 208
    3cbe:	31 93       	st	Z+, r19
    3cc0:	de f6       	brtc	.-74     	; 0x3c78 <__ultoa_invert+0xe>
    3cc2:	cf 01       	movw	r24, r30
    3cc4:	08 95       	ret
    3cc6:	46 2f       	mov	r20, r22
    3cc8:	47 70       	andi	r20, 0x07	; 7
    3cca:	40 5d       	subi	r20, 0xD0	; 208
    3ccc:	41 93       	st	Z+, r20
    3cce:	b3 e0       	ldi	r27, 0x03	; 3
    3cd0:	0f d0       	rcall	.+30     	; 0x3cf0 <__ultoa_invert+0x86>
    3cd2:	c9 f7       	brne	.-14     	; 0x3cc6 <__ultoa_invert+0x5c>
    3cd4:	f6 cf       	rjmp	.-20     	; 0x3cc2 <__ultoa_invert+0x58>
    3cd6:	46 2f       	mov	r20, r22
    3cd8:	4f 70       	andi	r20, 0x0F	; 15
    3cda:	40 5d       	subi	r20, 0xD0	; 208
    3cdc:	4a 33       	cpi	r20, 0x3A	; 58
    3cde:	18 f0       	brcs	.+6      	; 0x3ce6 <__ultoa_invert+0x7c>
    3ce0:	49 5d       	subi	r20, 0xD9	; 217
    3ce2:	31 fd       	sbrc	r19, 1
    3ce4:	40 52       	subi	r20, 0x20	; 32
    3ce6:	41 93       	st	Z+, r20
    3ce8:	02 d0       	rcall	.+4      	; 0x3cee <__ultoa_invert+0x84>
    3cea:	a9 f7       	brne	.-22     	; 0x3cd6 <__ultoa_invert+0x6c>
    3cec:	ea cf       	rjmp	.-44     	; 0x3cc2 <__ultoa_invert+0x58>
    3cee:	b4 e0       	ldi	r27, 0x04	; 4
    3cf0:	a6 95       	lsr	r26
    3cf2:	97 95       	ror	r25
    3cf4:	87 95       	ror	r24
    3cf6:	77 95       	ror	r23
    3cf8:	67 95       	ror	r22
    3cfa:	ba 95       	dec	r27
    3cfc:	c9 f7       	brne	.-14     	; 0x3cf0 <__ultoa_invert+0x86>
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	61 05       	cpc	r22, r1
    3d02:	71 05       	cpc	r23, r1
    3d04:	08 95       	ret
    3d06:	9b 01       	movw	r18, r22
    3d08:	ac 01       	movw	r20, r24
    3d0a:	0a 2e       	mov	r0, r26
    3d0c:	06 94       	lsr	r0
    3d0e:	57 95       	ror	r21
    3d10:	47 95       	ror	r20
    3d12:	37 95       	ror	r19
    3d14:	27 95       	ror	r18
    3d16:	ba 95       	dec	r27
    3d18:	c9 f7       	brne	.-14     	; 0x3d0c <__ultoa_invert+0xa2>
    3d1a:	62 0f       	add	r22, r18
    3d1c:	73 1f       	adc	r23, r19
    3d1e:	84 1f       	adc	r24, r20
    3d20:	95 1f       	adc	r25, r21
    3d22:	a0 1d       	adc	r26, r0
    3d24:	08 95       	ret

00003d26 <_exit>:
    3d26:	f8 94       	cli

00003d28 <__stop_program>:
    3d28:	ff cf       	rjmp	.-2      	; 0x3d28 <__stop_program>
