
Semester4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000662  00800200  0000654a  000065de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000654a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c94  00800862  00800862  00006c40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006c40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b40  00000000  00000000  00006cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dcb2  00000000  00000000  0000781c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036d2  00000000  00000000  000154ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c7d  00000000  00000000  00018ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027dc  00000000  00000000  0001f820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004302  00000000  00000000  00021ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c3b2  00000000  00000000  000262fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a80  00000000  00000000  000326b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c6       	rjmp	.+3192   	; 0xcaa <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <__vector_25>
      68:	0c 94 a7 26 	jmp	0x4d4e	; 0x4d4e <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 eb 26 	jmp	0x4dd6	; 0x4dd6 <__vector_36>
      94:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f5 2a 	jmp	0x55ea	; 0x55ea <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <__vector_51>
      d0:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 17 28 	jmp	0x502e	; 0x502e <__vector_54>
      dc:	0c 94 69 28 	jmp	0x50d2	; 0x50d2 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	11 1c       	adc	r1, r1
      e6:	11 1c       	adc	r1, r1
      e8:	11 1c       	adc	r1, r1
      ea:	48 1c       	adc	r4, r8
      ec:	50 1c       	adc	r5, r0
      ee:	65 1c       	adc	r6, r5
      f0:	11 1c       	adc	r1, r1
      f2:	11 1c       	adc	r1, r1
      f4:	48 1c       	adc	r4, r8
      f6:	50 1c       	adc	r5, r0
      f8:	17 2b       	or	r17, r23
      fa:	87 2b       	or	r24, r23
      fc:	87 2b       	or	r24, r23
      fe:	87 2b       	or	r24, r23
     100:	87 2b       	or	r24, r23
     102:	87 2b       	or	r24, r23
     104:	87 2b       	or	r24, r23
     106:	87 2b       	or	r24, r23
     108:	17 2b       	or	r17, r23
     10a:	87 2b       	or	r24, r23
     10c:	87 2b       	or	r24, r23
     10e:	87 2b       	or	r24, r23
     110:	87 2b       	or	r24, r23
     112:	87 2b       	or	r24, r23
     114:	87 2b       	or	r24, r23
     116:	87 2b       	or	r24, r23
     118:	19 2b       	or	r17, r25
     11a:	87 2b       	or	r24, r23
     11c:	87 2b       	or	r24, r23
     11e:	87 2b       	or	r24, r23
     120:	87 2b       	or	r24, r23
     122:	87 2b       	or	r24, r23
     124:	87 2b       	or	r24, r23
     126:	87 2b       	or	r24, r23
     128:	87 2b       	or	r24, r23
     12a:	87 2b       	or	r24, r23
     12c:	87 2b       	or	r24, r23
     12e:	87 2b       	or	r24, r23
     130:	87 2b       	or	r24, r23
     132:	87 2b       	or	r24, r23
     134:	87 2b       	or	r24, r23
     136:	87 2b       	or	r24, r23
     138:	19 2b       	or	r17, r25
     13a:	87 2b       	or	r24, r23
     13c:	87 2b       	or	r24, r23
     13e:	87 2b       	or	r24, r23
     140:	87 2b       	or	r24, r23
     142:	87 2b       	or	r24, r23
     144:	87 2b       	or	r24, r23
     146:	87 2b       	or	r24, r23
     148:	87 2b       	or	r24, r23
     14a:	87 2b       	or	r24, r23
     14c:	87 2b       	or	r24, r23
     14e:	87 2b       	or	r24, r23
     150:	87 2b       	or	r24, r23
     152:	87 2b       	or	r24, r23
     154:	87 2b       	or	r24, r23
     156:	87 2b       	or	r24, r23
     158:	83 2b       	or	r24, r19
     15a:	87 2b       	or	r24, r23
     15c:	87 2b       	or	r24, r23
     15e:	87 2b       	or	r24, r23
     160:	87 2b       	or	r24, r23
     162:	87 2b       	or	r24, r23
     164:	87 2b       	or	r24, r23
     166:	87 2b       	or	r24, r23
     168:	4e 2b       	or	r20, r30
     16a:	87 2b       	or	r24, r23
     16c:	87 2b       	or	r24, r23
     16e:	87 2b       	or	r24, r23
     170:	87 2b       	or	r24, r23
     172:	87 2b       	or	r24, r23
     174:	87 2b       	or	r24, r23
     176:	87 2b       	or	r24, r23
     178:	87 2b       	or	r24, r23
     17a:	87 2b       	or	r24, r23
     17c:	87 2b       	or	r24, r23
     17e:	87 2b       	or	r24, r23
     180:	87 2b       	or	r24, r23
     182:	87 2b       	or	r24, r23
     184:	87 2b       	or	r24, r23
     186:	87 2b       	or	r24, r23
     188:	42 2b       	or	r20, r18
     18a:	87 2b       	or	r24, r23
     18c:	87 2b       	or	r24, r23
     18e:	87 2b       	or	r24, r23
     190:	87 2b       	or	r24, r23
     192:	87 2b       	or	r24, r23
     194:	87 2b       	or	r24, r23
     196:	87 2b       	or	r24, r23
     198:	66 2b       	or	r22, r22

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <prvCheckTasksWaitingTermination>
     19e:	80 91 87 12 	lds	r24, 0x1287	; 0x801287 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	bb d4       	rcall	.+2422   	; 0xb1e <vPortYield>
     1a8:	0e 94 8e 1c 	call	0x391c	; 0x391c <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 8e 19 	call	0x331c	; 0x331c <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 83 1b 	call	0x3706	; 0x3706 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ea e4       	ldi	r30, 0x4A	; 74
     1e4:	f5 e6       	ldi	r31, 0x65	; 101
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 36       	cpi	r26, 0x62	; 98
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	24 e1       	ldi	r18, 0x14	; 20
     1f8:	a2 e6       	ldi	r26, 0x62	; 98
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a6 3f       	cpi	r26, 0xF6	; 246
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <main>
     20a:	0c 94 a3 32 	jmp	0x6546	; 0x6546 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <setPackageHandler>:
#include "application.h"



void setPackageHandler()
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <setPackageHandler+0xa>
     21a:	00 d0       	rcall	.+0      	; 0x21c <setPackageHandler+0xc>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	uint16_t data[3];
	for(int i=0;i<3;i++)
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	13 c0       	rjmp	.+38     	; 0x24c <setPackageHandler+0x3c>
	{
		if(xQueueReceive(sensorDataQueue,&data[i],portMAX_DELAY)==pdPASS)
     226:	b8 01       	movw	r22, r16
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	8c 0f       	add	r24, r28
     232:	9d 1f       	adc	r25, r29
     234:	68 0f       	add	r22, r24
     236:	79 1f       	adc	r23, r25
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	3f ef       	ldi	r19, 0xFF	; 255
     23c:	a9 01       	movw	r20, r18
     23e:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <sensorDataQueue>
     242:	90 91 e3 14 	lds	r25, 0x14E3	; 0x8014e3 <sensorDataQueue+0x1>
     246:	50 d7       	rcall	.+3744   	; 0x10e8 <xQueueReceive>


void setPackageHandler()
{
	uint16_t data[3];
	for(int i=0;i<3;i++)
     248:	0f 5f       	subi	r16, 0xFF	; 255
     24a:	1f 4f       	sbci	r17, 0xFF	; 255
     24c:	03 30       	cpi	r16, 0x03	; 3
     24e:	11 05       	cpc	r17, r1
     250:	54 f3       	brlt	.-44     	; 0x226 <setPackageHandler+0x16>
			{
				//printf("Parameter[%i] : %d\n", i , data[i]);
			}
	}
	
	sensorDataPackageHandler_setTemp_value(data[0]);
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <sensorDataPackageHandler_setTemp_value>
	sensorDataPackageHandler_setHumidity_value(data[1]);
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04
     25e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <sensorDataPackageHandler_setHumidity_value>
	sensorDataPackageHandler_setCO2_value(data[2]);
     262:	8d 81       	ldd	r24, Y+5	; 0x05
     264:	9e 81       	ldd	r25, Y+6	; 0x06
     266:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <sensorDataPackageHandler_setCO2_value>
	xQueueReset(sensorDataQueue);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <sensorDataQueue>
     270:	90 91 e3 14 	lds	r25, 0x14E3	; 0x8014e3 <sensorDataQueue+0x1>
     274:	f4 d5       	rcall	.+3048   	; 0xe5e <xQueueGenericReset>
	
}
     276:	26 96       	adiw	r28, 0x06	; 6
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <ApplicationTask>:
void ApplicationTask(void *pvParameters)
{
	for (;;)
	{
		
		EventBits_t eventBits = xEventGroupWaitBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE|BIT_CO2,pdTRUE,pdTRUE,portMAX_DELAY);
     28c:	cc 24       	eor	r12, r12
     28e:	ca 94       	dec	r12
     290:	dc 2c       	mov	r13, r12
     292:	76 01       	movw	r14, r12
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	21 e0       	ldi	r18, 0x01	; 1
     298:	43 e0       	ldi	r20, 0x03	; 3
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <dataEventGroup>
     2a4:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <dataEventGroup+0x1>
     2a8:	e5 d0       	rcall	.+458    	; 0x474 <xEventGroupWaitBits>
		
		if((eventBits &(BIT_CO2 | BIT_HUMIDITY_TEMPERATURE))==(BIT_CO2|BIT_HUMIDITY_TEMPERATURE))
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	99 27       	eor	r25, r25
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	03 97       	sbiw	r24, 0x03	; 3
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	b1 f4       	brne	.+44     	; 0x2ea <ApplicationTask+0x5e>
		{
			printf("ALL DATA COLLECTED\n");
     2be:	8f e6       	ldi	r24, 0x6F	; 111
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
			setPackageHandler();
     2c6:	a4 df       	rcall	.-184    	; 0x210 <setPackageHandler>
			vTaskDelay(pdMS_TO_TICKS(120000));
     2c8:	60 e1       	ldi	r22, 0x10	; 16
     2ca:	7d e1       	ldi	r23, 0x1D	; 29
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 1e 12 	call	0x243c	; 0x243c <vTaskDelay>
			xSemaphoreGive(tempHumSemaphore);
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 91 e4 14 	lds	r24, 0x14E4	; 0x8014e4 <tempHumSemaphore>
     2e4:	90 91 e5 14 	lds	r25, 0x14E5	; 0x8014e5 <tempHumSemaphore+0x1>
     2e8:	32 d6       	rcall	.+3172   	; 0xf4e <xQueueGenericSend>
			
		}
		vTaskDelay(pdMS_TO_TICKS(50));
     2ea:	63 e0       	ldi	r22, 0x03	; 3
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 1e 12 	call	0x243c	; 0x243c <vTaskDelay>
		
	}
     2f6:	ca cf       	rjmp	.-108    	; 0x28c <ApplicationTask>

000002f8 <createApplicationTask>:
}

void createApplicationTask()
{
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16

	
	xTaskCreate(
     2fe:	e1 2c       	mov	r14, r1
     300:	f1 2c       	mov	r15, r1
     302:	01 e0       	ldi	r16, 0x01	; 1
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 ec       	ldi	r20, 0xC0	; 192
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	62 e8       	ldi	r22, 0x82	; 130
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	86 e4       	ldi	r24, 0x46	; 70
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <myCo2CallBack>:
		vTaskDelay(30);
			
	}
}
void myCo2CallBack(uint16_t ppm)
{
     320:	0f 93       	push	r16
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	1f 92       	push	r1
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	89 83       	std	Y+1, r24	; 0x01
		printf("CO2 Value: %d\n",ppm);
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	8f 93       	push	r24
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	8f 93       	push	r24
     33a:	8a e8       	ldi	r24, 0x8A	; 138
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
		xQueueSend(sensorDataQueue,&ppm,portMAX_DELAY);
     346:	00 e0       	ldi	r16, 0x00	; 0
     348:	2f ef       	ldi	r18, 0xFF	; 255
     34a:	3f ef       	ldi	r19, 0xFF	; 255
     34c:	a9 01       	movw	r20, r18
     34e:	be 01       	movw	r22, r28
     350:	6f 5f       	subi	r22, 0xFF	; 255
     352:	7f 4f       	sbci	r23, 0xFF	; 255
     354:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <sensorDataQueue>
     358:	90 91 e3 14 	lds	r25, 0x14E3	; 0x8014e3 <sensorDataQueue+0x1>
     35c:	f8 d5       	rcall	.+3056   	; 0xf4e <xQueueGenericSend>
		xEventGroupSetBits(dataEventGroup,BIT_CO2);
     35e:	41 e0       	ldi	r20, 0x01	; 1
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <dataEventGroup>
     36a:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <dataEventGroup+0x1>
     36e:	22 d1       	rcall	.+580    	; 0x5b4 <xEventGroupSetBits>
		//xSemaphoreGive(tempHumSemaphore);
		
		

}
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <initializeCO2Driver>:
mh_z19_returnCode_t rc;

void initializeCO2Driver()
{
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	0c 94 bb 24 	jmp	0x4976	; 0x4976 <mh_z19_initialise>
     38a:	08 95       	ret

0000038c <measureCO2>:
	
	
}
void measureCO2()
{
	rc = mh_z19_takeMeassuring();
     38c:	0e 94 e5 24 	call	0x49ca	; 0x49ca <mh_z19_takeMeassuring>
     390:	80 93 d9 14 	sts	0x14D9, r24	; 0x8014d9 <rc>
	if (rc != MHZ19_OK)
     394:	88 23       	and	r24, r24
     396:	21 f0       	breq	.+8      	; 0x3a0 <measureCO2+0x14>
	{
		printf("CO2 Measure went wrong\n");
     398:	89 e9       	ldi	r24, 0x99	; 153
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0c 94 98 2f 	jmp	0x5f30	; 0x5f30 <puts>
     3a0:	08 95       	ret

000003a2 <CO2Task>:
}
void CO2Task()
{
	while(1)
	{
printf("CO2 Task\n");
     3a2:	80 eb       	ldi	r24, 0xB0	; 176
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
EventBits_t dataEventBits = xEventGroupWaitBits
     3aa:	cc 24       	eor	r12, r12
     3ac:	ca 94       	dec	r12
     3ae:	dc 2c       	mov	r13, r12
     3b0:	76 01       	movw	r14, r12
     3b2:	01 e0       	ldi	r16, 0x01	; 1
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	42 e0       	ldi	r20, 0x02	; 2
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <dataEventGroup>
     3c2:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <dataEventGroup+0x1>
     3c6:	56 d0       	rcall	.+172    	; 0x474 <xEventGroupWaitBits>


		if((dataEventBits & BIT_HUMIDITY_TEMPERATURE)==BIT_HUMIDITY_TEMPERATURE)
		{
			//printf("Measured\n");
			measureCO2();
     3c8:	61 fd       	sbrc	r22, 1
     3ca:	e0 df       	rcall	.-64     	; 0x38c <measureCO2>
		
		}
		vTaskDelay(30);
     3cc:	6e e1       	ldi	r22, 0x1E	; 30
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 1e 12 	call	0x243c	; 0x243c <vTaskDelay>
			
	}
     3d8:	e4 cf       	rjmp	.-56     	; 0x3a2 <CO2Task>

000003da <createCO2Task>:
		
		

}
void createCO2Task()
{
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
			initializeCO2Driver();
     3e0:	d1 df       	rcall	.-94     	; 0x384 <initializeCO2Driver>
			mh_z19_injectCallBack(myCo2CallBack);
     3e2:	80 e9       	ldi	r24, 0x90	; 144
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <mh_z19_injectCallBack>
			xTaskCreate(
     3ea:	e1 2c       	mov	r14, r1
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 e0       	ldi	r16, 0x01	; 1
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 ec       	ldi	r20, 0xC0	; 192
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	69 eb       	ldi	r22, 0xB9	; 185
     3fa:	72 e0       	ldi	r23, 0x02	; 2
     3fc:	81 ed       	ldi	r24, 0xD1	; 209
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskCreate>
			,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
			,  NULL
			,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
			,  NULL );
			
}
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	08 95       	ret

0000040c <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     40c:	0f 93       	push	r16
     40e:	01 11       	cpse	r16, r1
     410:	0c c0       	rjmp	.+24     	; 0x42a <prvTestWaitCondition+0x1e>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	82 23       	and	r24, r18
     418:	93 23       	and	r25, r19
     41a:	a4 23       	and	r26, r20
     41c:	b5 23       	and	r27, r21
     41e:	89 2b       	or	r24, r25
     420:	8a 2b       	or	r24, r26
     422:	8b 2b       	or	r24, r27
     424:	79 f4       	brne	.+30     	; 0x444 <prvTestWaitCondition+0x38>
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	10 c0       	rjmp	.+32     	; 0x44a <prvTestWaitCondition+0x3e>
     42a:	dc 01       	movw	r26, r24
     42c:	cb 01       	movw	r24, r22
     42e:	82 23       	and	r24, r18
     430:	93 23       	and	r25, r19
     432:	a4 23       	and	r26, r20
     434:	b5 23       	and	r27, r21
     436:	28 17       	cp	r18, r24
     438:	39 07       	cpc	r19, r25
     43a:	4a 07       	cpc	r20, r26
     43c:	5b 07       	cpc	r21, r27
     43e:	21 f0       	breq	.+8      	; 0x448 <prvTestWaitCondition+0x3c>
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	03 c0       	rjmp	.+6      	; 0x44a <prvTestWaitCondition+0x3e>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	01 c0       	rjmp	.+2      	; 0x44a <prvTestWaitCondition+0x3e>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <xEventGroupCreate>:
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	8f e0       	ldi	r24, 0x0F	; 15
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	af d1       	rcall	.+862    	; 0x7b6 <pvPortMalloc>
     458:	ec 01       	movw	r28, r24
     45a:	00 97       	sbiw	r24, 0x00	; 0
     45c:	39 f0       	breq	.+14     	; 0x46c <xEventGroupCreate+0x1e>
     45e:	fc 01       	movw	r30, r24
     460:	11 92       	st	Z+, r1
     462:	11 92       	st	Z+, r1
     464:	11 92       	st	Z+, r1
     466:	11 92       	st	Z+, r1
     468:	cf 01       	movw	r24, r30
     46a:	8b d2       	rcall	.+1302   	; 0x982 <vListInitialise>
     46c:	ce 01       	movw	r24, r28
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <xEventGroupWaitBits>:
     474:	2f 92       	push	r2
     476:	3f 92       	push	r3
     478:	4f 92       	push	r4
     47a:	5f 92       	push	r5
     47c:	6f 92       	push	r6
     47e:	7f 92       	push	r7
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	ec 01       	movw	r28, r24
     49a:	4a 01       	movw	r8, r20
     49c:	5b 01       	movw	r10, r22
     49e:	62 2e       	mov	r6, r18
     4a0:	70 2e       	mov	r7, r16
     4a2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <vTaskSuspendAll>
     4a6:	28 80       	ld	r2, Y
     4a8:	39 80       	ldd	r3, Y+1	; 0x01
     4aa:	4a 80       	ldd	r4, Y+2	; 0x02
     4ac:	5b 80       	ldd	r5, Y+3	; 0x03
     4ae:	a5 01       	movw	r20, r10
     4b0:	94 01       	movw	r18, r8
     4b2:	c2 01       	movw	r24, r4
     4b4:	b1 01       	movw	r22, r2
     4b6:	aa df       	rcall	.-172    	; 0x40c <prvTestWaitCondition>
     4b8:	88 23       	and	r24, r24
     4ba:	a1 f0       	breq	.+40     	; 0x4e4 <xEventGroupWaitBits+0x70>
     4bc:	66 20       	and	r6, r6
     4be:	89 f1       	breq	.+98     	; 0x522 <xEventGroupWaitBits+0xae>
     4c0:	d5 01       	movw	r26, r10
     4c2:	c4 01       	movw	r24, r8
     4c4:	80 95       	com	r24
     4c6:	90 95       	com	r25
     4c8:	a0 95       	com	r26
     4ca:	b0 95       	com	r27
     4cc:	82 21       	and	r24, r2
     4ce:	93 21       	and	r25, r3
     4d0:	a4 21       	and	r26, r4
     4d2:	b5 21       	and	r27, r5
     4d4:	88 83       	st	Y, r24
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	aa 83       	std	Y+2, r26	; 0x02
     4da:	bb 83       	std	Y+3, r27	; 0x03
     4dc:	c1 2c       	mov	r12, r1
     4de:	d1 2c       	mov	r13, r1
     4e0:	76 01       	movw	r14, r12
     4e2:	22 c0       	rjmp	.+68     	; 0x528 <xEventGroupWaitBits+0xb4>
     4e4:	c1 14       	cp	r12, r1
     4e6:	d1 04       	cpc	r13, r1
     4e8:	e1 04       	cpc	r14, r1
     4ea:	f1 04       	cpc	r15, r1
     4ec:	e9 f0       	breq	.+58     	; 0x528 <xEventGroupWaitBits+0xb4>
     4ee:	61 10       	cpse	r6, r1
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <xEventGroupWaitBits+0x86>
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	ba 01       	movw	r22, r20
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <xEventGroupWaitBits+0x8e>
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	71 10       	cpse	r7, r1
     504:	74 60       	ori	r23, 0x04	; 4
     506:	48 29       	or	r20, r8
     508:	59 29       	or	r21, r9
     50a:	6a 29       	or	r22, r10
     50c:	7b 29       	or	r23, r11
     50e:	97 01       	movw	r18, r14
     510:	86 01       	movw	r16, r12
     512:	ce 01       	movw	r24, r28
     514:	04 96       	adiw	r24, 0x04	; 4
     516:	0e 94 b5 12 	call	0x256a	; 0x256a <vTaskPlaceOnUnorderedEventList>
     51a:	21 2c       	mov	r2, r1
     51c:	31 2c       	mov	r3, r1
     51e:	21 01       	movw	r4, r2
     520:	03 c0       	rjmp	.+6      	; 0x528 <xEventGroupWaitBits+0xb4>
     522:	c1 2c       	mov	r12, r1
     524:	d1 2c       	mov	r13, r1
     526:	76 01       	movw	r14, r12
     528:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>
     52c:	cd 28       	or	r12, r13
     52e:	ce 28       	or	r12, r14
     530:	cf 28       	or	r12, r15
     532:	59 f1       	breq	.+86     	; 0x58a <xEventGroupWaitBits+0x116>
     534:	81 11       	cpse	r24, r1
     536:	01 c0       	rjmp	.+2      	; 0x53a <xEventGroupWaitBits+0xc6>
     538:	f2 d2       	rcall	.+1508   	; 0xb1e <vPortYield>
     53a:	0e 94 77 16 	call	0x2cee	; 0x2cee <uxTaskResetEventItemValue>
     53e:	6b 01       	movw	r12, r22
     540:	7c 01       	movw	r14, r24
     542:	91 fd       	sbrc	r25, 1
     544:	1f c0       	rjmp	.+62     	; 0x584 <xEventGroupWaitBits+0x110>
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	0f 92       	push	r0
     54c:	c8 80       	ld	r12, Y
     54e:	d9 80       	ldd	r13, Y+1	; 0x01
     550:	ea 80       	ldd	r14, Y+2	; 0x02
     552:	fb 80       	ldd	r15, Y+3	; 0x03
     554:	07 2d       	mov	r16, r7
     556:	a5 01       	movw	r20, r10
     558:	94 01       	movw	r18, r8
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	56 df       	rcall	.-340    	; 0x40c <prvTestWaitCondition>
     560:	88 23       	and	r24, r24
     562:	71 f0       	breq	.+28     	; 0x580 <xEventGroupWaitBits+0x10c>
     564:	66 20       	and	r6, r6
     566:	61 f0       	breq	.+24     	; 0x580 <xEventGroupWaitBits+0x10c>
     568:	80 94       	com	r8
     56a:	90 94       	com	r9
     56c:	a0 94       	com	r10
     56e:	b0 94       	com	r11
     570:	8c 20       	and	r8, r12
     572:	9d 20       	and	r9, r13
     574:	ae 20       	and	r10, r14
     576:	bf 20       	and	r11, r15
     578:	88 82       	st	Y, r8
     57a:	99 82       	std	Y+1, r9	; 0x01
     57c:	aa 82       	std	Y+2, r10	; 0x02
     57e:	bb 82       	std	Y+3, r11	; 0x03
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	16 01       	movw	r2, r12
     586:	27 01       	movw	r4, r14
     588:	55 24       	eor	r5, r5
     58a:	c2 01       	movw	r24, r4
     58c:	b1 01       	movw	r22, r2
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
     59e:	bf 90       	pop	r11
     5a0:	af 90       	pop	r10
     5a2:	9f 90       	pop	r9
     5a4:	8f 90       	pop	r8
     5a6:	7f 90       	pop	r7
     5a8:	6f 90       	pop	r6
     5aa:	5f 90       	pop	r5
     5ac:	4f 90       	pop	r4
     5ae:	3f 90       	pop	r3
     5b0:	2f 90       	pop	r2
     5b2:	08 95       	ret

000005b4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     5b4:	4f 92       	push	r4
     5b6:	5f 92       	push	r5
     5b8:	6f 92       	push	r6
     5ba:	7f 92       	push	r7
     5bc:	af 92       	push	r10
     5be:	bf 92       	push	r11
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	6a 01       	movw	r12, r20
     5d4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5d6:	8c 01       	movw	r16, r24
     5d8:	09 5f       	subi	r16, 0xF9	; 249
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     5dc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     5e0:	eb 85       	ldd	r30, Y+11	; 0x0b
     5e2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     5e4:	88 81       	ld	r24, Y
     5e6:	99 81       	ldd	r25, Y+1	; 0x01
     5e8:	aa 81       	ldd	r26, Y+2	; 0x02
     5ea:	bb 81       	ldd	r27, Y+3	; 0x03
     5ec:	c8 2a       	or	r12, r24
     5ee:	d9 2a       	or	r13, r25
     5f0:	ea 2a       	or	r14, r26
     5f2:	fb 2a       	or	r15, r27
     5f4:	c8 82       	st	Y, r12
     5f6:	d9 82       	std	Y+1, r13	; 0x01
     5f8:	ea 82       	std	Y+2, r14	; 0x02
     5fa:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     5fc:	c1 2c       	mov	r12, r1
     5fe:	d1 2c       	mov	r13, r1
     600:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     602:	3d c0       	rjmp	.+122    	; 0x67e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     604:	a4 80       	ldd	r10, Z+4	; 0x04
     606:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	a2 81       	ldd	r26, Z+2	; 0x02
     60e:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     610:	ac 01       	movw	r20, r24
     612:	bd 01       	movw	r22, r26
     614:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     616:	b2 fd       	sbrc	r27, 2
     618:	0e c0       	rjmp	.+28     	; 0x636 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     61a:	48 80       	ld	r4, Y
     61c:	59 80       	ldd	r5, Y+1	; 0x01
     61e:	6a 80       	ldd	r6, Y+2	; 0x02
     620:	7b 80       	ldd	r7, Y+3	; 0x03
     622:	44 22       	and	r4, r20
     624:	55 22       	and	r5, r21
     626:	66 22       	and	r6, r22
     628:	77 22       	and	r7, r23
     62a:	45 28       	or	r4, r5
     62c:	46 28       	or	r4, r6
     62e:	47 28       	or	r4, r7
     630:	89 f4       	brne	.+34     	; 0x654 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	12 c0       	rjmp	.+36     	; 0x65a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     636:	48 80       	ld	r4, Y
     638:	59 80       	ldd	r5, Y+1	; 0x01
     63a:	6a 80       	ldd	r6, Y+2	; 0x02
     63c:	7b 80       	ldd	r7, Y+3	; 0x03
     63e:	44 22       	and	r4, r20
     640:	55 22       	and	r5, r21
     642:	66 22       	and	r6, r22
     644:	77 22       	and	r7, r23
     646:	44 15       	cp	r20, r4
     648:	55 05       	cpc	r21, r5
     64a:	66 05       	cpc	r22, r6
     64c:	77 05       	cpc	r23, r7
     64e:	21 f0       	breq	.+8      	; 0x658 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	03 c0       	rjmp	.+6      	; 0x65a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	01 c0       	rjmp	.+2      	; 0x65a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     658:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     65a:	22 23       	and	r18, r18
     65c:	71 f0       	breq	.+28     	; 0x67a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     65e:	b0 ff       	sbrs	r27, 0
     660:	04 c0       	rjmp	.+8      	; 0x66a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     662:	c4 2a       	or	r12, r20
     664:	d5 2a       	or	r13, r21
     666:	e6 2a       	or	r14, r22
     668:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     66a:	48 81       	ld	r20, Y
     66c:	59 81       	ldd	r21, Y+1	; 0x01
     66e:	6a 81       	ldd	r22, Y+2	; 0x02
     670:	7b 81       	ldd	r23, Y+3	; 0x03
     672:	72 60       	ori	r23, 0x02	; 2
     674:	cf 01       	movw	r24, r30
     676:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     67a:	ea 2d       	mov	r30, r10
     67c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     67e:	e0 17       	cp	r30, r16
     680:	f1 07       	cpc	r31, r17
     682:	09 f0       	breq	.+2      	; 0x686 <xEventGroupSetBits+0xd2>
     684:	bf cf       	rjmp	.-130    	; 0x604 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     686:	c0 94       	com	r12
     688:	d0 94       	com	r13
     68a:	e0 94       	com	r14
     68c:	f0 94       	com	r15
     68e:	88 81       	ld	r24, Y
     690:	99 81       	ldd	r25, Y+1	; 0x01
     692:	aa 81       	ldd	r26, Y+2	; 0x02
     694:	bb 81       	ldd	r27, Y+3	; 0x03
     696:	c8 22       	and	r12, r24
     698:	d9 22       	and	r13, r25
     69a:	ea 22       	and	r14, r26
     69c:	fb 22       	and	r15, r27
     69e:	c8 82       	st	Y, r12
     6a0:	d9 82       	std	Y+1, r13	; 0x01
     6a2:	ea 82       	std	Y+2, r14	; 0x02
     6a4:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6a6:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6aa:	68 81       	ld	r22, Y
     6ac:	79 81       	ldd	r23, Y+1	; 0x01
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	7f 90       	pop	r7
     6c8:	6f 90       	pop	r6
     6ca:	5f 90       	pop	r5
     6cc:	4f 90       	pop	r4
     6ce:	08 95       	ret

000006d0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     6d0:	ee e6       	ldi	r30, 0x6E	; 110
     6d2:	f8 e0       	ldi	r31, 0x08	; 8
     6d4:	a2 e7       	ldi	r26, 0x72	; 114
     6d6:	b8 e0       	ldi	r27, 0x08	; 8
     6d8:	b1 83       	std	Z+1, r27	; 0x01
     6da:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     6dc:	13 82       	std	Z+3, r1	; 0x03
     6de:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     6e0:	e2 e3       	ldi	r30, 0x32	; 50
     6e2:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     6e4:	f0 93 6d 08 	sts	0x086D, r31	; 0x80086d <pxEnd+0x1>
     6e8:	e0 93 6c 08 	sts	0x086C, r30	; 0x80086c <pxEnd>
    pxEnd->xBlockSize = 0;
     6ec:	13 82       	std	Z+3, r1	; 0x03
     6ee:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     6f0:	11 82       	std	Z+1, r1	; 0x01
     6f2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     6f4:	80 ec       	ldi	r24, 0xC0	; 192
     6f6:	99 e0       	ldi	r25, 0x09	; 9
     6f8:	13 96       	adiw	r26, 0x03	; 3
     6fa:	9c 93       	st	X, r25
     6fc:	8e 93       	st	-X, r24
     6fe:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     700:	ed 93       	st	X+, r30
     702:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     704:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <xMinimumEverFreeBytesRemaining+0x1>
     708:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     70c:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <xFreeBytesRemaining+0x1>
     710:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e8       	ldi	r25, 0x80	; 128
     718:	90 93 63 08 	sts	0x0863, r25	; 0x800863 <__data_end+0x1>
     71c:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__data_end>
     720:	08 95       	ret

00000722 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     728:	ae e6       	ldi	r26, 0x6E	; 110
     72a:	b8 e0       	ldi	r27, 0x08	; 8
     72c:	01 c0       	rjmp	.+2      	; 0x730 <prvInsertBlockIntoFreeList+0xe>
     72e:	df 01       	movw	r26, r30
     730:	ed 91       	ld	r30, X+
     732:	fc 91       	ld	r31, X
     734:	11 97       	sbiw	r26, 0x01	; 1
     736:	ec 17       	cp	r30, r28
     738:	fd 07       	cpc	r31, r29
     73a:	c8 f3       	brcs	.-14     	; 0x72e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	8d 91       	ld	r24, X+
     740:	9c 91       	ld	r25, X
     742:	13 97       	sbiw	r26, 0x03	; 3
     744:	9d 01       	movw	r18, r26
     746:	28 0f       	add	r18, r24
     748:	39 1f       	adc	r19, r25
     74a:	c2 17       	cp	r28, r18
     74c:	d3 07       	cpc	r29, r19
     74e:	49 f4       	brne	.+18     	; 0x762 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     750:	2a 81       	ldd	r18, Y+2	; 0x02
     752:	3b 81       	ldd	r19, Y+3	; 0x03
     754:	82 0f       	add	r24, r18
     756:	93 1f       	adc	r25, r19
     758:	13 96       	adiw	r26, 0x03	; 3
     75a:	9c 93       	st	X, r25
     75c:	8e 93       	st	-X, r24
     75e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     760:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	9b 81       	ldd	r25, Y+3	; 0x03
     766:	9e 01       	movw	r18, r28
     768:	28 0f       	add	r18, r24
     76a:	39 1f       	adc	r19, r25
     76c:	e2 17       	cp	r30, r18
     76e:	f3 07       	cpc	r31, r19
     770:	c1 f4       	brne	.+48     	; 0x7a2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     772:	20 91 6c 08 	lds	r18, 0x086C	; 0x80086c <pxEnd>
     776:	30 91 6d 08 	lds	r19, 0x086D	; 0x80086d <pxEnd+0x1>
     77a:	e2 17       	cp	r30, r18
     77c:	f3 07       	cpc	r31, r19
     77e:	71 f0       	breq	.+28     	; 0x79c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     780:	22 81       	ldd	r18, Z+2	; 0x02
     782:	33 81       	ldd	r19, Z+3	; 0x03
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	9b 83       	std	Y+3, r25	; 0x03
     78a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     78c:	ed 91       	ld	r30, X+
     78e:	fc 91       	ld	r31, X
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	99 83       	std	Y+1, r25	; 0x01
     798:	88 83       	st	Y, r24
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     79c:	39 83       	std	Y+1, r19	; 0x01
     79e:	28 83       	st	Y, r18
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7a2:	f9 83       	std	Y+1, r31	; 0x01
     7a4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7a6:	ca 17       	cp	r28, r26
     7a8:	db 07       	cpc	r29, r27
     7aa:	11 f0       	breq	.+4      	; 0x7b0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7ac:	cd 93       	st	X+, r28
     7ae:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     7c4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     7c8:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <pxEnd>
     7cc:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <pxEnd+0x1>
     7d0:	89 2b       	or	r24, r25
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     7d4:	7d df       	rcall	.-262    	; 0x6d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     7d6:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <__data_end>
     7da:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <__data_end+0x1>
     7de:	80 23       	and	r24, r16
     7e0:	91 23       	and	r25, r17
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <pvPortMalloc+0x32>
     7e6:	76 c0       	rjmp	.+236    	; 0x8d4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     7e8:	01 15       	cp	r16, r1
     7ea:	11 05       	cpc	r17, r1
     7ec:	49 f0       	breq	.+18     	; 0x800 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     7ee:	c8 01       	movw	r24, r16
     7f0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     7f2:	08 17       	cp	r16, r24
     7f4:	19 07       	cpc	r17, r25
     7f6:	18 f0       	brcs	.+6      	; 0x7fe <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	10 e0       	ldi	r17, 0x00	; 0
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     7fe:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     800:	01 15       	cp	r16, r1
     802:	11 05       	cpc	r17, r1
     804:	09 f4       	brne	.+2      	; 0x808 <pvPortMalloc+0x52>
     806:	69 c0       	rjmp	.+210    	; 0x8da <pvPortMalloc+0x124>
     808:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <xFreeBytesRemaining>
     80c:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <xFreeBytesRemaining+0x1>
     810:	80 17       	cp	r24, r16
     812:	91 07       	cpc	r25, r17
     814:	08 f4       	brcc	.+2      	; 0x818 <pvPortMalloc+0x62>
     816:	64 c0       	rjmp	.+200    	; 0x8e0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     818:	c0 91 6e 08 	lds	r28, 0x086E	; 0x80086e <xStart>
     81c:	d0 91 6f 08 	lds	r29, 0x086F	; 0x80086f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     820:	ee e6       	ldi	r30, 0x6E	; 110
     822:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     824:	02 c0       	rjmp	.+4      	; 0x82a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     826:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     828:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	9b 81       	ldd	r25, Y+3	; 0x03
     82e:	80 17       	cp	r24, r16
     830:	91 07       	cpc	r25, r17
     832:	20 f4       	brcc	.+8      	; 0x83c <pvPortMalloc+0x86>
     834:	88 81       	ld	r24, Y
     836:	99 81       	ldd	r25, Y+1	; 0x01
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	a9 f7       	brne	.-22     	; 0x826 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     83c:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <pxEnd>
     840:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <pxEnd+0x1>
     844:	c8 17       	cp	r28, r24
     846:	d9 07       	cpc	r29, r25
     848:	09 f4       	brne	.+2      	; 0x84c <pvPortMalloc+0x96>
     84a:	4d c0       	rjmp	.+154    	; 0x8e6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     84c:	e0 80       	ld	r14, Z
     84e:	f1 80       	ldd	r15, Z+1	; 0x01
     850:	84 e0       	ldi	r24, 0x04	; 4
     852:	e8 0e       	add	r14, r24
     854:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     856:	88 81       	ld	r24, Y
     858:	99 81       	ldd	r25, Y+1	; 0x01
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     85e:	2a 81       	ldd	r18, Y+2	; 0x02
     860:	3b 81       	ldd	r19, Y+3	; 0x03
     862:	20 1b       	sub	r18, r16
     864:	31 0b       	sbc	r19, r17
     866:	29 30       	cpi	r18, 0x09	; 9
     868:	31 05       	cpc	r19, r1
     86a:	48 f0       	brcs	.+18     	; 0x87e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     86c:	ce 01       	movw	r24, r28
     86e:	80 0f       	add	r24, r16
     870:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     872:	fc 01       	movw	r30, r24
     874:	33 83       	std	Z+3, r19	; 0x03
     876:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     878:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     87a:	0a 83       	std	Y+2, r16	; 0x02
     87c:	52 df       	rcall	.-348    	; 0x722 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     87e:	2a 81       	ldd	r18, Y+2	; 0x02
     880:	3b 81       	ldd	r19, Y+3	; 0x03
     882:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <xFreeBytesRemaining>
     886:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <xFreeBytesRemaining+0x1>
     88a:	82 1b       	sub	r24, r18
     88c:	93 0b       	sbc	r25, r19
     88e:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <xFreeBytesRemaining+0x1>
     892:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     896:	40 91 68 08 	lds	r20, 0x0868	; 0x800868 <xMinimumEverFreeBytesRemaining>
     89a:	50 91 69 08 	lds	r21, 0x0869	; 0x800869 <xMinimumEverFreeBytesRemaining+0x1>
     89e:	84 17       	cp	r24, r20
     8a0:	95 07       	cpc	r25, r21
     8a2:	20 f4       	brcc	.+8      	; 0x8ac <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8a4:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <xMinimumEverFreeBytesRemaining+0x1>
     8a8:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8ac:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <__data_end>
     8b0:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <__data_end+0x1>
     8b4:	28 2b       	or	r18, r24
     8b6:	39 2b       	or	r19, r25
     8b8:	3b 83       	std	Y+3, r19	; 0x03
     8ba:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     8bc:	19 82       	std	Y+1, r1	; 0x01
     8be:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     8c0:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <xNumberOfSuccessfulAllocations>
     8c4:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <xNumberOfSuccessfulAllocations+0x1>
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <xNumberOfSuccessfulAllocations+0x1>
     8ce:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <xNumberOfSuccessfulAllocations>
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     8d4:	e1 2c       	mov	r14, r1
     8d6:	f1 2c       	mov	r15, r1
     8d8:	08 c0       	rjmp	.+16     	; 0x8ea <pvPortMalloc+0x134>
     8da:	e1 2c       	mov	r14, r1
     8dc:	f1 2c       	mov	r15, r1
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <pvPortMalloc+0x134>
     8e0:	e1 2c       	mov	r14, r1
     8e2:	f1 2c       	mov	r15, r1
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <pvPortMalloc+0x134>
     8e6:	e1 2c       	mov	r14, r1
     8e8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     8ea:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     8ee:	e1 14       	cp	r14, r1
     8f0:	f1 04       	cpc	r15, r1
     8f2:	11 f4       	brne	.+4      	; 0x8f8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     8f4:	0e 94 9a 1c 	call	0x3934	; 0x3934 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     8f8:	c7 01       	movw	r24, r14
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	91 f1       	breq	.+100    	; 0x978 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     914:	ec 01       	movw	r28, r24
     916:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     918:	4a 81       	ldd	r20, Y+2	; 0x02
     91a:	5b 81       	ldd	r21, Y+3	; 0x03
     91c:	20 91 62 08 	lds	r18, 0x0862	; 0x800862 <__data_end>
     920:	30 91 63 08 	lds	r19, 0x0863	; 0x800863 <__data_end+0x1>
     924:	ba 01       	movw	r22, r20
     926:	62 23       	and	r22, r18
     928:	73 23       	and	r23, r19
     92a:	67 2b       	or	r22, r23
     92c:	29 f1       	breq	.+74     	; 0x978 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     92e:	68 81       	ld	r22, Y
     930:	79 81       	ldd	r23, Y+1	; 0x01
     932:	67 2b       	or	r22, r23
     934:	09 f5       	brne	.+66     	; 0x978 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     936:	20 95       	com	r18
     938:	30 95       	com	r19
     93a:	24 23       	and	r18, r20
     93c:	35 23       	and	r19, r21
     93e:	3b 83       	std	Y+3, r19	; 0x03
     940:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     942:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	9b 81       	ldd	r25, Y+3	; 0x03
     94a:	20 91 6a 08 	lds	r18, 0x086A	; 0x80086a <xFreeBytesRemaining>
     94e:	30 91 6b 08 	lds	r19, 0x086B	; 0x80086b <xFreeBytesRemaining+0x1>
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <xFreeBytesRemaining+0x1>
     95a:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     95e:	ce 01       	movw	r24, r28
     960:	e0 de       	rcall	.-576    	; 0x722 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     962:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <xNumberOfSuccessfulFrees>
     966:	90 91 65 08 	lds	r25, 0x0865	; 0x800865 <xNumberOfSuccessfulFrees+0x1>
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	90 93 65 08 	sts	0x0865, r25	; 0x800865 <xNumberOfSuccessfulFrees+0x1>
     970:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     974:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     982:	fc 01       	movw	r30, r24
     984:	03 96       	adiw	r24, 0x03	; 3
     986:	92 83       	std	Z+2, r25	; 0x02
     988:	81 83       	std	Z+1, r24	; 0x01
     98a:	4f ef       	ldi	r20, 0xFF	; 255
     98c:	5f ef       	ldi	r21, 0xFF	; 255
     98e:	ba 01       	movw	r22, r20
     990:	43 83       	std	Z+3, r20	; 0x03
     992:	54 83       	std	Z+4, r21	; 0x04
     994:	65 83       	std	Z+5, r22	; 0x05
     996:	76 83       	std	Z+6, r23	; 0x06
     998:	90 87       	std	Z+8, r25	; 0x08
     99a:	87 83       	std	Z+7, r24	; 0x07
     99c:	92 87       	std	Z+10, r25	; 0x0a
     99e:	81 87       	std	Z+9, r24	; 0x09
     9a0:	10 82       	st	Z, r1
     9a2:	08 95       	ret

000009a4 <vListInitialiseItem>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	13 86       	std	Z+11, r1	; 0x0b
     9a8:	12 86       	std	Z+10, r1	; 0x0a
     9aa:	08 95       	ret

000009ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9b6:	08 81       	ld	r16, Y
     9b8:	19 81       	ldd	r17, Y+1	; 0x01
     9ba:	2a 81       	ldd	r18, Y+2	; 0x02
     9bc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9be:	0f 3f       	cpi	r16, 0xFF	; 255
     9c0:	4f ef       	ldi	r20, 0xFF	; 255
     9c2:	14 07       	cpc	r17, r20
     9c4:	24 07       	cpc	r18, r20
     9c6:	34 07       	cpc	r19, r20
     9c8:	21 f4       	brne	.+8      	; 0x9d2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9ca:	fc 01       	movw	r30, r24
     9cc:	a1 85       	ldd	r26, Z+9	; 0x09
     9ce:	b2 85       	ldd	r27, Z+10	; 0x0a
     9d0:	11 c0       	rjmp	.+34     	; 0x9f4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9d2:	dc 01       	movw	r26, r24
     9d4:	13 96       	adiw	r26, 0x03	; 3
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <vListInsert+0x2e>
     9d8:	df 01       	movw	r26, r30
     9da:	14 96       	adiw	r26, 0x04	; 4
     9dc:	ed 91       	ld	r30, X+
     9de:	fc 91       	ld	r31, X
     9e0:	15 97       	sbiw	r26, 0x05	; 5
     9e2:	40 81       	ld	r20, Z
     9e4:	51 81       	ldd	r21, Z+1	; 0x01
     9e6:	62 81       	ldd	r22, Z+2	; 0x02
     9e8:	73 81       	ldd	r23, Z+3	; 0x03
     9ea:	04 17       	cp	r16, r20
     9ec:	15 07       	cpc	r17, r21
     9ee:	26 07       	cpc	r18, r22
     9f0:	37 07       	cpc	r19, r23
     9f2:	90 f7       	brcc	.-28     	; 0x9d8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     9f4:	14 96       	adiw	r26, 0x04	; 4
     9f6:	ed 91       	ld	r30, X+
     9f8:	fc 91       	ld	r31, X
     9fa:	15 97       	sbiw	r26, 0x05	; 5
     9fc:	fd 83       	std	Y+5, r31	; 0x05
     9fe:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a00:	d7 83       	std	Z+7, r29	; 0x07
     a02:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a04:	bf 83       	std	Y+7, r27	; 0x07
     a06:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a08:	15 96       	adiw	r26, 0x05	; 5
     a0a:	dc 93       	st	X, r29
     a0c:	ce 93       	st	-X, r28
     a0e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a10:	9b 87       	std	Y+11, r25	; 0x0b
     a12:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a14:	fc 01       	movw	r30, r24
     a16:	20 81       	ld	r18, Z
     a18:	2f 5f       	subi	r18, 0xFF	; 255
     a1a:	20 83       	st	Z, r18
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a2c:	a2 85       	ldd	r26, Z+10	; 0x0a
     a2e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a30:	c4 81       	ldd	r28, Z+4	; 0x04
     a32:	d5 81       	ldd	r29, Z+5	; 0x05
     a34:	86 81       	ldd	r24, Z+6	; 0x06
     a36:	97 81       	ldd	r25, Z+7	; 0x07
     a38:	9f 83       	std	Y+7, r25	; 0x07
     a3a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a3c:	c6 81       	ldd	r28, Z+6	; 0x06
     a3e:	d7 81       	ldd	r29, Z+7	; 0x07
     a40:	84 81       	ldd	r24, Z+4	; 0x04
     a42:	95 81       	ldd	r25, Z+5	; 0x05
     a44:	9d 83       	std	Y+5, r25	; 0x05
     a46:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	8d 91       	ld	r24, X+
     a4c:	9c 91       	ld	r25, X
     a4e:	12 97       	sbiw	r26, 0x02	; 2
     a50:	e8 17       	cp	r30, r24
     a52:	f9 07       	cpc	r31, r25
     a54:	31 f4       	brne	.+12     	; 0xa62 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a56:	86 81       	ldd	r24, Z+6	; 0x06
     a58:	97 81       	ldd	r25, Z+7	; 0x07
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	9c 93       	st	X, r25
     a5e:	8e 93       	st	-X, r24
     a60:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a62:	13 86       	std	Z+11, r1	; 0x0b
     a64:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a66:	8c 91       	ld	r24, X
     a68:	81 50       	subi	r24, 0x01	; 1
     a6a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a6c:	8c 91       	ld	r24, X
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     a74:	a8 95       	wdr
     a76:	90 ec       	ldi	r25, 0xC0	; 192
     a78:	88 e1       	ldi	r24, 0x18	; 24
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	a8 95       	wdr
     a80:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a8a:	08 95       	ret

00000a8c <pxPortInitialiseStack>:
     a8c:	fc 01       	movw	r30, r24
     a8e:	60 83       	st	Z, r22
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	70 83       	st	Z, r23
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	10 82       	st	Z, r1
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	10 82       	st	Z, r1
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	20 e8       	ldi	r18, 0x80	; 128
     aa0:	20 83       	st	Z, r18
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	10 82       	st	Z, r1
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	10 82       	st	Z, r1
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	10 82       	st	Z, r1
     aae:	77 97       	sbiw	r30, 0x17	; 23
     ab0:	40 83       	st	Z, r20
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	50 83       	st	Z, r21
     ab6:	86 97       	sbiw	r24, 0x26	; 38
     ab8:	08 95       	ret

00000aba <xPortStartScheduler>:
     aba:	dc df       	rcall	.-72     	; 0xa74 <prvSetupTimerInterrupt>
     abc:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
     ac0:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
     ac4:	cd 91       	ld	r28, X+
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	dd 91       	ld	r29, X+
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	bf 90       	pop	r11
     af6:	af 90       	pop	r10
     af8:	9f 90       	pop	r9
     afa:	8f 90       	pop	r8
     afc:	7f 90       	pop	r7
     afe:	6f 90       	pop	r6
     b00:	5f 90       	pop	r5
     b02:	4f 90       	pop	r4
     b04:	3f 90       	pop	r3
     b06:	2f 90       	pop	r2
     b08:	1f 90       	pop	r1
     b0a:	0f 90       	pop	r0
     b0c:	0c be       	out	0x3c, r0	; 60
     b0e:	0f 90       	pop	r0
     b10:	0b be       	out	0x3b, r0	; 59
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	08 95       	ret
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	08 95       	ret

00000b1e <vPortYield>:
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	0f 92       	push	r0
     b26:	0b b6       	in	r0, 0x3b	; 59
     b28:	0f 92       	push	r0
     b2a:	0c b6       	in	r0, 0x3c	; 60
     b2c:	0f 92       	push	r0
     b2e:	1f 92       	push	r1
     b30:	11 24       	eor	r1, r1
     b32:	2f 92       	push	r2
     b34:	3f 92       	push	r3
     b36:	4f 92       	push	r4
     b38:	5f 92       	push	r5
     b3a:	6f 92       	push	r6
     b3c:	7f 92       	push	r7
     b3e:	8f 92       	push	r8
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	2f 93       	push	r18
     b54:	3f 93       	push	r19
     b56:	4f 93       	push	r20
     b58:	5f 93       	push	r21
     b5a:	6f 93       	push	r22
     b5c:	7f 93       	push	r23
     b5e:	8f 93       	push	r24
     b60:	9f 93       	push	r25
     b62:	af 93       	push	r26
     b64:	bf 93       	push	r27
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
     b6e:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
     b72:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
     b76:	0d b6       	in	r0, 0x3d	; 61
     b78:	0d 92       	st	X+, r0
     b7a:	0e b6       	in	r0, 0x3e	; 62
     b7c:	0d 92       	st	X+, r0
     b7e:	0e 94 39 12 	call	0x2472	; 0x2472 <vTaskSwitchContext>
     b82:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
     b86:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
     b8a:	cd 91       	ld	r28, X+
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	dd 91       	ld	r29, X+
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	ff 91       	pop	r31
     b94:	ef 91       	pop	r30
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	9f 90       	pop	r9
     bc0:	8f 90       	pop	r8
     bc2:	7f 90       	pop	r7
     bc4:	6f 90       	pop	r6
     bc6:	5f 90       	pop	r5
     bc8:	4f 90       	pop	r4
     bca:	3f 90       	pop	r3
     bcc:	2f 90       	pop	r2
     bce:	1f 90       	pop	r1
     bd0:	0f 90       	pop	r0
     bd2:	0c be       	out	0x3c, r0	; 60
     bd4:	0f 90       	pop	r0
     bd6:	0b be       	out	0x3b, r0	; 59
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	08 95       	ret

00000be0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	0f 92       	push	r0
     be8:	0b b6       	in	r0, 0x3b	; 59
     bea:	0f 92       	push	r0
     bec:	0c b6       	in	r0, 0x3c	; 60
     bee:	0f 92       	push	r0
     bf0:	1f 92       	push	r1
     bf2:	11 24       	eor	r1, r1
     bf4:	2f 92       	push	r2
     bf6:	3f 92       	push	r3
     bf8:	4f 92       	push	r4
     bfa:	5f 92       	push	r5
     bfc:	6f 92       	push	r6
     bfe:	7f 92       	push	r7
     c00:	8f 92       	push	r8
     c02:	9f 92       	push	r9
     c04:	af 92       	push	r10
     c06:	bf 92       	push	r11
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
     c30:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
     c34:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
     c38:	0d b6       	in	r0, 0x3d	; 61
     c3a:	0d 92       	st	X+, r0
     c3c:	0e b6       	in	r0, 0x3e	; 62
     c3e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c40:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c42:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <xTaskIncrementTick>
     c46:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c48:	0e 94 39 12 	call	0x2472	; 0x2472 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c4c:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
     c50:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
     c54:	cd 91       	ld	r28, X+
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	dd 91       	ld	r29, X+
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	5f 90       	pop	r5
     c92:	4f 90       	pop	r4
     c94:	3f 90       	pop	r3
     c96:	2f 90       	pop	r2
     c98:	1f 90       	pop	r1
     c9a:	0f 90       	pop	r0
     c9c:	0c be       	out	0x3c, r0	; 60
     c9e:	0f 90       	pop	r0
     ca0:	0b be       	out	0x3b, r0	; 59
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ca8:	08 95       	ret

00000caa <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     caa:	9a df       	rcall	.-204    	; 0xbe0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cac:	18 95       	reti

00000cae <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cae:	dc 01       	movw	r26, r24
     cb0:	53 96       	adiw	r26, 0x13	; 19
     cb2:	2c 91       	ld	r18, X
     cb4:	53 97       	sbiw	r26, 0x13	; 19
     cb6:	22 23       	and	r18, r18
     cb8:	41 f0       	breq	.+16     	; 0xcca <prvGetDisinheritPriorityAfterTimeout+0x1c>
     cba:	5a 96       	adiw	r26, 0x1a	; 26
     cbc:	ed 91       	ld	r30, X+
     cbe:	fc 91       	ld	r31, X
     cc0:	5b 97       	sbiw	r26, 0x1b	; 27
     cc2:	90 81       	ld	r25, Z
     cc4:	8a e0       	ldi	r24, 0x0A	; 10
     cc6:	89 1b       	sub	r24, r25
     cc8:	08 95       	ret
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret

00000cce <prvIsQueueEmpty>:
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	0f 92       	push	r0
     cd4:	fc 01       	movw	r30, r24
     cd6:	86 8d       	ldd	r24, Z+30	; 0x1e
     cd8:	81 11       	cpse	r24, r1
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <prvIsQueueEmpty+0x12>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <prvIsQueueEmpty+0x14>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	08 95       	ret

00000ce8 <prvIsQueueFull>:
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	0f 92       	push	r0
     cee:	fc 01       	movw	r30, r24
     cf0:	26 8d       	ldd	r18, Z+30	; 0x1e
     cf2:	87 8d       	ldd	r24, Z+31	; 0x1f
     cf4:	28 13       	cpse	r18, r24
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <prvIsQueueFull+0x14>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <prvIsQueueFull+0x16>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	08 95       	ret

00000d04 <prvCopyDataToQueue>:
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	04 2f       	mov	r16, r20
     d10:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d12:	48 a1       	ldd	r20, Y+32	; 0x20
     d14:	41 11       	cpse	r20, r1
     d16:	0c c0       	rjmp	.+24     	; 0xd30 <prvCopyDataToQueue+0x2c>
     d18:	88 81       	ld	r24, Y
     d1a:	99 81       	ldd	r25, Y+1	; 0x01
     d1c:	89 2b       	or	r24, r25
     d1e:	09 f0       	breq	.+2      	; 0xd22 <prvCopyDataToQueue+0x1e>
     d20:	42 c0       	rjmp	.+132    	; 0xda6 <prvCopyDataToQueue+0xa2>
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	9d 81       	ldd	r25, Y+5	; 0x05
     d26:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <xTaskPriorityDisinherit>
     d2a:	1d 82       	std	Y+5, r1	; 0x05
     d2c:	1c 82       	std	Y+4, r1	; 0x04
     d2e:	42 c0       	rjmp	.+132    	; 0xdb4 <prvCopyDataToQueue+0xb0>
     d30:	01 11       	cpse	r16, r1
     d32:	17 c0       	rjmp	.+46     	; 0xd62 <prvCopyDataToQueue+0x5e>
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	9b 81       	ldd	r25, Y+3	; 0x03
     d3a:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <memcpy>
     d3e:	28 a1       	ldd	r18, Y+32	; 0x20
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	82 0f       	add	r24, r18
     d46:	91 1d       	adc	r25, r1
     d48:	9b 83       	std	Y+3, r25	; 0x03
     d4a:	8a 83       	std	Y+2, r24	; 0x02
     d4c:	2c 81       	ldd	r18, Y+4	; 0x04
     d4e:	3d 81       	ldd	r19, Y+5	; 0x05
     d50:	82 17       	cp	r24, r18
     d52:	93 07       	cpc	r25, r19
     d54:	50 f1       	brcs	.+84     	; 0xdaa <prvCopyDataToQueue+0xa6>
     d56:	88 81       	ld	r24, Y
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	9b 83       	std	Y+3, r25	; 0x03
     d5c:	8a 83       	std	Y+2, r24	; 0x02
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	29 c0       	rjmp	.+82     	; 0xdb4 <prvCopyDataToQueue+0xb0>
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	8e 81       	ldd	r24, Y+6	; 0x06
     d66:	9f 81       	ldd	r25, Y+7	; 0x07
     d68:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <memcpy>
     d6c:	88 a1       	ldd	r24, Y+32	; 0x20
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	91 95       	neg	r25
     d72:	81 95       	neg	r24
     d74:	91 09       	sbc	r25, r1
     d76:	2e 81       	ldd	r18, Y+6	; 0x06
     d78:	3f 81       	ldd	r19, Y+7	; 0x07
     d7a:	28 0f       	add	r18, r24
     d7c:	39 1f       	adc	r19, r25
     d7e:	3f 83       	std	Y+7, r19	; 0x07
     d80:	2e 83       	std	Y+6, r18	; 0x06
     d82:	48 81       	ld	r20, Y
     d84:	59 81       	ldd	r21, Y+1	; 0x01
     d86:	24 17       	cp	r18, r20
     d88:	35 07       	cpc	r19, r21
     d8a:	30 f4       	brcc	.+12     	; 0xd98 <prvCopyDataToQueue+0x94>
     d8c:	2c 81       	ldd	r18, Y+4	; 0x04
     d8e:	3d 81       	ldd	r19, Y+5	; 0x05
     d90:	82 0f       	add	r24, r18
     d92:	93 1f       	adc	r25, r19
     d94:	9f 83       	std	Y+7, r25	; 0x07
     d96:	8e 83       	std	Y+6, r24	; 0x06
     d98:	02 30       	cpi	r16, 0x02	; 2
     d9a:	49 f4       	brne	.+18     	; 0xdae <prvCopyDataToQueue+0xaa>
     d9c:	11 23       	and	r17, r17
     d9e:	49 f0       	breq	.+18     	; 0xdb2 <prvCopyDataToQueue+0xae>
     da0:	11 50       	subi	r17, 0x01	; 1
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <prvCopyDataToQueue+0xb0>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <prvCopyDataToQueue+0xb0>
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <prvCopyDataToQueue+0xb0>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <prvCopyDataToQueue+0xb0>
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	1f 5f       	subi	r17, 0xFF	; 255
     db6:	1e 8f       	std	Y+30, r17	; 0x1e
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <prvCopyDataFromQueue>:
     dc2:	fc 01       	movw	r30, r24
     dc4:	40 a1       	ldd	r20, Z+32	; 0x20
     dc6:	44 23       	and	r20, r20
     dc8:	a9 f0       	breq	.+42     	; 0xdf4 <prvCopyDataFromQueue+0x32>
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	26 81       	ldd	r18, Z+6	; 0x06
     dce:	37 81       	ldd	r19, Z+7	; 0x07
     dd0:	24 0f       	add	r18, r20
     dd2:	35 1f       	adc	r19, r21
     dd4:	37 83       	std	Z+7, r19	; 0x07
     dd6:	26 83       	std	Z+6, r18	; 0x06
     dd8:	84 81       	ldd	r24, Z+4	; 0x04
     dda:	95 81       	ldd	r25, Z+5	; 0x05
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	20 f0       	brcs	.+8      	; 0xdea <prvCopyDataFromQueue+0x28>
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	97 83       	std	Z+7, r25	; 0x07
     de8:	86 83       	std	Z+6, r24	; 0x06
     dea:	cb 01       	movw	r24, r22
     dec:	66 81       	ldd	r22, Z+6	; 0x06
     dee:	77 81       	ldd	r23, Z+7	; 0x07
     df0:	0c 94 26 2f 	jmp	0x5e4c	; 0x5e4c <memcpy>
     df4:	08 95       	ret

00000df6 <prvUnlockQueue>:
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	0f 92       	push	r0
     e04:	1a a1       	ldd	r17, Y+34	; 0x22
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <prvUnlockQueue+0x28>
     e08:	8b 89       	ldd	r24, Y+19	; 0x13
     e0a:	88 23       	and	r24, r24
     e0c:	51 f0       	breq	.+20     	; 0xe22 <prvUnlockQueue+0x2c>
     e0e:	ce 01       	movw	r24, r28
     e10:	43 96       	adiw	r24, 0x13	; 19
     e12:	0e 94 41 13 	call	0x2682	; 0x2682 <xTaskRemoveFromEventList>
     e16:	81 11       	cpse	r24, r1
     e18:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <vTaskMissedYield>
     e1c:	11 50       	subi	r17, 0x01	; 1
     e1e:	11 16       	cp	r1, r17
     e20:	9c f3       	brlt	.-26     	; 0xe08 <prvUnlockQueue+0x12>
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	8a a3       	std	Y+34, r24	; 0x22
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	0f 92       	push	r0
     e30:	19 a1       	ldd	r17, Y+33	; 0x21
     e32:	0b c0       	rjmp	.+22     	; 0xe4a <prvUnlockQueue+0x54>
     e34:	88 85       	ldd	r24, Y+8	; 0x08
     e36:	88 23       	and	r24, r24
     e38:	51 f0       	breq	.+20     	; 0xe4e <prvUnlockQueue+0x58>
     e3a:	ce 01       	movw	r24, r28
     e3c:	08 96       	adiw	r24, 0x08	; 8
     e3e:	0e 94 41 13 	call	0x2682	; 0x2682 <xTaskRemoveFromEventList>
     e42:	81 11       	cpse	r24, r1
     e44:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <vTaskMissedYield>
     e48:	11 50       	subi	r17, 0x01	; 1
     e4a:	11 16       	cp	r1, r17
     e4c:	9c f3       	brlt	.-26     	; 0xe34 <prvUnlockQueue+0x3e>
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	89 a3       	std	Y+33, r24	; 0x21
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	08 95       	ret

00000e5e <xQueueGenericReset>:
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	ec 01       	movw	r28, r24
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	0f 92       	push	r0
     e6a:	e8 81       	ld	r30, Y
     e6c:	f9 81       	ldd	r31, Y+1	; 0x01
     e6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e70:	28 a1       	ldd	r18, Y+32	; 0x20
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	82 9f       	mul	r24, r18
     e78:	a0 01       	movw	r20, r0
     e7a:	83 9f       	mul	r24, r19
     e7c:	50 0d       	add	r21, r0
     e7e:	92 9f       	mul	r25, r18
     e80:	50 0d       	add	r21, r0
     e82:	11 24       	eor	r1, r1
     e84:	4e 0f       	add	r20, r30
     e86:	5f 1f       	adc	r21, r31
     e88:	5d 83       	std	Y+5, r21	; 0x05
     e8a:	4c 83       	std	Y+4, r20	; 0x04
     e8c:	1e 8e       	std	Y+30, r1	; 0x1e
     e8e:	fb 83       	std	Y+3, r31	; 0x03
     e90:	ea 83       	std	Y+2, r30	; 0x02
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	28 9f       	mul	r18, r24
     e96:	a0 01       	movw	r20, r0
     e98:	29 9f       	mul	r18, r25
     e9a:	50 0d       	add	r21, r0
     e9c:	38 9f       	mul	r19, r24
     e9e:	50 0d       	add	r21, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	cf 01       	movw	r24, r30
     ea4:	84 0f       	add	r24, r20
     ea6:	95 1f       	adc	r25, r21
     ea8:	9f 83       	std	Y+7, r25	; 0x07
     eaa:	8e 83       	std	Y+6, r24	; 0x06
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	89 a3       	std	Y+33, r24	; 0x21
     eb0:	8a a3       	std	Y+34, r24	; 0x22
     eb2:	61 11       	cpse	r22, r1
     eb4:	0b c0       	rjmp	.+22     	; 0xecc <xQueueGenericReset+0x6e>
     eb6:	88 85       	ldd	r24, Y+8	; 0x08
     eb8:	88 23       	and	r24, r24
     eba:	71 f0       	breq	.+28     	; 0xed8 <xQueueGenericReset+0x7a>
     ebc:	ce 01       	movw	r24, r28
     ebe:	08 96       	adiw	r24, 0x08	; 8
     ec0:	0e 94 41 13 	call	0x2682	; 0x2682 <xTaskRemoveFromEventList>
     ec4:	88 23       	and	r24, r24
     ec6:	41 f0       	breq	.+16     	; 0xed8 <xQueueGenericReset+0x7a>
     ec8:	2a de       	rcall	.-940    	; 0xb1e <vPortYield>
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <xQueueGenericReset+0x7a>
     ecc:	ce 01       	movw	r24, r28
     ece:	08 96       	adiw	r24, 0x08	; 8
     ed0:	58 dd       	rcall	.-1360   	; 0x982 <vListInitialise>
     ed2:	ce 01       	movw	r24, r28
     ed4:	43 96       	adiw	r24, 0x13	; 19
     ed6:	55 dd       	rcall	.-1366   	; 0x982 <vListInitialise>
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <prvInitialiseNewQueue>:
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	f8 01       	movw	r30, r16
     eea:	61 11       	cpse	r22, r1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <prvInitialiseNewQueue+0x10>
     eee:	11 83       	std	Z+1, r17	; 0x01
     ef0:	00 83       	st	Z, r16
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <prvInitialiseNewQueue+0x14>
     ef4:	51 83       	std	Z+1, r21	; 0x01
     ef6:	40 83       	st	Z, r20
     ef8:	87 8f       	std	Z+31, r24	; 0x1f
     efa:	60 a3       	std	Z+32, r22	; 0x20
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	cf 01       	movw	r24, r30
     f00:	ae df       	rcall	.-164    	; 0xe5e <xQueueGenericReset>
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	08 95       	ret

00000f08 <xQueueGenericCreate>:
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	f8 2e       	mov	r15, r24
     f18:	e6 2e       	mov	r14, r22
     f1a:	d4 2e       	mov	r13, r20
     f1c:	86 9f       	mul	r24, r22
     f1e:	c0 01       	movw	r24, r0
     f20:	11 24       	eor	r1, r1
     f22:	83 96       	adiw	r24, 0x23	; 35
     f24:	48 dc       	rcall	.-1904   	; 0x7b6 <pvPortMalloc>
     f26:	ec 01       	movw	r28, r24
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	41 f0       	breq	.+16     	; 0xf3c <xQueueGenericCreate+0x34>
     f2c:	8c 01       	movw	r16, r24
     f2e:	2d 2d       	mov	r18, r13
     f30:	ac 01       	movw	r20, r24
     f32:	4d 5d       	subi	r20, 0xDD	; 221
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	6e 2d       	mov	r22, r14
     f38:	8f 2d       	mov	r24, r15
     f3a:	d4 df       	rcall	.-88     	; 0xee4 <prvInitialiseNewQueue>
     f3c:	ce 01       	movw	r24, r28
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	08 95       	ret

00000f4e <xQueueGenericSend>:
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	29 97       	sbiw	r28, 0x09	; 9
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	7c 01       	movw	r14, r24
     f70:	6b 01       	movw	r12, r22
     f72:	2e 83       	std	Y+6, r18	; 0x06
     f74:	3f 83       	std	Y+7, r19	; 0x07
     f76:	48 87       	std	Y+8, r20	; 0x08
     f78:	59 87       	std	Y+9, r21	; 0x09
     f7a:	10 e0       	ldi	r17, 0x00	; 0
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	0f 92       	push	r0
     f82:	f7 01       	movw	r30, r14
     f84:	96 8d       	ldd	r25, Z+30	; 0x1e
     f86:	87 8d       	ldd	r24, Z+31	; 0x1f
     f88:	98 17       	cp	r25, r24
     f8a:	10 f0       	brcs	.+4      	; 0xf90 <xQueueGenericSend+0x42>
     f8c:	02 30       	cpi	r16, 0x02	; 2
     f8e:	b1 f4       	brne	.+44     	; 0xfbc <xQueueGenericSend+0x6e>
     f90:	40 2f       	mov	r20, r16
     f92:	b6 01       	movw	r22, r12
     f94:	c7 01       	movw	r24, r14
     f96:	b6 de       	rcall	.-660    	; 0xd04 <prvCopyDataToQueue>
     f98:	f7 01       	movw	r30, r14
     f9a:	93 89       	ldd	r25, Z+19	; 0x13
     f9c:	99 23       	and	r25, r25
     f9e:	41 f0       	breq	.+16     	; 0xfb0 <xQueueGenericSend+0x62>
     fa0:	c7 01       	movw	r24, r14
     fa2:	43 96       	adiw	r24, 0x13	; 19
     fa4:	0e 94 41 13 	call	0x2682	; 0x2682 <xTaskRemoveFromEventList>
     fa8:	88 23       	and	r24, r24
     faa:	21 f0       	breq	.+8      	; 0xfb4 <xQueueGenericSend+0x66>
     fac:	b8 dd       	rcall	.-1168   	; 0xb1e <vPortYield>
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <xQueueGenericSend+0x66>
     fb0:	81 11       	cpse	r24, r1
     fb2:	b5 dd       	rcall	.-1174   	; 0xb1e <vPortYield>
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	4c c0       	rjmp	.+152    	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
     fbc:	8e 81       	ldd	r24, Y+6	; 0x06
     fbe:	9f 81       	ldd	r25, Y+7	; 0x07
     fc0:	a8 85       	ldd	r26, Y+8	; 0x08
     fc2:	b9 85       	ldd	r27, Y+9	; 0x09
     fc4:	89 2b       	or	r24, r25
     fc6:	8a 2b       	or	r24, r26
     fc8:	8b 2b       	or	r24, r27
     fca:	21 f4       	brne	.+8      	; 0xfd4 <xQueueGenericSend+0x86>
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	40 c0       	rjmp	.+128    	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
     fd4:	11 11       	cpse	r17, r1
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <xQueueGenericSend+0x94>
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	0e 94 a0 14 	call	0x2940	; 0x2940 <vTaskInternalSetTimeOutState>
     fe0:	11 e0       	ldi	r17, 0x01	; 1
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	a9 d7       	rcall	.+3922   	; 0x1f3a <vTaskSuspendAll>
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	0f 92       	push	r0
     fee:	f7 01       	movw	r30, r14
     ff0:	81 a1       	ldd	r24, Z+33	; 0x21
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	09 f4       	brne	.+2      	; 0xff8 <xQueueGenericSend+0xaa>
     ff6:	11 a2       	std	Z+33, r1	; 0x21
     ff8:	f7 01       	movw	r30, r14
     ffa:	82 a1       	ldd	r24, Z+34	; 0x22
     ffc:	8f 3f       	cpi	r24, 0xFF	; 255
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
    1000:	12 a2       	std	Z+34, r1	; 0x22
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	be 01       	movw	r22, r28
    1008:	6a 5f       	subi	r22, 0xFA	; 250
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	0e 94 b1 14 	call	0x2962	; 0x2962 <xTaskCheckForTimeOut>
    1014:	81 11       	cpse	r24, r1
    1016:	19 c0       	rjmp	.+50     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1018:	c7 01       	movw	r24, r14
    101a:	66 de       	rcall	.-820    	; 0xce8 <prvIsQueueFull>
    101c:	88 23       	and	r24, r24
    101e:	81 f0       	breq	.+32     	; 0x1040 <__EEPROM_REGION_LENGTH__+0x40>
    1020:	4e 81       	ldd	r20, Y+6	; 0x06
    1022:	5f 81       	ldd	r21, Y+7	; 0x07
    1024:	68 85       	ldd	r22, Y+8	; 0x08
    1026:	79 85       	ldd	r23, Y+9	; 0x09
    1028:	c7 01       	movw	r24, r14
    102a:	08 96       	adiw	r24, 0x08	; 8
    102c:	0e 94 9e 12 	call	0x253c	; 0x253c <vTaskPlaceOnEventList>
    1030:	c7 01       	movw	r24, r14
    1032:	e1 de       	rcall	.-574    	; 0xdf6 <prvUnlockQueue>
    1034:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>
    1038:	81 11       	cpse	r24, r1
    103a:	a0 cf       	rjmp	.-192    	; 0xf7c <xQueueGenericSend+0x2e>
    103c:	70 dd       	rcall	.-1312   	; 0xb1e <vPortYield>
    103e:	9e cf       	rjmp	.-196    	; 0xf7c <xQueueGenericSend+0x2e>
    1040:	c7 01       	movw	r24, r14
    1042:	d9 de       	rcall	.-590    	; 0xdf6 <prvUnlockQueue>
    1044:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>
    1048:	99 cf       	rjmp	.-206    	; 0xf7c <xQueueGenericSend+0x2e>
    104a:	c7 01       	movw	r24, r14
    104c:	d4 de       	rcall	.-600    	; 0xdf6 <prvUnlockQueue>
    104e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	29 96       	adiw	r28, 0x09	; 9
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	08 95       	ret

00001072 <xQueueGenericSendFromISR>:
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	8a 01       	movw	r16, r20
    1080:	fc 01       	movw	r30, r24
    1082:	56 8d       	ldd	r21, Z+30	; 0x1e
    1084:	37 8d       	ldd	r19, Z+31	; 0x1f
    1086:	53 17       	cp	r21, r19
    1088:	10 f0       	brcs	.+4      	; 0x108e <xQueueGenericSendFromISR+0x1c>
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	f9 f4       	brne	.+62     	; 0x10cc <xQueueGenericSendFromISR+0x5a>
    108e:	42 2f       	mov	r20, r18
    1090:	78 01       	movw	r14, r16
    1092:	ec 01       	movw	r28, r24
    1094:	1a a1       	ldd	r17, Y+34	; 0x22
    1096:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1098:	ce 01       	movw	r24, r28
    109a:	34 de       	rcall	.-920    	; 0xd04 <prvCopyDataToQueue>
    109c:	1f 3f       	cpi	r17, 0xFF	; 255
    109e:	81 f4       	brne	.+32     	; 0x10c0 <xQueueGenericSendFromISR+0x4e>
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	88 23       	and	r24, r24
    10a4:	a9 f0       	breq	.+42     	; 0x10d0 <xQueueGenericSendFromISR+0x5e>
    10a6:	ce 01       	movw	r24, r28
    10a8:	43 96       	adiw	r24, 0x13	; 19
    10aa:	0e 94 41 13 	call	0x2682	; 0x2682 <xTaskRemoveFromEventList>
    10ae:	88 23       	and	r24, r24
    10b0:	89 f0       	breq	.+34     	; 0x10d4 <xQueueGenericSendFromISR+0x62>
    10b2:	e1 14       	cp	r14, r1
    10b4:	f1 04       	cpc	r15, r1
    10b6:	81 f0       	breq	.+32     	; 0x10d8 <xQueueGenericSendFromISR+0x66>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	f7 01       	movw	r30, r14
    10bc:	80 83       	st	Z, r24
    10be:	0d c0       	rjmp	.+26     	; 0x10da <xQueueGenericSendFromISR+0x68>
    10c0:	ff 24       	eor	r15, r15
    10c2:	f3 94       	inc	r15
    10c4:	f1 0e       	add	r15, r17
    10c6:	fa a2       	std	Y+34, r15	; 0x22
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <xQueueGenericSendFromISR+0x68>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <xQueueGenericSendFromISR+0x68>
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <xQueueGenericSendFromISR+0x68>
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <xQueueGenericSendFromISR+0x68>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	08 95       	ret

000010e8 <xQueueReceive>:
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	29 97       	sbiw	r28, 0x09	; 9
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	8c 01       	movw	r16, r24
    110a:	6b 01       	movw	r12, r22
    110c:	2e 83       	std	Y+6, r18	; 0x06
    110e:	3f 83       	std	Y+7, r19	; 0x07
    1110:	48 87       	std	Y+8, r20	; 0x08
    1112:	59 87       	std	Y+9, r21	; 0x09
    1114:	e1 2c       	mov	r14, r1
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	0f 92       	push	r0
    111c:	f8 01       	movw	r30, r16
    111e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1120:	ff 20       	and	r15, r15
    1122:	99 f0       	breq	.+38     	; 0x114a <xQueueReceive+0x62>
    1124:	b6 01       	movw	r22, r12
    1126:	c8 01       	movw	r24, r16
    1128:	4c de       	rcall	.-872    	; 0xdc2 <prvCopyDataFromQueue>
    112a:	fa 94       	dec	r15
    112c:	f8 01       	movw	r30, r16
    112e:	f6 8e       	std	Z+30, r15	; 0x1e
    1130:	80 85       	ldd	r24, Z+8	; 0x08
    1132:	88 23       	and	r24, r24
    1134:	31 f0       	breq	.+12     	; 0x1142 <xQueueReceive+0x5a>
    1136:	c8 01       	movw	r24, r16
    1138:	08 96       	adiw	r24, 0x08	; 8
    113a:	0e 94 41 13 	call	0x2682	; 0x2682 <xTaskRemoveFromEventList>
    113e:	81 11       	cpse	r24, r1
    1140:	ee dc       	rcall	.-1572   	; 0xb1e <vPortYield>
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	4f c0       	rjmp	.+158    	; 0x11e8 <xQueueReceive+0x100>
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	9f 81       	ldd	r25, Y+7	; 0x07
    114e:	a8 85       	ldd	r26, Y+8	; 0x08
    1150:	b9 85       	ldd	r27, Y+9	; 0x09
    1152:	89 2b       	or	r24, r25
    1154:	8a 2b       	or	r24, r26
    1156:	8b 2b       	or	r24, r27
    1158:	21 f4       	brne	.+8      	; 0x1162 <xQueueReceive+0x7a>
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	43 c0       	rjmp	.+134    	; 0x11e8 <xQueueReceive+0x100>
    1162:	e1 10       	cpse	r14, r1
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <xQueueReceive+0x8a>
    1166:	ce 01       	movw	r24, r28
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	0e 94 a0 14 	call	0x2940	; 0x2940 <vTaskInternalSetTimeOutState>
    116e:	ee 24       	eor	r14, r14
    1170:	e3 94       	inc	r14
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	e1 d6       	rcall	.+3522   	; 0x1f3a <vTaskSuspendAll>
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	0f 92       	push	r0
    117e:	f8 01       	movw	r30, r16
    1180:	81 a1       	ldd	r24, Z+33	; 0x21
    1182:	8f 3f       	cpi	r24, 0xFF	; 255
    1184:	09 f4       	brne	.+2      	; 0x1188 <xQueueReceive+0xa0>
    1186:	11 a2       	std	Z+33, r1	; 0x21
    1188:	f8 01       	movw	r30, r16
    118a:	82 a1       	ldd	r24, Z+34	; 0x22
    118c:	8f 3f       	cpi	r24, 0xFF	; 255
    118e:	09 f4       	brne	.+2      	; 0x1192 <xQueueReceive+0xaa>
    1190:	12 a2       	std	Z+34, r1	; 0x22
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	be 01       	movw	r22, r28
    1198:	6a 5f       	subi	r22, 0xFA	; 250
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	ce 01       	movw	r24, r28
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	0e 94 b1 14 	call	0x2962	; 0x2962 <xTaskCheckForTimeOut>
    11a4:	81 11       	cpse	r24, r1
    11a6:	17 c0       	rjmp	.+46     	; 0x11d6 <xQueueReceive+0xee>
    11a8:	c8 01       	movw	r24, r16
    11aa:	91 dd       	rcall	.-1246   	; 0xcce <prvIsQueueEmpty>
    11ac:	88 23       	and	r24, r24
    11ae:	79 f0       	breq	.+30     	; 0x11ce <xQueueReceive+0xe6>
    11b0:	4e 81       	ldd	r20, Y+6	; 0x06
    11b2:	5f 81       	ldd	r21, Y+7	; 0x07
    11b4:	68 85       	ldd	r22, Y+8	; 0x08
    11b6:	79 85       	ldd	r23, Y+9	; 0x09
    11b8:	c8 01       	movw	r24, r16
    11ba:	43 96       	adiw	r24, 0x13	; 19
    11bc:	0e 94 9e 12 	call	0x253c	; 0x253c <vTaskPlaceOnEventList>
    11c0:	c8 01       	movw	r24, r16
    11c2:	19 de       	rcall	.-974    	; 0xdf6 <prvUnlockQueue>
    11c4:	fa d7       	rcall	.+4084   	; 0x21ba <xTaskResumeAll>
    11c6:	81 11       	cpse	r24, r1
    11c8:	a6 cf       	rjmp	.-180    	; 0x1116 <xQueueReceive+0x2e>
    11ca:	a9 dc       	rcall	.-1710   	; 0xb1e <vPortYield>
    11cc:	a4 cf       	rjmp	.-184    	; 0x1116 <xQueueReceive+0x2e>
    11ce:	c8 01       	movw	r24, r16
    11d0:	12 de       	rcall	.-988    	; 0xdf6 <prvUnlockQueue>
    11d2:	f3 d7       	rcall	.+4070   	; 0x21ba <xTaskResumeAll>
    11d4:	a0 cf       	rjmp	.-192    	; 0x1116 <xQueueReceive+0x2e>
    11d6:	c8 01       	movw	r24, r16
    11d8:	0e de       	rcall	.-996    	; 0xdf6 <prvUnlockQueue>
    11da:	ef d7       	rcall	.+4062   	; 0x21ba <xTaskResumeAll>
    11dc:	c8 01       	movw	r24, r16
    11de:	77 dd       	rcall	.-1298   	; 0xcce <prvIsQueueEmpty>
    11e0:	88 23       	and	r24, r24
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <xQueueReceive+0xfe>
    11e4:	98 cf       	rjmp	.-208    	; 0x1116 <xQueueReceive+0x2e>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	29 96       	adiw	r28, 0x09	; 9
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	08 95       	ret

00001206 <xQueueSemaphoreTake>:
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	29 97       	sbiw	r28, 0x09	; 9
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	8c 01       	movw	r16, r24
    1224:	4e 83       	std	Y+6, r20	; 0x06
    1226:	5f 83       	std	Y+7, r21	; 0x07
    1228:	68 87       	std	Y+8, r22	; 0x08
    122a:	79 87       	std	Y+9, r23	; 0x09
    122c:	e1 2c       	mov	r14, r1
    122e:	f1 2c       	mov	r15, r1
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	0f 92       	push	r0
    1236:	f8 01       	movw	r30, r16
    1238:	86 8d       	ldd	r24, Z+30	; 0x1e
    123a:	88 23       	and	r24, r24
    123c:	c9 f0       	breq	.+50     	; 0x1270 <xQueueSemaphoreTake+0x6a>
    123e:	81 50       	subi	r24, 0x01	; 1
    1240:	86 8f       	std	Z+30, r24	; 0x1e
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	89 2b       	or	r24, r25
    1248:	29 f4       	brne	.+10     	; 0x1254 <xQueueSemaphoreTake+0x4e>
    124a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <pvTaskIncrementMutexHeldCount>
    124e:	f8 01       	movw	r30, r16
    1250:	95 83       	std	Z+5, r25	; 0x05
    1252:	84 83       	std	Z+4, r24	; 0x04
    1254:	f8 01       	movw	r30, r16
    1256:	80 85       	ldd	r24, Z+8	; 0x08
    1258:	88 23       	and	r24, r24
    125a:	31 f0       	breq	.+12     	; 0x1268 <xQueueSemaphoreTake+0x62>
    125c:	c8 01       	movw	r24, r16
    125e:	08 96       	adiw	r24, 0x08	; 8
    1260:	0e 94 41 13 	call	0x2682	; 0x2682 <xTaskRemoveFromEventList>
    1264:	81 11       	cpse	r24, r1
    1266:	5b dc       	rcall	.-1866   	; 0xb1e <vPortYield>
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	6f c0       	rjmp	.+222    	; 0x134e <xQueueSemaphoreTake+0x148>
    1270:	8e 81       	ldd	r24, Y+6	; 0x06
    1272:	9f 81       	ldd	r25, Y+7	; 0x07
    1274:	a8 85       	ldd	r26, Y+8	; 0x08
    1276:	b9 85       	ldd	r27, Y+9	; 0x09
    1278:	89 2b       	or	r24, r25
    127a:	8a 2b       	or	r24, r26
    127c:	8b 2b       	or	r24, r27
    127e:	21 f4       	brne	.+8      	; 0x1288 <xQueueSemaphoreTake+0x82>
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	63 c0       	rjmp	.+198    	; 0x134e <xQueueSemaphoreTake+0x148>
    1288:	f1 10       	cpse	r15, r1
    128a:	06 c0       	rjmp	.+12     	; 0x1298 <xQueueSemaphoreTake+0x92>
    128c:	ce 01       	movw	r24, r28
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	0e 94 a0 14 	call	0x2940	; 0x2940 <vTaskInternalSetTimeOutState>
    1294:	ff 24       	eor	r15, r15
    1296:	f3 94       	inc	r15
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	4e d6       	rcall	.+3228   	; 0x1f3a <vTaskSuspendAll>
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	0f 92       	push	r0
    12a4:	f8 01       	movw	r30, r16
    12a6:	81 a1       	ldd	r24, Z+33	; 0x21
    12a8:	8f 3f       	cpi	r24, 0xFF	; 255
    12aa:	09 f4       	brne	.+2      	; 0x12ae <xQueueSemaphoreTake+0xa8>
    12ac:	11 a2       	std	Z+33, r1	; 0x21
    12ae:	f8 01       	movw	r30, r16
    12b0:	82 a1       	ldd	r24, Z+34	; 0x22
    12b2:	8f 3f       	cpi	r24, 0xFF	; 255
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <xQueueSemaphoreTake+0xb2>
    12b6:	12 a2       	std	Z+34, r1	; 0x22
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	be 01       	movw	r22, r28
    12be:	6a 5f       	subi	r22, 0xFA	; 250
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	ce 01       	movw	r24, r28
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	0e 94 b1 14 	call	0x2962	; 0x2962 <xTaskCheckForTimeOut>
    12ca:	81 11       	cpse	r24, r1
    12cc:	26 c0       	rjmp	.+76     	; 0x131a <xQueueSemaphoreTake+0x114>
    12ce:	c8 01       	movw	r24, r16
    12d0:	fe dc       	rcall	.-1540   	; 0xcce <prvIsQueueEmpty>
    12d2:	88 23       	and	r24, r24
    12d4:	f1 f0       	breq	.+60     	; 0x1312 <xQueueSemaphoreTake+0x10c>
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	89 2b       	or	r24, r25
    12de:	51 f4       	brne	.+20     	; 0x12f4 <xQueueSemaphoreTake+0xee>
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	84 81       	ldd	r24, Z+4	; 0x04
    12e8:	95 81       	ldd	r25, Z+5	; 0x05
    12ea:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <xTaskPriorityInherit>
    12ee:	e8 2e       	mov	r14, r24
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	4e 81       	ldd	r20, Y+6	; 0x06
    12f6:	5f 81       	ldd	r21, Y+7	; 0x07
    12f8:	68 85       	ldd	r22, Y+8	; 0x08
    12fa:	79 85       	ldd	r23, Y+9	; 0x09
    12fc:	c8 01       	movw	r24, r16
    12fe:	43 96       	adiw	r24, 0x13	; 19
    1300:	0e 94 9e 12 	call	0x253c	; 0x253c <vTaskPlaceOnEventList>
    1304:	c8 01       	movw	r24, r16
    1306:	77 dd       	rcall	.-1298   	; 0xdf6 <prvUnlockQueue>
    1308:	58 d7       	rcall	.+3760   	; 0x21ba <xTaskResumeAll>
    130a:	81 11       	cpse	r24, r1
    130c:	91 cf       	rjmp	.-222    	; 0x1230 <xQueueSemaphoreTake+0x2a>
    130e:	07 dc       	rcall	.-2034   	; 0xb1e <vPortYield>
    1310:	8f cf       	rjmp	.-226    	; 0x1230 <xQueueSemaphoreTake+0x2a>
    1312:	c8 01       	movw	r24, r16
    1314:	70 dd       	rcall	.-1312   	; 0xdf6 <prvUnlockQueue>
    1316:	51 d7       	rcall	.+3746   	; 0x21ba <xTaskResumeAll>
    1318:	8b cf       	rjmp	.-234    	; 0x1230 <xQueueSemaphoreTake+0x2a>
    131a:	c8 01       	movw	r24, r16
    131c:	6c dd       	rcall	.-1320   	; 0xdf6 <prvUnlockQueue>
    131e:	4d d7       	rcall	.+3738   	; 0x21ba <xTaskResumeAll>
    1320:	c8 01       	movw	r24, r16
    1322:	d5 dc       	rcall	.-1622   	; 0xcce <prvIsQueueEmpty>
    1324:	88 23       	and	r24, r24
    1326:	09 f4       	brne	.+2      	; 0x132a <xQueueSemaphoreTake+0x124>
    1328:	83 cf       	rjmp	.-250    	; 0x1230 <xQueueSemaphoreTake+0x2a>
    132a:	ee 20       	and	r14, r14
    132c:	79 f0       	breq	.+30     	; 0x134c <xQueueSemaphoreTake+0x146>
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	0f 92       	push	r0
    1334:	c8 01       	movw	r24, r16
    1336:	bb dc       	rcall	.-1674   	; 0xcae <prvGetDisinheritPriorityAfterTimeout>
    1338:	68 2f       	mov	r22, r24
    133a:	f8 01       	movw	r30, r16
    133c:	84 81       	ldd	r24, Z+4	; 0x04
    133e:	95 81       	ldd	r25, Z+5	; 0x05
    1340:	0e 94 10 16 	call	0x2c20	; 0x2c20 <vTaskPriorityDisinheritAfterTimeout>
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	01 c0       	rjmp	.+2      	; 0x134e <xQueueSemaphoreTake+0x148>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	29 96       	adiw	r28, 0x09	; 9
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	08 95       	ret

00001368 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	0f 92       	push	r0
    1374:	89 a1       	ldd	r24, Y+33	; 0x21
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <vQueueWaitForMessageRestricted+0x14>
    137a:	19 a2       	std	Y+33, r1	; 0x21
    137c:	8a a1       	ldd	r24, Y+34	; 0x22
    137e:	8f 3f       	cpi	r24, 0xFF	; 255
    1380:	09 f4       	brne	.+2      	; 0x1384 <vQueueWaitForMessageRestricted+0x1c>
    1382:	1a a2       	std	Y+34, r1	; 0x22
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1388:	8e 8d       	ldd	r24, Y+30	; 0x1e
    138a:	81 11       	cpse	r24, r1
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    138e:	ce 01       	movw	r24, r28
    1390:	43 96       	adiw	r24, 0x13	; 19
    1392:	0e 94 ff 12 	call	0x25fe	; 0x25fe <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1396:	ce 01       	movw	r24, r28
    1398:	2e dd       	rcall	.-1444   	; 0xdf6 <prvUnlockQueue>
    }
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    13a0:	fc 01       	movw	r30, r24
    13a2:	44 81       	ldd	r20, Z+4	; 0x04
    13a4:	55 81       	ldd	r21, Z+5	; 0x05
    13a6:	22 81       	ldd	r18, Z+2	; 0x02
    13a8:	33 81       	ldd	r19, Z+3	; 0x03
    13aa:	24 0f       	add	r18, r20
    13ac:	35 1f       	adc	r19, r21
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	b9 01       	movw	r22, r18
    13b4:	68 1b       	sub	r22, r24
    13b6:	79 0b       	sbc	r23, r25
    13b8:	cb 01       	movw	r24, r22
    13ba:	64 17       	cp	r22, r20
    13bc:	75 07       	cpc	r23, r21
    13be:	10 f0       	brcs	.+4      	; 0x13c4 <prvBytesInBuffer+0x24>
    13c0:	84 1b       	sub	r24, r20
    13c2:	95 0b       	sbc	r25, r21
    13c4:	08 95       	ret

000013c6 <prvInitialiseNewStreamBuffer>:
    13c6:	0f 93       	push	r16
    13c8:	fc 01       	movw	r30, r24
    13ca:	8f e0       	ldi	r24, 0x0F	; 15
    13cc:	df 01       	movw	r26, r30
    13ce:	1d 92       	st	X+, r1
    13d0:	8a 95       	dec	r24
    13d2:	e9 f7       	brne	.-6      	; 0x13ce <prvInitialiseNewStreamBuffer+0x8>
    13d4:	75 87       	std	Z+13, r23	; 0x0d
    13d6:	64 87       	std	Z+12, r22	; 0x0c
    13d8:	55 83       	std	Z+5, r21	; 0x05
    13da:	44 83       	std	Z+4, r20	; 0x04
    13dc:	37 83       	std	Z+7, r19	; 0x07
    13de:	26 83       	std	Z+6, r18	; 0x06
    13e0:	06 87       	std	Z+14, r16	; 0x0e
    13e2:	0f 91       	pop	r16
    13e4:	08 95       	ret

000013e6 <prvWriteBytesToBuffer>:
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	6c 01       	movw	r12, r24
    13fc:	5b 01       	movw	r10, r22
    13fe:	7a 01       	movw	r14, r20
    1400:	fc 01       	movw	r30, r24
    1402:	c2 81       	ldd	r28, Z+2	; 0x02
    1404:	d3 81       	ldd	r29, Z+3	; 0x03
    1406:	04 81       	ldd	r16, Z+4	; 0x04
    1408:	15 81       	ldd	r17, Z+5	; 0x05
    140a:	0c 1b       	sub	r16, r28
    140c:	1d 0b       	sbc	r17, r29
    140e:	40 17       	cp	r20, r16
    1410:	51 07       	cpc	r21, r17
    1412:	08 f4       	brcc	.+2      	; 0x1416 <prvWriteBytesToBuffer+0x30>
    1414:	8a 01       	movw	r16, r20
    1416:	f6 01       	movw	r30, r12
    1418:	84 85       	ldd	r24, Z+12	; 0x0c
    141a:	95 85       	ldd	r25, Z+13	; 0x0d
    141c:	a8 01       	movw	r20, r16
    141e:	b5 01       	movw	r22, r10
    1420:	8c 0f       	add	r24, r28
    1422:	9d 1f       	adc	r25, r29
    1424:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <memcpy>
    1428:	0e 15       	cp	r16, r14
    142a:	1f 05       	cpc	r17, r15
    142c:	58 f4       	brcc	.+22     	; 0x1444 <prvWriteBytesToBuffer+0x5e>
    142e:	a7 01       	movw	r20, r14
    1430:	40 1b       	sub	r20, r16
    1432:	51 0b       	sbc	r21, r17
    1434:	b5 01       	movw	r22, r10
    1436:	60 0f       	add	r22, r16
    1438:	71 1f       	adc	r23, r17
    143a:	f6 01       	movw	r30, r12
    143c:	84 85       	ldd	r24, Z+12	; 0x0c
    143e:	95 85       	ldd	r25, Z+13	; 0x0d
    1440:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <memcpy>
    1444:	ce 01       	movw	r24, r28
    1446:	8e 0d       	add	r24, r14
    1448:	9f 1d       	adc	r25, r15
    144a:	f6 01       	movw	r30, r12
    144c:	24 81       	ldd	r18, Z+4	; 0x04
    144e:	35 81       	ldd	r19, Z+5	; 0x05
    1450:	82 17       	cp	r24, r18
    1452:	93 07       	cpc	r25, r19
    1454:	10 f0       	brcs	.+4      	; 0x145a <prvWriteBytesToBuffer+0x74>
    1456:	82 1b       	sub	r24, r18
    1458:	93 0b       	sbc	r25, r19
    145a:	f6 01       	movw	r30, r12
    145c:	93 83       	std	Z+3, r25	; 0x03
    145e:	82 83       	std	Z+2, r24	; 0x02
    1460:	c7 01       	movw	r24, r14
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	08 95       	ret

00001478 <prvWriteMessageToBuffer>:
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	1f 92       	push	r1
    148a:	1f 92       	push	r1
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	7c 01       	movw	r14, r24
    1492:	6b 01       	movw	r12, r22
    1494:	5a 83       	std	Y+2, r21	; 0x02
    1496:	49 83       	std	Y+1, r20	; 0x01
    1498:	21 15       	cp	r18, r1
    149a:	31 05       	cpc	r19, r1
    149c:	c1 f0       	breq	.+48     	; 0x14ce <prvWriteMessageToBuffer+0x56>
    149e:	fc 01       	movw	r30, r24
    14a0:	86 85       	ldd	r24, Z+14	; 0x0e
    14a2:	80 fd       	sbrc	r24, 0
    14a4:	08 c0       	rjmp	.+16     	; 0x14b6 <prvWriteMessageToBuffer+0x3e>
    14a6:	42 17       	cp	r20, r18
    14a8:	53 07       	cpc	r21, r19
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <prvWriteMessageToBuffer+0x36>
    14ac:	9a 01       	movw	r18, r20
    14ae:	3a 83       	std	Y+2, r19	; 0x02
    14b0:	29 83       	std	Y+1, r18	; 0x01
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <prvWriteMessageToBuffer+0x5c>
    14b6:	20 17       	cp	r18, r16
    14b8:	31 07       	cpc	r19, r17
    14ba:	58 f0       	brcs	.+22     	; 0x14d2 <prvWriteMessageToBuffer+0x5a>
    14bc:	42 e0       	ldi	r20, 0x02	; 2
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	be 01       	movw	r22, r28
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	c7 01       	movw	r24, r14
    14c8:	8e df       	rcall	.-228    	; 0x13e6 <prvWriteBytesToBuffer>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <prvWriteMessageToBuffer+0x5c>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <prvWriteMessageToBuffer+0x5c>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	88 23       	and	r24, r24
    14d6:	31 f0       	breq	.+12     	; 0x14e4 <prvWriteMessageToBuffer+0x6c>
    14d8:	49 81       	ldd	r20, Y+1	; 0x01
    14da:	5a 81       	ldd	r21, Y+2	; 0x02
    14dc:	b6 01       	movw	r22, r12
    14de:	c7 01       	movw	r24, r14
    14e0:	82 df       	rcall	.-252    	; 0x13e6 <prvWriteBytesToBuffer>
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <prvWriteMessageToBuffer+0x70>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	08 95       	ret

000014fe <prvReadBytesFromBuffer>:
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	7c 01       	movw	r14, r24
    1514:	5b 01       	movw	r10, r22
    1516:	e9 01       	movw	r28, r18
    1518:	42 17       	cp	r20, r18
    151a:	53 07       	cpc	r21, r19
    151c:	08 f4       	brcc	.+2      	; 0x1520 <prvReadBytesFromBuffer+0x22>
    151e:	ea 01       	movw	r28, r20
    1520:	20 97       	sbiw	r28, 0x00	; 0
    1522:	81 f1       	breq	.+96     	; 0x1584 <prvReadBytesFromBuffer+0x86>
    1524:	f7 01       	movw	r30, r14
    1526:	00 81       	ld	r16, Z
    1528:	11 81       	ldd	r17, Z+1	; 0x01
    152a:	84 81       	ldd	r24, Z+4	; 0x04
    152c:	95 81       	ldd	r25, Z+5	; 0x05
    152e:	80 1b       	sub	r24, r16
    1530:	91 0b       	sbc	r25, r17
    1532:	6e 01       	movw	r12, r28
    1534:	8c 17       	cp	r24, r28
    1536:	9d 07       	cpc	r25, r29
    1538:	08 f4       	brcc	.+2      	; 0x153c <prvReadBytesFromBuffer+0x3e>
    153a:	6c 01       	movw	r12, r24
    153c:	f7 01       	movw	r30, r14
    153e:	64 85       	ldd	r22, Z+12	; 0x0c
    1540:	75 85       	ldd	r23, Z+13	; 0x0d
    1542:	60 0f       	add	r22, r16
    1544:	71 1f       	adc	r23, r17
    1546:	a6 01       	movw	r20, r12
    1548:	c5 01       	movw	r24, r10
    154a:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <memcpy>
    154e:	cc 16       	cp	r12, r28
    1550:	dd 06       	cpc	r13, r29
    1552:	58 f4       	brcc	.+22     	; 0x156a <prvReadBytesFromBuffer+0x6c>
    1554:	ae 01       	movw	r20, r28
    1556:	4c 19       	sub	r20, r12
    1558:	5d 09       	sbc	r21, r13
    155a:	f7 01       	movw	r30, r14
    155c:	64 85       	ldd	r22, Z+12	; 0x0c
    155e:	75 85       	ldd	r23, Z+13	; 0x0d
    1560:	c5 01       	movw	r24, r10
    1562:	8c 0d       	add	r24, r12
    1564:	9d 1d       	adc	r25, r13
    1566:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <memcpy>
    156a:	0c 0f       	add	r16, r28
    156c:	1d 1f       	adc	r17, r29
    156e:	f7 01       	movw	r30, r14
    1570:	84 81       	ldd	r24, Z+4	; 0x04
    1572:	95 81       	ldd	r25, Z+5	; 0x05
    1574:	08 17       	cp	r16, r24
    1576:	19 07       	cpc	r17, r25
    1578:	10 f0       	brcs	.+4      	; 0x157e <prvReadBytesFromBuffer+0x80>
    157a:	08 1b       	sub	r16, r24
    157c:	19 0b       	sbc	r17, r25
    157e:	f7 01       	movw	r30, r14
    1580:	11 83       	std	Z+1, r17	; 0x01
    1582:	00 83       	st	Z, r16
    1584:	ce 01       	movw	r24, r28
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	bf 90       	pop	r11
    1598:	af 90       	pop	r10
    159a:	08 95       	ret

0000159c <prvReadMessageFromBuffer>:
    159c:	6f 92       	push	r6
    159e:	7f 92       	push	r7
    15a0:	8f 92       	push	r8
    15a2:	9f 92       	push	r9
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	1f 92       	push	r1
    15ba:	1f 92       	push	r1
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	6c 01       	movw	r12, r24
    15c2:	4b 01       	movw	r8, r22
    15c4:	5a 01       	movw	r10, r20
    15c6:	79 01       	movw	r14, r18
    15c8:	01 15       	cp	r16, r1
    15ca:	11 05       	cpc	r17, r1
    15cc:	b1 f0       	breq	.+44     	; 0x15fa <prvReadMessageFromBuffer+0x5e>
    15ce:	fc 01       	movw	r30, r24
    15d0:	60 80       	ld	r6, Z
    15d2:	71 80       	ldd	r7, Z+1	; 0x01
    15d4:	a8 01       	movw	r20, r16
    15d6:	be 01       	movw	r22, r28
    15d8:	6f 5f       	subi	r22, 0xFF	; 255
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	90 df       	rcall	.-224    	; 0x14fe <prvReadBytesFromBuffer>
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	e0 1a       	sub	r14, r16
    15e4:	f1 0a       	sbc	r15, r17
    15e6:	a8 16       	cp	r10, r24
    15e8:	b9 06       	cpc	r11, r25
    15ea:	30 f4       	brcc	.+12     	; 0x15f8 <prvReadMessageFromBuffer+0x5c>
    15ec:	f6 01       	movw	r30, r12
    15ee:	71 82       	std	Z+1, r7	; 0x01
    15f0:	60 82       	st	Z, r6
    15f2:	a1 2c       	mov	r10, r1
    15f4:	b1 2c       	mov	r11, r1
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <prvReadMessageFromBuffer+0x5e>
    15f8:	5c 01       	movw	r10, r24
    15fa:	97 01       	movw	r18, r14
    15fc:	a5 01       	movw	r20, r10
    15fe:	b4 01       	movw	r22, r8
    1600:	c6 01       	movw	r24, r12
    1602:	7d df       	rcall	.-262    	; 0x14fe <prvReadBytesFromBuffer>
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	df 90       	pop	r13
    1616:	cf 90       	pop	r12
    1618:	bf 90       	pop	r11
    161a:	af 90       	pop	r10
    161c:	9f 90       	pop	r9
    161e:	8f 90       	pop	r8
    1620:	7f 90       	pop	r7
    1622:	6f 90       	pop	r6
    1624:	08 95       	ret

00001626 <xStreamBufferGenericCreate>:
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	ec 01       	movw	r28, r24
    1636:	6b 01       	movw	r12, r22
    1638:	41 30       	cpi	r20, 0x01	; 1
    163a:	11 f4       	brne	.+4      	; 0x1640 <xStreamBufferGenericCreate+0x1a>
    163c:	01 e0       	ldi	r16, 0x01	; 1
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <xStreamBufferGenericCreate+0x1c>
    1640:	00 e0       	ldi	r16, 0x00	; 0
    1642:	c1 14       	cp	r12, r1
    1644:	d1 04       	cpc	r13, r1
    1646:	19 f4       	brne	.+6      	; 0x164e <xStreamBufferGenericCreate+0x28>
    1648:	cc 24       	eor	r12, r12
    164a:	c3 94       	inc	r12
    164c:	d1 2c       	mov	r13, r1
    164e:	ce 01       	movw	r24, r28
    1650:	40 96       	adiw	r24, 0x10	; 16
    1652:	c8 17       	cp	r28, r24
    1654:	d9 07       	cpc	r29, r25
    1656:	20 f4       	brcc	.+8      	; 0x1660 <xStreamBufferGenericCreate+0x3a>
    1658:	21 96       	adiw	r28, 0x01	; 1
    165a:	ad d8       	rcall	.-3750   	; 0x7b6 <pvPortMalloc>
    165c:	7c 01       	movw	r14, r24
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <xStreamBufferGenericCreate+0x3e>
    1660:	e1 2c       	mov	r14, r1
    1662:	f1 2c       	mov	r15, r1
    1664:	e1 14       	cp	r14, r1
    1666:	f1 04       	cpc	r15, r1
    1668:	39 f0       	breq	.+14     	; 0x1678 <xStreamBufferGenericCreate+0x52>
    166a:	96 01       	movw	r18, r12
    166c:	ae 01       	movw	r20, r28
    166e:	b7 01       	movw	r22, r14
    1670:	61 5f       	subi	r22, 0xF1	; 241
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	c7 01       	movw	r24, r14
    1676:	a7 de       	rcall	.-690    	; 0x13c6 <prvInitialiseNewStreamBuffer>
    1678:	c7 01       	movw	r24, r14
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	08 95       	ret

0000168a <xStreamBufferReset>:
    168a:	0f 93       	push	r16
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	0f 92       	push	r0
    1692:	fc 01       	movw	r30, r24
    1694:	20 85       	ldd	r18, Z+8	; 0x08
    1696:	31 85       	ldd	r19, Z+9	; 0x09
    1698:	23 2b       	or	r18, r19
    169a:	71 f4       	brne	.+28     	; 0x16b8 <xStreamBufferReset+0x2e>
    169c:	22 85       	ldd	r18, Z+10	; 0x0a
    169e:	33 85       	ldd	r19, Z+11	; 0x0b
    16a0:	23 2b       	or	r18, r19
    16a2:	61 f4       	brne	.+24     	; 0x16bc <xStreamBufferReset+0x32>
    16a4:	26 81       	ldd	r18, Z+6	; 0x06
    16a6:	37 81       	ldd	r19, Z+7	; 0x07
    16a8:	44 81       	ldd	r20, Z+4	; 0x04
    16aa:	55 81       	ldd	r21, Z+5	; 0x05
    16ac:	64 85       	ldd	r22, Z+12	; 0x0c
    16ae:	75 85       	ldd	r23, Z+13	; 0x0d
    16b0:	06 85       	ldd	r16, Z+14	; 0x0e
    16b2:	89 de       	rcall	.-750    	; 0x13c6 <prvInitialiseNewStreamBuffer>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <xStreamBufferReset+0x34>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <xStreamBufferReset+0x34>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	0f 90       	pop	r0
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	0f 91       	pop	r16
    16c4:	08 95       	ret

000016c6 <xStreamBufferSpacesAvailable>:
    16c6:	fc 01       	movw	r30, r24
    16c8:	24 81       	ldd	r18, Z+4	; 0x04
    16ca:	35 81       	ldd	r19, Z+5	; 0x05
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	42 81       	ldd	r20, Z+2	; 0x02
    16d6:	53 81       	ldd	r21, Z+3	; 0x03
    16d8:	84 1b       	sub	r24, r20
    16da:	95 0b       	sbc	r25, r21
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	82 17       	cp	r24, r18
    16e0:	93 07       	cpc	r25, r19
    16e2:	10 f0       	brcs	.+4      	; 0x16e8 <xStreamBufferSpacesAvailable+0x22>
    16e4:	82 1b       	sub	r24, r18
    16e6:	93 0b       	sbc	r25, r19
    16e8:	08 95       	ret

000016ea <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    16ea:	2f 92       	push	r2
    16ec:	3f 92       	push	r3
    16ee:	4f 92       	push	r4
    16f0:	5f 92       	push	r5
    16f2:	6f 92       	push	r6
    16f4:	7f 92       	push	r7
    16f6:	8f 92       	push	r8
    16f8:	9f 92       	push	r9
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	2b 97       	sbiw	r28, 0x0b	; 11
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	4c 01       	movw	r8, r24
    1720:	7b 87       	std	Y+11, r23	; 0x0b
    1722:	6a 87       	std	Y+10, r22	; 0x0a
    1724:	1a 01       	movw	r2, r20
    1726:	0e 83       	std	Y+6, r16	; 0x06
    1728:	1f 83       	std	Y+7, r17	; 0x07
    172a:	28 87       	std	Y+8, r18	; 0x08
    172c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    172e:	fc 01       	movw	r30, r24
    1730:	84 81       	ldd	r24, Z+4	; 0x04
    1732:	95 81       	ldd	r25, Z+5	; 0x05
    1734:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1736:	26 85       	ldd	r18, Z+14	; 0x0e
    1738:	20 ff       	sbrs	r18, 0
    173a:	0c c0       	rjmp	.+24     	; 0x1754 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    173c:	2a 01       	movw	r4, r20
    173e:	f2 e0       	ldi	r31, 0x02	; 2
    1740:	4f 0e       	add	r4, r31
    1742:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1744:	84 15       	cp	r24, r4
    1746:	95 05       	cpc	r25, r5
    1748:	58 f4       	brcc	.+22     	; 0x1760 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    174a:	1e 82       	std	Y+6, r1	; 0x06
    174c:	1f 82       	std	Y+7, r1	; 0x07
    174e:	18 86       	std	Y+8, r1	; 0x08
    1750:	19 86       	std	Y+9, r1	; 0x09
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1754:	84 17       	cp	r24, r20
    1756:	95 07       	cpc	r25, r21
    1758:	10 f0       	brcs	.+4      	; 0x175e <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    175a:	2a 01       	movw	r4, r20
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    175e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1760:	8e 81       	ldd	r24, Y+6	; 0x06
    1762:	9f 81       	ldd	r25, Y+7	; 0x07
    1764:	a8 85       	ldd	r26, Y+8	; 0x08
    1766:	b9 85       	ldd	r27, Y+9	; 0x09
    1768:	89 2b       	or	r24, r25
    176a:	8a 2b       	or	r24, r26
    176c:	8b 2b       	or	r24, r27
    176e:	09 f4       	brne	.+2      	; 0x1772 <xStreamBufferSend+0x88>
    1770:	38 c0       	rjmp	.+112    	; 0x17e2 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1772:	ce 01       	movw	r24, r28
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	0e 94 8a 14 	call	0x2914	; 0x2914 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1780:	c4 01       	movw	r24, r8
    1782:	a1 df       	rcall	.-190    	; 0x16c6 <xStreamBufferSpacesAvailable>
    1784:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1786:	84 15       	cp	r24, r4
    1788:	95 05       	cpc	r25, r5
    178a:	40 f5       	brcc	.+80     	; 0x17dc <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 74 19 	call	0x32e8	; 0x32e8 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1796:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <xTaskGetCurrentTaskHandle>
    179a:	f4 01       	movw	r30, r8
    179c:	93 87       	std	Z+11, r25	; 0x0b
    179e:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    17a4:	ae 80       	ldd	r10, Y+6	; 0x06
    17a6:	bf 80       	ldd	r11, Y+7	; 0x07
    17a8:	c8 84       	ldd	r12, Y+8	; 0x08
    17aa:	d9 84       	ldd	r13, Y+9	; 0x09
    17ac:	e1 2c       	mov	r14, r1
    17ae:	f1 2c       	mov	r15, r1
    17b0:	00 e0       	ldi	r16, 0x00	; 0
    17b2:	10 e0       	ldi	r17, 0x00	; 0
    17b4:	98 01       	movw	r18, r16
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	ba 01       	movw	r22, r20
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    17c2:	f4 01       	movw	r30, r8
    17c4:	13 86       	std	Z+11, r1	; 0x0b
    17c6:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    17c8:	be 01       	movw	r22, r28
    17ca:	6a 5f       	subi	r22, 0xFA	; 250
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	ce 01       	movw	r24, r28
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	0e 94 b1 14 	call	0x2962	; 0x2962 <xTaskCheckForTimeOut>
    17d6:	88 23       	and	r24, r24
    17d8:	81 f2       	breq	.-96     	; 0x177a <xStreamBufferSend+0x90>
    17da:	05 c0       	rjmp	.+10     	; 0x17e6 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
                    break;
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    17e2:	61 2c       	mov	r6, r1
    17e4:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    17e6:	61 14       	cp	r6, r1
    17e8:	71 04       	cpc	r7, r1
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17ec:	c4 01       	movw	r24, r8
    17ee:	6b df       	rcall	.-298    	; 0x16c6 <xStreamBufferSpacesAvailable>
    17f0:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    17f2:	82 01       	movw	r16, r4
    17f4:	93 01       	movw	r18, r6
    17f6:	a1 01       	movw	r20, r2
    17f8:	6a 85       	ldd	r22, Y+10	; 0x0a
    17fa:	7b 85       	ldd	r23, Y+11	; 0x0b
    17fc:	c4 01       	movw	r24, r8
    17fe:	3c de       	rcall	.-904    	; 0x1478 <prvWriteMessageToBuffer>
    1800:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1802:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1804:	e9 f0       	breq	.+58     	; 0x1840 <xStreamBufferSend+0x156>
    1806:	c4 01       	movw	r24, r8
    1808:	cb dd       	rcall	.-1130   	; 0x13a0 <prvBytesInBuffer>
    180a:	f4 01       	movw	r30, r8
    180c:	26 81       	ldd	r18, Z+6	; 0x06
    180e:	37 81       	ldd	r19, Z+7	; 0x07
    1810:	82 17       	cp	r24, r18
    1812:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1814:	a8 f0       	brcs	.+42     	; 0x1840 <xStreamBufferSend+0x156>
    1816:	91 d3       	rcall	.+1826   	; 0x1f3a <vTaskSuspendAll>
    1818:	f4 01       	movw	r30, r8
    181a:	80 85       	ldd	r24, Z+8	; 0x08
    181c:	91 85       	ldd	r25, Z+9	; 0x09
    181e:	89 2b       	or	r24, r25
    1820:	71 f0       	breq	.+28     	; 0x183e <xStreamBufferSend+0x154>
    1822:	80 85       	ldd	r24, Z+8	; 0x08
    1824:	91 85       	ldd	r25, Z+9	; 0x09
    1826:	e1 2c       	mov	r14, r1
    1828:	f1 2c       	mov	r15, r1
    182a:	00 e0       	ldi	r16, 0x00	; 0
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	a9 01       	movw	r20, r18
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <xTaskGenericNotify>
    1838:	f4 01       	movw	r30, r8
    183a:	11 86       	std	Z+9, r1	; 0x09
    183c:	10 86       	std	Z+8, r1	; 0x08
    183e:	bd d4       	rcall	.+2426   	; 0x21ba <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1840:	c6 01       	movw	r24, r12
    1842:	2b 96       	adiw	r28, 0x0b	; 11
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	ff 90       	pop	r15
    1858:	ef 90       	pop	r14
    185a:	df 90       	pop	r13
    185c:	cf 90       	pop	r12
    185e:	bf 90       	pop	r11
    1860:	af 90       	pop	r10
    1862:	9f 90       	pop	r9
    1864:	8f 90       	pop	r8
    1866:	7f 90       	pop	r7
    1868:	6f 90       	pop	r6
    186a:	5f 90       	pop	r5
    186c:	4f 90       	pop	r4
    186e:	3f 90       	pop	r3
    1870:	2f 90       	pop	r2
    1872:	08 95       	ret

00001874 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	ec 01       	movw	r28, r24
    188a:	7b 01       	movw	r14, r22
    188c:	5a 01       	movw	r10, r20
    188e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1890:	8e 85       	ldd	r24, Y+14	; 0x0e
    1892:	80 ff       	sbrs	r24, 0
    1894:	04 c0       	rjmp	.+8      	; 0x189e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1896:	8a 01       	movw	r16, r20
    1898:	0e 5f       	subi	r16, 0xFE	; 254
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    189e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    18a0:	ce 01       	movw	r24, r28
    18a2:	11 df       	rcall	.-478    	; 0x16c6 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    18a4:	9c 01       	movw	r18, r24
    18a6:	a5 01       	movw	r20, r10
    18a8:	b7 01       	movw	r22, r14
    18aa:	ce 01       	movw	r24, r28
    18ac:	e5 dd       	rcall	.-1078   	; 0x1478 <prvWriteMessageToBuffer>
    18ae:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    18b0:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    18b2:	c1 f0       	breq	.+48     	; 0x18e4 <xStreamBufferSendFromISR+0x70>
    18b4:	ce 01       	movw	r24, r28
    18b6:	74 dd       	rcall	.-1304   	; 0x13a0 <prvBytesInBuffer>
    18b8:	2e 81       	ldd	r18, Y+6	; 0x06
    18ba:	3f 81       	ldd	r19, Y+7	; 0x07
    18bc:	82 17       	cp	r24, r18
    18be:	93 07       	cpc	r25, r19
    18c0:	88 f0       	brcs	.+34     	; 0x18e4 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    18c2:	88 85       	ldd	r24, Y+8	; 0x08
    18c4:	99 85       	ldd	r25, Y+9	; 0x09
    18c6:	89 2b       	or	r24, r25
    18c8:	69 f0       	breq	.+26     	; 0x18e4 <xStreamBufferSendFromISR+0x70>
    18ca:	88 85       	ldd	r24, Y+8	; 0x08
    18cc:	99 85       	ldd	r25, Y+9	; 0x09
    18ce:	e1 2c       	mov	r14, r1
    18d0:	f1 2c       	mov	r15, r1
    18d2:	00 e0       	ldi	r16, 0x00	; 0
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	a9 01       	movw	r20, r18
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	0e 94 52 18 	call	0x30a4	; 0x30a4 <xTaskGenericNotifyFromISR>
    18e0:	19 86       	std	Y+9, r1	; 0x09
    18e2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    18e4:	c5 01       	movw	r24, r10
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	af 90       	pop	r10
    18fa:	08 95       	ret

000018fc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    18fc:	4f 92       	push	r4
    18fe:	5f 92       	push	r5
    1900:	6f 92       	push	r6
    1902:	7f 92       	push	r7
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	ec 01       	movw	r28, r24
    191e:	2b 01       	movw	r4, r22
    1920:	3a 01       	movw	r6, r20
    1922:	58 01       	movw	r10, r16
    1924:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1926:	8e 85       	ldd	r24, Y+14	; 0x0e
    1928:	80 ff       	sbrs	r24, 0
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    192c:	68 94       	set
    192e:	88 24       	eor	r8, r8
    1930:	81 f8       	bld	r8, 1
    1932:	91 2c       	mov	r9, r1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1936:	81 2c       	mov	r8, r1
    1938:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    193a:	a1 14       	cp	r10, r1
    193c:	b1 04       	cpc	r11, r1
    193e:	c1 04       	cpc	r12, r1
    1940:	d1 04       	cpc	r13, r1
    1942:	41 f1       	breq	.+80     	; 0x1994 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    194a:	ce 01       	movw	r24, r28
    194c:	29 dd       	rcall	.-1454   	; 0x13a0 <prvBytesInBuffer>
    194e:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1950:	88 16       	cp	r8, r24
    1952:	99 06       	cpc	r9, r25
    1954:	48 f0       	brcs	.+18     	; 0x1968 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1960:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <xTaskGetCurrentTaskHandle>
    1964:	99 87       	std	Y+9, r25	; 0x09
    1966:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    196c:	8e 14       	cp	r8, r14
    196e:	9f 04       	cpc	r9, r15
    1970:	a0 f0       	brcs	.+40     	; 0x199a <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1972:	e1 2c       	mov	r14, r1
    1974:	f1 2c       	mov	r15, r1
    1976:	00 e0       	ldi	r16, 0x00	; 0
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	98 01       	movw	r18, r16
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	ba 01       	movw	r22, r20
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1988:	19 86       	std	Y+9, r1	; 0x09
    198a:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    198c:	ce 01       	movw	r24, r28
    198e:	08 dd       	rcall	.-1520   	; 0x13a0 <prvBytesInBuffer>
    1990:	7c 01       	movw	r14, r24
    1992:	03 c0       	rjmp	.+6      	; 0x199a <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1994:	ce 01       	movw	r24, r28
    1996:	04 dd       	rcall	.-1528   	; 0x13a0 <prvBytesInBuffer>
    1998:	7c 01       	movw	r14, r24
    199a:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    199c:	9f 04       	cpc	r9, r15
    199e:	e8 f4       	brcc	.+58     	; 0x19da <xStreamBufferReceive+0xde>
    19a0:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    19a2:	97 01       	movw	r18, r14
    19a4:	a3 01       	movw	r20, r6
    19a6:	b2 01       	movw	r22, r4
    19a8:	ce 01       	movw	r24, r28
    19aa:	f8 dd       	rcall	.-1040   	; 0x159c <prvReadMessageFromBuffer>
    19ac:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    19ae:	89 2b       	or	r24, r25
    19b0:	b1 f0       	breq	.+44     	; 0x19de <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    19b2:	c3 d2       	rcall	.+1414   	; 0x1f3a <vTaskSuspendAll>
    19b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    19b8:	89 2b       	or	r24, r25
    19ba:	69 f0       	breq	.+26     	; 0x19d6 <xStreamBufferReceive+0xda>
    19bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19be:	9b 85       	ldd	r25, Y+11	; 0x0b
    19c0:	e1 2c       	mov	r14, r1
    19c2:	f1 2c       	mov	r15, r1
    19c4:	00 e0       	ldi	r16, 0x00	; 0
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	a9 01       	movw	r20, r18
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <xTaskGenericNotify>
    19d2:	1b 86       	std	Y+11, r1	; 0x0b
    19d4:	1a 86       	std	Y+10, r1	; 0x0a
    19d6:	f1 d3       	rcall	.+2018   	; 0x21ba <xTaskResumeAll>
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <xStreamBufferReceive+0xe2>
    19da:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    19dc:	d1 2c       	mov	r13, r1
    19de:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	9f 90       	pop	r9
    19f6:	8f 90       	pop	r8
    19f8:	7f 90       	pop	r7
    19fa:	6f 90       	pop	r6
    19fc:	5f 90       	pop	r5
    19fe:	4f 90       	pop	r4
    1a00:	08 95       	ret

00001a02 <prvResetNextTaskUnblockTime>:
    1a02:	e0 91 6f 12 	lds	r30, 0x126F	; 0x80126f <pxDelayedTaskList>
    1a06:	f0 91 70 12 	lds	r31, 0x1270	; 0x801270 <pxDelayedTaskList+0x1>
    1a0a:	80 81       	ld	r24, Z
    1a0c:	81 11       	cpse	r24, r1
    1a0e:	0c c0       	rjmp	.+24     	; 0x1a28 <prvResetNextTaskUnblockTime+0x26>
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
    1a14:	dc 01       	movw	r26, r24
    1a16:	80 93 39 12 	sts	0x1239, r24	; 0x801239 <xNextTaskUnblockTime>
    1a1a:	90 93 3a 12 	sts	0x123A, r25	; 0x80123a <xNextTaskUnblockTime+0x1>
    1a1e:	a0 93 3b 12 	sts	0x123B, r26	; 0x80123b <xNextTaskUnblockTime+0x2>
    1a22:	b0 93 3c 12 	sts	0x123C, r27	; 0x80123c <xNextTaskUnblockTime+0x3>
    1a26:	08 95       	ret
    1a28:	e0 91 6f 12 	lds	r30, 0x126F	; 0x80126f <pxDelayedTaskList>
    1a2c:	f0 91 70 12 	lds	r31, 0x1270	; 0x801270 <pxDelayedTaskList+0x1>
    1a30:	07 80       	ldd	r0, Z+7	; 0x07
    1a32:	f0 85       	ldd	r31, Z+8	; 0x08
    1a34:	e0 2d       	mov	r30, r0
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a3c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a3e:	80 93 39 12 	sts	0x1239, r24	; 0x801239 <xNextTaskUnblockTime>
    1a42:	90 93 3a 12 	sts	0x123A, r25	; 0x80123a <xNextTaskUnblockTime+0x1>
    1a46:	a0 93 3b 12 	sts	0x123B, r26	; 0x80123b <xNextTaskUnblockTime+0x2>
    1a4a:	b0 93 3c 12 	sts	0x123C, r27	; 0x80123c <xNextTaskUnblockTime+0x3>
    1a4e:	08 95       	ret

00001a50 <prvDeleteTCB>:
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	ec 01       	movw	r28, r24
    1a56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a5a:	0e 94 84 04 	call	0x908	; 0x908 <vPortFree>
    1a5e:	ce 01       	movw	r24, r28
    1a60:	0e 94 84 04 	call	0x908	; 0x908 <vPortFree>
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <prvInitialiseNewTask>:
    1a6a:	4f 92       	push	r4
    1a6c:	5f 92       	push	r5
    1a6e:	6f 92       	push	r6
    1a70:	7f 92       	push	r7
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	2c 01       	movw	r4, r24
    1a8a:	5b 01       	movw	r10, r22
    1a8c:	4a 01       	movw	r8, r20
    1a8e:	39 01       	movw	r6, r18
    1a90:	e6 01       	movw	r28, r12
    1a92:	65 ea       	ldi	r22, 0xA5	; 165
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9a:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <memset>
    1a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa2:	21 e0       	ldi	r18, 0x01	; 1
    1aa4:	82 1a       	sub	r8, r18
    1aa6:	91 08       	sbc	r9, r1
    1aa8:	88 0e       	add	r8, r24
    1aaa:	99 1e       	adc	r9, r25
    1aac:	a1 14       	cp	r10, r1
    1aae:	b1 04       	cpc	r11, r1
    1ab0:	89 f4       	brne	.+34     	; 0x1ad4 <prvInitialiseNewTask+0x6a>
    1ab2:	15 c0       	rjmp	.+42     	; 0x1ade <prvInitialiseNewTask+0x74>
    1ab4:	82 2f       	mov	r24, r18
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	f5 01       	movw	r30, r10
    1aba:	e8 0f       	add	r30, r24
    1abc:	f9 1f       	adc	r31, r25
    1abe:	30 81       	ld	r19, Z
    1ac0:	de 01       	movw	r26, r28
    1ac2:	a8 0f       	add	r26, r24
    1ac4:	b9 1f       	adc	r27, r25
    1ac6:	5d 96       	adiw	r26, 0x1d	; 29
    1ac8:	3c 93       	st	X, r19
    1aca:	80 81       	ld	r24, Z
    1acc:	88 23       	and	r24, r24
    1ace:	29 f0       	breq	.+10     	; 0x1ada <prvInitialiseNewTask+0x70>
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	01 c0       	rjmp	.+2      	; 0x1ad6 <prvInitialiseNewTask+0x6c>
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	20 31       	cpi	r18, 0x10	; 16
    1ad8:	68 f3       	brcs	.-38     	; 0x1ab4 <prvInitialiseNewTask+0x4a>
    1ada:	1c a6       	std	Y+44, r1	; 0x2c
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <prvInitialiseNewTask+0x76>
    1ade:	1d 8e       	std	Y+29, r1	; 0x1d
    1ae0:	0a 30       	cpi	r16, 0x0A	; 10
    1ae2:	08 f0       	brcs	.+2      	; 0x1ae6 <prvInitialiseNewTask+0x7c>
    1ae4:	09 e0       	ldi	r16, 0x09	; 9
    1ae6:	0a 8f       	std	Y+26, r16	; 0x1a
    1ae8:	0d a7       	std	Y+45, r16	; 0x2d
    1aea:	1e a6       	std	Y+46, r1	; 0x2e
    1aec:	ce 01       	movw	r24, r28
    1aee:	02 96       	adiw	r24, 0x02	; 2
    1af0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <vListInitialiseItem>
    1af4:	ce 01       	movw	r24, r28
    1af6:	0e 96       	adiw	r24, 0x0e	; 14
    1af8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <vListInitialiseItem>
    1afc:	db 87       	std	Y+11, r29	; 0x0b
    1afe:	ca 87       	std	Y+10, r28	; 0x0a
    1b00:	8a e0       	ldi	r24, 0x0A	; 10
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e0       	ldi	r26, 0x00	; 0
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	80 1b       	sub	r24, r16
    1b0a:	91 09       	sbc	r25, r1
    1b0c:	a1 09       	sbc	r26, r1
    1b0e:	b1 09       	sbc	r27, r1
    1b10:	8e 87       	std	Y+14, r24	; 0x0e
    1b12:	9f 87       	std	Y+15, r25	; 0x0f
    1b14:	a8 8b       	std	Y+16, r26	; 0x10
    1b16:	b9 8b       	std	Y+17, r27	; 0x11
    1b18:	df 8b       	std	Y+23, r29	; 0x17
    1b1a:	ce 8b       	std	Y+22, r28	; 0x16
    1b1c:	84 e0       	ldi	r24, 0x04	; 4
    1b1e:	fe 01       	movw	r30, r28
    1b20:	bf 96       	adiw	r30, 0x2f	; 47
    1b22:	df 01       	movw	r26, r30
    1b24:	1d 92       	st	X+, r1
    1b26:	8a 95       	dec	r24
    1b28:	e9 f7       	brne	.-6      	; 0x1b24 <prvInitialiseNewTask+0xba>
    1b2a:	1b aa       	std	Y+51, r1	; 0x33
    1b2c:	a3 01       	movw	r20, r6
    1b2e:	b2 01       	movw	r22, r4
    1b30:	c4 01       	movw	r24, r8
    1b32:	0e 94 46 05 	call	0xa8c	; 0xa8c <pxPortInitialiseStack>
    1b36:	99 83       	std	Y+1, r25	; 0x01
    1b38:	88 83       	st	Y, r24
    1b3a:	e1 14       	cp	r14, r1
    1b3c:	f1 04       	cpc	r15, r1
    1b3e:	19 f0       	breq	.+6      	; 0x1b46 <prvInitialiseNewTask+0xdc>
    1b40:	f7 01       	movw	r30, r14
    1b42:	d1 83       	std	Z+1, r29	; 0x01
    1b44:	c0 83       	st	Z, r28
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	9f 90       	pop	r9
    1b5a:	8f 90       	pop	r8
    1b5c:	7f 90       	pop	r7
    1b5e:	6f 90       	pop	r6
    1b60:	5f 90       	pop	r5
    1b62:	4f 90       	pop	r4
    1b64:	08 95       	ret

00001b66 <prvInitialiseTaskLists>:
    1b66:	cf 93       	push	r28
    1b68:	c0 e0       	ldi	r28, 0x00	; 0
    1b6a:	09 c0       	rjmp	.+18     	; 0x1b7e <prvInitialiseTaskLists+0x18>
    1b6c:	2b e0       	ldi	r18, 0x0B	; 11
    1b6e:	c2 9f       	mul	r28, r18
    1b70:	c0 01       	movw	r24, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	89 57       	subi	r24, 0x79	; 121
    1b76:	9d 4e       	sbci	r25, 0xED	; 237
    1b78:	0e 94 c1 04 	call	0x982	; 0x982 <vListInitialise>
    1b7c:	cf 5f       	subi	r28, 0xFF	; 255
    1b7e:	ca 30       	cpi	r28, 0x0A	; 10
    1b80:	a8 f3       	brcs	.-22     	; 0x1b6c <prvInitialiseTaskLists+0x6>
    1b82:	8c e7       	ldi	r24, 0x7C	; 124
    1b84:	92 e1       	ldi	r25, 0x12	; 18
    1b86:	0e 94 c1 04 	call	0x982	; 0x982 <vListInitialise>
    1b8a:	81 e7       	ldi	r24, 0x71	; 113
    1b8c:	92 e1       	ldi	r25, 0x12	; 18
    1b8e:	0e 94 c1 04 	call	0x982	; 0x982 <vListInitialise>
    1b92:	82 e6       	ldi	r24, 0x62	; 98
    1b94:	92 e1       	ldi	r25, 0x12	; 18
    1b96:	0e 94 c1 04 	call	0x982	; 0x982 <vListInitialise>
    1b9a:	87 e5       	ldi	r24, 0x57	; 87
    1b9c:	92 e1       	ldi	r25, 0x12	; 18
    1b9e:	0e 94 c1 04 	call	0x982	; 0x982 <vListInitialise>
    1ba2:	8b e4       	ldi	r24, 0x4B	; 75
    1ba4:	92 e1       	ldi	r25, 0x12	; 18
    1ba6:	0e 94 c1 04 	call	0x982	; 0x982 <vListInitialise>
    1baa:	8c e7       	ldi	r24, 0x7C	; 124
    1bac:	92 e1       	ldi	r25, 0x12	; 18
    1bae:	90 93 70 12 	sts	0x1270, r25	; 0x801270 <pxDelayedTaskList+0x1>
    1bb2:	80 93 6f 12 	sts	0x126F, r24	; 0x80126f <pxDelayedTaskList>
    1bb6:	81 e7       	ldi	r24, 0x71	; 113
    1bb8:	92 e1       	ldi	r25, 0x12	; 18
    1bba:	90 93 6e 12 	sts	0x126E, r25	; 0x80126e <pxOverflowDelayedTaskList+0x1>
    1bbe:	80 93 6d 12 	sts	0x126D, r24	; 0x80126d <pxOverflowDelayedTaskList>
    1bc2:	cf 91       	pop	r28
    1bc4:	08 95       	ret

00001bc6 <prvAddNewTaskToReadyList>:
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	ec 01       	movw	r28, r24
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	0f 92       	push	r0
    1bd2:	80 91 4a 12 	lds	r24, 0x124A	; 0x80124a <uxCurrentNumberOfTasks>
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	80 93 4a 12 	sts	0x124A, r24	; 0x80124a <uxCurrentNumberOfTasks>
    1bdc:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1be0:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1be4:	89 2b       	or	r24, r25
    1be6:	51 f4       	brne	.+20     	; 0x1bfc <prvAddNewTaskToReadyList+0x36>
    1be8:	d0 93 f6 12 	sts	0x12F6, r29	; 0x8012f6 <pxCurrentTCB+0x1>
    1bec:	c0 93 f5 12 	sts	0x12F5, r28	; 0x8012f5 <pxCurrentTCB>
    1bf0:	80 91 4a 12 	lds	r24, 0x124A	; 0x80124a <uxCurrentNumberOfTasks>
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 f4       	brne	.+36     	; 0x1c1c <prvAddNewTaskToReadyList+0x56>
    1bf8:	b6 df       	rcall	.-148    	; 0x1b66 <prvInitialiseTaskLists>
    1bfa:	10 c0       	rjmp	.+32     	; 0x1c1c <prvAddNewTaskToReadyList+0x56>
    1bfc:	80 91 44 12 	lds	r24, 0x1244	; 0x801244 <xSchedulerRunning>
    1c00:	81 11       	cpse	r24, r1
    1c02:	0c c0       	rjmp	.+24     	; 0x1c1c <prvAddNewTaskToReadyList+0x56>
    1c04:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1c08:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1c0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c10:	89 17       	cp	r24, r25
    1c12:	20 f0       	brcs	.+8      	; 0x1c1c <prvAddNewTaskToReadyList+0x56>
    1c14:	d0 93 f6 12 	sts	0x12F6, r29	; 0x8012f6 <pxCurrentTCB+0x1>
    1c18:	c0 93 f5 12 	sts	0x12F5, r28	; 0x8012f5 <pxCurrentTCB>
    1c1c:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <uxTaskNumber>
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <uxTaskNumber>
    1c26:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c28:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    1c2c:	8e 17       	cp	r24, r30
    1c2e:	10 f4       	brcc	.+4      	; 0x1c34 <prvAddNewTaskToReadyList+0x6e>
    1c30:	e0 93 45 12 	sts	0x1245, r30	; 0x801245 <uxTopReadyPriority>
    1c34:	8b e0       	ldi	r24, 0x0B	; 11
    1c36:	8e 9f       	mul	r24, r30
    1c38:	f0 01       	movw	r30, r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	e9 57       	subi	r30, 0x79	; 121
    1c3e:	fd 4e       	sbci	r31, 0xED	; 237
    1c40:	01 80       	ldd	r0, Z+1	; 0x01
    1c42:	f2 81       	ldd	r31, Z+2	; 0x02
    1c44:	e0 2d       	mov	r30, r0
    1c46:	ff 83       	std	Y+7, r31	; 0x07
    1c48:	ee 83       	std	Y+6, r30	; 0x06
    1c4a:	26 81       	ldd	r18, Z+6	; 0x06
    1c4c:	37 81       	ldd	r19, Z+7	; 0x07
    1c4e:	39 87       	std	Y+9, r19	; 0x09
    1c50:	28 87       	std	Y+8, r18	; 0x08
    1c52:	a6 81       	ldd	r26, Z+6	; 0x06
    1c54:	b7 81       	ldd	r27, Z+7	; 0x07
    1c56:	9e 01       	movw	r18, r28
    1c58:	2e 5f       	subi	r18, 0xFE	; 254
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	15 96       	adiw	r26, 0x05	; 5
    1c5e:	3c 93       	st	X, r19
    1c60:	2e 93       	st	-X, r18
    1c62:	14 97       	sbiw	r26, 0x04	; 4
    1c64:	37 83       	std	Z+7, r19	; 0x07
    1c66:	26 83       	std	Z+6, r18	; 0x06
    1c68:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c6a:	8e 9f       	mul	r24, r30
    1c6c:	f0 01       	movw	r30, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	e9 57       	subi	r30, 0x79	; 121
    1c72:	fd 4e       	sbci	r31, 0xED	; 237
    1c74:	fd 87       	std	Y+13, r31	; 0x0d
    1c76:	ec 87       	std	Y+12, r30	; 0x0c
    1c78:	80 81       	ld	r24, Z
    1c7a:	8f 5f       	subi	r24, 0xFF	; 255
    1c7c:	80 83       	st	Z, r24
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	80 91 44 12 	lds	r24, 0x1244	; 0x801244 <xSchedulerRunning>
    1c86:	88 23       	and	r24, r24
    1c88:	51 f0       	breq	.+20     	; 0x1c9e <prvAddNewTaskToReadyList+0xd8>
    1c8a:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1c8e:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1c92:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c96:	98 17       	cp	r25, r24
    1c98:	10 f4       	brcc	.+4      	; 0x1c9e <prvAddNewTaskToReadyList+0xd8>
    1c9a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <prvCheckTasksWaitingTermination>:
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	1b c0       	rjmp	.+54     	; 0x1ce0 <prvCheckTasksWaitingTermination+0x3c>
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	0f 92       	push	r0
    1cb0:	e0 91 5e 12 	lds	r30, 0x125E	; 0x80125e <xTasksWaitingTermination+0x7>
    1cb4:	f0 91 5f 12 	lds	r31, 0x125F	; 0x80125f <xTasksWaitingTermination+0x8>
    1cb8:	c0 85       	ldd	r28, Z+8	; 0x08
    1cba:	d1 85       	ldd	r29, Z+9	; 0x09
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	02 96       	adiw	r24, 0x02	; 2
    1cc0:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
    1cc4:	80 91 4a 12 	lds	r24, 0x124A	; 0x80124a <uxCurrentNumberOfTasks>
    1cc8:	81 50       	subi	r24, 0x01	; 1
    1cca:	80 93 4a 12 	sts	0x124A, r24	; 0x80124a <uxCurrentNumberOfTasks>
    1cce:	80 91 56 12 	lds	r24, 0x1256	; 0x801256 <uxDeletedTasksWaitingCleanUp>
    1cd2:	81 50       	subi	r24, 0x01	; 1
    1cd4:	80 93 56 12 	sts	0x1256, r24	; 0x801256 <uxDeletedTasksWaitingCleanUp>
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	ce 01       	movw	r24, r28
    1cde:	b8 de       	rcall	.-656    	; 0x1a50 <prvDeleteTCB>
    1ce0:	80 91 56 12 	lds	r24, 0x1256	; 0x801256 <uxDeletedTasksWaitingCleanUp>
    1ce4:	81 11       	cpse	r24, r1
    1ce6:	e1 cf       	rjmp	.-62     	; 0x1caa <prvCheckTasksWaitingTermination+0x6>
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	08 95       	ret

00001cee <prvAddCurrentTaskToDelayedList>:
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	6b 01       	movw	r12, r22
    1d04:	7c 01       	movw	r14, r24
    1d06:	c4 2f       	mov	r28, r20
    1d08:	80 90 46 12 	lds	r8, 0x1246	; 0x801246 <xTickCount>
    1d0c:	90 90 47 12 	lds	r9, 0x1247	; 0x801247 <xTickCount+0x1>
    1d10:	a0 90 48 12 	lds	r10, 0x1248	; 0x801248 <xTickCount+0x2>
    1d14:	b0 90 49 12 	lds	r11, 0x1249	; 0x801249 <xTickCount+0x3>
    1d18:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1d1c:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1d20:	02 96       	adiw	r24, 0x02	; 2
    1d22:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	c8 16       	cp	r12, r24
    1d2a:	d8 06       	cpc	r13, r24
    1d2c:	e8 06       	cpc	r14, r24
    1d2e:	f8 06       	cpc	r15, r24
    1d30:	b1 f5       	brne	.+108    	; 0x1d9e <prvAddCurrentTaskToDelayedList+0xb0>
    1d32:	cc 23       	and	r28, r28
    1d34:	a1 f1       	breq	.+104    	; 0x1d9e <prvAddCurrentTaskToDelayedList+0xb0>
    1d36:	eb e4       	ldi	r30, 0x4B	; 75
    1d38:	f2 e1       	ldi	r31, 0x12	; 18
    1d3a:	a1 81       	ldd	r26, Z+1	; 0x01
    1d3c:	b2 81       	ldd	r27, Z+2	; 0x02
    1d3e:	c0 91 f5 12 	lds	r28, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1d42:	d0 91 f6 12 	lds	r29, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1d46:	bf 83       	std	Y+7, r27	; 0x07
    1d48:	ae 83       	std	Y+6, r26	; 0x06
    1d4a:	c0 91 f5 12 	lds	r28, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1d4e:	d0 91 f6 12 	lds	r29, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1d52:	16 96       	adiw	r26, 0x06	; 6
    1d54:	8d 91       	ld	r24, X+
    1d56:	9c 91       	ld	r25, X
    1d58:	17 97       	sbiw	r26, 0x07	; 7
    1d5a:	99 87       	std	Y+9, r25	; 0x09
    1d5c:	88 87       	std	Y+8, r24	; 0x08
    1d5e:	16 96       	adiw	r26, 0x06	; 6
    1d60:	cd 91       	ld	r28, X+
    1d62:	dc 91       	ld	r29, X
    1d64:	17 97       	sbiw	r26, 0x07	; 7
    1d66:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1d6a:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1d6e:	02 96       	adiw	r24, 0x02	; 2
    1d70:	9d 83       	std	Y+5, r25	; 0x05
    1d72:	8c 83       	std	Y+4, r24	; 0x04
    1d74:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1d78:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1d7c:	02 96       	adiw	r24, 0x02	; 2
    1d7e:	17 96       	adiw	r26, 0x07	; 7
    1d80:	9c 93       	st	X, r25
    1d82:	8e 93       	st	-X, r24
    1d84:	16 97       	sbiw	r26, 0x06	; 6
    1d86:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1d8a:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1d8e:	1d 96       	adiw	r26, 0x0d	; 13
    1d90:	fc 93       	st	X, r31
    1d92:	ee 93       	st	-X, r30
    1d94:	1c 97       	sbiw	r26, 0x0c	; 12
    1d96:	80 81       	ld	r24, Z
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	80 83       	st	Z, r24
    1d9c:	3f c0       	rjmp	.+126    	; 0x1e1c <prvAddCurrentTaskToDelayedList+0x12e>
    1d9e:	c8 0c       	add	r12, r8
    1da0:	d9 1c       	adc	r13, r9
    1da2:	ea 1c       	adc	r14, r10
    1da4:	fb 1c       	adc	r15, r11
    1da6:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1daa:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1dae:	c2 82       	std	Z+2, r12	; 0x02
    1db0:	d3 82       	std	Z+3, r13	; 0x03
    1db2:	e4 82       	std	Z+4, r14	; 0x04
    1db4:	f5 82       	std	Z+5, r15	; 0x05
    1db6:	c8 14       	cp	r12, r8
    1db8:	d9 04       	cpc	r13, r9
    1dba:	ea 04       	cpc	r14, r10
    1dbc:	fb 04       	cpc	r15, r11
    1dbe:	68 f4       	brcc	.+26     	; 0x1dda <prvAddCurrentTaskToDelayedList+0xec>
    1dc0:	60 91 f5 12 	lds	r22, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1dc4:	70 91 f6 12 	lds	r23, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1dc8:	80 91 6d 12 	lds	r24, 0x126D	; 0x80126d <pxOverflowDelayedTaskList>
    1dcc:	90 91 6e 12 	lds	r25, 0x126E	; 0x80126e <pxOverflowDelayedTaskList+0x1>
    1dd0:	6e 5f       	subi	r22, 0xFE	; 254
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vListInsert>
    1dd8:	21 c0       	rjmp	.+66     	; 0x1e1c <prvAddCurrentTaskToDelayedList+0x12e>
    1dda:	60 91 f5 12 	lds	r22, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    1dde:	70 91 f6 12 	lds	r23, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    1de2:	80 91 6f 12 	lds	r24, 0x126F	; 0x80126f <pxDelayedTaskList>
    1de6:	90 91 70 12 	lds	r25, 0x1270	; 0x801270 <pxDelayedTaskList+0x1>
    1dea:	6e 5f       	subi	r22, 0xFE	; 254
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vListInsert>
    1df2:	80 91 39 12 	lds	r24, 0x1239	; 0x801239 <xNextTaskUnblockTime>
    1df6:	90 91 3a 12 	lds	r25, 0x123A	; 0x80123a <xNextTaskUnblockTime+0x1>
    1dfa:	a0 91 3b 12 	lds	r26, 0x123B	; 0x80123b <xNextTaskUnblockTime+0x2>
    1dfe:	b0 91 3c 12 	lds	r27, 0x123C	; 0x80123c <xNextTaskUnblockTime+0x3>
    1e02:	c8 16       	cp	r12, r24
    1e04:	d9 06       	cpc	r13, r25
    1e06:	ea 06       	cpc	r14, r26
    1e08:	fb 06       	cpc	r15, r27
    1e0a:	40 f4       	brcc	.+16     	; 0x1e1c <prvAddCurrentTaskToDelayedList+0x12e>
    1e0c:	c0 92 39 12 	sts	0x1239, r12	; 0x801239 <xNextTaskUnblockTime>
    1e10:	d0 92 3a 12 	sts	0x123A, r13	; 0x80123a <xNextTaskUnblockTime+0x1>
    1e14:	e0 92 3b 12 	sts	0x123B, r14	; 0x80123b <xNextTaskUnblockTime+0x2>
    1e18:	f0 92 3c 12 	sts	0x123C, r15	; 0x80123c <xNextTaskUnblockTime+0x3>
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	df 90       	pop	r13
    1e26:	cf 90       	pop	r12
    1e28:	bf 90       	pop	r11
    1e2a:	af 90       	pop	r10
    1e2c:	9f 90       	pop	r9
    1e2e:	8f 90       	pop	r8
    1e30:	08 95       	ret

00001e32 <xTaskCreate>:
    1e32:	2f 92       	push	r2
    1e34:	3f 92       	push	r3
    1e36:	4f 92       	push	r4
    1e38:	5f 92       	push	r5
    1e3a:	6f 92       	push	r6
    1e3c:	7f 92       	push	r7
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	3c 01       	movw	r6, r24
    1e56:	1b 01       	movw	r2, r22
    1e58:	4a 01       	movw	r8, r20
    1e5a:	29 01       	movw	r4, r18
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <pvPortMalloc>
    1e62:	6c 01       	movw	r12, r24
    1e64:	89 2b       	or	r24, r25
    1e66:	71 f0       	breq	.+28     	; 0x1e84 <xTaskCreate+0x52>
    1e68:	84 e3       	ldi	r24, 0x34	; 52
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <pvPortMalloc>
    1e70:	ec 01       	movw	r28, r24
    1e72:	89 2b       	or	r24, r25
    1e74:	19 f0       	breq	.+6      	; 0x1e7c <xTaskCreate+0x4a>
    1e76:	dc 8e       	std	Y+28, r13	; 0x1c
    1e78:	cb 8e       	std	Y+27, r12	; 0x1b
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <xTaskCreate+0x56>
    1e7c:	c6 01       	movw	r24, r12
    1e7e:	0e 94 84 04 	call	0x908	; 0x908 <vPortFree>
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <xTaskCreate+0x56>
    1e84:	c0 e0       	ldi	r28, 0x00	; 0
    1e86:	d0 e0       	ldi	r29, 0x00	; 0
    1e88:	20 97       	sbiw	r28, 0x00	; 0
    1e8a:	61 f0       	breq	.+24     	; 0x1ea4 <xTaskCreate+0x72>
    1e8c:	a1 2c       	mov	r10, r1
    1e8e:	b1 2c       	mov	r11, r1
    1e90:	6e 01       	movw	r12, r28
    1e92:	92 01       	movw	r18, r4
    1e94:	a4 01       	movw	r20, r8
    1e96:	b1 01       	movw	r22, r2
    1e98:	c3 01       	movw	r24, r6
    1e9a:	e7 dd       	rcall	.-1074   	; 0x1a6a <prvInitialiseNewTask>
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	93 de       	rcall	.-730    	; 0x1bc6 <prvAddNewTaskToReadyList>
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <xTaskCreate+0x74>
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	0f 91       	pop	r16
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	df 90       	pop	r13
    1eb2:	cf 90       	pop	r12
    1eb4:	bf 90       	pop	r11
    1eb6:	af 90       	pop	r10
    1eb8:	9f 90       	pop	r9
    1eba:	8f 90       	pop	r8
    1ebc:	7f 90       	pop	r7
    1ebe:	6f 90       	pop	r6
    1ec0:	5f 90       	pop	r5
    1ec2:	4f 90       	pop	r4
    1ec4:	3f 90       	pop	r3
    1ec6:	2f 90       	pop	r2
    1ec8:	08 95       	ret

00001eca <vTaskStartScheduler>:
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	0f 2e       	mov	r0, r31
    1ed2:	f7 e3       	ldi	r31, 0x37	; 55
    1ed4:	ef 2e       	mov	r14, r31
    1ed6:	f2 e1       	ldi	r31, 0x12	; 18
    1ed8:	ff 2e       	mov	r15, r31
    1eda:	f0 2d       	mov	r31, r0
    1edc:	00 e0       	ldi	r16, 0x00	; 0
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 ec       	ldi	r20, 0xC0	; 192
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	61 ec       	ldi	r22, 0xC1	; 193
    1ee8:	72 e0       	ldi	r23, 0x02	; 2
    1eea:	8d ec       	ldi	r24, 0xCD	; 205
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a1 df       	rcall	.-190    	; 0x1e32 <xTaskCreate>
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	11 f4       	brne	.+4      	; 0x1ef8 <vTaskStartScheduler+0x2e>
    1ef4:	0e 94 18 1a 	call	0x3430	; 0x3430 <xTimerCreateTimerTask>
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	c9 f4       	brne	.+50     	; 0x1f2e <vTaskStartScheduler+0x64>
    1efc:	f8 94       	cli
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
    1f00:	9f ef       	ldi	r25, 0xFF	; 255
    1f02:	dc 01       	movw	r26, r24
    1f04:	80 93 39 12 	sts	0x1239, r24	; 0x801239 <xNextTaskUnblockTime>
    1f08:	90 93 3a 12 	sts	0x123A, r25	; 0x80123a <xNextTaskUnblockTime+0x1>
    1f0c:	a0 93 3b 12 	sts	0x123B, r26	; 0x80123b <xNextTaskUnblockTime+0x2>
    1f10:	b0 93 3c 12 	sts	0x123C, r27	; 0x80123c <xNextTaskUnblockTime+0x3>
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	80 93 44 12 	sts	0x1244, r24	; 0x801244 <xSchedulerRunning>
    1f1a:	10 92 46 12 	sts	0x1246, r1	; 0x801246 <xTickCount>
    1f1e:	10 92 47 12 	sts	0x1247, r1	; 0x801247 <xTickCount+0x1>
    1f22:	10 92 48 12 	sts	0x1248, r1	; 0x801248 <xTickCount+0x2>
    1f26:	10 92 49 12 	sts	0x1249, r1	; 0x801249 <xTickCount+0x3>
    1f2a:	0e 94 5d 05 	call	0xaba	; 0xaba <xPortStartScheduler>
    1f2e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1f32:	0f 91       	pop	r16
    1f34:	ff 90       	pop	r15
    1f36:	ef 90       	pop	r14
    1f38:	08 95       	ret

00001f3a <vTaskSuspendAll>:
    1f3a:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <uxSchedulerSuspended>
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <uxSchedulerSuspended>
    1f44:	08 95       	ret

00001f46 <xTaskGetTickCount>:
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	0f 92       	push	r0
    1f4c:	60 91 46 12 	lds	r22, 0x1246	; 0x801246 <xTickCount>
    1f50:	70 91 47 12 	lds	r23, 0x1247	; 0x801247 <xTickCount+0x1>
    1f54:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <xTickCount+0x2>
    1f58:	90 91 49 12 	lds	r25, 0x1249	; 0x801249 <xTickCount+0x3>
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	08 95       	ret

00001f62 <xTaskIncrementTick>:
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <uxSchedulerSuspended>
    1f72:	81 11       	cpse	r24, r1
    1f74:	05 c1       	rjmp	.+522    	; 0x2180 <__DATA_REGION_LENGTH__+0x180>
    1f76:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <xTickCount>
    1f7a:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <xTickCount+0x1>
    1f7e:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <xTickCount+0x2>
    1f82:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <xTickCount+0x3>
    1f86:	8f ef       	ldi	r24, 0xFF	; 255
    1f88:	c8 1a       	sub	r12, r24
    1f8a:	d8 0a       	sbc	r13, r24
    1f8c:	e8 0a       	sbc	r14, r24
    1f8e:	f8 0a       	sbc	r15, r24
    1f90:	c0 92 46 12 	sts	0x1246, r12	; 0x801246 <xTickCount>
    1f94:	d0 92 47 12 	sts	0x1247, r13	; 0x801247 <xTickCount+0x1>
    1f98:	e0 92 48 12 	sts	0x1248, r14	; 0x801248 <xTickCount+0x2>
    1f9c:	f0 92 49 12 	sts	0x1249, r15	; 0x801249 <xTickCount+0x3>
    1fa0:	c1 14       	cp	r12, r1
    1fa2:	d1 04       	cpc	r13, r1
    1fa4:	e1 04       	cpc	r14, r1
    1fa6:	f1 04       	cpc	r15, r1
    1fa8:	b1 f4       	brne	.+44     	; 0x1fd6 <xTaskIncrementTick+0x74>
    1faa:	80 91 6f 12 	lds	r24, 0x126F	; 0x80126f <pxDelayedTaskList>
    1fae:	90 91 70 12 	lds	r25, 0x1270	; 0x801270 <pxDelayedTaskList+0x1>
    1fb2:	20 91 6d 12 	lds	r18, 0x126D	; 0x80126d <pxOverflowDelayedTaskList>
    1fb6:	30 91 6e 12 	lds	r19, 0x126E	; 0x80126e <pxOverflowDelayedTaskList+0x1>
    1fba:	30 93 70 12 	sts	0x1270, r19	; 0x801270 <pxDelayedTaskList+0x1>
    1fbe:	20 93 6f 12 	sts	0x126F, r18	; 0x80126f <pxDelayedTaskList>
    1fc2:	90 93 6e 12 	sts	0x126E, r25	; 0x80126e <pxOverflowDelayedTaskList+0x1>
    1fc6:	80 93 6d 12 	sts	0x126D, r24	; 0x80126d <pxOverflowDelayedTaskList>
    1fca:	80 91 3e 12 	lds	r24, 0x123E	; 0x80123e <xNumOfOverflows>
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	80 93 3e 12 	sts	0x123E, r24	; 0x80123e <xNumOfOverflows>
    1fd4:	16 dd       	rcall	.-1492   	; 0x1a02 <prvResetNextTaskUnblockTime>
    1fd6:	80 91 39 12 	lds	r24, 0x1239	; 0x801239 <xNextTaskUnblockTime>
    1fda:	90 91 3a 12 	lds	r25, 0x123A	; 0x80123a <xNextTaskUnblockTime+0x1>
    1fde:	a0 91 3b 12 	lds	r26, 0x123B	; 0x80123b <xNextTaskUnblockTime+0x2>
    1fe2:	b0 91 3c 12 	lds	r27, 0x123C	; 0x80123c <xNextTaskUnblockTime+0x3>
    1fe6:	c8 16       	cp	r12, r24
    1fe8:	d9 06       	cpc	r13, r25
    1fea:	ea 06       	cpc	r14, r26
    1fec:	fb 06       	cpc	r15, r27
    1fee:	20 f4       	brcc	.+8      	; 0x1ff8 <xTaskIncrementTick+0x96>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	b2 c0       	rjmp	.+356    	; 0x2158 <__DATA_REGION_LENGTH__+0x158>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <xTaskIncrementTick+0x98>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	e0 91 6f 12 	lds	r30, 0x126F	; 0x80126f <pxDelayedTaskList>
    1ffe:	f0 91 70 12 	lds	r31, 0x1270	; 0x801270 <pxDelayedTaskList+0x1>
    2002:	90 81       	ld	r25, Z
    2004:	91 11       	cpse	r25, r1
    2006:	0c c0       	rjmp	.+24     	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    2008:	4f ef       	ldi	r20, 0xFF	; 255
    200a:	5f ef       	ldi	r21, 0xFF	; 255
    200c:	ba 01       	movw	r22, r20
    200e:	40 93 39 12 	sts	0x1239, r20	; 0x801239 <xNextTaskUnblockTime>
    2012:	50 93 3a 12 	sts	0x123A, r21	; 0x80123a <xNextTaskUnblockTime+0x1>
    2016:	60 93 3b 12 	sts	0x123B, r22	; 0x80123b <xNextTaskUnblockTime+0x2>
    201a:	70 93 3c 12 	sts	0x123C, r23	; 0x80123c <xNextTaskUnblockTime+0x3>
    201e:	9c c0       	rjmp	.+312    	; 0x2158 <__DATA_REGION_LENGTH__+0x158>
    2020:	e0 91 6f 12 	lds	r30, 0x126F	; 0x80126f <pxDelayedTaskList>
    2024:	f0 91 70 12 	lds	r31, 0x1270	; 0x801270 <pxDelayedTaskList+0x1>
    2028:	07 80       	ldd	r0, Z+7	; 0x07
    202a:	f0 85       	ldd	r31, Z+8	; 0x08
    202c:	e0 2d       	mov	r30, r0
    202e:	00 84       	ldd	r0, Z+8	; 0x08
    2030:	f1 85       	ldd	r31, Z+9	; 0x09
    2032:	e0 2d       	mov	r30, r0
    2034:	42 81       	ldd	r20, Z+2	; 0x02
    2036:	53 81       	ldd	r21, Z+3	; 0x03
    2038:	64 81       	ldd	r22, Z+4	; 0x04
    203a:	75 81       	ldd	r23, Z+5	; 0x05
    203c:	c4 16       	cp	r12, r20
    203e:	d5 06       	cpc	r13, r21
    2040:	e6 06       	cpc	r14, r22
    2042:	f7 06       	cpc	r15, r23
    2044:	48 f4       	brcc	.+18     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2046:	40 93 39 12 	sts	0x1239, r20	; 0x801239 <xNextTaskUnblockTime>
    204a:	50 93 3a 12 	sts	0x123A, r21	; 0x80123a <xNextTaskUnblockTime+0x1>
    204e:	60 93 3b 12 	sts	0x123B, r22	; 0x80123b <xNextTaskUnblockTime+0x2>
    2052:	70 93 3c 12 	sts	0x123C, r23	; 0x80123c <xNextTaskUnblockTime+0x3>
    2056:	80 c0       	rjmp	.+256    	; 0x2158 <__DATA_REGION_LENGTH__+0x158>
    2058:	a4 85       	ldd	r26, Z+12	; 0x0c
    205a:	b5 85       	ldd	r27, Z+13	; 0x0d
    205c:	c6 81       	ldd	r28, Z+6	; 0x06
    205e:	d7 81       	ldd	r29, Z+7	; 0x07
    2060:	20 85       	ldd	r18, Z+8	; 0x08
    2062:	31 85       	ldd	r19, Z+9	; 0x09
    2064:	3f 83       	std	Y+7, r19	; 0x07
    2066:	2e 83       	std	Y+6, r18	; 0x06
    2068:	c0 85       	ldd	r28, Z+8	; 0x08
    206a:	d1 85       	ldd	r29, Z+9	; 0x09
    206c:	26 81       	ldd	r18, Z+6	; 0x06
    206e:	37 81       	ldd	r19, Z+7	; 0x07
    2070:	3d 83       	std	Y+5, r19	; 0x05
    2072:	2c 83       	std	Y+4, r18	; 0x04
    2074:	11 96       	adiw	r26, 0x01	; 1
    2076:	4d 91       	ld	r20, X+
    2078:	5c 91       	ld	r21, X
    207a:	12 97       	sbiw	r26, 0x02	; 2
    207c:	9f 01       	movw	r18, r30
    207e:	2e 5f       	subi	r18, 0xFE	; 254
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	42 17       	cp	r20, r18
    2084:	53 07       	cpc	r21, r19
    2086:	31 f4       	brne	.+12     	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
    2088:	40 85       	ldd	r20, Z+8	; 0x08
    208a:	51 85       	ldd	r21, Z+9	; 0x09
    208c:	12 96       	adiw	r26, 0x02	; 2
    208e:	5c 93       	st	X, r21
    2090:	4e 93       	st	-X, r20
    2092:	11 97       	sbiw	r26, 0x01	; 1
    2094:	15 86       	std	Z+13, r1	; 0x0d
    2096:	14 86       	std	Z+12, r1	; 0x0c
    2098:	9c 91       	ld	r25, X
    209a:	91 50       	subi	r25, 0x01	; 1
    209c:	9c 93       	st	X, r25
    209e:	a0 8d       	ldd	r26, Z+24	; 0x18
    20a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    20a2:	10 97       	sbiw	r26, 0x00	; 0
    20a4:	09 f1       	breq	.+66     	; 0x20e8 <__DATA_REGION_LENGTH__+0xe8>
    20a6:	c2 89       	ldd	r28, Z+18	; 0x12
    20a8:	d3 89       	ldd	r29, Z+19	; 0x13
    20aa:	44 89       	ldd	r20, Z+20	; 0x14
    20ac:	55 89       	ldd	r21, Z+21	; 0x15
    20ae:	5f 83       	std	Y+7, r21	; 0x07
    20b0:	4e 83       	std	Y+6, r20	; 0x06
    20b2:	c4 89       	ldd	r28, Z+20	; 0x14
    20b4:	d5 89       	ldd	r29, Z+21	; 0x15
    20b6:	42 89       	ldd	r20, Z+18	; 0x12
    20b8:	53 89       	ldd	r21, Z+19	; 0x13
    20ba:	5d 83       	std	Y+5, r21	; 0x05
    20bc:	4c 83       	std	Y+4, r20	; 0x04
    20be:	11 96       	adiw	r26, 0x01	; 1
    20c0:	6d 91       	ld	r22, X+
    20c2:	7c 91       	ld	r23, X
    20c4:	12 97       	sbiw	r26, 0x02	; 2
    20c6:	af 01       	movw	r20, r30
    20c8:	42 5f       	subi	r20, 0xF2	; 242
    20ca:	5f 4f       	sbci	r21, 0xFF	; 255
    20cc:	64 17       	cp	r22, r20
    20ce:	75 07       	cpc	r23, r21
    20d0:	31 f4       	brne	.+12     	; 0x20de <__DATA_REGION_LENGTH__+0xde>
    20d2:	44 89       	ldd	r20, Z+20	; 0x14
    20d4:	55 89       	ldd	r21, Z+21	; 0x15
    20d6:	12 96       	adiw	r26, 0x02	; 2
    20d8:	5c 93       	st	X, r21
    20da:	4e 93       	st	-X, r20
    20dc:	11 97       	sbiw	r26, 0x01	; 1
    20de:	11 8e       	std	Z+25, r1	; 0x19
    20e0:	10 8e       	std	Z+24, r1	; 0x18
    20e2:	9c 91       	ld	r25, X
    20e4:	91 50       	subi	r25, 0x01	; 1
    20e6:	9c 93       	st	X, r25
    20e8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20ea:	90 91 45 12 	lds	r25, 0x1245	; 0x801245 <uxTopReadyPriority>
    20ee:	9a 17       	cp	r25, r26
    20f0:	10 f4       	brcc	.+4      	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
    20f2:	a0 93 45 12 	sts	0x1245, r26	; 0x801245 <uxTopReadyPriority>
    20f6:	9b e0       	ldi	r25, 0x0B	; 11
    20f8:	9a 9f       	mul	r25, r26
    20fa:	d0 01       	movw	r26, r0
    20fc:	11 24       	eor	r1, r1
    20fe:	a9 57       	subi	r26, 0x79	; 121
    2100:	bd 4e       	sbci	r27, 0xED	; 237
    2102:	11 96       	adiw	r26, 0x01	; 1
    2104:	0d 90       	ld	r0, X+
    2106:	bc 91       	ld	r27, X
    2108:	a0 2d       	mov	r26, r0
    210a:	b7 83       	std	Z+7, r27	; 0x07
    210c:	a6 83       	std	Z+6, r26	; 0x06
    210e:	16 96       	adiw	r26, 0x06	; 6
    2110:	4d 91       	ld	r20, X+
    2112:	5c 91       	ld	r21, X
    2114:	17 97       	sbiw	r26, 0x07	; 7
    2116:	51 87       	std	Z+9, r21	; 0x09
    2118:	40 87       	std	Z+8, r20	; 0x08
    211a:	16 96       	adiw	r26, 0x06	; 6
    211c:	cd 91       	ld	r28, X+
    211e:	dc 91       	ld	r29, X
    2120:	17 97       	sbiw	r26, 0x07	; 7
    2122:	3d 83       	std	Y+5, r19	; 0x05
    2124:	2c 83       	std	Y+4, r18	; 0x04
    2126:	17 96       	adiw	r26, 0x07	; 7
    2128:	3c 93       	st	X, r19
    212a:	2e 93       	st	-X, r18
    212c:	16 97       	sbiw	r26, 0x06	; 6
    212e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2130:	9a 9f       	mul	r25, r26
    2132:	d0 01       	movw	r26, r0
    2134:	11 24       	eor	r1, r1
    2136:	a9 57       	subi	r26, 0x79	; 121
    2138:	bd 4e       	sbci	r27, 0xED	; 237
    213a:	b5 87       	std	Z+13, r27	; 0x0d
    213c:	a4 87       	std	Z+12, r26	; 0x0c
    213e:	9c 91       	ld	r25, X
    2140:	9f 5f       	subi	r25, 0xFF	; 255
    2142:	9c 93       	st	X, r25
    2144:	22 8d       	ldd	r18, Z+26	; 0x1a
    2146:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    214a:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    214e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2150:	29 17       	cp	r18, r25
    2152:	08 f0       	brcs	.+2      	; 0x2156 <__DATA_REGION_LENGTH__+0x156>
    2154:	4f cf       	rjmp	.-354    	; 0x1ff4 <xTaskIncrementTick+0x92>
    2156:	51 cf       	rjmp	.-350    	; 0x1ffa <xTaskIncrementTick+0x98>
    2158:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    215c:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2160:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2162:	9b e0       	ldi	r25, 0x0B	; 11
    2164:	e9 9f       	mul	r30, r25
    2166:	f0 01       	movw	r30, r0
    2168:	11 24       	eor	r1, r1
    216a:	e9 57       	subi	r30, 0x79	; 121
    216c:	fd 4e       	sbci	r31, 0xED	; 237
    216e:	90 81       	ld	r25, Z
    2170:	92 30       	cpi	r25, 0x02	; 2
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__DATA_REGION_LENGTH__+0x176>
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 91 3f 12 	lds	r25, 0x123F	; 0x80123f <xYieldPending>
    217a:	91 11       	cpse	r25, r1
    217c:	16 c0       	rjmp	.+44     	; 0x21aa <__DATA_REGION_LENGTH__+0x1aa>
    217e:	16 c0       	rjmp	.+44     	; 0x21ac <__DATA_REGION_LENGTH__+0x1ac>
    2180:	80 91 40 12 	lds	r24, 0x1240	; 0x801240 <xPendedTicks>
    2184:	90 91 41 12 	lds	r25, 0x1241	; 0x801241 <xPendedTicks+0x1>
    2188:	a0 91 42 12 	lds	r26, 0x1242	; 0x801242 <xPendedTicks+0x2>
    218c:	b0 91 43 12 	lds	r27, 0x1243	; 0x801243 <xPendedTicks+0x3>
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	a1 1d       	adc	r26, r1
    2194:	b1 1d       	adc	r27, r1
    2196:	80 93 40 12 	sts	0x1240, r24	; 0x801240 <xPendedTicks>
    219a:	90 93 41 12 	sts	0x1241, r25	; 0x801241 <xPendedTicks+0x1>
    219e:	a0 93 42 12 	sts	0x1242, r26	; 0x801242 <xPendedTicks+0x2>
    21a2:	b0 93 43 12 	sts	0x1243, r27	; 0x801243 <xPendedTicks+0x3>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <__DATA_REGION_LENGTH__+0x1ac>
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	df 90       	pop	r13
    21b6:	cf 90       	pop	r12
    21b8:	08 95       	ret

000021ba <xTaskResumeAll>:
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	0f 92       	push	r0
    21cc:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <uxSchedulerSuspended>
    21d0:	81 50       	subi	r24, 0x01	; 1
    21d2:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <uxSchedulerSuspended>
    21d6:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <uxSchedulerSuspended>
    21da:	81 11       	cpse	r24, r1
    21dc:	be c0       	rjmp	.+380    	; 0x235a <__stack+0x15b>
    21de:	80 91 4a 12 	lds	r24, 0x124A	; 0x80124a <uxCurrentNumberOfTasks>
    21e2:	81 11       	cpse	r24, r1
    21e4:	88 c0       	rjmp	.+272    	; 0x22f6 <__stack+0xf7>
    21e6:	bc c0       	rjmp	.+376    	; 0x2360 <__stack+0x161>
    21e8:	e0 91 69 12 	lds	r30, 0x1269	; 0x801269 <xPendingReadyList+0x7>
    21ec:	f0 91 6a 12 	lds	r31, 0x126A	; 0x80126a <xPendingReadyList+0x8>
    21f0:	00 84       	ldd	r0, Z+8	; 0x08
    21f2:	f1 85       	ldd	r31, Z+9	; 0x09
    21f4:	e0 2d       	mov	r30, r0
    21f6:	a0 8d       	ldd	r26, Z+24	; 0x18
    21f8:	b1 8d       	ldd	r27, Z+25	; 0x19
    21fa:	c2 89       	ldd	r28, Z+18	; 0x12
    21fc:	d3 89       	ldd	r29, Z+19	; 0x13
    21fe:	84 89       	ldd	r24, Z+20	; 0x14
    2200:	95 89       	ldd	r25, Z+21	; 0x15
    2202:	9f 83       	std	Y+7, r25	; 0x07
    2204:	8e 83       	std	Y+6, r24	; 0x06
    2206:	c4 89       	ldd	r28, Z+20	; 0x14
    2208:	d5 89       	ldd	r29, Z+21	; 0x15
    220a:	82 89       	ldd	r24, Z+18	; 0x12
    220c:	93 89       	ldd	r25, Z+19	; 0x13
    220e:	9d 83       	std	Y+5, r25	; 0x05
    2210:	8c 83       	std	Y+4, r24	; 0x04
    2212:	11 96       	adiw	r26, 0x01	; 1
    2214:	2d 91       	ld	r18, X+
    2216:	3c 91       	ld	r19, X
    2218:	12 97       	sbiw	r26, 0x02	; 2
    221a:	cf 01       	movw	r24, r30
    221c:	0e 96       	adiw	r24, 0x0e	; 14
    221e:	28 17       	cp	r18, r24
    2220:	39 07       	cpc	r19, r25
    2222:	31 f4       	brne	.+12     	; 0x2230 <__stack+0x31>
    2224:	84 89       	ldd	r24, Z+20	; 0x14
    2226:	95 89       	ldd	r25, Z+21	; 0x15
    2228:	12 96       	adiw	r26, 0x02	; 2
    222a:	9c 93       	st	X, r25
    222c:	8e 93       	st	-X, r24
    222e:	11 97       	sbiw	r26, 0x01	; 1
    2230:	11 8e       	std	Z+25, r1	; 0x19
    2232:	10 8e       	std	Z+24, r1	; 0x18
    2234:	8c 91       	ld	r24, X
    2236:	81 50       	subi	r24, 0x01	; 1
    2238:	8c 93       	st	X, r24
    223a:	a4 85       	ldd	r26, Z+12	; 0x0c
    223c:	b5 85       	ldd	r27, Z+13	; 0x0d
    223e:	c6 81       	ldd	r28, Z+6	; 0x06
    2240:	d7 81       	ldd	r29, Z+7	; 0x07
    2242:	80 85       	ldd	r24, Z+8	; 0x08
    2244:	91 85       	ldd	r25, Z+9	; 0x09
    2246:	9f 83       	std	Y+7, r25	; 0x07
    2248:	8e 83       	std	Y+6, r24	; 0x06
    224a:	c0 85       	ldd	r28, Z+8	; 0x08
    224c:	d1 85       	ldd	r29, Z+9	; 0x09
    224e:	86 81       	ldd	r24, Z+6	; 0x06
    2250:	97 81       	ldd	r25, Z+7	; 0x07
    2252:	9d 83       	std	Y+5, r25	; 0x05
    2254:	8c 83       	std	Y+4, r24	; 0x04
    2256:	11 96       	adiw	r26, 0x01	; 1
    2258:	8d 91       	ld	r24, X+
    225a:	9c 91       	ld	r25, X
    225c:	12 97       	sbiw	r26, 0x02	; 2
    225e:	9f 01       	movw	r18, r30
    2260:	2e 5f       	subi	r18, 0xFE	; 254
    2262:	3f 4f       	sbci	r19, 0xFF	; 255
    2264:	82 17       	cp	r24, r18
    2266:	93 07       	cpc	r25, r19
    2268:	31 f4       	brne	.+12     	; 0x2276 <__stack+0x77>
    226a:	80 85       	ldd	r24, Z+8	; 0x08
    226c:	91 85       	ldd	r25, Z+9	; 0x09
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	9c 93       	st	X, r25
    2272:	8e 93       	st	-X, r24
    2274:	11 97       	sbiw	r26, 0x01	; 1
    2276:	15 86       	std	Z+13, r1	; 0x0d
    2278:	14 86       	std	Z+12, r1	; 0x0c
    227a:	8c 91       	ld	r24, X
    227c:	81 50       	subi	r24, 0x01	; 1
    227e:	8c 93       	st	X, r24
    2280:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2282:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    2286:	8a 17       	cp	r24, r26
    2288:	10 f4       	brcc	.+4      	; 0x228e <__stack+0x8f>
    228a:	a0 93 45 12 	sts	0x1245, r26	; 0x801245 <uxTopReadyPriority>
    228e:	8b e0       	ldi	r24, 0x0B	; 11
    2290:	8a 9f       	mul	r24, r26
    2292:	d0 01       	movw	r26, r0
    2294:	11 24       	eor	r1, r1
    2296:	a9 57       	subi	r26, 0x79	; 121
    2298:	bd 4e       	sbci	r27, 0xED	; 237
    229a:	11 96       	adiw	r26, 0x01	; 1
    229c:	0d 90       	ld	r0, X+
    229e:	bc 91       	ld	r27, X
    22a0:	a0 2d       	mov	r26, r0
    22a2:	b7 83       	std	Z+7, r27	; 0x07
    22a4:	a6 83       	std	Z+6, r26	; 0x06
    22a6:	16 96       	adiw	r26, 0x06	; 6
    22a8:	4d 91       	ld	r20, X+
    22aa:	5c 91       	ld	r21, X
    22ac:	17 97       	sbiw	r26, 0x07	; 7
    22ae:	51 87       	std	Z+9, r21	; 0x09
    22b0:	40 87       	std	Z+8, r20	; 0x08
    22b2:	16 96       	adiw	r26, 0x06	; 6
    22b4:	cd 91       	ld	r28, X+
    22b6:	dc 91       	ld	r29, X
    22b8:	17 97       	sbiw	r26, 0x07	; 7
    22ba:	3d 83       	std	Y+5, r19	; 0x05
    22bc:	2c 83       	std	Y+4, r18	; 0x04
    22be:	17 96       	adiw	r26, 0x07	; 7
    22c0:	3c 93       	st	X, r19
    22c2:	2e 93       	st	-X, r18
    22c4:	16 97       	sbiw	r26, 0x06	; 6
    22c6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22c8:	8a 9f       	mul	r24, r26
    22ca:	d0 01       	movw	r26, r0
    22cc:	11 24       	eor	r1, r1
    22ce:	a9 57       	subi	r26, 0x79	; 121
    22d0:	bd 4e       	sbci	r27, 0xED	; 237
    22d2:	b5 87       	std	Z+13, r27	; 0x0d
    22d4:	a4 87       	std	Z+12, r26	; 0x0c
    22d6:	8c 91       	ld	r24, X
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	8c 93       	st	X, r24
    22dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    22de:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    22e2:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    22e6:	5a 96       	adiw	r26, 0x1a	; 26
    22e8:	8c 91       	ld	r24, X
    22ea:	98 17       	cp	r25, r24
    22ec:	30 f0       	brcs	.+12     	; 0x22fa <__stack+0xfb>
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <xYieldPending>
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <__stack+0xfb>
    22f6:	e0 e0       	ldi	r30, 0x00	; 0
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 91 62 12 	lds	r24, 0x1262	; 0x801262 <xPendingReadyList>
    22fe:	81 11       	cpse	r24, r1
    2300:	73 cf       	rjmp	.-282    	; 0x21e8 <xTaskResumeAll+0x2e>
    2302:	ef 2b       	or	r30, r31
    2304:	09 f0       	breq	.+2      	; 0x2308 <__stack+0x109>
    2306:	7d db       	rcall	.-2310   	; 0x1a02 <prvResetNextTaskUnblockTime>
    2308:	c0 90 40 12 	lds	r12, 0x1240	; 0x801240 <xPendedTicks>
    230c:	d0 90 41 12 	lds	r13, 0x1241	; 0x801241 <xPendedTicks+0x1>
    2310:	e0 90 42 12 	lds	r14, 0x1242	; 0x801242 <xPendedTicks+0x2>
    2314:	f0 90 43 12 	lds	r15, 0x1243	; 0x801243 <xPendedTicks+0x3>
    2318:	c1 14       	cp	r12, r1
    231a:	d1 04       	cpc	r13, r1
    231c:	e1 04       	cpc	r14, r1
    231e:	f1 04       	cpc	r15, r1
    2320:	a1 f0       	breq	.+40     	; 0x234a <__stack+0x14b>
    2322:	1f de       	rcall	.-962    	; 0x1f62 <xTaskIncrementTick>
    2324:	88 23       	and	r24, r24
    2326:	19 f0       	breq	.+6      	; 0x232e <__stack+0x12f>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <xYieldPending>
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	c8 1a       	sub	r12, r24
    2332:	d1 08       	sbc	r13, r1
    2334:	e1 08       	sbc	r14, r1
    2336:	f1 08       	sbc	r15, r1
    2338:	a1 f7       	brne	.-24     	; 0x2322 <__stack+0x123>
    233a:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <xPendedTicks>
    233e:	10 92 41 12 	sts	0x1241, r1	; 0x801241 <xPendedTicks+0x1>
    2342:	10 92 42 12 	sts	0x1242, r1	; 0x801242 <xPendedTicks+0x2>
    2346:	10 92 43 12 	sts	0x1243, r1	; 0x801243 <xPendedTicks+0x3>
    234a:	80 91 3f 12 	lds	r24, 0x123F	; 0x80123f <xYieldPending>
    234e:	88 23       	and	r24, r24
    2350:	31 f0       	breq	.+12     	; 0x235e <__stack+0x15f>
    2352:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	03 c0       	rjmp	.+6      	; 0x2360 <__stack+0x161>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <__stack+0x161>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	0f 90       	pop	r0
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	ff 90       	pop	r15
    236a:	ef 90       	pop	r14
    236c:	df 90       	pop	r13
    236e:	cf 90       	pop	r12
    2370:	08 95       	ret

00002372 <xTaskDelayUntil>:
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	ec 01       	movw	r28, r24
    238a:	6a 01       	movw	r12, r20
    238c:	7b 01       	movw	r14, r22
    238e:	d5 dd       	rcall	.-1110   	; 0x1f3a <vTaskSuspendAll>
    2390:	80 90 46 12 	lds	r8, 0x1246	; 0x801246 <xTickCount>
    2394:	90 90 47 12 	lds	r9, 0x1247	; 0x801247 <xTickCount+0x1>
    2398:	a0 90 48 12 	lds	r10, 0x1248	; 0x801248 <xTickCount+0x2>
    239c:	b0 90 49 12 	lds	r11, 0x1249	; 0x801249 <xTickCount+0x3>
    23a0:	88 81       	ld	r24, Y
    23a2:	99 81       	ldd	r25, Y+1	; 0x01
    23a4:	aa 81       	ldd	r26, Y+2	; 0x02
    23a6:	bb 81       	ldd	r27, Y+3	; 0x03
    23a8:	ac 01       	movw	r20, r24
    23aa:	bd 01       	movw	r22, r26
    23ac:	4c 0d       	add	r20, r12
    23ae:	5d 1d       	adc	r21, r13
    23b0:	6e 1d       	adc	r22, r14
    23b2:	7f 1d       	adc	r23, r15
    23b4:	88 16       	cp	r8, r24
    23b6:	99 06       	cpc	r9, r25
    23b8:	aa 06       	cpc	r10, r26
    23ba:	bb 06       	cpc	r11, r27
    23bc:	60 f4       	brcc	.+24     	; 0x23d6 <xTaskDelayUntil+0x64>
    23be:	48 17       	cp	r20, r24
    23c0:	59 07       	cpc	r21, r25
    23c2:	6a 07       	cpc	r22, r26
    23c4:	7b 07       	cpc	r23, r27
    23c6:	98 f4       	brcc	.+38     	; 0x23ee <xTaskDelayUntil+0x7c>
    23c8:	84 16       	cp	r8, r20
    23ca:	95 06       	cpc	r9, r21
    23cc:	a6 06       	cpc	r10, r22
    23ce:	b7 06       	cpc	r11, r23
    23d0:	80 f0       	brcs	.+32     	; 0x23f2 <xTaskDelayUntil+0x80>
    23d2:	10 e0       	ldi	r17, 0x00	; 0
    23d4:	13 c0       	rjmp	.+38     	; 0x23fc <xTaskDelayUntil+0x8a>
    23d6:	48 17       	cp	r20, r24
    23d8:	59 07       	cpc	r21, r25
    23da:	6a 07       	cpc	r22, r26
    23dc:	7b 07       	cpc	r23, r27
    23de:	58 f0       	brcs	.+22     	; 0x23f6 <xTaskDelayUntil+0x84>
    23e0:	84 16       	cp	r8, r20
    23e2:	95 06       	cpc	r9, r21
    23e4:	a6 06       	cpc	r10, r22
    23e6:	b7 06       	cpc	r11, r23
    23e8:	40 f0       	brcs	.+16     	; 0x23fa <xTaskDelayUntil+0x88>
    23ea:	10 e0       	ldi	r17, 0x00	; 0
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <xTaskDelayUntil+0x8a>
    23ee:	10 e0       	ldi	r17, 0x00	; 0
    23f0:	05 c0       	rjmp	.+10     	; 0x23fc <xTaskDelayUntil+0x8a>
    23f2:	11 e0       	ldi	r17, 0x01	; 1
    23f4:	03 c0       	rjmp	.+6      	; 0x23fc <xTaskDelayUntil+0x8a>
    23f6:	11 e0       	ldi	r17, 0x01	; 1
    23f8:	01 c0       	rjmp	.+2      	; 0x23fc <xTaskDelayUntil+0x8a>
    23fa:	11 e0       	ldi	r17, 0x01	; 1
    23fc:	48 83       	st	Y, r20
    23fe:	59 83       	std	Y+1, r21	; 0x01
    2400:	6a 83       	std	Y+2, r22	; 0x02
    2402:	7b 83       	std	Y+3, r23	; 0x03
    2404:	11 23       	and	r17, r17
    2406:	41 f0       	breq	.+16     	; 0x2418 <xTaskDelayUntil+0xa6>
    2408:	cb 01       	movw	r24, r22
    240a:	ba 01       	movw	r22, r20
    240c:	68 19       	sub	r22, r8
    240e:	79 09       	sbc	r23, r9
    2410:	8a 09       	sbc	r24, r10
    2412:	9b 09       	sbc	r25, r11
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	6b dc       	rcall	.-1834   	; 0x1cee <prvAddCurrentTaskToDelayedList>
    2418:	d0 de       	rcall	.-608    	; 0x21ba <xTaskResumeAll>
    241a:	81 11       	cpse	r24, r1
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <xTaskDelayUntil+0xb0>
    241e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    2422:	81 2f       	mov	r24, r17
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	df 90       	pop	r13
    2430:	cf 90       	pop	r12
    2432:	bf 90       	pop	r11
    2434:	af 90       	pop	r10
    2436:	9f 90       	pop	r9
    2438:	8f 90       	pop	r8
    243a:	08 95       	ret

0000243c <vTaskDelay>:
    243c:	cf 92       	push	r12
    243e:	df 92       	push	r13
    2440:	ef 92       	push	r14
    2442:	ff 92       	push	r15
    2444:	6b 01       	movw	r12, r22
    2446:	7c 01       	movw	r14, r24
    2448:	67 2b       	or	r22, r23
    244a:	68 2b       	or	r22, r24
    244c:	69 2b       	or	r22, r25
    244e:	39 f0       	breq	.+14     	; 0x245e <vTaskDelay+0x22>
    2450:	74 dd       	rcall	.-1304   	; 0x1f3a <vTaskSuspendAll>
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	c7 01       	movw	r24, r14
    2456:	b6 01       	movw	r22, r12
    2458:	4a dc       	rcall	.-1900   	; 0x1cee <prvAddCurrentTaskToDelayedList>
    245a:	af de       	rcall	.-674    	; 0x21ba <xTaskResumeAll>
    245c:	01 c0       	rjmp	.+2      	; 0x2460 <vTaskDelay+0x24>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	81 11       	cpse	r24, r1
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <vTaskDelay+0x2c>
    2464:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    2468:	ff 90       	pop	r15
    246a:	ef 90       	pop	r14
    246c:	df 90       	pop	r13
    246e:	cf 90       	pop	r12
    2470:	08 95       	ret

00002472 <vTaskSwitchContext>:
    2472:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <uxSchedulerSuspended>
    2476:	88 23       	and	r24, r24
    2478:	21 f0       	breq	.+8      	; 0x2482 <vTaskSwitchContext+0x10>
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <xYieldPending>
    2480:	08 95       	ret
    2482:	10 92 3f 12 	sts	0x123F, r1	; 0x80123f <xYieldPending>
    2486:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    248a:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    248e:	20 81       	ld	r18, Z
    2490:	31 81       	ldd	r19, Z+1	; 0x01
    2492:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2496:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    249a:	83 8d       	ldd	r24, Z+27	; 0x1b
    249c:	94 8d       	ldd	r25, Z+28	; 0x1c
    249e:	82 17       	cp	r24, r18
    24a0:	93 07       	cpc	r25, r19
    24a2:	60 f0       	brcs	.+24     	; 0x24bc <vTaskSwitchContext+0x4a>
    24a4:	60 91 f5 12 	lds	r22, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    24a8:	70 91 f6 12 	lds	r23, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    24ac:	63 5e       	subi	r22, 0xE3	; 227
    24ae:	7f 4f       	sbci	r23, 0xFF	; 255
    24b0:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    24b4:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    24b8:	0e 94 a6 1c 	call	0x394c	; 0x394c <vApplicationStackOverflowHook>
    24bc:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    24c0:	01 c0       	rjmp	.+2      	; 0x24c4 <vTaskSwitchContext+0x52>
    24c2:	81 50       	subi	r24, 0x01	; 1
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	9b e0       	ldi	r25, 0x0B	; 11
    24ca:	92 9f       	mul	r25, r18
    24cc:	f0 01       	movw	r30, r0
    24ce:	93 9f       	mul	r25, r19
    24d0:	f0 0d       	add	r31, r0
    24d2:	11 24       	eor	r1, r1
    24d4:	e9 57       	subi	r30, 0x79	; 121
    24d6:	fd 4e       	sbci	r31, 0xED	; 237
    24d8:	90 81       	ld	r25, Z
    24da:	99 23       	and	r25, r25
    24dc:	91 f3       	breq	.-28     	; 0x24c2 <vTaskSwitchContext+0x50>
    24de:	9b e0       	ldi	r25, 0x0B	; 11
    24e0:	92 9f       	mul	r25, r18
    24e2:	a0 01       	movw	r20, r0
    24e4:	93 9f       	mul	r25, r19
    24e6:	50 0d       	add	r21, r0
    24e8:	11 24       	eor	r1, r1
    24ea:	df 01       	movw	r26, r30
    24ec:	01 80       	ldd	r0, Z+1	; 0x01
    24ee:	f2 81       	ldd	r31, Z+2	; 0x02
    24f0:	e0 2d       	mov	r30, r0
    24f2:	04 80       	ldd	r0, Z+4	; 0x04
    24f4:	f5 81       	ldd	r31, Z+5	; 0x05
    24f6:	e0 2d       	mov	r30, r0
    24f8:	12 96       	adiw	r26, 0x02	; 2
    24fa:	fc 93       	st	X, r31
    24fc:	ee 93       	st	-X, r30
    24fe:	11 97       	sbiw	r26, 0x01	; 1
    2500:	46 57       	subi	r20, 0x76	; 118
    2502:	5d 4e       	sbci	r21, 0xED	; 237
    2504:	e4 17       	cp	r30, r20
    2506:	f5 07       	cpc	r31, r21
    2508:	29 f4       	brne	.+10     	; 0x2514 <vTaskSwitchContext+0xa2>
    250a:	44 81       	ldd	r20, Z+4	; 0x04
    250c:	55 81       	ldd	r21, Z+5	; 0x05
    250e:	fd 01       	movw	r30, r26
    2510:	52 83       	std	Z+2, r21	; 0x02
    2512:	41 83       	std	Z+1, r20	; 0x01
    2514:	9b e0       	ldi	r25, 0x0B	; 11
    2516:	92 9f       	mul	r25, r18
    2518:	f0 01       	movw	r30, r0
    251a:	93 9f       	mul	r25, r19
    251c:	f0 0d       	add	r31, r0
    251e:	11 24       	eor	r1, r1
    2520:	e9 57       	subi	r30, 0x79	; 121
    2522:	fd 4e       	sbci	r31, 0xED	; 237
    2524:	01 80       	ldd	r0, Z+1	; 0x01
    2526:	f2 81       	ldd	r31, Z+2	; 0x02
    2528:	e0 2d       	mov	r30, r0
    252a:	20 85       	ldd	r18, Z+8	; 0x08
    252c:	31 85       	ldd	r19, Z+9	; 0x09
    252e:	30 93 f6 12 	sts	0x12F6, r19	; 0x8012f6 <pxCurrentTCB+0x1>
    2532:	20 93 f5 12 	sts	0x12F5, r18	; 0x8012f5 <pxCurrentTCB>
    2536:	80 93 45 12 	sts	0x1245, r24	; 0x801245 <uxTopReadyPriority>
    253a:	08 95       	ret

0000253c <vTaskPlaceOnEventList>:
    253c:	cf 92       	push	r12
    253e:	df 92       	push	r13
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	6a 01       	movw	r12, r20
    2546:	7b 01       	movw	r14, r22
    2548:	60 91 f5 12 	lds	r22, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    254c:	70 91 f6 12 	lds	r23, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2550:	62 5f       	subi	r22, 0xF2	; 242
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vListInsert>
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	c7 01       	movw	r24, r14
    255c:	b6 01       	movw	r22, r12
    255e:	c7 db       	rcall	.-2162   	; 0x1cee <prvAddCurrentTaskToDelayedList>
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	df 90       	pop	r13
    2566:	cf 90       	pop	r12
    2568:	08 95       	ret

0000256a <vTaskPlaceOnUnorderedEventList>:
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	fc 01       	movw	r30, r24
    2574:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2578:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    257c:	70 68       	ori	r23, 0x80	; 128
    257e:	1e 96       	adiw	r26, 0x0e	; 14
    2580:	4d 93       	st	X+, r20
    2582:	5d 93       	st	X+, r21
    2584:	6d 93       	st	X+, r22
    2586:	7c 93       	st	X, r23
    2588:	51 97       	sbiw	r26, 0x11	; 17
    258a:	a1 81       	ldd	r26, Z+1	; 0x01
    258c:	b2 81       	ldd	r27, Z+2	; 0x02
    258e:	c0 91 f5 12 	lds	r28, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2592:	d0 91 f6 12 	lds	r29, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2596:	bb 8b       	std	Y+19, r27	; 0x13
    2598:	aa 8b       	std	Y+18, r26	; 0x12
    259a:	c0 91 f5 12 	lds	r28, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    259e:	d0 91 f6 12 	lds	r29, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    25a2:	16 96       	adiw	r26, 0x06	; 6
    25a4:	8d 91       	ld	r24, X+
    25a6:	9c 91       	ld	r25, X
    25a8:	17 97       	sbiw	r26, 0x07	; 7
    25aa:	9d 8b       	std	Y+21, r25	; 0x15
    25ac:	8c 8b       	std	Y+20, r24	; 0x14
    25ae:	16 96       	adiw	r26, 0x06	; 6
    25b0:	cd 91       	ld	r28, X+
    25b2:	dc 91       	ld	r29, X
    25b4:	17 97       	sbiw	r26, 0x07	; 7
    25b6:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    25ba:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    25be:	0e 96       	adiw	r24, 0x0e	; 14
    25c0:	9d 83       	std	Y+5, r25	; 0x05
    25c2:	8c 83       	std	Y+4, r24	; 0x04
    25c4:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    25c8:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    25cc:	0e 96       	adiw	r24, 0x0e	; 14
    25ce:	17 96       	adiw	r26, 0x07	; 7
    25d0:	9c 93       	st	X, r25
    25d2:	8e 93       	st	-X, r24
    25d4:	16 97       	sbiw	r26, 0x06	; 6
    25d6:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    25da:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    25de:	59 96       	adiw	r26, 0x19	; 25
    25e0:	fc 93       	st	X, r31
    25e2:	ee 93       	st	-X, r30
    25e4:	58 97       	sbiw	r26, 0x18	; 24
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	80 83       	st	Z, r24
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	c9 01       	movw	r24, r18
    25f0:	b8 01       	movw	r22, r16
    25f2:	7d db       	rcall	.-2310   	; 0x1cee <prvAddCurrentTaskToDelayedList>
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	08 95       	ret

000025fe <vTaskPlaceOnEventListRestricted>:
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	fc 01       	movw	r30, r24
    2604:	cb 01       	movw	r24, r22
    2606:	ba 01       	movw	r22, r20
    2608:	a1 81       	ldd	r26, Z+1	; 0x01
    260a:	b2 81       	ldd	r27, Z+2	; 0x02
    260c:	c0 91 f5 12 	lds	r28, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2610:	d0 91 f6 12 	lds	r29, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2614:	bb 8b       	std	Y+19, r27	; 0x13
    2616:	aa 8b       	std	Y+18, r26	; 0x12
    2618:	c0 91 f5 12 	lds	r28, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    261c:	d0 91 f6 12 	lds	r29, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2620:	16 96       	adiw	r26, 0x06	; 6
    2622:	4d 91       	ld	r20, X+
    2624:	5c 91       	ld	r21, X
    2626:	17 97       	sbiw	r26, 0x07	; 7
    2628:	5d 8b       	std	Y+21, r21	; 0x15
    262a:	4c 8b       	std	Y+20, r20	; 0x14
    262c:	16 96       	adiw	r26, 0x06	; 6
    262e:	cd 91       	ld	r28, X+
    2630:	dc 91       	ld	r29, X
    2632:	17 97       	sbiw	r26, 0x07	; 7
    2634:	40 91 f5 12 	lds	r20, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2638:	50 91 f6 12 	lds	r21, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    263c:	42 5f       	subi	r20, 0xF2	; 242
    263e:	5f 4f       	sbci	r21, 0xFF	; 255
    2640:	5d 83       	std	Y+5, r21	; 0x05
    2642:	4c 83       	std	Y+4, r20	; 0x04
    2644:	40 91 f5 12 	lds	r20, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2648:	50 91 f6 12 	lds	r21, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    264c:	42 5f       	subi	r20, 0xF2	; 242
    264e:	5f 4f       	sbci	r21, 0xFF	; 255
    2650:	17 96       	adiw	r26, 0x07	; 7
    2652:	5c 93       	st	X, r21
    2654:	4e 93       	st	-X, r20
    2656:	16 97       	sbiw	r26, 0x06	; 6
    2658:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    265c:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2660:	59 96       	adiw	r26, 0x19	; 25
    2662:	fc 93       	st	X, r31
    2664:	ee 93       	st	-X, r30
    2666:	58 97       	sbiw	r26, 0x18	; 24
    2668:	30 81       	ld	r19, Z
    266a:	3f 5f       	subi	r19, 0xFF	; 255
    266c:	30 83       	st	Z, r19
    266e:	22 23       	and	r18, r18
    2670:	19 f0       	breq	.+6      	; 0x2678 <vTaskPlaceOnEventListRestricted+0x7a>
    2672:	6f ef       	ldi	r22, 0xFF	; 255
    2674:	7f ef       	ldi	r23, 0xFF	; 255
    2676:	cb 01       	movw	r24, r22
    2678:	42 2f       	mov	r20, r18
    267a:	39 db       	rcall	.-2446   	; 0x1cee <prvAddCurrentTaskToDelayedList>
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	08 95       	ret

00002682 <xTaskRemoveFromEventList>:
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	dc 01       	movw	r26, r24
    2688:	17 96       	adiw	r26, 0x07	; 7
    268a:	ed 91       	ld	r30, X+
    268c:	fc 91       	ld	r31, X
    268e:	18 97       	sbiw	r26, 0x08	; 8
    2690:	00 84       	ldd	r0, Z+8	; 0x08
    2692:	f1 85       	ldd	r31, Z+9	; 0x09
    2694:	e0 2d       	mov	r30, r0
    2696:	a0 8d       	ldd	r26, Z+24	; 0x18
    2698:	b1 8d       	ldd	r27, Z+25	; 0x19
    269a:	c2 89       	ldd	r28, Z+18	; 0x12
    269c:	d3 89       	ldd	r29, Z+19	; 0x13
    269e:	84 89       	ldd	r24, Z+20	; 0x14
    26a0:	95 89       	ldd	r25, Z+21	; 0x15
    26a2:	9f 83       	std	Y+7, r25	; 0x07
    26a4:	8e 83       	std	Y+6, r24	; 0x06
    26a6:	c4 89       	ldd	r28, Z+20	; 0x14
    26a8:	d5 89       	ldd	r29, Z+21	; 0x15
    26aa:	82 89       	ldd	r24, Z+18	; 0x12
    26ac:	93 89       	ldd	r25, Z+19	; 0x13
    26ae:	9d 83       	std	Y+5, r25	; 0x05
    26b0:	8c 83       	std	Y+4, r24	; 0x04
    26b2:	11 96       	adiw	r26, 0x01	; 1
    26b4:	8d 91       	ld	r24, X+
    26b6:	9c 91       	ld	r25, X
    26b8:	12 97       	sbiw	r26, 0x02	; 2
    26ba:	9f 01       	movw	r18, r30
    26bc:	22 5f       	subi	r18, 0xF2	; 242
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	82 17       	cp	r24, r18
    26c2:	93 07       	cpc	r25, r19
    26c4:	31 f4       	brne	.+12     	; 0x26d2 <xTaskRemoveFromEventList+0x50>
    26c6:	84 89       	ldd	r24, Z+20	; 0x14
    26c8:	95 89       	ldd	r25, Z+21	; 0x15
    26ca:	12 96       	adiw	r26, 0x02	; 2
    26cc:	9c 93       	st	X, r25
    26ce:	8e 93       	st	-X, r24
    26d0:	11 97       	sbiw	r26, 0x01	; 1
    26d2:	11 8e       	std	Z+25, r1	; 0x19
    26d4:	10 8e       	std	Z+24, r1	; 0x18
    26d6:	8c 91       	ld	r24, X
    26d8:	81 50       	subi	r24, 0x01	; 1
    26da:	8c 93       	st	X, r24
    26dc:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <uxSchedulerSuspended>
    26e0:	81 11       	cpse	r24, r1
    26e2:	52 c0       	rjmp	.+164    	; 0x2788 <xTaskRemoveFromEventList+0x106>
    26e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    26e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    26e8:	c6 81       	ldd	r28, Z+6	; 0x06
    26ea:	d7 81       	ldd	r29, Z+7	; 0x07
    26ec:	80 85       	ldd	r24, Z+8	; 0x08
    26ee:	91 85       	ldd	r25, Z+9	; 0x09
    26f0:	9f 83       	std	Y+7, r25	; 0x07
    26f2:	8e 83       	std	Y+6, r24	; 0x06
    26f4:	c0 85       	ldd	r28, Z+8	; 0x08
    26f6:	d1 85       	ldd	r29, Z+9	; 0x09
    26f8:	86 81       	ldd	r24, Z+6	; 0x06
    26fa:	97 81       	ldd	r25, Z+7	; 0x07
    26fc:	9d 83       	std	Y+5, r25	; 0x05
    26fe:	8c 83       	std	Y+4, r24	; 0x04
    2700:	11 96       	adiw	r26, 0x01	; 1
    2702:	8d 91       	ld	r24, X+
    2704:	9c 91       	ld	r25, X
    2706:	12 97       	sbiw	r26, 0x02	; 2
    2708:	9f 01       	movw	r18, r30
    270a:	2e 5f       	subi	r18, 0xFE	; 254
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	82 17       	cp	r24, r18
    2710:	93 07       	cpc	r25, r19
    2712:	31 f4       	brne	.+12     	; 0x2720 <xTaskRemoveFromEventList+0x9e>
    2714:	80 85       	ldd	r24, Z+8	; 0x08
    2716:	91 85       	ldd	r25, Z+9	; 0x09
    2718:	12 96       	adiw	r26, 0x02	; 2
    271a:	9c 93       	st	X, r25
    271c:	8e 93       	st	-X, r24
    271e:	11 97       	sbiw	r26, 0x01	; 1
    2720:	15 86       	std	Z+13, r1	; 0x0d
    2722:	14 86       	std	Z+12, r1	; 0x0c
    2724:	8c 91       	ld	r24, X
    2726:	81 50       	subi	r24, 0x01	; 1
    2728:	8c 93       	st	X, r24
    272a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    272c:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    2730:	8a 17       	cp	r24, r26
    2732:	10 f4       	brcc	.+4      	; 0x2738 <xTaskRemoveFromEventList+0xb6>
    2734:	a0 93 45 12 	sts	0x1245, r26	; 0x801245 <uxTopReadyPriority>
    2738:	8b e0       	ldi	r24, 0x0B	; 11
    273a:	8a 9f       	mul	r24, r26
    273c:	d0 01       	movw	r26, r0
    273e:	11 24       	eor	r1, r1
    2740:	a9 57       	subi	r26, 0x79	; 121
    2742:	bd 4e       	sbci	r27, 0xED	; 237
    2744:	11 96       	adiw	r26, 0x01	; 1
    2746:	0d 90       	ld	r0, X+
    2748:	bc 91       	ld	r27, X
    274a:	a0 2d       	mov	r26, r0
    274c:	b7 83       	std	Z+7, r27	; 0x07
    274e:	a6 83       	std	Z+6, r26	; 0x06
    2750:	16 96       	adiw	r26, 0x06	; 6
    2752:	4d 91       	ld	r20, X+
    2754:	5c 91       	ld	r21, X
    2756:	17 97       	sbiw	r26, 0x07	; 7
    2758:	51 87       	std	Z+9, r21	; 0x09
    275a:	40 87       	std	Z+8, r20	; 0x08
    275c:	16 96       	adiw	r26, 0x06	; 6
    275e:	cd 91       	ld	r28, X+
    2760:	dc 91       	ld	r29, X
    2762:	17 97       	sbiw	r26, 0x07	; 7
    2764:	3d 83       	std	Y+5, r19	; 0x05
    2766:	2c 83       	std	Y+4, r18	; 0x04
    2768:	17 96       	adiw	r26, 0x07	; 7
    276a:	3c 93       	st	X, r19
    276c:	2e 93       	st	-X, r18
    276e:	16 97       	sbiw	r26, 0x06	; 6
    2770:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2772:	8a 9f       	mul	r24, r26
    2774:	d0 01       	movw	r26, r0
    2776:	11 24       	eor	r1, r1
    2778:	a9 57       	subi	r26, 0x79	; 121
    277a:	bd 4e       	sbci	r27, 0xED	; 237
    277c:	b5 87       	std	Z+13, r27	; 0x0d
    277e:	a4 87       	std	Z+12, r26	; 0x0c
    2780:	8c 91       	ld	r24, X
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	8c 93       	st	X, r24
    2786:	1c c0       	rjmp	.+56     	; 0x27c0 <xTaskRemoveFromEventList+0x13e>
    2788:	42 e6       	ldi	r20, 0x62	; 98
    278a:	52 e1       	ldi	r21, 0x12	; 18
    278c:	da 01       	movw	r26, r20
    278e:	11 96       	adiw	r26, 0x01	; 1
    2790:	cd 91       	ld	r28, X+
    2792:	dc 91       	ld	r29, X
    2794:	12 97       	sbiw	r26, 0x02	; 2
    2796:	d3 8b       	std	Z+19, r29	; 0x13
    2798:	c2 8b       	std	Z+18, r28	; 0x12
    279a:	8e 81       	ldd	r24, Y+6	; 0x06
    279c:	9f 81       	ldd	r25, Y+7	; 0x07
    279e:	95 8b       	std	Z+21, r25	; 0x15
    27a0:	84 8b       	std	Z+20, r24	; 0x14
    27a2:	8e 81       	ldd	r24, Y+6	; 0x06
    27a4:	9f 81       	ldd	r25, Y+7	; 0x07
    27a6:	dc 01       	movw	r26, r24
    27a8:	15 96       	adiw	r26, 0x05	; 5
    27aa:	3c 93       	st	X, r19
    27ac:	2e 93       	st	-X, r18
    27ae:	14 97       	sbiw	r26, 0x04	; 4
    27b0:	3f 83       	std	Y+7, r19	; 0x07
    27b2:	2e 83       	std	Y+6, r18	; 0x06
    27b4:	51 8f       	std	Z+25, r21	; 0x19
    27b6:	40 8f       	std	Z+24, r20	; 0x18
    27b8:	da 01       	movw	r26, r20
    27ba:	8c 91       	ld	r24, X
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	8c 93       	st	X, r24
    27c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    27c2:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    27c6:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    27ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    27cc:	89 17       	cp	r24, r25
    27ce:	20 f4       	brcc	.+8      	; 0x27d8 <xTaskRemoveFromEventList+0x156>
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <xYieldPending>
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <xTaskRemoveFromEventList+0x158>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <vTaskRemoveFromUnorderedEventList>:
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	dc 01       	movw	r26, r24
    27e6:	70 68       	ori	r23, 0x80	; 128
    27e8:	4d 93       	st	X+, r20
    27ea:	5d 93       	st	X+, r21
    27ec:	6d 93       	st	X+, r22
    27ee:	7c 93       	st	X, r23
    27f0:	13 97       	sbiw	r26, 0x03	; 3
    27f2:	18 96       	adiw	r26, 0x08	; 8
    27f4:	ed 91       	ld	r30, X+
    27f6:	fc 91       	ld	r31, X
    27f8:	19 97       	sbiw	r26, 0x09	; 9
    27fa:	1a 96       	adiw	r26, 0x0a	; 10
    27fc:	4d 91       	ld	r20, X+
    27fe:	5c 91       	ld	r21, X
    2800:	1b 97       	sbiw	r26, 0x0b	; 11
    2802:	14 96       	adiw	r26, 0x04	; 4
    2804:	8d 91       	ld	r24, X+
    2806:	9c 91       	ld	r25, X
    2808:	15 97       	sbiw	r26, 0x05	; 5
    280a:	16 96       	adiw	r26, 0x06	; 6
    280c:	2d 91       	ld	r18, X+
    280e:	3c 91       	ld	r19, X
    2810:	17 97       	sbiw	r26, 0x07	; 7
    2812:	ec 01       	movw	r28, r24
    2814:	3f 83       	std	Y+7, r19	; 0x07
    2816:	2e 83       	std	Y+6, r18	; 0x06
    2818:	16 96       	adiw	r26, 0x06	; 6
    281a:	8d 91       	ld	r24, X+
    281c:	9c 91       	ld	r25, X
    281e:	17 97       	sbiw	r26, 0x07	; 7
    2820:	14 96       	adiw	r26, 0x04	; 4
    2822:	2d 91       	ld	r18, X+
    2824:	3c 91       	ld	r19, X
    2826:	15 97       	sbiw	r26, 0x05	; 5
    2828:	ec 01       	movw	r28, r24
    282a:	3d 83       	std	Y+5, r19	; 0x05
    282c:	2c 83       	std	Y+4, r18	; 0x04
    282e:	ea 01       	movw	r28, r20
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	a8 17       	cp	r26, r24
    2836:	b9 07       	cpc	r27, r25
    2838:	31 f4       	brne	.+12     	; 0x2846 <vTaskRemoveFromUnorderedEventList+0x66>
    283a:	16 96       	adiw	r26, 0x06	; 6
    283c:	8d 91       	ld	r24, X+
    283e:	9c 91       	ld	r25, X
    2840:	17 97       	sbiw	r26, 0x07	; 7
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	1b 96       	adiw	r26, 0x0b	; 11
    2848:	1c 92       	st	X, r1
    284a:	1e 92       	st	-X, r1
    284c:	1a 97       	sbiw	r26, 0x0a	; 10
    284e:	da 01       	movw	r26, r20
    2850:	8c 91       	ld	r24, X
    2852:	81 50       	subi	r24, 0x01	; 1
    2854:	8c 93       	st	X, r24
    2856:	a4 85       	ldd	r26, Z+12	; 0x0c
    2858:	b5 85       	ldd	r27, Z+13	; 0x0d
    285a:	c6 81       	ldd	r28, Z+6	; 0x06
    285c:	d7 81       	ldd	r29, Z+7	; 0x07
    285e:	80 85       	ldd	r24, Z+8	; 0x08
    2860:	91 85       	ldd	r25, Z+9	; 0x09
    2862:	9f 83       	std	Y+7, r25	; 0x07
    2864:	8e 83       	std	Y+6, r24	; 0x06
    2866:	c0 85       	ldd	r28, Z+8	; 0x08
    2868:	d1 85       	ldd	r29, Z+9	; 0x09
    286a:	86 81       	ldd	r24, Z+6	; 0x06
    286c:	97 81       	ldd	r25, Z+7	; 0x07
    286e:	9d 83       	std	Y+5, r25	; 0x05
    2870:	8c 83       	std	Y+4, r24	; 0x04
    2872:	11 96       	adiw	r26, 0x01	; 1
    2874:	8d 91       	ld	r24, X+
    2876:	9c 91       	ld	r25, X
    2878:	12 97       	sbiw	r26, 0x02	; 2
    287a:	9f 01       	movw	r18, r30
    287c:	2e 5f       	subi	r18, 0xFE	; 254
    287e:	3f 4f       	sbci	r19, 0xFF	; 255
    2880:	82 17       	cp	r24, r18
    2882:	93 07       	cpc	r25, r19
    2884:	31 f4       	brne	.+12     	; 0x2892 <vTaskRemoveFromUnorderedEventList+0xb2>
    2886:	80 85       	ldd	r24, Z+8	; 0x08
    2888:	91 85       	ldd	r25, Z+9	; 0x09
    288a:	12 96       	adiw	r26, 0x02	; 2
    288c:	9c 93       	st	X, r25
    288e:	8e 93       	st	-X, r24
    2890:	11 97       	sbiw	r26, 0x01	; 1
    2892:	15 86       	std	Z+13, r1	; 0x0d
    2894:	14 86       	std	Z+12, r1	; 0x0c
    2896:	8c 91       	ld	r24, X
    2898:	81 50       	subi	r24, 0x01	; 1
    289a:	8c 93       	st	X, r24
    289c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    289e:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    28a2:	8a 17       	cp	r24, r26
    28a4:	10 f4       	brcc	.+4      	; 0x28aa <vTaskRemoveFromUnorderedEventList+0xca>
    28a6:	a0 93 45 12 	sts	0x1245, r26	; 0x801245 <uxTopReadyPriority>
    28aa:	8b e0       	ldi	r24, 0x0B	; 11
    28ac:	8a 9f       	mul	r24, r26
    28ae:	d0 01       	movw	r26, r0
    28b0:	11 24       	eor	r1, r1
    28b2:	a9 57       	subi	r26, 0x79	; 121
    28b4:	bd 4e       	sbci	r27, 0xED	; 237
    28b6:	11 96       	adiw	r26, 0x01	; 1
    28b8:	0d 90       	ld	r0, X+
    28ba:	bc 91       	ld	r27, X
    28bc:	a0 2d       	mov	r26, r0
    28be:	b7 83       	std	Z+7, r27	; 0x07
    28c0:	a6 83       	std	Z+6, r26	; 0x06
    28c2:	16 96       	adiw	r26, 0x06	; 6
    28c4:	4d 91       	ld	r20, X+
    28c6:	5c 91       	ld	r21, X
    28c8:	17 97       	sbiw	r26, 0x07	; 7
    28ca:	51 87       	std	Z+9, r21	; 0x09
    28cc:	40 87       	std	Z+8, r20	; 0x08
    28ce:	16 96       	adiw	r26, 0x06	; 6
    28d0:	cd 91       	ld	r28, X+
    28d2:	dc 91       	ld	r29, X
    28d4:	17 97       	sbiw	r26, 0x07	; 7
    28d6:	3d 83       	std	Y+5, r19	; 0x05
    28d8:	2c 83       	std	Y+4, r18	; 0x04
    28da:	17 96       	adiw	r26, 0x07	; 7
    28dc:	3c 93       	st	X, r19
    28de:	2e 93       	st	-X, r18
    28e0:	16 97       	sbiw	r26, 0x06	; 6
    28e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    28e4:	8a 9f       	mul	r24, r26
    28e6:	d0 01       	movw	r26, r0
    28e8:	11 24       	eor	r1, r1
    28ea:	a9 57       	subi	r26, 0x79	; 121
    28ec:	bd 4e       	sbci	r27, 0xED	; 237
    28ee:	b5 87       	std	Z+13, r27	; 0x0d
    28f0:	a4 87       	std	Z+12, r26	; 0x0c
    28f2:	8c 91       	ld	r24, X
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	8c 93       	st	X, r24
    28f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    28fa:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    28fe:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2902:	82 8d       	ldd	r24, Z+26	; 0x1a
    2904:	89 17       	cp	r24, r25
    2906:	18 f4       	brcc	.+6      	; 0x290e <vTaskRemoveFromUnorderedEventList+0x12e>
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <xYieldPending>
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	08 95       	ret

00002914 <vTaskSetTimeOutState>:
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	0f 92       	push	r0
    291a:	20 91 3e 12 	lds	r18, 0x123E	; 0x80123e <xNumOfOverflows>
    291e:	fc 01       	movw	r30, r24
    2920:	20 83       	st	Z, r18
    2922:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <xTickCount>
    2926:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <xTickCount+0x1>
    292a:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <xTickCount+0x2>
    292e:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <xTickCount+0x3>
    2932:	41 83       	std	Z+1, r20	; 0x01
    2934:	52 83       	std	Z+2, r21	; 0x02
    2936:	63 83       	std	Z+3, r22	; 0x03
    2938:	74 83       	std	Z+4, r23	; 0x04
    293a:	0f 90       	pop	r0
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	08 95       	ret

00002940 <vTaskInternalSetTimeOutState>:
    2940:	20 91 3e 12 	lds	r18, 0x123E	; 0x80123e <xNumOfOverflows>
    2944:	fc 01       	movw	r30, r24
    2946:	20 83       	st	Z, r18
    2948:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <xTickCount>
    294c:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <xTickCount+0x1>
    2950:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <xTickCount+0x2>
    2954:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <xTickCount+0x3>
    2958:	41 83       	std	Z+1, r20	; 0x01
    295a:	52 83       	std	Z+2, r21	; 0x02
    295c:	63 83       	std	Z+3, r22	; 0x03
    295e:	74 83       	std	Z+4, r23	; 0x04
    2960:	08 95       	ret

00002962 <xTaskCheckForTimeOut>:
    2962:	8f 92       	push	r8
    2964:	9f 92       	push	r9
    2966:	af 92       	push	r10
    2968:	bf 92       	push	r11
    296a:	cf 92       	push	r12
    296c:	df 92       	push	r13
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	fb 01       	movw	r30, r22
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	0f 92       	push	r0
    2982:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <xTickCount>
    2986:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <xTickCount+0x1>
    298a:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <xTickCount+0x2>
    298e:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <xTickCount+0x3>
    2992:	dc 01       	movw	r26, r24
    2994:	11 96       	adiw	r26, 0x01	; 1
    2996:	0d 91       	ld	r16, X+
    2998:	1d 91       	ld	r17, X+
    299a:	2d 91       	ld	r18, X+
    299c:	3c 91       	ld	r19, X
    299e:	14 97       	sbiw	r26, 0x04	; 4
    29a0:	46 01       	movw	r8, r12
    29a2:	57 01       	movw	r10, r14
    29a4:	80 1a       	sub	r8, r16
    29a6:	91 0a       	sbc	r9, r17
    29a8:	a2 0a       	sbc	r10, r18
    29aa:	b3 0a       	sbc	r11, r19
    29ac:	40 81       	ld	r20, Z
    29ae:	51 81       	ldd	r21, Z+1	; 0x01
    29b0:	62 81       	ldd	r22, Z+2	; 0x02
    29b2:	73 81       	ldd	r23, Z+3	; 0x03
    29b4:	4f 3f       	cpi	r20, 0xFF	; 255
    29b6:	bf ef       	ldi	r27, 0xFF	; 255
    29b8:	5b 07       	cpc	r21, r27
    29ba:	6b 07       	cpc	r22, r27
    29bc:	7b 07       	cpc	r23, r27
    29be:	39 f1       	breq	.+78     	; 0x2a0e <xTaskCheckForTimeOut+0xac>
    29c0:	ec 01       	movw	r28, r24
    29c2:	b8 81       	ld	r27, Y
    29c4:	a0 91 3e 12 	lds	r26, 0x123E	; 0x80123e <xNumOfOverflows>
    29c8:	ba 17       	cp	r27, r26
    29ca:	59 f0       	breq	.+22     	; 0x29e2 <xTaskCheckForTimeOut+0x80>
    29cc:	c0 16       	cp	r12, r16
    29ce:	d1 06       	cpc	r13, r17
    29d0:	e2 06       	cpc	r14, r18
    29d2:	f3 06       	cpc	r15, r19
    29d4:	30 f0       	brcs	.+12     	; 0x29e2 <xTaskCheckForTimeOut+0x80>
    29d6:	10 82       	st	Z, r1
    29d8:	11 82       	std	Z+1, r1	; 0x01
    29da:	12 82       	std	Z+2, r1	; 0x02
    29dc:	13 82       	std	Z+3, r1	; 0x03
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	17 c0       	rjmp	.+46     	; 0x2a10 <xTaskCheckForTimeOut+0xae>
    29e2:	84 16       	cp	r8, r20
    29e4:	95 06       	cpc	r9, r21
    29e6:	a6 06       	cpc	r10, r22
    29e8:	b7 06       	cpc	r11, r23
    29ea:	58 f4       	brcc	.+22     	; 0x2a02 <xTaskCheckForTimeOut+0xa0>
    29ec:	48 19       	sub	r20, r8
    29ee:	59 09       	sbc	r21, r9
    29f0:	6a 09       	sbc	r22, r10
    29f2:	7b 09       	sbc	r23, r11
    29f4:	40 83       	st	Z, r20
    29f6:	51 83       	std	Z+1, r21	; 0x01
    29f8:	62 83       	std	Z+2, r22	; 0x02
    29fa:	73 83       	std	Z+3, r23	; 0x03
    29fc:	a1 df       	rcall	.-190    	; 0x2940 <vTaskInternalSetTimeOutState>
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	07 c0       	rjmp	.+14     	; 0x2a10 <xTaskCheckForTimeOut+0xae>
    2a02:	10 82       	st	Z, r1
    2a04:	11 82       	std	Z+1, r1	; 0x01
    2a06:	12 82       	std	Z+2, r1	; 0x02
    2a08:	13 82       	std	Z+3, r1	; 0x03
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <xTaskCheckForTimeOut+0xae>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0f 90       	pop	r0
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
    2a28:	9f 90       	pop	r9
    2a2a:	8f 90       	pop	r8
    2a2c:	08 95       	ret

00002a2e <vTaskMissedYield>:
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <xYieldPending>
    2a34:	08 95       	ret

00002a36 <xTaskGetCurrentTaskHandle>:
    2a36:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2a3a:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2a3e:	08 95       	ret

00002a40 <xTaskGetSchedulerState>:
    2a40:	80 91 44 12 	lds	r24, 0x1244	; 0x801244 <xSchedulerRunning>
    2a44:	88 23       	and	r24, r24
    2a46:	31 f0       	breq	.+12     	; 0x2a54 <xTaskGetSchedulerState+0x14>
    2a48:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <uxSchedulerSuspended>
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	04 c0       	rjmp	.+8      	; 0x2a58 <xTaskGetSchedulerState+0x18>
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	08 95       	ret
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	08 95       	ret
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	08 95       	ret

00002a5c <xTaskPriorityInherit>:
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	fc 01       	movw	r30, r24
    2a66:	89 2b       	or	r24, r25
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <xTaskPriorityInherit+0x10>
    2a6a:	77 c0       	rjmp	.+238    	; 0x2b5a <xTaskPriorityInherit+0xfe>
    2a6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a6e:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2a72:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2a76:	5a 96       	adiw	r26, 0x1a	; 26
    2a78:	9c 91       	ld	r25, X
    2a7a:	89 17       	cp	r24, r25
    2a7c:	08 f0       	brcs	.+2      	; 0x2a80 <xTaskPriorityInherit+0x24>
    2a7e:	63 c0       	rjmp	.+198    	; 0x2b46 <xTaskPriorityInherit+0xea>
    2a80:	46 85       	ldd	r20, Z+14	; 0x0e
    2a82:	57 85       	ldd	r21, Z+15	; 0x0f
    2a84:	60 89       	ldd	r22, Z+16	; 0x10
    2a86:	71 89       	ldd	r23, Z+17	; 0x11
    2a88:	77 23       	and	r23, r23
    2a8a:	94 f0       	brlt	.+36     	; 0x2ab0 <xTaskPriorityInherit+0x54>
    2a8c:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2a90:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2a94:	5a 96       	adiw	r26, 0x1a	; 26
    2a96:	9c 91       	ld	r25, X
    2a98:	4a e0       	ldi	r20, 0x0A	; 10
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	49 1b       	sub	r20, r25
    2aa2:	51 09       	sbc	r21, r1
    2aa4:	61 09       	sbc	r22, r1
    2aa6:	71 09       	sbc	r23, r1
    2aa8:	46 87       	std	Z+14, r20	; 0x0e
    2aaa:	57 87       	std	Z+15, r21	; 0x0f
    2aac:	60 8b       	std	Z+16, r22	; 0x10
    2aae:	71 8b       	std	Z+17, r23	; 0x11
    2ab0:	24 85       	ldd	r18, Z+12	; 0x0c
    2ab2:	35 85       	ldd	r19, Z+13	; 0x0d
    2ab4:	4b e0       	ldi	r20, 0x0B	; 11
    2ab6:	84 9f       	mul	r24, r20
    2ab8:	c0 01       	movw	r24, r0
    2aba:	11 24       	eor	r1, r1
    2abc:	89 57       	subi	r24, 0x79	; 121
    2abe:	9d 4e       	sbci	r25, 0xED	; 237
    2ac0:	28 17       	cp	r18, r24
    2ac2:	39 07       	cpc	r19, r25
    2ac4:	b9 f5       	brne	.+110    	; 0x2b34 <xTaskPriorityInherit+0xd8>
    2ac6:	ef 01       	movw	r28, r30
    2ac8:	8f 01       	movw	r16, r30
    2aca:	0e 5f       	subi	r16, 0xFE	; 254
    2acc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ace:	c8 01       	movw	r24, r16
    2ad0:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
    2ad4:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2ad8:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2adc:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ade:	ea 8f       	std	Y+26, r30	; 0x1a
    2ae0:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    2ae4:	8e 17       	cp	r24, r30
    2ae6:	10 f4       	brcc	.+4      	; 0x2aec <xTaskPriorityInherit+0x90>
    2ae8:	e0 93 45 12 	sts	0x1245, r30	; 0x801245 <uxTopReadyPriority>
    2aec:	8b e0       	ldi	r24, 0x0B	; 11
    2aee:	8e 9f       	mul	r24, r30
    2af0:	f0 01       	movw	r30, r0
    2af2:	11 24       	eor	r1, r1
    2af4:	e9 57       	subi	r30, 0x79	; 121
    2af6:	fd 4e       	sbci	r31, 0xED	; 237
    2af8:	01 80       	ldd	r0, Z+1	; 0x01
    2afa:	f2 81       	ldd	r31, Z+2	; 0x02
    2afc:	e0 2d       	mov	r30, r0
    2afe:	ff 83       	std	Y+7, r31	; 0x07
    2b00:	ee 83       	std	Y+6, r30	; 0x06
    2b02:	26 81       	ldd	r18, Z+6	; 0x06
    2b04:	37 81       	ldd	r19, Z+7	; 0x07
    2b06:	39 87       	std	Y+9, r19	; 0x09
    2b08:	28 87       	std	Y+8, r18	; 0x08
    2b0a:	a6 81       	ldd	r26, Z+6	; 0x06
    2b0c:	b7 81       	ldd	r27, Z+7	; 0x07
    2b0e:	15 96       	adiw	r26, 0x05	; 5
    2b10:	1c 93       	st	X, r17
    2b12:	0e 93       	st	-X, r16
    2b14:	14 97       	sbiw	r26, 0x04	; 4
    2b16:	17 83       	std	Z+7, r17	; 0x07
    2b18:	06 83       	std	Z+6, r16	; 0x06
    2b1a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b1c:	8e 9f       	mul	r24, r30
    2b1e:	f0 01       	movw	r30, r0
    2b20:	11 24       	eor	r1, r1
    2b22:	e9 57       	subi	r30, 0x79	; 121
    2b24:	fd 4e       	sbci	r31, 0xED	; 237
    2b26:	fd 87       	std	Y+13, r31	; 0x0d
    2b28:	ec 87       	std	Y+12, r30	; 0x0c
    2b2a:	80 81       	ld	r24, Z
    2b2c:	8f 5f       	subi	r24, 0xFF	; 255
    2b2e:	80 83       	st	Z, r24
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	16 c0       	rjmp	.+44     	; 0x2b60 <xTaskPriorityInherit+0x104>
    2b34:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2b38:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2b3c:	5a 96       	adiw	r26, 0x1a	; 26
    2b3e:	8c 91       	ld	r24, X
    2b40:	82 8f       	std	Z+26, r24	; 0x1a
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	0d c0       	rjmp	.+26     	; 0x2b60 <xTaskPriorityInherit+0x104>
    2b46:	95 a5       	ldd	r25, Z+45	; 0x2d
    2b48:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2b4c:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2b50:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b52:	98 17       	cp	r25, r24
    2b54:	20 f0       	brcs	.+8      	; 0x2b5e <xTaskPriorityInherit+0x102>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	03 c0       	rjmp	.+6      	; 0x2b60 <xTaskPriorityInherit+0x104>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	01 c0       	rjmp	.+2      	; 0x2b60 <xTaskPriorityInherit+0x104>
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	df 91       	pop	r29
    2b62:	cf 91       	pop	r28
    2b64:	1f 91       	pop	r17
    2b66:	0f 91       	pop	r16
    2b68:	08 95       	ret

00002b6a <xTaskPriorityDisinherit>:
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	fc 01       	movw	r30, r24
    2b74:	89 2b       	or	r24, r25
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <xTaskPriorityDisinherit+0x10>
    2b78:	49 c0       	rjmp	.+146    	; 0x2c0c <xTaskPriorityDisinherit+0xa2>
    2b7a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2b7c:	81 50       	subi	r24, 0x01	; 1
    2b7e:	86 a7       	std	Z+46, r24	; 0x2e
    2b80:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b82:	95 a5       	ldd	r25, Z+45	; 0x2d
    2b84:	29 17       	cp	r18, r25
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <xTaskPriorityDisinherit+0x20>
    2b88:	43 c0       	rjmp	.+134    	; 0x2c10 <xTaskPriorityDisinherit+0xa6>
    2b8a:	81 11       	cpse	r24, r1
    2b8c:	43 c0       	rjmp	.+134    	; 0x2c14 <xTaskPriorityDisinherit+0xaa>
    2b8e:	ef 01       	movw	r28, r30
    2b90:	8f 01       	movw	r16, r30
    2b92:	0e 5f       	subi	r16, 0xFE	; 254
    2b94:	1f 4f       	sbci	r17, 0xFF	; 255
    2b96:	c8 01       	movw	r24, r16
    2b98:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
    2b9c:	ed a5       	ldd	r30, Y+45	; 0x2d
    2b9e:	ea 8f       	std	Y+26, r30	; 0x1a
    2ba0:	8a e0       	ldi	r24, 0x0A	; 10
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a0 e0       	ldi	r26, 0x00	; 0
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	8e 1b       	sub	r24, r30
    2baa:	91 09       	sbc	r25, r1
    2bac:	a1 09       	sbc	r26, r1
    2bae:	b1 09       	sbc	r27, r1
    2bb0:	8e 87       	std	Y+14, r24	; 0x0e
    2bb2:	9f 87       	std	Y+15, r25	; 0x0f
    2bb4:	a8 8b       	std	Y+16, r26	; 0x10
    2bb6:	b9 8b       	std	Y+17, r27	; 0x11
    2bb8:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    2bbc:	8e 17       	cp	r24, r30
    2bbe:	10 f4       	brcc	.+4      	; 0x2bc4 <xTaskPriorityDisinherit+0x5a>
    2bc0:	e0 93 45 12 	sts	0x1245, r30	; 0x801245 <uxTopReadyPriority>
    2bc4:	8b e0       	ldi	r24, 0x0B	; 11
    2bc6:	8e 9f       	mul	r24, r30
    2bc8:	f0 01       	movw	r30, r0
    2bca:	11 24       	eor	r1, r1
    2bcc:	e9 57       	subi	r30, 0x79	; 121
    2bce:	fd 4e       	sbci	r31, 0xED	; 237
    2bd0:	01 80       	ldd	r0, Z+1	; 0x01
    2bd2:	f2 81       	ldd	r31, Z+2	; 0x02
    2bd4:	e0 2d       	mov	r30, r0
    2bd6:	ff 83       	std	Y+7, r31	; 0x07
    2bd8:	ee 83       	std	Y+6, r30	; 0x06
    2bda:	26 81       	ldd	r18, Z+6	; 0x06
    2bdc:	37 81       	ldd	r19, Z+7	; 0x07
    2bde:	39 87       	std	Y+9, r19	; 0x09
    2be0:	28 87       	std	Y+8, r18	; 0x08
    2be2:	a6 81       	ldd	r26, Z+6	; 0x06
    2be4:	b7 81       	ldd	r27, Z+7	; 0x07
    2be6:	15 96       	adiw	r26, 0x05	; 5
    2be8:	1c 93       	st	X, r17
    2bea:	0e 93       	st	-X, r16
    2bec:	14 97       	sbiw	r26, 0x04	; 4
    2bee:	17 83       	std	Z+7, r17	; 0x07
    2bf0:	06 83       	std	Z+6, r16	; 0x06
    2bf2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2bf4:	8e 9f       	mul	r24, r30
    2bf6:	f0 01       	movw	r30, r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	e9 57       	subi	r30, 0x79	; 121
    2bfc:	fd 4e       	sbci	r31, 0xED	; 237
    2bfe:	fd 87       	std	Y+13, r31	; 0x0d
    2c00:	ec 87       	std	Y+12, r30	; 0x0c
    2c02:	80 81       	ld	r24, Z
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	80 83       	st	Z, r24
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	05 c0       	rjmp	.+10     	; 0x2c16 <xTaskPriorityDisinherit+0xac>
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	03 c0       	rjmp	.+6      	; 0x2c16 <xTaskPriorityDisinherit+0xac>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	01 c0       	rjmp	.+2      	; 0x2c16 <xTaskPriorityDisinherit+0xac>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	08 95       	ret

00002c20 <vTaskPriorityDisinheritAfterTimeout>:
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	fc 01       	movw	r30, r24
    2c2a:	89 2b       	or	r24, r25
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2c2e:	5a c0       	rjmp	.+180    	; 0x2ce4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2c30:	85 a5       	ldd	r24, Z+45	; 0x2d
    2c32:	86 17       	cp	r24, r22
    2c34:	08 f4       	brcc	.+2      	; 0x2c38 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2c36:	86 2f       	mov	r24, r22
    2c38:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c3a:	89 17       	cp	r24, r25
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2c3e:	52 c0       	rjmp	.+164    	; 0x2ce4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2c40:	26 a5       	ldd	r18, Z+46	; 0x2e
    2c42:	21 30       	cpi	r18, 0x01	; 1
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2c46:	4e c0       	rjmp	.+156    	; 0x2ce4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2c48:	82 8f       	std	Z+26, r24	; 0x1a
    2c4a:	46 85       	ldd	r20, Z+14	; 0x0e
    2c4c:	57 85       	ldd	r21, Z+15	; 0x0f
    2c4e:	60 89       	ldd	r22, Z+16	; 0x10
    2c50:	71 89       	ldd	r23, Z+17	; 0x11
    2c52:	77 23       	and	r23, r23
    2c54:	64 f0       	brlt	.+24     	; 0x2c6e <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2c56:	4a e0       	ldi	r20, 0x0A	; 10
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	48 1b       	sub	r20, r24
    2c60:	51 09       	sbc	r21, r1
    2c62:	61 09       	sbc	r22, r1
    2c64:	71 09       	sbc	r23, r1
    2c66:	46 87       	std	Z+14, r20	; 0x0e
    2c68:	57 87       	std	Z+15, r21	; 0x0f
    2c6a:	60 8b       	std	Z+16, r22	; 0x10
    2c6c:	71 8b       	std	Z+17, r23	; 0x11
    2c6e:	24 85       	ldd	r18, Z+12	; 0x0c
    2c70:	35 85       	ldd	r19, Z+13	; 0x0d
    2c72:	4b e0       	ldi	r20, 0x0B	; 11
    2c74:	94 9f       	mul	r25, r20
    2c76:	c0 01       	movw	r24, r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	89 57       	subi	r24, 0x79	; 121
    2c7c:	9d 4e       	sbci	r25, 0xED	; 237
    2c7e:	28 17       	cp	r18, r24
    2c80:	39 07       	cpc	r19, r25
    2c82:	81 f5       	brne	.+96     	; 0x2ce4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2c84:	ef 01       	movw	r28, r30
    2c86:	8f 01       	movw	r16, r30
    2c88:	0e 5f       	subi	r16, 0xFE	; 254
    2c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8c:	c8 01       	movw	r24, r16
    2c8e:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
    2c92:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c94:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    2c98:	8e 17       	cp	r24, r30
    2c9a:	10 f4       	brcc	.+4      	; 0x2ca0 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2c9c:	e0 93 45 12 	sts	0x1245, r30	; 0x801245 <uxTopReadyPriority>
    2ca0:	8b e0       	ldi	r24, 0x0B	; 11
    2ca2:	8e 9f       	mul	r24, r30
    2ca4:	f0 01       	movw	r30, r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	e9 57       	subi	r30, 0x79	; 121
    2caa:	fd 4e       	sbci	r31, 0xED	; 237
    2cac:	01 80       	ldd	r0, Z+1	; 0x01
    2cae:	f2 81       	ldd	r31, Z+2	; 0x02
    2cb0:	e0 2d       	mov	r30, r0
    2cb2:	ff 83       	std	Y+7, r31	; 0x07
    2cb4:	ee 83       	std	Y+6, r30	; 0x06
    2cb6:	26 81       	ldd	r18, Z+6	; 0x06
    2cb8:	37 81       	ldd	r19, Z+7	; 0x07
    2cba:	39 87       	std	Y+9, r19	; 0x09
    2cbc:	28 87       	std	Y+8, r18	; 0x08
    2cbe:	a6 81       	ldd	r26, Z+6	; 0x06
    2cc0:	b7 81       	ldd	r27, Z+7	; 0x07
    2cc2:	15 96       	adiw	r26, 0x05	; 5
    2cc4:	1c 93       	st	X, r17
    2cc6:	0e 93       	st	-X, r16
    2cc8:	14 97       	sbiw	r26, 0x04	; 4
    2cca:	17 83       	std	Z+7, r17	; 0x07
    2ccc:	06 83       	std	Z+6, r16	; 0x06
    2cce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2cd0:	8e 9f       	mul	r24, r30
    2cd2:	f0 01       	movw	r30, r0
    2cd4:	11 24       	eor	r1, r1
    2cd6:	e9 57       	subi	r30, 0x79	; 121
    2cd8:	fd 4e       	sbci	r31, 0xED	; 237
    2cda:	fd 87       	std	Y+13, r31	; 0x0d
    2cdc:	ec 87       	std	Y+12, r30	; 0x0c
    2cde:	80 81       	ld	r24, Z
    2ce0:	8f 5f       	subi	r24, 0xFF	; 255
    2ce2:	80 83       	st	Z, r24
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	08 95       	ret

00002cee <uxTaskResetEventItemValue>:
    2cee:	cf 92       	push	r12
    2cf0:	df 92       	push	r13
    2cf2:	ef 92       	push	r14
    2cf4:	ff 92       	push	r15
    2cf6:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2cfa:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2cfe:	66 85       	ldd	r22, Z+14	; 0x0e
    2d00:	77 85       	ldd	r23, Z+15	; 0x0f
    2d02:	80 89       	ldd	r24, Z+16	; 0x10
    2d04:	91 89       	ldd	r25, Z+17	; 0x11
    2d06:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2d0a:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2d0e:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2d12:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2d16:	5a 96       	adiw	r26, 0x1a	; 26
    2d18:	2c 91       	ld	r18, X
    2d1a:	0f 2e       	mov	r0, r31
    2d1c:	fa e0       	ldi	r31, 0x0A	; 10
    2d1e:	cf 2e       	mov	r12, r31
    2d20:	d1 2c       	mov	r13, r1
    2d22:	e1 2c       	mov	r14, r1
    2d24:	f1 2c       	mov	r15, r1
    2d26:	f0 2d       	mov	r31, r0
    2d28:	c2 1a       	sub	r12, r18
    2d2a:	d1 08       	sbc	r13, r1
    2d2c:	e1 08       	sbc	r14, r1
    2d2e:	f1 08       	sbc	r15, r1
    2d30:	c6 86       	std	Z+14, r12	; 0x0e
    2d32:	d7 86       	std	Z+15, r13	; 0x0f
    2d34:	e0 8a       	std	Z+16, r14	; 0x10
    2d36:	f1 8a       	std	Z+17, r15	; 0x11
    2d38:	ff 90       	pop	r15
    2d3a:	ef 90       	pop	r14
    2d3c:	df 90       	pop	r13
    2d3e:	cf 90       	pop	r12
    2d40:	08 95       	ret

00002d42 <pvTaskIncrementMutexHeldCount>:
    2d42:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2d46:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2d4a:	89 2b       	or	r24, r25
    2d4c:	39 f0       	breq	.+14     	; 0x2d5c <pvTaskIncrementMutexHeldCount+0x1a>
    2d4e:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2d52:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2d56:	86 a5       	ldd	r24, Z+46	; 0x2e
    2d58:	8f 5f       	subi	r24, 0xFF	; 255
    2d5a:	86 a7       	std	Z+46, r24	; 0x2e
    2d5c:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2d60:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2d64:	08 95       	ret

00002d66 <xTaskGenericNotifyWait>:
    2d66:	4f 92       	push	r4
    2d68:	5f 92       	push	r5
    2d6a:	6f 92       	push	r6
    2d6c:	7f 92       	push	r7
    2d6e:	af 92       	push	r10
    2d70:	bf 92       	push	r11
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    2d82:	28 01       	movw	r4, r16
    2d84:	39 01       	movw	r6, r18
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	0f 92       	push	r0
    2d8c:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2d90:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2d94:	c8 2f       	mov	r28, r24
    2d96:	d0 e0       	ldi	r29, 0x00	; 0
    2d98:	ec 0f       	add	r30, r28
    2d9a:	fd 1f       	adc	r31, r29
    2d9c:	83 a9       	ldd	r24, Z+51	; 0x33
    2d9e:	82 30       	cpi	r24, 0x02	; 2
    2da0:	79 f1       	breq	.+94     	; 0x2e00 <xTaskGenericNotifyWait+0x9a>
    2da2:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2da6:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2daa:	ce 01       	movw	r24, r28
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	e8 0f       	add	r30, r24
    2db6:	f9 1f       	adc	r31, r25
    2db8:	87 a5       	ldd	r24, Z+47	; 0x2f
    2dba:	90 a9       	ldd	r25, Z+48	; 0x30
    2dbc:	a1 a9       	ldd	r26, Z+49	; 0x31
    2dbe:	b2 a9       	ldd	r27, Z+50	; 0x32
    2dc0:	40 95       	com	r20
    2dc2:	50 95       	com	r21
    2dc4:	60 95       	com	r22
    2dc6:	70 95       	com	r23
    2dc8:	48 23       	and	r20, r24
    2dca:	59 23       	and	r21, r25
    2dcc:	6a 23       	and	r22, r26
    2dce:	7b 23       	and	r23, r27
    2dd0:	47 a7       	std	Z+47, r20	; 0x2f
    2dd2:	50 ab       	std	Z+48, r21	; 0x30
    2dd4:	61 ab       	std	Z+49, r22	; 0x31
    2dd6:	72 ab       	std	Z+50, r23	; 0x32
    2dd8:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2ddc:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2de0:	ec 0f       	add	r30, r28
    2de2:	fd 1f       	adc	r31, r29
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	83 ab       	std	Z+51, r24	; 0x33
    2de8:	a1 14       	cp	r10, r1
    2dea:	b1 04       	cpc	r11, r1
    2dec:	c1 04       	cpc	r12, r1
    2dee:	d1 04       	cpc	r13, r1
    2df0:	39 f0       	breq	.+14     	; 0x2e00 <xTaskGenericNotifyWait+0x9a>
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	c6 01       	movw	r24, r12
    2df6:	b5 01       	movw	r22, r10
    2df8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <prvAddCurrentTaskToDelayedList>
    2dfc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    2e00:	0f 90       	pop	r0
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	0f 92       	push	r0
    2e0a:	e1 14       	cp	r14, r1
    2e0c:	f1 04       	cpc	r15, r1
    2e0e:	a1 f0       	breq	.+40     	; 0x2e38 <xTaskGenericNotifyWait+0xd2>
    2e10:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2e14:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2e18:	ce 01       	movw	r24, r28
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	e8 0f       	add	r30, r24
    2e24:	f9 1f       	adc	r31, r25
    2e26:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e28:	90 a9       	ldd	r25, Z+48	; 0x30
    2e2a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e2c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e2e:	f7 01       	movw	r30, r14
    2e30:	80 83       	st	Z, r24
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	a2 83       	std	Z+2, r26	; 0x02
    2e36:	b3 83       	std	Z+3, r27	; 0x03
    2e38:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2e3c:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2e40:	ec 0f       	add	r30, r28
    2e42:	fd 1f       	adc	r31, r29
    2e44:	83 a9       	ldd	r24, Z+51	; 0x33
    2e46:	82 30       	cpi	r24, 0x02	; 2
    2e48:	e9 f4       	brne	.+58     	; 0x2e84 <xTaskGenericNotifyWait+0x11e>
    2e4a:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2e4e:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2e52:	ce 01       	movw	r24, r28
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	e8 0f       	add	r30, r24
    2e5e:	f9 1f       	adc	r31, r25
    2e60:	87 a5       	ldd	r24, Z+47	; 0x2f
    2e62:	90 a9       	ldd	r25, Z+48	; 0x30
    2e64:	a1 a9       	ldd	r26, Z+49	; 0x31
    2e66:	b2 a9       	ldd	r27, Z+50	; 0x32
    2e68:	40 94       	com	r4
    2e6a:	50 94       	com	r5
    2e6c:	60 94       	com	r6
    2e6e:	70 94       	com	r7
    2e70:	48 22       	and	r4, r24
    2e72:	59 22       	and	r5, r25
    2e74:	6a 22       	and	r6, r26
    2e76:	7b 22       	and	r7, r27
    2e78:	47 a6       	std	Z+47, r4	; 0x2f
    2e7a:	50 aa       	std	Z+48, r5	; 0x30
    2e7c:	61 aa       	std	Z+49, r6	; 0x31
    2e7e:	72 aa       	std	Z+50, r7	; 0x32
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	01 c0       	rjmp	.+2      	; 0x2e86 <xTaskGenericNotifyWait+0x120>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	20 91 f5 12 	lds	r18, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    2e8a:	30 91 f6 12 	lds	r19, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    2e8e:	c2 0f       	add	r28, r18
    2e90:	d3 1f       	adc	r29, r19
    2e92:	1b aa       	std	Y+51, r1	; 0x33
    2e94:	0f 90       	pop	r0
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
    2ea8:	bf 90       	pop	r11
    2eaa:	af 90       	pop	r10
    2eac:	7f 90       	pop	r7
    2eae:	6f 90       	pop	r6
    2eb0:	5f 90       	pop	r5
    2eb2:	4f 90       	pop	r4
    2eb4:	08 95       	ret

00002eb6 <xTaskGenericNotify>:
    2eb6:	8f 92       	push	r8
    2eb8:	9f 92       	push	r9
    2eba:	af 92       	push	r10
    2ebc:	bf 92       	push	r11
    2ebe:	ef 92       	push	r14
    2ec0:	ff 92       	push	r15
    2ec2:	0f 93       	push	r16
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	dc 01       	movw	r26, r24
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	0f 92       	push	r0
    2ed0:	e1 14       	cp	r14, r1
    2ed2:	f1 04       	cpc	r15, r1
    2ed4:	89 f0       	breq	.+34     	; 0x2ef8 <xTaskGenericNotify+0x42>
    2ed6:	e6 2f       	mov	r30, r22
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	ee 0f       	add	r30, r30
    2edc:	ff 1f       	adc	r31, r31
    2ede:	ee 0f       	add	r30, r30
    2ee0:	ff 1f       	adc	r31, r31
    2ee2:	e8 0f       	add	r30, r24
    2ee4:	f9 1f       	adc	r31, r25
    2ee6:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ee8:	90 a8       	ldd	r9, Z+48	; 0x30
    2eea:	a1 a8       	ldd	r10, Z+49	; 0x31
    2eec:	b2 a8       	ldd	r11, Z+50	; 0x32
    2eee:	f7 01       	movw	r30, r14
    2ef0:	80 82       	st	Z, r8
    2ef2:	91 82       	std	Z+1, r9	; 0x01
    2ef4:	a2 82       	std	Z+2, r10	; 0x02
    2ef6:	b3 82       	std	Z+3, r11	; 0x03
    2ef8:	70 e0       	ldi	r23, 0x00	; 0
    2efa:	fd 01       	movw	r30, r26
    2efc:	e6 0f       	add	r30, r22
    2efe:	f7 1f       	adc	r31, r23
    2f00:	83 a9       	ldd	r24, Z+51	; 0x33
    2f02:	92 e0       	ldi	r25, 0x02	; 2
    2f04:	93 ab       	std	Z+51, r25	; 0x33
    2f06:	02 30       	cpi	r16, 0x02	; 2
    2f08:	01 f1       	breq	.+64     	; 0x2f4a <xTaskGenericNotify+0x94>
    2f0a:	18 f4       	brcc	.+6      	; 0x2f12 <xTaskGenericNotify+0x5c>
    2f0c:	01 30       	cpi	r16, 0x01	; 1
    2f0e:	31 f0       	breq	.+12     	; 0x2f1c <xTaskGenericNotify+0x66>
    2f10:	4d c0       	rjmp	.+154    	; 0x2fac <xTaskGenericNotify+0xf6>
    2f12:	03 30       	cpi	r16, 0x03	; 3
    2f14:	79 f1       	breq	.+94     	; 0x2f74 <xTaskGenericNotify+0xbe>
    2f16:	04 30       	cpi	r16, 0x04	; 4
    2f18:	d1 f1       	breq	.+116    	; 0x2f8e <xTaskGenericNotify+0xd8>
    2f1a:	48 c0       	rjmp	.+144    	; 0x2fac <xTaskGenericNotify+0xf6>
    2f1c:	66 0f       	add	r22, r22
    2f1e:	77 1f       	adc	r23, r23
    2f20:	66 0f       	add	r22, r22
    2f22:	77 1f       	adc	r23, r23
    2f24:	fd 01       	movw	r30, r26
    2f26:	e6 0f       	add	r30, r22
    2f28:	f7 1f       	adc	r31, r23
    2f2a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f2c:	90 a8       	ldd	r9, Z+48	; 0x30
    2f2e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f30:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f32:	ba 01       	movw	r22, r20
    2f34:	a9 01       	movw	r20, r18
    2f36:	48 29       	or	r20, r8
    2f38:	59 29       	or	r21, r9
    2f3a:	6a 29       	or	r22, r10
    2f3c:	7b 29       	or	r23, r11
    2f3e:	47 a7       	std	Z+47, r20	; 0x2f
    2f40:	50 ab       	std	Z+48, r21	; 0x30
    2f42:	61 ab       	std	Z+49, r22	; 0x31
    2f44:	72 ab       	std	Z+50, r23	; 0x32
    2f46:	01 e0       	ldi	r16, 0x01	; 1
    2f48:	34 c0       	rjmp	.+104    	; 0x2fb2 <xTaskGenericNotify+0xfc>
    2f4a:	66 0f       	add	r22, r22
    2f4c:	77 1f       	adc	r23, r23
    2f4e:	66 0f       	add	r22, r22
    2f50:	77 1f       	adc	r23, r23
    2f52:	fd 01       	movw	r30, r26
    2f54:	e6 0f       	add	r30, r22
    2f56:	f7 1f       	adc	r31, r23
    2f58:	47 a5       	ldd	r20, Z+47	; 0x2f
    2f5a:	50 a9       	ldd	r21, Z+48	; 0x30
    2f5c:	61 a9       	ldd	r22, Z+49	; 0x31
    2f5e:	72 a9       	ldd	r23, Z+50	; 0x32
    2f60:	4f 5f       	subi	r20, 0xFF	; 255
    2f62:	5f 4f       	sbci	r21, 0xFF	; 255
    2f64:	6f 4f       	sbci	r22, 0xFF	; 255
    2f66:	7f 4f       	sbci	r23, 0xFF	; 255
    2f68:	47 a7       	std	Z+47, r20	; 0x2f
    2f6a:	50 ab       	std	Z+48, r21	; 0x30
    2f6c:	61 ab       	std	Z+49, r22	; 0x31
    2f6e:	72 ab       	std	Z+50, r23	; 0x32
    2f70:	01 e0       	ldi	r16, 0x01	; 1
    2f72:	1f c0       	rjmp	.+62     	; 0x2fb2 <xTaskGenericNotify+0xfc>
    2f74:	66 0f       	add	r22, r22
    2f76:	77 1f       	adc	r23, r23
    2f78:	66 0f       	add	r22, r22
    2f7a:	77 1f       	adc	r23, r23
    2f7c:	fd 01       	movw	r30, r26
    2f7e:	e6 0f       	add	r30, r22
    2f80:	f7 1f       	adc	r31, r23
    2f82:	27 a7       	std	Z+47, r18	; 0x2f
    2f84:	30 ab       	std	Z+48, r19	; 0x30
    2f86:	41 ab       	std	Z+49, r20	; 0x31
    2f88:	52 ab       	std	Z+50, r21	; 0x32
    2f8a:	01 e0       	ldi	r16, 0x01	; 1
    2f8c:	12 c0       	rjmp	.+36     	; 0x2fb2 <xTaskGenericNotify+0xfc>
    2f8e:	82 30       	cpi	r24, 0x02	; 2
    2f90:	79 f0       	breq	.+30     	; 0x2fb0 <xTaskGenericNotify+0xfa>
    2f92:	66 0f       	add	r22, r22
    2f94:	77 1f       	adc	r23, r23
    2f96:	66 0f       	add	r22, r22
    2f98:	77 1f       	adc	r23, r23
    2f9a:	fd 01       	movw	r30, r26
    2f9c:	e6 0f       	add	r30, r22
    2f9e:	f7 1f       	adc	r31, r23
    2fa0:	27 a7       	std	Z+47, r18	; 0x2f
    2fa2:	30 ab       	std	Z+48, r19	; 0x30
    2fa4:	41 ab       	std	Z+49, r20	; 0x31
    2fa6:	52 ab       	std	Z+50, r21	; 0x32
    2fa8:	01 e0       	ldi	r16, 0x01	; 1
    2faa:	03 c0       	rjmp	.+6      	; 0x2fb2 <xTaskGenericNotify+0xfc>
    2fac:	01 e0       	ldi	r16, 0x01	; 1
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <xTaskGenericNotify+0xfc>
    2fb0:	00 e0       	ldi	r16, 0x00	; 0
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <xTaskGenericNotify+0x102>
    2fb6:	69 c0       	rjmp	.+210    	; 0x308a <xTaskGenericNotify+0x1d4>
    2fb8:	1c 96       	adiw	r26, 0x0c	; 12
    2fba:	ed 91       	ld	r30, X+
    2fbc:	fc 91       	ld	r31, X
    2fbe:	1d 97       	sbiw	r26, 0x0d	; 13
    2fc0:	16 96       	adiw	r26, 0x06	; 6
    2fc2:	cd 91       	ld	r28, X+
    2fc4:	dc 91       	ld	r29, X
    2fc6:	17 97       	sbiw	r26, 0x07	; 7
    2fc8:	18 96       	adiw	r26, 0x08	; 8
    2fca:	8d 91       	ld	r24, X+
    2fcc:	9c 91       	ld	r25, X
    2fce:	19 97       	sbiw	r26, 0x09	; 9
    2fd0:	9f 83       	std	Y+7, r25	; 0x07
    2fd2:	8e 83       	std	Y+6, r24	; 0x06
    2fd4:	18 96       	adiw	r26, 0x08	; 8
    2fd6:	cd 91       	ld	r28, X+
    2fd8:	dc 91       	ld	r29, X
    2fda:	19 97       	sbiw	r26, 0x09	; 9
    2fdc:	16 96       	adiw	r26, 0x06	; 6
    2fde:	8d 91       	ld	r24, X+
    2fe0:	9c 91       	ld	r25, X
    2fe2:	17 97       	sbiw	r26, 0x07	; 7
    2fe4:	9d 83       	std	Y+5, r25	; 0x05
    2fe6:	8c 83       	std	Y+4, r24	; 0x04
    2fe8:	81 81       	ldd	r24, Z+1	; 0x01
    2fea:	92 81       	ldd	r25, Z+2	; 0x02
    2fec:	9d 01       	movw	r18, r26
    2fee:	2e 5f       	subi	r18, 0xFE	; 254
    2ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff2:	82 17       	cp	r24, r18
    2ff4:	93 07       	cpc	r25, r19
    2ff6:	31 f4       	brne	.+12     	; 0x3004 <xTaskGenericNotify+0x14e>
    2ff8:	18 96       	adiw	r26, 0x08	; 8
    2ffa:	8d 91       	ld	r24, X+
    2ffc:	9c 91       	ld	r25, X
    2ffe:	19 97       	sbiw	r26, 0x09	; 9
    3000:	92 83       	std	Z+2, r25	; 0x02
    3002:	81 83       	std	Z+1, r24	; 0x01
    3004:	1d 96       	adiw	r26, 0x0d	; 13
    3006:	1c 92       	st	X, r1
    3008:	1e 92       	st	-X, r1
    300a:	1c 97       	sbiw	r26, 0x0c	; 12
    300c:	80 81       	ld	r24, Z
    300e:	81 50       	subi	r24, 0x01	; 1
    3010:	80 83       	st	Z, r24
    3012:	5a 96       	adiw	r26, 0x1a	; 26
    3014:	ec 91       	ld	r30, X
    3016:	5a 97       	sbiw	r26, 0x1a	; 26
    3018:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <uxTopReadyPriority>
    301c:	8e 17       	cp	r24, r30
    301e:	10 f4       	brcc	.+4      	; 0x3024 <xTaskGenericNotify+0x16e>
    3020:	e0 93 45 12 	sts	0x1245, r30	; 0x801245 <uxTopReadyPriority>
    3024:	8b e0       	ldi	r24, 0x0B	; 11
    3026:	8e 9f       	mul	r24, r30
    3028:	f0 01       	movw	r30, r0
    302a:	11 24       	eor	r1, r1
    302c:	e9 57       	subi	r30, 0x79	; 121
    302e:	fd 4e       	sbci	r31, 0xED	; 237
    3030:	01 80       	ldd	r0, Z+1	; 0x01
    3032:	f2 81       	ldd	r31, Z+2	; 0x02
    3034:	e0 2d       	mov	r30, r0
    3036:	17 96       	adiw	r26, 0x07	; 7
    3038:	fc 93       	st	X, r31
    303a:	ee 93       	st	-X, r30
    303c:	16 97       	sbiw	r26, 0x06	; 6
    303e:	46 81       	ldd	r20, Z+6	; 0x06
    3040:	57 81       	ldd	r21, Z+7	; 0x07
    3042:	19 96       	adiw	r26, 0x09	; 9
    3044:	5c 93       	st	X, r21
    3046:	4e 93       	st	-X, r20
    3048:	18 97       	sbiw	r26, 0x08	; 8
    304a:	c6 81       	ldd	r28, Z+6	; 0x06
    304c:	d7 81       	ldd	r29, Z+7	; 0x07
    304e:	3d 83       	std	Y+5, r19	; 0x05
    3050:	2c 83       	std	Y+4, r18	; 0x04
    3052:	37 83       	std	Z+7, r19	; 0x07
    3054:	26 83       	std	Z+6, r18	; 0x06
    3056:	5a 96       	adiw	r26, 0x1a	; 26
    3058:	ec 91       	ld	r30, X
    305a:	5a 97       	sbiw	r26, 0x1a	; 26
    305c:	8e 9f       	mul	r24, r30
    305e:	f0 01       	movw	r30, r0
    3060:	11 24       	eor	r1, r1
    3062:	e9 57       	subi	r30, 0x79	; 121
    3064:	fd 4e       	sbci	r31, 0xED	; 237
    3066:	1d 96       	adiw	r26, 0x0d	; 13
    3068:	fc 93       	st	X, r31
    306a:	ee 93       	st	-X, r30
    306c:	1c 97       	sbiw	r26, 0x0c	; 12
    306e:	80 81       	ld	r24, Z
    3070:	8f 5f       	subi	r24, 0xFF	; 255
    3072:	80 83       	st	Z, r24
    3074:	5a 96       	adiw	r26, 0x1a	; 26
    3076:	9c 91       	ld	r25, X
    3078:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    307c:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    3080:	82 8d       	ldd	r24, Z+26	; 0x1a
    3082:	89 17       	cp	r24, r25
    3084:	10 f4       	brcc	.+4      	; 0x308a <xTaskGenericNotify+0x1d4>
    3086:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    308a:	0f 90       	pop	r0
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	80 2f       	mov	r24, r16
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	0f 91       	pop	r16
    3096:	ff 90       	pop	r15
    3098:	ef 90       	pop	r14
    309a:	bf 90       	pop	r11
    309c:	af 90       	pop	r10
    309e:	9f 90       	pop	r9
    30a0:	8f 90       	pop	r8
    30a2:	08 95       	ret

000030a4 <xTaskGenericNotifyFromISR>:
    30a4:	8f 92       	push	r8
    30a6:	9f 92       	push	r9
    30a8:	af 92       	push	r10
    30aa:	bf 92       	push	r11
    30ac:	cf 92       	push	r12
    30ae:	df 92       	push	r13
    30b0:	ef 92       	push	r14
    30b2:	ff 92       	push	r15
    30b4:	0f 93       	push	r16
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	dc 01       	movw	r26, r24
    30bc:	e1 14       	cp	r14, r1
    30be:	f1 04       	cpc	r15, r1
    30c0:	89 f0       	breq	.+34     	; 0x30e4 <xTaskGenericNotifyFromISR+0x40>
    30c2:	e6 2f       	mov	r30, r22
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	ee 0f       	add	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	ee 0f       	add	r30, r30
    30cc:	ff 1f       	adc	r31, r31
    30ce:	e8 0f       	add	r30, r24
    30d0:	f9 1f       	adc	r31, r25
    30d2:	87 a4       	ldd	r8, Z+47	; 0x2f
    30d4:	90 a8       	ldd	r9, Z+48	; 0x30
    30d6:	a1 a8       	ldd	r10, Z+49	; 0x31
    30d8:	b2 a8       	ldd	r11, Z+50	; 0x32
    30da:	f7 01       	movw	r30, r14
    30dc:	80 82       	st	Z, r8
    30de:	91 82       	std	Z+1, r9	; 0x01
    30e0:	a2 82       	std	Z+2, r10	; 0x02
    30e2:	b3 82       	std	Z+3, r11	; 0x03
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	fd 01       	movw	r30, r26
    30e8:	e6 0f       	add	r30, r22
    30ea:	f7 1f       	adc	r31, r23
    30ec:	93 a9       	ldd	r25, Z+51	; 0x33
    30ee:	82 e0       	ldi	r24, 0x02	; 2
    30f0:	83 ab       	std	Z+51, r24	; 0x33
    30f2:	02 30       	cpi	r16, 0x02	; 2
    30f4:	01 f1       	breq	.+64     	; 0x3136 <xTaskGenericNotifyFromISR+0x92>
    30f6:	18 f4       	brcc	.+6      	; 0x30fe <xTaskGenericNotifyFromISR+0x5a>
    30f8:	01 30       	cpi	r16, 0x01	; 1
    30fa:	31 f0       	breq	.+12     	; 0x3108 <xTaskGenericNotifyFromISR+0x64>
    30fc:	4d c0       	rjmp	.+154    	; 0x3198 <xTaskGenericNotifyFromISR+0xf4>
    30fe:	03 30       	cpi	r16, 0x03	; 3
    3100:	79 f1       	breq	.+94     	; 0x3160 <xTaskGenericNotifyFromISR+0xbc>
    3102:	04 30       	cpi	r16, 0x04	; 4
    3104:	d1 f1       	breq	.+116    	; 0x317a <xTaskGenericNotifyFromISR+0xd6>
    3106:	48 c0       	rjmp	.+144    	; 0x3198 <xTaskGenericNotifyFromISR+0xf4>
    3108:	66 0f       	add	r22, r22
    310a:	77 1f       	adc	r23, r23
    310c:	66 0f       	add	r22, r22
    310e:	77 1f       	adc	r23, r23
    3110:	fd 01       	movw	r30, r26
    3112:	e6 0f       	add	r30, r22
    3114:	f7 1f       	adc	r31, r23
    3116:	87 a4       	ldd	r8, Z+47	; 0x2f
    3118:	90 a8       	ldd	r9, Z+48	; 0x30
    311a:	a1 a8       	ldd	r10, Z+49	; 0x31
    311c:	b2 a8       	ldd	r11, Z+50	; 0x32
    311e:	ba 01       	movw	r22, r20
    3120:	a9 01       	movw	r20, r18
    3122:	48 29       	or	r20, r8
    3124:	59 29       	or	r21, r9
    3126:	6a 29       	or	r22, r10
    3128:	7b 29       	or	r23, r11
    312a:	47 a7       	std	Z+47, r20	; 0x2f
    312c:	50 ab       	std	Z+48, r21	; 0x30
    312e:	61 ab       	std	Z+49, r22	; 0x31
    3130:	72 ab       	std	Z+50, r23	; 0x32
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	34 c0       	rjmp	.+104    	; 0x319e <xTaskGenericNotifyFromISR+0xfa>
    3136:	66 0f       	add	r22, r22
    3138:	77 1f       	adc	r23, r23
    313a:	66 0f       	add	r22, r22
    313c:	77 1f       	adc	r23, r23
    313e:	fd 01       	movw	r30, r26
    3140:	e6 0f       	add	r30, r22
    3142:	f7 1f       	adc	r31, r23
    3144:	47 a5       	ldd	r20, Z+47	; 0x2f
    3146:	50 a9       	ldd	r21, Z+48	; 0x30
    3148:	61 a9       	ldd	r22, Z+49	; 0x31
    314a:	72 a9       	ldd	r23, Z+50	; 0x32
    314c:	4f 5f       	subi	r20, 0xFF	; 255
    314e:	5f 4f       	sbci	r21, 0xFF	; 255
    3150:	6f 4f       	sbci	r22, 0xFF	; 255
    3152:	7f 4f       	sbci	r23, 0xFF	; 255
    3154:	47 a7       	std	Z+47, r20	; 0x2f
    3156:	50 ab       	std	Z+48, r21	; 0x30
    3158:	61 ab       	std	Z+49, r22	; 0x31
    315a:	72 ab       	std	Z+50, r23	; 0x32
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	1f c0       	rjmp	.+62     	; 0x319e <xTaskGenericNotifyFromISR+0xfa>
    3160:	66 0f       	add	r22, r22
    3162:	77 1f       	adc	r23, r23
    3164:	66 0f       	add	r22, r22
    3166:	77 1f       	adc	r23, r23
    3168:	fd 01       	movw	r30, r26
    316a:	e6 0f       	add	r30, r22
    316c:	f7 1f       	adc	r31, r23
    316e:	27 a7       	std	Z+47, r18	; 0x2f
    3170:	30 ab       	std	Z+48, r19	; 0x30
    3172:	41 ab       	std	Z+49, r20	; 0x31
    3174:	52 ab       	std	Z+50, r21	; 0x32
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	12 c0       	rjmp	.+36     	; 0x319e <xTaskGenericNotifyFromISR+0xfa>
    317a:	92 30       	cpi	r25, 0x02	; 2
    317c:	79 f0       	breq	.+30     	; 0x319c <xTaskGenericNotifyFromISR+0xf8>
    317e:	66 0f       	add	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	66 0f       	add	r22, r22
    3184:	77 1f       	adc	r23, r23
    3186:	fd 01       	movw	r30, r26
    3188:	e6 0f       	add	r30, r22
    318a:	f7 1f       	adc	r31, r23
    318c:	27 a7       	std	Z+47, r18	; 0x2f
    318e:	30 ab       	std	Z+48, r19	; 0x30
    3190:	41 ab       	std	Z+49, r20	; 0x31
    3192:	52 ab       	std	Z+50, r21	; 0x32
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	03 c0       	rjmp	.+6      	; 0x319e <xTaskGenericNotifyFromISR+0xfa>
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	01 c0       	rjmp	.+2      	; 0x319e <xTaskGenericNotifyFromISR+0xfa>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	91 30       	cpi	r25, 0x01	; 1
    31a0:	09 f0       	breq	.+2      	; 0x31a4 <xTaskGenericNotifyFromISR+0x100>
    31a2:	96 c0       	rjmp	.+300    	; 0x32d0 <xTaskGenericNotifyFromISR+0x22c>
    31a4:	90 91 36 12 	lds	r25, 0x1236	; 0x801236 <uxSchedulerSuspended>
    31a8:	91 11       	cpse	r25, r1
    31aa:	5f c0       	rjmp	.+190    	; 0x326a <xTaskGenericNotifyFromISR+0x1c6>
    31ac:	1c 96       	adiw	r26, 0x0c	; 12
    31ae:	ed 91       	ld	r30, X+
    31b0:	fc 91       	ld	r31, X
    31b2:	1d 97       	sbiw	r26, 0x0d	; 13
    31b4:	16 96       	adiw	r26, 0x06	; 6
    31b6:	cd 91       	ld	r28, X+
    31b8:	dc 91       	ld	r29, X
    31ba:	17 97       	sbiw	r26, 0x07	; 7
    31bc:	18 96       	adiw	r26, 0x08	; 8
    31be:	2d 91       	ld	r18, X+
    31c0:	3c 91       	ld	r19, X
    31c2:	19 97       	sbiw	r26, 0x09	; 9
    31c4:	3f 83       	std	Y+7, r19	; 0x07
    31c6:	2e 83       	std	Y+6, r18	; 0x06
    31c8:	18 96       	adiw	r26, 0x08	; 8
    31ca:	cd 91       	ld	r28, X+
    31cc:	dc 91       	ld	r29, X
    31ce:	19 97       	sbiw	r26, 0x09	; 9
    31d0:	16 96       	adiw	r26, 0x06	; 6
    31d2:	2d 91       	ld	r18, X+
    31d4:	3c 91       	ld	r19, X
    31d6:	17 97       	sbiw	r26, 0x07	; 7
    31d8:	3d 83       	std	Y+5, r19	; 0x05
    31da:	2c 83       	std	Y+4, r18	; 0x04
    31dc:	41 81       	ldd	r20, Z+1	; 0x01
    31de:	52 81       	ldd	r21, Z+2	; 0x02
    31e0:	9d 01       	movw	r18, r26
    31e2:	2e 5f       	subi	r18, 0xFE	; 254
    31e4:	3f 4f       	sbci	r19, 0xFF	; 255
    31e6:	42 17       	cp	r20, r18
    31e8:	53 07       	cpc	r21, r19
    31ea:	31 f4       	brne	.+12     	; 0x31f8 <xTaskGenericNotifyFromISR+0x154>
    31ec:	18 96       	adiw	r26, 0x08	; 8
    31ee:	4d 91       	ld	r20, X+
    31f0:	5c 91       	ld	r21, X
    31f2:	19 97       	sbiw	r26, 0x09	; 9
    31f4:	52 83       	std	Z+2, r21	; 0x02
    31f6:	41 83       	std	Z+1, r20	; 0x01
    31f8:	1d 96       	adiw	r26, 0x0d	; 13
    31fa:	1c 92       	st	X, r1
    31fc:	1e 92       	st	-X, r1
    31fe:	1c 97       	sbiw	r26, 0x0c	; 12
    3200:	90 81       	ld	r25, Z
    3202:	91 50       	subi	r25, 0x01	; 1
    3204:	90 83       	st	Z, r25
    3206:	5a 96       	adiw	r26, 0x1a	; 26
    3208:	ec 91       	ld	r30, X
    320a:	5a 97       	sbiw	r26, 0x1a	; 26
    320c:	90 91 45 12 	lds	r25, 0x1245	; 0x801245 <uxTopReadyPriority>
    3210:	9e 17       	cp	r25, r30
    3212:	10 f4       	brcc	.+4      	; 0x3218 <xTaskGenericNotifyFromISR+0x174>
    3214:	e0 93 45 12 	sts	0x1245, r30	; 0x801245 <uxTopReadyPriority>
    3218:	9b e0       	ldi	r25, 0x0B	; 11
    321a:	9e 9f       	mul	r25, r30
    321c:	f0 01       	movw	r30, r0
    321e:	11 24       	eor	r1, r1
    3220:	e9 57       	subi	r30, 0x79	; 121
    3222:	fd 4e       	sbci	r31, 0xED	; 237
    3224:	01 80       	ldd	r0, Z+1	; 0x01
    3226:	f2 81       	ldd	r31, Z+2	; 0x02
    3228:	e0 2d       	mov	r30, r0
    322a:	17 96       	adiw	r26, 0x07	; 7
    322c:	fc 93       	st	X, r31
    322e:	ee 93       	st	-X, r30
    3230:	16 97       	sbiw	r26, 0x06	; 6
    3232:	46 81       	ldd	r20, Z+6	; 0x06
    3234:	57 81       	ldd	r21, Z+7	; 0x07
    3236:	19 96       	adiw	r26, 0x09	; 9
    3238:	5c 93       	st	X, r21
    323a:	4e 93       	st	-X, r20
    323c:	18 97       	sbiw	r26, 0x08	; 8
    323e:	c6 81       	ldd	r28, Z+6	; 0x06
    3240:	d7 81       	ldd	r29, Z+7	; 0x07
    3242:	3d 83       	std	Y+5, r19	; 0x05
    3244:	2c 83       	std	Y+4, r18	; 0x04
    3246:	37 83       	std	Z+7, r19	; 0x07
    3248:	26 83       	std	Z+6, r18	; 0x06
    324a:	5a 96       	adiw	r26, 0x1a	; 26
    324c:	ec 91       	ld	r30, X
    324e:	5a 97       	sbiw	r26, 0x1a	; 26
    3250:	9e 9f       	mul	r25, r30
    3252:	f0 01       	movw	r30, r0
    3254:	11 24       	eor	r1, r1
    3256:	e9 57       	subi	r30, 0x79	; 121
    3258:	fd 4e       	sbci	r31, 0xED	; 237
    325a:	1d 96       	adiw	r26, 0x0d	; 13
    325c:	fc 93       	st	X, r31
    325e:	ee 93       	st	-X, r30
    3260:	1c 97       	sbiw	r26, 0x0c	; 12
    3262:	90 81       	ld	r25, Z
    3264:	9f 5f       	subi	r25, 0xFF	; 255
    3266:	90 83       	st	Z, r25
    3268:	21 c0       	rjmp	.+66     	; 0x32ac <xTaskGenericNotifyFromISR+0x208>
    326a:	62 e6       	ldi	r22, 0x62	; 98
    326c:	72 e1       	ldi	r23, 0x12	; 18
    326e:	fb 01       	movw	r30, r22
    3270:	c1 81       	ldd	r28, Z+1	; 0x01
    3272:	d2 81       	ldd	r29, Z+2	; 0x02
    3274:	53 96       	adiw	r26, 0x13	; 19
    3276:	dc 93       	st	X, r29
    3278:	ce 93       	st	-X, r28
    327a:	52 97       	sbiw	r26, 0x12	; 18
    327c:	2e 81       	ldd	r18, Y+6	; 0x06
    327e:	3f 81       	ldd	r19, Y+7	; 0x07
    3280:	55 96       	adiw	r26, 0x15	; 21
    3282:	3c 93       	st	X, r19
    3284:	2e 93       	st	-X, r18
    3286:	54 97       	sbiw	r26, 0x14	; 20
    3288:	4e 81       	ldd	r20, Y+6	; 0x06
    328a:	5f 81       	ldd	r21, Y+7	; 0x07
    328c:	9d 01       	movw	r18, r26
    328e:	22 5f       	subi	r18, 0xF2	; 242
    3290:	3f 4f       	sbci	r19, 0xFF	; 255
    3292:	fa 01       	movw	r30, r20
    3294:	35 83       	std	Z+5, r19	; 0x05
    3296:	24 83       	std	Z+4, r18	; 0x04
    3298:	3f 83       	std	Y+7, r19	; 0x07
    329a:	2e 83       	std	Y+6, r18	; 0x06
    329c:	59 96       	adiw	r26, 0x19	; 25
    329e:	7c 93       	st	X, r23
    32a0:	6e 93       	st	-X, r22
    32a2:	58 97       	sbiw	r26, 0x18	; 24
    32a4:	fb 01       	movw	r30, r22
    32a6:	90 81       	ld	r25, Z
    32a8:	9f 5f       	subi	r25, 0xFF	; 255
    32aa:	90 83       	st	Z, r25
    32ac:	5a 96       	adiw	r26, 0x1a	; 26
    32ae:	2c 91       	ld	r18, X
    32b0:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    32b4:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>
    32b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    32ba:	92 17       	cp	r25, r18
    32bc:	48 f4       	brcc	.+18     	; 0x32d0 <xTaskGenericNotifyFromISR+0x22c>
    32be:	c1 14       	cp	r12, r1
    32c0:	d1 04       	cpc	r13, r1
    32c2:	19 f0       	breq	.+6      	; 0x32ca <xTaskGenericNotifyFromISR+0x226>
    32c4:	91 e0       	ldi	r25, 0x01	; 1
    32c6:	f6 01       	movw	r30, r12
    32c8:	90 83       	st	Z, r25
    32ca:	91 e0       	ldi	r25, 0x01	; 1
    32cc:	90 93 3f 12 	sts	0x123F, r25	; 0x80123f <xYieldPending>
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	0f 91       	pop	r16
    32d6:	ff 90       	pop	r15
    32d8:	ef 90       	pop	r14
    32da:	df 90       	pop	r13
    32dc:	cf 90       	pop	r12
    32de:	bf 90       	pop	r11
    32e0:	af 90       	pop	r10
    32e2:	9f 90       	pop	r9
    32e4:	8f 90       	pop	r8
    32e6:	08 95       	ret

000032e8 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    32e8:	00 97       	sbiw	r24, 0x00	; 0
    32ea:	21 f4       	brne	.+8      	; 0x32f4 <xTaskGenericNotifyStateClear+0xc>
    32ec:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxCurrentTCB>
    32f0:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	fc 01       	movw	r30, r24
    32fe:	e6 0f       	add	r30, r22
    3300:	f7 1f       	adc	r31, r23
    3302:	23 a9       	ldd	r18, Z+51	; 0x33
    3304:	22 30       	cpi	r18, 0x02	; 2
    3306:	31 f4       	brne	.+12     	; 0x3314 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3308:	fc 01       	movw	r30, r24
    330a:	e6 0f       	add	r30, r22
    330c:	f7 1f       	adc	r31, r23
    330e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	01 c0       	rjmp	.+2      	; 0x3316 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3314:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3316:	0f 90       	pop	r0
    3318:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    331a:	08 95       	ret

0000331c <prvGetNextExpireTime>:
    331c:	dc 01       	movw	r26, r24
    331e:	e0 91 01 13 	lds	r30, 0x1301	; 0x801301 <pxCurrentTimerList>
    3322:	f0 91 02 13 	lds	r31, 0x1302	; 0x801302 <pxCurrentTimerList+0x1>
    3326:	80 81       	ld	r24, Z
    3328:	91 e0       	ldi	r25, 0x01	; 1
    332a:	81 11       	cpse	r24, r1
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	9c 93       	st	X, r25
    3330:	91 11       	cpse	r25, r1
    3332:	08 c0       	rjmp	.+16     	; 0x3344 <prvGetNextExpireTime+0x28>
    3334:	07 80       	ldd	r0, Z+7	; 0x07
    3336:	f0 85       	ldd	r31, Z+8	; 0x08
    3338:	e0 2d       	mov	r30, r0
    333a:	60 81       	ld	r22, Z
    333c:	71 81       	ldd	r23, Z+1	; 0x01
    333e:	82 81       	ldd	r24, Z+2	; 0x02
    3340:	93 81       	ldd	r25, Z+3	; 0x03
    3342:	08 95       	ret
    3344:	60 e0       	ldi	r22, 0x00	; 0
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	cb 01       	movw	r24, r22
    334a:	08 95       	ret

0000334c <prvInsertTimerInActiveList>:
    334c:	cf 92       	push	r12
    334e:	df 92       	push	r13
    3350:	ef 92       	push	r14
    3352:	ff 92       	push	r15
    3354:	0f 93       	push	r16
    3356:	1f 93       	push	r17
    3358:	fc 01       	movw	r30, r24
    335a:	42 83       	std	Z+2, r20	; 0x02
    335c:	53 83       	std	Z+3, r21	; 0x03
    335e:	64 83       	std	Z+4, r22	; 0x04
    3360:	75 83       	std	Z+5, r23	; 0x05
    3362:	93 87       	std	Z+11, r25	; 0x0b
    3364:	82 87       	std	Z+10, r24	; 0x0a
    3366:	04 17       	cp	r16, r20
    3368:	15 07       	cpc	r17, r21
    336a:	26 07       	cpc	r18, r22
    336c:	37 07       	cpc	r19, r23
    336e:	c0 f0       	brcs	.+48     	; 0x33a0 <prvInsertTimerInActiveList+0x54>
    3370:	0c 19       	sub	r16, r12
    3372:	1d 09       	sbc	r17, r13
    3374:	2e 09       	sbc	r18, r14
    3376:	3f 09       	sbc	r19, r15
    3378:	86 85       	ldd	r24, Z+14	; 0x0e
    337a:	97 85       	ldd	r25, Z+15	; 0x0f
    337c:	a0 89       	ldd	r26, Z+16	; 0x10
    337e:	b1 89       	ldd	r27, Z+17	; 0x11
    3380:	08 17       	cp	r16, r24
    3382:	19 07       	cpc	r17, r25
    3384:	2a 07       	cpc	r18, r26
    3386:	3b 07       	cpc	r19, r27
    3388:	00 f5       	brcc	.+64     	; 0x33ca <prvInsertTimerInActiveList+0x7e>
    338a:	bf 01       	movw	r22, r30
    338c:	6e 5f       	subi	r22, 0xFE	; 254
    338e:	7f 4f       	sbci	r23, 0xFF	; 255
    3390:	80 91 ff 12 	lds	r24, 0x12FF	; 0x8012ff <pxOverflowTimerList>
    3394:	90 91 00 13 	lds	r25, 0x1300	; 0x801300 <pxOverflowTimerList+0x1>
    3398:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vListInsert>
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	18 c0       	rjmp	.+48     	; 0x33d0 <prvInsertTimerInActiveList+0x84>
    33a0:	0c 15       	cp	r16, r12
    33a2:	1d 05       	cpc	r17, r13
    33a4:	2e 05       	cpc	r18, r14
    33a6:	3f 05       	cpc	r19, r15
    33a8:	28 f4       	brcc	.+10     	; 0x33b4 <prvInsertTimerInActiveList+0x68>
    33aa:	4c 15       	cp	r20, r12
    33ac:	5d 05       	cpc	r21, r13
    33ae:	6e 05       	cpc	r22, r14
    33b0:	7f 05       	cpc	r23, r15
    33b2:	68 f4       	brcc	.+26     	; 0x33ce <prvInsertTimerInActiveList+0x82>
    33b4:	bf 01       	movw	r22, r30
    33b6:	6e 5f       	subi	r22, 0xFE	; 254
    33b8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ba:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <pxCurrentTimerList>
    33be:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <pxCurrentTimerList+0x1>
    33c2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vListInsert>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	03 c0       	rjmp	.+6      	; 0x33d0 <prvInsertTimerInActiveList+0x84>
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	01 c0       	rjmp	.+2      	; 0x33d0 <prvInsertTimerInActiveList+0x84>
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	ff 90       	pop	r15
    33d6:	ef 90       	pop	r14
    33d8:	df 90       	pop	r13
    33da:	cf 90       	pop	r12
    33dc:	08 95       	ret

000033de <prvCheckForValidListAndQueue>:
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	0f 92       	push	r0
    33e4:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <xTimerQueue>
    33e8:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <xTimerQueue+0x1>
    33ec:	89 2b       	or	r24, r25
    33ee:	e9 f4       	brne	.+58     	; 0x342a <prvCheckForValidListAndQueue+0x4c>
    33f0:	8e e0       	ldi	r24, 0x0E	; 14
    33f2:	93 e1       	ldi	r25, 0x13	; 19
    33f4:	0e 94 c1 04 	call	0x982	; 0x982 <vListInitialise>
    33f8:	83 e0       	ldi	r24, 0x03	; 3
    33fa:	93 e1       	ldi	r25, 0x13	; 19
    33fc:	0e 94 c1 04 	call	0x982	; 0x982 <vListInitialise>
    3400:	8e e0       	ldi	r24, 0x0E	; 14
    3402:	93 e1       	ldi	r25, 0x13	; 19
    3404:	90 93 02 13 	sts	0x1302, r25	; 0x801302 <pxCurrentTimerList+0x1>
    3408:	80 93 01 13 	sts	0x1301, r24	; 0x801301 <pxCurrentTimerList>
    340c:	83 e0       	ldi	r24, 0x03	; 3
    340e:	93 e1       	ldi	r25, 0x13	; 19
    3410:	90 93 00 13 	sts	0x1300, r25	; 0x801300 <pxOverflowTimerList+0x1>
    3414:	80 93 ff 12 	sts	0x12FF, r24	; 0x8012ff <pxOverflowTimerList>
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	67 e0       	ldi	r22, 0x07	; 7
    341c:	8a e0       	ldi	r24, 0x0A	; 10
    341e:	0e 94 84 07 	call	0xf08	; 0xf08 <xQueueGenericCreate>
    3422:	90 93 fe 12 	sts	0x12FE, r25	; 0x8012fe <xTimerQueue+0x1>
    3426:	80 93 fd 12 	sts	0x12FD, r24	; 0x8012fd <xTimerQueue>
    342a:	0f 90       	pop	r0
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	08 95       	ret

00003430 <xTimerCreateTimerTask>:
    3430:	ef 92       	push	r14
    3432:	ff 92       	push	r15
    3434:	0f 93       	push	r16
    3436:	d3 df       	rcall	.-90     	; 0x33de <prvCheckForValidListAndQueue>
    3438:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <xTimerQueue>
    343c:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <xTimerQueue+0x1>
    3440:	89 2b       	or	r24, r25
    3442:	91 f0       	breq	.+36     	; 0x3468 <xTimerCreateTimerTask+0x38>
    3444:	0f 2e       	mov	r0, r31
    3446:	fb ef       	ldi	r31, 0xFB	; 251
    3448:	ef 2e       	mov	r14, r31
    344a:	f2 e1       	ldi	r31, 0x12	; 18
    344c:	ff 2e       	mov	r15, r31
    344e:	f0 2d       	mov	r31, r0
    3450:	03 e0       	ldi	r16, 0x03	; 3
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 ec       	ldi	r20, 0xC0	; 192
    3458:	50 e0       	ldi	r21, 0x00	; 0
    345a:	66 ec       	ldi	r22, 0xC6	; 198
    345c:	72 e0       	ldi	r23, 0x02	; 2
    345e:	87 ed       	ldi	r24, 0xD7	; 215
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskCreate>
    3466:	01 c0       	rjmp	.+2      	; 0x346a <xTimerCreateTimerTask+0x3a>
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	0f 91       	pop	r16
    346c:	ff 90       	pop	r15
    346e:	ef 90       	pop	r14
    3470:	08 95       	ret

00003472 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3472:	8f 92       	push	r8
    3474:	9f 92       	push	r9
    3476:	af 92       	push	r10
    3478:	bf 92       	push	r11
    347a:	cf 92       	push	r12
    347c:	df 92       	push	r13
    347e:	ef 92       	push	r14
    3480:	ff 92       	push	r15
    3482:	0f 93       	push	r16
    3484:	1f 93       	push	r17
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	27 97       	sbiw	r28, 0x07	; 7
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    349a:	e0 91 fd 12 	lds	r30, 0x12FD	; 0x8012fd <xTimerQueue>
    349e:	f0 91 fe 12 	lds	r31, 0x12FE	; 0x8012fe <xTimerQueue+0x1>
    34a2:	30 97       	sbiw	r30, 0x00	; 0
    34a4:	81 f1       	breq	.+96     	; 0x3506 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    34a6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    34a8:	2a 83       	std	Y+2, r18	; 0x02
    34aa:	3b 83       	std	Y+3, r19	; 0x03
    34ac:	4c 83       	std	Y+4, r20	; 0x04
    34ae:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    34b0:	9f 83       	std	Y+7, r25	; 0x07
    34b2:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    34b4:	66 30       	cpi	r22, 0x06	; 6
    34b6:	f4 f4       	brge	.+60     	; 0x34f4 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    34b8:	c3 da       	rcall	.-2682   	; 0x2a40 <xTaskGetSchedulerState>
    34ba:	82 30       	cpi	r24, 0x02	; 2
    34bc:	69 f4       	brne	.+26     	; 0x34d8 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    34be:	00 e0       	ldi	r16, 0x00	; 0
    34c0:	a7 01       	movw	r20, r14
    34c2:	96 01       	movw	r18, r12
    34c4:	be 01       	movw	r22, r28
    34c6:	6f 5f       	subi	r22, 0xFF	; 255
    34c8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ca:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <xTimerQueue>
    34ce:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <xTimerQueue+0x1>
    34d2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xQueueGenericSend>
    34d6:	18 c0       	rjmp	.+48     	; 0x3508 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    34d8:	00 e0       	ldi	r16, 0x00	; 0
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	a9 01       	movw	r20, r18
    34e0:	be 01       	movw	r22, r28
    34e2:	6f 5f       	subi	r22, 0xFF	; 255
    34e4:	7f 4f       	sbci	r23, 0xFF	; 255
    34e6:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <xTimerQueue>
    34ea:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <xTimerQueue+0x1>
    34ee:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xQueueGenericSend>
    34f2:	0a c0       	rjmp	.+20     	; 0x3508 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	a8 01       	movw	r20, r16
    34f8:	be 01       	movw	r22, r28
    34fa:	6f 5f       	subi	r22, 0xFF	; 255
    34fc:	7f 4f       	sbci	r23, 0xFF	; 255
    34fe:	cf 01       	movw	r24, r30
    3500:	0e 94 39 08 	call	0x1072	; 0x1072 <xQueueGenericSendFromISR>
    3504:	01 c0       	rjmp	.+2      	; 0x3508 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3506:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3508:	27 96       	adiw	r28, 0x07	; 7
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	cf 90       	pop	r12
    3524:	bf 90       	pop	r11
    3526:	af 90       	pop	r10
    3528:	9f 90       	pop	r9
    352a:	8f 90       	pop	r8
    352c:	08 95       	ret

0000352e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    352e:	8f 92       	push	r8
    3530:	9f 92       	push	r9
    3532:	af 92       	push	r10
    3534:	bf 92       	push	r11
    3536:	cf 92       	push	r12
    3538:	df 92       	push	r13
    353a:	ef 92       	push	r14
    353c:	ff 92       	push	r15
    353e:	0f 93       	push	r16
    3540:	1f 93       	push	r17
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3546:	3b c0       	rjmp	.+118    	; 0x35be <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3548:	07 80       	ldd	r0, Z+7	; 0x07
    354a:	f0 85       	ldd	r31, Z+8	; 0x08
    354c:	e0 2d       	mov	r30, r0
    354e:	80 80       	ld	r8, Z
    3550:	91 80       	ldd	r9, Z+1	; 0x01
    3552:	a2 80       	ldd	r10, Z+2	; 0x02
    3554:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3556:	c0 85       	ldd	r28, Z+8	; 0x08
    3558:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    355a:	8e 01       	movw	r16, r28
    355c:	0e 5f       	subi	r16, 0xFE	; 254
    355e:	1f 4f       	sbci	r17, 0xFF	; 255
    3560:	c8 01       	movw	r24, r16
    3562:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3566:	ec 89       	ldd	r30, Y+20	; 0x14
    3568:	fd 89       	ldd	r31, Y+21	; 0x15
    356a:	ce 01       	movw	r24, r28
    356c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    356e:	8e 89       	ldd	r24, Y+22	; 0x16
    3570:	82 ff       	sbrs	r24, 2
    3572:	25 c0       	rjmp	.+74     	; 0x35be <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3574:	8e 85       	ldd	r24, Y+14	; 0x0e
    3576:	9f 85       	ldd	r25, Y+15	; 0x0f
    3578:	a8 89       	ldd	r26, Y+16	; 0x10
    357a:	b9 89       	ldd	r27, Y+17	; 0x11
    357c:	88 0d       	add	r24, r8
    357e:	99 1d       	adc	r25, r9
    3580:	aa 1d       	adc	r26, r10
    3582:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3584:	88 16       	cp	r8, r24
    3586:	99 06       	cpc	r9, r25
    3588:	aa 06       	cpc	r10, r26
    358a:	bb 06       	cpc	r11, r27
    358c:	70 f4       	brcc	.+28     	; 0x35aa <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    358e:	8a 83       	std	Y+2, r24	; 0x02
    3590:	9b 83       	std	Y+3, r25	; 0x03
    3592:	ac 83       	std	Y+4, r26	; 0x04
    3594:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3596:	db 87       	std	Y+11, r29	; 0x0b
    3598:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    359a:	b8 01       	movw	r22, r16
    359c:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <pxCurrentTimerList>
    35a0:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <pxCurrentTimerList+0x1>
    35a4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vListInsert>
    35a8:	0a c0       	rjmp	.+20     	; 0x35be <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    35aa:	c1 2c       	mov	r12, r1
    35ac:	d1 2c       	mov	r13, r1
    35ae:	76 01       	movw	r14, r12
    35b0:	00 e0       	ldi	r16, 0x00	; 0
    35b2:	10 e0       	ldi	r17, 0x00	; 0
    35b4:	a5 01       	movw	r20, r10
    35b6:	94 01       	movw	r18, r8
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	ce 01       	movw	r24, r28
    35bc:	5a df       	rcall	.-332    	; 0x3472 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    35be:	e0 91 01 13 	lds	r30, 0x1301	; 0x801301 <pxCurrentTimerList>
    35c2:	f0 91 02 13 	lds	r31, 0x1302	; 0x801302 <pxCurrentTimerList+0x1>
    35c6:	80 81       	ld	r24, Z
    35c8:	81 11       	cpse	r24, r1
    35ca:	be cf       	rjmp	.-132    	; 0x3548 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    35cc:	80 91 ff 12 	lds	r24, 0x12FF	; 0x8012ff <pxOverflowTimerList>
    35d0:	90 91 00 13 	lds	r25, 0x1300	; 0x801300 <pxOverflowTimerList+0x1>
    35d4:	90 93 02 13 	sts	0x1302, r25	; 0x801302 <pxCurrentTimerList+0x1>
    35d8:	80 93 01 13 	sts	0x1301, r24	; 0x801301 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    35dc:	f0 93 00 13 	sts	0x1300, r31	; 0x801300 <pxOverflowTimerList+0x1>
    35e0:	e0 93 ff 12 	sts	0x12FF, r30	; 0x8012ff <pxOverflowTimerList>
    }
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	ff 90       	pop	r15
    35ee:	ef 90       	pop	r14
    35f0:	df 90       	pop	r13
    35f2:	cf 90       	pop	r12
    35f4:	bf 90       	pop	r11
    35f6:	af 90       	pop	r10
    35f8:	9f 90       	pop	r9
    35fa:	8f 90       	pop	r8
    35fc:	08 95       	ret

000035fe <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    35fe:	cf 92       	push	r12
    3600:	df 92       	push	r13
    3602:	ef 92       	push	r14
    3604:	ff 92       	push	r15
    3606:	cf 93       	push	r28
    3608:	df 93       	push	r29
    360a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    360c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <xTaskGetTickCount>
    3610:	6b 01       	movw	r12, r22
    3612:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3614:	80 91 f7 12 	lds	r24, 0x12F7	; 0x8012f7 <xLastTime.2436>
    3618:	90 91 f8 12 	lds	r25, 0x12F8	; 0x8012f8 <xLastTime.2436+0x1>
    361c:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <xLastTime.2436+0x2>
    3620:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <xLastTime.2436+0x3>
    3624:	c8 16       	cp	r12, r24
    3626:	d9 06       	cpc	r13, r25
    3628:	ea 06       	cpc	r14, r26
    362a:	fb 06       	cpc	r15, r27
    362c:	20 f4       	brcc	.+8      	; 0x3636 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    362e:	7f df       	rcall	.-258    	; 0x352e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	88 83       	st	Y, r24
    3634:	01 c0       	rjmp	.+2      	; 0x3638 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3636:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3638:	c0 92 f7 12 	sts	0x12F7, r12	; 0x8012f7 <xLastTime.2436>
    363c:	d0 92 f8 12 	sts	0x12F8, r13	; 0x8012f8 <xLastTime.2436+0x1>
    3640:	e0 92 f9 12 	sts	0x12F9, r14	; 0x8012f9 <xLastTime.2436+0x2>
    3644:	f0 92 fa 12 	sts	0x12FA, r15	; 0x8012fa <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3648:	c7 01       	movw	r24, r14
    364a:	b6 01       	movw	r22, r12
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	ff 90       	pop	r15
    3652:	ef 90       	pop	r14
    3654:	df 90       	pop	r13
    3656:	cf 90       	pop	r12
    3658:	08 95       	ret

0000365a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    365a:	4f 92       	push	r4
    365c:	5f 92       	push	r5
    365e:	6f 92       	push	r6
    3660:	7f 92       	push	r7
    3662:	8f 92       	push	r8
    3664:	9f 92       	push	r9
    3666:	af 92       	push	r10
    3668:	bf 92       	push	r11
    366a:	cf 92       	push	r12
    366c:	df 92       	push	r13
    366e:	ef 92       	push	r14
    3670:	ff 92       	push	r15
    3672:	0f 93       	push	r16
    3674:	1f 93       	push	r17
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	4b 01       	movw	r8, r22
    367c:	5c 01       	movw	r10, r24
    367e:	29 01       	movw	r4, r18
    3680:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3682:	e0 91 01 13 	lds	r30, 0x1301	; 0x801301 <pxCurrentTimerList>
    3686:	f0 91 02 13 	lds	r31, 0x1302	; 0x801302 <pxCurrentTimerList+0x1>
    368a:	07 80       	ldd	r0, Z+7	; 0x07
    368c:	f0 85       	ldd	r31, Z+8	; 0x08
    368e:	e0 2d       	mov	r30, r0
    3690:	c0 85       	ldd	r28, Z+8	; 0x08
    3692:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3694:	ce 01       	movw	r24, r28
    3696:	02 96       	adiw	r24, 0x02	; 2
    3698:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    369c:	8e 89       	ldd	r24, Y+22	; 0x16
    369e:	82 ff       	sbrs	r24, 2
    36a0:	1b c0       	rjmp	.+54     	; 0x36d8 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    36a2:	4e 85       	ldd	r20, Y+14	; 0x0e
    36a4:	5f 85       	ldd	r21, Y+15	; 0x0f
    36a6:	68 89       	ldd	r22, Y+16	; 0x10
    36a8:	79 89       	ldd	r23, Y+17	; 0x11
    36aa:	48 0d       	add	r20, r8
    36ac:	59 1d       	adc	r21, r9
    36ae:	6a 1d       	adc	r22, r10
    36b0:	7b 1d       	adc	r23, r11
    36b2:	75 01       	movw	r14, r10
    36b4:	64 01       	movw	r12, r8
    36b6:	93 01       	movw	r18, r6
    36b8:	82 01       	movw	r16, r4
    36ba:	ce 01       	movw	r24, r28
    36bc:	47 de       	rcall	.-882    	; 0x334c <prvInsertTimerInActiveList>
    36be:	88 23       	and	r24, r24
    36c0:	69 f0       	breq	.+26     	; 0x36dc <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    36c2:	c1 2c       	mov	r12, r1
    36c4:	d1 2c       	mov	r13, r1
    36c6:	76 01       	movw	r14, r12
    36c8:	00 e0       	ldi	r16, 0x00	; 0
    36ca:	10 e0       	ldi	r17, 0x00	; 0
    36cc:	a5 01       	movw	r20, r10
    36ce:	94 01       	movw	r18, r8
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	ce 01       	movw	r24, r28
    36d4:	ce de       	rcall	.-612    	; 0x3472 <xTimerGenericCommand>
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    36d8:	8e 7f       	andi	r24, 0xFE	; 254
    36da:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    36dc:	ec 89       	ldd	r30, Y+20	; 0x14
    36de:	fd 89       	ldd	r31, Y+21	; 0x15
    36e0:	ce 01       	movw	r24, r28
    36e2:	19 95       	eicall
    }
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	1f 91       	pop	r17
    36ea:	0f 91       	pop	r16
    36ec:	ff 90       	pop	r15
    36ee:	ef 90       	pop	r14
    36f0:	df 90       	pop	r13
    36f2:	cf 90       	pop	r12
    36f4:	bf 90       	pop	r11
    36f6:	af 90       	pop	r10
    36f8:	9f 90       	pop	r9
    36fa:	8f 90       	pop	r8
    36fc:	7f 90       	pop	r7
    36fe:	6f 90       	pop	r6
    3700:	5f 90       	pop	r5
    3702:	4f 90       	pop	r4
    3704:	08 95       	ret

00003706 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3706:	8f 92       	push	r8
    3708:	9f 92       	push	r9
    370a:	af 92       	push	r10
    370c:	bf 92       	push	r11
    370e:	cf 92       	push	r12
    3710:	df 92       	push	r13
    3712:	ef 92       	push	r14
    3714:	ff 92       	push	r15
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	1f 92       	push	r1
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	6b 01       	movw	r12, r22
    3724:	7c 01       	movw	r14, r24
    3726:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3728:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    372c:	ce 01       	movw	r24, r28
    372e:	01 96       	adiw	r24, 0x01	; 1
    3730:	66 df       	rcall	.-308    	; 0x35fe <prvSampleTimeNow>
    3732:	4b 01       	movw	r8, r22
    3734:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	81 11       	cpse	r24, r1
    373a:	2d c0       	rjmp	.+90     	; 0x3796 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    373c:	11 11       	cpse	r17, r1
    373e:	0d c0       	rjmp	.+26     	; 0x375a <prvProcessTimerOrBlockTask+0x54>
    3740:	8c 14       	cp	r8, r12
    3742:	9d 04       	cpc	r9, r13
    3744:	ae 04       	cpc	r10, r14
    3746:	bf 04       	cpc	r11, r15
    3748:	40 f0       	brcs	.+16     	; 0x375a <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    374a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    374e:	a5 01       	movw	r20, r10
    3750:	94 01       	movw	r18, r8
    3752:	c7 01       	movw	r24, r14
    3754:	b6 01       	movw	r22, r12
    3756:	81 df       	rcall	.-254    	; 0x365a <prvProcessExpiredTimer>
    3758:	20 c0       	rjmp	.+64     	; 0x379a <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    375a:	11 23       	and	r17, r17
    375c:	41 f0       	breq	.+16     	; 0x376e <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    375e:	e0 91 ff 12 	lds	r30, 0x12FF	; 0x8012ff <pxOverflowTimerList>
    3762:	f0 91 00 13 	lds	r31, 0x1300	; 0x801300 <pxOverflowTimerList+0x1>
    3766:	80 81       	ld	r24, Z
    3768:	11 e0       	ldi	r17, 0x01	; 1
    376a:	81 11       	cpse	r24, r1
    376c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    376e:	b7 01       	movw	r22, r14
    3770:	a6 01       	movw	r20, r12
    3772:	48 19       	sub	r20, r8
    3774:	59 09       	sbc	r21, r9
    3776:	6a 09       	sbc	r22, r10
    3778:	7b 09       	sbc	r23, r11
    377a:	21 2f       	mov	r18, r17
    377c:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <xTimerQueue>
    3780:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <xTimerQueue+0x1>
    3784:	0e 94 b4 09 	call	0x1368	; 0x1368 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3788:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>
    378c:	81 11       	cpse	r24, r1
    378e:	05 c0       	rjmp	.+10     	; 0x379a <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3790:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    3794:	02 c0       	rjmp	.+4      	; 0x379a <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3796:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskResumeAll>
            }
        }
    }
    379a:	0f 90       	pop	r0
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	1f 91       	pop	r17
    37a2:	ff 90       	pop	r15
    37a4:	ef 90       	pop	r14
    37a6:	df 90       	pop	r13
    37a8:	cf 90       	pop	r12
    37aa:	bf 90       	pop	r11
    37ac:	af 90       	pop	r10
    37ae:	9f 90       	pop	r9
    37b0:	8f 90       	pop	r8
    37b2:	08 95       	ret

000037b4 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    37b4:	af 92       	push	r10
    37b6:	bf 92       	push	r11
    37b8:	cf 92       	push	r12
    37ba:	df 92       	push	r13
    37bc:	ef 92       	push	r14
    37be:	ff 92       	push	r15
    37c0:	0f 93       	push	r16
    37c2:	1f 93       	push	r17
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	28 97       	sbiw	r28, 0x08	; 8
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	f8 94       	cli
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	0f be       	out	0x3f, r0	; 63
    37d6:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    37d8:	82 c0       	rjmp	.+260    	; 0x38de <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	88 23       	and	r24, r24
    37de:	0c f4       	brge	.+2      	; 0x37e2 <prvProcessReceivedCommands+0x2e>
    37e0:	7e c0       	rjmp	.+252    	; 0x38de <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    37e2:	ae 80       	ldd	r10, Y+6	; 0x06
    37e4:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    37e6:	d5 01       	movw	r26, r10
    37e8:	1c 96       	adiw	r26, 0x0c	; 12
    37ea:	8d 91       	ld	r24, X+
    37ec:	9c 91       	ld	r25, X
    37ee:	1d 97       	sbiw	r26, 0x0d	; 13
    37f0:	89 2b       	or	r24, r25
    37f2:	21 f0       	breq	.+8      	; 0x37fc <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37f4:	c5 01       	movw	r24, r10
    37f6:	02 96       	adiw	r24, 0x02	; 2
    37f8:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    37fc:	ce 01       	movw	r24, r28
    37fe:	08 96       	adiw	r24, 0x08	; 8
    3800:	fe de       	rcall	.-516    	; 0x35fe <prvSampleTimeNow>
    3802:	8b 01       	movw	r16, r22
    3804:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3806:	e9 81       	ldd	r30, Y+1	; 0x01
    3808:	0e 2e       	mov	r0, r30
    380a:	00 0c       	add	r0, r0
    380c:	ff 0b       	sbc	r31, r31
    380e:	ea 30       	cpi	r30, 0x0A	; 10
    3810:	f1 05       	cpc	r31, r1
    3812:	08 f0       	brcs	.+2      	; 0x3816 <prvProcessReceivedCommands+0x62>
    3814:	64 c0       	rjmp	.+200    	; 0x38de <prvProcessReceivedCommands+0x12a>
    3816:	88 27       	eor	r24, r24
    3818:	ee 58       	subi	r30, 0x8E	; 142
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	8f 4f       	sbci	r24, 0xFF	; 255
    381e:	0c 94 df 2d 	jmp	0x5bbe	; 0x5bbe <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3822:	f5 01       	movw	r30, r10
    3824:	86 89       	ldd	r24, Z+22	; 0x16
    3826:	81 60       	ori	r24, 0x01	; 1
    3828:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    382a:	ca 80       	ldd	r12, Y+2	; 0x02
    382c:	db 80       	ldd	r13, Y+3	; 0x03
    382e:	ec 80       	ldd	r14, Y+4	; 0x04
    3830:	fd 80       	ldd	r15, Y+5	; 0x05
    3832:	46 85       	ldd	r20, Z+14	; 0x0e
    3834:	57 85       	ldd	r21, Z+15	; 0x0f
    3836:	60 89       	ldd	r22, Z+16	; 0x10
    3838:	71 89       	ldd	r23, Z+17	; 0x11
    383a:	4c 0d       	add	r20, r12
    383c:	5d 1d       	adc	r21, r13
    383e:	6e 1d       	adc	r22, r14
    3840:	7f 1d       	adc	r23, r15
    3842:	c5 01       	movw	r24, r10
    3844:	83 dd       	rcall	.-1274   	; 0x334c <prvInsertTimerInActiveList>
    3846:	88 23       	and	r24, r24
    3848:	09 f4       	brne	.+2      	; 0x384c <prvProcessReceivedCommands+0x98>
    384a:	49 c0       	rjmp	.+146    	; 0x38de <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    384c:	d5 01       	movw	r26, r10
    384e:	54 96       	adiw	r26, 0x14	; 20
    3850:	ed 91       	ld	r30, X+
    3852:	fc 91       	ld	r31, X
    3854:	55 97       	sbiw	r26, 0x15	; 21
    3856:	c5 01       	movw	r24, r10
    3858:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    385a:	f5 01       	movw	r30, r10
    385c:	86 89       	ldd	r24, Z+22	; 0x16
    385e:	82 ff       	sbrs	r24, 2
    3860:	3e c0       	rjmp	.+124    	; 0x38de <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3862:	4a 81       	ldd	r20, Y+2	; 0x02
    3864:	5b 81       	ldd	r21, Y+3	; 0x03
    3866:	6c 81       	ldd	r22, Y+4	; 0x04
    3868:	7d 81       	ldd	r23, Y+5	; 0x05
    386a:	86 85       	ldd	r24, Z+14	; 0x0e
    386c:	97 85       	ldd	r25, Z+15	; 0x0f
    386e:	a0 89       	ldd	r26, Z+16	; 0x10
    3870:	b1 89       	ldd	r27, Z+17	; 0x11
    3872:	9a 01       	movw	r18, r20
    3874:	ab 01       	movw	r20, r22
    3876:	28 0f       	add	r18, r24
    3878:	39 1f       	adc	r19, r25
    387a:	4a 1f       	adc	r20, r26
    387c:	5b 1f       	adc	r21, r27
    387e:	c1 2c       	mov	r12, r1
    3880:	d1 2c       	mov	r13, r1
    3882:	76 01       	movw	r14, r12
    3884:	00 e0       	ldi	r16, 0x00	; 0
    3886:	10 e0       	ldi	r17, 0x00	; 0
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	c5 01       	movw	r24, r10
    388c:	f2 dd       	rcall	.-1052   	; 0x3472 <xTimerGenericCommand>
    388e:	27 c0       	rjmp	.+78     	; 0x38de <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3890:	d5 01       	movw	r26, r10
    3892:	56 96       	adiw	r26, 0x16	; 22
    3894:	8c 91       	ld	r24, X
    3896:	56 97       	sbiw	r26, 0x16	; 22
    3898:	8e 7f       	andi	r24, 0xFE	; 254
    389a:	56 96       	adiw	r26, 0x16	; 22
    389c:	8c 93       	st	X, r24
                        break;
    389e:	1f c0       	rjmp	.+62     	; 0x38de <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    38a0:	f5 01       	movw	r30, r10
    38a2:	86 89       	ldd	r24, Z+22	; 0x16
    38a4:	81 60       	ori	r24, 0x01	; 1
    38a6:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    38a8:	4a 81       	ldd	r20, Y+2	; 0x02
    38aa:	5b 81       	ldd	r21, Y+3	; 0x03
    38ac:	6c 81       	ldd	r22, Y+4	; 0x04
    38ae:	7d 81       	ldd	r23, Y+5	; 0x05
    38b0:	46 87       	std	Z+14, r20	; 0x0e
    38b2:	57 87       	std	Z+15, r21	; 0x0f
    38b4:	60 8b       	std	Z+16, r22	; 0x10
    38b6:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    38b8:	40 0f       	add	r20, r16
    38ba:	51 1f       	adc	r21, r17
    38bc:	62 1f       	adc	r22, r18
    38be:	73 1f       	adc	r23, r19
    38c0:	68 01       	movw	r12, r16
    38c2:	79 01       	movw	r14, r18
    38c4:	c5 01       	movw	r24, r10
    38c6:	42 dd       	rcall	.-1404   	; 0x334c <prvInsertTimerInActiveList>
                        break;
    38c8:	0a c0       	rjmp	.+20     	; 0x38de <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    38ca:	f5 01       	movw	r30, r10
    38cc:	86 89       	ldd	r24, Z+22	; 0x16
    38ce:	81 fd       	sbrc	r24, 1
    38d0:	04 c0       	rjmp	.+8      	; 0x38da <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    38d2:	c5 01       	movw	r24, r10
    38d4:	0e 94 84 04 	call	0x908	; 0x908 <vPortFree>
    38d8:	02 c0       	rjmp	.+4      	; 0x38de <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    38da:	8e 7f       	andi	r24, 0xFE	; 254
    38dc:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	a9 01       	movw	r20, r18
    38e4:	be 01       	movw	r22, r28
    38e6:	6f 5f       	subi	r22, 0xFF	; 255
    38e8:	7f 4f       	sbci	r23, 0xFF	; 255
    38ea:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <xTimerQueue>
    38ee:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <xTimerQueue+0x1>
    38f2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <xQueueReceive>
    38f6:	81 11       	cpse	r24, r1
    38f8:	70 cf       	rjmp	.-288    	; 0x37da <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    38fa:	28 96       	adiw	r28, 0x08	; 8
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	bf 90       	pop	r11
    3918:	af 90       	pop	r10
    391a:	08 95       	ret

0000391c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    391c:	08 95       	ret

0000391e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    391e:	84 b1       	in	r24, 0x04	; 4
    3920:	80 68       	ori	r24, 0x80	; 128
    3922:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3924:	85 b1       	in	r24, 0x05	; 5
    3926:	80 68       	ori	r24, 0x80	; 128
    3928:	85 b9       	out	0x05, r24	; 5
    392a:	08 95       	ret

0000392c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    392c:	83 b1       	in	r24, 0x03	; 3
    392e:	80 68       	ori	r24, 0x80	; 128
    3930:	83 b9       	out	0x03, r24	; 3
    3932:	08 95       	ret

00003934 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3934:	f4 df       	rcall	.-24     	; 0x391e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3936:	2f ef       	ldi	r18, 0xFF	; 255
    3938:	80 e7       	ldi	r24, 0x70	; 112
    393a:	92 e0       	ldi	r25, 0x02	; 2
    393c:	21 50       	subi	r18, 0x01	; 1
    393e:	80 40       	sbci	r24, 0x00	; 0
    3940:	90 40       	sbci	r25, 0x00	; 0
    3942:	e1 f7       	brne	.-8      	; 0x393c <vApplicationMallocFailedHook+0x8>
    3944:	00 c0       	rjmp	.+0      	; 0x3946 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3946:	00 00       	nop
    3948:	f1 df       	rcall	.-30     	; 0x392c <prvBlinkMainLed>
    394a:	f5 cf       	rjmp	.-22     	; 0x3936 <vApplicationMallocFailedHook+0x2>

0000394c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    394c:	e8 df       	rcall	.-48     	; 0x391e <prvSetMainLedOn>
    394e:	2f ef       	ldi	r18, 0xFF	; 255
    3950:	87 ea       	ldi	r24, 0xA7	; 167
    3952:	91 e6       	ldi	r25, 0x61	; 97
    3954:	21 50       	subi	r18, 0x01	; 1
    3956:	80 40       	sbci	r24, 0x00	; 0
    3958:	90 40       	sbci	r25, 0x00	; 0
    395a:	e1 f7       	brne	.-8      	; 0x3954 <vApplicationStackOverflowHook+0x8>
    395c:	00 c0       	rjmp	.+0      	; 0x395e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    395e:	00 00       	nop
    3960:	e5 df       	rcall	.-54     	; 0x392c <prvBlinkMainLed>
    3962:	f5 cf       	rjmp	.-22     	; 0x394e <vApplicationStackOverflowHook+0x2>

00003964 <_lora_setup>:
 #define LORA_appKEY "266F209D5D1F15A2AF87F013DC002926"

 static char _out_buf[100];

 static void _lora_setup(void)
 {
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	0e 94 8c 29 	call	0x5318	; 0x5318 <status_leds_slowBlink>

	 // Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    396e:	aa d4       	rcall	.+2388   	; 0x42c4 <lora_driver_rn2483FactoryReset>
    3970:	26 d7       	rcall	.+3660   	; 0x47be <lora_driver_mapReturnCodeToText>
    3972:	9f 93       	push	r25
    3974:	8f 93       	push	r24
    3976:	8e ec       	ldi	r24, 0xCE	; 206
    3978:	92 e0       	ldi	r25, 0x02	; 2
    397a:	9f 93       	push	r25
    397c:	8f 93       	push	r24
    397e:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3982:	1e d6       	rcall	.+3132   	; 0x45c0 <lora_driver_configureToEu868>
    3984:	1c d7       	rcall	.+3640   	; 0x47be <lora_driver_mapReturnCodeToText>
    3986:	9f 93       	push	r25
    3988:	8f 93       	push	r24
    398a:	81 ee       	ldi	r24, 0xE1	; 225
    398c:	92 e0       	ldi	r25, 0x02	; 2
    398e:	9f 93       	push	r25
    3990:	8f 93       	push	r24
    3992:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3996:	89 e1       	ldi	r24, 0x19	; 25

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
    3998:	93 e1       	ldi	r25, 0x13	; 19
    399a:	a6 d4       	rcall	.+2380   	; 0x42e8 <lora_driver_getRn2483Hweui>
    399c:	10 d7       	rcall	.+3616   	; 0x47be <lora_driver_mapReturnCodeToText>
    399e:	c9 e1       	ldi	r28, 0x19	; 25
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    39a0:	d3 e1       	ldi	r29, 0x13	; 19
    39a2:	df 93       	push	r29
    39a4:	cf 93       	push	r28
    39a6:	9f 93       	push	r25
    39a8:	8f 93       	push	r24
    39aa:	8a ef       	ldi	r24, 0xFA	; 250
    39ac:	92 e0       	ldi	r25, 0x02	; 2
    39ae:	9f 93       	push	r25
    39b0:	8f 93       	push	r24
    39b2:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    39b6:	ce 01       	movw	r24, r28

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    39b8:	b3 d4       	rcall	.+2406   	; 0x4320 <lora_driver_setDeviceIdentifier>
    39ba:	01 d7       	rcall	.+3586   	; 0x47be <lora_driver_mapReturnCodeToText>
    39bc:	9f 93       	push	r25
    39be:	8f 93       	push	r24
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	8e e0       	ldi	r24, 0x0E	; 14
    39c6:	93 e0       	ldi	r25, 0x03	; 3
    39c8:	9f 93       	push	r25
    39ca:	8f 93       	push	r24
    39cc:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    39d0:	ae 01       	movw	r20, r28

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    39d2:	63 e2       	ldi	r22, 0x23	; 35
    39d4:	73 e0       	ldi	r23, 0x03	; 3
    39d6:	84 e4       	ldi	r24, 0x44	; 68
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	d0 d6       	rcall	.+3488   	; 0x477c <lora_driver_setOtaaIdentity>
    39dc:	f0 d6       	rcall	.+3552   	; 0x47be <lora_driver_mapReturnCodeToText>
    39de:	9f 93       	push	r25
    39e0:	8f 93       	push	r24
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	83 e2       	ldi	r24, 0x23	; 35
    39e8:	93 e0       	ldi	r25, 0x03	; 3
    39ea:	9f 93       	push	r25
    39ec:	8f 93       	push	r24
    39ee:	84 e4       	ldi	r24, 0x44	; 68
    39f0:	93 e0       	ldi	r25, 0x03	; 3
    39f2:	9f 93       	push	r25
    39f4:	8f 93       	push	r24
    39f6:	85 e5       	ldi	r24, 0x55	; 85
    39f8:	93 e0       	ldi	r25, 0x03	; 3
    39fa:	9f 93       	push	r25
    39fc:	8f 93       	push	r24
    39fe:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3a02:	c1 d4       	rcall	.+2434   	; 0x4386 <lora_driver_saveMac>

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3a04:	dc d6       	rcall	.+3512   	; 0x47be <lora_driver_mapReturnCodeToText>
    3a06:	9f 93       	push	r25
    3a08:	8f 93       	push	r24
    3a0a:	8b e8       	ldi	r24, 0x8B	; 139
    3a0c:	93 e0       	ldi	r25, 0x03	; 3
    3a0e:	9f 93       	push	r25
    3a10:	8f 93       	push	r24
    3a12:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3a16:	8d b7       	in	r24, 0x3d	; 61

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3a18:	9e b7       	in	r25, 0x3e	; 62
    3a1a:	82 96       	adiw	r24, 0x22	; 34
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	9e bf       	out	0x3e, r25	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	8d bf       	out	0x3d, r24	; 61
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	a8 d5       	rcall	.+2896   	; 0x457a <lora_driver_setAdaptiveDataRate>
    3a2a:	c9 d6       	rcall	.+3474   	; 0x47be <lora_driver_mapReturnCodeToText>
    3a2c:	9f 93       	push	r25
    3a2e:	8f 93       	push	r24
    3a30:	8a e9       	ldi	r24, 0x9A	; 154
    3a32:	93 e0       	ldi	r25, 0x03	; 3
    3a34:	9f 93       	push	r25
    3a36:	8f 93       	push	r24
    3a38:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3a3c:	84 ef       	ldi	r24, 0xF4	; 244

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3a3e:	91 e0       	ldi	r25, 0x01	; 1
    3a40:	a7 d5       	rcall	.+2894   	; 0x4590 <lora_driver_setReceiveDelay>
    3a42:	bd d6       	rcall	.+3450   	; 0x47be <lora_driver_mapReturnCodeToText>
    3a44:	9f 93       	push	r25
    3a46:	8f 93       	push	r24
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	8f 93       	push	r24
    3a4c:	84 ef       	ldi	r24, 0xF4	; 244
    3a4e:	8f 93       	push	r24
    3a50:	8b eb       	ldi	r24, 0xBB	; 187
    3a52:	93 e0       	ldi	r25, 0x03	; 3
    3a54:	9f 93       	push	r25
    3a56:	8f 93       	push	r24
    3a58:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3a5c:	8d b7       	in	r24, 0x3d	; 61
    3a5e:	9e b7       	in	r25, 0x3e	; 62
    3a60:	0a 96       	adiw	r24, 0x0a	; 10
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	9e bf       	out	0x3e, r25	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	8d bf       	out	0x3d, r24	; 61
    3a6c:	ca e0       	ldi	r28, 0x0A	; 10

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
    3a70:	90 d4       	rcall	.+2336   	; 0x4392 <lora_driver_join>
    3a72:	d8 2f       	mov	r29, r24
    3a74:	a4 d6       	rcall	.+3400   	; 0x47be <lora_driver_mapReturnCodeToText>
    3a76:	9f 93       	push	r25
		 
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3a78:	8f 93       	push	r24
    3a7a:	1f 92       	push	r1
    3a7c:	cf 93       	push	r28
    3a7e:	8b ed       	ldi	r24, 0xDB	; 219
    3a80:	93 e0       	ldi	r25, 0x03	; 3
    3a82:	9f 93       	push	r25
    3a84:	8f 93       	push	r24
    3a86:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0

		 if ( rc != LORA_ACCEPTED)
    3a90:	0f 90       	pop	r0
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	d8 30       	cpi	r29, 0x08	; 8
    3a98:	59 f0       	breq	.+22     	; 0x3ab0 <_lora_setup+0x14c>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <status_leds_longPuls>
		 {
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
    3aa0:	66 e3       	ldi	r22, 0x36	; 54
    3aa2:	71 e0       	ldi	r23, 0x01	; 1
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	0e 94 1e 12 	call	0x243c	; 0x243c <vTaskDelay>
    3aac:	c1 50       	subi	r28, 0x01	; 1
    3aae:	f9 f6       	brne	.-66     	; 0x3a6e <_lora_setup+0x10a>
    3ab0:	d8 30       	cpi	r29, 0x08	; 8
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
    3ab2:	21 f4       	brne	.+8      	; 0x3abc <_lora_setup+0x158>
    3ab4:	81 e0       	ldi	r24, 0x01	; 1

	 if (rc == LORA_ACCEPTED)
    3ab6:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <status_leds_ledOn>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
    3aba:	09 c0       	rjmp	.+18     	; 0x3ace <_lora_setup+0x16a>
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <status_leds_ledOff>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	0e 94 af 29 	call	0x535e	; 0x535e <status_leds_fastBlink>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
    3ac8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    3acc:	fd cf       	rjmp	.-6      	; 0x3ac8 <_lora_setup+0x164>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	08 95       	ret

00003ad4 <lora_uplink_handler_task>:
		 }
	 }
 }
    3ad4:	cf 93       	push	r28
    3ad6:	df 93       	push	r29
    3ad8:	cd b7       	in	r28, 0x3d	; 61

 void lora_uplink_handler_task( void *pvParameters )
 {
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	6a 97       	sbiw	r28, 0x1a	; 26
    3ade:	0f b6       	in	r0, 0x3f	; 63
    3ae0:	f8 94       	cli
    3ae2:	de bf       	out	0x3e, r29	; 62
    3ae4:	0f be       	out	0x3f, r0	; 63
    3ae6:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	de d3       	rcall	.+1980   	; 0x42a8 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3aec:	62 e0       	ldi	r22, 0x02	; 2
    3aee:	70 e0       	ldi	r23, 0x00	; 0
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	0e 94 1e 12 	call	0x243c	; 0x243c <vTaskDelay>
	lora_driver_resetRn2483(0);
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	d6 d3       	rcall	.+1964   	; 0x42a8 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3afc:	66 e9       	ldi	r22, 0x96	; 150
    3afe:	70 e0       	ldi	r23, 0x00	; 0
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	0e 94 1e 12 	call	0x243c	; 0x243c <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3b08:	88 d3       	rcall	.+1808   	; 0x421a <lora_driver_flushBuffers>

	_lora_setup();
    3b0a:	2c df       	rcall	.-424    	; 0x3964 <_lora_setup>
    3b0c:	8b ef       	ldi	r24, 0xFB	; 251
	
	printf("a facut setup\n");	
    3b0e:	93 e0       	ldi	r25, 0x03	; 3
    3b10:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
    3b14:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(30000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3b18:	69 83       	std	Y+1, r22	; 0x01
    3b1a:	7a 83       	std	Y+2, r23	; 0x02
    3b1c:	8b 83       	std	Y+3, r24	; 0x03
    3b1e:	9c 83       	std	Y+4, r25	; 0x04

	//size_t bytesReceivedApplication;

	sensorDataPackageHandler_setPackage_lenght(6);
    3b20:	86 e0       	ldi	r24, 0x06	; 6
    3b22:	82 d0       	rcall	.+260    	; 0x3c28 <sensorDataPackageHandler_setPackage_lenght>
	
	for(;;)
	{
		lora_driver_payload_t _uplink_payload = sensorDataPackageHandler_getLoRaPayload(2);
    3b24:	62 e0       	ldi	r22, 0x02	; 2
    3b26:	ce 01       	movw	r24, r28
    3b28:	05 96       	adiw	r24, 0x05	; 5
    3b2a:	90 d0       	rcall	.+288    	; 0x3c4c <sensorDataPackageHandler_getLoRaPayload>
    3b2c:	89 e0       	ldi	r24, 0x09	; 9
		printf("a luat data de la package handler \n");
    3b2e:	94 e0       	ldi	r25, 0x04	; 4
    3b30:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
    3b34:	8c e2       	ldi	r24, 0x2C	; 44

		printf("inainte de delay\n");
    3b36:	94 e0       	ldi	r25, 0x04	; 4
    3b38:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
    3b3c:	44 e4       	ldi	r20, 0x44	; 68
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3b3e:	57 e0       	ldi	r21, 0x07	; 7
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	70 e0       	ldi	r23, 0x00	; 0
    3b44:	ce 01       	movw	r24, r28
    3b46:	01 96       	adiw	r24, 0x01	; 1
    3b48:	0e 94 b9 11 	call	0x2372	; 0x2372 <xTaskDelayUntil>
    3b4c:	8d e3       	ldi	r24, 0x3D	; 61
		printf("dupa delay, dar inainte sa trimita\n");
    3b4e:	94 e0       	ldi	r25, 0x04	; 4
    3b50:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
    3b54:	8e 81       	ldd	r24, Y+6	; 0x06
		printf("%d payload\n",_uplink_payload.len);
    3b56:	1f 92       	push	r1
    3b58:	8f 93       	push	r24
    3b5a:	80 e6       	ldi	r24, 0x60	; 96
    3b5c:	94 e0       	ldi	r25, 0x04	; 4
    3b5e:	9f 93       	push	r25
    3b60:	8f 93       	push	r24
    3b62:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3b66:	83 e0       	ldi	r24, 0x03	; 3

		if( _uplink_payload.bytes > 0 )
		{
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3b68:	0e 94 02 2a 	call	0x5404	; 0x5404 <status_leds_shortPuls>
    3b6c:	8f 81       	ldd	r24, Y+7	; 0x07
			printf("0 -> %x\n", _uplink_payload.bytes[0]);
    3b6e:	1f 92       	push	r1
    3b70:	8f 93       	push	r24
    3b72:	8c e6       	ldi	r24, 0x6C	; 108
    3b74:	94 e0       	ldi	r25, 0x04	; 4
    3b76:	9f 93       	push	r25
    3b78:	8f 93       	push	r24
    3b7a:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3b7e:	88 85       	ldd	r24, Y+8	; 0x08
			printf("1 -> %x\n", _uplink_payload.bytes[1]);
    3b80:	1f 92       	push	r1
    3b82:	8f 93       	push	r24
    3b84:	85 e7       	ldi	r24, 0x75	; 117
    3b86:	94 e0       	ldi	r25, 0x04	; 4
    3b88:	9f 93       	push	r25
    3b8a:	8f 93       	push	r24
    3b8c:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
			printf("2 -> %x\n", _uplink_payload.bytes[2]);
    3b92:	1f 92       	push	r1
    3b94:	8f 93       	push	r24
    3b96:	8e e7       	ldi	r24, 0x7E	; 126
    3b98:	94 e0       	ldi	r25, 0x04	; 4
    3b9a:	9f 93       	push	r25
    3b9c:	8f 93       	push	r24
    3b9e:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3ba2:	8a 85       	ldd	r24, Y+10	; 0x0a
			printf("3 -> %x\n", _uplink_payload.bytes[3]);
    3ba4:	1f 92       	push	r1
    3ba6:	8f 93       	push	r24
    3ba8:	87 e8       	ldi	r24, 0x87	; 135
    3baa:	94 e0       	ldi	r25, 0x04	; 4
    3bac:	9f 93       	push	r25
    3bae:	8f 93       	push	r24
    3bb0:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3bb4:	8b 85       	ldd	r24, Y+11	; 0x0b
			printf("4 -> %x\n", _uplink_payload.bytes[4]);
    3bb6:	1f 92       	push	r1
    3bb8:	8f 93       	push	r24
    3bba:	80 e9       	ldi	r24, 0x90	; 144
    3bbc:	94 e0       	ldi	r25, 0x04	; 4
    3bbe:	9f 93       	push	r25
    3bc0:	8f 93       	push	r24
    3bc2:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3bc6:	8c 85       	ldd	r24, Y+12	; 0x0c
			printf("5 -> %x\n", _uplink_payload.bytes[5]);
    3bc8:	1f 92       	push	r1
    3bca:	8f 93       	push	r24
    3bcc:	89 e9       	ldi	r24, 0x99	; 153
    3bce:	94 e0       	ldi	r25, 0x04	; 4
    3bd0:	9f 93       	push	r25
    3bd2:	8f 93       	push	r24
    3bd4:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3bd8:	be 01       	movw	r22, r28
    3bda:	6b 5f       	subi	r22, 0xFB	; 251
    3bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	01 d4       	rcall	.+2050   	; 0x43e4 <lora_driver_sendUploadMessage>
    3be2:	ed d5       	rcall	.+3034   	; 0x47be <lora_driver_mapReturnCodeToText>
    3be4:	9f 93       	push	r25
    3be6:	8f 93       	push	r24
    3be8:	82 ea       	ldi	r24, 0xA2	; 162
    3bea:	94 e0       	ldi	r25, 0x04	; 4
    3bec:	9f 93       	push	r25
    3bee:	8f 93       	push	r24
    3bf0:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	cd bf       	out	0x3d, r28	; 61
    3bfe:	92 cf       	rjmp	.-220    	; 0x3b24 <lora_uplink_handler_task+0x50>

00003c00 <lora_uplink_handler_create>:
    3c00:	ef 92       	push	r14
    3c02:	ff 92       	push	r15
		}
	}
 }

 void lora_uplink_handler_create(UBaseType_t lora_handler_task_priority)
 {
    3c04:	0f 93       	push	r16
	 xTaskCreate(
    3c06:	e1 2c       	mov	r14, r1
    3c08:	f1 2c       	mov	r15, r1
    3c0a:	08 2f       	mov	r16, r24
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 ec       	ldi	r20, 0xC0	; 192
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	67 eb       	ldi	r22, 0xB7	; 183
    3c16:	74 e0       	ldi	r23, 0x04	; 4
    3c18:	8a e6       	ldi	r24, 0x6A	; 106
    3c1a:	9d e1       	ldi	r25, 0x1D	; 29
    3c1c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskCreate>
	 "LRHandUplink"  // A name just for humans
	, configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	, NULL
	, tskIDLE_PRIORITY + lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	, NULL );
 }
    3c20:	0f 91       	pop	r16
    3c22:	ff 90       	pop	r15
    3c24:	ef 90       	pop	r14
    3c26:	08 95       	ret

00003c28 <sensorDataPackageHandler_setPackage_lenght>:
	hum_value=value;
}

void sensorDataPackageHandler_setVentilator_servo(uint8_t ventilator_state_servo)
{
	ventilator_servo=ventilator_state_servo;
    3c28:	80 93 e1 14 	sts	0x14E1, r24	; 0x8014e1 <package_lenght>
    3c2c:	08 95       	ret

00003c2e <sensorDataPackageHandler_setCO2_value>:
    3c2e:	90 93 e0 14 	sts	0x14E0, r25	; 0x8014e0 <co2_value+0x1>
    3c32:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <co2_value>
    3c36:	08 95       	ret

00003c38 <sensorDataPackageHandler_setTemp_value>:
    3c38:	90 93 db 14 	sts	0x14DB, r25	; 0x8014db <temp_value+0x1>
    3c3c:	80 93 da 14 	sts	0x14DA, r24	; 0x8014da <temp_value>
    3c40:	08 95       	ret

00003c42 <sensorDataPackageHandler_setHumidity_value>:
    3c42:	90 93 de 14 	sts	0x14DE, r25	; 0x8014de <hum_value+0x1>
    3c46:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <hum_value>
    3c4a:	08 95       	ret

00003c4c <sensorDataPackageHandler_getLoRaPayload>:
}

lora_driver_payload_t sensorDataPackageHandler_getLoRaPayload(uint8_t port_No)
{
    3c4c:	1f 93       	push	r17
    3c4e:	cf 93       	push	r28
    3c50:	df 93       	push	r29
    3c52:	ec 01       	movw	r28, r24
    3c54:	16 2f       	mov	r17, r22
	lora_driver_payload_t *uplink_payload;
	
	uplink_payload=pvPortMalloc(sizeof(lora_driver_payload_t));
    3c56:	86 e1       	ldi	r24, 0x16	; 22
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <pvPortMalloc>
    3c5e:	fc 01       	movw	r30, r24
	
	if(uplink_payload != NULL){
    3c60:	89 2b       	or	r24, r25
    3c62:	b1 f0       	breq	.+44     	; 0x3c90 <sensorDataPackageHandler_getLoRaPayload+0x44>
		uplink_payload->portNo=port_No;
    3c64:	10 83       	st	Z, r17
		uplink_payload->len=package_lenght;
    3c66:	80 91 e1 14 	lds	r24, 0x14E1	; 0x8014e1 <package_lenght>
    3c6a:	81 83       	std	Z+1, r24	; 0x01
		uplink_payload->bytes[0]=co2_value >> 8;
    3c6c:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <co2_value>
    3c70:	90 91 e0 14 	lds	r25, 0x14E0	; 0x8014e0 <co2_value+0x1>
    3c74:	92 83       	std	Z+2, r25	; 0x02
		uplink_payload->bytes[1]=co2_value & 0xFF;
    3c76:	83 83       	std	Z+3, r24	; 0x03
		uplink_payload->bytes[2]=hum_value >> 8;
    3c78:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <hum_value>
    3c7c:	90 91 de 14 	lds	r25, 0x14DE	; 0x8014de <hum_value+0x1>
    3c80:	94 83       	std	Z+4, r25	; 0x04
		uplink_payload->bytes[3]=hum_value & 0xFF;
    3c82:	85 83       	std	Z+5, r24	; 0x05
		uplink_payload->bytes[4]=temp_value >> 8;
    3c84:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <temp_value>
    3c88:	90 91 db 14 	lds	r25, 0x14DB	; 0x8014db <temp_value+0x1>
    3c8c:	96 83       	std	Z+6, r25	; 0x06
		uplink_payload->bytes[5]=temp_value & 0xFF;
    3c8e:	87 83       	std	Z+7, r24	; 0x07
	}
	
	return *uplink_payload;
    3c90:	86 e1       	ldi	r24, 0x16	; 22
    3c92:	de 01       	movw	r26, r28
    3c94:	01 90       	ld	r0, Z+
    3c96:	0d 92       	st	X+, r0
    3c98:	8a 95       	dec	r24
    3c9a:	e1 f7       	brne	.-8      	; 0x3c94 <sensorDataPackageHandler_getLoRaPayload+0x48>
}
    3c9c:	ce 01       	movw	r24, r28
    3c9e:	df 91       	pop	r29
    3ca0:	cf 91       	pop	r28
    3ca2:	1f 91       	pop	r17
    3ca4:	08 95       	ret

00003ca6 <initializeTempAndHumiditySemaphore>:
  EventGroupHandle_t dataEventGroup;
  MessageBufferHandle_t uplinkMessageBuffer;
  MessageBufferHandle_t downlinkMessageBuffer;
  
void initializeTempAndHumiditySemaphore()
{
    3ca6:	0f 93       	push	r16
	tempHumSemaphore = xSemaphoreCreateBinary();
    3ca8:	43 e0       	ldi	r20, 0x03	; 3
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	0e 94 84 07 	call	0xf08	; 0xf08 <xQueueGenericCreate>
    3cb2:	90 93 e5 14 	sts	0x14E5, r25	; 0x8014e5 <tempHumSemaphore+0x1>
    3cb6:	80 93 e4 14 	sts	0x14E4, r24	; 0x8014e4 <tempHumSemaphore>
	xSemaphoreGive(tempHumSemaphore);
    3cba:	00 e0       	ldi	r16, 0x00	; 0
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	a9 01       	movw	r20, r18
    3cc2:	60 e0       	ldi	r22, 0x00	; 0
    3cc4:	70 e0       	ldi	r23, 0x00	; 0
    3cc6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xQueueGenericSend>
}
    3cca:	0f 91       	pop	r16
    3ccc:	08 95       	ret

00003cce <initializeQueue>:

void initializeQueue()
{
	sensorDataQueue = xQueueCreate(3,sizeof(uint16_t));
    3cce:	40 e0       	ldi	r20, 0x00	; 0
    3cd0:	62 e0       	ldi	r22, 0x02	; 2
    3cd2:	83 e0       	ldi	r24, 0x03	; 3
    3cd4:	0e 94 84 07 	call	0xf08	; 0xf08 <xQueueGenericCreate>
    3cd8:	90 93 e3 14 	sts	0x14E3, r25	; 0x8014e3 <sensorDataQueue+0x1>
    3cdc:	80 93 e2 14 	sts	0x14E2, r24	; 0x8014e2 <sensorDataQueue>
    3ce0:	08 95       	ret

00003ce2 <initializeEventGroup>:
}

void initializeEventGroup()
{
	dataEventGroup = xEventGroupCreate();
    3ce2:	0e 94 27 02 	call	0x44e	; 0x44e <xEventGroupCreate>
    3ce6:	90 93 e9 14 	sts	0x14E9, r25	; 0x8014e9 <dataEventGroup+0x1>
    3cea:	80 93 e8 14 	sts	0x14E8, r24	; 0x8014e8 <dataEventGroup>
    3cee:	08 95       	ret

00003cf0 <initializeUplinkMessageBuffer>:
}

void initializeUplinkMessageBuffer()
{
	uplinkMessageBuffer = xMessageBufferCreate(100);
    3cf0:	41 e0       	ldi	r20, 0x01	; 1
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	84 e6       	ldi	r24, 0x64	; 100
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	0e 94 13 0b 	call	0x1626	; 0x1626 <xStreamBufferGenericCreate>
    3cfe:	90 93 eb 14 	sts	0x14EB, r25	; 0x8014eb <uplinkMessageBuffer+0x1>
    3d02:	80 93 ea 14 	sts	0x14EA, r24	; 0x8014ea <uplinkMessageBuffer>
    3d06:	08 95       	ret

00003d08 <initializeTempAndHumDriver>:
#include "TempAndHum.h"
#include "Setup.h"

void initializeTempAndHumDriver()
{
	hih8120_driverReturnCode_t returnCode = hih8120_initialise();
    3d08:	ec d0       	rcall	.+472    	; 0x3ee2 <hih8120_initialise>

	if ( HIH8120_OK == returnCode )
    3d0a:	81 11       	cpse	r24, r1
    3d0c:	05 c0       	rjmp	.+10     	; 0x3d18 <initializeTempAndHumDriver+0x10>
		{
			printf("Temp and Hum Driver Initialized ok\n");
    3d0e:	84 ec       	ldi	r24, 0xC4	; 196
    3d10:	94 e0       	ldi	r25, 0x04	; 4
    3d12:	0c 94 98 2f 	jmp	0x5f30	; 0x5f30 <puts>
    3d16:	08 95       	ret
		}
		
	else {
		printf("TEMP AND HUM OUT OF HEAP \n");
    3d18:	87 ee       	ldi	r24, 0xE7	; 231
    3d1a:	94 e0       	ldi	r25, 0x04	; 4
    3d1c:	0c 94 98 2f 	jmp	0x5f30	; 0x5f30 <puts>
    3d20:	08 95       	ret

00003d22 <measureTempAndHum>:
		}
}
void measureTempAndHum()
{
	if ( HIH8120_OK != hih8120_wakeup() )
    3d22:	f7 d0       	rcall	.+494    	; 0x3f12 <hih8120_wakeup>
    3d24:	88 23       	and	r24, r24
    3d26:	21 f0       	breq	.+8      	; 0x3d30 <measureTempAndHum+0xe>
	{
		printf("TEMP AND HUM WAKE UP WENT WRONG\n");
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	95 e0       	ldi	r25, 0x05	; 5
    3d2c:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    3d30:	63 e0       	ldi	r22, 0x03	; 3
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	0e 94 1e 12 	call	0x243c	; 0x243c <vTaskDelay>
	
	if ( HIH8120_OK !=  hih8120_measure() )
    3d3c:	ff d0       	rcall	.+510    	; 0x3f3c <hih8120_measure>
    3d3e:	88 23       	and	r24, r24
    3d40:	21 f0       	breq	.+8      	; 0x3d4a <measureTempAndHum+0x28>
	{
		printf("TEMP AND HUM MEASURING UP WENT WRONG\n");
    3d42:	81 e2       	ldi	r24, 0x21	; 33
    3d44:	95 e0       	ldi	r25, 0x05	; 5
    3d46:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
	}
	
	vTaskDelay(pdMS_TO_TICKS(20));
    3d4a:	61 e0       	ldi	r22, 0x01	; 1
    3d4c:	70 e0       	ldi	r23, 0x00	; 0
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	0c 94 1e 12 	jmp	0x243c	; 0x243c <vTaskDelay>
    3d56:	08 95       	ret

00003d58 <TempAndHumTask>:
	
}
void TempAndHumTask(void* pvpParameter)
{
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <TempAndHumTask+0x6>
    3d5e:	1f 92       	push	r1
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
	
	while(1)
	{
		uint16_t Temp = 0;
    3d64:	1c 82       	std	Y+4, r1	; 0x04
    3d66:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t Humidity = 0;
    3d68:	1a 82       	std	Y+2, r1	; 0x02
    3d6a:	19 82       	std	Y+1, r1	; 0x01
		printf("TEMP TASK \n");
    3d6c:	86 e4       	ldi	r24, 0x46	; 70
    3d6e:	95 e0       	ldi	r25, 0x05	; 5
    3d70:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
		if(xSemaphoreTake(tempHumSemaphore,portMAX_DELAY)==pdTRUE)
    3d74:	4f ef       	ldi	r20, 0xFF	; 255
    3d76:	5f ef       	ldi	r21, 0xFF	; 255
    3d78:	ba 01       	movw	r22, r20
    3d7a:	80 91 e4 14 	lds	r24, 0x14E4	; 0x8014e4 <tempHumSemaphore>
    3d7e:	90 91 e5 14 	lds	r25, 0x14E5	; 0x8014e5 <tempHumSemaphore+0x1>
    3d82:	0e 94 03 09 	call	0x1206	; 0x1206 <xQueueSemaphoreTake>
    3d86:	81 30       	cpi	r24, 0x01	; 1
    3d88:	09 f0       	breq	.+2      	; 0x3d8c <TempAndHumTask+0x34>
    3d8a:	43 c0       	rjmp	.+134    	; 0x3e12 <TempAndHumTask+0xba>
		{
			measureTempAndHum();
    3d8c:	ca df       	rcall	.-108    	; 0x3d22 <measureTempAndHum>
			Temp = hih8120_getTemperature_x10();
    3d8e:	22 d1       	rcall	.+580    	; 0x3fd4 <hih8120_getTemperature_x10>
    3d90:	9c 83       	std	Y+4, r25	; 0x04
    3d92:	8b 83       	std	Y+3, r24	; 0x03
			Humidity = hih8120_getHumidityPercent_x10();
    3d94:	f9 d0       	rcall	.+498    	; 0x3f88 <hih8120_getHumidityPercent_x10>
    3d96:	9a 83       	std	Y+2, r25	; 0x02
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	8c 81       	ldd	r24, Y+4	; 0x04
			printf("Temperature: %d\n",Temp);
    3d9c:	8f 93       	push	r24
    3d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3da0:	8f 93       	push	r24
    3da2:	81 e5       	ldi	r24, 0x51	; 81
    3da4:	95 e0       	ldi	r25, 0x05	; 5
    3da6:	9f 93       	push	r25
    3da8:	8f 93       	push	r24
    3daa:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
			printf("Humidity: %d\n",Humidity);
    3db0:	8f 93       	push	r24
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	8f 93       	push	r24
    3db6:	82 e6       	ldi	r24, 0x62	; 98
    3db8:	95 e0       	ldi	r25, 0x05	; 5
    3dba:	9f 93       	push	r25
    3dbc:	8f 93       	push	r24
    3dbe:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <printf>
    3dc2:	00 e0       	ldi	r16, 0x00	; 0
			xQueueSend(sensorDataQueue,&Temp,portMAX_DELAY);
    3dc4:	2f ef       	ldi	r18, 0xFF	; 255
    3dc6:	3f ef       	ldi	r19, 0xFF	; 255
    3dc8:	a9 01       	movw	r20, r18
    3dca:	be 01       	movw	r22, r28
    3dcc:	6d 5f       	subi	r22, 0xFD	; 253
    3dce:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd0:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <sensorDataQueue>
    3dd4:	90 91 e3 14 	lds	r25, 0x14E3	; 0x8014e3 <sensorDataQueue+0x1>
    3dd8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xQueueGenericSend>
    3ddc:	2f ef       	ldi	r18, 0xFF	; 255
			xQueueSend(sensorDataQueue,&Humidity,portMAX_DELAY);
    3dde:	3f ef       	ldi	r19, 0xFF	; 255
    3de0:	a9 01       	movw	r20, r18
    3de2:	be 01       	movw	r22, r28
    3de4:	6f 5f       	subi	r22, 0xFF	; 255
    3de6:	7f 4f       	sbci	r23, 0xFF	; 255
    3de8:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <sensorDataQueue>
    3dec:	90 91 e3 14 	lds	r25, 0x14E3	; 0x8014e3 <sensorDataQueue+0x1>
    3df0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xQueueGenericSend>
    3df4:	42 e0       	ldi	r20, 0x02	; 2

			xEventGroupSetBits(dataEventGroup,BIT_HUMIDITY_TEMPERATURE);
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	60 e0       	ldi	r22, 0x00	; 0
    3dfa:	70 e0       	ldi	r23, 0x00	; 0
    3dfc:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <dataEventGroup>
    3e00:	90 91 e9 14 	lds	r25, 0x14E9	; 0x8014e9 <dataEventGroup+0x1>
    3e04:	0e 94 da 02 	call	0x5b4	; 0x5b4 <xEventGroupSetBits>
    3e08:	0f b6       	in	r0, 0x3f	; 63
    3e0a:	f8 94       	cli
    3e0c:	de bf       	out	0x3e, r29	; 62
    3e0e:	0f be       	out	0x3f, r0	; 63
    3e10:	cd bf       	out	0x3d, r28	; 61
    3e12:	6a e0       	ldi	r22, 0x0A	; 10

		}
		vTaskDelay(10);
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	0e 94 1e 12 	call	0x243c	; 0x243c <vTaskDelay>
    3e1e:	a2 cf       	rjmp	.-188    	; 0x3d64 <TempAndHumTask+0xc>

00003e20 <createTempAndHumTask>:
		
	}
    3e20:	ef 92       	push	r14
}

void createTempAndHumTask()
{
    3e22:	ff 92       	push	r15
    3e24:	0f 93       	push	r16
	initializeTempAndHumDriver();
    3e26:	70 df       	rcall	.-288    	; 0x3d08 <initializeTempAndHumDriver>
		xTaskCreate(
    3e28:	e1 2c       	mov	r14, r1
    3e2a:	f1 2c       	mov	r15, r1
    3e2c:	01 e0       	ldi	r16, 0x01	; 1
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	40 ec       	ldi	r20, 0xC0	; 192
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	60 e7       	ldi	r22, 0x70	; 112
    3e38:	75 e0       	ldi	r23, 0x05	; 5
    3e3a:	8c ea       	ldi	r24, 0xAC	; 172
    3e3c:	9e e1       	ldi	r25, 0x1E	; 30
    3e3e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <xTaskCreate>
		,  "TempAndHumTask"  // A name just for humans
		,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
		,  NULL
		,  tskIDLE_PRIORITY + 1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
		,  NULL );
}
    3e42:	0f 91       	pop	r16
    3e44:	ff 90       	pop	r15
    3e46:	ef 90       	pop	r14
    3e48:	08 95       	ret

00003e4a <initializeUsedData>:
#include <status_leds.h>


void initializeUsedData()
{
	initializeEventGroup();
    3e4a:	4b df       	rcall	.-362    	; 0x3ce2 <initializeEventGroup>
	initializeQueue();
    3e4c:	40 df       	rcall	.-384    	; 0x3cce <initializeQueue>
	initializeTempAndHumiditySemaphore();
    3e4e:	2b df       	rcall	.-426    	; 0x3ca6 <initializeTempAndHumiditySemaphore>
    3e50:	4f cf       	rjmp	.-354    	; 0x3cf0 <initializeUplinkMessageBuffer>
	initializeUplinkMessageBuffer();
    3e52:	08 95       	ret

00003e54 <create_tasks>:
    3e54:	e5 df       	rcall	.-54     	; 0x3e20 <createTempAndHumTask>
    3e56:	0e 94 ed 01 	call	0x3da	; 0x3da <createCO2Task>
/*-----------------------------------------------------------*/
void create_tasks(void)
{		
		createTempAndHumTask();
		createCO2Task();
		createApplicationTask();	
    3e5a:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <createApplicationTask>
    3e5e:	08 95       	ret

00003e60 <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
	stdio_initialise(ser_USART0);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	0e 94 cb 28 	call	0x5196	; 0x5196 <stdio_initialise>
	initializeUsedData();
    3e66:	f1 df       	rcall	.-30     	; 0x3e4a <initializeUsedData>
	create_tasks();
    3e68:	f5 df       	rcall	.-22     	; 0x3e54 <create_tasks>
    3e6a:	60 e0       	ldi	r22, 0x00	; 0

	lora_driver_initialise(1, NULL);
    3e6c:	70 e0       	ldi	r23, 0x00	; 0
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	db d1       	rcall	.+950    	; 0x4228 <lora_driver_initialise>
	lora_uplink_handler_create(2);
    3e72:	82 e0       	ldi	r24, 0x02	; 2
    3e74:	c5 ce       	rjmp	.-630    	; 0x3c00 <lora_uplink_handler_create>
    3e76:	08 95       	ret

00003e78 <main>:
    3e78:	f3 df       	rcall	.-26     	; 0x3e60 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Stttttarted!!\n");
    3e7a:	8f e7       	ldi	r24, 0x7F	; 127
    3e7c:	95 e0       	ldi	r25, 0x05	; 5
    3e7e:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3e82:	0e 94 65 0f 	call	0x1eca	; 0x1eca <vTaskStartScheduler>
    3e86:	ff cf       	rjmp	.-2      	; 0x3e86 <main+0xe>

00003e88 <_hihTwiCallback>:
    3e88:	65 30       	cpi	r22, 0x05	; 5
    3e8a:	f1 f4       	brne	.+60     	; 0x3ec8 <_hihTwiCallback+0x40>
    3e8c:	fa 01       	movw	r30, r20
    3e8e:	80 81       	ld	r24, Z
    3e90:	8f 73       	andi	r24, 0x3F	; 63
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	98 2f       	mov	r25, r24
    3e96:	88 27       	eor	r24, r24
    3e98:	21 81       	ldd	r18, Z+1	; 0x01
    3e9a:	82 2b       	or	r24, r18
    3e9c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3ea0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3ea4:	82 81       	ldd	r24, Z+2	; 0x02
    3ea6:	f0 e4       	ldi	r31, 0x40	; 64
    3ea8:	8f 9f       	mul	r24, r31
    3eaa:	c0 01       	movw	r24, r0
    3eac:	11 24       	eor	r1, r1
    3eae:	fa 01       	movw	r30, r20
    3eb0:	23 81       	ldd	r18, Z+3	; 0x03
    3eb2:	26 95       	lsr	r18
    3eb4:	26 95       	lsr	r18
    3eb6:	82 2b       	or	r24, r18
    3eb8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3ebc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	80 93 7d 13 	sts	0x137D, r24	; 0x80137d <_measuringIsReady>
    3ec6:	08 95       	ret
    3ec8:	64 30       	cpi	r22, 0x04	; 4
    3eca:	51 f0       	breq	.+20     	; 0x3ee0 <_hihTwiCallback+0x58>
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	90 e4       	ldi	r25, 0x40	; 64
    3ed0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3ed4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3ed8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3edc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3ee0:	08 95       	ret

00003ee2 <hih8120_initialise>:
    3ee2:	0f 93       	push	r16
    3ee4:	1f 93       	push	r17
    3ee6:	04 e4       	ldi	r16, 0x44	; 68
    3ee8:	1f e1       	ldi	r17, 0x1F	; 31
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	34 e2       	ldi	r19, 0x24	; 36
    3eee:	44 ef       	ldi	r20, 0xF4	; 244
    3ef0:	50 e0       	ldi	r21, 0x00	; 0
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	87 e2       	ldi	r24, 0x27	; 39
    3ef6:	0e 94 25 2a 	call	0x544a	; 0x544a <twiCreate>
    3efa:	90 93 7f 13 	sts	0x137F, r25	; 0x80137f <_hih8120Handler+0x1>
    3efe:	80 93 7e 13 	sts	0x137E, r24	; 0x80137e <_hih8120Handler>
    3f02:	21 e0       	ldi	r18, 0x01	; 1
    3f04:	89 2b       	or	r24, r25
    3f06:	09 f0       	breq	.+2      	; 0x3f0a <hih8120_initialise+0x28>
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	82 2f       	mov	r24, r18
    3f0c:	1f 91       	pop	r17
    3f0e:	0f 91       	pop	r16
    3f10:	08 95       	ret

00003f12 <hih8120_wakeup>:
    3f12:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_hih8120Handler>
    3f16:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_hih8120Handler+0x1>
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	59 f0       	breq	.+22     	; 0x3f34 <hih8120_wakeup+0x22>
    3f1e:	40 e0       	ldi	r20, 0x00	; 0
    3f20:	60 e0       	ldi	r22, 0x00	; 0
    3f22:	70 e0       	ldi	r23, 0x00	; 0
    3f24:	0e 94 76 2a 	call	0x54ec	; 0x54ec <twiTransmit>
    3f28:	84 30       	cpi	r24, 0x04	; 4
    3f2a:	31 f4       	brne	.+12     	; 0x3f38 <hih8120_wakeup+0x26>
    3f2c:	10 92 7d 13 	sts	0x137D, r1	; 0x80137d <_measuringIsReady>
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	08 95       	ret
    3f34:	82 e0       	ldi	r24, 0x02	; 2
    3f36:	08 95       	ret
    3f38:	83 e0       	ldi	r24, 0x03	; 3
    3f3a:	08 95       	ret

00003f3c <hih8120_measure>:
    3f3c:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <_hih8120Handler>
    3f40:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <_hih8120Handler+0x1>
    3f44:	00 97       	sbiw	r24, 0x00	; 0
    3f46:	39 f0       	breq	.+14     	; 0x3f56 <hih8120_measure+0x1a>
    3f48:	64 e0       	ldi	r22, 0x04	; 4
    3f4a:	0e 94 c2 2a 	call	0x5584	; 0x5584 <twiReceive>
    3f4e:	85 30       	cpi	r24, 0x05	; 5
    3f50:	21 f0       	breq	.+8      	; 0x3f5a <hih8120_measure+0x1e>
    3f52:	83 e0       	ldi	r24, 0x03	; 3
    3f54:	08 95       	ret
    3f56:	82 e0       	ldi	r24, 0x02	; 2
    3f58:	08 95       	ret
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	08 95       	ret

00003f5e <hih8120_getHumidity>:
    3f5e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3f62:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3f66:	80 e0       	ldi	r24, 0x00	; 0
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__floatunsisf>
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	48 ec       	ldi	r20, 0xC8	; 200
    3f74:	52 e4       	ldi	r21, 0x42	; 66
    3f76:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__mulsf3>
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	38 ef       	ldi	r19, 0xF8	; 248
    3f7e:	4f e7       	ldi	r20, 0x7F	; 127
    3f80:	56 e4       	ldi	r21, 0x46	; 70
    3f82:	0c 94 33 2c 	jmp	0x5866	; 0x5866 <__divsf3>
    3f86:	08 95       	ret

00003f88 <hih8120_getHumidityPercent_x10>:
    3f88:	ea df       	rcall	.-44     	; 0x3f5e <hih8120_getHumidity>
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	40 e2       	ldi	r20, 0x20	; 32
    3f90:	51 e4       	ldi	r21, 0x41	; 65
    3f92:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__mulsf3>
    3f96:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__fixunssfsi>
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	08 95       	ret

00003f9e <hih8120_getTemperature>:
    3f9e:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3fa2:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__floatunsisf>
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	45 e2       	ldi	r20, 0x25	; 37
    3fb4:	53 e4       	ldi	r21, 0x43	; 67
    3fb6:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__mulsf3>
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	38 ef       	ldi	r19, 0xF8	; 248
    3fbe:	4f e7       	ldi	r20, 0x7F	; 127
    3fc0:	56 e4       	ldi	r21, 0x46	; 70
    3fc2:	0e 94 33 2c 	call	0x5866	; 0x5866 <__divsf3>
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e2       	ldi	r20, 0x20	; 32
    3fcc:	52 e4       	ldi	r21, 0x42	; 66
    3fce:	0c 94 ce 2b 	jmp	0x579c	; 0x579c <__subsf3>
    3fd2:	08 95       	ret

00003fd4 <hih8120_getTemperature_x10>:
    3fd4:	e4 df       	rcall	.-56     	; 0x3f9e <hih8120_getTemperature>
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e2       	ldi	r20, 0x20	; 32
    3fdc:	51 e4       	ldi	r21, 0x41	; 65
    3fde:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__mulsf3>
    3fe2:	0e 94 9b 2c 	call	0x5936	; 0x5936 <__fixsfsi>
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	08 95       	ret

00003fea <_serialCallBack>:
    3fea:	0f 93       	push	r16
    3fec:	1f 93       	push	r17
    3fee:	cf 93       	push	r28
    3ff0:	df 93       	push	r29
    3ff2:	1f 92       	push	r1
    3ff4:	1f 92       	push	r1
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
    3ffa:	8c 01       	movw	r16, r24
    3ffc:	19 82       	std	Y+1, r1	; 0x01
    3ffe:	2d c0       	rjmp	.+90     	; 0x405a <_serialCallBack+0x70>
    4000:	e0 91 e4 13 	lds	r30, 0x13E4	; 0x8013e4 <rec_buf_inp.2878>
    4004:	ec 32       	cpi	r30, 0x2C	; 44
    4006:	50 f4       	brcc	.+20     	; 0x401c <_serialCallBack+0x32>
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	8e 0f       	add	r24, r30
    400c:	80 93 e4 13 	sts	0x13E4, r24	; 0x8013e4 <rec_buf_inp.2878>
    4010:	f0 e0       	ldi	r31, 0x00	; 0
    4012:	ea 5e       	subi	r30, 0xEA	; 234
    4014:	fb 4e       	sbci	r31, 0xEB	; 235
    4016:	8a 81       	ldd	r24, Y+2	; 0x02
    4018:	80 83       	st	Z, r24
    401a:	02 c0       	rjmp	.+4      	; 0x4020 <_serialCallBack+0x36>
    401c:	10 92 e4 13 	sts	0x13E4, r1	; 0x8013e4 <rec_buf_inp.2878>
    4020:	8a 81       	ldd	r24, Y+2	; 0x02
    4022:	8a 30       	cpi	r24, 0x0A	; 10
    4024:	d1 f4       	brne	.+52     	; 0x405a <_serialCallBack+0x70>
    4026:	40 91 e4 13 	lds	r20, 0x13E4	; 0x8013e4 <rec_buf_inp.2878>
    402a:	50 e0       	ldi	r21, 0x00	; 0
    402c:	fa 01       	movw	r30, r20
    402e:	ec 5e       	subi	r30, 0xEC	; 236
    4030:	fb 4e       	sbci	r31, 0xEB	; 235
    4032:	10 82       	st	Z, r1
    4034:	41 50       	subi	r20, 0x01	; 1
    4036:	51 09       	sbc	r21, r1
    4038:	9e 01       	movw	r18, r28
    403a:	2f 5f       	subi	r18, 0xFF	; 255
    403c:	3f 4f       	sbci	r19, 0xFF	; 255
    403e:	66 e1       	ldi	r22, 0x16	; 22
    4040:	74 e1       	ldi	r23, 0x14	; 20
    4042:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    4046:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    404a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <xStreamBufferSendFromISR>
    404e:	89 81       	ldd	r24, Y+1	; 0x01
    4050:	81 11       	cpse	r24, r1
    4052:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortYield>
    4056:	10 92 e4 13 	sts	0x13E4, r1	; 0x8013e4 <rec_buf_inp.2878>
    405a:	be 01       	movw	r22, r28
    405c:	6e 5f       	subi	r22, 0xFE	; 254
    405e:	7f 4f       	sbci	r23, 0xFF	; 255
    4060:	c8 01       	movw	r24, r16
    4062:	03 d6       	rcall	.+3078   	; 0x4c6a <serial_getByte>
    4064:	88 23       	and	r24, r24
    4066:	61 f2       	breq	.-104    	; 0x4000 <_serialCallBack+0x16>
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	1f 91       	pop	r17
    4072:	0f 91       	pop	r16
    4074:	08 95       	ret

00004076 <_uploadMessage>:
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	8c 01       	movw	r16, r24
    4080:	eb 01       	movw	r28, r22
    4082:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    4086:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    408a:	0e 94 45 0b 	call	0x168a	; 0x168a <xStreamBufferReset>
    408e:	b8 01       	movw	r22, r16
    4090:	80 e8       	ldi	r24, 0x80	; 128
    4092:	93 e1       	ldi	r25, 0x13	; 19
    4094:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <strcpy>
    4098:	20 97       	sbiw	r28, 0x00	; 0
    409a:	79 f0       	breq	.+30     	; 0x40ba <_uploadMessage+0x44>
    409c:	e0 e8       	ldi	r30, 0x80	; 128
    409e:	f3 e1       	ldi	r31, 0x13	; 19
    40a0:	01 90       	ld	r0, Z+
    40a2:	00 20       	and	r0, r0
    40a4:	e9 f7       	brne	.-6      	; 0x40a0 <_uploadMessage+0x2a>
    40a6:	31 97       	sbiw	r30, 0x01	; 1
    40a8:	80 e2       	ldi	r24, 0x20	; 32
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	91 83       	std	Z+1, r25	; 0x01
    40ae:	80 83       	st	Z, r24
    40b0:	be 01       	movw	r22, r28
    40b2:	80 e8       	ldi	r24, 0x80	; 128
    40b4:	93 e1       	ldi	r25, 0x13	; 19
    40b6:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <strcat>
    40ba:	e0 e8       	ldi	r30, 0x80	; 128
    40bc:	f3 e1       	ldi	r31, 0x13	; 19
    40be:	df 01       	movw	r26, r30
    40c0:	0d 90       	ld	r0, X+
    40c2:	00 20       	and	r0, r0
    40c4:	e9 f7       	brne	.-6      	; 0x40c0 <_uploadMessage+0x4a>
    40c6:	11 97       	sbiw	r26, 0x01	; 1
    40c8:	8d e0       	ldi	r24, 0x0D	; 13
    40ca:	9a e0       	ldi	r25, 0x0A	; 10
    40cc:	11 96       	adiw	r26, 0x01	; 1
    40ce:	9c 93       	st	X, r25
    40d0:	8e 93       	st	-X, r24
    40d2:	12 96       	adiw	r26, 0x02	; 2
    40d4:	1c 92       	st	X, r1
    40d6:	01 90       	ld	r0, Z+
    40d8:	00 20       	and	r0, r0
    40da:	e9 f7       	brne	.-6      	; 0x40d6 <_uploadMessage+0x60>
    40dc:	31 97       	sbiw	r30, 0x01	; 1
    40de:	e0 58       	subi	r30, 0x80	; 128
    40e0:	f3 41       	sbci	r31, 0x13	; 19
    40e2:	ae 2f       	mov	r26, r30
    40e4:	80 e8       	ldi	r24, 0x80	; 128
    40e6:	93 e1       	ldi	r25, 0x13	; 19
    40e8:	ac 01       	movw	r20, r24
    40ea:	6a 2f       	mov	r22, r26
    40ec:	80 91 e9 13 	lds	r24, 0x13E9	; 0x8013e9 <_rn2483_serial>
    40f0:	90 91 ea 13 	lds	r25, 0x13EA	; 0x8013ea <_rn2483_serial+0x1>
    40f4:	65 d5       	rcall	.+2762   	; 0x4bc0 <serial_sendBytes>
    40f6:	81 11       	cpse	r24, r1
    40f8:	11 c0       	rjmp	.+34     	; 0x411c <_uploadMessage+0xa6>
    40fa:	08 e2       	ldi	r16, 0x28	; 40
    40fc:	15 e0       	ldi	r17, 0x05	; 5
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	4d e2       	ldi	r20, 0x2D	; 45
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	60 e7       	ldi	r22, 0x70	; 112
    4108:	74 e1       	ldi	r23, 0x14	; 20
    410a:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    410e:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    4112:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <xStreamBufferReceive>
    4116:	80 e7       	ldi	r24, 0x70	; 112
    4118:	94 e1       	ldi	r25, 0x14	; 20
    411a:	02 c0       	rjmp	.+4      	; 0x4120 <_uploadMessage+0xaa>
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	1f 91       	pop	r17
    4126:	0f 91       	pop	r16
    4128:	08 95       	ret

0000412a <_reply2ReturnCode>:
    412a:	2f 92       	push	r2
    412c:	3f 92       	push	r3
    412e:	4f 92       	push	r4
    4130:	5f 92       	push	r5
    4132:	6f 92       	push	r6
    4134:	7f 92       	push	r7
    4136:	8f 92       	push	r8
    4138:	9f 92       	push	r9
    413a:	af 92       	push	r10
    413c:	bf 92       	push	r11
    413e:	cf 92       	push	r12
    4140:	df 92       	push	r13
    4142:	ef 92       	push	r14
    4144:	ff 92       	push	r15
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	5c 01       	movw	r10, r24
    4150:	fc 01       	movw	r30, r24
    4152:	01 90       	ld	r0, Z+
    4154:	00 20       	and	r0, r0
    4156:	e9 f7       	brne	.-6      	; 0x4152 <_reply2ReturnCode+0x28>
    4158:	31 97       	sbiw	r30, 0x01	; 1
    415a:	6f 01       	movw	r12, r30
    415c:	c8 1a       	sub	r12, r24
    415e:	d9 0a       	sbc	r13, r25
    4160:	5c 2c       	mov	r5, r12
    4162:	0f 2e       	mov	r0, r31
    4164:	fe e2       	ldi	r31, 0x2E	; 46
    4166:	8f 2e       	mov	r8, r31
    4168:	f8 e0       	ldi	r31, 0x08	; 8
    416a:	9f 2e       	mov	r9, r31
    416c:	f0 2d       	mov	r31, r0
    416e:	e1 2c       	mov	r14, r1
    4170:	f1 2c       	mov	r15, r1
    4172:	4c 2c       	mov	r4, r12
    4174:	37 01       	movw	r6, r14
    4176:	f4 01       	movw	r30, r8
    4178:	01 81       	ldd	r16, Z+1	; 0x01
    417a:	12 81       	ldd	r17, Z+2	; 0x02
    417c:	e8 01       	movw	r28, r16
    417e:	09 90       	ld	r0, Y+
    4180:	00 20       	and	r0, r0
    4182:	e9 f7       	brne	.-6      	; 0x417e <_reply2ReturnCode+0x54>
    4184:	21 97       	sbiw	r28, 0x01	; 1
    4186:	c0 1b       	sub	r28, r16
    4188:	d1 0b       	sbc	r29, r17
    418a:	3c 2e       	mov	r3, r28
    418c:	f9 e0       	ldi	r31, 0x09	; 9
    418e:	cf 16       	cp	r12, r31
    4190:	d1 04       	cpc	r13, r1
    4192:	58 f0       	brcs	.+22     	; 0x41aa <_reply2ReturnCode+0x80>
    4194:	f4 01       	movw	r30, r8
    4196:	20 80       	ld	r2, Z
    4198:	fe e0       	ldi	r31, 0x0E	; 14
    419a:	2f 12       	cpse	r2, r31
    419c:	06 c0       	rjmp	.+12     	; 0x41aa <_reply2ReturnCode+0x80>
    419e:	b8 01       	movw	r22, r16
    41a0:	c5 01       	movw	r24, r10
    41a2:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <strcasestr>
    41a6:	89 2b       	or	r24, r25
    41a8:	09 f5       	brne	.+66     	; 0x41ec <_reply2ReturnCode+0xc2>
    41aa:	44 2d       	mov	r20, r4
    41ac:	35 14       	cp	r3, r5
    41ae:	08 f4       	brcc	.+2      	; 0x41b2 <_reply2ReturnCode+0x88>
    41b0:	4c 2f       	mov	r20, r28
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	b8 01       	movw	r22, r16
    41b6:	c5 01       	movw	r24, r10
    41b8:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <strncasecmp>
    41bc:	89 2b       	or	r24, r25
    41be:	49 f4       	brne	.+18     	; 0x41d2 <_reply2ReturnCode+0xa8>
    41c0:	f3 01       	movw	r30, r6
    41c2:	ee 0f       	add	r30, r30
    41c4:	ff 1f       	adc	r31, r31
    41c6:	e6 0d       	add	r30, r6
    41c8:	f7 1d       	adc	r31, r7
    41ca:	e2 5d       	subi	r30, 0xD2	; 210
    41cc:	f7 4f       	sbci	r31, 0xF7	; 247
    41ce:	20 80       	ld	r2, Z
    41d0:	0d c0       	rjmp	.+26     	; 0x41ec <_reply2ReturnCode+0xc2>
    41d2:	8f ef       	ldi	r24, 0xFF	; 255
    41d4:	e8 1a       	sub	r14, r24
    41d6:	f8 0a       	sbc	r15, r24
    41d8:	e3 e0       	ldi	r30, 0x03	; 3
    41da:	8e 0e       	add	r8, r30
    41dc:	91 1c       	adc	r9, r1
    41de:	f1 e1       	ldi	r31, 0x11	; 17
    41e0:	ef 16       	cp	r14, r31
    41e2:	f1 04       	cpc	r15, r1
    41e4:	39 f6       	brne	.-114    	; 0x4174 <_reply2ReturnCode+0x4a>
    41e6:	68 94       	set
    41e8:	22 24       	eor	r2, r2
    41ea:	24 f8       	bld	r2, 4
    41ec:	82 2d       	mov	r24, r2
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	1f 91       	pop	r17
    41f4:	0f 91       	pop	r16
    41f6:	ff 90       	pop	r15
    41f8:	ef 90       	pop	r14
    41fa:	df 90       	pop	r13
    41fc:	cf 90       	pop	r12
    41fe:	bf 90       	pop	r11
    4200:	af 90       	pop	r10
    4202:	9f 90       	pop	r9
    4204:	8f 90       	pop	r8
    4206:	7f 90       	pop	r7
    4208:	6f 90       	pop	r6
    420a:	5f 90       	pop	r5
    420c:	4f 90       	pop	r4
    420e:	3f 90       	pop	r3
    4210:	2f 90       	pop	r2
    4212:	08 95       	ret

00004214 <_uploadMessageRc>:
    4214:	30 df       	rcall	.-416    	; 0x4076 <_uploadMessage>
    4216:	89 cf       	rjmp	.-238    	; 0x412a <_reply2ReturnCode>
    4218:	08 95       	ret

0000421a <lora_driver_flushBuffers>:
    421a:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    421e:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    4222:	0c 94 45 0b 	jmp	0x168a	; 0x168a <xStreamBufferReset>
    4226:	08 95       	ret

00004228 <lora_driver_initialise>:
    4228:	8f 92       	push	r8
    422a:	9f 92       	push	r9
    422c:	af 92       	push	r10
    422e:	cf 92       	push	r12
    4230:	ef 92       	push	r14
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
    4236:	cf 93       	push	r28
    4238:	c8 2f       	mov	r28, r24
    423a:	8b 01       	movw	r16, r22
    423c:	41 e0       	ldi	r20, 0x01	; 1
    423e:	60 e0       	ldi	r22, 0x00	; 0
    4240:	70 e0       	ldi	r23, 0x00	; 0
    4242:	88 ec       	ldi	r24, 0xC8	; 200
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 13 0b 	call	0x1626	; 0x1626 <xStreamBufferGenericCreate>
    424a:	90 93 e8 13 	sts	0x13E8, r25	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    424e:	80 93 e7 13 	sts	0x13E7, r24	; 0x8013e7 <_serialReplyBufferHandle>
    4252:	10 93 e6 13 	sts	0x13E6, r17	; 0x8013e6 <_downlinkMessageBuffer+0x1>
    4256:	00 93 e5 13 	sts	0x13E5, r16	; 0x8013e5 <_downlinkMessageBuffer>
    425a:	0f 2e       	mov	r0, r31
    425c:	f5 ef       	ldi	r31, 0xF5	; 245
    425e:	8f 2e       	mov	r8, r31
    4260:	ff e1       	ldi	r31, 0x1F	; 31
    4262:	9f 2e       	mov	r9, r31
    4264:	f0 2d       	mov	r31, r0
    4266:	68 94       	set
    4268:	aa 24       	eor	r10, r10
    426a:	a6 f8       	bld	r10, 6
    426c:	68 94       	set
    426e:	cc 24       	eor	r12, r12
    4270:	c6 f8       	bld	r12, 6
    4272:	e1 2c       	mov	r14, r1
    4274:	00 e0       	ldi	r16, 0x00	; 0
    4276:	23 e0       	ldi	r18, 0x03	; 3
    4278:	40 e0       	ldi	r20, 0x00	; 0
    427a:	51 ee       	ldi	r21, 0xE1	; 225
    427c:	60 e0       	ldi	r22, 0x00	; 0
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	8c 2f       	mov	r24, r28
    4282:	d2 d3       	rcall	.+1956   	; 0x4a28 <serial_create>
    4284:	90 93 ea 13 	sts	0x13EA, r25	; 0x8013ea <_rn2483_serial+0x1>
    4288:	80 93 e9 13 	sts	0x13E9, r24	; 0x8013e9 <_rn2483_serial>
    428c:	e7 e0       	ldi	r30, 0x07	; 7
    428e:	f1 e0       	ldi	r31, 0x01	; 1
    4290:	80 81       	ld	r24, Z
    4292:	80 61       	ori	r24, 0x10	; 16
    4294:	80 83       	st	Z, r24
    4296:	cf 91       	pop	r28
    4298:	1f 91       	pop	r17
    429a:	0f 91       	pop	r16
    429c:	ef 90       	pop	r14
    429e:	cf 90       	pop	r12
    42a0:	af 90       	pop	r10
    42a2:	9f 90       	pop	r9
    42a4:	8f 90       	pop	r8
    42a6:	08 95       	ret

000042a8 <lora_driver_resetRn2483>:
    42a8:	88 23       	and	r24, r24
    42aa:	31 f0       	breq	.+12     	; 0x42b8 <lora_driver_resetRn2483+0x10>
    42ac:	e8 e0       	ldi	r30, 0x08	; 8
    42ae:	f1 e0       	ldi	r31, 0x01	; 1
    42b0:	80 81       	ld	r24, Z
    42b2:	8f 7e       	andi	r24, 0xEF	; 239
    42b4:	80 83       	st	Z, r24
    42b6:	08 95       	ret
    42b8:	e8 e0       	ldi	r30, 0x08	; 8
    42ba:	f1 e0       	ldi	r31, 0x01	; 1
    42bc:	80 81       	ld	r24, Z
    42be:	80 61       	ori	r24, 0x10	; 16
    42c0:	80 83       	st	Z, r24
    42c2:	08 95       	ret

000042c4 <lora_driver_rn2483FactoryReset>:
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	84 eb       	ldi	r24, 0xB4	; 180
    42ca:	95 e0       	ldi	r25, 0x05	; 5
    42cc:	d4 de       	rcall	.-600    	; 0x4076 <_uploadMessage>
    42ce:	e0 e7       	ldi	r30, 0x70	; 112
    42d0:	f4 e1       	ldi	r31, 0x14	; 20
    42d2:	01 90       	ld	r0, Z+
    42d4:	00 20       	and	r0, r0
    42d6:	e9 f7       	brne	.-6      	; 0x42d2 <lora_driver_rn2483FactoryReset+0xe>
    42d8:	31 97       	sbiw	r30, 0x01	; 1
    42da:	e0 57       	subi	r30, 0x70	; 112
    42dc:	f4 41       	sbci	r31, 0x14	; 20
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	75 97       	sbiw	r30, 0x15	; 21
    42e2:	08 f0       	brcs	.+2      	; 0x42e6 <lora_driver_rn2483FactoryReset+0x22>
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	08 95       	ret

000042e8 <lora_driver_getRn2483Hweui>:
    42e8:	cf 93       	push	r28
    42ea:	df 93       	push	r29
    42ec:	ec 01       	movw	r28, r24
    42ee:	60 e0       	ldi	r22, 0x00	; 0
    42f0:	70 e0       	ldi	r23, 0x00	; 0
    42f2:	85 ec       	ldi	r24, 0xC5	; 197
    42f4:	95 e0       	ldi	r25, 0x05	; 5
    42f6:	bf de       	rcall	.-642    	; 0x4076 <_uploadMessage>
    42f8:	e0 e7       	ldi	r30, 0x70	; 112
    42fa:	f4 e1       	ldi	r31, 0x14	; 20
    42fc:	01 90       	ld	r0, Z+
    42fe:	00 20       	and	r0, r0
    4300:	e9 f7       	brne	.-6      	; 0x42fc <lora_driver_getRn2483Hweui+0x14>
    4302:	e1 58       	subi	r30, 0x81	; 129
    4304:	f4 41       	sbci	r31, 0x14	; 20
    4306:	39 f4       	brne	.+14     	; 0x4316 <lora_driver_getRn2483Hweui+0x2e>
    4308:	60 e7       	ldi	r22, 0x70	; 112
    430a:	74 e1       	ldi	r23, 0x14	; 20
    430c:	ce 01       	movw	r24, r28
    430e:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <strcpy>
    4312:	80 e0       	ldi	r24, 0x00	; 0
    4314:	02 c0       	rjmp	.+4      	; 0x431a <lora_driver_getRn2483Hweui+0x32>
    4316:	18 82       	st	Y, r1
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	df 91       	pop	r29
    431c:	cf 91       	pop	r28
    431e:	08 95       	ret

00004320 <lora_driver_setDeviceIdentifier>:
    4320:	fc 01       	movw	r30, r24
    4322:	01 90       	ld	r0, Z+
    4324:	00 20       	and	r0, r0
    4326:	e9 f7       	brne	.-6      	; 0x4322 <lora_driver_setDeviceIdentifier+0x2>
    4328:	9f 01       	movw	r18, r30
    432a:	21 51       	subi	r18, 0x11	; 17
    432c:	31 09       	sbc	r19, r1
    432e:	28 17       	cp	r18, r24
    4330:	39 07       	cpc	r19, r25
    4332:	29 f4       	brne	.+10     	; 0x433e <lora_driver_setDeviceIdentifier+0x1e>
    4334:	bc 01       	movw	r22, r24
    4336:	83 ef       	ldi	r24, 0xF3	; 243
    4338:	95 e0       	ldi	r25, 0x05	; 5
    433a:	6c cf       	rjmp	.-296    	; 0x4214 <_uploadMessageRc>
    433c:	08 95       	ret
    433e:	89 e0       	ldi	r24, 0x09	; 9
    4340:	08 95       	ret

00004342 <lora_driver_setApplicationIdentifier>:
    4342:	fc 01       	movw	r30, r24
    4344:	01 90       	ld	r0, Z+
    4346:	00 20       	and	r0, r0
    4348:	e9 f7       	brne	.-6      	; 0x4344 <lora_driver_setApplicationIdentifier+0x2>
    434a:	9f 01       	movw	r18, r30
    434c:	21 51       	subi	r18, 0x11	; 17
    434e:	31 09       	sbc	r19, r1
    4350:	28 17       	cp	r18, r24
    4352:	39 07       	cpc	r19, r25
    4354:	29 f4       	brne	.+10     	; 0x4360 <lora_driver_setApplicationIdentifier+0x1e>
    4356:	bc 01       	movw	r22, r24
    4358:	82 e0       	ldi	r24, 0x02	; 2
    435a:	96 e0       	ldi	r25, 0x06	; 6
    435c:	5b cf       	rjmp	.-330    	; 0x4214 <_uploadMessageRc>
    435e:	08 95       	ret
    4360:	89 e0       	ldi	r24, 0x09	; 9
    4362:	08 95       	ret

00004364 <lora_driver_setApplicationKey>:
    4364:	fc 01       	movw	r30, r24
    4366:	01 90       	ld	r0, Z+
    4368:	00 20       	and	r0, r0
    436a:	e9 f7       	brne	.-6      	; 0x4366 <lora_driver_setApplicationKey+0x2>
    436c:	9f 01       	movw	r18, r30
    436e:	21 52       	subi	r18, 0x21	; 33
    4370:	31 09       	sbc	r19, r1
    4372:	28 17       	cp	r18, r24
    4374:	39 07       	cpc	r19, r25
    4376:	29 f4       	brne	.+10     	; 0x4382 <lora_driver_setApplicationKey+0x1e>
    4378:	bc 01       	movw	r22, r24
    437a:	81 e1       	ldi	r24, 0x11	; 17
    437c:	96 e0       	ldi	r25, 0x06	; 6
    437e:	4a cf       	rjmp	.-364    	; 0x4214 <_uploadMessageRc>
    4380:	08 95       	ret
    4382:	89 e0       	ldi	r24, 0x09	; 9
    4384:	08 95       	ret

00004386 <lora_driver_saveMac>:
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	80 e5       	ldi	r24, 0x50	; 80
    438c:	96 e0       	ldi	r25, 0x06	; 6
    438e:	42 cf       	rjmp	.-380    	; 0x4214 <_uploadMessageRc>
    4390:	08 95       	ret

00004392 <lora_driver_join>:
    4392:	0f 93       	push	r16
    4394:	1f 93       	push	r17
    4396:	e8 2f       	mov	r30, r24
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	ee 0f       	add	r30, r30
    439c:	ff 1f       	adc	r31, r31
    439e:	e6 5d       	subi	r30, 0xD6	; 214
    43a0:	f7 4f       	sbci	r31, 0xF7	; 247
    43a2:	60 81       	ld	r22, Z
    43a4:	71 81       	ldd	r23, Z+1	; 0x01
    43a6:	89 e5       	ldi	r24, 0x59	; 89
    43a8:	96 e0       	ldi	r25, 0x06	; 6
    43aa:	34 df       	rcall	.-408    	; 0x4214 <_uploadMessageRc>
    43ac:	81 11       	cpse	r24, r1
    43ae:	14 c0       	rjmp	.+40     	; 0x43d8 <lora_driver_join+0x46>
    43b0:	08 e2       	ldi	r16, 0x28	; 40
    43b2:	15 e0       	ldi	r17, 0x05	; 5
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	4d e2       	ldi	r20, 0x2D	; 45
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	60 e7       	ldi	r22, 0x70	; 112
    43be:	74 e1       	ldi	r23, 0x14	; 20
    43c0:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    43c4:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    43c8:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <xStreamBufferReceive>
    43cc:	88 23       	and	r24, r24
    43ce:	21 f0       	breq	.+8      	; 0x43d8 <lora_driver_join+0x46>
    43d0:	80 e7       	ldi	r24, 0x70	; 112
    43d2:	94 e1       	ldi	r25, 0x14	; 20
    43d4:	aa de       	rcall	.-684    	; 0x412a <_reply2ReturnCode>
    43d6:	03 c0       	rjmp	.+6      	; 0x43de <lora_driver_join+0x4c>
    43d8:	80 e7       	ldi	r24, 0x70	; 112
    43da:	94 e1       	ldi	r25, 0x14	; 20
    43dc:	a6 de       	rcall	.-692    	; 0x412a <_reply2ReturnCode>
    43de:	1f 91       	pop	r17
    43e0:	0f 91       	pop	r16
    43e2:	08 95       	ret

000043e4 <lora_driver_sendUploadMessage>:
    43e4:	0f 93       	push	r16
    43e6:	1f 93       	push	r17
    43e8:	cf 93       	push	r28
    43ea:	df 93       	push	r29
    43ec:	1f 92       	push	r1
    43ee:	cd b7       	in	r28, 0x3d	; 61
    43f0:	de b7       	in	r29, 0x3e	; 62
    43f2:	db 01       	movw	r26, r22
    43f4:	11 96       	adiw	r26, 0x01	; 1
    43f6:	9c 91       	ld	r25, X
    43f8:	11 97       	sbiw	r26, 0x01	; 1
    43fa:	95 31       	cpi	r25, 0x15	; 21
    43fc:	08 f0       	brcs	.+2      	; 0x4400 <lora_driver_sendUploadMessage+0x1c>
    43fe:	b4 c0       	rjmp	.+360    	; 0x4568 <lora_driver_sendUploadMessage+0x184>
    4400:	99 23       	and	r25, r25
    4402:	81 f1       	breq	.+96     	; 0x4464 <lora_driver_sendUploadMessage+0x80>
    4404:	60 e0       	ldi	r22, 0x00	; 0
    4406:	70 e0       	ldi	r23, 0x00	; 0
    4408:	27 2f       	mov	r18, r23
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	46 2f       	mov	r20, r22
    440e:	50 e0       	ldi	r21, 0x00	; 0
    4410:	fd 01       	movw	r30, r26
    4412:	e4 0f       	add	r30, r20
    4414:	f5 1f       	adc	r31, r21
    4416:	92 81       	ldd	r25, Z+2	; 0x02
    4418:	92 95       	swap	r25
    441a:	9f 70       	andi	r25, 0x0F	; 15
    441c:	9a 30       	cpi	r25, 0x0A	; 10
    441e:	10 f0       	brcs	.+4      	; 0x4424 <lora_driver_sendUploadMessage+0x40>
    4420:	99 5c       	subi	r25, 0xC9	; 201
    4422:	01 c0       	rjmp	.+2      	; 0x4426 <lora_driver_sendUploadMessage+0x42>
    4424:	90 5d       	subi	r25, 0xD0	; 208
    4426:	f9 01       	movw	r30, r18
    4428:	ef 5f       	subi	r30, 0xFF	; 255
    442a:	fb 4e       	sbci	r31, 0xEB	; 235
    442c:	90 83       	st	Z, r25
    442e:	2f 5f       	subi	r18, 0xFF	; 255
    4430:	3f 4f       	sbci	r19, 0xFF	; 255
    4432:	fd 01       	movw	r30, r26
    4434:	e4 0f       	add	r30, r20
    4436:	f5 1f       	adc	r31, r21
    4438:	92 81       	ldd	r25, Z+2	; 0x02
    443a:	9f 70       	andi	r25, 0x0F	; 15
    443c:	49 2f       	mov	r20, r25
    443e:	50 e0       	ldi	r21, 0x00	; 0
    4440:	4a 30       	cpi	r20, 0x0A	; 10
    4442:	51 05       	cpc	r21, r1
    4444:	14 f0       	brlt	.+4      	; 0x444a <lora_driver_sendUploadMessage+0x66>
    4446:	99 5c       	subi	r25, 0xC9	; 201
    4448:	01 c0       	rjmp	.+2      	; 0x444c <lora_driver_sendUploadMessage+0x68>
    444a:	90 5d       	subi	r25, 0xD0	; 208
    444c:	f9 01       	movw	r30, r18
    444e:	ef 5f       	subi	r30, 0xFF	; 255
    4450:	fb 4e       	sbci	r31, 0xEB	; 235
    4452:	90 83       	st	Z, r25
    4454:	7e 5f       	subi	r23, 0xFE	; 254
    4456:	6f 5f       	subi	r22, 0xFF	; 255
    4458:	11 96       	adiw	r26, 0x01	; 1
    445a:	9c 91       	ld	r25, X
    445c:	11 97       	sbiw	r26, 0x01	; 1
    445e:	69 17       	cp	r22, r25
    4460:	98 f2       	brcs	.-90     	; 0x4408 <lora_driver_sendUploadMessage+0x24>
    4462:	01 c0       	rjmp	.+2      	; 0x4466 <lora_driver_sendUploadMessage+0x82>
    4464:	70 e0       	ldi	r23, 0x00	; 0
    4466:	e7 2f       	mov	r30, r23
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	ef 5f       	subi	r30, 0xFF	; 255
    446c:	fb 4e       	sbci	r31, 0xEB	; 235
    446e:	10 82       	st	Z, r1
    4470:	4c 91       	ld	r20, X
    4472:	81 11       	cpse	r24, r1
    4474:	03 c0       	rjmp	.+6      	; 0x447c <lora_driver_sendUploadMessage+0x98>
    4476:	82 e6       	ldi	r24, 0x62	; 98
    4478:	96 e0       	ldi	r25, 0x06	; 6
    447a:	02 c0       	rjmp	.+4      	; 0x4480 <lora_driver_sendUploadMessage+0x9c>
    447c:	84 e6       	ldi	r24, 0x64	; 100
    447e:	96 e0       	ldi	r25, 0x06	; 6
    4480:	21 e0       	ldi	r18, 0x01	; 1
    4482:	34 e1       	ldi	r19, 0x14	; 20
    4484:	3f 93       	push	r19
    4486:	2f 93       	push	r18
    4488:	1f 92       	push	r1
    448a:	4f 93       	push	r20
    448c:	9f 93       	push	r25
    448e:	8f 93       	push	r24
    4490:	88 e6       	ldi	r24, 0x68	; 104
    4492:	96 e0       	ldi	r25, 0x06	; 6
    4494:	9f 93       	push	r25
    4496:	8f 93       	push	r24
    4498:	83 e4       	ldi	r24, 0x43	; 67
    449a:	94 e1       	ldi	r25, 0x14	; 20
    449c:	9f 93       	push	r25
    449e:	8f 93       	push	r24
    44a0:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <sprintf>
    44a4:	60 e0       	ldi	r22, 0x00	; 0
    44a6:	70 e0       	ldi	r23, 0x00	; 0
    44a8:	83 e4       	ldi	r24, 0x43	; 67
    44aa:	94 e1       	ldi	r25, 0x14	; 20
    44ac:	b3 de       	rcall	.-666    	; 0x4214 <_uploadMessageRc>
    44ae:	0f b6       	in	r0, 0x3f	; 63
    44b0:	f8 94       	cli
    44b2:	de bf       	out	0x3e, r29	; 62
    44b4:	0f be       	out	0x3f, r0	; 63
    44b6:	cd bf       	out	0x3d, r28	; 61
    44b8:	81 11       	cpse	r24, r1
    44ba:	59 c0       	rjmp	.+178    	; 0x456e <lora_driver_sendUploadMessage+0x18a>
    44bc:	08 e2       	ldi	r16, 0x28	; 40
    44be:	15 e0       	ldi	r17, 0x05	; 5
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	4d e2       	ldi	r20, 0x2D	; 45
    44c6:	50 e0       	ldi	r21, 0x00	; 0
    44c8:	60 e7       	ldi	r22, 0x70	; 112
    44ca:	74 e1       	ldi	r23, 0x14	; 20
    44cc:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_serialReplyBufferHandle>
    44d0:	90 91 e8 13 	lds	r25, 0x13E8	; 0x8013e8 <_serialReplyBufferHandle+0x1>
    44d4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <xStreamBufferReceive>
    44d8:	88 23       	and	r24, r24
    44da:	09 f4       	brne	.+2      	; 0x44de <lora_driver_sendUploadMessage+0xfa>
    44dc:	47 c0       	rjmp	.+142    	; 0x456c <lora_driver_sendUploadMessage+0x188>
    44de:	80 e7       	ldi	r24, 0x70	; 112
    44e0:	94 e1       	ldi	r25, 0x14	; 20
    44e2:	23 de       	rcall	.-954    	; 0x412a <_reply2ReturnCode>
    44e4:	8e 30       	cpi	r24, 0x0E	; 14
    44e6:	09 f0       	breq	.+2      	; 0x44ea <lora_driver_sendUploadMessage+0x106>
    44e8:	42 c0       	rjmp	.+132    	; 0x456e <lora_driver_sendUploadMessage+0x18a>
    44ea:	87 e0       	ldi	r24, 0x07	; 7
    44ec:	89 83       	std	Y+1, r24	; 0x01
    44ee:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <_downlinkMessageBuffer>
    44f2:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <_downlinkMessageBuffer+0x1>
    44f6:	89 2b       	or	r24, r25
    44f8:	a9 f1       	breq	.+106    	; 0x4564 <lora_driver_sendUploadMessage+0x180>
    44fa:	be 01       	movw	r22, r28
    44fc:	6f 5f       	subi	r22, 0xFF	; 255
    44fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4500:	80 e7       	ldi	r24, 0x70	; 112
    4502:	94 e1       	ldi	r25, 0x14	; 20
    4504:	68 d1       	rcall	.+720    	; 0x47d6 <decode_port_no>
    4506:	80 93 eb 13 	sts	0x13EB, r24	; 0x8013eb <_downlinkPayload>
    450a:	e9 81       	ldd	r30, Y+1	; 0x01
    450c:	f0 e0       	ldi	r31, 0x00	; 0
    450e:	e0 59       	subi	r30, 0x90	; 144
    4510:	fb 4e       	sbci	r31, 0xEB	; 235
    4512:	df 01       	movw	r26, r30
    4514:	0d 90       	ld	r0, X+
    4516:	00 20       	and	r0, r0
    4518:	e9 f7       	brne	.-6      	; 0x4514 <lora_driver_sendUploadMessage+0x130>
    451a:	11 97       	sbiw	r26, 0x01	; 1
    451c:	ae 1b       	sub	r26, r30
    451e:	bf 0b       	sbc	r27, r31
    4520:	aa 23       	and	r26, r26
    4522:	91 f0       	breq	.+36     	; 0x4548 <lora_driver_sendUploadMessage+0x164>
    4524:	bb 27       	eor	r27, r27
    4526:	cd 01       	movw	r24, r26
    4528:	01 97       	sbiw	r24, 0x01	; 1
    452a:	9c 01       	movw	r18, r24
    452c:	12 f4       	brpl	.+4      	; 0x4532 <lora_driver_sendUploadMessage+0x14e>
    452e:	2f 5f       	subi	r18, 0xFF	; 255
    4530:	3f 4f       	sbci	r19, 0xFF	; 255
    4532:	35 95       	asr	r19
    4534:	27 95       	ror	r18
    4536:	20 93 ec 13 	sts	0x13EC, r18	; 0x8013ec <_downlinkPayload+0x1>
    453a:	af 01       	movw	r20, r30
    453c:	4f 5f       	subi	r20, 0xFF	; 255
    453e:	5f 4f       	sbci	r21, 0xFF	; 255
    4540:	64 e1       	ldi	r22, 0x14	; 20
    4542:	8d ee       	ldi	r24, 0xED	; 237
    4544:	93 e1       	ldi	r25, 0x13	; 19
    4546:	73 d1       	rcall	.+742    	; 0x482e <decode_hexadecimal_string_bytes>
    4548:	01 e0       	ldi	r16, 0x01	; 1
    454a:	10 e0       	ldi	r17, 0x00	; 0
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	46 e1       	ldi	r20, 0x16	; 22
    4552:	50 e0       	ldi	r21, 0x00	; 0
    4554:	6b ee       	ldi	r22, 0xEB	; 235
    4556:	73 e1       	ldi	r23, 0x13	; 19
    4558:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <_downlinkMessageBuffer>
    455c:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <_downlinkMessageBuffer+0x1>
    4560:	0e 94 75 0b 	call	0x16ea	; 0x16ea <xStreamBufferSend>
    4564:	8e e0       	ldi	r24, 0x0E	; 14
    4566:	03 c0       	rjmp	.+6      	; 0x456e <lora_driver_sendUploadMessage+0x18a>
    4568:	84 e1       	ldi	r24, 0x14	; 20
    456a:	01 c0       	rjmp	.+2      	; 0x456e <lora_driver_sendUploadMessage+0x18a>
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	0f 90       	pop	r0
    4570:	df 91       	pop	r29
    4572:	cf 91       	pop	r28
    4574:	1f 91       	pop	r17
    4576:	0f 91       	pop	r16
    4578:	08 95       	ret

0000457a <lora_driver_setAdaptiveDataRate>:
    457a:	81 30       	cpi	r24, 0x01	; 1
    457c:	19 f0       	breq	.+6      	; 0x4584 <lora_driver_setAdaptiveDataRate+0xa>
    457e:	68 e7       	ldi	r22, 0x78	; 120
    4580:	76 e0       	ldi	r23, 0x06	; 6
    4582:	02 c0       	rjmp	.+4      	; 0x4588 <lora_driver_setAdaptiveDataRate+0xe>
    4584:	61 e5       	ldi	r22, 0x51	; 81
    4586:	77 e0       	ldi	r23, 0x07	; 7
    4588:	8c e7       	ldi	r24, 0x7C	; 124
    458a:	96 e0       	ldi	r25, 0x06	; 6
    458c:	43 ce       	rjmp	.-890    	; 0x4214 <_uploadMessageRc>
    458e:	08 95       	ret

00004590 <lora_driver_setReceiveDelay>:
    4590:	9f 93       	push	r25
    4592:	8f 93       	push	r24
    4594:	8d ea       	ldi	r24, 0xAD	; 173
    4596:	96 e0       	ldi	r25, 0x06	; 6
    4598:	9f 93       	push	r25
    459a:	8f 93       	push	r24
    459c:	83 e4       	ldi	r24, 0x43	; 67
    459e:	94 e1       	ldi	r25, 0x14	; 20
    45a0:	9f 93       	push	r25
    45a2:	8f 93       	push	r24
    45a4:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <sprintf>
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	70 e0       	ldi	r23, 0x00	; 0
    45ac:	83 e4       	ldi	r24, 0x43	; 67
    45ae:	94 e1       	ldi	r25, 0x14	; 20
    45b0:	31 de       	rcall	.-926    	; 0x4214 <_uploadMessageRc>
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0
    45bc:	0f 90       	pop	r0
    45be:	08 95       	ret

000045c0 <lora_driver_configureToEu868>:
    45c0:	2f 92       	push	r2
    45c2:	3f 92       	push	r3
    45c4:	4f 92       	push	r4
    45c6:	5f 92       	push	r5
    45c8:	6f 92       	push	r6
    45ca:	7f 92       	push	r7
    45cc:	8f 92       	push	r8
    45ce:	9f 92       	push	r9
    45d0:	af 92       	push	r10
    45d2:	bf 92       	push	r11
    45d4:	cf 92       	push	r12
    45d6:	df 92       	push	r13
    45d8:	ef 92       	push	r14
    45da:	ff 92       	push	r15
    45dc:	0f 93       	push	r16
    45de:	1f 93       	push	r17
    45e0:	cf 93       	push	r28
    45e2:	df 93       	push	r29
    45e4:	cd b7       	in	r28, 0x3d	; 61
    45e6:	de b7       	in	r29, 0x3e	; 62
    45e8:	a0 97       	sbiw	r28, 0x20	; 32
    45ea:	0f b6       	in	r0, 0x3f	; 63
    45ec:	f8 94       	cli
    45ee:	de bf       	out	0x3e, r29	; 62
    45f0:	0f be       	out	0x3f, r0	; 63
    45f2:	cd bf       	out	0x3d, r28	; 61
    45f4:	6a ed       	ldi	r22, 0xDA	; 218
    45f6:	76 e0       	ldi	r23, 0x06	; 6
    45f8:	86 ee       	ldi	r24, 0xE6	; 230
    45fa:	96 e0       	ldi	r25, 0x06	; 6
    45fc:	3c dd       	rcall	.-1416   	; 0x4076 <_uploadMessage>
    45fe:	95 dd       	rcall	.-1238   	; 0x412a <_reply2ReturnCode>
    4600:	81 11       	cpse	r24, r1
    4602:	a3 c0       	rjmp	.+326    	; 0x474a <lora_driver_configureToEu868+0x18a>
    4604:	80 e2       	ldi	r24, 0x20	; 32
    4606:	e2 e2       	ldi	r30, 0x22	; 34
    4608:	f2 e0       	ldi	r31, 0x02	; 2
    460a:	de 01       	movw	r26, r28
    460c:	11 96       	adiw	r26, 0x01	; 1
    460e:	01 90       	ld	r0, Z+
    4610:	0d 92       	st	X+, r0
    4612:	8a 95       	dec	r24
    4614:	e1 f7       	brne	.-8      	; 0x460e <lora_driver_configureToEu868+0x4e>
    4616:	9e 01       	movw	r18, r28
    4618:	2f 5f       	subi	r18, 0xFF	; 255
    461a:	3f 4f       	sbci	r19, 0xFF	; 255
    461c:	69 01       	movw	r12, r18
    461e:	e1 2c       	mov	r14, r1
    4620:	f1 2c       	mov	r15, r1
    4622:	0f 2e       	mov	r0, r31
    4624:	f2 ef       	ldi	r31, 0xF2	; 242
    4626:	af 2e       	mov	r10, r31
    4628:	f6 e0       	ldi	r31, 0x06	; 6
    462a:	bf 2e       	mov	r11, r31
    462c:	f0 2d       	mov	r31, r0
    462e:	03 e4       	ldi	r16, 0x43	; 67
    4630:	14 e1       	ldi	r17, 0x14	; 20
    4632:	0f 2e       	mov	r0, r31
    4634:	fb e0       	ldi	r31, 0x0B	; 11
    4636:	4f 2e       	mov	r4, r31
    4638:	f7 e0       	ldi	r31, 0x07	; 7
    463a:	5f 2e       	mov	r5, r31
    463c:	f0 2d       	mov	r31, r0
    463e:	0f 2e       	mov	r0, r31
    4640:	f2 e2       	ldi	r31, 0x22	; 34
    4642:	8f 2e       	mov	r8, r31
    4644:	f7 e0       	ldi	r31, 0x07	; 7
    4646:	9f 2e       	mov	r9, r31
    4648:	f0 2d       	mov	r31, r0
    464a:	0f 2e       	mov	r0, r31
    464c:	fc e3       	ldi	r31, 0x3C	; 60
    464e:	6f 2e       	mov	r6, r31
    4650:	f7 e0       	ldi	r31, 0x07	; 7
    4652:	7f 2e       	mov	r7, r31
    4654:	f0 2d       	mov	r31, r0
    4656:	3e 2c       	mov	r3, r14
    4658:	2f 2c       	mov	r2, r15
    465a:	ff 92       	push	r15
    465c:	ef 92       	push	r14
    465e:	bf 92       	push	r11
    4660:	af 92       	push	r10
    4662:	1f 93       	push	r17
    4664:	0f 93       	push	r16
    4666:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <sprintf>
    466a:	60 e0       	ldi	r22, 0x00	; 0
    466c:	70 e0       	ldi	r23, 0x00	; 0
    466e:	c8 01       	movw	r24, r16
    4670:	02 dd       	rcall	.-1532   	; 0x4076 <_uploadMessage>
    4672:	5b dd       	rcall	.-1354   	; 0x412a <_reply2ReturnCode>
    4674:	0f 90       	pop	r0
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	0f 90       	pop	r0
    467c:	0f 90       	pop	r0
    467e:	0f 90       	pop	r0
    4680:	81 11       	cpse	r24, r1
    4682:	63 c0       	rjmp	.+198    	; 0x474a <lora_driver_configureToEu868+0x18a>
    4684:	32 e0       	ldi	r19, 0x02	; 2
    4686:	3e 15       	cp	r19, r14
    4688:	e8 f4       	brcc	.+58     	; 0x46c4 <lora_driver_configureToEu868+0x104>
    468a:	f6 01       	movw	r30, r12
    468c:	83 81       	ldd	r24, Z+3	; 0x03
    468e:	8f 93       	push	r24
    4690:	82 81       	ldd	r24, Z+2	; 0x02
    4692:	8f 93       	push	r24
    4694:	81 81       	ldd	r24, Z+1	; 0x01
    4696:	8f 93       	push	r24
    4698:	80 81       	ld	r24, Z
    469a:	8f 93       	push	r24
    469c:	ff 92       	push	r15
    469e:	ef 92       	push	r14
    46a0:	5f 92       	push	r5
    46a2:	4f 92       	push	r4
    46a4:	1f 93       	push	r17
    46a6:	0f 93       	push	r16
    46a8:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <sprintf>
    46ac:	60 e0       	ldi	r22, 0x00	; 0
    46ae:	70 e0       	ldi	r23, 0x00	; 0
    46b0:	c8 01       	movw	r24, r16
    46b2:	e1 dc       	rcall	.-1598   	; 0x4076 <_uploadMessage>
    46b4:	3a dd       	rcall	.-1420   	; 0x412a <_reply2ReturnCode>
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	f8 94       	cli
    46ba:	de bf       	out	0x3e, r29	; 62
    46bc:	0f be       	out	0x3f, r0	; 63
    46be:	cd bf       	out	0x3d, r28	; 61
    46c0:	81 11       	cpse	r24, r1
    46c2:	43 c0       	rjmp	.+134    	; 0x474a <lora_driver_configureToEu868+0x18a>
    46c4:	2f 92       	push	r2
    46c6:	3f 92       	push	r3
    46c8:	9f 92       	push	r9
    46ca:	8f 92       	push	r8
    46cc:	1f 93       	push	r17
    46ce:	0f 93       	push	r16
    46d0:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <sprintf>
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	c8 01       	movw	r24, r16
    46da:	cd dc       	rcall	.-1638   	; 0x4076 <_uploadMessage>
    46dc:	26 dd       	rcall	.-1460   	; 0x412a <_reply2ReturnCode>
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	0f 90       	pop	r0
    46e6:	0f 90       	pop	r0
    46e8:	0f 90       	pop	r0
    46ea:	81 11       	cpse	r24, r1
    46ec:	2e c0       	rjmp	.+92     	; 0x474a <lora_driver_configureToEu868+0x18a>
    46ee:	2f 92       	push	r2
    46f0:	3f 92       	push	r3
    46f2:	7f 92       	push	r7
    46f4:	6f 92       	push	r6
    46f6:	1f 93       	push	r17
    46f8:	0f 93       	push	r16
    46fa:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <sprintf>
    46fe:	60 e0       	ldi	r22, 0x00	; 0
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	c8 01       	movw	r24, r16
    4704:	b8 dc       	rcall	.-1680   	; 0x4076 <_uploadMessage>
    4706:	11 dd       	rcall	.-1502   	; 0x412a <_reply2ReturnCode>
    4708:	0f 90       	pop	r0
    470a:	0f 90       	pop	r0
    470c:	0f 90       	pop	r0
    470e:	0f 90       	pop	r0
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	81 11       	cpse	r24, r1
    4716:	19 c0       	rjmp	.+50     	; 0x474a <lora_driver_configureToEu868+0x18a>
    4718:	3f ef       	ldi	r19, 0xFF	; 255
    471a:	e3 1a       	sub	r14, r19
    471c:	f3 0a       	sbc	r15, r19
    471e:	84 e0       	ldi	r24, 0x04	; 4
    4720:	c8 0e       	add	r12, r24
    4722:	d1 1c       	adc	r13, r1
    4724:	98 e0       	ldi	r25, 0x08	; 8
    4726:	e9 16       	cp	r14, r25
    4728:	f1 04       	cpc	r15, r1
    472a:	09 f0       	breq	.+2      	; 0x472e <lora_driver_configureToEu868+0x16e>
    472c:	94 cf       	rjmp	.-216    	; 0x4656 <lora_driver_configureToEu868+0x96>
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	84 e5       	ldi	r24, 0x54	; 84
    4734:	97 e0       	ldi	r25, 0x07	; 7
    4736:	9f dc       	rcall	.-1730   	; 0x4076 <_uploadMessage>
    4738:	f8 dc       	rcall	.-1552   	; 0x412a <_reply2ReturnCode>
    473a:	81 11       	cpse	r24, r1
    473c:	06 c0       	rjmp	.+12     	; 0x474a <lora_driver_configureToEu868+0x18a>
    473e:	60 e0       	ldi	r22, 0x00	; 0
    4740:	70 e0       	ldi	r23, 0x00	; 0
    4742:	85 e6       	ldi	r24, 0x65	; 101
    4744:	97 e0       	ldi	r25, 0x07	; 7
    4746:	97 dc       	rcall	.-1746   	; 0x4076 <_uploadMessage>
    4748:	f0 dc       	rcall	.-1568   	; 0x412a <_reply2ReturnCode>
    474a:	a0 96       	adiw	r28, 0x20	; 32
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	de bf       	out	0x3e, r29	; 62
    4752:	0f be       	out	0x3f, r0	; 63
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	1f 91       	pop	r17
    475c:	0f 91       	pop	r16
    475e:	ff 90       	pop	r15
    4760:	ef 90       	pop	r14
    4762:	df 90       	pop	r13
    4764:	cf 90       	pop	r12
    4766:	bf 90       	pop	r11
    4768:	af 90       	pop	r10
    476a:	9f 90       	pop	r9
    476c:	8f 90       	pop	r8
    476e:	7f 90       	pop	r7
    4770:	6f 90       	pop	r6
    4772:	5f 90       	pop	r5
    4774:	4f 90       	pop	r4
    4776:	3f 90       	pop	r3
    4778:	2f 90       	pop	r2
    477a:	08 95       	ret

0000477c <lora_driver_setOtaaIdentity>:
    477c:	ef 92       	push	r14
    477e:	ff 92       	push	r15
    4780:	0f 93       	push	r16
    4782:	1f 93       	push	r17
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	ec 01       	movw	r28, r24
    478a:	8b 01       	movw	r16, r22
    478c:	7a 01       	movw	r14, r20
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	f4 de       	rcall	.-536    	; 0x457a <lora_driver_setAdaptiveDataRate>
    4792:	81 11       	cpse	r24, r1
    4794:	0d c0       	rjmp	.+26     	; 0x47b0 <lora_driver_setOtaaIdentity+0x34>
    4796:	ce 01       	movw	r24, r28
    4798:	d4 dd       	rcall	.-1112   	; 0x4342 <lora_driver_setApplicationIdentifier>
    479a:	81 11       	cpse	r24, r1
    479c:	09 c0       	rjmp	.+18     	; 0x47b0 <lora_driver_setOtaaIdentity+0x34>
    479e:	c8 01       	movw	r24, r16
    47a0:	e1 dd       	rcall	.-1086   	; 0x4364 <lora_driver_setApplicationKey>
    47a2:	81 11       	cpse	r24, r1
    47a4:	05 c0       	rjmp	.+10     	; 0x47b0 <lora_driver_setOtaaIdentity+0x34>
    47a6:	c7 01       	movw	r24, r14
    47a8:	bb dd       	rcall	.-1162   	; 0x4320 <lora_driver_setDeviceIdentifier>
    47aa:	81 11       	cpse	r24, r1
    47ac:	01 c0       	rjmp	.+2      	; 0x47b0 <lora_driver_setOtaaIdentity+0x34>
    47ae:	eb dd       	rcall	.-1066   	; 0x4386 <lora_driver_saveMac>
    47b0:	df 91       	pop	r29
    47b2:	cf 91       	pop	r28
    47b4:	1f 91       	pop	r17
    47b6:	0f 91       	pop	r16
    47b8:	ff 90       	pop	r15
    47ba:	ef 90       	pop	r14
    47bc:	08 95       	ret

000047be <lora_driver_mapReturnCodeToText>:
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	fc 01       	movw	r30, r24
    47c2:	ee 0f       	add	r30, r30
    47c4:	ff 1f       	adc	r31, r31
    47c6:	8e 0f       	add	r24, r30
    47c8:	9f 1f       	adc	r25, r31
    47ca:	fc 01       	movw	r30, r24
    47cc:	e2 5d       	subi	r30, 0xD2	; 210
    47ce:	f7 4f       	sbci	r31, 0xF7	; 247
    47d0:	81 81       	ldd	r24, Z+1	; 0x01
    47d2:	92 81       	ldd	r25, Z+2	; 0x02
    47d4:	08 95       	ret

000047d6 <decode_port_no>:
    47d6:	dc 01       	movw	r26, r24
    47d8:	00 97       	sbiw	r24, 0x00	; 0
    47da:	29 f1       	breq	.+74     	; 0x4826 <decode_port_no+0x50>
    47dc:	fb 01       	movw	r30, r22
    47de:	20 81       	ld	r18, Z
    47e0:	fc 01       	movw	r30, r24
    47e2:	01 90       	ld	r0, Z+
    47e4:	00 20       	and	r0, r0
    47e6:	e9 f7       	brne	.-6      	; 0x47e2 <decode_port_no+0xc>
    47e8:	31 97       	sbiw	r30, 0x01	; 1
    47ea:	e8 1b       	sub	r30, r24
    47ec:	f9 0b       	sbc	r31, r25
    47ee:	82 2f       	mov	r24, r18
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	e8 17       	cp	r30, r24
    47f4:	f9 07       	cpc	r31, r25
    47f6:	c8 f0       	brcs	.+50     	; 0x482a <decode_port_no+0x54>
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	08 c0       	rjmp	.+16     	; 0x480c <decode_port_no+0x36>
    47fc:	88 0f       	add	r24, r24
    47fe:	38 2f       	mov	r19, r24
    4800:	33 0f       	add	r19, r19
    4802:	33 0f       	add	r19, r19
    4804:	83 0f       	add	r24, r19
    4806:	80 53       	subi	r24, 0x30	; 48
    4808:	89 0f       	add	r24, r25
    480a:	2f 5f       	subi	r18, 0xFF	; 255
    480c:	fd 01       	movw	r30, r26
    480e:	e2 0f       	add	r30, r18
    4810:	f1 1d       	adc	r31, r1
    4812:	90 81       	ld	r25, Z
    4814:	30 ed       	ldi	r19, 0xD0	; 208
    4816:	39 0f       	add	r19, r25
    4818:	3a 30       	cpi	r19, 0x0A	; 10
    481a:	10 f4       	brcc	.+4      	; 0x4820 <decode_port_no+0x4a>
    481c:	91 11       	cpse	r25, r1
    481e:	ee cf       	rjmp	.-36     	; 0x47fc <decode_port_no+0x26>
    4820:	fb 01       	movw	r30, r22
    4822:	20 83       	st	Z, r18
    4824:	08 95       	ret
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	08 95       	ret
    482a:	80 e0       	ldi	r24, 0x00	; 0
    482c:	08 95       	ret

0000482e <decode_hexadecimal_string_bytes>:
    482e:	0f 93       	push	r16
    4830:	1f 93       	push	r17
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    4836:	dc 01       	movw	r26, r24
    4838:	ea 01       	movw	r28, r20
    483a:	20 97       	sbiw	r28, 0x00	; 0
    483c:	e1 f1       	breq	.+120    	; 0x48b6 <decode_hexadecimal_string_bytes+0x88>
    483e:	fa 01       	movw	r30, r20
    4840:	01 90       	ld	r0, Z+
    4842:	00 20       	and	r0, r0
    4844:	e9 f7       	brne	.-6      	; 0x4840 <decode_hexadecimal_string_bytes+0x12>
    4846:	31 97       	sbiw	r30, 0x01	; 1
    4848:	e4 1b       	sub	r30, r20
    484a:	f5 0b       	sbc	r31, r21
    484c:	32 97       	sbiw	r30, 0x02	; 2
    484e:	10 f5       	brcc	.+68     	; 0x4894 <decode_hexadecimal_string_bytes+0x66>
    4850:	32 c0       	rjmp	.+100    	; 0x48b6 <decode_hexadecimal_string_bytes+0x88>
    4852:	8d 01       	movw	r16, r26
    4854:	04 0f       	add	r16, r20
    4856:	15 1f       	adc	r17, r21
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	ae 01       	movw	r20, r28
    485c:	42 0f       	add	r20, r18
    485e:	53 1f       	adc	r21, r19
    4860:	fa 01       	movw	r30, r20
    4862:	90 81       	ld	r25, Z
    4864:	91 34       	cpi	r25, 0x41	; 65
    4866:	28 f0       	brcs	.+10     	; 0x4872 <decode_hexadecimal_string_bytes+0x44>
    4868:	97 53       	subi	r25, 0x37	; 55
    486a:	59 2f       	mov	r21, r25
    486c:	52 95       	swap	r21
    486e:	50 7f       	andi	r21, 0xF0	; 240
    4870:	03 c0       	rjmp	.+6      	; 0x4878 <decode_hexadecimal_string_bytes+0x4a>
    4872:	59 2f       	mov	r21, r25
    4874:	52 95       	swap	r21
    4876:	50 7f       	andi	r21, 0xF0	; 240
    4878:	2c 0f       	add	r18, r28
    487a:	3d 1f       	adc	r19, r29
    487c:	f9 01       	movw	r30, r18
    487e:	91 81       	ldd	r25, Z+1	; 0x01
    4880:	91 34       	cpi	r25, 0x41	; 65
    4882:	10 f0       	brcs	.+4      	; 0x4888 <decode_hexadecimal_string_bytes+0x5a>
    4884:	97 53       	subi	r25, 0x37	; 55
    4886:	01 c0       	rjmp	.+2      	; 0x488a <decode_hexadecimal_string_bytes+0x5c>
    4888:	90 53       	subi	r25, 0x30	; 48
    488a:	95 0f       	add	r25, r21
    488c:	f8 01       	movw	r30, r16
    488e:	90 83       	st	Z, r25
    4890:	8f 5f       	subi	r24, 0xFF	; 255
    4892:	01 c0       	rjmp	.+2      	; 0x4896 <decode_hexadecimal_string_bytes+0x68>
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	28 2f       	mov	r18, r24
    4898:	22 0f       	add	r18, r18
    489a:	48 2f       	mov	r20, r24
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	fe 01       	movw	r30, r28
    48a0:	01 90       	ld	r0, Z+
    48a2:	00 20       	and	r0, r0
    48a4:	e9 f7       	brne	.-6      	; 0x48a0 <decode_hexadecimal_string_bytes+0x72>
    48a6:	31 97       	sbiw	r30, 0x01	; 1
    48a8:	ec 1b       	sub	r30, r28
    48aa:	fd 0b       	sbc	r31, r29
    48ac:	4e 17       	cp	r20, r30
    48ae:	5f 07       	cpc	r21, r31
    48b0:	10 f4       	brcc	.+4      	; 0x48b6 <decode_hexadecimal_string_bytes+0x88>
    48b2:	86 13       	cpse	r24, r22
    48b4:	ce cf       	rjmp	.-100    	; 0x4852 <decode_hexadecimal_string_bytes+0x24>
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	1f 91       	pop	r17
    48bc:	0f 91       	pop	r16
    48be:	08 95       	ret

000048c0 <_serialCallBack>:
    48c0:	80 91 a0 14 	lds	r24, 0x14A0	; 0x8014a0 <crc_sum.1945>
    48c4:	86 0f       	add	r24, r22
    48c6:	80 93 a0 14 	sts	0x14A0, r24	; 0x8014a0 <crc_sum.1945>
    48ca:	90 91 a3 14 	lds	r25, 0x14A3	; 0x8014a3 <_mh_state>
    48ce:	91 30       	cpi	r25, 0x01	; 1
    48d0:	79 f0       	breq	.+30     	; 0x48f0 <_serialCallBack+0x30>
    48d2:	28 f0       	brcs	.+10     	; 0x48de <_serialCallBack+0x1e>
    48d4:	92 30       	cpi	r25, 0x02	; 2
    48d6:	a9 f0       	breq	.+42     	; 0x4902 <_serialCallBack+0x42>
    48d8:	93 30       	cpi	r25, 0x03	; 3
    48da:	19 f1       	breq	.+70     	; 0x4922 <_serialCallBack+0x62>
    48dc:	08 95       	ret
    48de:	6f 3f       	cpi	r22, 0xFF	; 255
    48e0:	09 f0       	breq	.+2      	; 0x48e4 <_serialCallBack+0x24>
    48e2:	48 c0       	rjmp	.+144    	; 0x4974 <_serialCallBack+0xb4>
    48e4:	10 92 a0 14 	sts	0x14A0, r1	; 0x8014a0 <crc_sum.1945>
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	80 93 a3 14 	sts	0x14A3, r24	; 0x8014a3 <_mh_state>
    48ee:	08 95       	ret
    48f0:	66 38       	cpi	r22, 0x86	; 134
    48f2:	09 f0       	breq	.+2      	; 0x48f6 <_serialCallBack+0x36>
    48f4:	3f c0       	rjmp	.+126    	; 0x4974 <_serialCallBack+0xb4>
    48f6:	10 92 9f 14 	sts	0x149F, r1	; 0x80149f <inDex.1943>
    48fa:	82 e0       	ldi	r24, 0x02	; 2
    48fc:	80 93 a3 14 	sts	0x14A3, r24	; 0x8014a3 <_mh_state>
    4900:	08 95       	ret
    4902:	e0 91 9f 14 	lds	r30, 0x149F	; 0x80149f <inDex.1943>
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	8e 0f       	add	r24, r30
    490a:	80 93 9f 14 	sts	0x149F, r24	; 0x80149f <inDex.1943>
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	e3 56       	subi	r30, 0x63	; 99
    4912:	fb 4e       	sbci	r31, 0xEB	; 235
    4914:	60 83       	st	Z, r22
    4916:	82 30       	cpi	r24, 0x02	; 2
    4918:	69 f5       	brne	.+90     	; 0x4974 <_serialCallBack+0xb4>
    491a:	83 e0       	ldi	r24, 0x03	; 3
    491c:	80 93 a3 14 	sts	0x14A3, r24	; 0x8014a3 <_mh_state>
    4920:	08 95       	ret
    4922:	90 91 9f 14 	lds	r25, 0x149F	; 0x80149f <inDex.1943>
    4926:	21 e0       	ldi	r18, 0x01	; 1
    4928:	29 0f       	add	r18, r25
    492a:	20 93 9f 14 	sts	0x149F, r18	; 0x80149f <inDex.1943>
    492e:	96 30       	cpi	r25, 0x06	; 6
    4930:	09 f5       	brne	.+66     	; 0x4974 <_serialCallBack+0xb4>
    4932:	81 11       	cpse	r24, r1
    4934:	0e c0       	rjmp	.+28     	; 0x4952 <_serialCallBack+0x92>
    4936:	ed e9       	ldi	r30, 0x9D	; 157
    4938:	f4 e1       	ldi	r31, 0x14	; 20
    493a:	80 81       	ld	r24, Z
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	98 2f       	mov	r25, r24
    4940:	88 27       	eor	r24, r24
    4942:	21 81       	ldd	r18, Z+1	; 0x01
    4944:	82 0f       	add	r24, r18
    4946:	91 1d       	adc	r25, r1
    4948:	90 93 a5 14 	sts	0x14A5, r25	; 0x8014a5 <_ppm+0x1>
    494c:	80 93 a4 14 	sts	0x14A4, r24	; 0x8014a4 <_ppm>
    4950:	04 c0       	rjmp	.+8      	; 0x495a <_serialCallBack+0x9a>
    4952:	10 92 a5 14 	sts	0x14A5, r1	; 0x8014a5 <_ppm+0x1>
    4956:	10 92 a4 14 	sts	0x14A4, r1	; 0x8014a4 <_ppm>
    495a:	10 92 a3 14 	sts	0x14A3, r1	; 0x8014a3 <_mh_state>
    495e:	e0 91 a1 14 	lds	r30, 0x14A1	; 0x8014a1 <_appCallBack>
    4962:	f0 91 a2 14 	lds	r31, 0x14A2	; 0x8014a2 <_appCallBack+0x1>
    4966:	30 97       	sbiw	r30, 0x00	; 0
    4968:	29 f0       	breq	.+10     	; 0x4974 <_serialCallBack+0xb4>
    496a:	80 91 a4 14 	lds	r24, 0x14A4	; 0x8014a4 <_ppm>
    496e:	90 91 a5 14 	lds	r25, 0x14A5	; 0x8014a5 <_ppm+0x1>
    4972:	19 95       	eicall
    4974:	08 95       	ret

00004976 <mh_z19_initialise>:
    4976:	8f 92       	push	r8
    4978:	9f 92       	push	r9
    497a:	af 92       	push	r10
    497c:	cf 92       	push	r12
    497e:	ef 92       	push	r14
    4980:	0f 93       	push	r16
    4982:	0f 2e       	mov	r0, r31
    4984:	f0 e6       	ldi	r31, 0x60	; 96
    4986:	8f 2e       	mov	r8, r31
    4988:	f4 e2       	ldi	r31, 0x24	; 36
    498a:	9f 2e       	mov	r9, r31
    498c:	f0 2d       	mov	r31, r0
    498e:	68 94       	set
    4990:	aa 24       	eor	r10, r10
    4992:	a4 f8       	bld	r10, 4
    4994:	68 94       	set
    4996:	cc 24       	eor	r12, r12
    4998:	c4 f8       	bld	r12, 4
    499a:	e1 2c       	mov	r14, r1
    499c:	00 e0       	ldi	r16, 0x00	; 0
    499e:	23 e0       	ldi	r18, 0x03	; 3
    49a0:	40 e8       	ldi	r20, 0x80	; 128
    49a2:	55 e2       	ldi	r21, 0x25	; 37
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	3f d0       	rcall	.+126    	; 0x4a28 <serial_create>
    49aa:	90 93 a7 14 	sts	0x14A7, r25	; 0x8014a7 <_serial+0x1>
    49ae:	80 93 a6 14 	sts	0x14A6, r24	; 0x8014a6 <_serial>
    49b2:	0f 91       	pop	r16
    49b4:	ef 90       	pop	r14
    49b6:	cf 90       	pop	r12
    49b8:	af 90       	pop	r10
    49ba:	9f 90       	pop	r9
    49bc:	8f 90       	pop	r8
    49be:	08 95       	ret

000049c0 <mh_z19_injectCallBack>:
    49c0:	90 93 a2 14 	sts	0x14A2, r25	; 0x8014a2 <_appCallBack+0x1>
    49c4:	80 93 a1 14 	sts	0x14A1, r24	; 0x8014a1 <_appCallBack>
    49c8:	08 95       	ret

000049ca <mh_z19_takeMeassuring>:
    49ca:	cf 93       	push	r28
    49cc:	df 93       	push	r29
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
    49d2:	29 97       	sbiw	r28, 0x09	; 9
    49d4:	0f b6       	in	r0, 0x3f	; 63
    49d6:	f8 94       	cli
    49d8:	de bf       	out	0x3e, r29	; 62
    49da:	0f be       	out	0x3f, r0	; 63
    49dc:	cd bf       	out	0x3d, r28	; 61
    49de:	89 e0       	ldi	r24, 0x09	; 9
    49e0:	e2 e4       	ldi	r30, 0x42	; 66
    49e2:	f2 e0       	ldi	r31, 0x02	; 2
    49e4:	9e 01       	movw	r18, r28
    49e6:	2f 5f       	subi	r18, 0xFF	; 255
    49e8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ea:	d9 01       	movw	r26, r18
    49ec:	01 90       	ld	r0, Z+
    49ee:	0d 92       	st	X+, r0
    49f0:	8a 95       	dec	r24
    49f2:	e1 f7       	brne	.-8      	; 0x49ec <mh_z19_takeMeassuring+0x22>
    49f4:	10 92 a5 14 	sts	0x14A5, r1	; 0x8014a5 <_ppm+0x1>
    49f8:	10 92 a4 14 	sts	0x14A4, r1	; 0x8014a4 <_ppm>
    49fc:	80 91 a6 14 	lds	r24, 0x14A6	; 0x8014a6 <_serial>
    4a00:	90 91 a7 14 	lds	r25, 0x14A7	; 0x8014a7 <_serial+0x1>
    4a04:	00 97       	sbiw	r24, 0x00	; 0
    4a06:	31 f0       	breq	.+12     	; 0x4a14 <mh_z19_takeMeassuring+0x4a>
    4a08:	42 2f       	mov	r20, r18
    4a0a:	53 2f       	mov	r21, r19
    4a0c:	69 e0       	ldi	r22, 0x09	; 9
    4a0e:	d8 d0       	rcall	.+432    	; 0x4bc0 <serial_sendBytes>
    4a10:	80 e0       	ldi	r24, 0x00	; 0
    4a12:	01 c0       	rjmp	.+2      	; 0x4a16 <mh_z19_takeMeassuring+0x4c>
    4a14:	82 e0       	ldi	r24, 0x02	; 2
    4a16:	29 96       	adiw	r28, 0x09	; 9
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	f8 94       	cli
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	cd bf       	out	0x3d, r28	; 61
    4a22:	df 91       	pop	r29
    4a24:	cf 91       	pop	r28
    4a26:	08 95       	ret

00004a28 <serial_create>:
    4a28:	2f 92       	push	r2
    4a2a:	3f 92       	push	r3
    4a2c:	4f 92       	push	r4
    4a2e:	5f 92       	push	r5
    4a30:	6f 92       	push	r6
    4a32:	7f 92       	push	r7
    4a34:	8f 92       	push	r8
    4a36:	9f 92       	push	r9
    4a38:	af 92       	push	r10
    4a3a:	cf 92       	push	r12
    4a3c:	ef 92       	push	r14
    4a3e:	ff 92       	push	r15
    4a40:	0f 93       	push	r16
    4a42:	1f 93       	push	r17
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	f8 2e       	mov	r15, r24
    4a4e:	2a 01       	movw	r4, r20
    4a50:	3b 01       	movw	r6, r22
    4a52:	88 e0       	ldi	r24, 0x08	; 8
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <malloc>
    4a5a:	8c 01       	movw	r16, r24
    4a5c:	8f 2d       	mov	r24, r15
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	fc 01       	movw	r30, r24
    4a62:	ee 0f       	add	r30, r30
    4a64:	ff 1f       	adc	r31, r31
    4a66:	e8 55       	subi	r30, 0x58	; 88
    4a68:	fb 4e       	sbci	r31, 0xEB	; 235
    4a6a:	11 83       	std	Z+1, r17	; 0x01
    4a6c:	00 83       	st	Z, r16
    4a6e:	01 15       	cp	r16, r1
    4a70:	11 05       	cpc	r17, r1
    4a72:	09 f4       	brne	.+2      	; 0x4a76 <serial_create+0x4e>
    4a74:	68 c0       	rjmp	.+208    	; 0x4b46 <serial_create+0x11e>
    4a76:	88 0f       	add	r24, r24
    4a78:	99 1f       	adc	r25, r25
    4a7a:	fc 01       	movw	r30, r24
    4a7c:	e5 5f       	subi	r30, 0xF5	; 245
    4a7e:	fd 4f       	sbci	r31, 0xFD	; 253
    4a80:	80 81       	ld	r24, Z
    4a82:	91 81       	ldd	r25, Z+1	; 0x01
    4a84:	d8 01       	movw	r26, r16
    4a86:	8d 93       	st	X+, r24
    4a88:	9c 93       	st	X, r25
    4a8a:	6c 2d       	mov	r22, r12
    4a8c:	70 e0       	ldi	r23, 0x00	; 0
    4a8e:	84 e0       	ldi	r24, 0x04	; 4
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <calloc>
    4a96:	1c 01       	movw	r2, r24
    4a98:	61 e0       	ldi	r22, 0x01	; 1
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	86 e0       	ldi	r24, 0x06	; 6
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <calloc>
    4aa4:	7c 01       	movw	r14, r24
    4aa6:	4c 2d       	mov	r20, r12
    4aa8:	b1 01       	movw	r22, r2
    4aaa:	5c d6       	rcall	.+3256   	; 0x5764 <fifo_init>
    4aac:	f8 01       	movw	r30, r16
    4aae:	f5 82       	std	Z+5, r15	; 0x05
    4ab0:	e4 82       	std	Z+4, r14	; 0x04
    4ab2:	6a 2d       	mov	r22, r10
    4ab4:	70 e0       	ldi	r23, 0x00	; 0
    4ab6:	84 e0       	ldi	r24, 0x04	; 4
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <calloc>
    4abe:	1c 01       	movw	r2, r24
    4ac0:	61 e0       	ldi	r22, 0x01	; 1
    4ac2:	70 e0       	ldi	r23, 0x00	; 0
    4ac4:	86 e0       	ldi	r24, 0x06	; 6
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <calloc>
    4acc:	7c 01       	movw	r14, r24
    4ace:	4a 2d       	mov	r20, r10
    4ad0:	b1 01       	movw	r22, r2
    4ad2:	48 d6       	rcall	.+3216   	; 0x5764 <fifo_init>
    4ad4:	d8 01       	movw	r26, r16
    4ad6:	13 96       	adiw	r26, 0x03	; 3
    4ad8:	fc 92       	st	X, r15
    4ada:	ee 92       	st	-X, r14
    4adc:	12 97       	sbiw	r26, 0x02	; 2
    4ade:	17 96       	adiw	r26, 0x07	; 7
    4ae0:	9c 92       	st	X, r9
    4ae2:	8e 92       	st	-X, r8
    4ae4:	16 97       	sbiw	r26, 0x06	; 6
    4ae6:	ff b6       	in	r15, 0x3f	; 63
    4ae8:	f8 94       	cli
    4aea:	ed 91       	ld	r30, X+
    4aec:	fc 91       	ld	r31, X
    4aee:	11 97       	sbiw	r26, 0x01	; 1
    4af0:	36 97       	sbiw	r30, 0x06	; 6
    4af2:	80 81       	ld	r24, Z
    4af4:	82 60       	ori	r24, 0x02	; 2
    4af6:	80 83       	st	Z, r24
    4af8:	8d 90       	ld	r8, X+
    4afa:	9c 90       	ld	r9, X
    4afc:	c3 01       	movw	r24, r6
    4afe:	b2 01       	movw	r22, r4
    4b00:	4b d7       	rcall	.+3734   	; 0x5998 <__floatunsisf>
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	40 e0       	ldi	r20, 0x00	; 0
    4b08:	51 e4       	ldi	r21, 0x41	; 65
    4b0a:	d4 d7       	rcall	.+4008   	; 0x5ab4 <__mulsf3>
    4b0c:	9b 01       	movw	r18, r22
    4b0e:	ac 01       	movw	r20, r24
    4b10:	60 e0       	ldi	r22, 0x00	; 0
    4b12:	74 e2       	ldi	r23, 0x24	; 36
    4b14:	84 e7       	ldi	r24, 0x74	; 116
    4b16:	9b e4       	ldi	r25, 0x4B	; 75
    4b18:	a6 d6       	rcall	.+3404   	; 0x5866 <__divsf3>
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	40 e8       	ldi	r20, 0x80	; 128
    4b20:	5f e3       	ldi	r21, 0x3F	; 63
    4b22:	3c d6       	rcall	.+3192   	; 0x579c <__subsf3>
    4b24:	0d d7       	rcall	.+3610   	; 0x5940 <__fixunssfsi>
    4b26:	f4 01       	movw	r30, r8
    4b28:	32 97       	sbiw	r30, 0x02	; 2
    4b2a:	60 83       	st	Z, r22
    4b2c:	d8 01       	movw	r26, r16
    4b2e:	ed 91       	ld	r30, X+
    4b30:	fc 91       	ld	r31, X
    4b32:	11 97       	sbiw	r26, 0x01	; 1
    4b34:	35 97       	sbiw	r30, 0x05	; 5
    4b36:	88 e9       	ldi	r24, 0x98	; 152
    4b38:	80 83       	st	Z, r24
    4b3a:	ed 91       	ld	r30, X+
    4b3c:	fc 91       	ld	r31, X
    4b3e:	34 97       	sbiw	r30, 0x04	; 4
    4b40:	86 e0       	ldi	r24, 0x06	; 6
    4b42:	80 83       	st	Z, r24
    4b44:	ff be       	out	0x3f, r15	; 63
    4b46:	c8 01       	movw	r24, r16
    4b48:	df 91       	pop	r29
    4b4a:	cf 91       	pop	r28
    4b4c:	1f 91       	pop	r17
    4b4e:	0f 91       	pop	r16
    4b50:	ff 90       	pop	r15
    4b52:	ef 90       	pop	r14
    4b54:	cf 90       	pop	r12
    4b56:	af 90       	pop	r10
    4b58:	9f 90       	pop	r9
    4b5a:	8f 90       	pop	r8
    4b5c:	7f 90       	pop	r7
    4b5e:	6f 90       	pop	r6
    4b60:	5f 90       	pop	r5
    4b62:	4f 90       	pop	r4
    4b64:	3f 90       	pop	r3
    4b66:	2f 90       	pop	r2
    4b68:	08 95       	ret

00004b6a <serial_sendByte>:
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	dc 01       	movw	r26, r24
    4b70:	89 2b       	or	r24, r25
    4b72:	01 f1       	breq	.+64     	; 0x4bb4 <serial_sendByte+0x4a>
    4b74:	12 96       	adiw	r26, 0x02	; 2
    4b76:	ed 91       	ld	r30, X+
    4b78:	fc 91       	ld	r31, X
    4b7a:	13 97       	sbiw	r26, 0x03	; 3
    4b7c:	93 81       	ldd	r25, Z+3	; 0x03
    4b7e:	82 81       	ldd	r24, Z+2	; 0x02
    4b80:	25 81       	ldd	r18, Z+5	; 0x05
    4b82:	98 1b       	sub	r25, r24
    4b84:	92 23       	and	r25, r18
    4b86:	84 81       	ldd	r24, Z+4	; 0x04
    4b88:	98 17       	cp	r25, r24
    4b8a:	b1 f0       	breq	.+44     	; 0x4bb8 <serial_sendByte+0x4e>
    4b8c:	83 81       	ldd	r24, Z+3	; 0x03
    4b8e:	26 95       	lsr	r18
    4b90:	28 23       	and	r18, r24
    4b92:	c0 81       	ld	r28, Z
    4b94:	d1 81       	ldd	r29, Z+1	; 0x01
    4b96:	c2 0f       	add	r28, r18
    4b98:	d1 1d       	adc	r29, r1
    4b9a:	68 83       	st	Y, r22
    4b9c:	8f 5f       	subi	r24, 0xFF	; 255
    4b9e:	95 81       	ldd	r25, Z+5	; 0x05
    4ba0:	89 23       	and	r24, r25
    4ba2:	83 83       	std	Z+3, r24	; 0x03
    4ba4:	ed 91       	ld	r30, X+
    4ba6:	fc 91       	ld	r31, X
    4ba8:	35 97       	sbiw	r30, 0x05	; 5
    4baa:	80 81       	ld	r24, Z
    4bac:	80 62       	ori	r24, 0x20	; 32
    4bae:	80 83       	st	Z, r24
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	03 c0       	rjmp	.+6      	; 0x4bba <serial_sendByte+0x50>
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	01 c0       	rjmp	.+2      	; 0x4bba <serial_sendByte+0x50>
    4bb8:	82 e0       	ldi	r24, 0x02	; 2
    4bba:	df 91       	pop	r29
    4bbc:	cf 91       	pop	r28
    4bbe:	08 95       	ret

00004bc0 <serial_sendBytes>:
    4bc0:	ef 92       	push	r14
    4bc2:	ff 92       	push	r15
    4bc4:	0f 93       	push	r16
    4bc6:	1f 93       	push	r17
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	7c 01       	movw	r14, r24
    4bce:	00 97       	sbiw	r24, 0x00	; 0
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <serial_sendBytes+0x14>
    4bd2:	41 c0       	rjmp	.+130    	; 0x4c56 <serial_sendBytes+0x96>
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	12 96       	adiw	r26, 0x02	; 2
    4bd8:	ed 91       	ld	r30, X+
    4bda:	fc 91       	ld	r31, X
    4bdc:	13 97       	sbiw	r26, 0x03	; 3
    4bde:	93 81       	ldd	r25, Z+3	; 0x03
    4be0:	82 81       	ldd	r24, Z+2	; 0x02
    4be2:	98 1b       	sub	r25, r24
    4be4:	85 81       	ldd	r24, Z+5	; 0x05
    4be6:	98 23       	and	r25, r24
    4be8:	84 81       	ldd	r24, Z+4	; 0x04
    4bea:	89 1b       	sub	r24, r25
    4bec:	86 17       	cp	r24, r22
    4bee:	a8 f1       	brcs	.+106    	; 0x4c5a <serial_sendBytes+0x9a>
    4bf0:	66 23       	and	r22, r22
    4bf2:	41 f1       	breq	.+80     	; 0x4c44 <serial_sendBytes+0x84>
    4bf4:	84 2f       	mov	r24, r20
    4bf6:	95 2f       	mov	r25, r21
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	61 50       	subi	r22, 0x01	; 1
    4bfc:	46 2f       	mov	r20, r22
    4bfe:	50 e0       	ldi	r21, 0x00	; 0
    4c00:	4f 5f       	subi	r20, 0xFF	; 255
    4c02:	5f 4f       	sbci	r21, 0xFF	; 255
    4c04:	48 0f       	add	r20, r24
    4c06:	59 1f       	adc	r21, r25
    4c08:	e7 01       	movw	r28, r14
    4c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    4c0c:	fb 81       	ldd	r31, Y+3	; 0x03
    4c0e:	93 81       	ldd	r25, Z+3	; 0x03
    4c10:	82 81       	ldd	r24, Z+2	; 0x02
    4c12:	25 81       	ldd	r18, Z+5	; 0x05
    4c14:	98 1b       	sub	r25, r24
    4c16:	92 23       	and	r25, r18
    4c18:	84 81       	ldd	r24, Z+4	; 0x04
    4c1a:	98 17       	cp	r25, r24
    4c1c:	79 f0       	breq	.+30     	; 0x4c3c <serial_sendBytes+0x7c>
    4c1e:	8c 91       	ld	r24, X
    4c20:	93 81       	ldd	r25, Z+3	; 0x03
    4c22:	26 95       	lsr	r18
    4c24:	29 23       	and	r18, r25
    4c26:	60 81       	ld	r22, Z
    4c28:	71 81       	ldd	r23, Z+1	; 0x01
    4c2a:	8b 01       	movw	r16, r22
    4c2c:	02 0f       	add	r16, r18
    4c2e:	11 1d       	adc	r17, r1
    4c30:	e8 01       	movw	r28, r16
    4c32:	88 83       	st	Y, r24
    4c34:	9f 5f       	subi	r25, 0xFF	; 255
    4c36:	85 81       	ldd	r24, Z+5	; 0x05
    4c38:	98 23       	and	r25, r24
    4c3a:	93 83       	std	Z+3, r25	; 0x03
    4c3c:	11 96       	adiw	r26, 0x01	; 1
    4c3e:	a4 17       	cp	r26, r20
    4c40:	b5 07       	cpc	r27, r21
    4c42:	11 f7       	brne	.-60     	; 0x4c08 <serial_sendBytes+0x48>
    4c44:	d7 01       	movw	r26, r14
    4c46:	ed 91       	ld	r30, X+
    4c48:	fc 91       	ld	r31, X
    4c4a:	35 97       	sbiw	r30, 0x05	; 5
    4c4c:	80 81       	ld	r24, Z
    4c4e:	80 62       	ori	r24, 0x20	; 32
    4c50:	80 83       	st	Z, r24
    4c52:	80 e0       	ldi	r24, 0x00	; 0
    4c54:	03 c0       	rjmp	.+6      	; 0x4c5c <serial_sendBytes+0x9c>
    4c56:	81 e0       	ldi	r24, 0x01	; 1
    4c58:	01 c0       	rjmp	.+2      	; 0x4c5c <serial_sendBytes+0x9c>
    4c5a:	82 e0       	ldi	r24, 0x02	; 2
    4c5c:	df 91       	pop	r29
    4c5e:	cf 91       	pop	r28
    4c60:	1f 91       	pop	r17
    4c62:	0f 91       	pop	r16
    4c64:	ff 90       	pop	r15
    4c66:	ef 90       	pop	r14
    4c68:	08 95       	ret

00004c6a <serial_getByte>:
    4c6a:	00 97       	sbiw	r24, 0x00	; 0
    4c6c:	d1 f0       	breq	.+52     	; 0x4ca2 <serial_getByte+0x38>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	14 96       	adiw	r26, 0x04	; 4
    4c72:	ed 91       	ld	r30, X+
    4c74:	fc 91       	ld	r31, X
    4c76:	15 97       	sbiw	r26, 0x05	; 5
    4c78:	93 81       	ldd	r25, Z+3	; 0x03
    4c7a:	82 81       	ldd	r24, Z+2	; 0x02
    4c7c:	98 17       	cp	r25, r24
    4c7e:	99 f0       	breq	.+38     	; 0x4ca6 <serial_getByte+0x3c>
    4c80:	92 81       	ldd	r25, Z+2	; 0x02
    4c82:	85 81       	ldd	r24, Z+5	; 0x05
    4c84:	86 95       	lsr	r24
    4c86:	89 23       	and	r24, r25
    4c88:	a0 81       	ld	r26, Z
    4c8a:	b1 81       	ldd	r27, Z+1	; 0x01
    4c8c:	a8 0f       	add	r26, r24
    4c8e:	b1 1d       	adc	r27, r1
    4c90:	8c 91       	ld	r24, X
    4c92:	db 01       	movw	r26, r22
    4c94:	8c 93       	st	X, r24
    4c96:	9f 5f       	subi	r25, 0xFF	; 255
    4c98:	85 81       	ldd	r24, Z+5	; 0x05
    4c9a:	98 23       	and	r25, r24
    4c9c:	92 83       	std	Z+2, r25	; 0x02
    4c9e:	80 e0       	ldi	r24, 0x00	; 0
    4ca0:	08 95       	ret
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	08 95       	ret
    4ca6:	83 e0       	ldi	r24, 0x03	; 3
    4ca8:	08 95       	ret

00004caa <__vector_25>:
    4caa:	1f 92       	push	r1
    4cac:	0f 92       	push	r0
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	0f 92       	push	r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	0b b6       	in	r0, 0x3b	; 59
    4cb6:	0f 92       	push	r0
    4cb8:	2f 93       	push	r18
    4cba:	3f 93       	push	r19
    4cbc:	4f 93       	push	r20
    4cbe:	5f 93       	push	r21
    4cc0:	6f 93       	push	r22
    4cc2:	7f 93       	push	r23
    4cc4:	8f 93       	push	r24
    4cc6:	9f 93       	push	r25
    4cc8:	af 93       	push	r26
    4cca:	bf 93       	push	r27
    4ccc:	cf 93       	push	r28
    4cce:	df 93       	push	r29
    4cd0:	ef 93       	push	r30
    4cd2:	ff 93       	push	r31
    4cd4:	a0 91 a8 14 	lds	r26, 0x14A8	; 0x8014a8 <_ser_handle>
    4cd8:	b0 91 a9 14 	lds	r27, 0x14A9	; 0x8014a9 <_ser_handle+0x1>
    4cdc:	10 97       	sbiw	r26, 0x00	; 0
    4cde:	11 f1       	breq	.+68     	; 0x4d24 <__vector_25+0x7a>
    4ce0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4ce4:	14 96       	adiw	r26, 0x04	; 4
    4ce6:	ed 91       	ld	r30, X+
    4ce8:	fc 91       	ld	r31, X
    4cea:	15 97       	sbiw	r26, 0x05	; 5
    4cec:	93 81       	ldd	r25, Z+3	; 0x03
    4cee:	82 81       	ldd	r24, Z+2	; 0x02
    4cf0:	25 81       	ldd	r18, Z+5	; 0x05
    4cf2:	98 1b       	sub	r25, r24
    4cf4:	92 23       	and	r25, r18
    4cf6:	84 81       	ldd	r24, Z+4	; 0x04
    4cf8:	98 17       	cp	r25, r24
    4cfa:	61 f0       	breq	.+24     	; 0x4d14 <__vector_25+0x6a>
    4cfc:	83 81       	ldd	r24, Z+3	; 0x03
    4cfe:	26 95       	lsr	r18
    4d00:	28 23       	and	r18, r24
    4d02:	c0 81       	ld	r28, Z
    4d04:	d1 81       	ldd	r29, Z+1	; 0x01
    4d06:	c2 0f       	add	r28, r18
    4d08:	d1 1d       	adc	r29, r1
    4d0a:	68 83       	st	Y, r22
    4d0c:	8f 5f       	subi	r24, 0xFF	; 255
    4d0e:	95 81       	ldd	r25, Z+5	; 0x05
    4d10:	89 23       	and	r24, r25
    4d12:	83 83       	std	Z+3, r24	; 0x03
    4d14:	16 96       	adiw	r26, 0x06	; 6
    4d16:	ed 91       	ld	r30, X+
    4d18:	fc 91       	ld	r31, X
    4d1a:	17 97       	sbiw	r26, 0x07	; 7
    4d1c:	30 97       	sbiw	r30, 0x00	; 0
    4d1e:	11 f0       	breq	.+4      	; 0x4d24 <__vector_25+0x7a>
    4d20:	cd 01       	movw	r24, r26
    4d22:	19 95       	eicall
    4d24:	ff 91       	pop	r31
    4d26:	ef 91       	pop	r30
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	bf 91       	pop	r27
    4d2e:	af 91       	pop	r26
    4d30:	9f 91       	pop	r25
    4d32:	8f 91       	pop	r24
    4d34:	7f 91       	pop	r23
    4d36:	6f 91       	pop	r22
    4d38:	5f 91       	pop	r21
    4d3a:	4f 91       	pop	r20
    4d3c:	3f 91       	pop	r19
    4d3e:	2f 91       	pop	r18
    4d40:	0f 90       	pop	r0
    4d42:	0b be       	out	0x3b, r0	; 59
    4d44:	0f 90       	pop	r0
    4d46:	0f be       	out	0x3f, r0	; 63
    4d48:	0f 90       	pop	r0
    4d4a:	1f 90       	pop	r1
    4d4c:	18 95       	reti

00004d4e <__vector_26>:
    4d4e:	1f 92       	push	r1
    4d50:	0f 92       	push	r0
    4d52:	0f b6       	in	r0, 0x3f	; 63
    4d54:	0f 92       	push	r0
    4d56:	11 24       	eor	r1, r1
    4d58:	0b b6       	in	r0, 0x3b	; 59
    4d5a:	0f 92       	push	r0
    4d5c:	2f 93       	push	r18
    4d5e:	8f 93       	push	r24
    4d60:	9f 93       	push	r25
    4d62:	af 93       	push	r26
    4d64:	bf 93       	push	r27
    4d66:	ef 93       	push	r30
    4d68:	ff 93       	push	r31
    4d6a:	e0 91 a8 14 	lds	r30, 0x14A8	; 0x8014a8 <_ser_handle>
    4d6e:	f0 91 a9 14 	lds	r31, 0x14A9	; 0x8014a9 <_ser_handle+0x1>
    4d72:	30 97       	sbiw	r30, 0x00	; 0
    4d74:	b9 f0       	breq	.+46     	; 0x4da4 <__vector_26+0x56>
    4d76:	02 80       	ldd	r0, Z+2	; 0x02
    4d78:	f3 81       	ldd	r31, Z+3	; 0x03
    4d7a:	e0 2d       	mov	r30, r0
    4d7c:	93 81       	ldd	r25, Z+3	; 0x03
    4d7e:	82 81       	ldd	r24, Z+2	; 0x02
    4d80:	98 17       	cp	r25, r24
    4d82:	b1 f0       	breq	.+44     	; 0x4db0 <__vector_26+0x62>
    4d84:	92 81       	ldd	r25, Z+2	; 0x02
    4d86:	85 81       	ldd	r24, Z+5	; 0x05
    4d88:	28 2f       	mov	r18, r24
    4d8a:	26 95       	lsr	r18
    4d8c:	29 23       	and	r18, r25
    4d8e:	a0 81       	ld	r26, Z
    4d90:	b1 81       	ldd	r27, Z+1	; 0x01
    4d92:	a2 0f       	add	r26, r18
    4d94:	b1 1d       	adc	r27, r1
    4d96:	2c 91       	ld	r18, X
    4d98:	9f 5f       	subi	r25, 0xFF	; 255
    4d9a:	89 23       	and	r24, r25
    4d9c:	82 83       	std	Z+2, r24	; 0x02
    4d9e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4da2:	0b c0       	rjmp	.+22     	; 0x4dba <__vector_26+0x6c>
    4da4:	e1 ec       	ldi	r30, 0xC1	; 193
    4da6:	f0 e0       	ldi	r31, 0x00	; 0
    4da8:	80 81       	ld	r24, Z
    4daa:	8f 7d       	andi	r24, 0xDF	; 223
    4dac:	80 83       	st	Z, r24
    4dae:	05 c0       	rjmp	.+10     	; 0x4dba <__vector_26+0x6c>
    4db0:	e1 ec       	ldi	r30, 0xC1	; 193
    4db2:	f0 e0       	ldi	r31, 0x00	; 0
    4db4:	80 81       	ld	r24, Z
    4db6:	8f 7d       	andi	r24, 0xDF	; 223
    4db8:	80 83       	st	Z, r24
    4dba:	ff 91       	pop	r31
    4dbc:	ef 91       	pop	r30
    4dbe:	bf 91       	pop	r27
    4dc0:	af 91       	pop	r26
    4dc2:	9f 91       	pop	r25
    4dc4:	8f 91       	pop	r24
    4dc6:	2f 91       	pop	r18
    4dc8:	0f 90       	pop	r0
    4dca:	0b be       	out	0x3b, r0	; 59
    4dcc:	0f 90       	pop	r0
    4dce:	0f be       	out	0x3f, r0	; 63
    4dd0:	0f 90       	pop	r0
    4dd2:	1f 90       	pop	r1
    4dd4:	18 95       	reti

00004dd6 <__vector_36>:
    4dd6:	1f 92       	push	r1
    4dd8:	0f 92       	push	r0
    4dda:	0f b6       	in	r0, 0x3f	; 63
    4ddc:	0f 92       	push	r0
    4dde:	11 24       	eor	r1, r1
    4de0:	0b b6       	in	r0, 0x3b	; 59
    4de2:	0f 92       	push	r0
    4de4:	2f 93       	push	r18
    4de6:	3f 93       	push	r19
    4de8:	4f 93       	push	r20
    4dea:	5f 93       	push	r21
    4dec:	6f 93       	push	r22
    4dee:	7f 93       	push	r23
    4df0:	8f 93       	push	r24
    4df2:	9f 93       	push	r25
    4df4:	af 93       	push	r26
    4df6:	bf 93       	push	r27
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
    4dfc:	ef 93       	push	r30
    4dfe:	ff 93       	push	r31
    4e00:	a0 91 aa 14 	lds	r26, 0x14AA	; 0x8014aa <_ser_handle+0x2>
    4e04:	b0 91 ab 14 	lds	r27, 0x14AB	; 0x8014ab <_ser_handle+0x3>
    4e08:	10 97       	sbiw	r26, 0x00	; 0
    4e0a:	11 f1       	breq	.+68     	; 0x4e50 <__vector_36+0x7a>
    4e0c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4e10:	14 96       	adiw	r26, 0x04	; 4
    4e12:	ed 91       	ld	r30, X+
    4e14:	fc 91       	ld	r31, X
    4e16:	15 97       	sbiw	r26, 0x05	; 5
    4e18:	93 81       	ldd	r25, Z+3	; 0x03
    4e1a:	82 81       	ldd	r24, Z+2	; 0x02
    4e1c:	25 81       	ldd	r18, Z+5	; 0x05
    4e1e:	98 1b       	sub	r25, r24
    4e20:	92 23       	and	r25, r18
    4e22:	84 81       	ldd	r24, Z+4	; 0x04
    4e24:	98 17       	cp	r25, r24
    4e26:	61 f0       	breq	.+24     	; 0x4e40 <__vector_36+0x6a>
    4e28:	83 81       	ldd	r24, Z+3	; 0x03
    4e2a:	26 95       	lsr	r18
    4e2c:	28 23       	and	r18, r24
    4e2e:	c0 81       	ld	r28, Z
    4e30:	d1 81       	ldd	r29, Z+1	; 0x01
    4e32:	c2 0f       	add	r28, r18
    4e34:	d1 1d       	adc	r29, r1
    4e36:	68 83       	st	Y, r22
    4e38:	8f 5f       	subi	r24, 0xFF	; 255
    4e3a:	95 81       	ldd	r25, Z+5	; 0x05
    4e3c:	89 23       	and	r24, r25
    4e3e:	83 83       	std	Z+3, r24	; 0x03
    4e40:	16 96       	adiw	r26, 0x06	; 6
    4e42:	ed 91       	ld	r30, X+
    4e44:	fc 91       	ld	r31, X
    4e46:	17 97       	sbiw	r26, 0x07	; 7
    4e48:	30 97       	sbiw	r30, 0x00	; 0
    4e4a:	11 f0       	breq	.+4      	; 0x4e50 <__vector_36+0x7a>
    4e4c:	cd 01       	movw	r24, r26
    4e4e:	19 95       	eicall
    4e50:	ff 91       	pop	r31
    4e52:	ef 91       	pop	r30
    4e54:	df 91       	pop	r29
    4e56:	cf 91       	pop	r28
    4e58:	bf 91       	pop	r27
    4e5a:	af 91       	pop	r26
    4e5c:	9f 91       	pop	r25
    4e5e:	8f 91       	pop	r24
    4e60:	7f 91       	pop	r23
    4e62:	6f 91       	pop	r22
    4e64:	5f 91       	pop	r21
    4e66:	4f 91       	pop	r20
    4e68:	3f 91       	pop	r19
    4e6a:	2f 91       	pop	r18
    4e6c:	0f 90       	pop	r0
    4e6e:	0b be       	out	0x3b, r0	; 59
    4e70:	0f 90       	pop	r0
    4e72:	0f be       	out	0x3f, r0	; 63
    4e74:	0f 90       	pop	r0
    4e76:	1f 90       	pop	r1
    4e78:	18 95       	reti

00004e7a <__vector_37>:
    4e7a:	1f 92       	push	r1
    4e7c:	0f 92       	push	r0
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    4e80:	0f 92       	push	r0
    4e82:	11 24       	eor	r1, r1
    4e84:	0b b6       	in	r0, 0x3b	; 59
    4e86:	0f 92       	push	r0
    4e88:	2f 93       	push	r18
    4e8a:	8f 93       	push	r24
    4e8c:	9f 93       	push	r25
    4e8e:	af 93       	push	r26
    4e90:	bf 93       	push	r27
    4e92:	ef 93       	push	r30
    4e94:	ff 93       	push	r31
    4e96:	e0 91 aa 14 	lds	r30, 0x14AA	; 0x8014aa <_ser_handle+0x2>
    4e9a:	f0 91 ab 14 	lds	r31, 0x14AB	; 0x8014ab <_ser_handle+0x3>
    4e9e:	30 97       	sbiw	r30, 0x00	; 0
    4ea0:	b9 f0       	breq	.+46     	; 0x4ed0 <__vector_37+0x56>
    4ea2:	02 80       	ldd	r0, Z+2	; 0x02
    4ea4:	f3 81       	ldd	r31, Z+3	; 0x03
    4ea6:	e0 2d       	mov	r30, r0
    4ea8:	93 81       	ldd	r25, Z+3	; 0x03
    4eaa:	82 81       	ldd	r24, Z+2	; 0x02
    4eac:	98 17       	cp	r25, r24
    4eae:	b1 f0       	breq	.+44     	; 0x4edc <__vector_37+0x62>
    4eb0:	92 81       	ldd	r25, Z+2	; 0x02
    4eb2:	85 81       	ldd	r24, Z+5	; 0x05
    4eb4:	28 2f       	mov	r18, r24
    4eb6:	26 95       	lsr	r18
    4eb8:	29 23       	and	r18, r25
    4eba:	a0 81       	ld	r26, Z
    4ebc:	b1 81       	ldd	r27, Z+1	; 0x01
    4ebe:	a2 0f       	add	r26, r18
    4ec0:	b1 1d       	adc	r27, r1
    4ec2:	2c 91       	ld	r18, X
    4ec4:	9f 5f       	subi	r25, 0xFF	; 255
    4ec6:	89 23       	and	r24, r25
    4ec8:	82 83       	std	Z+2, r24	; 0x02
    4eca:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4ece:	0b c0       	rjmp	.+22     	; 0x4ee6 <__vector_37+0x6c>
    4ed0:	e9 ec       	ldi	r30, 0xC9	; 201
    4ed2:	f0 e0       	ldi	r31, 0x00	; 0
    4ed4:	80 81       	ld	r24, Z
    4ed6:	8f 7d       	andi	r24, 0xDF	; 223
    4ed8:	80 83       	st	Z, r24
    4eda:	05 c0       	rjmp	.+10     	; 0x4ee6 <__vector_37+0x6c>
    4edc:	e9 ec       	ldi	r30, 0xC9	; 201
    4ede:	f0 e0       	ldi	r31, 0x00	; 0
    4ee0:	80 81       	ld	r24, Z
    4ee2:	8f 7d       	andi	r24, 0xDF	; 223
    4ee4:	80 83       	st	Z, r24
    4ee6:	ff 91       	pop	r31
    4ee8:	ef 91       	pop	r30
    4eea:	bf 91       	pop	r27
    4eec:	af 91       	pop	r26
    4eee:	9f 91       	pop	r25
    4ef0:	8f 91       	pop	r24
    4ef2:	2f 91       	pop	r18
    4ef4:	0f 90       	pop	r0
    4ef6:	0b be       	out	0x3b, r0	; 59
    4ef8:	0f 90       	pop	r0
    4efa:	0f be       	out	0x3f, r0	; 63
    4efc:	0f 90       	pop	r0
    4efe:	1f 90       	pop	r1
    4f00:	18 95       	reti

00004f02 <__vector_51>:
    4f02:	1f 92       	push	r1
    4f04:	0f 92       	push	r0
    4f06:	0f b6       	in	r0, 0x3f	; 63
    4f08:	0f 92       	push	r0
    4f0a:	11 24       	eor	r1, r1
    4f0c:	0b b6       	in	r0, 0x3b	; 59
    4f0e:	0f 92       	push	r0
    4f10:	2f 93       	push	r18
    4f12:	3f 93       	push	r19
    4f14:	4f 93       	push	r20
    4f16:	5f 93       	push	r21
    4f18:	6f 93       	push	r22
    4f1a:	7f 93       	push	r23
    4f1c:	8f 93       	push	r24
    4f1e:	9f 93       	push	r25
    4f20:	af 93       	push	r26
    4f22:	bf 93       	push	r27
    4f24:	cf 93       	push	r28
    4f26:	df 93       	push	r29
    4f28:	ef 93       	push	r30
    4f2a:	ff 93       	push	r31
    4f2c:	a0 91 ac 14 	lds	r26, 0x14AC	; 0x8014ac <_ser_handle+0x4>
    4f30:	b0 91 ad 14 	lds	r27, 0x14AD	; 0x8014ad <_ser_handle+0x5>
    4f34:	10 97       	sbiw	r26, 0x00	; 0
    4f36:	11 f1       	breq	.+68     	; 0x4f7c <__vector_51+0x7a>
    4f38:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4f3c:	14 96       	adiw	r26, 0x04	; 4
    4f3e:	ed 91       	ld	r30, X+
    4f40:	fc 91       	ld	r31, X
    4f42:	15 97       	sbiw	r26, 0x05	; 5
    4f44:	93 81       	ldd	r25, Z+3	; 0x03
    4f46:	82 81       	ldd	r24, Z+2	; 0x02
    4f48:	25 81       	ldd	r18, Z+5	; 0x05
    4f4a:	98 1b       	sub	r25, r24
    4f4c:	92 23       	and	r25, r18
    4f4e:	84 81       	ldd	r24, Z+4	; 0x04
    4f50:	98 17       	cp	r25, r24
    4f52:	61 f0       	breq	.+24     	; 0x4f6c <__vector_51+0x6a>
    4f54:	83 81       	ldd	r24, Z+3	; 0x03
    4f56:	26 95       	lsr	r18
    4f58:	28 23       	and	r18, r24
    4f5a:	c0 81       	ld	r28, Z
    4f5c:	d1 81       	ldd	r29, Z+1	; 0x01
    4f5e:	c2 0f       	add	r28, r18
    4f60:	d1 1d       	adc	r29, r1
    4f62:	68 83       	st	Y, r22
    4f64:	8f 5f       	subi	r24, 0xFF	; 255
    4f66:	95 81       	ldd	r25, Z+5	; 0x05
    4f68:	89 23       	and	r24, r25
    4f6a:	83 83       	std	Z+3, r24	; 0x03
    4f6c:	16 96       	adiw	r26, 0x06	; 6
    4f6e:	ed 91       	ld	r30, X+
    4f70:	fc 91       	ld	r31, X
    4f72:	17 97       	sbiw	r26, 0x07	; 7
    4f74:	30 97       	sbiw	r30, 0x00	; 0
    4f76:	11 f0       	breq	.+4      	; 0x4f7c <__vector_51+0x7a>
    4f78:	cd 01       	movw	r24, r26
    4f7a:	19 95       	eicall
    4f7c:	ff 91       	pop	r31
    4f7e:	ef 91       	pop	r30
    4f80:	df 91       	pop	r29
    4f82:	cf 91       	pop	r28
    4f84:	bf 91       	pop	r27
    4f86:	af 91       	pop	r26
    4f88:	9f 91       	pop	r25
    4f8a:	8f 91       	pop	r24
    4f8c:	7f 91       	pop	r23
    4f8e:	6f 91       	pop	r22
    4f90:	5f 91       	pop	r21
    4f92:	4f 91       	pop	r20
    4f94:	3f 91       	pop	r19
    4f96:	2f 91       	pop	r18
    4f98:	0f 90       	pop	r0
    4f9a:	0b be       	out	0x3b, r0	; 59
    4f9c:	0f 90       	pop	r0
    4f9e:	0f be       	out	0x3f, r0	; 63
    4fa0:	0f 90       	pop	r0
    4fa2:	1f 90       	pop	r1
    4fa4:	18 95       	reti

00004fa6 <__vector_52>:
    4fa6:	1f 92       	push	r1
    4fa8:	0f 92       	push	r0
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	0f 92       	push	r0
    4fae:	11 24       	eor	r1, r1
    4fb0:	0b b6       	in	r0, 0x3b	; 59
    4fb2:	0f 92       	push	r0
    4fb4:	2f 93       	push	r18
    4fb6:	8f 93       	push	r24
    4fb8:	9f 93       	push	r25
    4fba:	af 93       	push	r26
    4fbc:	bf 93       	push	r27
    4fbe:	ef 93       	push	r30
    4fc0:	ff 93       	push	r31
    4fc2:	e0 91 ac 14 	lds	r30, 0x14AC	; 0x8014ac <_ser_handle+0x4>
    4fc6:	f0 91 ad 14 	lds	r31, 0x14AD	; 0x8014ad <_ser_handle+0x5>
    4fca:	30 97       	sbiw	r30, 0x00	; 0
    4fcc:	b9 f0       	breq	.+46     	; 0x4ffc <__vector_52+0x56>
    4fce:	02 80       	ldd	r0, Z+2	; 0x02
    4fd0:	f3 81       	ldd	r31, Z+3	; 0x03
    4fd2:	e0 2d       	mov	r30, r0
    4fd4:	93 81       	ldd	r25, Z+3	; 0x03
    4fd6:	82 81       	ldd	r24, Z+2	; 0x02
    4fd8:	98 17       	cp	r25, r24
    4fda:	b1 f0       	breq	.+44     	; 0x5008 <__vector_52+0x62>
    4fdc:	92 81       	ldd	r25, Z+2	; 0x02
    4fde:	85 81       	ldd	r24, Z+5	; 0x05
    4fe0:	28 2f       	mov	r18, r24
    4fe2:	26 95       	lsr	r18
    4fe4:	29 23       	and	r18, r25
    4fe6:	a0 81       	ld	r26, Z
    4fe8:	b1 81       	ldd	r27, Z+1	; 0x01
    4fea:	a2 0f       	add	r26, r18
    4fec:	b1 1d       	adc	r27, r1
    4fee:	2c 91       	ld	r18, X
    4ff0:	9f 5f       	subi	r25, 0xFF	; 255
    4ff2:	89 23       	and	r24, r25
    4ff4:	82 83       	std	Z+2, r24	; 0x02
    4ff6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4ffa:	0b c0       	rjmp	.+22     	; 0x5012 <__vector_52+0x6c>
    4ffc:	e1 ed       	ldi	r30, 0xD1	; 209
    4ffe:	f0 e0       	ldi	r31, 0x00	; 0
    5000:	80 81       	ld	r24, Z
    5002:	8f 7d       	andi	r24, 0xDF	; 223
    5004:	80 83       	st	Z, r24
    5006:	05 c0       	rjmp	.+10     	; 0x5012 <__vector_52+0x6c>
    5008:	e1 ed       	ldi	r30, 0xD1	; 209
    500a:	f0 e0       	ldi	r31, 0x00	; 0
    500c:	80 81       	ld	r24, Z
    500e:	8f 7d       	andi	r24, 0xDF	; 223
    5010:	80 83       	st	Z, r24
    5012:	ff 91       	pop	r31
    5014:	ef 91       	pop	r30
    5016:	bf 91       	pop	r27
    5018:	af 91       	pop	r26
    501a:	9f 91       	pop	r25
    501c:	8f 91       	pop	r24
    501e:	2f 91       	pop	r18
    5020:	0f 90       	pop	r0
    5022:	0b be       	out	0x3b, r0	; 59
    5024:	0f 90       	pop	r0
    5026:	0f be       	out	0x3f, r0	; 63
    5028:	0f 90       	pop	r0
    502a:	1f 90       	pop	r1
    502c:	18 95       	reti

0000502e <__vector_54>:
    502e:	1f 92       	push	r1
    5030:	0f 92       	push	r0
    5032:	0f b6       	in	r0, 0x3f	; 63
    5034:	0f 92       	push	r0
    5036:	11 24       	eor	r1, r1
    5038:	0b b6       	in	r0, 0x3b	; 59
    503a:	0f 92       	push	r0
    503c:	2f 93       	push	r18
    503e:	3f 93       	push	r19
    5040:	4f 93       	push	r20
    5042:	5f 93       	push	r21
    5044:	6f 93       	push	r22
    5046:	7f 93       	push	r23
    5048:	8f 93       	push	r24
    504a:	9f 93       	push	r25
    504c:	af 93       	push	r26
    504e:	bf 93       	push	r27
    5050:	cf 93       	push	r28
    5052:	df 93       	push	r29
    5054:	ef 93       	push	r30
    5056:	ff 93       	push	r31
    5058:	a0 91 ae 14 	lds	r26, 0x14AE	; 0x8014ae <_ser_handle+0x6>
    505c:	b0 91 af 14 	lds	r27, 0x14AF	; 0x8014af <_ser_handle+0x7>
    5060:	10 97       	sbiw	r26, 0x00	; 0
    5062:	11 f1       	breq	.+68     	; 0x50a8 <__vector_54+0x7a>
    5064:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5068:	14 96       	adiw	r26, 0x04	; 4
    506a:	ed 91       	ld	r30, X+
    506c:	fc 91       	ld	r31, X
    506e:	15 97       	sbiw	r26, 0x05	; 5
    5070:	93 81       	ldd	r25, Z+3	; 0x03
    5072:	82 81       	ldd	r24, Z+2	; 0x02
    5074:	25 81       	ldd	r18, Z+5	; 0x05
    5076:	98 1b       	sub	r25, r24
    5078:	92 23       	and	r25, r18
    507a:	84 81       	ldd	r24, Z+4	; 0x04
    507c:	98 17       	cp	r25, r24
    507e:	61 f0       	breq	.+24     	; 0x5098 <__vector_54+0x6a>
    5080:	83 81       	ldd	r24, Z+3	; 0x03
    5082:	26 95       	lsr	r18
    5084:	28 23       	and	r18, r24
    5086:	c0 81       	ld	r28, Z
    5088:	d1 81       	ldd	r29, Z+1	; 0x01
    508a:	c2 0f       	add	r28, r18
    508c:	d1 1d       	adc	r29, r1
    508e:	68 83       	st	Y, r22
    5090:	8f 5f       	subi	r24, 0xFF	; 255
    5092:	95 81       	ldd	r25, Z+5	; 0x05
    5094:	89 23       	and	r24, r25
    5096:	83 83       	std	Z+3, r24	; 0x03
    5098:	16 96       	adiw	r26, 0x06	; 6
    509a:	ed 91       	ld	r30, X+
    509c:	fc 91       	ld	r31, X
    509e:	17 97       	sbiw	r26, 0x07	; 7
    50a0:	30 97       	sbiw	r30, 0x00	; 0
    50a2:	11 f0       	breq	.+4      	; 0x50a8 <__vector_54+0x7a>
    50a4:	cd 01       	movw	r24, r26
    50a6:	19 95       	eicall
    50a8:	ff 91       	pop	r31
    50aa:	ef 91       	pop	r30
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	bf 91       	pop	r27
    50b2:	af 91       	pop	r26
    50b4:	9f 91       	pop	r25
    50b6:	8f 91       	pop	r24
    50b8:	7f 91       	pop	r23
    50ba:	6f 91       	pop	r22
    50bc:	5f 91       	pop	r21
    50be:	4f 91       	pop	r20
    50c0:	3f 91       	pop	r19
    50c2:	2f 91       	pop	r18
    50c4:	0f 90       	pop	r0
    50c6:	0b be       	out	0x3b, r0	; 59
    50c8:	0f 90       	pop	r0
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	0f 90       	pop	r0
    50ce:	1f 90       	pop	r1
    50d0:	18 95       	reti

000050d2 <__vector_55>:
    50d2:	1f 92       	push	r1
    50d4:	0f 92       	push	r0
    50d6:	0f b6       	in	r0, 0x3f	; 63
    50d8:	0f 92       	push	r0
    50da:	11 24       	eor	r1, r1
    50dc:	0b b6       	in	r0, 0x3b	; 59
    50de:	0f 92       	push	r0
    50e0:	2f 93       	push	r18
    50e2:	8f 93       	push	r24
    50e4:	9f 93       	push	r25
    50e6:	af 93       	push	r26
    50e8:	bf 93       	push	r27
    50ea:	ef 93       	push	r30
    50ec:	ff 93       	push	r31
    50ee:	e0 91 ae 14 	lds	r30, 0x14AE	; 0x8014ae <_ser_handle+0x6>
    50f2:	f0 91 af 14 	lds	r31, 0x14AF	; 0x8014af <_ser_handle+0x7>
    50f6:	30 97       	sbiw	r30, 0x00	; 0
    50f8:	b9 f0       	breq	.+46     	; 0x5128 <__vector_55+0x56>
    50fa:	02 80       	ldd	r0, Z+2	; 0x02
    50fc:	f3 81       	ldd	r31, Z+3	; 0x03
    50fe:	e0 2d       	mov	r30, r0
    5100:	93 81       	ldd	r25, Z+3	; 0x03
    5102:	82 81       	ldd	r24, Z+2	; 0x02
    5104:	98 17       	cp	r25, r24
    5106:	b1 f0       	breq	.+44     	; 0x5134 <__vector_55+0x62>
    5108:	92 81       	ldd	r25, Z+2	; 0x02
    510a:	85 81       	ldd	r24, Z+5	; 0x05
    510c:	28 2f       	mov	r18, r24
    510e:	26 95       	lsr	r18
    5110:	29 23       	and	r18, r25
    5112:	a0 81       	ld	r26, Z
    5114:	b1 81       	ldd	r27, Z+1	; 0x01
    5116:	a2 0f       	add	r26, r18
    5118:	b1 1d       	adc	r27, r1
    511a:	2c 91       	ld	r18, X
    511c:	9f 5f       	subi	r25, 0xFF	; 255
    511e:	89 23       	and	r24, r25
    5120:	82 83       	std	Z+2, r24	; 0x02
    5122:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5126:	0b c0       	rjmp	.+22     	; 0x513e <__vector_55+0x6c>
    5128:	e1 e3       	ldi	r30, 0x31	; 49
    512a:	f1 e0       	ldi	r31, 0x01	; 1
    512c:	80 81       	ld	r24, Z
    512e:	8f 7d       	andi	r24, 0xDF	; 223
    5130:	80 83       	st	Z, r24
    5132:	05 c0       	rjmp	.+10     	; 0x513e <__vector_55+0x6c>
    5134:	e1 e3       	ldi	r30, 0x31	; 49
    5136:	f1 e0       	ldi	r31, 0x01	; 1
    5138:	80 81       	ld	r24, Z
    513a:	8f 7d       	andi	r24, 0xDF	; 223
    513c:	80 83       	st	Z, r24
    513e:	ff 91       	pop	r31
    5140:	ef 91       	pop	r30
    5142:	bf 91       	pop	r27
    5144:	af 91       	pop	r26
    5146:	9f 91       	pop	r25
    5148:	8f 91       	pop	r24
    514a:	2f 91       	pop	r18
    514c:	0f 90       	pop	r0
    514e:	0b be       	out	0x3b, r0	; 59
    5150:	0f 90       	pop	r0
    5152:	0f be       	out	0x3f, r0	; 63
    5154:	0f 90       	pop	r0
    5156:	1f 90       	pop	r1
    5158:	18 95       	reti

0000515a <usart_getchar>:
    515a:	cf 93       	push	r28
    515c:	df 93       	push	r29
    515e:	1f 92       	push	r1
    5160:	cd b7       	in	r28, 0x3d	; 61
    5162:	de b7       	in	r29, 0x3e	; 62
    5164:	be 01       	movw	r22, r28
    5166:	6f 5f       	subi	r22, 0xFF	; 255
    5168:	7f 4f       	sbci	r23, 0xFF	; 255
    516a:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <_com_serial_instance>
    516e:	90 91 b1 14 	lds	r25, 0x14B1	; 0x8014b1 <_com_serial_instance+0x1>
    5172:	7b dd       	rcall	.-1290   	; 0x4c6a <serial_getByte>
    5174:	81 11       	cpse	r24, r1
    5176:	f6 cf       	rjmp	.-20     	; 0x5164 <usart_getchar+0xa>
    5178:	89 81       	ldd	r24, Y+1	; 0x01
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	0f 90       	pop	r0
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	08 95       	ret

00005184 <usart_putchar>:
    5184:	68 2f       	mov	r22, r24
    5186:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <_com_serial_instance>
    518a:	90 91 b1 14 	lds	r25, 0x14B1	; 0x8014b1 <_com_serial_instance+0x1>
    518e:	ed dc       	rcall	.-1574   	; 0x4b6a <serial_sendByte>
    5190:	80 e0       	ldi	r24, 0x00	; 0
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	08 95       	ret

00005196 <stdio_initialise>:
    5196:	8f 92       	push	r8
    5198:	9f 92       	push	r9
    519a:	af 92       	push	r10
    519c:	cf 92       	push	r12
    519e:	ef 92       	push	r14
    51a0:	0f 93       	push	r16
    51a2:	81 2c       	mov	r8, r1
    51a4:	91 2c       	mov	r9, r1
    51a6:	68 94       	set
    51a8:	aa 24       	eor	r10, r10
    51aa:	a7 f8       	bld	r10, 7
    51ac:	68 94       	set
    51ae:	cc 24       	eor	r12, r12
    51b0:	c7 f8       	bld	r12, 7
    51b2:	e1 2c       	mov	r14, r1
    51b4:	00 e0       	ldi	r16, 0x00	; 0
    51b6:	23 e0       	ldi	r18, 0x03	; 3
    51b8:	40 e0       	ldi	r20, 0x00	; 0
    51ba:	51 ee       	ldi	r21, 0xE1	; 225
    51bc:	60 e0       	ldi	r22, 0x00	; 0
    51be:	70 e0       	ldi	r23, 0x00	; 0
    51c0:	33 dc       	rcall	.-1946   	; 0x4a28 <serial_create>
    51c2:	90 93 b1 14 	sts	0x14B1, r25	; 0x8014b1 <_com_serial_instance+0x1>
    51c6:	80 93 b0 14 	sts	0x14B0, r24	; 0x8014b0 <_com_serial_instance>
    51ca:	e0 ef       	ldi	r30, 0xF0	; 240
    51cc:	f4 e1       	ldi	r31, 0x14	; 20
    51ce:	83 e1       	ldi	r24, 0x13	; 19
    51d0:	92 e0       	ldi	r25, 0x02	; 2
    51d2:	91 83       	std	Z+1, r25	; 0x01
    51d4:	80 83       	st	Z, r24
    51d6:	93 83       	std	Z+3, r25	; 0x03
    51d8:	82 83       	std	Z+2, r24	; 0x02
    51da:	0f 91       	pop	r16
    51dc:	ef 90       	pop	r14
    51de:	cf 90       	pop	r12
    51e0:	af 90       	pop	r10
    51e2:	9f 90       	pop	r9
    51e4:	8f 90       	pop	r8
    51e6:	08 95       	ret

000051e8 <_turn_off>:
    51e8:	90 e0       	ldi	r25, 0x00	; 0
    51ea:	fc 01       	movw	r30, r24
    51ec:	ee 0f       	add	r30, r30
    51ee:	ff 1f       	adc	r31, r31
    51f0:	e8 0f       	add	r30, r24
    51f2:	f9 1f       	adc	r31, r25
    51f4:	ee 0f       	add	r30, r30
    51f6:	ff 1f       	adc	r31, r31
    51f8:	ee 54       	subi	r30, 0x4E	; 78
    51fa:	fb 4e       	sbci	r31, 0xEB	; 235
    51fc:	23 81       	ldd	r18, Z+3	; 0x03
    51fe:	21 11       	cpse	r18, r1
    5200:	1f c0       	rjmp	.+62     	; 0x5240 <_turn_off+0x58>
    5202:	9c 01       	movw	r18, r24
    5204:	22 0f       	add	r18, r18
    5206:	33 1f       	adc	r19, r19
    5208:	f9 01       	movw	r30, r18
    520a:	e8 0f       	add	r30, r24
    520c:	f9 1f       	adc	r31, r25
    520e:	ee 0f       	add	r30, r30
    5210:	ff 1f       	adc	r31, r31
    5212:	ee 54       	subi	r30, 0x4E	; 78
    5214:	fb 4e       	sbci	r31, 0xEB	; 235
    5216:	a0 81       	ld	r26, Z
    5218:	b1 81       	ldd	r27, Z+1	; 0x01
    521a:	4c 91       	ld	r20, X
    521c:	f9 01       	movw	r30, r18
    521e:	e8 0f       	add	r30, r24
    5220:	f9 1f       	adc	r31, r25
    5222:	ee 0f       	add	r30, r30
    5224:	ff 1f       	adc	r31, r31
    5226:	ee 54       	subi	r30, 0x4E	; 78
    5228:	fb 4e       	sbci	r31, 0xEB	; 235
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	02 80       	ldd	r0, Z+2	; 0x02
    5230:	02 c0       	rjmp	.+4      	; 0x5236 <_turn_off+0x4e>
    5232:	88 0f       	add	r24, r24
    5234:	99 1f       	adc	r25, r25
    5236:	0a 94       	dec	r0
    5238:	e2 f7       	brpl	.-8      	; 0x5232 <_turn_off+0x4a>
    523a:	84 2b       	or	r24, r20
    523c:	8c 93       	st	X, r24
    523e:	08 95       	ret
    5240:	fc 01       	movw	r30, r24
    5242:	ee 0f       	add	r30, r30
    5244:	ff 1f       	adc	r31, r31
    5246:	df 01       	movw	r26, r30
    5248:	a8 0f       	add	r26, r24
    524a:	b9 1f       	adc	r27, r25
    524c:	aa 0f       	add	r26, r26
    524e:	bb 1f       	adc	r27, r27
    5250:	ae 54       	subi	r26, 0x4E	; 78
    5252:	bb 4e       	sbci	r27, 0xEB	; 235
    5254:	0d 90       	ld	r0, X+
    5256:	bc 91       	ld	r27, X
    5258:	a0 2d       	mov	r26, r0
    525a:	2c 91       	ld	r18, X
    525c:	e8 0f       	add	r30, r24
    525e:	f9 1f       	adc	r31, r25
    5260:	ee 0f       	add	r30, r30
    5262:	ff 1f       	adc	r31, r31
    5264:	ee 54       	subi	r30, 0x4E	; 78
    5266:	fb 4e       	sbci	r31, 0xEB	; 235
    5268:	81 e0       	ldi	r24, 0x01	; 1
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	02 80       	ldd	r0, Z+2	; 0x02
    526e:	02 c0       	rjmp	.+4      	; 0x5274 <_turn_off+0x8c>
    5270:	88 0f       	add	r24, r24
    5272:	99 1f       	adc	r25, r25
    5274:	0a 94       	dec	r0
    5276:	e2 f7       	brpl	.-8      	; 0x5270 <_turn_off+0x88>
    5278:	80 95       	com	r24
    527a:	82 23       	and	r24, r18
    527c:	8c 93       	st	X, r24
    527e:	08 95       	ret

00005280 <_turn_on>:
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	fc 01       	movw	r30, r24
    5284:	ee 0f       	add	r30, r30
    5286:	ff 1f       	adc	r31, r31
    5288:	e8 0f       	add	r30, r24
    528a:	f9 1f       	adc	r31, r25
    528c:	ee 0f       	add	r30, r30
    528e:	ff 1f       	adc	r31, r31
    5290:	ee 54       	subi	r30, 0x4E	; 78
    5292:	fb 4e       	sbci	r31, 0xEB	; 235
    5294:	23 81       	ldd	r18, Z+3	; 0x03
    5296:	21 11       	cpse	r18, r1
    5298:	20 c0       	rjmp	.+64     	; 0x52da <_turn_on+0x5a>
    529a:	9c 01       	movw	r18, r24
    529c:	22 0f       	add	r18, r18
    529e:	33 1f       	adc	r19, r19
    52a0:	f9 01       	movw	r30, r18
    52a2:	e8 0f       	add	r30, r24
    52a4:	f9 1f       	adc	r31, r25
    52a6:	ee 0f       	add	r30, r30
    52a8:	ff 1f       	adc	r31, r31
    52aa:	ee 54       	subi	r30, 0x4E	; 78
    52ac:	fb 4e       	sbci	r31, 0xEB	; 235
    52ae:	a0 81       	ld	r26, Z
    52b0:	b1 81       	ldd	r27, Z+1	; 0x01
    52b2:	4c 91       	ld	r20, X
    52b4:	f9 01       	movw	r30, r18
    52b6:	e8 0f       	add	r30, r24
    52b8:	f9 1f       	adc	r31, r25
    52ba:	ee 0f       	add	r30, r30
    52bc:	ff 1f       	adc	r31, r31
    52be:	ee 54       	subi	r30, 0x4E	; 78
    52c0:	fb 4e       	sbci	r31, 0xEB	; 235
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	02 80       	ldd	r0, Z+2	; 0x02
    52c8:	02 c0       	rjmp	.+4      	; 0x52ce <_turn_on+0x4e>
    52ca:	88 0f       	add	r24, r24
    52cc:	99 1f       	adc	r25, r25
    52ce:	0a 94       	dec	r0
    52d0:	e2 f7       	brpl	.-8      	; 0x52ca <_turn_on+0x4a>
    52d2:	80 95       	com	r24
    52d4:	84 23       	and	r24, r20
    52d6:	8c 93       	st	X, r24
    52d8:	08 95       	ret
    52da:	fc 01       	movw	r30, r24
    52dc:	ee 0f       	add	r30, r30
    52de:	ff 1f       	adc	r31, r31
    52e0:	df 01       	movw	r26, r30
    52e2:	a8 0f       	add	r26, r24
    52e4:	b9 1f       	adc	r27, r25
    52e6:	aa 0f       	add	r26, r26
    52e8:	bb 1f       	adc	r27, r27
    52ea:	ae 54       	subi	r26, 0x4E	; 78
    52ec:	bb 4e       	sbci	r27, 0xEB	; 235
    52ee:	0d 90       	ld	r0, X+
    52f0:	bc 91       	ld	r27, X
    52f2:	a0 2d       	mov	r26, r0
    52f4:	2c 91       	ld	r18, X
    52f6:	e8 0f       	add	r30, r24
    52f8:	f9 1f       	adc	r31, r25
    52fa:	ee 0f       	add	r30, r30
    52fc:	ff 1f       	adc	r31, r31
    52fe:	ee 54       	subi	r30, 0x4E	; 78
    5300:	fb 4e       	sbci	r31, 0xEB	; 235
    5302:	81 e0       	ldi	r24, 0x01	; 1
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	02 80       	ldd	r0, Z+2	; 0x02
    5308:	02 c0       	rjmp	.+4      	; 0x530e <_turn_on+0x8e>
    530a:	88 0f       	add	r24, r24
    530c:	99 1f       	adc	r25, r25
    530e:	0a 94       	dec	r0
    5310:	e2 f7       	brpl	.-8      	; 0x530a <_turn_on+0x8a>
    5312:	82 2b       	or	r24, r18
    5314:	8c 93       	st	X, r24
    5316:	08 95       	ret

00005318 <status_leds_slowBlink>:
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	fc 01       	movw	r30, r24
    5320:	ee 0f       	add	r30, r30
    5322:	ff 1f       	adc	r31, r31
    5324:	df 01       	movw	r26, r30
    5326:	a8 0f       	add	r26, r24
    5328:	b9 1f       	adc	r27, r25
    532a:	aa 0f       	add	r26, r26
    532c:	bb 1f       	adc	r27, r27
    532e:	ae 54       	subi	r26, 0x4E	; 78
    5330:	bb 4e       	sbci	r27, 0xEB	; 235
    5332:	cd 91       	ld	r28, X+
    5334:	dc 91       	ld	r29, X
    5336:	11 97       	sbiw	r26, 0x01	; 1
    5338:	48 81       	ld	r20, Y
    533a:	21 e0       	ldi	r18, 0x01	; 1
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	12 96       	adiw	r26, 0x02	; 2
    5340:	0c 90       	ld	r0, X
    5342:	12 97       	sbiw	r26, 0x02	; 2
    5344:	02 c0       	rjmp	.+4      	; 0x534a <status_leds_slowBlink+0x32>
    5346:	22 0f       	add	r18, r18
    5348:	33 1f       	adc	r19, r19
    534a:	0a 94       	dec	r0
    534c:	e2 f7       	brpl	.-8      	; 0x5346 <status_leds_slowBlink+0x2e>
    534e:	24 27       	eor	r18, r20
    5350:	28 83       	st	Y, r18
    5352:	fd 01       	movw	r30, r26
    5354:	81 e0       	ldi	r24, 0x01	; 1
    5356:	84 83       	std	Z+4, r24	; 0x04
    5358:	df 91       	pop	r29
    535a:	cf 91       	pop	r28
    535c:	08 95       	ret

0000535e <status_leds_fastBlink>:
    535e:	cf 93       	push	r28
    5360:	df 93       	push	r29
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	fc 01       	movw	r30, r24
    5366:	ee 0f       	add	r30, r30
    5368:	ff 1f       	adc	r31, r31
    536a:	df 01       	movw	r26, r30
    536c:	a8 0f       	add	r26, r24
    536e:	b9 1f       	adc	r27, r25
    5370:	aa 0f       	add	r26, r26
    5372:	bb 1f       	adc	r27, r27
    5374:	ae 54       	subi	r26, 0x4E	; 78
    5376:	bb 4e       	sbci	r27, 0xEB	; 235
    5378:	cd 91       	ld	r28, X+
    537a:	dc 91       	ld	r29, X
    537c:	11 97       	sbiw	r26, 0x01	; 1
    537e:	48 81       	ld	r20, Y
    5380:	21 e0       	ldi	r18, 0x01	; 1
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	12 96       	adiw	r26, 0x02	; 2
    5386:	0c 90       	ld	r0, X
    5388:	12 97       	sbiw	r26, 0x02	; 2
    538a:	02 c0       	rjmp	.+4      	; 0x5390 <status_leds_fastBlink+0x32>
    538c:	22 0f       	add	r18, r18
    538e:	33 1f       	adc	r19, r19
    5390:	0a 94       	dec	r0
    5392:	e2 f7       	brpl	.-8      	; 0x538c <status_leds_fastBlink+0x2e>
    5394:	24 27       	eor	r18, r20
    5396:	28 83       	st	Y, r18
    5398:	fd 01       	movw	r30, r26
    539a:	82 e0       	ldi	r24, 0x02	; 2
    539c:	84 83       	std	Z+4, r24	; 0x04
    539e:	df 91       	pop	r29
    53a0:	cf 91       	pop	r28
    53a2:	08 95       	ret

000053a4 <status_leds_ledOn>:
    53a4:	28 2f       	mov	r18, r24
    53a6:	30 e0       	ldi	r19, 0x00	; 0
    53a8:	f9 01       	movw	r30, r18
    53aa:	ee 0f       	add	r30, r30
    53ac:	ff 1f       	adc	r31, r31
    53ae:	e2 0f       	add	r30, r18
    53b0:	f3 1f       	adc	r31, r19
    53b2:	ee 0f       	add	r30, r30
    53b4:	ff 1f       	adc	r31, r31
    53b6:	ee 54       	subi	r30, 0x4E	; 78
    53b8:	fb 4e       	sbci	r31, 0xEB	; 235
    53ba:	93 e0       	ldi	r25, 0x03	; 3
    53bc:	94 83       	std	Z+4, r25	; 0x04
    53be:	60 cf       	rjmp	.-320    	; 0x5280 <_turn_on>
    53c0:	08 95       	ret

000053c2 <status_leds_ledOff>:
    53c2:	28 2f       	mov	r18, r24
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	f9 01       	movw	r30, r18
    53c8:	ee 0f       	add	r30, r30
    53ca:	ff 1f       	adc	r31, r31
    53cc:	e2 0f       	add	r30, r18
    53ce:	f3 1f       	adc	r31, r19
    53d0:	ee 0f       	add	r30, r30
    53d2:	ff 1f       	adc	r31, r31
    53d4:	ee 54       	subi	r30, 0x4E	; 78
    53d6:	fb 4e       	sbci	r31, 0xEB	; 235
    53d8:	94 e0       	ldi	r25, 0x04	; 4
    53da:	94 83       	std	Z+4, r25	; 0x04
    53dc:	05 cf       	rjmp	.-502    	; 0x51e8 <_turn_off>
    53de:	08 95       	ret

000053e0 <status_leds_longPuls>:
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	fc 01       	movw	r30, r24
    53e4:	ee 0f       	add	r30, r30
    53e6:	ff 1f       	adc	r31, r31
    53e8:	df 01       	movw	r26, r30
    53ea:	a8 0f       	add	r26, r24
    53ec:	b9 1f       	adc	r27, r25
    53ee:	aa 0f       	add	r26, r26
    53f0:	bb 1f       	adc	r27, r27
    53f2:	ae 54       	subi	r26, 0x4E	; 78
    53f4:	bb 4e       	sbci	r27, 0xEB	; 235
    53f6:	24 e0       	ldi	r18, 0x04	; 4
    53f8:	15 96       	adiw	r26, 0x05	; 5
    53fa:	2c 93       	st	X, r18
    53fc:	15 97       	sbiw	r26, 0x05	; 5
    53fe:	fd 01       	movw	r30, r26
    5400:	14 82       	std	Z+4, r1	; 0x04
    5402:	08 95       	ret

00005404 <status_leds_shortPuls>:
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	fc 01       	movw	r30, r24
    5408:	ee 0f       	add	r30, r30
    540a:	ff 1f       	adc	r31, r31
    540c:	df 01       	movw	r26, r30
    540e:	a8 0f       	add	r26, r24
    5410:	b9 1f       	adc	r27, r25
    5412:	aa 0f       	add	r26, r26
    5414:	bb 1f       	adc	r27, r27
    5416:	ae 54       	subi	r26, 0x4E	; 78
    5418:	bb 4e       	sbci	r27, 0xEB	; 235
    541a:	21 e0       	ldi	r18, 0x01	; 1
    541c:	15 96       	adiw	r26, 0x05	; 5
    541e:	2c 93       	st	X, r18
    5420:	15 97       	sbiw	r26, 0x05	; 5
    5422:	fd 01       	movw	r30, r26
    5424:	14 82       	std	Z+4, r1	; 0x04
    5426:	08 95       	ret

00005428 <_initTwiInterface>:
    5428:	80 91 d8 14 	lds	r24, 0x14D8	; 0x8014d8 <_twiIsInitiated>
    542c:	81 11       	cpse	r24, r1
    542e:	0c c0       	rjmp	.+24     	; 0x5448 <_initTwiInterface+0x20>
    5430:	8c e0       	ldi	r24, 0x0C	; 12
    5432:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5436:	8f ef       	ldi	r24, 0xFF	; 255
    5438:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    543c:	84 e0       	ldi	r24, 0x04	; 4
    543e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	80 93 d8 14 	sts	0x14D8, r24	; 0x8014d8 <_twiIsInitiated>
    5448:	08 95       	ret

0000544a <twiCreate>:
    544a:	af 92       	push	r10
    544c:	bf 92       	push	r11
    544e:	cf 92       	push	r12
    5450:	df 92       	push	r13
    5452:	ef 92       	push	r14
    5454:	ff 92       	push	r15
    5456:	0f 93       	push	r16
    5458:	1f 93       	push	r17
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	a8 2e       	mov	r10, r24
    5460:	b6 2e       	mov	r11, r22
    5462:	69 01       	movw	r12, r18
    5464:	7a 01       	movw	r14, r20
    5466:	84 e0       	ldi	r24, 0x04	; 4
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	cb d3       	rcall	.+1942   	; 0x5c02 <malloc>
    546c:	ec 01       	movw	r28, r24
    546e:	89 2b       	or	r24, r25
    5470:	61 f1       	breq	.+88     	; 0x54ca <twiCreate+0x80>
    5472:	a8 82       	st	Y, r10
    5474:	81 e0       	ldi	r24, 0x01	; 1
    5476:	b8 12       	cpse	r11, r24
    5478:	12 c0       	rjmp	.+36     	; 0x549e <twiCreate+0x54>
    547a:	c7 01       	movw	r24, r14
    547c:	b6 01       	movw	r22, r12
    547e:	20 ea       	ldi	r18, 0xA0	; 160
    5480:	36 e8       	ldi	r19, 0x86	; 134
    5482:	41 e0       	ldi	r20, 0x01	; 1
    5484:	50 e0       	ldi	r21, 0x00	; 0
    5486:	79 d3       	rcall	.+1778   	; 0x5b7a <__udivmodsi4>
    5488:	da 01       	movw	r26, r20
    548a:	c9 01       	movw	r24, r18
    548c:	40 97       	sbiw	r24, 0x10	; 16
    548e:	a1 09       	sbc	r26, r1
    5490:	b1 09       	sbc	r27, r1
    5492:	b6 95       	lsr	r27
    5494:	a7 95       	ror	r26
    5496:	97 95       	ror	r25
    5498:	87 95       	ror	r24
    549a:	89 83       	std	Y+1, r24	; 0x01
    549c:	11 c0       	rjmp	.+34     	; 0x54c0 <twiCreate+0x76>
    549e:	c7 01       	movw	r24, r14
    54a0:	b6 01       	movw	r22, r12
    54a2:	20 e8       	ldi	r18, 0x80	; 128
    54a4:	3a e1       	ldi	r19, 0x1A	; 26
    54a6:	46 e0       	ldi	r20, 0x06	; 6
    54a8:	50 e0       	ldi	r21, 0x00	; 0
    54aa:	67 d3       	rcall	.+1742   	; 0x5b7a <__udivmodsi4>
    54ac:	da 01       	movw	r26, r20
    54ae:	c9 01       	movw	r24, r18
    54b0:	40 97       	sbiw	r24, 0x10	; 16
    54b2:	a1 09       	sbc	r26, r1
    54b4:	b1 09       	sbc	r27, r1
    54b6:	b6 95       	lsr	r27
    54b8:	a7 95       	ror	r26
    54ba:	97 95       	ror	r25
    54bc:	87 95       	ror	r24
    54be:	89 83       	std	Y+1, r24	; 0x01
    54c0:	1b 83       	std	Y+3, r17	; 0x03
    54c2:	0a 83       	std	Y+2, r16	; 0x02
    54c4:	8c 2f       	mov	r24, r28
    54c6:	9d 2f       	mov	r25, r29
    54c8:	02 c0       	rjmp	.+4      	; 0x54ce <twiCreate+0x84>
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	df 91       	pop	r29
    54d0:	cf 91       	pop	r28
    54d2:	1f 91       	pop	r17
    54d4:	0f 91       	pop	r16
    54d6:	ff 90       	pop	r15
    54d8:	ef 90       	pop	r14
    54da:	df 90       	pop	r13
    54dc:	cf 90       	pop	r12
    54de:	bf 90       	pop	r11
    54e0:	af 90       	pop	r10
    54e2:	08 95       	ret

000054e4 <twiIsBusy>:
    54e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e8:	81 70       	andi	r24, 0x01	; 1
    54ea:	08 95       	ret

000054ec <twiTransmit>:
    54ec:	ff 92       	push	r15
    54ee:	0f 93       	push	r16
    54f0:	1f 93       	push	r17
    54f2:	cf 93       	push	r28
    54f4:	df 93       	push	r29
    54f6:	00 97       	sbiw	r24, 0x00	; 0
    54f8:	d1 f1       	breq	.+116    	; 0x556e <twiTransmit+0x82>
    54fa:	4a 30       	cpi	r20, 0x0A	; 10
    54fc:	d0 f5       	brcc	.+116    	; 0x5572 <twiTransmit+0x86>
    54fe:	f4 2e       	mov	r15, r20
    5500:	8b 01       	movw	r16, r22
    5502:	ec 01       	movw	r28, r24
    5504:	ef df       	rcall	.-34     	; 0x54e4 <twiIsBusy>
    5506:	81 11       	cpse	r24, r1
    5508:	36 c0       	rjmp	.+108    	; 0x5576 <twiTransmit+0x8a>
    550a:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    550e:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    5512:	c8 17       	cp	r28, r24
    5514:	d9 07       	cpc	r29, r25
    5516:	41 f0       	breq	.+16     	; 0x5528 <twiTransmit+0x3c>
    5518:	87 df       	rcall	.-242    	; 0x5428 <_initTwiInterface>
    551a:	89 81       	ldd	r24, Y+1	; 0x01
    551c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5520:	d0 93 cc 14 	sts	0x14CC, r29	; 0x8014cc <_twiCurrentHandler+0x1>
    5524:	c0 93 cb 14 	sts	0x14CB, r28	; 0x8014cb <_twiCurrentHandler>
    5528:	81 e0       	ldi	r24, 0x01	; 1
    552a:	8f 0d       	add	r24, r15
    552c:	80 93 cd 14 	sts	0x14CD, r24	; 0x8014cd <_twiMessageLen>
    5530:	88 81       	ld	r24, Y
    5532:	88 0f       	add	r24, r24
    5534:	80 93 ce 14 	sts	0x14CE, r24	; 0x8014ce <_twiMessageBuffer>
    5538:	ff 20       	and	r15, r15
    553a:	89 f0       	breq	.+34     	; 0x555e <twiTransmit+0x72>
    553c:	f8 01       	movw	r30, r16
    553e:	af ec       	ldi	r26, 0xCF	; 207
    5540:	b4 e1       	ldi	r27, 0x14	; 20
    5542:	4f ef       	ldi	r20, 0xFF	; 255
    5544:	4f 0d       	add	r20, r15
    5546:	64 2f       	mov	r22, r20
    5548:	70 e0       	ldi	r23, 0x00	; 0
    554a:	cb 01       	movw	r24, r22
    554c:	01 96       	adiw	r24, 0x01	; 1
    554e:	b8 01       	movw	r22, r16
    5550:	68 0f       	add	r22, r24
    5552:	79 1f       	adc	r23, r25
    5554:	81 91       	ld	r24, Z+
    5556:	8d 93       	st	X+, r24
    5558:	e6 17       	cp	r30, r22
    555a:	f7 07       	cpc	r31, r23
    555c:	d9 f7       	brne	.-10     	; 0x5554 <twiTransmit+0x68>
    555e:	88 ef       	ldi	r24, 0xF8	; 248
    5560:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5564:	85 ea       	ldi	r24, 0xA5	; 165
    5566:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    556a:	84 e0       	ldi	r24, 0x04	; 4
    556c:	05 c0       	rjmp	.+10     	; 0x5578 <twiTransmit+0x8c>
    556e:	86 e0       	ldi	r24, 0x06	; 6
    5570:	03 c0       	rjmp	.+6      	; 0x5578 <twiTransmit+0x8c>
    5572:	87 e0       	ldi	r24, 0x07	; 7
    5574:	01 c0       	rjmp	.+2      	; 0x5578 <twiTransmit+0x8c>
    5576:	82 e0       	ldi	r24, 0x02	; 2
    5578:	df 91       	pop	r29
    557a:	cf 91       	pop	r28
    557c:	1f 91       	pop	r17
    557e:	0f 91       	pop	r16
    5580:	ff 90       	pop	r15
    5582:	08 95       	ret

00005584 <twiReceive>:
    5584:	1f 93       	push	r17
    5586:	cf 93       	push	r28
    5588:	df 93       	push	r29
    558a:	00 97       	sbiw	r24, 0x00	; 0
    558c:	29 f1       	breq	.+74     	; 0x55d8 <twiReceive+0x54>
    558e:	6b 30       	cpi	r22, 0x0B	; 11
    5590:	28 f5       	brcc	.+74     	; 0x55dc <twiReceive+0x58>
    5592:	16 2f       	mov	r17, r22
    5594:	ec 01       	movw	r28, r24
    5596:	a6 df       	rcall	.-180    	; 0x54e4 <twiIsBusy>
    5598:	81 11       	cpse	r24, r1
    559a:	22 c0       	rjmp	.+68     	; 0x55e0 <twiReceive+0x5c>
    559c:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    55a0:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    55a4:	c8 17       	cp	r28, r24
    55a6:	d9 07       	cpc	r29, r25
    55a8:	41 f0       	breq	.+16     	; 0x55ba <twiReceive+0x36>
    55aa:	3e df       	rcall	.-388    	; 0x5428 <_initTwiInterface>
    55ac:	89 81       	ldd	r24, Y+1	; 0x01
    55ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    55b2:	d0 93 cc 14 	sts	0x14CC, r29	; 0x8014cc <_twiCurrentHandler+0x1>
    55b6:	c0 93 cb 14 	sts	0x14CB, r28	; 0x8014cb <_twiCurrentHandler>
    55ba:	10 93 cd 14 	sts	0x14CD, r17	; 0x8014cd <_twiMessageLen>
    55be:	88 81       	ld	r24, Y
    55c0:	88 0f       	add	r24, r24
    55c2:	81 60       	ori	r24, 0x01	; 1
    55c4:	80 93 ce 14 	sts	0x14CE, r24	; 0x8014ce <_twiMessageBuffer>
    55c8:	88 ef       	ldi	r24, 0xF8	; 248
    55ca:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    55ce:	85 ea       	ldi	r24, 0xA5	; 165
    55d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55d4:	85 e0       	ldi	r24, 0x05	; 5
    55d6:	05 c0       	rjmp	.+10     	; 0x55e2 <twiReceive+0x5e>
    55d8:	86 e0       	ldi	r24, 0x06	; 6
    55da:	03 c0       	rjmp	.+6      	; 0x55e2 <twiReceive+0x5e>
    55dc:	87 e0       	ldi	r24, 0x07	; 7
    55de:	01 c0       	rjmp	.+2      	; 0x55e2 <twiReceive+0x5e>
    55e0:	82 e0       	ldi	r24, 0x02	; 2
    55e2:	df 91       	pop	r29
    55e4:	cf 91       	pop	r28
    55e6:	1f 91       	pop	r17
    55e8:	08 95       	ret

000055ea <__vector_39>:
    55ea:	1f 92       	push	r1
    55ec:	0f 92       	push	r0
    55ee:	0f b6       	in	r0, 0x3f	; 63
    55f0:	0f 92       	push	r0
    55f2:	11 24       	eor	r1, r1
    55f4:	0b b6       	in	r0, 0x3b	; 59
    55f6:	0f 92       	push	r0
    55f8:	2f 93       	push	r18
    55fa:	3f 93       	push	r19
    55fc:	4f 93       	push	r20
    55fe:	5f 93       	push	r21
    5600:	6f 93       	push	r22
    5602:	7f 93       	push	r23
    5604:	8f 93       	push	r24
    5606:	9f 93       	push	r25
    5608:	af 93       	push	r26
    560a:	bf 93       	push	r27
    560c:	ef 93       	push	r30
    560e:	ff 93       	push	r31
    5610:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5614:	8e 2f       	mov	r24, r30
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	fc 01       	movw	r30, r24
    561a:	38 97       	sbiw	r30, 0x08	; 8
    561c:	e1 35       	cpi	r30, 0x51	; 81
    561e:	f1 05       	cpc	r31, r1
    5620:	08 f0       	brcs	.+2      	; 0x5624 <__vector_39+0x3a>
    5622:	75 c0       	rjmp	.+234    	; 0x570e <__vector_39+0x124>
    5624:	88 27       	eor	r24, r24
    5626:	e4 58       	subi	r30, 0x84	; 132
    5628:	ff 4f       	sbci	r31, 0xFF	; 255
    562a:	8f 4f       	sbci	r24, 0xFF	; 255
    562c:	c8 c2       	rjmp	.+1424   	; 0x5bbe <__tablejump2__>
    562e:	10 92 ca 14 	sts	0x14CA, r1	; 0x8014ca <_index.1885>
    5632:	e0 91 ca 14 	lds	r30, 0x14CA	; 0x8014ca <_index.1885>
    5636:	80 91 cd 14 	lds	r24, 0x14CD	; 0x8014cd <_twiMessageLen>
    563a:	e8 17       	cp	r30, r24
    563c:	70 f4       	brcc	.+28     	; 0x565a <__vector_39+0x70>
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	8e 0f       	add	r24, r30
    5642:	80 93 ca 14 	sts	0x14CA, r24	; 0x8014ca <_index.1885>
    5646:	f0 e0       	ldi	r31, 0x00	; 0
    5648:	e2 53       	subi	r30, 0x32	; 50
    564a:	fb 4e       	sbci	r31, 0xEB	; 235
    564c:	80 81       	ld	r24, Z
    564e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5652:	85 e8       	ldi	r24, 0x85	; 133
    5654:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5658:	72 c0       	rjmp	.+228    	; 0x573e <__vector_39+0x154>
    565a:	84 e9       	ldi	r24, 0x94	; 148
    565c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5660:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    5664:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    5668:	dc 01       	movw	r26, r24
    566a:	12 96       	adiw	r26, 0x02	; 2
    566c:	ed 91       	ld	r30, X+
    566e:	fc 91       	ld	r31, X
    5670:	13 97       	sbiw	r26, 0x03	; 3
    5672:	30 97       	sbiw	r30, 0x00	; 0
    5674:	09 f4       	brne	.+2      	; 0x5678 <__vector_39+0x8e>
    5676:	63 c0       	rjmp	.+198    	; 0x573e <__vector_39+0x154>
    5678:	20 e0       	ldi	r18, 0x00	; 0
    567a:	40 e0       	ldi	r20, 0x00	; 0
    567c:	50 e0       	ldi	r21, 0x00	; 0
    567e:	64 e0       	ldi	r22, 0x04	; 4
    5680:	19 95       	eicall
    5682:	5d c0       	rjmp	.+186    	; 0x573e <__vector_39+0x154>
    5684:	e0 91 ca 14 	lds	r30, 0x14CA	; 0x8014ca <_index.1885>
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	8e 0f       	add	r24, r30
    568c:	80 93 ca 14 	sts	0x14CA, r24	; 0x8014ca <_index.1885>
    5690:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5694:	f0 e0       	ldi	r31, 0x00	; 0
    5696:	e2 53       	subi	r30, 0x32	; 50
    5698:	fb 4e       	sbci	r31, 0xEB	; 235
    569a:	80 83       	st	Z, r24
    569c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    56a0:	80 34       	cpi	r24, 0x40	; 64
    56a2:	11 f4       	brne	.+4      	; 0x56a8 <__vector_39+0xbe>
    56a4:	10 92 ca 14 	sts	0x14CA, r1	; 0x8014ca <_index.1885>
    56a8:	20 91 ca 14 	lds	r18, 0x14CA	; 0x8014ca <_index.1885>
    56ac:	30 e0       	ldi	r19, 0x00	; 0
    56ae:	80 91 cd 14 	lds	r24, 0x14CD	; 0x8014cd <_twiMessageLen>
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	01 97       	sbiw	r24, 0x01	; 1
    56b6:	28 17       	cp	r18, r24
    56b8:	39 07       	cpc	r19, r25
    56ba:	24 f4       	brge	.+8      	; 0x56c4 <__vector_39+0xda>
    56bc:	85 ec       	ldi	r24, 0xC5	; 197
    56be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56c2:	3d c0       	rjmp	.+122    	; 0x573e <__vector_39+0x154>
    56c4:	85 e8       	ldi	r24, 0x85	; 133
    56c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56ca:	39 c0       	rjmp	.+114    	; 0x573e <__vector_39+0x154>
    56cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56d0:	e0 91 ca 14 	lds	r30, 0x14CA	; 0x8014ca <_index.1885>
    56d4:	f0 e0       	ldi	r31, 0x00	; 0
    56d6:	e2 53       	subi	r30, 0x32	; 50
    56d8:	fb 4e       	sbci	r31, 0xEB	; 235
    56da:	80 83       	st	Z, r24
    56dc:	84 e9       	ldi	r24, 0x94	; 148
    56de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56e2:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    56e6:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    56ea:	dc 01       	movw	r26, r24
    56ec:	12 96       	adiw	r26, 0x02	; 2
    56ee:	ed 91       	ld	r30, X+
    56f0:	fc 91       	ld	r31, X
    56f2:	13 97       	sbiw	r26, 0x03	; 3
    56f4:	30 97       	sbiw	r30, 0x00	; 0
    56f6:	19 f1       	breq	.+70     	; 0x573e <__vector_39+0x154>
    56f8:	20 91 cd 14 	lds	r18, 0x14CD	; 0x8014cd <_twiMessageLen>
    56fc:	4e ec       	ldi	r20, 0xCE	; 206
    56fe:	54 e1       	ldi	r21, 0x14	; 20
    5700:	65 e0       	ldi	r22, 0x05	; 5
    5702:	19 95       	eicall
    5704:	1c c0       	rjmp	.+56     	; 0x573e <__vector_39+0x154>
    5706:	85 ea       	ldi	r24, 0xA5	; 165
    5708:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    570c:	18 c0       	rjmp	.+48     	; 0x573e <__vector_39+0x154>
    570e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5712:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5716:	84 e0       	ldi	r24, 0x04	; 4
    5718:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    571c:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <_twiCurrentHandler>
    5720:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <_twiCurrentHandler+0x1>
    5724:	dc 01       	movw	r26, r24
    5726:	12 96       	adiw	r26, 0x02	; 2
    5728:	ed 91       	ld	r30, X+
    572a:	fc 91       	ld	r31, X
    572c:	13 97       	sbiw	r26, 0x03	; 3
    572e:	30 97       	sbiw	r30, 0x00	; 0
    5730:	31 f0       	breq	.+12     	; 0x573e <__vector_39+0x154>
    5732:	20 e0       	ldi	r18, 0x00	; 0
    5734:	40 e0       	ldi	r20, 0x00	; 0
    5736:	50 e0       	ldi	r21, 0x00	; 0
    5738:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    573c:	19 95       	eicall
    573e:	ff 91       	pop	r31
    5740:	ef 91       	pop	r30
    5742:	bf 91       	pop	r27
    5744:	af 91       	pop	r26
    5746:	9f 91       	pop	r25
    5748:	8f 91       	pop	r24
    574a:	7f 91       	pop	r23
    574c:	6f 91       	pop	r22
    574e:	5f 91       	pop	r21
    5750:	4f 91       	pop	r20
    5752:	3f 91       	pop	r19
    5754:	2f 91       	pop	r18
    5756:	0f 90       	pop	r0
    5758:	0b be       	out	0x3b, r0	; 59
    575a:	0f 90       	pop	r0
    575c:	0f be       	out	0x3f, r0	; 63
    575e:	0f 90       	pop	r0
    5760:	1f 90       	pop	r1
    5762:	18 95       	reti

00005764 <fifo_init>:
    5764:	fc 01       	movw	r30, r24
    5766:	41 11       	cpse	r20, r1
    5768:	01 c0       	rjmp	.+2      	; 0x576c <fifo_init+0x8>
    576a:	6c d3       	rcall	.+1752   	; 0x5e44 <abort>
    576c:	84 2f       	mov	r24, r20
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	9c 01       	movw	r18, r24
    5772:	21 50       	subi	r18, 0x01	; 1
    5774:	31 09       	sbc	r19, r1
    5776:	82 23       	and	r24, r18
    5778:	93 23       	and	r25, r19
    577a:	89 2b       	or	r24, r25
    577c:	09 f0       	breq	.+2      	; 0x5780 <fifo_init+0x1c>
    577e:	62 d3       	rcall	.+1732   	; 0x5e44 <abort>
    5780:	41 38       	cpi	r20, 0x81	; 129
    5782:	08 f0       	brcs	.+2      	; 0x5786 <fifo_init+0x22>
    5784:	5f d3       	rcall	.+1726   	; 0x5e44 <abort>
    5786:	12 82       	std	Z+2, r1	; 0x02
    5788:	13 82       	std	Z+3, r1	; 0x03
    578a:	44 83       	std	Z+4, r20	; 0x04
    578c:	44 0f       	add	r20, r20
    578e:	41 50       	subi	r20, 0x01	; 1
    5790:	45 83       	std	Z+5, r20	; 0x05
    5792:	71 83       	std	Z+1, r23	; 0x01
    5794:	60 83       	st	Z, r22
    5796:	80 e0       	ldi	r24, 0x00	; 0
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	08 95       	ret

0000579c <__subsf3>:
    579c:	50 58       	subi	r21, 0x80	; 128

0000579e <__addsf3>:
    579e:	bb 27       	eor	r27, r27
    57a0:	aa 27       	eor	r26, r26
    57a2:	0e d0       	rcall	.+28     	; 0x57c0 <__addsf3x>
    57a4:	4d c1       	rjmp	.+666    	; 0x5a40 <__fp_round>
    57a6:	3e d1       	rcall	.+636    	; 0x5a24 <__fp_pscA>
    57a8:	30 f0       	brcs	.+12     	; 0x57b6 <__addsf3+0x18>
    57aa:	43 d1       	rcall	.+646    	; 0x5a32 <__fp_pscB>
    57ac:	20 f0       	brcs	.+8      	; 0x57b6 <__addsf3+0x18>
    57ae:	31 f4       	brne	.+12     	; 0x57bc <__addsf3+0x1e>
    57b0:	9f 3f       	cpi	r25, 0xFF	; 255
    57b2:	11 f4       	brne	.+4      	; 0x57b8 <__addsf3+0x1a>
    57b4:	1e f4       	brtc	.+6      	; 0x57bc <__addsf3+0x1e>
    57b6:	33 c1       	rjmp	.+614    	; 0x5a1e <__fp_nan>
    57b8:	0e f4       	brtc	.+2      	; 0x57bc <__addsf3+0x1e>
    57ba:	e0 95       	com	r30
    57bc:	e7 fb       	bst	r30, 7
    57be:	29 c1       	rjmp	.+594    	; 0x5a12 <__fp_inf>

000057c0 <__addsf3x>:
    57c0:	e9 2f       	mov	r30, r25
    57c2:	4f d1       	rcall	.+670    	; 0x5a62 <__fp_split3>
    57c4:	80 f3       	brcs	.-32     	; 0x57a6 <__addsf3+0x8>
    57c6:	ba 17       	cp	r27, r26
    57c8:	62 07       	cpc	r22, r18
    57ca:	73 07       	cpc	r23, r19
    57cc:	84 07       	cpc	r24, r20
    57ce:	95 07       	cpc	r25, r21
    57d0:	18 f0       	brcs	.+6      	; 0x57d8 <__addsf3x+0x18>
    57d2:	71 f4       	brne	.+28     	; 0x57f0 <__addsf3x+0x30>
    57d4:	9e f5       	brtc	.+102    	; 0x583c <__addsf3x+0x7c>
    57d6:	67 c1       	rjmp	.+718    	; 0x5aa6 <__fp_zero>
    57d8:	0e f4       	brtc	.+2      	; 0x57dc <__addsf3x+0x1c>
    57da:	e0 95       	com	r30
    57dc:	0b 2e       	mov	r0, r27
    57de:	ba 2f       	mov	r27, r26
    57e0:	a0 2d       	mov	r26, r0
    57e2:	0b 01       	movw	r0, r22
    57e4:	b9 01       	movw	r22, r18
    57e6:	90 01       	movw	r18, r0
    57e8:	0c 01       	movw	r0, r24
    57ea:	ca 01       	movw	r24, r20
    57ec:	a0 01       	movw	r20, r0
    57ee:	11 24       	eor	r1, r1
    57f0:	ff 27       	eor	r31, r31
    57f2:	59 1b       	sub	r21, r25
    57f4:	99 f0       	breq	.+38     	; 0x581c <__addsf3x+0x5c>
    57f6:	59 3f       	cpi	r21, 0xF9	; 249
    57f8:	50 f4       	brcc	.+20     	; 0x580e <__addsf3x+0x4e>
    57fa:	50 3e       	cpi	r21, 0xE0	; 224
    57fc:	68 f1       	brcs	.+90     	; 0x5858 <__addsf3x+0x98>
    57fe:	1a 16       	cp	r1, r26
    5800:	f0 40       	sbci	r31, 0x00	; 0
    5802:	a2 2f       	mov	r26, r18
    5804:	23 2f       	mov	r18, r19
    5806:	34 2f       	mov	r19, r20
    5808:	44 27       	eor	r20, r20
    580a:	58 5f       	subi	r21, 0xF8	; 248
    580c:	f3 cf       	rjmp	.-26     	; 0x57f4 <__addsf3x+0x34>
    580e:	46 95       	lsr	r20
    5810:	37 95       	ror	r19
    5812:	27 95       	ror	r18
    5814:	a7 95       	ror	r26
    5816:	f0 40       	sbci	r31, 0x00	; 0
    5818:	53 95       	inc	r21
    581a:	c9 f7       	brne	.-14     	; 0x580e <__addsf3x+0x4e>
    581c:	7e f4       	brtc	.+30     	; 0x583c <__addsf3x+0x7c>
    581e:	1f 16       	cp	r1, r31
    5820:	ba 0b       	sbc	r27, r26
    5822:	62 0b       	sbc	r22, r18
    5824:	73 0b       	sbc	r23, r19
    5826:	84 0b       	sbc	r24, r20
    5828:	ba f0       	brmi	.+46     	; 0x5858 <__addsf3x+0x98>
    582a:	91 50       	subi	r25, 0x01	; 1
    582c:	a1 f0       	breq	.+40     	; 0x5856 <__addsf3x+0x96>
    582e:	ff 0f       	add	r31, r31
    5830:	bb 1f       	adc	r27, r27
    5832:	66 1f       	adc	r22, r22
    5834:	77 1f       	adc	r23, r23
    5836:	88 1f       	adc	r24, r24
    5838:	c2 f7       	brpl	.-16     	; 0x582a <__addsf3x+0x6a>
    583a:	0e c0       	rjmp	.+28     	; 0x5858 <__addsf3x+0x98>
    583c:	ba 0f       	add	r27, r26
    583e:	62 1f       	adc	r22, r18
    5840:	73 1f       	adc	r23, r19
    5842:	84 1f       	adc	r24, r20
    5844:	48 f4       	brcc	.+18     	; 0x5858 <__addsf3x+0x98>
    5846:	87 95       	ror	r24
    5848:	77 95       	ror	r23
    584a:	67 95       	ror	r22
    584c:	b7 95       	ror	r27
    584e:	f7 95       	ror	r31
    5850:	9e 3f       	cpi	r25, 0xFE	; 254
    5852:	08 f0       	brcs	.+2      	; 0x5856 <__addsf3x+0x96>
    5854:	b3 cf       	rjmp	.-154    	; 0x57bc <__addsf3+0x1e>
    5856:	93 95       	inc	r25
    5858:	88 0f       	add	r24, r24
    585a:	08 f0       	brcs	.+2      	; 0x585e <__addsf3x+0x9e>
    585c:	99 27       	eor	r25, r25
    585e:	ee 0f       	add	r30, r30
    5860:	97 95       	ror	r25
    5862:	87 95       	ror	r24
    5864:	08 95       	ret

00005866 <__divsf3>:
    5866:	0c d0       	rcall	.+24     	; 0x5880 <__divsf3x>
    5868:	eb c0       	rjmp	.+470    	; 0x5a40 <__fp_round>
    586a:	e3 d0       	rcall	.+454    	; 0x5a32 <__fp_pscB>
    586c:	40 f0       	brcs	.+16     	; 0x587e <__divsf3+0x18>
    586e:	da d0       	rcall	.+436    	; 0x5a24 <__fp_pscA>
    5870:	30 f0       	brcs	.+12     	; 0x587e <__divsf3+0x18>
    5872:	21 f4       	brne	.+8      	; 0x587c <__divsf3+0x16>
    5874:	5f 3f       	cpi	r21, 0xFF	; 255
    5876:	19 f0       	breq	.+6      	; 0x587e <__divsf3+0x18>
    5878:	cc c0       	rjmp	.+408    	; 0x5a12 <__fp_inf>
    587a:	51 11       	cpse	r21, r1
    587c:	15 c1       	rjmp	.+554    	; 0x5aa8 <__fp_szero>
    587e:	cf c0       	rjmp	.+414    	; 0x5a1e <__fp_nan>

00005880 <__divsf3x>:
    5880:	f0 d0       	rcall	.+480    	; 0x5a62 <__fp_split3>
    5882:	98 f3       	brcs	.-26     	; 0x586a <__divsf3+0x4>

00005884 <__divsf3_pse>:
    5884:	99 23       	and	r25, r25
    5886:	c9 f3       	breq	.-14     	; 0x587a <__divsf3+0x14>
    5888:	55 23       	and	r21, r21
    588a:	b1 f3       	breq	.-20     	; 0x5878 <__divsf3+0x12>
    588c:	95 1b       	sub	r25, r21
    588e:	55 0b       	sbc	r21, r21
    5890:	bb 27       	eor	r27, r27
    5892:	aa 27       	eor	r26, r26
    5894:	62 17       	cp	r22, r18
    5896:	73 07       	cpc	r23, r19
    5898:	84 07       	cpc	r24, r20
    589a:	38 f0       	brcs	.+14     	; 0x58aa <__divsf3_pse+0x26>
    589c:	9f 5f       	subi	r25, 0xFF	; 255
    589e:	5f 4f       	sbci	r21, 0xFF	; 255
    58a0:	22 0f       	add	r18, r18
    58a2:	33 1f       	adc	r19, r19
    58a4:	44 1f       	adc	r20, r20
    58a6:	aa 1f       	adc	r26, r26
    58a8:	a9 f3       	breq	.-22     	; 0x5894 <__divsf3_pse+0x10>
    58aa:	33 d0       	rcall	.+102    	; 0x5912 <__divsf3_pse+0x8e>
    58ac:	0e 2e       	mov	r0, r30
    58ae:	3a f0       	brmi	.+14     	; 0x58be <__divsf3_pse+0x3a>
    58b0:	e0 e8       	ldi	r30, 0x80	; 128
    58b2:	30 d0       	rcall	.+96     	; 0x5914 <__divsf3_pse+0x90>
    58b4:	91 50       	subi	r25, 0x01	; 1
    58b6:	50 40       	sbci	r21, 0x00	; 0
    58b8:	e6 95       	lsr	r30
    58ba:	00 1c       	adc	r0, r0
    58bc:	ca f7       	brpl	.-14     	; 0x58b0 <__divsf3_pse+0x2c>
    58be:	29 d0       	rcall	.+82     	; 0x5912 <__divsf3_pse+0x8e>
    58c0:	fe 2f       	mov	r31, r30
    58c2:	27 d0       	rcall	.+78     	; 0x5912 <__divsf3_pse+0x8e>
    58c4:	66 0f       	add	r22, r22
    58c6:	77 1f       	adc	r23, r23
    58c8:	88 1f       	adc	r24, r24
    58ca:	bb 1f       	adc	r27, r27
    58cc:	26 17       	cp	r18, r22
    58ce:	37 07       	cpc	r19, r23
    58d0:	48 07       	cpc	r20, r24
    58d2:	ab 07       	cpc	r26, r27
    58d4:	b0 e8       	ldi	r27, 0x80	; 128
    58d6:	09 f0       	breq	.+2      	; 0x58da <__divsf3_pse+0x56>
    58d8:	bb 0b       	sbc	r27, r27
    58da:	80 2d       	mov	r24, r0
    58dc:	bf 01       	movw	r22, r30
    58de:	ff 27       	eor	r31, r31
    58e0:	93 58       	subi	r25, 0x83	; 131
    58e2:	5f 4f       	sbci	r21, 0xFF	; 255
    58e4:	2a f0       	brmi	.+10     	; 0x58f0 <__divsf3_pse+0x6c>
    58e6:	9e 3f       	cpi	r25, 0xFE	; 254
    58e8:	51 05       	cpc	r21, r1
    58ea:	68 f0       	brcs	.+26     	; 0x5906 <__divsf3_pse+0x82>
    58ec:	92 c0       	rjmp	.+292    	; 0x5a12 <__fp_inf>
    58ee:	dc c0       	rjmp	.+440    	; 0x5aa8 <__fp_szero>
    58f0:	5f 3f       	cpi	r21, 0xFF	; 255
    58f2:	ec f3       	brlt	.-6      	; 0x58ee <__divsf3_pse+0x6a>
    58f4:	98 3e       	cpi	r25, 0xE8	; 232
    58f6:	dc f3       	brlt	.-10     	; 0x58ee <__divsf3_pse+0x6a>
    58f8:	86 95       	lsr	r24
    58fa:	77 95       	ror	r23
    58fc:	67 95       	ror	r22
    58fe:	b7 95       	ror	r27
    5900:	f7 95       	ror	r31
    5902:	9f 5f       	subi	r25, 0xFF	; 255
    5904:	c9 f7       	brne	.-14     	; 0x58f8 <__divsf3_pse+0x74>
    5906:	88 0f       	add	r24, r24
    5908:	91 1d       	adc	r25, r1
    590a:	96 95       	lsr	r25
    590c:	87 95       	ror	r24
    590e:	97 f9       	bld	r25, 7
    5910:	08 95       	ret
    5912:	e1 e0       	ldi	r30, 0x01	; 1
    5914:	66 0f       	add	r22, r22
    5916:	77 1f       	adc	r23, r23
    5918:	88 1f       	adc	r24, r24
    591a:	bb 1f       	adc	r27, r27
    591c:	62 17       	cp	r22, r18
    591e:	73 07       	cpc	r23, r19
    5920:	84 07       	cpc	r24, r20
    5922:	ba 07       	cpc	r27, r26
    5924:	20 f0       	brcs	.+8      	; 0x592e <__divsf3_pse+0xaa>
    5926:	62 1b       	sub	r22, r18
    5928:	73 0b       	sbc	r23, r19
    592a:	84 0b       	sbc	r24, r20
    592c:	ba 0b       	sbc	r27, r26
    592e:	ee 1f       	adc	r30, r30
    5930:	88 f7       	brcc	.-30     	; 0x5914 <__divsf3_pse+0x90>
    5932:	e0 95       	com	r30
    5934:	08 95       	ret

00005936 <__fixsfsi>:
    5936:	04 d0       	rcall	.+8      	; 0x5940 <__fixunssfsi>
    5938:	68 94       	set
    593a:	b1 11       	cpse	r27, r1
    593c:	b5 c0       	rjmp	.+362    	; 0x5aa8 <__fp_szero>
    593e:	08 95       	ret

00005940 <__fixunssfsi>:
    5940:	98 d0       	rcall	.+304    	; 0x5a72 <__fp_splitA>
    5942:	88 f0       	brcs	.+34     	; 0x5966 <__fixunssfsi+0x26>
    5944:	9f 57       	subi	r25, 0x7F	; 127
    5946:	90 f0       	brcs	.+36     	; 0x596c <__fixunssfsi+0x2c>
    5948:	b9 2f       	mov	r27, r25
    594a:	99 27       	eor	r25, r25
    594c:	b7 51       	subi	r27, 0x17	; 23
    594e:	a0 f0       	brcs	.+40     	; 0x5978 <__fixunssfsi+0x38>
    5950:	d1 f0       	breq	.+52     	; 0x5986 <__fixunssfsi+0x46>
    5952:	66 0f       	add	r22, r22
    5954:	77 1f       	adc	r23, r23
    5956:	88 1f       	adc	r24, r24
    5958:	99 1f       	adc	r25, r25
    595a:	1a f0       	brmi	.+6      	; 0x5962 <__fixunssfsi+0x22>
    595c:	ba 95       	dec	r27
    595e:	c9 f7       	brne	.-14     	; 0x5952 <__fixunssfsi+0x12>
    5960:	12 c0       	rjmp	.+36     	; 0x5986 <__fixunssfsi+0x46>
    5962:	b1 30       	cpi	r27, 0x01	; 1
    5964:	81 f0       	breq	.+32     	; 0x5986 <__fixunssfsi+0x46>
    5966:	9f d0       	rcall	.+318    	; 0x5aa6 <__fp_zero>
    5968:	b1 e0       	ldi	r27, 0x01	; 1
    596a:	08 95       	ret
    596c:	9c c0       	rjmp	.+312    	; 0x5aa6 <__fp_zero>
    596e:	67 2f       	mov	r22, r23
    5970:	78 2f       	mov	r23, r24
    5972:	88 27       	eor	r24, r24
    5974:	b8 5f       	subi	r27, 0xF8	; 248
    5976:	39 f0       	breq	.+14     	; 0x5986 <__fixunssfsi+0x46>
    5978:	b9 3f       	cpi	r27, 0xF9	; 249
    597a:	cc f3       	brlt	.-14     	; 0x596e <__fixunssfsi+0x2e>
    597c:	86 95       	lsr	r24
    597e:	77 95       	ror	r23
    5980:	67 95       	ror	r22
    5982:	b3 95       	inc	r27
    5984:	d9 f7       	brne	.-10     	; 0x597c <__fixunssfsi+0x3c>
    5986:	3e f4       	brtc	.+14     	; 0x5996 <__fixunssfsi+0x56>
    5988:	90 95       	com	r25
    598a:	80 95       	com	r24
    598c:	70 95       	com	r23
    598e:	61 95       	neg	r22
    5990:	7f 4f       	sbci	r23, 0xFF	; 255
    5992:	8f 4f       	sbci	r24, 0xFF	; 255
    5994:	9f 4f       	sbci	r25, 0xFF	; 255
    5996:	08 95       	ret

00005998 <__floatunsisf>:
    5998:	e8 94       	clt
    599a:	09 c0       	rjmp	.+18     	; 0x59ae <__floatsisf+0x12>

0000599c <__floatsisf>:
    599c:	97 fb       	bst	r25, 7
    599e:	3e f4       	brtc	.+14     	; 0x59ae <__floatsisf+0x12>
    59a0:	90 95       	com	r25
    59a2:	80 95       	com	r24
    59a4:	70 95       	com	r23
    59a6:	61 95       	neg	r22
    59a8:	7f 4f       	sbci	r23, 0xFF	; 255
    59aa:	8f 4f       	sbci	r24, 0xFF	; 255
    59ac:	9f 4f       	sbci	r25, 0xFF	; 255
    59ae:	99 23       	and	r25, r25
    59b0:	a9 f0       	breq	.+42     	; 0x59dc <__floatsisf+0x40>
    59b2:	f9 2f       	mov	r31, r25
    59b4:	96 e9       	ldi	r25, 0x96	; 150
    59b6:	bb 27       	eor	r27, r27
    59b8:	93 95       	inc	r25
    59ba:	f6 95       	lsr	r31
    59bc:	87 95       	ror	r24
    59be:	77 95       	ror	r23
    59c0:	67 95       	ror	r22
    59c2:	b7 95       	ror	r27
    59c4:	f1 11       	cpse	r31, r1
    59c6:	f8 cf       	rjmp	.-16     	; 0x59b8 <__floatsisf+0x1c>
    59c8:	fa f4       	brpl	.+62     	; 0x5a08 <__floatsisf+0x6c>
    59ca:	bb 0f       	add	r27, r27
    59cc:	11 f4       	brne	.+4      	; 0x59d2 <__floatsisf+0x36>
    59ce:	60 ff       	sbrs	r22, 0
    59d0:	1b c0       	rjmp	.+54     	; 0x5a08 <__floatsisf+0x6c>
    59d2:	6f 5f       	subi	r22, 0xFF	; 255
    59d4:	7f 4f       	sbci	r23, 0xFF	; 255
    59d6:	8f 4f       	sbci	r24, 0xFF	; 255
    59d8:	9f 4f       	sbci	r25, 0xFF	; 255
    59da:	16 c0       	rjmp	.+44     	; 0x5a08 <__floatsisf+0x6c>
    59dc:	88 23       	and	r24, r24
    59de:	11 f0       	breq	.+4      	; 0x59e4 <__floatsisf+0x48>
    59e0:	96 e9       	ldi	r25, 0x96	; 150
    59e2:	11 c0       	rjmp	.+34     	; 0x5a06 <__floatsisf+0x6a>
    59e4:	77 23       	and	r23, r23
    59e6:	21 f0       	breq	.+8      	; 0x59f0 <__floatsisf+0x54>
    59e8:	9e e8       	ldi	r25, 0x8E	; 142
    59ea:	87 2f       	mov	r24, r23
    59ec:	76 2f       	mov	r23, r22
    59ee:	05 c0       	rjmp	.+10     	; 0x59fa <__floatsisf+0x5e>
    59f0:	66 23       	and	r22, r22
    59f2:	71 f0       	breq	.+28     	; 0x5a10 <__floatsisf+0x74>
    59f4:	96 e8       	ldi	r25, 0x86	; 134
    59f6:	86 2f       	mov	r24, r22
    59f8:	70 e0       	ldi	r23, 0x00	; 0
    59fa:	60 e0       	ldi	r22, 0x00	; 0
    59fc:	2a f0       	brmi	.+10     	; 0x5a08 <__floatsisf+0x6c>
    59fe:	9a 95       	dec	r25
    5a00:	66 0f       	add	r22, r22
    5a02:	77 1f       	adc	r23, r23
    5a04:	88 1f       	adc	r24, r24
    5a06:	da f7       	brpl	.-10     	; 0x59fe <__floatsisf+0x62>
    5a08:	88 0f       	add	r24, r24
    5a0a:	96 95       	lsr	r25
    5a0c:	87 95       	ror	r24
    5a0e:	97 f9       	bld	r25, 7
    5a10:	08 95       	ret

00005a12 <__fp_inf>:
    5a12:	97 f9       	bld	r25, 7
    5a14:	9f 67       	ori	r25, 0x7F	; 127
    5a16:	80 e8       	ldi	r24, 0x80	; 128
    5a18:	70 e0       	ldi	r23, 0x00	; 0
    5a1a:	60 e0       	ldi	r22, 0x00	; 0
    5a1c:	08 95       	ret

00005a1e <__fp_nan>:
    5a1e:	9f ef       	ldi	r25, 0xFF	; 255
    5a20:	80 ec       	ldi	r24, 0xC0	; 192
    5a22:	08 95       	ret

00005a24 <__fp_pscA>:
    5a24:	00 24       	eor	r0, r0
    5a26:	0a 94       	dec	r0
    5a28:	16 16       	cp	r1, r22
    5a2a:	17 06       	cpc	r1, r23
    5a2c:	18 06       	cpc	r1, r24
    5a2e:	09 06       	cpc	r0, r25
    5a30:	08 95       	ret

00005a32 <__fp_pscB>:
    5a32:	00 24       	eor	r0, r0
    5a34:	0a 94       	dec	r0
    5a36:	12 16       	cp	r1, r18
    5a38:	13 06       	cpc	r1, r19
    5a3a:	14 06       	cpc	r1, r20
    5a3c:	05 06       	cpc	r0, r21
    5a3e:	08 95       	ret

00005a40 <__fp_round>:
    5a40:	09 2e       	mov	r0, r25
    5a42:	03 94       	inc	r0
    5a44:	00 0c       	add	r0, r0
    5a46:	11 f4       	brne	.+4      	; 0x5a4c <__fp_round+0xc>
    5a48:	88 23       	and	r24, r24
    5a4a:	52 f0       	brmi	.+20     	; 0x5a60 <__fp_round+0x20>
    5a4c:	bb 0f       	add	r27, r27
    5a4e:	40 f4       	brcc	.+16     	; 0x5a60 <__fp_round+0x20>
    5a50:	bf 2b       	or	r27, r31
    5a52:	11 f4       	brne	.+4      	; 0x5a58 <__fp_round+0x18>
    5a54:	60 ff       	sbrs	r22, 0
    5a56:	04 c0       	rjmp	.+8      	; 0x5a60 <__fp_round+0x20>
    5a58:	6f 5f       	subi	r22, 0xFF	; 255
    5a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a60:	08 95       	ret

00005a62 <__fp_split3>:
    5a62:	57 fd       	sbrc	r21, 7
    5a64:	90 58       	subi	r25, 0x80	; 128
    5a66:	44 0f       	add	r20, r20
    5a68:	55 1f       	adc	r21, r21
    5a6a:	59 f0       	breq	.+22     	; 0x5a82 <__fp_splitA+0x10>
    5a6c:	5f 3f       	cpi	r21, 0xFF	; 255
    5a6e:	71 f0       	breq	.+28     	; 0x5a8c <__fp_splitA+0x1a>
    5a70:	47 95       	ror	r20

00005a72 <__fp_splitA>:
    5a72:	88 0f       	add	r24, r24
    5a74:	97 fb       	bst	r25, 7
    5a76:	99 1f       	adc	r25, r25
    5a78:	61 f0       	breq	.+24     	; 0x5a92 <__fp_splitA+0x20>
    5a7a:	9f 3f       	cpi	r25, 0xFF	; 255
    5a7c:	79 f0       	breq	.+30     	; 0x5a9c <__fp_splitA+0x2a>
    5a7e:	87 95       	ror	r24
    5a80:	08 95       	ret
    5a82:	12 16       	cp	r1, r18
    5a84:	13 06       	cpc	r1, r19
    5a86:	14 06       	cpc	r1, r20
    5a88:	55 1f       	adc	r21, r21
    5a8a:	f2 cf       	rjmp	.-28     	; 0x5a70 <__fp_split3+0xe>
    5a8c:	46 95       	lsr	r20
    5a8e:	f1 df       	rcall	.-30     	; 0x5a72 <__fp_splitA>
    5a90:	08 c0       	rjmp	.+16     	; 0x5aa2 <__fp_splitA+0x30>
    5a92:	16 16       	cp	r1, r22
    5a94:	17 06       	cpc	r1, r23
    5a96:	18 06       	cpc	r1, r24
    5a98:	99 1f       	adc	r25, r25
    5a9a:	f1 cf       	rjmp	.-30     	; 0x5a7e <__fp_splitA+0xc>
    5a9c:	86 95       	lsr	r24
    5a9e:	71 05       	cpc	r23, r1
    5aa0:	61 05       	cpc	r22, r1
    5aa2:	08 94       	sec
    5aa4:	08 95       	ret

00005aa6 <__fp_zero>:
    5aa6:	e8 94       	clt

00005aa8 <__fp_szero>:
    5aa8:	bb 27       	eor	r27, r27
    5aaa:	66 27       	eor	r22, r22
    5aac:	77 27       	eor	r23, r23
    5aae:	cb 01       	movw	r24, r22
    5ab0:	97 f9       	bld	r25, 7
    5ab2:	08 95       	ret

00005ab4 <__mulsf3>:
    5ab4:	0b d0       	rcall	.+22     	; 0x5acc <__mulsf3x>
    5ab6:	c4 cf       	rjmp	.-120    	; 0x5a40 <__fp_round>
    5ab8:	b5 df       	rcall	.-150    	; 0x5a24 <__fp_pscA>
    5aba:	28 f0       	brcs	.+10     	; 0x5ac6 <__mulsf3+0x12>
    5abc:	ba df       	rcall	.-140    	; 0x5a32 <__fp_pscB>
    5abe:	18 f0       	brcs	.+6      	; 0x5ac6 <__mulsf3+0x12>
    5ac0:	95 23       	and	r25, r21
    5ac2:	09 f0       	breq	.+2      	; 0x5ac6 <__mulsf3+0x12>
    5ac4:	a6 cf       	rjmp	.-180    	; 0x5a12 <__fp_inf>
    5ac6:	ab cf       	rjmp	.-170    	; 0x5a1e <__fp_nan>
    5ac8:	11 24       	eor	r1, r1
    5aca:	ee cf       	rjmp	.-36     	; 0x5aa8 <__fp_szero>

00005acc <__mulsf3x>:
    5acc:	ca df       	rcall	.-108    	; 0x5a62 <__fp_split3>
    5ace:	a0 f3       	brcs	.-24     	; 0x5ab8 <__mulsf3+0x4>

00005ad0 <__mulsf3_pse>:
    5ad0:	95 9f       	mul	r25, r21
    5ad2:	d1 f3       	breq	.-12     	; 0x5ac8 <__mulsf3+0x14>
    5ad4:	95 0f       	add	r25, r21
    5ad6:	50 e0       	ldi	r21, 0x00	; 0
    5ad8:	55 1f       	adc	r21, r21
    5ada:	62 9f       	mul	r22, r18
    5adc:	f0 01       	movw	r30, r0
    5ade:	72 9f       	mul	r23, r18
    5ae0:	bb 27       	eor	r27, r27
    5ae2:	f0 0d       	add	r31, r0
    5ae4:	b1 1d       	adc	r27, r1
    5ae6:	63 9f       	mul	r22, r19
    5ae8:	aa 27       	eor	r26, r26
    5aea:	f0 0d       	add	r31, r0
    5aec:	b1 1d       	adc	r27, r1
    5aee:	aa 1f       	adc	r26, r26
    5af0:	64 9f       	mul	r22, r20
    5af2:	66 27       	eor	r22, r22
    5af4:	b0 0d       	add	r27, r0
    5af6:	a1 1d       	adc	r26, r1
    5af8:	66 1f       	adc	r22, r22
    5afa:	82 9f       	mul	r24, r18
    5afc:	22 27       	eor	r18, r18
    5afe:	b0 0d       	add	r27, r0
    5b00:	a1 1d       	adc	r26, r1
    5b02:	62 1f       	adc	r22, r18
    5b04:	73 9f       	mul	r23, r19
    5b06:	b0 0d       	add	r27, r0
    5b08:	a1 1d       	adc	r26, r1
    5b0a:	62 1f       	adc	r22, r18
    5b0c:	83 9f       	mul	r24, r19
    5b0e:	a0 0d       	add	r26, r0
    5b10:	61 1d       	adc	r22, r1
    5b12:	22 1f       	adc	r18, r18
    5b14:	74 9f       	mul	r23, r20
    5b16:	33 27       	eor	r19, r19
    5b18:	a0 0d       	add	r26, r0
    5b1a:	61 1d       	adc	r22, r1
    5b1c:	23 1f       	adc	r18, r19
    5b1e:	84 9f       	mul	r24, r20
    5b20:	60 0d       	add	r22, r0
    5b22:	21 1d       	adc	r18, r1
    5b24:	82 2f       	mov	r24, r18
    5b26:	76 2f       	mov	r23, r22
    5b28:	6a 2f       	mov	r22, r26
    5b2a:	11 24       	eor	r1, r1
    5b2c:	9f 57       	subi	r25, 0x7F	; 127
    5b2e:	50 40       	sbci	r21, 0x00	; 0
    5b30:	8a f0       	brmi	.+34     	; 0x5b54 <__mulsf3_pse+0x84>
    5b32:	e1 f0       	breq	.+56     	; 0x5b6c <__mulsf3_pse+0x9c>
    5b34:	88 23       	and	r24, r24
    5b36:	4a f0       	brmi	.+18     	; 0x5b4a <__mulsf3_pse+0x7a>
    5b38:	ee 0f       	add	r30, r30
    5b3a:	ff 1f       	adc	r31, r31
    5b3c:	bb 1f       	adc	r27, r27
    5b3e:	66 1f       	adc	r22, r22
    5b40:	77 1f       	adc	r23, r23
    5b42:	88 1f       	adc	r24, r24
    5b44:	91 50       	subi	r25, 0x01	; 1
    5b46:	50 40       	sbci	r21, 0x00	; 0
    5b48:	a9 f7       	brne	.-22     	; 0x5b34 <__mulsf3_pse+0x64>
    5b4a:	9e 3f       	cpi	r25, 0xFE	; 254
    5b4c:	51 05       	cpc	r21, r1
    5b4e:	70 f0       	brcs	.+28     	; 0x5b6c <__mulsf3_pse+0x9c>
    5b50:	60 cf       	rjmp	.-320    	; 0x5a12 <__fp_inf>
    5b52:	aa cf       	rjmp	.-172    	; 0x5aa8 <__fp_szero>
    5b54:	5f 3f       	cpi	r21, 0xFF	; 255
    5b56:	ec f3       	brlt	.-6      	; 0x5b52 <__mulsf3_pse+0x82>
    5b58:	98 3e       	cpi	r25, 0xE8	; 232
    5b5a:	dc f3       	brlt	.-10     	; 0x5b52 <__mulsf3_pse+0x82>
    5b5c:	86 95       	lsr	r24
    5b5e:	77 95       	ror	r23
    5b60:	67 95       	ror	r22
    5b62:	b7 95       	ror	r27
    5b64:	f7 95       	ror	r31
    5b66:	e7 95       	ror	r30
    5b68:	9f 5f       	subi	r25, 0xFF	; 255
    5b6a:	c1 f7       	brne	.-16     	; 0x5b5c <__mulsf3_pse+0x8c>
    5b6c:	fe 2b       	or	r31, r30
    5b6e:	88 0f       	add	r24, r24
    5b70:	91 1d       	adc	r25, r1
    5b72:	96 95       	lsr	r25
    5b74:	87 95       	ror	r24
    5b76:	97 f9       	bld	r25, 7
    5b78:	08 95       	ret

00005b7a <__udivmodsi4>:
    5b7a:	a1 e2       	ldi	r26, 0x21	; 33
    5b7c:	1a 2e       	mov	r1, r26
    5b7e:	aa 1b       	sub	r26, r26
    5b80:	bb 1b       	sub	r27, r27
    5b82:	fd 01       	movw	r30, r26
    5b84:	0d c0       	rjmp	.+26     	; 0x5ba0 <__udivmodsi4_ep>

00005b86 <__udivmodsi4_loop>:
    5b86:	aa 1f       	adc	r26, r26
    5b88:	bb 1f       	adc	r27, r27
    5b8a:	ee 1f       	adc	r30, r30
    5b8c:	ff 1f       	adc	r31, r31
    5b8e:	a2 17       	cp	r26, r18
    5b90:	b3 07       	cpc	r27, r19
    5b92:	e4 07       	cpc	r30, r20
    5b94:	f5 07       	cpc	r31, r21
    5b96:	20 f0       	brcs	.+8      	; 0x5ba0 <__udivmodsi4_ep>
    5b98:	a2 1b       	sub	r26, r18
    5b9a:	b3 0b       	sbc	r27, r19
    5b9c:	e4 0b       	sbc	r30, r20
    5b9e:	f5 0b       	sbc	r31, r21

00005ba0 <__udivmodsi4_ep>:
    5ba0:	66 1f       	adc	r22, r22
    5ba2:	77 1f       	adc	r23, r23
    5ba4:	88 1f       	adc	r24, r24
    5ba6:	99 1f       	adc	r25, r25
    5ba8:	1a 94       	dec	r1
    5baa:	69 f7       	brne	.-38     	; 0x5b86 <__udivmodsi4_loop>
    5bac:	60 95       	com	r22
    5bae:	70 95       	com	r23
    5bb0:	80 95       	com	r24
    5bb2:	90 95       	com	r25
    5bb4:	9b 01       	movw	r18, r22
    5bb6:	ac 01       	movw	r20, r24
    5bb8:	bd 01       	movw	r22, r26
    5bba:	cf 01       	movw	r24, r30
    5bbc:	08 95       	ret

00005bbe <__tablejump2__>:
    5bbe:	ee 0f       	add	r30, r30
    5bc0:	ff 1f       	adc	r31, r31
    5bc2:	88 1f       	adc	r24, r24
    5bc4:	8b bf       	out	0x3b, r24	; 59
    5bc6:	07 90       	elpm	r0, Z+
    5bc8:	f6 91       	elpm	r31, Z
    5bca:	e0 2d       	mov	r30, r0
    5bcc:	19 94       	eijmp

00005bce <calloc>:
    5bce:	0f 93       	push	r16
    5bd0:	1f 93       	push	r17
    5bd2:	cf 93       	push	r28
    5bd4:	df 93       	push	r29
    5bd6:	86 9f       	mul	r24, r22
    5bd8:	80 01       	movw	r16, r0
    5bda:	87 9f       	mul	r24, r23
    5bdc:	10 0d       	add	r17, r0
    5bde:	96 9f       	mul	r25, r22
    5be0:	10 0d       	add	r17, r0
    5be2:	11 24       	eor	r1, r1
    5be4:	c8 01       	movw	r24, r16
    5be6:	0d d0       	rcall	.+26     	; 0x5c02 <malloc>
    5be8:	ec 01       	movw	r28, r24
    5bea:	00 97       	sbiw	r24, 0x00	; 0
    5bec:	21 f0       	breq	.+8      	; 0x5bf6 <calloc+0x28>
    5bee:	a8 01       	movw	r20, r16
    5bf0:	60 e0       	ldi	r22, 0x00	; 0
    5bf2:	70 e0       	ldi	r23, 0x00	; 0
    5bf4:	34 d1       	rcall	.+616    	; 0x5e5e <memset>
    5bf6:	ce 01       	movw	r24, r28
    5bf8:	df 91       	pop	r29
    5bfa:	cf 91       	pop	r28
    5bfc:	1f 91       	pop	r17
    5bfe:	0f 91       	pop	r16
    5c00:	08 95       	ret

00005c02 <malloc>:
    5c02:	0f 93       	push	r16
    5c04:	1f 93       	push	r17
    5c06:	cf 93       	push	r28
    5c08:	df 93       	push	r29
    5c0a:	82 30       	cpi	r24, 0x02	; 2
    5c0c:	91 05       	cpc	r25, r1
    5c0e:	10 f4       	brcc	.+4      	; 0x5c14 <malloc+0x12>
    5c10:	82 e0       	ldi	r24, 0x02	; 2
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	e0 91 ee 14 	lds	r30, 0x14EE	; 0x8014ee <__flp>
    5c18:	f0 91 ef 14 	lds	r31, 0x14EF	; 0x8014ef <__flp+0x1>
    5c1c:	20 e0       	ldi	r18, 0x00	; 0
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	a0 e0       	ldi	r26, 0x00	; 0
    5c22:	b0 e0       	ldi	r27, 0x00	; 0
    5c24:	30 97       	sbiw	r30, 0x00	; 0
    5c26:	19 f1       	breq	.+70     	; 0x5c6e <malloc+0x6c>
    5c28:	40 81       	ld	r20, Z
    5c2a:	51 81       	ldd	r21, Z+1	; 0x01
    5c2c:	02 81       	ldd	r16, Z+2	; 0x02
    5c2e:	13 81       	ldd	r17, Z+3	; 0x03
    5c30:	48 17       	cp	r20, r24
    5c32:	59 07       	cpc	r21, r25
    5c34:	c8 f0       	brcs	.+50     	; 0x5c68 <malloc+0x66>
    5c36:	84 17       	cp	r24, r20
    5c38:	95 07       	cpc	r25, r21
    5c3a:	69 f4       	brne	.+26     	; 0x5c56 <malloc+0x54>
    5c3c:	10 97       	sbiw	r26, 0x00	; 0
    5c3e:	31 f0       	breq	.+12     	; 0x5c4c <malloc+0x4a>
    5c40:	12 96       	adiw	r26, 0x02	; 2
    5c42:	0c 93       	st	X, r16
    5c44:	12 97       	sbiw	r26, 0x02	; 2
    5c46:	13 96       	adiw	r26, 0x03	; 3
    5c48:	1c 93       	st	X, r17
    5c4a:	27 c0       	rjmp	.+78     	; 0x5c9a <malloc+0x98>
    5c4c:	00 93 ee 14 	sts	0x14EE, r16	; 0x8014ee <__flp>
    5c50:	10 93 ef 14 	sts	0x14EF, r17	; 0x8014ef <__flp+0x1>
    5c54:	22 c0       	rjmp	.+68     	; 0x5c9a <malloc+0x98>
    5c56:	21 15       	cp	r18, r1
    5c58:	31 05       	cpc	r19, r1
    5c5a:	19 f0       	breq	.+6      	; 0x5c62 <malloc+0x60>
    5c5c:	42 17       	cp	r20, r18
    5c5e:	53 07       	cpc	r21, r19
    5c60:	18 f4       	brcc	.+6      	; 0x5c68 <malloc+0x66>
    5c62:	9a 01       	movw	r18, r20
    5c64:	bd 01       	movw	r22, r26
    5c66:	ef 01       	movw	r28, r30
    5c68:	df 01       	movw	r26, r30
    5c6a:	f8 01       	movw	r30, r16
    5c6c:	db cf       	rjmp	.-74     	; 0x5c24 <malloc+0x22>
    5c6e:	21 15       	cp	r18, r1
    5c70:	31 05       	cpc	r19, r1
    5c72:	f9 f0       	breq	.+62     	; 0x5cb2 <malloc+0xb0>
    5c74:	28 1b       	sub	r18, r24
    5c76:	39 0b       	sbc	r19, r25
    5c78:	24 30       	cpi	r18, 0x04	; 4
    5c7a:	31 05       	cpc	r19, r1
    5c7c:	80 f4       	brcc	.+32     	; 0x5c9e <malloc+0x9c>
    5c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5c80:	9b 81       	ldd	r25, Y+3	; 0x03
    5c82:	61 15       	cp	r22, r1
    5c84:	71 05       	cpc	r23, r1
    5c86:	21 f0       	breq	.+8      	; 0x5c90 <malloc+0x8e>
    5c88:	fb 01       	movw	r30, r22
    5c8a:	93 83       	std	Z+3, r25	; 0x03
    5c8c:	82 83       	std	Z+2, r24	; 0x02
    5c8e:	04 c0       	rjmp	.+8      	; 0x5c98 <malloc+0x96>
    5c90:	90 93 ef 14 	sts	0x14EF, r25	; 0x8014ef <__flp+0x1>
    5c94:	80 93 ee 14 	sts	0x14EE, r24	; 0x8014ee <__flp>
    5c98:	fe 01       	movw	r30, r28
    5c9a:	32 96       	adiw	r30, 0x02	; 2
    5c9c:	44 c0       	rjmp	.+136    	; 0x5d26 <malloc+0x124>
    5c9e:	fe 01       	movw	r30, r28
    5ca0:	e2 0f       	add	r30, r18
    5ca2:	f3 1f       	adc	r31, r19
    5ca4:	81 93       	st	Z+, r24
    5ca6:	91 93       	st	Z+, r25
    5ca8:	22 50       	subi	r18, 0x02	; 2
    5caa:	31 09       	sbc	r19, r1
    5cac:	39 83       	std	Y+1, r19	; 0x01
    5cae:	28 83       	st	Y, r18
    5cb0:	3a c0       	rjmp	.+116    	; 0x5d26 <malloc+0x124>
    5cb2:	20 91 ec 14 	lds	r18, 0x14EC	; 0x8014ec <__brkval>
    5cb6:	30 91 ed 14 	lds	r19, 0x14ED	; 0x8014ed <__brkval+0x1>
    5cba:	23 2b       	or	r18, r19
    5cbc:	41 f4       	brne	.+16     	; 0x5cce <malloc+0xcc>
    5cbe:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5cc2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5cc6:	30 93 ed 14 	sts	0x14ED, r19	; 0x8014ed <__brkval+0x1>
    5cca:	20 93 ec 14 	sts	0x14EC, r18	; 0x8014ec <__brkval>
    5cce:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5cd2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5cd6:	21 15       	cp	r18, r1
    5cd8:	31 05       	cpc	r19, r1
    5cda:	41 f4       	brne	.+16     	; 0x5cec <malloc+0xea>
    5cdc:	2d b7       	in	r18, 0x3d	; 61
    5cde:	3e b7       	in	r19, 0x3e	; 62
    5ce0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5ce4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5ce8:	24 1b       	sub	r18, r20
    5cea:	35 0b       	sbc	r19, r21
    5cec:	e0 91 ec 14 	lds	r30, 0x14EC	; 0x8014ec <__brkval>
    5cf0:	f0 91 ed 14 	lds	r31, 0x14ED	; 0x8014ed <__brkval+0x1>
    5cf4:	e2 17       	cp	r30, r18
    5cf6:	f3 07       	cpc	r31, r19
    5cf8:	a0 f4       	brcc	.+40     	; 0x5d22 <malloc+0x120>
    5cfa:	2e 1b       	sub	r18, r30
    5cfc:	3f 0b       	sbc	r19, r31
    5cfe:	28 17       	cp	r18, r24
    5d00:	39 07       	cpc	r19, r25
    5d02:	78 f0       	brcs	.+30     	; 0x5d22 <malloc+0x120>
    5d04:	ac 01       	movw	r20, r24
    5d06:	4e 5f       	subi	r20, 0xFE	; 254
    5d08:	5f 4f       	sbci	r21, 0xFF	; 255
    5d0a:	24 17       	cp	r18, r20
    5d0c:	35 07       	cpc	r19, r21
    5d0e:	48 f0       	brcs	.+18     	; 0x5d22 <malloc+0x120>
    5d10:	4e 0f       	add	r20, r30
    5d12:	5f 1f       	adc	r21, r31
    5d14:	50 93 ed 14 	sts	0x14ED, r21	; 0x8014ed <__brkval+0x1>
    5d18:	40 93 ec 14 	sts	0x14EC, r20	; 0x8014ec <__brkval>
    5d1c:	81 93       	st	Z+, r24
    5d1e:	91 93       	st	Z+, r25
    5d20:	02 c0       	rjmp	.+4      	; 0x5d26 <malloc+0x124>
    5d22:	e0 e0       	ldi	r30, 0x00	; 0
    5d24:	f0 e0       	ldi	r31, 0x00	; 0
    5d26:	cf 01       	movw	r24, r30
    5d28:	df 91       	pop	r29
    5d2a:	cf 91       	pop	r28
    5d2c:	1f 91       	pop	r17
    5d2e:	0f 91       	pop	r16
    5d30:	08 95       	ret

00005d32 <free>:
    5d32:	cf 93       	push	r28
    5d34:	df 93       	push	r29
    5d36:	00 97       	sbiw	r24, 0x00	; 0
    5d38:	09 f4       	brne	.+2      	; 0x5d3c <free+0xa>
    5d3a:	81 c0       	rjmp	.+258    	; 0x5e3e <free+0x10c>
    5d3c:	fc 01       	movw	r30, r24
    5d3e:	32 97       	sbiw	r30, 0x02	; 2
    5d40:	13 82       	std	Z+3, r1	; 0x03
    5d42:	12 82       	std	Z+2, r1	; 0x02
    5d44:	a0 91 ee 14 	lds	r26, 0x14EE	; 0x8014ee <__flp>
    5d48:	b0 91 ef 14 	lds	r27, 0x14EF	; 0x8014ef <__flp+0x1>
    5d4c:	10 97       	sbiw	r26, 0x00	; 0
    5d4e:	81 f4       	brne	.+32     	; 0x5d70 <free+0x3e>
    5d50:	20 81       	ld	r18, Z
    5d52:	31 81       	ldd	r19, Z+1	; 0x01
    5d54:	82 0f       	add	r24, r18
    5d56:	93 1f       	adc	r25, r19
    5d58:	20 91 ec 14 	lds	r18, 0x14EC	; 0x8014ec <__brkval>
    5d5c:	30 91 ed 14 	lds	r19, 0x14ED	; 0x8014ed <__brkval+0x1>
    5d60:	28 17       	cp	r18, r24
    5d62:	39 07       	cpc	r19, r25
    5d64:	51 f5       	brne	.+84     	; 0x5dba <free+0x88>
    5d66:	f0 93 ed 14 	sts	0x14ED, r31	; 0x8014ed <__brkval+0x1>
    5d6a:	e0 93 ec 14 	sts	0x14EC, r30	; 0x8014ec <__brkval>
    5d6e:	67 c0       	rjmp	.+206    	; 0x5e3e <free+0x10c>
    5d70:	ed 01       	movw	r28, r26
    5d72:	20 e0       	ldi	r18, 0x00	; 0
    5d74:	30 e0       	ldi	r19, 0x00	; 0
    5d76:	ce 17       	cp	r28, r30
    5d78:	df 07       	cpc	r29, r31
    5d7a:	40 f4       	brcc	.+16     	; 0x5d8c <free+0x5a>
    5d7c:	4a 81       	ldd	r20, Y+2	; 0x02
    5d7e:	5b 81       	ldd	r21, Y+3	; 0x03
    5d80:	9e 01       	movw	r18, r28
    5d82:	41 15       	cp	r20, r1
    5d84:	51 05       	cpc	r21, r1
    5d86:	f1 f0       	breq	.+60     	; 0x5dc4 <free+0x92>
    5d88:	ea 01       	movw	r28, r20
    5d8a:	f5 cf       	rjmp	.-22     	; 0x5d76 <free+0x44>
    5d8c:	d3 83       	std	Z+3, r29	; 0x03
    5d8e:	c2 83       	std	Z+2, r28	; 0x02
    5d90:	40 81       	ld	r20, Z
    5d92:	51 81       	ldd	r21, Z+1	; 0x01
    5d94:	84 0f       	add	r24, r20
    5d96:	95 1f       	adc	r25, r21
    5d98:	c8 17       	cp	r28, r24
    5d9a:	d9 07       	cpc	r29, r25
    5d9c:	59 f4       	brne	.+22     	; 0x5db4 <free+0x82>
    5d9e:	88 81       	ld	r24, Y
    5da0:	99 81       	ldd	r25, Y+1	; 0x01
    5da2:	84 0f       	add	r24, r20
    5da4:	95 1f       	adc	r25, r21
    5da6:	02 96       	adiw	r24, 0x02	; 2
    5da8:	91 83       	std	Z+1, r25	; 0x01
    5daa:	80 83       	st	Z, r24
    5dac:	8a 81       	ldd	r24, Y+2	; 0x02
    5dae:	9b 81       	ldd	r25, Y+3	; 0x03
    5db0:	93 83       	std	Z+3, r25	; 0x03
    5db2:	82 83       	std	Z+2, r24	; 0x02
    5db4:	21 15       	cp	r18, r1
    5db6:	31 05       	cpc	r19, r1
    5db8:	29 f4       	brne	.+10     	; 0x5dc4 <free+0x92>
    5dba:	f0 93 ef 14 	sts	0x14EF, r31	; 0x8014ef <__flp+0x1>
    5dbe:	e0 93 ee 14 	sts	0x14EE, r30	; 0x8014ee <__flp>
    5dc2:	3d c0       	rjmp	.+122    	; 0x5e3e <free+0x10c>
    5dc4:	e9 01       	movw	r28, r18
    5dc6:	fb 83       	std	Y+3, r31	; 0x03
    5dc8:	ea 83       	std	Y+2, r30	; 0x02
    5dca:	49 91       	ld	r20, Y+
    5dcc:	59 91       	ld	r21, Y+
    5dce:	c4 0f       	add	r28, r20
    5dd0:	d5 1f       	adc	r29, r21
    5dd2:	ec 17       	cp	r30, r28
    5dd4:	fd 07       	cpc	r31, r29
    5dd6:	61 f4       	brne	.+24     	; 0x5df0 <free+0xbe>
    5dd8:	80 81       	ld	r24, Z
    5dda:	91 81       	ldd	r25, Z+1	; 0x01
    5ddc:	84 0f       	add	r24, r20
    5dde:	95 1f       	adc	r25, r21
    5de0:	02 96       	adiw	r24, 0x02	; 2
    5de2:	e9 01       	movw	r28, r18
    5de4:	99 83       	std	Y+1, r25	; 0x01
    5de6:	88 83       	st	Y, r24
    5de8:	82 81       	ldd	r24, Z+2	; 0x02
    5dea:	93 81       	ldd	r25, Z+3	; 0x03
    5dec:	9b 83       	std	Y+3, r25	; 0x03
    5dee:	8a 83       	std	Y+2, r24	; 0x02
    5df0:	e0 e0       	ldi	r30, 0x00	; 0
    5df2:	f0 e0       	ldi	r31, 0x00	; 0
    5df4:	12 96       	adiw	r26, 0x02	; 2
    5df6:	8d 91       	ld	r24, X+
    5df8:	9c 91       	ld	r25, X
    5dfa:	13 97       	sbiw	r26, 0x03	; 3
    5dfc:	00 97       	sbiw	r24, 0x00	; 0
    5dfe:	19 f0       	breq	.+6      	; 0x5e06 <free+0xd4>
    5e00:	fd 01       	movw	r30, r26
    5e02:	dc 01       	movw	r26, r24
    5e04:	f7 cf       	rjmp	.-18     	; 0x5df4 <free+0xc2>
    5e06:	8d 91       	ld	r24, X+
    5e08:	9c 91       	ld	r25, X
    5e0a:	11 97       	sbiw	r26, 0x01	; 1
    5e0c:	9d 01       	movw	r18, r26
    5e0e:	2e 5f       	subi	r18, 0xFE	; 254
    5e10:	3f 4f       	sbci	r19, 0xFF	; 255
    5e12:	82 0f       	add	r24, r18
    5e14:	93 1f       	adc	r25, r19
    5e16:	20 91 ec 14 	lds	r18, 0x14EC	; 0x8014ec <__brkval>
    5e1a:	30 91 ed 14 	lds	r19, 0x14ED	; 0x8014ed <__brkval+0x1>
    5e1e:	28 17       	cp	r18, r24
    5e20:	39 07       	cpc	r19, r25
    5e22:	69 f4       	brne	.+26     	; 0x5e3e <free+0x10c>
    5e24:	30 97       	sbiw	r30, 0x00	; 0
    5e26:	29 f4       	brne	.+10     	; 0x5e32 <free+0x100>
    5e28:	10 92 ef 14 	sts	0x14EF, r1	; 0x8014ef <__flp+0x1>
    5e2c:	10 92 ee 14 	sts	0x14EE, r1	; 0x8014ee <__flp>
    5e30:	02 c0       	rjmp	.+4      	; 0x5e36 <free+0x104>
    5e32:	13 82       	std	Z+3, r1	; 0x03
    5e34:	12 82       	std	Z+2, r1	; 0x02
    5e36:	b0 93 ed 14 	sts	0x14ED, r27	; 0x8014ed <__brkval+0x1>
    5e3a:	a0 93 ec 14 	sts	0x14EC, r26	; 0x8014ec <__brkval>
    5e3e:	df 91       	pop	r29
    5e40:	cf 91       	pop	r28
    5e42:	08 95       	ret

00005e44 <abort>:
    5e44:	81 e0       	ldi	r24, 0x01	; 1
    5e46:	90 e0       	ldi	r25, 0x00	; 0
    5e48:	f8 94       	cli
    5e4a:	7d c3       	rjmp	.+1786   	; 0x6546 <_exit>

00005e4c <memcpy>:
    5e4c:	fb 01       	movw	r30, r22
    5e4e:	dc 01       	movw	r26, r24
    5e50:	02 c0       	rjmp	.+4      	; 0x5e56 <memcpy+0xa>
    5e52:	01 90       	ld	r0, Z+
    5e54:	0d 92       	st	X+, r0
    5e56:	41 50       	subi	r20, 0x01	; 1
    5e58:	50 40       	sbci	r21, 0x00	; 0
    5e5a:	d8 f7       	brcc	.-10     	; 0x5e52 <memcpy+0x6>
    5e5c:	08 95       	ret

00005e5e <memset>:
    5e5e:	dc 01       	movw	r26, r24
    5e60:	01 c0       	rjmp	.+2      	; 0x5e64 <memset+0x6>
    5e62:	6d 93       	st	X+, r22
    5e64:	41 50       	subi	r20, 0x01	; 1
    5e66:	50 40       	sbci	r21, 0x00	; 0
    5e68:	e0 f7       	brcc	.-8      	; 0x5e62 <memset+0x4>
    5e6a:	08 95       	ret

00005e6c <strcasestr>:
    5e6c:	fb 01       	movw	r30, r22
    5e6e:	51 91       	ld	r21, Z+
    5e70:	55 23       	and	r21, r21
    5e72:	b1 f0       	breq	.+44     	; 0x5ea0 <strcasestr+0x34>
    5e74:	bf 01       	movw	r22, r30
    5e76:	dc 01       	movw	r26, r24
    5e78:	05 2e       	mov	r0, r21
    5e7a:	4d 91       	ld	r20, X+
    5e7c:	44 23       	and	r20, r20
    5e7e:	69 f0       	breq	.+26     	; 0x5e9a <strcasestr+0x2e>
    5e80:	10 d0       	rcall	.+32     	; 0x5ea2 <strcasestr+0x36>
    5e82:	d9 f7       	brne	.-10     	; 0x5e7a <strcasestr+0xe>
    5e84:	cd 01       	movw	r24, r26
    5e86:	01 90       	ld	r0, Z+
    5e88:	00 20       	and	r0, r0
    5e8a:	49 f0       	breq	.+18     	; 0x5e9e <strcasestr+0x32>
    5e8c:	4d 91       	ld	r20, X+
    5e8e:	41 11       	cpse	r20, r1
    5e90:	08 d0       	rcall	.+16     	; 0x5ea2 <strcasestr+0x36>
    5e92:	c9 f3       	breq	.-14     	; 0x5e86 <strcasestr+0x1a>
    5e94:	fb 01       	movw	r30, r22
    5e96:	41 11       	cpse	r20, r1
    5e98:	ee cf       	rjmp	.-36     	; 0x5e76 <strcasestr+0xa>
    5e9a:	81 e0       	ldi	r24, 0x01	; 1
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	01 97       	sbiw	r24, 0x01	; 1
    5ea0:	08 95       	ret
    5ea2:	40 25       	eor	r20, r0
    5ea4:	39 f0       	breq	.+14     	; 0x5eb4 <strcasestr+0x48>
    5ea6:	40 32       	cpi	r20, 0x20	; 32
    5ea8:	29 f4       	brne	.+10     	; 0x5eb4 <strcasestr+0x48>
    5eaa:	40 29       	or	r20, r0
    5eac:	4b 57       	subi	r20, 0x7B	; 123
    5eae:	46 5e       	subi	r20, 0xE6	; 230
    5eb0:	08 f0       	brcs	.+2      	; 0x5eb4 <strcasestr+0x48>
    5eb2:	18 94       	sez
    5eb4:	08 95       	ret

00005eb6 <strcat>:
    5eb6:	fb 01       	movw	r30, r22
    5eb8:	dc 01       	movw	r26, r24
    5eba:	0d 90       	ld	r0, X+
    5ebc:	00 20       	and	r0, r0
    5ebe:	e9 f7       	brne	.-6      	; 0x5eba <strcat+0x4>
    5ec0:	11 97       	sbiw	r26, 0x01	; 1
    5ec2:	01 90       	ld	r0, Z+
    5ec4:	0d 92       	st	X+, r0
    5ec6:	00 20       	and	r0, r0
    5ec8:	e1 f7       	brne	.-8      	; 0x5ec2 <strcat+0xc>
    5eca:	08 95       	ret

00005ecc <strcpy>:
    5ecc:	fb 01       	movw	r30, r22
    5ece:	dc 01       	movw	r26, r24
    5ed0:	01 90       	ld	r0, Z+
    5ed2:	0d 92       	st	X+, r0
    5ed4:	00 20       	and	r0, r0
    5ed6:	e1 f7       	brne	.-8      	; 0x5ed0 <strcpy+0x4>
    5ed8:	08 95       	ret

00005eda <strncasecmp>:
    5eda:	fb 01       	movw	r30, r22
    5edc:	dc 01       	movw	r26, r24
    5ede:	41 50       	subi	r20, 0x01	; 1
    5ee0:	50 40       	sbci	r21, 0x00	; 0
    5ee2:	88 f0       	brcs	.+34     	; 0x5f06 <strncasecmp+0x2c>
    5ee4:	8d 91       	ld	r24, X+
    5ee6:	81 34       	cpi	r24, 0x41	; 65
    5ee8:	1c f0       	brlt	.+6      	; 0x5ef0 <strncasecmp+0x16>
    5eea:	8b 35       	cpi	r24, 0x5B	; 91
    5eec:	0c f4       	brge	.+2      	; 0x5ef0 <strncasecmp+0x16>
    5eee:	80 5e       	subi	r24, 0xE0	; 224
    5ef0:	61 91       	ld	r22, Z+
    5ef2:	61 34       	cpi	r22, 0x41	; 65
    5ef4:	1c f0       	brlt	.+6      	; 0x5efc <strncasecmp+0x22>
    5ef6:	6b 35       	cpi	r22, 0x5B	; 91
    5ef8:	0c f4       	brge	.+2      	; 0x5efc <strncasecmp+0x22>
    5efa:	60 5e       	subi	r22, 0xE0	; 224
    5efc:	86 1b       	sub	r24, r22
    5efe:	61 11       	cpse	r22, r1
    5f00:	71 f3       	breq	.-36     	; 0x5ede <strncasecmp+0x4>
    5f02:	99 0b       	sbc	r25, r25
    5f04:	08 95       	ret
    5f06:	88 1b       	sub	r24, r24
    5f08:	fc cf       	rjmp	.-8      	; 0x5f02 <strncasecmp+0x28>

00005f0a <printf>:
    5f0a:	cf 93       	push	r28
    5f0c:	df 93       	push	r29
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
    5f12:	ae 01       	movw	r20, r28
    5f14:	4a 5f       	subi	r20, 0xFA	; 250
    5f16:	5f 4f       	sbci	r21, 0xFF	; 255
    5f18:	fa 01       	movw	r30, r20
    5f1a:	61 91       	ld	r22, Z+
    5f1c:	71 91       	ld	r23, Z+
    5f1e:	af 01       	movw	r20, r30
    5f20:	80 91 f2 14 	lds	r24, 0x14F2	; 0x8014f2 <__iob+0x2>
    5f24:	90 91 f3 14 	lds	r25, 0x14F3	; 0x8014f3 <__iob+0x3>
    5f28:	61 d0       	rcall	.+194    	; 0x5fec <vfprintf>
    5f2a:	df 91       	pop	r29
    5f2c:	cf 91       	pop	r28
    5f2e:	08 95       	ret

00005f30 <puts>:
    5f30:	0f 93       	push	r16
    5f32:	1f 93       	push	r17
    5f34:	cf 93       	push	r28
    5f36:	df 93       	push	r29
    5f38:	e0 91 f2 14 	lds	r30, 0x14F2	; 0x8014f2 <__iob+0x2>
    5f3c:	f0 91 f3 14 	lds	r31, 0x14F3	; 0x8014f3 <__iob+0x3>
    5f40:	23 81       	ldd	r18, Z+3	; 0x03
    5f42:	21 ff       	sbrs	r18, 1
    5f44:	1b c0       	rjmp	.+54     	; 0x5f7c <puts+0x4c>
    5f46:	8c 01       	movw	r16, r24
    5f48:	d0 e0       	ldi	r29, 0x00	; 0
    5f4a:	c0 e0       	ldi	r28, 0x00	; 0
    5f4c:	f8 01       	movw	r30, r16
    5f4e:	81 91       	ld	r24, Z+
    5f50:	8f 01       	movw	r16, r30
    5f52:	60 91 f2 14 	lds	r22, 0x14F2	; 0x8014f2 <__iob+0x2>
    5f56:	70 91 f3 14 	lds	r23, 0x14F3	; 0x8014f3 <__iob+0x3>
    5f5a:	db 01       	movw	r26, r22
    5f5c:	18 96       	adiw	r26, 0x08	; 8
    5f5e:	ed 91       	ld	r30, X+
    5f60:	fc 91       	ld	r31, X
    5f62:	19 97       	sbiw	r26, 0x09	; 9
    5f64:	88 23       	and	r24, r24
    5f66:	31 f0       	breq	.+12     	; 0x5f74 <puts+0x44>
    5f68:	19 95       	eicall
    5f6a:	89 2b       	or	r24, r25
    5f6c:	79 f3       	breq	.-34     	; 0x5f4c <puts+0x1c>
    5f6e:	df ef       	ldi	r29, 0xFF	; 255
    5f70:	cf ef       	ldi	r28, 0xFF	; 255
    5f72:	ec cf       	rjmp	.-40     	; 0x5f4c <puts+0x1c>
    5f74:	8a e0       	ldi	r24, 0x0A	; 10
    5f76:	19 95       	eicall
    5f78:	89 2b       	or	r24, r25
    5f7a:	19 f0       	breq	.+6      	; 0x5f82 <puts+0x52>
    5f7c:	8f ef       	ldi	r24, 0xFF	; 255
    5f7e:	9f ef       	ldi	r25, 0xFF	; 255
    5f80:	02 c0       	rjmp	.+4      	; 0x5f86 <puts+0x56>
    5f82:	8d 2f       	mov	r24, r29
    5f84:	9c 2f       	mov	r25, r28
    5f86:	df 91       	pop	r29
    5f88:	cf 91       	pop	r28
    5f8a:	1f 91       	pop	r17
    5f8c:	0f 91       	pop	r16
    5f8e:	08 95       	ret

00005f90 <sprintf>:
    5f90:	0f 93       	push	r16
    5f92:	1f 93       	push	r17
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
    5f98:	cd b7       	in	r28, 0x3d	; 61
    5f9a:	de b7       	in	r29, 0x3e	; 62
    5f9c:	2e 97       	sbiw	r28, 0x0e	; 14
    5f9e:	0f b6       	in	r0, 0x3f	; 63
    5fa0:	f8 94       	cli
    5fa2:	de bf       	out	0x3e, r29	; 62
    5fa4:	0f be       	out	0x3f, r0	; 63
    5fa6:	cd bf       	out	0x3d, r28	; 61
    5fa8:	0e 89       	ldd	r16, Y+22	; 0x16
    5faa:	1f 89       	ldd	r17, Y+23	; 0x17
    5fac:	86 e0       	ldi	r24, 0x06	; 6
    5fae:	8c 83       	std	Y+4, r24	; 0x04
    5fb0:	1a 83       	std	Y+2, r17	; 0x02
    5fb2:	09 83       	std	Y+1, r16	; 0x01
    5fb4:	8f ef       	ldi	r24, 0xFF	; 255
    5fb6:	9f e7       	ldi	r25, 0x7F	; 127
    5fb8:	9e 83       	std	Y+6, r25	; 0x06
    5fba:	8d 83       	std	Y+5, r24	; 0x05
    5fbc:	ae 01       	movw	r20, r28
    5fbe:	46 5e       	subi	r20, 0xE6	; 230
    5fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fc2:	68 8d       	ldd	r22, Y+24	; 0x18
    5fc4:	79 8d       	ldd	r23, Y+25	; 0x19
    5fc6:	ce 01       	movw	r24, r28
    5fc8:	01 96       	adiw	r24, 0x01	; 1
    5fca:	10 d0       	rcall	.+32     	; 0x5fec <vfprintf>
    5fcc:	ef 81       	ldd	r30, Y+7	; 0x07
    5fce:	f8 85       	ldd	r31, Y+8	; 0x08
    5fd0:	e0 0f       	add	r30, r16
    5fd2:	f1 1f       	adc	r31, r17
    5fd4:	10 82       	st	Z, r1
    5fd6:	2e 96       	adiw	r28, 0x0e	; 14
    5fd8:	0f b6       	in	r0, 0x3f	; 63
    5fda:	f8 94       	cli
    5fdc:	de bf       	out	0x3e, r29	; 62
    5fde:	0f be       	out	0x3f, r0	; 63
    5fe0:	cd bf       	out	0x3d, r28	; 61
    5fe2:	df 91       	pop	r29
    5fe4:	cf 91       	pop	r28
    5fe6:	1f 91       	pop	r17
    5fe8:	0f 91       	pop	r16
    5fea:	08 95       	ret

00005fec <vfprintf>:
    5fec:	2f 92       	push	r2
    5fee:	3f 92       	push	r3
    5ff0:	4f 92       	push	r4
    5ff2:	5f 92       	push	r5
    5ff4:	6f 92       	push	r6
    5ff6:	7f 92       	push	r7
    5ff8:	8f 92       	push	r8
    5ffa:	9f 92       	push	r9
    5ffc:	af 92       	push	r10
    5ffe:	bf 92       	push	r11
    6000:	cf 92       	push	r12
    6002:	df 92       	push	r13
    6004:	ef 92       	push	r14
    6006:	ff 92       	push	r15
    6008:	0f 93       	push	r16
    600a:	1f 93       	push	r17
    600c:	cf 93       	push	r28
    600e:	df 93       	push	r29
    6010:	cd b7       	in	r28, 0x3d	; 61
    6012:	de b7       	in	r29, 0x3e	; 62
    6014:	2b 97       	sbiw	r28, 0x0b	; 11
    6016:	0f b6       	in	r0, 0x3f	; 63
    6018:	f8 94       	cli
    601a:	de bf       	out	0x3e, r29	; 62
    601c:	0f be       	out	0x3f, r0	; 63
    601e:	cd bf       	out	0x3d, r28	; 61
    6020:	6c 01       	movw	r12, r24
    6022:	7b 01       	movw	r14, r22
    6024:	8a 01       	movw	r16, r20
    6026:	fc 01       	movw	r30, r24
    6028:	17 82       	std	Z+7, r1	; 0x07
    602a:	16 82       	std	Z+6, r1	; 0x06
    602c:	83 81       	ldd	r24, Z+3	; 0x03
    602e:	81 ff       	sbrs	r24, 1
    6030:	bf c1       	rjmp	.+894    	; 0x63b0 <vfprintf+0x3c4>
    6032:	ce 01       	movw	r24, r28
    6034:	01 96       	adiw	r24, 0x01	; 1
    6036:	3c 01       	movw	r6, r24
    6038:	f6 01       	movw	r30, r12
    603a:	93 81       	ldd	r25, Z+3	; 0x03
    603c:	f7 01       	movw	r30, r14
    603e:	93 fd       	sbrc	r25, 3
    6040:	85 91       	lpm	r24, Z+
    6042:	93 ff       	sbrs	r25, 3
    6044:	81 91       	ld	r24, Z+
    6046:	7f 01       	movw	r14, r30
    6048:	88 23       	and	r24, r24
    604a:	09 f4       	brne	.+2      	; 0x604e <vfprintf+0x62>
    604c:	ad c1       	rjmp	.+858    	; 0x63a8 <vfprintf+0x3bc>
    604e:	85 32       	cpi	r24, 0x25	; 37
    6050:	39 f4       	brne	.+14     	; 0x6060 <vfprintf+0x74>
    6052:	93 fd       	sbrc	r25, 3
    6054:	85 91       	lpm	r24, Z+
    6056:	93 ff       	sbrs	r25, 3
    6058:	81 91       	ld	r24, Z+
    605a:	7f 01       	movw	r14, r30
    605c:	85 32       	cpi	r24, 0x25	; 37
    605e:	21 f4       	brne	.+8      	; 0x6068 <vfprintf+0x7c>
    6060:	b6 01       	movw	r22, r12
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	d6 d1       	rcall	.+940    	; 0x6412 <fputc>
    6066:	e8 cf       	rjmp	.-48     	; 0x6038 <vfprintf+0x4c>
    6068:	91 2c       	mov	r9, r1
    606a:	21 2c       	mov	r2, r1
    606c:	31 2c       	mov	r3, r1
    606e:	ff e1       	ldi	r31, 0x1F	; 31
    6070:	f3 15       	cp	r31, r3
    6072:	d8 f0       	brcs	.+54     	; 0x60aa <vfprintf+0xbe>
    6074:	8b 32       	cpi	r24, 0x2B	; 43
    6076:	79 f0       	breq	.+30     	; 0x6096 <vfprintf+0xaa>
    6078:	38 f4       	brcc	.+14     	; 0x6088 <vfprintf+0x9c>
    607a:	80 32       	cpi	r24, 0x20	; 32
    607c:	79 f0       	breq	.+30     	; 0x609c <vfprintf+0xb0>
    607e:	83 32       	cpi	r24, 0x23	; 35
    6080:	a1 f4       	brne	.+40     	; 0x60aa <vfprintf+0xbe>
    6082:	23 2d       	mov	r18, r3
    6084:	20 61       	ori	r18, 0x10	; 16
    6086:	1d c0       	rjmp	.+58     	; 0x60c2 <vfprintf+0xd6>
    6088:	8d 32       	cpi	r24, 0x2D	; 45
    608a:	61 f0       	breq	.+24     	; 0x60a4 <vfprintf+0xb8>
    608c:	80 33       	cpi	r24, 0x30	; 48
    608e:	69 f4       	brne	.+26     	; 0x60aa <vfprintf+0xbe>
    6090:	23 2d       	mov	r18, r3
    6092:	21 60       	ori	r18, 0x01	; 1
    6094:	16 c0       	rjmp	.+44     	; 0x60c2 <vfprintf+0xd6>
    6096:	83 2d       	mov	r24, r3
    6098:	82 60       	ori	r24, 0x02	; 2
    609a:	38 2e       	mov	r3, r24
    609c:	e3 2d       	mov	r30, r3
    609e:	e4 60       	ori	r30, 0x04	; 4
    60a0:	3e 2e       	mov	r3, r30
    60a2:	2a c0       	rjmp	.+84     	; 0x60f8 <vfprintf+0x10c>
    60a4:	f3 2d       	mov	r31, r3
    60a6:	f8 60       	ori	r31, 0x08	; 8
    60a8:	1d c0       	rjmp	.+58     	; 0x60e4 <vfprintf+0xf8>
    60aa:	37 fc       	sbrc	r3, 7
    60ac:	2d c0       	rjmp	.+90     	; 0x6108 <vfprintf+0x11c>
    60ae:	20 ed       	ldi	r18, 0xD0	; 208
    60b0:	28 0f       	add	r18, r24
    60b2:	2a 30       	cpi	r18, 0x0A	; 10
    60b4:	40 f0       	brcs	.+16     	; 0x60c6 <vfprintf+0xda>
    60b6:	8e 32       	cpi	r24, 0x2E	; 46
    60b8:	b9 f4       	brne	.+46     	; 0x60e8 <vfprintf+0xfc>
    60ba:	36 fc       	sbrc	r3, 6
    60bc:	75 c1       	rjmp	.+746    	; 0x63a8 <vfprintf+0x3bc>
    60be:	23 2d       	mov	r18, r3
    60c0:	20 64       	ori	r18, 0x40	; 64
    60c2:	32 2e       	mov	r3, r18
    60c4:	19 c0       	rjmp	.+50     	; 0x60f8 <vfprintf+0x10c>
    60c6:	36 fe       	sbrs	r3, 6
    60c8:	06 c0       	rjmp	.+12     	; 0x60d6 <vfprintf+0xea>
    60ca:	8a e0       	ldi	r24, 0x0A	; 10
    60cc:	98 9e       	mul	r9, r24
    60ce:	20 0d       	add	r18, r0
    60d0:	11 24       	eor	r1, r1
    60d2:	92 2e       	mov	r9, r18
    60d4:	11 c0       	rjmp	.+34     	; 0x60f8 <vfprintf+0x10c>
    60d6:	ea e0       	ldi	r30, 0x0A	; 10
    60d8:	2e 9e       	mul	r2, r30
    60da:	20 0d       	add	r18, r0
    60dc:	11 24       	eor	r1, r1
    60de:	22 2e       	mov	r2, r18
    60e0:	f3 2d       	mov	r31, r3
    60e2:	f0 62       	ori	r31, 0x20	; 32
    60e4:	3f 2e       	mov	r3, r31
    60e6:	08 c0       	rjmp	.+16     	; 0x60f8 <vfprintf+0x10c>
    60e8:	8c 36       	cpi	r24, 0x6C	; 108
    60ea:	21 f4       	brne	.+8      	; 0x60f4 <vfprintf+0x108>
    60ec:	83 2d       	mov	r24, r3
    60ee:	80 68       	ori	r24, 0x80	; 128
    60f0:	38 2e       	mov	r3, r24
    60f2:	02 c0       	rjmp	.+4      	; 0x60f8 <vfprintf+0x10c>
    60f4:	88 36       	cpi	r24, 0x68	; 104
    60f6:	41 f4       	brne	.+16     	; 0x6108 <vfprintf+0x11c>
    60f8:	f7 01       	movw	r30, r14
    60fa:	93 fd       	sbrc	r25, 3
    60fc:	85 91       	lpm	r24, Z+
    60fe:	93 ff       	sbrs	r25, 3
    6100:	81 91       	ld	r24, Z+
    6102:	7f 01       	movw	r14, r30
    6104:	81 11       	cpse	r24, r1
    6106:	b3 cf       	rjmp	.-154    	; 0x606e <vfprintf+0x82>
    6108:	98 2f       	mov	r25, r24
    610a:	9f 7d       	andi	r25, 0xDF	; 223
    610c:	95 54       	subi	r25, 0x45	; 69
    610e:	93 30       	cpi	r25, 0x03	; 3
    6110:	28 f4       	brcc	.+10     	; 0x611c <vfprintf+0x130>
    6112:	0c 5f       	subi	r16, 0xFC	; 252
    6114:	1f 4f       	sbci	r17, 0xFF	; 255
    6116:	9f e3       	ldi	r25, 0x3F	; 63
    6118:	99 83       	std	Y+1, r25	; 0x01
    611a:	0d c0       	rjmp	.+26     	; 0x6136 <vfprintf+0x14a>
    611c:	83 36       	cpi	r24, 0x63	; 99
    611e:	31 f0       	breq	.+12     	; 0x612c <vfprintf+0x140>
    6120:	83 37       	cpi	r24, 0x73	; 115
    6122:	71 f0       	breq	.+28     	; 0x6140 <vfprintf+0x154>
    6124:	83 35       	cpi	r24, 0x53	; 83
    6126:	09 f0       	breq	.+2      	; 0x612a <vfprintf+0x13e>
    6128:	55 c0       	rjmp	.+170    	; 0x61d4 <vfprintf+0x1e8>
    612a:	20 c0       	rjmp	.+64     	; 0x616c <vfprintf+0x180>
    612c:	f8 01       	movw	r30, r16
    612e:	80 81       	ld	r24, Z
    6130:	89 83       	std	Y+1, r24	; 0x01
    6132:	0e 5f       	subi	r16, 0xFE	; 254
    6134:	1f 4f       	sbci	r17, 0xFF	; 255
    6136:	88 24       	eor	r8, r8
    6138:	83 94       	inc	r8
    613a:	91 2c       	mov	r9, r1
    613c:	53 01       	movw	r10, r6
    613e:	12 c0       	rjmp	.+36     	; 0x6164 <vfprintf+0x178>
    6140:	28 01       	movw	r4, r16
    6142:	f2 e0       	ldi	r31, 0x02	; 2
    6144:	4f 0e       	add	r4, r31
    6146:	51 1c       	adc	r5, r1
    6148:	f8 01       	movw	r30, r16
    614a:	a0 80       	ld	r10, Z
    614c:	b1 80       	ldd	r11, Z+1	; 0x01
    614e:	36 fe       	sbrs	r3, 6
    6150:	03 c0       	rjmp	.+6      	; 0x6158 <vfprintf+0x16c>
    6152:	69 2d       	mov	r22, r9
    6154:	70 e0       	ldi	r23, 0x00	; 0
    6156:	02 c0       	rjmp	.+4      	; 0x615c <vfprintf+0x170>
    6158:	6f ef       	ldi	r22, 0xFF	; 255
    615a:	7f ef       	ldi	r23, 0xFF	; 255
    615c:	c5 01       	movw	r24, r10
    615e:	4e d1       	rcall	.+668    	; 0x63fc <strnlen>
    6160:	4c 01       	movw	r8, r24
    6162:	82 01       	movw	r16, r4
    6164:	f3 2d       	mov	r31, r3
    6166:	ff 77       	andi	r31, 0x7F	; 127
    6168:	3f 2e       	mov	r3, r31
    616a:	15 c0       	rjmp	.+42     	; 0x6196 <vfprintf+0x1aa>
    616c:	28 01       	movw	r4, r16
    616e:	22 e0       	ldi	r18, 0x02	; 2
    6170:	42 0e       	add	r4, r18
    6172:	51 1c       	adc	r5, r1
    6174:	f8 01       	movw	r30, r16
    6176:	a0 80       	ld	r10, Z
    6178:	b1 80       	ldd	r11, Z+1	; 0x01
    617a:	36 fe       	sbrs	r3, 6
    617c:	03 c0       	rjmp	.+6      	; 0x6184 <vfprintf+0x198>
    617e:	69 2d       	mov	r22, r9
    6180:	70 e0       	ldi	r23, 0x00	; 0
    6182:	02 c0       	rjmp	.+4      	; 0x6188 <vfprintf+0x19c>
    6184:	6f ef       	ldi	r22, 0xFF	; 255
    6186:	7f ef       	ldi	r23, 0xFF	; 255
    6188:	c5 01       	movw	r24, r10
    618a:	2d d1       	rcall	.+602    	; 0x63e6 <strnlen_P>
    618c:	4c 01       	movw	r8, r24
    618e:	f3 2d       	mov	r31, r3
    6190:	f0 68       	ori	r31, 0x80	; 128
    6192:	3f 2e       	mov	r3, r31
    6194:	82 01       	movw	r16, r4
    6196:	33 fc       	sbrc	r3, 3
    6198:	19 c0       	rjmp	.+50     	; 0x61cc <vfprintf+0x1e0>
    619a:	82 2d       	mov	r24, r2
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	88 16       	cp	r8, r24
    61a0:	99 06       	cpc	r9, r25
    61a2:	a0 f4       	brcc	.+40     	; 0x61cc <vfprintf+0x1e0>
    61a4:	b6 01       	movw	r22, r12
    61a6:	80 e2       	ldi	r24, 0x20	; 32
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	33 d1       	rcall	.+614    	; 0x6412 <fputc>
    61ac:	2a 94       	dec	r2
    61ae:	f5 cf       	rjmp	.-22     	; 0x619a <vfprintf+0x1ae>
    61b0:	f5 01       	movw	r30, r10
    61b2:	37 fc       	sbrc	r3, 7
    61b4:	85 91       	lpm	r24, Z+
    61b6:	37 fe       	sbrs	r3, 7
    61b8:	81 91       	ld	r24, Z+
    61ba:	5f 01       	movw	r10, r30
    61bc:	b6 01       	movw	r22, r12
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	28 d1       	rcall	.+592    	; 0x6412 <fputc>
    61c2:	21 10       	cpse	r2, r1
    61c4:	2a 94       	dec	r2
    61c6:	21 e0       	ldi	r18, 0x01	; 1
    61c8:	82 1a       	sub	r8, r18
    61ca:	91 08       	sbc	r9, r1
    61cc:	81 14       	cp	r8, r1
    61ce:	91 04       	cpc	r9, r1
    61d0:	79 f7       	brne	.-34     	; 0x61b0 <vfprintf+0x1c4>
    61d2:	e1 c0       	rjmp	.+450    	; 0x6396 <vfprintf+0x3aa>
    61d4:	84 36       	cpi	r24, 0x64	; 100
    61d6:	11 f0       	breq	.+4      	; 0x61dc <vfprintf+0x1f0>
    61d8:	89 36       	cpi	r24, 0x69	; 105
    61da:	39 f5       	brne	.+78     	; 0x622a <vfprintf+0x23e>
    61dc:	f8 01       	movw	r30, r16
    61de:	37 fe       	sbrs	r3, 7
    61e0:	07 c0       	rjmp	.+14     	; 0x61f0 <vfprintf+0x204>
    61e2:	60 81       	ld	r22, Z
    61e4:	71 81       	ldd	r23, Z+1	; 0x01
    61e6:	82 81       	ldd	r24, Z+2	; 0x02
    61e8:	93 81       	ldd	r25, Z+3	; 0x03
    61ea:	0c 5f       	subi	r16, 0xFC	; 252
    61ec:	1f 4f       	sbci	r17, 0xFF	; 255
    61ee:	08 c0       	rjmp	.+16     	; 0x6200 <vfprintf+0x214>
    61f0:	60 81       	ld	r22, Z
    61f2:	71 81       	ldd	r23, Z+1	; 0x01
    61f4:	07 2e       	mov	r0, r23
    61f6:	00 0c       	add	r0, r0
    61f8:	88 0b       	sbc	r24, r24
    61fa:	99 0b       	sbc	r25, r25
    61fc:	0e 5f       	subi	r16, 0xFE	; 254
    61fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6200:	f3 2d       	mov	r31, r3
    6202:	ff 76       	andi	r31, 0x6F	; 111
    6204:	3f 2e       	mov	r3, r31
    6206:	97 ff       	sbrs	r25, 7
    6208:	09 c0       	rjmp	.+18     	; 0x621c <vfprintf+0x230>
    620a:	90 95       	com	r25
    620c:	80 95       	com	r24
    620e:	70 95       	com	r23
    6210:	61 95       	neg	r22
    6212:	7f 4f       	sbci	r23, 0xFF	; 255
    6214:	8f 4f       	sbci	r24, 0xFF	; 255
    6216:	9f 4f       	sbci	r25, 0xFF	; 255
    6218:	f0 68       	ori	r31, 0x80	; 128
    621a:	3f 2e       	mov	r3, r31
    621c:	2a e0       	ldi	r18, 0x0A	; 10
    621e:	30 e0       	ldi	r19, 0x00	; 0
    6220:	a3 01       	movw	r20, r6
    6222:	33 d1       	rcall	.+614    	; 0x648a <__ultoa_invert>
    6224:	88 2e       	mov	r8, r24
    6226:	86 18       	sub	r8, r6
    6228:	44 c0       	rjmp	.+136    	; 0x62b2 <vfprintf+0x2c6>
    622a:	85 37       	cpi	r24, 0x75	; 117
    622c:	31 f4       	brne	.+12     	; 0x623a <vfprintf+0x24e>
    622e:	23 2d       	mov	r18, r3
    6230:	2f 7e       	andi	r18, 0xEF	; 239
    6232:	b2 2e       	mov	r11, r18
    6234:	2a e0       	ldi	r18, 0x0A	; 10
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	25 c0       	rjmp	.+74     	; 0x6284 <vfprintf+0x298>
    623a:	93 2d       	mov	r25, r3
    623c:	99 7f       	andi	r25, 0xF9	; 249
    623e:	b9 2e       	mov	r11, r25
    6240:	8f 36       	cpi	r24, 0x6F	; 111
    6242:	c1 f0       	breq	.+48     	; 0x6274 <vfprintf+0x288>
    6244:	18 f4       	brcc	.+6      	; 0x624c <vfprintf+0x260>
    6246:	88 35       	cpi	r24, 0x58	; 88
    6248:	79 f0       	breq	.+30     	; 0x6268 <vfprintf+0x27c>
    624a:	ae c0       	rjmp	.+348    	; 0x63a8 <vfprintf+0x3bc>
    624c:	80 37       	cpi	r24, 0x70	; 112
    624e:	19 f0       	breq	.+6      	; 0x6256 <vfprintf+0x26a>
    6250:	88 37       	cpi	r24, 0x78	; 120
    6252:	21 f0       	breq	.+8      	; 0x625c <vfprintf+0x270>
    6254:	a9 c0       	rjmp	.+338    	; 0x63a8 <vfprintf+0x3bc>
    6256:	e9 2f       	mov	r30, r25
    6258:	e0 61       	ori	r30, 0x10	; 16
    625a:	be 2e       	mov	r11, r30
    625c:	b4 fe       	sbrs	r11, 4
    625e:	0d c0       	rjmp	.+26     	; 0x627a <vfprintf+0x28e>
    6260:	fb 2d       	mov	r31, r11
    6262:	f4 60       	ori	r31, 0x04	; 4
    6264:	bf 2e       	mov	r11, r31
    6266:	09 c0       	rjmp	.+18     	; 0x627a <vfprintf+0x28e>
    6268:	34 fe       	sbrs	r3, 4
    626a:	0a c0       	rjmp	.+20     	; 0x6280 <vfprintf+0x294>
    626c:	29 2f       	mov	r18, r25
    626e:	26 60       	ori	r18, 0x06	; 6
    6270:	b2 2e       	mov	r11, r18
    6272:	06 c0       	rjmp	.+12     	; 0x6280 <vfprintf+0x294>
    6274:	28 e0       	ldi	r18, 0x08	; 8
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	05 c0       	rjmp	.+10     	; 0x6284 <vfprintf+0x298>
    627a:	20 e1       	ldi	r18, 0x10	; 16
    627c:	30 e0       	ldi	r19, 0x00	; 0
    627e:	02 c0       	rjmp	.+4      	; 0x6284 <vfprintf+0x298>
    6280:	20 e1       	ldi	r18, 0x10	; 16
    6282:	32 e0       	ldi	r19, 0x02	; 2
    6284:	f8 01       	movw	r30, r16
    6286:	b7 fe       	sbrs	r11, 7
    6288:	07 c0       	rjmp	.+14     	; 0x6298 <vfprintf+0x2ac>
    628a:	60 81       	ld	r22, Z
    628c:	71 81       	ldd	r23, Z+1	; 0x01
    628e:	82 81       	ldd	r24, Z+2	; 0x02
    6290:	93 81       	ldd	r25, Z+3	; 0x03
    6292:	0c 5f       	subi	r16, 0xFC	; 252
    6294:	1f 4f       	sbci	r17, 0xFF	; 255
    6296:	06 c0       	rjmp	.+12     	; 0x62a4 <vfprintf+0x2b8>
    6298:	60 81       	ld	r22, Z
    629a:	71 81       	ldd	r23, Z+1	; 0x01
    629c:	80 e0       	ldi	r24, 0x00	; 0
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	0e 5f       	subi	r16, 0xFE	; 254
    62a2:	1f 4f       	sbci	r17, 0xFF	; 255
    62a4:	a3 01       	movw	r20, r6
    62a6:	f1 d0       	rcall	.+482    	; 0x648a <__ultoa_invert>
    62a8:	88 2e       	mov	r8, r24
    62aa:	86 18       	sub	r8, r6
    62ac:	fb 2d       	mov	r31, r11
    62ae:	ff 77       	andi	r31, 0x7F	; 127
    62b0:	3f 2e       	mov	r3, r31
    62b2:	36 fe       	sbrs	r3, 6
    62b4:	0d c0       	rjmp	.+26     	; 0x62d0 <vfprintf+0x2e4>
    62b6:	23 2d       	mov	r18, r3
    62b8:	2e 7f       	andi	r18, 0xFE	; 254
    62ba:	a2 2e       	mov	r10, r18
    62bc:	89 14       	cp	r8, r9
    62be:	58 f4       	brcc	.+22     	; 0x62d6 <vfprintf+0x2ea>
    62c0:	34 fe       	sbrs	r3, 4
    62c2:	0b c0       	rjmp	.+22     	; 0x62da <vfprintf+0x2ee>
    62c4:	32 fc       	sbrc	r3, 2
    62c6:	09 c0       	rjmp	.+18     	; 0x62da <vfprintf+0x2ee>
    62c8:	83 2d       	mov	r24, r3
    62ca:	8e 7e       	andi	r24, 0xEE	; 238
    62cc:	a8 2e       	mov	r10, r24
    62ce:	05 c0       	rjmp	.+10     	; 0x62da <vfprintf+0x2ee>
    62d0:	b8 2c       	mov	r11, r8
    62d2:	a3 2c       	mov	r10, r3
    62d4:	03 c0       	rjmp	.+6      	; 0x62dc <vfprintf+0x2f0>
    62d6:	b8 2c       	mov	r11, r8
    62d8:	01 c0       	rjmp	.+2      	; 0x62dc <vfprintf+0x2f0>
    62da:	b9 2c       	mov	r11, r9
    62dc:	a4 fe       	sbrs	r10, 4
    62de:	0f c0       	rjmp	.+30     	; 0x62fe <vfprintf+0x312>
    62e0:	fe 01       	movw	r30, r28
    62e2:	e8 0d       	add	r30, r8
    62e4:	f1 1d       	adc	r31, r1
    62e6:	80 81       	ld	r24, Z
    62e8:	80 33       	cpi	r24, 0x30	; 48
    62ea:	21 f4       	brne	.+8      	; 0x62f4 <vfprintf+0x308>
    62ec:	9a 2d       	mov	r25, r10
    62ee:	99 7e       	andi	r25, 0xE9	; 233
    62f0:	a9 2e       	mov	r10, r25
    62f2:	09 c0       	rjmp	.+18     	; 0x6306 <vfprintf+0x31a>
    62f4:	a2 fe       	sbrs	r10, 2
    62f6:	06 c0       	rjmp	.+12     	; 0x6304 <vfprintf+0x318>
    62f8:	b3 94       	inc	r11
    62fa:	b3 94       	inc	r11
    62fc:	04 c0       	rjmp	.+8      	; 0x6306 <vfprintf+0x31a>
    62fe:	8a 2d       	mov	r24, r10
    6300:	86 78       	andi	r24, 0x86	; 134
    6302:	09 f0       	breq	.+2      	; 0x6306 <vfprintf+0x31a>
    6304:	b3 94       	inc	r11
    6306:	a3 fc       	sbrc	r10, 3
    6308:	10 c0       	rjmp	.+32     	; 0x632a <vfprintf+0x33e>
    630a:	a0 fe       	sbrs	r10, 0
    630c:	06 c0       	rjmp	.+12     	; 0x631a <vfprintf+0x32e>
    630e:	b2 14       	cp	r11, r2
    6310:	80 f4       	brcc	.+32     	; 0x6332 <vfprintf+0x346>
    6312:	28 0c       	add	r2, r8
    6314:	92 2c       	mov	r9, r2
    6316:	9b 18       	sub	r9, r11
    6318:	0d c0       	rjmp	.+26     	; 0x6334 <vfprintf+0x348>
    631a:	b2 14       	cp	r11, r2
    631c:	58 f4       	brcc	.+22     	; 0x6334 <vfprintf+0x348>
    631e:	b6 01       	movw	r22, r12
    6320:	80 e2       	ldi	r24, 0x20	; 32
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	76 d0       	rcall	.+236    	; 0x6412 <fputc>
    6326:	b3 94       	inc	r11
    6328:	f8 cf       	rjmp	.-16     	; 0x631a <vfprintf+0x32e>
    632a:	b2 14       	cp	r11, r2
    632c:	18 f4       	brcc	.+6      	; 0x6334 <vfprintf+0x348>
    632e:	2b 18       	sub	r2, r11
    6330:	02 c0       	rjmp	.+4      	; 0x6336 <vfprintf+0x34a>
    6332:	98 2c       	mov	r9, r8
    6334:	21 2c       	mov	r2, r1
    6336:	a4 fe       	sbrs	r10, 4
    6338:	0f c0       	rjmp	.+30     	; 0x6358 <vfprintf+0x36c>
    633a:	b6 01       	movw	r22, r12
    633c:	80 e3       	ldi	r24, 0x30	; 48
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	68 d0       	rcall	.+208    	; 0x6412 <fputc>
    6342:	a2 fe       	sbrs	r10, 2
    6344:	16 c0       	rjmp	.+44     	; 0x6372 <vfprintf+0x386>
    6346:	a1 fc       	sbrc	r10, 1
    6348:	03 c0       	rjmp	.+6      	; 0x6350 <vfprintf+0x364>
    634a:	88 e7       	ldi	r24, 0x78	; 120
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	02 c0       	rjmp	.+4      	; 0x6354 <vfprintf+0x368>
    6350:	88 e5       	ldi	r24, 0x58	; 88
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	b6 01       	movw	r22, r12
    6356:	0c c0       	rjmp	.+24     	; 0x6370 <vfprintf+0x384>
    6358:	8a 2d       	mov	r24, r10
    635a:	86 78       	andi	r24, 0x86	; 134
    635c:	51 f0       	breq	.+20     	; 0x6372 <vfprintf+0x386>
    635e:	a1 fe       	sbrs	r10, 1
    6360:	02 c0       	rjmp	.+4      	; 0x6366 <vfprintf+0x37a>
    6362:	8b e2       	ldi	r24, 0x2B	; 43
    6364:	01 c0       	rjmp	.+2      	; 0x6368 <vfprintf+0x37c>
    6366:	80 e2       	ldi	r24, 0x20	; 32
    6368:	a7 fc       	sbrc	r10, 7
    636a:	8d e2       	ldi	r24, 0x2D	; 45
    636c:	b6 01       	movw	r22, r12
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	50 d0       	rcall	.+160    	; 0x6412 <fputc>
    6372:	89 14       	cp	r8, r9
    6374:	30 f4       	brcc	.+12     	; 0x6382 <vfprintf+0x396>
    6376:	b6 01       	movw	r22, r12
    6378:	80 e3       	ldi	r24, 0x30	; 48
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	4a d0       	rcall	.+148    	; 0x6412 <fputc>
    637e:	9a 94       	dec	r9
    6380:	f8 cf       	rjmp	.-16     	; 0x6372 <vfprintf+0x386>
    6382:	8a 94       	dec	r8
    6384:	f3 01       	movw	r30, r6
    6386:	e8 0d       	add	r30, r8
    6388:	f1 1d       	adc	r31, r1
    638a:	80 81       	ld	r24, Z
    638c:	b6 01       	movw	r22, r12
    638e:	90 e0       	ldi	r25, 0x00	; 0
    6390:	40 d0       	rcall	.+128    	; 0x6412 <fputc>
    6392:	81 10       	cpse	r8, r1
    6394:	f6 cf       	rjmp	.-20     	; 0x6382 <vfprintf+0x396>
    6396:	22 20       	and	r2, r2
    6398:	09 f4       	brne	.+2      	; 0x639c <vfprintf+0x3b0>
    639a:	4e ce       	rjmp	.-868    	; 0x6038 <vfprintf+0x4c>
    639c:	b6 01       	movw	r22, r12
    639e:	80 e2       	ldi	r24, 0x20	; 32
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	37 d0       	rcall	.+110    	; 0x6412 <fputc>
    63a4:	2a 94       	dec	r2
    63a6:	f7 cf       	rjmp	.-18     	; 0x6396 <vfprintf+0x3aa>
    63a8:	f6 01       	movw	r30, r12
    63aa:	86 81       	ldd	r24, Z+6	; 0x06
    63ac:	97 81       	ldd	r25, Z+7	; 0x07
    63ae:	02 c0       	rjmp	.+4      	; 0x63b4 <vfprintf+0x3c8>
    63b0:	8f ef       	ldi	r24, 0xFF	; 255
    63b2:	9f ef       	ldi	r25, 0xFF	; 255
    63b4:	2b 96       	adiw	r28, 0x0b	; 11
    63b6:	0f b6       	in	r0, 0x3f	; 63
    63b8:	f8 94       	cli
    63ba:	de bf       	out	0x3e, r29	; 62
    63bc:	0f be       	out	0x3f, r0	; 63
    63be:	cd bf       	out	0x3d, r28	; 61
    63c0:	df 91       	pop	r29
    63c2:	cf 91       	pop	r28
    63c4:	1f 91       	pop	r17
    63c6:	0f 91       	pop	r16
    63c8:	ff 90       	pop	r15
    63ca:	ef 90       	pop	r14
    63cc:	df 90       	pop	r13
    63ce:	cf 90       	pop	r12
    63d0:	bf 90       	pop	r11
    63d2:	af 90       	pop	r10
    63d4:	9f 90       	pop	r9
    63d6:	8f 90       	pop	r8
    63d8:	7f 90       	pop	r7
    63da:	6f 90       	pop	r6
    63dc:	5f 90       	pop	r5
    63de:	4f 90       	pop	r4
    63e0:	3f 90       	pop	r3
    63e2:	2f 90       	pop	r2
    63e4:	08 95       	ret

000063e6 <strnlen_P>:
    63e6:	fc 01       	movw	r30, r24
    63e8:	05 90       	lpm	r0, Z+
    63ea:	61 50       	subi	r22, 0x01	; 1
    63ec:	70 40       	sbci	r23, 0x00	; 0
    63ee:	01 10       	cpse	r0, r1
    63f0:	d8 f7       	brcc	.-10     	; 0x63e8 <strnlen_P+0x2>
    63f2:	80 95       	com	r24
    63f4:	90 95       	com	r25
    63f6:	8e 0f       	add	r24, r30
    63f8:	9f 1f       	adc	r25, r31
    63fa:	08 95       	ret

000063fc <strnlen>:
    63fc:	fc 01       	movw	r30, r24
    63fe:	61 50       	subi	r22, 0x01	; 1
    6400:	70 40       	sbci	r23, 0x00	; 0
    6402:	01 90       	ld	r0, Z+
    6404:	01 10       	cpse	r0, r1
    6406:	d8 f7       	brcc	.-10     	; 0x63fe <strnlen+0x2>
    6408:	80 95       	com	r24
    640a:	90 95       	com	r25
    640c:	8e 0f       	add	r24, r30
    640e:	9f 1f       	adc	r25, r31
    6410:	08 95       	ret

00006412 <fputc>:
    6412:	0f 93       	push	r16
    6414:	1f 93       	push	r17
    6416:	cf 93       	push	r28
    6418:	df 93       	push	r29
    641a:	fb 01       	movw	r30, r22
    641c:	23 81       	ldd	r18, Z+3	; 0x03
    641e:	21 fd       	sbrc	r18, 1
    6420:	03 c0       	rjmp	.+6      	; 0x6428 <fputc+0x16>
    6422:	8f ef       	ldi	r24, 0xFF	; 255
    6424:	9f ef       	ldi	r25, 0xFF	; 255
    6426:	2c c0       	rjmp	.+88     	; 0x6480 <fputc+0x6e>
    6428:	22 ff       	sbrs	r18, 2
    642a:	16 c0       	rjmp	.+44     	; 0x6458 <fputc+0x46>
    642c:	46 81       	ldd	r20, Z+6	; 0x06
    642e:	57 81       	ldd	r21, Z+7	; 0x07
    6430:	24 81       	ldd	r18, Z+4	; 0x04
    6432:	35 81       	ldd	r19, Z+5	; 0x05
    6434:	42 17       	cp	r20, r18
    6436:	53 07       	cpc	r21, r19
    6438:	44 f4       	brge	.+16     	; 0x644a <fputc+0x38>
    643a:	a0 81       	ld	r26, Z
    643c:	b1 81       	ldd	r27, Z+1	; 0x01
    643e:	9d 01       	movw	r18, r26
    6440:	2f 5f       	subi	r18, 0xFF	; 255
    6442:	3f 4f       	sbci	r19, 0xFF	; 255
    6444:	31 83       	std	Z+1, r19	; 0x01
    6446:	20 83       	st	Z, r18
    6448:	8c 93       	st	X, r24
    644a:	26 81       	ldd	r18, Z+6	; 0x06
    644c:	37 81       	ldd	r19, Z+7	; 0x07
    644e:	2f 5f       	subi	r18, 0xFF	; 255
    6450:	3f 4f       	sbci	r19, 0xFF	; 255
    6452:	37 83       	std	Z+7, r19	; 0x07
    6454:	26 83       	std	Z+6, r18	; 0x06
    6456:	14 c0       	rjmp	.+40     	; 0x6480 <fputc+0x6e>
    6458:	8b 01       	movw	r16, r22
    645a:	ec 01       	movw	r28, r24
    645c:	fb 01       	movw	r30, r22
    645e:	00 84       	ldd	r0, Z+8	; 0x08
    6460:	f1 85       	ldd	r31, Z+9	; 0x09
    6462:	e0 2d       	mov	r30, r0
    6464:	19 95       	eicall
    6466:	89 2b       	or	r24, r25
    6468:	e1 f6       	brne	.-72     	; 0x6422 <fputc+0x10>
    646a:	d8 01       	movw	r26, r16
    646c:	16 96       	adiw	r26, 0x06	; 6
    646e:	8d 91       	ld	r24, X+
    6470:	9c 91       	ld	r25, X
    6472:	17 97       	sbiw	r26, 0x07	; 7
    6474:	01 96       	adiw	r24, 0x01	; 1
    6476:	17 96       	adiw	r26, 0x07	; 7
    6478:	9c 93       	st	X, r25
    647a:	8e 93       	st	-X, r24
    647c:	16 97       	sbiw	r26, 0x06	; 6
    647e:	ce 01       	movw	r24, r28
    6480:	df 91       	pop	r29
    6482:	cf 91       	pop	r28
    6484:	1f 91       	pop	r17
    6486:	0f 91       	pop	r16
    6488:	08 95       	ret

0000648a <__ultoa_invert>:
    648a:	fa 01       	movw	r30, r20
    648c:	aa 27       	eor	r26, r26
    648e:	28 30       	cpi	r18, 0x08	; 8
    6490:	51 f1       	breq	.+84     	; 0x64e6 <__ultoa_invert+0x5c>
    6492:	20 31       	cpi	r18, 0x10	; 16
    6494:	81 f1       	breq	.+96     	; 0x64f6 <__ultoa_invert+0x6c>
    6496:	e8 94       	clt
    6498:	6f 93       	push	r22
    649a:	6e 7f       	andi	r22, 0xFE	; 254
    649c:	6e 5f       	subi	r22, 0xFE	; 254
    649e:	7f 4f       	sbci	r23, 0xFF	; 255
    64a0:	8f 4f       	sbci	r24, 0xFF	; 255
    64a2:	9f 4f       	sbci	r25, 0xFF	; 255
    64a4:	af 4f       	sbci	r26, 0xFF	; 255
    64a6:	b1 e0       	ldi	r27, 0x01	; 1
    64a8:	3e d0       	rcall	.+124    	; 0x6526 <__ultoa_invert+0x9c>
    64aa:	b4 e0       	ldi	r27, 0x04	; 4
    64ac:	3c d0       	rcall	.+120    	; 0x6526 <__ultoa_invert+0x9c>
    64ae:	67 0f       	add	r22, r23
    64b0:	78 1f       	adc	r23, r24
    64b2:	89 1f       	adc	r24, r25
    64b4:	9a 1f       	adc	r25, r26
    64b6:	a1 1d       	adc	r26, r1
    64b8:	68 0f       	add	r22, r24
    64ba:	79 1f       	adc	r23, r25
    64bc:	8a 1f       	adc	r24, r26
    64be:	91 1d       	adc	r25, r1
    64c0:	a1 1d       	adc	r26, r1
    64c2:	6a 0f       	add	r22, r26
    64c4:	71 1d       	adc	r23, r1
    64c6:	81 1d       	adc	r24, r1
    64c8:	91 1d       	adc	r25, r1
    64ca:	a1 1d       	adc	r26, r1
    64cc:	20 d0       	rcall	.+64     	; 0x650e <__ultoa_invert+0x84>
    64ce:	09 f4       	brne	.+2      	; 0x64d2 <__ultoa_invert+0x48>
    64d0:	68 94       	set
    64d2:	3f 91       	pop	r19
    64d4:	2a e0       	ldi	r18, 0x0A	; 10
    64d6:	26 9f       	mul	r18, r22
    64d8:	11 24       	eor	r1, r1
    64da:	30 19       	sub	r19, r0
    64dc:	30 5d       	subi	r19, 0xD0	; 208
    64de:	31 93       	st	Z+, r19
    64e0:	de f6       	brtc	.-74     	; 0x6498 <__ultoa_invert+0xe>
    64e2:	cf 01       	movw	r24, r30
    64e4:	08 95       	ret
    64e6:	46 2f       	mov	r20, r22
    64e8:	47 70       	andi	r20, 0x07	; 7
    64ea:	40 5d       	subi	r20, 0xD0	; 208
    64ec:	41 93       	st	Z+, r20
    64ee:	b3 e0       	ldi	r27, 0x03	; 3
    64f0:	0f d0       	rcall	.+30     	; 0x6510 <__ultoa_invert+0x86>
    64f2:	c9 f7       	brne	.-14     	; 0x64e6 <__ultoa_invert+0x5c>
    64f4:	f6 cf       	rjmp	.-20     	; 0x64e2 <__ultoa_invert+0x58>
    64f6:	46 2f       	mov	r20, r22
    64f8:	4f 70       	andi	r20, 0x0F	; 15
    64fa:	40 5d       	subi	r20, 0xD0	; 208
    64fc:	4a 33       	cpi	r20, 0x3A	; 58
    64fe:	18 f0       	brcs	.+6      	; 0x6506 <__ultoa_invert+0x7c>
    6500:	49 5d       	subi	r20, 0xD9	; 217
    6502:	31 fd       	sbrc	r19, 1
    6504:	40 52       	subi	r20, 0x20	; 32
    6506:	41 93       	st	Z+, r20
    6508:	02 d0       	rcall	.+4      	; 0x650e <__ultoa_invert+0x84>
    650a:	a9 f7       	brne	.-22     	; 0x64f6 <__ultoa_invert+0x6c>
    650c:	ea cf       	rjmp	.-44     	; 0x64e2 <__ultoa_invert+0x58>
    650e:	b4 e0       	ldi	r27, 0x04	; 4
    6510:	a6 95       	lsr	r26
    6512:	97 95       	ror	r25
    6514:	87 95       	ror	r24
    6516:	77 95       	ror	r23
    6518:	67 95       	ror	r22
    651a:	ba 95       	dec	r27
    651c:	c9 f7       	brne	.-14     	; 0x6510 <__ultoa_invert+0x86>
    651e:	00 97       	sbiw	r24, 0x00	; 0
    6520:	61 05       	cpc	r22, r1
    6522:	71 05       	cpc	r23, r1
    6524:	08 95       	ret
    6526:	9b 01       	movw	r18, r22
    6528:	ac 01       	movw	r20, r24
    652a:	0a 2e       	mov	r0, r26
    652c:	06 94       	lsr	r0
    652e:	57 95       	ror	r21
    6530:	47 95       	ror	r20
    6532:	37 95       	ror	r19
    6534:	27 95       	ror	r18
    6536:	ba 95       	dec	r27
    6538:	c9 f7       	brne	.-14     	; 0x652c <__ultoa_invert+0xa2>
    653a:	62 0f       	add	r22, r18
    653c:	73 1f       	adc	r23, r19
    653e:	84 1f       	adc	r24, r20
    6540:	95 1f       	adc	r25, r21
    6542:	a0 1d       	adc	r26, r0
    6544:	08 95       	ret

00006546 <_exit>:
    6546:	f8 94       	cli

00006548 <__stop_program>:
    6548:	ff cf       	rjmp	.-2      	; 0x6548 <__stop_program>
